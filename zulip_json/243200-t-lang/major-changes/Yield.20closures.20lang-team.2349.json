[
    {
        "content": "<p>A new proposal has been announced: <a href=\"https://github.com/rust-lang/lang-team/issues/49\">Yield closures #49</a>. It will be announced at the next meeting to try and draw attention to it, but usually MCPs are not discussed during triage meetings. If you think this would benefit from discussion amongst the team, consider proposing a design meeting.</p>",
        "id": 208310636,
        "sender_full_name": "triagebot",
        "timestamp": 1598597267
    },
    {
        "content": "<p>(cc me)</p>",
        "id": 208334885,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1598617001
    },
    {
        "content": "<p>I'm not opposed to the idea, but I think that the timing isn't right. I feel like we should be focused on closing up work, not opening large new avenues.</p>",
        "id": 208352589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598626393
    },
    {
        "content": "<p>I do think we're going to want to look into generator functions</p>",
        "id": 208352635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598626411
    },
    {
        "content": "<p>And I think that would be a time to think over the possibility of a more general syntax as well</p>",
        "id": 208352684,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598626431
    },
    {
        "content": "<p>(though I'm not sure yet if I think it makes sense to do something more targeted at just writing iterators/streams, or whether to try and attack the general problem)</p>",
        "id": 208352776,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598626460
    },
    {
        "content": "<p>That is a fair concern! But personally I'd argue that this is all about closing up work. Rust has had unstable coroutines for a long while now and the ecosystem wants to use them. We just haven't polished the feature up enough to be stablizable. From my stalled rustc prototyping, I've gotten the impression that turning the current unstable generators into MVP yield closures is really not that huge a task:</p>\n<ol>\n<li>add the witness to the closure type variables</li>\n<li>add FnPin to core</li>\n<li>teach closures when to implement FnPin</li>\n<li>update the mir transform to do argument reassignment, not do enum-wrapping</li>\n<li>nuke ty::Generator</li>\n</ol>\n<p>There is a ton of misc logic all over the place of course but almost all of it has already been written and just needs to be pointed at ty::Closure instead of ty::Generator.</p>",
        "id": 208376713,
        "sender_full_name": "Sam Sartor",
        "timestamp": 1598638097
    },
    {
        "content": "<p>As for generator functions, iterators, and streams, crates like propane are already dealing with that. They just need this to be stable.</p>",
        "id": 208376821,
        "sender_full_name": "Sam Sartor",
        "timestamp": 1598638180
    },
    {
        "content": "<p>Implementation complexity is a non-issue, the language feature needs to be designed first.</p>",
        "id": 208377159,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1598638368
    },
    {
        "content": "<p>Fair enough! That is why this discussion is taking place! I hope me, <span class=\"user-mention\" data-user-id=\"132829\">@Christopher Durham</span> ,  pcpthm, and pitaj have refined this down to the bikesheds. But if we hit any big unresolved questions that would absolutely be a reason to defer this.</p>",
        "id": 208377415,
        "sender_full_name": "Sam Sartor",
        "timestamp": 1598638542
    },
    {
        "content": "<p>I'm thoroughly excited about this idea, and I'd love to see it happen. My only concern would be whether it's actually through all the bikeshedding at this point.</p>",
        "id": 208377597,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598638644
    },
    {
        "content": "<p>I wouldn't be opposed to, for instance, having the lang team review it, and if there's consensus that this is the right bikeshed color we could approve it, whereas if there's dissensus and a desire for further design, we'd want to defer it rather than chartering a group for it right now.</p>",
        "id": 208377712,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598638699
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Thoughts on that? Effectively, a single \"go/postpone\" decision, without agreeing to do/charter further iterative design work on this?</p>",
        "id": 208377788,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598638756
    },
    {
        "content": "<p>I remember arg reassignment being very controversial the last time it was discussed.</p>",
        "id": 208377795,
        "sender_full_name": "Amanieu",
        "timestamp": 1598638762
    },
    {
        "content": "<p>/me wasn't aware it was previously discussed.</p>",
        "id": 208377810,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598638775
    },
    {
        "content": "<p>It's definitely a major part of the design. It seems appealing to me given the examples shown. I'm not sure what the alternatives would be.</p>",
        "id": 208377860,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598638801
    },
    {
        "content": "<p>For <code>yield</code> to return a value with the arguments passed in.</p>",
        "id": 208378009,
        "sender_full_name": "Amanieu",
        "timestamp": 1598638881
    },
    {
        "content": "<p>It got a ton of discussion in RFC-2781 but it's had a year to stew since then. I think the pros on the side of reassignment are pretty solid at this point and it we just have to convince people of that.</p>",
        "id": 208378024,
        "sender_full_name": "Sam Sartor",
        "timestamp": 1598638892
    },
    {
        "content": "<p>I literally just summarized some of them under the issue if anyone is curious: <a href=\"https://github.com/rust-lang/lang-team/issues/49#issuecomment-682986757\">https://github.com/rust-lang/lang-team/issues/49#issuecomment-682986757</a></p>",
        "id": 208378675,
        "sender_full_name": "Sam Sartor",
        "timestamp": 1598639186
    },
    {
        "content": "<p>Fair enough, I'm convinced.</p>",
        "id": 208379336,
        "sender_full_name": "Amanieu",
        "timestamp": 1598639553
    },
    {
        "content": "<p>Just to be clear, are the arguments updated by the yield in-place, or do the names always point to the latest arguments of the closure. The difference is that in the first case their address is guaranteed to be constant across multiple closure invocations.</p>",
        "id": 208379471,
        "sender_full_name": "Amanieu",
        "timestamp": 1598639628
    },
    {
        "content": "<p>The arguments don't live in the closure state unless the user moves them into a binding. Like all arguments they live on the function call stack and thus don't have a stable address. But  don't know if I'd say the names \"point\" at them. You'll have to explain more what you mean by that.</p>",
        "id": 208380477,
        "sender_full_name": "Sam Sartor",
        "timestamp": 1598640134
    },
    {
        "content": "<p>Going into a <code>yield</code> the unmoved arguments get dropped, just like they would going into a <code>return</code>. Coming out of a <code>yield</code>, the bindings receive new values, just like they would when called again after <code>return</code>. But inside the closure the suspension is transparent, so as far as borrow checking is concerned, <code>yield</code> looks like <code>arg = ...</code>.</p>",
        "id": 208381057,
        "sender_full_name": "Sam Sartor",
        "timestamp": 1598640478
    },
    {
        "content": "<p>How do you distinguish movable and immovable generators with this proposal? Not at all?</p>",
        "id": 208382725,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1598641350
    },
    {
        "content": "<p>I remain unconvinced that mutating the closure arguments after a <code>yield</code> is the right solution. Perhaps that means that we shouldn't try to reuse closure syntax for this at all.</p>",
        "id": 208382815,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1598641401
    },
    {
        "content": "<p>I believe that we should be able to infer movability based on the existence of references across yield points. For example, <code>pin_mut!(thing); yield</code> would kill the FnMut implementation (leaving only FnPin + FnOnce) since it constructs a reference which exists until the end of the block. Alternatively, we could instead consider reference liveness (rather than reference existence) and require <code>pin_mut</code> to put a PhantomPinned onto the coroutine stack. An explicit closure modifier is possible to use instead of this inference but I dislike that solution. Especially because closures already do similar work to decide which of Fn/FnMut/FnOnce to implement.</p>",
        "id": 208388415,
        "sender_full_name": "Sam Sartor",
        "timestamp": 1598644625
    },
    {
        "content": "<p>The key observation of this proposal is that we aren't really reusing the closure syntax at all. Closures are already so close to being coroutines (have mutable internal state, gain control of execution with arguments, yield execution with an output) that making them unable to yield is nearly an artificial limitation. We aren't overloading a syntax for a new language feature. We are just extending the capabilities of an already powerful part of Rust.</p>",
        "id": 208388804,
        "sender_full_name": "Sam Sartor",
        "timestamp": 1598644814
    },
    {
        "content": "<p>Once you see it that way, I think re-assigning the arguments is simply the obvious thing to do: How should we pass arguments? Why, through the arguments of course.</p>",
        "id": 208389028,
        "sender_full_name": "Sam Sartor",
        "timestamp": 1598644959
    },
    {
        "content": "<p>Closure syntax only works because they have a single entry point. Once you have multiple entry points, why should all of them use the set of arguments defined at the very first entry point? This does not make much sense to me.</p>",
        "id": 208389302,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1598645120
    },
    {
        "content": "<p>Because every entry point takes the same arguments.</p>",
        "id": 208389474,
        "sender_full_name": "Sam Sartor",
        "timestamp": 1598645222
    },
    {
        "content": "<p>I don't expect you to really be convinced just because I say I've done it both ways and \"trust me\". So play around with it a bit.</p>",
        "id": 208389807,
        "sender_full_name": "Sam Sartor",
        "timestamp": 1598645430
    },
    {
        "content": "<p>I have – isn't that why you pinged me?</p>",
        "id": 208390414,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1598645816
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/243200-t-lang.2Fmajor-changes/topic/Yield.20closures.20lang-team.2349/near/208352589\">said</a>:</p>\n<blockquote>\n<p>I'm not opposed to the idea, but I think that the timing isn't right. I feel like we should be focused on closing up work, not opening large new avenues.</p>\n</blockquote>\n<p>given the amount of discussion going on, it seems like maybe Niko's original point that we should avoid major new features for now still applies?</p>",
        "id": 208390783,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598646007
    },
    {
        "content": "<p>Of course. You implemented resume arguments for generators, making you an expert on yield-as-an-expression. I was just hoping we could talk about the trade-offs with some more concrete examples. Some people (i.e.  myself a year ago) have a knee-jerk reaction to \"magic mutation\" since mutation in rust usually means someone is holding your data ransom with a <code>&amp;mut</code>. I've gotten into the habit of looking instead at specific cases when talking about it.</p>",
        "id": 208390981,
        "sender_full_name": "Sam Sartor",
        "timestamp": 1598646147
    },
    {
        "content": "<p>Re the amount of discussion: I still have to defend my choice of bikeshed color. I'm just expecting there aren't any new solutions needed that would eat up lang-team resources to develop.</p>",
        "id": 208391237,
        "sender_full_name": "Sam Sartor",
        "timestamp": 1598646316
    },
    {
        "content": "<p>One thing I think we mentioned in the issue that I want to surface up</p>",
        "id": 208890112,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599082021
    },
    {
        "content": "<p>I think it'd be great to see a comprehensive summary documenting the various design considerations and how you would resolve them</p>",
        "id": 208890138,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599082035
    },
    {
        "content": "<p>I'd love to see this as a PR for the <a href=\"https://lang-team.rust-lang.org/design_notes.html\">design notes</a> section</p>",
        "id": 208890162,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599082052
    },
    {
        "content": "<p>I would say that I would be willing to hold off on deciding one way or the other on how much this is in scope until I've had a chance to review that...</p>",
        "id": 208890179,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599082070
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"222520\">@Sam Sartor</span> I skimmed the thread above but I confess I skipped past links, does such a summary exist?</p>",
        "id": 208890235,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599082084
    },
    {
        "content": "<p>I think that'd be an amazing contribution</p>",
        "id": 208890251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599082096
    },
    {
        "content": "<p>I've been thinking one through although I don't have time today to write it.</p>",
        "id": 208890286,
        "sender_full_name": "Sam Sartor",
        "timestamp": 1599082124
    },
    {
        "content": "<p>I didnt necessarily mean <em>today</em> :)</p>",
        "id": 208890326,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599082153
    },
    {
        "content": "<p>and it doesn't have to be \"essay quality\"</p>",
        "id": 208890367,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599082183
    },
    {
        "content": "<p>i.e., I think of it more like bullet points and/or links, something to help people get up to speed, not like an RFC</p>",
        "id": 208890408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599082202
    },
    {
        "content": "<p>I wrote <a href=\"http://samsartor.com/coroutines-1\">a blog post a while back</a> that did a little bit of summarization, but that was pre-yield-closures. It is actually a bit funny now looking at in in retrospect, when the solution seems so obvious.</p>\n<p>Edit: note that blog post does have some factual errors that only got caught in later discussion</p>",
        "id": 208890453,
        "sender_full_name": "Sam Sartor",
        "timestamp": 1599082227
    },
    {
        "content": "<p>It wouldn't take long at all to bullet-point the remaining bikesheds for yield closures (poison states, enum wrapping). What would take longer is summarizing all the competing proposals which have surfaced over the last couple of years. As many people have observed, generalized coroutines are a huge design space if you don't constrain them somehow (e.g. by extending an existing language  feature instead).</p>",
        "id": 208890852,
        "sender_full_name": "Sam Sartor",
        "timestamp": 1599082494
    },
    {
        "content": "<p>I took a crack at that summary! <a href=\"https://github.com/samsartor/lang-team/blob/master/src/design_notes/general_coroutines.md\">https://github.com/samsartor/lang-team/blob/master/src/design_notes/general_coroutines.md</a></p>\n<p>Let me know if there is anything I can add or answer better. I tried to strike a balance between exhaustively detailing our MCP vs trying to put it in the context of prior proposals but I don't know if I found it.</p>",
        "id": 209166857,
        "sender_full_name": "Sam Sartor",
        "timestamp": 1599292466
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"222520\">@Sam Sartor</span> awesome!</p>",
        "id": 210048516,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600110070
    }
]