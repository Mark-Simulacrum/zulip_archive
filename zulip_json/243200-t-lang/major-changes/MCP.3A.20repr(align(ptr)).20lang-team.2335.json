[
    {
        "content": "<p>I'm debugging why the stream doesn't have an announcement now</p>",
        "id": 203653217,
        "sender_full_name": "simulacrum",
        "timestamp": 1594575699
    },
    {
        "content": "<p>Well it looks like we've got just a topic/thread, within the <code>t-lang/major changes</code> stream, and I don't think there's normally an announcement for just a topic.</p>",
        "id": 203666490,
        "sender_full_name": "Lokathor",
        "timestamp": 1594596907
    },
    {
        "content": "<p>rather than adding a special case, what about allowing arbitrary constant expressions? <code>repr(align(size_of::&lt;*const u8&gt;()))</code></p>",
        "id": 203671078,
        "sender_full_name": "comex",
        "timestamp": 1594604661
    },
    {
        "content": "<p>(also, why does AtomicPtr even need explicit alignment? are there any targets where pointers are not naturally aligned already?)</p>",
        "id": 203671181,
        "sender_full_name": "comex",
        "timestamp": 1594604852
    },
    {
        "content": "<p>(yeah I think it'd be a lot better as a repr(transparent) type, but then we can't have this great MCP where we allow const expressions as alignment values)</p>",
        "id": 203671252,
        "sender_full_name": "Lokathor",
        "timestamp": 1594604970
    },
    {
        "content": "<p>lol</p>",
        "id": 203671256,
        "sender_full_name": "comex",
        "timestamp": 1594604980
    },
    {
        "content": "<p>I guess one concern with allowing any const expression is that you could make a depencency loop, but that can just give a compile error with a message.</p>",
        "id": 203671302,
        "sender_full_name": "Lokathor",
        "timestamp": 1594605019
    },
    {
        "content": "<p>for prior art, I've used <code>alignas(SOME_CONSTANT)</code> fairly often in C++</p>",
        "id": 203671313,
        "sender_full_name": "comex",
        "timestamp": 1594605070
    },
    {
        "content": "<p>â€¦partly for the benefit of getting a compile error if I accidentally include a field with higher alignment, though it looks like Rust doesn't have such a diagnostic yet (<a href=\"https://github.com/rust-lang/rust/issues/48159\">https://github.com/rust-lang/rust/issues/48159</a>)</p>",
        "id": 203671608,
        "sender_full_name": "comex",
        "timestamp": 1594605582
    },
    {
        "content": "<p>To add to this one, <code>repr(align(size))</code> might be interesting too, so that <code>#[repr(align(size))] struct Foo(usize, usize);</code> would have align <code>2*ptr</code>.</p>",
        "id": 204465288,
        "sender_full_name": "scottmcm",
        "timestamp": 1595273316
    },
    {
        "content": "<p>Seems logical to have short-hands for the two non-literal common scenarios...</p>",
        "id": 204465366,
        "sender_full_name": "scottmcm",
        "timestamp": 1595273358
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span>, I saw you self-assigned to this issue. Is the intent that you'd like to work with <span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> on this? </p>\n<p>Should we make a project group? (I just mean an issue on the lang-team repo and a stream where folks who are interested can chat, though we could make a repo too if desired.)</p>",
        "id": 204479983,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595281420
    },
    {
        "content": "<p>Yup; I'll sign up for that.</p>\n<p>A whole repo seems like overkill to me, since I don't think this will introduce any new semantics.  I'm not sure what process things are appropriate.</p>",
        "id": 204492652,
        "sender_full_name": "scottmcm",
        "timestamp": 1595284964
    },
    {
        "content": "<p>There seem to be a few improvements over my base idea already, so a GitHub issue or Zulip stream seems to be the right start</p>",
        "id": 204496217,
        "sender_full_name": "Lokathor",
        "timestamp": 1595287208
    },
    {
        "content": "<p>or even this topic i guess</p>",
        "id": 204496229,
        "sender_full_name": "Lokathor",
        "timestamp": 1595287226
    },
    {
        "content": "<p>nah let's make a dedicated stream, keep things organized</p>",
        "id": 204592920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595360135
    },
    {
        "content": "<p>Is that something I can do?  Or was it created and my zulip-foo just isn't strong enough?</p>\n<p>(Sorry for delay, Lokathor, but I'm back from the week at my friend's wedding.)</p>",
        "id": 205564202,
        "sender_full_name": "scottmcm",
        "timestamp": 1596179804
    },
    {
        "content": "<p>the general workflow is now something like:</p>\n<ul>\n<li>project group charter: FCP to pass and makes a zulip once it's accepted.</li>\n<li>project group works up a sturdy RFC</li>\n<li>Once the RFC seems sturdy enough it gets posted.</li>\n</ul>\n<p>The aim is to move the normal RFC discussion out of the PR thread itself and into zulip, where it's easier to follow along conversation topics individually.</p>",
        "id": 205565590,
        "sender_full_name": "Lokathor",
        "timestamp": 1596181206
    },
    {
        "content": "<p>Yeah, I can make the stream, but I was waiting until we had a charter</p>",
        "id": 205592464,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596203773
    },
    {
        "content": "<p>I will be writing that later today probably.</p>\n<p>I plain aim for the \"simple names\" that have been proposed (<code>ptr</code> and <code>size</code>), and I think that making it accept any arbitrary const expression is probably a separate, bigger design, that should probably be proposed once const generics and const evaluation in general is far more complete.</p>",
        "id": 205593126,
        "sender_full_name": "Lokathor",
        "timestamp": 1596204110
    },
    {
        "content": "<p><a href=\"https://hackmd.io/_Gtlwyn0S1CN3VbKYbPNrg\">https://hackmd.io/_Gtlwyn0S1CN3VbKYbPNrg</a></p>",
        "id": 205657301,
        "sender_full_name": "Lokathor",
        "timestamp": 1596245076
    },
    {
        "content": "<p>I support keeping it simple <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 205666754,
        "sender_full_name": "scottmcm",
        "timestamp": 1596261755
    },
    {
        "content": "<blockquote>\n<p><code>#[repr(align(size))]</code></p>\n</blockquote>\n<p>how is this possible? what is <code>#[repr(align(size))] struct Three(u32, u32, u32);</code> ?</p>",
        "id": 205673319,
        "sender_full_name": "kennytm",
        "timestamp": 1596273714
    },
    {
        "content": "<p>We'll find out once the group is founded and starts it discussions.</p>",
        "id": 205680641,
        "sender_full_name": "Lokathor",
        "timestamp": 1596287163
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125254\">@kennytm</span> 4 bytes of padding, same as how <code>#[repr(align(8))] struct One(u32);</code> gets padding.</p>",
        "id": 205849432,
        "sender_full_name": "scottmcm",
        "timestamp": 1596490175
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> so that means the alignment is the original size rounded up to the next power of 2?</p>",
        "id": 205870849,
        "sender_full_name": "kennytm",
        "timestamp": 1596512671
    },
    {
        "content": "<p>funny, i was thinking it would just error if the size isn't a power of two</p>",
        "id": 205873863,
        "sender_full_name": "Lokathor",
        "timestamp": 1596517704
    },
    {
        "content": "<p>but there's a good reason that was just a bonus idea next to the main idea</p>",
        "id": 205873875,
        "sender_full_name": "Lokathor",
        "timestamp": 1596517730
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125254\">@kennytm</span> That's what I was expecting, yes.  <code>align(8)</code> makes the size as small as possible while still maintaining size=8*n, so <code>align(size)</code> would make the size as small as possible while still maintaining size=align -- and the implementation of that would be to do what you said.</p>\n<p>(But as Lokathor says, it's not an essential addition.  Might still get cut.)</p>",
        "id": 205874599,
        "sender_full_name": "scottmcm",
        "timestamp": 1596519027
    }
]