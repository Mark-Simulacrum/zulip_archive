[
    {
        "content": "<p>A new proposal has been announced: <a href=\"https://github.com/rust-lang/lang-team/issues/151\">extern macro!(ABI) fn #151</a>. It will be announced at the next meeting to try and draw attention to it, but usually MCPs are not discussed during triage meetings. If you think this would benefit from discussion amongst the team, consider proposing a design meeting.</p>",
        "id": 275846685,
        "sender_full_name": "triagebot",
        "timestamp": 1647629350
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1977\">@T-lang</span>: Proposal <a href=\"https://github.com/rust-lang/lang-team/issues/151#issuecomment-1072730880\">#151</a> has been seconded, and will be approved in 10 days if no objections are raised.</p>",
        "id": 275850360,
        "sender_full_name": "triagebot",
        "timestamp": 1647631096
    },
    {
        "content": "<p>Would using a lot of little macros noticeably affect compile times? Say, hypothetically, the <a href=\"https://crates.io/crates/windows\">windows</a> crate had to use <code>abi!(system)</code> for each <code>extern</code>? It can have a lot of them in COM vtables (e.g. <a href=\"https://github.com/microsoft/windows-rs/blob/a8c1a5a14f567551331ad74ba296edbbc1f89897/crates/libs/windows/src/Windows/Media/SpeechRecognition/mod.rs#L37-L81\">one example</a> of many).</p>",
        "id": 275858556,
        "sender_full_name": "Chris Denton",
        "timestamp": 1647635203
    },
    {
        "content": "<p>In zig you can evaluate an ABI to a const and then put that const as the ABI of however many functions you want. That might be a little out of scope for what this MCP was about though.</p>",
        "id": 275860846,
        "sender_full_name": "Lokathor",
        "timestamp": 1647636600
    },
    {
        "content": "<p>The motivation here comes mainly from <a href=\"https://github.com/rust-lang/rust/issues/42202\">https://github.com/rust-lang/rust/issues/42202</a>, and that issue is better solved by making <code>thiscall</code> a \"generic\" ABI like <code>system</code>  (or by splitting <code>thiscall</code> into two ABIs, one generic and one concrete working only on i686, like <code>system</code> and <code>stdcall</code> pair), so that tools like bindgen can generate target-independent Rust signatures for C++ methods.</p>",
        "id": 275865466,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1647639134
    },
    {
        "content": "<p>I'm not aware of other ABIs, besides <code>stdcall</code> (due to WinAPI) and <code>thiscall</code> (due to C++) that need this kind of cross-platform treatment in practice.</p>",
        "id": 275865783,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1647639332
    },
    {
        "content": "<p>Related <a href=\"https://stackoverflow.com/q/49479854/155423\">https://stackoverflow.com/q/49479854/155423</a></p>",
        "id": 275867998,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1647640859
    },
    {
        "content": "<p>If it's to solve a specific ABI concern, we can probably just add one extra ABI instead of opening up the macro worms</p>",
        "id": 275869021,
        "sender_full_name": "Lokathor",
        "timestamp": 1647641595
    },
    {
        "content": "<p>I'd like this for lccc (host). I have a very annoying rustcall macro, that emulates the behaviour of lccc's extern \"Rust\" by expanding to either extern \"C\" or extern \"fastcall\" depending on the target. I'd love if I can just put the macro into the abi position instead of wrapping fn definitions, extern blocks, or types in this macro.</p>",
        "id": 275869809,
        "sender_full_name": "Connor Horman",
        "timestamp": 1647642160
    },
    {
        "content": "<p>I do this for several reasons, the main one being so that (when lccc self-hosts) I can exploit the known abi details to avoid stupidly slow emulation paths.</p>",
        "id": 275870009,
        "sender_full_name": "Connor Horman",
        "timestamp": 1647642315
    },
    {
        "content": "<p>I don't understand what the \"macro worms\" are that <span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> is referencing. </p>\n<p>To me, the ability to put a macro in that position is a way to <em>sidestep entirely</em> the debate that I see emerging on <a href=\"https://github.com/rust-lang/rust/issues/42202#issuecomment-1006213947\">issue 42202</a>, where one group sees the current \"hard error outside i686\" behavior as desirable, while another group sees the \"fallback to something reasonable outside i686\" as desirable.</p>",
        "id": 275912772,
        "sender_full_name": "pnkfelix",
        "timestamp": 1647699718
    },
    {
        "content": "<p>Is the concern denoted by \"macro worms\", is it that it will complicate tools outside the compiler that want to be able to analyze Rust code, because a fixed (if ever growing) set of ABI strings is fundamentally easier to deal with an arbitrary macro expressions?</p>",
        "id": 275912851,
        "sender_full_name": "pnkfelix",
        "timestamp": 1647699824
    },
    {
        "content": "<p>Yeah, I'm unsure what the issue is within rust. It seems easy enough to change from parsing only a string literal into parsing string literal|macro invocation, speaking as someone who at this moment is writing a rust parser.</p>",
        "id": 275913062,
        "sender_full_name": "Connor Horman",
        "timestamp": 1647700095
    },
    {
        "content": "<p>Yeah I'm saying that macros are a \"can of worms\", as in \"they're a whole lot of trouble\". They're generally poorly documented, give poor errors, and work poorly with RA.</p>",
        "id": 275913072,
        "sender_full_name": "Lokathor",
        "timestamp": 1647700105
    },
    {
        "content": "<p>IME, at least declarative macros are fine with RA. Only proc-macros have issues.</p>",
        "id": 275913164,
        "sender_full_name": "Connor Horman",
        "timestamp": 1647700240
    },
    {
        "content": "<p>declarative macros tend to give the worst errors when things go wrong</p>",
        "id": 275913181,
        "sender_full_name": "Lokathor",
        "timestamp": 1647700290
    },
    {
        "content": "<p>If the point of expanding where macros can happen is to sidestep a single particular debate about if an ABI string has a fallback on inappropriate platforms then really we should just have that one debate and not spread where macros are used.</p>",
        "id": 275913253,
        "sender_full_name": "Lokathor",
        "timestamp": 1647700382
    },
    {
        "content": "<p>It can also be used, as I mentioned above, as a more general selector based on cfg variables.<br>\n<code>rustcall!(\"rustcall-v0\")</code> isn't a case of \"Pick fastcall where available, and fallback to C otherwise\", its \"the ABI of this function depends on the target\".</p>",
        "id": 275913708,
        "sender_full_name": "Connor Horman",
        "timestamp": 1647701086
    },
    {
        "content": "<p>I don't think expanding to fastcall on x64 should be encouraged because essentially all ABI arguments on x64 are ignored. While I may have mentioned that the x64 Windows calling convention is like fastcall, it has quite a few changes.</p>",
        "id": 276580905,
        "sender_full_name": "Jubilee",
        "timestamp": 1648189697
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/243200-t-lang.2Fmajor-changes/topic/extern.20macro!.28ABI.29.20fn.20lang-team.23151/near/276580905\">said</a>:</p>\n<blockquote>\n<p>I don't think expanding to fastcall on x64 should be encouraged because essentially all ABI arguments on x64 are ignored. While I may have mentioned that the x64 Windows calling convention is like fastcall, it has quite a few changes.</p>\n</blockquote>\n<p>I do hope we eventually support both the Windows and SYSV calling conventions on x86-64 targets. It's useful to be able to cross-call, in some contexts (e.g. firmware)..</p>",
        "id": 276581796,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648190984
    },
    {
        "content": "<p>There is the uefi calling convention. This matches the unix call conv on platforms that don't have windows support and the windows call conv on those that do I believe.</p>",
        "id": 276582613,
        "sender_full_name": "bjorn3",
        "timestamp": 1648191946
    },
    {
        "content": "<p>There is the uefi calling convention. This matches the unix call conv on platforms that don't have windows support and the windows call conv on those that do I believe.</p>",
        "id": 276582673,
        "sender_full_name": "bjorn3",
        "timestamp": 1648191977
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/243200-t-lang.2Fmajor-changes/topic/extern.20macro!.28ABI.29.20fn.20lang-team.23151/near/276581796\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/243200-t-lang.2Fmajor-changes/topic/extern.20macro!.28ABI.29.20fn.20lang-team.23151/near/276580905\">said</a>:</p>\n<blockquote>\n<p>I don't think expanding to fastcall on x64 should be encouraged because essentially all ABI arguments on x64 are ignored. While I may have mentioned that the x64 Windows calling convention is like fastcall, it has quite a few changes.</p>\n</blockquote>\n<p>I do hope we eventually support both the Windows and SYSV calling conventions on x86-64 targets. It's useful to be able to cross-call, in some contexts (e.g. firmware)..</p>\n</blockquote>\n<p>We already support the Windows calling convention on x64. We call it <code>\"C\"</code>.</p>",
        "id": 276583407,
        "sender_full_name": "Jubilee",
        "timestamp": 1648192642
    },
    {
        "content": "<p>We have actually made the worst possible choice arguably for being able to emit correct code when asked: we implemented the MSVC pattern of accepting arguments but ignoring them sometimes.</p>",
        "id": 276583478,
        "sender_full_name": "Jubilee",
        "timestamp": 1648192722
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/243200-t-lang.2Fmajor-changes/topic/extern.20macro!.28ABI.29.20fn.20lang-team.23151/near/276583407\">said</a>:</p>\n<blockquote>\n<p>We already support the Windows calling convention on x64. We call it <code>\"C\"</code>.</p>\n</blockquote>\n<p>( or win64, or sysv64 )</p>",
        "id": 276583766,
        "sender_full_name": "Jubilee",
        "timestamp": 1648193067
    },
    {
        "content": "<p>Ah damn, I've definitely wanted this before, and recently, to switch between <code>extern \"C\"</code> and <code>extern \"system\"</code>. Bummer.</p>",
        "id": 276584624,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1648194006
    },
    {
        "content": "<p>Proc macros wouldn't really be great here because it would break compilation on musl, which the code currently otherwise supports.</p>",
        "id": 276584795,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1648194209
    },
    {
        "content": "<p>I was just going to pregenerate the bindgen output twice, once for windows (well, specifically, once for the windows version of this library which is different than the code it uses elsewhere) and once for everything else.</p>",
        "id": 276584893,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1648194282
    },
    {
        "content": "<p>But it would be nice to not need to do this</p>",
        "id": 276584897,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1648194287
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"209168\">Thom Chiovoloni</span> <a href=\"#narrow/stream/243200-t-lang.2Fmajor-changes/topic/extern.20macro!.28ABI.29.20fn.20lang-team.23151/near/276584795\">said</a>:</p>\n<blockquote>\n<p>Proc macros wouldn't really be great here because it would break compilation on musl, which the code currently otherwise supports.</p>\n</blockquote>\n<p>musl being static-linked by default and screwing up the sysroot is just a bug tho'.</p>",
        "id": 276585050,
        "sender_full_name": "Jubilee",
        "timestamp": 1648194452
    },
    {
        "content": "<p>Even if musl became dynamically linked it would still be broken on targets with static CRT no?</p>",
        "id": 276585193,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1648194567
    },
    {
        "content": "<p>A proc macro would also slow down builds of what would otherwise leaf of the crate graph a good amount.</p>",
        "id": 276585219,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1648194598
    },
    {
        "content": "<p>What if we just make macros faster.</p>",
        "id": 276585323,
        "sender_full_name": "Jubilee",
        "timestamp": 1648194664
    },
    {
        "content": "<p>Proc macros? It seems impossible?</p>",
        "id": 276585693,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1648194956
    },
    {
        "content": "<p>To make them as fast as declarative macros</p>",
        "id": 276585739,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1648194964
    },
    {
        "content": "<p>None of these are options I'd take above pregenerating a separate file.</p>",
        "id": 276585780,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1648195015
    },
    {
        "content": "<p>Except for the <code>extern abi!() { ... }</code>, at least. Which doesn't hold to the objection given.</p>",
        "id": 276585836,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1648195074
    },
    {
        "content": "<p><del>what if we JIT the proc macro</del> I mean uh</p>",
        "id": 276585918,
        "sender_full_name": "Jubilee",
        "timestamp": 1648195127
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"209168\">Thom Chiovoloni</span> <a href=\"#narrow/stream/243200-t-lang.2Fmajor-changes/topic/extern.20macro!.28ABI.29.20fn.20lang-team.23151/near/276585193\">said</a>:</p>\n<blockquote>\n<p>Even if musl became dynamically linked it would still be broken on targets with static CRT no?</p>\n</blockquote>\n<p>Rustc doesn't support any targets with static CRT. rustc_driver is only built as dynamic library.</p>",
        "id": 276586539,
        "sender_full_name": "bjorn3",
        "timestamp": 1648195599
    },
    {
        "content": "<p>Hmm, I see.</p>",
        "id": 276586595,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1648195650
    },
    {
        "content": "<p>Perhaps I'm mistaken at that point. I remember a reason that proc macros don't work on static targets, which has been that way for quite a while.</p>",
        "id": 276586612,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1648195677
    },
    {
        "content": "<p>They should work if you force dynamic linking of libc for the proc macro I think.</p>",
        "id": 276586908,
        "sender_full_name": "bjorn3",
        "timestamp": 1648195906
    },
    {
        "content": "<p>All of the discussion so far seems to be about ABIs - I think the macro aspect needs further discussion</p>",
        "id": 276802491,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648407673
    },
    {
        "content": "<p>As far as I know, this would be one of the few (if any) places where we support macro calls in some kind of 'header'</p>",
        "id": 276802553,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648407755
    },
    {
        "content": "<p>e.g you can't write <code>fn bar(arg: mac!())</code> or <code>impl MyTrait for mac!()</code></p>",
        "id": 276802576,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648407826
    },
    {
        "content": "<p>I don't have anything against allowing <code>extern macro!()</code>, but we might want to think about if there are any places where we definitely <em>don't</em> want to allow <code>mac!()</code></p>",
        "id": 276802641,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648407902
    },
    {
        "content": "<p>For example, allowing macro calls at the <em>beginning</em> of some header seems like a nonstarter (e.g. <code>expand_to_extern!() \"C\" fn bar() { }</code>, since we would be unable to continue parsing until the macro is expanded</p>",
        "id": 276802704,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648407985
    },
    {
        "content": "<p>but I don't know how many other cases will have similar issues</p>",
        "id": 276802713,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648408007
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/243200-t-lang.2Fmajor-changes/topic/extern.20macro!.28ABI.29.20fn.20lang-team.23151/near/276802576\">said</a>:</p>\n<blockquote>\n<p>e.g you can't write <code>fn bar(arg: mac!())</code> or <code>impl MyTrait for mac!()</code></p>\n</blockquote>\n<p>You can write those, since they're both type-position macros; I guess <code>impl mac!() for MyType {}</code> would be an example of something we can't yet do; or the infamous <code>fn concat_idents!(...) () {}</code></p>",
        "id": 276804805,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1648411118
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/243200-t-lang.2Fmajor-changes/topic/extern.20macro!.28ABI.29.20fn.20lang-team.23151/near/276802713\">said</a>:</p>\n<blockquote>\n<p>but I don't know how many other cases will have similar issues</p>\n</blockquote>\n<p>I think that macro arms and where clauses are both common requirements, at least as witnessed from the amount of times people ask about it in the <code>#macros</code> channel of the Community Discord</p>",
        "id": 276804906,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1648411215
    }
]