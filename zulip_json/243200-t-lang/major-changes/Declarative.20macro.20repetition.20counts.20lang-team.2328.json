[
    {
        "content": "<p>A new proposal has been announced: <a href=\"https://github.com/rust-lang/lang-team/issues/28\">#28</a>. It will be brought up at the next meeting.</p>",
        "id": 201834413,
        "sender_full_name": "triagebot",
        "timestamp": 1592996496
    },
    {
        "content": "<p>I am partial to the metafunction syntax (<code>${count(var, 2)}</code>), since it is probably the most extensible, and it doesn't conflict with the <code>quote!</code>macro's <code>#var</code> syntax.</p>",
        "id": 201897246,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1593029368
    },
    {
        "content": "<p>additionally, the metafunction syntax is less obtuse.</p>",
        "id": 201897466,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1593029460
    },
    {
        "content": "<p>I would say we shouldn't worry too much about the syntax at this stage and more think about the motivation, although it's good to collect some ideas.</p>",
        "id": 202015163,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593113885
    },
    {
        "content": "<p>Anyway I think this seems like a pretty good idea... unlikely to be all that controversial.</p>",
        "id": 202015180,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593113903
    },
    {
        "content": "<p>The question I guess is whether anyone has the time/energy to serve as a liaison. I'm not sure just how demanding that will be in this case. I'm feeling pretty hard up for time so I'm a bit reluctant to volunteer.</p>",
        "id": 202015760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593114250
    },
    {
        "content": "<p>I'm happy to do whatever leg-work is involved that I can help with.</p>",
        "id": 202320643,
        "sender_full_name": "Mark Juggurnauth-Thomas",
        "timestamp": 1593442107
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312456\">@Mark Thomas</span> would you be interested in implementing the proposal as well?</p>",
        "id": 202357411,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593459032
    },
    {
        "content": "<p>I posted this in the github issue but I'll put it here too: An earlier proposal that covers similar ground is <a href=\"https://github.com/rust-lang/rfcs/issues/88\">rfc#88</a></p>",
        "id": 202357530,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593459112
    },
    {
        "content": "<p>the main differences I could identify: 1. <a href=\"https://github.com/rust-lang/rfcs/issues/88\">rfc#88</a> uses the syntax <code>$#(..)</code> instead of <code>$#ident</code></p>",
        "id": 202357701,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593459206
    },
    {
        "content": "<p>(where the <code>..</code> is the token sequence used in the macro pattern)</p>",
        "id": 202357741,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593459224
    },
    {
        "content": "<p>(I don't think there is a strong reason to choose one syntax over another here. We could in fact adopt both. I do like <code>$#(..)</code> because I can directly see the correspondence between the thing in the pattern and the thing after the <code>$#</code>, but I could also believe that in practice macro authors would prefer to use <code>$#ident</code> to express this.)</p>",
        "id": 202358008,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593459360
    },
    {
        "content": "<p>difference 2. <a href=\"https://github.com/rust-lang/rfcs/issues/88\">rfc#88</a> <em>also</em> proposes a syntax for getting the <strong>current iteration count</strong> in the expansion, i.e. its syntax <code>$(#)</code></p>",
        "id": 202358094,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593459390
    },
    {
        "content": "<p>That seems like a really important thing in practice, and it isn't addressed in the proposal  <a href=\"https://github.com/rust-lang/lang-team/issues/28\">#28</a>, is it?</p>",
        "id": 202358165,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593459445
    },
    {
        "content": "<p>(unfortunately the RFC text for <a href=\"https://github.com/rust-lang/rfcs/issues/88\">rfc#88</a> doesn't actually write out a motivating example for the current iteration number. <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> )</p>",
        "id": 202358292,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593459502
    },
    {
        "content": "<p>I think my summary comment (from, yikes, six years ago) holds up well: <a href=\"https://github.com/rust-lang/rfcs/pull/88#issuecomment-47651303\">https://github.com/rust-lang/rfcs/pull/88#issuecomment-47651303</a></p>",
        "id": 202358619,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593459628
    },
    {
        "content": "<p>specifically, I expressed concern for the syntax <a href=\"https://github.com/rust-lang/rfcs/issues/88\">rfc#88</a> chose for the iteration number (and I would still have that concern today).</p>",
        "id": 202358693,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593459678
    },
    {
        "content": "<p>anyway there are a lot of other points made in that comment thread that probably apply here</p>",
        "id": 202359057,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593459872
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/243200-t-lang.2Fmajor-changes/topic/Declarative.20macro.20repetition.20counts.20lang-team.2328/near/202357411\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"312456\">Mark Thomas</span> would you be interested in implementing the proposal as well?</p>\n</blockquote>\n<p>Yes, I'd be interested in implementing it.  I already have a working prototype of the simplest version (<code>$#ident</code> only).</p>",
        "id": 202369431,
        "sender_full_name": "Mark Juggurnauth-Thomas",
        "timestamp": 1593465557
    },
    {
        "content": "<p>I had looked for other rfcs that covered this but somehow failed to find <a href=\"https://github.com/rust-lang/rfcs/issues/88\">rfc#88</a>.  Thanks for the link!  The rfc proposal has some interesting ideas that I hadn't thought of: in particular getting the current index, which is something else that I've needed in the past (in <a href=\"https://github.com/dgrunwald/rust-cpython/blob/master/src/py_class/slots.rs#L789\">https://github.com/dgrunwald/rust-cpython/blob/master/src/py_class/slots.rs#L789</a> for example).<br>\nIt sounds like there might be two things that one might want in different contexts: the count (potentially summed over nested repetitions) and the  index (potentially for outer nestings, not necessarily the current one).  A concern I had with the <code>$###ident</code> suggestion for the first one is that it's quickly becoming a soup of sigils that are harder to understand, and extending it for the index too would be difficult.<br>\nWhat do people think of the <code>${ ... }</code> meta-expression syntax?  I think we could encompass all options with:</p>\n<ul>\n<li><code>${count(ident)}</code> for the count at the current nesting (and <code>${count(ident, n)}</code> for counting at repetition depth n).</li>\n<li><code>${index(ident)}</code> for the index at the current nesting (and <code>${index(ident, n)}</code> for the index at repetition depth n).<br>\nThis is more complex than the simple <code>$#ident</code> proposal, but I think both could be implemented fairly easily.  If I get some time I will have a go at extending my prototype to include both of these.</li>\n</ul>",
        "id": 202370601,
        "sender_full_name": "Mark Juggurnauth-Thomas",
        "timestamp": 1593466308
    },
    {
        "content": "<p>I like the <code>${count(name)}</code> syntax both because is easily extendible to other expressions, and because it doesn't conflict with <code>quote!</code>'s syntax, which replaces all occurrences of <code>#ident</code> or <code>#(...)*</code></p>",
        "id": 202388554,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1593483150
    },
    {
        "content": "<p>Pretty much any new syntax on the right hand side of a macro will have backward compatibility issues, at least in theory, because the right hand side is an arbitrary token stream.</p>",
        "id": 202485516,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1593546393
    },
    {
        "content": "<p>I wonder if it's possible to find some syntax that always produces an error now. (I can't come up with anything right away.)</p>",
        "id": 202485628,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1593546459
    },
    {
        "content": "<p>Aha, <code>$ anything_that_is_not_ident</code> is actually reserved, that's a good news.</p>",
        "id": 202486486,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1593546893
    },
    {
        "content": "<p>(But I'm still interested to know what other options exist.)</p>",
        "id": 202486707,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1593547007
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312456\">@Mark Thomas</span> I take it you're the <code>markbt</code> from Github?</p>\n<p>I've been selected as your T-Lang liaison! Hello.</p>\n<p>The next step is to create a <strong>charter</strong> for the project group, and then PR it into the lang-team repo to officially found the group. The charter document needs to focus on:</p>\n<ul>\n<li>The <strong>problem statement</strong> that the project group is trying to solve.</li>\n<li>The general scope of the project (eg: \"We will develop an RFC for new macro syntax and then implement it\").</li>\n<li>The project lead (you).</li>\n<li>Any other initial team members who wish to be listed (if any).</li>\n<li>The project liaison (me).</li>\n<li>Who will help implement the eventual RFC (you, i think you said).</li>\n</ul>\n<p>As with any PR, the lang team will review, possibly request changes, and so on.</p>\n<p>Once the project group is officially accepted, you and whoever else will do all the discussion work necessary to draft a fully detailed RFC that will go through the usual RFC process. Since this is a relatively simple proposal, it's unlikely that any experimental work will need to be done in the compiler before the RFC is accepted. The idea is to do as much of the discussion on Zulip <em>before</em> actually opening a PR with the RFC proposal. Long discussions don't work well in a PR comment thread.</p>\n<p>As your liaison, I'm your reprisentative to help keep T-lang updated on your progress. I can also help with editing on the RFC, but ultimately my role is more as a conduit for communication, and the project is still in your hands.</p>",
        "id": 205267141,
        "sender_full_name": "Lokathor",
        "timestamp": 1595958085
    },
    {
        "content": "<p>One thing I would add is that I think the charter can be heavily copied from the existing MCP, although in this case I feel like there were some additional issues raised? i.e., it seems like there's a bit of exploration to be done to determine exactly which problems to solve</p>",
        "id": 205278763,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595964008
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span>,</p>\n<p>Yes, I am <code>markbt</code> on Github.  That all sounds great.  <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> is right that the initial suggestion has grown into more general <code>${ ... }</code> syntax and covers both counts and indexes for repetitions.  I'll start from there in the next draft; we can always walk it back to the simpler syntax if that ends up looking like too much.</p>\n<p>Is there a template or defined location for the charter?  I had a look in <a href=\"https://github.com/rust-lang/lang-team\">https://github.com/rust-lang/lang-team</a> but couldn't see an obvious place to put it.  I should be able to work on a PR for that this weekend.</p>",
        "id": 205280205,
        "sender_full_name": "Mark Juggurnauth-Thomas",
        "timestamp": 1595964758
    },
    {
        "content": "<p>there's an open PR in that repo with a proposed template to use, that's the best place to start</p>",
        "id": 205281295,
        "sender_full_name": "Lokathor",
        "timestamp": 1595965334
    },
    {
        "content": "<p>the template situation will hopefully be sorted out by the weekend</p>",
        "id": 205281345,
        "sender_full_name": "Lokathor",
        "timestamp": 1595965368
    },
    {
        "content": "<p>Yep, but the plan is for the template to basically be the same as MCPs, with the intent that sometimes an MCP can just be copied over directly</p>",
        "id": 205281792,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595965615
    },
    {
        "content": "<p>PS very open to suggestions :P</p>",
        "id": 205281808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595965626
    },
    {
        "content": "<p>So I've seen this proposal once again and it reminded me about evolution of variadic generics in C++.</p>\n<p>Original variadic generics in C++11 are pretty similar to our macro repetitions in the way how they are used in practice.<br>\nYou get a list, then you pattern match on it to chop off a few elements from the start or from the end, then you use recursion to do the same thing with the rest of the list.<br>\nThen it turned out that</p>\n<ul>\n<li>recursion is systematically worse understood by people than iteration/indexing, template metaprogramming is considered an arcane art or at least an advanced task</li>\n<li>processing a list with recursion and pattern matching is wordy</li>\n<li>processing a list with recursion and pattern matching is heavy on compilation times because it creates a lot of instantiations (or a lot of expansions with Rust macros)</li>\n</ul>\n<p>As a result things started to moving in the direction of more direct operations with parameter packs - indexing into a pack, slicing into a pack (an operator for taking pack length was introduced immediately in C++11 though).<br>\nThe current iteration of the proposal is <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1858r2.html\">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1858r2.html</a>.<br>\nClang introduced a builtin for pack indexing years ago already to fight the instantiation bloat and compile times.</p>\n<p>So, I thought perhaps we should immediately jump to the end point of this process, get away from recursion, and introduce macro repetition indexing and slicing right away? <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span><br>\n(With the length taking operator from this proposal as a necessary component.)</p>",
        "id": 205402271,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1596050802
    },
    {
        "content": "<p>baby steps</p>",
        "id": 205409225,
        "sender_full_name": "Lokathor",
        "timestamp": 1596054340
    },
    {
        "content": "<p>To say a little more: I think that the <code>${ ... }</code> syntax can be added to in a lot of ways over time, but for now let's (1) found the project group at all (2) just let people count the repetitions to start.</p>\n<p>As long as we pick a syntax that's broadly future compatible with later improvement, I think we should focus on actually shipping this one small improvement over starting up another grand design. We've already got inline assembly, const generics, async IO, and many other large projects in flight.</p>",
        "id": 205409729,
        "sender_full_name": "Lokathor",
        "timestamp": 1596054580
    },
    {
        "content": "<p>I agree -- particularly since I think that the more advanced macros are moving to procedural macros.</p>",
        "id": 205524683,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596138902
    },
    {
        "content": "<p>(I think it'd be quite appealing to do work towards making writing procedural macros easier and easier)</p>",
        "id": 205524726,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596138915
    },
    {
        "content": "<p>I opened <a href=\"https://github.com/rust-lang/lang-team/pull/45\">https://github.com/rust-lang/lang-team/pull/45</a> with a draft charter.</p>",
        "id": 205720141,
        "sender_full_name": "Mark Juggurnauth-Thomas",
        "timestamp": 1596361271
    },
    {
        "content": "<p>awesome</p>",
        "id": 205816968,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596472828
    }
]