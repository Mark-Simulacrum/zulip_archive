[
    {
        "content": "<p>A new proposal has been announced: <a href=\"https://github.com/rust-lang/lang-team/issues/70\">Stop ignoring trailing semicolons in a macro body when a macro is invoked in expression position #70</a>. It will be announced at the next meeting to try and draw attention to it, but usually MCPs are not discussed during triage meetings. If you think this would benefit from discussion amongst the team, consider proposing a design meeting.</p>",
        "id": 217320766,
        "sender_full_name": "triagebot",
        "timestamp": 1605815142
    },
    {
        "content": "<p>this change seems really desirable to me</p>",
        "id": 217324078,
        "sender_full_name": "lcnr",
        "timestamp": 1605816696
    },
    {
        "content": "<p>It seems desirable, but the impact seems pretty bad :(</p>",
        "id": 217335576,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605822737
    },
    {
        "content": "<p>I was wondering if it's something we can do over an edition but I guess that would belie some of the motivation probably? (which I imagine is to improve the implementation)</p>",
        "id": 217335612,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605822757
    },
    {
        "content": "<p>I made a small comment in the issue about doing this over an edition</p>",
        "id": 217336011,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1605822955
    },
    {
        "content": "<p>the impact on the implementation is quite minimal either way - this is mainly about making the behavior of macro and expression parsing more consistent</p>",
        "id": 217336113,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1605822983
    },
    {
        "content": "<p>there are all the usual caveats about macro-related edition changes (proc-macros can respan things in a way that we can't detect)</p>",
        "id": 217336170,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1605823016
    },
    {
        "content": "<p>However, we could probably cover 99% of the breakage by continuing to accept trailing semicolons if the semicolon has a 2015/2018 edition span</p>",
        "id": 217336281,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1605823077
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> What breakage would that not address?</p>",
        "id": 217343117,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605827200
    },
    {
        "content": "<p>Weird cases where a proc-macro is setting the span of tokens</p>",
        "id": 217343146,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1605827222
    },
    {
        "content": "<p>Ah.</p>",
        "id": 217343169,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605827240
    },
    {
        "content": "<p>Are you aware of any cases where the intersection of that <em>and</em> semicolons at the end of expression macros is non-zero?</p>",
        "id": 217343208,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605827266
    },
    {
        "content": "<p>No</p>",
        "id": 217343219,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1605827273
    },
    {
        "content": "<p>However, I know of one crate that does the kind of re-spanning that is potentially problematic</p>",
        "id": 217343281,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1605827296
    },
    {
        "content": "<p>I pr'd a proc-macro to solana which respans certain tokens using the spans of other tokens</p>",
        "id": 217343322,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1605827327
    },
    {
        "content": "<p>In that case, the macro is only used internally</p>",
        "id": 217343351,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1605827349
    },
    {
        "content": "<p>and will never run into this problem</p>",
        "id": 217343365,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1605827359
    },
    {
        "content": "<p>But there's at least one case where writing that kind of respanning code is necessary</p>",
        "id": 217343382,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1605827379
    },
    {
        "content": "<p>An alternative would be to use the edition of the crate that defines the macro</p>",
        "id": 217343529,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1605827485
    },
    {
        "content": "<p>That would run into issues with 'meta-macros' that expand to other macros</p>",
        "id": 217343568,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1605827520
    },
    {
        "content": "<p>I'm not sure which strategy would be better</p>",
        "id": 217343616,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1605827527
    },
    {
        "content": "<p>My hope is that <code>cargo future-incompat-report</code> will help to make any breakage rare by the time we decide to make this a hard error</p>",
        "id": 217343916,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1605827829
    },
    {
        "content": "<p>That is, people will have already bumped their upstream deps, so any edition-compatibility mechanism will rarely be used</p>",
        "id": 217344887,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1605828603
    },
    {
        "content": "<p>Is there any reason to go through a breaking change in <code>macro_rules</code> when it can just be fixed in Macros 2.0?</p>",
        "id": 217367531,
        "sender_full_name": "isHavvy",
        "timestamp": 1605855103
    },
    {
        "content": "<p>This is more of a bugfix (of a very old bug) then a feature change</p>",
        "id": 217417772,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1605887270
    },
    {
        "content": "<p>It also makes macros more consistent with the rest of the language, so I don't think it should be limited to macros 2.0</p>",
        "id": 217418047,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1605887396
    },
    {
        "content": "<p>I'd like to take action here</p>",
        "id": 224074078,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611682438
    },
    {
        "content": "<p>This has been pending way longer than I would like =)</p>",
        "id": 224074133,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611682447
    },
    {
        "content": "<p>I have a PR open in <a href=\"https://github.com/rust-lang/rust/pull/79819\">https://github.com/rust-lang/rust/pull/79819</a></p>",
        "id": 224096672,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1611692258
    },
    {
        "content": "<p>However, it's blocked on me figuring out a better way to handle allowing the lint</p>",
        "id": 224096729,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1611692276
    },
    {
        "content": "<p>it needs to apply to a macro calls, which makes things tricky</p>",
        "id": 224096836,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1611692300
    },
    {
        "content": "<p>I'd like to be able to allow the lint as close as possible to the actual macro call</p>",
        "id": 224096989,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1611692389
    },
    {
        "content": "<p>so, <code>#[allow(macro_trailing_semicolon)] my_macro!()</code> won't work , but I'd like  <code>#[allow(macro_trailing_semicolon)] let a = my_macro!();</code> to work</p>",
        "id": 224097254,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1611692522
    },
    {
        "content": "<p>Ah, interesting, ok. Thanks <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span></p>",
        "id": 224103401,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611695297
    },
    {
        "content": "<p>We were going to close the MCP in any case and mark it as accepted, pending PR</p>",
        "id": 224103429,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611695313
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/243200-t-lang.2Fmajor-changes/topic/Stop.20ignoring.20trailing.20semicolons.20in.20a.20macro.20b.E2.80.A6.20lang-team.2370/near/224096989\">said</a>:</p>\n<blockquote>\n<p>I'd like to be able to allow the lint as close as possible to the actual macro call</p>\n</blockquote>\n<p>I mentioned on the PR that <code>fn lint_node_id</code> can be used to obtain the closest parent node with a <code>DefId</code>, it's good enough to land the lint implementation, IMO.<br>\nLater we could add some infra for tracking this more precisely, with <code>NodeId</code> granularity, but that would be an entirely orthogonal work.</p>",
        "id": 224119613,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1611703746
    },
    {
        "content": "<p>My concern was that it could be very confusing for users for <code>#[allow(macro_trailing_semicolon)] fn foo() { macro_call!(); } </code> to work, but not <code>#[allow(macro_trailing_semicolon)] let a = my_macro!();</code></p>",
        "id": 224121422,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1611705070
    },
    {
        "content": "<p>but I guess we could land it as allow-only, and follow up later like you said</p>",
        "id": 224121437,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1611705098
    },
    {
        "content": "<p>I'll update the PR</p>",
        "id": 224121443,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1611705103
    },
    {
        "content": "<p>This proposal has been accepted: <a href=\"https://github.com/rust-lang/lang-team/issues/70\">#70</a>.</p>",
        "id": 224909709,
        "sender_full_name": "triagebot",
        "timestamp": 1612288533
    }
]