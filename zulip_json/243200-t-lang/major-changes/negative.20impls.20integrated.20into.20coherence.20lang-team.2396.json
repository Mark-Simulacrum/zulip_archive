[
    {
        "content": "<p>A new proposal has been announced: <a href=\"https://github.com/rust-lang/lang-team/issues/96\">negative impls integrated into coherence #96</a>. It will be announced at the next meeting to try and draw attention to it, but usually MCPs are not discussed during triage meetings. If you think this would benefit from discussion amongst the team, consider proposing a design meeting.</p>",
        "id": 241076910,
        "sender_full_name": "triagebot",
        "timestamp": 1622582196
    },
    {
        "content": "<blockquote>\n<p>Note that this would not permit where T: !Trait syntax, although we could in principle support that, though we would have to be careful about what it means (in particular, it would be relatively easy to support if what it means is \"there is a negative impl\").</p>\n</blockquote>\n<p>I find it hard to imagine we could ever support any other meaning for this syntax. The meaning we assign to it has to be \"stable under future worlds\" where more impls are added, which checking for a negative impls is but checking for a lack of a positive impl is not.</p>",
        "id": 241375632,
        "sender_full_name": "RalfJ",
        "timestamp": 1622718410
    },
    {
        "content": "<p>there are some contexts where we can reason about the full set of impls, for example when the type and the trait are private. (There is some discussion of this linked from the chalk readme.) In such cases the lack of an impl is enough to derive a negative impl fact</p>",
        "id": 241376065,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622718720
    },
    {
        "content": "<p>That seems not obvious to me. Even private types &amp; traits can have impls depending on other public traits/types.</p>",
        "id": 241376220,
        "sender_full_name": "RalfJ",
        "timestamp": 1622718838
    },
    {
        "content": "<p>I will defer to the chalk folks for what the actual rules are for deriving negative impl facts. (I'm thinking of <a href=\"https://aturon.github.io/blog/2017/04/24/negative-chalk/\">this blog post</a> in particular.) But whatever the rules are, I would expect <code>T: !Trait</code> to be valid only when such a negative impl fact has been derived, whether that is due to non-impl combined with some kind of closed-world context, or an actual <code>!Trait</code> impl if/when that becomes an actual possibility.</p>",
        "id": 241377556,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622719755
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> the meaning I wuld assign is:</p>",
        "id": 241388566,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622726103
    },
    {
        "content": "<p>\"there is a negative impl\"</p>",
        "id": 241388576,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622726108
    },
    {
        "content": "<p>I would not want to make it mean \"there is no positive impl\"</p>",
        "id": 241388592,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622726119
    },
    {
        "content": "<p>for a variety of reasons</p>",
        "id": 241388598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622726124
    },
    {
        "content": "<p>one question I do have, though, is whether to tie it to the \"coherence rules\", i.e., to permit you to use the lack of positive impls as evidence, but I'd rather not, it makes the solver rather more complicated, and I'd prefer to phase those rules out in favor of explicit negative impls anyhow</p>",
        "id": 241388720,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622726174
    },
    {
        "content": "<p>I suppose that could be a good goal to work towards for Rust 2024</p>",
        "id": 241388757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622726193
    },
    {
        "content": "<p>sounds reasonable, yeah</p>",
        "id": 241390251,
        "sender_full_name": "RalfJ",
        "timestamp": 1622726945
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1977\">@T-lang</span>: Proposal <a href=\"https://github.com/rust-lang/lang-team/issues/96#issuecomment-856939701\">#96</a> has been seconded, and will be approved in 10 days if no objections are raised.</p>",
        "id": 241952398,
        "sender_full_name": "triagebot",
        "timestamp": 1623171785
    },
    {
        "content": "<p>Deriving negative impl facts from the lack of an impl is potentially dangerous.  If combined with <code>T: !Trait</code>, it could allow nonoverlapping impls for types that differ only in lifetimes:</p>\n<div class=\"codehilite\"><pre><span></span><code>trait Static {}\nimpl Static for &amp;&#39;static () {}\n\ntrait Trait { type Assoc; }\nimpl&lt;T: !Static&gt; Trait for T { type Assoc = i64; }\nimpl Trait for &amp;&#39;static () { type Assoc = i32; }\n</code></pre></div>",
        "id": 241955311,
        "sender_full_name": "comex",
        "timestamp": 1623172809
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198590\">@comex</span> My understanding of this previous comment <a href=\"#narrow/stream/243200-t-lang.2Fmajor-changes/topic/negative.20impls.20integrated.20into.20coherence.20lang-team.2396/near/241388592\">https://rust-lang.zulipchat.com/#narrow/stream/243200-t-lang.2Fmajor-changes/topic/negative.20impls.20integrated.20into.20coherence.20lang-team.2396/near/241388592</a> is that \"lack of an impl\" would <em>not</em> derive a negative impl fact.</p>",
        "id": 241957167,
        "sender_full_name": "scottmcm",
        "timestamp": 1623173640
    },
    {
        "content": "<p>Right. I think the point of <code>impl !Trait for SomeType</code> is specifically to allow people to depend on \"there is not an implementation of Trait for SomeType\", whereas if there just isn't an impl you <em>can't</em> rely on that not changing in the future.</p>",
        "id": 241961383,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1623175457
    },
    {
        "content": "<p>(I wonder if this could get to the point where <code>Copy =&gt; !Drop</code> &amp; <code>Drop =&gt; !Copy</code> could be library rules, rather than language magic.  Definitely not part of v1, though.)</p>",
        "id": 241963098,
        "sender_full_name": "scottmcm",
        "timestamp": 1623176203
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> I wonder as well whether we might one day be able to define some useful rule akin to <code>!Drop =&gt; Copy</code>.</p>",
        "id": 241969076,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1623178798
    },
    {
        "content": "<p>I don't think that<code>!Drop =&gt; Copy</code> holds (or could hold), though.  It can be invalid to copy types even if they promise not to have a destructor.</p>",
        "id": 241970071,
        "sender_full_name": "Connor Horman",
        "timestamp": 1623179200
    },
    {
        "content": "<p>\"some useful rule akin to\", not necessarily that rule. It seems like there's a useful property that holds, somehow.</p>",
        "id": 241979618,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1623183335
    },
    {
        "content": "<p>I absolutely agree that <em>that</em> rule isn't valid.</p>",
        "id": 241979641,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1623183346
    },
    {
        "content": "<p>To add to the \"Copy stuff + String\" example, this would also naturally handle things like \"blanket impl for <code>Ord</code>, and specific ones for <code>f32</code> and <code>f64</code>\".</p>",
        "id": 242774182,
        "sender_full_name": "scottmcm",
        "timestamp": 1623780182
    }
]