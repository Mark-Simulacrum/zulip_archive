[
    {
        "content": "<p>A new proposal has been announced: <a href=\"https://github.com/rust-lang/lang-team/issues/98\">Trait Upcasting #98</a>. It will be announced at the next meeting to try and draw attention to it, but usually MCPs are not discussed during triage meetings. If you think this would benefit from discussion amongst the team, consider proposing a design meeting.</p>",
        "id": 242788705,
        "sender_full_name": "triagebot",
        "timestamp": 1623786261
    },
    {
        "content": "<p>For background reference, there was an old topic within wg-traits stream: <a href=\"#narrow/stream/144729-wg-traits/topic/object.20upcasting\">https://rust-lang.zulipchat.com/#narrow/stream/144729-wg-traits/topic/object.20upcasting</a></p>",
        "id": 242790412,
        "sender_full_name": "Charles Lew",
        "timestamp": 1623787072
    },
    {
        "content": "<p>This is &amp;dyn Subtrait =&gt; &amp;dyn Supertrait, where <code>trait Subtrait: Supertrait{}</code>, correct?</p>",
        "id": 242790940,
        "sender_full_name": "Connor Horman",
        "timestamp": 1623787274
    },
    {
        "content": "<p>This is a relatively easy one since the vtable for the supertrait can be a prefix of the vtable of the subtrait, right?</p>",
        "id": 242794208,
        "sender_full_name": "scottmcm",
        "timestamp": 1623788653
    },
    {
        "content": "<p>It would need a vptr stored in the general case. Some cases, like single trait inheritence, should be able to use a prefix, though.</p>",
        "id": 242797363,
        "sender_full_name": "Connor Horman",
        "timestamp": 1623790028
    },
    {
        "content": "<blockquote>\n<p>This is &amp;dyn Subtrait =&gt; &amp;dyn Supertrait, where trait Subtrait: Supertrait{}, correct?</p>\n</blockquote>\n<p>Yes!</p>",
        "id": 242797792,
        "sender_full_name": "Charles Lew",
        "timestamp": 1623790230
    },
    {
        "content": "<blockquote>\n<p>This is a relatively easy one since the vtable for the supertrait can be a prefix of the vtable of the subtrait, right?</p>\n</blockquote>\n<p>Most but not always so. I'm planning to change the vtable structure so that supertrait vtable is always a \"subslice\" of the entire vtable.</p>",
        "id": 242797901,
        "sender_full_name": "Charles Lew",
        "timestamp": 1623790284
    },
    {
        "content": "<p>For multiple inheritance and diamond inheritance cases, this will mean some slots in it are duplicated.</p>",
        "id": 242798099,
        "sender_full_name": "Charles Lew",
        "timestamp": 1623790382
    },
    {
        "content": "<p>Ah, yes, multiple supertraits.  Thanks for the reminder.</p>",
        "id": 242798907,
        "sender_full_name": "scottmcm",
        "timestamp": 1623790744
    },
    {
        "content": "<p>Hmm... That's a potentially reasonable setup. <br>\nI considered this problem while writing an ABI for use with my (very WIP) implementation of rust, in &lt;<a href=\"https://github.com/LightningCreations/lccc\">https://github.com/LightningCreations/lccc</a>&gt;. The method I chose was simply storing a vptr for each direct upcast trait in the vtable (and then also store the vfns in the table), <a href=\"https://hackmd.io/@wSaA8OrrSQ2SlegMvA6e6A/SJ1TeE0y_#DST-Pointer-Layout\">https://hackmd.io/@wSaA8OrrSQ2SlegMvA6e6A/SJ1TeE0y_#DST-Pointer-Layout</a> (point 2).</p>",
        "id": 242799076,
        "sender_full_name": "Connor Horman",
        "timestamp": 1623790823
    },
    {
        "content": "<p>Can you elaborate on \"subslice\"?</p>",
        "id": 242799109,
        "sender_full_name": "scottmcm",
        "timestamp": 1623790844
    },
    {
        "content": "<p>I think I have an idea of what is meant, so I'll attempt to explain.<br>\nThe layout would be a <code>struct SingleTraitVTable{...}</code>, where <code>SingleTraitVTable</code> is w/e rustc stores in the vtable for a single trait, and none of it's supertraits, and then the actual vtable would be <code>[SingleTraitVTable;N]</code> where <code>N</code> is the total number of vtables that need to be stored, such that upcasting to any trait only requires taking some subrange of that vtable.</p>",
        "id": 242799442,
        "sender_full_name": "Connor Horman",
        "timestamp": 1623790988
    },
    {
        "content": "<p>(With potential for optimization in single inheritence cases, where it doesn't duplicate the size/alignment/drop-glue stuff where it doesn't have to)</p>",
        "id": 242799583,
        "sender_full_name": "Connor Horman",
        "timestamp": 1623791049
    },
    {
        "content": "<p>On the basis of this, we can optimize for the single inheritance case.</p>",
        "id": 242799589,
        "sender_full_name": "Charles Lew",
        "timestamp": 1623791053
    },
    {
        "content": "<p>Yeah</p>",
        "id": 242799592,
        "sender_full_name": "Charles Lew",
        "timestamp": 1623791056
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>    // When we create vtable, we want to ensure that each supertrait's vtable\n    // is a subslice of this vtable.\n\n    // For a single inheritance relationsihp like this,\n    //   D -- C -- B -- A - DSA\n    // The resulting vtable will consists of these segments:\n    //  DSA, A, B, C, D\n\n    // For a more complex inheritance relationship like this:\n    //   O -- G -- C -- A - DSA\n    //     \\    \\    \\- B - DSA\n    //     |    |- F -- D - DSA\n    //     |         \\- E - DSA\n    //     |- N -- J -- H - DSA\n    //          \\    \\- I - DSA\n    //          |- M -- K - DSA\n    //               \\- L - DSA\n    // The resulting vtable will consists of these segments:\n    //  DSA, A, DSA, B, C, DSA, D, DSA E, F, G,\n    //  DSA, H, DSA, I, J, DSA, K, DSA L, M, N, O\n</code></pre></div>",
        "id": 242799650,
        "sender_full_name": "Charles Lew",
        "timestamp": 1623791088
    },
    {
        "content": "<p>This is some of the comments in my upcoming pr.</p>",
        "id": 242799728,
        "sender_full_name": "Charles Lew",
        "timestamp": 1623791141
    },
    {
        "content": "<p>DSA means destructor + size + alignment</p>",
        "id": 242799744,
        "sender_full_name": "Charles Lew",
        "timestamp": 1623791152
    },
    {
        "content": "<p>So for the single inheritance case, nothing is changed, it is exactly what it is today.</p>",
        "id": 242799825,
        "sender_full_name": "Charles Lew",
        "timestamp": 1623791188
    },
    {
        "content": "<p>For the multiple inheritance cases,  DSA are duplicated, so that upcasting to any trait only requires taking some subrange of that vtable. Actually for code generation we only care about the starting point. It is adding an offset to the pointer metadata.</p>",
        "id": 242800169,
        "sender_full_name": "Charles Lew",
        "timestamp": 1623791370
    },
    {
        "content": "<p>When upcasting to A, C, G, O, the offset will be 0, while upcasting to B, the offset will be 2. upcasting to D, F, the offset will be 5.</p>",
        "id": 242800386,
        "sender_full_name": "Charles Lew",
        "timestamp": 1623791490
    },
    {
        "content": "<p>Hmmm... This actually seems like a good idea.</p>",
        "id": 242800398,
        "sender_full_name": "Connor Horman",
        "timestamp": 1623791497
    },
    {
        "content": "<p>times pointer_size ( i got the above offset numbers slightly wrong because dsa is three words, but you got the idea )</p>",
        "id": 242800402,
        "sender_full_name": "Charles Lew",
        "timestamp": 1623791500
    },
    {
        "content": "<p>I took this idea from previous discussions.</p>",
        "id": 242800540,
        "sender_full_name": "Charles Lew",
        "timestamp": 1623791565
    },
    {
        "content": "<p>Mind if I <del>steal</del> make use of this layout. This seems a lot more efficient then storing parent vptrs in the vtable</p>",
        "id": 242800570,
        "sender_full_name": "Connor Horman",
        "timestamp": 1623791579
    },
    {
        "content": "<p>just do whatever you want with it  lol.   advices welcome!</p>",
        "id": 242801133,
        "sender_full_name": "Charles Lew",
        "timestamp": 1623791858
    },
    {
        "content": "<p>Only potential issue: This wouldn't implementation wouldn't likely admit vtable unification. So there will likely be distinct (though equivalent) vtables for <code>&amp;T =&gt; &amp;dyn Super</code> directly, and <code>&amp;T</code> =&gt; <code>&amp;dyn Sub</code> =&gt; <code>&amp;dyn Super</code>.</p>",
        "id": 242801691,
        "sender_full_name": "Connor Horman",
        "timestamp": 1623792144
    },
    {
        "content": "<p>Ah, got it.  Thanks!  That chart helps.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"116458\">Charles Lew</span> <a href=\"#narrow/stream/243200-t-lang.2Fmajor-changes/topic/Trait.20Upcasting.20lang-team.2398/near/242800169\">said</a>:</p>\n<blockquote>\n<p>For the multiple inheritance cases,  DSA are duplicated.</p>\n</blockquote>\n<p>I guess today they're already duplicated per trait vtable, so this could even result in smaller overall vtable data?</p>",
        "id": 242804281,
        "sender_full_name": "scottmcm",
        "timestamp": 1623793753
    },
    {
        "content": "<p>If there is a lot of diamond inheritance that could result in exponential blowup of the vtable</p>",
        "id": 242817310,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623804009
    },
    {
        "content": "<p>for example, <code>trait A(n+1): Bn + Cn {}</code>, <code>trait Bn: An { fn bn(&amp;self); }</code>, <code>trait Cn: An { fn cn(&amp;self); }</code></p>",
        "id": 242817348,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623804057
    },
    {
        "content": "<p>the vtable for <code>An</code> will contain 2^n DSAs</p>",
        "id": 242817364,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623804089
    },
    {
        "content": "<p>I mean, yes, but that would be unavoidable. In the alternative, you'd have 2^n vtables, and n levels of indirection</p>",
        "id": 242818234,
        "sender_full_name": "Connor Horman",
        "timestamp": 1623804899
    },
    {
        "content": "<p>No; if all traits have their own separate vtables then there are only 3n of them, each with size ~2n</p>",
        "id": 242824766,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623812126
    },
    {
        "content": "<p>even if you embedded all links to supertraits in the vtables that would still only be quadratic</p>",
        "id": 242824831,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623812179
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span>  I'm not sure i understood your proposal. Would you mind saying more about it?</p>",
        "id": 242862473,
        "sender_full_name": "Charles Lew",
        "timestamp": 1623840051
    },
    {
        "content": "<p>Did you mean appending the supertraits vtable pointers to the existing vtable?</p>",
        "id": 242863868,
        "sender_full_name": "Charles Lew",
        "timestamp": 1623840904
    },
    {
        "content": "<p>Suppose that the vtable for <code>An</code> is <code>bn, cn, ..., b1, c1, DST</code> and similarly for <code>Bn</code> and <code>Cn</code>. The vtables are completely unshared. There are 3n vtables, and each one has size 2n. If we need to include pointers to each supertrait vtable in the vtable An would look like <code>bn, cn, ..., b1, c1, DST, &amp;dyn Bn, &amp;dyn Cn, ..., &amp;dyn B1, &amp;dyn C1, &amp;dyn A1</code>, which is still only of size 5n, so quadratic, not exponential</p>",
        "id": 242875962,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623848297
    },
    {
        "content": "<p>Probably you want to use a hybrid of this approach and the exponential one, where some supertraits can be encoded with slices and others need a separate vtable. The ones that get slices should be a spanning tree of the supertrait DAG</p>",
        "id": 242876426,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623848531
    },
    {
        "content": "<p>...is it even a DAG? Nothing in rust ever seems to be well ordered (in the mathematical sense)</p>",
        "id": 242876495,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623848578
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span>  Yes, this hybrid approach sounds good! I think i'll just give up the idea of non-zero offsets, using zero offsets as much as possible, and supply vtable pointers for all the non-zero-offset cases. It will take the advantage of both.</p>\n<p>I wonder if this a little complexity is acceptable from language perspective? If it's fine i'll create a prototype implementation.</p>",
        "id": 242881399,
        "sender_full_name": "Charles Lew",
        "timestamp": 1623850727
    },
    {
        "content": "<p>from a language perspective it's all unobservable, right? I don't think any of the vtable details are public or stable</p>",
        "id": 242881693,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623850847
    },
    {
        "content": "<p>It is not observable, for now. But there was a saying something like \"any implementation detail will be relied on by someone, eventually\" or something.</p>",
        "id": 242881853,
        "sender_full_name": "Charles Lew",
        "timestamp": 1623850922
    },
    {
        "content": "<p>In C++ the implementation detail of vtable is already relied on by technologies like microsoft COM, etc...</p>",
        "id": 242882080,
        "sender_full_name": "Charles Lew",
        "timestamp": 1623851037
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116458\">Charles Lew</span> <a href=\"#narrow/stream/243200-t-lang.2Fmajor-changes/topic/Trait.20Upcasting.20lang-team.2398/near/242882080\">said</a>:</p>\n<blockquote>\n<p>In C++ the implementation detail of vtable is already relied on by technologies like microsoft COM, etc...</p>\n</blockquote>\n<p>Indeed, though those are also under the control of specific implementations. An implementation can choose to promise more than the language does, but it's never a requirement to promise something the language itself doesn't promise.</p>",
        "id": 242885462,
        "sender_full_name": "Connor Horman",
        "timestamp": 1623852382
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1977\">@T-lang</span>: Proposal <a href=\"https://github.com/rust-lang/lang-team/issues/98#issuecomment-866175545\">#98</a> has been seconded, and will be approved in 10 days if no objections are raised.</p>",
        "id": 243548610,
        "sender_full_name": "triagebot",
        "timestamp": 1624382059
    },
    {
        "content": "<p>This presentation has some typos. (E.g. the roles of <code>Foo</code> and <code>Bar</code> switch inexplicably.)</p>\n<p>More importantly, I think it would benefit from spelling out a few more cases. E.g. a trait can have multiple super-traits. I assume upcasts will be supported even in that case. </p>\n<p>(I need to review the thread here; maybe I can suggest a revision to the description after doing so.)</p>",
        "id": 243549228,
        "sender_full_name": "pnkfelix",
        "timestamp": 1624382328
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 243553486,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624384114
    },
    {
        "content": "<p>Just for reference, the same \"exponential blowup\" vs \"additional pointer indirection\" standoff had also been discussed in 2015: <a href=\"https://github.com/rust-lang/rfcs/issues/1277\">https://github.com/rust-lang/rfcs/issues/1277</a></p>",
        "id": 243839824,
        "sender_full_name": "Kimundi",
        "timestamp": 1624565517
    },
    {
        "content": "<p>Yes...it's sort of fundamental :)</p>",
        "id": 243890898,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624611671
    },
    {
        "content": "<p>The progress of this mcp is tracked in <a href=\"#narrow/stream/144729-wg-traits/topic/object.20upcasting\">https://rust-lang.zulipchat.com/#narrow/stream/144729-wg-traits/topic/object.20upcasting</a> . Made some progress recently: 2 prs merged, 1 in flight, and 1 in preparation.</p>",
        "id": 244787858,
        "sender_full_name": "Charles Lew",
        "timestamp": 1625297339
    },
    {
        "content": "<p>Recent progress after last update:<br>\n1 pr merged, 1 pr ready, and 1 in preparation.</p>",
        "id": 247130304,
        "sender_full_name": "Charles Lew",
        "timestamp": 1627225462
    }
]