[
    {
        "content": "<p>A new proposal has been announced: <a href=\"https://github.com/rust-lang/lang-team/issues/67\">Add a <code>NOOP_METHOD_CALL</code> lint for methods which should never be directly called #67</a>. It will be announced at the next meeting to try and draw attention to it, but usually MCPs are not discussed during triage meetings. If you think this would benefit from discussion amongst the team, consider proposing a design meeting.</p>",
        "id": 215385883,
        "sender_full_name": "triagebot",
        "timestamp": 1604354788
    },
    {
        "content": "<p>For <code>clone</code> and <code>to_owned</code>, would it not make sense to have it fire on anything <code>Copy</code>?</p>",
        "id": 215410562,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1604376230
    },
    {
        "content": "<p>I definitely support this, it's another \"guide rail\" for people who are learning.</p>",
        "id": 215662579,
        "sender_full_name": "tmandry",
        "timestamp": 1604540104
    },
    {
        "content": "<p>As I said on the compiler MCP conversation, <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> on the general idea.  I see that this one avoided the implementation discussion that I had concerns with in the other one.</p>",
        "id": 215809650,
        "sender_full_name": "scottmcm",
        "timestamp": 1604643361
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"262628\">Alexander Ronald Altman</span> <a href=\"#narrow/stream/243200-t-lang.2Fmajor-changes/topic/Add.20a.20.60NOOP_METHOD_CALL.60.20lint.20for.20methods.20whic.E2.80.A6.20lang-team.2367/near/215410562\">said</a>:</p>\n<blockquote>\n<p>For <code>clone</code> and <code>to_owned</code>, would it not make sense to have it fire on anything <code>Copy</code>?</p>\n</blockquote>\n<p>Yeah, that sounds good</p>",
        "id": 215933003,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1604725958
    },
    {
        "content": "<p>stabilizing that kind of functionality for users would require a fair amount of design work - making <code>to_owned</code> fire on <code>Copy</code> types would require marking the blanket <code>impl&lt;T: Clone&gt; ToOwned for T</code> for receiver types that satisfy an additional bound (<code>Copy</code>)</p>",
        "id": 215933062,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1604726063
    },
    {
        "content": "<p>but it shouldn't pose any problems for the internal implementation for libstd types/traits</p>",
        "id": 215933069,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1604726095
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/243200-t-lang.2Fmajor-changes/topic/Add.20a.20.60NOOP_METHOD_CALL.60.20lint.20for.20methods.20whic.E2.80.A6.20lang-team.2367/near/215933003\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"262628\">Alexander Ronald Altman</span> <a href=\"#narrow/stream/243200-t-lang.2Fmajor-changes/topic/Add.20a.20.60NOOP_METHOD_CALL.60.20lint.20for.20methods.20whic.E2.80.A6.20lang-team.2367/near/215410562\">said</a>:</p>\n<blockquote>\n<p>For <code>clone</code> and <code>to_owned</code>, would it not make sense to have it fire on anything <code>Copy</code>?</p>\n</blockquote>\n<p>Yeah, that sounds good</p>\n</blockquote>\n<p>I think that makes it <a href=\"https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_copy\">https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_copy</a> -- not that that's a bad thing.</p>",
        "id": 215942837,
        "sender_full_name": "scottmcm",
        "timestamp": 1604734032
    },
    {
        "content": "<p>this lint is more general, since it will fire on a bunch of other methods as well</p>",
        "id": 215965969,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1604771644
    },
    {
        "content": "<p>some of which are only implemented for <code>&amp;T</code>, not <code>T: Copy</code> (e.g. <a href=\"https://doc.rust-lang.org/std/ops/trait.Deref.html#impl-Deref-5\">Deref</a>)</p>",
        "id": 215966004,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1604771707
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1977\">@T-lang</span>: Proposal <a href=\"https://github.com/rust-lang/lang-team/issues/67#issuecomment-724061616\">#67</a> has been seconded, and will be approved in 10 days if no objections are raised.</p>",
        "id": 216094032,
        "sender_full_name": "triagebot",
        "timestamp": 1604933487
    },
    {
        "content": "<p>Copying my comment from the issue </p>\n<blockquote>\n<p>I'm a bit torn on this one. I'd like it if we developed and published clearer criteria for what sort of lints belong in rustc -- I remember that @oli-obk actually took a stab at that. I don't know that this could be a common source of bugs but certainly confusing compilation errors (I've experienced that myself on occasion...). In any case, I'd be ok seeing a PR go up, and I'd expect an FCP on that PR.</p>\n</blockquote>",
        "id": 216094147,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604933528
    },
    {
        "content": "<p>Note that clippy already lints this as <code>clone_double_ref</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: using `clone` on a double-reference; this will copy the reference instead of cloning the inner type\n --&gt; src/main.rs:9:2\n  |\n9 |     val.clone(); // WARNING: noop method call\n  |     ^^^^^^^^^^^\n  |\n  = note: `#[deny(clippy::clone_double_ref)]` on by default\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#clone_double_ref\nhelp: try dereferencing it\n  |\n9 |     &amp;(*val).clone(); // WARNING: noop method call\n  |     ^^^^^^^^^^^^^^^\nhelp: or try being explicit if you are sure, that you want to clone a reference\n  |\n9 |     &lt;&amp;Foo&gt;::clone(val); // WARNING: noop method call\n  |     ^^^^^^^^^^^^^^^^^^\n</code></pre></div>",
        "id": 216102666,
        "sender_full_name": "oli",
        "timestamp": 1604937061
    },
    {
        "content": "<p>As per <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2476-clippy-uno.md#lint-audit-and-categories\">https://github.com/rust-lang/rfcs/blob/master/text/2476-clippy-uno.md#lint-audit-and-categories</a> this lint belongs to the <code>Correctness</code> class</p>",
        "id": 216102960,
        "sender_full_name": "oli",
        "timestamp": 1604937164
    },
    {
        "content": "<p>correctness lints are those we consider as candidates for moving to rustc</p>",
        "id": 216103068,
        "sender_full_name": "oli",
        "timestamp": 1604937212
    },
    {
        "content": "<p>cc <span class=\"user-group-mention\" data-user-group-id=\"3456\">@T-clippy</span></p>",
        "id": 216103084,
        "sender_full_name": "oli",
        "timestamp": 1604937220
    },
    {
        "content": "<p>Thanks for the ping! If a PR should go up, please ping the Clippy team for proper deprecation of the Clippy lint.</p>",
        "id": 216123017,
        "sender_full_name": "flip1995",
        "timestamp": 1604945610
    },
    {
        "content": "<p>Yeah I remembered us talking about this specific lint at some point</p>",
        "id": 216123436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604945806
    },
    {
        "content": "<p>(and whether it was correctness...)</p>",
        "id": 216123447,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604945812
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I came up with the idea for this lint after seeing two people on the Rust discord get tripped up by calling <code>to_owned</code> on a reference to a non-<code>Clone</code> type. I agree that it's unlikely for this to result in a bug (i.e. code that compiles), but I think it helps clarify an otherwise confusing situation</p>",
        "id": 216126563,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1604947285
    },
    {
        "content": "<p>If I recall there were some examples where it actually did lead to a bug</p>",
        "id": 216132398,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604950107
    },
    {
        "content": "<p>but I don't remember what they were</p>",
        "id": 216132412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604950113
    },
    {
        "content": "<p>Just now on the users forum: <a href=\"https://users.rust-lang.org/t/error-message-suggestion-for-cloning-hashmap-a-when-k-or-v-dont-clone/51262\">https://users.rust-lang.org/t/error-message-suggestion-for-cloning-hashmap-a-when-k-or-v-dont-clone/51262</a></p>",
        "id": 216140878,
        "sender_full_name": "cuviper",
        "timestamp": 1604954822
    },
    {
        "content": "<p>That's really subtle. The generic parameters of <code>HashMap</code> didn't satisfy the required bounds, so a different impl got chosen by method resolution.</p>",
        "id": 216173709,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1604985995
    },
    {
        "content": "<p>Is rustbot supposed to automatically end the final comment period?</p>",
        "id": 217653202,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1606150351
    },
    {
        "content": "<p>no, I do that manually ..</p>",
        "id": 218359159,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606777515
    }
]