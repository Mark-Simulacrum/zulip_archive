[
    {
        "content": "<p>A new proposal has been announced: <a href=\"https://github.com/rust-lang/lang-team/issues/61\">Project Proposal: Types as const Parameters #61</a>. It will be announced at the next meeting to try and draw attention to it, but usually MCPs are not discussed during triage meetings. If you think this would benefit from discussion amongst the team, consider proposing a design meeting.</p>",
        "id": 213632276,
        "sender_full_name": "triagebot",
        "timestamp": 1602903652
    },
    {
        "content": "<p>Author of the proposal here; I‚Äôm open for any questions anyone has.  There‚Äôs a lot I haven‚Äôt worked out and a lot that‚Äôs fuzzy, but there‚Äôs also a fair bit of detail that the design more or less forces and that I can talk about but didn‚Äôt know how to fit into the proposal itself.</p>",
        "id": 213634976,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1602909259
    },
    {
        "content": "<p>at least on a surface level this looks quite similar to <code>zig</code>s comptime and is probably possible.</p>",
        "id": 213638906,
        "sender_full_name": "lcnr",
        "timestamp": 1602917908
    },
    {
        "content": "<p>I however do not feel that this is something we want to spend resources on in the near future as it is a really complex change without too much of a benefit</p>",
        "id": 213638982,
        "sender_full_name": "lcnr",
        "timestamp": 1602918076
    },
    {
        "content": "<p>or... wait</p>",
        "id": 213639079,
        "sender_full_name": "lcnr",
        "timestamp": 1602918250
    },
    {
        "content": "<p>I just looked into Zig‚Äôs <code>comptime</code>, and yeah, it‚Äôs quite similar‚Ä¶with the major difference being that this proposal still keeps all constraints checked at the declaration site, rather than Zig‚Äôs (and C++‚Äôs) ‚Äúcompile-time duck typing‚Äù.</p>",
        "id": 213639098,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1602918362
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=4b43fce057cacd1894cf786f7864e401\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=4b43fce057cacd1894cf786f7864e401</a></p>",
        "id": 213639196,
        "sender_full_name": "lcnr",
        "timestamp": 1602918556
    },
    {
        "content": "<p>doing this only requires some magic for <code>impl ToType for TyC&lt;...&gt;</code></p>",
        "id": 213639198,
        "sender_full_name": "lcnr",
        "timestamp": 1602918582
    },
    {
        "content": "<p>Yeah.  And similarly for lifetimes, maybe?</p>",
        "id": 213639249,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1602918606
    },
    {
        "content": "<p>lifetimes don't really make sense afaict</p>",
        "id": 213639252,
        "sender_full_name": "lcnr",
        "timestamp": 1602918623
    },
    {
        "content": "<p>there isn't a semantic difference between <code>'a</code> and <code>'b</code> after all</p>",
        "id": 213639254,
        "sender_full_name": "lcnr",
        "timestamp": 1602918637
    },
    {
        "content": "<p>or at least they would be more difficult to support</p>",
        "id": 213639260,
        "sender_full_name": "lcnr",
        "timestamp": 1602918665
    },
    {
        "content": "<p>but considering that lt and types are sufficiently different this doesn't seem like a big issue imo</p>",
        "id": 213639262,
        "sender_full_name": "lcnr",
        "timestamp": 1602918681
    },
    {
        "content": "<p><em>i am using a fairly liberal meaning of \"some magic\" here</em></p>",
        "id": 213639266,
        "sender_full_name": "lcnr",
        "timestamp": 1602918698
    },
    {
        "content": "<p><em>this would still be the most complex builtin trait that exists</em></p>",
        "id": 213639273,
        "sender_full_name": "lcnr",
        "timestamp": 1602918719
    },
    {
        "content": "<p>I suppose.  I figured they‚Äôd be needed for completeness because otherwise you might end up with APIs that take a slice of types but then have no way of pairing them with lifetimes they should be borrowed for.</p>",
        "id": 213639310,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1602918725
    },
    {
        "content": "<p>The other thing I noticed is that we already <em>almost</em> have a runtime equivalent of <code>Type</code>: <a href=\"https://doc.rust-lang.org/std/any/struct.TypeId.html\">https://doc.rust-lang.org/std/any/struct.TypeId.html</a></p>",
        "id": 213639325,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1602918828
    },
    {
        "content": "<p>aaaaaaaaaaaaaaaaaaaaaaaaaa, that makes everything a lot harder i suppose</p>",
        "id": 213639335,
        "sender_full_name": "lcnr",
        "timestamp": 1602918843
    },
    {
        "content": "<p>Wait, what does?</p>",
        "id": 213639386,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1602918918
    },
    {
        "content": "<p>i think so</p>",
        "id": 213639759,
        "sender_full_name": "lcnr",
        "timestamp": 1602919744
    },
    {
        "content": "<p>at least I don't know how to support additional generics this way</p>",
        "id": 213639762,
        "sender_full_name": "lcnr",
        "timestamp": 1602919758
    },
    {
        "content": "<p>Oh.</p>",
        "id": 213639764,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1602919777
    },
    {
        "content": "<p>and I think we would need additional generics to support lifetimes, I might be wrong though</p>",
        "id": 213639765,
        "sender_full_name": "lcnr",
        "timestamp": 1602919778
    },
    {
        "content": "<p>Well, we <em>do</em> already have higher order <code>const fn</code>s.  That‚Äôs an obvious target for designating additional generics.</p>",
        "id": 213639811,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1602919821
    },
    {
        "content": "<p>*desugaring, not designating</p>",
        "id": 213639814,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1602919843
    },
    {
        "content": "<p>It‚Äôs past sleep time for me; I‚Äôll be back tomorrow morning!  üòä</p>",
        "id": 213639910,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1602920056
    },
    {
        "content": "<p>I'm back!</p>",
        "id": 213667469,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1602963525
    },
    {
        "content": "<p>I like this because</p>",
        "id": 213685702,
        "sender_full_name": "comex",
        "timestamp": 1602991926
    },
    {
        "content": "<p>it would let us do computation in the trait system without the ugly ‚ÄúProlog in trait impls‚Äù that‚Äôs currently required</p>",
        "id": 213685785,
        "sender_full_name": "comex",
        "timestamp": 1602992059
    },
    {
        "content": "<p>It would also provide a very natural path to compile-time reflection.</p>",
        "id": 213685797,
        "sender_full_name": "comex",
        "timestamp": 1602992096
    },
    {
        "content": "<p>I do like the idea of compile-time-only values.  I've wanted an \"integer literal\" type, for example, that could be infinite precision so things wouldn't need to pick between i128 or u128 or whatever.</p>\n<p>Note that the implementation was already refactored so that generic params are an enum between Lifetime/Type/Const: <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/enum.GenericParamKind.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/enum.GenericParamKind.html</a></p>\n<p>All that said, I'm not sure that this solves the hard parts of variadic generics, like how to actually write code that uses them.  My inclination for now is to close/postpone this we've done with the other steps-to-variadic-generics RFCs.</p>",
        "id": 213686676,
        "sender_full_name": "scottmcm",
        "timestamp": 1602993631
    },
    {
        "content": "<p>I'm cool with postponing this; I just wanted to put it in play, so to speak, so that smaller/more focused proposals didn't accidentally break or lock out the basic idea behind it by being unaware of it.</p>",
        "id": 213688877,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1602997699
    },
    {
        "content": "<p>I‚Äôd contest that.  The big obstacle to variadic generics is the tension between, on one hand, ‚Äúvariadics should just be tuples, they shouldn‚Äôt be this huge complicated feature with limited and awkward ways to manipulate them, like in C++‚Äù‚Ä¶ and on the other hand, ‚Äúwe have no way to reason generically about tuples‚Äù.</p>",
        "id": 213689407,
        "sender_full_name": "comex",
        "timestamp": 1602998737
    },
    {
        "content": "<p>I'm also not quite sure what was meant about not solving \"the hard parts\"?</p>",
        "id": 213689466,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1602998842
    },
    {
        "content": "<p>The way this works out would \"solve\" variadic generics the same way Rust \"solves\" variadic parameters to ordinary functions at runtime‚Äîby just passing in slices instead.</p>",
        "id": 213689516,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1602998914
    },
    {
        "content": "<p>If we had compile-time reflection that included the ability to go back from ‚Äúconst-generic representation of a type‚Äù to the type itself, that would provide a way to do more complex things with arbitrary tuple types.</p>",
        "id": 213689517,
        "sender_full_name": "comex",
        "timestamp": 1602998915
    },
    {
        "content": "<p>If that existed, you might still want some built-in syntax for doing <em>basic</em> things like ‚Äúrepeat this expression for each variadic argument‚Äù, but it wouldn‚Äôt have to be fully general if reflection were also available as an escape hatch.</p>",
        "id": 213689575,
        "sender_full_name": "comex",
        "timestamp": 1602999039
    },
    {
        "content": "<p>Yeah.  I can certainly anticipate some simple use cases being worth introducing sugar for, but sugar is all it would be.</p>",
        "id": 213689661,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1602999216
    },
    {
        "content": "<p>Oh, I think I see a difficulty <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> might have been forseeing, although I don't think it's a fundamental one.  Type definitions would have no way of <em>using</em> data structures full of types other than eventually blindly passing some munging of them to <code>std::tuple::Tuple</code>.  This would be immediately resolved by GADT support because then you could \"pattern match\" in each case, but perhaps there are simpler solutions too?</p>",
        "id": 213689719,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1602999270
    },
    {
        "content": "<p>In particular I think introducing an <code>std::tuple::CoTuple</code> (or <code>AnonSum</code>, or <code>Choice</code>, or whatever we want to call it) would be sufficient, because the rest of it is then just computing the right nested structure of sums and products, which can be done in standard <code>const</code> Rust already.</p>",
        "id": 213689738,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1602999343
    },
    {
        "content": "<p>Why would that be necessary?</p>",
        "id": 213689781,
        "sender_full_name": "comex",
        "timestamp": 1602999365
    },
    {
        "content": "<p>well‚Ä¶ what exactly do you want to pattern-match on?</p>",
        "id": 213689785,
        "sender_full_name": "comex",
        "timestamp": 1602999384
    },
    {
        "content": "<p>What I‚Äôm envisioning is that there would be some <code>const</code> fn to, say, specialize a function or type with a given generic argument - like <code>foo::&lt;T&gt;</code> but where <code>T</code> is only known when the caller is executed rather than when it‚Äôs compiled (but this is all still at compile time)</p>",
        "id": 213689854,
        "sender_full_name": "comex",
        "timestamp": 1602999500
    },
    {
        "content": "<p>Yes, I'm basically envisioning the same.</p>",
        "id": 213689857,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1602999527
    },
    {
        "content": "<p>But this problem is unrelated to that.</p>",
        "id": 213689862,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1602999536
    },
    {
        "content": "<p>If <code>foo</code> had trait bounds on that parameter and <code>T</code> didn‚Äôt satisfy them, it could panic, which the compiler could then format as a nice error</p>",
        "id": 213689872,
        "sender_full_name": "comex",
        "timestamp": 1602999561
    },
    {
        "content": "<p>‚Äúit‚Äù = the specializing function</p>",
        "id": 213689877,
        "sender_full_name": "comex",
        "timestamp": 1602999578
    },
    {
        "content": "<p>I‚Äôd also envision you‚Äôd be able to do comparisons between types if you do want to pattern match.  However, there is one big obstacle that also comes up with specialization, which is that lifetimes aren‚Äôt monomorphized.</p>",
        "id": 213689942,
        "sender_full_name": "comex",
        "timestamp": 1602999638
    },
    {
        "content": "<p>Say, for example, I'm building something like the ‚Äúoptionally typed box‚Äù I mentioned in the proposal text.  The obvious shape of the definition is:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">OTBox</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">optT</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Type</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Typed</span><span class=\"p\">(</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"c1\">// How do I get T out of optT?</span>\n<span class=\"w\">    </span><span class=\"n\">Untyped</span><span class=\"p\">(</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">Any</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"c1\">// How do I ensure this case is only used at type OTBox&lt;{None}&gt;?</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>But I don't know how to solve the two comments without GADTs or the above <code>std::tuple::AnonSum</code> (which are equivalent in power given the rest of this proposal).</p>",
        "id": 213689967,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1602999681
    },
    {
        "content": "<p>...so you can‚Äôt just have an Eq implementation for types, because if the types contain lifetimes, the compiler doesn‚Äôt know whether they‚Äôre equal or not.  For the same monomorphized function, they could be equal or not equal depending on how the function is used.</p>",
        "id": 213690058,
        "sender_full_name": "comex",
        "timestamp": 1602999836
    },
    {
        "content": "<p>‚Äú How do I get T out of optT?‚Äù</p>",
        "id": 213690111,
        "sender_full_name": "comex",
        "timestamp": 1602999877
    },
    {
        "content": "<p>why not just <code>optT.unwrap()</code>?</p>",
        "id": 213690115,
        "sender_full_name": "comex",
        "timestamp": 1602999887
    },
    {
        "content": "<p>oh, I see, it might be None</p>",
        "id": 213690126,
        "sender_full_name": "comex",
        "timestamp": 1602999908
    },
    {
        "content": "<p>Yeah.</p>",
        "id": 213690127,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1602999912
    },
    {
        "content": "<p>Then you‚Äôd have a single field of type <code>match optT { Some(T) =&gt; Box&lt;T&gt;, None =&gt; Box&lt;Any&gt; }</code></p>",
        "id": 213690191,
        "sender_full_name": "comex",
        "timestamp": 1602999965
    },
    {
        "content": "<p>Oh.  Yes, you're right, and I'm not thinking.</p>",
        "id": 213690204,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1602999981
    },
    {
        "content": "<p>That's quite simple.</p>",
        "id": 213690207,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1602999989
    },
    {
        "content": "<p>Just pattern match on the Option by <em>actually pattern matching</em>.</p>",
        "id": 213690217,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1603000007
    },
    {
        "content": "<p>Also, there's nothing stopping a <code>PartialEq</code> implementation for types, and that's the more theoretically correct approach anyway.  Types that can't be proven distinct and also can't be proven equal‚Ä¶just aren't equal and aren't unequal.  It's no worse than floats, right?</p>",
        "id": 213690221,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1603000015
    },
    {
        "content": "<p>In theory‚Ä¶ although I think it might be too surprising to literally implement PartialEq; I think floats only get away with it because NaNs are usually not what you want to compare against anyway (and they still confuse the heck out of people)</p>",
        "id": 213690329,
        "sender_full_name": "comex",
        "timestamp": 1603000178
    },
    {
        "content": "<p>Hm.</p>",
        "id": 213690375,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1603000206
    },
    {
        "content": "<p>But more generally, one proposal for sound specialization boils down to having predicates of the form ‚Äúis this trait bound guaranteed to hold regardless of the values of any lifetime parameters‚Äù, and I think you‚Äôd want a similar concept in a reflection API.</p>",
        "id": 213690409,
        "sender_full_name": "comex",
        "timestamp": 1603000310
    },
    {
        "content": "<p>For the sake of putting types in data structures that need proper reflexive equality, we could provide a pair of newtypes that implement the conservative and liberal approximations to the partial equality.  One would resolve undecideds to false and the other would resolve them to true.  That way the user gets exactly the semantics they ask for, and if they <em>don't</em> ask for one, we force them to choose.</p>",
        "id": 213690414,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1603000321
    },
    {
        "content": "<p>But this is getting off in the weeds.</p>",
        "id": 213690452,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1603000326
    },
    {
        "content": "<p>I think your musings about predicates on types is just making <code>std::type_level::Constraint</code>, as I described it, more obviously useful.</p>",
        "id": 213690545,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1603000444
    },
    {
        "content": "<p>Oh my god.  I just realized:  with this proposal as it stands, we <em>already</em> have <code>AnonSum</code>.</p>",
        "id": 213690576,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1603000561
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"262628\">@Alexander Ronald Altman</span> I'm picturing difficulties like \"how do I make an enum with one variant for each of the types in the variadic generic?\", for example.  (Like if I wanted to make a <code>VariadicEither</code> type.)  Or \"what's the rust equivalent of C++'s <a href=\"https://en.cppreference.com/w/cpp/language/fold\">fold expressions</a>?\"</p>",
        "id": 213690619,
        "sender_full_name": "scottmcm",
        "timestamp": 1603000587
    },
    {
        "content": "<p>I'm just about to answer that first question right now!  That's the epiphany I just had!  <span aria-label=\"happy\" class=\"emoji emoji-1f600\" role=\"img\" title=\"happy\">:happy:</span></p>",
        "id": 213690626,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1603000619
    },
    {
        "content": "<p>(Basically, <em>having</em> the parameter values is easy compared to actually being able to <em>use</em> or <em>infer</em> them.)</p>",
        "id": 213690641,
        "sender_full_name": "scottmcm",
        "timestamp": 1603000664
    },
    {
        "content": "<p>All you need is <code>PhantomData</code> and <code>for</code> for all types of generic parameters, not just types/lifetimes.</p>",
        "id": 213690711,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1603000766
    },
    {
        "content": "<p>Then you do:</p>",
        "id": 213690714,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1603000769
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">AnonSum</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">tys</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Type</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"k\">for</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">i</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">PhantomData</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"n\">i</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">tys</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]}))</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 213690775,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1603000822
    },
    {
        "content": "<p>Oh wait.  We need an existential, not a universal.  Never mind.  <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 213690790,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1603000860
    },
    {
        "content": "<p>Maybe the core idea is still salvagable though?</p>",
        "id": 213690802,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1603000880
    },
    {
        "content": "<p>We basically need <code>const</code> sigma types, don't we, for that.  D:</p>",
        "id": 213690941,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1603001126
    },
    {
        "content": "<p>Wait.  Isn't that what trait objects are for?</p>",
        "id": 213691018,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1603001251
    },
    {
        "content": "<p>Or dynsize things in general, I guess?</p>",
        "id": 213691021,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1603001263
    },
    {
        "content": "<p><code>AnonSum&lt;{tys}&gt;</code> is a pair of an index into <code>tys</code> and a value of the type at that index.  The latter is the \"data\" and the former is the \"metadata\" of a dynamically sized type, yeah?</p>",
        "id": 213691070,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1603001342
    },
    {
        "content": "<p>I do see how, no matter what path forward is favored, this proposal <em>by itself</em> is not enough to solve that.  <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>",
        "id": 213691130,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1603001432
    },
    {
        "content": "<p>‚ÄúFold expressions‚Äù should be easy though:  they're literally just a normal fold call, or any other iterator method, on the <code>iter</code> of the <code>const</code> slice.</p>",
        "id": 213691193,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1603001525
    },
    {
        "content": "<p>Let's take the example on that page.  In the original C++:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"k\">typename</span><span class=\"p\">...</span> <span class=\"n\">Args</span><span class=\"o\">&gt;</span>\n<span class=\"kt\">bool</span> <span class=\"n\">all</span><span class=\"p\">(</span><span class=\"n\">Args</span><span class=\"p\">...</span> <span class=\"n\">args</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"p\">(...</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">args</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n</code></pre></div>",
        "id": 213691212,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1603001579
    },
    {
        "content": "<p>Oh, wait, that's not a good example because it relies on C++'s weirdness around <code>&amp;&amp;</code> and its lack of declaration-site type checking.</p>",
        "id": 213691263,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1603001645
    },
    {
        "content": "<p>Uh‚Ä¶challenge ideas welcome, I guess?  <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 213691270,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1603001667
    },
    {
        "content": "<p>Function that takes a bunch of arguments and <code>println!</code>s them all.</p>",
        "id": 213691281,
        "sender_full_name": "comex",
        "timestamp": 1603001715
    },
    {
        "content": "<p>Okay!</p>",
        "id": 213691285,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1603001729
    },
    {
        "content": "<p>Wait, how is that a challenge for this proposal?</p>",
        "id": 213691339,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1603001824
    },
    {
        "content": "<p>An arbitrary number of arguments.</p>",
        "id": 213691345,
        "sender_full_name": "comex",
        "timestamp": 1603001851
    },
    {
        "content": "<p>Oh, I see, yeah.</p>",
        "id": 213691392,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1603001897
    },
    {
        "content": "<p>The most natural approach is recursive, but choosing between the base case and the recursive case is difficult.</p>",
        "id": 213691393,
        "sender_full_name": "comex",
        "timestamp": 1603001901
    },
    {
        "content": "<p>Well, in the absence of varargs functions, use a tuple, right?</p>",
        "id": 213691396,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1603001915
    },
    {
        "content": "<p>Sure.</p>",
        "id": 213691400,
        "sender_full_name": "comex",
        "timestamp": 1603001940
    },
    {
        "content": "<p>One easy way to distinguish would be if Rust had an equivalent of <code>if constexpr</code>.  Without that, I think it still can be done through the trait system, but it would be ugly.</p>",
        "id": 213691408,
        "sender_full_name": "comex",
        "timestamp": 1603001992
    },
    {
        "content": "<p>Anyway, I‚Äôm going to sleep, but I‚Äôd like to see what you  come up with.</p>",
        "id": 213691465,
        "sender_full_name": "comex",
        "timestamp": 1603002076
    },
    {
        "content": "<p>(This is one of those places where templates are easier for C++, since it doesn't need to check things until invoked.)</p>",
        "id": 213691466,
        "sender_full_name": "scottmcm",
        "timestamp": 1603002082
    },
    {
        "content": "<p>I'm typing it up right now.</p>",
        "id": 213691467,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1603002083
    },
    {
        "content": "<p>Slightly strawmanned syntax, but not too badly.</p>",
        "id": 213691474,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1603002098
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">printlnAll</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">tys</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Type</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">values</span>: <span class=\"nc\">Tuple</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"n\">tys</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">tys</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">all</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">ty</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">({</span><span class=\"n\">ty</span><span class=\"p\">}</span>: <span class=\"nc\">Display</span><span class=\"p\">))}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">tys</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">values</span><span class=\"p\">.{</span><span class=\"n\">i</span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 213691516,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1603002130
    },
    {
        "content": "<p>Yeah?</p>",
        "id": 213691528,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1603002169
    },
    {
        "content": "<p>Good start, but that <code>for</code> loop can‚Äôt exist at runtime, so with that approach it would need to be some new ‚Äúcompile time <code>for</code>‚Äù construct.  And how does it type check?  How do we reassure the compiler that <code>values.{i}: Display</code> in a way it understands?</p>",
        "id": 213691608,
        "sender_full_name": "comex",
        "timestamp": 1603002352
    },
    {
        "content": "<p>I see the problem with <code>const for</code>.</p>",
        "id": 213691648,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1603002389
    },
    {
        "content": "<p>Anyway, going to sleep for real this time.</p>",
        "id": 213691660,
        "sender_full_name": "comex",
        "timestamp": 1603002450
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 213691662,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1603002455
    },
    {
        "content": "<p>Checking that each type implements <code>Display</code> is done already though, given a <code>const for</code>.  The compiler knows, in the body of the compile-time loop, that we need <code>Display</code> for <code>values.{i}</code>, so it looks up the type and finds <code>tys[i]</code>, which is a type variable, so it asks after the known properties of it‚Ä¶which include <code>Display</code> because that was required on the outside by iterating over all of <code>tys</code>.</p>",
        "id": 213691769,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1603002632
    },
    {
        "content": "<p>I should go to sleep myself soon.  Goodnight, all!  <span aria-label=\"sleeping\" class=\"emoji emoji-1f634\" role=\"img\" title=\"sleeping\">:sleeping:</span></p>",
        "id": 213691787,
        "sender_full_name": "Alexander Ronald Altman",
        "timestamp": 1603002717
    }
]