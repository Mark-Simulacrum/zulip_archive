[
    {
        "content": "<p>Hey <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span> -- design meeting in <strong>this topic</strong> in ~10 minutes.</p>\n<p>Topic:  Code Generation Unit Partitioning Meeting <a href=\"https://github.com/rust-lang/compiler-team/issues/281\">compiler-team#281</a></p>",
        "id": 198443239,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590155554
    },
    {
        "content": "<p><a href=\"https://gist.github.com/wesleywiser/9a7e3ca53a948dabbf30b3a0b8635860\">Gist with details</a></p>",
        "id": 198443452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590155645
    },
    {
        "content": "<p>Hi Niko :)<br>\nI'd like to participate because this topic is very important to me (specially because I'm now working on mir-opts). How do the meetings work? Do we have like a Hangouts Meet / Jitsi / that kind of thing?</p>",
        "id": 198444034,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590155917
    },
    {
        "content": "<p>They happen here in this Zulip channel over chat <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 198444078,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590155943
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"212698\">@Félix Fischer</span> you're in the right place!</p>",
        "id": 198444157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590155994
    },
    {
        "content": "<p>Yay! Okay, I'm ready then <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 198444270,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590156040
    },
    {
        "content": "<p>I will also hang around :D</p>",
        "id": 198444285,
        "sender_full_name": "andjo403",
        "timestamp": 1590156049
    },
    {
        "content": "<p>Hello <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span>! codegen unit partitioning discussion starting <strong>now</strong>. Please <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> to show you're here. To give folks time to gather, let's have a few minutes for</p>\n<h1>Announcements</h1>",
        "id": 198444503,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590156179
    },
    {
        "content": "<ul>\n<li>PS, I'm happy to \"hand off\" the running of this meeting to <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span>, if that's ok with you <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span></li>\n</ul>",
        "id": 198444527,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590156204
    },
    {
        "content": "<p>Um, sure <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 198444549,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590156218
    },
    {
        "content": "<p>I've never run one of these before so I'm a bit lost. I guess it would be good to start by re-iterating the problem?</p>",
        "id": 198444566,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590156239
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 198444608,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590156247
    },
    {
        "content": "<p><del>So the backend part of the compiler has parallel codegen.</del></p>",
        "id": 198444640,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590156272
    },
    {
        "content": "<ul>\n<li>perf.rlo will be transitioning to using a database for the site backend, as well as some (not yet implemented) changes to the collector with the intent of being able to collect more statistics (currently on the radar: cache misses, artifact sizes). Feel free to file issues if there's something you think would be helpful to track! (PR here: <a href=\"https://github.com/rust-lang/rustc-perf/pull/656\">https://github.com/rust-lang/rustc-perf/pull/656</a>)</li>\n</ul>",
        "id": 198444653,
        "sender_full_name": "simulacrum",
        "timestamp": 1590156278
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> oh lets wait until announcements are done, I guess</p>",
        "id": 198444689,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590156297
    },
    {
        "content": "<p>Sorry!</p>",
        "id": 198444711,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590156309
    },
    {
        "content": "<p>wanted to mention, as I've stated <a href=\"#narrow/stream/131828-t-compiler/topic/Trait.20object.20with.20non-static.20lifetime.20is.20accepted.20where.20sta\">in this topic</a> that both current <code>P-critical</code> issues are solved with the same PR. Niko \"is\" investigating (Niko?)</p>",
        "id": 198444738,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1590156325
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'm glad to give you some interesting tasks <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 198444742,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1590156327
    },
    {
        "content": "<p>(its not your fault, <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> ! we don't have a good way to signaling \"time for announcements is over.)</p>",
        "id": 198444763,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590156342
    },
    {
        "content": "<ul>\n<li>infrastructure and release teams are checking boxes in a planned move to Zulip</li>\n<li>we have a release in ~12 days</li>\n</ul>",
        "id": 198444854,
        "sender_full_name": "simulacrum",
        "timestamp": 1590156369
    },
    {
        "content": "<p>Oooh!</p>",
        "id": 198445001,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590156440
    },
    {
        "content": "<blockquote>\n<p>(currently on the radar: cache misses, artifact sizes)</p>\n</blockquote>\n<p>That is super cool <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 198445074,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590156468
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> can you link the discussion of shifting to zulip?</p>",
        "id": 198445076,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590156468
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/release-team/issues/6\">https://github.com/rust-lang/release-team/issues/6</a> and <a href=\"https://github.com/rust-lang/infra-team/issues/36\">https://github.com/rust-lang/infra-team/issues/36</a></p>",
        "id": 198445174,
        "sender_full_name": "simulacrum",
        "timestamp": 1590156500
    },
    {
        "content": "<p>okay. I think that's enough time for announcements. Take it away, <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> !</p>",
        "id": 198445214,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590156517
    },
    {
        "content": "<p>So the backend part of the compiler has parallel codegen. To facilitate this as well as our incremental compilation, we split a crate into LLVM modules which we call \"code generation units\" or CGUs. Each CGU can then be run through LLVM in parallel or only recompiled if it has changed. </p>\n<p>The process of deciding what functions go in what CGU is called CGU partitioning. This is a pretty critical algorithm because it impacts two things:</p>\n<ol>\n<li>\n<p>Without LTO, LLVM will only perform inter-procedural optimizations like inlining between functions in the same CGU (since, if they are in another CGU, it can't see the function body). </p>\n</li>\n<li>\n<p>In incremental mode, if a function body changes, we have to re-codegen the entire CGU it belongs to.</p>\n</li>\n</ol>",
        "id": 198445264,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590156538
    },
    {
        "content": "<p>(And those two things are interconnected)</p>",
        "id": 198445398,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590156589
    },
    {
        "content": "<p>(i.e., partly why we have to recodegen everything, is because we don't know what LLVM inlined into what etc)</p>",
        "id": 198445466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590156604
    },
    {
        "content": "<p>I think we also suspected that partitioning could have been affecting the gains from polymorphisation (testing with a single codegen unit is something I plan to do).</p>",
        "id": 198445514,
        "sender_full_name": "davidtwco",
        "timestamp": 1590156623
    },
    {
        "content": "<p>So CGU partitioning is critical to both runtime performance of Rust code because it enables or hinders LLVM optimizations and it is also critical to compiler performance since incremental works best when CGUs are smaller and there is less work to do.</p>",
        "id": 198445518,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590156625
    },
    {
        "content": "<p>Yeah, that's a great point.</p>",
        "id": 198445606,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590156666
    },
    {
        "content": "<p>Which is a good segway into the problem which is that there are (probably) some deficiencies in the current partitioning algorithm.</p>",
        "id": 198445663,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590156694
    },
    {
        "content": "<p>So, for reference, the current algorithm is defined in <a href=\"https://github.com/rust-lang/rust/blob/e91aebc1a3835b9b420da0c021e211175a724b8d/src/librustc_mir/monomorphize/partitioning.rs\">https://github.com/rust-lang/rust/blob/e91aebc1a3835b9b420da0c021e211175a724b8d/src/librustc_mir/monomorphize/partitioning.rs</a></p>",
        "id": 198445701,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590156713
    },
    {
        "content": "<p>It's actually very well commented so kudos to mw and others!</p>",
        "id": 198445788,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590156732
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> out of curiosity, do you or others know the partitioning algorithm LLVM uses?</p>",
        "id": 198445824,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590156747
    },
    {
        "content": "<p>or sorry, that clang uses, I mean</p>",
        "id": 198445873,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590156769
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.20codegen.20unit.20partitioning.20compiler-team.23281/near/198445873\">said</a>:</p>\n<blockquote>\n<p>or sorry, that clang uses, I mean</p>\n</blockquote>\n<p>Thank you for the clarification, I was just gonna ask you what you meant by llvm!</p>",
        "id": 198445921,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590156790
    },
    {
        "content": "<p>No, I don't but I suspect it's very closely mapped to the translation unit concept C and C++ have.</p>",
        "id": 198445941,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590156800
    },
    {
        "content": "<p>yeah I was just in the midst of trying to phrase a comment hypothesizing that</p>",
        "id": 198445968,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590156816
    },
    {
        "content": "<p>I'm not aware of what Clang uses</p>",
        "id": 198445972,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590156819
    },
    {
        "content": "<p>I'm not a C\\C++ dev but my impression is that there's a greater expectation on C\\C++ developers to manage compile times by splitting or combining code themselves to manage compile time and performance.</p>",
        "id": 198446070,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590156861
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> they use \"one <code>.c</code> file is one partition\"</p>",
        "id": 198446078,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590156865
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.20codegen.20unit.20partitioning.20compiler-team.23281/near/198445701\">said</a>:</p>\n<blockquote>\n<p>So, for reference, the current algorithm is defined in <a href=\"https://github.com/rust-lang/rust/blob/e91aebc1a3835b9b420da0c021e211175a724b8d/src/librustc_mir/monomorphize/partitioning.rs\">https://github.com/rust-lang/rust/blob/e91aebc1a3835b9b420da0c021e211175a724b8d/src/librustc_mir/monomorphize/partitioning.rs</a></p>\n</blockquote>\n<p>One detail that wasn't immediately obvious to me - the doc comment explains that the heuristic is that, for each source-level module, there are two codegen units - one for non-generic code, and one for generic code. It didn't explain how you get to the requested <code>N</code> codegen units from that, and I believe from a quick read that it merges the smallest two codegen units repeatedly until it reaches <code>N</code>.</p>",
        "id": 198446079,
        "sender_full_name": "davidtwco",
        "timestamp": 1590156865
    },
    {
        "content": "<p>Yes, that's correct.</p>",
        "id": 198446106,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590156882
    },
    {
        "content": "<p>or <code>.cpp</code> of course</p>",
        "id": 198446112,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590156886
    },
    {
        "content": "<p>There is one other thing worth mentioning though, <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span></p>",
        "id": 198446149,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590156899
    },
    {
        "content": "<p>in principle, ThinLTO was supposed to help ammeliorate this trade-off on the LLVM side</p>",
        "id": 198446169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590156910
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>!</p>",
        "id": 198446226,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590156947
    },
    {
        "content": "<p>it being basically a scheme that lets you do inlining quite late, so that we still get (most of) the benefits of inlining even if we slice into very fine codegen-units</p>",
        "id": 198446238,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590156956
    },
    {
        "content": "<p>(from polymorphisation's perspective: my assumption is that if we mostly polymorphise closures right now - which are necessarily contained in generic functions - then the result is that polymorphised closures are initially in different codegen units from the functions that call them; of course, after merging, who knows how it ends up)</p>",
        "id": 198446305,
        "sender_full_name": "davidtwco",
        "timestamp": 1590156977
    },
    {
        "content": "<p>(and in principle I think it supports incremental recompilation, too, but I'm not sure if we're doing that)</p>",
        "id": 198446311,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590156980
    },
    {
        "content": "<p>I'm definitely not an expert on this part of the compiler so I'm mostly just talking about what I've learned from tinkering with the partitioning algorithm.</p>",
        "id": 198446361,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590157010
    },
    {
        "content": "<p>so, the strategy of merging smallest two repeatedly until N is hit</p>",
        "id": 198446385,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590157026
    },
    {
        "content": "<p>I can understand how that is optimizing the load balancing</p>",
        "id": 198446396,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590157034
    },
    {
        "content": "<p>in terms of compilation work</p>",
        "id": 198446400,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590157039
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.20codegen.20unit.20partitioning.20compiler-team.23281/near/198446311\">said</a>:</p>\n<blockquote>\n<p>(and in principle I think it supports incremental recompilation, too, but I'm not sure if we're doing that)</p>\n</blockquote>\n<p>It appears to support it, at least from the Clang side: <a href=\"https://clang.llvm.org/docs/ThinLTO.html\">https://clang.llvm.org/docs/ThinLTO.html</a></p>",
        "id": 198446415,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590157042
    },
    {
        "content": "<p>but I would have thought one would be better off with something that is aware of the, I dunno, \"edges\" between the cgu's ?</p>",
        "id": 198446465,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590157062
    },
    {
        "content": "<p>One thing I was hoping to get out of this meeting would be to identify who has an understanding of this part of the compiler.</p>",
        "id": 198446467,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590157064
    },
    {
        "content": "<p>in terms of interdependencies</p>",
        "id": 198446475,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590157069
    },
    {
        "content": "<p>(i.e. referencing relationships?)</p>",
        "id": 198446494,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590157079
    },
    {
        "content": "<p>So, <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> I think what you're getting is is something I haven't mentioned yet</p>",
        "id": 198446550,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590157094
    },
    {
        "content": "<p>Which is that, within a CGU, we include copies of all the functions callable from the \"roots\" of the CGU</p>",
        "id": 198446580,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590157118
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.20codegen.20unit.20partitioning.20compiler-team.23281/near/198446467\">said</a>:</p>\n<blockquote>\n<p>One thing I was hoping to get out of this meeting would be to identify who has an understanding of this part of the compiler.</p>\n</blockquote>\n<p>I've looked at this a little bit anticipating that it could be affecting polymorphisation, and I'm happy to help out and dive deeper (exams have just finished, so just starting to get polymorphisation back in cache).</p>",
        "id": 198446616,
        "sender_full_name": "davidtwco",
        "timestamp": 1590157132
    },
    {
        "content": "<p>This is mentioned here <a href=\"https://github.com/rust-lang/rust/blob/e91aebc1a3835b9b420da0c021e211175a724b8d/src/librustc_mir/monomorphize/partitioning.rs#L73\">https://github.com/rust-lang/rust/blob/e91aebc1a3835b9b420da0c021e211175a724b8d/src/librustc_mir/monomorphize/partitioning.rs#L73</a></p>",
        "id": 198446642,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590157147
    },
    {
        "content": "<p>and is implemented here <a href=\"https://github.com/rust-lang/rust/blob/e91aebc1a3835b9b420da0c021e211175a724b8d/src/librustc_mir/monomorphize/partitioning.rs#L555\">https://github.com/rust-lang/rust/blob/e91aebc1a3835b9b420da0c021e211175a724b8d/src/librustc_mir/monomorphize/partitioning.rs#L555</a></p>",
        "id": 198446686,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590157174
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.20codegen.20unit.20partitioning.20compiler-team.23281/near/198446580\">said</a>:</p>\n<blockquote>\n<p>Which is that, within a CGU, we include copies of all the functions callable from the \"roots\" of the CGU</p>\n</blockquote>\n<p>oh, right. I think I forgot that detail</p>",
        "id": 198446691,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590157176
    },
    {
        "content": "<p>even so, the merging process would still benefit from being aware of this, right?</p>",
        "id": 198446769,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590157205
    },
    {
        "content": "<p>Perhaps yeah.</p>",
        "id": 198446808,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590157222
    },
    {
        "content": "<p>because those copies are creating extra work that would be eliminated by smarter merging</p>",
        "id": 198446811,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590157224
    },
    {
        "content": "<p>(at least, I <strong>hope</strong> it would be eliminated.)</p>",
        "id": 198446840,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590157241
    },
    {
        "content": "<p>I would think merging CGUs that share large overlaps of the same functions would result in less duplicate code</p>",
        "id": 198446842,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590157241
    },
    {
        "content": "<p>Wait, we include copies of <em>all</em> the callable functions?</p>",
        "id": 198446847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590157244
    },
    {
        "content": "<p>Or those that are marked <code>#[inline]</code> or some other heuristic</p>",
        "id": 198446865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590157253
    },
    {
        "content": "<p>ones from the same module that comment says</p>",
        "id": 198446871,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590157258
    },
    {
        "content": "<p>even if not marked inline</p>",
        "id": 198446880,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590157262
    },
    {
        "content": "<p>And if marked <code>#[inline(never)]</code>?</p>",
        "id": 198446907,
        "sender_full_name": "bjorn3",
        "timestamp": 1590157282
    },
    {
        "content": "<p>OK.</p>",
        "id": 198446908,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590157282
    },
    {
        "content": "<p>wait, hold on, that's just a consequence of the cgu choice</p>",
        "id": 198446919,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590157286
    },
    {
        "content": "<p>/me thinks more</p>",
        "id": 198446926,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590157290
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.20codegen.20unit.20partitioning.20compiler-team.23281/near/198446842\">said</a>:</p>\n<blockquote>\n<p>I would think merging CGUs that share large overlaps of the same functions would result in less duplicate code</p>\n</blockquote>\n<p>Maybe we could compute a \"distance\" between two CGU that was more or less representative of this overlap, and use that as a heuristic for picking CGU pairs for the purposes of merging?</p>",
        "id": 198446954,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590157308
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> can you confirm wheter it makes copies from other modules even if they aren't marked <code>#[inline]</code> ?</p>",
        "id": 198447015,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590157324
    },
    {
        "content": "<p>Hmm....</p>",
        "id": 198447037,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590157337
    },
    {
        "content": "<p>actually, its seems easy to conclude that <em>either</em> way, there's potentially stuff to investigate here</p>",
        "id": 198447111,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590157363
    },
    {
        "content": "<p>I've definitely seen code from other CGUs get included but I can't recall if it's due to <code>#[inline]</code> or not.</p>",
        "id": 198447124,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590157370
    },
    {
        "content": "<p>I think the inlining-specific movement of mono items between the codegen units only considers those marked with <code>#[inline]</code>.</p>",
        "id": 198447134,
        "sender_full_name": "davidtwco",
        "timestamp": 1590157374
    },
    {
        "content": "<p>(based on the top comment)</p>",
        "id": 198447153,
        "sender_full_name": "davidtwco",
        "timestamp": 1590157382
    },
    {
        "content": "<p>regardless of how/whether duplication is done, a smarter merge strategy might be good</p>",
        "id": 198447158,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590157383
    },
    {
        "content": "<p>I think it must <em>only</em> be <code>#[inline]</code> items otherwise the CGUs would all be much bigger.</p>",
        "id": 198447209,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590157401
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"sd\">//! - The partitioning algorithm has to know which functions are likely to get</span>\n<span class=\"sd\">//!   inlined, so it can distribute function instantiations accordingly. Since</span>\n<span class=\"sd\">//!   there is no way of knowing for sure which functions LLVM will decide to</span>\n<span class=\"sd\">//!   inline in the end, we apply a heuristic here: Only functions marked with</span>\n<span class=\"sd\">//!   `#[inline]` are considered for inlining by the partitioner. The current</span>\n<span class=\"sd\">//!   implementation will not try to determine if a function is likely to be</span>\n<span class=\"sd\">//!   inlined by looking at the functions definition.</span>\n</code></pre></div>",
        "id": 198447257,
        "sender_full_name": "davidtwco",
        "timestamp": 1590157412
    },
    {
        "content": "<p>So, we've talked a lot about the specifics of the current algorithm. Are there other questions people have that we should address about it now or should we move on?</p>",
        "id": 198447386,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590157458
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span>, I was copying the same snippet :3</p>",
        "id": 198447401,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590157472
    },
    {
        "content": "<p>(Just trying to watch the clock)</p>",
        "id": 198447411,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590157480
    },
    {
        "content": "<p>I think it's worth mentioning that we're modeling the current status as a local maxima</p>",
        "id": 198447447,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590157498
    },
    {
        "content": "<p>Like, it's more or less optimized for how we generate MIR today</p>",
        "id": 198447486,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590157515
    },
    {
        "content": "<p>BUT it's just a local optimum, and not what we really want. We seem to get regressions with every other MIR opt :P</p>",
        "id": 198447520,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590157545
    },
    {
        "content": "<p>Does that make sense?</p>",
        "id": 198447582,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590157565
    },
    {
        "content": "<p>Yeah, so the theory <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>  and I have is that the algorithm got tweaked per how rustc works \"today\" and the MIR we generate gets tweaked to make the partitioning logic happy and so on.</p>",
        "id": 198447610,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590157586
    },
    {
        "content": "<p>As in, we may only see benefits from changing this strategy if we do it in tandem with other changes to e..g. MIR code gen?</p>",
        "id": 198447625,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590157603
    },
    {
        "content": "<p>Potentially yeah</p>",
        "id": 198447636,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590157612
    },
    {
        "content": "<p>Or said another way</p>",
        "id": 198447642,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590157615
    },
    {
        "content": "<p>We may only see benefits from further MIR optimizations if we tweak the partitioning logic.</p>",
        "id": 198447686,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590157643
    },
    {
        "content": "<p>ah, okay, I was wondering if I was supposed to read <span class=\"user-mention\" data-user-id=\"212698\">@Félix Fischer</span> 's comment with that (bidirectional) interpretation</p>",
        "id": 198447716,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590157671
    },
    {
        "content": "<p>is the concern that MIR optimizations are limited by what they see from other CGUs?</p>",
        "id": 198447721,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590157675
    },
    {
        "content": "<p>or is that we think LLVM is not able to do the inlining that would be imp't</p>",
        "id": 198447771,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590157690
    },
    {
        "content": "<p>I don't think so but perhaps I'm misinterpreting your question <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 198447783,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590157699
    },
    {
        "content": "<p>I think my question is confused</p>",
        "id": 198447791,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590157705
    },
    {
        "content": "<p>all of our opts happen before cgu partionining</p>",
        "id": 198447803,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590157715
    },
    {
        "content": "<p>MIR optimizations generally don't care about CGU partitioning since it happens later in the compiler.</p>",
        "id": 198447807,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590157719
    },
    {
        "content": "<p>so I guess I don't quite understand how it interacts with the mir opts I guess</p>",
        "id": 198447809,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590157722
    },
    {
        "content": "<p>Yeah, exactly.</p>",
        "id": 198447810,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590157722
    },
    {
        "content": "<p>Oh</p>",
        "id": 198447815,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590157728
    },
    {
        "content": "<p>So</p>",
        "id": 198447820,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590157730
    },
    {
        "content": "<p>What we think is happening, is that as we optimize things, that changes the \"estimated size\" of a MIR function.</p>",
        "id": 198447836,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590157750
    },
    {
        "content": "<p>That estimated size is critical to the CGU partitioning algorithm because it uses it to estimate how big CGUs are</p>",
        "id": 198447858,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590157769
    },
    {
        "content": "<p>Which controls which ones get merged (or not)</p>",
        "id": 198447872,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590157778
    },
    {
        "content": "<p>And because of that, there's been a sort of \"selective pressure\" influencing which MIR optimisations we've adopted and which we haven't?</p>",
        "id": 198447951,
        "sender_full_name": "davidtwco",
        "timestamp": 1590157808
    },
    {
        "content": "<p>Have we tried pre-estimating the sizes and using those instead of post-opt sizes? Obviously they're \"wrong\" but could give some idea of whether this theory is right, correct?</p>",
        "id": 198447956,
        "sender_full_name": "simulacrum",
        "timestamp": 1590157810
    },
    {
        "content": "<p>So as MIR optimizations play with the amount of MIR statements in a <code>Body</code>, it changes which CGU those are potentially included in.</p>",
        "id": 198447958,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590157814
    },
    {
        "content": "<p>so there's a tension here that I want to try to make explicit</p>",
        "id": 198447972,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590157825
    },
    {
        "content": "<p>Yes, exactly <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span></p>",
        "id": 198447975,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590157826
    },
    {
        "content": "<p>you're pointing out that regressions occur when you try to add some mir-opt</p>",
        "id": 198447987,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590157836
    },
    {
        "content": "<p>and those regressions are being caused by issues with the partitioning (or cgu merging scheme, if you prefer)</p>",
        "id": 198448025,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590157860
    },
    {
        "content": "<p>Yeah, specifically regressions from LLVM where the number of CGUs codegenned changes</p>",
        "id": 198448026,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590157860
    },
    {
        "content": "<p>but the regressions here</p>",
        "id": 198448037,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590157866
    },
    {
        "content": "<p>they are in the <em>quality</em> of the generated object code</p>",
        "id": 198448044,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590157872
    },
    {
        "content": "<p>not in the compile time, right?</p>",
        "id": 198448054,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590157878
    },
    {
        "content": "<p>or are you talking about regressions in compile time</p>",
        "id": 198448074,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590157890
    },
    {
        "content": "<p>I'm not sure what you mean by \"here\"</p>",
        "id": 198448075,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590157891
    },
    {
        "content": "<p>you say \"things regressed\"</p>",
        "id": 198448095,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590157901
    },
    {
        "content": "<p>I want to confirm that what kinds of regressions we're talking about</p>",
        "id": 198448110,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590157910
    },
    {
        "content": "<p>Yeah, by regressions I mean compile time regressions, not code quality regressions.</p>",
        "id": 198448113,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590157911
    },
    {
        "content": "<p>oh, you <em>do</em> mean compile time regressions. Okay</p>",
        "id": 198448124,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590157921
    },
    {
        "content": "<p>My understanding is that the changes to merging/partitioning mean that we are regressing on incremental compiles, because where before we skipped codegen we no longer can (because we merged different things)</p>",
        "id": 198448139,
        "sender_full_name": "simulacrum",
        "timestamp": 1590157922
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> I'm curious -- have you tested what happens with one partition? Also, in release builds, do we partition by default? I forget.</p>",
        "id": 198448144,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590157923
    },
    {
        "content": "<p>Oh, thank you for bringing that up (<span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>). Yas. As Wesley says, it's compile-time regressions</p>",
        "id": 198448164,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590157924
    },
    {
        "content": "<p>The optimisations that we've wanted to adopt and haven't yet - which motivated these discussions - have we tested those with <code>codegen-units=1</code>? Is my logic right that-</p>\n<p>...what <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> said I guess.</p>",
        "id": 198448186,
        "sender_full_name": "davidtwco",
        "timestamp": 1590157943
    },
    {
        "content": "<p>Or maybe my question is answered by the point that this is compilation time</p>",
        "id": 198448200,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590157950
    },
    {
        "content": "<p>Yeah, we still partition in release mode</p>",
        "id": 198448212,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590157961
    },
    {
        "content": "<p>Because we want parallel codegen</p>",
        "id": 198448222,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590157967
    },
    {
        "content": "<p>Right, I remember we debated about it for some time</p>",
        "id": 198448233,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590157974
    },
    {
        "content": "<p>16 partitions is the default w/o incremental, I think with incremental we have some more complicated scheme but I'm not sure</p>",
        "id": 198448240,
        "sender_full_name": "simulacrum",
        "timestamp": 1590157979
    },
    {
        "content": "<p>can you confirm <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> 's statement, <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> ?</p>",
        "id": 198448241,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590157979
    },
    {
        "content": "<p>are the regressions largely affecting incremental alone?</p>",
        "id": 198448259,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590157990
    },
    {
        "content": "<p>Which has the side effect that people that <em>really</em> care about runtime performance or code size set the CGU count to 1.</p>",
        "id": 198448281,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590158003
    },
    {
        "content": "<p>Let me find an example...</p>",
        "id": 198448314,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590158025
    },
    {
        "content": "<p>(because I can definitely believe that mir-opts =&gt; code size changes =&gt; totally different partitioning =&gt; completely different performance profile for incremental.)</p>",
        "id": 198448382,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590158051
    },
    {
        "content": "<p>they'll affect non-incremental too, to be clear, just to a lesser extent because it's a matter of how the work is distributed (though you can get 200% work, AIUI, or more, since we duplicate functions).</p>",
        "id": 198448425,
        "sender_full_name": "simulacrum",
        "timestamp": 1590158075
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.20codegen.20unit.20partitioning.20compiler-team.23281/near/198448259\">said</a>:</p>\n<blockquote>\n<p>are the regressions largely affecting incremental alone?</p>\n</blockquote>\n<p>If I recall correctly, that was the case for one of my PRs. I think Wesley's looking for that one or one that's similar :3</p>",
        "id": 198448427,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590158076
    },
    {
        "content": "<p>Yeah, I would say in general this is mostly an issue for incremental tests.</p>",
        "id": 198448453,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590158090
    },
    {
        "content": "<p>but incremental is where we see \"compile times got 50% worse\" because, well, we started doing 2x work in llvm</p>",
        "id": 198448524,
        "sender_full_name": "simulacrum",
        "timestamp": 1590158123
    },
    {
        "content": "<p>one could argue that this is also a symptom of our tests</p>",
        "id": 198448551,
        "sender_full_name": "simulacrum",
        "timestamp": 1590158137
    },
    {
        "content": "<p>I think the most extreme example I've seen is <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span>'s PR which reworked some drop logic</p>",
        "id": 198448561,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590158142
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/71840\">https://github.com/rust-lang/rust/pull/71840</a></p>",
        "id": 198448577,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590158153
    },
    {
        "content": "<p>(Do we duplicate <code>#[inline]</code> functions in debug builds also, or only release?)</p>",
        "id": 198448584,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590158155
    },
    {
        "content": "<p>I suspect that it matters a <em>lot</em> where you put the <code>println!</code> or whatever; we don't have great coverage</p>",
        "id": 198448587,
        "sender_full_name": "simulacrum",
        "timestamp": 1590158157
    },
    {
        "content": "<p><a href=\"https://perf.rust-lang.org/compare.html?start=e5f35df2c6944b843b08369c4b2ff3bdb0beb2d2&amp;end=d4d72c3f314944d906c0b5214cc5062315df842b\">https://perf.rust-lang.org/compare.html?start=e5f35df2c6944b843b08369c4b2ff3bdb0beb2d2&amp;end=d4d72c3f314944d906c0b5214cc5062315df842b</a></p>",
        "id": 198448590,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590158159
    },
    {
        "content": "<p>okay. so then that leads me to wonder, shifting to a different strategy that is not based on estimated cgu code sizes, but rather based on other factors that are inherent in the structucture</p>",
        "id": 198448638,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590158168
    },
    {
        "content": "<p>So</p>",
        "id": 198448648,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590158176
    },
    {
        "content": "<p>might mean that we have less noisy results when we try to evaluate impact of changes</p>",
        "id": 198448653,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590158179
    },
    {
        "content": "<p>That's one of the observations I had: We use the same CGU partitioning algorithm for all build types.</p>",
        "id": 198448670,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590158198
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.20codegen.20unit.20partitioning.20compiler-team.23281/near/198448584\">said</a>:</p>\n<blockquote>\n<p>(Do we duplicate <code>#[inline]</code> functions in debug builds also, or only release?)</p>\n</blockquote>\n<p>(my understanding, from the doc comment, is that we always do - the algorithm itself doesn't appear to change, just the number of codegen-units?)</p>",
        "id": 198448672,
        "sender_full_name": "davidtwco",
        "timestamp": 1590158203
    },
    {
        "content": "<p>to my knowledge debug and release builds both have 16 codegen units by default</p>",
        "id": 198448693,
        "sender_full_name": "simulacrum",
        "timestamp": 1590158220
    },
    {
        "content": "<p>incremental may change that</p>",
        "id": 198448702,
        "sender_full_name": "simulacrum",
        "timestamp": 1590158225
    },
    {
        "content": "<p>When I suspect there are perhaps better strategies for various types of builds.</p>",
        "id": 198448709,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590158230
    },
    {
        "content": "<p>debug-incremental vs release-no-incremental for example.</p>",
        "id": 198448724,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590158242
    },
    {
        "content": "<p>Am i right that the strategy of merging two smallest cgu's is essentially prioritizing load balancing over all other metrics?</p>",
        "id": 198448764,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590158270
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.20codegen.20unit.20partitioning.20compiler-team.23281/near/198448653\">said</a>:</p>\n<blockquote>\n<p>[shifting to a different strategy that is not based on estimated cgu code sizes, but rather based on other factors that are inherent in the structucture] might mean that we have less noisy results when we try to evaluate impact of changes</p>\n</blockquote>\n<p>That sounds like a good starting principle, I like that :)</p>",
        "id": 198448776,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590158278
    },
    {
        "content": "<p>Kind of yeah</p>",
        "id": 198448779,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590158279
    },
    {
        "content": "<p>It's a bit weird IMO that it doesn't split huge CGUs</p>",
        "id": 198448835,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590158294
    },
    {
        "content": "<p>Like you can wind up with <code>CGU0: 124, CGU1: 431, CGU2: 123456</code></p>",
        "id": 198448874,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590158325
    },
    {
        "content": "<p>even with the current strategy we commonly end up with one huge cgu -- I know historically this has been the case for a servo crate and rustc_middle and that means you're waiting for it to compile forever</p>",
        "id": 198448887,
        "sender_full_name": "simulacrum",
        "timestamp": 1590158330
    },
    {
        "content": "<p>and then obviously a change that requires regenerating CGU2 takes forever</p>",
        "id": 198448896,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590158339
    },
    {
        "content": "<p>so that's an interesting point too then: We probably <em>should</em> be considering splitting cgu's up</p>",
        "id": 198448941,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590158371
    },
    {
        "content": "<p>as well as revising the merge strategy, and maybe even revising how we select the initial set of cgu's.</p>",
        "id": 198448973,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590158391
    },
    {
        "content": "<p>So one idea I've been experimenting with is that in debug-incremental, we should try to partition everything into it's own CGU as much as possible.</p>",
        "id": 198448993,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590158400
    },
    {
        "content": "<p>On the theory that allows incremental to do the least work</p>",
        "id": 198449045,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590158412
    },
    {
        "content": "<p>(I've been sitting here musing if we should add a <code>-Z</code> flag that lets you say \"use the one file per cgu for the initial set of cgus\", to get something more like what clang does)</p>",
        "id": 198449062,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590158423
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.20codegen.20unit.20partitioning.20compiler-team.23281/near/198448993\">said</a>:</p>\n<blockquote>\n<p>So one idea I've been experimenting with is that in debug-incremental, we should try to partition everything into it's own CGU as much as possible.</p>\n</blockquote>\n<p>That makes a lot of sense. Specially because in debug we don't care as much about optimizations</p>",
        "id": 198449072,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590158431
    },
    {
        "content": "<p>...right?</p>",
        "id": 198449086,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590158438
    },
    {
        "content": "<p>(and another <code>-Z</code> flags that lets you say \"start with each function in its own cgu\")</p>",
        "id": 198449094,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590158443
    },
    {
        "content": "<p>I have an extremely hacky version of this <a href=\"https://github.com/rust-lang/rust/pull/71349\">https://github.com/rust-lang/rust/pull/71349</a></p>",
        "id": 198449125,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590158463
    },
    {
        "content": "<p>Do we know why the original algorithm decided to split source-level modules into generic and non-generic codegen units?</p>",
        "id": 198449131,
        "sender_full_name": "davidtwco",
        "timestamp": 1590158467
    },
    {
        "content": "<p>I assume \"each function in its own cgu\" is basically what <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> is suggesting as maximizing the initial partition, right?</p>",
        "id": 198449134,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590158468
    },
    {
        "content": "<p>With mixed but interesting results <a href=\"https://perf.rust-lang.org/compare.html?start=0aa6751c19d3ba80df5b0b02c00bf44e13c97e80&amp;end=35fdb7107589ab8f0cce89e7a5790f12c40ca662\">https://perf.rust-lang.org/compare.html?start=0aa6751c19d3ba80df5b0b02c00bf44e13c97e80&amp;end=35fdb7107589ab8f0cce89e7a5790f12c40ca662</a></p>",
        "id": 198449175,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590158494
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> Yeah</p>",
        "id": 198449185,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590158502
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> I think the Rust algorithm for \"what can get inlined\" was decided long ago and since then std and similar have been carefully annotated respecting it, e.g. you'll find very few <code>#[inline]</code> tagged functions in std if they're generic because of this</p>",
        "id": 198449194,
        "sender_full_name": "simulacrum",
        "timestamp": 1590158509
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> it's talked a bit about here <a href=\"https://github.com/rust-lang/rust/blob/e91aebc1a3835b9b420da0c021e211175a724b8d/src/librustc_mir/monomorphize/partitioning.rs#L38\">https://github.com/rust-lang/rust/blob/e91aebc1a3835b9b420da0c021e211175a724b8d/src/librustc_mir/monomorphize/partitioning.rs#L38</a></p>",
        "id": 198449258,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590158528
    },
    {
        "content": "<p>(since <code>#[inline]</code> today plays two roles: makes something <em>eligible</em> for inlining but also bumps priorities to LLVM)</p>",
        "id": 198449262,
        "sender_full_name": "simulacrum",
        "timestamp": 1590158533
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span>, maybe good to discuss what regressions we're willing to accept? I doubt we can find something that's better (or not worse at least) in 100% of cases while making improvements</p>",
        "id": 198449391,
        "sender_full_name": "simulacrum",
        "timestamp": 1590158612
    },
    {
        "content": "<p>(we have ~15 minutes left)</p>",
        "id": 198449404,
        "sender_full_name": "simulacrum",
        "timestamp": 1590158622
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span></p>",
        "id": 198449418,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590158629
    },
    {
        "content": "<p>Let me copy some things in from the gist</p>",
        "id": 198449436,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590158636
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Key design questions\n\n    Is there currently an expert on the compiler team we should be talking to?\n\n    Does anyone have ideas for improving the current algorithm?\n\n    Does anyone have ideas for a different algorithm that would perform better?\n\n    Is regressing some types of compilation performance more acceptable than others? For example, how much do we care about fat LTO + release vs regular release vs debug?\n\n    What should the performance criteria be for merging changes?\n        &quot;No regressions&quot;: the default and the &quot;safest&quot; answer but makes it very challenging to land any improvements.\n        &quot;big enough to offset small losses&quot;\n        &quot;bias toward improvements on large crates&quot;\n        others?\n\nIdeally we would identify several ideas to try with the current algorithm and one or two different algorithms that could be implemented and tested in parallel.\n</code></pre></div>",
        "id": 198449510,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590158654
    },
    {
        "content": "<p>One thing I will say</p>",
        "id": 198449541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590158674
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.20codegen.20unit.20partitioning.20compiler-team.23281/near/198449391\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span>, maybe good to discuss what regressions we're willing to accept? I doubt we can find something that's better (or not worse at least) in 100% of cases while making improvements</p>\n</blockquote>\n<p>And also if our theory of local maxima holds, we'll probably be seeing overall regressions from small changes to the algorithm.</p>",
        "id": 198449551,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590158678
    },
    {
        "content": "<p>I don't think there's a real expert right now, but we should form some :)</p>",
        "id": 198449568,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590158691
    },
    {
        "content": "<p>Maybe this would blend nicely with my hope to make a WG-incr-comp</p>",
        "id": 198449612,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590158722
    },
    {
        "content": "<p>of course codegen units are a broader topic than incr comp</p>",
        "id": 198449628,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590158735
    },
    {
        "content": "<p>but they are clearly closely coupled</p>",
        "id": 198449637,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590158740
    },
    {
        "content": "<p>There's definitely a strong relationship there</p>",
        "id": 198449731,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590158786
    },
    {
        "content": "<p>Yas. And I think CGU's most relevant target are incremental compilation scenarios</p>",
        "id": 198449766,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590158808
    },
    {
        "content": "<p>So I think we've talked a bit about the first question and it sounds like we don't have an expert but we want to have some.</p>",
        "id": 198449830,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590158850
    },
    {
        "content": "<p>It sounds like <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> and maybe <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> probably understand a bit about the overall backend and how it interacts with LLVM</p>",
        "id": 198449876,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590158875
    },
    {
        "content": "<p>?</p>",
        "id": 198449882,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590158878
    },
    {
        "content": "<p>I have a decent 'big picture' view</p>",
        "id": 198449966,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590158898
    },
    {
        "content": "<p>So perhaps they would be good to talk to about \"big picture\" questions?</p>",
        "id": 198449977,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590158904
    },
    {
        "content": "<p>Oh</p>",
        "id": 198449980,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590158905
    },
    {
        "content": "<p>and I talked a lot to <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> when he was doing the design work</p>",
        "id": 198449988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590158912
    },
    {
        "content": "<p>I think I do. I'm embarrassed that I didn't really grok the merging strategy until now</p>",
        "id": 198449994,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590158915
    },
    {
        "content": "<p>but it's a bit out of cache and I know there were tweaks in the interim</p>",
        "id": 198450009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590158924
    },
    {
        "content": "<p>I think I'm coming up to speed on the actual algorithm but I lack a lot of background knowledge about LLVM</p>",
        "id": 198450042,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590158950
    },
    {
        "content": "<p>So having somebody to bounce those kinds of questions off of would be helpful.</p>",
        "id": 198450073,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590158966
    },
    {
        "content": "<p>so when it comes to the specifics of the partitioning strategy I suspect you all grok it more</p>",
        "id": 198450088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590158972
    },
    {
        "content": "<p>all of my LLVM knowledge has been learned on demand in order to resolve those ThinLTO+incremental linking bugs</p>",
        "id": 198450095,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590158978
    },
    {
        "content": "<p>Maybe we really should form that working group...</p>",
        "id": 198450121,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590158998
    },
    {
        "content": "<p>Ok, anyway</p>",
        "id": 198450198,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590159014
    },
    {
        "content": "<p>I think I'll draft a proposal (RFC, whatever the protocol is) today for a WG</p>",
        "id": 198450218,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590159023
    },
    {
        "content": "<blockquote>\n<p>Does anyone have ideas for improving the current algorithm?</p>\n</blockquote>",
        "id": 198450223,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590159027
    },
    {
        "content": "<p>So I've mentioned an idea I had but I don't want to monopolize the conversation</p>",
        "id": 198450245,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590159041
    },
    {
        "content": "<p>i have ideas, yes. But I also think there must be tons of prior work in this area?</p>",
        "id": 198450304,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590159076
    },
    {
        "content": "<p>That's a good point.</p>",
        "id": 198450355,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590159103
    },
    {
        "content": "<p>Is there standard terminology for this? I thought our codegen unit partitioning terminology was rustc specific.</p>",
        "id": 198450451,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590159134
    },
    {
        "content": "<p>Perhaps I should do some more research</p>",
        "id": 198450473,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590159145
    },
    {
        "content": "<p>In terms of the literature, I'm betting \"compilation unit\" is popular</p>",
        "id": 198450499,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590159160
    },
    {
        "content": "<p>That's very helpful</p>",
        "id": 198450534,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590159180
    },
    {
        "content": "<p>but then maybe I'm wrong, in terms of whether a bunch of people have researched partitioning schemes there</p>",
        "id": 198450545,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590159183
    },
    {
        "content": "<p>(versus just assuming \"use whatever the user gave to you\")</p>",
        "id": 198450557,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590159194
    },
    {
        "content": "<p>So maybe that's worth talking about a bit?</p>",
        "id": 198450588,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590159211
    },
    {
        "content": "<p>I guess I was implicitly assuming this was something that rustc should do</p>",
        "id": 198450599,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590159226
    },
    {
        "content": "<p>/me is Asking Jeeves</p>",
        "id": 198450600,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590159226
    },
    {
        "content": "<p>I think it could be very useful to at least <em>try out</em> a per-file scheme</p>",
        "id": 198450663,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590159247
    },
    {
        "content": "<p>at the very least, such a scheme should mean that changing a span will only pollute the other functions in <em>your initial cgu</em></p>",
        "id": 198450699,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590159266
    },
    {
        "content": "<p>Would making the user have a more direct responsibility in this regard be desired/acceptable?</p>",
        "id": 198450707,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590159273
    },
    {
        "content": "<p>this \"merging minimum size cgus\" thing means that changes to spans can pollute pretty much anywhere</p>",
        "id": 198450730,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590159289
    },
    {
        "content": "<p>Isn't that what the current scheme approximates by being per-module? (of course, it then gets split into generic/non-generic and then merged again)</p>",
        "id": 198450734,
        "sender_full_name": "davidtwco",
        "timestamp": 1590159289
    },
    {
        "content": "<p>(right?)</p>",
        "id": 198450740,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590159291
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116107\">davidtwco</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.20codegen.20unit.20partitioning.20compiler-team.23281/near/198450734\">said</a>:</p>\n<blockquote>\n<p>Isn't that what the current scheme approximates by being per-module? (of course, it then gets split into generic/non-generic and then merged again)</p>\n</blockquote>\n<p>Well I was figuring that one file may have many modules</p>",
        "id": 198450767,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590159308
    },
    {
        "content": "<p>Yeah, that's my understanding</p>",
        "id": 198450770,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590159310
    },
    {
        "content": "<p>but you're right, <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> ,that current best practices for rust may imply one module per file anyway</p>",
        "id": 198450787,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590159325
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> I don't think per-file and per-module are appreciably different</p>",
        "id": 198450797,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590159330
    },
    {
        "content": "<p>and definitely when we settled on per-module the intent was to be \"more or less the same\" as per-file</p>",
        "id": 198450825,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590159342
    },
    {
        "content": "<p>that said, there are the twists like \"generic vs non-generic\", and I don't remember that well the motivation there</p>",
        "id": 198450847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590159355
    },
    {
        "content": "<p>yeah, they definitely aren't the same thing, but my gut feeling is that the difference would be negligible.</p>",
        "id": 198450853,
        "sender_full_name": "davidtwco",
        "timestamp": 1590159361
    },
    {
        "content": "<p>So</p>",
        "id": 198450913,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590159376
    },
    {
        "content": "<p>4 minutes left</p>",
        "id": 198450918,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590159379
    },
    {
        "content": "<p>I guess one last thing, if we have time, might be to talk about what <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span>  mentioned earlier</p>",
        "id": 198450947,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590159398
    },
    {
        "content": "<p>What kind of performance regressions are acceptable?</p>",
        "id": 198450968,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590159407
    },
    {
        "content": "<p>basically when we concocted the current scheme <em>initially</em>, the idea was</p>\n<ul>\n<li>we could get smart</li>\n<li>but let's start with something relatively predictable that people can optimize around</li>\n<li>and we can change it later when we've got more data</li>\n</ul>\n<p>but it seems like it evolved a reasonable amount away from \"simple and predictable\" in the meantime</p>",
        "id": 198450980,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590159414
    },
    {
        "content": "<p>Or what are the performance targets?</p>",
        "id": 198450988,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590159421
    },
    {
        "content": "<p>Yeah, that's awlays a really hard question toa nswer</p>",
        "id": 198451005,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590159429
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>    What should the performance criteria be for merging changes?\n        &quot;No regressions&quot;: the default and the &quot;safest&quot; answer but makes it very challenging to land any improvements.\n        &quot;big enough to offset small losses&quot;\n        &quot;bias toward improvements on large crates&quot;\n        others?\n</code></pre></div>",
        "id": 198451012,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590159432
    },
    {
        "content": "<p>one thing I do recall</p>",
        "id": 198451014,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590159433
    },
    {
        "content": "<p>when we talked about this  for e.g. NLL</p>",
        "id": 198451025,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590159436
    },
    {
        "content": "<p>(Fuck I lost connection. Okay I'm on my phone now. Will read the backlog)</p>",
        "id": 198451031,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590159441
    },
    {
        "content": "<p>we came up with some thresholds that were based on human perception</p>",
        "id": 198451039,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590159445
    },
    {
        "content": "<p>I'll have to go look back, but it came down to something like .. &lt;10% people can't really tell</p>",
        "id": 198451062,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590159458
    },
    {
        "content": "<p>after that, there are gradations of how much they notice</p>",
        "id": 198451090,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590159475
    },
    {
        "content": "<p>so I think on this basis we tried to hold a strict line of 10%</p>",
        "id": 198451145,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590159489
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.20codegen.20unit.20partitioning.20compiler-team.23281/near/198450988\">said</a>:</p>\n<blockquote>\n<p>Or what are the performance targets?</p>\n</blockquote>\n<p>it would be nice, on this note, if we somehow indicated on perf.rlo how \"important\" each benchmark was, or some way to track back to who even cared about that case</p>",
        "id": 198451150,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590159491
    },
    {
        "content": "<p>with the general rule of like \"but those should be rare\"</p>",
        "id": 198451169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590159497
    },
    {
        "content": "<p>I can go back and find the actual citations and so forth</p>",
        "id": 198451180,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590159505
    },
    {
        "content": "<p>but yes I agree with felix that \"importance\" is not uniform</p>",
        "id": 198451210,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590159520
    },
    {
        "content": "<p>I would say that \"integration tests\" are by far the most imp't</p>",
        "id": 198451242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590159533
    },
    {
        "content": "<p>as in things like serde?</p>",
        "id": 198451263,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590159543
    },
    {
        "content": "<p>yes, real-world crates and things</p>",
        "id": 198451277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590159550
    },
    {
        "content": "<p>but some of the other tests were extracted based on patterns we saw in real life so it's a bit tricky :)</p>",
        "id": 198451306,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590159565
    },
    {
        "content": "<p>right. stress tests are like microbenchmarks</p>",
        "id": 198451313,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590159567
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.20codegen.20unit.20partitioning.20compiler-team.23281/near/198450988\">said</a>:</p>\n<blockquote>\n<p>Or what are the performance targets?</p>\n</blockquote>\n<p>It definitely depends on the goal - we want to maintain runtime performance for release builds but compile-time perf could probably slip there; but we want to maintain compile-times for debug builds but runtime perf could probably slip there.</p>",
        "id": 198451317,
        "sender_full_name": "davidtwco",
        "timestamp": 1590159568
    },
    {
        "content": "<p>they can tell you interesting things, but you shoudn't necessarily make decisions based on changes to microbenchmarks/stress tests</p>",
        "id": 198451347,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590159589
    },
    {
        "content": "<p>I 300% agree with david there</p>",
        "id": 198451359,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590159596
    },
    {
        "content": "<p>Yeah, that's why the idea of using different algorithms for different compilation modes seems so interesting to me.</p>",
        "id": 198451411,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590159604
    },
    {
        "content": "<p>I think it's ultimately kind of essential to do so</p>",
        "id": 198451436,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590159620
    },
    {
        "content": "<p>Ok. We're at 11.</p>",
        "id": 198451443,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590159624
    },
    {
        "content": "<p>I guess that's it?</p>",
        "id": 198451450,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590159627
    },
    {
        "content": "<p>One benefit of having the same algorithm is that when you optimise for it, you optimise for both debug and release.</p>",
        "id": 198451461,
        "sender_full_name": "davidtwco",
        "timestamp": 1590159634
    },
    {
        "content": "<p>this was really great, <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span></p>",
        "id": 198451468,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590159639
    },
    {
        "content": "<p>Like... there are optimizations that are really great, but only make sense from compile time perspective in release mode</p>",
        "id": 198451489,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590159651
    },
    {
        "content": "<p>Thanks, it felt very hap-hazard to me but that's probably just because I was \"under the gun\" to run the meeting. <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 198451543,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590159688
    },
    {
        "content": "<p>If anyone has questions or stuff they want to talk about, I'm happy to chat and we can spin up a topic in <a class=\"stream\" data-stream-id=\"131828\" href=\"/#narrow/stream/131828-t-compiler\">#t-compiler</a> or something</p>",
        "id": 198451633,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590159728
    },
    {
        "content": "<p>Thanks for everyone who was here. This conversation felt really insightful to me :)</p>",
        "id": 198451693,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590159771
    },
    {
        "content": "<p>Have a great day/evening <a class=\"stream\" data-stream-id=\"238009\" href=\"/#narrow/stream/238009-t-compiler.2Fmeetings\">#t-compiler/meetings</a> <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 198451703,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590159775
    }
]