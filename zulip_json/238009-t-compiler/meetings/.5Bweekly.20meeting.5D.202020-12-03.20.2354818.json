[
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span>; the triage meeting will happen tomorrow at <time datetime=\"2020-12-03T15:00:00Z\">2020-12-03T12:00:00-03:00</time></p>",
        "id": 218594896,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606931967
    },
    {
        "content": "<p><em>WG-prioritization</em> has done pre-triage in <a class=\"stream\" data-stream-id=\"245100\" href=\"/#narrow/stream/245100-t-compiler.2Fwg-prioritization.2Falerts\">#t-compiler/wg-prioritization/alerts</a></p>",
        "id": 218594941,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606931991
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"2403\">@WG-prioritization</span> has prepared the <a href=\"https://hackmd.io/Jp-q_pMvQba1T3jdiO6iQQ?view\">meeting agenda</a></p>",
        "id": 218594994,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606932004
    },
    {
        "content": "<p>We will have checkins from <em>WG-async-foundations</em> and <em>WG-diagnostics</em></p>",
        "id": 218595123,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606932054
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> do you have something you want to share about <span class=\"user-group-mention\" data-user-group-id=\"1172\">@WG-async-foundations</span> ?</p>",
        "id": 218595229,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606932095
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> do you have something you want to share about <span class=\"user-group-mention\" data-user-group-id=\"1187\">@WG-diagnostics</span>?</p>",
        "id": 218595339,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1606932131
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> <br>\nThe <a href=\"https://github.com/rust-lang/rfcs/pull/2996\">Stream RFC</a> has been making progress (nearly ready for FCP imo) and the <a href=\"https://github.com/rust-lang/rfcs/pull/3014\"><code>must_not_await_lint</code> RFC</a> has just entered FCP. Compiler-wise, we still need more help with fixing bugs and improving diagnostics. I'm happy to mentor anyone and everyone who wants to contribute. The ongoing and upcoming work can be seen on our <a href=\"https://github.com/orgs/rust-lang/projects/2\">project board</a>.</p>",
        "id": 218633343,
        "sender_full_name": "tmandry",
        "timestamp": 1606950456
    },
    {
        "content": "<p>For the diagnostics wg (feel free to only past the first two groupings only):</p>\n<p>User visible changes</p>\n<p>Allow Trait inheritance with cycles on associated types <a href=\"https://github.com/rust-lang/rust/issues/79209\">#79209</a> was landed and then reverted due to regressions <a href=\"https://github.com/rust-lang/rust/issues/79637\">#79637</a> (looking forward to this, not strictly diagnostics work, but that’s how the work started)<br>\nAvoid suggesting unstable or patterns in stable <a href=\"https://github.com/rust-lang/rust/issues/79364\">#79364</a><br>\nDo not show negative polarity trait implementations in diagnostic messages for similar implementations <a href=\"https://github.com/rust-lang/rust/issues/79606\">#79606</a><br>\nImprove attribute message error spans <a href=\"https://github.com/rust-lang/rust/issues/79509\">#79509</a><br>\nUpdate error to reflect that integer literals can have float suffixes <a href=\"https://github.com/rust-lang/rust/issues/79329\">#79329</a><br>\nFix overlap detection of <code>usize</code>/<code>isize</code> range patterns <a href=\"https://github.com/rust-lang/rust/issues/79523\">#79523</a><br>\nUpdate tests to remove old numeric constants <a href=\"https://github.com/rust-lang/rust/issues/78380\">#78380</a><br>\nProperly handle attributes on statements <a href=\"https://github.com/rust-lang/rust/issues/78296\">#78296</a><br>\nGeneric Associated Types in Trait Paths - AST part, some regressions introduced here <a href=\"https://github.com/rust-lang/rust/issues/79266\">#79266</a><br>\nSuggest turbofish for uninferred const argument (brings parity to inferred type arg) <a href=\"https://github.com/rust-lang/rust/issues/77758\">#77758</a><br>\nValidate use of parameters in naked functions (more and more accurate errors) <a href=\"https://github.com/rust-lang/rust/issues/79411\">#79411</a><br>\nAdd note to use nightly when using expr in const generics <a href=\"https://github.com/rust-lang/rust/issues/79374\">#79374</a><br>\nlint: Do not provide suggestions for non standard characters <a href=\"https://github.com/rust-lang/rust/issues/77805\">#77805</a><br>\nAdd lint for panic!(\"{}\") <a href=\"https://github.com/rust-lang/rust/issues/78088\">#78088</a><br>\nRemove redundant notes in E0275 <a href=\"https://github.com/rust-lang/rust/issues/79110\">#79110</a><br>\nImprove the diagnostic for when an <code>fn</code> contains qualifiers inside an <code>extern</code> block. <a href=\"https://github.com/rust-lang/rust/issues/79082\">#79082</a><br>\nstability: More precise location for deprecation lint on macros <a href=\"https://github.com/rust-lang/rust/issues/78999\">#78999</a><br>\nImprove type const mismatch errors <a href=\"https://github.com/rust-lang/rust/issues/79032\">#79032</a><br>\nAdd error_occured field to ConstQualifs (eliminates a lot of const eval errors) <a href=\"https://github.com/rust-lang/rust/issues/78809\">#78809</a><br>\nAdd missing newline to error message of the default OOM hook <a href=\"https://github.com/rust-lang/rust/issues/78897\">#78897</a><br>\nMake it more clear what an about async fn's returns when referring to what it returns <a href=\"https://github.com/rust-lang/rust/issues/76765\">#76765</a><br>\nImprove lifetime name annotations for closures &amp; async functions <a href=\"https://github.com/rust-lang/rust/issues/76468\">#76468</a><br>\nProvide diagnostic suggestion in ExprUseVisitor Delegate (mild span change) <a href=\"https://github.com/rust-lang/rust/issues/78662\">#78662</a><br>\nCorrected suggestion for generic parameters in <code>function_item_references</code> lint <a href=\"https://github.com/rust-lang/rust/issues/78659\">#78659</a><br>\nImprove errors about #[deprecated] attribute <a href=\"https://github.com/rust-lang/rust/issues/78626\">#78626</a><br>\nProperly handle lint spans after MIR inlining <a href=\"https://github.com/rust-lang/rust/issues/76931\">#76931</a><br>\nSuggest calling associated <code>fn</code> inside <code>trait</code>s <a href=\"https://github.com/rust-lang/rust/issues/78420\">#78420</a><br>\nPrefer new associated numeric consts in float error messages <a href=\"https://github.com/rust-lang/rust/issues/78431\">#78431</a><br>\nAdjust turbofish help message for const generics <a href=\"https://github.com/rust-lang/rust/issues/78460\">#78460</a></p>",
        "id": 218665719,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1606984831
    },
    {
        "content": "<p>Infra changes</p>\n<p>libtest: Print the total time taken to execute a test suite <a href=\"https://github.com/rust-lang/rust/issues/75752\">#75752</a><br>\nCleanup lint machinery for overriden forbidden lints <a href=\"https://github.com/rust-lang/rust/issues/78864\">#78864</a><br>\nProc macros: Cache pretty-print/retokenize result to avoid compile time blowup <a href=\"https://github.com/rust-lang/rust/issues/79338\">#79338</a><br>\nAlways invoke statement attributes on the statement itself <a href=\"https://github.com/rust-lang/rust/issues/79326\">#79326</a><br>\nresolve: Do not put macros into <code>module.unexpanded_invocations</code> unless necessary <a href=\"https://github.com/rust-lang/rust/issues/79294\">#79294</a><br>\nConsolidate exhaustiveness-related tests <a href=\"https://github.com/rust-lang/rust/issues/79243\">#79243</a><br>\nExhaustively match in variant count instrinsic <a href=\"https://github.com/rust-lang/rust/issues/79231\">#79231</a><br>\nPermit standalone generic parameters as const generic arguments in macros <a href=\"https://github.com/rust-lang/rust/issues/79164\">#79164</a><br>\nAdd optimization fuel checks to some mir passes <a href=\"https://github.com/rust-lang/rust/issues/79117\">#79117</a><br>\nMake bad \"rust-call\" arguments no longer ICE <a href=\"https://github.com/rust-lang/rust/issues/78961\">#78961</a><br>\nHandle empty matches cleanly in exhaustiveness checking <a href=\"https://github.com/rust-lang/rust/issues/78995\">#78995</a><br>\nFix exhaustiveness in case a byte string literal is used at slice type <a href=\"https://github.com/rust-lang/rust/issues/79072\">#79072</a><br>\nSimplify output capturing <a href=\"https://github.com/rust-lang/rust/issues/78714\">#78714</a><br>\nMake <code>_</code> an expression, to discard values in destructuring assignments <a href=\"https://github.com/rust-lang/rust/issues/79016\">#79016</a><br>\nNormalize function type during validation <a href=\"https://github.com/rust-lang/rust/issues/78969\">#78969</a><br>\nExplicitly checking for or-pattern before test <a href=\"https://github.com/rust-lang/rust/issues/78856\">#78856</a><br>\nrefactor: removing alloc::collections::vec_deque ignore-tidy-filelength <a href=\"https://github.com/rust-lang/rust/issues/78590\">#78590</a><br>\nImplement destructuring assignment for structs and slices (new ways for the parser and patter eval to fail! :D ) <a href=\"https://github.com/rust-lang/rust/issues/78836\">#78836</a><br>\nImplement destructuring assignment for tuples <a href=\"https://github.com/rust-lang/rust/issues/78748\">#78748</a><br>\nDo not collect tokens for doc comments <a href=\"https://github.com/rust-lang/rust/issues/78782\">#78782</a><br>\nrustc_ast: Do not panic by default when visiting macro calls <a href=\"https://github.com/rust-lang/rust/issues/78710\">#78710</a><br>\nDon't fire <code>CONST_ITEM_MUTATION</code> lint when borrowing a deref <a href=\"https://github.com/rust-lang/rust/issues/78865\">#78865</a><br>\nFix unreachable sub-branch detection in or-patterns <a href=\"https://github.com/rust-lang/rust/issues/78167\">#78167</a><br>\nFix ICE on type error in async function <a href=\"https://github.com/rust-lang/rust/issues/78739\">#78739</a><br>\nUse reparsed <code>TokenStream</code> if we captured any inner attributes <a href=\"https://github.com/rust-lang/rust/issues/78677\">#78677</a><br>\nFix ICE when a future-incompat-report has its command-line level capped <a href=\"https://github.com/rust-lang/rust/issues/78663\">#78663</a><br>\nTreat trailing semicolon as a statement in macro call <a href=\"https://github.com/rust-lang/rust/issues/78376\">#78376</a><br>\nImplement rustc side of report-future-incompat <a href=\"https://github.com/rust-lang/rust/issues/75534\">#75534</a><br>\nFix exhaustiveness checking of strings <a href=\"https://github.com/rust-lang/rust/issues/78553\">#78553</a><br>\nStrip tokens from trait and impl items before printing AST JSON <a href=\"https://github.com/rust-lang/rust/issues/78526\">#78526</a><br>\nAlways record reference to binding in match if guards <a href=\"https://github.com/rust-lang/rust/issues/78393\">#78393</a><br>\nDo not ICE on invalid input <a href=\"https://github.com/rust-lang/rust/issues/78422\">#78422</a><br>\nmin_const_generics: allow ty param in repeat expr <a href=\"https://github.com/rust-lang/rust/issues/78224\">#78224</a><br>\nresolve: private fields in tuple struct ctor diag <a href=\"https://github.com/rust-lang/rust/issues/78401\">#78401</a><br>\nTweak invalid <code>fn</code> header and body parsing <a href=\"https://github.com/rust-lang/rust/issues/78379\">#78379</a><br>\ncheck object safety of generic constants <a href=\"https://github.com/rust-lang/rust/issues/78365\">#78365</a></p>",
        "id": 218665746,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1606984862
    },
    {
        "content": "<p>Tests</p>\n<p>Add test for issue <a href=\"https://github.com/rust-lang/rust/issues/54121\">#54121</a> (order dependent trait bounds), which was fixed by <a href=\"https://github.com/rust-lang/rust/issues/73905\">#73905</a> <a href=\"https://github.com/rust-lang/rust/issues/79514\">#79514</a><br>\nMove ui if tests from top-level into <code>expr/if</code> <a href=\"https://github.com/rust-lang/rust/issues/79395\">#79395</a><br>\nAdd regression test for issue 73899 <a href=\"https://github.com/rust-lang/rust/issues/79302\">#79302</a><br>\nTest drop order for (destructuring) assignments <a href=\"https://github.com/rust-lang/rust/issues/79177\">#79177</a><br>\nChange ui test that are run-pass and that do not test the compiler to library tests <a href=\"https://github.com/rust-lang/rust/issues/79038\">#79038</a><br>\nAdd two regression tests <a href=\"https://github.com/rust-lang/rust/issues/79102\">#79102</a><br>\nExtend macro braces test <a href=\"https://github.com/rust-lang/rust/issues/79130\">#79130</a><br>\ntest: add <code>()=()=()=...</code> to <a href=\"http://weird-exprs.rs\">weird-exprs.rs</a> <a href=\"https://github.com/rust-lang/rust/issues/78948\">#78948</a><br>\nAdd explicit test for const param promotion <a href=\"https://github.com/rust-lang/rust/issues/78996\">#78996</a><br>\nAdd dropck test for const params <a href=\"https://github.com/rust-lang/rust/issues/78985\">#78985</a><br>\nAdd regression test for issue <a href=\"https://github.com/rust-lang/rust/issues/76042\">#76042</a> <a href=\"https://github.com/rust-lang/rust/issues/77151\">#77151</a><br>\nExtend min_const_generics param ty tests <a href=\"https://github.com/rust-lang/rust/issues/78987\">#78987</a><br>\nTest default values for const parameters. <a href=\"https://github.com/rust-lang/rust/issues/78960\">#78960</a><br>\nExtend const generics test suite <a href=\"https://github.com/rust-lang/rust/issues/78916\">#78916</a><br>\nLook at assoc ct, check the type of nodes <a href=\"https://github.com/rust-lang/rust/issues/78832\">#78832</a><br>\nAdd macro test for min-const-generics <a href=\"https://github.com/rust-lang/rust/issues/78912\">#78912</a><br>\nAdd regression test for <a href=\"https://github.com/rust-lang/rust/issues/78892\">#78892</a> <a href=\"https://github.com/rust-lang/rust/issues/78898\">#78898</a><br>\nUse check-pass instead of build-pass in some consts ui test suits <a href=\"https://github.com/rust-lang/rust/issues/78669\">#78669</a><br>\nUse check-pass instead of build-pass in regions ui test suite <a href=\"https://github.com/rust-lang/rust/issues/78574\">#78574</a><br>\nMove range in ui test to ops test in library/core <a href=\"https://github.com/rust-lang/rust/issues/78738\">#78738</a><br>\nMove f64::NAN ui tests into <code>library</code> <a href=\"https://github.com/rust-lang/rust/issues/78425\">#78425</a><br>\nMove Vec UI tests to unit tests when possible <a href=\"https://github.com/rust-lang/rust/issues/76718\">#76718</a><br>\nAdd a test for compiletest rustc-env &amp; unset-rustc-env directives <a href=\"https://github.com/rust-lang/rust/issues/78575\">#78575</a><br>\nAdd regression test <a href=\"https://github.com/rust-lang/rust/issues/76257\">#76257</a><br>\nAdd const generics tests for supertraits + dyn traits. <a href=\"https://github.com/rust-lang/rust/issues/78478\">#78478</a><br>\nMinConstGenerics UI test for invalid values for bool &amp; char <a href=\"https://github.com/rust-lang/rust/issues/78428\">#78428</a></p>\n<p>this last grouping is not necessarily diagnostics wg and arguably we should have a rustc testing wg to continue to encourage contribs from people only doing this necessary work</p>",
        "id": 218665878,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1606984954
    },
    {
        "content": "<p>But I added it as some of this work is representative of diagnostics work</p>",
        "id": 218665945,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1606984989
    },
    {
        "content": "<p>Summary: lots of great progress on bringing const genérics to the level of quality we want, some improvements in parser and macro diagnostics, new suggestions, quite a bit of clean up throughout despite these last two months being \"quieter\" than normal.</p>\n<p>For the next cycle I will have more time to dedicate to increased tracking and focus of the work, so hopefully next update will be more substantive.</p>",
        "id": 218666278,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1606985225
    },
    {
        "content": "<p>both checkin summaries pasted into the agenda (and linked here for the full detail)</p>",
        "id": 218669032,
        "sender_full_name": "apiraino",
        "timestamp": 1606987038
    },
    {
        "content": "<blockquote>\n<p>For the next cycle I will have more time to dedicate to increased tracking and focus of the work, so hopefully next update will be more substantive.</p>\n</blockquote>\n<p>don't worry, this is already super impressive :)</p>",
        "id": 218690379,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607001068
    },
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span>, triage meeting will be starting in ~ 12 minutes</p>",
        "id": 218702169,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1607006882
    },
    {
        "content": "<p><a href=\"https://hackmd.io/Jp-q_pMvQba1T3jdiO6iQQ?view\">Check out the meeting agenda</a></p>",
        "id": 218702243,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1607006896
    },
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span>! Add a <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> emoji to show you're here :)</p>",
        "id": 218704139,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607007647
    },
    {
        "content": "<p>we will start off with 5 minutes for ...</p>\n<h2>Announcements</h2>",
        "id": 218704269,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607007695
    },
    {
        "content": "<ul>\n<li>members of the compiler team and the compiler contributors team received a mail and a github ping this morning about the foundation, please check it out!</li>\n</ul>",
        "id": 218704390,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607007727
    },
    {
        "content": "<p>also</p>",
        "id": 218704437,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607007748
    },
    {
        "content": "<p>wearing my foundation project group \"hat\",</p>",
        "id": 218704487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607007767
    },
    {
        "content": "<p>(if you cannot find the email nor the ping, priv msg me or pietro and we'll help out)</p>",
        "id": 218704492,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607007770
    },
    {
        "content": "<p>we are trying to organize \"team meetings\" where we drop in with each team to answer questions in a more conversational style</p>",
        "id": 218704534,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607007785
    },
    {
        "content": "<p>I was proposing to <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> that we could repurpose the planning meeting next week for this, though I have to check that this works for other folks in the project group</p>",
        "id": 218704569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607007800
    },
    {
        "content": "<p>given that this design cycle has a lot of holidays in it</p>",
        "id": 218704628,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607007827
    },
    {
        "content": "<p>yeah, I don't think we ought to schedule any meetings anyway</p>",
        "id": 218704658,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607007840
    },
    {
        "content": "<p>it makes sense to <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> and me to just drop the planning meeting (and the design meetings) for this cycle.</p>",
        "id": 218704710,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607007845
    },
    {
        "content": "<p>(I can adjust the calendar)</p>",
        "id": 218704734,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607007852
    },
    {
        "content": "<p>I did not think we were at a planning meeting already -- I thought we were going to do a regression meeting on the 11th or 18th, FWIW</p>",
        "id": 218704809,
        "sender_full_name": "simulacrum",
        "timestamp": 1607007881
    },
    {
        "content": "<p>I believe next week is a planning meeting</p>",
        "id": 218704842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607007898
    },
    {
        "content": "<p>tomorrow is regressions</p>",
        "id": 218704859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607007902
    },
    {
        "content": "<p>tomorrow is performance?</p>",
        "id": 218704888,
        "sender_full_name": "simulacrum",
        "timestamp": 1607007911
    },
    {
        "content": "<p>no wait</p>",
        "id": 218704905,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607007919
    },
    {
        "content": "<p>that's wrong</p>",
        "id": 218704910,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607007921
    },
    {
        "content": "<p>sorry, Dec 18 is the planning meeting, my bad, I misremembered</p>",
        "id": 218704922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607007930
    },
    {
        "content": "<p>well we could do it Dec 11 or Dec 18 :)</p>",
        "id": 218704954,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607007941
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> wanted a regression meeting at <em>some</em> point</p>",
        "id": 218704981,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607007952
    },
    {
        "content": "<p>we don't have anything on the <em>calendar</em> for regression meeting</p>",
        "id": 218704984,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607007952
    },
    {
        "content": "<p>right, it was suggested somewhat outside the normal protocol</p>",
        "id": 218705053,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607007966
    },
    {
        "content": "<p>but I remember <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> brought it up</p>",
        "id": 218705070,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607007973
    },
    {
        "content": "<p>yeah, <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/Regression.20day\">https://rust-lang.zulipchat.com/#narrow/stream/238009-t-compiler.2Fmeetings/topic/Regression.20day</a></p>",
        "id": 218705092,
        "sender_full_name": "simulacrum",
        "timestamp": 1607007984
    },
    {
        "content": "<p>anyway we currently have \"Rustc Steering Mtg: Performance Goals for 2021\" on deck for tomorrow</p>",
        "id": 218705117,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607007993
    },
    {
        "content": "<p>(I have a draft agenda to share there, btw , <a href=\"https://docs.google.com/document/d/1DzQtKpudHqCiYPuRrFPMkhMCaQ884uG_8dh3Vufv9Vc/edit\">https://docs.google.com/document/d/1DzQtKpudHqCiYPuRrFPMkhMCaQ884uG_8dh3Vufv9Vc/edit</a>)</p>",
        "id": 218705158,
        "sender_full_name": "simulacrum",
        "timestamp": 1607008007
    },
    {
        "content": "<p>I suggest: Regression Day on December 11th, and Foundation Q&amp;A on December 18th, in lieu of planning meeting (and drop the next cycle)</p>",
        "id": 218705216,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607008027
    },
    {
        "content": "<p>(This is of course assuming that the we can get appropriate reps from Foundation Project group to attend on the 18th.)</p>",
        "id": 218705290,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607008059
    },
    {
        "content": "<p>sounds good</p>",
        "id": 218705376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607008084
    },
    {
        "content": "<p>If anyone objects, priv msg niko and myself and we'll figure something out.</p>",
        "id": 218705400,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607008085
    },
    {
        "content": "<p>can we add the regr day to the calendar though?</p>",
        "id": 218705439,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607008097
    },
    {
        "content": "<p>I'll do that now :)</p>",
        "id": 218705448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607008098
    },
    {
        "content": "<p>okay so next announcement</p>",
        "id": 218705528,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607008129
    },
    {
        "content": "<p>can be official then:</p>",
        "id": 218705543,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607008134
    },
    {
        "content": "<ul>\n<li>Rustc Steering Mtg Friday Dec 4: Performance Goals for 2021</li>\n</ul>",
        "id": 218705545,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607008135
    },
    {
        "content": "<ul>\n<li>New MCPs (take a look, see if you like them!)<ul>\n<li>No new proposals this time.</li>\n</ul>\n</li>\n</ul>",
        "id": 218705571,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607008147
    },
    {
        "content": "<ul>\n<li>Old MCPs (not seconded, take a look)<ul>\n<li>\"Require users to confirm they know RUSTC_BOOTSTRAP is unsupported before using it\" <a href=\"https://github.com/rust-lang/compiler-team/issues/350\">compiler-team#350</a></li>\n<li>\"MCP: move compiler/ crates to stable Rust\" <a href=\"https://github.com/rust-lang/compiler-team/issues/358\">compiler-team#358</a></li>\n<li>\"Add 32-bit and 64-bit stderr/stdout files for ui tests\" <a href=\"https://github.com/rust-lang/compiler-team/issues/365\">compiler-team#365</a></li>\n<li>\"Add a <code>NOOP_METHOD_CALL</code> lint for methods which should never be directly called\" <a href=\"https://github.com/rust-lang/compiler-team/issues/375\">compiler-team#375</a></li>\n<li>\"MCP: More Cranelift-friendly portable SIMD intrinsics\" <a href=\"https://github.com/rust-lang/compiler-team/issues/381\">compiler-team#381</a></li>\n<li>\"Debuggable Macro Expansions\" <a href=\"https://github.com/rust-lang/compiler-team/issues/386\">compiler-team#386</a></li>\n<li>\"Move query implementation outside rustc_middle\" <a href=\"https://github.com/rust-lang/compiler-team/issues/388\">compiler-team#388</a></li>\n<li>\"Uplift the <code>invalid_atomic_ordering</code> lint from clippy to rustc\" <a href=\"https://github.com/rust-lang/compiler-team/issues/390\">compiler-team#390</a></li>\n</ul>\n</li>\n</ul>",
        "id": 218705607,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607008162
    },
    {
        "content": "<ul>\n<li>Pending FCP requests (check your boxes!)<ul>\n<li>\"Drop official support for Windows XP\" <a href=\"https://github.com/rust-lang/compiler-team/issues/378\">compiler-team#378</a></li>\n</ul>\n</li>\n</ul>",
        "id": 218705640,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607008173
    },
    {
        "content": "<ul>\n<li>Things in FCP (make sure you're good with it)<ul>\n<li>No FCP requests this time.</li>\n</ul>\n</li>\n</ul>",
        "id": 218705661,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607008184
    },
    {
        "content": "<ul>\n<li>Accepted MCPs<ul>\n<li>No new accepted proposals this time.</li>\n</ul>\n</li>\n</ul>",
        "id": 218705686,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607008191
    },
    {
        "content": "<ul>\n<li>Finalized FCPs (disposition merge)<ul>\n<li>[T-libs] \"Tracking issue for methods converting <code>bool</code> to <code>Option&lt;T&gt;</code>\" <a href=\"https://github.com/rust-lang/rust/issues/64260\">rust#64260</a></li>\n<li>[T-libs] \"Stabilize the backtrace feature.\" <a href=\"https://github.com/rust-lang/rust/pull/72981\">rust#72981</a></li>\n<li>[T-libs] \"Stabilize <code>IpAddr::is_ipv4</code> and <code>is_ipv6</code> as const\" <a href=\"https://github.com/rust-lang/rust/pull/76226\">rust#76226</a></li>\n<li>[T-libs] \"stabilize const_int_pow\" <a href=\"https://github.com/rust-lang/rust/pull/76829\">rust#76829</a></li>\n<li>[T-libs] \"Impl Default for PhantomPinned\" <a href=\"https://github.com/rust-lang/rust/pull/77893\">rust#77893</a></li>\n<li>[T-libs] \"Stabilize alloc::Layout const functions\" <a href=\"https://github.com/rust-lang/rust/pull/78305\">rust#78305</a></li>\n<li>[T-libs] \"Stabilize refcell_take\" <a href=\"https://github.com/rust-lang/rust/pull/78608\">rust#78608</a></li>\n<li>[T-libs] \"Implement PartialEq for proc_macro::Ident == strings\" <a href=\"https://github.com/rust-lang/rust/pull/78634\">rust#78634</a></li>\n</ul>\n</li>\n</ul>",
        "id": 218705714,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607008202
    },
    {
        "content": "<p>Regarding WG checkins</p>",
        "id": 218705803,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607008227
    },
    {
        "content": "<p>I'll post links, since they were already posted in this topic</p>",
        "id": 218705851,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607008245
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> wrote: <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-12-03.20.2354818/near/218633343\">https://rust-lang.zulipchat.com/#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-12-03.20.2354818/near/218633343</a></p>",
        "id": 218705898,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607008262
    },
    {
        "content": "<p>for <span class=\"user-group-mention\" data-user-group-id=\"1172\">@WG-async-foundations</span></p>",
        "id": 218705920,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607008268
    },
    {
        "content": "<p>and for <span class=\"user-group-mention\" data-user-group-id=\"1172\">@WG-async-foundations</span> , <span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> wrote: <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-12-03.20.2354818/near/218665719\">https://rust-lang.zulipchat.com/#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-12-03.20.2354818/near/218665719</a></p>",
        "id": 218705988,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607008290
    },
    {
        "content": "<p>(you can also see them both on the agenda, <a href=\"https://hackmd.io/Jp-q_pMvQba1T3jdiO6iQQ?both#WG-checkins\">here</a> )</p>",
        "id": 218706055,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607008320
    },
    {
        "content": "<p>next, beta nominations</p>",
        "id": 218706114,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607008330
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Abeta-nominated+-label%3Abeta-accepted+label%3AT-compiler\">T-compiler</a></p>",
        "id": 218706142,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607008343
    },
    {
        "content": "<ul>\n<li>\"Check projection predicates satisfy bounds\" <a href=\"https://github.com/rust-lang/rust/pull/79543\">rust#79543</a><ul>\n<li>Opened by <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span></li>\n<li>Not merged yet, Waiting for review</li>\n<li>Fixes a <code>P-critical</code> issue <a href=\"https://github.com/rust-lang/rust/issues/78893\">rust#78893</a></li>\n<li>Restores the behaviour antecedent of <a href=\"https://github.com/rust-lang/rust/pull/73905\">rust#73905</a> and fixes <a href=\"https://github.com/rust-lang/rust/issues/78893\">rust#78893</a></li>\n</ul>\n</li>\n</ul>",
        "id": 218706172,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607008357
    },
    {
        "content": "<p>This PR doesn't work, it's slightly different to the original behavior and I'm not really sure how to get the original behavior.</p>",
        "id": 218706303,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1607008407
    },
    {
        "content": "<p>wait, \"doesn't work\" as in, isn't a complete match to prior behavior, or \"doesn't work\" as in \"has a clear defect\" ?</p>",
        "id": 218706440,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607008445
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> is reverting something to buy us time a possibility?</p>",
        "id": 218706451,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1607008448
    },
    {
        "content": "<p>reverting isn't really possible</p>",
        "id": 218706528,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607008477
    },
    {
        "content": "<p>Doesn't work as in, breaking change that prevents the compiler from even bootstrapping.</p>",
        "id": 218706542,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1607008482
    },
    {
        "content": "<p>omg</p>",
        "id": 218706582,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607008497
    },
    {
        "content": "<p>this is related to <a href=\"https://github.com/rust-lang/rust/pull/79543#issuecomment-735962727\">this comment</a>?</p>",
        "id": 218706590,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607008500
    },
    {
        "content": "<p>yes</p>",
        "id": 218706620,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1607008511
    },
    {
        "content": "<p>why is there no such predicate? oh, I think I see</p>",
        "id": 218706697,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607008543
    },
    {
        "content": "<p>I don't see</p>",
        "id": 218706710,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607008547
    },
    {
        "content": "<p>although...</p>",
        "id": 218706712,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607008548
    },
    {
        "content": "<p>why isn't there the predicate there?</p>",
        "id": 218706722,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607008551
    },
    {
        "content": "<p>(or why couldn't we put an implicit one in?)</p>",
        "id": 218706766,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607008563
    },
    {
        "content": "<p>it seems like it should still be possible for us to <em>derive</em> that, but I guess we don't get it through elaboration, you are saying?</p>",
        "id": 218706815,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607008574
    },
    {
        "content": "<p>we could <em>plausibly</em> do that elaboration, but I'm not super keen do so</p>",
        "id": 218706875,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607008600
    },
    {
        "content": "<p>Not having that predicate was the whole point to that PR.</p>",
        "id": 218706909,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1607008611
    },
    {
        "content": "<p>right :)</p>",
        "id": 218706926,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607008615
    },
    {
        "content": "<p>well</p>",
        "id": 218706928,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607008617
    },
    {
        "content": "<p>sort of right</p>",
        "id": 218706937,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607008619
    },
    {
        "content": "<p>putting it in elaboration isn't the same as having it</p>",
        "id": 218706957,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607008625
    },
    {
        "content": "<p>(I'm also trying to understand how having a  <code>str: Sized</code> could be correct)</p>",
        "id": 218706962,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607008628
    },
    {
        "content": "<p>(or maybe the whole point is that we don't want that)</p>",
        "id": 218706978,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607008638
    },
    {
        "content": "<p>that said, it's not like we have a <em>Regression</em> here, right?</p>",
        "id": 218706986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607008644
    },
    {
        "content": "<p>that is, we're just accepting code that we were a bit unsure if we should accept?</p>",
        "id": 218707002,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607008650
    },
    {
        "content": "<p>True, we could use elaboration to create those predicates.</p>",
        "id": 218707042,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1607008666
    },
    {
        "content": "<p>(although I personally think we should, long term)</p>",
        "id": 218707045,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607008667
    },
    {
        "content": "<p>okay so</p>",
        "id": 218707049,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607008670
    },
    {
        "content": "<p>we've already gone way over</p>",
        "id": 218707069,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607008680
    },
    {
        "content": "<p>in terms of time to spend on this</p>",
        "id": 218707113,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607008684
    },
    {
        "content": "<p>Yes, it's accepting code that is in some cases confusing</p>",
        "id": 218707117,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1607008685
    },
    {
        "content": "<p>yeah I was gonna say we should move this out of line :)</p>",
        "id": 218707122,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607008687
    },
    {
        "content": "<p>obviously we won't approve a backport, not today</p>",
        "id": 218707139,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607008692
    },
    {
        "content": "<p>right? Do we even bother leaving this beta-nominated? Sounds like no?</p>",
        "id": 218707182,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607008711
    },
    {
        "content": "<p>as in, if the PR is revised to something else, then let that go through a re-nomination process, right?</p>",
        "id": 218707235,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607008732
    },
    {
        "content": "<p>yes</p>",
        "id": 218707274,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1607008744
    },
    {
        "content": "<p>okay</p>",
        "id": 218707283,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607008747
    },
    {
        "content": "<p>sounds correct</p>",
        "id": 218707291,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607008750
    },
    {
        "content": "<p>declining to backport then.</p>",
        "id": 218707313,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607008755
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Abeta-nominated+-label%3Abeta-accepted+label%3Alibs-impl\">libs-impl</a></p>\n<ul>\n<li>No beta nominations for <code>libs-impl</code> this time.</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Abeta-nominated+-label%3Abeta-accepted+label%3AT-rustdoc\">T-rustdoc</a></p>\n<ul>\n<li>No beta nominations for <code>T-rustdoc</code> this time.</li>\n</ul>",
        "id": 218707360,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607008774
    },
    {
        "content": "<h2>Stable-nominations</h2>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Astable-nominated+-label%3Astable-accepted+label%3AT-compiler\">T-compiler</a></p>",
        "id": 218707388,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607008781
    },
    {
        "content": "<ul>\n<li>\"Revert \"Allow dynamic linking for iOS/tvOS targets.\"\" <a href=\"https://github.com/rust-lang/rust/pull/77716\">rust#77716</a><ul>\n<li>Reverts a <a href=\"https://github.com/rust-lang/rust/pull/73516\">previous patch</a> that allowed dynamic libs linking on iOS/tvOS builds. This patch <strong>blocks</strong> again dynamic libs linking and restores building again code that is running in production</li>\n</ul>\n</li>\n</ul>",
        "id": 218707488,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607008808
    },
    {
        "content": "<p>what a bummer we only found out that PR <a href=\"https://github.com/rust-lang/rust/issues/73516\">#73516</a> broke things only after it got to stable.</p>",
        "id": 218707671,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607008879
    },
    {
        "content": "<p>though I suppose there is debate as to whether the root issue is in cargo or if it truly is a rustc one</p>",
        "id": 218707788,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607008923
    },
    {
        "content": "<p>anyway it sounds to me like we should backport this and then revisit the original question more carefully</p>",
        "id": 218707865,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607008944
    },
    {
        "content": "<p>and also, it sounds like we need to expand our test suite</p>",
        "id": 218707896,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607008954
    },
    {
        "content": "<p>to include more representatives of \"important projects/crates\"</p>",
        "id": 218707935,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607008973
    },
    {
        "content": "<p>(which is a more general issue, but probably one worth tackling, maybe in a design meeting some day)</p>",
        "id": 218708015,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607008999
    },
    {
        "content": "<p>this is a weird one</p>",
        "id": 218708021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607009001
    },
    {
        "content": "<p>it doesn't quite \"fit\" the way our test suite \"is designed\", I guess, because it interacts with cargo? anyway</p>",
        "id": 218708085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607009024
    },
    {
        "content": "<p>cases like this may need to be expressed as some sort of integration test</p>",
        "id": 218708224,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607009062
    },
    {
        "content": "<p>or maybe it just goes into the cargo test suite</p>",
        "id": 218708242,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607009070
    },
    {
        "content": "<p>having it there would have caught this, right?</p>",
        "id": 218708268,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607009081
    },
    {
        "content": "<p>do we only want a stable and <em>not</em> a beta backport?</p>",
        "id": 218708281,
        "sender_full_name": "lcnr",
        "timestamp": 1607009088
    },
    {
        "content": "<p>(as in, would have caught this before we put out a release.)</p>",
        "id": 218708285,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607009089
    },
    {
        "content": "<p>We probably should have a separate battery of tests integration, it wouldn't even need to run on every merge, only daily</p>",
        "id": 218708318,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1607009101
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-12-03.20.2354818/near/218708281\">said</a>:</p>\n<blockquote>\n<p>do we only want a stable and <em>not</em> a beta backport?</p>\n</blockquote>\n<p>that is an excellent question</p>",
        "id": 218708335,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607009105
    },
    {
        "content": "<p>This landed two months ago, isn't it already in beta?</p>",
        "id": 218708396,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1607009131
    },
    {
        "content": "<p>It's tagged 1.49 which is the beta version</p>",
        "id": 218708517,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1607009166
    },
    {
        "content": "<p>ah, ok <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 218708537,
        "sender_full_name": "lcnr",
        "timestamp": 1607009173
    },
    {
        "content": "<p>okay then</p>",
        "id": 218708560,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607009180
    },
    {
        "content": "<p>backport approved.</p>",
        "id": 218708566,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607009182
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-12-03.20.2354818/near/218708517\">said</a>:</p>\n<blockquote>\n<p>It's tagged 1.49 which is the beta version</p>\n</blockquote>\n<p>(this is probably one of those details that we should include in the nomination report for any case where something is stable-nominated but not beta-nominated)</p>",
        "id": 218708704,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607009228
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"2403\">@WG-prioritization</span> ^</p>",
        "id": 218708743,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607009242
    },
    {
        "content": "<p>I don't think we have the bandwidth this moment to pull off a stable release, and I don't think this warrants it personally</p>",
        "id": 218708778,
        "sender_full_name": "simulacrum",
        "timestamp": 1607009255
    },
    {
        "content": "<p>but if we <em>were</em> to do a stable release</p>",
        "id": 218708830,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607009273
    },
    {
        "content": "<p>I'd put this in it</p>",
        "id": 218708838,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607009275
    },
    {
        "content": "<p>hm, I guess it's just a revert</p>",
        "id": 218708872,
        "sender_full_name": "simulacrum",
        "timestamp": 1607009283
    },
    {
        "content": "<p>though I seem to recall someone saying that landing this would break their now-working case?</p>",
        "id": 218708924,
        "sender_full_name": "simulacrum",
        "timestamp": 1607009298
    },
    {
        "content": "<p>yes I imagine it would</p>",
        "id": 218708952,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607009307
    },
    {
        "content": "<p>but its going to break anyway</p>",
        "id": 218708985,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607009325
    },
    {
        "content": "<p>yeah true</p>",
        "id": 218708991,
        "sender_full_name": "simulacrum",
        "timestamp": 1607009330
    },
    {
        "content": "<p>once the beta is promoted</p>",
        "id": 218708994,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607009330
    },
    {
        "content": "<p>okay next up</p>",
        "id": 218709042,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607009346
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Astable-nominated+-label%3Astable-accepted+label%3Alibs-impl\">libs-impl</a></p>\n<ul>\n<li>No stable nominations for <code>libs-impl</code> this time.</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Astable-nominated+-label%3Astable-accepted+label%3AT-rustdoc\">T-rustdoc</a></p>\n<ul>\n<li>No stable nominations for <code>T-rustdoc</code> this time.</li>\n</ul>",
        "id": 218709068,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607009356
    },
    {
        "content": "<h2>PRs S-waiting-on-team</h2>\n<p><a href=\"https://github.com/rust-lang/rust/pulls?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AS-waiting-on-team+label%3AT-compiler\">T-compiler</a></p>\n<ul>\n<li>No PRs waiting on <code>T-compiler</code> this time.</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/pulls?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AS-waiting-on-team+label%3Alibs-impl\">libs-impl</a></p>\n<ul>\n<li>No PRs waiting on <code>libs-impl</code> this time.</li>\n</ul>",
        "id": 218709090,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607009366
    },
    {
        "content": "<h2>Issues of Note</h2>\n<h3>Short Summary</h3>\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AT-compiler+label%3AP-critical+\">4 T-compiler P-critical issues</a><ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AT-compiler+label%3AP-critical+no%3Aassignee\">2 of those are unassigned</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AT-compiler+label%3AP-high+\">48 T-compiler P-high issues</a><ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AT-compiler+label%3AP-high+no%3Aassignee\">32 of those are unassigned</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/rust-lang/rust/labels/regression-from-stable-to-beta\">1 P-critical, 3 P-high, 1 P-medium, 0 P-low regression-from-stable-to-beta</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/labels/regression-from-stable-to-nightly\">2 P-critical, 0 P-high, 8 P-medium, 1 P-low regression-from-stable-to-nightly</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/labels/regression-from-stable-to-stable\">1 P-critical, 25 P-high, 67 P-medium, 5 P-low regression-from-stable-to-stable</a></li>\n</ul>",
        "id": 218709111,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607009378
    },
    {
        "content": "<h3>P-critical</h3>\n<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AP-critical+label%3AT-compiler\">T-compiler</a></p>",
        "id": 218709145,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607009398
    },
    {
        "content": "<ul>\n<li>\"Switching to opt-level=z on i686-windows-msvc triggers STATUS_ACCESS_VIOLATION\" <a href=\"https://github.com/rust-lang/rust/issues/67497\">rust#67497</a><ul>\n<li>Opened by <span class=\"user-mention\" data-user-id=\"238306\">@dignifiedquire</span> </li>\n<li>Not yet assigned</li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/67497#issuecomment-733699197\">Rust 1.36.0 through 1.48.0</a> all have broken builds on Windows i686-windows-msvc</li>\n</ul>\n</li>\n</ul>",
        "id": 218709227,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607009415
    },
    {
        "content": "<p>needs further bisection.</p>",
        "id": 218709344,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607009468
    },
    {
        "content": "<p>oh dear</p>",
        "id": 218709442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607009508
    },
    {
        "content": "<p>presumably llvm related</p>",
        "id": 218709452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607009510
    },
    {
        "content": "<p>did we ping the windows group or llvm group?</p>",
        "id": 218709503,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607009524
    },
    {
        "content": "<p>looks like no..</p>",
        "id": 218709531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607009526
    },
    {
        "content": "<p>also I <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> <a href=\"https://github.com/rust-lang/rust/issues/67497#issuecomment-733636325\">this comment</a> -- yay for <span class=\"user-group-mention\" data-user-group-id=\"2403\">@WG-prioritization</span> and having defined criteria :)</p>",
        "id": 218709664,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607009570
    },
    {
        "content": "<p>so this looks bad</p>",
        "id": 218709818,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607009617
    },
    {
        "content": "<p>I can do initial investigation but probably wont have time to do deep dive</p>",
        "id": 218709936,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607009649
    },
    {
        "content": "<p>If someone else who develops on windows wants to assist, ping me</p>",
        "id": 218710045,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607009686
    },
    {
        "content": "<p>in the meantime I will self-assign</p>",
        "id": 218710072,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607009698
    },
    {
        "content": "<ul>\n<li>\"Upgrade to LLVM11 caused a codegen regression on Windows\" <a href=\"https://github.com/rust-lang/rust/issues/78283\">rust#78283</a><ul>\n<li><a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-11-12.20.2354818/near/216482008\">Previously discussed</a></li>\n<li>opened by <span class=\"user-mention\" data-user-id=\"133260\">@Jeff Muizelaar</span></li>\n<li>assigned to  <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> </li>\n<li>Firefox code that used to work on Rust 1.46 started to fail after upgrading to LLVM 11</li>\n<li>Affects only MSVC</li>\n<li><span class=\"user-mention\" data-user-id=\"133224\">@Nikita Popov</span> suggests could be related to <a href=\"https://github.com/rust-lang/rust/issues/74498\">rust#74498</a></li>\n<li><span class=\"user-mention\" data-user-id=\"133260\">@Jeff Muizelaar</span> suggests to be related to LLVM bug <a href=\"https://bugs.llvm.org/show_bug.cgi?id=46943\">#46943</a>, provides a <a href=\"https://github.com/rust-lang/rust/issues/78283#issuecomment-720156273\">minimal repro</a></li>\n<li><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> has patch in progress for LLVM bug <a href=\"https://bugs.llvm.org/show_bug.cgi?id=46943\">#46943</a></li>\n</ul>\n</li>\n</ul>",
        "id": 218710165,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607009734
    },
    {
        "content": "<p>I haven't had time to continue working on this. <span class=\"user-mention\" data-user-id=\"133224\">@Nikita Popov</span> pointed out some ... questionable aspects of my posted patch</p>",
        "id": 218710223,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607009759
    },
    {
        "content": "<p>(I still think my approach \"works\", but I intend to try a variant based on nikita's feedback. Just not sure when that's going to happen.)</p>",
        "id": 218710342,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607009789
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> , we've been disabling LTO because of this (<a href=\"https://github.com/rust-lang/rust/issues/78283\">rust#78283</a>), right?</p>",
        "id": 218710373,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607009802
    },
    {
        "content": "<p>hm no</p>",
        "id": 218710434,
        "sender_full_name": "simulacrum",
        "timestamp": 1607009819
    },
    {
        "content": "<p>oh did I misremember</p>",
        "id": 218710455,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607009824
    },
    {
        "content": "<p>or at least not that I know of, that's a separate issue</p>",
        "id": 218710463,
        "sender_full_name": "simulacrum",
        "timestamp": 1607009826
    },
    {
        "content": "<p>let me look again</p>",
        "id": 218710483,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607009830
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/74498\">#74498</a> is the bug that led us to disable LTO</p>",
        "id": 218710615,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607009876
    },
    {
        "content": "<p>lotsa \"llvm on windows\" problems :(</p>",
        "id": 218710618,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607009878
    },
    {
        "content": "<p>but <a href=\"https://github.com/rust-lang/rust/issues/78283\">#78283</a> is, I think, at its root a duplicate of <a href=\"https://github.com/rust-lang/rust/issues/74498\">#74498</a></p>",
        "id": 218710693,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607009890
    },
    {
        "content": "<p>Oh I guess this is a separate LTO thing</p>",
        "id": 218710738,
        "sender_full_name": "simulacrum",
        "timestamp": 1607009908
    },
    {
        "content": "<p>I was thinking of <a href=\"https://github.com/rust-lang/rust/issues/76980\">https://github.com/rust-lang/rust/issues/76980</a></p>",
        "id": 218710749,
        "sender_full_name": "simulacrum",
        "timestamp": 1607009913
    },
    {
        "content": "<p>oh, really?</p>",
        "id": 218710764,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607009917
    },
    {
        "content": "<p>I'm not aware of any Windows-targeted LTO disables</p>",
        "id": 218710830,
        "sender_full_name": "simulacrum",
        "timestamp": 1607009946
    },
    {
        "content": "<p>so wait, is LTO enabled again then?</p>",
        "id": 218710840,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607009950
    },
    {
        "content": "<p>ThinLTO for the compiler on x86_64-unknown-linux-gnu is currently enabled, yes</p>",
        "id": 218710929,
        "sender_full_name": "simulacrum",
        "timestamp": 1607009985
    },
    {
        "content": "<p>wow I am just totally out to lunch</p>",
        "id": 218710951,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607009994
    },
    {
        "content": "<p>To my knowledge the compiler is not built with ThinLTO on any other platform</p>",
        "id": 218711017,
        "sender_full_name": "simulacrum",
        "timestamp": 1607010006
    },
    {
        "content": "<p>...</p>",
        "id": 218711040,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607010014
    },
    {
        "content": "<p>(er, rather, LLVM is not)</p>",
        "id": 218711052,
        "sender_full_name": "simulacrum",
        "timestamp": 1607010020
    },
    {
        "content": "<p>sorry, the compiler might be, but we don't do anything beyond cargo defaults there</p>",
        "id": 218711093,
        "sender_full_name": "simulacrum",
        "timestamp": 1607010032
    },
    {
        "content": "<p>let me put it this way: I've been treating the LLVM fixes as relatively low priority</p>",
        "id": 218711116,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607010042
    },
    {
        "content": "<p>because I had thought we were working around the LTO issues</p>",
        "id": 218711134,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607010051
    },
    {
        "content": "<p>by not enabling LTO in the cases where we had seen such issues</p>",
        "id": 218711166,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607010062
    },
    {
        "content": "<p>I don't think that's the case</p>",
        "id": 218711197,
        "sender_full_name": "simulacrum",
        "timestamp": 1607010072
    },
    {
        "content": "<p>(they might be low priority regardless, I don't know)</p>",
        "id": 218711218,
        "sender_full_name": "simulacrum",
        "timestamp": 1607010082
    },
    {
        "content": "<p>okay. This is my fault for mischaracterizing the priority</p>",
        "id": 218711228,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607010087
    },
    {
        "content": "<p>I guess I'll try to squeeze in time for this</p>",
        "id": 218711365,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607010134
    },
    {
        "content": "<p>I don't think there's any other reasonable actions to take right now</p>",
        "id": 218711389,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607010145
    },
    {
        "content": "<p>(besides exploring options involving disabling LTO, but I'm not sure if the number of bugs we see there warrants such action)</p>",
        "id": 218711460,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607010179
    },
    {
        "content": "<ul>\n<li>\"No error reported when a generic parameter doesn't meet the requirement of an associated type\" <a href=\"https://github.com/rust-lang/rust/issues/78893\">rust#78893</a><ul>\n<li><a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-11-12.20.2354818/near/216482210\">Previously discussed</a>, and <a href=\"#narrow/stream/213817-t-lang/topic/.2378893.20no.20err.20when.20genrc.20param.20doesnt.20meet.20req.20of.20assoc.20type\">a topic was created to discuss it on Zulip</a></li>\n<li>Nightly regression</li>\n<li>Regressed on <a href=\"https://github.com/rust-lang/rust/pull/73905\">rust#73905</a></li>\n<li><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> provides a fix in PR <a href=\"https://github.com/rust-lang/rust/pull/79543\">rust#79543</a></li>\n</ul>\n</li>\n</ul>",
        "id": 218711581,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607010236
    },
    {
        "content": "<p>we just discussed this, we don't need to go over it again</p>",
        "id": 218711664,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607010266
    },
    {
        "content": "<ul>\n<li>\"Internal Compiler Error while compiling diesel\" <a href=\"https://github.com/rust-lang/rust/issues/79560\">rust#79560</a><ul>\n<li>ICE when compiling Diesel (master branch)</li>\n<li>Caused by <a href=\"https://github.com/rust-lang/rust/pull/79209\">rust#79209</a></li>\n<li><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> reverted <a href=\"https://github.com/rust-lang/rust/pull/79209\">rust#79209</a> in <a href=\"https://github.com/rust-lang/rust/pull/79637\">rust#79637</a> (which is already r+ed) to buy time to work on a proper solution</li>\n<li><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> is working on a proper solution</li>\n</ul>\n</li>\n</ul>",
        "id": 218711753,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607010304
    },
    {
        "content": "<p>we've been discussing a solution for this <a href=\"#narrow/stream/241847-t-compiler.2Fwg-incr-comp/topic/.2379560.20.20Internal.20Compiler.20Error.20while.20compiling.20diesel\">here</a></p>",
        "id": 218711822,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1607010340
    },
    {
        "content": "<p>This is the bug I was thinking of when I said up above that we should think about expanding our test suite</p>",
        "id": 218711836,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607010345
    },
    {
        "content": "<p>though to be honest</p>",
        "id": 218711918,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607010365
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> requested to add <code>Diesel</code> to test on each PR</p>",
        "id": 218711940,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1607010374
    },
    {
        "content": "<p>unsure if that was merged already</p>",
        "id": 218711962,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1607010387
    },
    {
        "content": "<p>I was mostly forwarding the request from Diesel's author</p>",
        "id": 218711983,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607010399
    },
    {
        "content": "<p>okay</p>",
        "id": 218711989,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607010403
    },
    {
        "content": "<p>but yeah, I think it's a good idea</p>",
        "id": 218711990,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607010404
    },
    {
        "content": "<p>the one misgiving I have</p>",
        "id": 218712016,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607010416
    },
    {
        "content": "<p>well I don't know</p>",
        "id": 218712071,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607010439
    },
    {
        "content": "<p>my problem is that I keep re-reading the dialogue on the ticket</p>",
        "id": 218712095,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607010449
    },
    {
        "content": "<p>the response to the suggestion \"have you considered switching to beta toolchain\"</p>",
        "id": 218712132,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607010462
    },
    {
        "content": "<p>so -- <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> -- were you planning to revert the PR for now?</p>",
        "id": 218712134,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607010464
    },
    {
        "content": "<p>(I think we talked about that)</p>",
        "id": 218712154,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607010473
    },
    {
        "content": "<p>it is reverted</p>",
        "id": 218712160,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1607010477
    },
    {
        "content": "<p>well as we're talking the revert has landed</p>",
        "id": 218712261,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1607010508
    },
    {
        "content": "<p>and wondering about it. I think weiznich is missing a critical point about beta vs nightly</p>",
        "id": 218712274,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607010514
    },
    {
        "content": "<p>but maybe <em>I'm</em> the one who's missing the point</p>",
        "id": 218712325,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607010540
    },
    {
        "content": "<p>I don't think this is fundamentally different from <a href=\"https://github.com/rust-lang/rust/issues/75100\">https://github.com/rust-lang/rust/issues/75100</a></p>",
        "id": 218712372,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607010560
    },
    {
        "content": "<p>technically this stopped being a <code>P-critical</code> issue as soon as the revert has landed but it's good that we're discussing, I also thought about nominating it</p>",
        "id": 218712377,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1607010562
    },
    {
        "content": "<blockquote>\n<p>the response to the suggestion \"have you considered switching to beta toolchain\"</p>\n</blockquote>\n<p>I was not personally a fan of that suggestion. Part of the point of nightly is to get users to test it out. Encouraging everyone to switch to beta just means we're going to let regressions slip in for 6 weeks and then we'll have lots of beta backports.</p>",
        "id": 218712392,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1607010567
    },
    {
        "content": "<p>well, maybe in the sense that <a href=\"http://docs.rs\">docs.rs</a> <em>always</em> uses nightly</p>",
        "id": 218712397,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607010569
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-12-03.20.2354818/near/218711940\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> requested to add <code>Diesel</code> to test on each PR</p>\n</blockquote>\n<p>would this mean testing a snapshot of the source? Or a submodule that's updated? Or a checkout of its current state?</p>",
        "id": 218712440,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607010592
    },
    {
        "content": "<p>a snapshot I think</p>",
        "id": 218712510,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607010605
    },
    {
        "content": "<p>a submodule would be a lot more work <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 218712544,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607010620
    },
    {
        "content": "<p>So the problem with testing a snapshot of the source is that it puts us on the hook to \"maintain\" it</p>",
        "id": 218712559,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607010626
    },
    {
        "content": "<p>this is the PR: <a href=\"https://github.com/rust-lang/rust/pull/79599\">https://github.com/rust-lang/rust/pull/79599</a></p>",
        "id": 218712597,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607010640
    },
    {
        "content": "<p>I am personally against adding more cargotest cases (E.g., diesel) until we have a better framework for understanding why, which the infra team has been working on but has not made significant progress.</p>",
        "id": 218712641,
        "sender_full_name": "simulacrum",
        "timestamp": 1607010663
    },
    {
        "content": "<p>Maintain, in terms of fixing incompatibilities that arise over time (which should be minimal, one would hope), and also in terms of updating it to match whatever Diesel's current status is</p>",
        "id": 218712669,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607010673
    },
    {
        "content": "<p>\"why\"?</p>",
        "id": 218712672,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607010674
    },
    {
        "content": "<p>i.e. why diesel</p>",
        "id": 218712692,
        "sender_full_name": "simulacrum",
        "timestamp": 1607010685
    },
    {
        "content": "<p>oh</p>",
        "id": 218712702,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607010689
    },
    {
        "content": "<p>and not other projects</p>",
        "id": 218712705,
        "sender_full_name": "simulacrum",
        "timestamp": 1607010691
    },
    {
        "content": "<p>Number of bugs detected?</p>",
        "id": 218712716,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607010698
    },
    {
        "content": "<p>like, diesel seems no \"better\" than tokio/async-std whatever</p>",
        "id": 218712721,
        "sender_full_name": "simulacrum",
        "timestamp": 1607010700
    },
    {
        "content": "<p>there's many ways to do this, but I want a document that tells me how to evaluate before we start adding things</p>",
        "id": 218712741,
        "sender_full_name": "simulacrum",
        "timestamp": 1607010715
    },
    {
        "content": "<p>I think they stress different parts of the compiler</p>",
        "id": 218712751,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607010722
    },
    {
        "content": "<p>I guess I would think of it as \"real world projects that have encountered &gt;1 bug\" or something, but yes</p>",
        "id": 218712798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607010727
    },
    {
        "content": "<p>I can agree that we should have criteria for deciding what gets put in there</p>",
        "id": 218712812,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607010737
    },
    {
        "content": "<p>I agree the criteria should be 'is this a good test case' more than 'is this project important'</p>",
        "id": 218712818,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607010742
    },
    {
        "content": "<p>I will say that -- in my experience -- attempts to \"from first principles\" divine a good set of real world examples are quite hard and never get done :P</p>",
        "id": 218712823,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607010746
    },
    {
        "content": "<p>Right, I'm fine if our basis is e.g. \"Compiler team FCP'd it\"</p>",
        "id": 218712857,
        "sender_full_name": "simulacrum",
        "timestamp": 1607010763
    },
    {
        "content": "<p>but I want a document saying that</p>",
        "id": 218712867,
        "sender_full_name": "simulacrum",
        "timestamp": 1607010767
    },
    {
        "content": "<p>shoot we're going to run out of time</p>",
        "id": 218712892,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607010779
    },
    {
        "content": "<p>look this is a super important conversatino</p>",
        "id": 218712919,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607010787
    },
    {
        "content": "<p>but lets move it to a different topic</p>",
        "id": 218712944,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607010796
    },
    {
        "content": "<p>it sounds like this particular bug is under control, in any case</p>",
        "id": 218712980,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607010816
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AP-critical+label%3Alibs-impl\">libs-impl</a></p>\n<ul>\n<li>No <code>P-critical</code> issues for <code>libs-impl</code> this time.</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AP-critical+label%3AT-rustdoc\">T-rustdoc</a></p>\n<ul>\n<li>No <code>P-critical</code> issues for <code>T-rustdoc</code> this time.</li>\n</ul>",
        "id": 218712993,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607010822
    },
    {
        "content": "<h3>P-high regressions</h3>\n<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3Aregression-from-stable-to-beta+label%3AP-high\">P-high beta regressions</a></p>",
        "id": 218713012,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607010831
    },
    {
        "content": "<ul>\n<li>\"New \"warning incompatible with previous forbid in same scope\" error\" <a href=\"https://github.com/rust-lang/rust/issues/77713\">rust#77713</a><ul>\n<li>Opened by <span class=\"user-mention\" data-user-id=\"210267\">@Nemo157</span> </li>\n<li>Assigned to <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span></li>\n<li><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> has a PR <a href=\"https://github.com/rust-lang/rust/pull/78864\">#78864</a> which is in proposed FCP with intention to merge state.</li>\n</ul>\n</li>\n</ul>",
        "id": 218713033,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607010840
    },
    {
        "content": "<p>wait, <a href=\"https://github.com/rust-lang/rust/issues/78864\">#78864</a> is merged  as of 2 days ago?</p>",
        "id": 218713153,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607010873
    },
    {
        "content": "<p>ah, it didn't \"fix\" <a href=\"https://github.com/rust-lang/rust/issues/77713\">#77713</a></p>",
        "id": 218713205,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607010894
    },
    {
        "content": "<p>what's left to do now, then?</p>",
        "id": 218713233,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607010902
    },
    {
        "content": "<p>oh yeah but not beta regression</p>",
        "id": 218713237,
        "sender_full_name": "simulacrum",
        "timestamp": 1607010902
    },
    {
        "content": "<p>I can retag</p>",
        "id": 218713243,
        "sender_full_name": "simulacrum",
        "timestamp": 1607010904
    },
    {
        "content": "<p>okay great</p>",
        "id": 218713254,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607010909
    },
    {
        "content": "<p>we need to fix the unused warnings</p>",
        "id": 218713256,
        "sender_full_name": "simulacrum",
        "timestamp": 1607010910
    },
    {
        "content": "<p>(I guess that's true more broadly so this may not be a useful issue. Unclear).</p>",
        "id": 218713281,
        "sender_full_name": "simulacrum",
        "timestamp": 1607010924
    },
    {
        "content": "<ul>\n<li>\"1.48 beta broken on mips due to copy_file_range EOVERFLOW\" <a href=\"https://github.com/rust-lang/rust/issues/78979\">rust#78979</a><ul>\n<li>Reviewed by <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span></li>\n<li>Beta regression</li>\n<li>This is already fixed on stable and nightly and a beta backport is approved and waiting to be done.</li>\n</ul>\n</li>\n</ul>",
        "id": 218713287,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607010928
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3Aregression-from-stable-to-nightly+label%3AP-high+no%3Aassignee\">Unassigned P-high nightly regressions</a></p>\n<ul>\n<li>No unassigned <code>P-high</code> nightly regressions this time.</li>\n</ul>",
        "id": 218713330,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607010946
    },
    {
        "content": "<h2>Performance logs</h2>\n<blockquote>\n<p><a href=\"https://github.com/rust-lang/rustc-perf/tree/master/triage#triage-logs\">triage logs</a></p>\n</blockquote>",
        "id": 218713351,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607010958
    },
    {
        "content": "<h3>2020-11-24 Triage Log</h3>\n<p>This week saw landing of <a href=\"https://github.com/rust-lang/rust/issues/79237\">#79237</a> which by itself provides no wins but opens the<br>\ndoor to support for split debuginfo on macOS. This'll eventually show huge wins<br>\nas we can likely avoid re-collecting debuginfo while retaining support for<br>\nlldb and Rust backtraces. <a href=\"https://github.com/rust-lang/rust/issues/79361\">#79361</a> tracks the stabilization of the rustc flag, but<br>\nthe precise rollout to stable users is not yet 100% clear.</p>\n<p>Triage done by <strong>@jyn514</strong> and <strong>@simulacrum</strong>.<br>\nRevision range: <a href=\"https://perf.rust-lang.org/?start=c919f490bbcd2b29b74016101f7ec71aaa24bdbb&amp;end=25a691003cf6676259ee7d4bed05b43cb6283cea&amp;absolute=false&amp;stat=instructions%3Au\">c919f490bbcd2b29b74016101f7ec71aaa24bdbb..25a691003cf6676259ee7d4bed05b43cb6283cea</a></p>\n<p>4 regressions, 4 improvements, 2 mixed results.<br>\n5 of them in rollups.</p>",
        "id": 218713423,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607010973
    },
    {
        "content": "<h4>Regressions</h4>\n<p><a href=\"https://github.com/rust-lang/rust/issues/79167\">#79167</a>: linux: try to use libc getrandom to allow interposition <a href=\"https://github.com/rust-lang/rust/issues/78785\">#78785</a></p>\n<ul>\n<li>Large regression in <a href=\"https://perf.rust-lang.org/compare.html?start=7d747db0d5dd8f08f2efb073e2e77a34553465a7&amp;end=8d2d0014922e9f541694bfe87642749239990e0e&amp;stat=instructions:u\">instruction counts</a> (up to 7.7% on <code>incr-unchanged</code> builds of <code>deeply-nested-async-opt</code>)</li>\n<li>The PR allows intercepting <code>getrandom</code> at runtime with <code>LD_PRELOAD</code>, so it's possible a regression was expected. However, 40% increased bootstrap times for <code>libcore</code> seems excessive.</li>\n<li>Landed in a rollup, so it's possible another PR may be to blame. Opened <a href=\"https://github.com/rust-lang/rust/pull/79389\">#79389</a> measuring the impact.</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/issues/78646\">#78646</a>: Use <code>PackedFingerprint</code> in <code>DepNode</code> to reduce memory consumption</p>\n<ul>\n<li>Moderate regression in <a href=\"https://perf.rust-lang.org/compare.html?start=172acf8f61018df3719e42e633ffd62ebecaa1e7&amp;end=ae6aa22cf26fede2177abe4ff974030058885b7a&amp;stat=instructions:u\">instruction counts</a> (up to 3.2% on <code>full</code> builds of <code>keccak-check</code>)</li>\n<li>Major improvement in <a href=\"https://perf.rust-lang.org/compare.html?start=172acf8f61018df3719e42e633ffd62ebecaa1e7&amp;end=ae6aa22cf26fede2177abe4ff974030058885b7a&amp;stat=max-rss\">memory usage</a> (up to 21.6 on <code>full</code> builds of <code>keccak-opt</code>)</li>\n<li>The regression in cycle count is worse than the last perf run on the PR, but overall seems to be expected. Not leaving a comment.</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/issues/79237\">#79237</a>: std: Update the backtrace crate submodule</p>\n<ul>\n<li>Moderate regression in <a href=\"https://perf.rust-lang.org/compare.html?start=d806d656578c2d6b34cf96809862e8cffb293a68&amp;end=3adedb8f4c5bb71e9e8a21a047cf8ed121ce0e75&amp;stat=instructions:u\">instruction counts</a> (up to 1.4% on <code>incr-unchanged</code> builds of <code>unify-linearly-debug</code>), mostly on <code>debug</code> and <code>opt</code> builds.</li>\n<li><strong>@ehuss</strong> reports a 600% decrease in incremental builds when using <code>-Z run-dsymutil=no</code> on MacOS (!!). <a href=\"https://github.com/rust-lang/rust/issues/79361\">#79361</a> tracks enabling <code>-Z run-dsymutil=no</code> by default.</li>\n<li><strong>@alexcrichton</strong> theorizes the regression is because there's more code in libstd overall (since it now handles archives of debug symbol).</li>\n<li>Not leaving a nag, since the regression is small and the improvement more than makes up for it.</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/issues/79273\">#79273</a>: Rollup of 8 pull requests</p>\n<ul>\n<li>Moderate regression in <a href=\"https://perf.rust-lang.org/compare.html?start=3adedb8f4c5bb71e9e8a21a047cf8ed121ce0e75&amp;end=da384694807172f0ca40eca2e49a11688aba6e93&amp;stat=instructions:u\">instruction counts</a> (up to 1.8% on <code>full</code> builds of <code>coercions-debug</code>). <strong>@Mark-Simulacrum</strong> thinks this is a false positive, since there are no similar regressions in <code>-opt</code> or <code>-check</code> builds.</li>\n<li>Minor improvements in <a href=\"https://perf.rust-lang.org/compare.html?start=3adedb8f4c5bb71e9e8a21a047cf8ed121ce0e75&amp;end=da384694807172f0ca40eca2e49a11688aba6e93&amp;stat=instructions:u\">instruction counts</a> on <code>doc</code> builds (up to .4% on <code>unused-warnings-doc</code>). Likely due to <a href=\"https://github.com/rust-lang/rust/pull/79264\">#79264</a>: Get rid of some doctree items.</li>\n<li>Most regressions are in LLVM/codegen, so likely due to <a href=\"https://github.com/rust-lang/rust/pull/79067/\">#79067</a>: Refactor the abi handling code a bit.</li>\n</ul>",
        "id": 218713457,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607010992
    },
    {
        "content": "<p>oh the first one is wrong sorry</p>",
        "id": 218713500,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607011013
    },
    {
        "content": "<p>the regression was the stdsimd upgrade</p>",
        "id": 218713512,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607011019
    },
    {
        "content": "<p>yikes 40% increased bootstrap times for <code>libcore</code> <strong>does</strong> seem excessive</p>",
        "id": 218713523,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607011026
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/79131\">https://github.com/rust-lang/rust/pull/79131</a></p>",
        "id": 218713543,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607011038
    },
    {
        "content": "<p>mostly 15k new lines of avx512f</p>",
        "id": 218713599,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607011066
    },
    {
        "content": "<p>mmm</p>",
        "id": 218713624,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607011075
    },
    {
        "content": "<p>there is a <em>lot</em> of stuff to get through in these performance triage report(s)</p>",
        "id": 218713683,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607011087
    },
    {
        "content": "<p>not feasible for two minutes to give it a proper treatment</p>",
        "id": 218713732,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607011105
    },
    {
        "content": "<p>Here's my suggestion</p>",
        "id": 218713752,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607011112
    },
    {
        "content": "<p>I'll work with people, maybe the perf triagers, maybe <span class=\"user-group-mention\" data-user-group-id=\"2403\">@WG-prioritization</span> , not sure</p>",
        "id": 218713793,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607011133
    },
    {
        "content": "<p>but to take these reports and next week's report</p>",
        "id": 218713817,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607011141
    },
    {
        "content": "<p>and try to generate a more succinct summary of all of them for next week's meeting.</p>",
        "id": 218713854,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607011154
    },
    {
        "content": "<p>(of course with hyperlinks to the more detailed info)</p>",
        "id": 218713909,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607011173
    },
    {
        "content": "<p>well it's hard to make them more succinct without losing info :/</p>",
        "id": 218713935,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607011182
    },
    {
        "content": "<p>I know</p>",
        "id": 218713944,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607011186
    },
    {
        "content": "<p>that's the struggle</p>",
        "id": 218713949,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607011189
    },
    {
        "content": "<p>the nags seem like the most important things to relay right now</p>",
        "id": 218713970,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607011197
    },
    {
        "content": "<h4>Nags requiring follow up</h4>\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust/pull/79167#issuecomment-733207145\">Left a comment</a> nagging the author of the <code>LD_PRELOAD</code> PR.</li>\n<li><a href=\"https://github.com/rust-lang/rust/pull/79273#issuecomment-733224830\">Left a comment</a> asking why a codegen refactor could have regressed instruction count.</li>\n</ul>",
        "id": 218714121,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607011242
    },
    {
        "content": "<h4>Nags requiring follow up</h4>\n<ul>\n<li>Three pull requests require a follow up on their regressions: <a href=\"https://github.com/rust-lang/rust/issues/79318\">#79318</a>, <a href=\"https://github.com/rust-lang/rust/issues/79284\">#79284</a>, and <a href=\"https://github.com/rust-lang/rust/issues/78725\">#78725</a>.</li>\n<li><a href=\"https://github.com/rust-lang/rust/pull/79167#issuecomment-733207145\">One of last week's nags</a> has yet to be fully resolved.</li>\n</ul>",
        "id": 218714151,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607011257
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-12-03.20.2354818/near/218713793\">said</a>:</p>\n<blockquote>\n<p>I'll work with people, maybe the perf triagers, maybe <span class=\"user-group-mention\" data-user-group-id=\"2403\">@WG-prioritization</span> , not sure</p>\n</blockquote>\n<p>yeah, I guess this may be telling us that we need more meetings, more time or less to discuss</p>",
        "id": 218714163,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1607011264
    },
    {
        "content": "<h2>Nominated Issues</h2>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3AI-nominated+label%3AT-compiler\">T-compiler</a></p>\n<ul>\n<li>No nominated issues for <code>T-compiler</code> this time.</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3AI-nominated+label%3Alibs-impl\">libs-impl</a></p>\n<ul>\n<li>No nominated issues for <code>libs-impl</code> this time.</li>\n</ul>",
        "id": 218714230,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607011294
    },
    {
        "content": "<p>I think more <em>targeted</em> meetings might be good, and zoom or something for some of them</p>",
        "id": 218714239,
        "sender_full_name": "simulacrum",
        "timestamp": 1607011298
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rfcs/issues?q=is%3Aopen+label%3AI-nominated+label%3AT-compiler\">RFC</a></p>\n<ul>\n<li>\"RFC: Checking conditional compilation at compile time\" <a href=\"https://github.com/rust-lang/rfcs/pull/3013\">rfcs#3013</a></li>\n</ul>",
        "id": 218714258,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607011306
    },
    {
        "content": "<p>(this recently was moved into our court)</p>",
        "id": 218714382,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607011338
    },
    {
        "content": "<p>there was a general sentiment of approval from lang team, but also a sentiment that its our call</p>",
        "id": 218714439,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607011363
    },
    {
        "content": "<p>I will probably fcp merge it</p>",
        "id": 218714480,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607011375
    },
    {
        "content": "<p>but I want to read over it first more carefully before I do so</p>",
        "id": 218714501,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607011384
    },
    {
        "content": "<p>so if someone else on <span class=\"user-group-mention\" data-user-group-id=\"492\">@T-compiler</span> feels passionate about this RFC</p>",
        "id": 218714565,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607011411
    },
    {
        "content": "<p>feel free to dive in and steal my thunder</p>",
        "id": 218714578,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607011416
    },
    {
        "content": "<p>those <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> 's may be pre-mature, you two!</p>",
        "id": 218714625,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607011436
    },
    {
        "content": "<p>three!</p>",
        "id": 218714643,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607011441
    },
    {
        "content": "<p>okay we're four minutes over time now</p>",
        "id": 218714716,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607011461
    },
    {
        "content": "<p>thanks to everyone in <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span> for attending!</p>",
        "id": 218714738,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607011472
    },
    {
        "content": "<p>stay safe, stay healthy!</p>",
        "id": 218714750,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607011478
    },
    {
        "content": "<blockquote>\n<p>those <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> 's may be pre-mature, you two!</p>\n</blockquote>\n<p>Process moving forward is always cause for celebration :)</p>",
        "id": 218715092,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1607011616
    },
    {
        "content": "<p>leaving here the link for next week's agenda <a href=\"https://hackmd.io/ORPTSEiZRPy39FqmHemEVg?both\">https://hackmd.io/ORPTSEiZRPy39FqmHemEVg?both</a></p>",
        "id": 218735897,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1607020574
    },
    {
        "content": "<p>and we will have checkins from <span class=\"user-group-mention\" data-user-group-id=\"1380\">@WG-rustc-dev-guide</span> and <span class=\"user-group-mention\" data-user-group-id=\"3282\">@wg-incr-comp</span> (cc me, <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span>, <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> and <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>) so we all have time in advance to prepare checkins</p>",
        "id": 218736012,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1607020635
    },
    {
        "content": "<p>I would be happy to prepare the checkin for wg-incr-comp unless another member wants to do it.</p>",
        "id": 218736082,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1607020677
    }
]