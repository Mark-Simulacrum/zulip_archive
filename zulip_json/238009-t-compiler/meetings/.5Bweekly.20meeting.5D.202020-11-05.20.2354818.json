[
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span>; the triage meeting will happen tomorrow at <time datetime=\"2020-11-05T15:00:00Z\">2020-11-05T15:00:00+00:00</time></p>",
        "id": 215638231,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604522362
    },
    {
        "content": "<p>Note that it may be on a different time than before for you due to daylight saving time in US, in particular it's an hour later for me</p>",
        "id": 215638397,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604522425
    },
    {
        "content": "<p><em>WG-prioritization</em> has done pre-triage in <a class=\"stream\" data-stream-id=\"245100\" href=\"/#narrow/stream/245100-t-compiler.2Fwg-prioritization.2Falerts\">#t-compiler/wg-prioritization/alerts</a></p>",
        "id": 215638453,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604522458
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"2403\">@WG-prioritization</span> has prepared the <a href=\"https://hackmd.io/tRGgaOEPSCKRNTqLFPDhxQ?view\">meeting agenda</a></p>",
        "id": 215638495,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604522482
    },
    {
        "content": "<p>We will have checkins from @<em>WG-polymorphization</em> and @<em>WG-polonius</em></p>",
        "id": 215638703,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604522592
    },
    {
        "content": "<p>Actually, according to what the groups have already filled in the agenda, people have been focused on other stuff so there's not that much to share</p>",
        "id": 215638919,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604522696
    },
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span>, triage meeting will be starting in ~ 26 minutes</p>",
        "id": 215719010,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604586844
    },
    {
        "content": "<p><a href=\"https://hackmd.io/tRGgaOEPSCKRNTqLFPDhxQ?view\">Check out the meeting agenda</a></p>",
        "id": 215719050,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604586860
    },
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span>! Add a <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> emoji to show you're here :)</p>",
        "id": 215723361,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604588563
    },
    {
        "content": "<p>we will start off with 5 minutes for ...</p>\n<h2>Announcements</h2>",
        "id": 215723459,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604588600
    },
    {
        "content": "<ul>\n<li>Tomorrow, friday 6th at <time datetime=\"2020-11-06T15:00:00Z\">2020-11-06T15:00:00+00:00</time> we will have rustc regression review day. Due to daylight saving time in US the meeting may be 1 hour later than the usual slot for you.</li>\n</ul>",
        "id": 215723497,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604588610
    },
    {
        "content": "<ul>\n<li>see also <a href=\"https://github.com/rust-lang/compiler-team/issues/382\">compiler-team#382</a>, and the <a href=\"https://hackmd.io/Z7IGJx-JT_WGPYS7Kqxfbg\">proposed agenda</a></li>\n</ul>",
        "id": 215723513,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604588619
    },
    {
        "content": "<ul>\n<li>\"Hardware performance counter support (via <code>rdpmc</code>)\" MVP completed<ul>\n<li>write-up: <a href=\"https://hackmd.io/sH315lO2RuicY-SEt7ynGA?view\">https://hackmd.io/sH315lO2RuicY-SEt7ynGA?view</a></li>\n<li><code>measureme</code> PR: <a href=\"https://github.com/rust-lang/measureme/pull/143\">https://github.com/rust-lang/measureme/pull/143</a></li>\n</ul>\n</li>\n</ul>",
        "id": 215723628,
        "sender_full_name": "eddyb",
        "timestamp": 1604588649
    },
    {
        "content": "<ul>\n<li>New MCPs (take a look, see if you like them!)<ul>\n<li>\"Accept RFC 2951 \"Linking modifiers for native libraries\"\" <a href=\"https://github.com/rust-lang/compiler-team/issues/356\">compiler-team#356</a></li>\n<li>\"inherit stable annotations in enum variants and field items\" <a href=\"https://github.com/rust-lang/compiler-team/issues/370\">compiler-team#370</a></li>\n<li>\"MCP: More Cranelift-friendly portable SIMD intrinsics\" <a href=\"https://github.com/rust-lang/compiler-team/issues/381\">compiler-team#381</a></li>\n</ul>\n</li>\n</ul>",
        "id": 215723643,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604588655
    },
    {
        "content": "<ul>\n<li>Old MCPs (not seconded, take a look)<ul>\n<li>\"Decentralize queries\" <a href=\"https://github.com/rust-lang/compiler-team/issues/277\">compiler-team#277</a></li>\n<li>\"Require users to confirm they know RUSTC_BOOTSTRAP is unsupported before using it\" <a href=\"https://github.com/rust-lang/compiler-team/issues/350\">compiler-team#350</a></li>\n<li>\"MCP: move compiler/ crates to stable Rust\" <a href=\"https://github.com/rust-lang/compiler-team/issues/358\">compiler-team#358</a></li>\n<li>\"Add 32-bit and 64-bit stderr/stdout files for ui tests\" <a href=\"https://github.com/rust-lang/compiler-team/issues/365\">compiler-team#365</a></li>\n<li>\"Add a <code>NOOP_METHOD_CALL</code> lint for methods which should never be directly called\" <a href=\"https://github.com/rust-lang/compiler-team/issues/375\">compiler-team#375</a></li>\n</ul>\n</li>\n</ul>",
        "id": 215723677,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604588671
    },
    {
        "content": "<ul>\n<li>Pending FCP requests (check your boxes!)<ul>\n<li>\"Drop official support for Windows XP\" <a href=\"https://github.com/rust-lang/compiler-team/issues/378\">compiler-team#378</a></li>\n</ul>\n</li>\n</ul>",
        "id": 215723697,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604588682
    },
    {
        "content": "<ul>\n<li>Things in FCP (make sure you're good with it)<ul>\n<li>\"Move graphviz code out of the compiler into external crate\" <a href=\"https://github.com/rust-lang/compiler-team/issues/380\">compiler-team#380</a></li>\n</ul>\n</li>\n</ul>",
        "id": 215723716,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604588691
    },
    {
        "content": "<blockquote>\n<p>\"inherit stable annotations in enum variants and field items\" <a href=\"https://github.com/rust-lang/compiler-team/issues/370\">compiler-team#370</a></p>\n</blockquote>",
        "id": 215723718,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604588692
    },
    {
        "content": "<p>FCP completed here and I plan to close it as accepted</p>",
        "id": 215723735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604588698
    },
    {
        "content": "<ul>\n<li>Accepted MCPs<ul>\n<li>\"TypeVisitor: use ops::ControlFlow instead of bool\" <a href=\"https://github.com/rust-lang/compiler-team/issues/374\">compiler-team#374</a></li>\n</ul>\n</li>\n</ul>",
        "id": 215723768,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604588711
    },
    {
        "content": "<ul>\n<li>Finalized FCPs (disposition merge)<ul>\n<li>\"Accept RFC 2951 \"Linking modifiers for native libraries\"\" <a href=\"https://github.com/rust-lang/compiler-team/issues/356\">compiler-team#356</a></li>\n<li>\"inherit stable annotations in enum variants and field items\" <a href=\"https://github.com/rust-lang/compiler-team/issues/370\">compiler-team#370</a></li>\n<li>\"Allow making <code>RUSTC_BOOTSTRAP</code> conditional on the crate name\" <a href=\"https://github.com/rust-lang/rust/pull/77802\">rust#77802</a></li>\n<li>[T-lang T-libs] \"Tracking Issue for raw_ref_macros\" <a href=\"https://github.com/rust-lang/rust/issues/73394\">rust#73394</a></li>\n<li>[T-libs] \"Implement TryFrom between NonZero types.\" <a href=\"https://github.com/rust-lang/rust/pull/77339\">rust#77339</a></li>\n<li>[T-libs] \"Define <code>fs::hard_link</code> to not follow symlinks.\" <a href=\"https://github.com/rust-lang/rust/pull/78026\">rust#78026</a></li>\n<li>[T-libs] \"Check for exhaustion in RangeInclusive::contains and slicing\" <a href=\"https://github.com/rust-lang/rust/pull/78109\">rust#78109</a></li>\n</ul>\n</li>\n</ul>",
        "id": 215723816,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604588735
    },
    {
        "content": "<p>Also, this is more a question than an announcement</p>",
        "id": 215723933,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604588778
    },
    {
        "content": "<p>A colleague at my work wanted to know, for planning purposes, whether any substantial changes to MIR were anticipated in next 90 days or so</p>",
        "id": 215723990,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604588806
    },
    {
        "content": "<p>I of course reviewed the MCP list (and show them how they could do the same)</p>",
        "id": 215724014,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604588821
    },
    {
        "content": "<p>and thus found \"Add StatementKind::Intrinsic to MIR\" <a href=\"https://github.com/rust-lang/compiler-team/issues/348\">compiler-team#348</a></p>",
        "id": 215724117,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604588876
    },
    {
        "content": "<p>but I wanted to ask here if anyone had anything else they were thinking of proposing. After all, 90 days is a long time ...</p>",
        "id": 215724214,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604588917
    },
    {
        "content": "<p>feel free to ping me privately</p>",
        "id": 215724248,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604588938
    },
    {
        "content": "<h1>WG checkins</h1>\n<p>@<em>WG-polymorphization</em> checkin by <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span>:</p>\n<blockquote>\n<p>Not a lot has happened with the polymorphization working group, everyone involved has been focusing on other work recently.</p>\n</blockquote>\n<p><span class=\"user-group-mention\" data-user-group-id=\"1184\">@WG-polonius</span> checkin by <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> and <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> </p>\n<blockquote>\n<p>Nothing to report at this time</p>\n</blockquote>",
        "id": 215724285,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604588954
    },
    {
        "content": "<h3>Unilateral beta approvals</h3>\n<ul>\n<li>\"Add delay_span_bug to no longer ICE\" <a href=\"https://github.com/rust-lang/rust/pull/78645\">rust#78645</a><ul>\n<li>Opened by <a href=\"https://github.com/JulianKnodt\">JulianKnodt</a></li>\n<li>Assigned to and r+ from <span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> </li>\n<li>Fixes <a href=\"https://github.com/rust-lang/rust/issues/78622\">#78622</a></li>\n<li>pnkfelix beta-approved shortly before this meeting.</li>\n</ul>\n</li>\n</ul>",
        "id": 215724307,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604588963
    },
    {
        "content": "<p>okay next up</p>",
        "id": 215724382,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604589002
    },
    {
        "content": "<h2>Beta-nominations</h2>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Abeta-nominated+-label%3Abeta-accepted+label%3AT-compiler\">T-compiler</a></p>",
        "id": 215724449,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604589019
    },
    {
        "content": "<ul>\n<li>\"revert <a href=\"https://github.com/rust-lang/rust/issues/75443\">#75443</a>, update mir validator\" <a href=\"https://github.com/rust-lang/rust/pull/78410\">rust#78410</a><ul>\n<li>opened by <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> </li>\n<li>assigned to <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> and r+'ed, left <a href=\"https://github.com/rust-lang/rust/pull/78410#pullrequestreview-521756705\">some comments</a></li>\n<li><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> mentions that this PR could result in a breaking change due to PR <a href=\"https://github.com/rust-lang/rust/pull/75443\">rust#75443</a> allowing to compile code <a href=\"https://github.com/rust-lang/rust/pull/78410#issuecomment-717814133\">such as this</a></li>\n<li>Link to <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/generator.20upvars/near/214617274\">Zulip discussion</a></li>\n</ul>\n</li>\n</ul>",
        "id": 215724464,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604589027
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> you've looked somewhat deeply at this  now. What's your intuition about whether it is too risky for beta-backport?</p>",
        "id": 215724546,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604589059
    },
    {
        "content": "<p>hmm</p>",
        "id": 215724600,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604589089
    },
    {
        "content": "<p>(note that the example provided by <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> in the link above is not expressible on stable)</p>",
        "id": 215724642,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604589113
    },
    {
        "content": "<p>My hunch is that it is not a big issue</p>",
        "id": 215724654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604589119
    },
    {
        "content": "<p>As compared to the <em>known</em> problem of async code taking forever to compile</p>",
        "id": 215724719,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604589133
    },
    {
        "content": "<p>the compile time regression is not a big issue?</p>",
        "id": 215724729,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604589135
    },
    {
        "content": "<p>oh oh</p>",
        "id": 215724734,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604589137
    },
    {
        "content": "<p>the <strong>risk</strong> is not a big issue</p>",
        "id": 215724748,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604589146
    },
    {
        "content": "<p>okay</p>",
        "id": 215724771,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604589159
    },
    {
        "content": "<p>oh shoot I forgot to add the emojis</p>",
        "id": 215724809,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604589173
    },
    {
        "content": "<p>/me is busily counting ballots as a side job over here</p>",
        "id": 215724932,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604589228
    },
    {
        "content": "<p>emojis are added now</p>",
        "id": 215725009,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604589246
    },
    {
        "content": "<p>I personally am inclined to go ahead and beta-backport</p>",
        "id": 215725023,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604589255
    },
    {
        "content": "<p>assuming it lands on nightly soon</p>",
        "id": 215725056,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604589274
    },
    {
        "content": "<p>I guess I better finish reviewing</p>",
        "id": 215725062,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604589276
    },
    {
        "content": "<p>(I would be more worried about beta-backport approval if it doesn't get into nightly until late in the cycle)</p>",
        "id": 215725122,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604589303
    },
    {
        "content": "<p>okay lets say beta approved then</p>",
        "id": 215725286,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604589374
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-11-05.20.2354818/near/215724214\">said</a>:</p>\n<blockquote>\n<p>but I wanted to ask here if anyone had anything else they were thinking of proposing. After all, 90 days is a long time ...</p>\n</blockquote>\n<p>there are some changes around how constants are handled may happen in the next few months</p>",
        "id": 215725292,
        "sender_full_name": "oli",
        "timestamp": 1604589375
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Abeta-nominated+-label%3Abeta-accepted+label%3Alibs-impl\">libs-impl</a></p>\n<ul>\n<li>No beta nominations for <code>libs-impl</code> this time.</li>\n</ul>",
        "id": 215725336,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604589394
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Abeta-nominated+-label%3Abeta-accepted+label%3AT-rustdoc\">T-rustdoc</a></p>\n<ul>\n<li>No beta nominations for <code>T-rustdoc</code> this time.</li>\n</ul>",
        "id": 215725400,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604589425
    },
    {
        "content": "<h2>Stable-nominations</h2>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Astable-nominated+-label%3Astable-accepted+label%3AT-compiler\">T-compiler</a></p>\n<ul>\n<li>No stable nominations for <code>T-compiler</code> this time.</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Astable-nominated+-label%3Astable-accepted+label%3Alibs-impl\">libs-impl</a></p>\n<ul>\n<li>No stable nominations for <code>libs-impl</code> this time.</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Astable-nominated+-label%3Astable-accepted+label%3AT-rustdoc\">T-rustdoc</a></p>\n<ul>\n<li>No stable nominations for <code>T-rustdoc</code> this time.</li>\n</ul>",
        "id": 215725427,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604589438
    },
    {
        "content": "<h2>PRs S-waiting-on-team</h2>\n<p><a href=\"https://github.com/rust-lang/rust/pulls?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AS-waiting-on-team+label%3AT-compiler\">T-compiler</a></p>\n<ul>\n<li>No PRs waiting on <code>T-compiler</code> this time.</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/pulls?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AS-waiting-on-team+label%3Alibs-impl\">libs-impl</a></p>\n<ul>\n<li>No PRs waiting on <code>libs-impl</code> this time.</li>\n</ul>",
        "id": 215725438,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604589446
    },
    {
        "content": "<h2>Issues of Note</h2>\n<h3>Short Summary</h3>\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AT-compiler+label%3AP-critical+\">2 T-compiler P-critical issues</a><ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AT-compiler+label%3AP-critical+no%3Aassignee\">2 of those are unassigned</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AT-compiler+label%3AP-high+\">46 T-compiler P-high issues</a><ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AT-compiler+label%3AP-high+no%3Aassignee\">30 of those are unassigned</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/rust-lang/rust/labels/regression-from-stable-to-beta\">1 P-critical, 2 P-high, 0 P-medium, 0 P-low regression-from-stable-to-beta</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/labels/regression-from-stable-to-nightly\">0 P-critical, 1 P-high, 5 P-medium, 2 P-low regression-from-stable-to-nightly</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/labels/regression-from-stable-to-stable\">2 P-critical, 21 P-high, 67 P-medium, 5 P-low regression-from-stable-to-stable</a></li>\n</ul>",
        "id": 215725455,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604589455
    },
    {
        "content": "<h3>P-critical</h3>\n<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AP-critical+label%3AT-compiler\">T-compiler</a></p>",
        "id": 215725472,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604589464
    },
    {
        "content": "<ul>\n<li>\"Increasingly slow compilation as more levels of <code>async</code> are added in Rust 1.46\" <a href=\"https://github.com/rust-lang/rust/issues/75992\">rust#75992</a><ul>\n<li>Opened by <span class=\"user-mention\" data-user-id=\"263031\">@Nicholas Bishop</span></li>\n<li>Unassigned, not easy to reproduce</li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/75992#issuecomment-683270098\">@kellerkindt</a> and <a href=\"https://github.com/rust-lang/rust/issues/75992#issuecomment-683274620\">@algesten</a> did some bisecting </li>\n<li><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> suggests instead of reverting important patches a possible way forward could be implementing some caching like in <a href=\"https://github.com/rust-lang/rust/issues/75992#issuecomment-713100226\">PR #76928</a></li>\n<li>smallest <a href=\"https://github.com/rust-lang/rust/issues/75992#issuecomment-715557750\">repro so far</a> from <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> and <a href=\"https://github.com/rust-lang/rust/issues/75992#issuecomment-716740111\">its stacktrace</a></li>\n<li><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> confirms a compile-time regression for a test case to be solved by PR <a href=\"https://github.com/rust-lang/rust/pull/78410\">rust#78410</a></li>\n</ul>\n</li>\n</ul>",
        "id": 215725502,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604589479
    },
    {
        "content": "<p>(we were just discussing this in the beta-backport section. It seems like its under control, except that we might still want a better MCVE to add to our regression test suite.)</p>",
        "id": 215725622,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604589520
    },
    {
        "content": "<p>(but constructing an MCVE for test suite is not P-critical  work item.)</p>",
        "id": 215725683,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604589556
    },
    {
        "content": "<ul>\n<li>\"Upgrade to LLVM11 caused a codegen regression on Windows\" <a href=\"https://github.com/rust-lang/rust/issues/78283\">rust#78283</a><ul>\n<li>opened by <span class=\"user-mention\" data-user-id=\"133260\">@Jeff Muizelaar</span> and unassigned</li>\n<li>Firefox code that used to work on Rust 1.46 started to fail after upgrading to LLVM 11</li>\n<li>Affects only MSVC</li>\n<li><span class=\"user-mention\" data-user-id=\"133224\">@Nikita Popov</span> suggests could be related to <a href=\"https://github.com/rust-lang/rust/issues/74498\">rust#74498</a></li>\n<li><span class=\"user-mention\" data-user-id=\"133260\">@Jeff Muizelaar</span> suggests to be related to LLVM bug <a href=\"https://bugs.llvm.org/show_bug.cgi?id=46943\">#46943</a>, provides a <a href=\"https://github.com/rust-lang/rust/issues/78283#issuecomment-720156273\">minimal repro</a></li>\n</ul>\n</li>\n</ul>",
        "id": 215725708,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604589567
    },
    {
        "content": "<p>You meant for the perf suite, right?</p>",
        "id": 215725758,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1604589590
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119031\">Esteban Küber</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-11-05.20.2354818/near/215725758\">said</a>:</p>\n<blockquote>\n<p>You meant for the perf suite, right?</p>\n</blockquote>\n<p>... I .... didn't ... but that ... might make more sense</p>",
        "id": 215725878,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604589630
    },
    {
        "content": "<p>Exponential blowup stuff might be appropriate for the normal test suite</p>",
        "id": 215725923,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604589653
    },
    {
        "content": "<p>i dunno</p>",
        "id": 215725930,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604589656
    },
    {
        "content": "<p>I'll admit, its pretty frustrating as a developer when such things fail</p>",
        "id": 215725973,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604589671
    },
    {
        "content": "<p>but ... also better to have that feedback locally, right?</p>",
        "id": 215725999,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604589682
    },
    {
        "content": "<p>in any case</p>",
        "id": 215726030,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604589695
    },
    {
        "content": "<p>Don't think we pay as much attention to slowing tests. We might want to track total time of ui tests in the perf page and get both <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 215726043,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1604589702
    },
    {
        "content": "<p>that's a nuanced decision that we need not make here</p>",
        "id": 215726049,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604589704
    },
    {
        "content": "<p>Didn't mean to derail</p>",
        "id": 215726084,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1604589717
    },
    {
        "content": "<p>no it was a legit Q</p>",
        "id": 215726187,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604589751
    },
    {
        "content": "<p><em>but</em></p>",
        "id": 215726201,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604589759
    },
    {
        "content": "<p>back to <a href=\"https://github.com/rust-lang/rust/issues/78283\">rust#78283</a></p>",
        "id": 215726206,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604589763
    },
    {
        "content": "<p>good old LoopStrengthReduction bug</p>",
        "id": 215726227,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604589773
    },
    {
        "content": "<p>I can safely say that there is no way I have time to investigate this for next month</p>",
        "id": 215726253,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604589786
    },
    {
        "content": "<blockquote>\n<p>Yeah, it certainly looks related. <a href=\"https://bugs.llvm.org/show_bug.cgi?id=46943\">https://bugs.llvm.org/show_bug.cgi?id=46943</a> is the upstream bug.</p>\n</blockquote>",
        "id": 215726434,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604589846
    },
    {
        "content": "<p>(quoting <span class=\"user-mention\" data-user-id=\"133260\">@Jeff Muizelaar</span>)</p>",
        "id": 215726447,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604589852
    },
    {
        "content": "<p>So my question is: Is it worth trying to get someone else (e.g. from our wg-llvm) to try to fix the LoopStrengthReduction bug</p>",
        "id": 215726449,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604589854
    },
    {
        "content": "<p>or do we just wait and hope the main LLVM devs do it (or get some other contrib for it from outside)</p>",
        "id": 215726522,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604589885
    },
    {
        "content": "<p>seems like the latter is more likely</p>",
        "id": 215726608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604589919
    },
    {
        "content": "<p>there was a recent comment on the LLVM bug</p>",
        "id": 215726633,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604589934
    },
    {
        "content": "<p>that makes it <em>sound</em> like  the fix may be simple</p>",
        "id": 215726665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604589947
    },
    {
        "content": "<p>but I don't know anything about this code etc</p>",
        "id": 215726691,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604589959
    },
    {
        "content": "<p>right. I tried to figure out the code in a JIT fashion</p>",
        "id": 215726767,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604589973
    },
    {
        "content": "<p>ah I see that the code is <em>panicking</em></p>",
        "id": 215726787,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604589981
    },
    {
        "content": "<p>I forgot that, I was thinking \"oh it's just a bit slower\"</p>",
        "id": 215726809,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604589990
    },
    {
        "content": "<p>yeah, this is higher piorirty</p>",
        "id": 215726846,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604590005
    },
    {
        "content": "<p>yeah this <em>is</em> kinda bad</p>",
        "id": 215726885,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604590020
    },
    {
        "content": "<p>maybe I can reach out to the person who made the suggestion</p>",
        "id": 215726922,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604590039
    },
    {
        "content": "<p>and see if they can give me guidance</p>",
        "id": 215726937,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604590047
    },
    {
        "content": "<p>so that I can do a more directed edit of the code, rather than spending a lot of time trying to understand it overall</p>",
        "id": 215726989,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604590064
    },
    {
        "content": "<p>I'll self-assign</p>",
        "id": 215727064,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604590084
    },
    {
        "content": "<p>next</p>",
        "id": 215727118,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604590109
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AP-critical+label%3Alibs-impl\">libs-impl</a></p>\n<ul>\n<li>\"regression: could not fully normalize type\" <a href=\"https://github.com/rust-lang/rust/issues/78139\">rust#78139</a><ul>\n<li>Opened and assigned to <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> </li>\n<li>Regression seems to be in PR <a href=\"https://github.com/rust-lang/rust/pull/70793\">rust#70793</a> and related to <a href=\"https://github.com/rust-lang/rust/issues/54114\">rust#54114</a></li>\n</ul>\n</li>\n</ul>",
        "id": 215727132,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604590115
    },
    {
        "content": "<p>I have not found time for the backport/revert yet, hopefully today/tomorrow.</p>",
        "id": 215727162,
        "sender_full_name": "simulacrum",
        "timestamp": 1604590133
    },
    {
        "content": "<p>I think it's on track though</p>",
        "id": 215727197,
        "sender_full_name": "simulacrum",
        "timestamp": 1604590146
    },
    {
        "content": "<p>great, thanks!</p>",
        "id": 215727217,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604590154
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AP-critical+label%3AT-rustdoc\">T-rustdoc</a></p>\n<ul>\n<li>No <code>P-critical</code> issues for <code>T-rustdoc</code> this time.</li>\n</ul>",
        "id": 215727238,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604590166
    },
    {
        "content": "<h3>P-high regressions</h3>\n<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3Aregression-from-stable-to-beta+label%3AP-high\">P-high beta regressions</a></p>\n<ul>\n<li>\"Build hang on Linux with nightly and beta toolchains\" <a href=\"https://github.com/rust-lang/rust/issues/76980\">rust#76980</a><ul>\n<li>Unassigned</li>\n<li>Build hangs on beta</li>\n<li><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> bisected it to <a href=\"https://github.com/rust-lang/rust/pull/73526\">rust#73526</a></li>\n<li><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> <a href=\"https://github.com/rust-lang/rust/issues/76980#issuecomment-695805807\">is not aware of any LLVM 11 issue like that </a></li>\n<li>A <a href=\"https://github.com/rust-lang/rust/pull/77642\">possible workaround was added</a> by <span class=\"user-mention\" data-user-id=\"121055\">@Pietro Albini</span> but it doesn't seem to be confirmation if works or not.</li>\n<li><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> believes the real issue stems in PR <a href=\"https://github.com/rust-lang/rust/pull/74163\">rustc#74163</a></li>\n<li>There's a long technical analysis in the <a href=\"https://github.com/rust-lang/rust/issues/76980#issuecomment-705800997\">last comment</a></li>\n<li><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> asked <code>jethrogb</code> and <span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> if they could open a PR about it</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3Aregression-from-stable-to-nightly+label%3AP-high+no%3Aassignee\">Unassigned P-high nightly regressions</a></p>\n<ul>\n<li>No unassigned <code>P-high</code> nightly regressions this time.</li>\n</ul>",
        "id": 215727269,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604590177
    },
    {
        "content": "<p>We've got regression day tomorrow</p>",
        "id": 215727360,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604590204
    },
    {
        "content": "<p>so I won't spend time discussing the above</p>",
        "id": 215727400,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604590217
    },
    {
        "content": "<p>Given <a href=\"https://github.com/rust-lang/rust/pull/78148\">https://github.com/rust-lang/rust/pull/78148</a>, that is not a beta regression currently, let me retag</p>",
        "id": 215727419,
        "sender_full_name": "simulacrum",
        "timestamp": 1604590227
    },
    {
        "content": "<h2>Performance logs</h2>\n<p>Triage done by <strong>@simulacrum</strong>.</p>\n<p>A number of improvements on various benchmarks. The most notable news this week in compiler performance is the progress on instruction metric collection on a per-query level; see<br>\n<a href=\"https://github.com/rust-lang/measureme/pull/143\">measureme#143</a> for the latest.</p>\n<p>Otherwise, this week was an excellent one for performance (though mostly on stress tests rather than commonly seen code).</p>\n<p>Revision range: <a href=\"https://perf.rust-lang.org/?start=824f900a96d752da2d882863c65f9736e5f2b347&amp;end=5cdf5b882da9e8b7c73b5cadeb7745cb68f6ff63&amp;absolute=false&amp;stat=instructions%3Au\">824f900a96d752da2d882863c65f9736e5f2b347..5cdf5b882da9e8b7c73b5cadeb7745cb68f6ff63</a></p>\n<p>0 Regressions, 5 Improvements, 0 Mixed</p>",
        "id": 215727489,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604590253
    },
    {
        "content": "<h3>Improvements</h3>\n<p><a href=\"https://github.com/rust-lang/rust/issues/78323\">#78323</a></p>\n<ul>\n<li>Slight improvement in <a href=\"https://perf.rust-lang.org/compare.html?start=db241bb0c8d257e13c1560f6250e49879477039e&amp;end=2eb4fc800aaf5006f89af3af591e2aa34f469d81&amp;stat=instructions:u\">instruction counts</a> (up to -1.3% on <code>incr-unchanged</code> builds of <code>packed-simd-check</code>)</li>\n<li>Possibly within noise; unclear.</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/issues/78508\">#78508</a></p>\n<ul>\n<li>Moderate improvement in <a href=\"https://perf.rust-lang.org/compare.html?start=a53fb30e3bf2655b0563da6d561c23cda5f3ec11&amp;end=6bdae9edd0cc099daa6038bca469dc09b6fc078a&amp;stat=instructions:u\">instruction counts</a> (up to -2.0% on <code>incr-unchanged</code> builds of <code>packed-simd-check</code>)</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/issues/78432\">#78432</a></p>\n<ul>\n<li>Large improvement in <a href=\"https://perf.rust-lang.org/compare.html?start=c792f03379617efa7deb6ab8c20709c45e81670a&amp;end=0d33ab7af4aebe786410b4c10367eb6ddf13af0b&amp;stat=instructions:u\">instruction counts</a> (up to -5.7% on <code>full</code> builds of <code>match-stress-enum-check</code>)</li>\n<li>An unexpected improvement for a seemingly bugfix PR; would be good to verify<br>\n  this is not an unintentional behavior change (nag left).</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/issues/78553\">#78553</a></p>\n<ul>\n<li>Very large improvement in <a href=\"https://perf.rust-lang.org/compare.html?start=e8cbaf2ae7fc5c564cacedbe55664797dc62d920&amp;end=1899c489d4c30b2640d30b77ac04f0a548834d81&amp;stat=instructions:u\">instruction counts</a> (up to -10.1% on <code>full</code> builds of <code>match-stress-enum-check</code>)</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/issues/78448\">#78448</a></p>\n<ul>\n<li>Very large improvement in <a href=\"https://perf.rust-lang.org/compare.html?start=4c0c5e099a3b1f1c6ad53115189c2710495588b3&amp;end=7b5a9e9cd27f01311b5e19cefa1fb574d086d3da&amp;stat=instructions:u\">instruction counts</a> (up to -95.4% on <code>full</code> builds of <code>externs-debug</code>)</li>\n<li>Notable case of adding a new benchmark to perf; this is much appreciated and<br>\n  illustrates that perf does not yet have full coverage of Rust code (though<br>\n  this is not really expected either, though is always a goal).</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/issues/78430\">#78430</a></p>\n<ul>\n<li>Very large improvement in <a href=\"https://perf.rust-lang.org/compare.html?start=31ee872db5aae4750e3da1ca4ed1523c4356947f&amp;end=f9187adaef2005b903f666bf323ac675cadf8407&amp;stat=instructions:u\">instruction counts</a> (up to -23.6% on <code>incr-patched: println</code> builds of <code>unicode_normalization-check</code>)</li>\n<li>Fairly large refactor to the match checking infrastructure, with a<br>\n  correspondigly large performance improvement. There does appear to be a slight<br>\n  regression on <a href=\"https://github.com/rust-lang/rust/issues/58319\">#58319</a>, but this is in the \"Improvements\" category since it seem<br>\n  categorically a win.</li>\n</ul>",
        "id": 215727593,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604590298
    },
    {
        "content": "<h3>Nags requiring follow up</h3>\n<p>Compiler team attention requested:</p>\n<ul>\n<li>&lt;<a href=\"https://github.com/rust-lang/rust/pull/78432#issuecomment-721388323\">https://github.com/rust-lang/rust/pull/78432#issuecomment-721388323</a>&gt;</li>\n</ul>",
        "id": 215727639,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604590319
    },
    {
        "content": "<p>so</p>",
        "id": 215727850,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604590403
    },
    {
        "content": "<p>how much energy to invest in that follow-up :)</p>",
        "id": 215727859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604590410
    },
    {
        "content": "<p>So the question here is: Why did we get a significant improvement from  PR <a href=\"https://github.com/rust-lang/rust/issues/78432\">#78432</a></p>",
        "id": 215727860,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604590410
    },
    {
        "content": "<p>yeah there is no obvious reason</p>",
        "id": 215727980,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604590447
    },
    {
        "content": "<p>My main concern to be clear is a subtle behavior change or something</p>",
        "id": 215728036,
        "sender_full_name": "simulacrum",
        "timestamp": 1604590470
    },
    {
        "content": "<p>is there something in the body of <code>fn upvars_ty</code> that is doing anything interesting</p>",
        "id": 215728051,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604590475
    },
    {
        "content": "<p>but I don't know -- maybe this is just like cache effects or a codegen unit changed making LLVM much happier or something</p>",
        "id": 215728098,
        "sender_full_name": "simulacrum",
        "timestamp": 1604590498
    },
    {
        "content": "<p>if there is a change of behavior, I'm not sure what it is</p>",
        "id": 215728183,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604590531
    },
    {
        "content": "<p>I think this code only changed the \"non-ICE\" path</p>",
        "id": 215728199,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604590538
    },
    {
        "content": "<p>(actually, re-reading it, there might be some slight simplifications... oh well...)</p>",
        "id": 215728256,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604590562
    },
    {
        "content": "<p>all of the perf improvement is in <code>check_match</code></p>",
        "id": 215728311,
        "sender_full_name": "oli",
        "timestamp": 1604590571
    },
    {
        "content": "<p>there's a consistent replacement of <code>.tuple_fields()</code></p>",
        "id": 215728314,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604590574
    },
    {
        "content": "<p>with <code>.into_iter().flatten()</code> ...</p>",
        "id": 215728334,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604590583
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-11-05.20.2354818/near/215728314\">said</a>:</p>\n<blockquote>\n<p>there's a consistent replacement of <code>.tuple_fields()</code></p>\n</blockquote>\n<p>it still calls tuple-fields</p>",
        "id": 215728366,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604590596
    },
    {
        "content": "<p>in the case where the type is a tuple</p>",
        "id": 215728383,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604590601
    },
    {
        "content": "<p>the <code>into_iter().flatten()</code> is dealing with the <code>Option</code></p>",
        "id": 215728406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604590610
    },
    {
        "content": "<p>ah</p>",
        "id": 215728421,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604590616
    },
    {
        "content": "<p>the change here was that, in the case that the type is <code>Ty::Err</code>, we return an empty iterator</p>",
        "id": 215728435,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604590623
    },
    {
        "content": "<p>(we had to do the <code>Option&lt;(iterator)&gt;.flatten()</code> thing because we have to return a single value for <code>-&gt; impl Iterator</code> to work)</p>",
        "id": 215728488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604590647
    },
    {
        "content": "<p>what did we used to do instead?</p>",
        "id": 215728500,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604590652
    },
    {
        "content": "<p>ICE</p>",
        "id": 215728512,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604590655
    },
    {
        "content": "<p>oh oh</p>",
        "id": 215728517,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604590658
    },
    {
        "content": "<p>interesting</p>",
        "id": 215728531,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604590663
    },
    {
        "content": "<p>okay well in that case I'm willing to chalk this up to instruction-cache happiness or something</p>",
        "id": 215728641,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604590696
    },
    {
        "content": "<p>of course we <em>could</em> try to verify such claims</p>",
        "id": 215728699,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604590718
    },
    {
        "content": "<p>I am comfortable with that</p>",
        "id": 215728704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604590719
    },
    {
        "content": "<p>but I don't think its worth the effort</p>",
        "id": 215728724,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604590727
    },
    {
        "content": "<p>thank you for clarifying <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> what your concern was</p>",
        "id": 215728755,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604590739
    },
    {
        "content": "<p>If we're confident this is not a behavior change or something, then I don't think we need to spend more time on it.</p>",
        "id": 215728757,
        "sender_full_name": "simulacrum",
        "timestamp": 1604590739
    },
    {
        "content": "<p>OMG we are at nominated issues</p>",
        "id": 215728809,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604590763
    },
    {
        "content": "<p>with like 20 minutes left</p>",
        "id": 215728819,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604590768
    },
    {
        "content": "<p>we may actually ... discuss something ...</p>",
        "id": 215728831,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604590773
    },
    {
        "content": "<h2>Nominated Issues</h2>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3AI-nominated+label%3AT-compiler\">T-compiler</a></p>",
        "id": 215728849,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604590781
    },
    {
        "content": "<ul>\n<li>Confusing type error due to strange inferred type for a closure argument <a href=\"https://github.com/rust-lang/rust/issues/41078\">rustc#41078</a><ul>\n<li>Longstsanding issue since 2017, has generated many duplicates since then</li>\n<li>Seems to impact more from an usability/ergonomics point of view since there are workarounds, example <a href=\"https://github.com/rust-lang/rust/issues/41078#issuecomment-298180037\">this comment</a> and this <a href=\"https://stackoverflow.com/questions/58773989\">Stack Overflow</a> answer</li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/41078#issuecomment-293646723\">First comment</a> by <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> </li>\n<li>More <a href=\"https://github.com/rust-lang/rust/issues/41078#issuecomment-358385901\">recent comment</a> from <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/41078#issuecomment-552064766\">Another explaination</a> from <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> </li>\n<li>nightly from June shows a <a href=\"https://github.com/rust-lang/rust/issues/41078#issuecomment-649465827\">slightly different error</a></li>\n</ul>\n</li>\n</ul>",
        "id": 215728876,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604590795
    },
    {
        "content": "<p>so</p>",
        "id": 215729122,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604590894
    },
    {
        "content": "<p>I myself just this morning</p>",
        "id": 215729133,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604590900
    },
    {
        "content": "<p>sigh</p>",
        "id": 215729151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604590907
    },
    {
        "content": "<p>forgot that higher-ranked regions get inferred in certain circumstances</p>",
        "id": 215729159,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604590911
    },
    {
        "content": "<p>I wonder if we could do a better job in our diagnostics</p>",
        "id": 215729190,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604590921
    },
    {
        "content": "<p>of informing the user when this is happening?</p>",
        "id": 215729250,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604590930
    },
    {
        "content": "<p>this is probably not a single issue</p>",
        "id": 215729263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604590934
    },
    {
        "content": "<p>but for sure our diagnostics here could be improved</p>",
        "id": 215729353,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604590963
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0308]: mismatched types\n --&gt; src/a.rs:3:29\n  |\n3 |     vec![1,2,3].into_iter().find(suitable);\n  |                             ^^^^ one type is more general than the other\n  |\n  = note: expected type `std::ops::FnOnce&lt;(&amp;i32,)&gt;`\n             found type `std::ops::FnOnce&lt;(&amp;i32,)&gt;`\n</code></pre></div>",
        "id": 215729373,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604590970
    },
    {
        "content": "<p>obviosuly the expected/found should not print the same</p>",
        "id": 215729390,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604590975
    },
    {
        "content": "<p>there is some logic that exists (but I guess is not triggering)</p>",
        "id": 215729409,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604590983
    },
    {
        "content": "<p>I'd call it \"deduction\" because it's a very ad-hoc rule that works differently from our inference, and we actually never infer higher-ranked lifetimes \"into\" binders</p>",
        "id": 215729411,
        "sender_full_name": "eddyb",
        "timestamp": 1604590984
    },
    {
        "content": "<p>but that's me remembering I was discussing this recently to some people hitting it</p>",
        "id": 215729438,
        "sender_full_name": "eddyb",
        "timestamp": 1604590995
    },
    {
        "content": "<p>yeah \"infer\" is wrong word</p>",
        "id": 215729456,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604591003
    },
    {
        "content": "<p>to try and say \"this accepts an arugment with <em>some</em> lifetime\"</p>",
        "id": 215729490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604591012
    },
    {
        "content": "<p>versus \"this accepts an argument with <em>any</em> lifetime\"</p>",
        "id": 215729501,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604591017
    },
    {
        "content": "<p>I think we do that for impls maybe but not for types?</p>",
        "id": 215729509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604591022
    },
    {
        "content": "<p>anyway, I guess that's the easiest <em>first</em> step</p>",
        "id": 215729530,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604591030
    },
    {
        "content": "<p>I think there are cases where we could improve the <em>deduction</em></p>",
        "id": 215729539,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604591036
    },
    {
        "content": "<p>in general I suggest writing closures <em>only</em> inline as arguments to functions</p>",
        "id": 215729591,
        "sender_full_name": "eddyb",
        "timestamp": 1604591045
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> us sinkholing lifetime names is a bit of a problem, heh</p>",
        "id": 215729595,
        "sender_full_name": "eddyb",
        "timestamp": 1604591046
    },
    {
        "content": "<p>it can happen waay too easy</p>",
        "id": 215729614,
        "sender_full_name": "eddyb",
        "timestamp": 1604591056
    },
    {
        "content": "<p>\"sinkholing\"?</p>",
        "id": 215729628,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604591062
    },
    {
        "content": "<p>not printing?</p>",
        "id": 215729631,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604591064
    },
    {
        "content": "<p>yeah it's a really hard problem</p>",
        "id": 215729651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604591071
    },
    {
        "content": "<p>(also ugh I think I'm experiencing packet loss/delay of almost a minute)</p>",
        "id": 215729678,
        "sender_full_name": "eddyb",
        "timestamp": 1604591082
    },
    {
        "content": "<p>cue the perennial topic of \"how to refactor the code that prints out types for diagnostics\"</p>",
        "id": 215729691,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604591086
    },
    {
        "content": "<p>oh no <em>not that</em></p>",
        "id": 215729706,
        "sender_full_name": "eddyb",
        "timestamp": 1604591095
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-11-05.20.2354818/near/215729539\">said</a>:</p>\n<blockquote>\n<p>I think there are cases where we could improve the <em>deduction</em></p>\n</blockquote>\n<p>does this mean \"change the static semantics\" (e.g. to not put <code>for&lt;'a&gt;</code> in on some cases where we do today), assuming it is strictly more liberal in what we accept?</p>",
        "id": 215729741,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604591108
    },
    {
        "content": "<p>you want <em>more</em> <code>for&lt;'a&gt;</code>, not <em>less</em>, no?</p>",
        "id": 215729833,
        "sender_full_name": "eddyb",
        "timestamp": 1604591146
    },
    {
        "content": "<p>what <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> I suspect but yes</p>",
        "id": 215729851,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604591156
    },
    {
        "content": "<p>I guess either way can be a problem</p>",
        "id": 215729856,
        "sender_full_name": "eddyb",
        "timestamp": 1604591158
    },
    {
        "content": "<p>there is an add'l problem</p>",
        "id": 215729913,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604591170
    },
    {
        "content": "<p>(except in cases which don't compile today, in which we can fix it)</p>",
        "id": 215729926,
        "sender_full_name": "eddyb",
        "timestamp": 1604591175
    },
    {
        "content": "<p>I don't believe we currently have a fully expressive syntax</p>",
        "id": 215729934,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604591178
    },
    {
        "content": "<p>I was just thinking that it'd be nice to have a diagnostic that suggests</p>",
        "id": 215729964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604591190
    },
    {
        "content": "<p>\"try fully annotating the argument/return types on this closure\"</p>",
        "id": 215729977,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604591197
    },
    {
        "content": "<p>but right now that's not always possible I don't think</p>",
        "id": 215729992,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604591203
    },
    {
        "content": "<p>step 1: add generic closures<br>\nstep 2: allow lifetiems for them too</p>",
        "id": 215730009,
        "sender_full_name": "eddyb",
        "timestamp": 1604591211
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-11-05.20.2354818/near/215729934\">said</a>:</p>\n<blockquote>\n<p>I don't believe we currently have a fully expressive syntax</p>\n</blockquote>\n<p>oh yeah, I think there's an open bug on that</p>",
        "id": 215730034,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604591227
    },
    {
        "content": "<p>IIRC we made sure that <code>for&lt;...&gt; |...| ...</code> is not ambiguous with <code>for</code> loops</p>",
        "id": 215730036,
        "sender_full_name": "eddyb",
        "timestamp": 1604591228
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/58052\">rust#58052</a> I think is what I was thinking of</p>",
        "id": 215730193,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604591291
    },
    {
        "content": "<p>anyway</p>",
        "id": 215730270,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604591326
    },
    {
        "content": "<p>I think the right short-term solution</p>",
        "id": 215730289,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604591333
    },
    {
        "content": "<p>is to see about diagnostic changes</p>",
        "id": 215730307,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604591340
    },
    {
        "content": "<p>since those are easiest to land (or at least, have to fewest barriers for approval prior to actually getting into rustc)</p>",
        "id": 215730358,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604591362
    },
    {
        "content": "<p>we want to do the other stuff too, but diagnostics seem like potential huge payoff here</p>",
        "id": 215730408,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604591379
    },
    {
        "content": "<p>agreed</p>",
        "id": 215730422,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604591385
    },
    {
        "content": "<p>i do think we should think about an \"explicit lifetime syntax\" for closures</p>",
        "id": 215730433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604591395
    },
    {
        "content": "<p>That is something doable, but I would like to allow using for on closures</p>",
        "id": 215730437,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1604591397
    },
    {
        "content": "<p>yes agreed</p>",
        "id": 215730459,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604591403
    },
    {
        "content": "<p>and it may be that we can improve deduction for some common cases</p>",
        "id": 215730465,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604591403
    },
    {
        "content": "<p>lets move on</p>",
        "id": 215730510,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604591412
    },
    {
        "content": "<p>I'm excited about talking about nominations</p>",
        "id": 215730521,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604591420
    },
    {
        "content": "<p>There are cases that are not representable and the best we can tell people is \"you can't do that\" <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 215730533,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1604591426
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119031\">Esteban Küber</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-11-05.20.2354818/near/215730437\">said</a>:</p>\n<blockquote>\n<p>That is something doable, but I would like to allow using for on closures</p>\n</blockquote>\n<p>lang team proposal <del>/ rfc</del> welcome :)</p>",
        "id": 215730536,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604591427
    },
    {
        "content": "<ul>\n<li>\"SIGSEGV from rustc while building crate <code>legion</code>\" <a href=\"https://github.com/rust-lang/rust/issues/77869\">rust#77869</a><ul>\n<li>Can't compile legion crate since 1.47</li>\n<li>Nominated so we can try to get eyes on the root cause of the issue.</li>\n</ul>\n</li>\n</ul>",
        "id": 215730546,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604591431
    },
    {
        "content": "<p><span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span></p>",
        "id": 215730643,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604591467
    },
    {
        "content": "<p>scary stuff, e.g. from <span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> : \" (it can take a few hundred incremental builds before it fails)\"</p>",
        "id": 215730729,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604591504
    },
    {
        "content": "<p>oh that is terrifying</p>",
        "id": 215730761,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604591518
    },
    {
        "content": "<p>no repro under valgrind</p>",
        "id": 215730826,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604591531
    },
    {
        "content": "<p>I wonder if anyone has repro'ed under <code>rr</code></p>",
        "id": 215730843,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604591539
    },
    {
        "content": "<p>might require Ryzen CPU, which <em>does</em> support <code>rr</code> thanks in part to heroics from <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> , but <code>rr</code> doesn't work on Ryzen out-of-the-box</p>",
        "id": 215731015,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604591597
    },
    {
        "content": "<p>anyway</p>",
        "id": 215731048,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604591619
    },
    {
        "content": "<p>just run a recent-enough <code>rr</code>, and it will tell you what to do :D</p>",
        "id": 215731054,
        "sender_full_name": "eddyb",
        "timestamp": 1604591623
    },
    {
        "content": "<p>(if it detects there may be an issue to solve)</p>",
        "id": 215731073,
        "sender_full_name": "eddyb",
        "timestamp": 1604591633
    },
    {
        "content": "<p>the question I have now: Do we leave this nominated</p>",
        "id": 215731078,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604591634
    },
    {
        "content": "<p>or do we treat the discussion here as \"okay, we gave this some attention ...\"</p>",
        "id": 215731137,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604591645
    },
    {
        "content": "<p>And also, its categorized as <code>P-medium</code></p>",
        "id": 215731178,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604591662
    },
    {
        "content": "<p>its always sad when a <code>rustc</code> SEGV is only P-medium ...</p>",
        "id": 215731199,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604591673
    },
    {
        "content": "<p>I'm willing to leave it nominated for now</p>",
        "id": 215731245,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604591693
    },
    {
        "content": "<p>(as opposed to <a href=\"https://github.com/rust-lang/rust/issues/41078\">rust#41078</a>, which I am planning to <strong>un</strong>nominate now)</p>",
        "id": 215731266,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604591705
    },
    {
        "content": "<p>the other nominated issue is <a href=\"https://github.com/rust-lang/rust/issues/78410\">rust#78410</a></p>",
        "id": 215731352,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604591750
    },
    {
        "content": "<ul>\n<li>\"revert <a href=\"https://github.com/rust-lang/rust/issues/75443\">#75443</a> update mir validator\" <a href=\"https://github.com/rust-lang/rust/pull/78410\">rust#78410</a><ul>\n<li>beta nominated</li>\n<li>opened by <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> </li>\n<li>assigned to <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> </li>\n<li><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> mentions that this PR could result in a breaking change due to PR <a href=\"https://github.com/rust-lang/rust/pull/75443\">rust#75443</a> allowing to compile code <a href=\"https://github.com/rust-lang/rust/pull/78410#issuecomment-717814133\">such as this</a></li>\n<li>Link to <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/generator.20upvars/near/214617274\">Zulip discussion</a></li>\n</ul>\n</li>\n</ul>",
        "id": 215731372,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604591758
    },
    {
        "content": "<p>which we've already discussed, so I think we can move on to ...</p>",
        "id": 215731425,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604591767
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3AI-nominated+label%3Alibs-impl\">libs-impl</a></p>\n<ul>\n<li>No nominated issues for <code>libs-impl</code> this time.</li>\n</ul>",
        "id": 215731437,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604591774
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rfcs/issues?q=is%3Aopen+label%3AI-nominated+label%3AT-compiler\">RFC</a></p>\n<ul>\n<li>\"RFC: -C export-executable-symbols\" <a href=\"https://github.com/rust-lang/rfcs/pull/2841\">rfcs#2841</a><ul>\n<li>Submitted by <code>@MaulingMonkey</code></li>\n<li>RFC proposes adding the ability to export symbols from executables, not just dylibs, via a new compiler flag <code>-C export-executable-symbols</code></li>\n<li><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> <a href=\"https://github.com/rust-lang/rfcs/pull/2841#issuecomment-569852146\">has some questions</a></li>\n<li>not yet reached a consensus</li>\n</ul>\n</li>\n</ul>",
        "id": 215731446,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604591778
    },
    {
        "content": "<p>four minutes left</p>",
        "id": 215731458,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604591787
    },
    {
        "content": "<p>I'd love to discuss this RFC</p>",
        "id": 215731467,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604591791
    },
    {
        "content": "<p>in 4 minutes? :)</p>",
        "id": 215731596,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604591854
    },
    {
        "content": "<p>I'm basically wondering</p>",
        "id": 215731602,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604591856
    },
    {
        "content": "<p>if we can figure out some sort of feedback</p>",
        "id": 215731616,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604591862
    },
    {
        "content": "<p>like, do we want them to recast this as an MCP?</p>",
        "id": 215731631,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604591869
    },
    {
        "content": "<p>or do we want to give implementation approval and we'll revist before approving for stable release?</p>",
        "id": 215731723,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604591889
    },
    {
        "content": "<p>I'd like to allow for progress to be made, personally</p>",
        "id": 215731788,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604591914
    },
    {
        "content": "<p>I would too</p>",
        "id": 215731809,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604591924
    },
    {
        "content": "<p>of course I don't want us committing to flags that we do not intend to support</p>",
        "id": 215731819,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604591928
    },
    {
        "content": "<p>I think it'd be ok to add an unstable flag</p>",
        "id": 215731837,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604591938
    },
    {
        "content": "<p>nor do I want us to get extra review burden</p>",
        "id": 215731841,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604591939
    },
    {
        "content": "<p>and move those questions you raised to questions</p>",
        "id": 215731849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604591942
    },
    {
        "content": "<p>but I guess the question is who will ever <em>resolve</em> them</p>",
        "id": 215731873,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604591952
    },
    {
        "content": "<p>that said we already have the same ones for dylibs</p>",
        "id": 215731886,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604591960
    },
    {
        "content": "<p>right</p>",
        "id": 215731899,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604591964
    },
    {
        "content": "<p>and that's stable</p>",
        "id": 215731909,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604591968
    },
    {
        "content": "<p>so I'm not overly worried about it</p>",
        "id": 215731919,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604591973
    },
    {
        "content": "<p>it's not fair to put that onus on this RFC</p>",
        "id": 215731920,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604591973
    },
    {
        "content": "<p>I think we'll want to do <em>something</em> in this direction, so approving for experimental impl and looking at that once it exists seems like a good way forward.</p>",
        "id": 215731935,
        "sender_full_name": "oli",
        "timestamp": 1604591979
    },
    {
        "content": "<p>agreed</p>",
        "id": 215731939,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604591981
    },
    {
        "content": "<p>I think it's prety reasonable to revisit this after the flag exists and folks are using it</p>",
        "id": 215731968,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604591992
    },
    {
        "content": "<p>okay. Maybe I'll do an <code>rfcbot fcp merge</code></p>",
        "id": 215731982,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604591997
    },
    {
        "content": "<p>so why don't we just mergre the rfc</p>",
        "id": 215731987,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604592000
    },
    {
        "content": "<p>They do have an implementation already and it's basically trivial</p>",
        "id": 215731989,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1604592001
    },
    {
        "content": "<p><a href=\"https://github.com/MaulingMonkey/rust/commit/aa17dfbd63455a4aae1fce86a270035f74180c3e\">https://github.com/MaulingMonkey/rust/commit/aa17dfbd63455a4aae1fce86a270035f74180c3e</a></p>",
        "id": 215732042,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1604592006
    },
    {
        "content": "<p>with a comment saying that we're basically inclined for experimental approval</p>",
        "id": 215732050,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604592009
    },
    {
        "content": "<p>(yep, I was thinking that review bandwidth is not a big deal here)</p>",
        "id": 215732060,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604592011
    },
    {
        "content": "<p>ah thanks <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span></p>",
        "id": 215732062,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604592012
    },
    {
        "content": "<p>we just want to create tracking issue and make sure it uses <code>-Zunstable-options</code> or whatever</p>",
        "id": 215732089,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604592024
    },
    {
        "content": "<p>which is the right thing to do regadless</p>",
        "id": 215732096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604592028
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-11-05.20.2354818/near/215732060\">said</a>:</p>\n<blockquote>\n<p>(yep, I was thinking that review bandwidth is not a big deal here)</p>\n</blockquote>\n<p>right, I more was just trying to state out loud the general principles going through my mind</p>",
        "id": 215732135,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604592042
    },
    {
        "content": "<p>but we should ask that they amend RFC with an unresolved question or two (or add to the tracking issue)</p>",
        "id": 215732138,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604592044
    },
    {
        "content": "<p>the tension between \"move fast\" and \"don't over-commit\"</p>",
        "id": 215732181,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604592057
    },
    {
        "content": "<p>definitely a good thing to keep in mind</p>",
        "id": 215732192,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604592062
    },
    {
        "content": "<p>Okay great</p>",
        "id": 215732199,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604592064
    },
    {
        "content": "<p>Hey everyone</p>",
        "id": 215732216,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604592070
    },
    {
        "content": "<p>that's an hour!</p>",
        "id": 215732227,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604592072
    },
    {
        "content": "<p>and we got through the whole agenda. Mostly by skipping a large section (namely, P-high regressions)</p>",
        "id": 215732297,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604592095
    },
    {
        "content": "<p>so, a round of <span aria-label=\"clap\" class=\"emoji emoji-1f44f\" role=\"img\" title=\"clap\">:clap:</span> for everyone</p>",
        "id": 215732322,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604592106
    },
    {
        "content": "<p>thanks for attending, everyone in <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span> ! Have a great day!</p>",
        "id": 215732420,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604592131
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> can you remove nomination here <a href=\"https://github.com/rust-lang/rfcs/pull/2841\">https://github.com/rust-lang/rfcs/pull/2841</a>, I don't have rights to do so</p>",
        "id": 215765940,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604606222
    },
    {
        "content": "<p>I can't create next week's agenda for now due to HackMD issues but I will do so soon</p>",
        "id": 215767388,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604606933
    },
    {
        "content": "<p>next week we will have checkins from <span class=\"user-group-mention\" data-user-group-id=\"1175\">@WG-rfc-2229</span> and <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> (cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> and <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>)</p>",
        "id": 215767558,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604607009
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-11-05.20.2354818/near/215767558\">said</a>:</p>\n<blockquote>\n<p>next week we will have checkins from <span class=\"user-group-mention\" data-user-group-id=\"1175\">@WG-rfc-2229</span> and <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> (cc <span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <span class=\"user-mention silent\" data-user-id=\"116118\">Matthew Jasper</span> and <span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span>)</p>\n</blockquote>\n<p>here is the link to next week's agenda <a href=\"https://hackmd.io/mLqbi5wsR2CkgY-X8sKSSw\">https://hackmd.io/mLqbi5wsR2CkgY-X8sKSSw</a></p>",
        "id": 215858990,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604675595
    }
]