[
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span>; the triage meeting will happen tomorrow at <time datetime=\"2020-10-08T14:00:00Z\">2020-10-08T14:00:00+00:00</time></p>",
        "id": 212611448,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602100733
    },
    {
        "content": "<p><em>WG-prioritization</em> has done pre-triage in <a class=\"stream\" data-stream-id=\"245100\" href=\"/#narrow/stream/245100-t-compiler.2Fwg-prioritization.2Falerts\">#t-compiler/wg-prioritization/alerts</a></p>",
        "id": 212611475,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602100744
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"2403\">@WG-prioritization</span> has prepared the <a href=\"https://hackmd.io/xvEIq4ShQB6IhPIHZTZa7A?view\">meeting agenda</a></p>",
        "id": 212611500,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602100756
    },
    {
        "content": "<p>We will have just one checkin this time from <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span></p>",
        "id": 212611550,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602100779
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> do you have something you want to share about <em>WG-traits</em>?</p>",
        "id": 212611591,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602100800
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> I will fill in some checkin text</p>",
        "id": 212634642,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602115540
    },
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span>, triage meeting will be starting in ~ 30 minutes</p>",
        "id": 212689161,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602163783
    },
    {
        "content": "<p><a href=\"https://hackmd.io/xvEIq4ShQB6IhPIHZTZa7A?view\">Check out the meeting agenda</a></p>",
        "id": 212689193,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602163798
    },
    {
        "content": "<p>sorry all, my web browser is going super slow for some reason</p>",
        "id": 212693879,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602165793
    },
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span>! Add a <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> emoji to show you're here :)</p>",
        "id": 212693976,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602165841
    },
    {
        "content": "<p>we will start off with 5 minutes for ...</p>\n<h2>Announcements</h2>",
        "id": 212694039,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602165854
    },
    {
        "content": "<ul>\n<li>Rust 1.47 is out (<a href=\"https://blog.rust-lang.org/2020/10/08/Rust-1.47.html\">https://blog.rust-lang.org/2020/10/08/Rust-1.47.html</a>)!</li>\n</ul>",
        "id": 212694056,
        "sender_full_name": "simulacrum",
        "timestamp": 1602165861
    },
    {
        "content": "<ul>\n<li>New MCPs (take a look, see if you like them!)<ul>\n<li>No new proposals this time.</li>\n</ul>\n</li>\n</ul>",
        "id": 212694118,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602165892
    },
    {
        "content": "<ul>\n<li>Old MCPs (not seconded, take a look)<ul>\n<li>\"Decentralize queries\" <a href=\"https://github.com/rust-lang/compiler-team/issues/277\">compiler-team#277</a></li>\n<li>\"Require users to confirm they know RUSTC_BOOTSTRAP is unsupported before using it\" <a href=\"https://github.com/rust-lang/compiler-team/issues/350\">compiler-team#350</a></li>\n<li>\"MCP: move compiler/ crates to stable Rust\" <a href=\"https://github.com/rust-lang/compiler-team/issues/358\">compiler-team#358</a></li>\n<li>\"Add 32-bit and 64-bit stderr/stdout files for ui tests\" <a href=\"https://github.com/rust-lang/compiler-team/issues/365\">compiler-team#365</a></li>\n</ul>\n</li>\n</ul>",
        "id": 212694148,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602165904
    },
    {
        "content": "<ul>\n<li>Pending FCP requests (check your boxes!)<ul>\n<li>\"Accept RFC 2951 \"Linking modifiers for native libraries\"\" <a href=\"https://github.com/rust-lang/compiler-team/issues/356\">compiler-team#356</a></li>\n</ul>\n</li>\n</ul>",
        "id": 212694183,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602165918
    },
    {
        "content": "<ul>\n<li>Things in FCP (make sure you're good with it)<ul>\n<li>\"Integration of the Cranelift backend with rustc\" <a href=\"https://github.com/rust-lang/compiler-team/issues/270\">compiler-team#270</a></li>\n<li>\"<code>ty.kind()</code> -&gt; <code>ty.data()</code>\" <a href=\"https://github.com/rust-lang/compiler-team/issues/359\">compiler-team#359</a></li>\n<li>\"Internal lint: Ban <code>pub</code> re-exports in compiler/\" <a href=\"https://github.com/rust-lang/compiler-team/issues/368\">compiler-team#368</a></li>\n<li>\"Promote aarch64-pc-windows-msvc to Tier 2 Development Platform\" <a href=\"https://github.com/rust-lang/rust/pull/75914\">rust#75914</a></li>\n<li>\"Set up CI for aarch64-apple-darwin\" <a href=\"https://github.com/rust-lang/rust/pull/75991\">rust#75991</a></li>\n</ul>\n</li>\n</ul>",
        "id": 212694235,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602165936
    },
    {
        "content": "<ul>\n<li>Accepted MCPs<ul>\n<li>No new accepted proposals this time.</li>\n</ul>\n</li>\n</ul>",
        "id": 212694284,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602165953
    },
    {
        "content": "<ul>\n<li>Finalized FCPs (disposition merge)<ul>\n<li>[T-libs] \"Relax promises about condition variable.\" <a href=\"https://github.com/rust-lang/rust/pull/76932\">rust#76932</a></li>\n<li>[T-libs] \"Make RawFd implement the RawFd traits\" <a href=\"https://github.com/rust-lang/rust/pull/76969\">rust#76969</a></li>\n<li>[T-libs] \"Remove std::io::lazy::Lazy in favour of SyncOnceCell\" <a href=\"https://github.com/rust-lang/rust/pull/77154\">rust#77154</a></li>\n</ul>\n</li>\n</ul>",
        "id": 212694330,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602165963
    },
    {
        "content": "<h3>WG checkins</h3>\n<p><span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span> checkin by @<strong>jackh726</strong>:</p>",
        "id": 212694406,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602165988
    },
    {
        "content": "<blockquote>\n<p>We started sprint 4 of the year on Sept. 15.<br>\nrustc PRs:</p>\n<ul>\n<li>Separate projection bounds and predicates (<a href=\"https://github.com/rust-lang/rust/issues/73905\">#73905</a>)</li>\n<li>Refactor <code>ty.kind</code> -&gt; `ty.kind()`` (<a href=\"https://github.com/rust-lang/rust/issues/75077\">#75077</a>)</li>\n<li>Several Chalk updates<ul>\n<li>Includes fix for fundamental types that unblocks <a href=\"https://github.com/rust-lang/rust/issues/77187\">#77187</a><br>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 212694433,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602165998
    },
    {
        "content": "<blockquote>\n<p>Chalk PRs:</p>\n<ul>\n<li>Add foreign types and generators (<a href=\"https://github.com/rust-lang/rust/issues/601\">#601</a> and <a href=\"https://github.com/rust-lang/rust/issues/593\">#593</a>)</li>\n<li>Add <code>Unpin</code> and <code>CoerceUnsized</code> (<a href=\"https://github.com/rust-lang/rust/issues/603\">#603</a> and <a href=\"https://github.com/rust-lang/rust/issues/607\">#607</a>)</li>\n<li>Extend auto trait impls for some builtin types (<a href=\"https://github.com/rust-lang/rust/issues/612\">#612</a>)</li>\n<li>Add <code>'static</code> (<a href=\"https://github.com/rust-lang/rust/issues/617\">#617</a>)<br>\n</li>\n</ul>\n</blockquote>",
        "id": 212694561,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602166058
    },
    {
        "content": "<p>/me squints and wonders why Zulip keeps temporarily rendering the markdown before reverting to asterisks...</p>",
        "id": 212694664,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602166093
    },
    {
        "content": "<p>ah, adding an extra newline fixed it.</p>",
        "id": 212694754,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602166134
    },
    {
        "content": "<blockquote>\n<p>Some changes on the horizon:</p>\n<ul>\n<li><code>TyKind</code> -&gt; <code>TyData</code></li>\n<li>Refactoring <code>Binder</code> to track late-bound variables</li>\n<li>Adding variance and subtyping to Chalk</li>\n<li>Adding canonicalization of placeholders to Chalk<br>\n</li>\n</ul>\n</blockquote>",
        "id": 212694818,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602166161
    },
    {
        "content": "<blockquote>\n<p>Also, about half of rustc tests pass in <code>compare-mode=chalk</code>; we're working on triaging these and making more pass.</p>\n</blockquote>",
        "id": 212694838,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602166170
    },
    {
        "content": "<p>any more announcements?</p>",
        "id": 212695079,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602166251
    },
    {
        "content": "<p>lets move along to beta nominations.</p>",
        "id": 212695113,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602166267
    },
    {
        "content": "<h2>Beta-nominations</h2>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Abeta-nominated+-label%3Abeta-accepted+label%3AT-compiler\">T-compiler</a></p>",
        "id": 212695159,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602166286
    },
    {
        "content": "<p>oops</p>",
        "id": 212695169,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602166292
    },
    {
        "content": "<ul>\n<li>\"Move <code>EarlyOtherwiseBranch</code> to mir-opt-level 2\" <a href=\"https://github.com/rust-lang/rust/pull/77582\">rust#77582</a><ul>\n<li>Opened by <span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> and assigned to <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span></li>\n<li>References <a href=\"https://github.com/rust-lang/rust/pull/75119\">PR #75119</a></li>\n</ul>\n</li>\n</ul>",
        "id": 212695208,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602166307
    },
    {
        "content": "<p>We've had some bugs in this MIR opt recently and we'd just like to let it get some more exposure on nightly before it moves along the release train.</p>",
        "id": 212695232,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1602166321
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> I guess you meant to backport this one so the optimization doesn't turn on?</p>",
        "id": 212695361,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602166360
    },
    {
        "content": "<p>Yes, exactly</p>",
        "id": 212695381,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1602166369
    },
    {
        "content": "<p>just in case wanted to clarify that :)</p>",
        "id": 212695425,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602166388
    },
    {
        "content": "<p>yeah this seems like an easy backport approved.</p>",
        "id": 212695466,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602166407
    },
    {
        "content": "<p>so, backport approved.</p>",
        "id": 212695478,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602166410
    },
    {
        "content": "<ul>\n<li>\"Update RLS and Rustfmt\" <a href=\"https://github.com/rust-lang/rust/pull/77590\">rust#77590</a><ul>\n<li>Nominated because the rustfmt bump includes support for some syntax that is newly introduced in 1.48.0. When adding syntax we should aim for the rustfmt which ships with the same version of rustc to not fail on the new syntax.</li>\n</ul>\n</li>\n</ul>",
        "id": 212695510,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602166422
    },
    {
        "content": "<p>hmm.</p>",
        "id": 212695685,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602166488
    },
    {
        "content": "<p>I am sitting here musing about this problem</p>",
        "id": 212695762,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602166517
    },
    {
        "content": "<p>about needing to keep the rustfmt up to date with the version of rust that's being deployed</p>",
        "id": 212695789,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602166530
    },
    {
        "content": "<p>the other approach I could imagine would be to make rustfmt more liberal in what it accepts</p>",
        "id": 212695844,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602166547
    },
    {
        "content": "<p>but I'm not in charge of the design of that tool. :)</p>",
        "id": 212695865,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602166554
    },
    {
        "content": "<p>I'm not sure I understand the problem you're suggesting</p>",
        "id": 212695989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602166574
    },
    {
        "content": "<p>i.e., if new syntax is introduced?</p>",
        "id": 212696000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602166578
    },
    {
        "content": "<p>I'm saying that overall</p>",
        "id": 212696012,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602166583
    },
    {
        "content": "<p>it sounds like the policy suggested here</p>",
        "id": 212696040,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602166593
    },
    {
        "content": "<p>to upgrade rustfmt in time with syntax additions to rustc</p>",
        "id": 212696078,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602166602
    },
    {
        "content": "<p>could potentially lead to us deploying versions of rustfmt that haven't been properly vetted</p>",
        "id": 212696135,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602166624
    },
    {
        "content": "<p>and that it would be safer to not have a tight coupling</p>",
        "id": 212696173,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602166635
    },
    {
        "content": "<p><strong>but</strong></p>",
        "id": 212696186,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602166639
    },
    {
        "content": "<p>I also don't think rustfmt is necessarily a mission critical tool?</p>",
        "id": 212696220,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602166653
    },
    {
        "content": "<p>rustfmt is using libsyntax directly, so there's not much that can be done there I imagine</p>",
        "id": 212696245,
        "sender_full_name": "simulacrum",
        "timestamp": 1602166664
    },
    {
        "content": "<p>except for the fact that certain repositories, like our own, might gate on using rustfmt for certain CI steps</p>",
        "id": 212696273,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602166674
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-10-08.20.2354818/near/212696220\">said</a>:</p>\n<blockquote>\n<p>I also don't think rustfmt is necessarily a mission critical tool?</p>\n</blockquote>\n<p>I don't agree with this, actually</p>",
        "id": 212696349,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602166696
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-10-08.20.2354818/near/212696245\">said</a>:</p>\n<blockquote>\n<p>rustfmt is using libsyntax directly, so there's not much that can be done there I imagine</p>\n</blockquote>\n<p>ah. is the failure described here a <em>build</em> failure of <code>rustfmt</code> itself?</p>",
        "id": 212696368,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602166706
    },
    {
        "content": "<p>I think it's an increasingly core part of people's workflows</p>",
        "id": 212696375,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602166712
    },
    {
        "content": "<p>( but I also think we should table this discussion, probably, as I doubt we're going to make changes )</p>",
        "id": 212696407,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602166729
    },
    {
        "content": "<p>sure, that's true; I think my comment about CI integration alludes to that.</p>",
        "id": 212696410,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602166730
    },
    {
        "content": "<p>yes, tabling seems good. rustfmt will build just isn't able to run on new code</p>",
        "id": 212696440,
        "sender_full_name": "simulacrum",
        "timestamp": 1602166745
    },
    {
        "content": "<p>anyway if it <em>is</em> a mission critical tool, that may provide all the more reason to look into a more decoupled architecture. Maybe.</p>",
        "id": 212696501,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602166777
    },
    {
        "content": "<p>but yeah, we shouldn't have this conversation now.</p>",
        "id": 212696530,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602166789
    },
    {
        "content": "<p>backport approved, in any case.</p>",
        "id": 212696544,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602166798
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Abeta-nominated+-label%3Abeta-accepted+label%3Alibs-impl\">libs-impl</a></p>\n<ul>\n<li>No beta nominations for <code>libs-impl</code> this time.</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Abeta-nominated+-label%3Abeta-accepted+label%3AT-rustdoc\">T-rustdoc</a></p>\n<ul>\n<li>No beta nominations for <code>T-rustdoc</code> this time.</li>\n</ul>",
        "id": 212696604,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602166811
    },
    {
        "content": "<h2>Stable-nominations</h2>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Astable-nominated+-label%3Astable-accepted+label%3AT-compiler\">T-compiler</a></p>\n<ul>\n<li>No stable nominations for <code>T-compiler</code> this time.</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Astable-nominated+-label%3Astable-accepted+label%3Alibs-impl\">libs-impl</a></p>\n<ul>\n<li>No stable nominations for <code>libs-impl</code> this time.</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Astable-nominated+-label%3Astable-accepted+label%3AT-rustdoc\">T-rustdoc</a></p>\n<ul>\n<li>No stable nominations for <code>T-rustdoc</code> this time.</li>\n</ul>",
        "id": 212696618,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602166819
    },
    {
        "content": "<p>(always a good thing to have zero stable nominations on release day!)</p>",
        "id": 212696638,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602166830
    },
    {
        "content": "<h2>PRs S-waiting-on-team</h2>\n<p><a href=\"https://github.com/rust-lang/rust/pulls?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AS-waiting-on-team+label%3AT-compiler\">T-compiler</a></p>\n<ul>\n<li>No PRs waiting on <code>T-compiler</code> this time.</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/pulls?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AS-waiting-on-team+label%3Alibs-impl\">libs-impl</a></p>\n<ul>\n<li>No PRs waiting on <code>libs-impl</code> this time.</li>\n</ul>",
        "id": 212696665,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602166845
    },
    {
        "content": "<h2>Issues of Note</h2>\n<h3>Short Summary</h3>\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AT-compiler+label%3AP-critical+\">5 T-compiler P-critical issues</a><ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AT-compiler+label%3AP-critical+no%3Aassignee\">0 of those are unassigned</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AT-compiler+label%3AP-high+\">50 T-compiler P-high issues</a><ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AT-compiler+label%3AP-high+no%3Aassignee\">32 of those are unassigned</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/rust-lang/rust/labels/regression-from-stable-to-beta\">0 P-critical, 1 P-high, 1 P-medium, 0 P-low regression-from-stable-to-beta</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/labels/regression-from-stable-to-nightly\">3 P-critical, 1 P-high, 4 P-medium, 2 P-low regression-from-stable-to-nightly</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/labels/regression-from-stable-to-stable\">1 P-critical, 20 P-high, 60 P-medium, 6 P-low regression-from-stable-to-stable</a></li>\n</ul>",
        "id": 212696688,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602166854
    },
    {
        "content": "<h3>P-critical</h3>\n<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AP-critical+label%3AT-compiler\">T-compiler</a></p>",
        "id": 212696773,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602166893
    },
    {
        "content": "<ul>\n<li>\"Optimisation-caused UB during cross-crate compilation\" <a href=\"https://github.com/rust-lang/rust/issues/76387\">rust#76387</a><ul>\n<li>This one was already discussed</li>\n<li>Assigned to <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span></li>\n<li><a href=\"https://reviews.llvm.org/D88529\">A different LLVM patch has been accepted</a> and will be included in LLVM 12</li>\n<li>The accepted patch is pretty small and self-contained, so we could cherry-pick it if we wanted to</li>\n</ul>\n</li>\n</ul>",
        "id": 212696796,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602166904
    },
    {
        "content": "<p>(we <em>should</em> cherry pick the different LLVM patch, right?)</p>",
        "id": 212696893,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602166934
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span></p>",
        "id": 212696902,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602166939
    },
    {
        "content": "<p>lets keep going; i think this sounds like it is under control.</p>",
        "id": 212696952,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602166967
    },
    {
        "content": "<p>oh but before we move along</p>",
        "id": 212696990,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602166990
    },
    {
        "content": "<p>I'd like to try to link to any zulip stream that is relevant to each particular issue</p>",
        "id": 212697024,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602167008
    },
    {
        "content": "<p>to drive follow-up discussion there (and allow review of past discussion)</p>",
        "id": 212697055,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602167023
    },
    {
        "content": "<p>nope I couldn't find any such zulip stream, apart from the one in the wg-prioritization related streams.</p>",
        "id": 212697199,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602167083
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-10-08.20.2354818/near/212696893\">said</a>:</p>\n<blockquote>\n<p>(we <em>should</em> cherry pick the different LLVM patch, right?)</p>\n</blockquote>\n<p>what do you mean by a different patch?</p>",
        "id": 212697216,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602167091
    },
    {
        "content": "<blockquote>\n<ul>\n<li><a href=\"https://reviews.llvm.org/D88529\">A different LLVM patch has been accepted</a> and will be included in LLVM 12</li>\n</ul>\n</blockquote>",
        "id": 212697253,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602167108
    },
    {
        "content": "<p>ahh right, that one :)</p>",
        "id": 212697275,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602167116
    },
    {
        "content": "<p>so the one that is merged on LLVM</p>",
        "id": 212697283,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602167121
    },
    {
        "content": "<p>by different the text meant, different to the one we had that was originally provided by <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span></p>",
        "id": 212697320,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602167140
    },
    {
        "content": "<p>I'm assuming we haven't landed the first (unaccepted) patch that was autored by <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span></p>",
        "id": 212697335,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602167146
    },
    {
        "content": "<p>I guess we didn't</p>",
        "id": 212697365,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602167159
    },
    {
        "content": "<p>so if we're going to pick between them, I'd say pick the one that the LLVM dev's approved.</p>",
        "id": 212697368,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602167161
    },
    {
        "content": "<p>right, that's also what I meant</p>",
        "id": 212697426,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602167170
    },
    {
        "content": "<p>anyway I suggest any follow-up discussion could go into <a class=\"stream\" data-stream-id=\"187780\" href=\"/#narrow/stream/187780-t-compiler.2Fwg-llvm\">#t-compiler/wg-llvm</a></p>",
        "id": 212697453,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602167182
    },
    {
        "content": "<p>next</p>",
        "id": 212697461,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602167185
    },
    {
        "content": "<ul>\n<li>\"coreos-installer test segfaults on s390x-unknown-linux-gnu\" <a href=\"https://github.com/rust-lang/rust/issues/77382\">rust#77382</a><ul>\n<li>This was discussed last week</li>\n<li>Opened by <span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span></li>\n<li><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> points to this issue as duplicate of <a href=\"https://github.com/rust-lang/rust/issues/74551\">rust#74551</a></li>\n<li>Crossreferenced in Bugzilla issue <a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=1883457\">#1883457</a></li>\n<li><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> opened an issue on <a href=\"https://bugs.llvm.org/show_bug.cgi?id=47736\">LLVM</a></li>\n<li>There's an <a href=\"https://reviews.llvm.org/D89034\">LLVM patch already</a></li>\n</ul>\n</li>\n</ul>",
        "id": 212697492,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602167199
    },
    {
        "content": "<p>potentially the same thing happens here, we may need to backport that patch</p>",
        "id": 212697580,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602167242
    },
    {
        "content": "<p>Yes, so here again, I'd suggest we cherry-pick the LLVM patch</p>",
        "id": 212697607,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602167252
    },
    {
        "content": "<p>and also that follow-up discussion can/should take place on <a class=\"stream\" data-stream-id=\"187780\" href=\"/#narrow/stream/187780-t-compiler.2Fwg-llvm\">#t-compiler/wg-llvm</a></p>",
        "id": 212697655,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602167279
    },
    {
        "content": "<p>/me is wondering if, as a matter of policy, we should just open such new topics if they don't already exist, during the meeting itself?</p>",
        "id": 212697742,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602167301
    },
    {
        "content": "<p>I guess I'd rather wait for actual conversation to happen</p>",
        "id": 212697776,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602167318
    },
    {
        "content": "<p>yeah</p>",
        "id": 212697803,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602167334
    },
    {
        "content": "<p>(the only advantage to opening them ahead of time is the ability to immediately link them here, in the chat, which means it gets archived and potentially put into meeting notes.)</p>",
        "id": 212697839,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602167356
    },
    {
        "content": "<p>it'd be kind of nice if there were an easy to find topic for every issue or something but I guess that trying to open them with a bit would be .. unwise</p>",
        "id": 212697851,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602167361
    },
    {
        "content": "<p>yeah. Its not hard to search</p>",
        "id": 212697882,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602167371
    },
    {
        "content": "<p>I worry about things where a topic gets organically created and then later there's a bot one or something</p>",
        "id": 212697898,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602167376
    },
    {
        "content": "<p>especially if people put the issue number into the topic.</p>",
        "id": 212697914,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602167383
    },
    {
        "content": "<p>still, it'd be nice if we were better about linking between the two</p>",
        "id": 212697918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602167385
    },
    {
        "content": "<p>next</p>",
        "id": 212698011,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602167408
    },
    {
        "content": "<ul>\n<li>\"Type inference regression and ICE in nightly 2020-10-06\" <a href=\"https://github.com/rust-lang/rust/issues/77638\">rust#77638</a><ul>\n<li>Assigned to <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span></li>\n<li>Nightly regression</li>\n<li>Bisected to <a href=\"https://github.com/rust-lang/rust/pull/73905\">rust#73905</a>. The issue below regressed in the same PR</li>\n</ul>\n</li>\n</ul>",
        "id": 212698054,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602167429
    },
    {
        "content": "<p>The next 3 are all regressions from <a href=\"https://github.com/rust-lang/rust/issues/73905\">#73905</a></p>",
        "id": 212698106,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1602167453
    },
    {
        "content": "<p>shall we discuss them all in tandem?</p>",
        "id": 212698134,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602167465
    },
    {
        "content": "<p>let me post them all then</p>",
        "id": 212698141,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602167468
    },
    {
        "content": "<ul>\n<li>\"Type inference regression and ICE in nightly 2020-10-06\" <a href=\"https://github.com/rust-lang/rust/issues/77638\">rust#77638</a><ul>\n<li>Assigned to <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span></li>\n<li>Nightly regression</li>\n<li>Bisected to <a href=\"https://github.com/rust-lang/rust/pull/73905\">rust#73905</a>. The issue below regressed in the same PR</li>\n</ul>\n</li>\n<li>\"[ICE] Encountered errors resolving bounds after type-checking\" <a href=\"https://github.com/rust-lang/rust/issues/77653\">rust#77653</a><ul>\n<li>Assigned to <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span></li>\n<li>Nightly regression</li>\n<li>Opened by <span class=\"user-mention\" data-user-id=\"209117\">@lzutao</span> to highlight comment from issue above <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> <a href=\"https://github.com/rust-lang/rust/issues/77638#issuecomment-704892157\">rust#77638</a></li>\n</ul>\n</li>\n<li>\"ICE: Projection bound ... was applicable to ... but now is not\" <a href=\"https://github.com/rust-lang/rust/issues/77656\">rust#77656</a><ul>\n<li>Opened by <span class=\"user-mention\" data-user-id=\"306504\">@Tavian Barnes</span> </li>\n<li>Nightly regression that impacts code in a crate</li>\n<li>Bisected to commit <a href=\"https://github.com/rust-lang/rust/commit/08e2d4616613716362b4b49980ff303f2b9ae654\">08e2d46</a>, merged in <a href=\"https://github.com/rust-lang/rust/pull/73905\">rust#73905</a></li>\n</ul>\n</li>\n</ul>",
        "id": 212698191,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602167489
    },
    {
        "content": "<p>The type inference regression is expected, the method (operator) is actually ambiguous between two equally valid choices.</p>",
        "id": 212698290,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1602167523
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> I take it you are well aware of all of these then. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 212698316,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602167528
    },
    {
        "content": "<p>hmm</p>",
        "id": 212698424,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602167574
    },
    {
        "content": "<p>I have a good idea on what's happening with <a href=\"https://github.com/rust-lang/rust/issues/77656\">#77656</a> and I'm trying to find the best way to fix it. <a href=\"https://github.com/rust-lang/rust/issues/77653\">#77653</a> doesn't have a small repro ATM so I don't really know what's going on there.</p>",
        "id": 212698486,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1602167603
    },
    {
        "content": "<p>There is <a href=\"https://github.com/rust-lang/rust/issues/77638#issuecomment-705093131\">this question</a> on <a href=\"https://github.com/rust-lang/rust/issues/77638\">rust#77638</a>:</p>\n<blockquote>\n<p>Can someone help me understand this? This fixed the problem:</p>\n<p><code>diff\n    pub fn checked_add&lt;Dur: Duration&gt;(self, duration: Dur) -&gt; Option&lt;Self&gt;\n    where\n        Dur: FixedPoint,\n-        Clock::T: TryFrom&lt;Dur::T&gt;\n+        Clock::T: TryFrom&lt;Dur::T&gt; + ops::Div&lt;Output=Clock::T&gt;\n</code></p>\n<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=55f8795c91867fec5550107d789a60f8\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=55f8795c91867fec5550107d789a60f8</a></p>\n<p>But that bound seems redundant because <code>Clock::T: TimeInt</code> and <code>TimeInt: ops::Div&lt;Output = Self&gt;</code>. Is the <code>Self</code> just any <code>TimeInt</code> and not necessarily the specific type?</p>\n</blockquote>",
        "id": 212698607,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602167645
    },
    {
        "content": "<p>This may be because of the code that gives preference to where clauses?</p>",
        "id": 212698669,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602167676
    },
    {
        "content": "<p>/me is sad: zulip doesn't seem to support <code>diff</code> as a codeblock type?</p>",
        "id": 212698670,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602167676
    },
    {
        "content": "<p>yes it does...?</p>",
        "id": 212698681,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602167684
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">- foo</span>\n<span class=\"gi\">+ bar</span>\n</code></pre></div>",
        "id": 212698691,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602167688
    },
    {
        "content": "<p>I though it does</p>",
        "id": 212698703,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1602167695
    },
    {
        "content": "<p>It might be because the code block is within a quotation.</p>",
        "id": 212698741,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1602167709
    },
    {
        "content": "<p>okay we'll file that with zulip</p>",
        "id": 212698799,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602167737
    },
    {
        "content": "<p>anyway</p>",
        "id": 212698834,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602167754
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> -- do you feel that <a href=\"https://github.com/rust-lang/rust/issues/77638\">#77638</a> is \"working as intended\"</p>",
        "id": 212698958,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602167802
    },
    {
        "content": "<p>It'd be nice to minimize the example more I think</p>",
        "id": 212698986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602167816
    },
    {
        "content": "<p><code>Div&lt;Output = Self&gt;</code> does sound different from <code>Div&lt;Output=Clock::T&gt;</code>, at first glance to me ...</p>",
        "id": 212699028,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602167835
    },
    {
        "content": "<p>the playground link is good but it still has a lot of traits and things</p>",
        "id": 212699075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602167856
    },
    {
        "content": "<p>I doubt they are all needed</p>",
        "id": 212699080,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602167859
    },
    {
        "content": "<p>yep</p>",
        "id": 212699091,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602167864
    },
    {
        "content": "<p>okay we don't need to get bogged down in this now</p>",
        "id": 212699119,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602167871
    },
    {
        "content": "<p>the important thing is that <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> does seem like they're aware of this</p>",
        "id": 212699154,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602167882
    },
    {
        "content": "<p>I guess the question is whether <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> would like help in working on them</p>",
        "id": 212699186,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602167886
    },
    {
        "content": "<p>true</p>",
        "id": 212699197,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602167891
    },
    {
        "content": "<p>it does sound like <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> might want help reducing <del>#77656</del> <a href=\"https://github.com/rust-lang/rust/issues/77653\">#77653</a> to an MCVE</p>",
        "id": 212699348,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602167957
    },
    {
        "content": "<p>I think <a href=\"https://github.com/rust-lang/rust/issues/77638\">#77638</a> is indeed \"working as intended\" . There's already someone working on minimising <a href=\"https://github.com/rust-lang/rust/issues/77653\">#77653</a>, which is the only thing that I would want help with at the moment.</p>",
        "id": 212699354,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1602167959
    },
    {
        "content": "<p>okay great</p>",
        "id": 212699462,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602168001
    },
    {
        "content": "<p>it would be good to get feedback to the person who posted the question regarding <a href=\"https://github.com/rust-lang/rust/issues/77638\">#77638</a></p>",
        "id": 212699547,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602168021
    },
    {
        "content": "<p>The <a href=\"https://github.com/rust-lang/rust/issues/77656\">#77656</a> example is already fine.</p>",
        "id": 212699573,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1602168028
    },
    {
        "content": "<p>if anyone wants to take a shot at that; that's a task that someone besides <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> could pick up, if they like</p>",
        "id": 212699619,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602168053
    },
    {
        "content": "<p>that's all the P-critical T-compiler bugs</p>",
        "id": 212699680,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602168081
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AP-critical+label%3Alibs-impl\">libs-impl</a></p>\n<ul>\n<li>No <code>P-critical</code> issues for <code>libs-impl</code> this time.</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AP-critical+label%3AT-rustdoc\">T-rustdoc</a></p>\n<ul>\n<li>No <code>P-critical</code> issues for <code>T-rustdoc</code> this time.</li>\n</ul>",
        "id": 212699700,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602168088
    },
    {
        "content": "<h3>P-high regressions</h3>\n<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3Aregression-from-stable-to-beta+label%3AP-high\">P-high beta regressions</a></p>",
        "id": 212699720,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602168096
    },
    {
        "content": "<ul>\n<li>\"Build hang on Linux with nightly and beta toolchains\" <a href=\"https://github.com/rust-lang/rust/issues/76980\">rust#76980</a><ul>\n<li>Unassigned</li>\n<li>Build hangs on beta</li>\n<li><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> bisected it to <a href=\"https://github.com/rust-lang/rust/pull/73526\">rust#73526</a></li>\n<li><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> <a href=\"https://github.com/rust-lang/rust/issues/76980#issuecomment-695805807\">is not aware of any LLVM 11 issue like that </a></li>\n<li>A <a href=\"https://github.com/rust-lang/rust/pull/77642\">possible work-around was added</a> by <span class=\"user-mention\" data-user-id=\"121055\">@Pietro Albini</span> but it doesn't seem to be confirmation if works or not.</li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/76980#issuecomment-705244990\">@**cuviper** believes that the work-around is not the whole story about this issue</a></li>\n</ul>\n</li>\n</ul>",
        "id": 212699745,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602168106
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116118\">Matthew Jasper</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-10-08.20.2354818/near/212699354\">said</a>:</p>\n<blockquote>\n<p>I think <a href=\"https://github.com/rust-lang/rust/issues/77638\">#77638</a> is indeed \"working as intended\" . There's already someone working on minimising <a href=\"https://github.com/rust-lang/rust/issues/77653\">#77653</a>, which is the only thing that I would want help with at the moment.</p>\n</blockquote>\n<p>(I don't want to talk about more in this meeting, but I'd like to understand why and have a canonical example/write-up. That is plausibly something I could try to do just for my own edification.) (EDIT: oh and I see <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> actually had a more minimal example I missed)</p>",
        "id": 212699802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602168122
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/76980\">rust#76980</a> is getting very active investigation, even as we speak</p>",
        "id": 212699961,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602168180
    },
    {
        "content": "<p>I'm not sure there's much for us to discuss here regarding <a href=\"https://github.com/rust-lang/rust/issues/76980\">#76980</a></p>",
        "id": 212700188,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602168274
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3Aregression-from-stable-to-nightly+label%3AP-high+no%3Aassignee\">Unassigned P-high nightly regressions</a></p>\n<ul>\n<li>No unassigned <code>P-high</code> nightly regressions this time.</li>\n</ul>",
        "id": 212700245,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602168297
    },
    {
        "content": "<h2>Performance logs</h2>\n<p>A quiet week. One rather large regression on a synthetic benchmark and a few<br>\nsmall improvements.</p>\n<p><a href=\"https://github.com/rust-lang/rust/issues/77023\">#77023</a> is an interesting case. It encoded an invariant about slice lengths as an <code>assume</code> intrinsic inside <code>len</code> function. It seems to have caused a small compile-time slowdown, but there was no improvement in <code>check</code> build performance (a proxy for generated code quality). In fact, the LLVM documentation <a href=\"https://llvm.org/docs/LangRef.html#llvm-assume-intrinsic\">specifically advises against</a> overuse of the <code>assume</code> intrinsic in cases where the invariant is unlikely to be of much help to the optimizer. That seems to be the case here.</p>",
        "id": 212700283,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602168310
    },
    {
        "content": "<p>Triage done by <strong>@ecstaticmorse</strong>.<br>\nRevision range: <a href=\"https://perf.rust-lang.org/?start=6369a98ebdee8ce01510f5d4307ddb771c8cb0e5&amp;end=ea7e131435a960d154e9a5d6a9297039574ffd7d&amp;absolute=false&amp;stat=instructions%3Au\">6369a98ebdee8ce01510f5d4307ddb771c8cb0e5..ea7e131435a960d154e9a5d6a9297039574ffd7d</a></p>\n<p>1 Regressions, 2 Improvements, 1 Mixed</p>\n<p>1 of them in rollups</p>",
        "id": 212700353,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602168342
    },
    {
        "content": "<h3>Regressions</h3>\n<p><a href=\"https://github.com/rust-lang/rust/issues/77381\">#77381</a> Rollup of 12 pull requests</p>\n<ul>\n<li>Very large regression in <a href=\"https://perf.rust-lang.org/compare.html?start=9bb55dc8642d811d66a7599812009cc063577e00&amp;end=b218b952f800c1160b8b5e764ca651b02d678565&amp;stat=instructions:u\">instruction counts</a> (up to 18.3% on <code>incr-full</code> builds of <code>deeply-nested-debug</code>)</li>\n<li>I suspect <a href=\"https://github.com/rust-lang/rust/pull/76909\">#76909</a>.</li>\n</ul>",
        "id": 212700380,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602168351
    },
    {
        "content": "<h3>Improvements</h3>\n<p><a href=\"https://github.com/rust-lang/rust/issues/77257\">#77257</a> Optimize <code>IntRange::from_pat</code>, then shrink <code>ParamEnv</code></p>\n<ul>\n<li>Moderate improvement in <a href=\"https://perf.rust-lang.org/compare.html?start=fc2daaae610b5515438b551a2f3706196a997f35&amp;end=48cab6744786cdc5cb5428d2b64efc967ae90496&amp;stat=instructions:u\">instruction counts</a> (up to -2.1% on <code>full</code> builds of <code>ctfe-stress-4-check</code>)</li>\n<li>Moderate regression in <a href=\"https://perf.rust-lang.org/compare.html?start=fc2daaae610b5515438b551a2f3706196a997f35&amp;end=48cab6744786cdc5cb5428d2b64efc967ae90496&amp;stat=instructions:u\">instruction counts</a> (up to 1.3% on <code>full</code> builds of <code>unicode_normalization-check</code>)</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/issues/77466\">#77466</a> Re-land PR <a href=\"https://github.com/rust-lang/rust/issues/71840\">#71840</a> (Rework MIR drop tree lowering) <a href=\"https://github.com/rust-lang/rust/issues/77466\">#77466</a></p>\n<ul>\n<li>Moderate regression in <a href=\"https://perf.rust-lang.org/compare.html?start=beb5ae474d2835962ebdf7416bd1c9ad864fe101&amp;end=ced813fec0fb9e883906f18b76d618baf9f5bc08&amp;stat=instructions:u\">instruction counts</a> (up to 2.3% on <code>full</code> builds of <code>regex-opt</code>)</li>\n<li>Moderate improvement in <a href=\"https://perf.rust-lang.org/compare.html?start=beb5ae474d2835962ebdf7416bd1c9ad864fe101&amp;end=ced813fec0fb9e883906f18b76d618baf9f5bc08&amp;stat=instructions:u\">instruction counts</a> (up to -2.2% on <code>incr-unchanged</code> builds of <code>webrender-wrench-opt</code>)</li>\n</ul>",
        "id": 212700413,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602168362
    },
    {
        "content": "<h3>Mixed</h3>\n<p><a href=\"https://github.com/rust-lang/rust/issues/77023\">#77023</a> Hint the maximum length permitted by invariant of slices</p>\n<ul>\n<li>Moderate regression in <a href=\"https://perf.rust-lang.org/compare.html?start=4ccf5f731bb71db3470002d6baf5ab4792b821d9&amp;end=beb5ae474d2835962ebdf7416bd1c9ad864fe101&amp;stat=instructions:u\">instruction counts</a> (up to 2.5% on <code>incr-patched: sparse set</code> builds of <code>regex-opt</code>)</li>\n<li>Moderate improvement in <a href=\"https://perf.rust-lang.org/compare.html?start=4ccf5f731bb71db3470002d6baf5ab4792b821d9&amp;end=beb5ae474d2835962ebdf7416bd1c9ad864fe101&amp;stat=instructions:u\">instruction counts</a> (up to -1.2% on <code>incr-patched: b9b3e592dd cherry picked</code> builds of <code>style-servo-debug</code>)</li>\n</ul>",
        "id": 212700461,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602168371
    },
    {
        "content": "<h3>Nags requiring follow up</h3>\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues/77381\">#77381</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/77023\">#77023</a></li>\n</ul>",
        "id": 212700480,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602168380
    },
    {
        "content": "<p>what was the motivation for <a href=\"https://github.com/rust-lang/rust/issues/77023\">#77023</a>? I guess i'll read the PR</p>",
        "id": 212700574,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602168436
    },
    {
        "content": "<p>\"The additional value range assertions allow some further elision of code branches, including overflow checks, especially in the presence of artithmetic on the indices.\"</p>",
        "id": 212700627,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602168460
    },
    {
        "content": "<p>in other words, from the paragraph above it sounds like maybe it's not actually helping and should be reverted</p>",
        "id": 212700654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602168473
    },
    {
        "content": "<p>but I guess maybe there are specific examples where it helps?</p>",
        "id": 212700666,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602168479
    },
    {
        "content": "<p>you mean this one: \"This may have a performance impact, adding more code to a common method but allowing more optimization. I'm not quite sure, is the Rust side of const-prop strong enough to elide the irrelevant match branches?\" ?</p>",
        "id": 212700730,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602168497
    },
    {
        "content": "<p>I see there are examples in the PR I guess</p>",
        "id": 212700737,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602168501
    },
    {
        "content": "<p>I meant:</p>",
        "id": 212700766,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602168510
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-10-08.20.2354818/near/212700283\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/issues/77023\">#77023</a> is an interesting case. It encoded an invariant about slice lengths as an <code>assume</code> intrinsic inside <code>len</code> function. It seems to have caused a small compile-time slowdown, but there was no improvement in <code>check</code> build performance (a proxy for generated code quality). In fact, the LLVM documentation <a href=\"https://llvm.org/docs/LangRef.html#llvm-assume-intrinsic\">specifically advises against</a> overuse of the <code>assume</code> intrinsic in cases where the invariant is unlikely to be of much help to the optimizer. That seems to be the case here.</p>\n</blockquote>",
        "id": 212700789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602168521
    },
    {
        "content": "<p>it seems like it's a code size optimization</p>",
        "id": 212700814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602168537
    },
    {
        "content": "<p>allowing us to avoid panics from <code>checked_add</code></p>",
        "id": 212700861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602168560
    },
    {
        "content": "<p>in some cases</p>",
        "id": 212700876,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602168568
    },
    {
        "content": "<p>okay so it sounds like we should revert this then.</p>",
        "id": 212701077,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602168643
    },
    {
        "content": "<p>I'm going to assume we won't see push-back from <span class=\"user-mention\" data-user-id=\"229913\">@HeroicKatora</span> , given that they themselves were unsure what the performance impact of this would be.</p>",
        "id": 212701152,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602168678
    },
    {
        "content": "<p>(ah, I see; I think the original description on the PR reflects an earlier version of the code that didn't use the <code>assume</code> intrinsic, and I think that produced an even <em>worse</em> regression, based on the comments I see on the PR itself.)</p>",
        "id": 212701311,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602168738
    },
    {
        "content": "<p>and also: it seems to me like there was a perf run on the first version of this, but not the second? <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> does that sound right to you?</p>",
        "id": 212701364,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602168766
    },
    {
        "content": "<p>hm, perhaps</p>",
        "id": 212701385,
        "sender_full_name": "simulacrum",
        "timestamp": 1602168773
    },
    {
        "content": "<p>(\"right\" as in, did I accurately describe teh events?)</p>",
        "id": 212701408,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602168781
    },
    {
        "content": "<p>I will be honest that I sort of assumed this had good perf effects</p>",
        "id": 212701414,
        "sender_full_name": "simulacrum",
        "timestamp": 1602168783
    },
    {
        "content": "<p>I am fine with a revert though</p>",
        "id": 212701440,
        "sender_full_name": "simulacrum",
        "timestamp": 1602168791
    },
    {
        "content": "<p>I can understand that assumption. :)</p>",
        "id": 212701449,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602168792
    },
    {
        "content": "<p>okay lets revert it.</p>",
        "id": 212701469,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602168799
    },
    {
        "content": "<h2>Nominated Issues</h2>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3AI-nominated+label%3AT-compiler\">T-compiler</a></p>",
        "id": 212701487,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602168811
    },
    {
        "content": "<ul>\n<li>\"<code>use dep1::foo as dep1</code> is considered ambiguous on nightly but not beta\" <a href=\"https://github.com/rust-lang/rust/issues/77586\">rust#77586</a><ul>\n<li><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> explains that the reason of this regression is <a href=\"https://github.com/rust-lang/rust/pull/77421\">rust#77421</a> that addresses <a href=\"https://github.com/rust-lang/rust/issues/74556\">rust#74556</a> which is not <a href=\"https://github.com/rust-lang/rust/issues/77586#issuecomment-703812974\">a bug fix, but rather an implementation of a slightly more conservative language rule giving us some more freedom in the future</a>.</li>\n<li>Reporter mentions that <a href=\"https://github.com/rust-lang/rust/issues/77586#issuecomment-703817449\">fixing to code to make it compile</a> is not a big deal </li>\n<li>We're slighty inclined to either close it or maybe run craterbot over it</li>\n</ul>\n</li>\n</ul>",
        "id": 212701518,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602168825
    },
    {
        "content": "<p>do people have an opinion here?</p>",
        "id": 212701795,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602168915
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-10-08.20.2354818/near/212701469\">said</a>:</p>\n<blockquote>\n<p>okay lets revert it.</p>\n</blockquote>\n<p>(sorry, I was a bit distracted; I'm not sure if revert makes sense, personally)</p>",
        "id": 212701807,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602168918
    },
    {
        "content": "<p>I gues I'd want to dig a bit deeper into which things reverted and how strong the motivation in favor is</p>",
        "id": 212701848,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602168932
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> because the regressions aren't that bad?</p>",
        "id": 212701854,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602168934
    },
    {
        "content": "<p>though I do feel the examples don't feel <em>super</em> persuasive</p>",
        "id": 212701866,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602168938
    },
    {
        "content": "<p>like it seems to be specific to \"checked adds\" of lengths, but I guess that's something that probably happens not infrequently?</p>",
        "id": 212701920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602168961
    },
    {
        "content": "<p>I have to look more closely at what regressed and how much, I'm basically wondering if it's just synthetic things</p>",
        "id": 212702026,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602168988
    },
    {
        "content": "<p>according to <span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> 's summary</p>",
        "id": 212702050,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602168998
    },
    {
        "content": "<p>its only synthetic stuff that improved</p>",
        "id": 212702069,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602169005
    },
    {
        "content": "<p>and there were slowdowns across the board otherwise</p>",
        "id": 212702096,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602169015
    },
    {
        "content": "<p>ok, then I'm convinced I think</p>",
        "id": 212702146,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602169033
    },
    {
        "content": "<p>its based on that summary that I figured we should revert</p>",
        "id": 212702150,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602169035
    },
    {
        "content": "<p>sorry</p>",
        "id": 212702153,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602169035
    },
    {
        "content": "<p>as for <a href=\"https://github.com/rust-lang/rust/issues/77586\">rust#77586</a></p>",
        "id": 212702229,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602169064
    },
    {
        "content": "<p>should we bubble this up to T-lang?</p>",
        "id": 212702259,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602169078
    },
    {
        "content": "<p>I suspect its T-lang's call, not T-compiler's.</p>",
        "id": 212702326,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602169087
    },
    {
        "content": "<p>what do you think, <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ?</p>",
        "id": 212702342,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602169092
    },
    {
        "content": "<p>/me looking</p>",
        "id": 212702430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602169127
    },
    {
        "content": "<p>I was getting a <span aria-label=\"coffee\" class=\"emoji emoji-2615\" role=\"img\" title=\"coffee\">:coffee:</span></p>",
        "id": 212702441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602169131
    },
    {
        "content": "<p>I'm going to tag it T-lang and move on</p>",
        "id": 212702443,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602169131
    },
    {
        "content": "<p>seems fair but we're probably going to want <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span>'s input :)</p>",
        "id": 212702484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602169145
    },
    {
        "content": "<p>ok I See it's already there</p>",
        "id": 212702517,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602169155
    },
    {
        "content": "<p>sure but they wrote their input on the</p>",
        "id": 212702524,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602169157
    },
    {
        "content": "<p>yes</p>",
        "id": 212702526,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602169158
    },
    {
        "content": "<p>yep t-lang</p>",
        "id": 212702529,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602169158
    },
    {
        "content": "<p>(side note: we should probably assign someone to prep before triage meeting to explain)</p>",
        "id": 212702603,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602169185
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3AI-nominated+label%3Alibs-impl\">libs-impl</a></p>\n<ul>\n<li>\"regression 1.46 -&gt; 1.47 big-endian backtrace-related UI tests failing\" <a href=\"https://github.com/rust-lang/rust/issues/77410\">rust#77410</a><ul>\n<li>Looks like there's a regression on Tier 2 platforms: <code>s390x | powerpc | ppc64 | sparc64</code> but OK on 1.46: <code>s390x | ppc64</code></li>\n<li>Could be related to PR <a href=\"https://github.com/rust-lang/rust/pull/74682\">rust#74682</a> and <a href=\"https://github.com/rust-lang/rust/issues/77424\">rust#77424</a></li>\n</ul>\n</li>\n</ul>",
        "id": 212702633,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602169198
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yeah I can do that I think.</p>",
        "id": 212702685,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602169205
    },
    {
        "content": "<p>that is, I can prep</p>",
        "id": 212702703,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602169213
    },
    {
        "content": "<p>oy, if only we had a Tier1 big-endian target</p>",
        "id": 212702846,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602169282
    },
    {
        "content": "<p>(have another mtg, have to go)</p>",
        "id": 212702848,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602169282
    },
    {
        "content": "<p>that would \"solve\" so many problems</p>",
        "id": 212702867,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602169294
    },
    {
        "content": "<p>(or rather, force us to solve them up front. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> )</p>",
        "id": 212702889,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602169303
    },
    {
        "content": "<p>How are we going to address <a href=\"https://github.com/rust-lang/rust/issues/77410\">rust#77410</a></p>",
        "id": 212703011,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602169335
    },
    {
        "content": "<p>It sounds to me like we need to report this upstream to gimili/backtrace/addr2line</p>",
        "id": 212703101,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1602169374
    },
    {
        "content": "<p>I'm assuming that hasn't happened since there's no linked bugs</p>",
        "id": 212703136,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1602169388
    },
    {
        "content": "<p>well we are out of time</p>",
        "id": 212703321,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602169455
    },
    {
        "content": "<p>and honestly I'm not sure what exactly we can discuss there, besides seeing if anyone wants to take on the duty of investigating further and posting bugs upstream</p>",
        "id": 212703373,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602169483
    },
    {
        "content": "<p>If someone does that, great. If no one does, then we'll just leave this nominated for discussion at next week's meeting.</p>",
        "id": 212703448,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602169509
    },
    {
        "content": "<p>thanks to everyone in <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span> for attending!</p>",
        "id": 212703508,
        "sender_full_name": "pnkfelix",
        "timestamp": 1602169526
    },
    {
        "content": "<p>next week we will have checkins from <span class=\"user-group-mention\" data-user-group-id=\"1172\">@WG-async-foundations</span> (cc <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> and <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>) and <span class=\"user-group-mention\" data-user-group-id=\"1187\">@WG-diagnostics</span> (cc <span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span>)</p>",
        "id": 212703720,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602169593
    },
    {
        "content": "<p>letting you all know with time so you can prepare your checkins if you have something to share</p>",
        "id": 212703840,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602169650
    },
    {
        "content": "<p>I could try running some test suite on sparc, but in my memory running rustc on big endian platforms is a fairly clunky experience in the first place, sadly.</p>",
        "id": 212703868,
        "sender_full_name": "nagisa",
        "timestamp": 1602169663
    },
    {
        "content": "<p>next week's agenda will be prepared <a href=\"https://hackmd.io/LydTi9iiR-S1EMUVtIBZxg?both\">here</a></p>",
        "id": 212703871,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602169664
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-10-08.20.2354818/near/212703868\">said</a>:</p>\n<blockquote>\n<p>I could try running some test suite on sparc, but in my memory running rustc on big endian platforms is a fairly clunky experience in the first place, sadly.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> perhaps we can reach out for someone (if any) closer to these Tier2 arch?</p>",
        "id": 212704623,
        "sender_full_name": "apiraino",
        "timestamp": 1602169896
    },
    {
        "content": "<p>I don't believe we have any T2 big endian targets. Aarch64 supports running big endian code but see <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-10-01.20.2354818/near/211995359\">https://rust-lang.zulipchat.com/#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-10-01.20.2354818/near/211995359</a></p>",
        "id": 212704849,
        "sender_full_name": "nagisa",
        "timestamp": 1602170007
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span>  these are all tier-2 big-endian: mips, mips64, powerpc, powerpc64, s390x, sparc64</p>",
        "id": 212707887,
        "sender_full_name": "cuviper",
        "timestamp": 1602171182
    },
    {
        "content": "<p>oh, welp.</p>",
        "id": 212707979,
        "sender_full_name": "nagisa",
        "timestamp": 1602171229
    },
    {
        "content": "<p>they definitely feel like t3 sometimes ^^</p>",
        "id": 212708013,
        "sender_full_name": "nagisa",
        "timestamp": 1602171241
    },
    {
        "content": "<p>I also misinterpreted the original message.</p>",
        "id": 212708155,
        "sender_full_name": "nagisa",
        "timestamp": 1602171297
    },
    {
        "content": "<p>tier-2 is a wide spectrum...</p>",
        "id": 212708361,
        "sender_full_name": "cuviper",
        "timestamp": 1602171387
    },
    {
        "content": "<p>Also <span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> as far as mips and ppc are concerned, they are as hard to come by running in be mode as aarch64. ppc perhaps to a lesser extent but I personally haven't seen any ppc8 or later machines running big endian in my life.</p>",
        "id": 212708525,
        "sender_full_name": "nagisa",
        "timestamp": 1602171479
    },
    {
        "content": "<p>sparc being be only helps as you can be sure that once its sparc its also gonna be bigendian.</p>",
        "id": 212708608,
        "sender_full_name": "nagisa",
        "timestamp": 1602171506
    },
    {
        "content": "<p>RHEL7 is the last to support powerpc64 -- Fedora and RHEL8+ only support powerpc64le</p>",
        "id": 212708656,
        "sender_full_name": "cuviper",
        "timestamp": 1602171532
    },
    {
        "content": "<p>but s390x is here to stay</p>",
        "id": 212708676,
        "sender_full_name": "cuviper",
        "timestamp": 1602171545
    },
    {
        "content": "<p>yep, I don't have access to s390x. Wouldn't mind if IBM gave me some tho ^^</p>",
        "id": 212708760,
        "sender_full_name": "nagisa",
        "timestamp": 1602171583
    },
    {
        "content": "<p>even here at Red Hat (IBM subsidiary), s390x is in short supply</p>",
        "id": 212708890,
        "sender_full_name": "cuviper",
        "timestamp": 1602171631
    },
    {
        "content": "<p>mainframe computing is in a world of its own -- but at least it can still run Linux :)</p>",
        "id": 212709196,
        "sender_full_name": "cuviper",
        "timestamp": 1602171779
    }
]