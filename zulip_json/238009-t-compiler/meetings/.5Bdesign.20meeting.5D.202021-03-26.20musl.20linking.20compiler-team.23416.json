[
    {
        "content": "<p>Design meeting for  Static vs dynamic linking defaults for MUSL targets <a href=\"https://github.com/rust-lang/compiler-team/issues/416\">compiler-team#416</a> will be starting on this topic in about 7 minutes</p>",
        "id": 231967786,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616766801
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span> ^</p>",
        "id": 231967802,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616766809
    },
    {
        "content": "<p>As I mentioned yesterday, I want to try a different opening to this meeting. Rather than opening with announcements, we’re going to allocate some time (maybe 5 to 8 minutes) to read the document that <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> has prepared</p>",
        "id": 231967999,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616766880
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> and others <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 231968098,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1616766917
    },
    {
        "content": "<p>As a way of signalling if people are done reading, we’ll use the following protocol: On <em>this</em> message, when you <em>start</em> reading, click the <span aria-label=\"book\" class=\"emoji emoji-1f4d6\" role=\"img\" title=\"book\">:book:</span>  emoji. (And leave it turned on, so we know the total number of people who started). When you are <em>done</em> reading, click the <span aria-label=\"checkered flag\" class=\"emoji emoji-1f3c1\" role=\"img\" title=\"checkered flag\">:checkered_flag:</span> emoji. That way, the two numbers match before the 8 minutes are up, then we’ll know we can start discussion early.</p>",
        "id": 231968413,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616767043
    },
    {
        "content": "<p>i can link the HackMD if nobody else has it open :)</p>",
        "id": 231968900,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1616767215
    },
    {
        "content": "<blockquote>\n<p>Currently (most of) these targets statically link to musl libc durle that can be desirable to build fully functional statically linked binaries, this creates issues for musl based Linux distros which want to dynamically link libc.</p>\n</blockquote>\n<p>did something get deleted from this sentence? the 'durle' feels like a chunk got cut out</p>",
        "id": 231968971,
        "sender_full_name": "simulacrum",
        "timestamp": 1616767237
    },
    {
        "content": "<p>Yeah, there were a few unintentional edits I think in the last revision so I just reverted those.</p>",
        "id": 231969090,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1616767274
    },
    {
        "content": "<p>during</p>",
        "id": 231969099,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1616767280
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"360752\">Ariadne Conill</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231968900\">said</a>:</p>\n<blockquote>\n<p>i can link the HackMD if nobody else has it open :)</p>\n</blockquote>\n<p>Oh yeah, I meant to link it: <a href=\"https://hackmd.io/YoAGSxUsRWumVvbRiHddrg?view\">https://hackmd.io/YoAGSxUsRWumVvbRiHddrg?view</a></p>",
        "id": 231969156,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616767300
    },
    {
        "content": "<p>oh, hm, I guess there's another case of that for the second option's header</p>",
        "id": 231969180,
        "sender_full_name": "simulacrum",
        "timestamp": 1616767311
    },
    {
        "content": "<p>/me is wondering if we should turn off edit permissions or something</p>",
        "id": 231969203,
        "sender_full_name": "simulacrum",
        "timestamp": 1616767318
    },
    {
        "content": "<p>probably should now</p>",
        "id": 231969258,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616767326
    },
    {
        "content": "<p>but I’m not seeing the reverts</p>",
        "id": 231969281,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616767333
    },
    {
        "content": "<p>by the way, if you hit the <span aria-label=\"checkered flag\" class=\"emoji emoji-1f3c1\" role=\"img\" title=\"checkered flag\">:checkered_flag:</span> , make sure you also have left the <span aria-label=\"book\" class=\"emoji emoji-1f4d6\" role=\"img\" title=\"book\">:book:</span> clicked as well</p>",
        "id": 231969527,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616767425
    },
    {
        "content": "<p>Did the revert work this time?</p>",
        "id": 231969540,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1616767430
    },
    {
        "content": "<p>yes, seems to have</p>",
        "id": 231969641,
        "sender_full_name": "simulacrum",
        "timestamp": 1616767451
    },
    {
        "content": "<p>I've also reset the permissions</p>",
        "id": 231969648,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1616767453
    },
    {
        "content": "<p>/msg nagisa</p>",
        "id": 231969699,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616767470
    },
    {
        "content": "<p>I'm around ^^</p>",
        "id": 231969713,
        "sender_full_name": "nagisa",
        "timestamp": 1616767478
    },
    {
        "content": "<p>i pinged rich in irc</p>",
        "id": 231969732,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1616767487
    },
    {
        "content": "<p>whoops, was going to PM you about my note regarding the two emojis</p>",
        "id": 231969751,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616767495
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231969527\">said</a>:</p>\n<blockquote>\n<p>by the way, if you hit the <span aria-label=\"checkered flag\" class=\"emoji emoji-1f3c1\" role=\"img\" title=\"checkered flag\">:checkered_flag:</span> , make sure you also have left the <span aria-label=\"book\" class=\"emoji emoji-1f4d6\" role=\"img\" title=\"book\">:book:</span> clicked as well</p>\n</blockquote>\n<p>(the intent is that the <span aria-label=\"checkered flag\" class=\"emoji emoji-1f3c1\" role=\"img\" title=\"checkered flag\">:checkered_flag:</span> will eventually equal the <span aria-label=\"book\" class=\"emoji emoji-1f4d6\" role=\"img\" title=\"book\">:book:</span> but never exceed it</p>",
        "id": 231969923,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616767557
    },
    {
        "content": "<p>Oh, I should've checked both.</p>",
        "id": 231969927,
        "sender_full_name": "nagisa",
        "timestamp": 1616767560
    },
    {
        "content": "<p>also tweeted about it so hopefully rich notices it</p>",
        "id": 231970041,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1616767595
    },
    {
        "content": "<p>for people joining late: We are reading the <a href=\"https://hackmd.io/YoAGSxUsRWumVvbRiHddrg?view\">doc</a>; please record that you’ve started reading by following the instructions on <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231968413\">this comment</a></p>",
        "id": 231970092,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616767616
    },
    {
        "content": "<p>okay, so i’ve hit my <span aria-label=\"checkered flag\" class=\"emoji emoji-1f3c1\" role=\"img\" title=\"checkered flag\">:checkered_flag:</span> now, and it looks like everyone who’s started reading has hit it as well</p>",
        "id": 231970420,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616767738
    },
    {
        "content": "<p>Lets start by seeing if there are any questions about the doc itself</p>",
        "id": 231970458,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616767755
    },
    {
        "content": "<p>I wanted to ask: the con for \"Update existing musl targets to be dynamically linked” is \"End users of rustc are impacted and would have to explicitly specify static linking, just like on glibc\"</p>",
        "id": 231970513,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616767776
    },
    {
        "content": "<p>this may be obvious, but I wanted to just make it crystal clear: The end users would have to specify static linking <em>if that is what they want</em>, right?</p>",
        "id": 231970542,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616767798
    },
    {
        "content": "<p>(i.e. if they want to match the behavior on most other rust platforms)</p>",
        "id": 231970603,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616767809
    },
    {
        "content": "<p>via <code>-Ctarget-feature=+crt-static</code>, yes.</p>",
        "id": 231970616,
        "sender_full_name": "nagisa",
        "timestamp": 1616767818
    },
    {
        "content": "<p>its not like “they have to do this and nothing works if they don’t\"</p>",
        "id": 231970651,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616767830
    },
    {
        "content": "<p>because… that wouldn’t make sense to ever propose that, right?</p>",
        "id": 231970705,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616767851
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231970603\">said</a>:</p>\n<blockquote>\n<p>(i.e. if they want to match the behavior on most other rust platforms)</p>\n</blockquote>\n<p>this confuses me - the behavior on most other platforms is dynamic by default. are you saying they'd have to use <code>+crt-static</code> the same way you would on other platforms?</p>",
        "id": 231970730,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616767862
    },
    {
        "content": "<p>I think for some it will end up that way if they don't have musl toolchain.</p>",
        "id": 231970753,
        "sender_full_name": "nagisa",
        "timestamp": 1616767872
    },
    {
        "content": "<p>Hm, well, that depends on whether they have musl in dynamic search path, right?</p>",
        "id": 231970784,
        "sender_full_name": "simulacrum",
        "timestamp": 1616767883
    },
    {
        "content": "<p>(personally I think these sorts of questions would be better answered by changing this on nightly for a week and seeing how many bug reports we get <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> but I'm not on T-compiler so take my opinion with a grain of salt)</p>",
        "id": 231970932,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616767928
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231970730\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231970603\">said</a>:</p>\n<blockquote>\n<p>(i.e. if they want to match the behavior on most other rust platforms)</p>\n</blockquote>\n<p>this confuses me - the behavior on most other platforms is dynamic by default. are you saying they'd have to use <code>+crt-static</code> the same way you would on other platforms?</p>\n</blockquote>\n<p>maybe <em>I’m</em> confused about this.</p>",
        "id": 231971130,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616768012
    },
    {
        "content": "<p>You would have to specify <code>+crt-static</code> to get the behaviour we have today.</p>",
        "id": 231971253,
        "sender_full_name": "nagisa",
        "timestamp": 1616768050
    },
    {
        "content": "<p>“to get the behavior we have today” <em>on musl</em></p>",
        "id": 231971481,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616768139
    },
    {
        "content": "<p>Wow, \"multiple independent copies of the libc linked into the program at runtime\" actually makes my skin crawl. Has that created any runtime/compilation bugs yet, or is it just bloat?</p>",
        "id": 231971490,
        "sender_full_name": "Jubilee",
        "timestamp": 1616768143
    },
    {
        "content": "<p>It is a recurring problem with people attempting to link a static libc and depend on dynamic system libraries. This  typically just doesn't work (e.g. segfaults).</p>",
        "id": 231971669,
        "sender_full_name": "nagisa",
        "timestamp": 1616768206
    },
    {
        "content": "<p>Another question about the doc, or about the proposal, I guess: The change is <em>just</em> about <code>libc</code>, not about other supporting libraries?</p>",
        "id": 231971762,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616768243
    },
    {
        "content": "<p>Outside of <code>musl</code> it ends up being apparent as to why it is happening. With <code>musl</code> the static linking behaviour is the default today so it isn't always obvious.</p>",
        "id": 231971770,
        "sender_full_name": "nagisa",
        "timestamp": 1616768245
    },
    {
        "content": "<p>yes, it is about libc</p>",
        "id": 231971798,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1616768254
    },
    {
        "content": "<p>there's no other libraries as part of musl itself</p>",
        "id": 231971811,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1616768264
    },
    {
        "content": "<p>Okay.</p>",
        "id": 231971829,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616768274
    },
    {
        "content": "<p>we propose rust do whatever it normally does otherwise with other deps</p>",
        "id": 231971895,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1616768290
    },
    {
        "content": "<p>So overall it sounds like: The recommendation, of \"update the existing musl targets to be dynamically linked.”, would both: 1. make our musl-targets more consistent with our other rust targets, and 2. make our musl-targets more consistent with what musl distributions want</p>",
        "id": 231971974,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616768335
    },
    {
        "content": "<p>Yeah, that's a good summary</p>",
        "id": 231972005,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1616768353
    },
    {
        "content": "<p>and the main drawback is that it would change behavior for existing customers of the musl-targets ?</p>",
        "id": 231972012,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616768357
    },
    {
        "content": "<p>AFAIK no one has raised objections to that other than the breaking change, yeah</p>",
        "id": 231972022,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616768365
    },
    {
        "content": "<p>so <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> up above said “just do it in nightly and see who complains\"</p>",
        "id": 231972083,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616768398
    },
    {
        "content": "<p>The recent to flip debuginfo default to <code>-Cdebug-info=packed</code> on macOS was one similar such a breaking change.</p>",
        "id": 231972149,
        "sender_full_name": "nagisa",
        "timestamp": 1616768412
    },
    {
        "content": "<p>do we have any way of knowing how many <del>customers</del> users are solely on stable ?</p>",
        "id": 231972158,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616768415
    },
    {
        "content": "<p>Survey results seem to point at roughly 70%, but it's hard to say</p>",
        "id": 231972251,
        "sender_full_name": "simulacrum",
        "timestamp": 1616768460
    },
    {
        "content": "<p>I think this all sounds totally fine, personally, as long as we make it really clear hwo to bring back the old behavior.</p>",
        "id": 231972271,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616768464
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231972158\">said</a>:</p>\n<blockquote>\n<p>do we have any way of knowing how many <del>customers</del> users are solely on stable ?</p>\n</blockquote>\n<p>No telemetrics in rustc, so only a guess (by e.g. extrapolating from downloads and surveys)</p>",
        "id": 231972277,
        "sender_full_name": "nagisa",
        "timestamp": 1616768466
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231972251\">said</a>:</p>\n<blockquote>\n<p>Survey results seem to point at roughly 70%, but it's hard to say</p>\n</blockquote>\n<p>sorry, I meant musl users in particular. does the survey provide that level of granularity?</p>",
        "id": 231972312,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616768483
    },
    {
        "content": "<p>I don't think so</p>",
        "id": 231972333,
        "sender_full_name": "simulacrum",
        "timestamp": 1616768496
    },
    {
        "content": "<p>yeah, our lack of telemetry really hurts us in cases like this. (Its something that <span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> and I have been discussing)</p>",
        "id": 231972379,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616768519
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231972083\">said</a>:</p>\n<blockquote>\n<p>so <span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> up above said “just do it in nightly and see who complains\"</p>\n</blockquote>\n<p>to expand on that: I feel like the stakeholders who are using static MUSL currently probably don't even know this discussion is happening and I'm slightly wary of a situation like <a href=\"https://github.com/pyca/cryptography/issues/5771\">https://github.com/pyca/cryptography/issues/5771</a> where the first interaction people have is \"my CI is broken and it's your fault\"</p>",
        "id": 231972428,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616768526
    },
    {
        "content": "<p>I'm not sure any of our surveys have ever even asked about targeted platforms to that detail.</p>",
        "id": 231972438,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1616768531
    },
    {
        "content": "<p>correct, i think aligning the rust behavior with that of other libcs is a win-win for everyone, because there are many situations where rust's <code>-musl</code> support is quite broken and results in problems</p>",
        "id": 231972479,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1616768547
    },
    {
        "content": "<p>for example, you can't build a musl-linked firefox with musl rust as supplied through say, <code>rustup</code></p>",
        "id": 231972530,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1616768572
    },
    {
        "content": "<p>We can likely land a future compatibility lint and slowly increase it, right?</p>",
        "id": 231972549,
        "sender_full_name": "simulacrum",
        "timestamp": 1616768580
    },
    {
        "content": "<p>Assuming we go with the the recommendation: What is the experience for a user who <em>doesn’t know about it</em> ?</p>",
        "id": 231972572,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616768591
    },
    {
        "content": "<p>I think someone mentioned landing a warning and then staging it rapidly upwards, yes.</p>",
        "id": 231972591,
        "sender_full_name": "Jubilee",
        "timestamp": 1616768600
    },
    {
        "content": "<p>what rust is doing <em>now</em> is broken.  it only works in the basic case.  if people are doing CI with Alpine, they are using our patched <code>rustc</code> which fixes everything anyway.</p>",
        "id": 231972634,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1616768621
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231972572\">said</a>:</p>\n<blockquote>\n<p>Assuming we go with the the recommendation: What is the experience for a user who <em>doesn’t know about it</em> ?</p>\n</blockquote>\n<p>My impression is that with no work by us, likely a linker error at runtime?</p>",
        "id": 231972640,
        "sender_full_name": "simulacrum",
        "timestamp": 1616768624
    },
    {
        "content": "<p>They silently try to deploy a dynamically linked binary, and then … it always fails when they try to deploy it outside their developemnt environment?</p>",
        "id": 231972643,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616768626
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231972572\">said</a>:</p>\n<blockquote>\n<p>Assuming we go with the the recommendation: What is the experience for a user who <em>doesn’t know about it</em> ?</p>\n</blockquote>\n<p>oh err actually I think I use static musl and forgot about it <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> so I can report on this: the docker image would build fine, but all the people downloading my binary would get linker errors at runtime</p>",
        "id": 231972651,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616768629
    },
    {
        "content": "<p>cryptopgraphy's lesson is that warnings don't help – people don't read ci logs habitually.</p>",
        "id": 231972667,
        "sender_full_name": "nagisa",
        "timestamp": 1616768635
    },
    {
        "content": "<p>I should note that even experienced Rust devs however are prone to expressing surprising that their code fails in CI all of a sudden... because they used <code>#![deny(warnings]</code> &lt;_&lt;;</p>",
        "id": 231972730,
        "sender_full_name": "Jubilee",
        "timestamp": 1616768649
    },
    {
        "content": "<p>(not to say that we shouldn't do it still)</p>",
        "id": 231972745,
        "sender_full_name": "nagisa",
        "timestamp": 1616768655
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231972643\">said</a>:</p>\n<blockquote>\n<p>They silently try to deploy a dynamically linked binary, and then … it always fails when they try to deploy it outside their developemnt environment?</p>\n</blockquote>\n<p>I expect there’s not much we can do to mitigate this.</p>",
        "id": 231972759,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616768658
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"360752\">Ariadne Conill</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231972634\">said</a>:</p>\n<blockquote>\n<p>what rust is doing <em>now</em> is broken.  it only works in the basic case.  if people are doing CI with Alpine, they are using our patched <code>rustc</code> which fixes everything anyway.</p>\n</blockquote>\n<p>I think most users use rustup even on Alpine</p>",
        "id": 231972766,
        "sender_full_name": "Rasmus Thomsen",
        "timestamp": 1616768659
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231972643\">said</a>:</p>\n<blockquote>\n<p>They silently try to deploy a dynamically linked binary, and then … it always fails when they try to deploy it outside their developemnt environment?</p>\n</blockquote>\n<p>it likely won't work locally either, since they don't have musl in their dynamic search path, right?</p>",
        "id": 231972771,
        "sender_full_name": "simulacrum",
        "timestamp": 1616768659
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231972730\">said</a>:</p>\n<blockquote>\n<p>I should note that even experienced Rust devs however are prone to expressing surprising that their code fails in CI all of a sudden... because they used <code>#![deny(warnings]</code> &lt;_&lt;;</p>\n</blockquote>\n<p>this is better than failing at runtime though</p>",
        "id": 231972780,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616768662
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231972771\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231972643\">said</a>:</p>\n<blockquote>\n<p>They silently try to deploy a dynamically linked binary, and then … it always fails when they try to deploy it outside their developemnt environment?</p>\n</blockquote>\n<p>it likely won't work locally either, since they don't have musl in their dynamic search path, right?</p>\n</blockquote>\n<p>I think \"locally\" is nebulous here: when I use static musl I only use it in CI</p>",
        "id": 231972831,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616768686
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"241202\">Rasmus Thomsen</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231972766\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"360752\">Ariadne Conill</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231972634\">said</a>:</p>\n<blockquote>\n<p>what rust is doing <em>now</em> is broken.  it only works in the basic case.  if people are doing CI with Alpine, they are using our patched <code>rustc</code> which fixes everything anyway.</p>\n</blockquote>\n<p>I think most users use rustup even on Alpine</p>\n</blockquote>\n<p>from the CIs i have seen, a lot of them just do <code>apk add rust</code> and roll with it</p>",
        "id": 231972873,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1616768704
    },
    {
        "content": "<p>Your CI is likely a glibc host, though, right? So you don't have musl there either?</p>",
        "id": 231972880,
        "sender_full_name": "simulacrum",
        "timestamp": 1616768707
    },
    {
        "content": "<p>I believe so, yes</p>",
        "id": 231972911,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616768717
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231972771\">said</a>:</p>\n<blockquote>\n<p>it likely won't work locally either, since they don't have musl in their dynamic search path, right?</p>\n</blockquote>\n<p>This is an important point. If its very likely to fail in development, before it ever hits production, then I’m a lot less worried here.</p>",
        "id": 231972948,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616768725
    },
    {
        "content": "<p>oh good point, if I ran the test suite it would fail</p>",
        "id": 231972962,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616768730
    },
    {
        "content": "<p>alpine is increasingly used in github actions</p>",
        "id": 231972967,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1616768732
    },
    {
        "content": "<p>I need to check if I do that for the musl target <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 231972969,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616768734
    },
    {
        "content": "<p>I want to better understand our ability to provide some kind of meaningful/helpful error when people see that linker error, I guess -- it feels pretty bad to just drop it on them</p>",
        "id": 231973116,
        "sender_full_name": "simulacrum",
        "timestamp": 1616768779
    },
    {
        "content": "<p>and I'm not sure a compiler warning at build time will help</p>",
        "id": 231973148,
        "sender_full_name": "simulacrum",
        "timestamp": 1616768790
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231972780\">said</a>:</p>\n<blockquote>\n<p>this is better than failing at runtime though</p>\n</blockquote>\n<p>Yeah, I'm just noting that in a sort of \"people ask which Rust dev hates them before they remember that the Rust dev that hates them IS them\" way. Trust no one not even your own self, etc.</p>",
        "id": 231973163,
        "sender_full_name": "Jubilee",
        "timestamp": 1616768796
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231973116\">said</a>:</p>\n<blockquote>\n<p>I want to better understand our ability to provide some kind of meaningful/helpful error when people see that linker error, I guess -- it feels pretty bad to just drop it on them</p>\n</blockquote>\n<p>I feel this way about a <em>lot</em> of our linker errors.</p>",
        "id": 231973188,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616768807
    },
    {
        "content": "<p>at some points I wonder if we should invest in wrapper scripts to interpret the linker errors from the rust compiler’s point of view.</p>",
        "id": 231973252,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616768832
    },
    {
        "content": "<p>well, the linker error wouldn't be at compile time, right?</p>",
        "id": 231973278,
        "sender_full_name": "simulacrum",
        "timestamp": 1616768845
    },
    {
        "content": "<p>As someone coming to Rust from managed languages, linker errors are the worst part of Rust development.</p>",
        "id": 231973281,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1616768846
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231973278\">said</a>:</p>\n<blockquote>\n<p>well, the linker error wouldn't be at compile time, right?</p>\n</blockquote>\n<p>oh, dynamic linker/loader error. Even better.</p>",
        "id": 231973308,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616768862
    },
    {
        "content": "<p>anyway, a deprecation warning seems like a good way to go.</p>",
        "id": 231973319,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1616768865
    },
    {
        "content": "<p>Better than nothing, for sure.</p>",
        "id": 231973394,
        "sender_full_name": "Jubilee",
        "timestamp": 1616768889
    },
    {
        "content": "<p>Can users opt-in to the \"right\" future behavior today with a rustc flag? -Ctarget-feature=-crt-static?</p>",
        "id": 231973458,
        "sender_full_name": "simulacrum",
        "timestamp": 1616768916
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"360752\">Ariadne Conill</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231973319\">said</a>:</p>\n<blockquote>\n<p>anyway, a deprecation warning seems like a good way to go.</p>\n</blockquote>\n<p>what is going to be the trigger for this warning? Are you suggesting we emit it universally for musl targets?</p>",
        "id": 231973553,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616768953
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231973458\">said</a>:</p>\n<blockquote>\n<p>Can users opt-in to the \"right\" future behavior today with a rustc flag? -Ctarget-feature=-crt-static?</p>\n</blockquote>\n<p>(testing this now)</p>",
        "id": 231973633,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616768983
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231973458\">said</a>:</p>\n<blockquote>\n<p>Can users opt-in to the \"right\" future behavior today with a rustc flag? -Ctarget-feature=-crt-static?</p>\n</blockquote>\n<p>(and if the users choose their opt-in now, in either direction, will that be way to silence the warning?)</p>",
        "id": 231973635,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616768984
    },
    {
        "content": "<p>If users can opt-in, then the trigger may be 'no explicit specification of crt-static', though I admit that feels pretty painful</p>",
        "id": 231973667,
        "sender_full_name": "simulacrum",
        "timestamp": 1616768996
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231973553\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"360752\">Ariadne Conill</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231973319\">said</a>:</p>\n<blockquote>\n<p>anyway, a deprecation warning seems like a good way to go.</p>\n</blockquote>\n<p>what is going to be the trigger for this warning? Are you suggesting we emit it universally for musl targets?</p>\n</blockquote>\n<p>non-musl rustc targeting a -musl target that is currently statically linked?</p>",
        "id": 231973669,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1616768997
    },
    {
        "content": "<p>When this was originally proposed, it was \"without <code>-Ctarget-feature=(+|-)crt-static)</code> specified\"</p>",
        "id": 231973748,
        "sender_full_name": "Jubilee",
        "timestamp": 1616769011
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231973458\">said</a>:</p>\n<blockquote>\n<p>Can users opt-in to the \"right\" future behavior today with a rustc flag? -Ctarget-feature=-crt-static?</p>\n</blockquote>\n<p>The problem with \"opt-in\" is that the user has to explicitly know they're building for a musl based host and AIUI the rustflags don't always get passed down thru the build process right. But I dont have personal experience with this so I may be misunderstanding complains of users who've hit it</p>",
        "id": 231973857,
        "sender_full_name": "Rich Felker",
        "timestamp": 1616769048
    },
    {
        "content": "<p>there is still the issue of \"libc crate embeds a copy of musl\" to attack</p>",
        "id": 231973873,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1616769057
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231973667\">said</a>:</p>\n<blockquote>\n<p>If users can opt-in, then the trigger may be 'no explicit specification of crt-static', though I admit that feels pretty painful</p>\n</blockquote>\n<p>Is it that painful? It reflects that change is coming, and people should specify their intentions.</p>",
        "id": 231973874,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616769058
    },
    {
        "content": "<p>-crt-static should give the expected behaviour, yes.</p>",
        "id": 231973885,
        "sender_full_name": "nagisa",
        "timestamp": 1616769063
    },
    {
        "content": "<p>i propose <code>-embmusl</code> for that specific usecase</p>",
        "id": 231973912,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1616769072
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"360752\">Ariadne Conill</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231973873\">said</a>:</p>\n<blockquote>\n<p>there is still the issue of \"libc crate embeds a copy of musl\" to attack</p>\n</blockquote>\n<p>This wasn’t in the doc, was it?</p>",
        "id": 231973961,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616769092
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"360752\">Ariadne Conill</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231973873\">said</a>:</p>\n<blockquote>\n<p>there is still the issue of \"libc crate embeds a copy of musl\" to attack</p>\n</blockquote>\n<p>I haven't heard about this - how is this different from other targets?</p>",
        "id": 231973966,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616769093
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"360752\">Ariadne Conill</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231973873\">said</a>:</p>\n<blockquote>\n<p>there is still the issue of \"libc crate embeds a copy of musl\" to attack</p>\n</blockquote>\n<p>Oh... I wasn't even aware of that one...</p>",
        "id": 231973973,
        "sender_full_name": "Rich Felker",
        "timestamp": 1616769096
    },
    {
        "content": "<p><span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 231973998,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616769109
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231973961\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"360752\">Ariadne Conill</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231973873\">said</a>:</p>\n<blockquote>\n<p>there is still the issue of \"libc crate embeds a copy of musl\" to attack</p>\n</blockquote>\n<p>This wasn’t in the doc, was it?</p>\n</blockquote>\n<p>yeah that's round 2, baby steps :)</p>",
        "id": 231974014,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1616769113
    },
    {
        "content": "<p>Okay, so as in, this is a separate follow-on change to propose or whatever</p>",
        "id": 231974148,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616769155
    },
    {
        "content": "<p>but its not something whose solution is implied or constrained by what we do here?</p>",
        "id": 231974176,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616769170
    },
    {
        "content": "<p>right?</p>",
        "id": 231974189,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616769175
    },
    {
        "content": "<p>I'm not entirely sure</p>",
        "id": 231974229,
        "sender_full_name": "Rich Felker",
        "timestamp": 1616769189
    },
    {
        "content": "<p>(we can certainly discuss it here, especially since I think we’re making great progress)</p>",
        "id": 231974260,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616769194
    },
    {
        "content": "<p>well both issues need to be fixed, but detangling the targets is the bigger one</p>",
        "id": 231974284,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1616769206
    },
    {
        "content": "<p>if it tries to link this embedded musl (statically) when the target is dynamic, that will produce a very broken binary</p>",
        "id": 231974311,
        "sender_full_name": "Rich Felker",
        "timestamp": 1616769220
    },
    {
        "content": "<p>So it feels like we have rough consensus that we do want to move towards dynamic-by-default, but have several open questions:</p>\n<ul>\n<li>Can we provide nice linker errors, particularly at dynamic library resolution (runtime)?</li>\n<li>Is it easy to opt-in to the proposed future behavior today explicitly? Is it easy to opt-out of the future behavior?</li>\n</ul>",
        "id": 231974365,
        "sender_full_name": "simulacrum",
        "timestamp": 1616769237
    },
    {
        "content": "<p>yes both of those issues are solvable (even with divorcing embedded musl from libc crate)</p>",
        "id": 231974597,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1616769294
    },
    {
        "content": "<p>are we agreed that we <em>will</em> have a warning, triggered by a non-musl host cross-compiling to musl target without specificing linkage for crt?</p>",
        "id": 231974661,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616769307
    },
    {
        "content": "<p>I think at a minimum that's a good idea.</p>",
        "id": 231974750,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1616769332
    },
    {
        "content": "<p>Hm, I am not sure about the cross-compilation piece -- should we not issue the warning on a musl host too? But it seems like a good start.</p>",
        "id": 231974775,
        "sender_full_name": "simulacrum",
        "timestamp": 1616769339
    },
    {
        "content": "<p>Re: errors, the only error if you try to run on a system that doesn't have dynamic linker is ENOENT. there's really no way to change this; it comes from the kernel</p>",
        "id": 231974801,
        "sender_full_name": "Rich Felker",
        "timestamp": 1616769347
    },
    {
        "content": "<p>I think we should warn on all hosts.</p>",
        "id": 231974804,
        "sender_full_name": "nagisa",
        "timestamp": 1616769349
    },
    {
        "content": "<p>Also, just so I’m clear: Why does the warning only have to be on non-musl hosts? Are we not also changing behavior for musl-hosts compiling to musl targets?</p>",
        "id": 231974806,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616769349
    },
    {
        "content": "<p>Heh <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> got there first</p>",
        "id": 231974825,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616769357
    },
    {
        "content": "<p>presumably, if they're on the musl host, they're targeting that musl host?</p>",
        "id": 231974882,
        "sender_full_name": "Jubilee",
        "timestamp": 1616769364
    },
    {
        "content": "<p>Who said cross-compile up above</p>",
        "id": 231974889,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616769368
    },
    {
        "content": "<p>I would want to not issue that warning without a clear, tested, path towards resolving it (i.e., by specifiying the crt-static flag perhaps)</p>",
        "id": 231974922,
        "sender_full_name": "simulacrum",
        "timestamp": 1616769379
    },
    {
        "content": "<p>I think I did</p>",
        "id": 231974927,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1616769380
    },
    {
        "content": "<p>AIUI musl-based hosts are already patching this behavior and don't have the warning</p>",
        "id": 231974961,
        "sender_full_name": "Rich Felker",
        "timestamp": 1616769395
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231974806\">said</a>:</p>\n<blockquote>\n<p>Also, just so I’m clear: Why does the warning only have to be on non-musl hosts? Are we not also changing behavior for musl-hosts compiling to musl targets?</p>\n</blockquote>\n<p>in practice, we (the distros) are already patching both the targets and the libc crate</p>",
        "id": 231975001,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1616769406
    },
    {
        "content": "<p>so I don't think the change will be unexpected</p>",
        "id": 231975003,
        "sender_full_name": "Rich Felker",
        "timestamp": 1616769407
    },
    {
        "content": "<p>With my assumption being that if you're already on a musl-host and you have rustc working, you probably know what you're doing.</p>",
        "id": 231975006,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1616769408
    },
    {
        "content": "<p>Hmm.</p>",
        "id": 231975043,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616769421
    },
    {
        "content": "<p>Rust users often use <code>rustup</code>, since that is conventional on most hosts.</p>",
        "id": 231975071,
        "sender_full_name": "Jubilee",
        "timestamp": 1616769431
    },
    {
        "content": "<p>So the question is whether they are compiling for host target (no <code>--target</code> flag at all), or their <code>--target</code> flag just happens to match their host.</p>",
        "id": 231975084,
        "sender_full_name": "nagisa",
        "timestamp": 1616769437
    },
    {
        "content": "<p>Former probably doesn't need to warn, but latter should regardless of what the host is.</p>",
        "id": 231975174,
        "sender_full_name": "nagisa",
        "timestamp": 1616769467
    },
    {
        "content": "<p>are musl-hosts already using the (+|-)crt-static flag as it is?</p>",
        "id": 231975180,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616769469
    },
    {
        "content": "<p>They add new targets today, AFAIU. These targets AFAICT only differ in the option equivalent to that flag.</p>",
        "id": 231975243,
        "sender_full_name": "nagisa",
        "timestamp": 1616769482
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231975071\">said</a>:</p>\n<blockquote>\n<p>Rust users often use <code>rustup</code>, since that is conventional on most hosts.</p>\n</blockquote>\n<p>yes, so a warning makes sense for those users (and it also makes sense to align the behavior)</p>",
        "id": 231975311,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1616769504
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231975243\">said</a>:</p>\n<blockquote>\n<p>They add new targets today, AFAIU</p>\n</blockquote>\n<p>it's a mix; alpine and adelie add new targets.  void linux patches.  i don't know what the smaller distros are doing.</p>",
        "id": 231975401,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1616769537
    },
    {
        "content": "<p>Yeah, in this case it <em>does</em> make sense to warn even if we're compiling from musl to musl <em>if</em> the user is using The Canonical Rust.</p>",
        "id": 231975454,
        "sender_full_name": "Jubilee",
        "timestamp": 1616769555
    },
    {
        "content": "<p>we all patch the libc crate though :)</p>",
        "id": 231975471,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1616769559
    },
    {
        "content": "<p>as opposed to a fanonical one.</p>",
        "id": 231975487,
        "sender_full_name": "Jubilee",
        "timestamp": 1616769564
    },
    {
        "content": "<p>yup, because we can just patch the warning out</p>",
        "id": 231975504,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1616769571
    },
    {
        "content": "<p>“fanonical” …?</p>",
        "id": 231975514,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616769576
    },
    {
        "content": "<p>\"made by fans\", as opposed to canonical.</p>",
        "id": 231975573,
        "sender_full_name": "Laurent Bercot",
        "timestamp": 1616769595
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231975514\">said</a>:</p>\n<blockquote>\n<p>“fanonical” …?</p>\n</blockquote>\n<p>unofficial/'fan'</p>",
        "id": 231975581,
        "sender_full_name": "Síle Ekaterin Aman",
        "timestamp": 1616769597
    },
    {
        "content": "<p>patched compilers are fan fiction. :^) (specifically, \"fix fic\")</p>",
        "id": 231975589,
        "sender_full_name": "Jubilee",
        "timestamp": 1616769600
    },
    {
        "content": "<p>gotcha</p>",
        "id": 231975591,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616769600
    },
    {
        "content": "<p>Okay, so it sounds iike the Rust project itself can warn on all hosts (that target musl, i.e. where this behavior is going to change), and the warning is silenced by explicitly choosing (+|-)crt-static. If patchers want to cut the warning out, they can make that decision</p>",
        "id": 231975735,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616769631
    },
    {
        "content": "<p>is there anyone who sees a problem with that ?</p>",
        "id": 231975785,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616769645
    },
    {
        "content": "<p>Okay.</p>",
        "id": 231975862,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616769675
    },
    {
        "content": "<p>seems like a reasonable proposal, lets wait for Erico from void though</p>",
        "id": 231975868,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1616769677
    },
    {
        "content": "<p>Is it <code>rustc</code> or <code>cargo</code> that prints a warning?</p>",
        "id": 231975880,
        "sender_full_name": "Érico Nogueira Rolim",
        "timestamp": 1616769683
    },
    {
        "content": "<p>I was assuming it would be <code>rustc</code> but that is a good question.</p>",
        "id": 231975923,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616769696
    },
    {
        "content": "<p>it might even be a future-incompat warning.</p>",
        "id": 231975955,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616769710
    },
    {
        "content": "<p>I do wonder if we should do more. Like make the warning a hard error for a release and force current users to specify <code>(+|-)crt-static</code> before we switch the defaults.</p>",
        "id": 231975973,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1616769714
    },
    {
        "content": "<p>Cargo doesn't have the necessary information to reliably emit such a warning.</p>",
        "id": 231975976,
        "sender_full_name": "nagisa",
        "timestamp": 1616769715
    },
    {
        "content": "<p>rustc doing the printing could get very noisy (since it's one for every crate), cargo printing it once at build time is smaller.</p>",
        "id": 231976069,
        "sender_full_name": "Érico Nogueira Rolim",
        "timestamp": 1616769737
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231975955\">said</a>:</p>\n<blockquote>\n<p>it might even be a future-incompat warning.</p>\n</blockquote>\n<p>(whcih cargo … either will, or does, treat specially)</p>",
        "id": 231976073,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616769738
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"396723\">Érico Nogueira Rolim</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231976069\">said</a>:</p>\n<blockquote>\n<p>rustc doing the printing could get very noisy (since it's one for every crate), cargo printing it once at build time is smaller.</p>\n</blockquote>\n<p>right, a future-incompat warning is meant to address this, in theory</p>",
        "id": 231976122,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616769758
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> I think that hits the same problem <span class=\"user-mention\" data-user-id=\"396976\">@Rich Felker</span> was talking about that it's hard to pass flags to build scripts</p>",
        "id": 231976131,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616769762
    },
    {
        "content": "<p>ugh foiled again by build scripts</p>",
        "id": 231976194,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1616769787
    },
    {
        "content": "<p>(but I don’t remember what the current state of the future-incompat diagnostic work is on the cargo side),</p>",
        "id": 231976202,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616769789
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"396723\">Érico Nogueira Rolim</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231976069\">said</a>:</p>\n<blockquote>\n<p>rustc doing the printing could get very noisy (since it's one for every crate), cargo printing it once at build time is smaller.</p>\n</blockquote>\n<p>I agree that cargo would be better at handling this, but <code>rustc</code> is capable of being used independently.</p>",
        "id": 231976234,
        "sender_full_name": "Jubilee",
        "timestamp": 1616769800
    },
    {
        "content": "<p>There needs to be some top-level build way to ensure that the output is static linked</p>",
        "id": 231976236,
        "sender_full_name": "Rich Felker",
        "timestamp": 1616769803
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> it's implemented but you have to opt in explicitly</p>",
        "id": 231976239,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616769806
    },
    {
        "content": "<p>This has long been a problem with C build systems using libtool too, where you typically needed hacks like <code>LDFLAGS=\"-static --static -Wl,-static\"</code></p>",
        "id": 231976317,
        "sender_full_name": "Rich Felker",
        "timestamp": 1616769834
    },
    {
        "content": "<p>Well, I want to be clear that if we issue the warning, I think that warning absolutely must have tested paths for both directions (and instructions for what to do to get a dynamic musl, perhaps, at least on common glibc hosts)</p>",
        "id": 231976323,
        "sender_full_name": "simulacrum",
        "timestamp": 1616769835
    },
    {
        "content": "<p>(I really wish \"reply\" worked on mobile ...)</p>",
        "id": 231976386,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616769844
    },
    {
        "content": "<p>I'm not sure what the state of making that work on rust is</p>",
        "id": 231976533,
        "sender_full_name": "Rich Felker",
        "timestamp": 1616769890
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"396976\">Rich Felker</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231976236\">said</a>:</p>\n<blockquote>\n<p>There needs to be some top-level build way to ensure that the output is static linked</p>\n</blockquote>\n<p>you’re talking about this, right?</p>",
        "id": 231976557,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616769901
    },
    {
        "content": "<p>yes</p>",
        "id": 231976594,
        "sender_full_name": "Rich Felker",
        "timestamp": 1616769916
    },
    {
        "content": "<p>“Top-level” to me makes it sound like a cargo issue.</p>",
        "id": 231976650,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616769936
    },
    {
        "content": "<p>but maybe you are concerned about non-cargo users of rust as well…?</p>",
        "id": 231976676,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616769948
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"396976\">Rich Felker</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231976533\">said</a>:</p>\n<blockquote>\n<p>I'm not sure what the state of making that work on rust is</p>\n</blockquote>\n<p>I'm not entirely sure what those LDFLAGS are doing but you could pass them through to the linker with -Clink-args</p>",
        "id": 231976750,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616769963
    },
    {
        "content": "<p>I'm not sure. I haven't used rust and cargo enough to know</p>",
        "id": 231976763,
        "sender_full_name": "Rich Felker",
        "timestamp": 1616769966
    },
    {
        "content": "<p>It sounds like there is a concern here that we might need to dig into, but I’m not sure if we need to do so in this meeting?</p>",
        "id": 231976839,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616769989
    },
    {
        "content": "<p>Problem with the rust flags passed through environment variables is that if you build with <code>--target</code>, cargo won't apply those flags for code that its building for the host (build scripts, procmacros etc).</p>",
        "id": 231976870,
        "sender_full_name": "nagisa",
        "timestamp": 1616770000
    },
    {
        "content": "<p>i think rustc makes more sense for the warning anyway, it's better to spam the warning than not.</p>",
        "id": 231976918,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1616770023
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231976870\">said</a>:</p>\n<blockquote>\n<p>Problem with the rust flags passed through environment variables is that if you build with <code>--target</code>, cargo won't apply those flags for code that its building for the host.</p>\n</blockquote>\n<p>this has been mentioned a few times now: I really think we should fix this in cargo, or at least add <em>some</em> way to pass flags to build scripts</p>",
        "id": 231976925,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616770025
    },
    {
        "content": "<p>I want to make sure we resolve the open questions about both 1. the recommended proposal, and 2. this libc carrying embedded musl thing that <span class=\"user-mention\" data-user-id=\"360752\">@Ariadne Conill</span> mentioned.</p>",
        "id": 231976928,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616770026
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> has said the same on github: <a href=\"https://github.com/rust-lang/rust/pull/82556#issuecomment-788324429\">https://github.com/rust-lang/rust/pull/82556#issuecomment-788324429</a></p>",
        "id": 231977002,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616770049
    },
    {
        "content": "<p>so what does the libc-embedding-musl thing do exactly?</p>",
        "id": 231977013,
        "sender_full_name": "Jubilee",
        "timestamp": 1616770051
    },
    {
        "content": "<p>silly question: isn't there a verbosity setting that would silence the warning?</p>",
        "id": 231977039,
        "sender_full_name": "Laurent Bercot",
        "timestamp": 1616770057
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231976925\">said</a>:</p>\n<blockquote>\n<p>this has been mentioned a few times now: I really think we should fix this in cargo, or at least add <em>some</em> way to pass flags to build scripts</p>\n</blockquote>\n<p>Yeah, it was a response in <code>-Clink-args</code> etc. Passing any flag like this is complicated by the limitation we have right now.</p>",
        "id": 231977047,
        "sender_full_name": "nagisa",
        "timestamp": 1616770061
    },
    {
        "content": "<p>I'm bringing this up because, while I really want to solve the issue this meeting is for and make -musl targets behave like other ones and be dynamic-linked by default, if there's no working way for users to request static linking, we might break the ability of users to get static-linked binaries that was working for them before with musl</p>",
        "id": 231977052,
        "sender_full_name": "Rich Felker",
        "timestamp": 1616770066
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"360752\">Ariadne Conill</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231976918\">said</a>:</p>\n<blockquote>\n<p>i think rustc makes more sense for the warning anyway, it's better to spam the warning than not.</p>\n</blockquote>\n<p>That's a fair point. A top level warning from cargo could still be missed.</p>",
        "id": 231977087,
        "sender_full_name": "Érico Nogueira Rolim",
        "timestamp": 1616770082
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"400781\">Laurent Bercot</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231977039\">said</a>:</p>\n<blockquote>\n<p>silly question: isn't there a verbosity setting that would silence the warning?</p>\n</blockquote>\n<p>It would depend on the nature of the warning.</p>",
        "id": 231977097,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616770082
    },
    {
        "content": "<p>I think this is probably not a real issue except for possibly suboptimal UX requesting the static link but I'm not sure so I want to check and make sure it's possible to get static linking still.</p>",
        "id": 231977137,
        "sender_full_name": "Rich Felker",
        "timestamp": 1616770089
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231977013\">said</a>:</p>\n<blockquote>\n<p>so what does the libc-embedding-musl thing do exactly?</p>\n</blockquote>\n<p>when libc crate is linked, it links against <code>libc.a</code> directly.  we would want to change that to link against <code>libc.a</code> or <code>libc.so</code> at final link time.</p>",
        "id": 231977167,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1616770102
    },
    {
        "content": "<p>(in fact this is what the patches do now)</p>",
        "id": 231977254,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1616770136
    },
    {
        "content": "<p>what is the difference between \"when the crate is linked\" and \"final link time\"?</p>",
        "id": 231977255,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616770137
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"400781\">Laurent Bercot</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231977039\">said</a>:</p>\n<blockquote>\n<p>silly question: isn't there a verbosity setting that would silence the warning?</p>\n</blockquote>\n<p>(if you’re curious, I’m happy to follow-up with you after the meeting to discuss our systems with cap-lints and future-incompat warning summarys)</p>",
        "id": 231977287,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616770149
    },
    {
        "content": "<p>when the rust program is linked</p>",
        "id": 231977290,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1616770151
    },
    {
        "content": "<p>e.g. <code>rustc hello.rs</code> or whatever</p>",
        "id": 231977358,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1616770178
    },
    {
        "content": "<p>i.e. you want a crate to be able to schedule a linker flag for the future final binary</p>",
        "id": 231977393,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616770193
    },
    {
        "content": "<p>yes, depending on <code>+/-crt-static</code></p>",
        "id": 231977457,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1616770205
    },
    {
        "content": "<p>Does that mean the system libc still gets used too, i.e. effectively <code>ld -o out foo.o my/libc.a bar.o -lc</code> ?</p>",
        "id": 231977460,
        "sender_full_name": "Rich Felker",
        "timestamp": 1616770205
    },
    {
        "content": "<p>yep</p>",
        "id": 231977479,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1616770212
    },
    {
        "content": "<p>If we want to give users actionable and directed suggestions on how to address the warning, I feel like there's no other way than to add some support to cargo too – users of cargo need different guidance than those who are using rustc directly.</p>",
        "id": 231977486,
        "sender_full_name": "nagisa",
        "timestamp": 1616770214
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"360752\">Ariadne Conill</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231977290\">said</a>:</p>\n<blockquote>\n<p>when the rust program is linked</p>\n</blockquote>\n<p>right I get that - my point is that I don't think rustc runs the linker at <em>all</em> for dependencies</p>",
        "id": 231977534,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616770230
    },
    {
        "content": "<p>so I'm not sure what you mean by \"when the crate is linked\"</p>",
        "id": 231977558,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616770239
    },
    {
        "content": "<p>OK, that's highly broken. You can't be potentially linking 2 different libc's in the same program because libc is a big singleton with internal interface surface that's not stable across versions</p>",
        "id": 231977572,
        "sender_full_name": "Rich Felker",
        "timestamp": 1616770245
    },
    {
        "content": "<p>I think what <span class=\"user-mention\" data-user-id=\"360752\">@Ariadne Conill</span> is trying to get at is that you can't put <code>libc.a</code> on the link command line. The only way to use an alt <code>libc.a</code> is to put it in the library path before the system lib path so that the final <code>-lc</code> picks it up.</p>",
        "id": 231977657,
        "sender_full_name": "Rich Felker",
        "timestamp": 1616770287
    },
    {
        "content": "<p>(Or use <code>-nostdlib</code> or rust's equivalent to ensure the system libc never gets linked)</p>",
        "id": 231977722,
        "sender_full_name": "Rich Felker",
        "timestamp": 1616770316
    },
    {
        "content": "<p>basically, we need this: <a href=\"https://git.alpinelinux.org/aports/tree/community/rust/link-musl-dynamically.patch\">https://git.alpinelinux.org/aports/tree/community/rust/link-musl-dynamically.patch</a></p>",
        "id": 231977728,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1616770321
    },
    {
        "content": "<p>i don't know how to explain what that does in rust terms, i just know it makes the embedded libc go away</p>",
        "id": 231977867,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1616770360
    },
    {
        "content": "<p>ah hmm ok, libc is printing <code>cargo:rustc-link-lib=static=libc.a</code> or something</p>",
        "id": 231977874,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616770363
    },
    {
        "content": "<p>which sort of \"queues\" the link arg for when the linker is run</p>",
        "id": 231977909,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616770381
    },
    {
        "content": "<p>that “static” vs “static-nobundle” distinction in the patch that <span class=\"user-mention\" data-user-id=\"360752\">@Ariadne Conill</span> seems relevant</p>",
        "id": 231978042,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616770439
    },
    {
        "content": "<p>i don't know what the patch does, i didn't write it :)</p>",
        "id": 231978129,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1616770456
    },
    {
        "content": "<p>i am sure you all know what it does</p>",
        "id": 231978144,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1616770464
    },
    {
        "content": "<p>Nope</p>",
        "id": 231978155,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616770469
    },
    {
        "content": "<p>Anyway: We’ve got five minutes left in the meeting, so I want to try to establish the action items and/or follow-up work, hopefully with owners</p>",
        "id": 231978196,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616770489
    },
    {
        "content": "<p>We have rough agreement on the proposal itself, I think.</p>",
        "id": 231978230,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616770502
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> do you think it should go through MCP process too?</p>",
        "id": 231978260,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616770513
    },
    {
        "content": "<p>I suspect we would be well-served by putting it up as an MCP</p>",
        "id": 231978306,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616770527
    },
    {
        "content": "<p>from what I can tell with the target changes the libc code to support musl can become the same as that for glibc (sans the exact set of libraries linked): <a href=\"https://github.com/rust-lang/libc/blob/master/src/unix/mod.rs#L305-L330\">https://github.com/rust-lang/libc/blob/master/src/unix/mod.rs#L305-L330</a></p>",
        "id": 231978307,
        "sender_full_name": "nagisa",
        "timestamp": 1616770527
    },
    {
        "content": "<p>Being pessimistic, any idea what we'd do if enabling this on nightly leads to a deluge of complaints?</p>",
        "id": 231978328,
        "sender_full_name": "Érico Nogueira Rolim",
        "timestamp": 1616770536
    },
    {
        "content": "<p>I think that would be useful if for no other reason than to make sure we're all on the same page about the overall plan here.</p>",
        "id": 231978353,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1616770547
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"396723\">Érico Nogueira Rolim</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231978328\">said</a>:</p>\n<blockquote>\n<p>Being pessimistic, any idea what we'd do if enabling this on nightly leads to a deluge of complaints?</p>\n</blockquote>\n<p>I’d say we’d revert the PR and schedule another meetng.</p>",
        "id": 231978414,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616770563
    },
    {
        "content": "<p>I don't see it leading to complaints from people actually using the configurations in question</p>",
        "id": 231978422,
        "sender_full_name": "Rich Felker",
        "timestamp": 1616770564
    },
    {
        "content": "<p>I think we should have an FCP, and potentially even a short blog post on <a href=\"http://blog.rust-lang.org\">blog.rust-lang.org</a> once we're ready to move ahead with a warning, to give a heads up and guidance</p>",
        "id": 231978465,
        "sender_full_name": "simulacrum",
        "timestamp": 1616770583
    },
    {
        "content": "<p>presumably if there was some breakage, we would back out and decide how to solve it</p>",
        "id": 231978478,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1616770590
    },
    {
        "content": "<p>okay, so an MCP with full team FCP check-off process.</p>",
        "id": 231978490,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616770597
    },
    {
        "content": "<p>If people have CI test stuff setup for systems they're not actually using and haven't actually done any real world tests on, it could plausibly break those, but they didn't know what they were testing to begin with.</p>",
        "id": 231978500,
        "sender_full_name": "Rich Felker",
        "timestamp": 1616770601
    },
    {
        "content": "<p>who wants to own writing the MCP? it seems like it could be adapted from the doc for today, with some adjustments to clarify some of the points</p>",
        "id": 231978598,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616770652
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"396976\">Rich Felker</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231978500\">said</a>:</p>\n<blockquote>\n<p>If people have CI test stuff setup for systems they're not actually using and haven't actually done any real world tests on, it could plausibly break those, but they didn't know what they were testing to begin with.</p>\n</blockquote>\n<p>I think this describes a lot of CI though <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> I looked at my .github/workflows and it turns out I don't run tests on musl, just on glibc</p>",
        "id": 231978606,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616770654
    },
    {
        "content": "<blockquote>\n<p>I think this describes a lot of CI though</p>\n</blockquote>\n<p>Absolutely. I've been dealing with this a lot lately..</p>",
        "id": 231978647,
        "sender_full_name": "Rich Felker",
        "timestamp": 1616770670
    },
    {
        "content": "<p>personally I can fix the breakage easily but I'd expect it to be pretty common</p>",
        "id": 231978666,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616770679
    },
    {
        "content": "<p>what is an MCP?</p>",
        "id": 231978715,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1616770684
    },
    {
        "content": "<p>a Major Change Proposal</p>",
        "id": 231978732,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616770690
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"360752\">Ariadne Conill</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231978715\">said</a>:</p>\n<blockquote>\n<p>what is an MCP?</p>\n</blockquote>\n<p><a href=\"https://forge.rust-lang.org/compiler/mcp.html\">https://forge.rust-lang.org/compiler/mcp.html</a></p>",
        "id": 231978749,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616770696
    },
    {
        "content": "<p>its meant to be a lightweight alternative to our RFC process</p>",
        "id": 231978766,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616770702
    },
    {
        "content": "<p>Is this really a \"major change\"?</p>",
        "id": 231978809,
        "sender_full_name": "Rich Felker",
        "timestamp": 1616770721
    },
    {
        "content": "<p>before we commit to MCP, it would be nice to hear from <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> first</p>",
        "id": 231978828,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1616770731
    },
    {
        "content": "<p>I'm not familiar with how rust classifies this stuff but I would consider it a very minor one. And more akin to a bugfix.</p>",
        "id": 231978856,
        "sender_full_name": "Rich Felker",
        "timestamp": 1616770740
    },
    {
        "content": "<p>There's also the automated binary generation that some projects do, and I doubt they get to test all of them.</p>",
        "id": 231978874,
        "sender_full_name": "Érico Nogueira Rolim",
        "timestamp": 1616770750
    },
    {
        "content": "<p>In some ways, \"minor change proposal\" might be a more accurate name.</p>",
        "id": 231978877,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1616770752
    },
    {
        "content": "<p>the idea is that the MCP is a proposal; it gives structure to getting feedback from stakeholders <em>like</em> <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span></p>",
        "id": 231978891,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616770758
    },
    {
        "content": "<p>i would rather not start a huge bureaucratic process to have the original author come and object at the last moment</p>",
        "id": 231978898,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1616770760
    },
    {
        "content": "<p>I would not describe any breaking change as minor</p>",
        "id": 231978902,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616770762
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"360752\">Ariadne Conill</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231978898\">said</a>:</p>\n<blockquote>\n<p>i would rather not start a huge bureaucratic process to have the original author come and object at the last moment</p>\n</blockquote>\n<p>MCPs are specifically designed <em>not</em> to be huge and bureaucratic</p>",
        "id": 231979003,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616770798
    },
    {
        "content": "<p>you just open a github issue and it starts a zulip thread</p>",
        "id": 231979073,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616770808
    },
    {
        "content": "<p>Change proposals are just \"hear ye, hear ye, this is what we're planning on doing, is there anyone who says aye?\"</p>",
        "id": 231979113,
        "sender_full_name": "Jubilee",
        "timestamp": 1616770813
    },
    {
        "content": "<p>okay i will take your word on it :)</p>",
        "id": 231979128,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1616770816
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"360752\">@Ariadne Conill</span> are you offering to own creating an MCP after you talk to <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> ?</p>",
        "id": 231979131,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616770818
    },
    {
        "content": "<p>because while I agree with <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> that this is not a big bureaucratic thing</p>",
        "id": 231979169,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616770832
    },
    {
        "content": "<p>I also am happy to let people get whatever informal input they want</p>",
        "id": 231979204,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616770842
    },
    {
        "content": "<p>as long as they’re willing to follow-through</p>",
        "id": 231979228,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616770850
    },
    {
        "content": "<p>Well binutils has made changes to target link defaults (like <code>separate-code</code>) that are comparably \"breaking\" (very little, but possibly to some users with niche needs) with no big deal made over it whatsoever. So that's the standard I'm comparing to.</p>",
        "id": 231979252,
        "sender_full_name": "Rich Felker",
        "timestamp": 1616770856
    },
    {
        "content": "<p>i feel like it would be nice to include his input before just blindsiding him with an announcement, but i think you all should do what you think is best :)</p>",
        "id": 231979294,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1616770868
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"396976\">Rich Felker</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231978856\">said</a>:</p>\n<blockquote>\n<p>I'm not familiar with how rust classifies this stuff but I would consider it a very minor one. And more akin to a bugfix.</p>\n</blockquote>\n<p>I'm thinking of it as bug-compatible backward compatibility. At random, one project like <a href=\"https://github.com/lunaryorn/mdcat\">https://github.com/lunaryorn/mdcat</a> uses musl targets to deliver self contained binaries you can drop anywhere and have them work. So if they don't do adequate testing and expect things to just chug along, they will be surprised</p>",
        "id": 231979335,
        "sender_full_name": "Érico Nogueira Rolim",
        "timestamp": 1616770882
    },
    {
        "content": "<p>okay well the hour is up</p>",
        "id": 231979358,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616770890
    },
    {
        "content": "<p>on the other hand, there have been several meetings so :)</p>",
        "id": 231979376,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1616770894
    },
    {
        "content": "<p>the main two items I <em>wanted</em> to address were 1. creating an MCP, and 2. maybe having a follow-up meeting about this libc-embeds-musl thing</p>",
        "id": 231979422,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616770919
    },
    {
        "content": "<p>I think creating an MCP for the proposed plan and making sure <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> is aware of it is fine.</p>",
        "id": 231979528,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1616770946
    },
    {
        "content": "<blockquote>\n<p>So if they don't do adequate testing and expect things to just chug along, they will be surprised</p>\n</blockquote>\n<p>If they're not using a distro-patched rust though they probably already have Frankenstein libc linking mixing the host libc and libc crate tho, no? That would potentially have all kinds of silent breakage...</p>",
        "id": 231979579,
        "sender_full_name": "Rich Felker",
        "timestamp": 1616770967
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> How about if I write an MCP by adapting the text from the doc for today.</p>",
        "id": 231979600,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616770975
    },
    {
        "content": "<p>And if they are using a distro-patched rust they already have the new behavior.</p>",
        "id": 231979615,
        "sender_full_name": "Rich Felker",
        "timestamp": 1616770986
    },
    {
        "content": "<p>That's great. Thanks <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span></p>",
        "id": 231979631,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1616770988
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"396976\">Rich Felker</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231979579\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>So if they don't do adequate testing and expect things to just chug along, they will be surprised</p>\n</blockquote>\n<p>If they're not using a distro-patched rust though they probably already have Frankenstein libc linking mixing the host libc and libc crate tho, no? That would potentially have all kinds of silent breakage...</p>\n</blockquote>\n<p>I am really unsure when and how two libcs would be linked into the same program. I think it would be helpful to come up with an MCVE</p>",
        "id": 231979687,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616771003
    },
    {
        "content": "<p>Please make sure <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> is explicitly pinged in the MCP though :)</p>",
        "id": 231979714,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1616771013
    },
    {
        "content": "<p>if someone else wants to prpose a follow-up meeting about <code>libc</code>, feel free.</p>",
        "id": 231979716,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616771014
    },
    {
        "content": "<p>I will privmsg Alex to make sure he's aware once it's posted.</p>",
        "id": 231979800,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1616771043
    },
    {
        "content": "<p>GH notifications get lost</p>",
        "id": 231979843,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1616771059
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"396976\">Rich Felker</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231979579\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>So if they don't do adequate testing and expect things to just chug along, they will be surprised</p>\n</blockquote>\n<p>If they're not using a distro-patched rust though they probably already have Frankenstein libc linking mixing the host libc and libc crate tho, no? That would potentially have all kinds of silent breakage...</p>\n</blockquote>\n<p>also I think this assumes you're building on musl? which I wouldn't expect CI to do most of the time</p>",
        "id": 231979845,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616771059
    },
    {
        "content": "<p>overall, thanks to everyone in <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span> for attending! And also, thanks to everyone who helped make the doc, and to everyone for being willing to experiment with this “read then talk” thing that I adapted from Amazon procedures.</p>",
        "id": 231979856,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616771064
    },
    {
        "content": "<p>I don't think it is necessary, I think addressing libc makes sense as part of the initial MCP, since we already have an answer of how it should look.</p>",
        "id": 231979866,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1616771067
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"360752\">Ariadne Conill</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231979866\">said</a>:</p>\n<blockquote>\n<p>I don't think it is necessary, I think addressing libc makes sense as part of the initial MCP, since we already have an answer of how it should look.</p>\n</blockquote>\n<p>I’m not prepared to make it part of any MCP that I write, because it wasn’t part of the original doc.</p>",
        "id": 231979938,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616771095
    },
    {
        "content": "<p>but I’m happy to get input on how to adapt it</p>",
        "id": 231979957,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616771103
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> reproducer is pretty simple: have a DSO that depends on the dynamic libc and link the DSO into a program that embeds a static libc.</p>",
        "id": 231979964,
        "sender_full_name": "nagisa",
        "timestamp": 1616771109
    },
    {
        "content": "<p>I think @nagisa is best qualified to provide that guidance</p>",
        "id": 231980005,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1616771122
    },
    {
        "content": "<p>okay, I’ll circle back with <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> to talk about it</p>",
        "id": 231980065,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616771141
    },
    {
        "content": "<p>I guess the main question I have is: Are the two things <em>coupled</em>, in the sense that it would be <strong>bad</strong> to land the change to the static/dynamic linking defaults without also addressing the libc thing at the <strong>same time</strong> ?</p>",
        "id": 231980203,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616771176
    },
    {
        "content": "<p>Just as a warning for next time, non US folks can be confused about DST-changes. I had scheduled the meeting as starting now :p</p>",
        "id": 231980251,
        "sender_full_name": "Érico Nogueira Rolim",
        "timestamp": 1616771194
    },
    {
        "content": "<p>I had been assuming that the libc thing could wait for the other to land first.</p>",
        "id": 231980260,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616771197
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231979964\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> reproducer is pretty simple: have a DSO that depends on the dynamic libc and link the DSO into a program that embeds a static libc.</p>\n</blockquote>\n<p>Exactly. If you have a dynamic-linked program, you can't link any <code>libc.a</code> at all, ever. I'm actually looking into ways to diagnose this and prevent it at runtime.</p>",
        "id": 231980287,
        "sender_full_name": "Rich Felker",
        "timestamp": 1616771209
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"396723\">Érico Nogueira Rolim</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231980251\">said</a>:</p>\n<blockquote>\n<p>Just as a warning for next time, non US folks can be confused about DST-changes. I had scheduled the meeting as starting now :p</p>\n</blockquote>\n<p>sorry about that.</p>",
        "id": 231980330,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616771223
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"396723\">Érico Nogueira Rolim</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231980251\">said</a>:</p>\n<blockquote>\n<p>Just as a warning for next time, non US folks can be confused about DST-changes. I had scheduled the meeting as starting now <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>\n</blockquote>\n<p>It should be fine now; I don't know about BR, but EU honors DST starting on next Sunday</p>",
        "id": 231980355,
        "sender_full_name": "Laurent Bercot",
        "timestamp": 1616771230
    },
    {
        "content": "<p>Our country is pretty broken in such surprising ways.</p>",
        "id": 231980382,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616771238
    },
    {
        "content": "<p>hello USG I'd like to file a bug report</p>",
        "id": 231980414,
        "sender_full_name": "Jubilee",
        "timestamp": 1616771256
    },
    {
        "content": "<p>suggestion: when scheduling international meetings, always use UTC time</p>",
        "id": 231980433,
        "sender_full_name": "Laurent Bercot",
        "timestamp": 1616771263
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"400781\">Laurent Bercot</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231980355\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"396723\">Érico Nogueira Rolim</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231980251\">said</a>:</p>\n<blockquote>\n<p>Just as a warning for next time, non US folks can be confused about DST-changes. I had scheduled the meeting as starting now :p</p>\n</blockquote>\n<p>It should be fine now; I don't know about BR, but EU honors DST starting on next Sunday</p>\n</blockquote>\n<p>We won't be having DST this year.</p>",
        "id": 231980524,
        "sender_full_name": "Érico Nogueira Rolim",
        "timestamp": 1616771291
    },
    {
        "content": "<p>thanks everyone for working on this!</p>",
        "id": 231980528,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1616771293
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"396976\">Rich Felker</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231980287\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231979964\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> reproducer is pretty simple: have a DSO that depends on the dynamic libc and link the DSO into a program that embeds a static libc.</p>\n</blockquote>\n<p>Exactly. If you have a dynamic-linked program, you can't link any <code>libc.a</code> at all, ever. I'm actually looking into ways to diagnose this and prevent it at runtime.</p>\n</blockquote>\n<p>This makes it sound like the two items (the static/dynamic change and the libc-embeds-musl thing)  <strong>are</strong> very much coupled</p>",
        "id": 231980531,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616771293
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> can you confirm that understanding?</p>",
        "id": 231980570,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616771309
    },
    {
        "content": "<p>(static libc + dynamic libc only works on windows because msvcrt is a thin layer over ntdll)</p>",
        "id": 231980681,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1616771344
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"360752\">Ariadne Conill</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231980681\">said</a>:</p>\n<blockquote>\n<p>(static libc + dynamic libc only works on windows because msvcrt is a thin layer over ntdll)</p>\n</blockquote>\n<p>Also because of Windows symbol binding semantics.</p>",
        "id": 231980818,
        "sender_full_name": "Rich Felker",
        "timestamp": 1616771394
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>  AFAICT the change to libc can happen even today without breaking any of the today's users while enabling the target change we're looking to make.</p>",
        "id": 231980904,
        "sender_full_name": "nagisa",
        "timestamp": 1616771422
    },
    {
        "content": "<p>… how could that change be made without breaking existing users?</p>",
        "id": 231980956,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616771439
    },
    {
        "content": "<p>I, too, am confused.</p>",
        "id": 231981007,
        "sender_full_name": "Jubilee",
        "timestamp": 1616771458
    },
    {
        "content": "<p>Oh, wait</p>",
        "id": 231981049,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616771475
    },
    {
        "content": "<p>the change would somehow conditionalized, right?</p>",
        "id": 231981075,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616771484
    },
    {
        "content": "<p>As in, make the change today, but its not that libc would stop embedding musl in <em>all</em> scenarios</p>",
        "id": 231981111,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616771501
    },
    {
        "content": "<p>but rather, it would stop embedding it solely when the crt is dynamically linked?</p>",
        "id": 231981145,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616771517
    },
    {
        "content": "<p>+crt-static works on <code>-gnu</code> targets, and <code>rustc --target=x86_64-unknown-linux-musl --print=cfg</code> specifies <code>+crt-static</code>.</p>",
        "id": 231981148,
        "sender_full_name": "nagisa",
        "timestamp": 1616771518
    },
    {
        "content": "<p>so yes, we'd adjust the musl block to do a lot like what the glibc block does here: <a href=\"https://github.com/rust-lang/libc/blob/master/src/unix/mod.rs#L305-L330\">https://github.com/rust-lang/libc/blob/master/src/unix/mod.rs#L305-L330</a></p>",
        "id": 231981251,
        "sender_full_name": "nagisa",
        "timestamp": 1616771546
    },
    {
        "content": "<p>hm.</p>",
        "id": 231981305,
        "sender_full_name": "nagisa",
        "timestamp": 1616771576
    },
    {
        "content": "<p>Okay. I’m willing to believe that this can be resolved in a robust way</p>",
        "id": 231981308,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616771578
    },
    {
        "content": "<p>I think its worthwhile to prototype the change(s) and see what happens – I haven't actually tried doing so myself.</p>",
        "id": 231981431,
        "sender_full_name": "nagisa",
        "timestamp": 1616771633
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231981431\">said</a>:</p>\n<blockquote>\n<p>I think its worthwhile to prototype the change(s) and see what happens – I haven't actually tried doing so myself.</p>\n</blockquote>\n<p>Isn't that kinda what the existing distro patches do? Or do you mean test the same changes in an upstream rust CI environment?</p>",
        "id": 231981569,
        "sender_full_name": "Rich Felker",
        "timestamp": 1616771685
    },
    {
        "content": "<p>Test the same changes in an upstream environment and see if today's use-cases that expect the embedding behaviour continue to work outside of musl hosts with <code>-Ctarget-feature=+crt-static</code> set explicitly.</p>",
        "id": 231981677,
        "sender_full_name": "nagisa",
        "timestamp": 1616771727
    },
    {
        "content": "<p>I'm pretty sure the current embedding behavior is buggy, but I'd have to see the command line that actually goes to the linker. Is there an easy way to see that?</p>",
        "id": 231982099,
        "sender_full_name": "Rich Felker",
        "timestamp": 1616771850
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"396976\">Rich Felker</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416/near/231982099\">said</a>:</p>\n<blockquote>\n<p>I'm pretty sure the current embedding behavior is buggy, but I'd have to see the command line that actually goes to the linker. Is there an easy way to see that?</p>\n</blockquote>\n<p><a href=\"https://github.com/leahneukirchen/extrace\">https://github.com/leahneukirchen/extrace</a> :)</p>",
        "id": 231982498,
        "sender_full_name": "Érico Nogueira Rolim",
        "timestamp": 1616771967
    },
    {
        "content": "<p>Haha, okay, I can do that with <code>strace -f -e trace=exec</code>... I was hoping for something like <code>gcc -v</code> though.</p>",
        "id": 231982636,
        "sender_full_name": "Rich Felker",
        "timestamp": 1616772013
    },
    {
        "content": "<p>hold on</p>",
        "id": 231982852,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616772091
    },
    {
        "content": "<p>there is something simple for this</p>",
        "id": 231982866,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616772097
    },
    {
        "content": "<p>Oh. I was thinking of <code>-Z print-link-args</code> : <span class=\"user-mention\" data-user-id=\"396976\">@Rich Felker</span> is nightly good enough for your purposes?</p>",
        "id": 231983112,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616772184
    },
    {
        "content": "<p>Well I don't want to have to build. I'm hoping for something I can just run on a stock Debian system with rust installed to see what happens when I link something using the embedded libc package</p>",
        "id": 231983260,
        "sender_full_name": "Rich Felker",
        "timestamp": 1616772239
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"396976\">@Rich Felker</span> you could <code>rustup update nightly</code>, if you use <code>rustup</code> ...</p>",
        "id": 231983438,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616772286
    },
    {
        "content": "<p>but I take it you don't</p>",
        "id": 231983455,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616772297
    },
    {
        "content": "<p>if it's easy to do in a new test user's ~ I could</p>",
        "id": 231983847,
        "sender_full_name": "Rich Felker",
        "timestamp": 1616772429
    },
    {
        "content": "<p>Hmm, there’s an <code>info!</code> invocation… does the default build include that</p>",
        "id": 231983910,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616772452
    },
    {
        "content": "<p>bam!</p>",
        "id": 231984104,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616772513
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"396976\">@Rich Felker</span> here’s an easy way:</p>",
        "id": 231984126,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616772519
    },
    {
        "content": "<p><code>RUSTC_LOG=rustc_codegen_ssa::back::link rustc hello.rs</code></p>",
        "id": 231984165,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616772536
    },
    {
        "content": "<p>setting that environment variable works on stable</p>",
        "id": 231984182,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616772544
    },
    {
        "content": "<p>(and everywhere else)</p>",
        "id": 231984198,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616772549
    },
    {
        "content": "<p>thanks. i'll see what i can make work among these options.</p>",
        "id": 231984647,
        "sender_full_name": "Rich Felker",
        "timestamp": 1616772688
    },
    {
        "content": "<p><a href=\"https://www.one-tab.com/page/A_oMpuQiTHepfOT0Nunv8w\">https://www.one-tab.com/page/A_oMpuQiTHepfOT0Nunv8w</a> Gathered the external links from this meeting into here. No reason, just a compulsion to assemble bibliographies.</p>",
        "id": 231992703,
        "sender_full_name": "Jubilee",
        "timestamp": 1616775618
    },
    {
        "content": "<p>If you are interested in the \"statically linked musl\"/\"embedded musl\" case, you may be interested in implementing <a href=\"https://github.com/rust-lang/rust/issues/72274\">https://github.com/rust-lang/rust/issues/72274</a> \"Distribute libc.a as a separate library instead of bundling it into liblibc.rlib on musl and wasi\", which is another longstanding issue related to musl targets.</p>\n<p>(Bundling musl into <code>liblibc.rlib</code> was another ad hoc solution used to enable the specific \"self-contained executable\" use case that was the focus when introducing musl targets.)</p>",
        "id": 232033836,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1616793882
    },
    {
        "content": "<p>posted MCP: <a href=\"https://github.com/rust-lang/compiler-team/issues/422\">https://github.com/rust-lang/compiler-team/issues/422</a></p>",
        "id": 232759919,
        "sender_full_name": "pnkfelix",
        "timestamp": 1617285326
    }
]