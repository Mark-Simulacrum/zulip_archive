[
    {
        "content": "<p>creating topic to discuss <a href=\"https://github.com/rust-lang/compiler-team/issues/281\" title=\"https://github.com/rust-lang/compiler-team/issues/281\">compiler-team#281</a></p>",
        "id": 196911747,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588952521
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> and <span class=\"user-mention\" data-user-id=\"124288\">@oli</span></p>",
        "id": 196912024,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588952640
    },
    {
        "content": "<p>I wanted to follow up regarding something with CGU's</p>",
        "id": 196912083,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588952649
    },
    {
        "content": "<p>Hey <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 196912109,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1588952658
    },
    {
        "content": "<p>(and maybe this Question would be better off being posed within a stream specific to mir-opt or something)</p>",
        "id": 196912127,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588952667
    },
    {
        "content": "<p>but I wanted to check: The CGU partitioning is used, from what I understand, for two purposes: For incremental compilation, and for parallel code-generation (at LLVM level)</p>",
        "id": 196912195,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588952705
    },
    {
        "content": "<p>do we use the same algorithm for both?</p>",
        "id": 196912211,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588952714
    },
    {
        "content": "<p>Yeah, there's only one algorithm currently.</p>",
        "id": 196912238,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1588952727
    },
    {
        "content": "<p>Which, IMO, is probably something we should change.</p>",
        "id": 196912262,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1588952737
    },
    {
        "content": "<p>(I guess I cannot think of any reason why you <em>wouldn't</em> use the same algorithm for both, since in end its about trying to identify a partitioning that minimizes dependencies between pairs of CGU's, right?)</p>",
        "id": 196912292,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588952761
    },
    {
        "content": "<p>or maybe there is something I'm missing?</p>",
        "id": 196912343,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588952773
    },
    {
        "content": "<p>non-incremental mode will merge them together though AFAIK</p>",
        "id": 196912346,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1588952774
    },
    {
        "content": "<p>I think it depends a lot on the compilation profile</p>",
        "id": 196912347,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1588952774
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bproposal.5D.20CGU.20Partitioning.20compiler-team.23281/near/196912346\" title=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bproposal.5D.20CGU.20Partitioning.20compiler-team.23281/near/196912346\">said</a>:</p>\n<blockquote>\n<p>non-incremental mode will merge them together though AFAIK</p>\n</blockquote>\n<p>I don't understand what this meant</p>",
        "id": 196912382,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588952797
    },
    {
        "content": "<p>For release builds, we care a lot about putting related code together in the same cgu so LLVM can optimize and inline it.</p>",
        "id": 196912387,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1588952800
    },
    {
        "content": "<p>But, hypothetically, for debug incremental builds, we might actually want to make cgus as small as possible.</p>",
        "id": 196912436,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1588952822
    },
    {
        "content": "<p>Because we don't care about optimizations</p>",
        "id": 196912450,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1588952831
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bproposal.5D.20CGU.20Partitioning.20compiler-team.23281/near/196912346\" title=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bproposal.5D.20CGU.20Partitioning.20compiler-team.23281/near/196912346\">said</a>:</p>\n<blockquote>\n<p>non-incremental mode will merge them together though AFAIK</p>\n</blockquote>\n<p>That wasn't my understanding but I'm not an expert on this cdoe.</p>",
        "id": 196912656,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1588952922
    },
    {
        "content": "<p>(It's here FYI <a href=\"https://github.com/rust-lang/rust/blob/a51e004e1bf7f9bba151dd9104a217c1ace6a0a2/src/librustc_mir/monomorphize/partitioning.rs#L454\" title=\"https://github.com/rust-lang/rust/blob/a51e004e1bf7f9bba151dd9104a217c1ace6a0a2/src/librustc_mir/monomorphize/partitioning.rs#L454\">https://github.com/rust-lang/rust/blob/a51e004e1bf7f9bba151dd9104a217c1ace6a0a2/src/librustc_mir/monomorphize/partitioning.rs#L454</a>)</p>",
        "id": 196912670,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1588952929
    },
    {
        "content": "<p>Oh, it will respect <code>codegen-units</code> now I think</p>",
        "id": 196912745,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1588952968
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bproposal.5D.20CGU.20Partitioning.20compiler-team.23281/near/196912436\" title=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bproposal.5D.20CGU.20Partitioning.20compiler-team.23281/near/196912436\">said</a>:</p>\n<blockquote>\n<p>But, hypothetically, for debug incremental builds, we might actually want to make cgus as small as possible.</p>\n</blockquote>\n<p>I'm playing around with a variant of this idea locally with interesting results.</p>",
        "id": 196912786,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1588952982
    },
    {
        "content": "<p>Yeah, I believe that's correct.</p>",
        "id": 196912832,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1588952998
    },
    {
        "content": "<p>Incremental will by default merge CGUs together until it's down to 256, non-incremental <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_session/session.rs.html#840-906\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_session/session.rs.html#840-906\">defaults to 16</a></p>",
        "id": 196912978,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1588953054
    },
    {
        "content": "<p>Interesting... I hadn't see that code yet. That's very helpful</p>",
        "id": 196913094,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1588953116
    },
    {
        "content": "<p>btw, the module-level comments in that file are helpful as a background info</p>",
        "id": 196922824,
        "sender_full_name": "mark-i-m",
        "timestamp": 1588957804
    },
    {
        "content": "<p>is it possible to split up the CGU more as it is now all instances of generic code will go in the same CGU e.g. made a main function that creates 24 different hashmaps either with the same type or with unique  types and the largest CGU takes 569ms to compile then the same type is used and 5234ms when unique  types is used.</p>",
        "id": 197194420,
        "sender_full_name": "andjo403",
        "timestamp": 1589226033
    },
    {
        "content": "<p>and yes there is more to compile so expect more compile time but think that it can be distributed between the CGUs better strange to have one CGU that takes 5s to compile and all the other is less then 500ms</p>",
        "id": 197195315,
        "sender_full_name": "andjo403",
        "timestamp": 1589226430
    },
    {
        "content": "<p>and the other thing that I thinks affects compile time the most is figure out how to account for the calls to inline marked functions when merging CGUs.<br>\nas it is now the inline maked functions called in a CGU is added to the CGU after merging is done and if one CGU is calling a lot of inline marked functions that CGUs size can increase a lot.<br>\nit can also be a lot of extra work to compile the same inline marked function in multiple CGUs, maybe it hade been possible to merge some CGUs and the inline marked function was only compiled once. <br>\nwhen I was looking in to this in <a href=\"https://github.com/rust-lang/rust/pull/65281\">https://github.com/rust-lang/rust/pull/65281</a> I tried to do the merging after the inline marked functions was added but was not able to figure out how to account for the same function being inlined in multiple CGUs</p>",
        "id": 197200615,
        "sender_full_name": "andjo403",
        "timestamp": 1589228973
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"125799\">@andjo403</span>, that's helpful!</p>",
        "id": 197202327,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1589229859
    },
    {
        "content": "<p>think that a lot can be done in this area like better size estimate and split up huge CGUs but as with the mir opts it feels like all falls back on the inline marked function handling as long as that do not work there will be regressions some where</p>",
        "id": 197205407,
        "sender_full_name": "andjo403",
        "timestamp": 1589231506
    },
    {
        "content": "<p>one other question: how much can LTO make up for lost optimizations due to more cgus? or is LTO slower than compiling with fewer cgus?</p>",
        "id": 197227342,
        "sender_full_name": "mark-i-m",
        "timestamp": 1589248635
    },
    {
        "content": "<p>That's a question definitely worth exploring for release workloads.</p>",
        "id": 197281904,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1589292802
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> Did your question get answered in the above discussion?</p>",
        "id": 197281934,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1589292820
    },
    {
        "content": "<p>I think it did; I'd have to review to be sure, and I'm looking at something else at the moment</p>",
        "id": 197282070,
        "sender_full_name": "pnkfelix",
        "timestamp": 1589292856
    },
    {
        "content": "<p>something that I started to think about today was that maybe we can have a perf run that only uses one cgu (-Ccodegen-units=1) to be able to see if the optimisations have perf regressions due to problems with the partitioning. so if all one cgu perfs i good the problem is the partitioning, at least until there is a solution to the partitioning problem.<br>\nBut maybe the perf runs take to much time with that.</p>",
        "id": 197749837,
        "sender_full_name": "andjo403",
        "timestamp": 1589575268
    },
    {
        "content": "<p>It would be kind of interesting to also look at the runtime performance of workloads compile with a huge number of CGUs... Then, we would have data about what the tradeoff of compile time vs runtime is</p>",
        "id": 197761416,
        "sender_full_name": "mark-i-m",
        "timestamp": 1589583345
    },
    {
        "content": "<p>I think both are really good ideas! +1 to both by me :3</p>",
        "id": 197783736,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1589616987
    },
    {
        "content": "<p>Although if <span class=\"user-mention\" data-user-id=\"125799\">@andjo403</span>'s idea is feasible (like, maybe the compile time with just one CGU is too large?), I think it will help us a lot in having a sense of what's the upper bound of speedup that the mir-opts are able to give at any time.</p>",
        "id": 197783824,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1589617188
    },
    {
        "content": "<p>Because it gives you an idea of how much work we are able to take off of LLVM's shoulders if the restriction of having to partition the IR in CGUs is lifted</p>",
        "id": 197783898,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1589617310
    }
]