[
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span> ; the planning meeting for the “October cycle” is starting now</p>",
        "id": 254708640,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632492077
    },
    {
        "content": "<p>add a <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> above to show you’re here</p>",
        "id": 254708689,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632492092
    },
    {
        "content": "<p>So lets see, do we have any meeting proposals</p>",
        "id": 254708947,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632492186
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/compiler-team/issues?q=is%3Aopen+is%3Aissue+label%3Ameeting-proposal+\">all proposals</a></p>",
        "id": 254709057,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632492237
    },
    {
        "content": "<p>only one of these is lacking a meeting-scheduled label</p>",
        "id": 254709151,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632492257
    },
    {
        "content": "<p>We already had that meeting lol.</p>",
        "id": 254709207,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632492281
    },
    {
        "content": "<p>I'm going to close it</p>",
        "id": 254709211,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632492284
    },
    {
        "content": "<p>yeah I was thinking “we must have had this\"</p>",
        "id": 254709232,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632492293
    },
    {
        "content": "<p>Er, I guess just add the label?</p>",
        "id": 254709250,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632492301
    },
    {
        "content": "<p>We've had most of these meetings</p>",
        "id": 254709286,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632492314
    },
    {
        "content": "<p>it might be good to link to the archive of the meeting discussion</p>",
        "id": 254709287,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632492314
    },
    {
        "content": "<p>Should we be closing them?</p>",
        "id": 254709299,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632492318
    },
    {
        "content": "<p>So I think in theory we are supposed to draft up a summary of the meeting outcome</p>",
        "id": 254709343,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632492335
    },
    {
        "content": "<p>and posting it somewhere</p>",
        "id": 254709351,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632492338
    },
    {
        "content": "<p>before we close the issue</p>",
        "id": 254709362,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632492341
    },
    {
        "content": "<p>I am not sure that is a worthwhile to spend time for <em>all</em> of these meetings at this point</p>",
        "id": 254709394,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632492353
    },
    {
        "content": "<p>but a review is probably warranted</p>",
        "id": 254709406,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632492358
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> maybe you and I can discuss what to do about that in private? The only thing I think warrants attention from others is whether anyone wants to volunteer to draft any summaries</p>",
        "id": 254709568,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632492402
    },
    {
        "content": "<p>Sure, sounds good.</p>",
        "id": 254709611,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632492414
    },
    {
        "content": "<p>to be clear, I’m not <em>expecting</em> any volunteers on that front</p>",
        "id": 254709638,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632492425
    },
    {
        "content": "<p>but if someone wants to surprise me, go ahead and mention it here, or privmsg wesley and/or myself</p>",
        "id": 254709680,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632492440
    },
    {
        "content": "<p>so okay, I’m going to assume we have no meeting proposals</p>",
        "id": 254709721,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632492458
    },
    {
        "content": "<p>Should we spend this time going over the MCP’s?</p>",
        "id": 254709775,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632492477
    },
    {
        "content": "<p>I think that was a useful way to spend time the last time we had a planning meeting with no proposals.</p>",
        "id": 254709841,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632492491
    },
    {
        "content": "<p>So lets see</p>",
        "id": 254710026,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632492564
    },
    {
        "content": "<p>We have <a href=\"https://github.com/rust-lang/compiler-team/issues?q=is%3Aopen+is%3Aissue+label%3Amajor-change+-label%3Amajor-change-accepted\">8 open unaccepeted MCPs</a></p>",
        "id": 254710124,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632492602
    },
    {
        "content": "<p>uh lets <a href=\"https://github.com/rust-lang/compiler-team/issues?q=is%3Aopen+is%3Aissue+label%3Amajor-change+-label%3Amajor-change-accepted+sort%3Acreated-asc\">sort by oldest-first</a></p>",
        "id": 254710263,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632492639
    },
    {
        "content": "<p>I think we started with the oldest last time so maybe we should start with the newest and talk about a different subset?</p>",
        "id": 254710317,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632492651
    },
    {
        "content": "<p>oh I suppose that could make sense too</p>",
        "id": 254710335,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632492659
    },
    {
        "content": "<p>okay</p>",
        "id": 254710347,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632492662
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/compiler-team/issues?q=is%3Aopen+is%3Aissue+label%3Amajor-change+-label%3Amajor-change-accepted+sort%3Acreated-desc\">newest-first</a> which is probably same as first link I posted.</p>",
        "id": 254710388,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632492686
    },
    {
        "content": "<p>First up \" Tier 3 target proposal: x86_64-unknown-none (freestanding/bare-metal x86-64)” <a href=\"https://github.com/rust-lang/compiler-team/issues/462\">compiler-team#462</a></p>",
        "id": 254710449,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632492713
    },
    {
        "content": "<p>zulip stream: <a class=\"stream-topic\" data-stream-id=\"233931\" href=\"/#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Tier.203.20target.20proposal.3A.20x86_64-unknown-none.20.28freestanding.2E.2E.2E\">#t-compiler/major changes &gt; Tier 3 target proposal: x86_64-unknown-none (freestanding...</a></p>",
        "id": 254710555,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632492745
    },
    {
        "content": "<p>nuts I guessed the wrong one to point to</p>",
        "id": 254710762,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632492829
    },
    {
        "content": "<p>zulip stream: <a class=\"stream-topic\" data-stream-id=\"233931\" href=\"/#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Tier.203.20target.20proposal.3A.20x86_64-unknown-no.E2.80.A6.20compiler-team.23462\">#t-compiler/major changes &gt; Tier 3 target proposal: x86_64-unknown-no… compiler-team#462</a></p>",
        "id": 254710838,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632492845
    },
    {
        "content": "<p>I agree with the feedback in the thread: I would prefer if the target name included \"elf\" in it.</p>",
        "id": 254710909,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632492872
    },
    {
        "content": "<p>(triage bot should probably link to the <del>original</del> preceding stream when it renames in response to github issue renames, right?)</p>",
        "id": 254710933,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632492881
    },
    {
        "content": "<p>Would be nice if it could leave a comment with the link in the original thread as well.</p>",
        "id": 254711029,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632492916
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bplanning.20meeting.5D.202021-09-24/near/254710909\">said</a>:</p>\n<blockquote>\n<p>I agree with the feedback in the thread: I would prefer if the target name included \"elf\" in it.</p>\n</blockquote>\n<p>What do you think of this comment w.r.t. that: \"-elf may imply some minimal amount of<br>\nC library support” ?</p>",
        "id": 254711090,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632492940
    },
    {
        "content": "<p>(I personally don’t know why it would)</p>",
        "id": 254711122,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632492950
    },
    {
        "content": "<p>I don't think I'm enough of an expert on low-level system details to know either way.</p>",
        "id": 254711222,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632492974
    },
    {
        "content": "<p>There are other containers for binaries on x86_64 though (COFF right?) so I don't see why <code>x86_64-unknown-none</code> would imply elf.</p>",
        "id": 254711373,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632493025
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> had argued that ELF is the default, but not strictly implied...</p>",
        "id": 254711429,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632493052
    },
    {
        "content": "<p>I see</p>",
        "id": 254711486,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632493076
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Tier.203.20target.20proposal.3A.20x86_64-unknown-no.E2.80.A6.20compiler-team.23462/near/254007573\">said</a>:</p>\n<blockquote>\n<p>So in a way, ELF is just the <em>default</em> object format, not the <em>only</em> object format.</p>\n</blockquote>",
        "id": 254711623,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632493119
    },
    {
        "content": "<p>Perhaps we need to have some kind of guidelines around naming targets?</p>",
        "id": 254711631,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632493122
    },
    {
        "content": "<p>Some related questions came up in the Switch target PR.</p>",
        "id": 254711662,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632493136
    },
    {
        "content": "<p>They're currently going for <code>aarch64-nintendo-switch-freestanding</code></p>",
        "id": 254711723,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632493163
    },
    {
        "content": "<p>hmm</p>",
        "id": 254711744,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632493175
    },
    {
        "content": "<p>but <code>freestanding</code> in that context means \"only talks to the kernel, no libc\"</p>",
        "id": 254711752,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632493178
    },
    {
        "content": "<p>Where as in Josh's proposal</p>\n<blockquote>\n<p>This compiler MCP proposes a new target, x86_64-unknown-none, for standalone or \"freestanding\" x86-64 binaries with no operating system, using ELF as the object format. This target is intended for firmware, kernels, modules, and other software running without an operating system.</p>\n</blockquote>",
        "id": 254711829,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632493203
    },
    {
        "content": "<p>Which sounds like an even more bare metal environment.</p>",
        "id": 254711893,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632493217
    },
    {
        "content": "<p>do any other targets currently have <code>freestanding</code> in their name?</p>",
        "id": 254711953,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632493241
    },
    {
        "content": "<p>No, that I can see</p>",
        "id": 254712032,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632493278
    },
    {
        "content": "<p>anyway it seems like both of these conversations are both very fresh and ongoing</p>",
        "id": 254712057,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632493290
    },
    {
        "content": "<p>(I suggested that name so perhaps I led them astray)</p>",
        "id": 254712062,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632493291
    },
    {
        "content": "<p>so I dont think we need to put effort into pushing things along</p>",
        "id": 254712084,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632493302
    },
    {
        "content": "<p>the only thing I think we need to ask ourselves here is: Is there some way that we could help drive the conversation towards consensus</p>",
        "id": 254712123,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632493321
    },
    {
        "content": "<p>it does seem like it <em>might</em> be a good idea for the stakeholders of both of these proposals to be aware of one another?</p>",
        "id": 254712213,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632493343
    },
    {
        "content": "<p>Not that they would necessarily care about each other’s targets</p>",
        "id": 254712253,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632493360
    },
    {
        "content": "<p>but more that it might help develop consistent naming choices for these two similar cases</p>",
        "id": 254712287,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632493378
    },
    {
        "content": "<p>Couldn't hurt to leave a comment pointing to the other target on each proposal but I do think it's the compiler team's interest to have reasonable target names so perhaps we need to put some work in there.</p>",
        "id": 254712385,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632493422
    },
    {
        "content": "<p>Okay</p>",
        "id": 254712418,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632493433
    },
    {
        "content": "<p>Even something simple like a glossary of conventions or terms and when to use them in the target name would be helpful.</p>",
        "id": 254712484,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632493445
    },
    {
        "content": "<p>Proposed action item: Review current set of target names, as well as at least these two proposed targets (and potentially others)</p>",
        "id": 254712547,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632493468
    },
    {
        "content": "<p>and from that review, try to determine guidelines for naming?</p>",
        "id": 254712584,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632493484
    },
    {
        "content": "<p>Who are the right stakeholders here? I think I’d want <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> in the conversation at the very least.</p>",
        "id": 254712629,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632493509
    },
    {
        "content": "<p>If there isn’t already a zulip thread on this topic in <a class=\"stream\" data-stream-id=\"131828\" href=\"/#narrow/stream/131828-t-compiler\">#t-compiler</a>, the right thing might be to just start that thread</p>",
        "id": 254712743,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632493562
    },
    {
        "content": "<p>I’ll do that right after this meeting.</p>",
        "id": 254712813,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632493577
    },
    {
        "content": "<p>Having someone involved who's had experience working with target names in other compilers/contexts would definitely be useful. Josh seems like a great person to help with that (if he's interested)</p>",
        "id": 254712857,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632493601
    },
    {
        "content": "<p>Okay great</p>",
        "id": 254712885,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632493614
    },
    {
        "content": "<p>lets move along then.</p>",
        "id": 254712892,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632493619
    },
    {
        "content": "<p>prefer-dynamic=subset <a href=\"https://github.com/rust-lang/compiler-team/issues/455\">compiler-team#455</a></p>",
        "id": 254712929,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632493635
    },
    {
        "content": "<p>Zulip thread: <a class=\"stream-topic\" data-stream-id=\"233931\" href=\"/#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/prefer-dynamic.3Dsubset.20compiler-team.23455\">#t-compiler/major changes &gt; prefer-dynamic=subset compiler-team#455</a></p>",
        "id": 254712957,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632493649
    },
    {
        "content": "<p>so this has largely stalled</p>",
        "id": 254712986,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632493663
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> voiced some concerns</p>",
        "id": 254713014,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632493671
    },
    {
        "content": "<p>and did some investigation</p>",
        "id": 254713019,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632493674
    },
    {
        "content": "<p>which was noted on the above thread</p>",
        "id": 254713081,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632493685
    },
    {
        "content": "<p>in particular, I <em>think</em> <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> identified some problems in how <em>indirect</em> dependencies are (re)looked up, where it can find a different set of rmeta/rlib/dylib from what it found originally</p>",
        "id": 254713203,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632493737
    },
    {
        "content": "<p>Basically, I want to look into what would be involved in fixing that</p>",
        "id": 254713328,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632493791
    },
    {
        "content": "<p>I don’t think it addresses all the use cases I was trying to cover, but I think fixing that (if we <em>can</em> do so without breaking anyone) might yield a world where a different, simpler proposal (probably focused solely on <code>libstd</code> resolution) might fly better.</p>",
        "id": 254713503,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632493843
    },
    {
        "content": "<p>So I think the action item there is for someone, probably me, to follow up on trying to fix that.</p>",
        "id": 254713584,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632493875
    },
    {
        "content": "<p>On the PR itself, I think <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> ’s <a href=\"https://github.com/rust-lang/rust/pull/88101#issuecomment-911733772\">comment</a> is worth reading. Notably: </p>\n<blockquote>\n<p>The whole idea is a pretty big hack, that is not much better than the workarounds that exist currently.<br>\nIt breaks through all the careful versioning and hashes used by cargo and rustc to uniquely identify crates.<br>\nI guess it's suitable if your build is on fire and you need to extinguish it right now, but it's not something I'd personally want to stabilize.</p>\n</blockquote>",
        "id": 254713869,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632493985
    },
    {
        "content": "<p>and also this:</p>\n<blockquote>\n<p>[…] However that [alternative workaround put foward by petrochenkov] wouldn't work for crates not controlled by cargo and found purely by name (with std being the main example), unless we add, for example, a new rustc --print option for retrieving a crate file path by name.</p>\n</blockquote>",
        "id": 254714083,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632494058
    },
    {
        "content": "<p>It sounds entirely reasonable to me for us to add a new <code>rustc —print</code> option that provides that.</p>",
        "id": 254714119,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632494075
    },
    {
        "content": "<p>(Also, I am now realizing I should separate out the commits that improve the diagnostics and land them separately. They should not be controversial.)</p>",
        "id": 254714266,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632494142
    },
    {
        "content": "<p>less magic in rustc would be dope in general.</p>",
        "id": 254714342,
        "sender_full_name": "nagisa",
        "timestamp": 1632494163
    },
    {
        "content": "<p>I guess. I thought the whole point of <code>dylib</code> was 100% magic.</p>",
        "id": 254714386,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632494180
    },
    {
        "content": "<p>(I’m being pretty glib.)</p>",
        "id": 254714403,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632494186
    },
    {
        "content": "<p>ANyway: Should I even leave this MCP open?</p>",
        "id": 254714503,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632494222
    },
    {
        "content": "<p>from <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> ’s comment, it sounds like the libstd case might be better handled in another, less magical but more baroque way?</p>",
        "id": 254714584,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632494253
    },
    {
        "content": "<p>I think I’ll leave it open until I have a counter-proposal ready to put up</p>",
        "id": 254714635,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632494271
    },
    {
        "content": "<p>next</p>",
        "id": 254714819,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632494328
    },
    {
        "content": "<p>Add TyKind::Const and remove GenericArgKind::Const <a href=\"https://github.com/rust-lang/compiler-team/issues/453\">compiler-team#453</a></p>",
        "id": 254714874,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632494351
    },
    {
        "content": "<p>zulip stream: <a class=\"stream-topic\" data-stream-id=\"233931\" href=\"/#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Add.20.02klzzwxh.3A0000.03.20and.20remove.20.60GenericAr.E2.80.A6.20compiler-team.23453\">#t-compiler/major changes &gt; Add <code>TyKind::Const</code> and remove `GenericAr… compiler-team#453</a></p>",
        "id": 254714946,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632494383
    },
    {
        "content": "<p>uh or maybe not</p>",
        "id": 254714977,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632494396
    },
    {
        "content": "<p><a class=\"stream-topic\" data-stream-id=\"233931\" href=\"/#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Add.20.02klzzwxh.3A0000.03.20and.20remove.20.60GenericAr.E2.80.A6.20compiler-team.23453\">#t-compiler/major changes &gt; Add <code>TyKind::Const</code> and remove `GenericAr… compiler-team#453</a></p>",
        "id": 254715137,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632494459
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span>  wrote on the thread:</p>\n<blockquote>\n<p>New plan v2: How about we avoid all this unpleasentness and create a TyOrConst (bikesheddable) type that can be Ty, Const or any of the shared inference/placeholder/GenericParam variants and then we remove the shared variants from the structures themselves. This will likely cause a lot of fallout, as anything that actually wants to handle these will need to start using TyOrConst, but it may be worth it, idk?</p>\n</blockquote>",
        "id": 254715154,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632494465
    },
    {
        "content": "<p>yea.... I'm not too sure how to proceed here, we can close and I can move it to an issue/zulip thread</p>",
        "id": 254715218,
        "sender_full_name": "oli",
        "timestamp": 1632494497
    },
    {
        "content": "<p>we <em>do</em> have some duplication in rustc between types and consts that I would like to avoid, but I'm not sure about the best way</p>",
        "id": 254715251,
        "sender_full_name": "oli",
        "timestamp": 1632494514
    },
    {
        "content": "<p>zulip stream <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Add.20.60TyKind.3A.3AConst.60.20and.20remove.20.60GenericAr.E2.80.A6.20compiler-team.23453/near/248479604\">link</a> (I don’t know why the autolinked one suggested by the Zulip app isn’t working.)</p>",
        "id": 254715316,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632494528
    },
    {
        "content": "<p>Okay so you will close it <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> ? I don’t want to try to take time to reveiw that whole thread now if i can avoid it. :)</p>",
        "id": 254715476,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632494597
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 254715486,
        "sender_full_name": "oli",
        "timestamp": 1632494604
    },
    {
        "content": "<p>next</p>",
        "id": 254715784,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632494741
    },
    {
        "content": "<p>Non exhaustive reachable patterns lint <a href=\"https://github.com/rust-lang/compiler-team/issues/445\">compiler-team#445</a></p>",
        "id": 254715814,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632494754
    },
    {
        "content": "<p>zulip stream: <a class=\"stream-topic\" data-stream-id=\"233931\" href=\"/#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Non.20exhaustive.20reachable.20patterns.20lint.20compiler-team.23445\">#t-compiler/major changes &gt; Non exhaustive reachable patterns lint compiler-team#445</a></p>",
        "id": 254715896,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632494772
    },
    {
        "content": "<p>worth noting: the lang team did approve the associated lang team MCP: <a href=\"https://github.com/rust-lang/lang-team/issues/112\">https://github.com/rust-lang/lang-team/issues/112</a></p>",
        "id": 254716007,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632494823
    },
    {
        "content": "<p>I think the PR has already merged?</p>",
        "id": 254716070,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632494848
    },
    {
        "content": "<p>hah hah, really?</p>",
        "id": 254716091,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632494857
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/86809\">https://github.com/rust-lang/rust/pull/86809</a></p>",
        "id": 254716111,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632494868
    },
    {
        "content": "<p>Okay, yeah, I even looked at three days ago as part of performance triage</p>",
        "id": 254716238,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632494905
    },
    {
        "content": "<p>hmm</p>",
        "id": 254716247,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632494907
    },
    {
        "content": "<p>so was there a process error here?</p>",
        "id": 254716261,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632494915
    },
    {
        "content": "<p>Do lints approved by lang team still need to go through compiler-team MCP ?</p>",
        "id": 254716299,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632494932
    },
    {
        "content": "<p>Personally, I don’t think it needs to,</p>",
        "id": 254716342,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632494950
    },
    {
        "content": "<p>It's unclear to me.</p>",
        "id": 254716362,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632494959
    },
    {
        "content": "<p>We've had a number of lints uplifted from Clippy go through a compiler team MCP and a lang team MCP?/FCP as well.</p>",
        "id": 254716398,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632494981
    },
    {
        "content": "<p>I guess there are two questions to my mind</p>",
        "id": 254716440,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632494999
    },
    {
        "content": "<ol>\n<li>Does the compiler team need a higher-level notice that something like this is going through?</li>\n</ol>",
        "id": 254716518,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632495016
    },
    {
        "content": "<p>i.e. it seems bad that the MCP just went in the “proposed” state</p>",
        "id": 254716555,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632495035
    },
    {
        "content": "<p>I think as long as a compiler team member reviewed or approved the PR, we don't need full team approval since another team already approved of the lint in general. The only thing the compiler team needs to sign off on is whether we want to keep maintaining it, and that doesn't need full team approval unless the reviewer considers the complexity relevant</p>",
        "id": 254716567,
        "sender_full_name": "oli",
        "timestamp": 1632495039
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bplanning.20meeting.5D.202021-09-24/near/254716261\">said</a>:</p>\n<blockquote>\n<p>so was there a process error here?</p>\n</blockquote>\n<p>Yes, I think so but it's understandable given the MCP request was buried in ~100 comments that GH collapsed.</p>",
        "id": 254716597,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632495054
    },
    {
        "content": "<p>so that someone who isn’t following the PR’s carefully, but is watching the MCP list, would get wrong impression about plan and status</p>",
        "id": 254716618,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632495062
    },
    {
        "content": "<p>worth noting that there was extensive impl-related discussion on the t-lang MCP stream, too</p>",
        "id": 254716659,
        "sender_full_name": "simulacrum",
        "timestamp": 1632495084
    },
    {
        "content": "<p>Maybe we need MCAs? XD (major change announcement)</p>",
        "id": 254716677,
        "sender_full_name": "oli",
        "timestamp": 1632495090
    },
    {
        "content": "<p>I was interpreting the MCP’s and FCP’s as being that (a kind of “major change announcement”)</p>",
        "id": 254716711,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632495104
    },
    {
        "content": "<p>XD well, MCP requires approval, while here, it was enough that everyone knows about it. It should have probably been insta-seconded, but I also get why that didn't happen</p>",
        "id": 254716855,
        "sender_full_name": "oli",
        "timestamp": 1632495149
    },
    {
        "content": "<p>anyway I’m willing to say I failed here. I’m in the lang team, and I run the compiler-team meeting. I should have noticed the discrepancy</p>",
        "id": 254716903,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632495167
    },
    {
        "content": "<p>(I.e. the reason to have overlap between teams is in part to notice things like this.)</p>",
        "id": 254716988,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632495207
    },
    {
        "content": "<p>I don't think we need to assign any blame here <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 254716995,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632495209
    },
    {
        "content": "<p>Anyway, fine it happened.</p>",
        "id": 254717003,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632495211
    },
    {
        "content": "<p>It seems like everyone is ok with the lint being landed.</p>",
        "id": 254717021,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632495219
    },
    {
        "content": "<p>I’m closing <a href=\"https://github.com/rust-lang/compiler-team/issues/445\">compiler-team#445</a> with a link to <a href=\"https://github.com/rust-lang/rust/issues/86809\">rust#86809</a></p>",
        "id": 254717057,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632495234
    },
    {
        "content": "<p>next:  Accept pc in place of unknown and unknown in place of pc for x86_64 and i?86 targets <a href=\"https://github.com/rust-lang/compiler-team/issues/441\">compiler-team#441</a></p>",
        "id": 254717140,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632495253
    },
    {
        "content": "<p>I think it would be useful for us (compiler &amp; lang) to figure out what the correct procedure should be for adding new lints.</p>",
        "id": 254717146,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632495255
    },
    {
        "content": "<p>Indeed</p>",
        "id": 254717181,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632495270
    },
    {
        "content": "<p>This is a fairly common occurrence.</p>",
        "id": 254717192,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632495277
    },
    {
        "content": "<p>I think there’s a desire for a more general set of guidelines</p>",
        "id": 254717204,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632495284
    },
    {
        "content": "<p>about what kinds of lints even belong in the compiler vs clippy</p>",
        "id": 254717230,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632495295
    },
    {
        "content": "<p>at least, it came up in this week’s T-lang meeting</p>",
        "id": 254717244,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632495304
    },
    {
        "content": "<p>maybe first step there is to identify who the stakeholders are in the first place.</p>",
        "id": 254717300,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632495330
    },
    {
        "content": "<p>Lints enabled by default have <em>some</em> cost to them so there's definitely a tradeoff between catching the most common/worst issues and slowing down every compilation.</p>",
        "id": 254717426,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632495371
    },
    {
        "content": "<p>I think the idea I liked from T-lang meeting was that if we do want to add more pure-style lints — things that <em>don’t</em> tend to detect bugs (these are lints analogous to “unused parens”) — then I’d want them under a common group and thus be easier to disable <em>en masse</em></p>",
        "id": 254717486,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632495406
    },
    {
        "content": "<p>but that’s if we even want them at all</p>",
        "id": 254717509,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632495418
    },
    {
        "content": "<p>Unused parens almost feels like it shouldn't even be a lint, just in rustfmt.</p>",
        "id": 254717647,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632495470
    },
    {
        "content": "<p>But that's getting off-topic.</p>",
        "id": 254717675,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632495480
    },
    {
        "content": "<p>yes</p>",
        "id": 254717772,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632495506
    },
    {
        "content": "<p>2 mins left. Should we continue discussing or call the meeting there?</p>",
        "id": 254717785,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632495512
    },
    {
        "content": "<p>um lets just at least do a temperature check on <a href=\"https://github.com/rust-lang/compiler-team/issues/441\">compiler-team#441</a></p>",
        "id": 254717853,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632495540
    },
    {
        "content": "<p>zulip stream: <a class=\"stream-topic\" data-stream-id=\"233931\" href=\"/#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Accept.20.02klzzwxh.3A0000.03.20in.20place.20of.20.02klzzwxh.3A0001.03.20and.20.60un.E2.80.A6.20compiler-team.23441\">#t-compiler/major changes &gt; Accept <code>pc</code> in place of <code>unknown</code> and `un… compiler-team#441</a></p>",
        "id": 254717892,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632495556
    },
    {
        "content": "<p>dammit</p>",
        "id": 254717912,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632495566
    },
    {
        "content": "<p>(I wonder if backquotes in the titles are breaking the zulip-suggested auto-linkers there?)</p>",
        "id": 254717955,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632495589
    },
    {
        "content": "<p>zulip stream <a href=\"#narrow/stream/233931-xxx/topic/Accept.20.60pc.60.20in.20place.20of.20.60unknown.60.20and.20.60un.E2.80.A6.20compiler-team.23441\">link</a></p>",
        "id": 254718087,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632495619
    },
    {
        "content": "<p>Zulip stream hasn’t had discussion since July</p>",
        "id": 254718218,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632495673
    },
    {
        "content": "<p>Do we think this is going to happen?</p>",
        "id": 254718254,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632495686
    },
    {
        "content": "<p>I feel like if we go down this path, we're just going to end up having to support this for every <code>{unknown,pc}</code> target.</p>",
        "id": 254718388,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632495724
    },
    {
        "content": "<p>Is that a bad thing?</p>",
        "id": 254718444,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632495745
    },
    {
        "content": "<p>And it doesn't solve the problem of \"my distro calls the target i586 but rust calls it i686\" or whatever.</p>",
        "id": 254718493,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632495761
    },
    {
        "content": "<p>I suppose not.</p>",
        "id": 254718520,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632495770
    },
    {
        "content": "<p>That’s a better counter</p>",
        "id": 254718528,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632495773
    },
    {
        "content": "<p>I.e. the i586 vs i686 mismatch</p>",
        "id": 254718551,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632495783
    },
    {
        "content": "<p>I.e. {unknown, pc} may be doable on its own, but it might set a precedent for unifying other names that really shouldn’t be unified</p>",
        "id": 254718649,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632495819
    },
    {
        "content": "<p>Okay we’re over time</p>",
        "id": 254718718,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632495840
    },
    {
        "content": "<p>I'd almost prefer a flag that says \"treat this target string x as if it was y\"</p>",
        "id": 254718791,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632495853
    },
    {
        "content": "<p>I’ll drop a note in the Zulip stream, asking the participants where they think the conversation is going</p>",
        "id": 254718810,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632495862
    },
    {
        "content": "<p>I am wary of landing this, given how many places we have target triples (e.g., Cargo, rustup, rustc all need to know about this, right?)</p>",
        "id": 254718815,
        "sender_full_name": "simulacrum",
        "timestamp": 1632495864
    },
    {
        "content": "<p>but I don't care that much.</p>",
        "id": 254718839,
        "sender_full_name": "simulacrum",
        "timestamp": 1632495873
    },
    {
        "content": "<p>Thanks to everyone in <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span> for attending!</p>",
        "id": 254719151,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632495977
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bplanning.20meeting.5D.202021-09-24/near/254718815\">said</a>:</p>\n<blockquote>\n<p>I am wary of landing this, given how many places we have target triples (e.g., Cargo, rustup, rustc all need to know about this, right?)</p>\n</blockquote>\n<p>Maybe we “just” need a third party tool: <code>cargo guess-actual-target</code></p>",
        "id": 254719245,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632496013
    },
    {
        "content": "<p>where you give that what you think the target string you want is, and it finds the closest match from those actually available, based on internal normalization/equivalence rules, and hands that back.</p>",
        "id": 254719333,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632496043
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bplanning.20meeting.5D.202021-09-24/near/254719333\">said</a>:</p>\n<blockquote>\n<p>where you give that what you think the target string you want is, and it finds the closest match from those actually available, based on internal normalization/equivalence rules, and hands that back.</p>\n</blockquote>\n<p>my understanding from reading <span class=\"user-mention\" data-user-id=\"257758\">@Connor Horman</span>'s comments is that there's an autotools program that already does this</p>",
        "id": 254721020,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1632496737
    },
    {
        "content": "<p>I don't recall why they wanted to change rustc's target parsing; I think it was something about making the program's job easier? which seems unconvincing to me, but I also haven't thought about it much</p>",
        "id": 254721110,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1632496774
    },
    {
        "content": "<p>There is an autotools thing that guesses the target, yes. It is considered to be a mistake.</p>",
        "id": 254734184,
        "sender_full_name": "nagisa",
        "timestamp": 1632501719
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> Responding to earlier comments: I think there is indeed a distinction between a standalone/freestanding/bare-metal target that doesn't assume any OS at all, and a \"libraryless\" target like that Switch target.</p>",
        "id": 254752854,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1632509136
    },
    {
        "content": "<p>I'm not sure what the right name for the latter kind of target is, but I don't think it's <code>-none</code>.</p>",
        "id": 254752903,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1632509158
    },
    {
        "content": "<p><code>-none</code> implies no OS at all. The Switch target still expects the kernel, just not userspace libraries.</p>",
        "id": 254752979,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1632509178
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> I totally agree! I think I originally suggested <code>-freestanding</code> on the Switch PR so I might be to blame for that. </p>\n<p>I think part of the issue right now is we don't have consistent vocabulary to use for targets like these. \"<code>-none</code> implies no OS at all\" makes complete sense to me. <code>-freestanding</code> is perhaps too overloaded to use in the Switch environment.</p>",
        "id": 254754885,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632509940
    },
    {
        "content": "<p>Yeah, I agree. I think we need a name for \"direct to the kernel\", and we should use the same name for that whether it's switch or Linux.</p>",
        "id": 254755393,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1632510111
    },
    {
        "content": "<p><code>x86_64-unknown-linux-raw</code> and <code>...-nintendo-switch-raw</code> or something like that. (Bikeshed painting ensues here.)</p>",
        "id": 254755496,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1632510142
    },
    {
        "content": "<p>Someone had suggested <code>-raw</code> on the <code>raw-dylib</code> tracking issue for a hypothetical Windows target that uses raw-dylibs instead of requiring the gnu or MSVC toolchains.</p>",
        "id": 254755553,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632510177
    },
    {
        "content": "<p>Since Windows can't really do \"bare syscalls\", raw-dylib seems as close as we can reasonably get.</p>",
        "id": 254755790,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1632510279
    },
    {
        "content": "<p>(to the best of my knowledge, the Windows syscall interface isn't considered stable, and if you want a stable interface you have to use winapi)</p>",
        "id": 254755848,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1632510305
    },
    {
        "content": "<p>Yes, that's my understanding as well.</p>",
        "id": 254756865,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632510720
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bplanning.20meeting.5D.202021-09-24/near/254713503\">said</a>:</p>\n<blockquote>\n<p>I don’t think it addresses all the use cases I was trying to cover, but I think fixing that (if we <em>can</em> do so without breaking anyone) might yield a world where a different, simpler proposal (probably focused solely on <code>libstd</code> resolution) might fly better.</p>\n</blockquote>\n<p>The fix is in <a href=\"https://github.com/petrochenkov/rust/tree/cflavor\">https://github.com/petrochenkov/rust/tree/cflavor</a> (preserving \"flavors\" of the linked libraries, which you are suggesting as well, if I understand correctly), but it's breaking and incompatible with pipelined compilation.</p>",
        "id": 254766372,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1632514741
    },
    {
        "content": "<p>I think the ideal long term solution would be to break the linker invocation out of rustc and let the build system (cargo in this case) handle it instead. This would also be useful for non-cargo build systems like rust-for-linux.</p>",
        "id": 254770976,
        "sender_full_name": "bjorn3",
        "timestamp": 1632516876
    },
    {
        "content": "<p>The build system can then decide by itself when to link rlibs and when dylibs.</p>",
        "id": 254771048,
        "sender_full_name": "bjorn3",
        "timestamp": 1632516907
    },
    {
        "content": "<p>What about the option of splitting the linker into a separate <code>rustc</code> invocation, which I've seen suggested many times?</p>",
        "id": 254771900,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1632517310
    },
    {
        "content": "<p>There is already -Zno-link/-Zlink-only, but it currently puts absolute paths in the .rlink file, requires a \"root\" crate for linking (so no linking of multiple rlibs into a single dylib) and doesn't allow the build system to provide arbitrary additional object files compiled from C/C++.</p>",
        "id": 254774154,
        "sender_full_name": "bjorn3",
        "timestamp": 1632518334
    },
    {
        "content": "<p>This reminds me of MIR-only-rlibs too somewhat.</p>",
        "id": 254776032,
        "sender_full_name": "nagisa",
        "timestamp": 1632519220
    },
    {
        "content": "<p>I don't think splitting work into multiple process executions is the right approach either, though. That approach has its own inherent overheads that aren't always trivial.</p>",
        "id": 254776122,
        "sender_full_name": "nagisa",
        "timestamp": 1632519254
    },
    {
        "content": "<p>Link stage is perhaps the only one that currently is a separate process _anyway_ so there isn't any cost in externalizing it (or at least supporting that use-case)</p>",
        "id": 254776467,
        "sender_full_name": "nagisa",
        "timestamp": 1632519436
    },
    {
        "content": "<p>But that then makes combining the two together more difficult if we wanted to try that. And it doesn't help with pipelined compilation.</p>",
        "id": 254776515,
        "sender_full_name": "nagisa",
        "timestamp": 1632519469
    },
    {
        "content": "<p>It will help with pipelined compilation as you can keep the current logic of matching any dep kind in rustc for pipelined compilation and let the build system decide if the final link should use a dylib or rlib for each specific crate independent of which choice rustc made.</p>",
        "id": 254809738,
        "sender_full_name": "bjorn3",
        "timestamp": 1632546809
    }
]