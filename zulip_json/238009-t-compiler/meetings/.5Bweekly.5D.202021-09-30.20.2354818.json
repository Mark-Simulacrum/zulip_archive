[
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span>; the triage meeting will take place in about 2h<br>\n<em>WG-prioritization</em> has done pre-triage in <a class=\"stream\" data-stream-id=\"245100\" href=\"/#narrow/stream/245100-t-compiler.2Fwg-prioritization.2Falerts\">#t-compiler/wg-prioritization/alerts</a> and prepared the <a href=\"https://hackmd.io/eviBs_qISRC9mlDve0cSRQ?view\">meeting agenda</a></p>\n<p>Scheduled checkins from:<br>\n<span class=\"user-group-mention\" data-user-group-id=\"1123\">@WG-self-profile</span>  by <span class=\"user-mention\" data-user-id=\"124287\">@mw</span>  and <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span>: anything to share?</p>",
        "id": 255559419,
        "sender_full_name": "apiraino",
        "timestamp": 1633002873
    },
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span> , triage meeting starting now. Leave a <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> to show you’re here! :)</p>",
        "id": 255578719,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633010459
    },
    {
        "content": "<p>many thanks to <span class=\"user-group-mention\" data-user-group-id=\"2403\">@WG-prioritization</span> for preparing the agenda</p>",
        "id": 255578794,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633010482
    },
    {
        "content": "<p>happy to help , as always :-)</p>",
        "id": 255578889,
        "sender_full_name": "apiraino",
        "timestamp": 1633010518
    },
    {
        "content": "<p>lets start off with ~8 minutes for </p>\n<h2>Announcements</h2>\n<p>(including MCPs/FCPs and checkins)</p>",
        "id": 255578902,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633010520
    },
    {
        "content": "<ul>\n<li>New MCPs (take a look, see if you like them!)<ul>\n<li>\"Make <code>-Z binary-dep-depinfo</code> the default behavior\" [compiler-team#464]</li>\n</ul>\n</li>\n</ul>",
        "id": 255579391,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633010659
    },
    {
        "content": "<ul>\n<li>Old MCPs (not seconded, take a look)<ul>\n<li>\"rustdoc is using rustc_ast_pretty, would it be possible to make it somewhat \"stable\"?\" <a href=\"https://github.com/rust-lang/compiler-team/issues/403\">compiler-team#403</a> (last review activity: GH none, Zulip: +2months ago)</li>\n<li>\"CI should exercise (subset of) tests under --stage 1\" <a href=\"https://github.com/rust-lang/compiler-team/issues/439\">compiler-team#439</a> (last review activity: GH none, Zulip: about 1 month ago)</li>\n<li>\"Accept <code>pc</code> in place of <code>unknown</code> and <code>unknown</code> in place of <code>pc</code> for <code>x86_64</code> and <code>i?86</code> targets\" <a href=\"https://github.com/rust-lang/compiler-team/issues/441\">compiler-team#441</a> (last review activity: GH none, Zulip: about 1 week ago)</li>\n<li>\"Tier 3 target proposal: x86_64-unknown-none (freestanding/bare-metal x86-64)\" <a href=\"https://github.com/rust-lang/compiler-team/issues/462\">compiler-team#462</a> (last review activity: GH: 10 days ago, Zulip: about 4 days ago)</li>\n</ul>\n</li>\n</ul>",
        "id": 255579457,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633010680
    },
    {
        "content": "<p>(I closed my <code>-Cprefer-dynamic=subset</code>MCP. I want to investigate the alternatives <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> has suggested.)</p>",
        "id": 255579662,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633010760
    },
    {
        "content": "<ul>\n<li>Pending FCP requests (check your boxes!)<ul>\n<li>\"Write text output files to stdout if options like <code>-o -</code> or <code>--emit asm=-</code> are provided\" <a href=\"https://github.com/rust-lang/compiler-team/issues/431\">compiler-team#431</a></li>\n</ul>\n</li>\n</ul>",
        "id": 255579727,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633010772
    },
    {
        "content": "<ul>\n<li>Things in FCP (make sure you're good with it)<ul>\n<li>No FCP requests this time.</li>\n</ul>\n</li>\n</ul>",
        "id": 255579746,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633010779
    },
    {
        "content": "<ul>\n<li>Accepted MCPs<ul>\n<li>\"Add <code>pie</code> relocation-model\" <a href=\"https://github.com/rust-lang/compiler-team/issues/461\">compiler-team#461</a></li>\n</ul>\n</li>\n</ul>",
        "id": 255579785,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633010790
    },
    {
        "content": "<ul>\n<li>Finalized FCPs (disposition merge)<ul>\n<li>\"Make *const (), *mut () okay for FFI\" <a href=\"https://github.com/rust-lang/rust/pull/84267\">rust#84267</a></li>\n<li>\"Make <code>#[derive(A, B, ...)]</code> cfg-eval its input only for <code>A, B, ...</code> and stabilize <code>feature(macro_attributes_in_derive_output)</code>\" <a href=\"https://github.com/rust-lang/rust/pull/87220\">rust#87220</a></li>\n</ul>\n</li>\n</ul>",
        "id": 255579806,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633010798
    },
    {
        "content": "<h3>WG checkins</h3>\n<p>@_WG-self-profile_ by <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> and <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> (<a href=\"https://hackmd.io/VNIxtjGBT8Owfkb92Vzt6w#WG-checkins\">previous checkin</a>):</p>\n<blockquote>\n<p>@rylev and @mw have been working towards recording non-timestamp data like the sizes of files that the compiler emits – e.g. object files and incr. comp. on-disk data as part of the self-profile infrastructure. This hasn't quite landed yet, but significant progress has been made.</p>\n</blockquote>\n<blockquote>\n<p>We've also introduced new apis that allow reading older versions of the on-disk data which will help perf.rlo work more smoothly as new versions are released.</p>\n</blockquote>",
        "id": 255579834,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633010811
    },
    {
        "content": "<p>anyone have anything else to share?</p>",
        "id": 255580085,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633010902
    },
    {
        "content": "<p>Lets move on to backport nominations</p>",
        "id": 255580108,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633010913
    },
    {
        "content": "<h2>Backport nominations</h2>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Abeta-nominated+-label%3Abeta-accepted+label%3AT-compiler\">T-compiler stable</a> / <a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Astable-nominated+-label%3Astable-accepted+label%3AT-compiler\">T-compiler beta</a></p>",
        "id": 255580121,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633010919
    },
    {
        "content": "<ul>\n<li><img alt=\":beta:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/4715/emoji/images/20717.png\" title=\"beta\"> \"Disable the evaluation cache when in intercrate mode\" <a href=\"https://github.com/rust-lang/rust/pull/88994\">rust#88994</a><ul>\n<li>beta nominated by <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <a href=\"https://github.com/rust-lang/rust/pull/88994#issuecomment-921740736\">to fix #88869</a>, a beta regresion</li>\n<li><span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> comments this causes the regression <a href=\"https://github.com/rust-lang/rust/pull/88994#issuecomment-923091128\">rust#89119</a> now fixed by <a href=\"https://github.com/rust-lang/rust/pull/89125\">rust#89125</a></li>\n<li>seems to be perf neutral</li>\n<li>should also <a href=\"https://github.com/rust-lang/rust/issues/89125\">#89125</a> be beta-backport nominated?</li>\n</ul>\n</li>\n</ul>",
        "id": 255580145,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633010927
    },
    {
        "content": "<p>hi</p>",
        "id": 255580213,
        "sender_full_name": "Mara",
        "timestamp": 1633010953
    },
    {
        "content": "<p>Let me look at these linked issues</p>",
        "id": 255580280,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633010983
    },
    {
        "content": "<p>there's a couple of PRs filed which \"fix\" <a href=\"https://github.com/rust-lang/rust/issues/88969\">https://github.com/rust-lang/rust/issues/88969</a> and I don't know what set is necessary to actually do so</p>",
        "id": 255580407,
        "sender_full_name": "simulacrum",
        "timestamp": 1633011029
    },
    {
        "content": "<p>if the first one backported, the second one should also be.</p>",
        "id": 255580477,
        "sender_full_name": "Mara",
        "timestamp": 1633011055
    },
    {
        "content": "<p>It's that PR, and another one</p>",
        "id": 255580493,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1633011058
    },
    {
        "content": "<p>^</p>",
        "id": 255580502,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1633011060
    },
    {
        "content": "<p>The first one didn't completely fix the issue with caching in intercrate mode</p>",
        "id": 255580638,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1633011113
    },
    {
        "content": "<p>so I guess it turned out that its in fact <em>not</em>  <a href=\"https://github.com/rust-lang/rust/pull/88994#issuecomment-921348077\">\"obviously ‘correct' to just not cache”</a></p>",
        "id": 255580700,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633011124
    },
    {
        "content": "<blockquote>\n<p>should also <a href=\"https://github.com/rust-lang/rust/issues/89125\">#89125</a> be beta-backport nominated?</p>\n</blockquote>\n<p>I think we should take <a href=\"https://github.com/rust-lang/rust/issues/89125\">#89125</a> as well. If we're going to backport this to fix a known issue, I don't think it makes a lot of sense to inject a different known issue.</p>",
        "id": 255580729,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1633011136
    },
    {
        "content": "<p>Well, it is, but just not caching there doesn't do enough</p>",
        "id": 255580772,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633011152
    },
    {
        "content": "<p>I agree with <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> , in that we need to be talking about backporting both PR’s in tandem</p>",
        "id": 255580816,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633011166
    },
    {
        "content": "<p>so lets treat this nomination request as being about both PR's</p>",
        "id": 255580849,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633011180
    },
    {
        "content": "<p>My comment was more so say: \"we can't introduce any soundness issues or such, because we just do more computation\"</p>",
        "id": 255580882,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633011190
    },
    {
        "content": "<p>So, both <a href=\"https://github.com/rust-lang/rust/issues/88994\">rust#88994</a> <a href=\"https://github.com/rust-lang/rust/issues/89125\">#89125</a></p>",
        "id": 255580891,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633011192
    },
    {
        "content": "<p>There’s no tests on <a href=\"https://github.com/rust-lang/rust/issues/89125\">#89125</a></p>",
        "id": 255581112,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633011269
    },
    {
        "content": "<p>Unfortunately, I wasn't able to minimize a regression test</p>",
        "id": 255581200,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1633011298
    },
    {
        "content": "<p>okay</p>",
        "id": 255581250,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633011318
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> lack of time, or is it really hard to minimize the <code>zvariant</code> example from <a href=\"https://github.com/rust-lang/rust/issues/89119\">#89119</a> ?</p>",
        "id": 255581325,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633011348
    },
    {
        "content": "<p>anyway</p>",
        "id": 255581464,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633011381
    },
    {
        "content": "<p>I say backport approve on <a href=\"https://github.com/rust-lang/rust/issues/88994\">#88994</a> and <a href=\"https://github.com/rust-lang/rust/issues/89125\">#89125</a></p>",
        "id": 255581496,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633011389
    },
    {
        "content": "<p>Some of both</p>",
        "id": 255581522,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1633011398
    },
    {
        "content": "<p>and maybe add a needs-test to <a href=\"https://github.com/rust-lang/rust/issues/89119\">#89119</a> ?</p>",
        "id": 255581537,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633011403
    },
    {
        "content": "<p>Incremental predicate issues are really hard to minimize</p>",
        "id": 255581568,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1633011412
    },
    {
        "content": "<p>hmm okay</p>",
        "id": 255581627,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633011431
    },
    {
        "content": "<p>Should we reopen the issue too? For needs-test</p>",
        "id": 255581689,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633011452
    },
    {
        "content": "<p>I won’t reopen <a href=\"https://github.com/rust-lang/rust/issues/89119\">#89119</a> immediately then</p>",
        "id": 255581690,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633011452
    },
    {
        "content": "<p><span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 255581711,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633011463
    },
    {
        "content": "<p>or rather… I know I cannot dedicate time to investigate making a regression test</p>",
        "id": 255581727,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633011469
    },
    {
        "content": "<p>Oh, wait, that was a non-incremental issue - it should be easier to minimize</p>",
        "id": 255581731,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1633011471
    },
    {
        "content": "<p>Heh</p>",
        "id": 255581740,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633011474
    },
    {
        "content": "<p>okay then, lets reopen it</p>",
        "id": 255581750,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633011479
    },
    {
        "content": "<p>done</p>",
        "id": 255581810,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633011485
    },
    {
        "content": "<p>(and I already added the E-needs-test label to it)</p>",
        "id": 255581838,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633011493
    },
    {
        "content": "<p>next</p>",
        "id": 255581882,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633011506
    },
    {
        "content": "<blockquote>\n<p>I say backport approve on <a href=\"https://github.com/rust-lang/rust/issues/88994\">#88994</a> and <a href=\"https://github.com/rust-lang/rust/issues/89125\">#89125</a></p>\n</blockquote>\n<p>so both beta-backport approved, correct?</p>",
        "id": 255581968,
        "sender_full_name": "apiraino",
        "timestamp": 1633011532
    },
    {
        "content": "<p>yes</p>",
        "id": 255581983,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633011539
    },
    {
        "content": "<p>they are both only nominated for beta backport, right?</p>",
        "id": 255582040,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633011558
    },
    {
        "content": "<p>yes</p>",
        "id": 255582056,
        "sender_full_name": "apiraino",
        "timestamp": 1633011564
    },
    {
        "content": "<ul>\n<li><img alt=\":beta:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/4715/emoji/images/20717.png\" title=\"beta\"> \"2229: Mark insignificant dtor in stdlib\" <a href=\"https://github.com/rust-lang/rust/pull/89144\">rust#89144</a><ul>\n<li>seems to be perf neutral</li>\n<li>nominated by <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> to <a href=\"https://github.com/rust-lang/rust/pull/89144#issuecomment-925989791\">have it for RFC2229</a></li>\n</ul>\n</li>\n</ul>",
        "id": 255582058,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633011565
    },
    {
        "content": "<p>hmm</p>",
        "id": 255582305,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633011635
    },
    {
        "content": "<p>this is more internal machinery than I was expecting</p>",
        "id": 255582333,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633011647
    },
    {
        "content": "<p>this is basically an edition migration fix, though it is somewhat invasive</p>",
        "id": 255582388,
        "sender_full_name": "simulacrum",
        "timestamp": 1633011664
    },
    {
        "content": "<p>/me skims</p>",
        "id": 255582395,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633011666
    },
    {
        "content": "<p>without it the UX of migrations is pretty subpar, IMO, because we lint a lot more than necessary (e.g., on any vec)</p>",
        "id": 255582469,
        "sender_full_name": "simulacrum",
        "timestamp": 1633011693
    },
    {
        "content": "<p>Yeah, it sounds like a very similar analysis to dropck itself</p>",
        "id": 255582540,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633011716
    },
    {
        "content": "<p>vast bulk of diff is tests</p>",
        "id": 255582684,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633011757
    },
    {
        "content": "<p>I guess I’m comfortable with it. We need it for the edition, as you say</p>",
        "id": 255582745,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633011773
    },
    {
        "content": "<p>test 2229_closure_analysis/migrations/insignificant_drop.rs changed a lot</p>",
        "id": 255582965,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633011852
    },
    {
        "content": "<p>Do we know what methodology was used to determine which types would be annotated?</p>",
        "id": 255582974,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1633011855
    },
    {
        "content": "<p>I'm kind of curious why <code>Rc</code> is insignificant but <code>Arc</code> isn't ...</p>",
        "id": 255583030,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1633011873
    },
    {
        "content": "<p>I guess I'm getting off topic.</p>",
        "id": 255583060,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1633011887
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-09-30.20.2354818/near/255582965\">said</a>:</p>\n<blockquote>\n<p>test 2229_closure_analysis/migrations/insignificant_drop.rs changed a lot</p>\n</blockquote>\n<p>but it is of course part of this feature itself. So I guess its not risky. Just need to trust that its right.</p>",
        "id": 255583089,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633011901
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-09-30.20.2354818/near/255583030\">said</a>:</p>\n<blockquote>\n<p>I'm kind of curious why <code>Rc</code> is insignificant but <code>Arc</code> isn't ...</p>\n</blockquote>\n<p>maybe because <code>Arc</code> has a broader, non-local effect?</p>",
        "id": 255583138,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633011924
    },
    {
        "content": "<p>but yeah, understanding basis for policy here would be good</p>",
        "id": 255583185,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633011943
    },
    {
        "content": "<p>The 'significance' of a destructor only applies for edition migrations, right?</p>",
        "id": 255583352,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1633011997
    },
    {
        "content": "<p>do we thinking leaving this for another week will improve anything?</p>",
        "id": 255583353,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633011997
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-09-30.20.2354818/near/255583352\">said</a>:</p>\n<blockquote>\n<p>The 'significance' of a destructor only applies for edition migrations, right?</p>\n</blockquote>\n<p>that’s my understanding</p>",
        "id": 255583384,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633012008
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-09-30.20.2354818/near/255583352\">said</a>:</p>\n<blockquote>\n<p>The 'significance' of a destructor only applies for edition migrations, right?</p>\n</blockquote>\n<p>correct, yes</p>",
        "id": 255583388,
        "sender_full_name": "simulacrum",
        "timestamp": 1633012008
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-09-30.20.2354818/near/255583353\">said</a>:</p>\n<blockquote>\n<p>do we thinking leaving this for another week will improve anything?</p>\n</blockquote>\n<p>my thinking is: We’re almost certain to beta-backport approve this at <em>some</em> point.</p>",
        "id": 255583439,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633012034
    },
    {
        "content": "<p>I don't think waiting a week helps</p>",
        "id": 255583473,
        "sender_full_name": "simulacrum",
        "timestamp": 1633012042
    },
    {
        "content": "<p>the only question is whether there’s any reason to wait</p>",
        "id": 255583483,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633012043
    },
    {
        "content": "<p>I think I would rather approve sooner than later.</p>",
        "id": 255583502,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1633012049
    },
    {
        "content": "<p>and I don’t think it will.</p>",
        "id": 255583512,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633012051
    },
    {
        "content": "<p>okay</p>",
        "id": 255583517,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633012052
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/89144\">rust#89144</a> beta backport approved</p>",
        "id": 255583565,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633012066
    },
    {
        "content": "<p>I'd rather have it in sooner for it to be bundled into the edition migration crater run (not sure when that's happening)</p>",
        "id": 255583573,
        "sender_full_name": "simulacrum",
        "timestamp": 1633012069
    },
    {
        "content": "<ul>\n<li><img alt=\":beta:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/4715/emoji/images/20717.png\" title=\"beta\"> \"[rfc 2229] Drop fully captured upvars in the same order as the regular drop code\" <a href=\"https://github.com/rust-lang/rust/pull/89208\">rust#89208</a><ul>\n<li>Opened by <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span></li>\n<li>We need this for Rust 2021</li>\n</ul>\n</li>\n</ul>",
        "id": 255583604,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633012081
    },
    {
        "content": "<p>heck yeazh</p>",
        "id": 255583731,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633012115
    },
    {
        "content": "<p>sorry I love this sort of change</p>",
        "id": 255583758,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633012127
    },
    {
        "content": "<p>backport <a href=\"https://github.com/rust-lang/rust/issues/89208\">#89208</a> approved</p>",
        "id": 255584072,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633012236
    },
    {
        "content": "<ul>\n<li><img alt=\":beta:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/4715/emoji/images/20717.png\" title=\"beta\"> \"Don't normalize opaque types with escaping late-bound regions\" <a href=\"https://github.com/rust-lang/rust/pull/89285\">rust#89285</a><ul>\n<li>Opened by <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span></li>\n<li>Fixes a P-medium <a href=\"https://github.com/rust-lang/rust/issues/88862\">rust#88862</a> causing a cargo build hang</li>\n</ul>\n</li>\n</ul>",
        "id": 255584117,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633012250
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> what is long term plan here?</p>",
        "id": 255584356,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633012334
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-09-30.20.2354818/near/255583758\">said</a>:</p>\n<blockquote>\n<p>sorry I love this sort of change</p>\n</blockquote>\n<p>I have read the PR and the issue and I still have no idea what the previous behaviour was, what the new behaviour is and why is one better than the other, tbh.</p>",
        "id": 255584358,
        "sender_full_name": "nagisa",
        "timestamp": 1633012335
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> before the drop order was dependant on how the fields were referenced in the lambda expressinm</p>",
        "id": 255584413,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633012356
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> that PR changes it so that you get a drop order that is defined by the declaration order, not by how the variables were used in the lambda expression</p>",
        "id": 255584466,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633012382
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> but maybe your point is that the test needs to be clearer?</p>",
        "id": 255584503,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633012398
    },
    {
        "content": "<p>uh two seconds, let me bring this into cache</p>",
        "id": 255584517,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633012404
    },
    {
        "content": "<p>Right, so, I mean long-term plan is lazy-normalization</p>",
        "id": 255584570,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633012430
    },
    {
        "content": "<p>here, it would be nice to not have to make the escaping late-bound regions case special, but seems like there's a perf impact (though we can other handle it fine)</p>",
        "id": 255584684,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633012465
    },
    {
        "content": "<p>Ah. Well, I'm quite surprised we still split out fully captured upvars into fields (if we do?) and if we don't I would love a codegen test at least that ensures we call the drop glue for the containing fully captured structure and not its fields.</p>",
        "id": 255584783,
        "sender_full_name": "nagisa",
        "timestamp": 1633012509
    },
    {
        "content": "<p>Probably a missed cache somewhere; I tried to debug this but the log was so long it was really rough. I ran out of time.</p>",
        "id": 255584789,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633012512
    },
    {
        "content": "<p>But my point is basically that the change is way too complicated to look at quickly ^^</p>",
        "id": 255584830,
        "sender_full_name": "nagisa",
        "timestamp": 1633012533
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> okay thanks</p>",
        "id": 255584846,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633012543
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-09-30.20.2354818/near/255584783\">said</a>:</p>\n<blockquote>\n<p>Ah. Well, I'm quite surprised we still split out fully captured upvars into fields (if we do?) and if we don't I would love a codegen test at least that ensures we call the drop glue for the containing fully captured structure and not its fields.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> ^ thoughts on this?</p>",
        "id": 255584865,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633012555
    },
    {
        "content": "<p>Niko and I talked about that when I started working on the PR but we felt this would be the simpler change to make at this time and (now that we've done this), we can always go back and do that later without changing behavior again.</p>",
        "id": 255584997,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1633012598
    },
    {
        "content": "<p>fair.</p>",
        "id": 255585067,
        "sender_full_name": "nagisa",
        "timestamp": 1633012633
    },
    {
        "content": "<p>Okay so I guess the point here is that we are still capturing upvars into individual fields (right?).</p>",
        "id": 255585096,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633012644
    },
    {
        "content": "<p>Yes</p>",
        "id": 255585103,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1633012649
    },
    {
        "content": "<p>and I infer the main drawback to this is that it makes the closures larger than need be</p>",
        "id": 255585121,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633012657
    },
    {
        "content": "<p>right?</p>",
        "id": 255585124,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633012658
    },
    {
        "content": "<p>Uh</p>",
        "id": 255585183,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1633012681
    },
    {
        "content": "<p>Wouldn't they be the same size?</p>",
        "id": 255585241,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1633012688
    },
    {
        "content": "<p>The codegen is less efficient around drops, but the closures themselves should remain optimal.</p>",
        "id": 255585258,
        "sender_full_name": "nagisa",
        "timestamp": 1633012695
    },
    {
        "content": "<p>Okay, as long as the two of you are happily communicating, then I won’t worry about what I misunderstand here.</p>",
        "id": 255585337,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633012732
    },
    {
        "content": "<p>I'm happy to discuss it more to make sure everyone is on board with the backport <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 255585438,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1633012772
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> sounds happy with the short term answer?</p>",
        "id": 255585480,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633012788
    },
    {
        "content": "<p>Sure, lets move on.</p>",
        "id": 255585496,
        "sender_full_name": "nagisa",
        "timestamp": 1633012794
    },
    {
        "content": "<p>back to <a href=\"https://github.com/rust-lang/rust/issues/89285\">rust#89285</a></p>",
        "id": 255585557,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633012805
    },
    {
        "content": "<p>I think it seems fine to backport <a href=\"https://github.com/rust-lang/rust/issues/89285\">rust#89285</a></p>",
        "id": 255585587,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633012816
    },
    {
        "content": "<ul>\n<li>No stable nominations for <code>T-compiler</code> this time.</li>\n</ul>",
        "id": 255585612,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633012823
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Abeta-nominated+-label%3Abeta-accepted+label%3AT-rustdoc\">T-rustdoc stable</a> / <a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Astable-nominated+-label%3Astable-accepted+label%3AT-rustdoc\">T-rustdoc beta</a></p>\n<ul>\n<li><img alt=\":beta:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/4715/emoji/images/20717.png\" title=\"beta\"> \"Use the correct edition for syntax highlighting doctests\" <a href=\"https://github.com/rust-lang/rust/pull/89277\">rust#89277</a><ul>\n<li>nominated by <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> as needed for 2021 edition</li>\n<li>T-rustdoc (cc <span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span>) is fine with the backport</li>\n</ul>\n</li>\n</ul>",
        "id": 255585648,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633012834
    },
    {
        "content": "<p>Wait, hang on a second.</p>",
        "id": 255585691,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1633012847
    },
    {
        "content": "<p>ok</p>",
        "id": 255585708,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633012857
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/89285\">#89285</a> said it was effectively a partial revert of <a href=\"https://github.com/rust-lang/rust/issues/85499\">#85499</a>. Does that mean it re-introduces the issues that PR fixed?</p>",
        "id": 255585805,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1633012898
    },
    {
        "content": "<p>\"While we technically can handle them fine, it doesn't change test output either way\"</p>",
        "id": 255585954,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633012944
    },
    {
        "content": "<p>Oh, I see <a href=\"https://github.com/rust-lang/rust/issues/85499\">#85499</a> also landed in 1.56.</p>",
        "id": 255585958,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1633012944
    },
    {
        "content": "<p>So, <a href=\"https://github.com/rust-lang/rust/issues/89285\">#89285</a></p>",
        "id": 255585984,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633012957
    },
    {
        "content": "<p>So this won't introduce any behavior changes in this release.</p>",
        "id": 255586007,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1633012966
    },
    {
        "content": "<p>It's only a partial revert for opaque types with escaping bound vars</p>",
        "id": 255586021,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633012970
    },
    {
        "content": "<p>we good?</p>",
        "id": 255586067,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633012990
    },
    {
        "content": "<p>Seems like the only issue that's popped up relates to TAIT</p>",
        "id": 255586074,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633012993
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 255586079,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1633012995
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 255586089,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1633012997
    },
    {
        "content": "<p>okay</p>",
        "id": 255586118,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633013006
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Abeta-nominated+-label%3Abeta-accepted+label%3AT-rustdoc\">T-rustdoc stable</a> / <a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Astable-nominated+-label%3Astable-accepted+label%3AT-rustdoc\">T-rustdoc beta</a></p>\n<ul>\n<li><img alt=\":beta:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/4715/emoji/images/20717.png\" title=\"beta\"> \"Use the correct edition for syntax highlighting doctests\" <a href=\"https://github.com/rust-lang/rust/pull/89277\">rust#89277</a><ul>\n<li>nominated by <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> as needed for 2021 edition</li>\n<li>T-rustdoc (cc <span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span>) is fine with the backport</li>\n</ul>\n</li>\n</ul>",
        "id": 255586155,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633013019
    },
    {
        "content": "<p>Just to re-confirm: I'm okay with the backport</p>",
        "id": 255586319,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1633013070
    },
    {
        "content": "<p>seeems fine ….</p>",
        "id": 255586334,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633013077
    },
    {
        "content": "<p>I’m not sure if I should be worried about there only being one small test in that PR (and no sign of changes to other tests)</p>",
        "id": 255586594,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633013183
    },
    {
        "content": "<p>but, <a href=\"https://github.com/rust-lang/rust/issues/89277\">#89277</a> backport approved</p>",
        "id": 255586645,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633013208
    },
    {
        "content": "<p>a sec…</p>",
        "id": 255586661,
        "sender_full_name": "nagisa",
        "timestamp": 1633013214
    },
    {
        "content": "<p>okay lets wait a moment</p>",
        "id": 255586695,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633013227
    },
    {
        "content": "<p>does this affect the parsing of the codeblocks at all? The test with the note suggests that it does?</p>",
        "id": 255586700,
        "sender_full_name": "nagisa",
        "timestamp": 1633013229
    },
    {
        "content": "<p>parsing (i.e., to run the doctest) was already using the edition</p>",
        "id": 255586728,
        "sender_full_name": "simulacrum",
        "timestamp": 1633013243
    },
    {
        "content": "<p>Like</p>\n<div class=\"codehilite\"><pre><span></span><code>//~^^^ ERROR could not parse\n//~| NOTE prefix `foo` is unknown\n</code></pre></div>",
        "id": 255586738,
        "sender_full_name": "nagisa",
        "timestamp": 1633013247
    },
    {
        "content": "<p>but the tokenization for the lint is affected (that's the purpose of the patch)</p>",
        "id": 255586780,
        "sender_full_name": "simulacrum",
        "timestamp": 1633013263
    },
    {
        "content": "<p>okay?</p>",
        "id": 255586880,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633013294
    },
    {
        "content": "<p>I think want a crater for this? It seems to me like this can affect building documentation for 2018 crates that previously built fine?</p>",
        "id": 255586891,
        "sender_full_name": "nagisa",
        "timestamp": 1633013297
    },
    {
        "content": "<p>No, it by default continues to use the \"crate edition\"</p>",
        "id": 255586922,
        "sender_full_name": "simulacrum",
        "timestamp": 1633013310
    },
    {
        "content": "<p>certainly migrating to 2021 can break your rustdoc invocation (we don't have a migration for this)</p>",
        "id": 255586963,
        "sender_full_name": "simulacrum",
        "timestamp": 1633013326
    },
    {
        "content": "<p>the effect is opted in by someone writing <code>edition2018</code> on their fence, right? but they could have already been doing that?</p>",
        "id": 255587001,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633013339
    },
    {
        "content": "<p>I <em>guess</em> it could change behavior for 2015 crates that had edition2018 on their doctest</p>",
        "id": 255587067,
        "sender_full_name": "simulacrum",
        "timestamp": 1633013365
    },
    {
        "content": "<p>but since this is just tokenizing, I don't think there's actually any breakage there -- edition2018 didn't change tokenization to add errors, only 2021 did that</p>",
        "id": 255587128,
        "sender_full_name": "simulacrum",
        "timestamp": 1633013388
    },
    {
        "content": "<p>Okay…</p>",
        "id": 255587218,
        "sender_full_name": "nagisa",
        "timestamp": 1633013407
    },
    {
        "content": "<p>it seems okay to accept that potential breakage (which seems like it might not exist) in order to get the partial addressing of <a href=\"https://github.com/rust-lang/rust/issues/89135\">#89135</a> ?</p>",
        "id": 255587261,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633013418
    },
    {
        "content": "<p>is this something where we again do not want to wait a week</p>",
        "id": 255587361,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633013454
    },
    {
        "content": "<p>because we’d prefer to get it sooner, for a edition crater run?</p>",
        "id": 255587381,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633013462
    },
    {
        "content": "<p>Hm, not sure, but I don't think we gain anything</p>",
        "id": 255587414,
        "sender_full_name": "simulacrum",
        "timestamp": 1633013477
    },
    {
        "content": "<p>I think I’m still okay beta-backport approving it</p>",
        "id": 255587444,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633013489
    },
    {
        "content": "<p>If we get an edition crater run either way I'm fine with  a backport.</p>",
        "id": 255587463,
        "sender_full_name": "nagisa",
        "timestamp": 1633013498
    },
    {
        "content": "<p>okay</p>",
        "id": 255587472,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633013502
    },
    {
        "content": "<p>my concern is basically \"lets get a crater run\" anyway.</p>",
        "id": 255587490,
        "sender_full_name": "nagisa",
        "timestamp": 1633013507
    },
    {
        "content": "<p>definitely</p>",
        "id": 255587504,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633013514
    },
    {
        "content": "<ul>\n<li>No stable nominations for <code>T-rustdoc</code> this time.</li>\n</ul>",
        "id": 255587506,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633013514
    },
    {
        "content": "<h2>PRs S-waiting-on-team</h2>\n<p><a href=\"https://github.com/rust-lang/rust/pulls?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AS-waiting-on-team+label%3AT-compiler\">T-compiler</a></p>\n<ul>\n<li>\"On macOS, make strip=\"symbols\" not pass any options to strip\" <a href=\"https://github.com/rust-lang/rust/pull/88137\">rust#88137</a><ul>\n<li><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> has a note about asking if Alex has any insight into macOS</li>\n</ul>\n</li>\n</ul>",
        "id": 255587527,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633013522
    },
    {
        "content": "<p>Lets keep waiting on alex for now</p>",
        "id": 255587601,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633013537
    },
    {
        "content": "<p>we have only 8 minutes left</p>",
        "id": 255587634,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633013547
    },
    {
        "content": "<p>Skimming hte agenda</p>",
        "id": 255587690,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633013565
    },
    {
        "content": "<p>I want to jump straight to a nominated issue first</p>",
        "id": 255587785,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633013604
    },
    {
        "content": "<ul>\n<li>\"Rust can't infer appropriate generics for function when it should\" <a href=\"https://github.com/rust-lang/rust/issues/89242\">rust#89242</a><ul>\n<li>Issue opened by <span class=\"user-mention\" data-user-id=\"386570\">@TheRawMeatball</span></li>\n<li>regression from stable to beta</li>\n<li>Investigated by <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span>, <a href=\"https://github.com/rust-lang/rust/issues/89242#issuecomment-930760694\">suggests ways to move forward</a></li>\n</ul>\n</li>\n</ul>",
        "id": 255587805,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633013612
    },
    {
        "content": "<p>I guess, one more: do nothing</p>",
        "id": 255587965,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633013657
    },
    {
        "content": "<p>(right now)</p>",
        "id": 255587977,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633013661
    },
    {
        "content": "<p>hmm, maybe we shouldn’t try to resolve this in 8 minutes</p>",
        "id": 255588014,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633013670
    },
    {
        "content": "<p>(6 now)</p>",
        "id": 255588025,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633013673
    },
    {
        "content": "<p>I'm OK letting this slip, particularly since we have no actual evidence this will hit anyone</p>",
        "id": 255588076,
        "sender_full_name": "simulacrum",
        "timestamp": 1633013694
    },
    {
        "content": "<p>I agree we should not revert <a href=\"https://github.com/rust-lang/rust/issues/85499\">#85499</a> in service of this</p>",
        "id": 255588084,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633013697
    },
    {
        "content": "<p>and that we are not going to implement lazy normalizatino and backport it to beta</p>",
        "id": 255588126,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633013715
    },
    {
        "content": "<p>(the example in the issue is just \"I'm experimenting on playground\")</p>",
        "id": 255588128,
        "sender_full_name": "simulacrum",
        "timestamp": 1633013716
    },
    {
        "content": "<blockquote>\n<p>3) Make <code>structurally_resolved_type</code> not need to select obligations where possible, or otherwise just skip <code>Unimplemented</code>. Not sure this will work. Just commenting out <code>select_where_possible</code> doesn't build core.</p>\n</blockquote>\n<p>I don’t fully understand this, in terms of how likely it is to yield fruit and/or how hard it will be to play with</p>",
        "id": 255588244,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633013758
    },
    {
        "content": "<p>Lazy norm seems like the correct solution here but that's work in progress. I'm also ok with this slip into 1.56 since the code was uncallable anyway.</p>",
        "id": 255588436,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1633013817
    },
    {
        "content": "<p>Well, supposedly by resolving obligations (where possible) when resolving the type of a function call, that helps us later</p>",
        "id": 255588443,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633013818
    },
    {
        "content": "<p>I forget if we have precedent around this -- I recall discussion about a similar breakage/bugfix/feature that let you skip writing \"impossible methods\" or something like that in trait impls?</p>",
        "id": 255588451,
        "sender_full_name": "simulacrum",
        "timestamp": 1633013821
    },
    {
        "content": "<p>That does seem familiar yeah...</p>",
        "id": 255588482,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1633013834
    },
    {
        "content": "<p>For 1.56, I assume a crater run is likely to tell us if we missed a case where this matter, right?</p>",
        "id": 255588567,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633013866
    },
    {
        "content": "<p>I'll also probably discuss this with <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> on Monday</p>",
        "id": 255588603,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633013877
    },
    {
        "content": "<p>okay</p>",
        "id": 255588614,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633013880
    },
    {
        "content": "<p>Crater didn't see it (or at least I didn't see evidence)</p>",
        "id": 255588617,
        "sender_full_name": "simulacrum",
        "timestamp": 1633013881
    },
    {
        "content": "<p>lets leave it alone then</p>",
        "id": 255588655,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633013883
    },
    {
        "content": "<p>He might have some insight I missed</p>",
        "id": 255588662,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633013884
    },
    {
        "content": "<p>I’ll leave it nominated for now</p>",
        "id": 255588687,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633013892
    },
    {
        "content": "<p>we can discuss again next week</p>",
        "id": 255588703,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633013898
    },
    {
        "content": "<p>for everything else on agenda</p>",
        "id": 255588735,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633013912
    },
    {
        "content": "<p>people can start reading from here: <a href=\"https://hackmd.io/eviBs_qISRC9mlDve0cSRQ?both#Oldest-PRs-waiting-for-review\">https://hackmd.io/eviBs_qISRC9mlDve0cSRQ?both#Oldest-PRs-waiting-for-review</a></p>",
        "id": 255588785,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633013929
    },
    {
        "content": "<p>what I want to call out</p>",
        "id": 255588801,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633013935
    },
    {
        "content": "<p>is this:</p>",
        "id": 255588816,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633013940
    },
    {
        "content": "<h2>Performance logs</h2>\n<blockquote>\n<p><a href=\"https://github.com/rust-lang/rustc-perf/blob/master/triage/2021-09-28.md\">triage logs for 2021-09-28</a></p>\n</blockquote>\n<p>The largest story for the week are the massive improvements that come from enabling the new pass manager in LLVM which leads to consistent 5% to 30% improvements across almost all test cases. The regressions were mostly minor with clear paths for addressing the ones that were not made with some specific trade off in mind.</p>\n<p>Triage done by <strong>@rylev</strong>. Revision range: <a href=\"https://perf.rust-lang.org/?start=7743c9fadd64886d537966ba224b9c20e6014a59&amp;end=83f147b3baf21acfc367a6da1045d212cd3957e4&amp;absolute=false&amp;stat=instructions%3Au\">7743c9fadd64886d537966ba224b9c20e6014a59..83f147b3baf21acfc367a6da1045d212cd3957e4</a></p>\n<p>4 Regressions, 4 Improvements, 3 Mixed; 0 of them in rollups<br>\n43 comparisons made in total</p>",
        "id": 255588854,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633013952
    },
    {
        "content": "<p>the new pass manager in LLVM sounds dope</p>",
        "id": 255588894,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633013968
    },
    {
        "content": "<p>but since I just celebrated</p>",
        "id": 255588943,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633013988
    },
    {
        "content": "<p>let me end meeting by being a Debbie Downer:</p>",
        "id": 255588962,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633013995
    },
    {
        "content": "<h4>Regressions</h4>\n<p>Revise never type fallback algorithm <a href=\"https://github.com/rust-lang/rust/issues/88804\">#88804</a></p>\n<ul>\n<li>Large regression in <a href=\"https://perf.rust-lang.org/compare.html?start=2b862bed9889808b69629fd7246317189b9517a5&amp;end=900cf5e8905ba8a2a9c99a1dfc9cb2cf4754d77a&amp;stat=instructions:u\">instruction counts</a> (up to 2.7% on <code>full</code> builds of <code>keccak</code>)</li>\n</ul>\n<p>Introduce <code>Rvalue::ShallowInitBox</code> <a href=\"https://github.com/rust-lang/rust/issues/89030\">#89030</a></p>\n<ul>\n<li>Moderate regression in <a href=\"https://perf.rust-lang.org/compare.html?start=218a96cae06ed1a47549a81c09c3655fbcae1363&amp;end=e9f29a851917a706c01b6f51331894df1d15770b&amp;stat=instructions:u\">instruction counts</a> (up to 1.9% on <code>incr-patched: println</code> builds of <code>syn</code>)</li>\n<li>Perf regression is happening in real-world optimized builds which we would expect if we're making LLVM do more work.</li>\n<li>The author has an idea for how to reduce the pressure on LLVM and perhaps win back some of the perf, but was unsure if the regression was large enough to warrant that investigation.</li>\n<li>Left a comment asking the author to think about prioritizing that <a href=\"https://github.com/rust-lang/rust/pull/89030#issuecomment-929187148\">investigation</a>.</li>\n</ul>\n<p>Fix spacing of links in inline code. <a href=\"https://github.com/rust-lang/rust/issues/88343\">#88343</a></p>\n<ul>\n<li>Large regression in <a href=\"https://perf.rust-lang.org/compare.html?start=9620f3a84b079decfdc2e557be007580b097fe43&amp;end=addb4da686a97da46159f0123cb6cdc2ce3d7fdb&amp;stat=instructions:u\">instruction counts</a> (up to 2.1% on <code>incr-unchanged</code> builds of <code>webrender-wrench</code>)</li>\n<li>This change is only in doc comments for the standard library so large regressions are quite surprising.</li>\n<li>This has impacted the incr-unchanged scenario of only one benchmark. Perhaps the docs led to a change in how incremental cache was being stored which could have an impact?</li>\n</ul>\n<p>Suggest both of immutable and mutable trait implementations <a href=\"https://github.com/rust-lang/rust/issues/89263\">#89263</a></p>\n<ul>\n<li>Moderate regression in <a href=\"https://perf.rust-lang.org/compare.html?start=583437a6dd58ee266839d2dac940642a0752a6dd&amp;end=3e8f32e1c52ca493c862facb7a69e7c3f1f97a18&amp;stat=instructions:u\">instruction counts</a> (up to 2.0% on <code>full</code> builds of <code>diesel</code>)</li>\n<li>The regression occurs in <code>evaluate_obligation</code> which seems like it would be effected by this change, but the only impacted benchmark is diesel doc which doesn't trigger this diagnostic</li>\n<li>The change is large enough though that it being noise would be quite surprising.</li>\n<li>Left a <a href=\"https://github.com/rust-lang/rust/pull/89263#issuecomment-929511988\">comment</a></li>\n</ul>",
        "id": 255588965,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633013996
    },
    {
        "content": "<p>The triager left comments or thoughts for number of these</p>",
        "id": 255589132,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633014027
    },
    {
        "content": "<p>but nothing on <a href=\"https://github.com/rust-lang/rust/issues/88804\">#88804</a> <a href=\"https://github.com/rust-lang/rust/pull/88804\">https://github.com/rust-lang/rust/pull/88804</a></p>",
        "id": 255589216,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633014050
    },
    {
        "content": "<p>I'll take an opportunity to link <a href=\"#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/LLVM.20ir.20codegen.20quality/near/255074401\">this</a> which sounds super interesting.</p>",
        "id": 255589241,
        "sender_full_name": "nagisa",
        "timestamp": 1633014057
    },
    {
        "content": "<p>I have to go</p>",
        "id": 255589412,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633014111
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 255589495,
        "sender_full_name": "nagisa",
        "timestamp": 1633014129
    },
    {
        "content": "<p>thanjs to all in <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span>  for attending! Great meeting all, sorry we didn’t get through more of the agenda together!</p>",
        "id": 255589506,
        "sender_full_name": "pnkfelix",
        "timestamp": 1633014131
    },
    {
        "content": "<p>Draft for next week's agenda available at:<br>\n<a href=\"https://hackmd.io/IGePuIQTQqGzdwqVrN1IlA?view\">https://hackmd.io/IGePuIQTQqGzdwqVrN1IlA?view</a></p>\n<p>Scheduled checkins from:</p>\n<ul>\n<li>@_WG-async-foundations_ by <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span></li>\n<li>@_WG-traits_ by <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span></li>\n</ul>",
        "id": 255589789,
        "sender_full_name": "apiraino",
        "timestamp": 1633014223
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-09-30.20.2354818/near/255586891\">said</a>:</p>\n<blockquote>\n<p>I think want a crater for this? It seems to me like this can affect building documentation for 2018 crates that previously built fine?</p>\n</blockquote>\n<p>so, a few things:</p>\n<ol>\n<li>the lint is warn-by-default, so this won't outright break any project no matter what</li>\n<li>crates won't see the new lint unless they opt-in to 2015 or 2021 parsing on the code block, this does not change the default behavior</li>\n<li>before rustdoc was <em>completely ignoring</em> the edition, which just seems like an outright bug</li>\n</ol>\n<p>So I'm not sure why you think crater is necessary; I don't see this as different from fixing a bug in any other lint.</p>",
        "id": 255590541,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1633014480
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-09-30.20.2354818/near/255586594\">said</a>:</p>\n<blockquote>\n<p>I’m not sure if I should be worried about there only being one small test in that PR (and no sign of changes to other tests)</p>\n</blockquote>\n<p>none of the other tests were affected because it's very rare this actually changes anything, it only matters for 2021 edition because it introduced new lex errors</p>",
        "id": 255594022,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1633015771
    },
    {
        "content": "<p>so actually I think the only crates it could possibly fire for are ones that are using 2021 already, which isn't yet stable</p>",
        "id": 255594339,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1633015885
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-09-30.20.2354818/near/255590541\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-09-30.20.2354818/near/255586891\">said</a>:</p>\n<blockquote>\n<p>I think want a crater for this? It seems to me like this can affect building documentation for 2018 crates that previously built fine?</p>\n</blockquote>\n<p>so, a few things:</p>\n<ol>\n<li>the lint is warn-by-default, so this won't outright break any project no matter what</li>\n<li>crates won't see the new lint unless they opt-in to 2015 or 2021 parsing on the code block, this does not change the default behavior</li>\n<li>before rustdoc was <em>completely ignoring</em> the edition, which just seems like an outright bug</li>\n</ol>\n<p>So I'm not sure why you think crater is necessary; I don't see this as different from fixing a bug in any other lint.</p>\n</blockquote>\n<p>If there are any program at all that could be written that no longer compiles with this PR applied, then IMO care needs to be taken. In that context lint being warn-by-default helps, but there's nothing that prevents somebody from denying it. Similarly users could have opted into specific edition mode or have written the doc comments under an assuption that edition is ignored (e.g. because the lint was firing when they were trying to write code for the crate edition).</p>",
        "id": 255600865,
        "sender_full_name": "nagisa",
        "timestamp": 1633018218
    },
    {
        "content": "<p>Doubly so because people don't generally test whether <code>cargo doc</code> runs successfully in their CI or locally in my experience.</p>",
        "id": 255600980,
        "sender_full_name": "nagisa",
        "timestamp": 1633018259
    },
    {
        "content": "<p>That said I guess there's a fair amount of pretext for breaking changes in rustdoc interface. E.g. we have renamed the lints a couple times over the past year which would cause errors to bubble up in certain scenarios.</p>",
        "id": 255601196,
        "sender_full_name": "nagisa",
        "timestamp": 1633018337
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-09-30.20.2354818/near/255581200\">said</a>:</p>\n<blockquote>\n<p>Unfortunately, I wasn't able to minimize a regression test</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> I'll take care of this</p>",
        "id": 255626110,
        "sender_full_name": "lqd",
        "timestamp": 1633027195
    },
    {
        "content": "<p>I'll make a test but this <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f665e7e882059157e0f86cfb09c47187\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f665e7e882059157e0f86cfb09c47187</a> reproduces the issue on nightly-2021-09-19</p>",
        "id": 255633178,
        "sender_full_name": "lqd",
        "timestamp": 1633030037
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> but why single out this lint in particular? In general new lints are <em>not</em> considered breaking changes and get added all the time; why is rustdoc being held to a higher standard than the compiler itself?</p>",
        "id": 255668564,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1633046423
    },
    {
        "content": "<p>I think it's really dangerous to forbid new warnings because they might be emitted - yes! That's the whole point! Your code is broken and rustdoc is trying to tell you so!<br>\n<a href=\"https://thephd.dev/your-c-compiler-and-standard-library-will-not-help-you\">https://thephd.dev/your-c-compiler-and-standard-library-will-not-help-you</a></p>",
        "id": 255668768,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1633046536
    },
    {
        "content": "<p>This isn't a new lint though, is it? If somebody asked for a backport of a change to a compiler lint that already exists and potentially forbids more code, I would ask for a crater run too.</p>",
        "id": 255711373,
        "sender_full_name": "nagisa",
        "timestamp": 1633078429
    },
    {
        "content": "<p>New compiler lints that aren't related to backwards compatibility _are_ held to a standard of requiring an RFC to introduce, for what it is worth, or at least that's what I remember. Because people can and do have <code>#[deny(warnings)]</code>. There have been many cases where we did not accept a lint for that reason and why</p>",
        "id": 255711858,
        "sender_full_name": "nagisa",
        "timestamp": 1633078657
    },
    {
        "content": "<p>I don't see a request of running crater and having knowledge of the fallout (rather than a guess) being a particularly onerous one.</p>",
        "id": 255712020,
        "sender_full_name": "nagisa",
        "timestamp": 1633078732
    }
]