[
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span>; the triage meeting will take place in about 1h40<br>\n<em>WG-prioritization</em> has done pre-triage in <a class=\"stream\" data-stream-id=\"245100\" href=\"/#narrow/stream/245100-t-compiler.2Fwg-prioritization.2Falerts\">#t-compiler/wg-prioritization/alerts</a> and prepared the <a href=\"https://hackmd.io/tuLB5d6ETKCZGS3cpzzRiA\">meeting agenda</a></p>\n<p>Scheduled checkins from:</p>\n<ul>\n<li><span class=\"user-group-mention\" data-user-group-id=\"1123\">@WG-self-profile</span>  checkin by <span class=\"user-mention\" data-user-id=\"124287\">@mw</span>  &amp;&amp; <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span></li>\n</ul>",
        "id": 245304729,
        "sender_full_name": "apiraino",
        "timestamp": 1625746468
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> will you be at meeting today? I’m adding an “early nomination discussion” section where I’ll put one or two nominated issues</p>",
        "id": 245315227,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625752212
    },
    {
        "content": "<p>and if you’ll be there today, then I’ll put <a href=\"https://github.com/rust-lang/rust/issues/86699\">rust#86699</a> in that early section</p>",
        "id": 245315257,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625752225
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-07-08.20.2354818/near/245315227\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> will you be at meeting today? I’m adding an “early nomination discussion” section where I’ll put one or two nominated issues</p>\n</blockquote>\n<p>yupp, sounds good, thanks!</p>",
        "id": 245316119,
        "sender_full_name": "eddyb",
        "timestamp": 1625752588
    },
    {
        "content": "<p>awsome</p>",
        "id": 245316274,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625752671
    },
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span> , triage meeting is starting now. Add a <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> to show you are present!</p>",
        "id": 245316809,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625752854
    },
    {
        "content": "<p>Lets spend ~8 minutes on</p>\n<h2>Announcements</h2>",
        "id": 245316866,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625752875
    },
    {
        "content": "<ul>\n<li>Friday meeting: Tomorrow at <time datetime=\"2021-07-09T14:00:00Z\">2021-07-09T10:00:00-04:00</time> we will be having part III of our series of meetings on the fingerprint bug write-up, <a href=\"https://github.com/rust-lang/compiler-team/issues/435\">compiler-team#435</a> (<a href=\"https://hackmd.io/DhKzaRUgTVGSmhW8Mj0c8A?view\">doc</a> under discussion).</li>\n</ul>",
        "id": 245316877,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625752880
    },
    {
        "content": "<h3>MCPs/FCPs</h3>\n<ul>\n<li>New MCPs (take a look, see if you like them!)<ul>\n<li>No new proposals this time.</li>\n</ul>\n</li>\n</ul>",
        "id": 245316923,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625752896
    },
    {
        "content": "<ul>\n<li>Old MCPs (not seconded, take a look)<ul>\n<li>\"Add different entry points for x.py\" <a href=\"https://github.com/rust-lang/compiler-team/issues/396\">compiler-team#396</a> (last comment: 6 months ago)</li>\n<li>\"rustdoc is using rustc_ast_pretty, would it be possible to make it somewhat \"stable\"?\" <a href=\"https://github.com/rust-lang/compiler-team/issues/403\">compiler-team#403</a> (last comment: 5 months ago)</li>\n<li>\"LLVM plugin support in Rust\" <a href=\"https://github.com/rust-lang/compiler-team/issues/419\">compiler-team#419</a> (last comment: 3 months ago)</li>\n<li>\"Don't steal the resolver when lowering HIR; instead store an immutable resolver in TyCtxt\" <a href=\"https://github.com/rust-lang/compiler-team/issues/437\">compiler-team#437</a> (last comment: about 26 days ago)</li>\n<li>\"CI should exercise (subset of) tests under --stage 1\" <a href=\"https://github.com/rust-lang/compiler-team/issues/439\">compiler-team#439</a> (last comment: about 5 days ago)</li>\n<li>\"Accept <code>pc</code> in place of <code>unknown</code> and <code>unknown</code> in place of <code>pc</code> for <code>x86_64</code> and <code>i?86</code> targets\" <a href=\"https://github.com/rust-lang/compiler-team/issues/441\">compiler-team#441</a> (last comment: about 5 days ago)</li>\n<li>\"Encode spans relative to the enclosing item\" <a href=\"https://github.com/rust-lang/compiler-team/issues/443\">compiler-team#443</a> (last comment: about 5 days ago)</li>\n</ul>\n</li>\n</ul>",
        "id": 245316967,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625752914
    },
    {
        "content": "<ul>\n<li>Pending FCP requests (check your boxes!)<ul>\n<li>\"Write text output files to stdout if options like <code>-o -</code> or <code>--emit asm=-</code> are provided\" <a href=\"https://github.com/rust-lang/compiler-team/issues/431\">compiler-team#431</a></li>\n</ul>\n</li>\n</ul>",
        "id": 245317031,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625752927
    },
    {
        "content": "<ul>\n<li>Things in FCP (make sure you're good with it)<ul>\n<li>\"Promote <code>aarch64-apple-ios-sim</code> to Tier 2\" <a href=\"https://github.com/rust-lang/compiler-team/issues/428\">compiler-team#428</a> </li>\n<li>\"Merge rustc_codegen_gcc backend as compiler/rustc_codegen_gcc\" <a href=\"https://github.com/rust-lang/compiler-team/issues/442\">compiler-team#442</a></li>\n</ul>\n</li>\n</ul>",
        "id": 245317054,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625752937
    },
    {
        "content": "<ul>\n<li>Accepted MCPs<ul>\n<li>No new accepted proposals this time.</li>\n</ul>\n</li>\n</ul>",
        "id": 245317135,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625752973
    },
    {
        "content": "<ul>\n<li>Finalized FCPs (disposition merge)<ul>\n<li>\"Tracking Issue for feature(string_drain_as_str) - string::Drain::as_str()\" <a href=\"https://github.com/rust-lang/rust/issues/76905\">rust#76905</a> </li>\n<li>\"Tracking Issue for std::io::Seek::rewind()\" <a href=\"https://github.com/rust-lang/rust/issues/85149\">rust#85149</a></li>\n</ul>\n</li>\n</ul>",
        "id": 245317149,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625752979
    },
    {
        "content": "<h3>WG checkins</h3>\n<p><em>WG-self-profile</em> checkin by <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> &amp;&amp; <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span>:</p>\n<blockquote>\n<p>Just a few small things to report here:<br>\n- <span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> extended measureme's API to allow recording events in a more flexible way if needed.<br>\n- <span class=\"user-mention silent\" data-user-id=\"224872\">rylev</span> is working with <span class=\"user-mention silent\" data-user-id=\"124287\">mw</span> on adding incr. comp. related measurements, starting with query results hashing timings.</p>\n</blockquote>",
        "id": 245317174,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625752989
    },
    {
        "content": "<h2>Backport nominations</h2>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Abeta-nominated+-label%3Abeta-accepted+label%3AT-compiler\">T-compiler stable</a> / <a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Astable-nominated+-label%3Astable-accepted+label%3AT-compiler\">T-compiler beta</a></p>\n<ul>\n<li>No beta nominations for <code>T-compiler</code> this time.</li>\n<li>No stable nominations for <code>T-compiler</code> this time.</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Abeta-nominated+-label%3Abeta-accepted+label%3AT-rustdoc\">T-rustdoc stable</a> / <a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Astable-nominated+-label%3Astable-accepted+label%3AT-rustdoc\">T-rustdoc beta</a></p>\n<ul>\n<li>No beta nominations for <code>T-rustdoc</code> this time.</li>\n<li>No stable nominations for <code>T-rustdoc</code> this time.</li>\n</ul>",
        "id": 245317205,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625753003
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-07-08.20.2354818/near/245317135\">said</a>:</p>\n<blockquote>\n<ul>\n<li>Accepted MCPs<ul>\n<li>No new accepted proposals this time.</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>Wasn't the gcc backend an MCP?</p>",
        "id": 245317239,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1625753016
    },
    {
        "content": "<p>Oh whoa whoa whoa</p>",
        "id": 245317243,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625753018
    },
    {
        "content": "<p>I went too far. :)</p>",
        "id": 245317259,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625753022
    },
    {
        "content": "<p>you mean <a href=\"https://github.com/rust-lang/compiler-team/issues/442\">compiler-team#442</a>, <span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span> ?</p>",
        "id": 245317435,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625753082
    },
    {
        "content": "<p>Its state was only modified three hours ago. The agenda isn’t guaranteed to incorporate info that fast</p>",
        "id": 245317532,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625753125
    },
    {
        "content": "<p>:)</p>",
        "id": 245317541,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625753129
    },
    {
        "content": "<p>One of the drawbacks of asynchronous systems and/or distributed systems</p>",
        "id": 245317568,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625753140
    },
    {
        "content": "<p>Oh my bad</p>",
        "id": 245317577,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1625753143
    },
    {
        "content": "<p>Not a problem, doesn’t hurt to give things <em>extra</em> visibility</p>",
        "id": 245317666,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625753171
    },
    {
        "content": "<p>any other announcements?</p>",
        "id": 245317697,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625753191
    },
    {
        "content": "<p>I wouldn’t mind taking a moment to ask: Has anyone read <a href=\"https://github.com/rust-lang/compiler-team/issues/396\">compiler-team#396</a> and subseuqently decided “no, I’m not going to second this” ?</p>",
        "id": 245317797,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625753236
    },
    {
        "content": "<p>(I figure it would be good to work through the backlog there a little)</p>",
        "id": 245317860,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625753262
    },
    {
        "content": "<p>I closed one of the MCPS (LLVM plugin one)</p>",
        "id": 245317914,
        "sender_full_name": "nagisa",
        "timestamp": 1625753282
    },
    {
        "content": "<p>Ann: <a href=\"#narrow/stream/131828-t-compiler/topic/Revisions.20.2B.20.60only-.60.20test.20directives.20work.20great/near/245018602\">only- filters work great with revisions</a> if anybody missed this.</p>",
        "id": 245318057,
        "sender_full_name": "nagisa",
        "timestamp": 1625753319
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-07-08.20.2354818/near/245317797\">said</a>:</p>\n<blockquote>\n<p>I wouldn’t mind taking a moment to ask: Has anyone read <a href=\"https://github.com/rust-lang/compiler-team/issues/396\">compiler-team#396</a> and subseuqently decided “no, I’m not going to second this” ?</p>\n</blockquote>\n<p>me, as it's not a usecase that fits my workflow, so I'm not qualified. I just stay on the main folder</p>",
        "id": 245318064,
        "sender_full_name": "oli",
        "timestamp": 1625753320
    },
    {
        "content": "<p>/me may just go and second <a href=\"https://github.com/rust-lang/compiler-team/issues/396\">compiler-team#396</a>. If I understand it correctly, its not adding any expressiveness to <code>x.py</code>; its just promoting certain common workflows and giving them dedicated wrapper scripts</p>",
        "id": 245318130,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625753350
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> do you think the architectural choice of putting the wrapper scripts in subdirectories is the main problem with it?</p>",
        "id": 245318205,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625753387
    },
    {
        "content": "<p>we can discuss this in the zulip channel dedicated to the MCP</p>",
        "id": 245318287,
        "sender_full_name": "oli",
        "timestamp": 1625753415
    },
    {
        "content": "<p>I suppose I should cc <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> since its their MCP</p>",
        "id": 245318294,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625753418
    },
    {
        "content": "<p>good point <span class=\"user-mention\" data-user-id=\"124288\">@oli</span></p>",
        "id": 245318298,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625753422
    },
    {
        "content": "<p>that zulip stream is <a class=\"stream-topic\" data-stream-id=\"233931\" href=\"/#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Add.20different.20entry.20points.20for.20x.2Epy.20compiler-team.23396\">#t-compiler/major changes &gt; Add different entry points for x.py compiler-team#396</a></p>",
        "id": 245318337,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625753446
    },
    {
        "content": "<p>with that, I’ll move on</p>",
        "id": 245318413,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625753475
    },
    {
        "content": "<p>as previously noted, we have no backport nominations this week</p>",
        "id": 245318492,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625753512
    },
    {
        "content": "<h2>PRs S-waiting-on-team</h2>\n<p><a href=\"https://github.com/rust-lang/rust/pulls?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AS-waiting-on-team+label%3AT-compiler\">T-compiler</a></p>\n<ul>\n<li>None at this time</li>\n</ul>",
        "id": 245318549,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625753525
    },
    {
        "content": "<p>This week, i’m trying something new: I added a new section, with hand-picked nominations that we will discuss early in the meeting</p>",
        "id": 245318600,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625753549
    },
    {
        "content": "<p>to ensure they get visited</p>",
        "id": 245318612,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625753553
    },
    {
        "content": "<h2>Early Nominations</h2>\n<ul>\n<li>\"Allow reifying intrinsics to <code>fn</code> pointers.\" <a href=\"https://github.com/rust-lang/rust/pull/86699\">rust#86699</a><ul>\n<li>opened by <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>, asking for a review (<a href=\"https://github.com/rust-lang/rust/pull/86699#issuecomment-870745885\">comment</a>)</li>\n</ul>\n</li>\n</ul>",
        "id": 245318627,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625753558
    },
    {
        "content": "<p>that comment link btw is not relevant</p>",
        "id": 245318675,
        "sender_full_name": "eddyb",
        "timestamp": 1625753580
    },
    {
        "content": "<p>This is related to that copy/copy_nonoverlapping thing I assume</p>",
        "id": 245318678,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625753582
    },
    {
        "content": "<p>I think it's a reply to a different comment</p>",
        "id": 245318689,
        "sender_full_name": "eddyb",
        "timestamp": 1625753585
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-07-08.20.2354818/near/245318678\">said</a>:</p>\n<blockquote>\n<p>This is related to that copy/copy_nonoverlapping thing I assume</p>\n</blockquote>\n<p>oh yes, it even says so in the description</p>",
        "id": 245318747,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625753616
    },
    {
        "content": "<p>I’m trying to remember what opinions T-lang had on this</p>",
        "id": 245318868,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625753652
    },
    {
        "content": "<p>so the reason I nominated it is that I'm not even sure whether this needs an MCP or something else, it's a bit significant in that it's technically an insta-stable language feature, but also we expose very few intrinsics, so it <em>almost</em> balances itself out</p>",
        "id": 245318908,
        "sender_full_name": "eddyb",
        "timestamp": 1625753669
    },
    {
        "content": "<p>aren’t there a slew of SIMD intrinsics that are exposed?</p>",
        "id": 245318963,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625753702
    },
    {
        "content": "<p>ugh I keep forgetting those are in a separate repo</p>",
        "id": 245319067,
        "sender_full_name": "eddyb",
        "timestamp": 1625753755
    },
    {
        "content": "<p>so that's the first thing I missed</p>",
        "id": 245319087,
        "sender_full_name": "eddyb",
        "timestamp": 1625753762
    },
    {
        "content": "<p>I thought all of those had wrapper functions though. I will have to look closer into it</p>",
        "id": 245319203,
        "sender_full_name": "eddyb",
        "timestamp": 1625753809
    },
    {
        "content": "<p>My memory is that SIMD was the main thing T-lang was concerned about. Or at least, If I recall correctly, certain members thought it was a feature that you couldn’t reify SIMD primitives</p>",
        "id": 245319207,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625753813
    },
    {
        "content": "<p>but 1. I might be completely misremembering that, and 2. even if that <em>is</em> a concern, we can always add a lint</p>",
        "id": 245319244,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625753833
    },
    {
        "content": "<p>Yeah, I thought we just exposed normal Rust functions that call into the intrinsics for simd.</p>",
        "id": 245319248,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1625753836
    },
    {
        "content": "<p>there was something in the Zulip thread about performance pitfalls <em>but only</em> if we did intrinsics differently enough</p>",
        "id": 245319290,
        "sender_full_name": "eddyb",
        "timestamp": 1625753861
    },
    {
        "content": "<p>it cannot apply to today's intrinsics</p>",
        "id": 245319301,
        "sender_full_name": "eddyb",
        "timestamp": 1625753866
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-07-08.20.2354818/near/245319290\">said</a>:</p>\n<blockquote>\n<p>there was something in the Zulip thread about performance pitfalls <em>but only</em> if we did intrinsics differently enough</p>\n</blockquote>\n<p>(IIRC, if the intrinsic was a regular definition with an attribute, and contained <em>a different</em> implementation to use when reifying)</p>",
        "id": 245319398,
        "sender_full_name": "eddyb",
        "timestamp": 1625753897
    },
    {
        "content": "<p>Okay, I can definitely believe that I am misremembering</p>",
        "id": 245319423,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625753907
    },
    {
        "content": "<p>it just needs a proper review then, yeah?</p>",
        "id": 245319424,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625753907
    },
    {
        "content": "<p>anyway this seems fine</p>",
        "id": 245319425,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625753907
    },
    {
        "content": "<p>in terms of its goal</p>",
        "id": 245319426,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625753907
    },
    {
        "content": "<p>you still can't reify e.g. functions that use <code>#[rustc_const_arg]</code> or w/e that feature is, which is the main thing (AFAIK) that requires \"emulation\" with SIMD</p>",
        "id": 245319499,
        "sender_full_name": "eddyb",
        "timestamp": 1625753943
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> where is the associated zulip thread?</p>",
        "id": 245319592,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625753994
    },
    {
        "content": "<p>Ah found it</p>",
        "id": 245319694,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625754017
    },
    {
        "content": "<p><a class=\"stream-topic\" data-stream-id=\"131828\" href=\"/#narrow/stream/131828-t-compiler/topic/reifying.20function.20ptrs.20for.20intrinsics.20.2384297\">#t-compiler &gt; reifying function ptrs for intrinsics #84297</a></p>",
        "id": 245319715,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625754025
    },
    {
        "content": "<p>was just going to link <a href=\"#narrow/stream/131828-t-compiler/topic/reifying.20function.20ptrs.20for.20intrinsics.20.2384297/near/244196818\">https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/reifying.20function.20ptrs.20for.20intrinsics.20.2384297/near/244196818</a> heh</p>",
        "id": 245319725,
        "sender_full_name": "eddyb",
        "timestamp": 1625754035
    },
    {
        "content": "<p>okay. In terms of ownership, lets see if anyone else jumps up to review. <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> , if you don’t get an review owner by tomorrow, ping me.</p>",
        "id": 245320007,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625754139
    },
    {
        "content": "<p>sound good?</p>",
        "id": 245320030,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625754149
    },
    {
        "content": "<p>Lets move along to issues</p>",
        "id": 245320063,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625754163
    },
    {
        "content": "<p>I did review the implementation in isolation; it seems okay to me.</p>",
        "id": 245320070,
        "sender_full_name": "nagisa",
        "timestamp": 1625754167
    },
    {
        "content": "<h2>Issues of Note</h2>\n<h3>Short Summary</h3>\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3AT-compiler+label%3AP-critical\">4 T-compiler P-critical issues</a><ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3AT-compiler+label%3AP-critical+no%3Aassignee\">3 of those are unassigned</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3AT-compiler+label%3AP-high\">79 T-compiler P-high issues</a><ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3AT-compiler+label%3AP-high+no%3Aassignee\">53 of those are unassigned</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/rust-lang/rust/labels/regression-from-stable-to-beta\">2 P-critical, 0 P-high, 1 P-medium, 0 P-low regression-from-stable-to-beta</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/labels/regression-from-stable-to-nightly\">0 P-critical, 2 P-high, 2 P-medium, 0 P-low regression-from-stable-to-nightly</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/labels/regression-from-stable-to-stable\">2 P-critical, 47 P-high, 83 P-medium, 10 P-low regression-from-stable-to-stable</a></li>\n</ul>",
        "id": 245320095,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625754175
    },
    {
        "content": "<p>but all the interactions need to be figured out by somebody.</p>",
        "id": 245320101,
        "sender_full_name": "nagisa",
        "timestamp": 1625754177
    },
    {
        "content": "<p>(maybe its something we strive to land early in a release cycle)</p>",
        "id": 245320174,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625754211
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-07-08.20.2354818/near/245320030\">said</a>:</p>\n<blockquote>\n<p>sound good?</p>\n</blockquote>\n<p>thanks! I will still need to look into the MIR pass thing, thanks for noticing it (in the other thread)</p>",
        "id": 245320183,
        "sender_full_name": "eddyb",
        "timestamp": 1625754214
    },
    {
        "content": "<h3>P-critical</h3>\n<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AP-critical+label%3AT-compiler\">T-compiler</a></p>",
        "id": 245320240,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625754235
    },
    {
        "content": "<ul>\n<li>\"run-make-fulldeps/pgo-branch-weights fails on AArch64 Linux\" <a href=\"https://github.com/rust-lang/rust/issues/78226\">rust#78226</a><ul>\n<li>only fails on aarch64 arm</li>\n<li><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <a href=\"https://github.com/rust-lang/rust/issues/78226#issuecomment-866299280\">comments</a> that tests for this are disabled but a fix for 1.54 would be good</li>\n<li>being investigated by <span class=\"user-mention\" data-user-id=\"309977\">@Jamie Cunliffe</span> <a href=\"https://github.com/rust-lang/rust/issues/78226#issuecomment-868570487\">see comment</a> </li>\n<li><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <a href=\"https://github.com/rust-lang/rust/issues/78226#issuecomment-875011175\">suggests</a> looking at <a href=\"https://github.com/rust-lang/rust/pull/85891\">#85891</a></li>\n</ul>\n</li>\n</ul>",
        "id": 245320262,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625754242
    },
    {
        "content": "<p>Hmm the story about the reverts seems a little confusing to me</p>",
        "id": 245320440,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625754323
    },
    {
        "content": "<p>The reverts, IIRC, were largely performance-driven</p>",
        "id": 245320463,
        "sender_full_name": "simulacrum",
        "timestamp": 1625754333
    },
    {
        "content": "<p>So they're not due to this bug inherently.</p>",
        "id": 245320477,
        "sender_full_name": "simulacrum",
        "timestamp": 1625754338
    },
    {
        "content": "<p>okay</p>",
        "id": 245320613,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625754388
    },
    {
        "content": "<p>And the current working theory is that <a href=\"https://github.com/rust-lang/rust/issues/85891\">#85891</a> (or its sibling PRs which revert and unrevert it) in practice just shuffled symbol order or something like that, leading to different behavior in the linker and -ultimately - bugs in our PGO which are preexisting</p>",
        "id": 245320616,
        "sender_full_name": "simulacrum",
        "timestamp": 1625754391
    },
    {
        "content": "<p>gotcha.</p>",
        "id": 245320631,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625754398
    },
    {
        "content": "<p>that makes sense</p>",
        "id": 245320635,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625754402
    },
    {
        "content": "<p>It's not clear to me what we plan to do for 1.54 or long-term yet, though</p>",
        "id": 245320671,
        "sender_full_name": "simulacrum",
        "timestamp": 1625754420
    },
    {
        "content": "<p>hmm. Yeah we should probably address the question of whether this is <em>really</em> P-critical</p>",
        "id": 245320751,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625754472
    },
    {
        "content": "<p>I'm not sure how much the ARM folks can help out in terms of figuring out what is causing this behavior - my guess is it's not actually ARM specific, just that symbol ordering presumably is also somewhat platform dependent (I think the target triple is part of our crate hash etc)</p>",
        "id": 245320764,
        "sender_full_name": "simulacrum",
        "timestamp": 1625754477
    },
    {
        "content": "<p>the nature of this test failure, to be clear: It is that we are not getting the profile data we expect, right?</p>",
        "id": 245320974,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625754558
    },
    {
        "content": "<p>AFAICT, we're getting <em>no</em> profile data</p>",
        "id": 245321009,
        "sender_full_name": "simulacrum",
        "timestamp": 1625754576
    },
    {
        "content": "<p>but yes</p>",
        "id": 245321021,
        "sender_full_name": "simulacrum",
        "timestamp": 1625754581
    },
    {
        "content": "<p>Or is there something deeper (more impactful) that we need to worry about ...</p>",
        "id": 245321026,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625754582
    },
    {
        "content": "<p>Hmm. Is “no profile data” worse than “unexpected profile data” ...</p>",
        "id": 245321060,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625754600
    },
    {
        "content": "<p>The former  is at least something that is readily detectable</p>",
        "id": 245321159,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625754624
    },
    {
        "content": "<p>I don't know :)</p>\n<p>I probably wouldn't spend so much meeting time on this though -- I think the criticality may be more important</p>",
        "id": 245321167,
        "sender_full_name": "simulacrum",
        "timestamp": 1625754630
    },
    {
        "content": "<p>but more embarassing</p>",
        "id": 245321175,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625754635
    },
    {
        "content": "<p>aarch64-unknown-linux-gnu is a tier 1 target, so in that sense it feels critical</p>",
        "id": 245321224,
        "sender_full_name": "simulacrum",
        "timestamp": 1625754653
    },
    {
        "content": "<p>Sorry, are you saying we should debate the criticality, or we should not debate the criticality?</p>",
        "id": 245321250,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625754662
    },
    {
        "content": "<p>(Or that we should debate the criticality, but <em>not now</em> ?)</p>",
        "id": 245321286,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625754676
    },
    {
        "content": "<p>we should debate the criticality over investigating the bug itself in our meeting</p>",
        "id": 245321290,
        "sender_full_name": "simulacrum",
        "timestamp": 1625754678
    },
    {
        "content": "<p>okay</p>",
        "id": 245321314,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625754689
    },
    {
        "content": "<p>the target itself is important</p>",
        "id": 245321327,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625754697
    },
    {
        "content": "<p>but the nature of this particular feature does not strike me as P-critical</p>",
        "id": 245321341,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625754706
    },
    {
        "content": "<p>I think strictly speaking our policy doesn't really have non-critical features, but my gut definitely says that I agree</p>",
        "id": 245321483,
        "sender_full_name": "simulacrum",
        "timestamp": 1625754754
    },
    {
        "content": "<p>Yeah. Its possible our policy needs to be more explicit on that sort of point</p>",
        "id": 245321564,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625754776
    },
    {
        "content": "<p>anyway, release is July 29th</p>",
        "id": 245321760,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625754854
    },
    {
        "content": "<p>we have time to continue debate (or even fix the bug!)</p>",
        "id": 245321773,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625754859
    },
    {
        "content": "<p>lets move along</p>",
        "id": 245321779,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625754861
    },
    {
        "content": "<ul>\n<li>\"Unstable fingerprints - what to do on beta (and stable)\" <a href=\"https://github.com/rust-lang/rust/issues/84970\">rust#84970</a><ul>\n<li>discussed <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-06-24.20.2354818/near/243797032\">last week</a></li>\n<li><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> comments about addressing the <a href=\"https://github.com/rust-lang/rust/issues/85360\">sub-obligation</a> and <a href=\"https://github.com/rust-lang/rust/issues/84963\">the overflow</a> issues, other than those all known issues are fixed</li>\n<li>@<strong>estebank</strong> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-06-17.20.2354818/near/243025573\">offered to have a look</a></li>\n<li>there are <a href=\"https://github.com/rust-lang/rust/issues/84970#issuecomment-873539084\">still occurrences of incr-comp ICEs</a> (though possibly related to other issues? see <a href=\"https://github.com/rust-lang/rust/issues/84970#issuecomment-873624124\">comment</a>) </li>\n<li>general feeling is to re-enable incr-comp again in 1.54</li>\n</ul>\n</li>\n</ul>",
        "id": 245321885,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625754907
    },
    {
        "content": "<p>I'm working some some performance improvements to handling of projection predicates</p>",
        "id": 245321976,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1625754950
    },
    {
        "content": "<p>I encountered this family of bugs in beta today and the error message/notes were useful enough that I think that at least from that perspective its okay ^^</p>",
        "id": 245321977,
        "sender_full_name": "nagisa",
        "timestamp": 1625754951
    },
    {
        "content": "<p>Which might make one of the simpler strategies viable for fixing the evaluate_obligation ICE</p>",
        "id": 245322064,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1625754973
    },
    {
        "content": "<p>Yes I think <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> is bringing up an important point</p>",
        "id": 245322122,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625754999
    },
    {
        "content": "<p>We are definitely seeing several reports of people still hitting this on a roughly 3-4 times/week basis I think, so that may signal not wanting to re-enable. But I still feel a little unclear on what rationale we use either way, feels like there's no \"right\" decision here.</p>",
        "id": 245322177,
        "sender_full_name": "simulacrum",
        "timestamp": 1625755030
    },
    {
        "content": "<p>if the number of occurrences of fingerprint ICE is small enough, and the error messages are good enough, then the ICE’s can be considered mitigated well enough for 1.54</p>",
        "id": 245322192,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625755036
    },
    {
        "content": "<p>3-4 times/week is not ideal, but it sounds workable to me</p>",
        "id": 245322232,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625755052
    },
    {
        "content": "<p>The crucial point being that many rustc users will benefit from incr-comp being re-enabled</p>",
        "id": 245322258,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625755070
    },
    {
        "content": "<p>Sounds to me like we want some telemetry in the compiler as we don't have the data to make informed decisions right now; OTOH it'd be such a PR disaster <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 245322341,
        "sender_full_name": "nagisa",
        "timestamp": 1625755094
    },
    {
        "content": "<p>yep</p>",
        "id": 245322414,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625755136
    },
    {
        "content": "<p>its something on my mind</p>",
        "id": 245322429,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625755143
    },
    {
        "content": "<p>we’ll probably talk more about that in tomorrow’s meeting about fingerprints</p>",
        "id": 245322470,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625755158
    },
    {
        "content": "<p>so lets move along</p>",
        "id": 245322480,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625755161
    },
    {
        "content": "<ul>\n<li>\"iter::Fuse is unsound with how specialization currently behaves around HRTB fn pointers\" <a href=\"https://github.com/rust-lang/rust/issues/85863\">rust#85863</a><ul>\n<li><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> (<a href=\"https://github.com/rust-lang/rust/issues/85863#issuecomment-871797016\">comment</a>) opened pr <a href=\"https://github.com/rust-lang/rust/pull/86765\">rust#86765</a> and <a href=\"https://github.com/rust-lang/rust/pull/86766\">rust#86766</a></li>\n<li>also, discussed <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-07-01.20.2354818/near/244577649\">last week</a> (issue needs an owner)</li>\n</ul>\n</li>\n</ul>",
        "id": 245322528,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625755178
    },
    {
        "content": "<p>ooooooh <a href=\"https://github.com/rust-lang/rust/issues/85863#issuecomment-872536139\">diagram</a></p>",
        "id": 245322603,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625755204
    },
    {
        "content": "<p>for the most part I think <span class=\"user-group-mention\" data-user-group-id=\"4493\">@T-libs</span> owns this? Or maybe <span class=\"user-group-mention\" data-user-group-id=\"2645\">@T-libs-api</span> , if there are changes implied to the public APIs? (Which is not clear to me, <span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> commented that PR <a href=\"https://github.com/rust-lang/rust/issues/86765\">#86765</a> loses in-place iteration, that’s an API change, right?)</p>",
        "id": 245322952,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625755373
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> thoughts on ^ ?</p>",
        "id": 245323082,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625755430
    },
    {
        "content": "<p>hi</p>",
        "id": 245323113,
        "sender_full_name": "Mara",
        "timestamp": 1625755440
    },
    {
        "content": "<p>/me reads</p>",
        "id": 245323127,
        "sender_full_name": "Mara",
        "timestamp": 1625755443
    },
    {
        "content": "<p>yeah we handled this in our meeting yesterday</p>",
        "id": 245323216,
        "sender_full_name": "Mara",
        "timestamp": 1625755472
    },
    {
        "content": "<p>okay. I see PR <a href=\"https://github.com/rust-lang/rust/issues/86765\">#86765</a> was only marked “ready for review” 21 hours ago</p>",
        "id": 245323252,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625755491
    },
    {
        "content": "<p>exactly</p>",
        "id": 245323264,
        "sender_full_name": "Mara",
        "timestamp": 1625755495
    },
    {
        "content": "<p>so it sounds to me like this is under control</p>",
        "id": 245323285,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625755503
    },
    {
        "content": "<p>what release(s) does <a href=\"https://github.com/rust-lang/rust/issues/85863\">#85863</a> affect? There’s no milestone on the issue, and there’s no regression labels on it. Is it purely nightly?</p>",
        "id": 245323486,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625755573
    },
    {
        "content": "<p>It seems unlkely that it could be purely nightly given how old it is. Is it in fact stable-to-stable regression?</p>",
        "id": 245323531,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625755590
    },
    {
        "content": "<p>okay, related bug <a href=\"https://github.com/rust-lang/rust/issues/85873\">#85873</a> is marked stable-to-stable regression</p>",
        "id": 245323630,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625755624
    },
    {
        "content": "<p>Its at least a year old if my memory serves me right.</p>",
        "id": 245323673,
        "sender_full_name": "nagisa",
        "timestamp": 1625755646
    },
    {
        "content": "<p>so I’ll assume that T-libs is handling this, both in terms of what the short-term solution is, and also whether to backport anything. (My guess is that we should not backport anything here, but its T-libs’s call I think.)</p>",
        "id": 245323790,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625755692
    },
    {
        "content": "<ul>\n<li>\"TrustedRandomAccess optimization for Zip containing vec::IntoIter is unsound with how specialization currently behaves around HRTB fn pointers\" <a href=\"https://github.com/rust-lang/rust/issues/85873\">rust#85873</a><ul>\n<li><span class=\"user-mention\" data-user-id=\"280891\">@Frank Steffahn</span> authored PR <a href=\"https://github.com/rust-lang/rust/pull/85874\">rust#85874</a> that should close this issue </li>\n<li>added the work from PR <a href=\"https://github.com/steffahn/rust/pull/1\">steffahn/rust#1</a></li>\n</ul>\n</li>\n</ul>",
        "id": 245323827,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625755709
    },
    {
        "content": "<p>this is related to the previous bug. They aren’t duplicates, but I think the root answer is the same: Its T-libs’ problem, not ours</p>",
        "id": 245323875,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625755734
    },
    {
        "content": "<p>yeah, we decided what to backport too. I'll open a PR for that.</p>",
        "id": 245323889,
        "sender_full_name": "Mara",
        "timestamp": 1625755741
    },
    {
        "content": "<p>yup, same. also discussed yesterday and handled :)</p>",
        "id": 245323921,
        "sender_full_name": "Mara",
        "timestamp": 1625755754
    },
    {
        "content": "<p>(and I think in fact someone on the thread made an argument that the root cause here is not about specialization. So thus its not clear to me whether there is even a compiler bug here to be discussed…)</p>",
        "id": 245323957,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625755770
    },
    {
        "content": "<p>I may remove T-compiler labels /or/ remove from next week meeting?</p>",
        "id": 245324090,
        "sender_full_name": "apiraino",
        "timestamp": 1625755805
    },
    {
        "content": "<p>just not to reiterate these issues over and over again is its not necessary</p>",
        "id": 245324140,
        "sender_full_name": "apiraino",
        "timestamp": 1625755826
    },
    {
        "content": "<p>I think that seems prudent here</p>",
        "id": 245324142,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625755826
    },
    {
        "content": "<p>Well, the fact that specialization makes it super hard get these things right I think does point to the fact that we may want to have some followup on the feature itself.</p>",
        "id": 245324156,
        "sender_full_name": "nagisa",
        "timestamp": 1625755831
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AP-critical+label%3AT-rustdoc\">T-rustdoc</a></p>\n<ul>\n<li>No <code>P-critical</code> issues for <code>T-rustdoc</code> this time.</li>\n</ul>",
        "id": 245324188,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625755847
    },
    {
        "content": "<h3>P-high regressions</h3>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3Aregression-from-stable-to-beta+label%3AP-high+-label%3AT-infra+-label%3AT-libs+-label%3AT-release+-label%3AT-rustdoc+-label%3AT-core\">P-high beta regressions</a></p>\n<ul>\n<li>No <code>P-high</code> beta regressions this time.</li>\n</ul>",
        "id": 245324203,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625755855
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3Aregression-from-stable-to-nightly+label%3AP-high+no%3Aassignee+-label%3AT-infra+-label%3AT-libs+-label%3AT-release+-label%3AT-rustdoc+-label%3AT-core\">Unassigned P-high nightly regressions</a></p>\n<ul>\n<li>No unassigned <code>P-high</code> nightly regressions this time.</li>\n</ul>",
        "id": 245324226,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625755863
    },
    {
        "content": "<h2>Performance logs</h2>\n<blockquote>\n<p><a href=\"https://github.com/rust-lang/rustc-perf/blob/master/triage/2021-07-06.md\">triage logs for 2021-07-06</a></p>\n</blockquote>\n<p>A fairly mixed week with improvements and regressions mostly balancing themselves out. The highlight of this week is the new performance triage process which will now label PRs that introduce performance regressions with the <code>perf-regression</code> label. Authors and/or reviewers are expected to justify their performance regression either by a short summary of why the change is worth it despite the regression or by creating an issue to follow-up on the regression.</p>\n<p>Triage done by <strong>@rylev</strong>.<br>\n2 Regressions, 3 Improvements, 2 Mixed, 1 of them in rollups</p>",
        "id": 245324257,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625755871
    },
    {
        "content": "<h4>Regressions</h4>\n<p>Rollup of 8 pull requests <a href=\"https://github.com/rust-lang/rust/issues/86588\">#86588</a></p>\n<ul>\n<li>Moderate regression in <a href=\"https://perf.rust-lang.org/compare.html?start=f1e691da2e640bb45fe18f8a5bd8f7afa65ce21d&amp;end=964a81eb37db6ee33b8fc107582618bf2befe02d&amp;stat=instructions:u\">instruction counts</a> (up to 1.9% on <code>full</code> builds of <code>deeply-nested-async-check</code>)</li>\n<li>The regressions are worse in <code>deeply-nested-async</code>.</li>\n<li>Most of the rollup is documentation or tooling changes. The only real changes in code were in <a href=\"https://github.com/rust-lang/rust/pull/86566\">MIR pretty printing</a> and <a href=\"https://github.com/rust-lang/rust/pull/86536\">checking spans to see if Rust 2021 closure capturing should be used</a>. Both seem rather benign. However, given the performance regression is async code (which may take more advantage of closures), perhaps the closure capture change should be investigated first.</li>\n<li>Follow-up comment: <a href=\"https://github.com/rust-lang/rust/pull/86588#issuecomment-874773229\">https://github.com/rust-lang/rust/pull/86588#issuecomment-874773229</a></li>\n</ul>\n<p>Improve debug symbol names to avoid ambiguity and work better with MSVC's debugger <a href=\"https://github.com/rust-lang/rust/issues/85269\">#85269</a></p>\n<ul>\n<li>Moderate regression in <a href=\"https://perf.rust-lang.org/compare.html?start=851c82e88ade86bfe3b4ee785d5e5ab1d954b61c&amp;end=2545459bff0aae43288e2e17bff0d332c49a6353&amp;stat=instructions:u\">instruction counts</a> (up to 1.5% on <code>incr-unchanged</code> builds of <code>unify-linearly-debug</code>)</li>\n<li>This might be the case of simply doing more work (including allocations) where there were comparatively few before.</li>\n<li>Unfortunately a perf run was not run before merging (due to the somewhat complication nature of it landing). This is another example where we'll probably want to invest more in ensuring our performance triage process does not lose track of such changes.</li>\n<li>@michaelwoerister already opened <a href=\"https://github.com/rust-lang/rust/issues/86431\">#86431</a> to investigate this area of the code. Given the regression isn't very bad, I suggest we let this change slide and try to address the performance of debug info generation wholistically.<br>\n-Follow-up comment: <a href=\"https://github.com/rust-lang/rust/pull/85269#issuecomment-874776341\">https://github.com/rust-lang/rust/pull/85269#issuecomment-874776341</a></li>\n</ul>",
        "id": 245324289,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625755888
    },
    {
        "content": "<h4>Improvements</h4>\n<ul>\n<li>Derive <code>Copy</code> for <code>VarianceDiagInfo</code> <a href=\"https://github.com/rust-lang/rust/issues/86670\">#86670</a></li>\n<li>Add inflate to pgo <a href=\"https://github.com/rust-lang/rust/issues/86697\">#86697</a></li>\n<li>Fix const-generics ICE related to binding <a href=\"https://github.com/rust-lang/rust/issues/86795\">#86795</a></li>\n</ul>",
        "id": 245324403,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625755936
    },
    {
        "content": "<h4>Mixed</h4>\n<p>Include terminators in instance size estimate <a href=\"https://github.com/rust-lang/rust/issues/86777\">#86777</a></p>\n<ul>\n<li>Moderate regression in <a href=\"https://perf.rust-lang.org/compare.html?start=56dee7c49ecdec4c2c9eccc6ff966cf58847bda6&amp;end=7a9ff746fe20a38a3adc0ac65e1789f6e4b099ad&amp;stat=instructions:u\">instruction counts</a> (up to 4.4% on <code>incr-unchanged</code> builds of <code>deeply-nested-async-check</code>)</li>\n<li>Moderate improvement in <a href=\"https://perf.rust-lang.org/compare.html?start=56dee7c49ecdec4c2c9eccc6ff966cf58847bda6&amp;end=7a9ff746fe20a38a3adc0ac65e1789f6e4b099ad&amp;stat=instructions:u\">instruction counts</a> (up to -1.9% on <code>full</code> builds of <code>ripgrep-opt</code>)</li>\n<li>This was identified as potentially being performance sensitive since it leads to changes in CGU partitioning, but unfortunately, @bors has already been invoked on the PR. Arguably, we should have run a performance test anyway.</li>\n<li>This seemed to impact the <code>deeply-nested-async</code> benchmark which has the tendency to be more sensitive to changes like this.</li>\n<li>Follow-up comment: <a href=\"https://github.com/rust-lang/rust/pull/86777#issuecomment-874779995\">https://github.com/rust-lang/rust/pull/86777#issuecomment-874779995</a></li>\n</ul>\n<p>Inline Iterator as IntoIterator. <a href=\"https://github.com/rust-lang/rust/issues/84560\">#84560</a></p>\n<ul>\n<li>Large regression in <a href=\"https://perf.rust-lang.org/compare.html?start=5249414809d40fe22eca0c36105a2f71b9006e04&amp;end=6e9b3696d494a32d493585f96f0671123066cd58&amp;stat=instructions:u\">instruction counts</a> (up to 6.2% on <code>incr-patched: println</code> builds of <code>webrender-opt</code>)</li>\n<li>Moderate improvement in <a href=\"https://perf.rust-lang.org/compare.html?start=5249414809d40fe22eca0c36105a2f71b9006e04&amp;end=6e9b3696d494a32d493585f96f0671123066cd58&amp;stat=instructions:u\">instruction counts</a> (up to -3.2% on <code>full</code> builds of <code>deeply-nested-opt</code>)</li>\n<li>Performance run was run on the change which looks similar to results here. Given that this led to fairly significant regressions in some benchmarks, there should probably be some justification as to why the performance regressions are acceptable.</li>\n<li>Follow-up comment: <a href=\"https://github.com/rust-lang/rust/pull/84560#issuecomment-874781386\">https://github.com/rust-lang/rust/pull/84560#issuecomment-874781386</a></li>\n</ul>",
        "id": 245324431,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625755949
    },
    {
        "content": "<p>Yeah PR <a href=\"https://github.com/rust-lang/rust/issues/86777\">#86777</a> totally should have had a performance run</p>",
        "id": 245324545,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625755993
    },
    {
        "content": "<p>so should rust-highfive be automatically posting a comment listing areas of the compiler that warrant a perf run?</p>",
        "id": 245324633,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625756035
    },
    {
        "content": "<p>(At the same time, PR <a href=\"https://github.com/rust-lang/rust/issues/86777\">#86777</a> sounds like “the right thing” regardless of its performance impact … its possible that we need follow-on work to refine the estimation, or tune heuristics elsewhere…)</p>",
        "id": 245324785,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625756090
    },
    {
        "content": "<h4>Nags requiring follow up</h4>\n<ul>\n<li>Now that we are adding labels to performance regressions, it should hopefully be easier to follow up.</li>\n<li>Last week's follow up on max-rss regression in <a href=\"https://github.com/rust-lang/rust/pull/86034#issuecomment-871488586\">#86034</a> has not been addressed.</li>\n</ul>",
        "id": 245324811,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625756099
    },
    {
        "content": "<p>To be fair, <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> did say something, if only that the regression was not expected.</p>",
        "id": 245324892,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625756140
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-07-08.20.2354818/near/245324545\">said</a>:</p>\n<blockquote>\n<p>Yeah PR <a href=\"https://github.com/rust-lang/rust/issues/86777\">#86777</a> totally should have had a performance run</p>\n</blockquote>\n<p>I caught that 86777 was going to be rolled up and fixed that but didn't do a perf run because it seemed like landing it was the correct thing to do. Next time, I'll do a perf run too but I would probably vote to land even with the regression.</p>",
        "id": 245324950,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1625756164
    },
    {
        "content": "<p>The real message I’m seeing here, though, is that we perhaps should be tracking codegen unit distribution as a metric itself?</p>",
        "id": 245324983,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625756172
    },
    {
        "content": "<p>so that we can at least <em>tell</em> from the perf.rlo data whether it changed significantly from one run to the next, in order to validate such hypotheses that we’ve seen recently?</p>",
        "id": 245325061,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625756209
    },
    {
        "content": "<p>How would you quantify it?</p>",
        "id": 245325112,
        "sender_full_name": "nagisa",
        "timestamp": 1625756225
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> how plausible do you think that would be to add to perf.rlo?</p>",
        "id": 245325127,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625756232
    },
    {
        "content": "<p>Codegen unit count and/or number of items within each is an obvious one, but things can change in terms of how things are allocated to codegen units.</p>",
        "id": 245325179,
        "sender_full_name": "nagisa",
        "timestamp": 1625756253
    },
    {
        "content": "<p>What do you mean by \"codegen unit distribution\"?</p>",
        "id": 245325189,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1625756257
    },
    {
        "content": "<p>we could just report the histogram</p>",
        "id": 245325197,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625756263
    },
    {
        "content": "<p>Oh like the size of items in each cgu?</p>",
        "id": 245325232,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1625756275
    },
    {
        "content": "<p>and I anticipate that this latter part is what will have much more effect on the compile times ultimately.</p>",
        "id": 245325235,
        "sender_full_name": "nagisa",
        "timestamp": 1625756276
    },
    {
        "content": "<p>of how many codegen units and what their sizes were</p>",
        "id": 245325249,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625756281
    },
    {
        "content": "<p>it wouldn’t have <em>all</em> the data, but it might serve as a reasonable proxy</p>",
        "id": 245325351,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625756303
    },
    {
        "content": "<p>we _could_ run perf with <code>-Ccodegen-units=1</code> if we aren't already.</p>",
        "id": 245325427,
        "sender_full_name": "nagisa",
        "timestamp": 1625756325
    },
    {
        "content": "<p>That basically nerfs the incremental tests though doesn't it?</p>",
        "id": 245325468,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1625756342
    },
    {
        "content": "<p>that would at least give us an easy proxy to see how things change without partitioning in the equation.</p>",
        "id": 245325484,
        "sender_full_name": "nagisa",
        "timestamp": 1625756345
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-07-08.20.2354818/near/245325235\">said</a>:</p>\n<blockquote>\n<p>and I anticipate that this latter part is what will have much more effect on the compile times ultimately.</p>\n</blockquote>\n<p>Is your thinking here that there are likely instances where the size distribution wouldn’t change much, but the compilation times still would change drastically?</p>",
        "id": 245325494,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625756350
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-07-08.20.2354818/near/245325468\">said</a>:</p>\n<blockquote>\n<p>That basically nerfs the incremental tests though doesn't it?</p>\n</blockquote>\n<p>In addition to the regular testing.</p>",
        "id": 245325511,
        "sender_full_name": "nagisa",
        "timestamp": 1625756357
    },
    {
        "content": "<p>That’s not a bad idea</p>",
        "id": 245325593,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625756384
    },
    {
        "content": "<p>if we can afford the cycles</p>",
        "id": 245325602,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625756387
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-07-08.20.2354818/near/245325494\">said</a>:</p>\n<blockquote>\n<p>Is your thinking here that there are likely instances where the size distribution wouldn’t change much, but the compilation times still would change drastically?</p>\n</blockquote>\n<p>Yes.</p>",
        "id": 245325611,
        "sender_full_name": "nagisa",
        "timestamp": 1625756390
    },
    {
        "content": "<p>Okay</p>",
        "id": 245325685,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625756405
    },
    {
        "content": "<p>lets look into that (adding new benchmark variants that do <code>codegen-units=1</code>, it sounds like the easiest way to go)</p>",
        "id": 245325763,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625756429
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-07-08.20.2354818/near/245325127\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"224872\">rylev</span> <span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> how plausible do you think that would be to add to perf.rlo?</p>\n</blockquote>\n<p>We already have all of this data in rustc so it's mostly a matter of recording it and then incorporating it into the perf.rlo site.</p>",
        "id": 245325790,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1625756442
    },
    {
        "content": "<p>we don’t have time to go through the nominated issues</p>",
        "id": 245325792,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625756444
    },
    {
        "content": "<p>I’ll post them here for visibility</p>",
        "id": 245325804,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625756450
    },
    {
        "content": "<p>(and I’m feeling llike my “early nominatino section” is justified.)</p>",
        "id": 245325820,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625756459
    },
    {
        "content": "<p>For visibiilty: </p>\n<h2>Nominated Issues</h2>\n<p>T-rustdoc</p>\n<ul>\n<li>Generate links to definition in rustdoc source code pages <a href=\"https://github.com/rust-lang/rust/pull/84176\">#84176</a><ul>\n<li>Authored by <span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span></li>\n<li>approved by T-rustdoc</li>\n<li><a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-06-17.20.2354818/near/243029071\">mentioned in a past meeting</a></li>\n<li>needs a final look by T-compiler for merge (<span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span> can't merge own PR)</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3AI-nominated+label%3AT-compiler\">T-compiler</a></p>\n<ul>\n<li>\"<code>match</code> an <code>std::cmp::Ordering</code> generates less optimized code in nightly\" <a href=\"https://github.com/rust-lang/rust/issues/86511\">rust#86511</a><ul>\n<li>a comment mentions these issues <a href=\"https://github.com/rust-lang/rust/issues/86391\">#86391</a> and <a href=\"https://github.com/rust-lang/rust/issues/86354\">#86354</a></li>\n<li>issue nominated for help in finding someone giving some context for an accurate priority to track the issue</li>\n</ul>\n</li>\n<li>\"Binary size is significant increased from <code>1.46.0</code> to <code>1.51.0</code>\" <a href=\"https://github.com/rust-lang/rust/issues/86610\">rust#86610</a><ul>\n<li>perhaps related to one or more issues about the same theme (see mentioned issues, ex. <a href=\"https://github.com/rust-lang/rust/issues/86431\">rust#86431</a> was mentioned)</li>\n<li>issue nominated as FIY for T-compiler. Can this be tracked in perf?</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rfcs/issues?q=is%3Aopen+label%3AI-nominated+label%3AT-compiler\">RFC</a></p>\n<ul>\n<li>No nominated RFCs for <code>T-compiler</code> this time.</li>\n</ul>",
        "id": 245325849,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625756469
    },
    {
        "content": "<p>Thanks to everyone in <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span> for attending!</p>",
        "id": 245325873,
        "sender_full_name": "pnkfelix",
        "timestamp": 1625756477
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-07-08.20.2354818/near/245325127\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"224872\">rylev</span> <span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> how plausible do you think that would be to add to perf.rlo?</p>\n</blockquote>\n<p>On a practical level I'm going to be trying to do some cleanup to perf.rlo to make adding new metrics easier (since this also impacts the work that <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> and I have done on measuring incremental compilation fingerprint generation overhead)</p>",
        "id": 245325989,
        "sender_full_name": "rylev",
        "timestamp": 1625756521
    },
    {
        "content": "<p>This one <code>I-nominated</code> in particular</p>",
        "id": 245326193,
        "sender_full_name": "apiraino",
        "timestamp": 1625756582
    },
    {
        "content": "<ul>\n<li>Generate links to definition in rustdoc source code pages <a href=\"https://github.com/rust-lang/rust/pull/84176\">#84176</a><ul>\n<li>Authored by <span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span></li>\n<li>approved by T-rustdoc</li>\n<li><a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-06-17.20.2354818/near/243029071\">mentioned in a past meeting</a></li>\n<li>needs a final look by T-compiler for merge (<span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span> can't merge own PR)</li>\n</ul>\n</li>\n</ul>",
        "id": 245326203,
        "sender_full_name": "apiraino",
        "timestamp": 1625756586
    },
    {
        "content": "<p>is just in need of someone different from the PR author for a review and merge (it has been discussed extensively previously inside T-rustdoc and here too)</p>",
        "id": 245326339,
        "sender_full_name": "apiraino",
        "timestamp": 1625756633
    },
    {
        "content": "<p>so It's up for grab to any volunteer :)</p>",
        "id": 245326429,
        "sender_full_name": "apiraino",
        "timestamp": 1625756652
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 245326511,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1625756691
    },
    {
        "content": "<p>Draft for next week's agenda is available at:<br>\n<a href=\"https://hackmd.io/PgfxdZIrTEOQ5Mw_ZEEesA\">https://hackmd.io/PgfxdZIrTEOQ5Mw_ZEEesA</a></p>\n<p>Scheduled checkins from:</p>\n<ul>\n<li><span class=\"user-group-mention\" data-user-group-id=\"1172\">@WG-async-foundations</span> by <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> and <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> </li>\n<li><span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span> by <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> and <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span></li>\n</ul>",
        "id": 245327559,
        "sender_full_name": "apiraino",
        "timestamp": 1625757081
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-07-08.20.2354818/near/245318627\">said</a>:</p>\n<blockquote>\n<h2>Early Nominations</h2>\n<ul>\n<li>\"Allow reifying intrinsics to <code>fn</code> pointers.\" <a href=\"https://github.com/rust-lang/rust/pull/86699\">rust#86699</a><ul>\n<li>opened by <span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span>, asking for a review (<a href=\"https://github.com/rust-lang/rust/pull/86699#issuecomment-870745885\">comment</a>)</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> if you're ok with it, I'd remove the <code>I-nominated</code> flag as I saw today a good discussion about this pr. In case, the flag can be re-added if you see a fit for next week's meeting</p>",
        "id": 245330120,
        "sender_full_name": "apiraino",
        "timestamp": 1625758119
    },
    {
        "content": "<p>(btw sorry for the confusing summary I've done about it)</p>",
        "id": 245330213,
        "sender_full_name": "apiraino",
        "timestamp": 1625758167
    },
    {
        "content": "<p>yeah that's fine</p>",
        "id": 245330231,
        "sender_full_name": "eddyb",
        "timestamp": 1625758172
    },
    {
        "content": "<p>thanks again for getting it unstuck!</p>",
        "id": 245330280,
        "sender_full_name": "eddyb",
        "timestamp": 1625758199
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"250987\">@apiraino</span> I think you intended to mention tmandry in the checking from wg-async-foundations in the upcoming agenda <a href=\"https://hackmd.io/PgfxdZIrTEOQ5Mw_ZEEesA\">https://hackmd.io/PgfxdZIrTEOQ5Mw_ZEEesA</a>, instead of me.</p>",
        "id": 245354983,
        "sender_full_name": "tm",
        "timestamp": 1625770113
    },
    {
        "content": "<p>ugh you're right. as you can see I still sometimes confuse and dont correctly match github/zulip nicknames</p>",
        "id": 245355071,
        "sender_full_name": "apiraino",
        "timestamp": 1625770173
    },
    {
        "content": "<p>apologies, thanks for noticing</p>",
        "id": 245355080,
        "sender_full_name": "apiraino",
        "timestamp": 1625770181
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-07-08.20.2354818/near/245322952\">said</a>:</p>\n<blockquote>\n<p>for the most part I think <span class=\"user-group-mention silent\" data-user-group-id=\"4493\">T-libs</span> owns this? Or maybe <span class=\"user-group-mention silent\" data-user-group-id=\"2645\">T-libs-api</span> , if there are changes implied to the public APIs? (Which is not clear to me, <span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> commented that PR <a href=\"https://github.com/rust-lang/rust/issues/86765\">#86765</a> loses in-place iteration, that’s an API change, right?)</p>\n</blockquote>\n<p>Well, it loses the implementation of two <em>unstable</em> traits: <code>SourceIter</code> because we can't always return <code>as_inner</code>, and <code>InPlaceIterable</code> because it doesn't make sense without the former. (I'm not even sure why they are separate traits.)</p>",
        "id": 245363469,
        "sender_full_name": "cuviper",
        "timestamp": 1625774202
    },
    {
        "content": "<p>In terms of stable API, the only change is the implicit behavioral change, whether some <code>FromIterator</code> implementations are able to reuse storage.</p>",
        "id": 245363504,
        "sender_full_name": "cuviper",
        "timestamp": 1625774222
    },
    {
        "content": "<p>IMO this is not important through <code>Fuse</code>, but one could argue. And I'm not sure if that should be <code>T-libs</code> or <code>T-libs-api</code>.</p>",
        "id": 245363653,
        "sender_full_name": "cuviper",
        "timestamp": 1625774289
    }
]