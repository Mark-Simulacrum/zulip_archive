[
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span>; the triage meeting will start in ~ 1h and 40m</p>",
        "id": 221289657,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1609420790
    },
    {
        "content": "<p><em>WG-prioritization</em> has done pre-triage in <a class=\"stream\" data-stream-id=\"245100\" href=\"/#narrow/stream/245100-t-compiler.2Fwg-prioritization.2Falerts\">#t-compiler/wg-prioritization/alerts</a></p>",
        "id": 221289703,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1609420805
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"2403\">@WG-prioritization</span> has prepared the <a href=\"https://hackmd.io/aV-WdvQnTp6GLiQXxuA5sA?view\">meeting agenda</a></p>",
        "id": 221289713,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1609420818
    },
    {
        "content": "<p>We will have checkins from <em>WG-mir-opt</em> and <em>WG-polonius</em></p>",
        "id": 221289731,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1609420855
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> do you have something you want to share about <span class=\"user-group-mention\" data-user-group-id=\"1162\">@WG-mir-opt</span>?</p>",
        "id": 221289744,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1609420891
    },
    {
        "content": "<p>yes, will post the summary in a bit</p>",
        "id": 221289750,
        "sender_full_name": "oli",
        "timestamp": 1609420906
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1184\">@WG-polonius</span> checkin is already filled</p>",
        "id": 221289756,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1609420913
    },
    {
        "content": "<p>done</p>",
        "id": 221290328,
        "sender_full_name": "oli",
        "timestamp": 1609421568
    },
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span>! Add a <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> emoji to show you're here :)</p>",
        "id": 221295117,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609426905
    },
    {
        "content": "<p>(sorry for missing the meeting last week, y'all!)</p>",
        "id": 221295174,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609426929
    },
    {
        "content": "<p>we will start off with 5 minutes for ...</p>\n<h2>Announcements</h2>",
        "id": 221295177,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609426935
    },
    {
        "content": "<ul>\n<li>Rust 1.49 has been released!!! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></li>\n</ul>",
        "id": 221295216,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609426989
    },
    {
        "content": "<ul>\n<li>Make sure that all ideas for 2021 are in the <a href=\"https://hackmd.io/3eG6OZWHRbSMxoRxzwNhGQ?view\">HackMD</a>; see <a href=\"#narrow/stream/131828-t-compiler/topic/Rust.202021\">zulip discussion</a></li>\n</ul>",
        "id": 221295227,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609426996
    },
    {
        "content": "<ul>\n<li>New MCPs (take a look, see if you like them!)<ul>\n<li>No new proposals this time.</li>\n</ul>\n</li>\n</ul>",
        "id": 221295234,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609427011
    },
    {
        "content": "<ul>\n<li>Old MCPs (not seconded, take a look)<ul>\n<li>\"MCP: move compiler/ crates to stable Rust\" <a href=\"https://github.com/rust-lang/compiler-team/issues/358\">compiler-team#358</a></li>\n<li>\"Add 32-bit and 64-bit stderr/stdout files for ui tests\" <a href=\"https://github.com/rust-lang/compiler-team/issues/365\">compiler-team#365</a></li>\n<li>\"Add a <code>NOOP_METHOD_CALL</code> lint for methods which should never be directly called\" <a href=\"https://github.com/rust-lang/compiler-team/issues/375\">compiler-team#375</a></li>\n<li>\"MCP: More Cranelift-friendly portable SIMD intrinsics\" <a href=\"https://github.com/rust-lang/compiler-team/issues/381\">compiler-team#381</a></li>\n<li>\"Debuggable Macro Expansions\" <a href=\"https://github.com/rust-lang/compiler-team/issues/386\">compiler-team#386</a></li>\n<li>\"Move query implementation outside rustc_middle\" <a href=\"https://github.com/rust-lang/compiler-team/issues/388\">compiler-team#388</a></li>\n<li>\"Uplift the <code>invalid_atomic_ordering</code> lint from clippy to rustc\" <a href=\"https://github.com/rust-lang/compiler-team/issues/390\">compiler-team#390</a></li>\n<li>\"Staged queries\" <a href=\"https://github.com/rust-lang/compiler-team/issues/391\">compiler-team#391</a></li>\n<li>\"Do not traverse the HIR to generate metadata\" <a href=\"https://github.com/rust-lang/compiler-team/issues/392\">compiler-team#392</a></li>\n<li>\"Embed version numbers in backport nominations and regression labels\" <a href=\"https://github.com/rust-lang/compiler-team/issues/393\">compiler-team#393</a></li>\n</ul>\n</li>\n</ul>",
        "id": 221295258,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609427036
    },
    {
        "content": "<ul>\n<li>Pending FCP requests (check your boxes!)<ul>\n<li>\"rustc: Stabilize <code>-Zrun-dsymutil</code> as <code>-Csplit-debuginfo</code>\" <a href=\"https://github.com/rust-lang/rust/pull/79570\">rust#79570</a></li>\n</ul>\n</li>\n</ul>",
        "id": 221295325,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609427071
    },
    {
        "content": "<ul>\n<li>Things in FCP (make sure you're good with it)<ul>\n<li>\"Make it easier to build the standard library\" <a href=\"https://github.com/rust-lang/compiler-team/issues/394\">compiler-team#394</a></li>\n<li>\"Add a scheme to register functions from other crates with TyCtxt\" <a href=\"https://github.com/rust-lang/compiler-team/issues/395\">compiler-team#395</a></li>\n</ul>\n</li>\n</ul>",
        "id": 221295333,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609427083
    },
    {
        "content": "<ul>\n<li>Accepted MCPs<ul>\n<li>No new accepted proposals this time.</li>\n</ul>\n</li>\n</ul>",
        "id": 221295340,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609427090
    },
    {
        "content": "<ul>\n<li>Finalized FCPs (disposition merge)<ul>\n<li>[T-infra, T-compiler] \"Drop official support for Windows XP\" <a href=\"https://github.com/rust-lang/compiler-team/issues/378\">compiler-team#378</a></li>\n<li>[T-libs] \"Tracking issue for map_ok and map_err method for Poll&lt;Option&lt;Result&lt;T, E&gt;&gt;&gt;\" <a href=\"https://github.com/rust-lang/rust/issues/63514\">rust#63514</a></li>\n<li>[T-libs] \"Stabilize the Wake trait\" <a href=\"https://github.com/rust-lang/rust/pull/74304\">rust#74304</a></li>\n<li>[T-libs] \"Mark <code>-1</code> as an available niche for file descriptors\" <a href=\"https://github.com/rust-lang/rust/pull/74699\">rust#74699</a></li>\n<li>[T-libs] \"Stabilize or_insert_with_key\" <a href=\"https://github.com/rust-lang/rust/pull/78083\">rust#78083</a></li>\n<li>[T-lang] \"Rename <code>overlapping_patterns</code> lint\" <a href=\"https://github.com/rust-lang/rust/pull/78242\">rust#78242</a></li>\n<li>[T-libs] \"stabilize deque_range\" <a href=\"https://github.com/rust-lang/rust/pull/79022\">rust#79022</a></li>\n<li>[T-lang] \"passes: prohibit invalid attrs on generic params\" <a href=\"https://github.com/rust-lang/rust/pull/79073\">rust#79073</a></li>\n<li>[T-libs] \"Add <code>impl Div&lt;NonZeroU{0}&gt; for u{0}</code> which cannot panic\" <a href=\"https://github.com/rust-lang/rust/pull/79134\">rust#79134</a></li>\n<li>[T-lang] \"stabilize <code>#![feature(min_const_generics)]</code> in 1.51\" <a href=\"https://github.com/rust-lang/rust/pull/79135\">rust#79135</a></li>\n<li>[T-libs] \"Stabilize <code>core::slice::fill</code>\" <a href=\"https://github.com/rust-lang/rust/pull/79213\">rust#79213</a></li>\n<li>[T-libs] \"BTreeMap: remove Ord bound where it's not needed\" <a href=\"https://github.com/rust-lang/rust/pull/79245\">rust#79245</a></li>\n<li>[T-libs] \"Deprecate atomic compare_and_swap method\" <a href=\"https://github.com/rust-lang/rust/pull/79261\">rust#79261</a></li>\n<li>[T-lang] \"Acknowledge that <code>[CONST; N]</code> is stable\" <a href=\"https://github.com/rust-lang/rust/pull/79270\">rust#79270</a></li>\n<li>[T-libs] \"Stabilize all stable methods of <code>Ipv4Addr</code>, <code>Ipv6Addr</code> and <code>IpAddr</code> as const\" <a href=\"https://github.com/rust-lang/rust/pull/79342\">rust#79342</a></li>\n<li>[T-libs] \"Move {f32,f64}::clamp to core.\" <a href=\"https://github.com/rust-lang/rust/pull/79473\">rust#79473</a></li>\n<li>[T-libs] \"Stabilize <code>unsafe_cell_get_mut</code>\" <a href=\"https://github.com/rust-lang/rust/pull/79485\">rust#79485</a></li>\n<li>[T-libs] \"Implement From&lt;char&gt; for u64 and u128.\" <a href=\"https://github.com/rust-lang/rust/pull/79502\">rust#79502</a></li>\n</ul>\n</li>\n</ul>",
        "id": 221295352,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609427105
    },
    {
        "content": "<h3>WG checkins</h3>",
        "id": 221295358,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609427115
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1162\">@WG-mir-opt</span> checkin by <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>:</p>\n<blockquote>\n<ul>\n<li>mir opts now participate in optimization fuel (<a href=\"https://github.com/rust-lang/rust/issues/79117\">#79117</a>)</li>\n<li>some intrinsic calls are lowered to pure MIR statements/rvalues (<a href=\"https://github.com/rust-lang/rust/issues/79049\">#79049</a>, <a href=\"https://github.com/rust-lang/rust/issues/79922\">#79922</a>)</li>\n<li>the old copy-prop is finally gone (<a href=\"https://github.com/rust-lang/rust/issues/77373\">#77373</a>)</li>\n<li>mir-dumps became less noisy around arrays and tuples (<a href=\"https://github.com/rust-lang/rust/issues/79999\">#79999</a>)</li>\n<li>mir graphviz is now created by using an out-of-tree crate (<a href=\"https://github.com/rust-lang/rust/issues/78399\">#78399</a>)</li>\n<li>various fixes of mir-inlining by @tmiasko (<a href=\"https://github.com/rust-lang/rust/issues/79192\">#79192</a>, <a href=\"https://github.com/rust-lang/rust/issues/78966\">#78966</a>, <a href=\"https://github.com/rust-lang/rust/issues/78873\">#78873</a>, <a href=\"https://github.com/rust-lang/rust/issues/78843\">#78843</a>, <a href=\"https://github.com/rust-lang/rust/issues/78847\">#78847</a>, <a href=\"https://github.com/rust-lang/rust/issues/78771\">#78771</a>, <a href=\"https://github.com/rust-lang/rust/issues/78674\">#78674</a>, <a href=\"https://github.com/rust-lang/rust/issues/78668\">#78668</a>, <a href=\"https://github.com/rust-lang/rust/issues/78580\">#78580</a>)</li>\n</ul>\n</blockquote>",
        "id": 221295363,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609427122
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1184\">@WG-polonius</span> checkin by <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>:</p>\n<blockquote>\n<p>A few things to report since last time (but this work is not reviewed yet):</p>\n<ul>\n<li>we completed the refactoring to align with the rules we finalized last sprint (with another branch to update rustc)</li>\n<li>we completed computing subset errors in all the variants, which re-enables the fast \"location insensitive\" pre-pass</li>\n<li>we added more documentation to the book to explain the process, the \"Naive\" rules, and the data they're using</li>\n<li>preparatory work for the 1st sprint of 2021, both for planning the sprint, and in-progress PRs to review during the sprint (counting the above work, that's 4 PRs ready for when the sprint happens)</li>\n</ul>\n</blockquote>",
        "id": 221295374,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609427140
    },
    {
        "content": "<p>That wg-polonius check-in reminds me: We are planning to try out a sprint-like structure in early 2021, right?</p>",
        "id": 221295487,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609427242
    },
    {
        "content": "<p>I think we're going to have to wait till feb for the first sprint, but we should aim to prepare in jan for it</p>",
        "id": 221295557,
        "sender_full_name": "simulacrum",
        "timestamp": 1609427295
    },
    {
        "content": "<p>okay. and the focus is on some aspect of the overall story of improving the rustc contributor experience, specifically by making its compile times faster, right?</p>",
        "id": 221295602,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609427357
    },
    {
        "content": "<p>I think that should be the focus, yes, we'll want to identify some target tasks I think</p>",
        "id": 221295625,
        "sender_full_name": "simulacrum",
        "timestamp": 1609427383
    },
    {
        "content": "<p>yep</p>",
        "id": 221295626,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609427386
    },
    {
        "content": "<p>okay just wanted to try to put that back into my own mental cache, and hopefully the same for others</p>",
        "id": 221295686,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609427412
    },
    {
        "content": "<h2>Beta-nominations</h2>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Abeta-nominated+-label%3Abeta-accepted+label%3AT-compiler\">T-compiler</a></p>\n<ul>\n<li>No beta nominations for <code>T-compiler</code> this time.</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Abeta-nominated+-label%3Abeta-accepted+label%3Alibs-impl\">libs-impl</a></p>\n<ul>\n<li>No beta nominations for <code>libs-impl</code> this time.</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Abeta-nominated+-label%3Abeta-accepted+label%3AT-rustdoc\">T-rustdoc</a></p>\n<ul>\n<li>No beta nominations for <code>T-rustdoc</code> this time.</li>\n</ul>",
        "id": 221295693,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609427424
    },
    {
        "content": "<p>(ah, release week, so pleasant)</p>",
        "id": 221295698,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609427433
    },
    {
        "content": "<h2>Stable-nominations</h2>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Astable-nominated+-label%3Astable-accepted+label%3AT-compiler\">T-compiler</a></p>\n<ul>\n<li>No stable nominations for <code>T-compiler</code> this time.</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Astable-nominated+-label%3Astable-accepted+label%3Alibs-impl\">libs-impl</a></p>\n<ul>\n<li>No stable nominations for <code>libs-impl</code> this time.</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Astable-nominated+-label%3Astable-accepted+label%3AT-rustdoc\">T-rustdoc</a></p>\n<ul>\n<li>No stable nominations for <code>T-rustdoc</code> this time.</li>\n</ul>",
        "id": 221295702,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609427443
    },
    {
        "content": "<h2>PRs S-waiting-on-team</h2>\n<p><a href=\"https://github.com/rust-lang/rust/pulls?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AS-waiting-on-team+label%3AT-compiler\">T-compiler</a></p>",
        "id": 221295704,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609427453
    },
    {
        "content": "<ul>\n<li>\"MIR-OPT: Pass to deduplicate blocks\" <a href=\"https://github.com/rust-lang/rust/pull/77551\">rust#77551</a><ul>\n<li>Discussed last week</li>\n<li>opened by <span class=\"user-mention\" data-user-id=\"139182\">@Simon Vandel Sillesen</span> </li>\n<li>assigned to <span class=\"user-mention\" data-user-id=\"124288\">@oli</span></li>\n<li>The performance gain seems to be not very clear.</li>\n</ul>\n</li>\n</ul>",
        "id": 221295706,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609427460
    },
    {
        "content": "<p>Quoting myself:</p>\n<blockquote>\n<p>I don't know what to do with this PR. It should improve performance, due to giving less MIR to LLVM, but ends up being more expensive in many cases, while just improving perf slightly in a few cases.</p>\n</blockquote>\n<blockquote>\n<p>From these results it seems to me like we should not add this new MIR opt pass. Then again, we haven't actually tested the performance of the code that is built, just the compilation speed. Maybe LLVM is actually able to optimize the code better now and takes more time because of that?</p>\n</blockquote>",
        "id": 221295722,
        "sender_full_name": "oli",
        "timestamp": 1609427500
    },
    {
        "content": "<p>Seems like it might be a candidate for <code>mir-opt-level=3</code>?</p>",
        "id": 221295785,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1609427544
    },
    {
        "content": "<p>This is a recurring problem with mir opts. We lose some compilation speed, but don't know if we gain anything</p>",
        "id": 221295787,
        "sender_full_name": "oli",
        "timestamp": 1609427546
    },
    {
        "content": "<p>seems like this is a problem with our automated benchmarking</p>",
        "id": 221295796,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609427568
    },
    {
        "content": "<p>i.e. it is <em>good</em> that we do call out the delta to compile times</p>",
        "id": 221295799,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609427582
    },
    {
        "content": "<p>but the fact that we cannot isolate the effect on object code on its own is not great</p>",
        "id": 221295810,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609427602
    },
    {
        "content": "<p>Do we have metrics how many times this opt really deduplicates anything?</p>",
        "id": 221295821,
        "sender_full_name": "nagisa",
        "timestamp": 1609427617
    },
    {
        "content": "<p>In a representative codebase of some sort.</p>",
        "id": 221295830,
        "sender_full_name": "nagisa",
        "timestamp": 1609427627
    },
    {
        "content": "<p>stage 2 builds apparently dedup 23875 times</p>",
        "id": 221295880,
        "sender_full_name": "lcnr",
        "timestamp": 1609427644
    },
    {
        "content": "<p>it looks like almost never? 23875 across a stage 2 build</p>",
        "id": 221295887,
        "sender_full_name": "simulacrum",
        "timestamp": 1609427649
    },
    {
        "content": "<p>(presumably there are hundreds of thousands if not millions of basic blocks?)</p>",
        "id": 221295894,
        "sender_full_name": "simulacrum",
        "timestamp": 1609427665
    },
    {
        "content": "<p>heh.</p>",
        "id": 221295895,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609427670
    },
    {
        "content": "<p>yeah, it seems to me like majority of these are most likely trivial bbs that do tend to be the same.</p>",
        "id": 221295900,
        "sender_full_name": "nagisa",
        "timestamp": 1609427684
    },
    {
        "content": "<p>A better metric would probably be: how many statements got removed for instance.</p>",
        "id": 221295929,
        "sender_full_name": "nagisa",
        "timestamp": 1609427708
    },
    {
        "content": "<p>yea... we could bench it at <code>mir-opt-level=3</code> until we have the capability to check more things. We don't need to take up too much time here, mostly so everyone knows about it and interested parties can go into the PR and talk about it there</p>",
        "id": 221295935,
        "sender_full_name": "oli",
        "timestamp": 1609427718
    },
    {
        "content": "<p>So is the question here about \"do we close this or do we continue investigation?\"</p>",
        "id": 221295937,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609427718
    },
    {
        "content": "<p>/me still hopes that the compiler can rearrange its own basic blocks <a href=\"https://github.com/rust-lang/rust/issues/77960\">https://github.com/rust-lang/rust/issues/77960</a></p>",
        "id": 221295939,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609427729
    },
    {
        "content": "<p>this opt also tends to skip blocks with different spans, does it?</p>",
        "id": 221295945,
        "sender_full_name": "lcnr",
        "timestamp": 1609427742
    },
    {
        "content": "<p>It sounds to me like we can continue investigation, but should this PR itself remain open as is? Is that the most effective way to drive the investigation?</p>",
        "id": 221295948,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609427751
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-12-31.20.2354818/near/221295945\">said</a>:</p>\n<blockquote>\n<p>this opt also tends to skip blocks with different spans, does it?</p>\n</blockquote>\n<p>if there are constants in it, yes, otherwise there are no spans in it. EDIT: but there are scope and location ids in it, which often amount to the same thing.</p>",
        "id": 221295954,
        "sender_full_name": "oli",
        "timestamp": 1609427760
    },
    {
        "content": "<p>I want to move on to other topics</p>",
        "id": 221296009,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609427805
    },
    {
        "content": "<p>yea, let's unnominate and I'll dedicate more time to it async</p>",
        "id": 221296021,
        "sender_full_name": "oli",
        "timestamp": 1609427827
    },
    {
        "content": "<p>So I'm treating this as \"we advertised it to the team; people who want to advise should reach out to the author and maybe to members of <span class=\"user-group-mention\" data-user-group-id=\"1162\">@WG-mir-opt</span> with advice/help.</p>",
        "id": 221296027,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609427852
    },
    {
        "content": "<ul>\n<li>\"Fix rustc sysroot in systems using CAS\" <a href=\"https://github.com/rust-lang/rust/pull/79253\">rust#79253</a><ul>\n<li>Assigned to <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span></li>\n<li>\"It seems like it could easily lead to confusion if there are (by accident or intentionally) different sysroots at argv0 and current_exe\"</li>\n<li><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> thinks that the problem is real but is unsure if the solution is the right one</li>\n<li><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> <a href=\"https://github.com/rust-lang/rust/pull/79253#issuecomment-750706219\">points out</a> that there is already a <code>--sysroot</code> to override the system root (if that may help the issue reporter)</li>\n</ul>\n</li>\n</ul>",
        "id": 221296036,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609427868
    },
    {
        "content": "<p>a related, but tangential issue is that the sysroot is wrong for tools built out of tree <a href=\"https://github.com/rust-lang/rust/pull/78926\">https://github.com/rust-lang/rust/pull/78926</a></p>",
        "id": 221296092,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609427902
    },
    {
        "content": "<p>to be clear, I believe the author, but I don't know if we want to support this use case or really much about how this is usually dealt with</p>",
        "id": 221296096,
        "sender_full_name": "simulacrum",
        "timestamp": 1609427907
    },
    {
        "content": "<p>(CAS here stands for \"content-addressable storage\", not \"compare-and-swap\" as I usually assume)</p>",
        "id": 221296097,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609427910
    },
    {
        "content": "<p>I have not seen a response yet from the author as to how they deal with it for e.g. gcc or clang or whatever</p>",
        "id": 221296116,
        "sender_full_name": "simulacrum",
        "timestamp": 1609427961
    },
    {
        "content": "<p>Is part of the problem that maybe the abstraction we've chosen is wrong?</p>",
        "id": 221296130,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609427995
    },
    {
        "content": "<p>maybe? I think part of the problem is that I have no good sense of the constraints in this area</p>",
        "id": 221296178,
        "sender_full_name": "simulacrum",
        "timestamp": 1609428022
    },
    {
        "content": "<p>i.e., rather than a method to get the sysroot, it should perhaps be a method that, given a path to a rustc binary, gives back the path to its associated sysroot?</p>",
        "id": 221296182,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609428026
    },
    {
        "content": "<p>well, we need to get that path somehow :)</p>",
        "id": 221296190,
        "sender_full_name": "simulacrum",
        "timestamp": 1609428044
    },
    {
        "content": "<p>that would let clients choose what underlying function should drive the computation, right?</p>",
        "id": 221296191,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609428045
    },
    {
        "content": "<p>It seems like the build system driving rustc on their end should be able to specify the correct <code>--sysroot</code> path as <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> mentioned. So that would be my preferred solution if that works.</p>",
        "id": 221296199,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1609428059
    },
    {
        "content": "<p>okay</p>",
        "id": 221296207,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609428073
    },
    {
        "content": "<p>lets maybe push for that answer</p>",
        "id": 221296208,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609428078
    },
    {
        "content": "<p>yeah, I think we should wait for the author to tell us what they normally do for other compilers or if --sysroot is viable solution</p>",
        "id": 221296214,
        "sender_full_name": "simulacrum",
        "timestamp": 1609428092
    },
    {
        "content": "<p>If not, I don't object to taking a patch to improve things for them.</p>",
        "id": 221296219,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1609428096
    },
    {
        "content": "<p>to be clear, I expect any solution for this CAS to be different from a fix for tools out of tree</p>",
        "id": 221296221,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609428103
    },
    {
        "content": "<p>because tools can add their own logic on top</p>",
        "id": 221296270,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609428124
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> my worry is that this <em>could</em> change behavior for working things today, though it's pretty unlikely</p>",
        "id": 221296276,
        "sender_full_name": "simulacrum",
        "timestamp": 1609428131
    },
    {
        "content": "<p>okay. lets try to summarize that feedback on the ticket, and change the state to S-waiting-on-author, right?</p>",
        "id": 221296278,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609428137
    },
    {
        "content": "<p>yep I can do that</p>",
        "id": 221296280,
        "sender_full_name": "simulacrum",
        "timestamp": 1609428144
    },
    {
        "content": "<p>moving on then</p>",
        "id": 221296281,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609428144
    },
    {
        "content": "<ul>\n<li>\"BPF target support\" <a href=\"https://github.com/rust-lang/rust/pull/79608\">rust#79608</a><ul>\n<li>Discussed last week</li>\n<li>opened by <span class=\"user-mention\" data-user-id=\"369653\">@Alessandro Decina</span>, suggests a Tier 2 for this target</li>\n<li>assigned to <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> </li>\n<li>Adds targets <code>bpfel-unknown-none</code> and <code>bpfeb-unknown-none</code> (more info <a href=\"https://github.com/alessandrod/bpf-linker\">here</a>)</li>\n<li>@_<em>simulacrum</em> suggests waiting to have a policy for that</li>\n<li><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> <a href=\"https://github.com/rust-lang/rust/pull/79608#issuecomment-744211807\">is working on it</a></li>\n</ul>\n</li>\n</ul>",
        "id": 221296293,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609428157
    },
    {
        "content": "<p>Has anyone read the rationale for tier2 vs tier3? Its long and I'm not sure I want to try to digest it now</p>",
        "id": 221296320,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609428214
    },
    {
        "content": "<blockquote>\n<p>\"The only reason for wanting this at tier 2 sooner rather than later is that while bpf-linker is already usable with rust stable today with -C linker-flavor=wasm-ld -C linker=bpf-linker, deployment is a bit of a nightmare. For things to work rustc and bpf-linker need to use the same LLVM. Rust has been tracking the latest LLVM version for a while now, but that's almost never available in linux distributions.\"</p>\n</blockquote>",
        "id": 221296333,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609428239
    },
    {
        "content": "<blockquote>\n<p>\"With this in tier 2 I could use rustc's libLLVM from bpf-linker, which would simplify things a lot.\"</p>\n</blockquote>",
        "id": 221296381,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609428262
    },
    {
        "content": "<p>The PR author in any case has said that they're happy to wait for the Target Tier Policy to land first before pushing more on this</p>",
        "id": 221296394,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609428305
    },
    {
        "content": "<p>I think another worry of mine is that it sounds like bpf-linker is (maybe) a tool that they wrote themselves? but I didn't investigate in detail</p>",
        "id": 221296409,
        "sender_full_name": "simulacrum",
        "timestamp": 1609428336
    },
    {
        "content": "<p>(nothing against that but seems potentially like something that would vanish)</p>",
        "id": 221296420,
        "sender_full_name": "simulacrum",
        "timestamp": 1609428352
    },
    {
        "content": "<p>seems like obscure enough target to not warrant pushing for t2 from the get go</p>",
        "id": 221296453,
        "sender_full_name": "nagisa",
        "timestamp": 1609428363
    },
    {
        "content": "<p>It definitely seems like it only lives in their personal github repo</p>",
        "id": 221296462,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609428364
    },
    {
        "content": "<p>Is there any actual benefit to landing Tier 3 support here?</p>",
        "id": 221296472,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609428378
    },
    {
        "content": "<p>easier to cross-compile downstream (e.g. build-std probably works)</p>",
        "id": 221296480,
        "sender_full_name": "simulacrum",
        "timestamp": 1609428397
    },
    {
        "content": "<p>I know the PR author said they would be happy to see Tier3 (but then argued for a direct jump to Tier 2)</p>",
        "id": 221296481,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609428398
    },
    {
        "content": "<p>searching for bpf-linker pops <a href=\"https://confused.ai/posts/rust-bpf-target\">https://confused.ai/posts/rust-bpf-target</a></p>",
        "id": 221296482,
        "sender_full_name": "nagisa",
        "timestamp": 1609428404
    },
    {
        "content": "<p>(That's the PR author's blog)</p>",
        "id": 221296488,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1609428421
    },
    {
        "content": "<p>and the repo for the linker <a href=\"https://github.com/alessandrod/bpf-linker\">https://github.com/alessandrod/bpf-linker</a><br>\n(also theirs)</p>",
        "id": 221296497,
        "sender_full_name": "apiraino",
        "timestamp": 1609428438
    },
    {
        "content": "<p>okay well I'm not sold on Tier 2, certainly not right now</p>",
        "id": 221296507,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609428459
    },
    {
        "content": "<p>We can maybe revisit after the Target Tier policy lands</p>",
        "id": 221296517,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609428480
    },
    {
        "content": "<p>My question is whether we should nonetheless tell the PR author to revise their code to target Tier 3 instead in the meantime</p>",
        "id": 221296567,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609428511
    },
    {
        "content": "<p>Probably best to not worry about that right now</p>",
        "id": 221296573,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609428531
    },
    {
        "content": "<p>the rfc is probably at least a month or two out, I think</p>",
        "id": 221296574,
        "sender_full_name": "simulacrum",
        "timestamp": 1609428535
    },
    {
        "content": "<p>just let it wait until Target Tier Policy happens</p>",
        "id": 221296576,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609428540
    },
    {
        "content": "<p>so I would not tell them to revise things</p>",
        "id": 221296578,
        "sender_full_name": "simulacrum",
        "timestamp": 1609428542
    },
    {
        "content": "<p>I also don't think I can review the PR fwiw regardless, someone else who has more knowledge of bpf probably needs to do that</p>",
        "id": 221296587,
        "sender_full_name": "simulacrum",
        "timestamp": 1609428561
    },
    {
        "content": "<p>Maybe the next step here is to find someone qualified to review?</p>",
        "id": 221296670,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1609428612
    },
    {
        "content": "<p>just to be clear: BPF here <em>does</em> stand for \"Berkeley Packet Filter\", right?</p>",
        "id": 221296679,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609428628
    },
    {
        "content": "<p>I'm sort of irritated that there are <em>no</em> hyperlinks to the broader concept being referenced</p>",
        "id": 221296693,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609428647
    },
    {
        "content": "<p>I ... think so? but it's now much more broad iirc, just general JIT programs in kernel space these days</p>",
        "id": 221296704,
        "sender_full_name": "simulacrum",
        "timestamp": 1609428660
    },
    {
        "content": "<p>Yeah but it's kind of taken on a much more general role in the linux kernel.</p>",
        "id": 221296714,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1609428669
    },
    {
        "content": "<p>sure, I just want to ensure I'm even looking at the right thing, e.g. this: <a href=\"https://docs.cilium.io/en/v1.9/bpf/\">https://docs.cilium.io/en/v1.9/bpf/</a></p>",
        "id": 221296731,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609428687
    },
    {
        "content": "<p>I'm happy to be on the hook for reviewing targets.</p>",
        "id": 221296733,
        "sender_full_name": "nagisa",
        "timestamp": 1609428692
    },
    {
        "content": "<p>(another observation is that its not clear how much utility a bpf target has when there is ebpf...)</p>",
        "id": 221296782,
        "sender_full_name": "nagisa",
        "timestamp": 1609428725
    },
    {
        "content": "<p>okay so the answer here is that we're not going to advise the PR author to revise anything yet; just wait for Target Tier Policy to be defined first (and maybe suggest they get involved in the conversation over there?)</p>",
        "id": 221296802,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609428753
    },
    {
        "content": "<p>yeah. I'll reassign to <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> for now though.</p>",
        "id": 221296814,
        "sender_full_name": "simulacrum",
        "timestamp": 1609428784
    },
    {
        "content": "<p>okay, next</p>",
        "id": 221296822,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609428786
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pulls?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AS-waiting-on-team+label%3Alibs-impl\">libs-impl</a></p>\n<ul>\n<li>No PRs waiting on <code>libs-impl</code> this time.</li>\n</ul>",
        "id": 221296826,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609428792
    },
    {
        "content": "<h2>Issues of Note</h2>\n<h3>Short Summary</h3>\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AT-compiler+label%3AP-critical+\">5 T-compiler P-critical issues</a><ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AT-compiler+label%3AP-critical+no%3Aassignee\">3 of those are unassigned</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AT-compiler+label%3AP-high+\">55 T-compiler P-high issues</a><ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AT-compiler+label%3AP-high+no%3Aassignee\">35 of those are unassigned</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/rust-lang/rust/labels/regression-from-stable-to-beta\">0 P-critical, 1 P-high, 2 P-medium, 0 P-low regression-from-stable-to-beta</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/labels/regression-from-stable-to-nightly\">0 P-critical, 2 P-high, 7 P-medium, 1 P-low regression-from-stable-to-nightly</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/labels/regression-from-stable-to-stable\">1 P-critical, 31 P-high, 81 P-medium, 9 P-low regression-from-stable-to-stable</a></li>\n</ul>",
        "id": 221296834,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609428802
    },
    {
        "content": "<h3>P-critical</h3>\n<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AP-critical+label%3AT-compiler\">T-compiler</a></p>",
        "id": 221296845,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609428812
    },
    {
        "content": "<ul>\n<li>\"Switching to opt-level=z on i686-windows-msvc triggers STATUS_ACCESS_VIOLATION\" <a href=\"https://github.com/rust-lang/rust/issues/67497\">rust#67497</a><ul>\n<li>Discussed last week</li>\n<li>Opened by <span class=\"user-mention\" data-user-id=\"238306\">@dignifiedquire</span> </li>\n<li>Assigned to <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span></li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/67497#issuecomment-733699197\">Rust 1.36.0 through 1.48.0</a> all have broken builds on Windows i686-windows-msvc</li>\n</ul>\n</li>\n</ul>",
        "id": 221296850,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609428822
    },
    {
        "content": "<p>I have nothing to report here. I haven't had a chance to look at it, but I hope to do so next week.</p>",
        "id": 221296859,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609428842
    },
    {
        "content": "<ul>\n<li>\"Upgrade to LLVM11 caused a codegen regression on Windows\" <a href=\"https://github.com/rust-lang/rust/issues/78283\">rust#78283</a><ul>\n<li><a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-11-12.20.2354818/near/216482008\">Previously discussed</a></li>\n<li>opened by <span class=\"user-mention\" data-user-id=\"133260\">@Jeff Muizelaar</span></li>\n<li>assigned to  <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> </li>\n<li>Firefox code that used to work on Rust 1.46 started to fail after upgrading to LLVM 11</li>\n<li>Affects only MSVC</li>\n<li><span class=\"user-mention\" data-user-id=\"133224\">@Nikita Popov</span> suggests could be related to <a href=\"https://github.com/rust-lang/rust/issues/74498\">rust#74498</a></li>\n<li><span class=\"user-mention\" data-user-id=\"133260\">@Jeff Muizelaar</span> suggests to be related to LLVM bug <a href=\"https://bugs.llvm.org/show_bug.cgi?id=46943\">#46943</a>, provides a <a href=\"https://github.com/rust-lang/rust/issues/78283#issuecomment-720156273\">minimal repro</a></li>\n<li><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span>_ has patch in progress for LLVM bug <a href=\"https://bugs.llvm.org/show_bug.cgi?id=46943\">#46943</a> (got feedback recently from <span class=\"user-mention silent\" data-user-id=\"133224\">Nikita Popov</span>)</li>\n</ul>\n</li>\n</ul>",
        "id": 221296898,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609428864
    },
    {
        "content": "<p>(As a procedural note, I am surprised to see these P-critical issues, given that we have not considered them release blockers and they are all not regressions, at least to the next stable)</p>",
        "id": 221296901,
        "sender_full_name": "simulacrum",
        "timestamp": 1609428867
    },
    {
        "content": "<p>its true, perhaps these should be downgraded</p>",
        "id": 221296918,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609428887
    },
    {
        "content": "<p>shall we downgrade <a href=\"https://github.com/rust-lang/rust/issues/67497\">rust#67497</a> and <a href=\"https://github.com/rust-lang/rust/issues/78283\">rust#78283</a> to P-high rather than P-critical? Any objections to that?</p>",
        "id": 221296952,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609428927
    },
    {
        "content": "<p>They certainly aren't release blocking since we just released.</p>",
        "id": 221296971,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1609428953
    },
    {
        "content": "<p>I don't object to downgrading at this point, but they definitely seem like a kind of issue I'd call a P-critical and a blocker usually.</p>",
        "id": 221297037,
        "sender_full_name": "nagisa",
        "timestamp": 1609429007
    },
    {
        "content": "<p>Probably an important exercise the week before a release is to go through the P-critical issues and actually pull the trigger on downgrades if all the P-criticals are not actually blocking the release</p>",
        "id": 221297038,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609429015
    },
    {
        "content": "<p>we could/should have done that last week, but our meeting was implicitly cancelled. Still, seems like a good thing going forward, no?</p>",
        "id": 221297056,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609429038
    },
    {
        "content": "<p>I feel like we should not block on non-regressions, but yes, that seems like good practice - maybe more than a week out though. after all, if we do call it a blocker, we probably need to fix it!</p>",
        "id": 221297074,
        "sender_full_name": "simulacrum",
        "timestamp": 1609429061
    },
    {
        "content": "<p>(Ideally the downgrades would happen <em>sooner</em> than the week before  a release. But the week before a release seems like the last sensible time to do it.)</p>",
        "id": 221297076,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609429067
    },
    {
        "content": "<p>(or the bar is \"delay/skip a Rust release\" which seems like a <em>really</em> high bar)</p>",
        "id": 221297086,
        "sender_full_name": "simulacrum",
        "timestamp": 1609429081
    },
    {
        "content": "<p>Right.</p>",
        "id": 221297088,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609429082
    },
    {
        "content": "<p>We come back to the question of \"what does P-critical\" mean</p>",
        "id": 221297133,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609429091
    },
    {
        "content": "<p>is it solely defined by \"release blocker\"</p>",
        "id": 221297141,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609429098
    },
    {
        "content": "<p>If they had been found before the first stable release, I think <code>P-critical</code> would certainly have been correct. At least the first one wasn't found until several releases after the fact so <code>P-critical</code> seems a bit too high for that one IMO.</p>",
        "id": 221297144,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1609429108
    },
    {
        "content": "<p>or is it \"we should visit this every week, even if its not a release blocker\"</p>",
        "id": 221297145,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609429109
    },
    {
        "content": "<p>also (thought for us WG-prio) priority can be demoted in case a P-critical  is not-so-critical-after-all (correct?)</p>",
        "id": 221297173,
        "sender_full_name": "apiraino",
        "timestamp": 1609429168
    },
    {
        "content": "<p>I'll continue walking through these P-critical's now</p>",
        "id": 221297178,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609429177
    },
    {
        "content": "<p>and lets just make a plan for this meeting: If no one steps up and says \"that should remain P-critical\", then we will plan to demote all of them</p>",
        "id": 221297190,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609429202
    },
    {
        "content": "<p>Any objections to that approach?</p>",
        "id": 221297233,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609429212
    },
    {
        "content": "<ul>\n<li>\"Miscompilation of AVX2 code under --release\" <a href=\"https://github.com/rust-lang/rust/issues/79865\">rust#79865</a><ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues/78893#issuecomment-726155995\">Previously discussed</a></li>\n<li>opened by <span class=\"user-mention\" data-user-id=\"132721\">@Tony Arcieri</span> </li>\n<li>not yet assigned</li>\n<li>unsoundness that impacts cryptographic code</li>\n<li>reporter mentions a workaround (<a href=\"https://github.com/rust-lang/rust/issues/79865#issuecomment-742039745\">pulling code out of a lamba</a>) to fix the error </li>\n<li>shortest <a href=\"https://github.com/rust-lang/rust/issues/79865#issuecomment-742861255\">mcve so far</a> provided by <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span></li>\n<li>an even <a href=\"https://github.com/rust-lang/rust/issues/79865#issuecomment-748537875\">shorter repro</a> from <span class=\"user-mention\" data-user-id=\"230287\">@Stu</span></li>\n</ul>\n</li>\n</ul>",
        "id": 221297244,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609429238
    },
    {
        "content": "<p>So this is unsoundness that isn't assigned. I'm okay with downgrading to P-high but I'd really like someone to own it</p>",
        "id": 221297269,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609429291
    },
    {
        "content": "<p>but I'm willing to wait until next week, when i think we'll have some people back from vacation who might be able to take it on</p>",
        "id": 221297331,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609429325
    },
    {
        "content": "<p>P-critical seems overkill since one needs to go through some serious hoops to use avx2 to trigger.</p>",
        "id": 221297334,
        "sender_full_name": "nagisa",
        "timestamp": 1609429328
    },
    {
        "content": "<p>seems like we need llvm folks to take a look?</p>",
        "id": 221297335,
        "sender_full_name": "simulacrum",
        "timestamp": 1609429328
    },
    {
        "content": "<p>(we did ping, but I do not see much response)</p>",
        "id": 221297340,
        "sender_full_name": "simulacrum",
        "timestamp": 1609429345
    },
    {
        "content": "<p>So yeah, lets downgrade to P-high.</p>",
        "id": 221297342,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609429349
    },
    {
        "content": "<p>Unfortunately we do not currently enumerate all the P-high unassigned in this meeting, so I'm a little worried it will go overlooked post-downgrade. But, so be it, I guess.</p>",
        "id": 221297363,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609429392
    },
    {
        "content": "<p>(maybe the answer there is to figure out some asynchronous process for getting owners for unassigned P-highs)</p>",
        "id": 221297391,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609429430
    },
    {
        "content": "<ul>\n<li>\"Unsoundness in type checking of trait impls. Differences in implied lifetime bounds are not considered.\" <a href=\"https://github.com/rust-lang/rust/issues/80176\">rust#80176</a><ul>\n<li>opened by <span class=\"user-mention\" data-user-id=\"280891\">@Frank Steffahn</span> </li>\n<li>here's a <a href=\"https://github.com/rust-lang/rust/issues/80176#issuecomment-748466836\">repro</a></li>\n<li>seems related to <a href=\"https://github.com/rust-lang/rust/issues/25860\">rust#25860</a></li>\n</ul>\n</li>\n</ul>",
        "id": 221297442,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609429454
    },
    {
        "content": "<p>the more minimal repro will definitely help looking into the issue. Pinging WG-llvm is unlikely to get anybody look at it when the only repro available is a huge project. (That probably holds in general)</p>",
        "id": 221297452,
        "sender_full_name": "nagisa",
        "timestamp": 1609429466
    },
    {
        "content": "<p>I've been wondering if I should start a project group to make a creduce specific to rust</p>",
        "id": 221297469,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609429506
    },
    {
        "content": "<p>that would work on crate graphs</p>",
        "id": 221297474,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609429512
    },
    {
        "content": "<p>That would be <em>amazing</em></p>",
        "id": 221297483,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609429528
    },
    {
        "content": "<p>heh, I've actually been contemplating a similar project, we should talk</p>",
        "id": 221297487,
        "sender_full_name": "simulacrum",
        "timestamp": 1609429537
    },
    {
        "content": "<p>I spend most of my triage time on MCVEs</p>",
        "id": 221297489,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609429540
    },
    {
        "content": "<p>It seems like we keep hitting cases like this where the main blocker is lack of an MCVE, and my belief (as posted in my blog post) is that it really can be automated</p>",
        "id": 221297500,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609429561
    },
    {
        "content": "<p>If you could hook that up to a bot and point it to a GH repo with the reproduction and then have it post a comment with the MCVE ...</p>",
        "id": 221297510,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1609429562
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> yeah okay lets you and me (and anyone else) circle back to this idea.</p>",
        "id": 221297561,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609429600
    },
    {
        "content": "<p>This topic was moved by <span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> to <a class=\"stream-topic\" data-stream-id=\"131828\" href=\"/#narrow/stream/131828-t-compiler/topic/Rust.20creduce.20for.20crate-graphs\">#t-compiler &gt; Rust creduce for crate-graphs</a></p>",
        "id": 221297659,
        "sender_full_name": "Notification Bot",
        "timestamp": 1609429686
    },
    {
        "content": "<p>okay, next</p>",
        "id": 221297674,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609429710
    },
    {
        "content": "<p>or,w ait</p>",
        "id": 221297692,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609429726
    },
    {
        "content": "<p>curr</p>",
        "id": 221297695,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609429729
    },
    {
        "content": "<p>:)</p>",
        "id": 221297698,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609429731
    },
    {
        "content": "<p>did we actually discuss <a href=\"https://github.com/rust-lang/rust/issues/80176\">#80176</a>, that is?</p>",
        "id": 221297703,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609429738
    },
    {
        "content": "<p>is the only question whether it truly is a duplicate of <a href=\"https://github.com/rust-lang/rust/issues/25860\">#25860</a> ?</p>",
        "id": 221297725,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609429778
    },
    {
        "content": "<p>I guess part of the point is that even if it is related, the feature-set it uses to demonstrate the problem seems a bit easier for more people to run into by accident, right?</p>",
        "id": 221297793,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609429826
    },
    {
        "content": "<p>i think it is not a duplicate</p>",
        "id": 221297838,
        "sender_full_name": "lcnr",
        "timestamp": 1609429891
    },
    {
        "content": "<p>Okay. lets assume its not a duplicate</p>",
        "id": 221297880,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609429922
    },
    {
        "content": "<p>So its a problem with the way we match method signatures between a trait and its impl, in that case?</p>",
        "id": 221297919,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609429940
    },
    {
        "content": "<p>yeah, afaict</p>",
        "id": 221297921,
        "sender_full_name": "lcnr",
        "timestamp": 1609429949
    },
    {
        "content": "<p>imo the impl of <code>Bad for ()</code> should result in an error</p>",
        "id": 221297927,
        "sender_full_name": "lcnr",
        "timestamp": 1609429970
    },
    {
        "content": "<p>hmm. okay</p>",
        "id": 221297934,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609429977
    },
    {
        "content": "<p>I want to have niko around to talk about this</p>",
        "id": 221297947,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609429999
    },
    {
        "content": "<p>before we downgrade it</p>",
        "id": 221297951,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609430005
    },
    {
        "content": "<p>or rather</p>",
        "id": 221297958,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609430011
    },
    {
        "content": "<p>if we do downgrade it, then I want to also nominate it. :)</p>",
        "id": 221297962,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609430019
    },
    {
        "content": "<p>I am happy with that approach. Lets downgrade to P-high and I'll nominate</p>",
        "id": 221297983,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609430040
    },
    {
        "content": "<ul>\n<li>\"Miscompilation when using wrapping_sub/wrapping_add on pointer.\" <a href=\"https://github.com/rust-lang/rust/issues/80309\">rust#80309</a><ul>\n<li>opened by <span class=\"user-mention\" data-user-id=\"280891\">@Frank Steffahn</span></li>\n<li>unsoundness leads to an <code>illegal instruction</code> error, but only when compiling for <code>release</code> (<code>debug</code> seems fine)</li>\n<li>here is a <a href=\"https://github.com/rust-lang/rust/issues/80309#issuecomment-750290538\">minimal repro</a></li>\n<li>we have an <a href=\"https://bugs.llvm.org/show_bug.cgi?id=48577\">LLVM issue</a> and <a href=\"https://bugs.llvm.org/show_bug.cgi?id=44403\">here</a></li>\n</ul>\n</li>\n</ul>",
        "id": 221298096,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609430145
    },
    {
        "content": "<p>yikes</p>",
        "id": 221298103,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609430157
    },
    {
        "content": "<p>This has some comments in one of the other channels</p>",
        "id": 221298172,
        "sender_full_name": "nagisa",
        "timestamp": 1609430195
    },
    {
        "content": "<p>let me find it.</p>",
        "id": 221298176,
        "sender_full_name": "nagisa",
        "timestamp": 1609430197
    },
    {
        "content": "<p><a href=\"#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/Miscompilation.20when.20using.20wrapping_sub.2Fwrapping_add.20.2380309/near/221297064\">https://rust-lang.zulipchat.com/#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/Miscompilation.20when.20using.20wrapping_sub.2Fwrapping_add.20.2380309/near/221297064</a></p>",
        "id": 221298186,
        "sender_full_name": "nagisa",
        "timestamp": 1609430214
    },
    {
        "content": "<p>I'm planning to take a look at <span class=\"user-mention\" data-user-id=\"133224\">@Nikita Popov</span> 's diff and help push it.</p>",
        "id": 221298221,
        "sender_full_name": "nagisa",
        "timestamp": 1609430269
    },
    {
        "content": "<p>still: P-high okay here, <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> ?</p>",
        "id": 221298230,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609430281
    },
    {
        "content": "<p>Probably, given its stable-to-stable and very long standing bug?</p>",
        "id": 221298280,
        "sender_full_name": "nagisa",
        "timestamp": 1609430301
    },
    {
        "content": "<p>yep okay</p>",
        "id": 221298293,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609430315
    },
    {
        "content": "<p>P-high then.</p>",
        "id": 221298299,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609430320
    },
    {
        "content": "<p>next</p>",
        "id": 221298302,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609430321
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AP-critical+label%3Alibs-impl\">libs-impl</a></p>\n<ul>\n<li>No <code>P-critical</code> issues for <code>libs-impl</code> this time.</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AP-critical+label%3AT-rustdoc\">T-rustdoc</a></p>\n<ul>\n<li>No <code>P-critical</code> issues for <code>T-rustdoc</code> this time.</li>\n</ul>",
        "id": 221298310,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609430328
    },
    {
        "content": "<h3>P-high regressions</h3>\n<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3Aregression-from-stable-to-beta+label%3AP-high\">P-high beta regressions</a></p>",
        "id": 221298320,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609430342
    },
    {
        "content": "<ul>\n<li>\"No error reported when a generic parameter doesn't meet the requirement of an associated type\" <a href=\"https://github.com/rust-lang/rust/issues/78893\">rust#78893</a><ul>\n<li>Opened by <span class=\"user-mention\" data-user-id=\"363430\">@yshui</span> </li>\n<li>Assigned to <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> </li>\n<li><span class=\"user-mention\" data-user-id=\"307537\">@Camelid</span> bisected to this PR <a href=\"https://github.com/rust-lang/rust/pull/73905\">#73905</a></li>\n<li>Niko did <a href=\"https://github.com/rust-lang/rust/issues/78893#issuecomment-730646724\">some analysis</a> on the issue</li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/78893#issuecomment-726155995\">Previously discussed</a>: reverting <a href=\"https://github.com/rust-lang/rust/issues/73905\">#73905</a> is not desirable</li>\n<li><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <a href=\"https://github.com/rust-lang/rust/issues/78893#issuecomment-751496676\">also comments</a> this is likely to be a regression in stable once 1.49 is out, but not a release blocker</li>\n<li>but <a href=\"https://github.com/rust-lang/rust/issues/78893#issuecomment-751538585\">if this gets into stable</a>, the eventual fix is going to be a breaking change</li>\n</ul>\n</li>\n</ul>",
        "id": 221298330,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609430360
    },
    {
        "content": "<p>this is an example of where embedded the version numbers would be useful...</p>",
        "id": 221298341,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609430371
    },
    {
        "content": "<p>is this <em>in</em> stable now, or not?</p>",
        "id": 221298350,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609430379
    },
    {
        "content": "<p>yes, it is, 1.49, right?</p>",
        "id": 221298363,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609430392
    },
    {
        "content": "<p>This is in stable.</p>",
        "id": 221298367,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1609430395
    },
    {
        "content": "<p>Okay.</p>",
        "id": 221298427,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609430411
    },
    {
        "content": "<p>right, we've talked this thing to death, right?</p>",
        "id": 221298435,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609430416
    },
    {
        "content": "<p>yes</p>",
        "id": 221298464,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1609430452
    },
    {
        "content": "<p>Are we actually planning to fix it?</p>",
        "id": 221298469,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609430455
    },
    {
        "content": "<p>I was under the impression that we might just treat this as an acceptable change to static semantics</p>",
        "id": 221298481,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609430473
    },
    {
        "content": "<p>I don't think that we're fixing this</p>",
        "id": 221298490,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1609430491
    },
    {
        "content": "<p>was the change in static semantics release-noted?</p>",
        "id": 221298498,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609430503
    },
    {
        "content": "<p>or did we not want to commit to it in our docs?</p>",
        "id": 221298503,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609430509
    },
    {
        "content": "<p>sigh, we've hit the hour</p>",
        "id": 221298552,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609430524
    },
    {
        "content": "<p>I don't think we explicitly noted it, in part because I am still not quite sure I can describe it succintly</p>",
        "id": 221298571,
        "sender_full_name": "simulacrum",
        "timestamp": 1609430560
    },
    {
        "content": "<p>People should check out the performance triage report on the agenda: <a href=\"https://hackmd.io/aV-WdvQnTp6GLiQXxuA5sA?both#Performance-logs\">https://hackmd.io/aV-WdvQnTp6GLiQXxuA5sA?both#Performance-logs</a></p>",
        "id": 221298587,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609430584
    },
    {
        "content": "<h4>Nags requiring follow up</h4>\n<ul>\n<li>or_patterns: implement :pat edition-specific behavior <a href=\"https://github.com/rust-lang/rust/issues/80100\">#80100</a><br>\n    - Needs follow-up performance fixing patch. <a href=\"https://github.com/rust-lang/rust/pull/80100#issuecomment-750893149\">https://github.com/rust-lang/rust/pull/80100#issuecomment-750893149</a></li>\n<li>stdarch is still a major contributor to libcore compile times.</li>\n</ul>",
        "id": 221298618,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609430609
    },
    {
        "content": "<h2>Nominated Issues</h2>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3AI-nominated+label%3AT-compiler\">T-compiler</a></p>\n<ul>\n<li>\"unstable fingerprints for optimized_mir\" <a href=\"https://github.com/rust-lang/rust/issues/80336\">#80336</a><ul>\n<li>incr-comp issue opened by <span class=\"user-mention\" data-user-id=\"352416\">@KalitaAlexey</span> </li>\n<li>detected by using the <code>-Z incremental-verify-ich</code> flag, causing an ICE on working code pulled from git repositories (tested on Substrate framework and rust-analyzer)</li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/80336#issuecomment-751311417\">Analysis</a> by <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span></li>\n<li>the keypoint being (underlined by <span class=\"user-mention\" data-user-id=\"255061\">@Léo Lanteri Thauvin</span> ) \"is it possible to weaponize this and make it an unsoundness issue?\"</li>\n<li>difficult to minimize because \"this is really difficult to observe in practice\"</li>\n<li><span class=\"user-mention\" data-user-id=\"217864\">@matthiaskrgr</span> reproduced this on 1.50 nightly, 1.48.0, 1.50.0-beta.1 and way back to 1.46 (no unaffected version found yet, as bisecting without an MCVE is harder)</li>\n<li>Prioritized as <code>P-high</code>, we don't have yet a smaller mcve, we are wondering the possible implications of this issue.</li>\n</ul>\n</li>\n</ul>",
        "id": 221298626,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609430628
    },
    {
        "content": "<p>maybe wg-incr-comp can try to spend some time poking at <a href=\"https://github.com/rust-lang/rust/issues/80336\">#80336</a> in the next week</p>",
        "id": 221298686,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609430667
    },
    {
        "content": "<p>I'm going to count that as \"discussion\"</p>",
        "id": 221298698,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609430679
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-12-31.20.2354818/near/221298587\">said</a>:</p>\n<blockquote>\n<p>People should check out the performance triage report on the agenda: <a href=\"https://hackmd.io/aV-WdvQnTp6GLiQXxuA5sA?both#Performance-logs\">https://hackmd.io/aV-WdvQnTp6GLiQXxuA5sA?both#Performance-logs</a></p>\n</blockquote>\n<p>note that there's the perf report for both weeks</p>",
        "id": 221298715,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1609430698
    },
    {
        "content": "<p>Okay all, that's our whole agenda! Thanks for joining everyone in <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span> !!! Happy NEW YEAR and lets all use our 20/20 vision on 2020!</p>",
        "id": 221298736,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609430713
    },
    {
        "content": "<p>(wait that didn't make any sense)</p>",
        "id": 221298750,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609430736
    },
    {
        "content": "<p>the nominated issue? :-)</p>",
        "id": 221298761,
        "sender_full_name": "apiraino",
        "timestamp": 1609430751
    },
    {
        "content": "<p>... didn't make any sense in hindsight? <span aria-label=\"sunglasses\" class=\"emoji emoji-1f60e\" role=\"img\" title=\"sunglasses\">:sunglasses:</span></p>",
        "id": 221298767,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1609430761
    },
    {
        "content": "<p>no my remark about 20/20 vision (didn't make any sense)</p>",
        "id": 221298796,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609430763
    },
    {
        "content": "<p>there you go Wesley</p>",
        "id": 221298811,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609430770
    },
    {
        "content": "<p>should have tried for something about \"objects in the rear view mirror are closer than they appear\"</p>",
        "id": 221298830,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609430803
    },
    {
        "content": "<p>oh no, now you've got <a href=\"https://www.youtube.com/watch?v=r7WVi-7me4I\">https://www.youtube.com/watch?v=r7WVi-7me4I</a> stuck in my head</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"r7WVi-7me4I\" href=\"https://www.youtube.com/watch?v=r7WVi-7me4I\"><img src=\"https://i.ytimg.com/vi/r7WVi-7me4I/default.jpg\"></a></div>",
        "id": 221298857,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609430837
    },
    {
        "content": "<p>yeah that's one of my favorite \"I can't believe they got this backwards\". Right up there with \"could care less.\"</p>",
        "id": 221298870,
        "sender_full_name": "pnkfelix",
        "timestamp": 1609430869
    },
    {
        "content": "<p>Onwards to the new year! See you all around then!</p>",
        "id": 221298931,
        "sender_full_name": "nagisa",
        "timestamp": 1609430934
    },
    {
        "content": "<p>next week's meeting agenda is up, pre filled <a href=\"https://hackmd.io/B6aLubrrREClEhok_2WAsA\">https://hackmd.io/B6aLubrrREClEhok_2WAsA</a></p>",
        "id": 221306950,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1609438257
    },
    {
        "content": "<p>we will have checkins from Polymorphization (which doesn't have an @ team) cc <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> and <span class=\"user-group-mention\" data-user-group-id=\"1175\">@WG-rfc-2229</span> cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> so you all have time to fill the checkins</p>",
        "id": 221306996,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1609438311
    }
]