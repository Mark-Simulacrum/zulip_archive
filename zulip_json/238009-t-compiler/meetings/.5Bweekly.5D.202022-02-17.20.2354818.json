[
    {
        "content": "<p>Hello <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span>; triage meeting will take place in about 2h<br>\n<em>WG-prioritization</em> has done pre-triage in <a class=\"stream\" data-stream-id=\"245100\" href=\"/#narrow/stream/245100-t-compiler.2Fwg-prioritization.2Falerts\">#t-compiler/wg-prioritization/alerts</a> and prepared the <a href=\"https://hackmd.io/MDQRCqHWSCG1HuHgHC847g?view\">meeting agenda</a></p>\n<p>Scheduled checkins:</p>\n<ul>\n<li><span class=\"user-group-mention silent\" data-user-group-id=\"3282\">wg-incr-comp</span> by <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>  <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> </li>\n<li><span class=\"user-group-mention silent\" data-user-group-id=\"1176\">WG-llvm</span> by <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span>  and <span class=\"user-mention\" data-user-id=\"133224\">@Nikita Popov</span></li>\n</ul>",
        "id": 272255866,
        "sender_full_name": "apiraino",
        "timestamp": 1645103218
    },
    {
        "content": "<ul>\n<li>There is an ongoing upgrade to LLVM 14 which is going to land soon (<a href=\"https://github.com/rust-lang/rust/pull/93577\">https://github.com/rust-lang/rust/pull/93577</a>). Don't think there is anything especially noteworthy about this release as far as rust is concerned, but expect the usual mix of things getting fixed and other things getting broken :)</li>\n<li>We now apply <code>noundef</code> to some function parameters and returns (<a href=\"https://github.com/rust-lang/rust/pull/93670\">https://github.com/rust-lang/rust/pull/93670</a>). A resolution of <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/71\">https://github.com/rust-lang/unsafe-code-guidelines/issues/71</a> towards \"uninitialized outside MaybeUninitialized is always UB, no ifs or buts\" would be appreciated.</li>\n<li><span class=\"user-mention\" data-user-id=\"316805\">@durin42</span> has been working on upstream patches to encode allocator information via attributes. This will eliminate the main \"functional\" patch to LLVM we carry (the rest is mostly build fixes and backports).</li>\n<li>I've been focused on <a href=\"https://llvm.org/docs/OpaquePointers.html\">opaque pointers</a> work upstream, which reached a milestone last week: We can now do end-to-end optimized compiles of most C/C++ code. Plan to test this with rust soonishly.</li>\n</ul>",
        "id": 272256416,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1645103515
    },
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span> ; time for our weekly triage meeting. Add a <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> to show you're here.</p>",
        "id": 272271899,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645110164
    },
    {
        "content": "<p>My home network has been really flaky, but I'm hoping my most recent more aggressive round of \"unplug and plug back in\" on various routers/hubs has fixed it.</p>",
        "id": 272272017,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645110212
    },
    {
        "content": "<p>(thats mostly a warning that if I stop talking unexpectedly ... my network might be <span aria-label=\"skull\" class=\"emoji emoji-1f480\" role=\"img\" title=\"skull\">:skull:</span> )</p>",
        "id": 272272074,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645110234
    },
    {
        "content": "<p>(like ... now?)</p>",
        "id": 272272303,
        "sender_full_name": "apiraino",
        "timestamp": 1645110321
    },
    {
        "content": "<p>anyway, a few minutes for </p>\n<h2>Announcements</h2>",
        "id": 272272310,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645110323
    },
    {
        "content": "<p>(no, <em>that</em> was me distracted by someone mentioning kiling off <code>everybody_loops</code> in a different topic)</p>",
        "id": 272272357,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645110344
    },
    {
        "content": "<p>((I ain't gonna veto))</p>",
        "id": 272272388,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645110356
    },
    {
        "content": "<ul>\n<li><span aria-label=\"loudspeaker\" class=\"emoji emoji-1f4e2\" role=\"img\" title=\"loudspeaker\">:loudspeaker:</span> Next Thursday, February 24th, release Rust stable 1.59 <span aria-label=\"loudspeaker\" class=\"emoji emoji-1f4e2\" role=\"img\" title=\"loudspeaker\">:loudspeaker:</span></li>\n</ul>",
        "id": 272272513,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645110387
    },
    {
        "content": "<ul>\n<li>Reminder: if you see a PR/issue that seems like there might be legal implications due to copyright/IP/etc, please let the Core team know (or at least message <span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> or <span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> so we can pass it along).</li>\n</ul>",
        "id": 272272527,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645110392
    },
    {
        "content": "<ul>\n<li>Tomorrow we have a steering meeting to review the Compiler Ambitions for 2022 document</li>\n</ul>",
        "id": 272272575,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645110410
    },
    {
        "content": "<p>/me just realized that he never made an inside rust blog post for this steering cycle after last weeks' planning meeting. D'oh.</p>",
        "id": 272272676,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645110452
    },
    {
        "content": "<p>argh there's not even a calendar entry. Sorry about that y'all. I'll fix now.</p>",
        "id": 272272807,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645110489
    },
    {
        "content": "<p>okay, event created in google calendar</p>",
        "id": 272272970,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645110561
    },
    {
        "content": "<p>(I guess I'll whip up a blog post later today, better almost-but-not-quite-too-late than never, right?</p>",
        "id": 272273028,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645110590
    },
    {
        "content": "<h2>MCPs/FCPs</h2>\n<ul>\n<li>New MCPs (take a look, see if you like them!)<ul>\n<li>No new proposals this time.</li>\n</ul>\n</li>\n</ul>",
        "id": 272273119,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645110613
    },
    {
        "content": "<ul>\n<li>Old MCPs (not seconded, take a look)<ul>\n<li>\"Accept <code>pc</code> in place of <code>unknown</code> and <code>unknown</code> in place of <code>pc</code> for <code>x86_64</code> and <code>i?86</code> targets\" <a href=\"https://github.com/rust-lang/compiler-team/issues/441\">compiler-team#441</a> (last review activity: 7 months ago)</li>\n<li>\"Make <code>-Z binary-dep-depinfo</code> the default behavior\" <a href=\"https://github.com/rust-lang/compiler-team/issues/464\">compiler-team#464</a> (last review activity: 4 months ago)</li>\n<li>\"Tier 3 target proposal: riscv64gc-linux-android (Android target for <code>riscv64gc</code>)\" <a href=\"https://github.com/rust-lang/compiler-team/issues/472\">compiler-team#472</a> (last review activity: 2 months ago)</li>\n<li>\"<code>-Dwarnings</code> to cover all warnings\" <a href=\"https://github.com/rust-lang/compiler-team/issues/473\">compiler-team#473</a> (last review activity: 2 months ago)</li>\n<li>\"Build-time execution sandboxing\" <a href=\"https://github.com/rust-lang/compiler-team/issues/475\">compiler-team#475</a> (last review activity: about 52 days ago)</li>\n<li>\"Dealing with type/const ambiguities\" <a href=\"https://github.com/rust-lang/compiler-team/issues/480\">compiler-team#480</a> (last review activity: about 27 days ago)</li>\n</ul>\n</li>\n</ul>",
        "id": 272273145,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645110624
    },
    {
        "content": "<ul>\n<li>Pending FCP requests (check your boxes!)<ul>\n<li>No pending FCP requests this time.</li>\n</ul>\n</li>\n</ul>",
        "id": 272273176,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645110634
    },
    {
        "content": "<ul>\n<li>Things in FCP (make sure you're good with it)<ul>\n<li>\"Simplify rustc_codegen_llvm::debuginfo::metadata\" <a href=\"https://github.com/rust-lang/compiler-team/issues/482\">compiler-team#482</a> </li>\n<li>\"Round-tripping hygienic ident serialization\" <a href=\"https://github.com/rust-lang/compiler-team/issues/485\">compiler-team#485</a> </li>\n<li>\"Stabilize <code>#[cfg(panic = \"...\")]</code>\" <a href=\"https://github.com/rust-lang/rust/pull/93658\">rust#93658</a> </li>\n<li>\"Remove the everybody loops pass\" <a href=\"https://github.com/rust-lang/rust/pull/93913\">rust#93913</a></li>\n</ul>\n</li>\n</ul>",
        "id": 272273210,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645110647
    },
    {
        "content": "<ul>\n<li>Accepted MCPs<ul>\n<li>\"Overhaul interning\" <a href=\"https://github.com/rust-lang/compiler-team/issues/481\">compiler-team#481</a></li>\n</ul>\n</li>\n</ul>",
        "id": 272273238,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645110660
    },
    {
        "content": "<ul>\n<li>Finalized FCPs (disposition merge)<ul>\n<li>No new finished FCP (disposition merge) this time.</li>\n</ul>\n</li>\n</ul>",
        "id": 272273259,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645110666
    },
    {
        "content": "<h3>WG checkins</h3>",
        "id": 272273415,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645110725
    },
    {
        "content": "<ul>\n<li><span class=\"user-group-mention silent\" data-user-group-id=\"3282\">wg-incr-comp</span> by <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> (<a href=\"https://hackmd.io/c-I7gxx4SK2eudQgwruuJw#WG-checkins\">previous checkin</a>, goes back to Sept. 2021, I think no more recent updates were filed)<blockquote>\n<p>Nothing to report from the Working Group. Wesley and Felix are looking into moving ownership of this working group to the people who are actively owning it, so to speak.</p>\n</blockquote>\n</li>\n</ul>",
        "id": 272273426,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645110730
    },
    {
        "content": "<ul>\n<li><span class=\"user-group-mention silent\" data-user-group-id=\"1176\">WG-llvm</span> by <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> and <span class=\"user-mention\" data-user-id=\"133224\">@Nikita Popov</span> (<a href=\"https://hackmd.io/R_-u5cmyQtmcPSL8sNtbuw?view#WG-checkins\">previous checkin</a>)<blockquote>\n<ul>\n<li>There is an ongoing upgrade to LLVM 14 which is going to land soon (<a href=\"https://github.com/rust-lang/rust/pull/93577\">https://github.com/rust-lang/rust/pull/93577</a>). Don't think there is anything especially noteworthy about this release as far as rust is concerned, but expect the usual mix of things getting fixed and other things getting broken :)</li>\n<li>We now apply <code>noundef</code> to some function parameters and returns (<a href=\"https://github.com/rust-lang/rust/pull/93670\">https://github.com/rust-lang/rust/pull/93670</a>). A resolution of <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/71\">https://github.com/rust-lang/unsafe-code-guidelines/issues/71</a> towards \"uninitialized outside MaybeUninitialized is always UB, no ifs or buts\" would be appreciated.</li>\n<li><span class=\"user-mention silent\" data-user-id=\"316805\">durin42</span> has been working on upstream patches to encode allocator information via attributes. This will eliminate the main \"functional\" patch to LLVM we carry (the rest is mostly build fixes and backports).</li>\n<li>I've been focused on <a href=\"https://llvm.org/docs/OpaquePointers.html\">opaque pointers</a> work upstream, which reached a milestone last week: We can now do end-to-end optimized compiles of most C/C++ code. Plan to test this with rust soonishly.</li>\n</ul>\n</blockquote>\n</li>\n</ul>",
        "id": 272273464,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645110744
    },
    {
        "content": "<h2>Backport nominations</h2>",
        "id": 272273621,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645110814
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Abeta-nominated+-label%3Abeta-accepted+label%3AT-compiler\">T-compiler beta</a> / <a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Astable-nominated+-label%3Astable-accepted+label%3AT-compiler\">T-compiler stable</a></p>\n<ul>\n<li>No backport nominations for <code>T-compiler</code> this time.</li>\n</ul>",
        "id": 272273631,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645110820
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Abeta-nominated+-label%3Abeta-accepted+label%3AT-rustdoc\">T-rustdoc beta</a> / <a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Astable-nominated+-label%3Astable-accepted+label%3AT-rustdoc\">T-rustdoc stable</a></p>\n<ul>\n<li>No backport nominations for <code>T-rustdoc</code> this time.</li>\n</ul>",
        "id": 272273647,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645110828
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pulls?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AS-waiting-on-team+label%3AT-compiler\">T-compiler</a></p>\n<ul>\n<li>No PRs waiting on <code>t-compiler</code></li>\n</ul>",
        "id": 272273663,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645110834
    },
    {
        "content": "<h2>Oldest PRs waiting for review</h2>\n<p><a href=\"https://github.com/rust-lang/rust/pulls?q=is%3Apr+is%3Aopen+sort%3Aupdated-asc+label%3AS-waiting-on-review+draft%3Afalse+label%3AT-compiler\">T-compiler</a></p>",
        "id": 272273733,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645110853
    },
    {
        "content": "<ul>\n<li>\"Introduce linter for diagnostic messages\" <a href=\"https://github.com/rust-lang/rust/pull/89455\">rust#89455</a> (last review activity: 4 months ago)<ul>\n<li>@<strong>estebank</strong> would contact author (see <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-12-09.20.2354818/near/264317963\">prev. discussion</a>) for an MCP proposal</li>\n</ul>\n</li>\n</ul>",
        "id": 272273755,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645110863
    },
    {
        "content": "<p>(estebank is out this week, but I expect them to follow up next week.)</p>",
        "id": 272273784,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645110884
    },
    {
        "content": "<ul>\n<li>\"Specialize infinite-type \"insert some indirection\" suggestion for Option\" <a href=\"https://github.com/rust-lang/rust/pull/91416\">rust#91416</a> (last review activity: 2 months ago)<ul>\n<li>seems to be waiting on @<strong>estebank</strong></li>\n<li>perhaps also an update due to upstream changes making this unmergeable</li>\n</ul>\n</li>\n</ul>",
        "id": 272273815,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645110896
    },
    {
        "content": "<p>ooh, facny</p>",
        "id": 272273885,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645110925
    },
    {
        "content": "<p>(its something to suggest <code>Option&lt;Box&lt;_&gt;&gt;</code> instead of <code>Box&lt;Option&lt;_&gt;&gt;</code></p>",
        "id": 272273944,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645110947
    },
    {
        "content": "<p>I wonder if that could be generalized to work for any type with a niche</p>",
        "id": 272273974,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645110957
    },
    {
        "content": "<p>anyway the most interesting question here</p>",
        "id": 272274122,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645111011
    },
    {
        "content": "<p>is whether to continue to leave it marked waiting-on-review , or to switch to to say that's its waiting on the author to rebase it</p>",
        "id": 272274200,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645111045
    },
    {
        "content": "<p>I suspect most authors would prefer the reviewer feedback before they invest effort in a rebase</p>",
        "id": 272274248,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645111066
    },
    {
        "content": "<p>but then again, esteban said \"r=me after that\" for the things that they asked for</p>",
        "id": 272274345,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645111090
    },
    {
        "content": "<p>yes this is my PR, was waiting a couple of months for review already before it got stale</p>",
        "id": 272274353,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1645111093
    },
    {
        "content": "<p>oops! (edit: zulip is hard to use on mobile)</p>",
        "id": 272274479,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1645111150
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"426609\">@Michael Goulet (compiler-errors)</span> are there any outstanding items from what esteban listed when they reviewed on Dec 2?</p>",
        "id": 272274486,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645111154
    },
    {
        "content": "<p>i reworked it a bit, so it probably needs a new review</p>",
        "id": 272274520,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1645111171
    },
    {
        "content": "<p>okay, I see that you did say that you reformulated it</p>",
        "id": 272274563,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645111195
    },
    {
        "content": "<p>So lets leave it as waiting-on-review in that case.</p>",
        "id": 272274580,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645111202
    },
    {
        "content": "<ul>\n<li>\"Fold aarch64 feature +fp into +neon\" <a href=\"https://github.com/rust-lang/rust/pull/91608\">rust#91608</a> (last review activity: 2 months ago)<ul>\n<li><a href=\"https://github.com/rust-lang/rust/pull/91608#issuecomment-1038413097\">latest comment</a> from PR author seems to indicate some disagreement on the motivation (cc: <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> <span class=\"user-mention\" data-user-id=\"382356\">@Adam Gemmell</span>)</li>\n<li>(maybe leave some more time to review and go over this again later)</li>\n</ul>\n</li>\n</ul>",
        "id": 272274643,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645111216
    },
    {
        "content": "<p>hmm</p>",
        "id": 272274714,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645111259
    },
    {
        "content": "<p>I still disagree with the motivation. We should just follow the platform spec for the features we expose and not overthink it.</p>",
        "id": 272274743,
        "sender_full_name": "Amanieu",
        "timestamp": 1645111273
    },
    {
        "content": "<p>this seems like something where we might need to get the PR author and the reviewer (or reviewers) together in a chat to talk this over?</p>",
        "id": 272274757,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645111281
    },
    {
        "content": "<p>the PR author sounds frustrated with how communication has been going</p>",
        "id": 272274788,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645111297
    },
    {
        "content": "<p>I don't know whether switching communication channels would help there</p>",
        "id": 272274809,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645111307
    },
    {
        "content": "<p>or if this needs to be lifted to a broader team discussion about our overall philosophy on these matters</p>",
        "id": 272274894,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645111334
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> am I correct in infering that the effect of this PR is to make +neon effectively imply that current effects of +fp ?</p>",
        "id": 272275033,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645111394
    },
    {
        "content": "<p>It's basically merging <code>fp</code> and <code>neon</code> into a single feature.</p>",
        "id": 272275084,
        "sender_full_name": "Amanieu",
        "timestamp": 1645111422
    },
    {
        "content": "<p>oh, looking at diff now</p>",
        "id": 272275177,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645111449
    },
    {
        "content": "<p>Okay I don't feel comfortable making an on-the-spot decision about this here</p>",
        "id": 272275244,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645111478
    },
    {
        "content": "<p>my gut is that I trust <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span></p>",
        "id": 272275259,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645111485
    },
    {
        "content": "<p>but I want to read the PR author's argument more carefully</p>",
        "id": 272275293,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645111496
    },
    {
        "content": "<p>I'm OK with a compromise solution where we force both features to be enabled/disabled together. But I don't want to merge the features since they are separate in the ISA spec.</p>",
        "id": 272275351,
        "sender_full_name": "Amanieu",
        "timestamp": 1645111529
    },
    {
        "content": "<p>that might be a good call</p>",
        "id": 272275373,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645111541
    },
    {
        "content": "<p>lets talk this through on the PR itself</p>",
        "id": 272275408,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645111552
    },
    {
        "content": "<p>because if the PR author is happy with that compromise, then it sounds like a reasonable way to go</p>",
        "id": 272275477,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645111569
    },
    {
        "content": "<p>next</p>",
        "id": 272275512,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645111584
    },
    {
        "content": "<ul>\n<li>\"Update to fix regression 90319 and correctly emit overflow errors when not inside an error reporting context\" <a href=\"https://github.com/rust-lang/rust/pull/91238\">rust#91238</a> (last review activity: 2 months ago)<ul>\n<li>seems to be waiting on @<strong>estebank</strong></li>\n</ul>\n</li>\n</ul>",
        "id": 272275513,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645111584
    },
    {
        "content": "<p>hmm</p>",
        "id": 272275540,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645111598
    },
    {
        "content": "<p>I'm worried estebank is overloaded</p>",
        "id": 272275555,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645111606
    },
    {
        "content": "<p>I'm going to take an action item to go through their PR list</p>",
        "id": 272275596,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645111627
    },
    {
        "content": "<ul>\n<li>\"Implementation of the <code>expect</code> attribute (RFC 2383)\" <a href=\"https://github.com/rust-lang/rust/pull/87835\">rust#87835</a> (last review activity: 2 months ago)<ul>\n<li>seems to be waiting on <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span></li>\n</ul>\n</li>\n</ul>",
        "id": 272275652,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645111669
    },
    {
        "content": "<p>I haven't had much time to do reviews in the last week or so.</p>",
        "id": 272275732,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1645111692
    },
    {
        "content": "<p>do you want to try to delegate this?</p>",
        "id": 272275749,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645111704
    },
    {
        "content": "<p>I'm hoping to dedicate a few hours next week to help push this along.</p>",
        "id": 272275750,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1645111705
    },
    {
        "content": "<p>okay</p>",
        "id": 272275762,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645111714
    },
    {
        "content": "<p>it certainly doesn't seem like it needs to be rushed</p>",
        "id": 272275774,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645111720
    },
    {
        "content": "<p>but then again, I can understand it being frustrating as a PR author</p>",
        "id": 272275796,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645111733
    },
    {
        "content": "<p>Well, the author has been patiently waiting so I'd like to keep moving this along. (Sorry <span class=\"user-mention\" data-user-id=\"369415\">@xFrednet</span>!)</p>",
        "id": 272275834,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1645111756
    },
    {
        "content": "<p>yep yep, it all makes sense. Okay</p>",
        "id": 272275851,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645111766
    },
    {
        "content": "<p>lets leave that assigned to <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> then</p>",
        "id": 272275886,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645111784
    },
    {
        "content": "<p>onward</p>",
        "id": 272275892,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645111787
    },
    {
        "content": "<h2>Issues of Note</h2>\n<h3>Short Summary</h3>\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3AT-compiler+label%3AP-critical\">2 T-compiler P-critical issues</a><ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3AT-compiler+label%3AP-critical+no%3Aassignee\">1 of those are unassigned</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3AT-compiler+label%3AP-high\">70 T-compiler P-high issues</a><ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3AT-compiler+label%3AP-high+no%3Aassignee\">47 of those are unassigned</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/rust-lang/rust/labels/regression-from-stable-to-beta\">1 P-critical, 0 P-high, 0 P-medium, 1 P-low regression-from-stable-to-beta</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/labels/regression-from-stable-to-nightly\">0 P-critical, 2 P-high, 1 P-medium, 0 P-low regression-from-stable-to-nightly</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/labels/regression-from-stable-to-stable\">0 P-critical, 45 P-high, 82 P-medium, 12 P-low regression-from-stable-to-stable</a></li>\n</ul>",
        "id": 272275894,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645111788
    },
    {
        "content": "<h3>P-critical</h3>\n<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AP-critical+label%3AT-compiler\">T-compiler</a></p>",
        "id": 272275915,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645111798
    },
    {
        "content": "<ul>\n<li>\"Const generic defaults ICE: No bound vars found\" <a href=\"https://github.com/rust-lang/rust/issues/93647\">rust#93647</a> <ul>\n<li>Fixed by PR <a href=\"https://github.com/rust-lang/rust/pull/93669\">rust#93669</a> authored by <span class=\"user-mention\" data-user-id=\"426609\">@Michael Goulet (compiler-errors)</span> </li>\n<li>seems under control</li>\n</ul>\n</li>\n</ul>",
        "id": 272275972,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645111807
    },
    {
        "content": "<ul>\n<li>\"optimized i686 fails primal-sieve tests\" <a href=\"https://github.com/rust-lang/rust/issues/94032\">rust#94032</a><ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues/94032#issuecomment-1040973713\">This comment</a> from <span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> suggests that disabling the new LLVM Pass Manager fixes the issue</li>\n<li><span class=\"user-mention\" data-user-id=\"133224\">@Nikita Popov</span> <a href=\"https://github.com/rust-lang/rust/issues/94032#issuecomment-1042853244\">adds that</a> it also happens with LLVM 14</li>\n</ul>\n</li>\n</ul>",
        "id": 272275991,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645111823
    },
    {
        "content": "<p>oh no, another bug exposed by the new LLVM Pass Manager? eeegk.</p>",
        "id": 272276025,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645111840
    },
    {
        "content": "<p>Should we disable NewPM again in beta?</p>",
        "id": 272276105,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1645111878
    },
    {
        "content": "<p>the comment thread says that the reason the new Pass manager makes a difference is that a <code>next</code> method gets inlined...?</p>",
        "id": 272276129,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645111889
    },
    {
        "content": "<p>ugh</p>",
        "id": 272276133,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645111891
    },
    {
        "content": "<p>If it's unresolved in LLVM 14 as well, I guess we're just delaying this a bit longer...</p>",
        "id": 272276160,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1645111900
    },
    {
        "content": "<p>oh wow, <code>primal</code> is a crate from huonw</p>",
        "id": 272276240,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645111924
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202022-02-17.20.2354818/near/272276160\">said</a>:</p>\n<blockquote>\n<p>If it's unresolved in LLVM 14 as well, I guess we're just delaying this a bit longer...</p>\n</blockquote>\n<p>so wait, what do you mean by this then?</p>",
        "id": 272276282,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645111952
    },
    {
        "content": "<p>is that an argument that we shouldn't disable NewPM again?</p>",
        "id": 272276300,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645111958
    },
    {
        "content": "<p>it would be good to file an LLVM bug upstream</p>",
        "id": 272276377,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645111993
    },
    {
        "content": "<p>I guess I'm just saying it looks like we either have to keep NewPM disabled for the foreseeable future or accept this bug.</p>",
        "id": 272276404,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1645112008
    },
    {
        "content": "<p>FWIW I'm pretty sure this bug isn't actually related to the NewPM, it just happens to be exposed.</p>",
        "id": 272276415,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1645112014
    },
    {
        "content": "<p>Neither of which seem like great options.</p>",
        "id": 272276416,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1645112014
    },
    {
        "content": "<p>I'm with <span class=\"user-mention\" data-user-id=\"133224\">@Nikita Popov</span> . My instinct is to not blame this directly on NewPM</p>",
        "id": 272276471,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645112039
    },
    {
        "content": "<p>the right thing would be to identify which optimization actually caused this breakage</p>",
        "id": 272276533,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645112053
    },
    {
        "content": "<p>and then consider disabling <em>that</em></p>",
        "id": 272276544,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645112059
    },
    {
        "content": "<p>the other thing I'll note: In the past, I've often waited until I had reduced something down to  standalone llvm bitcode  before filing a bug with LLVM upstream</p>",
        "id": 272276609,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645112095
    },
    {
        "content": "<p>I am now thinking that is an anti-pattern</p>",
        "id": 272276622,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645112102
    },
    {
        "content": "<p>Its a good thing to do, don't get me wrong</p>",
        "id": 272276669,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645112117
    },
    {
        "content": "<p>but I would no longer block filing bugs upstream on that</p>",
        "id": 272276682,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645112124
    },
    {
        "content": "<p>I'm curious what <span class=\"user-group-mention\" data-user-group-id=\"1176\">@WG-llvm</span> thinks of that claim?</p>",
        "id": 272276711,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645112141
    },
    {
        "content": "<p>anyway I'll be happy to follow through on that.</p>",
        "id": 272276822,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645112168
    },
    {
        "content": "<p>as for what to do with NewPM</p>",
        "id": 272276832,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645112172
    },
    {
        "content": "<p>...</p>",
        "id": 272276834,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645112173
    },
    {
        "content": "<p>sigh</p>",
        "id": 272276870,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645112191
    },
    {
        "content": "<p>(in similar fashion, I did not try to reduce before filling this Rust bug)</p>",
        "id": 272277077,
        "sender_full_name": "cuviper",
        "timestamp": 1645112253
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> It's very unlikely that non-reduced bugs will gain any traction upstream. For cases where it's an assertion failure maybe (because those are easy to reduce as long as there is a reproducer), but not for miscompiles.</p>",
        "id": 272277079,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1645112254
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133224\">@Nikita Popov</span> is there a place where you've been talking about this issue, e.g. a zulip topic?</p>",
        "id": 272277135,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645112269
    },
    {
        "content": "<p>Yeah, sorry, that all seems reasonable to me. I think my focus is just on the question of what to do with beta given we're releasing next week. Should we disable NewPM in an attempt to keep this bug (existing or otherwise) from triggering? Or should we leave it as-is with this as a known regression?</p>",
        "id": 272277145,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1645112276
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133224\">Nikita Popov</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202022-02-17.20.2354818/near/272277079\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> It's very unlikely that non-reduced bugs will gain any traction upstream. For cases where it's an assertion failure maybe (because those are easy to reduce as long as there is a reproducer), but not for miscompiles.</p>\n</blockquote>\n<p>do you think they will be ignored even if someone follows up later with a comment that includes a reduction to LLVM bitcode?</p>",
        "id": 272277272,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645112314
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202022-02-17.20.2354818/near/272277145\">said</a>:</p>\n<blockquote>\n<p>Yeah, sorry, that all seems reasonable to me. I think my focus is just on the question of what to do with beta given we're releasing next week. Should we disable NewPM in an attempt to keep this bug (existing or otherwise) from triggering? Or should we leave it as-is with this as a known regression?</p>\n</blockquote>\n<p>Yes, you are right, this is the most important question for us to resolve right now</p>",
        "id": 272277305,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645112331
    },
    {
        "content": "<p>My gut feeling is that we should leave New PM turned on</p>",
        "id": 272277580,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645112422
    },
    {
        "content": "<p>and force the discussion to shift to \"what specific optimization is misfiring on i686 here\"</p>",
        "id": 272277621,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645112436
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202022-02-17.20.2354818/near/272277272\">said</a>:</p>\n<blockquote>\n<p>do you think they will be ignored even if someone follows up later with a comment that includes a reduction to LLVM bitcode?</p>\n</blockquote>\n<p>If the reduction is reasonably minimal, that won't be ignored. Just saying that reporting the bug before that probably won't be terribly helpful.</p>",
        "id": 272277745,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1645112488
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133224\">@Nikita Popov</span> i'm not deeply famiilar with all the rules for LLVM's pass system: are passes meant to be able to be arbitrarily reordered, and thus bugs like this can always be blamed on individual passes themselves?</p>",
        "id": 272277919,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645112542
    },
    {
        "content": "<p>or are there sometimes constraints about pass ordering, and if so, is there a chance that New PM is breaking <em>that</em> ?</p>",
        "id": 272278014,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645112572
    },
    {
        "content": "<p>(I don't doubt your assertion about the inlining of <code>next()</code> being relevant. I'm just trying to seek disconfirmation of my gut feeling that we should not blame New PM here.)</p>",
        "id": 272278114,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645112606
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> Passes are supposed to be correct independent of ordering, pass ordering is just a matter of profitability. But of course things can get complicated, e.g. if one pass does not correctly update an analysis used by a different pass, and stuff like that.</p>",
        "id": 272278261,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1645112648
    },
    {
        "content": "<p>yes, of course. Yes.</p>",
        "id": 272278291,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645112660
    },
    {
        "content": "<p>can the bug be reproduced with the old PM and #[inline] on the next() method?</p>",
        "id": 272278297,
        "sender_full_name": "mw",
        "timestamp": 1645112661
    },
    {
        "content": "<p>good experiment to consider</p>",
        "id": 272278341,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645112677
    },
    {
        "content": "<p>But anyway, I don't really have any specific input on this particular issue, haven't looked into it in detail yet.</p>",
        "id": 272278348,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1645112680
    },
    {
        "content": "<p>I think we've got various paths to look into here</p>",
        "id": 272278359,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645112685
    },
    {
        "content": "<p>I'm personally going with \"we leave New PM enabled for beta\", but I would also like to dedicate some time to dive into the LLVM stuff here</p>",
        "id": 272278428,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645112714
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133224\">@Nikita Popov</span> I'll circle around with you in <a class=\"stream\" data-stream-id=\"187780\" href=\"/#narrow/stream/187780-t-compiler.2Fwg-llvm\">#t-compiler/wg-llvm</a> , okay?</p>",
        "id": 272278505,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645112738
    },
    {
        "content": "<p>I think the main problem here is that we're promoting to stable very soon right? (When is that?)</p>",
        "id": 272278539,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1645112752
    },
    {
        "content": "<p>master -&gt; beta tomorrow, [old]beta-&gt;stable Monday</p>",
        "id": 272278643,
        "sender_full_name": "simulacrum",
        "timestamp": 1645112787
    },
    {
        "content": "<p>(filed follow up topic in <a class=\"stream-topic\" data-stream-id=\"187780\" href=\"/#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/optimized.20i686.20fails.20primal-sieve.20tests.20.2394032\">#t-compiler/wg-llvm &gt; optimized i686 fails primal-sieve tests #94032</a>  )</p>",
        "id": 272278662,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645112801
    },
    {
        "content": "<p>okay, so we have a few days, but also very low risk tolerance in terms of what patches to [old]beta will be accepted.</p>",
        "id": 272278732,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645112835
    },
    {
        "content": "<p>I do encourage anyone who wants to help to go into that topic. There are <em>lots</em> of ways to help when it comes to an issue like this.</p>",
        "id": 272278958,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645112927
    },
    {
        "content": "<p>in some ways the main hurdle is just knowing how to target and run an i686 binary...</p>",
        "id": 272279004,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645112948
    },
    {
        "content": "<p>:)</p>",
        "id": 272279007,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645112949
    },
    {
        "content": "<p>next up</p>",
        "id": 272279064,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645112975
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AP-critical+label%3AT-rustdoc\">T-rustdoc</a></p>\n<ul>\n<li>No <code>P-critical</code> issues for <code>T-rustdoc</code> this time.</li>\n</ul>",
        "id": 272279089,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645112988
    },
    {
        "content": "<h3>P-high regressions</h3>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3Aregression-from-stable-to-beta+label%3AP-high+-label%3AT-infra+-label%3AT-release+-label%3AT-rustdoc+-label%3AT-core\">P-high beta regressions</a></p>\n<ul>\n<li>No <code>P-high</code> beta regressions this time.</li>\n</ul>",
        "id": 272279113,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645112996
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3Aregression-from-stable-to-nightly+label%3AP-high+no%3Aassignee+-label%3AT-infra+-label%3AT-libs+-label%3AT-libs-api+-label%3AT-release+-label%3AT-rustdoc+-label%3AT-core+\">Unassigned P-high nightly regressions</a></p>\n<ul>\n<li>\"Nightly compiler bug: \"lifetime mismatch\"\" <a href=\"https://github.com/rust-lang/rust/issues/94004\">rust#94004</a></li>\n</ul>",
        "id": 272279170,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645113007
    },
    {
        "content": "<p>re <a href=\"https://github.com/rust-lang/rust/issues/94004\">rust#94004</a>, its been identifed as likely injected by PR <a href=\"https://github.com/rust-lang/rust/issues/91403\">#91403</a>, and <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> rightly suggests that we revert PR <a href=\"https://github.com/rust-lang/rust/issues/91403\">#91403</a> based on this and other fallout</p>",
        "id": 272279278,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645113061
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> are you around? Can you take ownership of reverting PR <a href=\"https://github.com/rust-lang/rust/issues/91403\">#91403</a>? I especially want to make sure that the revert either happens before the nightly-&gt;beta promotion, or that we backport it to the new beta if it happens too late.</p>",
        "id": 272279362,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645113103
    },
    {
        "content": "<p>I'm going to assign <a href=\"https://github.com/rust-lang/rust/issues/94004\">#94004</a> to <span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> and myself</p>",
        "id": 272279392,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645113116
    },
    {
        "content": "<p>next</p>",
        "id": 272279538,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645113177
    },
    {
        "content": "<p>heh, I see a typo already in what I'm about to post. oh well</p>",
        "id": 272279571,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645113195
    },
    {
        "content": "<h2>Performance logs</h2>\n<blockquote>\n<p><a href=\"https://github.com/rust-lang/rustc-perf/blob/master/triage/2022-02-16.md\">triage logs for 2022-02-16</a></p>\n</blockquote>\n<p>Only one outright regression this week. We had some very cool work from cjgillot<br>\nto prevent queries from doing expensive clones, by just forcing them all to be<br>\n<code>Copy</code>! Also, nnethercote's overhaul of interning yielded massive improvements<br>\nacross many crates. Also, a slew of benchmarks were unexpectedly improved<br>\n[quite a lot][] by some changes to way we invoke the linker when building LLVM itself.</p>\n<p>[quite a lot]: <a href=\"https://perf.rust-lang.org/compare.html?start=8d163e66211c529465868a22686f46c5956342a4&amp;end=6655109f58b7d0f4cae7e04eab476e389c9b9a0f\">https://perf.rust-lang.org/compare.html?start=8d163e66211c529465868a22686f46c5956342a4&amp;end=6655109f58b7d0f4cae7e04eab476e389c9b9a0f</a></p>\n<p>Triage done by <strong>@pnkfelix</strong>.<br>\nRevision range: <a href=\"https://perf.rust-lang.org/?start=775e480722c7aba6ff4ff3ccec8c1f4639ae7889&amp;end=a240ccd81c74c105b6f5fe84c46f8d36edb7e306&amp;absolute=false&amp;stat=instructions%3Au\">775e480722c7aba6ff4ff3ccec8c1f4639ae7889..a240ccd81c74c105b6f5fe84c46f8d36edb7e306</a></p>\n<p>2 Regressions, 2 Improvements, 4 Mixed; 0 of them in rollups<br>\n47 comparisons made in total<br>\n30 Untriaged Pull Requests</p>",
        "id": 272279596,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645113204
    },
    {
        "content": "<h4>Regressions</h4>\n<p>Inherit lifetimes for async fn instead of duplicating them. <a href=\"https://github.com/rust-lang/rust/issues/91403\">#91403</a></p>\n<p>- Average relevant regression: 1.7%<br>\n  - Largest regression in <a href=\"https://perf.rust-lang.org/compare.html?start=5d8767cb229b097fedb1dd4bd9420d463c37774f&amp;end=3cfa4def7c87d571bd46d92fed608edf8fad236e&amp;stat=instructions:u\">instruction counts</a>: 2.0% on <code>full</code> builds of <code>issue-88862 check</code><br>\n  - This regression was predicted by a rust-timer build when PR was first proposed, ...<br>\n  - ... but there was no follow-up on those results at that time; left comment on PR.</p>\n<p>Apply noundef attribute to &amp;T, &amp;mut T, Box&lt;T&gt;, bool <a href=\"https://github.com/rust-lang/rust/issues/93670\">#93670</a></p>\n<p>- Average relevant regression: 0.7%<br>\n  - Largest regression in <a href=\"https://perf.rust-lang.org/compare.html?start=3cfa4def7c87d571bd46d92fed608edf8fad236e&amp;end=5c30d6568383916ce97cdf20ceb61a8b9e5bb5a8&amp;stat=instructions:u\">instruction counts</a>: 1.1% on <code>full</code> builds of <code>regression-31157 debug</code><br>\n  - PR author <a href=\"https://github.com/rust-lang/rust/pull/93670#issuecomment-1038347581\">says</a> that Cachegrind indicates this is due to overhead of inserting attribute itself.<br>\n  - PR author also says there is related work in LLVM 14 that may help ease the performance impact here, so stay tuned for when that lands in PR <a href=\"https://github.com/rust-lang/rust/pull/93577\">#93577</a></p>",
        "id": 272279640,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645113220
    },
    {
        "content": "<h4>Improvements</h4>\n<ul>\n<li>Ensure that queries only return Copy types. <a href=\"https://github.com/rust-lang/rust/issues/93511\">#93511</a></li>\n<li>bootstrap: tidy up flag handling for llvm build <a href=\"https://github.com/rust-lang/rust/issues/93918\">#93918</a></li>\n<li>Inline a few trivial conversion functions <a href=\"https://github.com/rust-lang/rust/issues/94021\">#94021</a></li>\n</ul>",
        "id": 272279656,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645113228
    },
    {
        "content": "<h4>Mixed</h4>\n<p>Revert lazy TAIT PR <a href=\"https://github.com/rust-lang/rust/issues/93893\">#93893</a></p>\n<ul>\n<li>Average relevant regression: 1.0%</li>\n<li>Average relevant improvement: -1.2%</li>\n<li>Largest improvement in <a href=\"https://perf.rust-lang.org/compare.html?start=78450d2d602b06d9b94349aaf8cece1a4acaf3a8&amp;end=6499c5e7fc173a3f55b7a3bd1e6a50e9edef782d&amp;stat=instructions:u\">instruction counts</a>: -1.8% on <code>full</code> builds of <code>deeply-nested-async check</code></li>\n<li>Largest regression in <a href=\"https://perf.rust-lang.org/compare.html?start=78450d2d602b06d9b94349aaf8cece1a4acaf3a8&amp;end=6499c5e7fc173a3f55b7a3bd1e6a50e9edef782d&amp;stat=instructions:u\">instruction counts</a>: 1.6% on <code>full</code> builds of <code>wg-grammar check</code></li>\n<li>Left comment: we had to revert the TAIT PR, the fallout from it was too high. Marked as triaged.</li>\n</ul>\n<p>Implement <code>tainted_by_errors</code> in MIR borrowck, use it to skip CTFE <a href=\"https://github.com/rust-lang/rust/issues/93691\">#93691</a></p>\n<ul>\n<li>Average relevant regression: 1.7%</li>\n<li>Average relevant improvement: -0.4%</li>\n<li>Largest improvement in <a href=\"https://perf.rust-lang.org/compare.html?start=fc323035ac49b8d834fc2a0f580af8fd45e90b30&amp;end=9cdefd763b910ffd1d42233a8c752ab5fd84ca4d&amp;stat=instructions:u\">instruction counts</a>: -0.6% on <code>incr-unchanged</code> builds of <code>keccak check</code></li>\n<li>Largest regression in <a href=\"https://perf.rust-lang.org/compare.html?start=fc323035ac49b8d834fc2a0f580af8fd45e90b30&amp;end=9cdefd763b910ffd1d42233a8c752ab5fd84ca4d&amp;stat=instructions:u\">instruction counts</a>: 2.4% on <code>incr-patched: u8 3072</code> builds of <code>issue-46449 debug</code></li>\n<li>There were three experiments done for this PR, with distinct commits: <a href=\"https://github.com/rust-lang/rust/pull/93691#issuecomment-1031790883\">first run</a>, <a href=\"https://github.com/rust-lang/rust/pull/93691#issuecomment-1032982905\">second run</a>, <a href=\"https://github.com/rust-lang/rust/pull/93691#issuecomment-1033577005\">third run</a>.</li>\n<li>The second experiment is what landed; the first experiment had smaller max and average values in its summary, but it regressed far more crates overall, while the second experiment regressed only a few crates, each by slightly more than the first experiment.</li>\n<li>In any case, this was expected fallout from this PR.</li>\n</ul>\n<p>make <code>find_similar_impl_candidates</code> even fuzzier <a href=\"https://github.com/rust-lang/rust/issues/93298\">#93298</a></p>\n<ul>\n<li>Average relevant regression: 0.7%</li>\n<li>Average relevant improvement: -0.3%</li>\n<li>Largest improvement in <a href=\"https://perf.rust-lang.org/compare.html?start=b321742c6c27494897a88cd5ac17ac20aa3469a1&amp;end=52dd59ed2154f4158ae37e6994b678a6249a7bb0&amp;stat=instructions:u\">instruction counts</a>: -0.3% on <code>full</code> builds of <code>inflate check</code></li>\n<li>Largest regression in <a href=\"https://perf.rust-lang.org/compare.html?start=b321742c6c27494897a88cd5ac17ac20aa3469a1&amp;end=52dd59ed2154f4158ae37e6994b678a6249a7bb0&amp;stat=instructions:u\">instruction counts</a>: 0.8% on <code>full</code> builds of <code>keccak check</code></li>\n<li>Not clear why this had a performance impact at all, as it should have only affected error reporting.</li>\n</ul>\n<p>Overhaul interning. <a href=\"https://github.com/rust-lang/rust/issues/93148\">#93148</a></p>\n<ul>\n<li>Average relevant regression: 1.0%</li>\n<li>Average relevant improvement: -1.1%</li>\n<li>Largest improvement in <a href=\"https://perf.rust-lang.org/compare.html?start=6421a499a50adbaa7b5d0234bdd4817d970f0933&amp;end=55697574915ca58c3fcd7b1c854c1c93e002dc85&amp;stat=instructions:u\">instruction counts</a>: -4.5% on <code>full</code> builds of <code>projection-caching check</code></li>\n<li>Largest regression in <a href=\"https://perf.rust-lang.org/compare.html?start=6421a499a50adbaa7b5d0234bdd4817d970f0933&amp;end=55697574915ca58c3fcd7b1c854c1c93e002dc85&amp;stat=instructions:u\">instruction counts</a>: 1.8% on <code>full</code> builds of <code>match-stress-enum check</code></li>\n<li>This was a massive improvement, full stop.</li>\n</ul>",
        "id": 272279729,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645113244
    },
    {
        "content": "<h4>Nags requiring follow up</h4>\n<ul>\n<li>None</li>\n</ul>",
        "id": 272279772,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645113262
    },
    {
        "content": "<h2>Nominated Issues</h2>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3AI-compiler-nominated+label%3AT-compiler\">T-compiler</a></p>",
        "id": 272279788,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645113269
    },
    {
        "content": "<ul>\n<li>\"Stabilize native library modifier syntax and the <code>whole-archive</code> modifier specifically\" <a href=\"https://github.com/rust-lang/rust/pull/93901\">rust#93901</a><ul>\n<li>opened and nominated by <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> </li>\n<li>Stabilization report for RFC 2951 <a href=\"https://github.com/rust-lang/rust/pull/93901#issuecomment-1041325522\">at this comment</a></li>\n</ul>\n</li>\n</ul>",
        "id": 272279802,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645113277
    },
    {
        "content": "<p>lets try to chat about this quickly</p>",
        "id": 272279833,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645113295
    },
    {
        "content": "<p>I think it's great to see this stabilized :)</p>",
        "id": 272280240,
        "sender_full_name": "mw",
        "timestamp": 1645113454
    },
    {
        "content": "<p>so, I'm skimming, reloading context. this all sounds great.</p>",
        "id": 272280286,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645113470
    },
    {
        "content": "<p>what do we do about the Questions requiring attention?</p>",
        "id": 272280311,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645113478
    },
    {
        "content": "<p>I'm definitely thinking I need to follow up on how this might tie into my PR <a href=\"https://github.com/rust-lang/rust/issues/88101\">#88101</a></p>",
        "id": 272280696,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645113608
    },
    {
        "content": "<p>But in any case</p>",
        "id": 272280763,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645113628
    },
    {
        "content": "<p>Should any of these questions block <em>this</em> stabilization, that's being proposed here?</p>",
        "id": 272280806,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645113641
    },
    {
        "content": "<p>I don't think we can determine that in this meeting, since its already over</p>",
        "id": 272280872,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645113666
    },
    {
        "content": "<p>but, everyone, I think we should make a plan to be done with this soon-ish</p>",
        "id": 272280921,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645113684
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202022-02-17.20.2354818/near/272280806\">said</a>:</p>\n<blockquote>\n<p>Should any of these questions block <em>this</em> stabilization, that's being proposed here?</p>\n</blockquote>\n<p>Does not sound like it to me</p>",
        "id": 272280976,
        "sender_full_name": "mw",
        "timestamp": 1645113709
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202022-02-17.20.2354818/near/272279278\">said</a>:</p>\n<blockquote>\n<p>re <a href=\"https://github.com/rust-lang/rust/issues/94004\">rust#94004</a>, its been identifed as likely injected by PR <a href=\"https://github.com/rust-lang/rust/issues/91403\">#91403</a>, and <span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> rightly suggests that we revert PR <a href=\"https://github.com/rust-lang/rust/issues/91403\">#91403</a> based on this and other fallout</p>\n</blockquote>\n<p>I opened <a href=\"https://github.com/rust-lang/rust/pull/94088\">https://github.com/rust-lang/rust/pull/94088</a> to revert that PR</p>",
        "id": 272281048,
        "sender_full_name": "oli",
        "timestamp": 1645113726
    },
    {
        "content": "<p>I guess my main question is whether an <code>@rfcbot fcp merge</code> is likely to be successful</p>",
        "id": 272281072,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645113732
    },
    {
        "content": "<p>or if we'll end up needing a deeper discussion</p>",
        "id": 272281100,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645113741
    },
    {
        "content": "<p>I'm inclined to just go for an <code>@rfcbot fcp merge</code> right now. This looks like great work.</p>",
        "id": 272281167,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645113766
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202022-02-17.20.2354818/near/272280806\">said</a>:</p>\n<blockquote>\n<p>Should any of these questions block <em>this</em> stabilization, that's being proposed here?</p>\n</blockquote>\n<p>Questions 1 &amp; 3 certainly seem like they can be deferred, especially since the PR avoids stabilizing any behavior for those.</p>",
        "id": 272281263,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1645113809
    },
    {
        "content": "<p>I went ahead and took the plunge. :)</p>",
        "id": 272281446,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645113881
    },
    {
        "content": "<p>I want to think a bit more about the ramifications of </p>\n<blockquote>\n<p>However, until that fix is implemented, rustc can use the blunt solution of using whole-archive by default when linking dylibs on some targets (the default_to_whole_archive changes in compiler\\rustc_codegen_ssa\\src\\back\\link.rs).<br>\nThis solution is not used on all targets though, on Windows, for example, exported symbols are counted as used, so whole-archive is not used by default there (the exported_symbol_means_used_symbol changes in compiler\\rustc_codegen_ssa\\src\\back\\linker.rs).</p>\n</blockquote>\n<p>in question 2. But that doesn't need to block an <code>rfcbot fcp merge</code></p>",
        "id": 272281458,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1645113884
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rfcs/issues?q=is%3Aopen+label%3AI-compiler-nominated+label%3AT-compiler\">RFC</a></p>\n<ul>\n<li>No nominated RFCs for <code>T-compiler</code> this time.</li>\n</ul>",
        "id": 272281485,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645113901
    },
    {
        "content": "<p>Thanks to everyone in <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span> for attending!</p>",
        "id": 272281505,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645113909
    },
    {
        "content": "<p>my network survived the meeting apparently</p>",
        "id": 272281517,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645113916
    },
    {
        "content": "<p>See you all tomrorow at the steering meeting re the 2022 Ambitions!</p>",
        "id": 272281542,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645113930
    },
    {
        "content": "<p>Draft for next weeks' agenda available at:<br>\n<a href=\"https://hackmd.io/BPMSYX1CRfeNLSHir93R8Q\">https://hackmd.io/BPMSYX1CRfeNLSHir93R8Q</a></p>\n<p>Scheduled checkins from:</p>\n<ul>\n<li><span class=\"user-group-mention silent\" data-user-group-id=\"1162\">WG-mir-opt</span>  (<span class=\"user-mention\" data-user-id=\"124288\">@oli</span>) </li>\n<li><span class=\"user-group-mention silent\" data-user-group-id=\"5288\">WG-polymorphization</span>  (<span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> )</li>\n</ul>",
        "id": 272282440,
        "sender_full_name": "apiraino",
        "timestamp": 1645114321
    }
]