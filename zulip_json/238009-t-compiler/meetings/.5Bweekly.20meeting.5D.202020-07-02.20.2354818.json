[
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span>; the triage meeting will be starting in 16 hours 47 minutes</p>",
        "id": 202624775,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1593638009
    },
    {
        "content": "<p>The <span class=\"user-group-mention\" data-user-group-id=\"2403\">@WG-prioritization</span> have done pre-triage in #<strong>t-compiler/wg-prioritization-alerts</strong></p>",
        "id": 202624798,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1593638027
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"2403\">@WG-prioritization</span> have prepared the <a href=\"https://hackmd.io/zg0MC_eEQkqvsXO0uQnXpA?view\">meeting agenda</a>, still polishing some details</p>",
        "id": 202624945,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1593638066
    },
    {
        "content": "<p>We will have one checkin this time from <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span></p>",
        "id": 202625029,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1593638115
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> || <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> do you have something you want to share about <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span>?</p>",
        "id": 202625066,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1593638154
    },
    {
        "content": "<p>Sure :)</p>",
        "id": 202625150,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593638190
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-07-02.20.2354818/near/202625150\">said</a>:</p>\n<blockquote>\n<p>Sure :)</p>\n</blockquote>\n<p>feel free to fill it directly in <a href=\"https://hackmd.io/zg0MC_eEQkqvsXO0uQnXpA?both#WG-checkins\">https://hackmd.io/zg0MC_eEQkqvsXO0uQnXpA?both#WG-checkins</a></p>",
        "id": 202625236,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1593638249
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> for that I'm going to need to add your HackMD username in our HackMD Rust compiler team to give you write access</p>",
        "id": 202625354,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1593638304
    },
    {
        "content": "<p><code>@oHHHULaRQWucqVT5tvMj4g</code>? I think?</p>",
        "id": 202625425,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593638360
    },
    {
        "content": "<p>and btw, everyone that wants to have access to our HackMD Rust compiler team space feel free to send me a PM with your Hackmd username</p>",
        "id": 202625446,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1593638372
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-07-02.20.2354818/near/202625425\">said</a>:</p>\n<blockquote>\n<p><code>@oHHHULaRQWucqVT5tvMj4g</code>? I think?</p>\n</blockquote>\n<p>doesn't seem to be that one</p>",
        "id": 202625553,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1593638419
    },
    {
        "content": "<p>I think I need just the name you see above that id</p>",
        "id": 202625680,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1593638503
    },
    {
        "content": "<p>Try <code>@jackh726</code></p>",
        "id": 202625753,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593638533
    },
    {
        "content": "<p>(I didn't realize you can set it. So, maybe that was it)</p>",
        "id": 202625772,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593638548
    },
    {
        "content": "<p>added that username, check if you can now :)</p>",
        "id": 202625815,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1593638574
    },
    {
        "content": "<p>Yes :)</p>",
        "id": 202625941,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593638651
    },
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span>; the triage meeting will be starting in 25 minutes</p>",
        "id": 202688696,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1593696949
    },
    {
        "content": "<p><a href=\"https://hackmd.io/zg0MC_eEQkqvsXO0uQnXpA?view\">Check out the meeting agenda</a></p>",
        "id": 202688805,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1593696988
    },
    {
        "content": "<p>hi <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span> , sorry I'm late</p>",
        "id": 202692674,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593698759
    },
    {
        "content": "<p>we will start off with 5 minutes for ...</p>\n<h2>Announcements</h2>",
        "id": 202692758,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593698785
    },
    {
        "content": "<ul>\n<li>We have a planning scheduled for tomorrow (friday 3rd), but <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/2020-07-03.20Planning.20meeting\">tomorrow is a US holiday and <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> was asking if we are having this meeting or we should skip it</a></li>\n</ul>",
        "id": 202692796,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593698810
    },
    {
        "content": "<p>lets resolve this now</p>",
        "id": 202692825,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593698822
    },
    {
        "content": "<p>I think it won't be terrible if we skip this cycle entirely</p>",
        "id": 202692885,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593698852
    },
    {
        "content": "<p>skipping seems good to me</p>",
        "id": 202692897,
        "sender_full_name": "simulacrum",
        "timestamp": 1593698859
    },
    {
        "content": "<p>I'm all about trying to relax a bit this summer</p>",
        "id": 202692912,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593698868
    },
    {
        "content": "<p>any summer, really, but especially this one</p>",
        "id": 202692937,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593698881
    },
    {
        "content": "<p>okay lets skip this cycle. If anyone has strong objections, feel free to bring them up.</p>",
        "id": 202693002,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593698897
    },
    {
        "content": "<ul>\n<li>New MCPs (take a look, see if you like them!)<br>\n    - \"Change <code>ty::Const</code> to an integer tree representation\" <a href=\"https://github.com/rust-lang/compiler-team/issues/323\">compiler-team#323</a><br>\n    - \"Infer hidden types without replacing with an inference variable\" <a href=\"https://github.com/rust-lang/compiler-team/issues/325\">compiler-team#325</a></li>\n</ul>",
        "id": 202693031,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593698912
    },
    {
        "content": "<p>Maybe we can use the time to clear out the old meetings that need minutes :P</p>",
        "id": 202693072,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593698937
    },
    {
        "content": "<ul>\n<li>Old MCPs (not seconded, take a look)<br>\n    - \"Integration of the Cranelift backend with rustc\" <a href=\"https://github.com/rust-lang/compiler-team/issues/270\">compiler-team#270</a><br>\n    - \"Decentralize queries\" <a href=\"https://github.com/rust-lang/compiler-team/issues/277\">compiler-team#277</a><br>\n    - \"--extern-location to specify where an --extern dependency is defined\" <a href=\"https://github.com/rust-lang/compiler-team/issues/303\">compiler-team#303</a><br>\n    - \"Move Rust provided objects, libraries and binaries meant for self-contained linkage to separate directory\" <a href=\"https://github.com/rust-lang/compiler-team/issues/310\">compiler-team#310</a><br>\n    - \"Add future-incompat entries to json diagnostic output\" <a href=\"https://github.com/rust-lang/compiler-team/issues/315\">compiler-team#315</a><br>\n    - \"MCP: Reorganize the rust-lang/rust repo directory structure\" <a href=\"https://github.com/rust-lang/compiler-team/issues/316\">compiler-team#316</a></li>\n</ul>",
        "id": 202693090,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593698942
    },
    {
        "content": "<p>Regarding <a href=\"https://github.com/rust-lang/compiler-team/issues/315\">compiler-team#315</a>: <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> was musing that the <code>cargo report-future-incompat</code> feature might warrant a project group</p>",
        "id": 202693182,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593698986
    },
    {
        "content": "<p>So if you're a contributor interested in working on that, ping me and we'll see if we can put something together.</p>",
        "id": 202693262,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593699011
    },
    {
        "content": "<p>(Of course the MCP itself has not yet been seconded, so suggesting a project group may be putting the cart before the horse)</p>",
        "id": 202693303,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593699033
    },
    {
        "content": "<p>imo it is obviously a good fit for a project group :)</p>",
        "id": 202693312,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593699037
    },
    {
        "content": "<ul>\n<li>Pending FCP requests (check your boxes!)<br>\n    - \"Stabilize control-flow-guard codegen option\" <a href=\"https://github.com/rust-lang/rust/pull/73893\">rust#73893</a></li>\n</ul>",
        "id": 202693364,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593699061
    },
    {
        "content": "<ul>\n<li>Things in FCP (make sure you're good with it)<br>\n    - \"illumos toolchain builds\" <a href=\"https://github.com/rust-lang/compiler-team/issues/279\">compiler-team#279</a><br>\n    - \"RISC-V Linux Tier 2 Host support\" <a href=\"https://github.com/rust-lang/compiler-team/issues/312\">compiler-team#312</a><br>\n    - \"Switch from libbacktrace to gimli\" <a href=\"https://github.com/rust-lang/compiler-team/issues/313\">compiler-team#313</a><br>\n    - \"<code>#![deny(unsafe_op_in_unsafe_fn)]</code> in libcore and libstd\" <a href=\"https://github.com/rust-lang/compiler-team/issues/317\">compiler-team#317</a><br>\n    - \"-Zmir-opt-level Reform\" <a href=\"https://github.com/rust-lang/compiler-team/issues/319\">compiler-team#319</a><br>\n    - \"Move CONTRIBUTING.md to rustc-dev-guide and instead point to Getting Started\" <a href=\"https://github.com/rust-lang/compiler-team/issues/320\">compiler-team#320</a><br>\n    - \"mv std libs to std/\" <a href=\"https://github.com/rust-lang/rust/pull/73265\">rust#73265</a></li>\n</ul>",
        "id": 202693408,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593699086
    },
    {
        "content": "<ul>\n<li>Accepted MCPs<br>\n    - \"Support const parameters in type dependent paths\" <a href=\"https://github.com/rust-lang/compiler-team/issues/304\">compiler-team#304</a></li>\n</ul>",
        "id": 202693456,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593699109
    },
    {
        "content": "<h3>WG checkins</h3>\n<p><span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span> checkin by <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span>:</p>\n<blockquote>\n<ul>\n<li>We are finishing up 2020 sprint 3 (ends Jul. 7th)</li>\n<li>Set up weekly releases of Chalk<ul>\n<li>Needed for rustc integration and rust-analyzer publishing</li>\n</ul>\n</li>\n<li>rustc work<ul>\n<li>Work by @lcnr on refactoring <code>Predicate</code>, including interning and introducing <code>ForAll</code></li>\n<li>Work by Matthew Jaspar pushing GATs</li>\n<li>Chalk integration is getting updated as new Chalk features are integrated<br>\n     * Still quite a bit to be done, but progress is being made</li>\n</ul>\n</li>\n<li>Chalk work<ul>\n<li>Two separate solvers - SLG and recursive<br>\n     * We eventually want to settle on one, but for now, work is being done on both</li>\n<li>Some initial work on writing <code>.chalk</code> files for reproducing issues</li>\n<li>Getting close to supporting all builtin types and traits<br>\n     * Recently added <code>Fn</code> family and closures<br>\n     * Support for <code>enum</code>s has a PR<br>\n     * <code>Generator</code>/<code>GeneratorWitness</code> work being done by @Aaron Hill<br>\n     * Need full support for auto traits of builtin types<br>\n     * <code>Unpin</code>/<code>CoerceUnsized</code>/<code>DispatchFromDyn</code> traits need to be implemented<br>\n     * Subtyping is being worked on with WIP PR</li>\n</ul>\n</li>\n<li>Overall, the past 3 sprints have been super productive<ul>\n<li>Lots of interest and activity</li>\n</ul>\n</li>\n<li>Taking a summer break from meetings &amp; sprints, picking back up in September</li>\n</ul>\n</blockquote>",
        "id": 202693545,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593699140
    },
    {
        "content": "<p>I think we expect to keep pushing on some of those points, but in a less structured fashion</p>",
        "id": 202693835,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593699260
    },
    {
        "content": "<p>Agreed</p>",
        "id": 202693851,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593699267
    },
    {
        "content": "<p>I have to go over my notes from last meeting but in particular</p>",
        "id": 202693859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593699271
    },
    {
        "content": "<p>I expect to be starting some MCPs to try and modify rustc to bring it more inline with chalk's IR (and vice versa)</p>",
        "id": 202693886,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593699282
    },
    {
        "content": "<p>I've been hesitating but I think the time has come to try and reconcile the two...</p>",
        "id": 202693929,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593699300
    },
    {
        "content": "<p>Sigh; I neglected to put beta-approved on the approvals from last week's meeting</p>",
        "id": 202693990,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593699332
    },
    {
        "content": "<p>I'm going to skip those parts of the beta-nominations on the agenda for this week</p>",
        "id": 202694079,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593699364
    },
    {
        "content": "<h2>Beta-nominations</h2>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Abeta-nominated+-label%3Abeta-accepted+label%3AT-compiler\">T-compiler</a></p>",
        "id": 202694111,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593699379
    },
    {
        "content": "<ul>\n<li>\"rustc_lexer: Simplify shebang parsing once more\" <a href=\"https://github.com/rust-lang/rust/pull/73596\">rust#73596</a><ul>\n<li>Fixes <a href=\"https://github.com/rust-lang/rust/issues/73250\">a beta regression about parsing an empty shebang (admittedly questionable code)</a></li>\n</ul>\n</li>\n</ul>",
        "id": 202694127,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593699389
    },
    {
        "content": "<p>the fix makes sense to me but is it such a bad issue that's worth a backport?</p>",
        "id": 202694263,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1593699466
    },
    {
        "content": "<p>Yeah I personally think this can ride the trains</p>",
        "id": 202694355,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593699495
    },
    {
        "content": "<p>uh well it's fixing a regression?</p>",
        "id": 202694374,
        "sender_full_name": "simulacrum",
        "timestamp": 1593699506
    },
    {
        "content": "<p>seems strange not to fix that regression, and with a relatively minimal fix</p>",
        "id": 202694402,
        "sender_full_name": "simulacrum",
        "timestamp": 1593699519
    },
    {
        "content": "<p>but it wasn't even clear whether this was a defined part of the language?</p>",
        "id": 202694410,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593699523
    },
    {
        "content": "<p>it's some code that shouldn't have made it in but wasn't reviewed properly</p>",
        "id": 202694425,
        "sender_full_name": "eddyb",
        "timestamp": 1593699533
    },
    {
        "content": "<p>of questionable behavior and performance</p>",
        "id": 202694434,
        "sender_full_name": "eddyb",
        "timestamp": 1593699543
    },
    {
        "content": "<p>it would be nice to worry about it doing weird things in the wild</p>",
        "id": 202694461,
        "sender_full_name": "eddyb",
        "timestamp": 1593699559
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> are you referring to the previous state or this PR?</p>",
        "id": 202694489,
        "sender_full_name": "simulacrum",
        "timestamp": 1593699575
    },
    {
        "content": "<p>the temporary state that accidentally got into beta</p>",
        "id": 202694509,
        "sender_full_name": "eddyb",
        "timestamp": 1593699585
    },
    {
        "content": "<p>(partly my fault I think)</p>",
        "id": 202694529,
        "sender_full_name": "eddyb",
        "timestamp": 1593699596
    },
    {
        "content": "<p>okay -- well -- I think that further goes to support a backport here</p>",
        "id": 202694585,
        "sender_full_name": "simulacrum",
        "timestamp": 1593699604
    },
    {
        "content": "<p>yeah I think it's one less thing to worry about if we backport the new implementation</p>",
        "id": 202694612,
        "sender_full_name": "eddyb",
        "timestamp": 1593699617
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> okay</p>",
        "id": 202694622,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593699620
    },
    {
        "content": "<p>(I'll review the PRs just in case I'm missing some details)</p>",
        "id": 202694737,
        "sender_full_name": "eddyb",
        "timestamp": 1593699678
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Abeta-nominated+-label%3Abeta-accepted+label%3Alibs-impl\">libs-impl</a></p>\n<ul>\n<li>No beta nominations this time.</li>\n</ul>",
        "id": 202694769,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593699691
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Abeta-nominated+-label%3Abeta-accepted+label%3AT-rustdoc\">T-rustdoc</a></p>\n<ul>\n<li>\"rustdoc: Fix doc aliases with crate filtering\" <a href=\"https://github.com/rust-lang/rust/pull/73644\">rust#73644</a><ul>\n<li>Approved on our last meeting but lacks <code>beta-accepted</code> label.</li>\n</ul>\n</li>\n</ul>",
        "id": 202694787,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593699699
    },
    {
        "content": "<p>(same as cases I elided above; we don't need to discuss; I just need to go add the beta-accepted labels, with notes when necessary)</p>",
        "id": 202694824,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593699720
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> oh I was thinking of <a href=\"https://github.com/rust-lang/rust/issues/71372\">#71372</a> but I guess <a href=\"https://github.com/rust-lang/rust/issues/71487\">#71487</a> had bugs too ugh</p>",
        "id": 202694928,
        "sender_full_name": "eddyb",
        "timestamp": 1593699754
    },
    {
        "content": "<h2>Stable-nominations</h2>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Astable-nominated+-label%3Astable-accepted+label%3AT-compiler\">T-compiler</a></p>\n<ul>\n<li>\"Perform obligation deduplication to avoid buggy <code>ExistentialMismatch</code>\" <a href=\"https://github.com/rust-lang/rust/pull/73485\">rust#73485</a><ul>\n<li>Also beta nominated</li>\n<li>Approved on our last meeting but PR wasn't merged at that time, now it is already merged so it can be labelled with <code>stable-accepted</code>.</li>\n</ul>\n</li>\n</ul>",
        "id": 202695077,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593699833
    },
    {
        "content": "<p>so, yeah, again, I'll deal with this after the meeting</p>",
        "id": 202695137,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593699845
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Astable-nominated+-label%3Astable-accepted+label%3Alibs-impl\">libs-impl</a></p>\n<ul>\n<li>No stable nominations this time.</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Astable-nominated+-label%3Astable-accepted+label%3AT-rustdoc\">T-rustdoc</a></p>\n<ul>\n<li>No stable nominations this time.</li>\n</ul>",
        "id": 202695171,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593699858
    },
    {
        "content": "<h2>PRs S-waiting-on-team</h2>\n<p><a href=\"https://github.com/rust-lang/rust/pulls?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AS-waiting-on-team+label%3AT-compiler\">T-compiler</a></p>\n<ul>\n<li>\"Implement <code>--extern-location</code>\" <a href=\"https://github.com/rust-lang/rust/pull/72603\">rust#72603</a><ul>\n<li><a href=\"https://github.com/rust-lang/rust/pull/72603#issuecomment-649705763\">@**nikomatsakis** thinks it's reasonable to land this even though we've not figured out the cargo integration story, but he would reluctant to stabilize, however, until we have a clearer picture of what's happening with cargo.</a></li>\n<li>Last minute edit: <a href=\"https://github.com/rust-lang/compiler-team/issues/303\">MCP was just seconded</a></li>\n</ul>\n</li>\n</ul>",
        "id": 202695314,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593699934
    },
    {
        "content": "<p>I'm open to objections there :)</p>",
        "id": 202695348,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593699959
    },
    {
        "content": "<p>but it seemed like we might be in a state of someone being willing to say \"yeah, go for it\"</p>",
        "id": 202695400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593699972
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> so to revise my earlier statement, what I was worried about didn't end up in beta (was superseded), and <a href=\"https://github.com/rust-lang/rust/issues/73596\">#73596</a> only fixes one kind of situation that ended up being a regression, my bad :(</p>",
        "id": 202695484,
        "sender_full_name": "eddyb",
        "timestamp": 1593700019
    },
    {
        "content": "<p>maybe I shouldn't speak about things I haven't caught up on</p>",
        "id": 202695513,
        "sender_full_name": "eddyb",
        "timestamp": 1593700036
    },
    {
        "content": "<p>okay thanks for clarification <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span></p>",
        "id": 202695539,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593700052
    },
    {
        "content": "<p>I was staring at that code thinking \"what performance pitfall is eddyb talking about ....?\"</p>",
        "id": 202695566,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593700071
    },
    {
        "content": "<p>yeah that was <a href=\"https://github.com/rust-lang/rust/issues/71372\">#71372</a> which <a href=\"https://github.com/rust-lang/rust/issues/71487\">#71487</a> redid</p>",
        "id": 202695713,
        "sender_full_name": "eddyb",
        "timestamp": 1593700114
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pulls?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AS-waiting-on-team+label%3Alibs-impl\">libs-impl</a></p>\n<ul>\n<li>No PRs waiting on libs-impl this time.</li>\n</ul>",
        "id": 202695751,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593700127
    },
    {
        "content": "<h2>Issues of Note</h2>\n<h3>Short Summary</h3>\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AT-compiler+label%3AP-critical+\">2 T-compiler P-critical issues</a><ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AT-compiler+label%3AP-critical+no%3Aassignee\">2 of those are unassigned</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AT-compiler+label%3AP-high+\">47 T-compiler P-high issues</a><ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AT-compiler+label%3AP-high+no%3Aassignee\">25 of those are unassigned</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/rust-lang/rust/labels/regression-from-stable-to-beta\">0 P-critical, 0 P-high, 4 P-medium, 0 P-low regression-from-stable-to-beta</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/labels/regression-from-stable-to-nightly\">1 P-critical, 1 P-high, 6 P-medium, 1 P-low regression-from-stable-to-nightly</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/labels/regression-from-stable-to-stable\">0 P-critical, 13 P-high, 44 P-medium, 4 P-low regression-from-stable-to-stable</a></li>\n</ul>",
        "id": 202695790,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593700141
    },
    {
        "content": "<h3>P-critical</h3>\n<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AP-critical+label%3AT-compiler\">T-compiler</a></p>",
        "id": 202695827,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593700157
    },
    {
        "content": "<ul>\n<li>\"cannot create local mono-item for DefId\" <a href=\"https://github.com/rust-lang/rust/issues/73537\">rust#73537</a><ul>\n<li>Discussed last week</li>\n<li><a href=\"#narrow/stream/227806-t-compiler.2Fwg-prioritization/topic/I-prioritize.20.2373537.20cannot.20create.20local.20mono-item.20for.20DefId\">Labeled as <code>P-critical</code> to raise awareness</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/73537#issuecomment-649364509\">This seems to be fixed seeing some of the latest comments</a>, still needs a test.</li>\n<li>Maybe we should lower the priority to <code>P-medium</code> or something that represents the priority of lacking a test in the compiler.</li>\n</ul>\n</li>\n</ul>",
        "id": 202695852,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593700171
    },
    {
        "content": "<p>IMO we should re-label this issue but we've left it in the agenda just in case, to see what people think about the test that covers a <code>P-critical</code> issue</p>",
        "id": 202696036,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1593700249
    },
    {
        "content": "<p>yeah if it's just needs-test, definitely not criticial</p>",
        "id": 202696041,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593700251
    },
    {
        "content": "<p>I guess that could just be <code>P-medium</code></p>",
        "id": 202696057,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1593700262
    },
    {
        "content": "<p>Lets lower priority to P-medium, yeah?</p>",
        "id": 202696058,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593700262
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> doing so</p>",
        "id": 202696073,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1593700271
    },
    {
        "content": "<p>(will look into getting the test added in a few days)</p>",
        "id": 202696082,
        "sender_full_name": "DPC",
        "timestamp": 1593700276
    },
    {
        "content": "<p>does anyone think there is need to try to confirm where fix was injected?</p>",
        "id": 202696101,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593700286
    },
    {
        "content": "<p>it sounds like the codebase is very large</p>",
        "id": 202696118,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593700299
    },
    {
        "content": "<p>anyway we can move along</p>",
        "id": 202696166,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593700321
    },
    {
        "content": "<ul>\n<li>\"Nightly ICEs trying to normalize during a cast\" <a href=\"https://github.com/rust-lang/rust/issues/73747\">rust#73747</a><ul>\n<li>Unassigned</li>\n<li>nightly regression, ICE on previously accepted code</li>\n<li>still needs MCVE and bisection</li>\n<li>current repro code uses WinRT and thus is only reproducible on Windows</li>\n</ul>\n</li>\n</ul>",
        "id": 202696227,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593700336
    },
    {
        "content": "<p>I'll take this one: I'm trying to make certain days of the week be \"Windows development\" days</p>",
        "id": 202696297,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593700373
    },
    {
        "content": "<p>we could ping windows group but I'm not 100% if it's a windows only issue or just winRT in some way is triggering the error</p>",
        "id": 202696411,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1593700433
    },
    {
        "content": "<p>right, we'll find out</p>",
        "id": 202696433,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593700441
    },
    {
        "content": "<p>anyway, let's ping windows group</p>",
        "id": 202696480,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1593700444
    },
    {
        "content": "<p>Peter was indicating that it is a winrt issue</p>",
        "id": 202696516,
        "sender_full_name": "DPC",
        "timestamp": 1593700461
    },
    {
        "content": "<p>they (windows) were already pinged 6 days ago</p>",
        "id": 202696522,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593700464
    },
    {
        "content": "<p>yeah I was checking and I already pinged them <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 202696591,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1593700491
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AP-critical+label%3Alibs-impl\">libs-impl</a></p>\n<ul>\n<li>No P-critical issues for libs-impl this time.</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AP-critical+label%3AT-rustdoc\">T-rustdoc</a></p>\n<ul>\n<li>No P-critical issues for T-rustdoc this time.</li>\n</ul>",
        "id": 202696627,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593700508
    },
    {
        "content": "<h3>Unassigned P-high regressions</h3>\n<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3Aregression-from-stable-to-beta+P-high+no%3Aassignee\">Beta regressions</a></p>\n<ul>\n<li>No unassigned P-high beta regressions this time.</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3Aregression-from-stable-to-nightly+P-high+no%3Aassignee\">Nightly regressions</a></p>\n<ul>\n<li>No unassigned P-high nightly regressions this time.</li>\n</ul>",
        "id": 202696649,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593700516
    },
    {
        "content": "<h2>Performance logs</h2>\n<p><a href=\"https://github.com/rust-lang/rustc-perf/tree/master/triage#triage-logs\">Triage done by njn</a>. Latest revision: <a href=\"https://github.com/rust-lang/rust/commit/0ca7f74dbd23a3e8ec491cd3438f490a3ac22741\">0ca7f74dbd23a3e8ec491cd3438f490a3ac22741</a>.<br>\nThree regressions, two of them on rollups; two improvements, one on a rollup.</p>\n<p>Regressions:</p>\n<ul>\n<li>\n<p><a href=\"https://github.com/rust-lang/rust/pull/73756#issuecomment-651422253\">Rollup of 13 pull requests</a><br>\n  (<a href=\"https://perf.rust-lang.org/compare.html?start=14e65d5e95da0f7e4f9127cf1598fa46f33972e8&amp;end=9672b5e95c520774cc17bffc7031c80a1bcf4b4c&amp;stat=instructions:u\">instructions</a>):<br>\n  Up to 1.7% losses on many benchmarks, affecting <code>incr-unchanged</code> runs the<br>\n  most. Might be due to <a href=\"https://github.com/rust-lang/rust/pull/73102\">#73102</a><br>\n  or <a href=\"https://github.com/rust-lang/rust/pull/73597\">#73597</a>.</p>\n</li>\n<li>\n<p><a href=\"https://github.com/rust-lang/rust/pull/73669#issuecomment-651421194\">Rollup of 11 pull requests</a><br>\n  (<a href=\"https://github.com/rust-lang/rust/compare/ff5b446d2fdbd898bc97a751f2f72858de185cf1...0c04344d86f9598f20d9ec86fe87ea2a5d6ff8e6\">instructions</a>):<br>\n  Up to 2.1% losses on a few benchmarks, mostly on <code>incr-unchanged</code> runs.</p>\n</li>\n<li>\n<p><a href=\"https://github.com/rust-lang/rust/pull/73293#issuecomment-651423672\">Always capture tokens for <code>macro_rules!</code> arguments</a><br>\n  (<a href=\"https://github.com/rust-lang/rust/compare/0c04344d86f9598f20d9ec86fe87ea2a5d6ff8e6...3c90ae8404b6b83bc3cba35840ddf7edd500cc86\">instructions</a>, <a href=\"https://perf.rust-lang.org/compare.html?start=0c04344d86f9598f20d9ec86fe87ea2a5d6ff8e6&amp;end=3c90ae8404b6b83bc3cba35840ddf7edd500cc86&amp;stat=max-rss\">max-rss</a>):<br>\n  Up to 6.1% losses on the artificial <code>deep-vector</code> benchmark, and memory<br>\n  increases on the same benchmark.</p>\n</li>\n</ul>\n<p>Improvements:</p>\n<ul>\n<li>\n<p><a href=\"https://github.com/rust-lang/rust/pull/73643#issuecomment-651427381\">Rollup of 9 pull requests</a><br>\n  (<a href=\"https://github.com/rust-lang/rust/compare/3b1c08c68ccc2c222f84384c836b5e167e2bc241...1557fb031b272b4c5bfcc7de5df7eddc7b36a584\">instructions</a>):<br>\n  Up to 13.6% wins on <code>wg-grammar</code>, tiny wins on a couple of other benchmarks.</p>\n</li>\n<li>\n<p><a href=\"https://github.com/rust-lang/rust/pull/73594\">Revert PR #72389 - \"Explain move errors that occur due to method calls involving <code>self</code>\"</a><br>\n  (<a href=\"https://github.com/rust-lang/rust/compare/6bb3dbfc6c6d8992d08431f320ba296a0c2f7498...cbf356a1a5677b1c073f09ba833d8247c7ed01aa\">instructions</a>):<br>\n  Up to 3.1% wins on a few benchmarks.</p>\n</li>\n</ul>",
        "id": 202696690,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593700535
    },
    {
        "content": "<p>deep-vector does use macros I think to generate tons of code, right?</p>",
        "id": 202696996,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593700657
    },
    {
        "content": "<p>I guess that makes sense</p>",
        "id": 202697009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593700666
    },
    {
        "content": "<p>(another note here is that we've upgraded script-servo to a more recent version)</p>",
        "id": 202697105,
        "sender_full_name": "simulacrum",
        "timestamp": 1593700707
    },
    {
        "content": "<p>I'm having trouble finding <em>why</em> the aaforementioned revert happened</p>",
        "id": 202697113,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593700712
    },
    {
        "content": "<p>i guess <a href=\"https://github.com/rust-lang/rust/issues/72389\">#72389</a> broke clippy</p>",
        "id": 202697150,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593700730
    },
    {
        "content": "<p>but that shouldn't matter for most people</p>",
        "id": 202697153,
        "sender_full_name": "simulacrum",
        "timestamp": 1593700732
    },
    {
        "content": "<p>it would have been nice if we had opened up a dedicated issue describing that problem</p>",
        "id": 202697174,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593700745
    },
    {
        "content": "<p>(I'm referencing conversation <a href=\"https://github.com/rust-lang/rust/pull/72389#discussion_r441040580\">here</a> )</p>",
        "id": 202697205,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593700765
    },
    {
        "content": "<p>interesting, we have landed a take-two of <a href=\"https://github.com/rust-lang/rust/issues/72389\">#72389</a> in <a href=\"https://github.com/rust-lang/rust/issues/73708\">#73708</a></p>",
        "id": 202697318,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593700812
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> , it probably would be as good thing if we tweaked <span class=\"user-mention\" data-user-id=\"120989\">@Nicholas Nethercote</span> 's report to include issue numbers explicitly</p>",
        "id": 202697417,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593700867
    },
    {
        "content": "<p>they are currently present in the links themselves, but that is harder to reference when scrolling</p>",
        "id": 202697448,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593700887
    },
    {
        "content": "<p>random aside: it would be really nice if Zulip had at least on-hover previews of links. maybe I should try to find an extension that does this</p>",
        "id": 202697514,
        "sender_full_name": "eddyb",
        "timestamp": 1593700916
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> you can request in #zulip</p>",
        "id": 202697594,
        "sender_full_name": "DPC",
        "timestamp": 1593700942
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> you mean previewing the content behind the link?</p>",
        "id": 202697596,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593700943
    },
    {
        "content": "<p>just the title would be enough</p>",
        "id": 202697617,
        "sender_full_name": "eddyb",
        "timestamp": 1593700951
    },
    {
        "content": "<p>it <em>does</em> have a preview of the link itself when I hover</p>",
        "id": 202697618,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593700952
    },
    {
        "content": "<p>(the url that is)</p>",
        "id": 202697637,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593700959
    },
    {
        "content": "<p>(file a bug on zulip, I wouldn't surprised if they fixed it relatively quickly)</p>",
        "id": 202697659,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593700968
    },
    {
        "content": "<p>huh I need to try the app again, been using Zulip in firefox for a while</p>",
        "id": 202697669,
        "sender_full_name": "eddyb",
        "timestamp": 1593700971
    },
    {
        "content": "<p>sorry for the derail</p>",
        "id": 202697675,
        "sender_full_name": "eddyb",
        "timestamp": 1593700975
    },
    {
        "content": "<p>I don't see any hover of the title, just the full URL, which I don't think is what <span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> wanted</p>",
        "id": 202697714,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593700989
    },
    {
        "content": "<p>oh right I didn't see \"the url that is\"</p>",
        "id": 202697754,
        "sender_full_name": "eddyb",
        "timestamp": 1593701016
    },
    {
        "content": "<p>right, I tried to clarify that. The url suffices for <em>this</em> particular purpose, but its not ideal</p>",
        "id": 202697755,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593701017
    },
    {
        "content": "<p>I'm talking about issue/PR numbers. I never recognize them (by number)</p>",
        "id": 202697799,
        "sender_full_name": "eddyb",
        "timestamp": 1593701038
    },
    {
        "content": "<p>but ... is it normal to provide that? Is there any risk involved?</p>",
        "id": 202697809,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593701041
    },
    {
        "content": "<p>done on your behalf in <a class=\"stream\" data-stream-id=\"122653\" href=\"/#narrow/stream/122653-zulip\">#zulip</a> <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 202697859,
        "sender_full_name": "DPC",
        "timestamp": 1593701049
    },
    {
        "content": "<p>in terms of following a link to a site when the user hasn't actually clicked.</p>",
        "id": 202697879,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593701060
    },
    {
        "content": "<p>I think normally it's only done for e.g. github specifically</p>",
        "id": 202697900,
        "sender_full_name": "simulacrum",
        "timestamp": 1593701072
    },
    {
        "content": "<p>actually, never mind, <strong>that</strong> discussion <strong>would</strong> be a derailing of the meeting</p>",
        "id": 202697906,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593701075
    },
    {
        "content": "<p>anyway, let's not derail</p>",
        "id": 202697910,
        "sender_full_name": "simulacrum",
        "timestamp": 1593701076
    },
    {
        "content": "<p>in this case, the reason I wanted issue numbers in the report</p>",
        "id": 202697962,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593701101
    },
    {
        "content": "<p>is becasaue take two landed in PR <a href=\"https://github.com/rust-lang/rust/issues/73708\">#73708</a></p>",
        "id": 202698002,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593701117
    },
    {
        "content": "<p>but that landed as part of a rollup</p>",
        "id": 202698016,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593701123
    },
    {
        "content": "<p>and so I wanted to see if one of the regressing rollups</p>",
        "id": 202698038,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593701132
    },
    {
        "content": "<p>had that PR in it</p>",
        "id": 202698043,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593701135
    },
    {
        "content": "<p>but as far as I can tell, the rollup holding PR <a href=\"https://github.com/rust-lang/rust/issues/73708\">#73708</a> was either of the two that were in the report</p>",
        "id": 202698161,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593701172
    },
    {
        "content": "<h2>Nominated Issues</h2>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3AI-nominated+label%3AT-compiler\">T-compiler</a></p>",
        "id": 202698197,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593701192
    },
    {
        "content": "<ul>\n<li>\"Some <code>NodeId</code>/<code>LocalDefId</code> don't have a corresponding <code>HirId</code>\" <a href=\"https://github.com/rust-lang/rust/issues/71104\">rust#71104</a><ul>\n<li>Unassigned</li>\n<li>Blocks a rustdoc feature: intra-doc links.</li>\n<li>Has no clear path for a fix, thus would benefit from discussion in a T-compiler meeting.</li>\n<li>Issue raised when trying to remove <code>DUMMY_HIR_ID</code></li>\n<li>Has a proposed fix by <span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span>: <a href=\"https://github.com/rust-lang/rust/issues/73566\">#73566</a></li>\n</ul>\n</li>\n</ul>",
        "id": 202698213,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593701201
    },
    {
        "content": "<p>This has been blocking intra-doc links for a couple weeks now</p>",
        "id": 202698256,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1593701228
    },
    {
        "content": "<p>oh yeah, I've been following this discussion the sidelines</p>",
        "id": 202698273,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593701239
    },
    {
        "content": "<p>currently waiting on a crater run for that PR but I brought it up for discussion since I'm not sure it's a great approach in the first place</p>",
        "id": 202698298,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1593701251
    },
    {
        "content": "<p>mainly because I'm totally <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> about us decoupling everybody_loops from rustdoc</p>",
        "id": 202698315,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593701261
    },
    {
        "content": "<p>\"everybody_loops is causing bugs in rustdoc\" shocking :)</p>",
        "id": 202698318,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593701263
    },
    {
        "content": "<p>I mean, in a sense it is shocking</p>",
        "id": 202698397,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593701283
    },
    {
        "content": "<p>hm so two bullets seem in conflict? \"Has no clear path for a fix, thus would benefit from discussion in a T-compiler meeting.\" vs. \"Has a proposed fix by Joshua Nelson: <a href=\"https://github.com/rust-lang/rust/issues/73566\">#73566</a></p>",
        "id": 202698420,
        "sender_full_name": "simulacrum",
        "timestamp": 1593701294
    },
    {
        "content": "<p>in that someone who knew of each of those components independently should be shocked. that they are coupled together</p>",
        "id": 202698463,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593701316
    },
    {
        "content": "<p>is this mostly resolved? what do we need to discuss?</p>",
        "id": 202698467,
        "sender_full_name": "simulacrum",
        "timestamp": 1593701318
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> well my 'fix' has a lot of trade-offs</p>",
        "id": 202698496,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1593701333
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-07-02.20.2354818/near/202698420\">said</a>:</p>\n<blockquote>\n<p>hm so two bullets seem in conflict? \"Has no clear path for a fix, thus would benefit from discussion in a T-compiler meeting.\" vs. \"Has a proposed fix by Joshua Nelson: <a href=\"https://github.com/rust-lang/rust/issues/73566\">#73566</a></p>\n</blockquote>\n<p>I. think the proposed fix from <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> is to resolve the rustdoc problem</p>",
        "id": 202698507,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593701338
    },
    {
        "content": "<p>for starters, anytime rustdoc does typechecking now causes an ICE</p>",
        "id": 202698513,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1593701343
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> I'm not sure if it needs to be fixed other than the rustdoc problem? for -Z unpretty=everybody_loops it never needs to look at the defids</p>",
        "id": 202698584,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1593701380
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-07-02.20.2354818/near/202698507\">said</a>:</p>\n<blockquote>\n<p>I. think the proposed fix from <span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> is to resolve the rustdoc problem</p>\n</blockquote>\n<p>but the issue of <a href=\"https://github.com/rust-lang/rust/issues/71104\">#71104</a> goes beyond just rustdoc</p>",
        "id": 202698593,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593701386
    },
    {
        "content": "<p>or at least, that's my reading of the description of <a href=\"https://github.com/rust-lang/rust/issues/71104\">#71104</a></p>",
        "id": 202698682,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593701413
    },
    {
        "content": "<p>ah, okay</p>",
        "id": 202698707,
        "sender_full_name": "simulacrum",
        "timestamp": 1593701425
    },
    {
        "content": "<p>but then one might ask,  why does PR <a href=\"https://github.com/rust-lang/rust/issues/73566\">#73566</a> say it closes <a href=\"https://github.com/rust-lang/rust/issues/71104\">#71104</a></p>",
        "id": 202698745,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593701444
    },
    {
        "content": "<p>so, longish term, it seems like we ought to be able to ignore item bodies...oh, well, I guess that's not necessarily true, as there may be nested items.</p>",
        "id": 202698780,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593701458
    },
    {
        "content": "<p>We'd need to ask <span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> about how it affects things other than rustdoc I think</p>",
        "id": 202698795,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1593701463
    },
    {
        "content": "<p>(I'm skimming the PR write-up...)</p>",
        "id": 202698797,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593701465
    },
    {
        "content": "<p>the write up is a little long, <a href=\"https://github.com/rust-lang/rust/issues/71104#issuecomment-651142977\">https://github.com/rust-lang/rust/issues/71104#issuecomment-651142977</a> has a summary</p>",
        "id": 202698845,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1593701499
    },
    {
        "content": "<p>personally, I think its <em>fine</em> if rustdoc runs a different set of lints from rustc</p>",
        "id": 202699003,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593701556
    },
    {
        "content": "<p>(that is, as I understand it, the heart of the expected change in semantics here)</p>",
        "id": 202699048,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593701578
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-07-02.20.2354818/near/202698513\">said</a>:</p>\n<blockquote>\n<p>for starters, anytime rustdoc does typechecking now causes an ICE</p>\n</blockquote>\n<p>this doesn't seem necessary to me? this should only happen if there were name resolutions errors hidden</p>",
        "id": 202699068,
        "sender_full_name": "eddyb",
        "timestamp": 1593701587
    },
    {
        "content": "<p>right, that's what I mean</p>",
        "id": 202699090,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1593701601
    },
    {
        "content": "<p>if there were hidden errors and rustdoc does type checking</p>",
        "id": 202699107,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1593701610
    },
    {
        "content": "<p>(because the lints being run today by rustdoc rely on type-checking the fn bodies, which is going to be disabled)</p>",
        "id": 202699109,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593701611
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-07-02.20.2354818/near/202699109\">said</a>:</p>\n<blockquote>\n<p>(because the lints being run today by rustdoc rely on type-checking the fn bodies, which is going to be disabled)</p>\n</blockquote>\n<p>not all of them</p>",
        "id": 202699131,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1593701622
    },
    {
        "content": "<p>it should still be completely fine for most of the type-checking it needs to do, like constants (or even <code>const fn</code>s) which may be used from types</p>",
        "id": 202699155,
        "sender_full_name": "eddyb",
        "timestamp": 1593701637
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/73566#issuecomment-650213058\">https://github.com/rust-lang/rust/pull/73566#issuecomment-650213058</a></p>",
        "id": 202699206,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1593701643
    },
    {
        "content": "<p>right, but you are in part proposing to disable the lints that do  rely on such type checking of fn bodies, right?</p>",
        "id": 202699224,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593701655
    },
    {
        "content": "<p>Correct, those will certainly be disabled</p>",
        "id": 202699244,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1593701666
    },
    {
        "content": "<p>perhaps an interesting question -- will this run into problems with the opaque types work Niko has been doing? I imagine we'll not have definitions if we're not running type checking</p>",
        "id": 202699271,
        "sender_full_name": "simulacrum",
        "timestamp": 1593701684
    },
    {
        "content": "<p>and all the lints that look at things outside bodies will need an option not to look inside if we want to keep them in rustdoc</p>",
        "id": 202699277,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1593701689
    },
    {
        "content": "<p>if we could have name resolution be on-demand there wouldn't be any ICEs to worry about at all, we would just want to e.g. disable most lints in order to avoid showing errors in platform-specific code</p>",
        "id": 202699279,
        "sender_full_name": "eddyb",
        "timestamp": 1593701691
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> we're not \"not running type-checking\"</p>",
        "id": 202699300,
        "sender_full_name": "eddyb",
        "timestamp": 1593701704
    },
    {
        "content": "<p>well I mean that the definitions (being in bodies) would no longer exist, right?</p>",
        "id": 202699323,
        "sender_full_name": "simulacrum",
        "timestamp": 1593701722
    },
    {
        "content": "<p>opaque types will just work, assuming there is no per-platform code involved that doesn't pass name resolution</p>",
        "id": 202699326,
        "sender_full_name": "eddyb",
        "timestamp": 1593701722
    },
    {
        "content": "<p>okay :)</p>",
        "id": 202699339,
        "sender_full_name": "simulacrum",
        "timestamp": 1593701732
    },
    {
        "content": "<p>if we want to document the hidden type, that'd be an issue</p>",
        "id": 202699350,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593701738
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-07-02.20.2354818/near/202699350\">said</a>:</p>\n<blockquote>\n<p>if we want to document the hidden type, that'd be an issue</p>\n</blockquote>\n<p>This is what I was referring to</p>",
        "id": 202699367,
        "sender_full_name": "simulacrum",
        "timestamp": 1593701753
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> you can't document things inside function bodies anyway</p>",
        "id": 202699372,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1593701756
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> that's what <code>everybody_loops</code> does today with some heuristics for not breaking things</p>",
        "id": 202699374,
        "sender_full_name": "eddyb",
        "timestamp": 1593701757
    },
    {
        "content": "<p>you can only document <code>pub</code> items</p>",
        "id": 202699428,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1593701768
    },
    {
        "content": "<p>(it feels to me like the right answer for \"cross-platform docs\" is probably generating for each platform and merging the outputs, but I'm sure that's been considered and rejected)</p>",
        "id": 202699454,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593701784
    },
    {
        "content": "<p>I have to go but I'll have time in an hour for more questions</p>",
        "id": 202699468,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1593701794
    },
    {
        "content": "<p>I suspect we don't want to document the hidden type, no? Or do we do so today?</p>",
        "id": 202699481,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593701802
    },
    {
        "content": "<p>(and I'm not really trying to revisit that question in this moment, just musing)</p>",
        "id": 202699485,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593701803
    },
    {
        "content": "<p>I don't think we do so today</p>",
        "id": 202699498,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593701810
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span>I believe  <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> is referring to <code>-&gt; impl Trait</code></p>",
        "id": 202699501,
        "sender_full_name": "eddyb",
        "timestamp": 1593701812
    },
    {
        "content": "<p>not something inside the <code>fn</code> body</p>",
        "id": 202699516,
        "sender_full_name": "eddyb",
        "timestamp": 1593701819
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-07-02.20.2354818/near/202699350\">said</a>:</p>\n<blockquote>\n<p>if we want to document the hidden type, that'd be an issue</p>\n</blockquote>\n<p>you mean the platform-specific code, right?</p>",
        "id": 202699542,
        "sender_full_name": "eddyb",
        "timestamp": 1593701833
    },
    {
        "content": "<p>although <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> may been responding to me saying that if you just skipped name resolution (similar to your suggestion to make it lazy, <span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span>) then we wouldn't be able to expand macros which might contain items/impls etc</p>",
        "id": 202699565,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593701850
    },
    {
        "content": "<p>okay. In any case, I now can at least see a reason why one might want to run the type-inference from within rustdoc</p>",
        "id": 202699579,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593701861
    },
    {
        "content": "<p>this skips late resolution, not macro resolution</p>",
        "id": 202699585,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1593701863
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> do you skip it or just the errors?</p>",
        "id": 202699603,
        "sender_full_name": "eddyb",
        "timestamp": 1593701875
    },
    {
        "content": "<p>just the errors, yeah</p>",
        "id": 202699673,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1593701888
    },
    {
        "content": "<p>my suggestion was to only skip emitting errors, but still do as much resolution as possible</p>",
        "id": 202699677,
        "sender_full_name": "eddyb",
        "timestamp": 1593701889
    },
    {
        "content": "<p>okay so I guess there's a lot of confusion stemmed from imprecise descriptions</p>",
        "id": 202699724,
        "sender_full_name": "eddyb",
        "timestamp": 1593701914
    },
    {
        "content": "<p>I think we should move forward with <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> 's PR, personally</p>",
        "id": 202699728,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593701916
    },
    {
        "content": "<p>but maybe this actually warrants an MCP ?</p>",
        "id": 202699747,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593701925
    },
    {
        "content": "<p>I suppose it depends on the details that we were just discussing</p>",
        "id": 202699810,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593701957
    },
    {
        "content": "<ol>\n<li>name resolution does as much as possible but hides errors coming from bodies</li>\n<li>everything that might depend on that information isn't ran by default (in a <code>for each body in crate</code> loop) but because it's all queries, if something needs something else, it will run</li>\n</ol>",
        "id": 202699830,
        "sender_full_name": "eddyb",
        "timestamp": 1593701964
    },
    {
        "content": "<p>okay well I don't think we have time to discuss the other nominated issues</p>",
        "id": 202699956,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593702015
    },
    {
        "content": "<p>this would be so much easier and nicer if we had querified name resolution :(</p>",
        "id": 202699978,
        "sender_full_name": "eddyb",
        "timestamp": 1593702026
    },
    {
        "content": "<p>well I'll mention this one:</p>",
        "id": 202699989,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593702031
    },
    {
        "content": "<ul>\n<li>\"Rename TypeckTables to TypeckResults.\" <a href=\"https://github.com/rust-lang/rust/pull/72983\">rust#72983</a><ul>\n<li>This PR changes from <code>TypeckTables</code> to <code>TypeckResults</code> and it's already r+'d</li>\n<li><a href=\"https://github.com/rust-lang/rust/pull/72983#issuecomment-652498948\">@**nikomatsakis** thinks that the name is objectively better here</a></li>\n<li>Nominated to draw attention to it, people should be aware of the change</li>\n</ul>\n</li>\n</ul>",
        "id": 202699991,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593702031
    },
    {
        "content": "<p>because that's just nominated to raise awareness</p>",
        "id": 202700032,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593702046
    },
    {
        "content": "<p>oh I should make sure that's marked as blocked on <a href=\"https://github.com/rust-lang/rust/issues/73751\">#73751</a>, because they conflict</p>",
        "id": 202700055,
        "sender_full_name": "eddyb",
        "timestamp": 1593702060
    },
    {
        "content": "<p>thanks to everyone in <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span> for attending!</p>",
        "id": 202700075,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593702070
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-07-02.20.2354818/near/202699481\">said</a>:</p>\n<blockquote>\n<p>I suspect we don't want to document the hidden type, no? Or do we do so today?</p>\n</blockquote>\n<p>We don't document the hidden type, it shows up in the docs as <code>impl Trait</code>:</p>\n<p><a href=\"/user_uploads/4715/p-DKTNpbAaQe9sTLDjy-We0Q/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/p-DKTNpbAaQe9sTLDjy-We0Q/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/p-DKTNpbAaQe9sTLDjy-We0Q/image.png\"></a></div><p>The behavior today was that we skipped the ReplaceBodyWithLoop pass because <code>!</code> breaks <code>impl Trait</code> (it can't infer the type, so <code>tcx.analyse()</code> returned an error).  That meant it used to be you couldn't have name errors in functions returning impl trait. But since we no longer run type checking at all, there should be no problem. It looks like it's doing typechecking anyway though, it gave an ICE when I tried it out locally.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Debug</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">content</span>::<span class=\"n\">doesnt</span>::<span class=\"n\">matter</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>With stable:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0433]: failed to resolve: use of undeclared type or module `content`\n</code></pre></div>\n\n\n<p>With my PR:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">error</span>: <span class=\"nc\">internal</span><span class=\"w\"> </span><span class=\"n\">compiler</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">TyKind</span>::<span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"n\">constructed</span><span class=\"w\"> </span><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"n\">reported</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 202729865,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1593715818
    },
    {
        "content": "<p>I'll add this as a test case, I don't expect it to derail the PR</p>",
        "id": 202729900,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1593715840
    },
    {
        "content": "<p>well this is a different hidden type from <code>type Foo = impl Debug</code>, where I imagine it might be more interesting to showcase it, since there it's actually observable within the module(?) IIRC</p>",
        "id": 202729984,
        "sender_full_name": "simulacrum",
        "timestamp": 1593715893
    },
    {
        "content": "<p>but maybe I'm misremembering actually</p>",
        "id": 202729996,
        "sender_full_name": "simulacrum",
        "timestamp": 1593715900
    },
    {
        "content": "<p>and it's just like impl debug in a return type, in which case this seems fien</p>",
        "id": 202730008,
        "sender_full_name": "simulacrum",
        "timestamp": 1593715911
    },
    {
        "content": "<p>For <code>type Foo = impl Debug;</code> we don't hide errors so there's no change from the current behavior.</p>",
        "id": 202730082,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1593715939
    },
    {
        "content": "<p>oh hold on I lied, apparently those docs aren't showing up at all?</p>",
        "id": 202730775,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1593716273
    },
    {
        "content": "<p>I have lots of new tests to add <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 202730827,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1593716283
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-07-02.20.2354818/near/202698795\">said</a>:</p>\n<blockquote>\n<p>We'd need to ask <span class=\"user-mention silent\" data-user-id=\"281572\">marmeladema</span> about how it affects things other than rustdoc I think</p>\n</blockquote>\n<p>Sorry for my <strong>very</strong> late response, but I don't think <code>ReplaceBodyWithLoop</code> is used for anything else but rustdoc nowadays. <br>\nFor the record <a href=\"https://github.com/rust-lang/rust/issues/71104\">https://github.com/rust-lang/rust/issues/71104</a> was more a placeholder issue for all the cases I found when promoting <code>LocalDefId</code>s.  All cases found have been fixed when migrating <code>save_analysis</code> to HIR. The remaining issue about <code>ReplaceBodyWithLoop</code> is tracked at <a href=\"https://github.com/rust-lang/rust/issues/71820\">https://github.com/rust-lang/rust/issues/71820</a> and is really the one <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> is fighting against.</p>",
        "id": 202937273,
        "sender_full_name": "marmeladema",
        "timestamp": 1593981425
    },
    {
        "content": "<p><code>ReplaceBodyWithLoop</code> is still used as the basis for <code>-Z everybody_loops</code>, no?</p>",
        "id": 203028139,
        "sender_full_name": "pnkfelix",
        "timestamp": 1594062209
    },
    {
        "content": "<p>That is the purpose it was originally added for, and I at least still use it on occasion for test case reduction, as documented here: <a href=\"http://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/#L..loopification.....via.pretty-printer\">http://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/#L..loopification.....via.pretty-printer</a></p>",
        "id": 203028257,
        "sender_full_name": "pnkfelix",
        "timestamp": 1594062272
    },
    {
        "content": "<p>Yes, at least now that <a href=\"https://github.com/rust-lang/rust/pull/73523\">https://github.com/rust-lang/rust/pull/73523</a> is merged</p>",
        "id": 203212733,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594162139
    },
    {
        "content": "<p>(it was broken for a while)</p>",
        "id": 203212901,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594162286
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-07-02.20.2354818/near/202699454\">said</a>:</p>\n<blockquote>\n<p>(it feels to me like the right answer for \"cross-platform docs\" is probably generating for each platform and merging the outputs, but I'm sure that's been considered and rejected)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  <em>extremely</em> late response, but this is oldest open rustdoc issue: <a href=\"https://github.com/rust-lang/rust/issues/1998\">https://github.com/rust-lang/rust/issues/1998</a>. there's a summary by <span class=\"user-mention silent\" data-user-id=\"133692\">QuietMisdreavus</span> of why this is hard: <a href=\"https://github.com/rust-lang/rust/issues/1998#issuecomment-318800909\">https://github.com/rust-lang/rust/issues/1998#issuecomment-318800909</a>. tl;dr rustdoc sees things after macro-expansion, but to handle all platforms at once, it would need to somehow see them before.</p>",
        "id": 215214330,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604182266
    },
    {
        "content": "<p>and there needs to be someway to distinguish between items that overlap and have the same name</p>",
        "id": 215214389,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604182418
    }
]