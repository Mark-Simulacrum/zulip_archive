[
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span>; the triage meeting will be starting in 16 hours 20 minutes</p>",
        "id": 201907361,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1593034822
    },
    {
        "content": "<p>The <span class=\"user-group-mention\" data-user-group-id=\"2403\">@WG-prioritization</span> have done pre-triage in <a class=\"stream\" data-stream-id=\"227806\" href=\"/#narrow/stream/227806-t-compiler.2Fwg-prioritization\">#t-compiler/wg-prioritization</a></p>",
        "id": 201907383,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1593034836
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"2403\">@WG-prioritization</span> have prepared the <a href=\"https://hackmd.io/jK5av9hMS4aOF6_0cEU9jw?view\">meeting agenda</a></p>",
        "id": 201907401,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1593034867
    },
    {
        "content": "<p>We will have checkins from <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> and <span class=\"user-group-mention\" data-user-group-id=\"1123\">@WG-self-profile</span></p>",
        "id": 201907444,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1593034907
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> do you have something you want to share about <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span>?</p>",
        "id": 201907532,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1593034946
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> do you have something you want to share about <span class=\"user-group-mention\" data-user-group-id=\"1123\">@WG-self-profile</span>?</p>",
        "id": 201907565,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1593034978
    },
    {
        "content": "<p>Sure, yeah. I'll write some stuff up.</p>",
        "id": 201907587,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1593034994
    },
    {
        "content": "<p>+1</p>",
        "id": 201907590,
        "sender_full_name": "matklad",
        "timestamp": 1593035001
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> remember that you can paste your checkins directly here <a href=\"https://hackmd.io/jK5av9hMS4aOF6_0cEU9jw?both#WG-checkins\">https://hackmd.io/jK5av9hMS4aOF6_0cEU9jw?both#WG-checkins</a></p>",
        "id": 201960252,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1593086992
    },
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span>; the triage meeting will be starting in ~ 56 minutes</p>",
        "id": 201965626,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1593090242
    },
    {
        "content": "<p>is there a steering meeting tomorrow? /me looks</p>",
        "id": 201972619,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593093630
    },
    {
        "content": "<p>i'll add an announcement bullet for it</p>",
        "id": 201972664,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593093658
    },
    {
        "content": "<p>ohh right</p>",
        "id": 201972724,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1593093687
    },
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span>! Add a <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> emoji to show you're here :)</p>",
        "id": 201972893,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593093761
    },
    {
        "content": "<p>we will start off with 5 minutes for ...</p>\n<h2>Announcements</h2>",
        "id": 201972924,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593093777
    },
    {
        "content": "<ul>\n<li>Design meeting tomorrow (Friday): Areas of the compiler <a href=\"https://github.com/rust-lang/compiler-team/issues/288\">compiler-team#288</a></li>\n</ul>",
        "id": 201972942,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593093786
    },
    {
        "content": "<ul>\n<li>Major Changes Proposals:<ul>\n<li>New accepted proposals<ul>\n<li>\"Make <code>CONTRIBUTING.md</code> into a series of tutorials\" <a href=\"https://github.com/rust-lang/compiler-team/issues/296\">#296</a></li>\n<li>\"Preserve <code>PlaceContext</code> through projections\" <a href=\"https://github.com/rust-lang/compiler-team/issues/300\">#300</a></li>\n<li>\"Make lang-items private\" <a href=\"https://github.com/rust-lang/compiler-team/issues/301\">#301</a></li>\n<li>\"<code>#[deny(unsafe_op_in_unsafe_fn)]</code> in liballoc\" <a href=\"https://github.com/rust-lang/compiler-team/issues/306\">#306</a></li>\n</ul>\n</li>\n<li>Seconded proposals (in FCP)<ul>\n<li>\"illumos toolchain builds\" <a href=\"https://github.com/rust-lang/compiler-team/issues/279\">#279</a></li>\n<li>\"Support const parameters in type dependent paths\" <a href=\"https://github.com/rust-lang/compiler-team/issues/304\">#304</a></li>\n<li>\"<code>#![deny(unsafe_op_in_unsafe_fn)]</code> in libcore and libstd\" <a href=\"https://github.com/rust-lang/compiler-team/issues/317\">#317</a></li>\n<li>\"-Zmir-opt-level Reform\" <a href=\"https://github.com/rust-lang/compiler-team/issues/319\">#319</a></li>\n<li>\"Move CONTRIBUTING.md to rustc-dev-guide and instead point to Getting Started\" <a href=\"https://github.com/rust-lang/compiler-team/issues/320\">#320</a></li>\n</ul>\n</li>\n<li>New proposals (not seconded)<ul>\n<li>\"Add future-incompat entries to json diagnostic output\" <a href=\"https://github.com/rust-lang/compiler-team/issues/315\">#315</a></li>\n<li>\"MCP: Reorganize the rust-lang/rust repo directory structure\" <a href=\"https://github.com/rust-lang/compiler-team/issues/316\">#316</a></li>\n<li>\"Portable SIMD project group\" <a href=\"https://github.com/rust-lang/compiler-team/issues/321\">#321</a></li>\n</ul>\n</li>\n<li>Old proposals (not seconded)<ul>\n<li>\"Integration of the Cranelift backend with rustc\" <a href=\"https://github.com/rust-lang/compiler-team/issues/270\">#270</a></li>\n<li>\"Decentralize queries\" <a href=\"https://github.com/rust-lang/compiler-team/issues/277\">#277</a></li>\n<li>\"--extern-location to specify where an --extern dependency is defined\" <a href=\"https://github.com/rust-lang/compiler-team/issues/303\">#303</a></li>\n<li>\"Move Rust provided objects, libraries and binaries meant for self-contained linkage to separate directory\" <a href=\"https://github.com/rust-lang/compiler-team/issues/310\">#310</a></li>\n<li>\"RISC-V Linux Tier 2 Host support\" <a href=\"https://github.com/rust-lang/compiler-team/issues/312\">#312</a></li>\n<li>\"Switch from libbacktrace to gimli\" <a href=\"https://github.com/rust-lang/compiler-team/issues/313\">#313</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>",
        "id": 201972984,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593093807
    },
    {
        "content": "<p>hmm, that's a lot of issues to digest in one chunk</p>",
        "id": 201973055,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593093836
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> and <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> and I are privately discussing things to add to this template and so I am thinking harder at the moment about its structure)</p>",
        "id": 201973289,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593093936
    },
    {
        "content": "<p>after the meeting we can keep discussing this, lately seems like the agenda is very packed</p>",
        "id": 201973381,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1593093972
    },
    {
        "content": "<p>I don't remember if we started this last week or not, but we are going to be doing WG checkins at the start of the meeting instead of the end</p>",
        "id": 201973425,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593094000
    },
    {
        "content": "<p>so</p>",
        "id": 201973430,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593094001
    },
    {
        "content": "<p>(assuming no one else wants to chime in with separate announcements)</p>",
        "id": 201973467,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593094027
    },
    {
        "content": "<h3>WG checkins</h3>\n<p><span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> checkin by <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>:</p>\n<blockquote>\n<h4><a href=\"https://github.com/rust-lang/rfcs/pull/2912\">RFC2912</a> progress:</h4>\n<ul>\n<li>protocol conformance problems mostly fixed (there are no incompats which are known to cause significant issues, there might be some de-jure bugs though)</li>\n<li>all protocol extensions are documented at: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/dev/lsp-extensions.md\">https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/dev/lsp-extensions.md</a></li>\n<li>Upstream issues: <a href=\"https://github.com/microsoft/language-server-protocol/issues/created_by/matklad\">https://github.com/microsoft/language-server-protocol/issues/created_by/matklad</a></li>\n<li>Subscribe to <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/4604\">https://github.com/rust-analyzer/rust-analyzer/issues/4604</a> to receive notifications about new extensions.</li>\n<li>shipping via rustup is in progress: <a href=\"https://github.com/rust-lang/rust/pull/72978\">https://github.com/rust-lang/rust/pull/72978</a></li>\n<li>currently soft-blocked on someone figuring out building from vendored sources (needs just impl work)</li>\n<li>initial support of rust-analyzer in the official rust-lang extension (using rust-analyzer extension is still recommended though)</li>\n</ul>\n<h4>Org progress:</h4>\n<ul>\n<li><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> joined rust-analyzer.<br>\n We finally have a shared expert between rustc and rust-analyzer, <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></li>\n<li>Rate of PRs exceeds review capacity.</li>\n<li>Official help and discussion forum category: <a href=\"https://users.rust-lang.org/c/ide/14\">https://users.rust-lang.org/c/ide/14</a></li>\n</ul>\n<h4>Impl progress:</h4>\n<ul>\n<li>Documentation for features is now generated from the source code, and contains links to the source code:<br>\n<a href=\"https://rust-analyzer.github.io/manual.html#features\">https://rust-analyzer.github.io/manual.html#features</a>.</li>\n<li>(as of yesterday) new semantic-less IR (<code>ItemTree</code>) to avoid repeated reparsing of files.</li>\n<li>A bunch of perf &amp; memory usage improvements.</li>\n<li>Semantic syntax highlighting of doc comments.</li>\n<li>Chalk updates and various assorted fixes to the type inference.</li>\n<li>Better support for non-cargo based projects.</li>\n<li>New (final hopefully?) implementation of Virtual File System</li>\n</ul>\n</blockquote>",
        "id": 201973488,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593094039
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 201973529,
        "sender_full_name": "matklad",
        "timestamp": 1593094062
    },
    {
        "content": "<p>Very happy to see that <span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> joined rust-analyzer team</p>",
        "id": 201973663,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593094106
    },
    {
        "content": "<p>or however you want to phrase it</p>",
        "id": 201973673,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593094114
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 201973675,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1593094116
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1123\">@WG-self-profile</span> checkin by <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span>:</p>\n<blockquote>\n<ul>\n<li>Some other Rust projects have shown interest in using <code>measureme</code> in their crates.<br>\n  Boa, a JavaScript interpreter written in Rust, has done the integration <a href=\"https://github.com/boa-dev/boa/pull/317#issuecomment-636464496\">with some cool results</a>.</li>\n<li>We've made a few small changes to the <code>summarize</code> command output to hide columns that are rustc specific when that data isn't present.</li>\n<li><span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> has started working on a tool to \"blame\" compile time to <code>DefId</code>s.<ul>\n<li>It's too early to really show anything off because it barely works at all.</li>\n<li>One major issue is that we can't see inside LLVM so ~80% of compilation time for crates tested so far is just blamed to LLVM. That's not particularly useful.</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 201973717,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593094133
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> is the LLVM blame really all just going to LLVM on whole crate? I would think that with codegen unit partitioning, we could at least assign blame to ... a subset of the crate that corresponds to the DefId's for a cgu?</p>",
        "id": 201973886,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593094210
    },
    {
        "content": "<p>Yes, plus, can we perhaps apportion it proportionately to the amount of LLVM bit code?</p>",
        "id": 201973930,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593094241
    },
    {
        "content": "<p>Or is it just not useful to show such cgu-based blame, because our cgu contents are,I think, scattered?</p>",
        "id": 201973940,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593094247
    },
    {
        "content": "<p>It's not accurate, but I bet it's a reasonable approximation</p>",
        "id": 201973943,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593094249
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> is that going to account for work from LLVM's inlining choices?</p>",
        "id": 201973988,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593094275
    },
    {
        "content": "<p>I would measure it before optimization</p>",
        "id": 201974006,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593094283
    },
    {
        "content": "<p>but that's my point?</p>",
        "id": 201974020,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593094293
    },
    {
        "content": "<p>a fn may have small bitcode before inlining decisions</p>",
        "id": 201974037,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593094304
    },
    {
        "content": "<p>OK? and probably editing that fn isn't going to help you as much as editing the callees :)</p>",
        "id": 201974110,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593094335
    },
    {
        "content": "<p>but after LLVM decides to inline, its proportionate compile-time may increase to more than you'd expect based on original bitcode size?</p>",
        "id": 201974124,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593094343
    },
    {
        "content": "<p>we do have full callgraph information, right? so we could plausibly show a \"transitive cost\" or whatever</p>",
        "id": 201974127,
        "sender_full_name": "simulacrum",
        "timestamp": 1593094344
    },
    {
        "content": "<p>anyway I don't know, it's a heuristic, we'd have to see how it works</p>",
        "id": 201974132,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593094348
    },
    {
        "content": "<p>(Sorry, afk right now. Will respond at the end of the meeting)</p>",
        "id": 201974138,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1593094349
    },
    {
        "content": "<p>anyway it sounds cool, and worth talking about more. <span aria-label=\"smile\" class=\"emoji emoji-263a\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 201974172,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593094370
    },
    {
        "content": "<p>(well modulo LLVM inlining dynamic dispatch, but there's not much we can do there)</p>",
        "id": 201974175,
        "sender_full_name": "simulacrum",
        "timestamp": 1593094373
    },
    {
        "content": "<p>anyway this is all great news <span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> -- I'm sure we can experiment and improve the LLVM efficacy</p>",
        "id": 201974177,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593094374
    },
    {
        "content": "<p>/me tries to remember if we can extract  knowledge of inlining decisions in some manner</p>",
        "id": 201974240,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593094408
    },
    {
        "content": "<p>anyway like <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> said, agenda is packed, so lets move along</p>",
        "id": 201974266,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593094432
    },
    {
        "content": "<p>s</p>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Abeta-nominated+-label%3Abeta-accepted+label%3AT-compiler\">T-compiler</a></p>",
        "id": 201974276,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593094441
    },
    {
        "content": "<p>arg</p>",
        "id": 201974306,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593094443
    },
    {
        "content": "<h2>Beta-nominations</h2>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Abeta-nominated+-label%3Abeta-accepted+label%3AT-compiler\">T-compiler</a></p>",
        "id": 201974330,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593094449
    },
    {
        "content": "<ul>\n<li>\"Change how compiler-builtins gets many CGUs\" <a href=\"https://github.com/rust-lang/rust/pull/73136\">#73136</a><ul>\n<li>Fixes <a href=\"https://github.com/rust-lang/rust/issues/73135\">#73135</a>, a <code>P-medium</code> performance regression.</li>\n<li>Changes how compiler builtins are built.</li>\n<li>Only 1 addition and 9 deletions to the compiler, and one new option in <code>Cargo.toml</code>.</li>\n</ul>\n</li>\n</ul>",
        "id": 201974354,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593094467
    },
    {
        "content": "<p>I have mixed feelings</p>",
        "id": 201974652,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593094618
    },
    {
        "content": "<p>given that <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> themself said that this is using a relatively new Cargo feature, I'm somewhat inclined to let it ride the trains</p>",
        "id": 201974739,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593094656
    },
    {
        "content": "<p>still</p>",
        "id": 201974791,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593094674
    },
    {
        "content": "<p>the patch is pretty trivial :)</p>",
        "id": 201974801,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593094680
    },
    {
        "content": "<blockquote>\n<p>I can confirm the Firefox linking error mentioned in <a href=\"https://github.com/rust-lang/rust/issues/73136\">#73136</a> (comment) does not happen anymore with nightly-2020-06-20, which is the first nightly with this fix. I cannot, however, say anything about nightly-2020-06-19, because rustc crashed during compilation (and so did nightly-2020-06-18).</p>\n</blockquote>",
        "id": 201974855,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1593094696
    },
    {
        "content": "<p>I'm not sure which cargo feature this is leaning on exactly?</p>",
        "id": 201974861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593094699
    },
    {
        "content": "<p>I think I'd be inclined to backpor it if it fixes a FF regression</p>",
        "id": 201974886,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593094716
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/73136#issuecomment-648232482\">profile overrides</a></p>",
        "id": 201974909,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593094727
    },
    {
        "content": "<blockquote>\n<p>FWIW this patch as-is uses a relatively new Cargo feature of profile overrides, and if it's backported I'd recommend double-checking that it works before landing.</p>\n</blockquote>",
        "id": 201974924,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1593094737
    },
    {
        "content": "<p>I see</p>",
        "id": 201974989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593094767
    },
    {
        "content": "<p>Will cargo need to backport anything?</p>",
        "id": 201975126,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1593094813
    },
    {
        "content": "<p>yeah I guess that is an important question to resolve</p>",
        "id": 201975148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593094822
    },
    {
        "content": "<p>no cargo backport needed, there's an alternative fix</p>",
        "id": 201975178,
        "sender_full_name": "simulacrum",
        "timestamp": 1593094832
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> as in, a different PR you'd backport to beta?</p>",
        "id": 201975220,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593094850
    },
    {
        "content": "<p>that's a different conversation, no?</p>",
        "id": 201975242,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593094859
    },
    {
        "content": "<p>well no, basically we can declaratively say that compiler-builtins gets this special arg</p>",
        "id": 201975292,
        "sender_full_name": "simulacrum",
        "timestamp": 1593094876
    },
    {
        "content": "<p>or we can specify so in bootstrap manually</p>",
        "id": 201975308,
        "sender_full_name": "simulacrum",
        "timestamp": 1593094882
    },
    {
        "content": "<p>obviously the cargo.toml change is nicer, but they should be equivalent</p>",
        "id": 201975336,
        "sender_full_name": "simulacrum",
        "timestamp": 1593094897
    },
    {
        "content": "<p>(I consider them equivalent, modulo things like xargo, but those usually use nightly toolchains I think)</p>",
        "id": 201975377,
        "sender_full_name": "simulacrum",
        "timestamp": 1593094915
    },
    {
        "content": "<p>I think I'd 1. prefer to consider the change <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> is described, but 2. I'd want to actually see it too before I approve it.</p>",
        "id": 201975479,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593094948
    },
    {
        "content": "<p>I mean it's a similar 2-3 line change in bootstrap, but sure</p>",
        "id": 201975519,
        "sender_full_name": "simulacrum",
        "timestamp": 1593094970
    },
    {
        "content": "<p>I'm just saying, I cannot infer what the change is from this conversation.</p>",
        "id": 201975544,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593094987
    },
    {
        "content": "<p>basically <a href=\"https://github.com/rust-lang/rust/commit/926c7b6bb53b8a30b712759eaa9641040d15caef\">https://github.com/rust-lang/rust/commit/926c7b6bb53b8a30b712759eaa9641040d15caef</a></p>",
        "id": 201975545,
        "sender_full_name": "simulacrum",
        "timestamp": 1593094987
    },
    {
        "content": "<p>where did that come from? I don't see it linked from the PR ?</p>",
        "id": 201975728,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593095079
    },
    {
        "content": "<p>(as a policy note, I would personally consider this basically the equivalent of \"merge conflicts\" when backporting and something that T-compiler doesn't need to approve explicitly/separately, but maybe that's not the right approach)</p>",
        "id": 201975732,
        "sender_full_name": "simulacrum",
        "timestamp": 1593095080
    },
    {
        "content": "<p>that's an earlier version of this PR</p>",
        "id": 201975741,
        "sender_full_name": "simulacrum",
        "timestamp": 1593095087
    },
    {
        "content": "<p>ah I see</p>",
        "id": 201975793,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593095112
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/73136#issuecomment-641537423\">https://github.com/rust-lang/rust/pull/73136#issuecomment-641537423</a></p>",
        "id": 201975794,
        "sender_full_name": "simulacrum",
        "timestamp": 1593095113
    },
    {
        "content": "<p>I'd be <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> to backporting that version, based on the fact we know it fixes things</p>",
        "id": 201975835,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593095134
    },
    {
        "content": "<p>and it sure <em>seems</em> cleaner</p>",
        "id": 201975846,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593095142
    },
    {
        "content": "<p>to just declare a lot of CGUs vs having some special-cased logic</p>",
        "id": 201975862,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593095152
    },
    {
        "content": "<p>\"cleaner\" == \"less risky\"</p>",
        "id": 201975928,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593095169
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> you're saying <em>both</em> versions of this PR are cleaner than teh status quo, right?</p>",
        "id": 201975956,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593095185
    },
    {
        "content": "<p>I do agree with that</p>",
        "id": 201975961,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593095189
    },
    {
        "content": "<p>and I also would be more inclined to <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> backporting the earlier version, for the same reason that <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> outlined (we know it fixes the FF problem, and it doesn't rely on new cargo stuff)</p>",
        "id": 201976038,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593095225
    },
    {
        "content": "<p>so, okay, lets do that then?</p>",
        "id": 201976044,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593095231
    },
    {
        "content": "<p>\"Reoder order in which MinGW libs are linked to fix recent breakage\" <a href=\"https://github.com/rust-lang/rust/pull/73184\">#73184</a></p>\n<p>- \"Recent upstream mingw-w64 changes made libmsvcrt depend on libmingwex breaking compilation in some cases when using external MinGW.\"<br>\n  - This one <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-06-18.20.2354818/near/201275224\">was discussed last week</a>. We decided to wait a week.<br>\n  - According to <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> <a href=\"https://github.com/rust-lang/rust/pull/73184#issuecomment-646078056\">\"CI has old mingw and this PR passed it.\"</a></p>",
        "id": 201976114,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593095264
    },
    {
        "content": "<p>(I think based on <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> 's comment, we can go ahead and approve this. I was tempted to unilaterally approve it last week after I saw that remark, but decided waiting wouldn't hurt.)</p>",
        "id": 201976239,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593095318
    },
    {
        "content": "<ul>\n<li>\"Perform obligation deduplication to avoid buggy <code>ExistentialMismatch</code>\" <a href=\"https://github.com/rust-lang/rust/pull/73485\">#73485</a><ul>\n<li>Not merged yet into master.</li>\n<li>Fixes a <code>P-high</code> stable regression from 1.33.0, <a href=\"https://github.com/rust-lang/rust/issues/59326\">#59326</a>, rejecting previously valid code. See <a href=\"https://github.com/rust-lang/rust/issues/59326#issuecomment-645911137\">MCVE</a>.</li>\n<li>Changes from this PR are very minimal, with 13 additions and 3 deletions.</li>\n<li><a href=\"https://perf.rust-lang.org/compare.html?start=e55d3f9c5213fe1a25366450127bdff67ad1eca2&amp;end=c9f613bb7aaebcb256e34b959196f56f62ca74c8\">Tested to incur no performance regression.</a></li>\n</ul>\n</li>\n</ul>",
        "id": 201976290,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593095345
    },
    {
        "content": "<p>it's not merged on master</p>",
        "id": 201976329,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1593095363
    },
    {
        "content": "<p>maybe I should just not add those in the future</p>",
        "id": 201976350,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1593095375
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> hmm</p>",
        "id": 201976363,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593095379
    },
    {
        "content": "<p>I don't think its fundamentally wrong to put up the backport question before the merge to master occurs</p>",
        "id": 201976448,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593095404
    },
    {
        "content": "<p>right now <span class=\"user-group-mention\" data-user-group-id=\"2403\">@WG-prioritization</span> is adding all the PRs that have the beta/stable nomination label regardless if they are merged or not</p>",
        "id": 201976452,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1593095406
    },
    {
        "content": "<p>the only thing I would question is <strong>doing</strong> the actual backport before the merge to master</p>",
        "id": 201976489,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593095429
    },
    {
        "content": "<p>I wound't :), I guess after some discussions in the PR the code may change</p>",
        "id": 201976503,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1593095441
    },
    {
        "content": "<p>You wouldn't do the backport? Or you wouldn't question it?</p>",
        "id": 201976533,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593095457
    },
    {
        "content": "<p>I wouldn't backport, unless we have the release in this week or something like that and we need to rush things</p>",
        "id": 201976594,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1593095485
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-06-25.20.2354818/near/201976503\">said</a>:</p>\n<blockquote>\n<p>I wound't :), I guess after some discussions in the PR the code may change</p>\n</blockquote>\n<p>yes, but I tend to trust the reviewers to re-nominate a PR if they think the code has changed so much as to warrant re-approval</p>",
        "id": 201976607,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593095495
    },
    {
        "content": "<p>fair enough :)</p>",
        "id": 201976634,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1593095507
    },
    {
        "content": "<p>I still am not sure whether we are discussing the question of when one lands the backport, vs when one approves a backport at this meeting, vs when one decides to put a backport nomination onto this meetings agenda</p>",
        "id": 201976764,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593095565
    },
    {
        "content": "<p>but we have gone way off course</p>",
        "id": 201976786,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593095580
    },
    {
        "content": "<p>I'm not sure I like the fix (I'd sort of rather not have the duplicates to begin with) but it doesn't seem harmful</p>",
        "id": 201976848,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593095613
    },
    {
        "content": "<p>(which is fine; but lets get back on track)</p>",
        "id": 201976850,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593095614
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-06-25.20.2354818/near/201976848\">said</a>:</p>\n<blockquote>\n<p>I'm not sure I like the fix (I'd sort of rather not have the duplicates to begin with) but it doesn't seem harmful</p>\n</blockquote>\n<p>so there's a semi-analogy here with our diagnostics</p>",
        "id": 201977031,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593095704
    },
    {
        "content": "<p>namely, we de-duplicate diagnostics that are presented to the end-user</p>",
        "id": 201977084,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593095721
    },
    {
        "content": "<p>however, certain compilation modes will disable that deduplication</p>",
        "id": 201977128,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593095746
    },
    {
        "content": "<p>in particular, compiletest will not deduplicate</p>",
        "id": 201977156,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593095760
    },
    {
        "content": "<p>(I cannot recall offhand if this is because of the json error-format, or some other flag it passes. I think its a different flag, probably a <code>-Z</code> one. I encountered this while prototyping cargo report-future-incompat.)</p>",
        "id": 201977281,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593095802
    },
    {
        "content": "<p>Regarding the fix, I don't like it either but it is what we were doing before</p>",
        "id": 201977351,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1593095842
    },
    {
        "content": "<p>well</p>",
        "id": 201977353,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593095843
    },
    {
        "content": "<p>The reason I bring this up is: <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> , would you be happier if we had a way to opt into not removing the duplicates, and then using that in our test suite ?</p>",
        "id": 201977356,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593095844
    },
    {
        "content": "<p>no</p>",
        "id": 201977371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593095851
    },
    {
        "content": "<p>this seems different,</p>",
        "id": 201977390,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593095860
    },
    {
        "content": "<p>in that it'll \"change behavior\" versus producing more errors</p>",
        "id": 201977408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593095872
    },
    {
        "content": "<p>(I mean for the tests where we currently have no duplicates, that is. To ensure they don't regress)</p>",
        "id": 201977415,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593095876
    },
    {
        "content": "<p>true</p>",
        "id": 201977422,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593095880
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119031\">Esteban Küber</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-06-25.20.2354818/near/201977351\">said</a>:</p>\n<blockquote>\n<p>Regarding the fix, I don't like it either but it is what we were doing before</p>\n</blockquote>\n<p>before the original PR?</p>",
        "id": 201977448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593095882
    },
    {
        "content": "<p>Correct</p>",
        "id": 201977488,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1593095892
    },
    {
        "content": "<p>OK.</p>",
        "id": 201977504,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593095898
    },
    {
        "content": "<p>well I voted for <span aria-label=\"back\" class=\"emoji emoji-1f519\" role=\"img\" title=\"back\">:back:</span> in any case, but waiting till it lands seems fine</p>",
        "id": 201977545,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593095921
    },
    {
        "content": "<p>okay, beta-backport approved. I'll try to make sure my backport approving comment captures some of the desiderata outlined here.</p>",
        "id": 201977660,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593095976
    },
    {
        "content": "<p>If you want I can add a fixme comment to it. And I don't know if eddyb is avail for the review. If someone here wants to look at the pr yourself... <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 201977669,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1593095977
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Abeta-nominated+-label%3Abeta-accepted+label%3Alibs-impl\">libs-impl</a></p>\n<ul>\n<li>No beta nominations this time.</li>\n</ul>",
        "id": 201977699,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593095993
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Abeta-nominated+-label%3Abeta-accepted+label%3AT-rustdoc\">T-rustdoc</a></p>\n<ul>\n<li>\"rustdoc: Fix doc aliases with crate filtering\" <a href=\"https://github.com/rust-lang/rust/pull/73644\">#73644</a></li>\n</ul>",
        "id": 201977720,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593096002
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119031\">Esteban Küber</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-06-25.20.2354818/near/201977669\">said</a>:</p>\n<blockquote>\n<p>If you want I can add a fixme comment to it. And I don't know if eddyb is avail for the review. If someone here wants to look at the pr yourself... <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>\n</blockquote>\n<p>you can r? me</p>",
        "id": 201977869,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593096048
    },
    {
        "content": "<p>/me wonders whether he/we made a mistake in agreeing to make decisions here regarding <code>rustdoc</code></p>",
        "id": 201977912,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593096065
    },
    {
        "content": "<p>i guess backport approved</p>",
        "id": 201978025,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593096117
    },
    {
        "content": "<h2>Stable-nominations</h2>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Astable-nominated+-label%3Astable-accepted+label%3AT-compiler\">T-compiler</a></p>\n<ul>\n<li>\"Perform obligation deduplication to avoid buggy <code>ExistentialMismatch</code>\" <a href=\"https://github.com/rust-lang/rust/pull/73485\">#73485</a><ul>\n<li>Was also beta nominated.</li>\n<li>Not merged yet into master.</li>\n<li>Fixes a <code>P-high</code> stable regression from 1.33.0, <a href=\"https://github.com/rust-lang/rust/issues/59326\">#59326</a>, rejecting previously valid code. See <a href=\"https://github.com/rust-lang/rust/issues/59326#issuecomment-645911137\">MCVE</a>.</li>\n<li>Changes from this PR are very minimal, with 13 additions and 3 deletions.</li>\n<li><a href=\"https://perf.rust-lang.org/compare.html?start=e55d3f9c5213fe1a25366450127bdff67ad1eca2&amp;end=c9f613bb7aaebcb256e34b959196f56f62ca74c8\">Tested to incur no performance regression.</a></li>\n</ul>\n</li>\n</ul>",
        "id": 201978099,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593096134
    },
    {
        "content": "<p>we were just discussing this, obviously</p>",
        "id": 201978166,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593096169
    },
    {
        "content": "<p>heh I don't .. really understand this diff in <a href=\"https://github.com/rust-lang/rust/issues/73644\">#73644</a>. Am I being silly? Isn't <code>if(A &amp;&amp; B &amp;&amp; C) { X }</code> the same as <code>if(A) { if (B&amp;&amp;C) { X } }</code>?</p>",
        "id": 201978175,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593096173
    },
    {
        "content": "<p>note that it's the one from <span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> ... right :)</p>",
        "id": 201978176,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1593096173
    },
    {
        "content": "<p>oh, I see, the for changes too</p>",
        "id": 201978229,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593096199
    },
    {
        "content": "<p>the body of the for, you mean, right?</p>",
        "id": 201978377,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593096252
    },
    {
        "content": "<p>oh no</p>",
        "id": 201978386,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593096257
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-06-25.20.2354818/near/201978175\">said</a>:</p>\n<blockquote>\n<p>heh I don't .. really understand this diff in <a href=\"https://github.com/rust-lang/rust/issues/73644\">#73644</a>. Am I being silly? Isn't <code>if(A &amp;&amp; B &amp;&amp; C) { X }</code> the same as <code>if(A) { if (B&amp;&amp;C) { X } }</code>?</p>\n</blockquote>\n<p>the else matches the top if and not the whole condition</p>",
        "id": 201978393,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1593096261
    },
    {
        "content": "<p>the boundary conditions too</p>",
        "id": 201978402,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593096263
    },
    {
        "content": "<p>I didn't notice there was an else, ok</p>",
        "id": 201978491,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593096324
    },
    {
        "content": "<p>so back to the stable-nom of <a href=\"https://github.com/rust-lang/rust/issues/73485\">#73485</a></p>",
        "id": 201978551,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593096355
    },
    {
        "content": "<p>I guess <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> already marked <span aria-label=\"back\" class=\"emoji emoji-1f519\" role=\"img\" title=\"back\">:back:</span> on it, and I'm not expecting objections from anyone else, I think</p>",
        "id": 201978623,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593096376
    },
    {
        "content": "<p>so stable backport approved then</p>",
        "id": 201978660,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593096391
    },
    {
        "content": "<p>remaining stable noms</p>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Astable-nominated+-label%3Astable-accepted+label%3Alibs-impl\">libs-impl</a></p>\n<ul>\n<li>No stable nominations this time.</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Astable-nominated+-label%3Astable-accepted+label%3AT-rustdoc\">T-rustdoc</a></p>\n<ul>\n<li>No stable nominations this time.</li>\n</ul>",
        "id": 201978715,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593096409
    },
    {
        "content": "<h2>PRs S-waiting-on-team</h2>\n<p><a href=\"https://github.com/rust-lang/rust/pulls?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AS-waiting-on-team+label%3AT-compiler\">T-compiler</a></p>\n<ul>\n<li>\"Implement <code>--extern-location</code>\" <a href=\"https://github.com/rust-lang/rust/pull/72603\">#72603</a><ul>\n<li>This was discussed 2 weeks ago</li>\n<li><a href=\"https://github.com/rust-lang/compiler-team/issues/303\">an MCP is pending</a> and waiting to be seconded</li>\n<li><a href=\"https://github.com/rust-lang/compiler-team/issues/303#issuecomment-647584102\">According to <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> it seems that it have reached a stopping point</a></li>\n</ul>\n</li>\n</ul>",
        "id": 201978735,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593096420
    },
    {
        "content": "<p>it seems like the author really wants a second</p>",
        "id": 201978859,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593096470
    },
    {
        "content": "<p>Thing is, I can't tell if we want to do this :)</p>",
        "id": 201978933,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593096493
    },
    {
        "content": "<p>literally they requested a second to second :)</p>",
        "id": 201978938,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1593096496
    },
    {
        "content": "<p>right</p>",
        "id": 201978939,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593096497
    },
    {
        "content": "<p>the question of \"is this the right thing for cargo\" is interesting</p>",
        "id": 201979004,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593096532
    },
    {
        "content": "<p>because</p>",
        "id": 201979009,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593096535
    },
    {
        "content": "<p>I guess I'm inclined to go for it, though, based on the fact that they had good experiences, with some caveats.</p>",
        "id": 201979019,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593096540
    },
    {
        "content": "<p>due to cargo's tight integration with rustc</p>",
        "id": 201979023,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593096541
    },
    {
        "content": "<p>I figure we can resolve that design in a lazy fashion</p>",
        "id": 201979062,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593096557
    },
    {
        "content": "<p>so the real question to me is</p>",
        "id": 201979097,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593096566
    },
    {
        "content": "<p>Does this resolve problems for <em>non-cargo</em> rustc drivers</p>",
        "id": 201979112,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593096576
    },
    {
        "content": "<p>I also think that the cargo concern (many possible consumers) isn't (to me) a total blocker</p>",
        "id": 201979124,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593096582
    },
    {
        "content": "<p>e.g., we give warnings now about unused imports and things</p>",
        "id": 201979150,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593096593
    },
    {
        "content": "<p>even though feature flags might mean it's wrong</p>",
        "id": 201979160,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593096597
    },
    {
        "content": "<p>I personally would opt into this</p>",
        "id": 201979224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593096606
    },
    {
        "content": "<p>oh I guess you can't easily <code>#[allow]</code>...</p>",
        "id": 201979249,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593096620
    },
    {
        "content": "<p>...well, maybe add dummy uses, idk.</p>",
        "id": 201979268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593096632
    },
    {
        "content": "<p>anyway</p>",
        "id": 201979294,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593096642
    },
    {
        "content": "<p>we don't need to make a decision about this in this meeting</p>",
        "id": 201979304,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593096649
    },
    {
        "content": "<p>just raise awareness</p>",
        "id": 201979311,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593096652
    },
    {
        "content": "<p>but anyway I'd like to hear from petrochenkov and others who were more actively participating. I guess I'll put in review the thread and put in some thoughts.</p>",
        "id": 201979332,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593096662
    },
    {
        "content": "<p>Is there anyone present here who is actively interested in non-cargo rustc drivers?</p>",
        "id": 201979363,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593096677
    },
    {
        "content": "<p>I think that we may want/need more representation from that community</p>",
        "id": 201979381,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593096690
    },
    {
        "content": "<p>or maybe I have the wrong instinct about whose voice to promote</p>",
        "id": 201979419,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593096710
    },
    {
        "content": "<p>lets move along</p>",
        "id": 201979463,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593096722
    },
    {
        "content": "<h2>Issues of Note</h2>\n<h3>Short Summary</h3>\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AT-compiler+label%3AP-critical+\">3 T-compiler P-critical issues</a><ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AT-compiler+label%3AP-critical+no%3Aassignee\">2 of those are unassigned</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AT-compiler+label%3AP-high+\">48 T-compiler P-high issues</a><ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AT-compiler+label%3AP-high+no%3Aassignee\">27 of those are unassigned</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/rust-lang/rust/labels/regression-from-stable-to-beta\">2 P-critical, 1 P-high, 4 P-medium, 0 P-low regression-from-stable-to-beta</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/labels/regression-from-stable-to-nightly\">0 P-critical, 1 P-high, 4 P-medium, 1 P-low regression-from-stable-to-nightly</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/labels/regression-from-stable-to-stable\">0 P-critical, 14 P-high, 44 P-medium, 4 P-low regression-from-stable-to-stable</a></li>\n</ul>",
        "id": 201979487,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593096730
    },
    {
        "content": "<h3>P-critical</h3>\n<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AP-critical+label%3AT-compiler\">T-compiler</a></p>\n<ul>\n<li>\"Slice index becomes wrong (beta regression)\" <a href=\"https://github.com/rust-lang/rust/issues/73223\">#73223</a><ul>\n<li>It's a regression from stable to beta</li>\n<li><a href=\"https://github.com/rust-lang/rust/pull/73262\">PR is merged already on nightly</a></li>\n<li>It's beta accepted, so this is waiting for the actual backport</li>\n</ul>\n</li>\n</ul>",
        "id": 201979530,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593096753
    },
    {
        "content": "<ul>\n<li>\"ICE: MIR const-checker found novel structural match violation\" <a href=\"https://github.com/rust-lang/rust/issues/73431\">#73431</a><ul>\n<li>ICE when matching with a trait constant</li>\n<li>Beta regression caused by <a href=\"https://github.com/rust-lang/rust/pull/67343\">#67343</a> (<span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span>)</li>\n<li><a href=\"https://github.com/rust-lang/rust/pull/73446\">PR is merged already on nightly</a></li>\n<li>It's beta accepted, so this is waiting for the actual backport</li>\n</ul>\n</li>\n</ul>",
        "id": 201979568,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593096772
    },
    {
        "content": "<ul>\n<li>\"cannot create local mono-item for DefId\" <a href=\"https://github.com/rust-lang/rust/issues/73537\">#73537</a><ul>\n<li><a href=\"#narrow/stream/227806-t-compiler.2Fwg-prioritization/topic/I-prioritize.20.2373537.20cannot.20create.20local.20mono-item.20for.20DefId\">Labeled as <code>P-critical</code> to raise awareness</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/73537#issuecomment-649364509\">This seems to be fixed seeing some of the latest comments</a>, still needs a test.</li>\n</ul>\n</li>\n</ul>",
        "id": 201979619,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593096792
    },
    {
        "content": "<p>okay, this is all much less scary than I feared when I first saw that summary</p>",
        "id": 201979654,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593096813
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AP-critical+label%3Alibs-impl\">libs-impl</a></p>\n<ul>\n<li>No P-critical issues for libs-impl this time.</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AP-critical+label%3AT-rustdoc\">T-rustdoc</a></p>\n<ul>\n<li>No P-critical issues for T-rustdoc this time.</li>\n</ul>",
        "id": 201979686,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593096824
    },
    {
        "content": "<h3>Unassigned P-high regressions</h3>\n<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3Aregression-from-stable-to-beta+P-high+no%3Aassignee\">Beta regressions</a></p>\n<ul>\n<li>\"Unreasonably long (and useless) error message doing modulo on non-existent variable: overflow evaluating the requirement `typenum::UInt&lt;typenum::UInt…\" <a href=\"https://github.com/rust-lang/rust/issues/72839\">#72839</a><ul>\n<li><a href=\"https://github.com/rust-lang/rust/pull/73005\">PR is merged already</a></li>\n<li>It's already beta accepted</li>\n<li>So this is waiting for a beta backport</li>\n</ul>\n</li>\n</ul>",
        "id": 201979701,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593096833
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3Aregression-from-stable-to-nightly+P-high+no%3Aassignee\">Nightly regressions</a></p>\n<ul>\n<li>No unassigned P-high nightly regressions this time.</li>\n</ul>",
        "id": 201979753,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593096844
    },
    {
        "content": "<h2>Performance logs</h2>\n<p><a href=\"https://github.com/rust-lang/rustc-perf/tree/master/triage#triage-logs\">Triage done by njn</a>.<br>\nLatest revision: <a href=\"https://github.com/rust-lang/rust/commit/6bb3dbfc6c6d8992d08431f320ba296a0c2f7498\">6bb3dbfc6c6d8992d08431f320ba296a0c2f7498</a>.</p>\n<p><em>Lots of improvements this week!</em> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>\n<p>Having done this for a few weeks now, I see that close to half of the PRs with significant performance effects are rollups.</p>\n<p>Regressions</p>\n<ul>\n<li>None.</li>\n</ul>\n<p>Improvements</p>\n<ul>\n<li>\n<p><a href=\"https://github.com/rust-lang/rust/pull/73563#issuecomment-647319856\">Rollup of 9 pull requests</a><br>\n  (<a href=\"https://perf.rust-lang.org/compare.html?start=f455e46eae1a227d735091091144601b467e1565&amp;end=7058471adec80a2a1e6092443e08546768c9c894&amp;stat=instructions:u\">instructions</a>, <a href=\"https://perf.rust-lang.org/compare.html?start=f455e46eae1a227d735091091144601b467e1565&amp;end=7058471adec80a2a1e6092443e08546768c9c894&amp;stat=max-rss\">max-rss</a>):<br>\n  Up to 33.6% instruction wins on a stress test, and up to 10.3% instructions<br>\n  wins on several real-world benchmarks. Also a max-rss win.<br>\n<a href=\"https://github.com/rust-lang/rust/pull/72788\">#72788</a> may be the cause?</p>\n</li>\n<li>\n<p><a href=\"https://github.com/rust-lang/rust/pull/73180#issuecomment-647824906\">Cache flags and escaping vars for predicates</a><br>\n  (<a href=\"https://perf.rust-lang.org/compare.html?start=a8cf3991177f30694200002cd9479ffbbe6d9a1a&amp;end=1a4e2b6f9c75a0e21722c88a0e3b610d6ffc3ae3&amp;stat=instructions:u\">instructions</a>):<br>\n  Up to 4.9% wins across numerous benchmarks.</p>\n</li>\n<li>\n<p><a href=\"https://github.com/rust-lang/rust/pull/72962#issuecomment-647822868\">store <code>ObligationCause</code> on the heap</a><br>\n  (<a href=\"https://perf.rust-lang.org/compare.html?start=f315c35a77e40bd11ce81fedc0556be0f410bbf4&amp;end=c8a9c340de32cb70c8bad8af1a4474f805c5a969&amp;stat=instructions:u\">instructions</a>):<br>\n  Up to 3.5% wins across numerous benchmarks.</p>\n</li>\n<li>\n<p><a href=\"https://github.com/rust-lang/rust/pull/72936#issuecomment-647829776\">Upgrade Chalk</a><br>\n  (<a href=\"https://perf.rust-lang.org/compare.html?start=349f6bfb11d73ebb6a272f9a3d00883484f8218c&amp;end=a8cf3991177f30694200002cd9479ffbbe6d9a1a&amp;stat=instructions:u\">instructions</a>):<br>\n  Up to 1.5% wins across numerous benchmarks.</p>\n</li>\n<li>\n<p><a href=\"https://github.com/rust-lang/rust/pull/73511#issuecomment-647828029\">Rollup of 13 pull requests</a><br>\n  (<a href=\"https://perf.rust-lang.org/compare.html?start=2d8bd9b74dc0cf06d881bac645698ccbcf9d9c5e&amp;end=34c5cd9a64d8537236626c4ccbed39a924cd38e2&amp;stat=instructions:u\">instructions</a>):<br>\n  Up to 1.5% wins across numerous benchmarks.</p>\n</li>\n<li>\n<p><a href=\"https://github.com/rust-lang/rust/pull/73528#issuecomment-647827323\">Rollup of 16 pull requests</a><br>\n  (<a href=\"https://perf.rust-lang.org/compare.html?start=34c5cd9a64d8537236626c4ccbed39a924cd38e2&amp;end=033013cab3a861224fd55f494c8be1cb0349eb49&amp;stat=instructions:u\">instructions</a>):<br>\n  Up to 3.4% wins on <code>wg-grammar</code>, little change elsewhere.</p>\n</li>\n</ul>",
        "id": 201979779,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593096856
    },
    {
        "content": "<p>I'd love to spend time delving into these victories</p>",
        "id": 201979870,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593096899
    },
    {
        "content": "<p>but we've got only five minutes left</p>",
        "id": 201979889,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593096909
    },
    {
        "content": "<p>and some nominated issues</p>",
        "id": 201979897,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593096914
    },
    {
        "content": "<h2>Nominated Issues</h2>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3AI-nominated+label%3AT-compiler\">T-compiler</a></p>\n<ul>\n<li>\"Type mismatching cased by duplicate associated type resolution\" <a href=\"https://github.com/rust-lang/rust/issues/59326\">#59326</a><ul>\n<li>Unassigned P-high regression</li>\n<li>Culprit likely to be <a href=\"https://github.com/rust-lang/rust/pull/56837\">#56837</a></li>\n</ul>\n</li>\n</ul>",
        "id": 201979923,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593096925
    },
    {
        "content": "<p>this is old</p>",
        "id": 201979973,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593096949
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> why did you nominate?</p>",
        "id": 201980069,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593096984
    },
    {
        "content": "<p>just skip it</p>",
        "id": 201980101,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1593097003
    },
    {
        "content": "<p>ooookay</p>",
        "id": 201980118,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593097010
    },
    {
        "content": "<ul>\n<li>\"target_feature_11 allows bypassing safety checks through Fn* traits\" <a href=\"https://github.com/rust-lang/rust/issues/72012\">#72012</a></li>\n</ul>",
        "id": 201980157,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593097026
    },
    {
        "content": "<p>it's fine there are more important things to discuss</p>",
        "id": 201980159,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1593097026
    },
    {
        "content": "<p>I don't think <a href=\"https://github.com/rust-lang/rust/issues/72012\">#72012</a> is nominated for this team</p>",
        "id": 201980194,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593097051
    },
    {
        "content": "<p>we discussed <a href=\"https://github.com/rust-lang/rust/issues/72012\">#72012</a> at a recent lang team meeting</p>",
        "id": 201980206,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593097057
    },
    {
        "content": "<p>the nomination comment did allude to a question of \"how is this behavior implemented in the compiler\"</p>",
        "id": 201980368,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593097128
    },
    {
        "content": "<p>so it wasn't absurd to put the issue on agenda</p>",
        "id": 201980393,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593097139
    },
    {
        "content": "<p>but having said that, I'll move along</p>",
        "id": 201980418,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593097147
    },
    {
        "content": "<ul>\n<li>\"Incorrect compilation / STATUS_ACCESS_VIOLATION when linking with lld with target-cpu set\" <a href=\"https://github.com/rust-lang/rust/issues/72145\">#72145</a><ul>\n<li>Metabug: \"Use lld by default on x64 msvc windows\" <a href=\"https://github.com/rust-lang/rust/issues/71520\">#71520</a></li>\n</ul>\n</li>\n</ul>",
        "id": 201980457,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593097168
    },
    {
        "content": "<p>is this appropriate for the Windows area group?</p>",
        "id": 201980616,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593097230
    },
    {
        "content": "<p>or do we think it might be a problem with lld clients in general?</p>",
        "id": 201980633,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593097241
    },
    {
        "content": "<p>might be good to check if this happens on lld on Linux</p>",
        "id": 201980689,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593097264
    },
    {
        "content": "<ul>\n<li>\"[regression] empty shebang parsing\" <a href=\"https://github.com/rust-lang/rust/issues/73250\">#73250</a></li>\n</ul>",
        "id": 201980810,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593097318
    },
    {
        "content": "<p>nomination here is probably outdated, since <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> posted a fix I think</p>",
        "id": 201980905,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593097344
    },
    {
        "content": "<ul>\n<li>\"f32::powi on Windows returns different results between 1.44 and 1.45 beta\" <a href=\"https://github.com/rust-lang/rust/issues/73420\">#73420</a><ul>\n<li>Nominated with intention of raising awareness of this LLVM 10 change and to discuss briefly what to do. Do we want to add some relnotes?.</li>\n</ul>\n</li>\n</ul>",
        "id": 201980933,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593097360
    },
    {
        "content": "<p>I think relnotes makes sense</p>",
        "id": 201981084,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593097432
    },
    {
        "content": "<p>we can do that and close the issue then</p>",
        "id": 201981172,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1593097455
    },
    {
        "content": "<p>but I think we should track LLVM</p>",
        "id": 201981182,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593097460
    },
    {
        "content": "<p>as in, when LLVM decides to make a change like this, we follow suit?</p>",
        "id": 201981215,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593097474
    },
    {
        "content": "<p>yeah I wouldn't want to like ove-rule and change the behavior</p>",
        "id": 201981313,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593097522
    },
    {
        "content": "<p>floating point arithmetic is so much fun</p>",
        "id": 201981461,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593097584
    },
    {
        "content": "<p>anyway, that's our hour (plus a little more time I stole from you all, sorry!)</p>",
        "id": 201981493,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593097600
    },
    {
        "content": "<p>thanks to everyone in <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span> for attending!</p>",
        "id": 201981513,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593097611
    },
    {
        "content": "<p>stay safe everyone <span aria-label=\"mask\" class=\"emoji emoji-1f637\" role=\"img\" title=\"mask\">:mask:</span></p>",
        "id": 201981528,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593097620
    },
    {
        "content": "<p>For anyone interested: <br>\nTo circle back to the self-profile code blame thing: there is actually support for tracing LLVM with the self-profiler but it requires <code>-Znew-pass-manager=y</code>. See <a href=\"https://github.com/rust-lang/rust/pull/68406\">https://github.com/rust-lang/rust/pull/68406</a></p>\n<p>Right now, we do know what cgu is being built but the self-profiler doesn't know what's in that CGU. I was hoping the new LLVM pass manager would be getting enabled by default soon-ish which would be a lot cleaner that trying to decide how to handle LLVM time at the CGU level. </p>\n<p>I'm personally skeptical that this tool will be that useful if there's such inexact tracing of time spent.</p>",
        "id": 201981607,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1593097660
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> you had a prototype PR at one point that made a CGU per-fn, right? If one coupled that with your code blame prototype, then the results could be precise, right?</p>",
        "id": 201981780,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593097732
    },
    {
        "content": "<p>Yeah it did roughly that</p>",
        "id": 201981817,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1593097752
    },
    {
        "content": "<p>(Obviously there would still be the problem that you'd be inspecting the behavior of CGU per-fn, which may not accurately model the actual costs in the normal system.)</p>",
        "id": 201981856,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593097771
    },
    {
        "content": "<p>That's going to affect compilation time pretty drastically though so it's not necessarily going to be representative of where time is being spent normally.</p>",
        "id": 201981914,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1593097801
    },
    {
        "content": "<p>Your code blame prototype did roughly that? Like it put in the CGU per-fn to get <del>good</del> precise, if inaccurate, results?</p>",
        "id": 201981960,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593097804
    },
    {
        "content": "<p>No, sorry.</p>",
        "id": 201981989,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1593097818
    },
    {
        "content": "<p>The code blame prototype is entirely separate from rustc. It uses the standard <code>-Zself-profile</code> infrastructure.</p>",
        "id": 201982035,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1593097846
    },
    {
        "content": "<p>Currently, I don't have any changes at all for rustc</p>",
        "id": 201982063,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1593097864
    },
    {
        "content": "<p>But I will need to make a few small ones to get better reporting.</p>",
        "id": 201982097,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1593097877
    },
    {
        "content": "<p>Okay. I was just trying to interpret what you meant by \"Yeah it did roughly that\"</p>",
        "id": 201982139,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593097897
    },
    {
        "content": "<p>The issue is that the self-profiler just sees a huge block of LLVM time because we don't have tracing normally available into that.</p>",
        "id": 201982141,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1593097900
    },
    {
        "content": "<p>I thought you just meant that prototype PR I had for the CGU meeting.</p>",
        "id": 201982180,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1593097919
    },
    {
        "content": "<p>I see, you were just confirming what that prototype did (namely, made \"roughly\" a CGU per-fn) ?</p>",
        "id": 201982259,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593097944
    },
    {
        "content": "<p>Yeah</p>",
        "id": 201982268,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1593097948
    },
    {
        "content": "<p>Sorry, that was confusing.</p>",
        "id": 201982278,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1593097953
    },
    {
        "content": "<p>no problem</p>",
        "id": 201982282,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593097957
    },
    {
        "content": "<p>to test if we get something useful we can try this old commit that adds the llvm time-trace to rust selfprofile for the old llvm pass manager <a href=\"https://github.com/andjo403/rust/commit/003d17a5d1a8156daf82588726501a489eb2b10b\">https://github.com/andjo403/rust/commit/003d17a5d1a8156daf82588726501a489eb2b10b</a>  the question is how we map the mangled names that llvm traces to the DeFids</p>",
        "id": 201984774,
        "sender_full_name": "andjo403",
        "timestamp": 1593099107
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> I can rebase it if you think that it is somthing that you want to try</p>",
        "id": 201984915,
        "sender_full_name": "andjo403",
        "timestamp": 1593099161
    },
    {
        "content": "<p>Oooh that's cool</p>",
        "id": 201985128,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1593099255
    },
    {
        "content": "<p>there is a small change to the llvm code do not know if it is possible to upstream that</p>",
        "id": 201985161,
        "sender_full_name": "andjo403",
        "timestamp": 1593099268
    },
    {
        "content": "<p>Yeah, I'd hate to have extra patches we have to carry around just to support that.</p>",
        "id": 201985224,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1593099302
    },
    {
        "content": "<p>But I guess I'm also unsure what's happening with <code>new-pass-manager</code></p>",
        "id": 201985252,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1593099313
    },
    {
        "content": "<p>I don't think it's enabled by default yet?</p>",
        "id": 201985271,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1593099322
    },
    {
        "content": "<p>no the new-pass-manager is not default and it feels like it have halted again was some talking about it for the 9.0 release but have not seen that much after that</p>",
        "id": 201985497,
        "sender_full_name": "andjo403",
        "timestamp": 1593099417
    },
    {
        "content": "<p>but thinks that it can be interesting even to try with the new-pass-manager as it fells like a better estimate of time then to try to count the llvm-ir that rustc produces</p>",
        "id": 201986317,
        "sender_full_name": "andjo403",
        "timestamp": 1593099688
    }
]