[
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span>; the triage meeting will take place in about 1h50<br>\n<em>WG-prioritization</em> has done pre-triage in <a class=\"stream\" data-stream-id=\"245100\" href=\"/#narrow/stream/245100-t-compiler.2Fwg-prioritization.2Falerts\">#t-compiler/wg-prioritization/alerts</a> and prepared the <a href=\"https://hackmd.io/f45z2GqQTNW9QH0wO4lTEg\">meeting agenda</a></p>\n<p>Scheduled checkins from:</p>\n<ul>\n<li><span class=\"user-group-mention\" data-user-group-id=\"1175\">@WG-rfc-2229</span>  by <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  and <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> : anything to share?</li>\n<li><span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span>  by <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> : anything to share?</li>\n</ul>",
        "id": 249226246,
        "sender_full_name": "apiraino",
        "timestamp": 1628770273
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"250987\">@apiraino</span> how/when are <code>I-nominated</code> collected? I was hoping this would make it in (idk if there will be time to discuss it, but at leas I wanted to try) <a href=\"https://github.com/rust-lang/rfcs/pull/3161#event-5143610622\">https://github.com/rust-lang/rfcs/pull/3161#event-5143610622</a></p>",
        "id": 249232039,
        "sender_full_name": "eddyb",
        "timestamp": 1628773767
    },
    {
        "content": "<p>that pr was nominated 20 hours ago, strange that it didnt make it into the agenda. I'm updating the agenda with it (I usually finalize the agenda a few hrs before)</p>",
        "id": 249232225,
        "sender_full_name": "apiraino",
        "timestamp": 1628773847
    },
    {
        "content": "<p>if it's urgent we can also push it at the beginning of the meeting</p>",
        "id": 249232437,
        "sender_full_name": "apiraino",
        "timestamp": 1628773932
    },
    {
        "content": "<p>thanks, just wanted to double-check (in the past I've forgotten e.g. <code>T-compiler</code> labels) - and it's not urgent, no worries there (unless someone else wants the mangling switchover to happen ASAP)</p>",
        "id": 249232756,
        "sender_full_name": "eddyb",
        "timestamp": 1628774088
    },
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span> , its time for the triage meeting. Leave a <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> to show you’re here.</p>",
        "id": 249238334,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628776971
    },
    {
        "content": "<p>We’ll start off with ~7 minutes for </p>\n<h2>Announcements</h2>",
        "id": 249238403,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628777006
    },
    {
        "content": "<ul>\n<li>We have no steering meeting tomorrow. The next steering meeting will be on <time datetime=\"2021-08-20T14:00:00Z\">2021-08-20T10:00:00-04:00</time> to discuss how to increase the number of reviewers available to handle the review queue load.</li>\n</ul>",
        "id": 249238529,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628777061
    },
    {
        "content": "<ul>\n<li>New MCPs (take a look, see if you like them!)<ul>\n<li>\"Add <code>TyKind::Const</code> and remove <code>GenericArgKind::Const</code>\" <a href=\"https://github.com/rust-lang/compiler-team/issues/453\">compiler-team#453</a></li>\n</ul>\n</li>\n</ul>",
        "id": 249238563,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628777078
    },
    {
        "content": "<ul>\n<li>Old MCPs (not seconded, take a look)<ul>\n<li>\"Add different entry points for x.py\" <a href=\"https://github.com/rust-lang/compiler-team/issues/396\">compiler-team#396</a> (last comments: GH 7m ago, Zulip 4d ago)</li>\n<li>\"rustdoc is using rustc_ast_pretty, would it be possible to make it somewhat \"stable\"?\" <a href=\"https://github.com/rust-lang/compiler-team/issues/403\">compiler-team#403</a> (last comments: GH 6m ago, Zulip 43d ago)</li>\n<li>\"Don't steal the resolver when lowering HIR; instead store an immutable resolver in TyCtxt\" <a href=\"https://github.com/rust-lang/compiler-team/issues/437\">compiler-team#437</a> (last comments: GH 2m ago, Zulip 49d ago)</li>\n<li>\"CI should exercise (subset of) tests under --stage 1\" <a href=\"https://github.com/rust-lang/compiler-team/issues/439\">compiler-team#439</a> (last comments: GH 49d ago, Zulip none)</li>\n<li>\"Accept <code>pc</code> in place of <code>unknown</code> and <code>unknown</code> in place of <code>pc</code> for <code>x86_64</code> and <code>i?86</code> targets\" <a href=\"https://github.com/rust-lang/compiler-team/issues/441\">compiler-team#441</a> (last comments: GH 34d ago, Zulip 52d ago)</li>\n<li>\"Non exhaustive reachable patterns lint\" <a href=\"https://github.com/rust-lang/compiler-team/issues/445\">compiler-team#445</a> (last comments: GH 28d ago, Zulip 20d ago)</li>\n<li>\"Make <code>resolve_instance</code> fallible\" <a href=\"https://github.com/rust-lang/compiler-team/issues/449\">compiler-team#449</a> (last comments: GH 10d ago, Zulip none)</li>\n<li>\"Reproducible command line + determinism\" <a href=\"https://github.com/rust-lang/compiler-team/issues/450\">compiler-team#450</a> (last comments: GH 9d ago, Zulip 11d ago)</li>\n<li>\"Make AST-&gt;HIR lowering incremental\" <a href=\"https://github.com/rust-lang/compiler-team/issues/452\">compiler-team#452</a> (last comment: GH 10 days ago, Zulip None)</li>\n</ul>\n</li>\n</ul>",
        "id": 249238606,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628777098
    },
    {
        "content": "<ul>\n<li>Pending FCP requests (check your boxes!)<ul>\n<li>\"Write text output files to stdout if options like <code>-o -</code> or <code>--emit asm=-</code> are provided\" <a href=\"https://github.com/rust-lang/compiler-team/issues/431\">compiler-team#431</a> </li>\n<li>\"Preserve, clarify, and extend debug information\" <a href=\"https://github.com/rust-lang/rust/pull/83947\">rust#83947</a></li>\n</ul>\n</li>\n</ul>",
        "id": 249238629,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628777108
    },
    {
        "content": "<ul>\n<li>Things in FCP (make sure you're good with it)<ul>\n<li>\"Rename various internal things\" <a href=\"https://github.com/rust-lang/compiler-team/issues/451\">compiler-team#451</a></li>\n</ul>\n</li>\n</ul>",
        "id": 249238645,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628777117
    },
    {
        "content": "<ul>\n<li>Accepted MCPs<ul>\n<li>\"Don't abort compilation after giving a lint error\" <a href=\"https://github.com/rust-lang/compiler-team/issues/447\">compiler-team#447</a></li>\n</ul>\n</li>\n</ul>",
        "id": 249238656,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628777124
    },
    {
        "content": "<ul>\n<li>Finalized FCPs (disposition merge)<ul>\n<li>No new finished FCP (disposition merge) this time.</li>\n</ul>\n</li>\n</ul>",
        "id": 249238665,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628777130
    },
    {
        "content": "<h3>WG checkins</h3>\n<p>There is a scheduled check-in from <span class=\"user-group-mention\" data-user-group-id=\"1175\">@WG-rfc-2229</span> , but <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> is on vacation and I don’t expect to hear from <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span></p>",
        "id": 249238773,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628777167
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> by <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> (<a href=\"https://hackmd.io/zhv96UdPQI-HI9BlW0XuTw\">latest report</a>)</p>\n<p>Steering issue covered by this checkin:</p>\n<ul>\n<li><a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/9580\">https://github.com/rust-analyzer/rust-analyzer/issues/9580</a></li>\n</ul>\n<p>This has been mostly reactive sprint. I don't think we did anything super \"big\" this time, but we shipped a lot new features, fixed a bunch of bad bugs, and did some observability improvements (eg, we now know that roughly 2/3 of code is source code, and 1/3 is macro-generated code).</p>\n<p>One interesting big thing is that we realized that we've used a wrong model for macro expansion this whole time: <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/9403\">https://github.com/rust-analyzer/rust-analyzer/issues/9403</a></p>",
        "id": 249238836,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628777201
    },
    {
        "content": "<p>Anyone with any other announcements?</p>",
        "id": 249239338,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628777418
    },
    {
        "content": "<p>Oh I guess I throw my hat in the ring: I’ve been looking at <a href=\"https://github.com/rust-lang/rust/issues/82151\">#82151</a> . Is there anyone present who might consider themself a <code>.dylib</code> expert? I’ve been trying to tease out what the expected behaviors are for various cases.</p>",
        "id": 249239442,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628777484
    },
    {
        "content": "<p>If you have experience working with <code>.dylib</code>, or if you care about how they behave (i.e. are a stakeholder in their semantics), I’d love if you could ping me. If I can get a group together, then I’ll make a dedicated topic for it.</p>",
        "id": 249239644,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628777571
    },
    {
        "content": "<p>That having been said, let’s move along</p>",
        "id": 249239660,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628777581
    },
    {
        "content": "<h2>Backport nominations</h2>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Abeta-nominated+-label%3Abeta-accepted+label%3AT-compiler\">T-compiler stable</a> / <a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Astable-nominated+-label%3Astable-accepted+label%3AT-compiler\">T-compiler beta</a></p>",
        "id": 249239695,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628777599
    },
    {
        "content": "<ul>\n<li><img alt=\":beta:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/4715/emoji/images/20717.png\" title=\"beta\"> \"Always preserve sub-obligations in the projection cache\" <a href=\"https://github.com/rust-lang/rust/pull/85868\">rust#85868</a> <ul>\n<li><a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-07-29.20.2354818/near/247588561\">discussed last week</a></li>\n<li><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-07-29.20.2354818/near/247588679\">comments</a> this should reviewed &amp; merged on nightly before we talk about beta backports</li>\n<li><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-07-29.20.2354818/near/247588695\">comments</a>: also premature to discuss beta</li>\n</ul>\n</li>\n</ul>",
        "id": 249239717,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628777609
    },
    {
        "content": "<p>I would be great if we could get this merged as long as we are still early in the cycle</p>",
        "id": 249239825,
        "sender_full_name": "mw",
        "timestamp": 1628777646
    },
    {
        "content": "<p>Yeah. I believe Niko will be back next week. It sounds like <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> would be more willing to take it on with Niko to provide some backup assistance.</p>",
        "id": 249239939,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628777705
    },
    {
        "content": "<ul>\n<li>\n<p><img alt=\":beta:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/4715/emoji/images/20717.png\" title=\"beta\"> \"Do not ICE on HIR based WF check when involving lifetimes\"<br>\n<a href=\"https://github.com/rust-lang/rust/pull/87811\">rust#87811</a> </p>\n<ul>\n<li>Fixes <a href=\"https://github.com/rust-lang/rust/issues/87549\">#87549</a> (a regression causing a ICE on incoreect code compiled with <code>incremental=true</code>)</li>\n<li>PR provided by <span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> and nominated for backport</li>\n</ul>\n</li>\n</ul>",
        "id": 249239987,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628777736
    },
    {
        "content": "<p>(abstaining because my default position is to <span aria-label=\"back\" class=\"emoji emoji-1f519\" role=\"img\" title=\"back\">:back:</span>)</p>",
        "id": 249240127,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1628777789
    },
    {
        "content": "<p>It seems fine to me</p>",
        "id": 249240141,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628777797
    },
    {
        "content": "<p>if no one objects, we’ll go with backport approved</p>",
        "id": 249240156,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628777807
    },
    {
        "content": "<p>Yes. I just need to find some time to dive into it. But with Niko coming back, it might just be easier to wait for him.</p>",
        "id": 249240167,
        "sender_full_name": "Jack Huey",
        "timestamp": 1628777813
    },
    {
        "content": "<ul>\n<li>No stable nominations for <code>T-compiler</code> this time.</li>\n</ul>",
        "id": 249240196,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628777827
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Abeta-nominated+-label%3Abeta-accepted+label%3AT-rustdoc\">T-rustdoc stable</a> / <a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Astable-nominated+-label%3Astable-accepted+label%3AT-rustdoc\">T-rustdoc beta</a></p>\n<ul>\n<li>No beta nominations for <code>T-rustdoc</code> this time.</li>\n<li>No stable nominations for <code>T-rustdoc</code> this time.</li>\n</ul>",
        "id": 249240214,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628777839
    },
    {
        "content": "<h2>PRs S-waiting-on-team</h2>\n<p><a href=\"https://github.com/rust-lang/rust/pulls?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AS-waiting-on-team+label%3AT-compiler\">T-compiler</a></p>",
        "id": 249240233,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628777848
    },
    {
        "content": "<ul>\n<li>\"Encode spans relative to the enclosing item\" <a href=\"https://github.com/rust-lang/rust/pull/84373\">rust#84373</a><ul>\n<li>opened by <span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> </li>\n<li>assigned to <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span></li>\n<li><span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> opened <a href=\"https://github.com/rust-lang/compiler-team/issues/443\">MCP #443</a> (currently in closing FCP phase)</li>\n<li><a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-07-22.20.2354818/near/246853451\">discussed last week</a>, <span class=\"user-group-mention\" data-user-group-id=\"3282\">@wg-incr-comp</span> could have a discussion about this after the 1.54 release and the next beta cut</li>\n</ul>\n</li>\n</ul>",
        "id": 249240258,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628777862
    },
    {
        "content": "<p>Sigh, I really had intended to follow through on getting some wg-incr-comp discussion going here</p>",
        "id": 249240338,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628777887
    },
    {
        "content": "<p>yes, let's schedule a discussion</p>",
        "id": 249240410,
        "sender_full_name": "mw",
        "timestamp": 1628777929
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span> , I think <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> will be back next week. Maybe we can the three of us figure out when a good time is to have a synchronous meeting to discuss this?</p>",
        "id": 249240414,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628777934
    },
    {
        "content": "<ul>\n<li>\"Remove all json handling from rustc_serialize\" <a href=\"https://github.com/rust-lang/rust/pull/85993\">rust#85993</a> <ul>\n<li>PR nominated for discussion (see nominations)</li>\n</ul>\n</li>\n</ul>",
        "id": 249240458,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628777957
    },
    {
        "content": "<p>I think we'll want <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> and <span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> in on the discussion too, right?</p>",
        "id": 249240481,
        "sender_full_name": "mw",
        "timestamp": 1628777970
    },
    {
        "content": "<p>if we can, yes</p>",
        "id": 249240519,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628777987
    },
    {
        "content": "<p>I'd love for \"Remove all json handling from rustc_serialize\" <a href=\"https://github.com/rust-lang/rust/issues/85993\">rust#85993</a> to land</p>",
        "id": 249240788,
        "sender_full_name": "mw",
        "timestamp": 1628778097
    },
    {
        "content": "<p>or at least, I'd like it if we could remove JSON support from rustc_serialize one way or other</p>",
        "id": 249240882,
        "sender_full_name": "mw",
        "timestamp": 1628778128
    },
    {
        "content": "<p>I agree, but I don't think it should become at the expense of <code>-Z ast-json</code></p>",
        "id": 249240888,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1628778134
    },
    {
        "content": "<p>yes, that seems to be the main blocker</p>",
        "id": 249240939,
        "sender_full_name": "mw",
        "timestamp": 1628778160
    },
    {
        "content": "<p>when I tried to do this, I \"just\" added serde derives to <code>rustc_ast</code></p>",
        "id": 249240949,
        "sender_full_name": "eddyb",
        "timestamp": 1628778168
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> had suggested writing an MCP</p>",
        "id": 249240993,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628778186
    },
    {
        "content": "<p>what was your experience with that, <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> ?</p>",
        "id": 249240994,
        "sender_full_name": "mw",
        "timestamp": 1628778186
    },
    {
        "content": "<p>didn't we already have an MCP for that at some point?</p>",
        "id": 249241062,
        "sender_full_name": "mw",
        "timestamp": 1628778214
    },
    {
        "content": "<p>I think it worked. that stuff didn't land because proc macros still had bootstrap issues</p>",
        "id": 249241074,
        "sender_full_name": "eddyb",
        "timestamp": 1628778222
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124287\">mw</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-08-12.20.2354818/near/249241062\">said</a>:</p>\n<blockquote>\n<p>didn't we already have an MCP for that at some point?</p>\n</blockquote>\n<p>for moving the JSON implementation to serde?</p>",
        "id": 249241104,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628778238
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/compiler-team/issues/418\">https://github.com/rust-lang/compiler-team/issues/418</a></p>",
        "id": 249241173,
        "sender_full_name": "mw",
        "timestamp": 1628778255
    },
    {
        "content": "<p>look at that</p>",
        "id": 249241208,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628778267
    },
    {
        "content": "<p>we should only have derives for the rustc-specific tcx-aware traits, and for <code>serde</code>, IMO</p>",
        "id": 249241242,
        "sender_full_name": "eddyb",
        "timestamp": 1628778281
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-08-12.20.2354818/near/249240949\">said</a>:</p>\n<blockquote>\n<p>when I tried to do this, I \"just\" added serde derives to <code>rustc_ast</code></p>\n</blockquote>\n<p>I am afraid for the code bloat that will cause.</p>",
        "id": 249241302,
        "sender_full_name": "bjorn3",
        "timestamp": 1628778303
    },
    {
        "content": "<p>we can test that though</p>",
        "id": 249241324,
        "sender_full_name": "eddyb",
        "timestamp": 1628778311
    },
    {
        "content": "<p>can we cfg that on nightly?</p>",
        "id": 249241342,
        "sender_full_name": "mw",
        "timestamp": 1628778325
    },
    {
        "content": "<p>also we shouldn't need the non-<code>serde</code> derives at all</p>",
        "id": 249241349,
        "sender_full_name": "eddyb",
        "timestamp": 1628778327
    },
    {
        "content": "<p>Part of them are necessary for serializing macros.</p>",
        "id": 249241371,
        "sender_full_name": "bjorn3",
        "timestamp": 1628778341
    },
    {
        "content": "<p><em>also</em> we can try using the <code>dyn Trait</code>-based serde-like thing</p>",
        "id": 249241395,
        "sender_full_name": "eddyb",
        "timestamp": 1628778351
    },
    {
        "content": "<p>And for serializing attributes.</p>",
        "id": 249241406,
        "sender_full_name": "bjorn3",
        "timestamp": 1628778355
    },
    {
        "content": "<p>oh right attributes... yeah we have to split that from the AST</p>",
        "id": 249241469,
        "sender_full_name": "eddyb",
        "timestamp": 1628778367
    },
    {
        "content": "<p>neither macros nor attributes should need to refer to the AST</p>",
        "id": 249241502,
        "sender_full_name": "eddyb",
        "timestamp": 1628778380
    },
    {
        "content": "<p>anyway this is getting into the weeds</p>",
        "id": 249241516,
        "sender_full_name": "eddyb",
        "timestamp": 1628778384
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-08-12.20.2354818/near/249241395\">said</a>:</p>\n<blockquote>\n<p><em>also</em> we can try using the <code>dyn Trait</code>-based serde-like thing</p>\n</blockquote>\n<p><a href=\"https://docs.rs/miniserde\">https://docs.rs/miniserde</a></p>",
        "id": 249241557,
        "sender_full_name": "eddyb",
        "timestamp": 1628778409
    },
    {
        "content": "<p>for <code>-Z ast-json</code> we don't need high-performance</p>",
        "id": 249241572,
        "sender_full_name": "eddyb",
        "timestamp": 1628778418
    },
    {
        "content": "<p>Proc-macro attributes need to refer to the AST due to things like <code>$foo:expr</code>.</p>",
        "id": 249241575,
        "sender_full_name": "bjorn3",
        "timestamp": 1628778418
    },
    {
        "content": "<p>also we only need to <em>encode</em>, not <em>decode</em></p>",
        "id": 249241627,
        "sender_full_name": "eddyb",
        "timestamp": 1628778441
    },
    {
        "content": "<p>so <code>miniserde::Serialize</code> should suffice</p>",
        "id": 249241649,
        "sender_full_name": "eddyb",
        "timestamp": 1628778453
    },
    {
        "content": "<p>Okay then it sounds like <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> is going to go try that then?</p>",
        "id": 249241761,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628778497
    },
    {
        "content": "<p>sounds like we have something to experiment with, right?</p>",
        "id": 249241763,
        "sender_full_name": "mw",
        "timestamp": 1628778497
    },
    {
        "content": "<p>next</p>",
        "id": 249241830,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628778528
    },
    {
        "content": "<ul>\n<li>\"Preserve, clarify, and extend debug information\" <a href=\"https://github.com/rust-lang/rust/pull/83947\">rust#83947</a><ul>\n<li><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> added more comments labeled with <code>S-waiting-on-team</code></li>\n</ul>\n</li>\n</ul>",
        "id": 249241832,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628778528
    },
    {
        "content": "<p>Wait, it seems that miniserde doesn't support enums.</p>",
        "id": 249241856,
        "sender_full_name": "bjorn3",
        "timestamp": 1628778540
    },
    {
        "content": "<blockquote>\n<p>The miniserde derive macros will refuse anything other than a braced struct with named fields. Enums and tuple structs are not supported.</p>\n</blockquote>",
        "id": 249241875,
        "sender_full_name": "bjorn3",
        "timestamp": 1628778547
    },
    {
        "content": "<p>clearly we just rewrite the AST to not use enums. <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 249241911,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628778564
    },
    {
        "content": "<p>ugh. well, we should discuss it after the meeting</p>",
        "id": 249241930,
        "sender_full_name": "eddyb",
        "timestamp": 1628778574
    },
    {
        "content": "<p>sure</p>",
        "id": 249241947,
        "sender_full_name": "bjorn3",
        "timestamp": 1628778582
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-08-12.20.2354818/near/249241832\">said</a>:</p>\n<blockquote>\n<ul>\n<li>\"Preserve, clarify, and extend debug information\" <a href=\"https://github.com/rust-lang/rust/pull/83947\">rust#83947</a></li>\n</ul>\n</blockquote>\n<p>one thing I can say is this is about <code>-C debuginfo</code> choices, but the title sounds like it's far more</p>",
        "id": 249242101,
        "sender_full_name": "eddyb",
        "timestamp": 1628778631
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span>'s comments make sense (although the wording in <a href=\"https://github.com/rust-lang/rust/pull/83947#discussion_r686959773\">https://github.com/rust-lang/rust/pull/83947#discussion_r686959773</a> is a bit harsh -- maybe we could rephrase that to be more friendly?)</p>",
        "id": 249242154,
        "sender_full_name": "mw",
        "timestamp": 1628778656
    },
    {
        "content": "<p>(IIRC it splits one of the options into 2, or 2 of them into 3)</p>",
        "id": 249242161,
        "sender_full_name": "eddyb",
        "timestamp": 1628778660
    },
    {
        "content": "<p>I think we basically decided to merge this in some form other via the FCP, but the author did not respond, right?</p>",
        "id": 249242280,
        "sender_full_name": "mw",
        "timestamp": 1628778718
    },
    {
        "content": "<p>I interpret <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> ’s main concerns as being about documentation: the internal comments, and the user visible docs</p>",
        "id": 249242343,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628778731
    },
    {
        "content": "<p>the other thing is that I have no intuition for line \"directives\" vs \"tables\" - I would've expected both to be the same?</p>",
        "id": 249242384,
        "sender_full_name": "eddyb",
        "timestamp": 1628778748
    },
    {
        "content": "<p>and someone not understanding what these things mean. (A concern I understand, because I do not understand what these distinctions mean)</p>",
        "id": 249242404,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628778756
    },
    {
        "content": "<p>yeah, one has to dig into the relevant LLVM commits to get a rough idea</p>",
        "id": 249242470,
        "sender_full_name": "mw",
        "timestamp": 1628778786
    },
    {
        "content": "<p>we should not require rustc users to do that :)</p>",
        "id": 249242492,
        "sender_full_name": "mw",
        "timestamp": 1628778797
    },
    {
        "content": "<p>but what is the best way to move this forward? Do we think the PR author is going to be capable of improving the internal and external docs?</p>",
        "id": 249242498,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628778798
    },
    {
        "content": "<p>like I know what \"line info\" is, and <code>debuginfo=1</code> is <em>almost only that</em> (plus some <code>fn</code> definitions and inlining scopes), but what is the difference between \"directives\" and \"tables\"</p>",
        "id": 249242526,
        "sender_full_name": "eddyb",
        "timestamp": 1628778812
    },
    {
        "content": "<p>I don't think we just need better docs, but names that don't sound redundant</p>",
        "id": 249242577,
        "sender_full_name": "eddyb",
        "timestamp": 1628778840
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-08-12.20.2354818/near/249242101\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-08-12.20.2354818/near/249241832\">said</a>:</p>\n<blockquote>\n<ul>\n<li>\"Preserve, clarify, and extend debug information\" <a href=\"https://github.com/rust-lang/rust/pull/83947\">rust#83947</a></li>\n</ul>\n</blockquote>\n<p>one thing I can say is this is about <code>-C debuginfo</code> choices, but the title sounds like it's far more</p>\n</blockquote>\n<p>I’m going to change the title to reflect that</p>",
        "id": 249242624,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628778845
    },
    {
        "content": "<p>Do we have someone here who cares about this being supported sooner rather than later?</p>",
        "id": 249242630,
        "sender_full_name": "mw",
        "timestamp": 1628778848
    },
    {
        "content": "<blockquote>\n<p>but what is the difference between \"directives\" and \"tables\"</p>\n</blockquote>\n<p>I think the author used them as synonyms.</p>",
        "id": 249242658,
        "sender_full_name": "bjorn3",
        "timestamp": 1628778864
    },
    {
        "content": "<p>(I can't even tell which of \"directives\" and \"tables\" implies the other)</p>",
        "id": 249242675,
        "sender_full_name": "eddyb",
        "timestamp": 1628778873
    },
    {
        "content": "<p>IIRC, the terminology comes from the (rather undocumented) LLVM commits</p>",
        "id": 249242729,
        "sender_full_name": "mw",
        "timestamp": 1628778902
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-08-12.20.2354818/near/249242658\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>but what is the difference between \"directives\" and \"tables\"</p>\n</blockquote>\n<p>I think the author used them as synonyms.</p>\n</blockquote>\n<p>the implementation doesn't look like it conflates them?</p>",
        "id": 249242736,
        "sender_full_name": "eddyb",
        "timestamp": 1628778904
    },
    {
        "content": "<p>Lets leave a comment specifically saying that elaborating on these details is what is blocking the PR</p>",
        "id": 249242816,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628778948
    },
    {
        "content": "<p>\"line directives\" goes into <code>DebugDirectivesOnly</code> while \"line tables\" goes into <code>LineTablesOnly</code>, so the former is likely the one that needs to be renamed</p>",
        "id": 249242817,
        "sender_full_name": "eddyb",
        "timestamp": 1628778949
    },
    {
        "content": "<p>I see</p>",
        "id": 249242887,
        "sender_full_name": "bjorn3",
        "timestamp": 1628778969
    },
    {
        "content": "<p>next</p>",
        "id": 249242931,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628778991
    },
    {
        "content": "<h2>Issues of Note</h2>\n<h3>Short Summary</h3>\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3AT-compiler+label%3AP-critical\">0 T-compiler P-critical issues</a><ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3AT-compiler+label%3AP-critical+no%3Aassignee\">0 of those are unassigned</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3AT-compiler+label%3AP-high\">85 T-compiler P-high issues</a><ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3AT-compiler+label%3AP-high+no%3Aassignee\">57 of those are unassigned</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/rust-lang/rust/labels/regression-from-stable-to-beta\">1 P-critical, 1 P-high, 0 P-medium, 0 P-low regression-from-stable-to-beta</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/labels/regression-from-stable-to-nightly\">0 P-critical, 4 P-high, 2 P-medium, 2 P-low regression-from-stable-to-nightly</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/labels/regression-from-stable-to-stable\">0 P-critical, 49 P-high, 81 P-medium, 9 P-low regression-from-stable-to-stable</a></li>\n</ul>",
        "id": 249242945,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628779000
    },
    {
        "content": "<h3>P-critical</h3>\n<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AP-critical+label%3AT-compiler\">T-compiler</a></p>\n<ul>\n<li>No <code>P-critical</code> issues for <code>T-compiler</code> this time.</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AP-critical+label%3AT-rustdoc\">T-rustdoc</a></p>\n<ul>\n<li>No <code>P-critical</code> issues for <code>T-rustdoc</code> this time.</li>\n</ul>",
        "id": 249242959,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628779009
    },
    {
        "content": "<h3>P-high regressions</h3>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3Aregression-from-stable-to-beta+label%3AP-high+-label%3AT-infra+-label%3AT-libs+-label%3AT-release+-label%3AT-rustdoc+-label%3AT-core\">P-high beta regressions</a></p>",
        "id": 249242971,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628779016
    },
    {
        "content": "<ul>\n<li>\"ICE: unexpected concrete region in borrowck: ReStatic\" <a href=\"https://github.com/rust-lang/rust/issues/87455\">rust#87455</a> <ul>\n<li>opened by <span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span></li>\n<li>needs <a href=\"https://github.com/rust-lang/rust/pull/87483\">rust#87483</a> to be backported (was beta-accepted <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-08-05.20.2354818/near/248489051\">last week</a>)</li>\n</ul>\n</li>\n</ul>",
        "id": 249242982,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628779023
    },
    {
        "content": "<p>I’ll own the backport</p>",
        "id": 249243019,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628779047
    },
    {
        "content": "<p>debug directives sounds a lot like unwind info to me, I’m wondering if there’s a relation</p>",
        "id": 249243049,
        "sender_full_name": "tmandry",
        "timestamp": 1628779062
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3Aregression-from-stable-to-nightly+label%3AP-high+no%3Aassignee+-label%3AT-infra+-label%3AT-libs+-label%3AT-release+-label%3AT-rustdoc+-label%3AT-core\">Unassigned P-high nightly regressions</a></p>\n<ul>\n<li>No unassigned <code>P-high</code> nightly regressions this time.</li>\n</ul>",
        "id": 249243119,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628779084
    },
    {
        "content": "<h2>Performance logs</h2>\n<blockquote>\n<p><a href=\"https://github.com/rust-lang/rustc-perf/blob/master/triage/2021-08-11.md\">triage logs for 2021-08-11</a></p>\n</blockquote>\n<p>A quiet week for performance. Changes, both positive and negative, tended to be isolated to few benchmarks.</p>\n<p>Triage done by <strong>@pnkfelix</strong>.<br>\nRevision range: <a href=\"https://perf.rust-lang.org/?start=3354a44d2fa8d5ba6b8d6b40d2596de2c8292ec1&amp;end=6b20506d17f4e5e5bf5bcad7e94add4d754b0ae3&amp;absolute=false&amp;stat=instructions%3Au\">3354a44d2fa8d5ba6b8d6b40d2596de2c8292ec1..6b20506d17f4e5e5bf5bcad7e94add4d754b0ae3</a></p>\n<p>2 Regressions, 1 Improvements, 0 Mixed; 0 of them in rollups</p>",
        "id": 249243140,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628779095
    },
    {
        "content": "<h4>Regressions</h4>\n<p>Use zeroed allocations in the mir interpreter instead eagerly touching the memory <a href=\"https://github.com/rust-lang/rust/issues/87777\">#87777</a></p>\n<ul>\n<li>Moderate regression in <a href=\"https://perf.rust-lang.org/compare.html?start=1f94abcda6884893d4723304102089198caa0839&amp;end=4c29cc8fd09889880880cb6081174c79744ab1b6&amp;stat=instructions:u\">instruction counts</a> (up to 1.7% on <code>incr-unchanged</code> builds of <code>ctfe-stress-4-check</code>)</li>\n<li>The motivation for this PR was to reduce the number of page faults, for the same family of ctfe-stress-4 benchmarks.</li>\n<li>So, perf runs were done on the PR itself, to illustrate the motivated change.</li>\n<li>The number of page faults <a href=\"https://perf.rust-lang.org/compare.html?start=1f94abcda6884893d4723304102089198caa0839&amp;end=4c29cc8fd09889880880cb6081174c79744ab1b6&amp;stat=faults\">did decrease (by up to 25%)</a>.</li>\n<li>The regression with respect to instruction counts appears isolated to just the ctfe-stress-4 family; the page fault reduction outweighs instruction count hit.</li>\n<li>(Unfortunately the page fault decrease did not yield a corresponding improvement to reported wall-clock or task-clock times.)</li>\n</ul>\n<p>Hide allocator details from TryReserveError <a href=\"https://github.com/rust-lang/rust/issues/87408\">#87408</a></p>\n<ul>\n<li>Moderate regression in <a href=\"https://perf.rust-lang.org/compare.html?start=db3cb435c1197ef3e3919c03b7f81ca8bffbd007&amp;end=996ff2e0a0f911f52bb1de6bdd0cfd5704de1fc9&amp;stat=instructions:u\">instruction counts</a> (up to 4.2% on <code>full</code> builds of <code>html5ever-opt</code>)</li>\n<li>The regression with respect to instruction counts appears isolated to just the html5ever-opt benchmark; all other reported changes pale in significance.</li>\n<li>Potentially significant: the max-rss for html5ever-opt also regressed here, by 8%.</li>\n<li>(Skimming over the PR itself, I do not see any obvious reason for this significant of a regression to max-rss.)</li>\n<li>Some other benchmarks also regressed with respect to max-rss, but none so significantly.</li>\n<li>Left a <a href=\"https://github.com/rust-lang/rust/pull/87408#issuecomment-896924754\">comment on the PR</a> as a heads up.</li>\n</ul>",
        "id": 249243151,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628779107
    },
    {
        "content": "<h4>Improvements</h4>\n<ul>\n<li>#[inline] slice::Iter::advance_by <a href=\"https://github.com/rust-lang/rust/issues/87736\">#87736</a></li>\n<li>(this was a targetted PR to address a previously flagged regression)</li>\n</ul>",
        "id": 249243184,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628779126
    },
    {
        "content": "<h4>Mixed</h4>\n<p>None</p>",
        "id": 249243192,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628779131
    },
    {
        "content": "<h4>Untriaged Pull Requests</h4>\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust/pull/87640\">#87640 Rollup of 9 pull requests</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/pull/87587\">#87587 Various refactorings of the TAIT infrastructure</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/pull/87244\">#87244 Better diagnostics with mismatched types due to implicit static lifetime</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/pull/86777\">#86777 Include terminators in instance size estimate</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/pull/86698\">#86698 Move OnDiskCache to rustc_query_impl.</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/pull/86588\">#86588 Rollup of 8 pull requests</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/pull/86034\">#86034 Change entry point to 🛡️ against 💥 💥-payloads</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/pull/84560\">#84560 Inline Iterator as IntoIterator.</a></li>\n</ul>",
        "id": 249243239,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628779151
    },
    {
        "content": "<h2>Nominated Issues</h2>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3AI-nominated+label%3AT-compiler\">T-compiler</a></p>",
        "id": 249243255,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628779160
    },
    {
        "content": "<ul>\n<li>\"Remove all json handling from rustc_serialize\" <a href=\"https://github.com/rust-lang/rust/pull/85993\">rust#85993</a><ul>\n<li>Nominated by <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span>  to point out that <a href=\"https://github.com/rust-lang/rust/pull/85993#issuecomment-894686998\">a broader discussion is needed</a></li>\n<li><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <a href=\"https://github.com/rust-lang/rust/pull/85993#issuecomment-895309985\">suggests an MCP</a></li>\n</ul>\n</li>\n</ul>",
        "id": 249243265,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628779168
    },
    {
        "content": "<p>(we discussed this already, up above. lets get through rest of list first)</p>",
        "id": 249243285,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628779178
    },
    {
        "content": "<ul>\n<li>\"Binary size is significant increased from <code>1.46.0</code> to <code>1.51.0</code>\" <a href=\"https://github.com/rust-lang/rust/issues/86610\">rust#86610</a> <ul>\n<li>Added an action item on <a href=\"https://hackmd.io/5BtjuenFTn6M74IDwLOjgw#T-compiler-Unowned\">HackMD</a>, needs an owner</li>\n</ul>\n</li>\n</ul>",
        "id": 249243296,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628779186
    },
    {
        "content": "<p>(the action item is : add binary size tracking to perf.rlo )</p>",
        "id": 249243450,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628779249
    },
    {
        "content": "<p>its not high priority, but something we should try to get around to doing</p>",
        "id": 249243466,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628779259
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rfcs/issues?q=is%3Aopen+label%3AI-nominated+label%3AT-compiler\">RFC</a></p>",
        "id": 249243492,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628779267
    },
    {
        "content": "<ul>\n<li>\"[RFC2603] Extend <code>&lt;const&gt;</code> to include <code>str</code> and structural constants.\" <a href=\"https://github.com/rust-lang/rfcs/pull/3161\">rfcs#3161</a><ul>\n<li>nominated by <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> </li>\n<li><a href=\"https://github.com/rust-lang/rfcs/pull/3161#issuecomment-896587191\">review and concerns</a></li>\n</ul>\n</li>\n</ul>",
        "id": 249243501,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628779272
    },
    {
        "content": "<p>So we’re way ahead of our usual schedule on this meeting. Lets take advantage and discuss <a href=\"https://github.com/rust-lang/rfcs/issues/3161\">rfcs#3161</a></p>",
        "id": 249243536,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628779291
    },
    {
        "content": "<p>we're getting very close to <code>v0</code> being able to handle everything, including unstable const generics usage</p>",
        "id": 249243641,
        "sender_full_name": "eddyb",
        "timestamp": 1628779328
    },
    {
        "content": "<p>and tooling out there is starting to have support for it trickle in (e.g. <code>c++filt</code>, <code>gdb</code>, etc.)</p>",
        "id": 249243684,
        "sender_full_name": "eddyb",
        "timestamp": 1628779351
    },
    {
        "content": "<p>is the essential idea here that we need to be able to mangle arbitrary <code>const</code> values so that they can appear in the symbols we generate after monomorphizing a type with such a value in it?</p>",
        "id": 249243707,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628779364
    },
    {
        "content": "<p>yes</p>",
        "id": 249243724,
        "sender_full_name": "mw",
        "timestamp": 1628779374
    },
    {
        "content": "<p>so we could switch to it as the default <em>very</em> soon, hence wanting more eyes on it</p>",
        "id": 249243730,
        "sender_full_name": "eddyb",
        "timestamp": 1628779376
    },
    {
        "content": "<p>that's what the crater run turned up to be the only thing not working at the moment</p>",
        "id": 249243765,
        "sender_full_name": "mw",
        "timestamp": 1628779397
    },
    {
        "content": "<p>and yeah, any type that can exist after monomorphization has to be representable, including constants (including weird constants)</p>",
        "id": 249243788,
        "sender_full_name": "eddyb",
        "timestamp": 1628779410
    },
    {
        "content": "<p>there are some fascinating uses in the wild already</p>",
        "id": 249243832,
        "sender_full_name": "eddyb",
        "timestamp": 1628779435
    },
    {
        "content": "<p>in the added forms, \"A…E” … that’s literally five characters, ‘A’, ‘.’, ‘.’, ‘.’, ‘E’ ?</p>",
        "id": 249243888,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628779445
    },
    {
        "content": "<p>it's me summarizing the grammar. if you look at the diff, it's <code>\"A\" {&lt;const&gt;} \"E\"</code></p>",
        "id": 249243934,
        "sender_full_name": "eddyb",
        "timestamp": 1628779473
    },
    {
        "content": "<p>Would we need to wait for all of the external tools to update to this RFC?</p>",
        "id": 249243943,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1628779478
    },
    {
        "content": "<p>okay, thank you</p>",
        "id": 249243949,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628779482
    },
    {
        "content": "<p>Or would that only matter when we want to start supporting arbitrary? types in const generics?</p>",
        "id": 249243973,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1628779493
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-08-12.20.2354818/near/249243943\">said</a>:</p>\n<blockquote>\n<p>Would we need to wait for all of the external tools to update to this RFC?</p>\n</blockquote>\n<p>not at all, this is all unstable support</p>",
        "id": 249243980,
        "sender_full_name": "eddyb",
        "timestamp": 1628779497
    },
    {
        "content": "<p>that is, it's supported, but not on stable</p>",
        "id": 249244003,
        "sender_full_name": "eddyb",
        "timestamp": 1628779506
    },
    {
        "content": "<p>if you're using the unstable const generics, you can e.g. use <code>rustfilt</code> and it will support the new mangling right away</p>",
        "id": 249244051,
        "sender_full_name": "eddyb",
        "timestamp": 1628779530
    },
    {
        "content": "<p>so among other things, <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> had some interesting concerns over how much detail we should include, which frankly I hadn't considered</p>",
        "id": 249244101,
        "sender_full_name": "eddyb",
        "timestamp": 1628779558
    },
    {
        "content": "<p>can we merge support for this in the compiler and rustc-demangle before amending the RFC?</p>",
        "id": 249244103,
        "sender_full_name": "mw",
        "timestamp": 1628779558
    },
    {
        "content": "<p>so that we get testing before setting the grammar in stone?</p>",
        "id": 249244166,
        "sender_full_name": "mw",
        "timestamp": 1628779572
    },
    {
        "content": "<p>I had initially assumed we would want to be able to demangle to roughly the expression syntax for creating those constants, even if that results in <em>technically</em> unnecessary information (such as field names)</p>",
        "id": 249244244,
        "sender_full_name": "eddyb",
        "timestamp": 1628779608
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124287\">mw</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-08-12.20.2354818/near/249244103\">said</a>:</p>\n<blockquote>\n<p>can we merge support for this in the compiler and rustc-demangle before amending the RFC?</p>\n</blockquote>\n<p>ah good question - I'm fine with it if that's what we decide on</p>",
        "id": 249244288,
        "sender_full_name": "eddyb",
        "timestamp": 1628779629
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124287\">mw</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-08-12.20.2354818/near/249244166\">said</a>:</p>\n<blockquote>\n<p>so that we get testing before setting the grammar in stone?</p>\n</blockquote>\n<p>well, RFC’s are sort of living documents anyway</p>",
        "id": 249244297,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628779631
    },
    {
        "content": "<p>there is some precedent for omitting field names in C++, right?</p>",
        "id": 249244316,
        "sender_full_name": "mw",
        "timestamp": 1628779637
    },
    {
        "content": "<p>So while I’m fine with the idea of landing the implementation first before amending the RFC in this case, I just want to point out that I don’t think it is something we need to stress too much about in the long run?</p>",
        "id": 249244375,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628779673
    },
    {
        "content": "<p>yes</p>",
        "id": 249244434,
        "sender_full_name": "mw",
        "timestamp": 1628779688
    },
    {
        "content": "<p>I haven't actually looked at what C++ does to be quite honest - since they use an expression AST, I doubt they could even use field names, since that's a GNU extension (or used to be a for a while, maybe it's standard now)</p>",
        "id": 249244474,
        "sender_full_name": "eddyb",
        "timestamp": 1628779709
    },
    {
        "content": "<p>we'd be saving us a potential \"fix some bugs\" RFC amendment, but not much more, right?</p>",
        "id": 249244493,
        "sender_full_name": "mw",
        "timestamp": 1628779717
    },
    {
        "content": "<p>I mean at the source level  it supports something like <code>Foo x = { 1, 2, 3 };</code></p>",
        "id": 249244625,
        "sender_full_name": "mw",
        "timestamp": 1628779786
    },
    {
        "content": "<p>where Foo is a struct with field names</p>",
        "id": 249244645,
        "sender_full_name": "mw",
        "timestamp": 1628779794
    },
    {
        "content": "<p>if we omit the field names</p>",
        "id": 249244816,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628779855
    },
    {
        "content": "<p>then I guess we use, what, declaration ordering?</p>",
        "id": 249244833,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628779868
    },
    {
        "content": "<p>yeah</p>",
        "id": 249244857,
        "sender_full_name": "eddyb",
        "timestamp": 1628779883
    },
    {
        "content": "<p>I guess that’s fine</p>",
        "id": 249244858,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628779884
    },
    {
        "content": "<p>I think initially I wanted a simpler <code>(constructor, [child values])</code> kind of tree, but decided against it when I realized it would be easy to recover user-friendly syntax</p>",
        "id": 249244900,
        "sender_full_name": "eddyb",
        "timestamp": 1628779905
    },
    {
        "content": "<p>would it be a bad idea to support both encodings?</p>",
        "id": 249244956,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628779923
    },
    {
        "content": "<p>we could make field names optional, but I'm not sure we want that</p>",
        "id": 249245003,
        "sender_full_name": "mw",
        "timestamp": 1628779936
    },
    {
        "content": "<p>you can just encode them any way you want honestly</p>",
        "id": 249245015,
        "sender_full_name": "eddyb",
        "timestamp": 1628779940
    },
    {
        "content": "<p>i.e. to make the grammar have one struct encoding that included field names and one that does not include hem</p>",
        "id": 249245020,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628779941
    },
    {
        "content": "<p>the encoding has much more flexibility than one might assume</p>",
        "id": 249245044,
        "sender_full_name": "eddyb",
        "timestamp": 1628779951
    },
    {
        "content": "<p>you can e.g. have zero-length identifiers</p>",
        "id": 249245070,
        "sender_full_name": "eddyb",
        "timestamp": 1628779961
    },
    {
        "content": "<p>tho it would look weird</p>",
        "id": 249245101,
        "sender_full_name": "eddyb",
        "timestamp": 1628779974
    },
    {
        "content": "<p>or you can use the tuple struct form</p>",
        "id": 249245115,
        "sender_full_name": "eddyb",
        "timestamp": 1628779983
    },
    {
        "content": "<p>I think the length of symbol names is the main concern here</p>",
        "id": 249245133,
        "sender_full_name": "mw",
        "timestamp": 1628779990
    },
    {
        "content": "<p>because it has implications on compile times and binary size</p>",
        "id": 249245159,
        "sender_full_name": "mw",
        "timestamp": 1628780003
    },
    {
        "content": "<p>The flexibilty of the encoding that eddyb mentions, does it end up yielding essentially equivalent savings in <del>binary size</del> symbol length?</p>",
        "id": 249245194,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628780024
    },
    {
        "content": "<p>not quite, right <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> ?</p>",
        "id": 249245291,
        "sender_full_name": "mw",
        "timestamp": 1628780054
    },
    {
        "content": "<p>my attittude at this point is: We’re commiting to an aspect of an ABI here</p>",
        "id": 249245296,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628780056
    },
    {
        "content": "<p>to me, the best thing is to ensure that we don’t box ourselves in</p>",
        "id": 249245312,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628780071
    },
    {
        "content": "<p>if you use the tuple form, it's only one extra character than if we only had one struct form</p>",
        "id": 249245329,
        "sender_full_name": "eddyb",
        "timestamp": 1628780077
    },
    {
        "content": "<p>the symbol names are still \"implementation defined\" per the original RFC</p>",
        "id": 249245345,
        "sender_full_name": "mw",
        "timestamp": 1628780086
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> ^</p>",
        "id": 249245373,
        "sender_full_name": "mw",
        "timestamp": 1628780103
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-08-12.20.2354818/near/249245312\">said</a>:</p>\n<blockquote>\n<p>to me, the best thing is to ensure that we don’t box ourselves in</p>\n</blockquote>\n<p>we're specifying what demanglers should handle, but not necessarily promising what we'll emit - especially since this is still unstable-const-generics-only territory</p>",
        "id": 249245391,
        "sender_full_name": "eddyb",
        "timestamp": 1628780110
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span> but the format itself is being defined</p>",
        "id": 249245392,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628780111
    },
    {
        "content": "<p>binary size only affects unstripped binaries though, right</p>",
        "id": 249245424,
        "sender_full_name": "tmandry",
        "timestamp": 1628780124
    },
    {
        "content": "<p>can you strip symbol tables? I guess you can if you're \"linked enough\"</p>",
        "id": 249245469,
        "sender_full_name": "eddyb",
        "timestamp": 1628780148
    },
    {
        "content": "<p>(we're not talking about debuginfo, to be clear)</p>",
        "id": 249245510,
        "sender_full_name": "eddyb",
        "timestamp": 1628780159
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> right, okay. so I’m just trying to say: As long as we ensure that demanglers are told that they should be <em>prepared</em> to handle either choice of encoding for a symbol, then this all sounds fine to me. I.e. that sounds like a way to address <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> ’s concern.</p>",
        "id": 249245564,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628780169
    },
    {
        "content": "<p>You can strip the regular symbol table, but not the dynamic symbol table used during dynamic linking.</p>",
        "id": 249245572,
        "sender_full_name": "bjorn3",
        "timestamp": 1628780173
    },
    {
        "content": "<p>from a user's point of view: how valuable are the field names really?</p>",
        "id": 249245624,
        "sender_full_name": "mw",
        "timestamp": 1628780203
    },
    {
        "content": "<p>one example of both \"interesting usage in the wild\", but also of \"useful field names\":</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">tiny_uom</span>::<span class=\"n\">Quantity</span><span class=\"o\">&lt;</span><span class=\"n\">tiny_uom</span>::<span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">m</span>: <span class=\"mi\">1_</span><span class=\"k\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">kg</span>: <span class=\"mi\">0_</span><span class=\"k\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span>: <span class=\"o\">-</span><span class=\"mi\">1_</span><span class=\"k\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span>: <span class=\"mi\">0_</span><span class=\"k\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">K</span>: <span class=\"mi\">0_</span><span class=\"k\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">mol</span>: <span class=\"mi\">0_</span><span class=\"k\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cd</span>: <span class=\"mi\">0_</span><span class=\"k\">i8</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 249245639,
        "sender_full_name": "eddyb",
        "timestamp": 1628780206
    },
    {
        "content": "<p>encoding SI units as a <code>struct</code> of powers of various fundamentals</p>",
        "id": 249245685,
        "sender_full_name": "eddyb",
        "timestamp": 1628780227
    },
    {
        "content": "<p>when would we link generic monomorphizations dynamically?</p>",
        "id": 249245759,
        "sender_full_name": "tmandry",
        "timestamp": 1628780260
    },
    {
        "content": "<p>these will show up in backtraces, for example</p>",
        "id": 249245786,
        "sender_full_name": "eddyb",
        "timestamp": 1628780276
    },
    {
        "content": "<p>If you combine <code>-Zshare-generics</code> with dynamic libraries.</p>",
        "id": 249245801,
        "sender_full_name": "bjorn3",
        "timestamp": 1628780282
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124287\">mw</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-08-12.20.2354818/near/249245624\">said</a>:</p>\n<blockquote>\n<p>from a user's point of view: how valuable are the field names really?</p>\n</blockquote>\n<p>If I have easy access to source (and appropriate type names or source code mapping info) or high quality debug info, then presumably the field names are not useful at all. But in my experience, you cannot rely on those being present when you are at your darkest moment.</p>",
        "id": 249245876,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628780302
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116883\">tmandry</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-08-12.20.2354818/near/249245759\">said</a>:</p>\n<blockquote>\n<p>when would we link generic monomorphizations dynamically?</p>\n</blockquote>\n<p>a function doesn't have to be generic to end up with generics in its mangling</p>",
        "id": 249245917,
        "sender_full_name": "eddyb",
        "timestamp": 1628780321
    },
    {
        "content": "<p>(usually methods in an <code>impl</code> will result in the <code>Self</code> type being included)</p>",
        "id": 249245993,
        "sender_full_name": "eddyb",
        "timestamp": 1628780355
    },
    {
        "content": "<p>are there any concerns to discuss here besides the ones that <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> had raised?</p>",
        "id": 249246025,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628780371
    },
    {
        "content": "<p>I don't think so</p>",
        "id": 249246218,
        "sender_full_name": "mw",
        "timestamp": 1628780428
    },
    {
        "content": "<p>yeah so it would be a large effort but I’ll point out that we don’t <em>have</em> to do symbolization in-process like we do now (fuchsia doesn’t) and instead invest in tooling that makes it easy to split that info out of the binary and stitch it up later</p>",
        "id": 249246264,
        "sender_full_name": "tmandry",
        "timestamp": 1628780444
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-08-12.20.2354818/near/249245564\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> right, okay. so I’m just trying to say: As long as we ensure that demanglers are told that they should be <em>prepared</em> to handle either choice of encoding for a symbol, then this all sounds fine to me. I.e. that sounds like a way to address <span class=\"user-mention silent\" data-user-id=\"123856\">Vadim Petrochenkov</span> ’s concern.</p>\n</blockquote>\n<p>I guess there's two paths we could take: either have a field-name-oriented grammar and have the ability to not include the extra information in the mangler, <em>or</em> have two grammars</p>\n<p>the difference being that the former requires no more effort right now</p>",
        "id": 249246330,
        "sender_full_name": "eddyb",
        "timestamp": 1628780474
    },
    {
        "content": "<p>(modulo the dynamic linking symbol names, can’t do anything about that)</p>",
        "id": 249246343,
        "sender_full_name": "tmandry",
        "timestamp": 1628780478
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116883\">tmandry</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-08-12.20.2354818/near/249246264\">said</a>:</p>\n<blockquote>\n<p>yeah so it would be a large effort but I’ll point out that we don’t <em>have</em> to do symbolization in-process like we do now (fuchsia doesn’t) and instead invest in tooling that makes it easy to split that info out of the binary and stitch it up later</p>\n</blockquote>\n<p>Like <code>objcopy --extract-symbol</code>?</p>",
        "id": 249246428,
        "sender_full_name": "bjorn3",
        "timestamp": 1628780513
    },
    {
        "content": "<p>my concern is: if we decide to support both options, how to we decide what the compiler emits by default?</p>",
        "id": 249246498,
        "sender_full_name": "mw",
        "timestamp": 1628780528
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> probably, I haven’t used that flag specifically though</p>",
        "id": 249246554,
        "sender_full_name": "tmandry",
        "timestamp": 1628780554
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124287\">mw</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-08-12.20.2354818/near/249246498\">said</a>:</p>\n<blockquote>\n<p>my concern is: if we decide to support both options, how to we decide what the compiler emits by default?</p>\n</blockquote>\n<p>Either flags or source attributes?</p>",
        "id": 249246587,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628780572
    },
    {
        "content": "<p>It seems like a solvable problem</p>",
        "id": 249246637,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628780594
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span> I'd defer that question to when those const generics are stabilized, but maybe that's not a good enough answer, heh</p>",
        "id": 249246640,
        "sender_full_name": "eddyb",
        "timestamp": 1628780596
    },
    {
        "content": "<p>(all you need in the process is unwind info to get the stack of PC counters and you can do everything else out of process)</p>",
        "id": 249246647,
        "sender_full_name": "tmandry",
        "timestamp": 1628780601
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-08-12.20.2354818/near/249246587\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"124287\">mw</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-08-12.20.2354818/near/249246498\">said</a>:</p>\n<blockquote>\n<p>my concern is: if we decide to support both options, how to we decide what the compiler emits by default?</p>\n</blockquote>\n<p>Either (command-line) flags or source attributes?</p>\n</blockquote>\n<p>Yes, you can make it configurable. But most users will just use the default -- and \"in their darkest hour\" be stuck with that</p>",
        "id": 249246770,
        "sender_full_name": "mw",
        "timestamp": 1628780646
    },
    {
        "content": "<p>Yeah. And so that will indeed be a discussion we’ll need to have, in terms of what the <em>right</em> defaults are</p>",
        "id": 249246803,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628780664
    },
    {
        "content": "<p>we can’t decide that right now anyway, since there’s negative 4 minutes left in the meeting.</p>",
        "id": 249246830,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628780681
    },
    {
        "content": "<p>Thanks to everyone in <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span> for attending! Be well, everyone!</p>",
        "id": 249246864,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628780697
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-08-12.20.2354818/near/249246803\">said</a>:</p>\n<blockquote>\n<p>Yeah. And so that will indeed be a discussion we’ll need to have, in terms of what the <em>right</em> defaults are</p>\n</blockquote>\n<p>(I was briefly musing, maybe use —release vs non-release as the basis, in terms of how the crate that <em>defines</em> the symbol is compiled.)</p>",
        "id": 249247044,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628780775
    },
    {
        "content": "<p>my proposal: </p>\n<ol>\n<li>merge the implementation with both options available (both in the mangler and demangler)</li>\n<li>don't merge the RFC amendment yet</li>\n<li>gather some real world data once we can do that easily</li>\n</ol>",
        "id": 249247119,
        "sender_full_name": "mw",
        "timestamp": 1628780812
    },
    {
        "content": "<p>but then again, my \"darkest hour” is usually associated with release builds. :)</p>",
        "id": 249247126,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628780814
    },
    {
        "content": "<p>that's basically <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>'s \"defer until const generics stabilization\", I guess</p>",
        "id": 249247184,
        "sender_full_name": "mw",
        "timestamp": 1628780841
    },
    {
        "content": "<p>but it would unblock making the new scheme the new default</p>",
        "id": 249247230,
        "sender_full_name": "mw",
        "timestamp": 1628780858
    },
    {
        "content": "<p>(I’m good with that.)</p>",
        "id": 249247390,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628780925
    },
    {
        "content": "<p>ah there were a couple things I forgot to mention - there's a separate concern about e.g. <code>Foo</code> vs <code>Foo {}</code>, and also we need a choice of variant for <code>enum</code>s, but for <code>struct</code>s even the path of the <code>struct</code> is redundant</p>",
        "id": 249247639,
        "sender_full_name": "eddyb",
        "timestamp": 1628781017
    },
    {
        "content": "<p>so there's a tradeoff sliding scale of \"how much redundant information is kept in\"</p>",
        "id": 249247679,
        "sender_full_name": "eddyb",
        "timestamp": 1628781037
    },
    {
        "content": "<blockquote>\n<p>also we need a choice of variant for enums, but for structs even the path of the struct is redundant</p>\n</blockquote>\n<p>Can you elaborate on these two points?</p>",
        "id": 249247727,
        "sender_full_name": "mw",
        "timestamp": 1628781069
    },
    {
        "content": "<p>right now <code>enum</code> values are encoded as if their variants were <code>struct</code>s</p>",
        "id": 249247787,
        "sender_full_name": "eddyb",
        "timestamp": 1628781097
    },
    {
        "content": "<p>so you end up with <code>core::option::Option::Some(...)</code> <em>as if</em> <code>Some</code> was a tuple <code>struct</code></p>",
        "id": 249247864,
        "sender_full_name": "eddyb",
        "timestamp": 1628781124
    },
    {
        "content": "<p>The path of the struct is redundant because you can infer it from the overall context as you traverse, right?</p>",
        "id": 249247912,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628781139
    },
    {
        "content": "<p>that's why the docs on the grammar and whatnot say variant/struct (or should, at least)</p>",
        "id": 249247913,
        "sender_full_name": "eddyb",
        "timestamp": 1628781139
    },
    {
        "content": "<p>i.e. you only need the topmost path</p>",
        "id": 249247990,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628781173
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-08-12.20.2354818/near/249247912\">said</a>:</p>\n<blockquote>\n<p>The path of the struct is redundant because you can infer it from the overall context as you traverse, right?</p>\n</blockquote>\n<p>right, the type is fixed by whatever generic you're instantiating</p>",
        "id": 249247993,
        "sender_full_name": "eddyb",
        "timestamp": 1628781173
    },
    {
        "content": "<p>OK, I understand</p>",
        "id": 249248018,
        "sender_full_name": "mw",
        "timestamp": 1628781185
    },
    {
        "content": "<p>you could just emit <code>Some(2)</code></p>",
        "id": 249248050,
        "sender_full_name": "mw",
        "timestamp": 1628781200
    },
    {
        "content": "<p>oy. Talk about darkest hours</p>",
        "id": 249248117,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628781237
    },
    {
        "content": "<p>or for a struct <code>foo::bar::Baz { x: 2, y: 3 }</code> it would be enough to emit <code>{ 2, 3 }</code> in the extreme</p>",
        "id": 249248127,
        "sender_full_name": "mw",
        "timestamp": 1628781242
    },
    {
        "content": "<p>or <code>None</code> =&gt; <code>0</code>, <code>Some(2)</code> =&gt; <code>(1, 2)</code> :P</p>",
        "id": 249248214,
        "sender_full_name": "eddyb",
        "timestamp": 1628781278
    },
    {
        "content": "<p>you don’t need the path for a struct, but you need any types it got instantiated with</p>",
        "id": 249248230,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628781286
    },
    {
        "content": "<p>or … i guess you can get that from context too …?</p>",
        "id": 249248253,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628781296
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> the entire type of the <code>const</code> generic parameter has to be determined from elsewhere</p>",
        "id": 249248274,
        "sender_full_name": "eddyb",
        "timestamp": 1628781308
    },
    {
        "content": "<p>it can't be polymorphic on its own</p>",
        "id": 249248305,
        "sender_full_name": "eddyb",
        "timestamp": 1628781323
    },
    {
        "content": "<p>yeah okay</p>",
        "id": 249248319,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628781329
    },
    {
        "content": "<p>anyway, I picked the approach that results in valid Rust syntax, but that also means the most redundancy</p>",
        "id": 249248427,
        "sender_full_name": "eddyb",
        "timestamp": 1628781370
    },
    {
        "content": "<p>it does seem a bit wasteful...</p>",
        "id": 249248477,
        "sender_full_name": "mw",
        "timestamp": 1628781396
    },
    {
        "content": "<p>I’m pretty torn here</p>",
        "id": 249248742,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628781506
    },
    {
        "content": "<p>we still don't know how widespread <code>const</code> generic parameters of user-defined types will be</p>",
        "id": 249248753,
        "sender_full_name": "eddyb",
        "timestamp": 1628781511
    },
    {
        "content": "<p>hard to make any \"data-driven\" decisions here at this point</p>",
        "id": 249248786,
        "sender_full_name": "eddyb",
        "timestamp": 1628781528
    },
    {
        "content": "<p>I think we'll need to experiment with both</p>",
        "id": 249248788,
        "sender_full_name": "mw",
        "timestamp": 1628781528
    },
    {
        "content": "<p>yeah. So land current design, but also try to throw together a more optimized one?</p>",
        "id": 249248869,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628781563
    },
    {
        "content": "<p>the nice thing about the more verbose/redundant encoding is you can elide aspects and demanglers will handle it just fine</p>",
        "id": 249248904,
        "sender_full_name": "eddyb",
        "timestamp": 1628781584
    },
    {
        "content": "<p>how many bytes is an empty identifier?</p>",
        "id": 249249019,
        "sender_full_name": "mw",
        "timestamp": 1628781618
    },
    {
        "content": "<p>one?</p>",
        "id": 249249036,
        "sender_full_name": "mw",
        "timestamp": 1628781624
    },
    {
        "content": "<p><code>0</code></p>",
        "id": 249249042,
        "sender_full_name": "mw",
        "timestamp": 1628781626
    },
    {
        "content": "<p>yeah</p>",
        "id": 249249053,
        "sender_full_name": "eddyb",
        "timestamp": 1628781629
    },
    {
        "content": "<p>honestly we lose a lot either way because of the lack of cross-symbol subtree reuse, I wish tooling had anything remotely close to something like that (cc <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span>)</p>",
        "id": 249249138,
        "sender_full_name": "eddyb",
        "timestamp": 1628781673
    },
    {
        "content": "<p>but the grammar would allow us to just make the field names and paths optional, right?</p>",
        "id": 249249146,
        "sender_full_name": "mw",
        "timestamp": 1628781677
    },
    {
        "content": "<p>I mean, yeah, but you can also \"just\" use tuples etc.</p>",
        "id": 249249212,
        "sender_full_name": "eddyb",
        "timestamp": 1628781708
    },
    {
        "content": "<p>just to keep pulling at this thread: the logic you’re working through here also implies that the “R” for &amp;value and “Q” for &amp;mut value are unncessary too, right?</p>",
        "id": 249249219,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628781713
    },
    {
        "content": "<p>you don't even need nesting, if you go far enough</p>",
        "id": 249249297,
        "sender_full_name": "eddyb",
        "timestamp": 1628781731
    },
    {
        "content": "<p>just a flat list of integer/<code>str</code> leaves</p>",
        "id": 249249342,
        "sender_full_name": "eddyb",
        "timestamp": 1628781747
    },
    {
        "content": "<p>right, okay</p>",
        "id": 249249353,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628781754
    },
    {
        "content": "<p>I don't have strong opinions, other than I would like <code>v0</code> to become the default without me having to justify more time away from more-Rust-GPU-specific things :P</p>",
        "id": 249249468,
        "sender_full_name": "eddyb",
        "timestamp": 1628781802
    },
    {
        "content": "<p>yes, I'd say let's revisit once const generics get stabilized</p>",
        "id": 249249535,
        "sender_full_name": "mw",
        "timestamp": 1628781840
    },
    {
        "content": "<p>(or are anywhere close to)</p>",
        "id": 249249589,
        "sender_full_name": "eddyb",
        "timestamp": 1628781850
    },
    {
        "content": "<p>yes</p>",
        "id": 249249612,
        "sender_full_name": "mw",
        "timestamp": 1628781859
    },
    {
        "content": "<p>having an easy way for someone to opt into one choice or the other (flattened vs tree) would be nice</p>",
        "id": 249249616,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628781860
    },
    {
        "content": "<p>ideally we have this sorted out before the stabilization button is pushed</p>",
        "id": 249249634,
        "sender_full_name": "eddyb",
        "timestamp": 1628781866
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-08-12.20.2354818/near/249249616\">said</a>:</p>\n<blockquote>\n<p>having an easy way for someone to opt into one choice or the other (flattened vs tree) would be nice</p>\n</blockquote>\n<p>I think that's doable</p>",
        "id": 249249725,
        "sender_full_name": "mw",
        "timestamp": 1628781901
    },
    {
        "content": "<p>we can literally just dump out a big tuple or array, using the \"fancy\" encoding, but in a limited fashion</p>",
        "id": 249249829,
        "sender_full_name": "eddyb",
        "timestamp": 1628781934
    },
    {
        "content": "<p>in a sense, the mangling grammar is like a tiny subset of Rust ASTs, I guess</p>",
        "id": 249249874,
        "sender_full_name": "eddyb",
        "timestamp": 1628781954
    },
    {
        "content": "<p>if people want the absolute minimum, we could also try to find a way to flatten a constant tree into a single bitstream that we then encode in base 62 (instead of hex), there'd just not be any good way to get much out of it :P</p>",
        "id": 249250084,
        "sender_full_name": "eddyb",
        "timestamp": 1628782035
    },
    {
        "content": "<p>(like, we can add an alternative to <code>K</code> that's \"const generic argument, compact\")</p>",
        "id": 249250135,
        "sender_full_name": "eddyb",
        "timestamp": 1628782065
    },
    {
        "content": "<p>At that point we can just start introducing hashes again :)</p>",
        "id": 249250151,
        "sender_full_name": "mw",
        "timestamp": 1628782074
    },
    {
        "content": "<p>nope, all the data is there, so it's still isomorphic :P</p>",
        "id": 249250241,
        "sender_full_name": "eddyb",
        "timestamp": 1628782099
    },
    {
        "content": "<p>we can add a side note about a \"sufficiently smart demangler\" to the RFC <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 249250432,
        "sender_full_name": "mw",
        "timestamp": 1628782201
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span> <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> anyway, I gtg, but thank you so much for indulging this, it really helped!</p>",
        "id": 249250570,
        "sender_full_name": "eddyb",
        "timestamp": 1628782249
    },
    {
        "content": "<p>Thanks for all the work you're putting into this, <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>!</p>",
        "id": 249250659,
        "sender_full_name": "mw",
        "timestamp": 1628782285
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> hey, wait: Can consts be graph structured?</p>",
        "id": 249250689,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628782308
    },
    {
        "content": "<p>nope, they have to behave like type constructors</p>",
        "id": 249250771,
        "sender_full_name": "eddyb",
        "timestamp": 1628782336
    },
    {
        "content": "<p>Okay</p>",
        "id": 249250779,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628782340
    },
    {
        "content": "<p>so there should be no travesal that can descend infinitely or anything</p>",
        "id": 249250799,
        "sender_full_name": "eddyb",
        "timestamp": 1628782352
    },
    {
        "content": "<p>right. I was worried about 1. infinite traversal but also 2. exponential blowup via shared in an directed acyclic graph</p>",
        "id": 249250868,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628782383
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span>'s \"valtree\" work cements this deeper by not using miri allocations from the typesystem, but instead a pure representation of value constructors and their children</p>",
        "id": 249250880,
        "sender_full_name": "eddyb",
        "timestamp": 1628782386
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-08-12.20.2354818/near/249250868\">said</a>:</p>\n<blockquote>\n<p>right. I was worried about 1. infinite traversal but also 2. exponential blowup via shared in an directed acyclic graph</p>\n</blockquote>\n<p>ah because sharing gets optimized today?</p>",
        "id": 249250949,
        "sender_full_name": "eddyb",
        "timestamp": 1628782420
    },
    {
        "content": "<p>anyway, bbl</p>",
        "id": 249250989,
        "sender_full_name": "eddyb",
        "timestamp": 1628782438
    },
    {
        "content": "<p>later</p>",
        "id": 249250995,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628782441
    },
    {
        "content": "<p>Draft for next week's agenda is available at:<br>\n<a href=\"https://hackmd.io/VNIxtjGBT8Owfkb92Vzt6w?view\">https://hackmd.io/VNIxtjGBT8Owfkb92Vzt6w?view</a></p>\n<p>Scheduled checkins from:</p>\n<ul>\n<li><span class=\"user-group-mention\" data-user-group-id=\"1123\">@WG-self-profile</span>  by <span class=\"user-mention\" data-user-id=\"124287\">@mw</span>  <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span>  (<a href=\"https://hackmd.io/tuLB5d6ETKCZGS3cpzzRiA#WG-checkins\">latest checkin</a>)</li>\n</ul>",
        "id": 249255901,
        "sender_full_name": "apiraino",
        "timestamp": 1628784882
    },
    {
        "content": "<p>Sorry I missed the update wg-2229 had to provide, for some reason I thought that was next week.</p>\n<p>We have mostly been working mostly just been on bug fixes as more people try 2021 edition.</p>",
        "id": 249264076,
        "sender_full_name": "Aman Arora",
        "timestamp": 1628788629
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 249992946,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629382644
    }
]