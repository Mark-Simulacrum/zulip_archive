[
    {
        "content": "<p>this friday's meeting on robust incr-comp will take place here.</p>",
        "id": 277004037,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648560389
    },
    {
        "content": "<p>hi <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span> , its time for the meeting on robust incr-comp, I believe</p>",
        "id": 277440293,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648828983
    },
    {
        "content": "<p>put a <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> above to show you're here</p>",
        "id": 277440313,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648828991
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span> has prepared a doc. (Arguably two docs!)</p>",
        "id": 277440353,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648829008
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"124287\">@mw</span>!</p>",
        "id": 277440390,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1648829023
    },
    {
        "content": "<p><a href=\"https://hackmd.io/@michaelwoerister/SJRXZBVQ5\">https://hackmd.io/@michaelwoerister/SJRXZBVQ5</a></p>",
        "id": 277440418,
        "sender_full_name": "mw",
        "timestamp": 1648829034
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span> do you want me to drive the structure of the meeting itself?</p>",
        "id": 277440423,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648829037
    },
    {
        "content": "<p>or would you prefer to drive?</p>",
        "id": 277440471,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648829043
    },
    {
        "content": "<p>I'm fine with you driving</p>",
        "id": 277440507,
        "sender_full_name": "mw",
        "timestamp": 1648829061
    },
    {
        "content": "<p>okay</p>",
        "id": 277440510,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648829063
    },
    {
        "content": "<p>its the usual: click the <span aria-label=\"book\" class=\"emoji emoji-1f4d6\" role=\"img\" title=\"book\">:book:</span> when you start reading. when you finish, leave it clicked, and click the <span aria-label=\"checkered flag\" class=\"emoji emoji-1f3c1\" role=\"img\" title=\"checkered flag\">:checkered_flag:</span> to signal that you have finished.</p>",
        "id": 277440584,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648829095
    },
    {
        "content": "<p>Just the one doc, yes?</p>",
        "id": 277440635,
        "sender_full_name": "pierwill",
        "timestamp": 1648829116
    },
    {
        "content": "<p>leave questions about content on the side bar, but big topics / big questions for discussion should be enqueued at the end of the doc</p>",
        "id": 277440640,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648829118
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span> my impression is that we'll just focus on reading the one doc, right?</p>",
        "id": 277440678,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648829134
    },
    {
        "content": "<p>Yes, I'd say so too</p>",
        "id": 277440696,
        "sender_full_name": "mw",
        "timestamp": 1648829145
    },
    {
        "content": "<p>there's also the pre-existing doc here: <a href=\"https://hackmd.io/@michaelwoerister/SJf9VU1-5\">https://hackmd.io/@michaelwoerister/SJf9VU1-5</a></p>",
        "id": 277440715,
        "sender_full_name": "mw",
        "timestamp": 1648829155
    },
    {
        "content": "<p>(maybe we'll take everyone's temperature at the end of the read to see if we need to dive into the other one)</p>",
        "id": 277440725,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648829159
    },
    {
        "content": "<p>but it goes into too much detail</p>",
        "id": 277440780,
        "sender_full_name": "mw",
        "timestamp": 1648829164
    },
    {
        "content": "<p>to be clear: <a href=\"https://hackmd.io/@michaelwoerister/SJRXZBVQ5\">https://hackmd.io/@michaelwoerister/SJRXZBVQ5</a> is the doc for this meeting</p>",
        "id": 277440946,
        "sender_full_name": "mw",
        "timestamp": 1648829226
    },
    {
        "content": "<p>As usual I don't have a hackmd acct to post comments inline, but one thing I want to point out is that current query system no longer serves “just” the incremental compilation use-case. It also serves as an infrastructure to provide data from some parts of the compiler to the others. An example that comes to mind could be the backend providing some information to the frontend as necessary to derive e.g. <code>cfg</code>s.</p>",
        "id": 277442004,
        "sender_full_name": "nagisa",
        "timestamp": 1648829662
    },
    {
        "content": "<p>Are you referring to the 'query provider' setup?</p>",
        "id": 277442118,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648829720
    },
    {
        "content": "<p>it looks like the <span aria-label=\"checkered flag\" class=\"emoji emoji-1f3c1\" role=\"img\" title=\"checkered flag\">:checkered_flag:</span> has caught up to the <span aria-label=\"book\" class=\"emoji emoji-1f4d6\" role=\"img\" title=\"book\">:book:</span></p>",
        "id": 277442125,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648829722
    },
    {
        "content": "<p>so let me just ask: since we finished reading this doc so quickly, should we consider looking at the other one too?</p>",
        "id": 277442177,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648829749
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277442118\">said</a>:</p>\n<blockquote>\n<p>Are you referring to the 'query provider' setup?</p>\n</blockquote>\n<p>in a way yes, since that's  part of the relevant infrastructure.</p>",
        "id": 277442184,
        "sender_full_name": "nagisa",
        "timestamp": 1648829754
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277442177\">said</a>:</p>\n<blockquote>\n<p>so let me just ask: since we finished reading this doc so quickly, should we consider looking at the other one too?</p>\n</blockquote>\n<p>I'm guessing the answer is \"no, lets make a decision based on what is written here.\"</p>",
        "id": 277442245,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648829770
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277442004\">said</a>:</p>\n<blockquote>\n<p>As usual I don't have a hackmd acct to post comments inline</p>\n</blockquote>\n<p>i hadn't realized there was a fundamental workflow problem here</p>",
        "id": 277442320,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648829819
    },
    {
        "content": "<p>If someone feels like there is some other possibility that is strongly motivated by data in the other doc, then it might be worth reading but I'm satisfied by the possibilities outlined in the current document.</p>",
        "id": 277442326,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1648829824
    },
    {
        "content": "<p>Is anyone here involved with work on Salsa?</p>",
        "id": 277442336,
        "sender_full_name": "pierwill",
        "timestamp": 1648829830
    },
    {
        "content": "<p>Would want to know if there'd realistically be owners for option 2.</p>",
        "id": 277442365,
        "sender_full_name": "pierwill",
        "timestamp": 1648829848
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> is there any particular reason you do not want to make a hackmd account? Or is it just \"I don't want to bother with yet another account for yet another service\" ?</p>",
        "id": 277442381,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648829859
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"316352\">pierwill</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277442365\">said</a>:</p>\n<blockquote>\n<p>Would want to know if there'd realistically be owners for option 2.</p>\n</blockquote>\n<p>I'd be interested, but I need to talk to niko beforehand in order to understand the model better.</p>",
        "id": 277442466,
        "sender_full_name": "cjgillot",
        "timestamp": 1648829885
    },
    {
        "content": "<p>From my perspective, the continued reliance on dynamically detecting query dependencies (e.g. recording every time we make a call to a query) is a significant drawback of options 1 and 2</p>",
        "id": 277442509,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648829905
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277442381\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> is there any particular reason you do not want to make a hackmd account? Or is it just \"I don't want to bother with yet another account for yet another service\" ?</p>\n</blockquote>\n<p>I don't really have use-case for one, and when a use-case does come up its in a middle of a meeting. So I end up never registering.</p>",
        "id": 277442515,
        "sender_full_name": "nagisa",
        "timestamp": 1648829907
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277442381\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> is there any particular reason you do not want to make a hackmd account? Or is it just \"I don't want to bother with yet another account for yet another service\" ?</p>\n</blockquote>\n<p>My question is motivated by: I've been assuming this workflow works for everyone, but now I'm worried it is exclusionary</p>",
        "id": 277442516,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648829907
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277442515\">said</a>:</p>\n<blockquote>\n<p>I don't really have use-case for one, and when a use-case does come up its in a middle of a meeting.</p>\n</blockquote>\n<p>okay</p>",
        "id": 277442563,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648829932
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277442509\">said</a>:</p>\n<blockquote>\n<p>From my perspective, the continued reliance on dynamically detecting query dependencies (e.g. recording every time we make a call to a query) is a significant drawback of options 1 and 2</p>\n</blockquote>\n<p>Do you know of an alternative?</p>",
        "id": 277442626,
        "sender_full_name": "mw",
        "timestamp": 1648829962
    },
    {
        "content": "<p>You can sign in to hackmd with github</p>",
        "id": 277442638,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648829969
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"316352\">pierwill</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277442336\">said</a>:</p>\n<blockquote>\n<p>Is anyone here involved with work on Salsa?</p>\n</blockquote>\n<p>Salsa is used in rust-analyzer, right?</p>",
        "id": 277442642,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648829970
    },
    {
        "content": "<p>i.e. it seems like a worthwhile investment to get more members of this team familar with it</p>",
        "id": 277442687,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648829996
    },
    {
        "content": "<p>(and I say that as someone who has not used it myself.)</p>",
        "id": 277442765,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648830014
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span> Unfortunately, the only alternative I can think of would be the radical simplification in option 3</p>",
        "id": 277442786,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648830025
    },
    {
        "content": "<p>Which of course brings its own set of problems</p>",
        "id": 277442818,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648830038
    },
    {
        "content": "<p>However, the dynamic registration is the single biggest issue with the current system, in my mind</p>",
        "id": 277442857,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648830056
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124287\">mw</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277442626\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277442509\">said</a>:</p>\n<blockquote>\n<p>From my perspective, the continued reliance on dynamically detecting query dependencies (e.g. recording every time we make a call to a query) is a significant drawback of options 1 and 2</p>\n</blockquote>\n<p>Do you know of an alternative?</p>\n</blockquote>\n<p>I think it part of the cases we can pass dependency results directly into the query function.</p>",
        "id": 277442893,
        "sender_full_name": "bjorn3",
        "timestamp": 1648830069
    },
    {
        "content": "<p>Does anyone feel strongly that we _need to_ move away from the current system?</p>",
        "id": 277442924,
        "sender_full_name": "pierwill",
        "timestamp": 1648830077
    },
    {
        "content": "<p>It makes it easy for different compiler developers to make changes that are all reasonable in isolation, but that break incr comp when combined:</p>",
        "id": 277442933,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648830080
    },
    {
        "content": "<p>Is the dynamic registration a <em>robustness</em> issue or a <em>performance</em> issue?</p>",
        "id": 277442940,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1648830082
    },
    {
        "content": "<p>Robustness</p>",
        "id": 277442949,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648830087
    },
    {
        "content": "<p>E.g:</p>",
        "id": 277442955,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648830090
    },
    {
        "content": "<p>One developer adds a thread_local cache to one part of the compiler, and computes entries by calling some function in another part of the compiler</p>",
        "id": 277443041,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648830121
    },
    {
        "content": "<p>Later on, another developer changes the callee to invoke a query</p>",
        "id": 277443108,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648830134
    },
    {
        "content": "<p>This can happen by accident, since there are some places where we pull a tcx out of thin air (e.g. <code>Debug</code> impls)</p>",
        "id": 277443169,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648830160
    },
    {
        "content": "<p>I would personally like to see all caches not stored in TyCtxt to be gone.</p>",
        "id": 277443183,
        "sender_full_name": "bjorn3",
        "timestamp": 1648830164
    },
    {
        "content": "<p>Unfortunately, I think that would incur a pretty big performance hit in some cases</p>",
        "id": 277443240,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648830191
    },
    {
        "content": "<p>Especially around HashStable impls</p>",
        "id": 277443255,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648830197
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277443183\">said</a>:</p>\n<blockquote>\n<p>I would personally like to see all caches not stored in TyCtxt to be gone.</p>\n</blockquote>\n<p>Yes, I think that would necessarily be part of fixing the current system</p>",
        "id": 277443278,
        "sender_full_name": "mw",
        "timestamp": 1648830204
    },
    {
        "content": "<p>but we should benchmark it if we haven't already</p>",
        "id": 277443280,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648830204
    },
    {
        "content": "<p>i would even like most caches stored in the <code>TyCtxt</code> gone '^^</p>",
        "id": 277443365,
        "sender_full_name": "lcnr",
        "timestamp": 1648830241
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277443255\">said</a>:</p>\n<blockquote>\n<p>Especially around HashStable impls</p>\n</blockquote>\n<p>The cached hashes could potentially be moved into the values themselves</p>",
        "id": 277443371,
        "sender_full_name": "mw",
        "timestamp": 1648830243
    },
    {
        "content": "<p>the other doc had a number of items where it suggested adding specific lints to detect coding patterns that we do not want in rustc. So it seems important to tease out whether we're worried about such caches being added by accident (because someone was not aware of the right pattern), or being added deliberately because \"the right way\" is too slow.</p>",
        "id": 277443384,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648830250
    },
    {
        "content": "<p>My main concern is accidental addition</p>",
        "id": 277443426,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648830272
    },
    {
        "content": "<p>and determining that, as <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> says, requires benchmarking.</p>",
        "id": 277443428,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648830272
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277443365\">said</a>:</p>\n<blockquote>\n<p>i would even like most caches stored in the <code>TyCtxt</code> gone '^^</p>\n</blockquote>\n<p>is there a way to have a sound cache (outside of the query system) which caches a computation which calls some other query?</p>",
        "id": 277443447,
        "sender_full_name": "lcnr",
        "timestamp": 1648830280
    },
    {
        "content": "<p>okay, well, accidental addition might be addressable via lints</p>",
        "id": 277443464,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648830286
    },
    {
        "content": "<p>(they'd have to be pretty sophisticated lints, perhaps)</p>",
        "id": 277443483,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648830296
    },
    {
        "content": "<p>I am not certain lints can catch everything, but they seem a step in the right direction</p>",
        "id": 277443494,
        "sender_full_name": "mw",
        "timestamp": 1648830301
    },
    {
        "content": "<p>More fundamentally, my concern is that we're relying on a relative fragile model (queries are pure functions, but we always have to call them in the same way)</p>",
        "id": 277443504,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648830306
    },
    {
        "content": "<blockquote>\n<p>all caches not stored in TyCtxt to be gone</p>\n</blockquote>\n<p>Noob quetsion: What's an example of a cache stored outside the TyCtx</p>",
        "id": 277443531,
        "sender_full_name": "pierwill",
        "timestamp": 1648830319
    },
    {
        "content": "<p>and then trying to fix some of the deficiencies with lints</p>",
        "id": 277443532,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648830319
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277443447\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277443365\">said</a>:</p>\n<blockquote>\n<p>i would even like most caches stored in the <code>TyCtxt</code> gone '^^</p>\n</blockquote>\n<p>is there a way to have a sound cache (outside of the query system) which caches a computation which calls some other query?</p>\n</blockquote>\n<p>There is a datastructure un rustc_query_system::cache created for the trait system.</p>",
        "id": 277443558,
        "sender_full_name": "cjgillot",
        "timestamp": 1648830327
    },
    {
        "content": "<p>this seems like a recipe for a continuous stream of incr comp bugs (albeit at a lower rate than we currently have them)</p>",
        "id": 277443592,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648830346
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"316352\">@pierwill</span> The HashStable impl for ExpnId, IIRC</p>",
        "id": 277443619,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648830360
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"316352\">pierwill</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277443531\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>all caches not stored in TyCtxt to be gone</p>\n</blockquote>\n<p>Noob quetsion: What's an example of a cache stored outside the TyCtx</p>\n</blockquote>\n<p>Several <code>HashStable</code> impls cache intermediate `Fingerprint's.</p>",
        "id": 277443663,
        "sender_full_name": "bjorn3",
        "timestamp": 1648830365
    },
    {
        "content": "<p>I'm on mobile atm, so it's hard for me to check</p>",
        "id": 277443673,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648830368
    },
    {
        "content": "<p>eg <a href=\"https://github.com/rust-lang/rust/blob/0677edc86e342f333d4828b0ee1ef395a4e70fe5/compiler/rustc_middle/src/ty/adt.rs#L139-L141\">https://github.com/rust-lang/rust/blob/0677edc86e342f333d4828b0ee1ef395a4e70fe5/compiler/rustc_middle/src/ty/adt.rs#L139-L141</a></p>",
        "id": 277443716,
        "sender_full_name": "bjorn3",
        "timestamp": 1648830391
    },
    {
        "content": "<p><code>List&lt;T&gt;</code> cache their <code>HashStable</code> with a <code>HashMap&lt;ptr_to_list, FingerPrint&gt;</code></p>",
        "id": 277443723,
        "sender_full_name": "lcnr",
        "timestamp": 1648830394
    },
    {
        "content": "<p>i'm struck by the fact that the main example we have of caches (as a thing that could break incr-comp) are there to support incr-comp</p>",
        "id": 277443852,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648830455
    },
    {
        "content": "<blockquote>\n<p>all caches not stored in TyCtxt to be gone.</p>\n</blockquote>\n<p>Is there a possibility this could unlock performance gains <em>outside</em> incr comp/query system?</p>",
        "id": 277443880,
        "sender_full_name": "pierwill",
        "timestamp": 1648830468
    },
    {
        "content": "<p>Those caches are effectively global (in the single-threaded compiler), so I don't think moving them to TyCtxt or deleting them will give any performance wins</p>",
        "id": 277444036,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648830512
    },
    {
        "content": "<p>Except for a possible speedup from avoiding TLS access</p>",
        "id": 277444077,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648830532
    },
    {
        "content": "<p>It seems weird to bring performance improvements into this. We should focus on improving robustness IMO.</p>",
        "id": 277444099,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648830542
    },
    {
        "content": "<p>I was also thinking of if <code>thread_local!</code> is no longer used in the compiler it would become sound to run the compiler on the main thread (as is mecessary on eg wasm). Currently every compilation session needs it's own thread to isolate thread locals.</p>",
        "id": 277444150,
        "sender_full_name": "bjorn3",
        "timestamp": 1648830568
    },
    {
        "content": "<p>However, even TyCtxt caches can lead to incr comp issues - the main example being the trait selection cache</p>",
        "id": 277444178,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648830582
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"316352\">pierwill</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277443880\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>all caches not stored in TyCtxt to be gone.</p>\n</blockquote>\n<p>Is there a possibility this could unlock performance gains <em>outside</em> incr comp/query system?</p>\n</blockquote>\n<p>I ask because of unexpected performance gains from work on <a href=\"https://github.com/rust-lang/rust/issues/90317\">https://github.com/rust-lang/rust/issues/90317</a> (altho now i think this is unrelated to the topic discussed here...)</p>",
        "id": 277444278,
        "sender_full_name": "pierwill",
        "timestamp": 1648830612
    },
    {
        "content": "<p>The fact that we have to use the weird 'anon dep bode' thing isn't really due to anything specific to trait selection</p>",
        "id": 277444294,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648830622
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277444178\">said</a>:</p>\n<blockquote>\n<p>However, even TyCtxt caches can lead to incr comp issues - the main example being the trait selection cache</p>\n</blockquote>\n<p>could we make the query system strong enough so that that cache can just be implicitly be part of the query system?</p>",
        "id": 277444305,
        "sender_full_name": "lcnr",
        "timestamp": 1648830629
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> can you explain the distinction you see between \"tyctxt caches\" and the query system? I thought they were the same.</p>",
        "id": 277444319,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648830634
    },
    {
        "content": "<p>We have some fields in TyCtxt that are used to cache some results from trait selection</p>",
        "id": 277444355,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648830661
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277444305\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277444178\">said</a>:</p>\n<blockquote>\n<p>However, even TyCtxt caches can lead to incr comp issues - the main example being the trait selection cache</p>\n</blockquote>\n<p>could we make the query system strong enough so that that cache can just be implicitly be part of the query system?</p>\n</blockquote>\n<p>e.g. how well do we have to handle cycles to deal with that</p>",
        "id": 277444360,
        "sender_full_name": "lcnr",
        "timestamp": 1648830662
    },
    {
        "content": "<p>Before diving too much into details, maybe we can try to answer one question: Does anybody here think it is realistic that we remove incremental compilation altogether?</p>",
        "id": 277444369,
        "sender_full_name": "mw",
        "timestamp": 1648830670
    },
    {
        "content": "<p>IIRC, the 2 caches we have are either: stable hashes, and trait selection.  The first one may be managed by an interning scheme, and the second gets us back to the everlasting issus of cycles.</p>",
        "id": 277444377,
        "sender_full_name": "cjgillot",
        "timestamp": 1648830673
    },
    {
        "content": "<p>E.g. candidate selection and evaluation</p>",
        "id": 277444387,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648830679
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124287\">mw</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277444369\">said</a>:</p>\n<blockquote>\n<p>Before diving too much into details, maybe we can try to answer one question: Does anybody here think it is realistic that we remove incremental compilation altogether?</p>\n</blockquote>\n<p>yeah, okay, lets pause on cache discussion and focus on this</p>",
        "id": 277444436,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648830694
    },
    {
        "content": "<p>I think having some form of incremental compilation is a must</p>",
        "id": 277444437,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648830695
    },
    {
        "content": "<p>in order for the compiler performance to be generally acceptable</p>",
        "id": 277444473,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648830713
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124287\">mw</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277444369\">said</a>:</p>\n<blockquote>\n<p>Before diving too much into details, maybe we can try to answer one question: Does anybody here think it is realistic that we remove incremental compilation altogether?</p>\n</blockquote>\n<p>I would say no, given the current \"from scratch\" performance of rustc, incremental compilation is a must.</p>",
        "id": 277444486,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1648830721
    },
    {
        "content": "<p>The only way I could imagine us being able to get rid of incr-comp would be if we landed <em>amazing parallel comp</em></p>",
        "id": 277444539,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648830729
    },
    {
        "content": "<p>and that's too far off</p>",
        "id": 277444559,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648830739
    },
    {
        "content": "<p>Even with that, I think we'd still want some form of incr comp for LLVM</p>",
        "id": 277444587,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648830753
    },
    {
        "content": "<p>Or if we just magically got like 5x faster or something <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 277444593,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1648830758
    },
    {
        "content": "<p>In release mode, LLVM tends to dominate the compilation time</p>",
        "id": 277444617,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648830773
    },
    {
        "content": "<p>and CGU reuse is very important for keeping that time down</p>",
        "id": 277444633,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648830783
    },
    {
        "content": "<p>\"magic happens here\" steps are not allowed :P</p>",
        "id": 277444635,
        "sender_full_name": "mw",
        "timestamp": 1648830783
    },
    {
        "content": "<p>I don't know if parallel is enough even. There's only so many cores on a given machine and cargo tends to use a lot of them already.</p>",
        "id": 277444636,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648830783
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> does it \"dominate\"? I thought it was like 50% ?</p>",
        "id": 277444642,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648830786
    },
    {
        "content": "<p>which, okay, can be seen as \"dominating\"</p>",
        "id": 277444657,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648830796
    },
    {
        "content": "<p>It's usually more in the 60-70% + range from what I've seen.</p>",
        "id": 277444683,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1648830817
    },
    {
        "content": "<p>70-80% is not uncommon for opt builds</p>",
        "id": 277444686,
        "sender_full_name": "mw",
        "timestamp": 1648830820
    },
    {
        "content": "<p>hmm okay</p>",
        "id": 277444688,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648830823
    },
    {
        "content": "<p>Unless you're playing games with the type system.</p>",
        "id": 277444699,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1648830828
    },
    {
        "content": "<p>Yeah, thats been my experience</p>",
        "id": 277444715,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648830837
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277444617\">said</a>:</p>\n<blockquote>\n<p>In release mode, LLVM tends to dominate the compilation time</p>\n</blockquote>\n<p>Release mode has incr comp disabled by default as incr comp forces 256 cgus for better cgu reusing which makes the resulting binaries slower.</p>",
        "id": 277444769,
        "sender_full_name": "bjorn3",
        "timestamp": 1648830846
    },
    {
        "content": "<p>anyway, the argument is pretty solid: the only way we can reduce LLVM cost is by reusing build products</p>",
        "id": 277444794,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648830861
    },
    {
        "content": "<p>thus, incr-comp is a must</p>",
        "id": 277444799,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648830863
    },
    {
        "content": "<p>Ah,  guess that's because I mostly work on rustc, where we turn it on</p>",
        "id": 277444813,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648830870
    },
    {
        "content": "<p>It sounds like we've pretty conclusively ruled out option 4.</p>",
        "id": 277444874,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1648830903
    },
    {
        "content": "<p>OK, let's try to prune the decision tree some more: does anybody here think it is realistic to switch the compiler away from a query-based system (i.e. approach 3)</p>",
        "id": 277444875,
        "sender_full_name": "mw",
        "timestamp": 1648830904
    },
    {
        "content": "<p>it sounds like a potentially interesting research project</p>",
        "id": 277445024,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648830967
    },
    {
        "content": "<p>I don't think it is very realistic. The various compilation passes are too intermingled. Even without incr comp we would need queries to handle the const eval &lt;-&gt; type checking cycle.</p>",
        "id": 277445027,
        "sender_full_name": "bjorn3",
        "timestamp": 1648830968
    },
    {
        "content": "<p>Apart from the though experiment, I don't think we should.</p>",
        "id": 277445028,
        "sender_full_name": "cjgillot",
        "timestamp": 1648830968
    },
    {
        "content": "<p>but not something I would pick as a strategy</p>",
        "id": 277445043,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648830975
    },
    {
        "content": "<p>It <em>does</em> address the \"LLVM is too expensive\" issue</p>",
        "id": 277445107,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648831005
    },
    {
        "content": "<p>Agreed, if we determine we cannot support any form of fine grained incremental, then it seems like the obvious fallback but that isn't a foregone conclusion in my mind.</p>",
        "id": 277445131,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1648831015
    },
    {
        "content": "<p>I think we should separate the discussion of 'general query system's vs 'wuery tracking for incr comp'</p>",
        "id": 277445153,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648831024
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277445153\">said</a>:</p>\n<blockquote>\n<p>I think we should separate the discussion of 'general query system's vs 'wuery tracking for incr comp'</p>\n</blockquote>\n<p>can you elaborate?</p>",
        "id": 277445211,
        "sender_full_name": "mw",
        "timestamp": 1648831047
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> you mean, you can see a world where rustc offers a query system, but it is not the basis for incr-comp ?</p>",
        "id": 277445220,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648831050
    },
    {
        "content": "<p>Yes</p>",
        "id": 277445236,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648831057
    },
    {
        "content": "<p>That is, we still have global caching, and query providers in different crates</p>",
        "id": 277445265,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648831069
    },
    {
        "content": "<p>But we don't persist any of that to disk</p>",
        "id": 277445280,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648831077
    },
    {
        "content": "<p>We could combine that approach with the option-3 style incremental compilation</p>",
        "id": 277445386,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648831110
    },
    {
        "content": "<p>how would you implement incr. comp. with that?</p>",
        "id": 277445390,
        "sender_full_name": "mw",
        "timestamp": 1648831111
    },
    {
        "content": "<p>so, we'd basically produce LLVM bitcode files and check those for changes?</p>",
        "id": 277445475,
        "sender_full_name": "mw",
        "timestamp": 1648831156
    },
    {
        "content": "<p>or we generate stable-MIR to disk and check <em>those</em> for changes...</p>",
        "id": 277445518,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648831176
    },
    {
        "content": "<p>I still need to think through exactly what option 3 would look like</p>",
        "id": 277445542,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648831185
    },
    {
        "content": "<p>(and maintain a mapping from stable-MIR to the associated LLVM for it)</p>",
        "id": 277445561,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648831191
    },
    {
        "content": "<p>But I think the non-incremental wuey system is more of an overall compiler architecture decision, and wouldn't <em>necessarily</em> interfere with some other form of incremental compilation, and more than some other part of the compiler would</p>",
        "id": 277445694,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648831240
    },
    {
        "content": "<p>it's certainly interesting to think about what we could do with such an approach</p>",
        "id": 277445699,
        "sender_full_name": "mw",
        "timestamp": 1648831242
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124287\">mw</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277445390\">said</a>:</p>\n<blockquote>\n<p>how would you implement incr. comp. with that?</p>\n</blockquote>\n<p>I am not sure this is easy. incr-comp needs to control information flow. If by query, we mean that any code can access any information on demand, this will be hard.</p>",
        "id": 277445717,
        "sender_full_name": "cjgillot",
        "timestamp": 1648831254
    },
    {
        "content": "<p>However, I recognize that such and approach would likely take a huge amount of work</p>",
        "id": 277445741,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648831266
    },
    {
        "content": "<p>my gut is still in the mode of \"this is an interesting research idea, but I wouldn't want to commit to it as our strategy.\" at least, not without better understanding how bad it is to try to fix the current system, or adopt a richer query system like Salsa.</p>",
        "id": 277445753,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648831270
    },
    {
        "content": "<p>it would certainly perform a lot worse than what we have now</p>",
        "id": 277445821,
        "sender_full_name": "mw",
        "timestamp": 1648831308
    },
    {
        "content": "<p>but it might be an interesting idea to have it as a fallback for when we would need to turn off incremental otherwise</p>",
        "id": 277445901,
        "sender_full_name": "mw",
        "timestamp": 1648831340
    },
    {
        "content": "<p>My high-level question: what are the <em>soundness</em> concerns with current system that <em>need</em> to be solved?</p>",
        "id": 277445913,
        "sender_full_name": "pierwill",
        "timestamp": 1648831344
    },
    {
        "content": "<p>Not including engineering, maintenance concerns, etc</p>",
        "id": 277445952,
        "sender_full_name": "pierwill",
        "timestamp": 1648831363
    },
    {
        "content": "<p>well, there's two levels: One is soundness, for bugs that actually leak through into codegen issues</p>",
        "id": 277445970,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648831371
    },
    {
        "content": "<p>the other level is ICE's</p>",
        "id": 277445977,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648831375
    },
    {
        "content": "<p>that prevent soundness bugs, but are still terrible UX</p>",
        "id": 277445986,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648831384
    },
    {
        "content": "<p><a href=\"https://hackmd.io/@michaelwoerister/SJf9VU1-5\">https://hackmd.io/@michaelwoerister/SJf9VU1-5</a></p>",
        "id": 277446003,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648831394
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"316352\">pierwill</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277445913\">said</a>:</p>\n<blockquote>\n<p>My high-level question: what are the <em>soundness</em> concerns with current system that <em>need</em> to be solved?</p>\n</blockquote>\n<p>As far as I know, there are no soundness problems. but it depends on invariants that are hard to guarantee in practice</p>",
        "id": 277446010,
        "sender_full_name": "mw",
        "timestamp": 1648831399
    },
    {
        "content": "<p>goes into detail about of the specific bugs</p>",
        "id": 277446025,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648831409
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124287\">mw</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277446010\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"316352\">pierwill</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277445913\">said</a>:</p>\n<blockquote>\n<p>My high-level question: what are the <em>soundness</em> concerns with current system that <em>need</em> to be solved?</p>\n</blockquote>\n<p>As far as I know, there are no soundness problems. but it depends on invariants that are hard to guarantee in practice</p>\n</blockquote>\n<p>Okay this is good to know <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span>. To me that really clarifies the stakes here.</p>",
        "id": 277446084,
        "sender_full_name": "pierwill",
        "timestamp": 1648831438
    },
    {
        "content": "<p>I tend to file the leaks in information flow (= all untracked state) as possible soundness issues.</p>",
        "id": 277446132,
        "sender_full_name": "cjgillot",
        "timestamp": 1648831443
    },
    {
        "content": "<p>Ah yes.</p>",
        "id": 277446167,
        "sender_full_name": "pierwill",
        "timestamp": 1648831464
    },
    {
        "content": "<p>Because by definition, we don't know when they will matter.</p>",
        "id": 277446176,
        "sender_full_name": "cjgillot",
        "timestamp": 1648831472
    },
    {
        "content": "<p>That's the kind of thing I had in mind.</p>",
        "id": 277446181,
        "sender_full_name": "pierwill",
        "timestamp": 1648831473
    },
    {
        "content": "<p>to clarify: I'm talking about soundness of the underlying model</p>",
        "id": 277446188,
        "sender_full_name": "mw",
        "timestamp": 1648831480
    },
    {
        "content": "<p>bugs can certainly cause real miscompilations</p>",
        "id": 277446217,
        "sender_full_name": "mw",
        "timestamp": 1648831499
    },
    {
        "content": "<p>ah; I'm talking about soundness of the actual implementation due to bugs</p>",
        "id": 277446222,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648831502
    },
    {
        "content": "<p>I think one of the main practical issues with this is that it requires almost every component of the compiler to be 'aware' of incr comp in some way</p>",
        "id": 277446228,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648831503
    },
    {
        "content": "<p>E.g. don't cache query calls</p>",
        "id": 277446250,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648831516
    },
    {
        "content": "<p>This can be partially addressed with lints</p>",
        "id": 277446265,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648831524
    },
    {
        "content": "<p>but I think it's a pretty unfortunate state of affairs</p>",
        "id": 277446287,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648831536
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277446265\">said</a>:</p>\n<blockquote>\n<p>This can be partially addressed with lints</p>\n</blockquote>\n<p>or maybe an effect system if we ever get it :)</p>",
        "id": 277446304,
        "sender_full_name": "mw",
        "timestamp": 1648831550
    },
    {
        "content": "<p>We do have the advantage that we literally control our compiler</p>",
        "id": 277446372,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648831567
    },
    {
        "content": "<p>Just make <code>const fn</code> more powerful so we can implement most of the compiler using them :)</p>",
        "id": 277446405,
        "sender_full_name": "bjorn3",
        "timestamp": 1648831580
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124287\">mw</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277446304\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277446265\">said</a>:</p>\n<blockquote>\n<p>This can be partially addressed with lints</p>\n</blockquote>\n<p>or maybe an effect system if we ever get it :)</p>\n</blockquote>\n<p>haven't you heard, Oli's decided to make one</p>",
        "id": 277446440,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648831601
    },
    {
        "content": "<p><a href=\"https://twitter.com/oli_obk/status/1509800194761764864\">https://twitter.com/oli_obk/status/1509800194761764864</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/oli_obk/status/1509800194761764864\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/1465a9e34a342d74efa235252bf7bccac19351e5/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f3235303831323937392f6176617461725f6e6f726d616c2e706e67\"></a><p>I have come to the conclusion that the best course of action for CTFE (and async and possibly others) is to add an effect system to the Rust type system</p><span>- Dr. const fn oli (@oli_obk)</span></div></div>",
        "id": 277446481,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648831626
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277446287\">said</a>:</p>\n<blockquote>\n<p>but I think it's a pretty unfortunate state of affairs</p>\n</blockquote>\n<p>the question is: can we mitigate this enough for being practical</p>",
        "id": 277446498,
        "sender_full_name": "mw",
        "timestamp": 1648831636
    },
    {
        "content": "<p>Just to make sure we keep moving along, it sounds like we shouldn't take option 3 off the table completely but it's not anyone's preferred next step?</p>",
        "id": 277446532,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1648831655
    },
    {
        "content": "<p>Well, I personally prefer it :)</p>",
        "id": 277446575,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648831682
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124287\">mw</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277446498\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277446287\">said</a>:</p>\n<blockquote>\n<p>but I think it's a pretty unfortunate state of affairs</p>\n</blockquote>\n<p>the question is: can we mitigate this enough for being practical</p>\n</blockquote>\n<p>I'd kind of like a survey of how many violations we know of of such a set of lints</p>",
        "id": 277446618,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648831686
    },
    {
        "content": "<p>But at a minimum it's a very long-term goal</p>",
        "id": 277446630,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648831691
    },
    {
        "content": "<p>but you're not thinking we should try to do that <em>right now</em>? Instead of some other option?</p>",
        "id": 277446682,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1648831719
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277446618\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"124287\">mw</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277446498\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277446287\">said</a>:</p>\n<blockquote>\n<p>but I think it's a pretty unfortunate state of affairs</p>\n</blockquote>\n<p>the question is: can we mitigate this enough for being practical</p>\n</blockquote>\n<p>I'd kind of like a survey of how many violations we know of of such a set of lints</p>\n</blockquote>\n<p>The lint over hash-map iteration exists, I don't think anybody started enforcing it.</p>",
        "id": 277446688,
        "sender_full_name": "cjgillot",
        "timestamp": 1648831722
    },
    {
        "content": "<p>I do think the idea of having the system work with a future stable MIR deserves some thought...</p>",
        "id": 277446701,
        "sender_full_name": "pierwill",
        "timestamp": 1648831732
    },
    {
        "content": "<p>It could be easier to model...</p>",
        "id": 277446730,
        "sender_full_name": "pierwill",
        "timestamp": 1648831744
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"316352\">pierwill</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277446701\">said</a>:</p>\n<blockquote>\n<p>I do think the idea of having the system work with a future stable MIR deserves some thought...</p>\n</blockquote>\n<p>I'll be meeting with Oli and Celina on Monday re stable-MIR, i'll definitely bring it up with them then as a potential use-case</p>",
        "id": 277446774,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648831766
    },
    {
        "content": "<p>I think hashmao iteration is a good example of the kind of issues that we can run into with lints</p>",
        "id": 277446795,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648831775
    },
    {
        "content": "<p>does the lint not work?</p>",
        "id": 277446826,
        "sender_full_name": "mw",
        "timestamp": 1648831794
    },
    {
        "content": "<p>It's allowed in almost all crates.</p>",
        "id": 277446911,
        "sender_full_name": "cjgillot",
        "timestamp": 1648831814
    },
    {
        "content": "<p>oh :D</p>",
        "id": 277446932,
        "sender_full_name": "mw",
        "timestamp": 1648831827
    },
    {
        "content": "<p>We need to ensure that all types with untracked data (e.g. the raw number in DefId) are inaccessible, which require not imlementing traits that would otherwise be useful</p>",
        "id": 277446938,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648831828
    },
    {
        "content": "<p>E.g Hash</p>",
        "id": 277446952,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648831834
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124287\">mw</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277446826\">said</a>:</p>\n<blockquote>\n<p>does the lint not work?</p>\n</blockquote>\n<p>it does, but fixing rustc while not being able to use the bootstrap compiler was annoying, so i didn't do it.</p>\n<p>and after the last beta cutoff i wanted to wait for this meeting ^^</p>",
        "id": 277446987,
        "sender_full_name": "lcnr",
        "timestamp": 1648831854
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277446938\">said</a>:</p>\n<blockquote>\n<p>We need to ensure that all types with untracked data (e.g. the raw number in DefId) are inaccessible, which require not imlementing traits that would otherwise be useful</p>\n</blockquote>\n<p>Yes, I think that approach is a dead end</p>",
        "id": 277447003,
        "sender_full_name": "mw",
        "timestamp": 1648831863
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277446952\">said</a>:</p>\n<blockquote>\n<p>E.g Hash</p>\n</blockquote>\n<p>also <code>Ord</code> <span aria-label=\"smiling devil\" class=\"emoji emoji-1f608\" role=\"img\" title=\"smiling devil\">:smiling_devil:</span></p>",
        "id": 277447011,
        "sender_full_name": "pierwill",
        "timestamp": 1648831867
    },
    {
        "content": "<p>If we don't do that, then we run the risk of someone adding a new type that presents the same kind of problems as hashmap iteration, but the lint doesn't know about</p>",
        "id": 277447032,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648831878
    },
    {
        "content": "<p>wait, <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> : Not implementing traits like <code>Hash</code>, or not <em>deriving</em> them ?</p>",
        "id": 277447048,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648831887
    },
    {
        "content": "<p>This is what HashStable is for, no?</p>",
        "id": 277447084,
        "sender_full_name": "pierwill",
        "timestamp": 1648831905
    },
    {
        "content": "<p>like, maybe we need our own specialized derive's that are aware of tracked/untracked attributes?</p>",
        "id": 277447085,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648831905
    },
    {
        "content": "<p>If we implement them, then they need to do through the 'tracked' data</p>",
        "id": 277447123,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648831921
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124287\">mw</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277447003\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277446938\">said</a>:</p>\n<blockquote>\n<p>We need to ensure that all types with untracked data (e.g. the raw number in DefId) are inaccessible, which require not imlementing traits that would otherwise be useful</p>\n</blockquote>\n<p>Yes, I think that approach is a dead end</p>\n</blockquote>\n<p>We can replace such types with an incr-comp aware interning scheme (only one), and ban custom HashStable impls altogether.</p>",
        "id": 277447142,
        "sender_full_name": "cjgillot",
        "timestamp": 1648831922
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"316352\">pierwill</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277447084\">said</a>:</p>\n<blockquote>\n<p>This is what HashStable is for, no?</p>\n</blockquote>\n<p>hash-stable handles making fingerprints, but its not used for impelemnting Hash itself to my knowledge</p>",
        "id": 277447194,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648831933
    },
    {
        "content": "<p>For Hash, that would mean pulling a tcx out of thin airz and grabbing the DefPathHash</p>",
        "id": 277447202,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648831937
    },
    {
        "content": "<p>We have <code>tcx</code> stored in a thread local variable you can access.</p>",
        "id": 277447313,
        "sender_full_name": "bjorn3",
        "timestamp": 1648831982
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277447123\">said</a>:</p>\n<blockquote>\n<p>If we implement them, then they need to do through the 'tracked' data</p>\n</blockquote>\n<p>ah, because its not enough to just look at the embedded tracked fields, but rather we have to connect it up to the info in the tcx ?</p>",
        "id": 277447319,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648831985
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"248906\">cjgillot</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277447142\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"124287\">mw</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277447003\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277446938\">said</a>:</p>\n<blockquote>\n<p>We need to ensure that all types with untracked data (e.g. the raw number in DefId) are inaccessible, which require not imlementing traits that would otherwise be useful</p>\n</blockquote>\n<p>Yes, I think that approach is a dead end</p>\n</blockquote>\n<p>We can replace such types with an incr-comp aware interning scheme (only one), and ban custom HashStable impls altogether.</p>\n</blockquote>\n<p>That sounds similar to <a href=\"https://hackmd.io/@michaelwoerister/SJf9VU1-5#Make-pointer-like-IDs-stable-across-compilation-session-boundaries-STABLE_IDS\">https://hackmd.io/@michaelwoerister/SJf9VU1-5#Make-pointer-like-IDs-stable-across-compilation-session-boundaries-STABLE_IDS</a>, right?</p>",
        "id": 277447328,
        "sender_full_name": "mw",
        "timestamp": 1648831989
    },
    {
        "content": "<p>We don't currently embed the tracked data into a DefId</p>",
        "id": 277447381,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648832008
    },
    {
        "content": "<p>same with ExpnId</p>",
        "id": 277447391,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648832014
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277447313\">said</a>:</p>\n<blockquote>\n<p>We have <code>tcx</code> stored in a thread local variable you can access.</p>\n</blockquote>\n<p><code>rustc_middle::ty::tls::with_context</code></p>",
        "id": 277447434,
        "sender_full_name": "bjorn3",
        "timestamp": 1648832033
    },
    {
        "content": "<p>My concern is that in the future, someone may want to add/implement some new datastructre in the compiler (e.g. some kind of custom hashmap), and accidentally ends up using untracked data in a 'bad' way</p>",
        "id": 277447436,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648832033
    },
    {
        "content": "<p>I think we should look into making these ID's be interned pointers</p>",
        "id": 277447444,
        "sender_full_name": "mw",
        "timestamp": 1648832035
    },
    {
        "content": "<p>as @oli already does, I think</p>",
        "id": 277447481,
        "sender_full_name": "mw",
        "timestamp": 1648832043
    },
    {
        "content": "<p>but in a way that would be completely fine if we didn't have to worry about incremental comp problems</p>",
        "id": 277447516,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648832054
    },
    {
        "content": "<p>Since the lint needs to specifically ban patterns that correspond to 'bad' uses of untracked data</p>",
        "id": 277447573,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648832084
    },
    {
        "content": "<p>data can only become untracked if it is ignored by HashStable and Eq, right?</p>",
        "id": 277447578,
        "sender_full_name": "mw",
        "timestamp": 1648832085
    },
    {
        "content": "<p>Another high-level Q: Are there any bug classes with current incr comp that fall outside of this general description: Problems with <em>untracked state</em>?</p>",
        "id": 277447613,
        "sender_full_name": "pierwill",
        "timestamp": 1648832100
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124287\">mw</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277447578\">said</a>:</p>\n<blockquote>\n<p>data can only become untracked if it is ignored by HashStable and Eq, right?</p>\n</blockquote>\n<p>We also have the <code>Session</code> being partially untracked.</p>",
        "id": 277447664,
        "sender_full_name": "bjorn3",
        "timestamp": 1648832124
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"316352\">pierwill</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277447613\">said</a>:</p>\n<blockquote>\n<p>Another high-level Q: Are there any bug classes with current incr comp that fall outside of this general description: Problems with <em>untracked state</em>?</p>\n</blockquote>\n<p><a href=\"https://hackmd.io/@michaelwoerister/SJf9VU1-5\">https://hackmd.io/@michaelwoerister/SJf9VU1-5</a> list bug classes</p>",
        "id": 277447667,
        "sender_full_name": "mw",
        "timestamp": 1648832128
    },
    {
        "content": "<p>I did see that, yes</p>",
        "id": 277447691,
        "sender_full_name": "pierwill",
        "timestamp": 1648832141
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277447664\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"124287\">mw</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277447578\">said</a>:</p>\n<blockquote>\n<p>data can only become untracked if it is ignored by HashStable and Eq, right?</p>\n</blockquote>\n<p>We also have the <code>Session</code> being partially untracked.</p>\n</blockquote>\n<p>Yes, but that's a different kind of untracked, I think :)</p>",
        "id": 277447721,
        "sender_full_name": "mw",
        "timestamp": 1648832156
    },
    {
        "content": "<p>I wondered if they could possibly be reduced to a single idea</p>",
        "id": 277447780,
        "sender_full_name": "pierwill",
        "timestamp": 1648832166
    },
    {
        "content": "<p>if you squint, maybe they're all \"kinds of untracked state\"</p>",
        "id": 277447788,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648832172
    },
    {
        "content": "<p>but the different kinds of ways it arises is important, I think. Maybe.</p>",
        "id": 277447821,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648832187
    },
    {
        "content": "<p>\"Fingerprinting doesnt catch it\" vs \"we are not adding a dependency edge\"</p>",
        "id": 277447823,
        "sender_full_name": "mw",
        "timestamp": 1648832188
    },
    {
        "content": "<p>well there might be a logic bug in the infrastructure somewhere and somehow too, but its not a kind of issue we've seen in practice, have we?</p>",
        "id": 277447889,
        "sender_full_name": "nagisa",
        "timestamp": 1648832214
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> is onto something by thinking of things in terms of <em>information flow</em></p>",
        "id": 277447920,
        "sender_full_name": "pierwill",
        "timestamp": 1648832227
    },
    {
        "content": "<p>Recently, there was the issue of deserialization invoking queries</p>",
        "id": 277447948,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648832235
    },
    {
        "content": "<p>So, not to completely disrupt the conversation, but we have five minutes left. Is there general consensus for option 1 or option 2 as the current next step (with potentially some details still to be hashed out)? Or do we need to schedule another design meeting to continue investigating our options?</p>",
        "id": 277447993,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1648832254
    },
    {
        "content": "<p>We now ban that entirely, but we could potentially have similar issues with queries being invoked in weird places</p>",
        "id": 277447995,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648832257
    },
    {
        "content": "<p>any kind of re-entrant invocation in particular</p>",
        "id": 277448027,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648832272
    },
    {
        "content": "<p>I think we might need another meeting to figure out Option 1 vs Option 2 for short-term</p>",
        "id": 277448040,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648832278
    },
    {
        "content": "<p>it seems like it deserves its own doc</p>",
        "id": 277448101,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648832290
    },
    {
        "content": "<p>Yes. Research into Option 2 seems required for going forward</p>",
        "id": 277448111,
        "sender_full_name": "pierwill",
        "timestamp": 1648832293
    },
    {
        "content": "<p>maybe we can get niko to present Salsa with Entities before that</p>",
        "id": 277448151,
        "sender_full_name": "mw",
        "timestamp": 1648832314
    },
    {
        "content": "<p>I think he is generally interested in doing so</p>",
        "id": 277448194,
        "sender_full_name": "mw",
        "timestamp": 1648832335
    },
    {
        "content": "<p>incidentally,. <span class=\"user-mention\" data-user-id=\"316352\">@pierwill</span> , would you be interested in trying to assist with co-authoring a follow-up doc? I think its useful to have perspective from someone asking the kinds of questions you are posing.</p>",
        "id": 277448262,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648832373
    },
    {
        "content": "<p>(arguably that shluld have been a privmsg <span aria-label=\"lol\" class=\"emoji emoji-1f606\" role=\"img\" title=\"lol\">:lol:</span> )</p>",
        "id": 277448288,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648832387
    },
    {
        "content": "<p>Sure. I'd be happy to help</p>",
        "id": 277448300,
        "sender_full_name": "pierwill",
        "timestamp": 1648832392
    },
    {
        "content": "<p>Ok, so it seems like the actual next steps are to bug <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> to talk about \"salsa with entities\", put in another meeting proposal to continue the discussion after that and make a decision for the short-medium term.</p>",
        "id": 277448460,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1648832434
    },
    {
        "content": "<p>I think this meeting was quite productive :)</p>",
        "id": 277448479,
        "sender_full_name": "mw",
        "timestamp": 1648832445
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> do you think a presentation from Niko is a prereq for the follow-up meeting itself?</p>",
        "id": 277448525,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648832467
    },
    {
        "content": "<p>it is not a prereq for writing the <em>proposal</em></p>",
        "id": 277448535,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648832476
    },
    {
        "content": "<p>Should it be the meeting itself?</p>",
        "id": 277448545,
        "sender_full_name": "cjgillot",
        "timestamp": 1648832481
    },
    {
        "content": "<p>but if it will heavily inform the doc writing, then that seems like it would affect schedule</p>",
        "id": 277448567,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648832495
    },
    {
        "content": "<p>If someone else is willing to dive more into salsa so they can answer questions about what option 2 looks like specifically, that's fine.</p>",
        "id": 277448578,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1648832500
    },
    {
        "content": "<p>I'm not sure if it should be the meeting itself. It <em>could</em> be, but I'm not sure if we'll walk away with action items from a informational presentation.</p>",
        "id": 277448611,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648832517
    },
    {
        "content": "<p>But without that, it seems like we'll just be guessing a bit as to what option 2 actually looks like.</p>",
        "id": 277448618,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1648832519
    },
    {
        "content": "<p>I think Salsa with Entities is still rather experimental</p>",
        "id": 277448623,
        "sender_full_name": "mw",
        "timestamp": 1648832521
    },
    {
        "content": "<p>so looking a vanilla salsa won't be very informative</p>",
        "id": 277448681,
        "sender_full_name": "mw",
        "timestamp": 1648832535
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span> you mean because Salsa as it stands today wouldn't represent the kinds of capabilties that you think are necessary to go down the path of Option 2 ?</p>",
        "id": 277448736,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648832573
    },
    {
        "content": "<p>yes, today's Salsa is very similar to our query system</p>",
        "id": 277448780,
        "sender_full_name": "mw",
        "timestamp": 1648832594
    },
    {
        "content": "<p>afaik</p>",
        "id": 277448790,
        "sender_full_name": "mw",
        "timestamp": 1648832599
    },
    {
        "content": "<p>okay.</p>",
        "id": 277448822,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648832620
    },
    {
        "content": "<p>the new salsa exists somewhere, it's not just on paper</p>",
        "id": 277448856,
        "sender_full_name": "mw",
        "timestamp": 1648832635
    },
    {
        "content": "<p>Until we decide between Option 1 or Option 2, it seems like a mistake to invest time digging into the details of each of the proposed tactics to making Option 1 workable</p>",
        "id": 277448920,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648832657
    },
    {
        "content": "<p><a href=\"https://dada-lang.org/\">https://dada-lang.org/</a> is built on top of it, I think</p>",
        "id": 277448923,
        "sender_full_name": "mw",
        "timestamp": 1648832658
    },
    {
        "content": "<p>in my opinion, option 2 is mostly a superset of option 1</p>",
        "id": 277448967,
        "sender_full_name": "mw",
        "timestamp": 1648832697
    },
    {
        "content": "<p>yeah, okay, I need to go back and look again at which items from Option 1 <em>don't</em> end up duplicated in Option 2.</p>",
        "id": 277449242,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648832824
    },
    {
        "content": "<p>because it may well be that the outcome of this meeting <em>does</em> imply that we can invest effort on the tasks that fall under the intersection of Option 1 and Option 2.</p>",
        "id": 277449290,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648832851
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span> by the way, what <em>is</em> your answer for handling Spans in a robust+correct manner?</p>",
        "id": 277449512,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648832932
    },
    {
        "content": "<p>If only I had one :(</p>",
        "id": 277449573,
        "sender_full_name": "mw",
        "timestamp": 1648832963
    },
    {
        "content": "<p>mmm, okay.</p>",
        "id": 277449730,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648833021
    },
    {
        "content": "<p>What is the issue with spans?  Beside the untrackedness of the source_map?</p>",
        "id": 277449990,
        "sender_full_name": "cjgillot",
        "timestamp": 1648833140
    },
    {
        "content": "<p>They require so much special handling right now</p>",
        "id": 277450073,
        "sender_full_name": "mw",
        "timestamp": 1648833190
    },
    {
        "content": "<p>it does not seem very robust</p>",
        "id": 277450116,
        "sender_full_name": "mw",
        "timestamp": 1648833205
    },
    {
        "content": "<p>and I personally don't have a good understanding of SyntaxContexts and their interactions with incr. comp.</p>",
        "id": 277450160,
        "sender_full_name": "mw",
        "timestamp": 1648833233
    },
    {
        "content": "<p>If we actually implement something as discussed at <a href=\"#narrow/stream/131828-t-compiler/topic/interned.20crate.20and.20def.20ids\">https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/interned.20crate.20and.20def.20ids</a>, Spans might also be the only thing left that require context information for stable hashing</p>",
        "id": 277450400,
        "sender_full_name": "mw",
        "timestamp": 1648833337
    },
    {
        "content": "<p>(I could be wrong about that)</p>",
        "id": 277450433,
        "sender_full_name": "mw",
        "timestamp": 1648833355
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-04-01.20compiler-team.23490/near/277444636\">said</a>:</p>\n<blockquote>\n<p>I don't know if parallel is enough even. There's only so many cores on a given machine and cargo tends to use a lot of them already.</p>\n</blockquote>\n<p><a href=\"/user_uploads/4715/I_tuXQ5domp1m9P1usWbLXdn/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/I_tuXQ5domp1m9P1usWbLXdn/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/I_tuXQ5domp1m9P1usWbLXdn/image.png\"></a></div><p>This is the CPU utilization for building core/alloc/std + rustc in non-incremental mode, without sccache on a 24c/48t CPU. wall time is 1:42s. There are plenty of unusued core-seconds.</p>",
        "id": 277456329,
        "sender_full_name": "The 8472",
        "timestamp": 1648835952
    },
    {
        "content": "<p>I was once really disappointed to see that spinning up a 64c instance in the clouds didn't make my builds any faster</p>",
        "id": 277457185,
        "sender_full_name": "nagisa",
        "timestamp": 1648836250
    },
    {
        "content": "<p>Sure. libstd doesn't have many dependencies though, that graph would look different for large projects. and large projects IMO benefit even more from incremental.</p>",
        "id": 277457258,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648836287
    },
    {
        "content": "<p>Got one in mind that's easy to test? There might be sequential bottlenecks too, depending on the build graph.</p>",
        "id": 277457469,
        "sender_full_name": "The 8472",
        "timestamp": 1648836379
    },
    {
        "content": "<p>hmm, <a href=\"http://docs.rs\">docs.rs</a> has a bunch of dependencies, might be interesting to try</p>",
        "id": 277458529,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648836805
    },
    {
        "content": "<p>(was thinking of my work codebase originally, but it's closed source)</p>",
        "id": 277458568,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648836822
    },
    {
        "content": "<p><a href=\"http://docs.rs\">docs.rs</a>, release build, 41.7s wall time. initially it uses all cores, towards the end it falls off as there are not enough crates left to feed it.</p>\n<p><a href=\"/user_uploads/4715/Rmg-Tk785JJalGWrkruEugc_/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/Rmg-Tk785JJalGWrkruEugc_/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/Rmg-Tk785JJalGWrkruEugc_/image.png\"></a></div>",
        "id": 277459520,
        "sender_full_name": "The 8472",
        "timestamp": 1648837209
    }
]