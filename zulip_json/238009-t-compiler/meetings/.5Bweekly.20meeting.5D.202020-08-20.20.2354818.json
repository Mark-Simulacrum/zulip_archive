[
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span>; the triage meeting will happen tomorrow at 2pm UTC</p>",
        "id": 207428209,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1597853520
    },
    {
        "content": "<p>The <span class=\"user-group-mention\" data-user-group-id=\"2403\">@WG-prioritization</span> have done pre-triage in <a class=\"stream\" data-stream-id=\"245100\" href=\"/#narrow/stream/245100-t-compiler.2Fwg-prioritization.2Falerts\">#t-compiler/wg-prioritization/alerts</a></p>",
        "id": 207428267,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1597853525
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"2403\">@WG-prioritization</span> have prepared the <a href=\"https://hackmd.io/Z0Eqk14jSlGCVmIsm-96xA?view\">meeting agenda</a></p>",
        "id": 207428285,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1597853537
    },
    {
        "content": "<p>We will have checkin from <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span></p>",
        "id": 207428352,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1597853567
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> and <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> do you have something you want to share about <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span>?</p>",
        "id": 207428499,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1597853628
    },
    {
        "content": "<p>Uh, I don't think there's been any real updates since last time. Wg-traits has been on vacation/break</p>",
        "id": 207428957,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597853826
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span> please consider nominating issues that you want to discuss or move forward tomorrow</p>",
        "id": 207429017,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1597853865
    },
    {
        "content": "<blockquote>\n<p>Old MCPs (not seconded, take a look) <br>\n“Set ninja=true by default” <a href=\"https://github.com/rust-lang/compiler-team/issues/339\">compiler-team#339</a></p>\n</blockquote>\n<p>It looks like that one has already been accepted</p>",
        "id": 207429098,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1597853894
    },
    {
        "content": "<p>same for <a href=\"https://github.com/rust-lang/compiler-team/issues/340\">https://github.com/rust-lang/compiler-team/issues/340</a>, <a href=\"https://github.com/rust-lang/compiler-team/issues/337\">https://github.com/rust-lang/compiler-team/issues/337</a></p>",
        "id": 207429298,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1597854015
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> little question, is this <a href=\"https://github.com/rust-lang/rust/issues/75494\">#75494</a> meant to be applied to master and then backported to beta?</p>",
        "id": 207463278,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1597872205
    },
    {
        "content": "<p>it seems like that but just want to be 100% sure given that in <a href=\"https://github.com/rust-lang/rust/issues/74868#issuecomment-667546395\">your previous comment</a>, it seemed that you were going to provide a backport only</p>",
        "id": 207463401,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1597872287
    },
    {
        "content": "<p>Yes, it needs applying to master.</p>",
        "id": 207468376,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1597875769
    },
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span>, triage meeting will be starting in ~ 37 minutes</p>",
        "id": 207521205,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1597929752
    },
    {
        "content": "<p><a href=\"https://hackmd.io/Z0Eqk14jSlGCVmIsm-96xA?view\">Check out the meeting agenda</a></p>",
        "id": 207521229,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1597929774
    },
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span>! Add a <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> emoji to show you're here :)</p>",
        "id": 207525366,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597932183
    },
    {
        "content": "<p>we will start off with 5 minutes for ...</p>\n<h2>Announcements</h2>",
        "id": 207525392,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597932197
    },
    {
        "content": "<ul>\n<li>Next Thursday 27th we will be releasing Rust 1.46!</li>\n</ul>",
        "id": 207525425,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597932223
    },
    {
        "content": "<ul>\n<li><a href=\"https://rustconf.com/\">Virtual RustConf</a> is starting in 2hs</li>\n</ul>",
        "id": 207525436,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597932229
    },
    {
        "content": "<ul>\n<li>New MCPs (take a look, see if you like them!)<ul>\n<li>\"Uplift <code>temporary-cstring-as-ptr</code> lint from <code>clippy</code> into rustc\" <a href=\"https://github.com/rust-lang/compiler-team/issues/346\">compiler-team#346</a></li>\n<li>\"Uplift <code>drop-bounds</code> lint from clippy into rustc\" <a href=\"https://github.com/rust-lang/compiler-team/issues/347\">compiler-team#347</a></li>\n</ul>\n</li>\n</ul>",
        "id": 207525448,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597932237
    },
    {
        "content": "<ul>\n<li>Old MCPs (not seconded, take a look)<ul>\n<li>\"Integration of the Cranelift backend with rustc\" <a href=\"https://github.com/rust-lang/compiler-team/issues/270\">compiler-team#270</a></li>\n<li>\"Decentralize queries\" <a href=\"https://github.com/rust-lang/compiler-team/issues/277\">compiler-team#277</a></li>\n<li>\"Infer hidden types without replacing with an inference variable\" <a href=\"https://github.com/rust-lang/compiler-team/issues/325\">compiler-team#325</a></li>\n</ul>\n</li>\n</ul>",
        "id": 207525493,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597932245
    },
    {
        "content": "<ul>\n<li>Pending FCP requests (check your boxes!)<ul>\n<li>No pending FCP requests this time.</li>\n</ul>\n</li>\n</ul>",
        "id": 207525500,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597932258
    },
    {
        "content": "<ul>\n<li>Things in FCP (make sure you're good with it)<ul>\n<li>\"Move the compiler to a new <code>compiler/</code> directory\" <a href=\"https://github.com/rust-lang/compiler-team/issues/336\">compiler-team#336</a></li>\n<li>\"Form t-compiler/wg-parser-library\" <a href=\"https://github.com/rust-lang/compiler-team/issues/338\">compiler-team#338</a></li>\n<li>\"Stabilise <code>link-self-contained</code> option\" <a href=\"https://github.com/rust-lang/compiler-team/issues/343\">compiler-team#343</a></li>\n<li>\"Moving <code>#[cfg(test)]</code> modules into a separate files to save recompiling the <code>std</code> crate\" <a href=\"https://github.com/rust-lang/compiler-team/issues/344\">compiler-team#344</a></li>\n<li>\"Add a lint for attempting to mutate a <code>const</code> item\" <a href=\"https://github.com/rust-lang/compiler-team/issues/345\">compiler-team#345</a></li>\n</ul>\n</li>\n</ul>",
        "id": 207525513,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597932268
    },
    {
        "content": "<ul>\n<li>Accepted MCPs<ul>\n<li>\"refactor types to fit the chalk-ty generic plan\" <a href=\"https://github.com/rust-lang/compiler-team/issues/341\">compiler-team#341</a></li>\n</ul>\n</li>\n</ul>",
        "id": 207525526,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597932276
    },
    {
        "content": "<ul>\n<li>Finalized FCPs (disposition merge)<ul>\n<li>\"Upgrade the FreeBSD toolchain to version 11.4\" <a href=\"https://github.com/rust-lang/rust/pull/75204\">rust#75204</a></li>\n<li>\"Stabilizable subset of const generics\" <a href=\"https://github.com/rust-lang/compiler-team/issues/332\">compiler-team#332</a></li>\n</ul>\n</li>\n</ul>",
        "id": 207525543,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597932286
    },
    {
        "content": "<ul>\n<li>\"allow escaping bound vars when normalizing <code>ty::Opaque</code>\" <a href=\"https://github.com/rust-lang/rust/pull/75443\">rust#75443</a> has been unilaterally beta-accepted (by <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>)</li>\n</ul>",
        "id": 207525552,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597932292
    },
    {
        "content": "<h3>WG checkins</h3>\n<p><span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span> checkin by <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> and <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span>:</p>\n<blockquote>\n<p>WG-traits has been on vacation/break</p>\n</blockquote>",
        "id": 207525562,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597932302
    },
    {
        "content": "<p>(anyone have anything else they want to announce themselves?)</p>",
        "id": 207525708,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597932372
    },
    {
        "content": "<h2>Beta-nominations</h2>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Abeta-nominated+-label%3Abeta-accepted+label%3AT-compiler\">T-compiler</a></p>\n<ul>\n<li>\"Don't immediately error for cycles during normalization\" <a href=\"https://github.com/rust-lang/rust/pull/75494\">rust#75494</a><ul>\n<li>PR by <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span>, assigned to <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></li>\n<li>Not yet merged to master</li>\n<li>Fixes a <code>P-critical</code> beta regression <a href=\"https://github.com/rust-lang/rust/issues/74868\">rust#74868</a></li>\n<li><a href=\"https://github.com/weiznich/wundergraph/tree/ffbb883eea169d1750659e038d7051a84b21f6e7/wundergraph_example\">Code that should compile</a> now ICEs</li>\n</ul>\n</li>\n</ul>",
        "id": 207525792,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597932424
    },
    {
        "content": "<p>I'm reading now but planning to r+</p>",
        "id": 207525833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597932454
    },
    {
        "content": "<p>I would like to understand it a bit better</p>",
        "id": 207525840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597932459
    },
    {
        "content": "<p>(as an aside, when I was reading over this patch, I was wondering if there exists a clippy lint that warns you if you have a function that returns bool that doesn't have any documentation. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> )</p>",
        "id": 207525896,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597932483
    },
    {
        "content": "<p>and doesn't have a name like <code>is_</code> maybe :)</p>",
        "id": 207526023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597932553
    },
    {
        "content": "<p>a 150 lines backport of something sensible and last minute is not ideal but I guess it's better to fix the <code>P-critical</code></p>",
        "id": 207526037,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1597932563
    },
    {
        "content": "<p>yeah fair enogh</p>",
        "id": 207526043,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597932565
    },
    {
        "content": "<p>Its true. Some of the changes are clean up</p>",
        "id": 207526074,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597932588
    },
    {
        "content": "<p>(e.g. thechanges to visibility of <code>poly_project_and_unify_type</code></p>",
        "id": 207526128,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597932603
    },
    {
        "content": "<p>I don't remember exactly but isn't it possible to rollback whatever caused the original problem and have this just ride the trains?</p>",
        "id": 207526129,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1597932603
    },
    {
        "content": "<p>this is (imo) not an entirely trivial PR</p>",
        "id": 207526151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597932614
    },
    {
        "content": "<p>whoops I forgot to add my standard set of emojis to the backport nom</p>",
        "id": 207526172,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597932631
    },
    {
        "content": "<p>i'll do that now</p>",
        "id": 207526175,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597932633
    },
    {
        "content": "<p>I could imagine an unexpected interaction</p>",
        "id": 207526176,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597932635
    },
    {
        "content": "<p>(not sure if <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> is around)</p>",
        "id": 207526182,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597932641
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-08-20.20.2354818/near/207526176\">said</a>:</p>\n<blockquote>\n<p>I could imagine an unexpected interaction</p>\n</blockquote>\n<p>and the problem is that stable is out in 1 week</p>",
        "id": 207526201,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1597932659
    },
    {
        "content": "<p>so this will be in beta for one week and then in stable</p>",
        "id": 207526212,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1597932669
    },
    {
        "content": "<p>hmm. Why <em>didn't</em> we just rollback PR <a href=\"https://github.com/rust-lang/rust/issues/73452\">#73452</a>?</p>",
        "id": 207526238,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597932680
    },
    {
        "content": "<p>It doesn't say that it fixes any bugs...</p>",
        "id": 207526248,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597932687
    },
    {
        "content": "<p>the PR message kind of implies that it does</p>",
        "id": 207526265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597932703
    },
    {
        "content": "<p>but idk</p>",
        "id": 207526269,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597932705
    },
    {
        "content": "<p>It added some tests...</p>",
        "id": 207526336,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597932731
    },
    {
        "content": "<p>If it (<a href=\"https://github.com/rust-lang/rust/issues/73452\">#73452</a>) fixes query cycles, there might be some interactions with any later const-generic PRs that have landed.</p>",
        "id": 207526351,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1597932739
    },
    {
        "content": "<p>Just a thought</p>",
        "id": 207526357,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1597932742
    },
    {
        "content": "<p>I think all the tests it added were overflow tests</p>",
        "id": 207526379,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597932758
    },
    {
        "content": "<p>I don't think this interacts with const generic cycle errors</p>",
        "id": 207526395,
        "sender_full_name": "lcnr",
        "timestamp": 1597932774
    },
    {
        "content": "<p>Ah ok</p>",
        "id": 207526400,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1597932780
    },
    {
        "content": "<p>maybe the most imp't question is how imp't the regression is</p>",
        "id": 207526531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597932858
    },
    {
        "content": "<p>So as I understand it, our choices are either: </p>\n<ol>\n<li>Do nothing (accept the breakage injected by PR <a href=\"https://github.com/rust-lang/rust/issues/73452\">#73452</a>)</li>\n<li>Rollback PR <a href=\"https://github.com/rust-lang/rust/issues/73452\">#73452</a> on beta</li>\n<li>Beta-backport PR <a href=\"https://github.com/rust-lang/rust/issues/75494\">#75494</a></li>\n</ol>",
        "id": 207526568,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597932885
    },
    {
        "content": "<p>1 and 2 have somewhat known consequences</p>",
        "id": 207526596,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597932897
    },
    {
        "content": "<p>3 leads to fewest known bugs, but most risky in terms of unknowns. Right?</p>",
        "id": 207526648,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597932923
    },
    {
        "content": "<p>sounds correct</p>",
        "id": 207526670,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597932936
    },
    {
        "content": "<p>Ah. At the very least, rolling back PR <a href=\"https://github.com/rust-lang/rust/issues/73452\">#73452</a> will probably cause breakage that is mentioned on PR <a href=\"https://github.com/rust-lang/rust/issues/73335\">#73335</a></p>",
        "id": 207526819,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597933004
    },
    {
        "content": "<p>OK, I've read over the PR and I think I understand what it's doing</p>",
        "id": 207526906,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597933061
    },
    {
        "content": "<p>I stand by my assessment that it could have some unexpected consequences, though I think now that I understand it better my prediction is that these might take the form of induced ambiguitues</p>",
        "id": 207526992,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597933091
    },
    {
        "content": "<p>okay.</p>",
        "id": 207527025,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597933109
    },
    {
        "content": "<p>(I'm not so worried about accepting broken programs, for example)</p>",
        "id": 207527041,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597933118
    },
    {
        "content": "<p>and we have only heard about <em>one</em> instance of breakage from PR <a href=\"https://github.com/rust-lang/rust/issues/73452\">#73452</a>, right?</p>",
        "id": 207527052,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597933125
    },
    {
        "content": "<p>maybe we should nonetheless let this (PR <a href=\"https://github.com/rust-lang/rust/issues/75494\">#75494</a>) ride the trains, and just accept wundergraph breakage (<a href=\"https://github.com/rust-lang/rust/issues/74868\">#74868</a>) on next stable?</p>",
        "id": 207527105,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597933167
    },
    {
        "content": "<p>I looked through the crater report and I think <code>wundergraph</code> is the only crate that is broken because of this.</p>",
        "id": 207527210,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1597933210
    },
    {
        "content": "<p>There was quite a few crates that broke in crater as a result of that, though I think all were reverse dependencies of wundergraph</p>",
        "id": 207527220,
        "sender_full_name": "simulacrum",
        "timestamp": 1597933218
    },
    {
        "content": "<p>The only behavior change would be in src/librustc_trait_selection/traits/project.rs if I am not missing something here, so it's a 3 line change</p>",
        "id": 207527227,
        "sender_full_name": "lcnr",
        "timestamp": 1597933222
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> which is only a three-line change? PR <a href=\"https://github.com/rust-lang/rust/issues/75494\">#75494</a> ?</p>",
        "id": 207527263,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597933248
    },
    {
        "content": "<p>(I just gave it r=me, fyi)</p>",
        "id": 207527273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597933254
    },
    {
        "content": "<p>given the breakage in crater, I might be inclined to go for it</p>",
        "id": 207527298,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597933271
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/73452\">#73452</a> I was looking at the wrong PR <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span></p>",
        "id": 207527299,
        "sender_full_name": "lcnr",
        "timestamp": 1597933272
    },
    {
        "content": "<p>uff</p>",
        "id": 207527306,
        "sender_full_name": "lcnr",
        "timestamp": 1597933274
    },
    {
        "content": "<p>but I guess this is just a hard call to make</p>",
        "id": 207527328,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597933284
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-08-20.20.2354818/near/207527298\">said</a>:</p>\n<blockquote>\n<p>given the breakage in crater, I might be inclined to go for it</p>\n</blockquote>\n<p>go for the backport, you mean?</p>",
        "id": 207527345,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597933298
    },
    {
        "content": "<p>correct</p>",
        "id": 207527363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597933308
    },
    {
        "content": "<p>I guess it depends on what <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> meant by \"quite a few\"</p>",
        "id": 207527370,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597933318
    },
    {
        "content": "<p>too bad we don't have time to do a crater run</p>",
        "id": 207527375,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597933320
    },
    {
        "content": "<p>I guess we could/should have done one on PR <a href=\"https://github.com/rust-lang/rust/issues/75494\">#75494</a> back 7 days ago ?</p>",
        "id": 207527432,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597933336
    },
    {
        "content": "<p>/me is trying to do retrospective on-the-fly ...</p>",
        "id": 207527488,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597933374
    },
    {
        "content": "<p>There were maybe 10 or so</p>",
        "id": 207527553,
        "sender_full_name": "simulacrum",
        "timestamp": 1597933412
    },
    {
        "content": "<p>But not sure how related or popular they were</p>",
        "id": 207527578,
        "sender_full_name": "simulacrum",
        "timestamp": 1597933423
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> when you say you're worried about induced ambiguities</p>",
        "id": 207527593,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597933430
    },
    {
        "content": "<p>you're basically anticipating that we'll start rejecting code that we previously accepted, right?</p>",
        "id": 207527651,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597933450
    },
    {
        "content": "<p><em>plausibly</em></p>",
        "id": 207527710,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597933488
    },
    {
        "content": "<p>(i.e. it will be trait resolution ambiguities? Will users be able to revise their code to make the resolution explicit in cases where that arises?)</p>",
        "id": 207527714,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597933490
    },
    {
        "content": "<p>maybe</p>",
        "id": 207527757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597933517
    },
    {
        "content": "<p>basically what's happening here is that</p>",
        "id": 207527773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597933524
    },
    {
        "content": "<p>basically I think I'd be willing to accept <em>either</em> a backport <em>or</em> riding the trains if either one of them actually <strong>has</strong> some workaround for someone to do in their source code</p>",
        "id": 207527783,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597933529
    },
    {
        "content": "<p>(but I don't think I see a workaround for wundergraph)</p>",
        "id": 207527800,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597933541
    },
    {
        "content": "<p>if we encounter a cycle resolving <code>T::Foo = X</code>, we kind of \"push that cycle\" back to the caller -- essentialyl saying \"<code>T::Foo = X</code> is true if <code>T::Foo = X</code> is true\"</p>",
        "id": 207527817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597933555
    },
    {
        "content": "<p>well wait</p>",
        "id": 207527882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597933570
    },
    {
        "content": "<p>I guess that in the case of cycle we always aborted before</p>",
        "id": 207527893,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597933575
    },
    {
        "content": "<p>so maybe I take that back</p>",
        "id": 207527899,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597933578
    },
    {
        "content": "<p>maybe this would only effect programs that would have failed with a cycle error anyway</p>",
        "id": 207527911,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597933588
    },
    {
        "content": "<p>which makes it much less concerning :)</p>",
        "id": 207527926,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597933599
    },
    {
        "content": "<p>but that brings us back to the question if this <em>could</em> cause us to start accepting code that we should (continue) rejecting?</p>",
        "id": 207527994,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597933649
    },
    {
        "content": "<p>though I think that is not the case from my reading...</p>",
        "id": 207528017,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597933667
    },
    {
        "content": "<p>I believe the risk is low</p>",
        "id": 207528046,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597933682
    },
    {
        "content": "<p>I mean never say <em>never</em></p>",
        "id": 207528083,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597933686
    },
    {
        "content": "<p>Sure</p>",
        "id": 207528090,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597933689
    },
    {
        "content": "<p>but I feel pretty confident that won't happen</p>",
        "id": 207528096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597933693
    },
    {
        "content": "<p>we have had some egg on our face on recent releases</p>",
        "id": 207528103,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597933698
    },
    {
        "content": "<p>(or if it did that it would reflect some other bug)</p>",
        "id": 207528112,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597933703
    },
    {
        "content": "<p>due to perhaps overly aggressive backporting</p>",
        "id": 207528122,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597933708
    },
    {
        "content": "<p>so it doesn't hurt to be wary</p>",
        "id": 207528130,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597933715
    },
    {
        "content": "<p>back to my question above though: It sounds niko like you do not think that user will have any recourse if they <em>do</em> hit some problem introduced by backporting this?</p>",
        "id": 207528238,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597933789
    },
    {
        "content": "<p>i..e there is unlikely to be an \"obvious\" way for them to change their code to work-around new problems</p>",
        "id": 207528313,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597933813
    },
    {
        "content": "<p>well I was imagining that it could induce an ambiguiuty in some parts of the trait checker where there isn't as much input</p>",
        "id": 207528373,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597933841
    },
    {
        "content": "<p>(but I'm not sure if I think that's true anymore)</p>",
        "id": 207528386,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597933847
    },
    {
        "content": "<p>okay</p>",
        "id": 207528392,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597933850
    },
    {
        "content": "<p>I <em>think</em> I'm okay with a backport</p>",
        "id": 207528415,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597933861
    },
    {
        "content": "<p>but its a tough call.</p>",
        "id": 207528436,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597933871
    },
    {
        "content": "<p>too bad <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> isn't here.</p>",
        "id": 207528453,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597933877
    },
    {
        "content": "<p>how long it takes a crater run? I meant, if we backport and do a crater run when do we get results?</p>",
        "id": 207528464,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1597933887
    },
    {
        "content": "<p>I don't think we have time for a crater run, this close to a release</p>",
        "id": 207528490,
        "sender_full_name": "simulacrum",
        "timestamp": 1597933907
    },
    {
        "content": "<p>I'm roughly where <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> is</p>",
        "id": 207528559,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597933923
    },
    {
        "content": "<p>I feel fairly confident but it's a subtle change to subtle code</p>",
        "id": 207528572,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597933932
    },
    {
        "content": "<p>even if that happens after the release it may be a good idea to do it anyway?, maybe better to see some bad consequences a day or two after rather than waiting?</p>",
        "id": 207528576,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1597933935
    },
    {
        "content": "<p>so that we'll hopefully actually know to issue a point release quickly? I guess that could make sense.</p>",
        "id": 207528650,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597933984
    },
    {
        "content": "<p>right, rather than waiting for someone to upgrade and then report an issue</p>",
        "id": 207528684,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1597934004
    },
    {
        "content": "<p>we can preemptively fix something if there's something to fix</p>",
        "id": 207528709,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1597934017
    },
    {
        "content": "<p>I don't mind kicking one off</p>",
        "id": 207528712,
        "sender_full_name": "simulacrum",
        "timestamp": 1597934020
    },
    {
        "content": "<p>okay I guess it sounds like no one present is going to argue strongly <em>against</em> a backport</p>",
        "id": 207528714,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597934022
    },
    {
        "content": "<p>so I say \"backport-approved\", lets move on</p>",
        "id": 207528738,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597934034
    },
    {
        "content": "<p>It'll probably be done in time for the release, just we won't have time to change anything I suspect</p>",
        "id": 207528748,
        "sender_full_name": "simulacrum",
        "timestamp": 1597934041
    },
    {
        "content": "<p>well if the results are truly horrendous we could delay release</p>",
        "id": 207528822,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597934058
    },
    {
        "content": "<p>right :)</p>",
        "id": 207528835,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1597934066
    },
    {
        "content": "<p>.... or ... build two sets of release artifacts in parallel?</p>",
        "id": 207528852,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597934074
    },
    {
        "content": "<p>and dispatch deployment accordingly</p>",
        "id": 207528880,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597934092
    },
    {
        "content": "<p>boy that's a <em>terrible</em> precedent to set, though.</p>",
        "id": 207528913,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597934102
    },
    {
        "content": "<p>I guess the other alternative is to let the bug ride the trains and consider a point release</p>",
        "id": 207528960,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597934126
    },
    {
        "content": "<p>if it turns out to be more serious</p>",
        "id": 207528976,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597934138
    },
    {
        "content": "<p>I don't know which is worse :)</p>",
        "id": 207528979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597934141
    },
    {
        "content": "<p>yeah its a struggle.</p>",
        "id": 207528997,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597934150
    },
    {
        "content": "<p>but I think we should just approve</p>",
        "id": 207528999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597934152
    },
    {
        "content": "<p>Let's just backport and run crater</p>",
        "id": 207529006,
        "sender_full_name": "simulacrum",
        "timestamp": 1597934156
    },
    {
        "content": "<p>okay well lets move along. backport approved.</p>",
        "id": 207529008,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597934159
    },
    {
        "content": "<p>A check run should be sufficient right?</p>",
        "id": 207529057,
        "sender_full_name": "simulacrum",
        "timestamp": 1597934165
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Abeta-nominated+-label%3Abeta-accepted+label%3Alibs-impl\">libs-impl</a></p>\n<ul>\n<li>No beta nominations for <code>libs-impl</code> this time.</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Abeta-nominated+-label%3Abeta-accepted+label%3AT-rustdoc\">T-rustdoc</a></p>\n<ul>\n<li>No beta nominations for <code>T-rustdoc</code> this time.</li>\n</ul>",
        "id": 207529060,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597934166
    },
    {
        "content": "<p>YOLO</p>",
        "id": 207529063,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597934168
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> yeah I imagine so</p>",
        "id": 207529070,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597934173
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-08-20.20.2354818/near/207529057\">said</a>:</p>\n<blockquote>\n<p>A check run should be sufficient right?</p>\n</blockquote>\n<p>(I think so?)</p>",
        "id": 207529074,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597934175
    },
    {
        "content": "<h2>Stable-nominations</h2>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Astable-nominated+-label%3Astable-accepted+label%3AT-compiler\">T-compiler</a></p>\n<ul>\n<li>No stable nominations for <code>T-compiler</code> this time.</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Astable-nominated+-label%3Astable-accepted+label%3Alibs-impl\">libs-impl</a></p>\n<ul>\n<li>No stable nominations for <code>libs-impl</code> this time.</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Astable-nominated+-label%3Astable-accepted+label%3AT-rustdoc\">T-rustdoc</a></p>\n<ul>\n<li>No stable nominations for <code>T-rustdoc</code> this time.</li>\n</ul>",
        "id": 207529086,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597934182
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-08-20.20.2354818/near/207529063\">said</a>:</p>\n<blockquote>\n<p>YOLO</p>\n</blockquote>\n<p>just what you want your compiler team co-lead saying :)</p>",
        "id": 207529098,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597934188
    },
    {
        "content": "<h2>PRs S-waiting-on-team</h2>\n<p><a href=\"https://github.com/rust-lang/rust/pulls?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AS-waiting-on-team+label%3AT-compiler\">T-compiler</a><br>\nNo PRs waiting on <code>T-compiler</code> this time.</p>\n<p><a href=\"https://github.com/rust-lang/rust/pulls?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AS-waiting-on-team+label%3Alibs-impl\">libs-impl</a><br>\nNo PRs waiting on <code>libs-impl</code> this time.</p>",
        "id": 207529106,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597934191
    },
    {
        "content": "<p>It stands for \"You Oughta Look Out!\", right?</p>",
        "id": 207529144,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597934213
    },
    {
        "content": "<p><span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 207529152,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597934217
    },
    {
        "content": "<p>reference: <a href=\"https://www.youtube.com/watch?v=z5Otla5157c\">https://www.youtube.com/watch?v=z5Otla5157c</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"z5Otla5157c\" href=\"https://www.youtube.com/watch?v=z5Otla5157c\"><img src=\"https://i.ytimg.com/vi/z5Otla5157c/default.jpg\"></a></div>",
        "id": 207529198,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597934241
    },
    {
        "content": "<h2>Issues of Note</h2>\n<h3>Short Summary</h3>\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AT-compiler+label%3AP-critical+\">3 T-compiler P-critical issues</a><ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AT-compiler+label%3AP-critical+no%3Aassignee\">0 of those are unassigned</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AT-compiler+label%3AP-high+\">51 T-compiler P-high issues</a><ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AT-compiler+label%3AP-high+no%3Aassignee\">30 of those are unassigned</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/rust-lang/rust/labels/regression-from-stable-to-beta\">2 P-critical, 2 P-high, 4 P-medium, 1 P-low regression-from-stable-to-beta</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/labels/regression-from-stable-to-nightly\">0 P-critical, 2 P-high, 6 P-medium, 1 P-low regression-from-stable-to-nightly</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/labels/regression-from-stable-to-stable\">1 P-critical, 15 P-high, 50 P-medium, 5 P-low regression-from-stable-to-stable</a></li>\n</ul>",
        "id": 207529222,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597934255
    },
    {
        "content": "<h3>P-critical</h3>\n<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=label%3AP-critical+label%3AT-compiler\">T-compiler</a></p>",
        "id": 207529237,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597934265
    },
    {
        "content": "<ul>\n<li>\"LTO triggers apparent miscompilation on Windows 10 x64\" <a href=\"https://github.com/rust-lang/rust/issues/74498\">rust#74498</a><ul>\n<li>Discussed last week</li>\n<li>Assigned to <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span></li>\n<li>I-unsound stable regression, started failing when we updated to LLVM 9.0</li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/74498#issuecomment-661950983\">LLVM issue reproduced on LLVM master</a></li>\n<li>Rust started to trigger this misbehavior more frequent since the introduction of <a href=\"https://github.com/rust-lang/rust/pull/69659\">rust#69659</a> that happened in 1.45+.</li>\n<li><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> <a href=\"https://bugs.llvm.org/show_bug.cgi?id=46943\">filled a bug with LLVM upstream</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/74498#issuecomment-667452406\">According to <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span></a> the remaining question is if we should, for the short term, change that <code>range.rs</code> code to not used an <code>unchecked_add</code>, in order to (hopefully) bypass the misoptimization here or patch LLVM.</li>\n<li><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> <a href=\"https://github.com/rust-lang/rust/issues/74498#issuecomment-668598776\">also discusses</a> if this generates an overflow or not.</li>\n</ul>\n</li>\n</ul>",
        "id": 207529260,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597934275
    },
    {
        "content": "<p>(did I take time to look more at this? No I did not. It has been a busy week at home.)</p>",
        "id": 207529326,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597934293
    },
    {
        "content": "<p>at this point I think I'm just going to treat this as something we need to fix in LLVM. I don't think I'm going to spend time investigating whether a change to <code>range.rs</code> is worth it.</p>",
        "id": 207529390,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597934325
    },
    {
        "content": "<p>I think I agree</p>",
        "id": 207529407,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597934334
    },
    {
        "content": "<p>(So does that mean we close this bug? Or just downgrade its priority? I cannot recall how we've typically treated bugs that expose upstream LLVM bugs in the past.)</p>",
        "id": 207529454,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597934367
    },
    {
        "content": "<p>I wouldn't be opposed to downgrading to P-high. I don't think we need to check in on it every week in this meeting.</p>",
        "id": 207529492,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597934395
    },
    {
        "content": "<p>agreed <code>P-high</code> seems good</p>",
        "id": 207529609,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1597934436
    },
    {
        "content": "<p>(I <em>do</em> hope to further investigate an LLVM fix. For all I know, the llvm-devs may have come up with one in the meantime...)</p>",
        "id": 207529624,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597934445
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-08-20.20.2354818/near/207529624\">said</a>:</p>\n<blockquote>\n<p>(I <em>do</em> hope to further investigate an LLVM fix. For all I know, the llvm-devs may have come up with one in the meantime...)</p>\n</blockquote>\n<p>but accordingly to <a href=\"https://bugs.llvm.org/show_bug.cgi?id=46943\">https://bugs.llvm.org/show_bug.cgi?id=46943</a>, they have been silent.</p>",
        "id": 207529675,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597934475
    },
    {
        "content": "<p>anyway lets downgrade to P-high</p>",
        "id": 207529709,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597934489
    },
    {
        "content": "<ul>\n<li>\"Unexpected trait resolution overflow error\" <a href=\"https://github.com/rust-lang/rust/issues/74868\">rust#74868</a><ul>\n<li>Assigned to <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> and <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span></li>\n<li>Needs MCVE and bisection</li>\n<li>Regressed on <a href=\"https://github.com/rust-lang/rust/pull/73452\">rust#73452</a></li>\n<li>PR pending for review by <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> <a href=\"https://github.com/rust-lang/rust/pull/75494\">rust#75494</a></li>\n</ul>\n</li>\n</ul>",
        "id": 207529730,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597934500
    },
    {
        "content": "<p>this is the one we were just discussing for ages. :)</p>",
        "id": 207529741,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597934506
    },
    {
        "content": "<p>Its unfortunate we don't have an MCVE. (Or did <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> construct one in their PR? I didn't notice.)</p>",
        "id": 207529819,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597934526
    },
    {
        "content": "<p>there was one (<a href=\"https://github.com/rust-lang/rust/pull/75494/files#diff-39969b201b4ae5070e99871e716526f2\">link</a>)</p>",
        "id": 207529912,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597934576
    },
    {
        "content": "<p>oh okay great</p>",
        "id": 207529931,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597934581
    },
    {
        "content": "<p>nothing else to do there then, I think</p>",
        "id": 207529966,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597934601
    },
    {
        "content": "<ul>\n<li>\"Panic when compiling gluon on 1.46\" <a href=\"https://github.com/rust-lang/rust/issues/75313\">rust#75313</a><ul>\n<li>Assigned to <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> </li>\n<li>It's a beta regression, regressed in <a href=\"https://github.com/rust-lang/rust/issues/72796\">rust#72796</a></li>\n<li>Fixed by <a href=\"https://github.com/rust-lang/rust/pull/75443\">rust#75443</a>, issue still open waiting for backport<br>\n    - (was unilaterally accepted for beta backport; see earlier announcement)</li>\n</ul>\n</li>\n</ul>",
        "id": 207529978,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597934608
    },
    {
        "content": "<p>this likewise doesn't need further discussion. (it just wasn't yet unilaterally accepted when agenda was constructed, and I was on a mobile device up until exactly at meeting start time so I couldn't effectively edit agenda to remove it)</p>",
        "id": 207530077,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597934647
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AP-critical+label%3Alibs-impl\">libs-impl</a></p>\n<ul>\n<li>No <code>P-critical</code> issues for <code>libs-impl</code> this time.</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AP-critical+label%3AT-rustdoc\">T-rustdoc</a></p>\n<ul>\n<li>No <code>P-critical</code> issues for <code>T-rustdoc</code> this time.</li>\n</ul>",
        "id": 207530096,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597934659
    },
    {
        "content": "<h3>Unassigned P-high regressions</h3>\n<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3Aregression-from-stable-to-beta+P-high+no%3Aassignee\">Beta regressions</a></p>\n<ul>\n<li>\"libtest panics when running <code>should_panic</code> tests under QEMU armv7 \" <a href=\"https://github.com/rust-lang/rust/issues/74820\">rust#74820</a><ul>\n<li>Discussed last week</li>\n<li>Cargo lib skeleton + should_panic test code fails on QEMU armv7</li>\n<li>It seems to be caused by <a href=\"https://github.com/rust-lang/rust/pull/72746\">rust#72746</a> by <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span></li>\n<li>Seems to be specific to QEMU, <a href=\"https://github.com/rust-lang/rust/issues/74820#issuecomment-673977399\">see comment</a></li>\n</ul>\n</li>\n</ul>",
        "id": 207530115,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597934668
    },
    {
        "content": "<p>being specific to QEMU makes this significantly less scary to me</p>",
        "id": 207530141,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597934691
    },
    {
        "content": "<p>but it is still a pain</p>",
        "id": 207530161,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597934701
    },
    {
        "content": "<p>Though the fact that it is lock poisoning probably means that this is just a racy bug, right?</p>",
        "id": 207530272,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597934759
    },
    {
        "content": "<p>I guess so</p>",
        "id": 207530346,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597934779
    },
    {
        "content": "<p>probably lock poisoning doing its job in some sense</p>",
        "id": 207530359,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597934788
    },
    {
        "content": "<p>i.e. the failure to reproduce on hardware doesn't mean that some <em>different</em> scheduler will reproduce it?</p>",
        "id": 207530362,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597934792
    },
    {
        "content": "<p>I suppose</p>",
        "id": 207530371,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597934796
    },
    {
        "content": "<p>Or the panic impl is broken</p>",
        "id": 207530383,
        "sender_full_name": "simulacrum",
        "timestamp": 1597934806
    },
    {
        "content": "<p>yeah, I was just thinking...</p>",
        "id": 207530392,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597934814
    },
    {
        "content": "<p>hmm</p>",
        "id": 207530396,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597934817
    },
    {
        "content": "<p>But I have no good ideas on how to track that down</p>",
        "id": 207530437,
        "sender_full_name": "simulacrum",
        "timestamp": 1597934840
    },
    {
        "content": "<p>should we consider rolling back PR <a href=\"https://github.com/rust-lang/rust/issues/72746\">#72746</a> ?</p>",
        "id": 207530469,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597934859
    },
    {
        "content": "<p>I mean <em>man</em> -- removing symbols from build =&gt; lock poisoning</p>",
        "id": 207530552,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597934894
    },
    {
        "content": "<p>that's an epic bug :)</p>",
        "id": 207530556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597934898
    },
    {
        "content": "<p>I would be inclined not to revert</p>",
        "id": 207530585,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597934917
    },
    {
        "content": "<p>on the basis of a QEMU specific failure..I think</p>",
        "id": 207530618,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597934931
    },
    {
        "content": "<p>okay</p>",
        "id": 207530639,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597934944
    },
    {
        "content": "<p>too bad nobody from ARM group has any input yet</p>",
        "id": 207530650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597934951
    },
    {
        "content": "<p>well they bisected it, no?</p>",
        "id": 207530693,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597934971
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"309977\">@Jamie Cunliffe</span> bisected, in particular.</p>",
        "id": 207530715,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597934980
    },
    {
        "content": "<p>but yeah</p>",
        "id": 207530728,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597934985
    },
    {
        "content": "<p>true, I meant more like</p>",
        "id": 207530733,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597934987
    },
    {
        "content": "<p>has any idea how to fix :)</p>",
        "id": 207530736,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597934989
    },
    {
        "content": "<p>okay well I guess we'll just let the bug hit stable</p>",
        "id": 207530803,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597935007
    },
    {
        "content": "<p><em>Hopefully</em> it only causes problems for <code>#[should_panic]</code> tests, and doesn't represent a more fundamental bug in our panic system there. <span aria-label=\"scared\" class=\"emoji emoji-1f628\" role=\"img\" title=\"scared\">:scared:</span></p>",
        "id": 207530897,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597935055
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3Aregression-from-stable-to-nightly+P-high+no%3Aassignee\">Nightly regressions</a></p>\n<ul>\n<li>\"Type mismatch in function arguments E0631, E0271 are falsely recognized as E0308 mismatched types\" <a href=\"https://github.com/rust-lang/rust/issues/74400\">rust#74400</a><ul>\n<li>Discussed last week</li>\n<li>Regressed on <a href=\"https://github.com/rust-lang/rust/pull/73643\">rust#73643</a> which is a rollup, likely to be <a href=\"https://github.com/rust-lang/rust/pull/72493\">rust#72493</a></li>\n</ul>\n</li>\n</ul>",
        "id": 207530921,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597935070
    },
    {
        "content": "<p>We don't have much time left</p>",
        "id": 207530975,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597935102
    },
    {
        "content": "<p>so i'm going to skip discussion of <a href=\"https://github.com/rust-lang/rust/issues/74400\">rust#74400</a></p>",
        "id": 207530989,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597935111
    },
    {
        "content": "<h2>Performance logs</h2>\n<p>This week was quite noisy, with many small regressions and improvements.<br>\nOverall, instruction counts have increased somewhat, while max RSS remains the<br>\nsame. There were several updates to core data structures (<code>HashMap</code>,<br>\n<code>IndexMap</code>), which contributed to some of the noise. </p>\n<p>Triage done by @ecstaticmorse.<br>\nRevision range: <a href=\"https://perf.rust-lang.org/?start=8b84156c6ee2b4e707dc32f5a516e3143ab924d3&amp;end=67e7b9b8cf776222825dbbd4cb1e39b7765ef27c&amp;absolute=false&amp;stat=instructions%3Au\">8b84156c6ee2b4e707dc32f5a516e3143ab924d3..67e7b9b8cf776222825dbbd4cb1e39b7765ef27c</a></p>\n<p>4 Regressions, 3 Improvements, 4 Mixed, 0 of them in rollups.</p>",
        "id": 207531041,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597935123
    },
    {
        "content": "<h4>4 Regressions</h4>\n<p><a href=\"https://github.com/rust-lang/rust/pull/73851\">#73851</a> Remove most specialization use in serialization</p>\n<ul>\n<li><a href=\"https://perf.rust-lang.org/compare.html?start=95879ad96104afa584e7aec7806cec1d0bd84116&amp;end=668a34e0f438d4a950b9440239656d6755ad963c&amp;stat=instructions:u\">Very small regressions across the board</a></li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/pull/75048\">#75048</a> Prevent <code>__rust_begin_short_backtrace</code> frames from being tail-call optimised away</p>\n<ul>\n<li><a href=\"https://perf.rust-lang.org/compare.html?start=c2d1b0d9800d922b0451921d2ce17e6ae665d5b4&amp;end=f3a9de9b08659e20ce7c282ed77bc43ddd149107&amp;stat=instructions:u\">Regressions in several benchmarks</a></li>\n<li>Mostly for crates with very little codegen</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/pull/75134\">#75306</a> Hash parent ExpnData</p>\n<ul>\n<li><a href=\"https://perf.rust-lang.org/compare.html?start=8bc801b05019cd3e0ef19e6c4c028d55baa645d2&amp;end=543f03d24118d3af784aa98c507c00e30c796a0e&amp;stat=instructions:u\">Very small regressions across the board</a></li>\n<li>Necessary for correctness</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/pull/73656\">#73656</a> move Deaggregate pass to post\\_borrowck\\_cleanup </p>\n<ul>\n<li><a href=\"https://perf.rust-lang.org/compare.html?start=4b9ac5161781ca6a376daab3d3b2f2623d8f3789&amp;end=cbe7c5ce705896d4e22bf6096590bc1f17993b78&amp;stat=instructions:u\">Very small regressions across the board</a></li>\n</ul>",
        "id": 207531056,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597935129
    },
    {
        "content": "<h4>3 Improvements</h4>\n<p><a href=\"https://github.com/rust-lang/rust/pull/74512\">#74512</a> Put panic code path from <code>copy_from_slice</code> into cold function</p>\n<ul>\n<li><a href=\"https://perf.rust-lang.org/compare.html?start=576d27c5a6c80cd39ef57d7398831d8e177573cc&amp;end=847ba835ce411d47364a93ddf0b4a5c0f27928a9&amp;stat=instructions:u\">Small improvements across the board, albeit mostly for incremental builds</a></li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/pull/74877\">#74877</a> Implement the <code>min_const_generics</code> feature gate</p>\n<ul>\n<li><a href=\"https://perf.rust-lang.org/compare.html?start=f3a9de9b08659e20ce7c282ed77bc43ddd149107&amp;end=f9c2177ddc605f9c75ca1a3e6ddb33835b8a178d&amp;stat=instructions:u\">A small improvement on <code>wf-projection-stress</code></a></li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/pull/75121\">#75121</a>  Avoid <code>unwrap_or_else</code> in str indexing</p>\n<ul>\n<li><a href=\"https://perf.rust-lang.org/compare.html?start=63e34422bbaf4ae4ed5ae7309183185aa2aa13a4&amp;end=98922795f68e86b0bca5aea8cfc66499d58eba1a&amp;stat=instructions:u\">A small improvement on <code>encoding-opt</code></a></li>\n</ul>",
        "id": 207531068,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597935140
    },
    {
        "content": "<h4>4 Mixed</h4>\n<p><a href=\"https://github.com/rust-lang/rust/pull/70052\">#70052</a>  Update hashbrown to 0.8.1</p>\n<ul>\n<li><a href=\"https://perf.rust-lang.org/compare.html?start=d4c940f0821754a98491b2d23fbb5323c14a2bf5&amp;end=8b26609481c956a666f9189738f1ba611078e1ab&amp;stat=instructions:u\">Mixed results across the board</a></li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/pull/75278\">#75278</a>  Upgrade indexmap and use it more</p>\n<ul>\n<li><a href=\"https://perf.rust-lang.org/compare.html?start=39e593ab14c53fda63c3f2756716c5ad3cbb6465&amp;end=18f3be7704a4ec7976fcd1272c728974243d29bd&amp;stat=instructions:u\">Very small regressions for most builds, notably docs</a></li>\n<li>Offset by larger wins on a few benchmarks: <code>encoding</code>, <code>keccak</code>, <code>inflate</code>.</li>\n<li>Author cites improved CPU cycle counts.</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/pull/75306\">#75306</a> Update hashbrown to 0.8.2 </p>\n<ul>\n<li><a href=\"https://perf.rust-lang.org/compare.html?start=dcf107728c4e545b9fee6b0e6a929837429275cf&amp;end=aced185592b6f99a21190965a7fecfcd72d954dc&amp;stat=instructions:u\">Mixed results across the board</a></li>\n<li>Mostly improvements, but <code>incr-patched: println</code> has taken a rather large hit.</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/pull/75382\">#75382</a> First iteration of simplify match branches</p>\n<ul>\n<li><a href=\"https://perf.rust-lang.org/compare.html?start=b6396b75e782954acb085447fb836c4e0ff5281d&amp;end=5e3f1b148db5bfa27fee52464ae1f5d34c49d77b&amp;stat=instructions:u\">Very small improvements across the board</a></li>\n<li>However, a few moderate regressions on synthetic benchmarks</li>\n</ul>",
        "id": 207531082,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597935150
    },
    {
        "content": "<p>Nags requiring follow up</p>\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust/pull/73656\">#73656</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/pull/73851\">#73851</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/pull/75048\">#75048</a></li>\n</ul>",
        "id": 207531097,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597935155
    },
    {
        "content": "<p>what I realy want to get to</p>",
        "id": 207531139,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597935183
    },
    {
        "content": "<p>is the nominated issue</p>",
        "id": 207531146,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597935186
    },
    {
        "content": "<p>so let me post that</p>",
        "id": 207531155,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597935190
    },
    {
        "content": "<p>and see if we can resolve it in seven minutes</p>",
        "id": 207531170,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597935200
    },
    {
        "content": "<h2>Nominated Issues</h2>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3AI-nominated+label%3AT-compiler\">T-compiler</a></p>\n<ul>\n<li>\"Disable zlib in LLVM on Haiku\" <a href=\"https://github.com/rust-lang/rust/pull/75655\">rust#75655</a><ul>\n<li>Assigned to <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span></li>\n<li>LLVM_ENABLE_ZLIB flag enabled in LLVM builds causes undefined symbols</li>\n<li><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> this is just too many platforms which are broken when enabling zlib.</li>\n<li><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> is leaning towards disabling zlib entirely until we can provide a workaround.</li>\n<li>Nominated to discuss a possible solution to this problem.</li>\n<li>Haiku is Tier 3 but issue shows up also on NetBSD and aarch64-apple-darwin</li>\n<li>There are some proposed solutions <a href=\"https://github.com/rust-lang/rust/pull/75655#issuecomment-675424522\">here</a> and <a href=\"https://github.com/rust-lang/rust/pull/75655#issuecomment-675475933\">here</a> and <a href=\"https://github.com/rust-lang/rust/pull/75655#issuecomment-677090444\">the one proposed by <span class=\"user-mention\" data-user-id=\"119581\">@mati865</span> is reported to work</a></li>\n</ul>\n</li>\n</ul>",
        "id": 207531181,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597935209
    },
    {
        "content": "<p>so as noted above, <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> has suggested disabling zlib entirely</p>",
        "id": 207531221,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597935229
    },
    {
        "content": "<p>the problem is that, as I understand it, disabling zlib will break linking to object code produced by e.g. gcc (at least with default options) on certain tier 1 targets?</p>",
        "id": 207531321,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597935266
    },
    {
        "content": "<p>that doesn't sound ideal to me</p>",
        "id": 207531333,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597935274
    },
    {
        "content": "<p>Not sure about tier 1</p>",
        "id": 207531338,
        "sender_full_name": "simulacrum",
        "timestamp": 1597935279
    },
    {
        "content": "<p>oh I thought it was like ubuntu 18 or something</p>",
        "id": 207531361,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597935298
    },
    {
        "content": "<p>I think I'm in favor of latest proposal to just support tier 1 for sure and be okay with disabling elsewhere as needed</p>",
        "id": 207531393,
        "sender_full_name": "simulacrum",
        "timestamp": 1597935322
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/72696#issuecomment-637403199\">https://github.com/rust-lang/rust/pull/72696#issuecomment-637403199</a></p>\n<blockquote>\n<p>You're right the Rust compiler doesn't do this. But C compilers do, for example I believe GCC does this by default on Ubuntu 18.04. So if you're trying to link native code _and_ you're using <code>rust-lld</code>, you'll run into this issue. I don't think this is related to SGX in particular, except that it uses <code>rust-lld</code> by default so the issue is more apparent.</p>\n</blockquote>",
        "id": 207531411,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597935334
    },
    {
        "content": "<p>we <em>could</em> have it off by default</p>",
        "id": 207531446,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597935349
    },
    {
        "content": "<p>Ah, right, you need to use the lld we build</p>",
        "id": 207531463,
        "sender_full_name": "simulacrum",
        "timestamp": 1597935356
    },
    {
        "content": "<p>and turn it on only for specific targets where we know it arises</p>",
        "id": 207531510,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597935364
    },
    {
        "content": "<p>Which isn't currently the default on tier 1 targets</p>",
        "id": 207531521,
        "sender_full_name": "simulacrum",
        "timestamp": 1597935371
    },
    {
        "content": "<p>ah</p>",
        "id": 207531532,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597935380
    },
    {
        "content": "<p>i see</p>",
        "id": 207531545,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597935387
    },
    {
        "content": "<p>Anyway I think the main question for this meeting is whether we're okay with diverging behavior between tier 1 and 2 (and 3) without bugs filed to fix that</p>",
        "id": 207531568,
        "sender_full_name": "simulacrum",
        "timestamp": 1597935405
    },
    {
        "content": "<p>I think my answer is yes personally</p>",
        "id": 207531590,
        "sender_full_name": "simulacrum",
        "timestamp": 1597935417
    },
    {
        "content": "<p>Well yeah we probably <em>should</em> file bugs</p>",
        "id": 207531602,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597935419
    },
    {
        "content": "<p>right?</p>",
        "id": 207531610,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597935423
    },
    {
        "content": "<p>I'm having a bit of trouble following this</p>",
        "id": 207531616,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597935427
    },
    {
        "content": "<p>oh sorry</p>",
        "id": 207531623,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597935432
    },
    {
        "content": "<p>some compilers in some contexts produce object code with (zlib) compressed sections</p>",
        "id": 207531650,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597935451
    },
    {
        "content": "<p>to properly link to such object code, you need to build LLVM a certain way</p>",
        "id": 207531673,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597935464
    },
    {
        "content": "<p>we added support for building LLVM with such support</p>",
        "id": 207531687,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597935476
    },
    {
        "content": "<p>it sounds to me like this is very tied to the expectations in particular environments</p>",
        "id": 207531763,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597935505
    },
    {
        "content": "<p>but doing that, i.e. adding that config flag to the LLVM build by default, caused a number of our (less-important tier) targets to fail to build</p>",
        "id": 207531772,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597935510
    },
    {
        "content": "<p>but basically we're saying \"supporting zlib-compressed libraries is a feature of some platforms but not all\"?</p>",
        "id": 207531809,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597935534
    },
    {
        "content": "<p>and we're wanting to require that for tier 1?</p>",
        "id": 207531814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597935539
    },
    {
        "content": "<p>yeah</p>",
        "id": 207531819,
        "sender_full_name": "simulacrum",
        "timestamp": 1597935543
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-08-20.20.2354818/near/207531568\">said</a>:</p>\n<blockquote>\n<p>Anyway I think the main question for this meeting is whether we're okay with diverging behavior between tier 1 and 2 (and 3) without bugs filed to fix that</p>\n</blockquote>\n<p>This seems ok to me provided we document tier 1 support requires zlib support.</p>",
        "id": 207531828,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1597935548
    },
    {
        "content": "<p>to be clear all platforms \"can\" support this, it's just a matter of figuring out the magic linker flags to get llvm to build</p>",
        "id": 207531874,
        "sender_full_name": "simulacrum",
        "timestamp": 1597935574
    },
    {
        "content": "<p>hmm yes okay. That way, a prereq for going from tier2 to tier1 will be adding such support</p>",
        "id": 207531889,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597935584
    },
    {
        "content": "<p>(by \"that way\", I meant what <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-08-20.20.2354818/near/207531828\">wesley said above</a>)</p>",
        "id": 207531976,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597935607
    },
    {
        "content": "<p>essentially that's the requirement I think we'd have. obviously we'd accept patches to fix tier-2/3 targets as well</p>",
        "id": 207531978,
        "sender_full_name": "simulacrum",
        "timestamp": 1597935608
    },
    {
        "content": "<p>I guess I feel like filing bugs per platform for this is overkill</p>",
        "id": 207531979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597935608
    },
    {
        "content": "<p>tier 2 / tier 3 platforms are kind of expected to have bugs</p>",
        "id": 207531999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597935617
    },
    {
        "content": "<p>I mean if people file bugs that's ok :)</p>",
        "id": 207532007,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597935620
    },
    {
        "content": "<p>yes I don't want to file bugs per platform personally</p>",
        "id": 207532021,
        "sender_full_name": "simulacrum",
        "timestamp": 1597935625
    },
    {
        "content": "<p>but I don't know that we have to go out of our way to do so</p>",
        "id": 207532025,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597935627
    },
    {
        "content": "<p>yeah okay, I'm alright with not requiring bugs to be filed as long as the requirement for tier 1 is documented.</p>",
        "id": 207532046,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597935636
    },
    {
        "content": "<p>(would be nice if we had tests....mind you)</p>",
        "id": 207532053,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597935641
    },
    {
        "content": "<p>so it seems like everyone is in sync with that plan then?</p>",
        "id": 207532083,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597935655
    },
    {
        "content": "<p>I will follow-up</p>",
        "id": 207532123,
        "sender_full_name": "simulacrum",
        "timestamp": 1597935668
    },
    {
        "content": "<p>fantastic</p>",
        "id": 207532134,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597935672
    },
    {
        "content": "<p>okay well I'm sorry we didn't have time to look at that P-high issue nor the performance report</p>",
        "id": 207532165,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597935686
    },
    {
        "content": "<p>(though I think the performance report didn't contain any show-stoppers. I hope!)</p>",
        "id": 207532191,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597935698
    },
    {
        "content": "<p>so thank you to everyone in <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span> for attending! Hope to be able to see some of you at virtual rustconf later. :)</p>",
        "id": 207532222,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597935718
    },
    {
        "content": "<p>my take on llvm zlib thing: figure out how to get it linked statically.</p>",
        "id": 207533605,
        "sender_full_name": "nagisa",
        "timestamp": 1597936318
    },
    {
        "content": "<p>I know llvm build system is doing something weird that makes it always use dynamic zlib, but there's no reason we couldn't look into making a patch for upstream.</p>",
        "id": 207533736,
        "sender_full_name": "nagisa",
        "timestamp": 1597936380
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-08-20.20.2354818/near/207533736\">said</a>:</p>\n<blockquote>\n<p>I know llvm build system is doing something weird that makes it always use dynamic zlib, but there's no reason we couldn't look into making a patch for upstream.</p>\n</blockquote>\n<p>yeah I think this suggestion was made somewhere in the github issue(s) ... and maybe someone provided a demo patch? Not sure.</p>",
        "id": 207540295,
        "sender_full_name": "pnkfelix",
        "timestamp": 1597939446
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119581\">@mati865</span> tried to but failed, I believe</p>",
        "id": 207541848,
        "sender_full_name": "simulacrum",
        "timestamp": 1597940271
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> indeed, <a href=\"https://github.com/rust-lang/rust/issues/74420#issuecomment-660186236\">https://github.com/rust-lang/rust/issues/74420#issuecomment-660186236</a></p>",
        "id": 207577486,
        "sender_full_name": "simulacrum",
        "timestamp": 1597959453
    },
    {
        "content": "<p>ugh</p>",
        "id": 207577551,
        "sender_full_name": "nagisa",
        "timestamp": 1597959495
    }
]