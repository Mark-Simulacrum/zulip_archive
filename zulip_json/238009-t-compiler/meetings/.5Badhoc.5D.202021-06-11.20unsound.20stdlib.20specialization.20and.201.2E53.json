[
    {
        "content": "<p>Hello world. I’m just creating the meeting topic ahead of time so that I can point people to it.</p>",
        "id": 242304408,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623391323
    },
    {
        "content": "<p>the meeting should start in about 8 hours, at <time datetime=\"2021-06-11T14:00:00Z\">2021-06-11T10:00:00-04:00</time></p>",
        "id": 242304449,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623391381
    },
    {
        "content": "<p>I attempted to take some notes in <a href=\"https://hackmd.io/IcaLDGBlStWYkn2qzWGxUg\">https://hackmd.io/IcaLDGBlStWYkn2qzWGxUg</a></p>",
        "id": 242305247,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623392353
    },
    {
        "content": "<p>I’m hoping the situation isn’t quite as dire as I had thought at the end of the meeting yesterday</p>",
        "id": 242305252,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623392368
    },
    {
        "content": "<p>(if that is true, hopefully we can make short work of the specialization questions, and then review rest of <a href=\"https://hackmd.io/1NeIcqXERkug9KItmB1TwQ\">meeting agenda from yesterday</a>)</p>",
        "id": 242305330,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623392433
    },
    {
        "content": "<p>Won't be able to attend at that time.</p>\n<p><a href=\"https://github.com/rust-lang/rust/issues/82303\">#82303</a> not unsound. It is about not observing side-effects on one of the two source iterators when calling <code>next()</code> on a Zip iterator which already has returned <code>None</code>, i.e. when trying to advance beyond the end. We already had a crater run for that issue that made that made that behavior visible in more cases (and also elided some additional) side-effects and nothing broke. And it has been on stable for a while.</p>\n<p><a href=\"https://github.com/rust-lang/rust/issues/85969\">#85969</a> is also about side-effects being elided.</p>\n<p>The other two issues are basically flavors of the same thing which steffahn already explained in quite some detail.</p>\n<blockquote>\n<p>That sounds to me like some safety loopholes around specializations on FusedIterator and Copy were not unexpected since they tend to include unsafe code.</p>\n</blockquote>\n<p>My reasoning is that a) <code>rustc_unsafe_specialization_marker</code> exists (introduced in <a href=\"https://github.com/rust-lang/rust/issues/68970\">#68970</a>) and b) is exposed as user-implementable safe, stable traits <code>Copy</code> and <code>FusedIterator</code> and exploited by some specializations which most of the time involve unsafe code. Which means that min_specialization doesn't entirely close the hole around erased lifetimes that it was supposed to fix. This time it's due to variance, I think the original motivating case was due to associated types?</p>\n<p><code>rustc_unsafe_specialization_marker</code> was introduced for pretty much that purpose, the implementation even mentions <code>FusedIterator</code> in its comments. The question is whether this kind of interaction was anticipated back then and considered acceptable or if it was just that they <em>could</em> be used in unsound ways but the existing implementations were considered correct. That's the question I tried to ask @matthewjasper in <a href=\"https://github.com/rust-lang/rust/issues/85863#issuecomment-851936533\">https://github.com/rust-lang/rust/issues/85863#issuecomment-851936533</a> </p>\n<p>In my optimization-biased opinion these cases are fairly hard to encounter, they require coercing an iterator between iteration steps.</p>\n<p>I wonder how <span class=\"user-mention\" data-user-id=\"280891\">@Frank Steffahn</span> found them. Is this something encountered in real code or arrived at due to careful analysis?</p>",
        "id": 242313877,
        "sender_full_name": "The 8472",
        "timestamp": 1623399455
    },
    {
        "content": "<blockquote>\n<p>I wonder how @Frank Steffahn found them. Is this something encountered in real code or arrived at due to careful analysis?</p>\n</blockquote>\n<p>Careful analysis.</p>",
        "id": 242314234,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1623399651
    },
    {
        "content": "<p>FWIW I will also not be able to make it, but I don't have any strong feeling myself here I think.</p>",
        "id": 242347218,
        "sender_full_name": "simulacrum",
        "timestamp": 1623419300
    },
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span></p>",
        "id": 242348994,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623420107
    },
    {
        "content": "<p>So in constructing my notes last night, and thinking about them, I have to admit that maybe I over-estimated the severity of the situation here</p>",
        "id": 242349106,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623420142
    },
    {
        "content": "<p>In that: I do think that there are some backports warranted, but we can probably isolated them pretty easily solely to the things that were injected on 1.53</p>",
        "id": 242349156,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623420164
    },
    {
        "content": "<p>I didn’t have time to write up a formal proposal last night of what to do</p>",
        "id": 242349201,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623420180
    },
    {
        "content": "<p>But I suggest, for whomever <em>is</em> able to make the meeting today</p>",
        "id": 242349458,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623420287
    },
    {
        "content": "<p>and we can re-convene at <time datetime=\"2021-06-11T14:15:00Z\">2021-06-11T10:15:00-04:00</time> to discuss what to do</p>",
        "id": 242349607,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623420356
    },
    {
        "content": "<p>ok :)</p>",
        "id": 242349764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623420421
    },
    {
        "content": "<p>I see some holes in the table in that hackmd. <a href=\"https://github.com/rust-lang/rust/issues/82303\">#82303</a> is very similar to <a href=\"https://github.com/rust-lang/rust/issues/85969\">#85969</a>, but older. By older, I mean, the bug was introduced earlier (and it’s already in <code>stable</code>), not just the issue being older; and <a href=\"https://github.com/rust-lang/rust/issues/85975\">#85975</a> only fixes <a href=\"https://github.com/rust-lang/rust/issues/85969\">#85969</a>, not <a href=\"https://github.com/rust-lang/rust/issues/82303\">#82303</a>. However, <a href=\"https://github.com/rust-lang/rust/issues/82303\">#82303</a> is (indeed) <em>not unsound</em>.</p>",
        "id": 242350026,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1623420526
    },
    {
        "content": "<p>okay thanks, let me try to fix the table at least, based on those corrections</p>",
        "id": 242350099,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623420556
    },
    {
        "content": "<p>or wait</p>",
        "id": 242350227,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623420603
    },
    {
        "content": "<p>I think the table is at least consistent with what you said? Maybe its just not clearly presented?</p>",
        "id": 242350275,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623420618
    },
    {
        "content": "<p>I can replace the “When Injected: ?” with “When Injected: Ancient” for <a href=\"https://github.com/rust-lang/rust/issues/82303\">#82303</a></p>",
        "id": 242350336,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623420648
    },
    {
        "content": "<p>and put in “When/if fixed: Not fixed” for <a href=\"https://github.com/rust-lang/rust/issues/82303\">#82303</a>.</p>",
        "id": 242350425,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623420694
    },
    {
        "content": "<blockquote>\n<p>replace the “When Injected: ?” with “When Injected: Ancient”</p>\n</blockquote>\n<p>Seems accurate. I’m trying out on godbolt right now, seems ancient, e.g. even before 1.23, a few versions earlier and it starts complaining about missing methods and such</p>",
        "id": 242350436,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1623420699
    },
    {
        "content": "<p>The Before Times.</p>",
        "id": 242350708,
        "sender_full_name": "Jubilee",
        "timestamp": 1623420836
    },
    {
        "content": "<p>btw  niko potined out a typo via priv msg</p>",
        "id": 242350922,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623420925
    },
    {
        "content": "<p>so in case you all were confused</p>",
        "id": 242350928,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623420929
    },
    {
        "content": "<p>the places where the table said <a href=\"https://github.com/rust-lang/rust/issues/85973\">#85973</a>, it should have said <a href=\"https://github.com/rust-lang/rust/issues/85873\">#85873</a> (and had the corresponding link)</p>",
        "id": 242350962,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623420951
    },
    {
        "content": "<p>So first, lets clarify of goal(s) of meeting</p>",
        "id": 242351033,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623420966
    },
    {
        "content": "<p>my hope was to resolve what backports need to happen for 1.53</p>",
        "id": 242351058,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623420980
    },
    {
        "content": "<p>with respect to these specialization issues</p>",
        "id": 242351081,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623420992
    },
    {
        "content": "<p>that was first goal</p>",
        "id": 242351090,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623420999
    },
    {
        "content": "<p>and then second goal was to finish going through remainder of agenda</p>",
        "id": 242351106,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623421007
    },
    {
        "content": "<p>that we did not get to yesterday</p>",
        "id": 242351121,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623421017
    },
    {
        "content": "<p>due to various discussions going too long</p>",
        "id": 242351135,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623421023
    },
    {
        "content": "<p>(or, alternatively, the agenda simply being too packed.)</p>",
        "id": 242351168,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623421037
    },
    {
        "content": "<p>Anyway: I want to start by saying: Are there any questions about the things we all just read?</p>",
        "id": 242351202,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623421054
    },
    {
        "content": "<p>I have one question</p>",
        "id": 242351230,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623421067
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Badhoc.5D.202021-06-11.20unsound.20stdlib.20specialization.20and.201.2E53/near/242351058\">said</a>:</p>\n<blockquote>\n<p>my hope was to resolve what backports need to happen for 1.53</p>\n</blockquote>\n<p>is there a definitive list of the backports being considered?</p>",
        "id": 242351271,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623421081
    },
    {
        "content": "<p>I guess that's in your table?</p>",
        "id": 242351311,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623421084
    },
    {
        "content": "<p>I didn’t put a concrete proposal down</p>",
        "id": 242351337,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623421094
    },
    {
        "content": "<p>last night</p>",
        "id": 242351341,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623421096
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> there’s still the question mark after <code>!unsound?</code> <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> . And if you want, you can go to <code>&lt;= 1.21</code></p>",
        "id": 242351352,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1623421101
    },
    {
        "content": "<p>becasue I was too tired and not thinking about it clearly</p>",
        "id": 242351355,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623421104
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"280891\">@Frank Steffahn</span> are you saying that <code>!unsound</code> is the correct entry and no <code>?</code> is required?</p>",
        "id": 242351405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623421123
    },
    {
        "content": "<p>yes</p>",
        "id": 242351420,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1623421131
    },
    {
        "content": "<p>I’d like to discuss <span class=\"user-mention\" data-user-id=\"280891\">@Frank Steffahn</span> question first</p>",
        "id": 242351433,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623421136
    },
    {
        "content": "<p>I'm not 100% sure what we mean by <em>unsound</em></p>",
        "id": 242351438,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623421138
    },
    {
        "content": "<p>so here’s my response to that</p>",
        "id": 242351475,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623421150
    },
    {
        "content": "<p>From my interpretation of what <span class=\"user-mention\" data-user-id=\"330154\">@The 8472</span> wrote above</p>",
        "id": 242351505,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623421165
    },
    {
        "content": "<p>they said <a href=\"https://github.com/rust-lang/rust/issues/82303\">#82303</a> is not unsound</p>",
        "id": 242351536,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623421183
    },
    {
        "content": "<p>I guess I propose the following definitions (which I think are what people mean):</p>\n<ul>\n<li><strong>unsound:</strong> purely safe code can cause UB because of this bug</li>\n<li><strong>incorrect:</strong> the code does not perform to specification; this could lead to UB if combined with unsafe code, or simply incorrect results with safe code</li>\n</ul>",
        "id": 242351628,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623421207
    },
    {
        "content": "<p>that it “just\" is a fialure to follow-through on causing  side-effects that some iterators may generate</p>",
        "id": 242351664,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623421227
    },
    {
        "content": "<p>Okay yes what Niko said above</p>",
        "id": 242351683,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623421234
    },
    {
        "content": "<blockquote>\n<p>I'm not 100% sure what we mean by unsound</p>\n</blockquote>\n<p>Well, at least my interpretation is “it’s possible to write a program in safe code hitting UB”. This is just about the number of times that <code>.next()</code> gets called on a nested iterator or the order in which the function in a <code>.map()</code> call that’s <code>DoubleEndedIterator</code> is executed, etc.</p>\n<p>So basically that niko said in terms of def’n.</p>",
        "id": 242351717,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1623421251
    },
    {
        "content": "<p>re: backport list: presumably<br>\n<a href=\"https://github.com/rust-lang/rust/pull/85975\">https://github.com/rust-lang/rust/pull/85975</a> and<br>\nif merged { <a href=\"https://github.com/rust-lang/rust/pull/85874\">https://github.com/rust-lang/rust/pull/85874</a> }?</p>",
        "id": 242351725,
        "sender_full_name": "Jubilee",
        "timestamp": 1623421255
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> lets hold on one second before we talk about teh backport list</p>",
        "id": 242351772,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623421275
    },
    {
        "content": "<p>if it's helpful, <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>, I'm going to try and keep the hackmd up to date with some notes</p>",
        "id": 242351821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623421300
    },
    {
        "content": "<p>But I think there may be different opinions here</p>",
        "id": 242351825,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623421302
    },
    {
        "content": "<p>Yes I’d apprecite that <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 242351828,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623421307
    },
    {
        "content": "<p>In particular, I saw some other discussion about how an analogous sitatution is that <code>Hash</code>  relies on <code>PartialEq</code>/<code>Eq</code> obeying their contract</p>",
        "id": 242351944,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623421353
    },
    {
        "content": "<p>but I don’t think hashtables are supposed to be allowed to become unsound</p>",
        "id": 242351993,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623421370
    },
    {
        "content": "<p>when the <code>PartialEq</code>/<code>Eq</code> fails to obey their contract</p>",
        "id": 242352016,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623421382
    },
    {
        "content": "<p>they might just fail to re-produce the mapping that you expect</p>",
        "id": 242352072,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623421405
    },
    {
        "content": "<p>correct</p>",
        "id": 242352094,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623421418
    },
    {
        "content": "<p>(and then that presumably could casue some other <code>unsafe</code> code to misbehave and introduce UB)</p>",
        "id": 242352103,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623421425
    },
    {
        "content": "<p>does that sound right?</p>",
        "id": 242352107,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623421427
    },
    {
        "content": "<p>except I would argue that such code is not incorrect</p>",
        "id": 242352142,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623421438
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> regarding the docs question: <a href=\"https://github.com/rust-lang/rust/issues/82303#issuecomment-852187787\">https://github.com/rust-lang/rust/issues/82303#issuecomment-852187787</a></p>",
        "id": 242352186,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1623421444
    },
    {
        "content": "<p>specifically, hashtables are not incorrect for relying on PartialEq and Eq having properties</p>",
        "id": 242352199,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623421452
    },
    {
        "content": "<p>they cannot be <em>unsound</em></p>",
        "id": 242352239,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623421466
    },
    {
        "content": "<p>I wrote these notes in the hackmd</p>",
        "id": 242352258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623421477
    },
    {
        "content": "<h3><a href=\"https://github.com/rust-lang/rust/issues/82303\">#82303</a></h3>\n<ul>\n<li>Affects whether <code>next</code> method is called on base iterators<br>\n    * when implementing <code>TrustedRandomAccess</code>, they are able to \"skip ahead\" where they were not before<br>\n    * thus side-effects from <code>map</code> calls may not be visible</li>\n<li>This is arguably <strong>incorrect</strong> but not <strong>unsound</strong><br>\n    * certainly a behavioral change</li>\n<li>Q: Is there specified behavior in the docs?</li>\n</ul>",
        "id": 242352260,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623421477
    },
    {
        "content": "<p>I am cheating because they are not <em>notes</em> excactly, they are me interpreting what other people wrote :)</p>",
        "id": 242352283,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623421488
    },
    {
        "content": "<p>but that last Q is exactly what I'm getting at -- and I guess what <span class=\"user-mention\" data-user-id=\"280891\">@Frank Steffahn</span> is linking to</p>",
        "id": 242352307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623421502
    },
    {
        "content": "<p>I'm also suggesting we may want more categories</p>",
        "id": 242352409,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623421559
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Badhoc.5D.202021-06-11.20unsound.20stdlib.20specialization.20and.201.2E53/near/242352103\">said</a>:</p>\n<blockquote>\n<p>(and then that presumably could casue some other <code>unsafe</code> code to misbehave and introduce UB)</p>\n</blockquote>\n<p>(I will admit that I am internally worrying that this position that I have staked out is actually not internally consistent. But I do not want to spend meeting time debating this level of detail…)</p>",
        "id": 242352481,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623421572
    },
    {
        "content": "<p>To inline what <span class=\"user-mention\" data-user-id=\"280891\">@Frank Steffahn</span> just linked to:</p>\n<p>The documentation of <code>Zip</code> says</p>\n<blockquote>\n<p>If either iterator returns <a href=\"https://doc.rust-lang.org/nightly/std/option/enum.Option.html#variant.None\"> <code>None</code> </a>, <a href=\"https://doc.rust-lang.org/nightly/std/iter/trait.Iterator.html#tymethod.next\"> <code>next</code> </a> from the zipped iterator will return <a href=\"https://doc.rust-lang.org/nightly/std/option/enum.Option.html#variant.None\"> <code>None</code> </a>. If the first iterator returns <a href=\"https://doc.rust-lang.org/nightly/std/option/enum.Option.html#variant.None\"> <code>None</code> </a>, <code>zip</code> will short-circuit and <code>next</code> will not be called on the second iterator.</p>\n</blockquote>\n<p>Which pretty clearly describes the behavior of <code>Zip</code>. Following this description one would not necessarily expect the first iterator <em>not</em> to be advanced just because the second iterator has size <code>0</code>.</p>\n<p>_Edit:_ I suppose that’s exactly what <a href=\"https://github.com/rust-lang/rust/issues/83791\">#83791</a> tries to address.</p>",
        "id": 242352514,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623421590
    },
    {
        "content": "<p>Is that all that the docs say on this topic, <span class=\"user-mention\" data-user-id=\"280891\">@Frank Steffahn</span>, and are these problems always occuring because of <code>Zip</code> and its attempts to shortcircuit?</p>",
        "id": 242352587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623421616
    },
    {
        "content": "<p>I feel a bit like the relevant docs are probably more <em>map</em></p>",
        "id": 242352605,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623421624
    },
    {
        "content": "<p>There’s also <a href=\"https://github.com/rust-lang/rust/issues/85969#issuecomment-854048379\">https://github.com/rust-lang/rust/issues/85969#issuecomment-854048379</a> which is a problem I attributed to <a href=\"https://github.com/rust-lang/rust/issues/82303\">#82303</a> as well, but that one’s not a simple question of “is <code>.next()</code> called or not”, because it allows accessing e.g. a <code>Map</code> iterator “starting in the middle”</p>\n<p>The code example in that comment, pieced together:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">iterator</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">100</span><span class=\"p\">).</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"item {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Look at this iterator. We all know that when `map`’s resulting Iterator</span>\n<span class=\"w\">    </span><span class=\"c1\">// implements DoubleEndedIterator, then the side-effects can be re-ordered.</span>\n<span class=\"w\">    </span><span class=\"c1\">// However, judging by the implementation of `map` one would probably</span>\n<span class=\"w\">    </span><span class=\"c1\">// at least expect that it’s impossible to hit the \"item 50\"</span>\n<span class=\"w\">    </span><span class=\"c1\">// without first either going through at least 0, 1, 2, … 49</span>\n<span class=\"w\">    </span><span class=\"c1\">// or 100, 99, 98, … 51 first. Right?</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Well, here we go!</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iterator</span><span class=\"p\">.</span><span class=\"n\">zip</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">51</span><span class=\"p\">).</span><span class=\"n\">zip</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">100</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">y</span><span class=\"p\">.</span><span class=\"n\">next_back</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 242352637,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1623421637
    },
    {
        "content": "<p>I am now thinking maybe I'm digging into the wrong question--</p>",
        "id": 242352667,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623421652
    },
    {
        "content": "<blockquote>\n<p>Following this description one would not necessarily expect the first iterator not to be advanced just because the second iterator has size 0.</p>\n</blockquote>\n<p>I interpret this as saying that the first iterator may <em>or may not</em> be advanced when second iterator has size 0. Was that what you intended, <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ?</p>",
        "id": 242352673,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623421655
    },
    {
        "content": "<p>if the goal is to decide what to <em>backport</em></p>",
        "id": 242352677,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623421657
    },
    {
        "content": "<p>maybe it's clear that the semantics/docs are sufficiently ambiguous that the point is \"we cannot 100% tell if this is incorrect or not, but it's definitely tripping people up\"?</p>",
        "id": 242352780,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623421683
    },
    {
        "content": "<p>okay yes</p>",
        "id": 242352813,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623421694
    },
    {
        "content": "<p>From <code>fn map</code>:</p>\n<blockquote>\n<p>Takes a closure and creates an iterator which calls that closure on each element.<br>\nmap() transforms one iterator into another, by means of its argument: something that implements FnMut. It produces a new iterator which calls this closure on each element of the original iterator.<br>\nIf you are good at thinking in types, you can think of map() like this: If you have an iterator that gives you elements of some type A, and you want an iterator of some other type B, you can use map(), passing a closure that takes an A and returns a B.<br>\nmap() is conceptually similar to a for loop. However, as map() is lazy, it is best used when you’re already working with other iterators. If you’re doing some sort of looping for a side effect, it’s considered more idiomatic to use for than map().</p>\n</blockquote>",
        "id": 242352820,
        "sender_full_name": "Jubilee",
        "timestamp": 1623421696
    },
    {
        "content": "<p>Yeah, I don't really think the docs get at this question specifically is kind of what it comes down to :)</p>",
        "id": 242352910,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623421740
    },
    {
        "content": "<p>at least from my perspective</p>",
        "id": 242352921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623421744
    },
    {
        "content": "<p>I can understand one expecting either behavior</p>",
        "id": 242352939,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623421750
    },
    {
        "content": "<p>I think I can agree with that</p>",
        "id": 242352992,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623421770
    },
    {
        "content": "<p>Does that affect the decision of what do right now for 1.53 ?</p>",
        "id": 242353051,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623421795
    },
    {
        "content": "<p>Or maybe I should first just put to rest <span class=\"user-mention\" data-user-id=\"280891\">@Frank Steffahn</span> ’s questioon</p>",
        "id": 242353133,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623421813
    },
    {
        "content": "<p>I feel we should probably revert and take the time to have this conversation in peace</p>",
        "id": 242353142,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623421815
    },
    {
        "content": "<p>It feels analogous to our attempts to introduce unwinding guards with extern \"C\" or what have you</p>",
        "id": 242353184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623421829
    },
    {
        "content": "<p>of wheher the table entry should still have a question mark next to <code>!unsound</code></p>",
        "id": 242353185,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623421831
    },
    {
        "content": "<p>I’m fine with taking out the question mark at this point, I think</p>",
        "id": 242353230,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623421845
    },
    {
        "content": "<p>I already did :P</p>",
        "id": 242353285,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623421864
    },
    {
        "content": "<p>per the definitions that are in the table, I think it is not unsound, I am not sure whether I consider it incorrect or not :)</p>",
        "id": 242353323,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623421877
    },
    {
        "content": "<p>okay</p>",
        "id": 242353356,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623421890
    },
    {
        "content": "<p>so maybe now we can just look at the question</p>",
        "id": 242353367,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623421899
    },
    {
        "content": "<p>of what specifically to backport</p>",
        "id": 242353371,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623421902
    },
    {
        "content": "<p>Let me repeat what <span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> wrote first</p>",
        "id": 242353402,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623421919
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Badhoc.5D.202021-06-11.20unsound.20stdlib.20specialization.20and.201.2E53/near/242351725\">said</a>:</p>\n<blockquote>\n<p>re: backport list: presumably<br>\n<a href=\"https://github.com/rust-lang/rust/pull/85975\">https://github.com/rust-lang/rust/pull/85975</a> and<br>\nif merged { <a href=\"https://github.com/rust-lang/rust/pull/85874\">https://github.com/rust-lang/rust/pull/85874</a> }?</p>\n</blockquote>",
        "id": 242353453,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623421928
    },
    {
        "content": "<p>So I would personally revise that</p>",
        "id": 242353474,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623421939
    },
    {
        "content": "<p>I wouldn’t backport all of <a href=\"https://github.com/rust-lang/rust/issues/85874\">#85874</a></p>",
        "id": 242353498,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623421948
    },
    {
        "content": "<p>I’d only backport the parts relevant to 1.53</p>",
        "id": 242353516,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623421959
    },
    {
        "content": "<p>namely the vec_deqeue and array</p>",
        "id": 242353540,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623421967
    },
    {
        "content": "<p>because we have no idea of the performance impact of backporting the remoal of the impl on  vec</p>",
        "id": 242353606,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623421995
    },
    {
        "content": "<p>and so I’d rather we take more time with that decision</p>",
        "id": 242353648,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623422014
    },
    {
        "content": "<p>and it was introduced in 1.48, which is sufficiently far back</p>",
        "id": 242353660,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623422021
    },
    {
        "content": "<p>when was 1.48 released?</p>",
        "id": 242353676,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623422029
    },
    {
        "content": "<p>(right, sorry, that was implicit in my reasoning above.)</p>",
        "id": 242353693,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623422037
    },
    {
        "content": "<p>2020 Nov 19</p>",
        "id": 242353742,
        "sender_full_name": "Jubilee",
        "timestamp": 1623422045
    },
    {
        "content": "<p>that's in the middle for me</p>",
        "id": 242353821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623422082
    },
    {
        "content": "<p>it's not \"ancient\"</p>",
        "id": 242353836,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623422089
    },
    {
        "content": "<p>I will admit, … that might be recent enough that I coudl say “just remove vec too, and wait to see who complains.\"</p>",
        "id": 242353852,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623422100
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Badhoc.5D.202021-06-11.20unsound.20stdlib.20specialization.20and.201.2E53/near/242353693\">said</a>:</p>\n<blockquote>\n<p>(right, sorry, that was implicit in my reasoning above.)</p>\n</blockquote>\n<p>I agree with that reasoning. While I think it's important to resolve these issues, it does not seem urgent to do so in the 1.53 release for anything that hasn't changed in this release.</p>",
        "id": 242353856,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1623422101
    },
    {
        "content": "<p>it's not that hard for me to imagine a company updating their rust version every 6 months or so :)</p>",
        "id": 242353859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623422102
    },
    {
        "content": "<p>however, it's old enough that I think the reasoning is valid</p>",
        "id": 242353877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623422109
    },
    {
        "content": "<p>I feel like we're developing heuristics here that we should write down</p>",
        "id": 242353916,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623422127
    },
    {
        "content": "<p>we could remove vec only on nightlhy</p>",
        "id": 242353933,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623422134
    },
    {
        "content": "<p>speaking of which, let me catch up in the notes</p>",
        "id": 242353937,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623422136
    },
    {
        "content": "<p>not 1.53</p>",
        "id": 242353939,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623422138
    },
    {
        "content": "<p>seems more in line with our philosophy</p>",
        "id": 242353965,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623422156
    },
    {
        "content": "<p>(The other question is: whether to introduce a PR to revert the <code>Fuse</code> unsoundness, but I'm not sure if we're ready for that, I think we should have a \"motion\" for the other two )</p>",
        "id": 242354021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623422167
    },
    {
        "content": "<p>let me take some notes</p>",
        "id": 242354028,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623422170
    },
    {
        "content": "<p>since, if i understand correctly, this seems really hard to weaponize/run into accidentally</p>",
        "id": 242354036,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623422173
    },
    {
        "content": "<p>mm, I don't think it's that hard, imo.</p>",
        "id": 242354130,
        "sender_full_name": "Jubilee",
        "timestamp": 1623422206
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> interesting. Say more</p>",
        "id": 242354162,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623422222
    },
    {
        "content": "<p>I wrote this</p>",
        "id": 242354358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623422287
    },
    {
        "content": "<h3>Proposal</h3>\n<ul>\n<li>Backport<br>\n    * <a href=\"https://github.com/rust-lang/rust/issues/85975\">#85975</a><br>\n    * <a href=\"https://github.com/rust-lang/rust/issues/85874\">#85874</a>, the parts pertaining to <code>vec_deque</code> and <code>array</code></li>\n<li>Do not backport<br>\n    * the parts of <a href=\"https://github.com/rust-lang/rust/issues/85874\">#85874</a> that pertain to <code>Vec</code></li>\n<li>Why?<br>\n    * Backport immediate regressions that were introduced in 1.53<br>\n    * 1.48 was released in Nov 2020 and that is \"long enough ago\" that folks may be relying on the perf optimization<br>\n        * Q: How much perf are we talking about?<br>\n    * Assumption: this is hard to weaponize or run into accidentally<br>\n        * Q: Is this true?</li>\n</ul>",
        "id": 242354361,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623422287
    },
    {
        "content": "<p>I think this captures what <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> proposed and his reasoning, but there are a few \"Q\" involved</p>",
        "id": 242354428,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623422320
    },
    {
        "content": "<p>Well, I see a lot of the <code>zip</code> +/- <code>skip_while</code> and people using e.g. <code>map</code> instead of <code>inspect</code> for side effects, and Vec is <strong>the</strong> \"canonical\" collection to transform iterators into or from.</p>",
        "id": 242354453,
        "sender_full_name": "Jubilee",
        "timestamp": 1623422322
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> that applies to <a href=\"https://github.com/rust-lang/rust/issues/82303\">#82303</a> and <a href=\"https://github.com/rust-lang/rust/issues/85969\">#85969</a>, correct?</p>",
        "id": 242354520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623422350
    },
    {
        "content": "<p>I'm not sure that applies to <a href=\"https://github.com/rust-lang/rust/issues/85873\">#85873</a> and <a href=\"https://github.com/rust-lang/rust/issues/85863\">#85863</a>?</p>",
        "id": 242354538,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623422357
    },
    {
        "content": "<p>let me recheck...</p>",
        "id": 242354571,
        "sender_full_name": "Jubilee",
        "timestamp": 1623422373
    },
    {
        "content": "<p>I... <strong>think</strong> it applies to <a href=\"https://github.com/rust-lang/rust/issues/85873\">https://github.com/rust-lang/rust/issues/85873</a> but not the other one.</p>",
        "id": 242354730,
        "sender_full_name": "Jubilee",
        "timestamp": 1623422434
    },
    {
        "content": "<p>specifically you need to do some casts between <code>fn(&amp;)</code> and <code>fn(&amp;'x)</code></p>",
        "id": 242354738,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623422441
    },
    {
        "content": "<p>in order to trigger the unsoundnesses</p>",
        "id": 242354751,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623422449
    },
    {
        "content": "<p>hmm.</p>",
        "id": 242354759,
        "sender_full_name": "Jubilee",
        "timestamp": 1623422453
    },
    {
        "content": "<p>Part of my thinking for why this is hard to run into is that you need to be using HRTB … simple uses of <code>zip</code> and <code>Vec</code> shouldn’t hit it wihtout pulling in <code>fn</code></p>",
        "id": 242354761,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623422453
    },
    {
        "content": "<p>But</p>",
        "id": 242354766,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623422455
    },
    {
        "content": "<p>but but</p>",
        "id": 242354768,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623422456
    },
    {
        "content": "<p>didn’t <span class=\"user-mention\" data-user-id=\"280891\">@Frank Steffahn</span> say trait objects also expose it?</p>",
        "id": 242354783,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623422465
    },
    {
        "content": "<p>Yes, that makes sense that it would</p>",
        "id": 242354809,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623422481
    },
    {
        "content": "<p><code>Box&lt;dyn Fn(&amp;())&gt;</code> would apply equally well</p>",
        "id": 242354826,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623422490
    },
    {
        "content": "<p>AFAICT you <em>need</em> to use HRTB function pointers or trait objects to run into <em>observable</em> UB and use subtype coercion on a <code>Fuse&lt;some iterator conatining that HRTB type&gt;</code> or <code>Zip&lt;some iterator conatining that HRTB type&gt;</code>.</p>\n<p>The description of those issues again:</p>\n<blockquote>\n<p>Fuse&lt;T&gt; and Zip&lt;T, U&gt; have optimizations relying on specialization if their type parameters implement a trait (FusedIterator or TrustedRandomAccess, respectively).</p>\n<p>These optimizations fundamentally change the way the iterator operates.</p>\n<p>All type arguments are covariant. Coercing e.g. Fuse&lt;T&gt; to Fuse&lt;U&gt; if U is a subtype of T can “switch between” these fundamentally different ways of operation if T: !FusedIterator and U: FusedIterator which can bring the iterator into an invalid state that can cause UB; the same kind of problem exists for Zip.</p>\n<p>Specialization not differentiating between e.g. Foo&lt;'a&gt; and Foo&lt;'b&gt; made this issue harder to spot.<br>\nBut fn(&amp;()) (that is, for&lt;'a&gt; fn(&amp;'a ())) is a supertype of fn(&amp;'static ()) and those are entirely different types.</p>\n</blockquote>\n<p>The “Specialization not differentiating between e.g. Foo&lt;'a&gt; and Foo&lt;'b&gt;” point also makes weaponizing in a way that causes observable UB hard.</p>",
        "id": 242354828,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1623422494
    },
    {
        "content": "<p>yeah that was what I was thinking of... I definitely have seen \"I'd like to work with a vector of functions\" from even beginner Rust users.</p>",
        "id": 242354831,
        "sender_full_name": "Jubilee",
        "timestamp": 1623422496
    },
    {
        "content": "<p>ok</p>",
        "id": 242354845,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623422507
    },
    {
        "content": "<p>Yes, HRTB trait objects or function pointers both work</p>",
        "id": 242354850,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1623422510
    },
    {
        "content": "<p>even so, I’m having a hard time swallowing that adding up to “we must fix this in 1.53\"</p>",
        "id": 242354923,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623422536
    },
    {
        "content": "<p>I don't think it means that, no.</p>",
        "id": 242354934,
        "sender_full_name": "Jubilee",
        "timestamp": 1623422548
    },
    {
        "content": "<blockquote>\n<p>I feel like we're developing heuristics here that we should write down</p>\n</blockquote>\n<p>Related to that, I'm a bit wary in general of making quick decisions the week prior to a release. The last thing we want is to introduce some kind of accidental regression in the backport to resolve an issue which has been on stable for a while and then having to ship a <code>.1</code> release to fix it.</p>\n<p>For issues introduced in 1.53, I think it definitely makes sense to prevent them from hitting stable but for issues already on stable, I think the bar is a lot higher and that increases the closer we get to release.</p>",
        "id": 242354937,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1623422549
    },
    {
        "content": "<p>versus “we will roll out the fix, in 1.55-nightly\"</p>",
        "id": 242354950,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623422557
    },
    {
        "content": "<p>Yeah.</p>",
        "id": 242354957,
        "sender_full_name": "Jubilee",
        "timestamp": 1623422561
    },
    {
        "content": "<p>okay that sounds good to me</p>",
        "id": 242354981,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623422575
    },
    {
        "content": "<p>So do we have general support amongst those present</p>",
        "id": 242354995,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623422584
    },
    {
        "content": "<p>Users usually back slowly away from HRTBs, looking for the exit, in my observations.</p>",
        "id": 242355007,
        "sender_full_name": "Jubilee",
        "timestamp": 1623422592
    },
    {
        "content": "<blockquote>\n<p>I definitely have seen \"I'd like to work with a vector of functions\" from even beginner Rust users.</p>\n</blockquote>\n<p>but does the beginner then also create a <code>Fuse&lt;IntoIter&lt;fn(&amp;…)&gt;&gt;</code> run the iterator to depletion and then coerce it into <code>Fuse&lt;IntoIter&lt;fn(&amp;'a…)&gt;&gt;</code>?</p>\n<p><em>Edit:</em> Nevermind this wouldn’t even be unsound. You need to use the <code>fn</code> pointer type as a <em>type argument</em> to something that makes sure that the HRTB version <em>doesn’t</em> implement <code>Copy</code> and the non-HRTB one <em>does</em> implement `Copy!</p>",
        "id": 242355022,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1623422600
    },
    {
        "content": "<p>that we’ll back a 1.53-targetted backport of the removals of solely the impls introduced in 1.53</p>",
        "id": 242355036,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623422608
    },
    {
        "content": "<p>probably not. :D</p>",
        "id": 242355051,
        "sender_full_name": "Jubilee",
        "timestamp": 1623422617
    },
    {
        "content": "<p>and we will also have a mainline-targetted broader revert</p>",
        "id": 242355074,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623422631
    },
    {
        "content": "<p>that incldues vec</p>",
        "id": 242355084,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623422634
    },
    {
        "content": "<p>Yes, that seems reasonable to me.</p>",
        "id": 242355119,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1623422642
    },
    {
        "content": "<p>The Fuse question … we … should probably dedicate sepatate discussion time to?</p>",
        "id": 242355156,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623422651
    },
    {
        "content": "<p>since that is an actual breaking change if I understand correctly</p>",
        "id": 242355179,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623422662
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"280891\">Frank Steffahn</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Badhoc.5D.202021-06-11.20unsound.20stdlib.20specialization.20and.201.2E53/near/242355022\">said</a>:</p>\n<blockquote>\n<p>but does the beginner then also create a <code>Fuse&lt;IntoIter&lt;fn(&amp;…)&gt;&gt;</code> run the iterator to depletion and then coerce it into <code>Fuse&lt;IntoIter&lt;fn(&amp;'a…)&gt;&gt;</code>?</p>\n</blockquote>\n<p>yes, that's a good point. the bugs here are caused by invoking next some portion of the way under one impl and then \"changing horses\" to the other mid-stream. I think this is pretty unlikely to hit people in practice.</p>",
        "id": 242355240,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623422676
    },
    {
        "content": "<p>I only think the Zip stuff is Comparatively Big.</p>",
        "id": 242355248,
        "sender_full_name": "Jubilee",
        "timestamp": 1623422680
    },
    {
        "content": "<p>Okay great. I think we can say we’ve reached a decision then</p>",
        "id": 242355280,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623422698
    },
    {
        "content": "<p>In the 15 minutes remaining, I was hoping to go over the remainer of the agenda from yesterday</p>",
        "id": 242355315,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623422714
    },
    {
        "content": "<p>but … let me see who put their <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> up above</p>",
        "id": 242355337,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623422726
    },
    {
        "content": "<p>and yeah saying \"aye\".</p>",
        "id": 242355344,
        "sender_full_name": "Jubilee",
        "timestamp": 1623422731
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Badhoc.5D.202021-06-11.20unsound.20stdlib.20specialization.20and.201.2E53/near/242355280\">said</a>:</p>\n<blockquote>\n<p>Okay great. I think we can say we’ve reached a decision then</p>\n</blockquote>\n<p>wawit</p>",
        "id": 242355384,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623422753
    },
    {
        "content": "<p>I just want to be sure I know what it was :)</p>",
        "id": 242355395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623422760
    },
    {
        "content": "<h3>Proposal</h3>\n<ul>\n<li>Backport<br>\n    * <a href=\"https://github.com/rust-lang/rust/issues/85975\">#85975</a><br>\n    * <a href=\"https://github.com/rust-lang/rust/issues/85874\">#85874</a>, the parts pertaining to <code>vec_deque</code> and <code>array</code></li>\n<li>Do not backport<br>\n    * the parts of <a href=\"https://github.com/rust-lang/rust/issues/85874\">#85874</a> that pertain to <code>Vec</code></li>\n<li>Why?<br>\n    * Backport immediate regressions that were introduced in 1.53<br>\n    * 1.48 was released in Nov 2020 and that is \"long enough ago\" that folks may be relying on the perf optimization<br>\n        * Q: How much perf are we talking about?<br>\n    * Assumption: this is hard to weaponize or run into accidentally</li>\n</ul>",
        "id": 242355443,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623422766
    },
    {
        "content": "<p>okay fair enough</p>",
        "id": 242355444,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623422766
    },
    {
        "content": "<p>this?</p>",
        "id": 242355447,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623422767
    },
    {
        "content": "<p>I believe we agreed on that, yes</p>",
        "id": 242355506,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623422789
    },
    {
        "content": "<p>I just added</p>\n<ul>\n<li>Assumption: backporting with a week until release is high risk itself, so we should be minimal</li>\n</ul>",
        "id": 242355528,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623422797
    },
    {
        "content": "<p>Yes, that was what I was ayeing to.</p>",
        "id": 242355538,
        "sender_full_name": "Jubilee",
        "timestamp": 1623422804
    },
    {
        "content": "<p>and also</p>",
        "id": 242355541,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623422805
    },
    {
        "content": "<p>to capture <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span>'s point</p>",
        "id": 242355543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623422806
    },
    {
        "content": "<p>OK, great</p>",
        "id": 242355548,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623422810
    },
    {
        "content": "<p>that we would plan to actually land all of <a href=\"https://github.com/rust-lang/rust/issues/85874\">#85874</a></p>",
        "id": 242355553,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623422813
    },
    {
        "content": "<p>on mainline</p>",
        "id": 242355557,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623422815
    },
    {
        "content": "<p>but</p>",
        "id": 242355568,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623422821
    },
    {
        "content": "<p>I'm trying to structure the notes as \"here is the reasoning\" with sub-sections containing more details and choice comments</p>",
        "id": 242355579,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623422824
    },
    {
        "content": "<p>that’s not something that we really need to decide in this meeting anywauy</p>",
        "id": 242355586,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623422830
    },
    {
        "content": "<p>I more wanted to reassure <span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span></p>",
        "id": 242355618,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623422847
    },
    {
        "content": "<p>that we are <em>not</em> planning to outright discard the <code>Vec</code> change</p>",
        "id": 242355643,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623422858
    },
    {
        "content": "<p>I'm not worried. :^)</p>",
        "id": 242355661,
        "sender_full_name": "Jubilee",
        "timestamp": 1623422867
    },
    {
        "content": "<p>(we don't know what kind of perf impact we are talking about, but we just don't have that data right now, right?)</p>",
        "id": 242355662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623422867
    },
    {
        "content": "<p>That is true</p>",
        "id": 242355684,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623422877
    },
    {
        "content": "<p>that's a super challenging question to answer anyway</p>",
        "id": 242355687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623422880
    },
    {
        "content": "<p>ok</p>",
        "id": 242355689,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623422880
    },
    {
        "content": "<p>yep</p>",
        "id": 242355706,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623422882
    },
    {
        "content": "<p>(microbenchmarks? macrobenchmarks? etc)</p>",
        "id": 242355740,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623422888
    },
    {
        "content": "<p>we really need to invest in benchmarking</p>",
        "id": 242355751,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623422892
    },
    {
        "content": "<p>I don't think we need that data to make this call</p>",
        "id": 242355765,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623422901
    },
    {
        "content": "<p>of object code beyond the compiler itself</p>",
        "id": 242355771,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623422905
    },
    {
        "content": "<p>so I am happy</p>",
        "id": 242355772,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623422905
    },
    {
        "content": "<p>okay</p>",
        "id": 242355777,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623422908
    },
    {
        "content": "<p>so on the one hand</p>",
        "id": 242355792,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623422915
    },
    {
        "content": "<p>the T-compiler members present are <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> and <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span></p>",
        "id": 242355819,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623422928
    },
    {
        "content": "<p>I think there is one other implied part here</p>",
        "id": 242355821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623422933
    },
    {
        "content": "<p>based on the <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> ’s above</p>",
        "id": 242355823,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623422934
    },
    {
        "content": "<p>that we will not attempt to create a PR (or backport it) related to the <code>Fuse</code> changes</p>",
        "id": 242355843,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623422942
    },
    {
        "content": "<p>but it follows pretty directly from the reasoning</p>",
        "id": 242355864,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623422947
    },
    {
        "content": "<p>I'm going to add it to the consensus list :)</p>",
        "id": 242355873,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623422952
    },
    {
        "content": "<p>(we might want to do that on <em>master</em>, but it's not a backport priority)</p>",
        "id": 242355899,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623422968
    },
    {
        "content": "<h3>Consensus</h3>\n<ul>\n<li>Backport<br>\n    * <a href=\"https://github.com/rust-lang/rust/issues/85975\">#85975</a><br>\n    * <a href=\"https://github.com/rust-lang/rust/issues/85874\">#85874</a>, the parts pertaining to <code>vec_deque</code> and <code>array</code></li>\n<li>Do not backport<br>\n    * the parts of <a href=\"https://github.com/rust-lang/rust/issues/85874\">#85874</a> that pertain to <code>Vec</code><br>\n    * hypothetical future PRs that pertain to <code>Fuse</code> for <a href=\"https://github.com/rust-lang/rust/issues/85863\">#85863</a></li>\n</ul>",
        "id": 242356073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623423043
    },
    {
        "content": "<p>great</p>",
        "id": 242356091,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423053
    },
    {
        "content": "<p>I’m going to go through the mechanics of the remainder of the agenda</p>",
        "id": 242356134,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423082
    },
    {
        "content": "<p>if for no other reason than to force myself to look at it</p>",
        "id": 242356163,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423098
    },
    {
        "content": "<p>we had left off in the middle of the P-critical bugs</p>",
        "id": 242356277,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423140
    },
    {
        "content": "<p>I think yesterday we left around the <code>t-libs-impl</code> P-critical<br>\n<a href=\"https://hackmd.io/1NeIcqXERkug9KItmB1TwQ#P-critical\">https://hackmd.io/1NeIcqXERkug9KItmB1TwQ#P-critical</a></p>",
        "id": 242356278,
        "sender_full_name": "apiraino",
        "timestamp": 1623423140
    },
    {
        "content": "<p>right</p>",
        "id": 242356305,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423154
    },
    {
        "content": "<p>specifically</p>",
        "id": 242356320,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423161
    },
    {
        "content": "<p>next would be</p>",
        "id": 242356325,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423164
    },
    {
        "content": "<ul>\n<li>\"<code>lang_start</code> in std/src/rt.rs is unsound in presence of panic payload that panics on drop\" <a href=\"https://github.com/rust-lang/rust/issues/86030\">rust#86030</a><ul>\n<li>Unsoundness issue, <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> opened PR <a href=\"https://github.com/rust-lang/rust/pull/86034\">#86034</a>, waiting for review</li>\n</ul>\n</li>\n</ul>",
        "id": 242356332,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423164
    },
    {
        "content": "<p>this is not a regression, right <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> ?</p>",
        "id": 242356388,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423194
    },
    {
        "content": "<p>This is not a regression, no.</p>",
        "id": 242356416,
        "sender_full_name": "nagisa",
        "timestamp": 1623423213
    },
    {
        "content": "<p>okau</p>",
        "id": 242356425,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423217
    },
    {
        "content": "<p><code>nagisa</code> said this yesterday:</p>\n<blockquote>\n<p>Yeah, this \"UB\" is fairly obscure and in some ways one we imposed upon ourselves. In practice I think the actual behaviour is mild enough that there is no need to backport any changes to fix this issue.<br>\nI never beta-nominated the PR for that specific reason.</p>\n</blockquote>",
        "id": 242356436,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1623423225
    },
    {
        "content": "<p>it looks to me like you have it under control</p>",
        "id": 242356437,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423227
    },
    {
        "content": "<p>sounds great, okay</p>",
        "id": 242356444,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423231
    },
    {
        "content": "<p>lets keep moving</p>",
        "id": 242356451,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423235
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AP-critical+label%3AT-rustdoc\">T-rustdoc</a></p>\n<ul>\n<li>No <code>P-critical</code> issues for <code>T-rustdoc</code> this time.</li>\n</ul>",
        "id": 242356477,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423242
    },
    {
        "content": "<h3>P-high regressions</h3>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3Aregression-from-stable-to-beta+label%3AP-high+-label%3AT-infra+-label%3AT-libs+-label%3AT-release+-label%3AT-rustdoc+-label%3AT-core\">P-high beta regressions</a></p>\n<ul>\n<li>No <code>P-high</code> beta regressions this time.</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3Aregression-from-stable-to-nightly+label%3AP-high+no%3Aassignee+-label%3AT-infra+-label%3AT-libs+-label%3AT-release+-label%3AT-rustdoc+-label%3AT-core\">Unassigned P-high nightly regressions</a></p>\n<ul>\n<li>No unassigned <code>P-high</code> nightly regressions this time.</li>\n</ul>",
        "id": 242356510,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423249
    },
    {
        "content": "<h2>Performance logs</h2>\n<blockquote>\n<p><a href=\"https://github.com/rust-lang/rustc-perf/blob/master/triage/2021-06-08.md\">triage logs for 2021-06-08</a></p>\n</blockquote>\n<p>Some good improvements, and a few regressions. No large changes.</p>\n<p>Triage done by <strong>@simulacrum</strong>.</p>\n<p>3 Regressions, 3 Improvements, 1 Mixed<br>\n1 of them in rollups</p>",
        "id": 242356522,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423256
    },
    {
        "content": "<h4>Regressions</h4>\n<p>Always go through the expn_that_defined query. <a href=\"https://github.com/rust-lang/rust/issues/86002\">#86002</a></p>\n<ul>\n<li>Moderate regression in <a href=\"https://perf.rust-lang.org/compare.html?start=ac3e680193a3e11e60b07840ffb1db12793de110&amp;end=6c2dd251bbff03c7a3092d43fb5b637eca0810e3&amp;stat=instructions:u\">instruction counts</a> (up to 1.6% on <code>incr-patched: println</code> builds of <code>webrender-check</code>)</li>\n<li>Necessary for correctness, regresions largely limited to incremental.</li>\n</ul>\n<p>Add variance-related information to lifetime error messages <a href=\"https://github.com/rust-lang/rust/issues/85343\">#85343</a></p>\n<ul>\n<li>Moderate regression in <a href=\"https://perf.rust-lang.org/compare.html?start=5b638c1d3751b7ab31cac9739add516bdf39e10a&amp;end=35fff69d043b1c0f5c29894e7f4b0da8b039c131&amp;stat=instructions:u\">instruction counts</a> (up to 4.3% on <code>full</code> builds of <code>wg-grammar-check</code>)</li>\n<li>Seems to potentially be necessary, but difference from PR run suggests more<br>\n  can possibly be done to avoid some of the losses noted on the final merge.</li>\n</ul>\n<p>Revert \"Merge CrateDisambiguator into StableCrateId\" <a href=\"https://github.com/rust-lang/rust/issues/85891\">#85891</a></p>\n<ul>\n<li>Moderate regression in <a href=\"https://perf.rust-lang.org/compare.html?start=022720bfccd46400e69def42f4647fe4059ad951&amp;end=2312ff1a850db449b79fd3c4b215395cd2598c25&amp;stat=instructions:u\">instruction counts</a> (up to 4.9% on <code>full</code> builds of <code>html5ever-opt</code>)</li>\n<li>Reverted due to performance concerns on the original PR (<a href=\"https://github.com/rust-lang/rust/pull/85804\">#85804</a>), but does<br>\n  not seem to have recovered performance. Suggested path is to re-land but with<br>\n  measurements the original PR; potentially there are some performance<br>\n  improvements that can be done there as well.</li>\n</ul>",
        "id": 242356546,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423268
    },
    {
        "content": "<h4>Improvements</h4>\n<ul>\n<li>Remove CrateNum::ReservedForIncrCompCache <a href=\"https://github.com/rust-lang/rust/issues/85829\">#85829</a></li>\n<li>Only compute the trait map once <a href=\"https://github.com/rust-lang/rust/issues/85905\">#85905</a></li>\n<li>Miscellaneous inlining improvements <a href=\"https://github.com/rust-lang/rust/issues/85892\">#85892</a></li>\n</ul>",
        "id": 242356737,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423366
    },
    {
        "content": "<h4>Mixed</h4>\n<p>Rollup of 13 pull requests <a href=\"https://github.com/rust-lang/rust/issues/85952\">#85952</a></p>\n<ul>\n<li>Moderate improvement in <a href=\"https://perf.rust-lang.org/compare.html?start=016e9b5e33ef1407bffb575ec63d24241912556d&amp;end=a93699f20a433797a4b84787b9652300dd7b2ad2&amp;stat=instructions:u\">instruction counts</a> (up to -4.8% on <code>full</code> builds of <code>html5ever-opt</code>)</li>\n<li>Moderate regression in <a href=\"https://perf.rust-lang.org/compare.html?start=016e9b5e33ef1407bffb575ec63d24241912556d&amp;end=a93699f20a433797a4b84787b9652300dd7b2ad2&amp;stat=instructions:u\">instruction counts</a> (up to 2.9% on <code>incr-patched: println</code> builds of <code>cargo-opt</code>)</li>\n<li>Predominantly an improvement, some incremental regressions; does not appear<br>\n  worthwhile to investigate in depth the exact cause.</li>\n</ul>",
        "id": 242356752,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423374
    },
    {
        "content": "<h4>Nags requiring follow up</h4>\n<ul>\n<li>Follow up on regression in <a href=\"https://github.com/rust-lang/rust/pull/85343#issuecomment-856819536\">#85343</a></li>\n</ul>",
        "id": 242356761,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423380
    },
    {
        "content": "<h2>Nominated Issues</h2>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3AI-nominated+label%3AT-compiler\">T-compiler</a></p>",
        "id": 242356822,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423427
    },
    {
        "content": "<p>...</p>",
        "id": 242356852,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423445
    },
    {
        "content": "<p>I’m tempted to let the nominated issues wait until next week</p>",
        "id": 242356860,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423453
    },
    {
        "content": "<p>I guess I’ll just transcribe them here</p>",
        "id": 242356878,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423466
    },
    {
        "content": "<p>but leave all the nominated tags</p>",
        "id": 242356886,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423472
    },
    {
        "content": "<ul>\n<li>\"Generate links to definition in rustdoc source code pages\" <a href=\"https://github.com/rust-lang/rust/pull/84176\">rust#84176</a><ul>\n<li>opened by <span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span> </li>\n<li>Adds hyperlinks to navigate code in rustdoc</li>\n<li>no known blockers</li>\n<li>feature is <a href=\"https://github.com/rust-lang/rust/pull/84176#issuecomment-821026882\">nightly-only and disabled by default</a></li>\n<li>possibly a follow-up RFC to stabilize and enable it by default  </li>\n<li>PR has been reviewed by rustdoc team though final review won't happen soon; PR author asks if <code>T-compiler</code> can greenlight merge</li>\n</ul>\n</li>\n</ul>",
        "id": 242356889,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423474
    },
    {
        "content": "<p>(I'm here if you have questions)</p>",
        "id": 242356962,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1623423504
    },
    {
        "content": "<p>Hey there</p>",
        "id": 242356973,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423509
    },
    {
        "content": "<p>I do have a question</p>",
        "id": 242356984,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423513
    },
    {
        "content": "<p>what does “reviewed by team but final review won’t happen soon” mean?</p>",
        "id": 242357007,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423525
    },
    {
        "content": "<p>Does it mean: team members read or at least skimmed the change, but no one felt comforatble r+’ing it?</p>",
        "id": 242357032,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423542
    },
    {
        "content": "<p>Kinda like that</p>",
        "id": 242357078,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1623423561
    },
    {
        "content": "<p>Okay</p>",
        "id": 242357080,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423564
    },
    {
        "content": "<p>I just wanted to understand, thanks</p>",
        "id": 242357091,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423573
    },
    {
        "content": "<p>Is this something we could merge shortly after the beta is cut?</p>",
        "id": 242357133,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423599
    },
    {
        "content": "<p>it is ready, it has been for months</p>",
        "id": 242357196,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1623423609
    },
    {
        "content": "<p>it's disabled by default so no impact whatsoever</p>",
        "id": 242357216,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1623423622
    },
    {
        "content": "<p>in other words, take the risk of landing it, but do so in a way where it will have 12 weeks to bake instead of ...</p>",
        "id": 242357234,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423630
    },
    {
        "content": "<p>disabled by defualt</p>",
        "id": 242357242,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423634
    },
    {
        "content": "<p>wow, so the resistance to landing is not based on changes to observable behavior</p>",
        "id": 242357277,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423653
    },
    {
        "content": "<p>Is it more a question of whether the patch itself is up to the quality level you expect/desire?</p>",
        "id": 242357309,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423673
    },
    {
        "content": "<p>not really either :)</p>",
        "id": 242357325,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1623423681
    },
    {
        "content": "<p>:)</p>",
        "id": 242357340,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423692
    },
    {
        "content": "<p>Is the resistance just based on fear?</p>",
        "id": 242357353,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423698
    },
    {
        "content": "<p>the biggest problem is that Joshua doesn't have enough time to review it and won't before some time</p>",
        "id": 242357361,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1623423702
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Badhoc.5D.202021-06-11.20unsound.20stdlib.20specialization.20and.201.2E53/near/242357133\">said</a>:</p>\n<blockquote>\n<p>Is this something we could merge shortly after the beta is cut?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span> what would change if we push the merge slightly ?</p>",
        "id": 242357373,
        "sender_full_name": "apiraino",
        "timestamp": 1623423708
    },
    {
        "content": "<p>literally nothing</p>",
        "id": 242357395,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1623423719
    },
    {
        "content": "<p>This seems like a really cool feature ( <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span>) but also not something that we have to discuss today <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 242357544,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1623423762
    },
    {
        "content": "<p>(I mean: merge after the beta cut as <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> suggests)</p>",
        "id": 242357548,
        "sender_full_name": "apiraino",
        "timestamp": 1623423765
    },
    {
        "content": "<p>Right</p>",
        "id": 242357553,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423766
    },
    {
        "content": "<p>I was in part asking the questions</p>",
        "id": 242357560,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423771
    },
    {
        "content": "<p>because I am trying to understand places where organizatioanlly, our project is not functioning well</p>",
        "id": 242357594,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423785
    },
    {
        "content": "<p>and how we might change our own behaviors</p>",
        "id": 242357611,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423793
    },
    {
        "content": "<p>in rustdoc it's simply that members are \"specialized\"</p>",
        "id": 242357624,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1623423801
    },
    {
        "content": "<p>to allow for quicker movement, e.g. being more willing to take risks, especially on things that are readily revertible.</p>",
        "id": 242357668,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423822
    },
    {
        "content": "<p>and the members who can review this change aren't available and won't be until an unknown amount of time</p>",
        "id": 242357680,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1623423827
    },
    {
        "content": "<p>Gotcha</p>",
        "id": 242357688,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423830
    },
    {
        "content": "<p>okay that is useful</p>",
        "id": 242357694,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423834
    },
    {
        "content": "<p>Okay well there were two other nominated issues</p>",
        "id": 242357832,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423877
    },
    {
        "content": "<p>but we’ll get to them next week</p>",
        "id": 242357845,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423881
    },
    {
        "content": "<p>:)</p>",
        "id": 242357846,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423882
    },
    {
        "content": "<p>Thanks to everyone in <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span> for attending!</p>",
        "id": 242357868,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423891
    },
    {
        "content": "<p>One question :)</p>",
        "id": 242357887,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1623423897
    },
    {
        "content": "<p>what is the process then on the rustdoc PR? (you said after beta but not sure what it'll imply)</p>",
        "id": 242357942,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1623423922
    },
    {
        "content": "<p>Oh I don’t think we made a decision</p>",
        "id": 242357964,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423936
    },
    {
        "content": "<p>oh ok</p>",
        "id": 242357980,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1623423943
    },
    {
        "content": "<p>I know what I would personally do. :)</p>",
        "id": 242357987,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423945
    },
    {
        "content": "<p>well, ee you next week then I guess :)</p>",
        "id": 242357997,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1623423949
    },
    {
        "content": "<p>Great</p>",
        "id": 242358005,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423952
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Badhoc.5D.202021-06-11.20unsound.20stdlib.20specialization.20and.201.2E53/near/242357987\">said</a>:</p>\n<blockquote>\n<p>I know what I would personally do. :)</p>\n</blockquote>\n<p>oh? What? :)</p>",
        "id": 242358062,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1623423963
    },
    {
        "content": "<p>I think this change sounds like it has no observable effect and would be easy to revert if it caused problems</p>",
        "id": 242358093,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423985
    },
    {
        "content": "<p>and it adds a useful feature</p>",
        "id": 242358105,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423992
    },
    {
        "content": "<p>I understand ideas of code ownership</p>",
        "id": 242358125,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623423999
    },
    {
        "content": "<p>but I =think they are not serving us well here</p>",
        "id": 242358137,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623424007
    },
    {
        "content": "<p>more like no one feels confident about it enough? I'm not really sure</p>",
        "id": 242358180,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1623424025
    },
    {
        "content": "<p>it happened a few other times too</p>",
        "id": 242358189,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1623424031
    },
    {
        "content": "<p>what does confidence mean here?</p>",
        "id": 242358200,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623424040
    },
    {
        "content": "<p>confidence about wheher it might inject hidden bugs</p>",
        "id": 242358215,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623424048
    },
    {
        "content": "<p>or about whether it will disrupt the architecture of rustdoc?</p>",
        "id": 242358226,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623424056
    },
    {
        "content": "<p>We had a lot of unforeseen issues with rustdoc we're still dealing with. I think it's because of that mostly</p>",
        "id": 242358248,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1623424064
    },
    {
        "content": "<p>and make other changes harder?</p>",
        "id": 242358255,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623424067
    },
    {
        "content": "<p>No, this change is self-contained and almost doesn't interact with the rest of the code</p>",
        "id": 242358352,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1623424092
    },
    {
        "content": "<p>but it remains a big PR</p>",
        "id": 242358386,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1623424107
    },
    {
        "content": "<p>which is why we decided to disable it by default</p>",
        "id": 242358418,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1623424118
    },
    {
        "content": "<p>right</p>",
        "id": 242358429,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623424123
    },
    {
        "content": "<p>so then people can test it and if issues appear, they don't impact everyone</p>",
        "id": 242358454,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1623424139
    },
    {
        "content": "<p>I guess I’m being somewhat flippant</p>",
        "id": 242358458,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623424140
    },
    {
        "content": "<p>I think under our current processes, an analogously major change to rustc itself would have to go through the MCP process</p>",
        "id": 242358540,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623424168
    },
    {
        "content": "<p>but after it goes some buy-in from at least one team member</p>",
        "id": 242358580,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623424178
    },
    {
        "content": "<p>Well, I'm really confident about it, I spent a lot of time on it and I can literally explain what each line of change does haha</p>",
        "id": 242358581,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1623424179
    },
    {
        "content": "<p>it would be full-steam ahead</p>",
        "id": 242358588,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623424183
    },
    {
        "content": "<p>i.e. to enable experimental exploration</p>",
        "id": 242358686,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623424204
    },
    {
        "content": "<p>This one will need an MCP to get stabilized</p>",
        "id": 242358698,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1623424210
    },
    {
        "content": "<p>Okay</p>",
        "id": 242358716,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623424217
    },
    {
        "content": "<p>(it's unstable too, not only disabled by default)</p>",
        "id": 242358749,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1623424234
    },
    {
        "content": "<p>maybe that’s another aspect of my questions here</p>",
        "id": 242358800,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623424265
    },
    {
        "content": "<p>well anyway, thanks for looking into it, we can talk about it more next week :)</p>",
        "id": 242358813,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1623424272
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span> you say you’ve invested time in this thing, it sounds like you understand it 100%</p>",
        "id": 242358826,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623424281
    },
    {
        "content": "<p>yes</p>",
        "id": 242358853,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1623424294
    },
    {
        "content": "<p>so why don’t you have the authority to r+ it yourself, since the owner hasn’t had time?</p>",
        "id": 242358859,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623424296
    },
    {
        "content": "<p>Well, isn't it like not something to do to r+ your own PRs?</p>",
        "id": 242358942,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1623424318
    },
    {
        "content": "<p>Oh of course</p>",
        "id": 242359002,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623424328
    },
    {
        "content": "<p>sorry I missed that point</p>",
        "id": 242359012,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623424336
    },
    {
        "content": "<p>Okay then</p>",
        "id": 242359066,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623424367
    },
    {
        "content": "<p>otherwise yes, I would have merged it to test more extensively with other users once I confirmed locally I didn't detect any issues</p>",
        "id": 242359072,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1623424369
    },
    {
        "content": "<p>yeah you do need to get buy-in from some other team member</p>",
        "id": 242359082,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623424373
    },
    {
        "content": "<p>now I understand much better. Sorry for overlooking that first bullet in the summary</p>",
        "id": 242359106,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623424384
    },
    {
        "content": "<p>(I had thought it come from an another contributor)</p>",
        "id": 242359125,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623424392
    },
    {
        "content": "<p>the PR itself was approved (otherwise it'd be closed/rejected), just lacking reviewers</p>",
        "id": 242359199,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1623424429
    },
    {
        "content": "<p>Okay that’s the end of the meeting, thanks all for attending!</p>",
        "id": 242359222,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623424441
    },
    {
        "content": "<p>o/</p>",
        "id": 242359267,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1623424447
    },
    {
        "content": "<blockquote>\n<p>Q: How much perf are we talking about? – we don’t have that data</p>\n</blockquote>\n<p>The revert PR hasn't even received a perf.rlo run yet, that would be a good start to answer that question at least a little.<br>\nIt's probably just single-digit percents from those optimizations. LLVM 12 improved some pointer incrementing loops, so the optimizations might not even be as useful as they used to be.</p>",
        "id": 242359759,
        "sender_full_name": "The 8472",
        "timestamp": 1623424672
    }
]