[
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span>; the triage meeting will happen in about 1h<br>\n<em>WG-prioritization</em> has done pre-triage in <a class=\"stream\" data-stream-id=\"245100\" href=\"/#narrow/stream/245100-t-compiler.2Fwg-prioritization.2Falerts\">#t-compiler/wg-prioritization/alerts</a> and prepared the <a href=\"https://hackmd.io/xcnQ7SFaQlSzQTzZxfVfaw?view\">meeting agenda</a></p>\n<p>We will have checkins from:</p>\n<ul>\n<li>@_<em>WG-llvm</em> by <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> </li>\n<li>@_<em>T-compiler/WG-meta</em> by <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>   <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span>   <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span></li>\n</ul>",
        "id": 225993363,
        "sender_full_name": "apiraino",
        "timestamp": 1613051930
    },
    {
        "content": "<p>HackMD requires one to be signed in to edit <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>",
        "id": 225996879,
        "sender_full_name": "nagisa",
        "timestamp": 1613053253
    },
    {
        "content": "<p>There has been a bit of movement on the LLVM side:</p>\n<ul>\n<li>LLVM no longer assumes forward progress by default. This means that infinite loops, and more importantly, calls to functions with infinite loops, are no longer optimized away. This will fix <a href=\"https://github.com/rust-lang/rust/issues/28728\">#28728</a>.</li>\n<li>Known <code>noalias</code> related miscompiles have been fixed by the introduction of <code>@llvm.experimental.noalias.scope.decl</code> intrinsics. There might be more issues lurking here, but at least the previous blocker is resolved now. This will fix <a href=\"https://github.com/rust-lang/rust/issues/54878\">#54878</a>.</li>\n<li>Incorrect nowrap flags in LSR have been fixed. This will fix <a href=\"https://github.com/rust-lang/rust/issues/74498\">#74498</a>.</li>\n<li>fptoui.sat/fptosi.sat intrinsics for saturating float to int conversions have landed. However currently only X86 has optimized codegen. We may switch to these sometime in the future, over the current manual expansion we do.</li>\n<li>MemorySSA-based MemCpyOpt is not enabled by default yet. We can test it under a flag, but due to current pipeline positioning it will have a compile-time cost.</li>\n<li>LLVM has switched to the new pass manager by default just after the LLVM 12 cut. This means that we should probably make a serious effort towards making the switch as well, as upstream now only does minimal testing of the legacy pass manager. The new pass manager tends to be a bit faster but use more memory.</li>\n</ul>",
        "id": 225997555,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1613053543
    },
    {
        "content": "<ul>\n<li>There's a PR to <a href=\"https://github.com/rust-lang/rust/pull/81451\">upgrade to LLVM 12</a>. Nikita managed to resolve the issues that came up. There seem to be performance implications in this upgrade (see the task for timing runs).</li>\n</ul>",
        "id": 225998293,
        "sender_full_name": "nagisa",
        "timestamp": 1613053812
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133224\">Nikita Popov</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202021-02-11.20.2354818/near/225997555\">said</a>:</p>\n<blockquote>\n<ul>\n<li>LLVM no longer assumes forward progress by default. This means that infinite loops, and more importantly, calls to functions with infinite loops, are no longer optimized away. This will fix <a href=\"https://github.com/rust-lang/rust/issues/28728\">#28728</a>.</li>\n</ul>\n</blockquote>\n<p>This is so amazingly exciting. We've known about this since 2014, i.e. before 1.0 (see for example <a href=\"https://github.com/rust-lang/rust/issues/18785\">#18785</a>), but all our investigations indicated we couldn't effectively resolve it from the Rust side alone.</p>",
        "id": 225999182,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613054163
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202021-02-11.20.2354818/near/225996879\">said</a>:</p>\n<blockquote>\n<p>HackMD requires one to be signed in to edit :(</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span>   yes, that's by design (to avoid random vandalizing the agenda). Please feel free to copy the text here or send it to me, I'll update the agenda for the records</p>",
        "id": 225999688,
        "sender_full_name": "apiraino",
        "timestamp": 1613054392
    },
    {
        "content": "<p>(oh thanks <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>  for doing that)</p>",
        "id": 225999959,
        "sender_full_name": "apiraino",
        "timestamp": 1613054510
    },
    {
        "content": "<p>(It was me adding the edits, I just transcribed what Nikita posted above.)</p>",
        "id": 226000035,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613054530
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> does wg-meta have anything to report in their update this week?</p>",
        "id": 226002225,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613055418
    },
    {
        "content": "<p>I'm not aware of much going on with wg-meta at the moment.</p>",
        "id": 226002333,
        "sender_full_name": "davidtwco",
        "timestamp": 1613055469
    },
    {
        "content": "<p>not that I know of, if I'm not wrong the group has been inactive</p>",
        "id": 226002421,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1613055486
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> may know better</p>",
        "id": 226002465,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1613055503
    },
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span> ! Meeting is starting now! post a <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> to show that you are here</p>",
        "id": 226003038,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613055698
    },
    {
        "content": "<p>Lets start off with 10 minutes for </p>\n<h2>Announcements</h2>",
        "id": 226003151,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613055726
    },
    {
        "content": "<ul>\n<li><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> Today, release stable 1.50 <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <a href=\"https://blog.rust-lang.org/2021/02/11/Rust-1.50.0.html\">blog link</a></li>\n</ul>",
        "id": 226003167,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613055733
    },
    {
        "content": "<p>it's already out!</p>",
        "id": 226003229,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1613055753
    },
    {
        "content": "<ul>\n<li><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> and <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> met regarding perf triage and <a href=\"http://perf.rust-lang.org\">perf.rust-lang.org</a>. <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> wants to suggest that for any PR that touches something under <code>compiler/</code>, have rustbot post comment suggesting that they consider a rust-timer run (and include the syntax for the invocation). Feedback?</li>\n</ul>",
        "id": 226003308,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613055790
    },
    {
        "content": "<p>(Feedback here can include \"that should be posted as an MCP\". I wasn't sure it warranted one.)</p>",
        "id": 226003395,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613055818
    },
    {
        "content": "<p>That sounds... Heavy handed.</p>",
        "id": 226003431,
        "sender_full_name": "Esteban KÃ¼ber",
        "timestamp": 1613055833
    },
    {
        "content": "<p>Yeah I'd rather just... start queueing them automatically then :)</p>",
        "id": 226003504,
        "sender_full_name": "simulacrum",
        "timestamp": 1613055852
    },
    {
        "content": "<p>well, we'd need some review I guess</p>",
        "id": 226003530,
        "sender_full_name": "simulacrum",
        "timestamp": 1613055862
    },
    {
        "content": "<p>or never rollup?</p>",
        "id": 226003561,
        "sender_full_name": "tm",
        "timestamp": 1613055874
    },
    {
        "content": "<p>unfortunately I don't think \"never rollup\" is  a realistic option in the near term</p>",
        "id": 226003604,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613055892
    },
    {
        "content": "<p>I'd love for us to get to a fast enough bootstrap + test that we could abandon rollups</p>",
        "id": 226003643,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613055909
    },
    {
        "content": "<p>but I don't think its realistic to expect that to happen</p>",
        "id": 226003671,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613055920
    },
    {
        "content": "<p>at least not this year, probably not next three years</p>",
        "id": 226003706,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613055934
    },
    {
        "content": "<p>Okay so it sounds like feedback here is negative, glad I asked. :)</p>",
        "id": 226003915,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613056001
    },
    {
        "content": "<p>We can run perf after the fact? After a roll-up is identified as problematic, just run perf on all of its prs</p>",
        "id": 226003967,
        "sender_full_name": "Esteban KÃ¼ber",
        "timestamp": 1613056019
    },
    {
        "content": "<p>(I guess an MCP with rationale may be helpful)</p>",
        "id": 226003972,
        "sender_full_name": "simulacrum",
        "timestamp": 1613056022
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119031\">Esteban KÃ¼ber</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202021-02-11.20.2354818/near/226003967\">said</a>:</p>\n<blockquote>\n<p>We can run perf after the fact? After a roll-up is identified as problematic, just run perf on all of its prs</p>\n</blockquote>\n<p>I was wondering about that: Can you run perf after the fact? Not if the person deleted their branch, no?</p>",
        "id": 226004014,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613056041
    },
    {
        "content": "<p>you definitely can, we just don't support that today</p>",
        "id": 226004037,
        "sender_full_name": "simulacrum",
        "timestamp": 1613056054
    },
    {
        "content": "<p>No idea, but sounds solvable</p>",
        "id": 226004051,
        "sender_full_name": "Esteban KÃ¼ber",
        "timestamp": 1613056059
    },
    {
        "content": "<p>(or at least not well)</p>",
        "id": 226004056,
        "sender_full_name": "simulacrum",
        "timestamp": 1613056061
    },
    {
        "content": "<p>probably best not to get into that right now though</p>",
        "id": 226004088,
        "sender_full_name": "simulacrum",
        "timestamp": 1613056077
    },
    {
        "content": "<p>Another option would be to do perf-runs on all the PR's in a rollup</p>",
        "id": 226004091,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613056079
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202021-02-11.20.2354818/near/226004014\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"119031\">Esteban KÃ¼ber</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202021-02-11.20.2354818/near/226003967\">said</a>:</p>\n<blockquote>\n<p>We can run perf after the fact? After a roll-up is identified as problematic, just run perf on all of its prs</p>\n</blockquote>\n<p>I was wondering about that: Can you run perf after the fact? Not if the person deleted their branch, no?</p>\n</blockquote>\n<p>GitHub does keep a branch for the PR I think?</p>",
        "id": 226004143,
        "sender_full_name": "LÃ©o Lanteri Thauvin",
        "timestamp": 1613056085
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202021-02-11.20.2354818/near/226004091\">said</a>:</p>\n<blockquote>\n<p>Another option would be to do perf-runs on all the PR's in a rollup</p>\n</blockquote>\n<p>does perf.rlo have the capacity for that?</p>",
        "id": 226004163,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613056098
    },
    {
        "content": "<p>I've been told we don't have much space even for new benchmarks</p>",
        "id": 226004178,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613056109
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"255061\">LÃ©o Lanteri Thauvin</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202021-02-11.20.2354818/near/226004143\">said</a>:</p>\n<blockquote>\n<p>GitHub does keep a branch for the PR I think?</p>\n</blockquote>\n<p>All I know is that the commit links in (past) <a href=\"http://perf.rust-lang.org\">perf.rust-lang.org</a> output  are sometimes non-existent</p>",
        "id": 226004229,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613056138
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202021-02-11.20.2354818/near/226004178\">said</a>:</p>\n<blockquote>\n<p>I've been told we don't have much space even for new benchmarks</p>\n</blockquote>\n<p>This is another thing I'm not clear about. <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> told me at some point recently that the perf runs are cheap.</p>",
        "id": 226004293,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613056172
    },
    {
        "content": "<p>(I'm sure I'm misrepresenting what <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span>  actually said to me.)</p>",
        "id": 226004398,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613056207
    },
    {
        "content": "<p>I guess I'm not clear - I don't think we can settle this in the 1-2 minutes we have right now, I'd prefer that we do it async so I can have time if I need to explain these things, so I can go gather stats and such.</p>",
        "id": 226004423,
        "sender_full_name": "simulacrum",
        "timestamp": 1613056222
    },
    {
        "content": "<p>okay</p>",
        "id": 226004431,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613056229
    },
    {
        "content": "<p>I think not allowing rollups on PRs that touch something in <code>compiler/</code> is something we should consider. Most rollup PRs are largely outside that directory and every problematic rollup PR I've seen has been through touching something in <code>compiler/</code></p>",
        "id": 226004433,
        "sender_full_name": "rylev",
        "timestamp": 1613056232
    },
    {
        "content": "<p>(interesting thought)</p>",
        "id": 226004456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613056247
    },
    {
        "content": "<p>that's a super interesting idea</p>",
        "id": 226004474,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613056255
    },
    {
        "content": "<p>(but we can discuss this in <a class=\"stream\" data-stream-id=\"247081\" href=\"/#narrow/stream/247081-t-compiler.2Fperformance\">#t-compiler/performance</a> and present findings at the next meeting or open an MCP)</p>",
        "id": 226004529,
        "sender_full_name": "rylev",
        "timestamp": 1613056278
    },
    {
        "content": "<p>Is <em>that</em> worthy of an MCP?</p>",
        "id": 226004535,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613056280
    },
    {
        "content": "<p>(yes)</p>",
        "id": 226004541,
        "sender_full_name": "simulacrum",
        "timestamp": 1613056287
    },
    {
        "content": "<p>it definitely would need communication</p>",
        "id": 226004542,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613056287
    },
    {
        "content": "<p>okay. <span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> how about you write that up as an MCP?</p>",
        "id": 226004566,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613056298
    },
    {
        "content": "<p>speaking of which ...</p>",
        "id": 226004582,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613056308
    },
    {
        "content": "<h3>[FM]CP status</h3>",
        "id": 226004585,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613056313
    },
    {
        "content": "<ul>\n<li>New MCPs (take a look, see if you like them!)<ul>\n<li>No new proposals this time.</li>\n</ul>\n</li>\n</ul>",
        "id": 226004600,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613056319
    },
    {
        "content": "<ul>\n<li>Old MCPs (not seconded, take a look)<ul>\n<li>\"MCP: More Cranelift-friendly portable SIMD intrinsics\" <a href=\"https://github.com/rust-lang/compiler-team/issues/381\">compiler-team#381</a></li>\n<li>\"Debuggable Macro Expansions\" <a href=\"https://github.com/rust-lang/compiler-team/issues/386\">compiler-team#386</a></li>\n<li>\"Move query implementation outside rustc_middle\" <a href=\"https://github.com/rust-lang/compiler-team/issues/388\">compiler-team#388</a></li>\n<li>\"Uplift the <code>invalid_atomic_ordering</code> lint from clippy to rustc\" <a href=\"https://github.com/rust-lang/compiler-team/issues/390\">compiler-team#390</a></li>\n<li>\"Staged queries\" <a href=\"https://github.com/rust-lang/compiler-team/issues/391\">compiler-team#391</a></li>\n<li>\"Do not traverse the HIR to generate metadata\" <a href=\"https://github.com/rust-lang/compiler-team/issues/392\">compiler-team#392</a></li>\n<li>\"Embed version numbers in backport nominations and regression labels\" <a href=\"https://github.com/rust-lang/compiler-team/issues/393\">compiler-team#393</a></li>\n<li>\"Add different entry points for x.py\" <a href=\"https://github.com/rust-lang/compiler-team/issues/396\">compiler-team#396</a></li>\n<li>\"rustdoc is using rustc_ast_pretty, would it be possible to make it somewhat \"stable\"?\" <a href=\"https://github.com/rust-lang/compiler-team/issues/403\">compiler-team#403</a></li>\n</ul>\n</li>\n</ul>",
        "id": 226004643,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613056328
    },
    {
        "content": "<ul>\n<li>Pending FCP requests (check your boxes!)<ul>\n<li>\"Demote x86_64-rumprun-netbsd target\" <a href=\"https://github.com/rust-lang/rust/issues/81514\">rust#81514</a></li>\n</ul>\n</li>\n</ul>",
        "id": 226004659,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613056336
    },
    {
        "content": "<ul>\n<li>Things in FCP (make sure you're good with it)<ul>\n<li>\"Distribute rustc_codegen_cranelift as rustup component\" <a href=\"https://github.com/rust-lang/compiler-team/issues/405\">compiler-team#405</a></li>\n</ul>\n</li>\n</ul>",
        "id": 226004687,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613056352
    },
    {
        "content": "<ul>\n<li>Accepted MCPs<ul>\n<li>\"Add a <code>NOOP_METHOD_CALL</code> lint for methods which should never be directly called\" <a href=\"https://github.com/rust-lang/compiler-team/issues/375\">compiler-team#375</a></li>\n<li>\"refactor the unsafe checking to work on the THIR\" <a href=\"https://github.com/rust-lang/compiler-team/issues/402\">compiler-team#402</a></li>\n</ul>\n</li>\n</ul>",
        "id": 226004743,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613056380
    },
    {
        "content": "<ul>\n<li>Finalized FCPs (disposition merge)<ul>\n<li>\"Tracking Issue for <code>partition_point</code>\" <a href=\"https://github.com/rust-lang/rust/issues/73831\">rust#73831</a></li>\n<li>\"Tracking Issue for fmt::Arguments::as_str()\" <a href=\"https://github.com/rust-lang/rust/issues/74442\">rust#74442</a></li>\n<li>\"Tracking Issue for feature(int_bits_const): &lt;integer&gt;::BITS\" <a href=\"https://github.com/rust-lang/rust/issues/76904\">rust#76904</a></li>\n<li>\"Implement io::Seek for io::Empty\" <a href=\"https://github.com/rust-lang/rust/pull/78044\">rust#78044</a></li>\n<li>\"Stabilize Arc::{increment,decrement}_strong_count\" <a href=\"https://github.com/rust-lang/rust/pull/79285\">rust#79285</a></li>\n<li>\"Rename Iterator::fold_first to reduce and stabilize it\" <a href=\"https://github.com/rust-lang/rust/pull/79805\">rust#79805</a></li>\n<li>\"Stabilize <code>peekable_next_if</code>\" <a href=\"https://github.com/rust-lang/rust/pull/80011\">rust#80011</a></li>\n<li>\"stabilise <code>cargo test -- --include-ignored</code>\" <a href=\"https://github.com/rust-lang/rust/pull/80053\">rust#80053</a></li>\n<li>\"Implement missing <code>AsMut&lt;str&gt;</code> for <code>str</code>\" <a href=\"https://github.com/rust-lang/rust/pull/80279\">rust#80279</a></li>\n<li>\"Stabilize by-value <code>[T; N]</code> iterator <code>core::array::IntoIter</code>\" <a href=\"https://github.com/rust-lang/rust/pull/80470\">rust#80470</a></li>\n<li>\"Add Box::downcast() for dyn Any + Send + Sync\" <a href=\"https://github.com/rust-lang/rust/pull/80945\">rust#80945</a></li>\n<li>\"Stabilize remaining integer methods as <code>const fn</code>\" <a href=\"https://github.com/rust-lang/rust/pull/80962\">rust#80962</a></li>\n<li>\"Stabilize <code>core::slice::fill_with</code>\" <a href=\"https://github.com/rust-lang/rust/pull/81048\">rust#81048</a></li>\n<li>\"Remove requirement that forces symmetric and transitive PartialEq impls to exist\" <a href=\"https://github.com/rust-lang/rust/pull/81198\">rust#81198</a></li>\n<li>\"libtest: allow multiple filters\" <a href=\"https://github.com/rust-lang/rust/pull/81356\">rust#81356</a></li>\n</ul>\n</li>\n</ul>",
        "id": 226004770,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613056391
    },
    {
        "content": "<h3>WG checkins</h3>",
        "id": 226004801,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613056407
    },
    {
        "content": "<p>(This was posted up above in this topic, but I'm excited enough about it that I'm going  to post it again.)</p>",
        "id": 226004834,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613056426
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1176\">@WG-llvm</span> by <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> and <span class=\"user-mention\" data-user-id=\"133224\">@Nikita Popov</span>:</p>\n<blockquote>\n<p>There has been a bit of movement on the LLVM side:</p>\n<ul>\n<li>LLVM no longer assumes forward progress by default. This means that infinite loops, and more importantly, calls to functions with infinite loops, are no longer optimized away. This will fix <a href=\"https://github.com/rust-lang/rust/issues/28728\">#28728</a>.</li>\n<li>Known <code>noalias</code> related miscompiles have been fixed by the introduction of <code>@llvm.experimental.noalias.scope.decl</code> intrinsics. There might be more issues lurking here, but at least the previous blocker is resolved now. This will fix <a href=\"https://github.com/rust-lang/rust/issues/54878\">#54878</a>.</li>\n<li>Incorrect nowrap flags in LSR have been fixed. This will fix <a href=\"https://github.com/rust-lang/rust/issues/74498\">#74498</a>.</li>\n<li>fptoui.sat/fptosi.sat intrinsics for saturating float to int conversions have landed. However currently only X86 has optimized codegen. We may switch to these sometime in the future.</li>\n<li>MemorySSA-based MemCpyOpt is not enabled by default yet. We can test it under a flag, but due to current pipeline positioning it will have a compile-time cost.</li>\n<li>LLVM has switched to the new pass manager by default just after the LLVM 12 cut. This means that we should probably make a serious effort towards making the switch as well, as upstream now only does minimal testing of the legacy pass manager.</li>\n<li>There's a PR to <a href=\"https://github.com/rust-lang/rust/pull/81451\">upgrade to LLVM 12</a>. Nikita managed to resolve the issues that came up. There seem to be performance implications in this upgrade (see the task for timing runs).</li>\n</ul>\n</blockquote>",
        "id": 226004847,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613056434
    },
    {
        "content": "<p>oh no, formatting !</p>",
        "id": 226004861,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613056441
    },
    {
        "content": "<p>woah!</p>",
        "id": 226004865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613056442
    },
    {
        "content": "<p>While I personally am excited about the LSR fix, based on my on aborted attempts to fix that myself</p>",
        "id": 226005052,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613056513
    },
    {
        "content": "<p>I am more excited about the infinite loops =&gt; UB fix</p>",
        "id": 226005099,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613056530
    },
    {
        "content": "<p>I was just reading over the recent coments on <a href=\"https://github.com/rust-lang/rust/issues/28728\">#28728</a> and thinking that we needed to do something to fix the most egregious cases</p>",
        "id": 226005302,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613056585
    },
    {
        "content": "<p>I'll be very happy if it gets fixed on its own</p>",
        "id": 226005327,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613056597
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1095\">@T-compiler/WG-meta</span> by <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> , <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> and <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span></p>",
        "id": 226005331,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613056598
    },
    {
        "content": "<p>No update-- I think this group is inactive</p>",
        "id": 226005358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613056607
    },
    {
        "content": "<p>reports that the group has been inactive</p>",
        "id": 226005364,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613056609
    },
    {
        "content": "<p>and since stepping back from leadership role, I'd be inclined to step back from that too</p>",
        "id": 226005388,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613056621
    },
    {
        "content": "<p>but <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> you have been having thoughts on team structure, no?</p>",
        "id": 226005415,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613056631
    },
    {
        "content": "<p>I do have thoughts:)</p>",
        "id": 226005429,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613056636
    },
    {
        "content": "<p>Is that not worthy of trying to get wg-meta to push on?</p>",
        "id": 226005454,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613056645
    },
    {
        "content": "<p>that I still think would be a good thing for us to do</p>",
        "id": 226005464,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613056649
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202021-02-11.20.2354818/near/226005302\">said</a>:</p>\n<blockquote>\n<p>I was just reading over the recent coments on <a href=\"https://github.com/rust-lang/rust/issues/28728\">#28728</a> and thinking that we needed to do something to fix the most egregious cases</p>\n</blockquote>\n<p>We already do some things in rustc to migitage the most prominent examples. And we'll need to continue doing so until the lowest supported LLVM version is whatever the fix gets released with (12?)</p>",
        "id": 226005471,
        "sender_full_name": "nagisa",
        "timestamp": 1613056653
    },
    {
        "content": "<p>I'd love to work with someone on that</p>",
        "id": 226005482,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613056656
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202021-02-11.20.2354818/near/226005302\">said</a>:</p>\n<blockquote>\n<p>I was just reading over the recent coments on <a href=\"https://github.com/rust-lang/rust/issues/28728\">#28728</a> and thinking that we needed to do something to fix the most egregious cases</p>\n</blockquote>\n<p>we did fix the trivial loop {} case, at least</p>",
        "id": 226005484,
        "sender_full_name": "simulacrum",
        "timestamp": 1613056659
    },
    {
        "content": "<p>that's not the case I was worried about</p>",
        "id": 226005498,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613056667
    },
    {
        "content": "<p>it was the <code>(0..).sum()</code> case</p>",
        "id": 226005515,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613056674
    },
    {
        "content": "<p>but I imagine we could mitigate it if we wanted</p>",
        "id": 226005528,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613056681
    },
    {
        "content": "<p>doesn't seem very hard</p>",
        "id": 226005594,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613056690
    },
    {
        "content": "<p>I imagine that'll be a good motivation to to quickly bump the lowest supported llvm version up <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 226005616,
        "sender_full_name": "nagisa",
        "timestamp": 1613056700
    },
    {
        "content": "<p>in any case it does sound like it will get resolved on its own</p>",
        "id": 226005620,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613056702
    },
    {
        "content": "<p>(I'd sort of expect the fix for <code>loop{}</code> to have fixed that too, but I guess we were <em>very</em> narrow about it?)</p>",
        "id": 226005643,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613056712
    },
    {
        "content": "<p>its just a matter of how quickly we can make the bump happen</p>",
        "id": 226005664,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613056723
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202021-02-11.20.2354818/near/226005482\">said</a>:</p>\n<blockquote>\n<p>I'd love to work with someone on that</p>\n</blockquote>\n<p>hint hint :)</p>",
        "id": 226005730,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613056747
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202021-02-11.20.2354818/near/226005616\">said</a>:</p>\n<blockquote>\n<p>I imagine that'll be a good motivation to to quickly bump the lowest supported llvm version up :)</p>\n</blockquote>\n<p>is bumping the <em>lowest supported</em> truly necessary?</p>",
        "id": 226005816,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613056776
    },
    {
        "content": "<p>versus just documenting in a clear manner that a number of our soundness guarantees require an up-to-date LLVM?</p>",
        "id": 226005865,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613056798
    },
    {
        "content": "<p>well anyway we don't have to get into that here</p>",
        "id": 226005998,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613056831
    },
    {
        "content": "<h2>Beta-nominations</h2>",
        "id": 226006009,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613056837
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Abeta-nominated+-label%3Abeta-accepted+label%3AT-compiler\">T-compiler</a></p>",
        "id": 226006018,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613056843
    },
    {
        "content": "<ul>\n<li>\"parser: Fix panic in 'const impl' recovery\" <a href=\"https://github.com/rust-lang/rust/pull/81876\">rust#81876</a><ul>\n<li>opened by <span class=\"user-mention\" data-user-id=\"119169\">@osa1</span></li>\n<li>reviewed by <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> </li>\n<li>fixes <a href=\"https://github.com/rust-lang/rust/issues/81806\">rust#81806</a>, a <code>P-medium</code> ICE on an invalid 'const' keyword parsing</li>\n</ul>\n</li>\n</ul>",
        "id": 226006030,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613056848
    },
    {
        "content": "<p>does anyone know offhand if this kind of handling is necessary a lot in the parser?</p>",
        "id": 226006349,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613056987
    },
    {
        "content": "<p>in the sense that use of <code>?</code> is an anti-pattern there?</p>",
        "id": 226006363,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613056993
    },
    {
        "content": "<p>That pattern has grown over time. I don't think it is yet prevalent but we might want to make it</p>",
        "id": 226006459,
        "sender_full_name": "Esteban KÃ¼ber",
        "timestamp": 1613057034
    },
    {
        "content": "<p>Or maybe the generatlized <code>Try</code> operator could be used to make <code>?</code> automatically cancel?</p>",
        "id": 226006565,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613057061
    },
    {
        "content": "<p>maybe that's a bad/impossible idea</p>",
        "id": 226006588,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613057071
    },
    {
        "content": "<p>anyway</p>",
        "id": 226006592,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613057074
    },
    {
        "content": "<p>It requires human intervention</p>",
        "id": 226006600,
        "sender_full_name": "Esteban KÃ¼ber",
        "timestamp": 1613057076
    },
    {
        "content": "<p>Okay</p>",
        "id": 226006612,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613057081
    },
    {
        "content": "<p>It has to be determined on a case by case basis</p>",
        "id": 226006626,
        "sender_full_name": "Esteban KÃ¼ber",
        "timestamp": 1613057086
    },
    {
        "content": "<p>Maybe changing PResult to have 3 states would help...</p>",
        "id": 226006684,
        "sender_full_name": "Esteban KÃ¼ber",
        "timestamp": 1613057108
    },
    {
        "content": "<p>anyway! Backport approved</p>",
        "id": 226006716,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613057122
    },
    {
        "content": "<p>(sorry, won't detail the convo)</p>",
        "id": 226006719,
        "sender_full_name": "Esteban KÃ¼ber",
        "timestamp": 1613057123
    },
    {
        "content": "<p>No i\"M the one who asked</p>",
        "id": 226006749,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613057133
    },
    {
        "content": "<p>so I can't fault you for filling me in. :)</p>",
        "id": 226006768,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613057141
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Abeta-nominated+-label%3Abeta-accepted+label%3AT-libs-impl\">T-libs-impl</a></p>\n<ul>\n<li>No beta nominations for <code>T-libs-impl</code> this time.</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Abeta-nominated+-label%3Abeta-accepted+label%3AT-rustdoc\">T-rustdoc</a></p>\n<ul>\n<li>No beta nominations for <code>T-rustdoc</code> this time.</li>\n</ul>",
        "id": 226006816,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613057159
    },
    {
        "content": "<h2>Stable-nominations</h2>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Astable-nominated+-label%3Astable-accepted+label%3AT-compiler\">T-compiler</a></p>\n<ul>\n<li>No stable nominations for <code>T-compiler</code> this time.</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Astable-nominated+-label%3Astable-accepted+label%3AT-libs-impl\">T-libs-impl</a></p>\n<ul>\n<li>No stable nominations for <code>T-libs-impl</code> this time.</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Astable-nominated+-label%3Astable-accepted+label%3AT-rustdoc\">T-rustdoc</a></p>\n<ul>\n<li>No stable nominations for <code>T-rustdoc</code> this time.</li>\n</ul>",
        "id": 226006882,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613057167
    },
    {
        "content": "<h2>PRs S-waiting-on-team</h2>\n<p><a href=\"https://github.com/rust-lang/rust/pulls?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AS-waiting-on-team+label%3AT-compiler\">T-compiler</a></p>\n<ul>\n<li>No PRs waiting on <code>T-compiler</code> this time.</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/pulls?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AS-waiting-on-team+label%3AT-libs-impl\">T-libs-impl</a></p>\n<ul>\n<li>No PRs waiting on <code>T-libs-impl</code> this time.</li>\n</ul>",
        "id": 226006906,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613057177
    },
    {
        "content": "<h2>Issues of Note</h2>\n<h3>Short Summary</h3>\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3AT-compiler+label%3AP-critical\">0 T-compiler P-critical issues</a><ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3AT-compiler+label%3AP-critical+no%3Aassignee\">0 of those are unassigned</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3AT-compiler+label%3AP-high\">66 T-compiler P-high issues</a><ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3AT-compiler+label%3AP-high+no%3Aassignee\">41 of those are unassigned</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/rust-lang/rust/labels/regression-from-stable-to-beta\">0 P-critical, 2 P-high, 1 P-medium, 0 P-low regression-from-stable-to-beta</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/labels/regression-from-stable-to-nightly\">0 P-critical, 2 P-high, 3 P-medium, 0 P-low regression-from-stable-to-nightly</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/labels/regression-from-stable-to-stable\">0 P-critical, 38 P-high, 88 P-medium, 10 P-low regression-from-stable-to-stable</a></li>\n</ul>",
        "id": 226006918,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613057183
    },
    {
        "content": "<h3>P-critical</h3>\n<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AP-critical+label%3AT-compiler\">T-compiler</a></p>\n<ul>\n<li>No <code>P-critical</code> issues for <code>T-compiler</code> this time.</li>\n</ul>",
        "id": 226006938,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613057188
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AP-critical+label%3AT-libs-impl\">T-libs-impl</a></p>\n<ul>\n<li>\"File implementation on Windows has unsound methods\" <a href=\"https://github.com/rust-lang/rust/issues/81357\">rust#81357</a><ul>\n<li>assigned to <span class=\"user-mention\" data-user-id=\"274471\">@Arlie Davis</span></li>\n<li>Note: following <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-12-31.20.2354818/near/221297038\">suggestion</a>, this issue has been downgrated to <code>P-high</code></li>\n</ul>\n</li>\n</ul>",
        "id": 226006958,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613057195
    },
    {
        "content": "<p>do we think this is going to be addressed?</p>",
        "id": 226007064,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613057241
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202021-02-11.20.2354818/near/226006938\">said</a>:</p>\n<blockquote>\n<h3>P-critical</h3>\n<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AP-critical+label%3AT-compiler\">T-compiler</a></p>\n<ul>\n<li>No <code>P-critical</code> issues for <code>T-compiler</code> this time.</li>\n</ul>\n</blockquote>\n<p>err well - <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> may not be in order, WG-prioritization downgraded a P-critical to a P-high because of the release</p>",
        "id": 226007088,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613057253
    },
    {
        "content": "<p>Well</p>",
        "id": 226007136,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613057267
    },
    {
        "content": "<p>the way I think about it</p>",
        "id": 226007140,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613057270
    },
    {
        "content": "<p>it wasn't a release blocker</p>",
        "id": 226007157,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613057276
    },
    {
        "content": "<p>so by definition it cannot have been P-critical</p>",
        "id": 226007174,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613057282
    },
    {
        "content": "<p><code>abort</code> as a solution here makes me uncomfortable.</p>",
        "id": 226007282,
        "sender_full_name": "nagisa",
        "timestamp": 1613057313
    },
    {
        "content": "<p>but I don't see any other options.</p>",
        "id": 226007319,
        "sender_full_name": "nagisa",
        "timestamp": 1613057327
    },
    {
        "content": "<p>abort as a solution to what?</p>",
        "id": 226007455,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613057384
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/81357\">#81357</a></p>",
        "id": 226007533,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613057404
    },
    {
        "content": "<p>To the windows IO_OVERLAPPING issue.</p>\n<p>This makes me wonder. if I catch the illegal instruction/abort signal (or its windows equivalent) and handle that somehow, keeping the program aliveâ¦ wouldn't that effectively break a bunch of these <code>aborts</code> for soundness instances?</p>",
        "id": 226007632,
        "sender_full_name": "nagisa",
        "timestamp": 1613057436
    },
    {
        "content": "<blockquote>\n<h2>seek_read</h2>\n<p>There are multiple ways to fix <code>seek_read</code>. The options I can think of: if <code>ReadFile</code> fails with <code>ERROR_IO_PENDING</code>:<br>\n1. Call <code>GetOverlappedResult()</code> in a loop until it succeeds or fails with something other than <code>ERROR_IO_INCOMPLETE</code>, or;<br>\n2. Call <code>GetOverlappedResult()</code> once. If this fails with <code>ERROR_IO_INCOMPLETE</code>, call <code>abort()</code>, or;<br>\n3. Call <code>abort()</code>.</p>\n</blockquote>\n<p>(From description for <a href=\"https://github.com/rust-lang/rust/issues/81357\">#81357</a>)</p>",
        "id": 226007681,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613057453
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202021-02-11.20.2354818/near/226007632\">said</a>:</p>\n<blockquote>\n<p>To the windows IO_OVERLAPPING issue.</p>\n<p>This makes me wonder. if I catch the illegal instruction/abort signal (or its windows equivalent) and handle that somehow, keeping the program aliveâ¦ wouldn't that effectively break a bunch of these <code>aborts</code> for soundness instances?</p>\n</blockquote>\n<p>is signal handling covered by Rust's soundness guarantee?</p>",
        "id": 226007718,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613057471
    },
    {
        "content": "<p>I don't think rust can track async-safety, it will let you use <code>!Sync</code> types in a signal handler</p>",
        "id": 226007756,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613057490
    },
    {
        "content": "<p>I don't know, but it does sounds like it'd be broadly incompatible to do something like this, safe or unsafe.</p>",
        "id": 226007781,
        "sender_full_name": "nagisa",
        "timestamp": 1613057500
    },
    {
        "content": "<p>you have to use <code>unsafe</code> to make the syscall anyway</p>",
        "id": 226007797,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613057505
    },
    {
        "content": "<p>its something we haven't attempted to address</p>",
        "id": 226007829,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613057516
    },
    {
        "content": "<p>see e.g. <a href=\"https://github.com/rust-lang/rust/pull/17673\">https://github.com/rust-lang/rust/pull/17673</a></p>",
        "id": 226007997,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613057563
    },
    {
        "content": "<p>I've forgotten how to count to that low a PR number</p>",
        "id": 226008132,
        "sender_full_name": "Esteban KÃ¼ber",
        "timestamp": 1613057610
    },
    {
        "content": "<p>but then again, rust-cli  documents how to do signal handling: <a href=\"https://rust-cli.github.io/book/in-depth/signals.html\">https://rust-cli.github.io/book/in-depth/signals.html</a></p>",
        "id": 226008161,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613057624
    },
    {
        "content": "<p>so what do I know</p>",
        "id": 226008187,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613057630
    },
    {
        "content": "<p><em>anyway</em></p>",
        "id": 226008305,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613057660
    },
    {
        "content": "<p>I think we've generally considered signal handling \"out of scope\"</p>",
        "id": 226008308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613057661
    },
    {
        "content": "<p>it looks like we'll keep our eye on <a href=\"https://github.com/rust-lang/rust/issues/81357\">rust#81357</a></p>",
        "id": 226008370,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613057684
    },
    {
        "content": "<p>but we won't try to e.g. reassign it to someone else yet</p>",
        "id": 226008409,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613057695
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AP-critical+label%3AT-rustdoc\">T-rustdoc</a></p>\n<ul>\n<li>No <code>P-critical</code> issues for <code>T-rustdoc</code> this time.</li>\n</ul>",
        "id": 226008447,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613057706
    },
    {
        "content": "<h3>P-high regressions</h3>",
        "id": 226008462,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613057711
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3Aregression-from-stable-to-beta+label%3AP-high\">P-high beta regressions</a></p>",
        "id": 226008479,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613057717
    },
    {
        "content": "<p>(which are now all stable regressions, though their github labels may not reflect that yet)</p>",
        "id": 226008540,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613057737
    },
    {
        "content": "<ul>\n<li>\"Cross-compiling Rust to s390x yields a faulty toolchain\" <a href=\"https://github.com/rust-lang/rust/issues/80810\">rust#80810</a><ul>\n<li>Opened by <a href=\"https://github.com/Jakob-Naucke\">Jakob-Naucke</a></li>\n<li>previously discussed, assigned to <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span></li>\n<li>Note: this issue is up for grab for anyone willing to follow it up</li>\n<li>seems to affect specifically s390x or to be related to endianess</li>\n<li>Issue not yet completely clear, could be checked against PR <a href=\"https://github.com/rust-lang/rust/pull/80732\">#80732</a> (not ready for merge yet)</li>\n</ul>\n</li>\n</ul>",
        "id": 226008573,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613057748
    },
    {
        "content": "<p>I at least tried to fire up Docker this morning to look at this</p>",
        "id": 226008662,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613057766
    },
    {
        "content": "<blockquote>\n<p>Issue not yet completely clear, could be checked against PR <a href=\"https://github.com/rust-lang/rust/issues/80732\">#80732</a> (not ready for merge yet)</p>\n</blockquote>\n<p>this seems out of date, that PR was merged</p>",
        "id": 226008699,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613057783
    },
    {
        "content": "<p>(and I'm unclear how it's related)</p>",
        "id": 226008715,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613057789
    },
    {
        "content": "<p>and discovered that I didn't <em>have</em> docker on my big rig desktop. <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 226008722,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613057791
    },
    {
        "content": "<p>its only related in the sense that I think it \"fixed\" the bug, or papered over it</p>",
        "id": 226008755,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613057806
    },
    {
        "content": "<p>or at least, I think the issue author confirmed that a branch with <a href=\"https://github.com/rust-lang/rust/issues/80732\">#80732</a> (or an earlier version of <a href=\"https://github.com/rust-lang/rust/issues/80732\">#80732</a>) fixed the s390x issue.</p>",
        "id": 226008828,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613057834
    },
    {
        "content": "<p>so its <em>possible</em> we could consider beta-nominating (and even stable-nominating) PR <a href=\"https://github.com/rust-lang/rust/issues/80732\">#80732</a></p>",
        "id": 226008873,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613057852
    },
    {
        "content": "<p>but I suspect it wouldn't get approved.</p>",
        "id": 226008895,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613057858
    },
    {
        "content": "<p>based on s390x being tier2</p>",
        "id": 226008927,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613057869
    },
    {
        "content": "<p>I am hoping to still look at it a bit today</p>",
        "id": 226009003,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613057884
    },
    {
        "content": "<p>we'll see</p>",
        "id": 226009022,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613057886
    },
    {
        "content": "<ul>\n<li>\"regression 1.50: Duplicate symbol linker error\" <a href=\"https://github.com/rust-lang/rust/issues/80951\">rust#80951</a><ul>\n<li>opened by <span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> </li>\n<li>regression on crate <a href=\"https://github.com/devrandom/utxo-oracle\">utxo-oracle</a> that compiled on 1.49 (see <a href=\"https://crater-reports.s3.amazonaws.com/beta-1.50-1/beta-2021-01-01/gh/devrandom.utxo-oracle/log.txt\">logs</a>)</li>\n<li><span class=\"user-mention\" data-user-id=\"280891\">@Frank Steffahn</span> adds that <a href=\"https://github.com/rust-lang/rust/issues/80951#issuecomment-768602173\">doesn't look like a genuine regression</a></li>\n</ul>\n</li>\n</ul>",
        "id": 226009066,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613057896
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202021-02-11.20.2354818/near/226008573\">said</a>:</p>\n<blockquote>\n<ul>\n<li>\"Cross-compiling Rust to s390x yields a faulty toolchain\" <a href=\"https://github.com/rust-lang/rust/issues/80810\">rust#80810</a><ul>\n<li>Opened by <a href=\"https://github.com/Jakob-Naucke\">Jakob-Naucke</a></li>\n<li>previously discussed, assigned to <span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span></li>\n<li>Note: this issue is up for grab for anyone willing to follow it up</li>\n<li>seems to affect specifically s390x or to be related to endianess</li>\n<li>Issue not yet completely clear, could be checked against PR <a href=\"https://github.com/rust-lang/rust/pull/80732\">#80732</a> (not ready for merge yet)</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>cc <span class=\"user-mention\" data-user-id=\"360752\">@Ariadne Conill</span> who is working on a s390x musl port</p>",
        "id": 226009101,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613057910
    },
    {
        "content": "<p>we talked a bit about <a href=\"https://github.com/rust-lang/rust/issues/80951\">#80951</a> last week as well</p>",
        "id": 226009171,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613057933
    },
    {
        "content": "<p>one observation is that, for some reason, there was some dependence on the channel (as in <code>channel = \"beta\"</code>) setting in the reproduction process</p>",
        "id": 226009445,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613058013
    },
    {
        "content": "<p>in particular, <span class=\"user-mention\" data-user-id=\"280891\">@Frank Steffahn</span> said that it didn't reproduce for them when they changed the channel to \"stable\" for 1.50</p>",
        "id": 226009563,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613058063
    },
    {
        "content": "<p>so its possible this is a bug, but it isn't going to be a stable-to-stable regressions</p>",
        "id": 226009609,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613058078
    },
    {
        "content": "<p>just a sign of something wrong somewhere</p>",
        "id": 226009621,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613058082
    },
    {
        "content": "<p>and <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> has previously hypothesized that it is an instance of building and linking two different versions of the same crate</p>",
        "id": 226009769,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613058128
    },
    {
        "content": "<p>That's what I saw when I tried to repro this locally</p>",
        "id": 226009826,
        "sender_full_name": "nagisa",
        "timestamp": 1613058153
    },
    {
        "content": "<p>And the duplicate crate was some <code>-sys</code> crate, with a <code>#[no_mangle]</code> symbol in it or something along those lines.</p>",
        "id": 226009912,
        "sender_full_name": "nagisa",
        "timestamp": 1613058190
    },
    {
        "content": "<p>okay</p>",
        "id": 226009931,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613058197
    },
    {
        "content": "<p>I still wonder if we could be doing a better job here</p>",
        "id": 226009986,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613058215
    },
    {
        "content": "<p>of tracking enough meta-data so that the compiler itself could tell you about these problems</p>",
        "id": 226010098,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613058250
    },
    {
        "content": "<p>rather than hitting obscure linker errors at such a late stage</p>",
        "id": 226010120,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613058259
    },
    {
        "content": "<p>I suppose I would have to dive into the actual structure of the crate graph in question before I could evaluate if that's a reasonable suggestion for dealing with this</p>",
        "id": 226010303,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613058307
    },
    {
        "content": "<p>beyond ideas like that, is there anything to do here?  Are we going to keep hitting this in our crater runs in the future if we don't do something now to change these names?</p>",
        "id": 226010440,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613058357
    },
    {
        "content": "<p>I'm going to leave this at P-high and unassigned</p>",
        "id": 226010569,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613058388
    },
    {
        "content": "<p>well, it's possible to blacklist the crate on crater</p>",
        "id": 226010594,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613058400
    },
    {
        "content": "<p>but I guess I'd like to get a better idea if we're realistically going to take action, or if we should just close the ticket</p>",
        "id": 226010609,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613058406
    },
    {
        "content": "<p>I don't know if that's your question though - are you asking if other crates will run into similar errors?</p>",
        "id": 226010637,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613058417
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202021-02-11.20.2354818/near/226010594\">said</a>:</p>\n<blockquote>\n<p>well, it's possible to blacklist the crate on crater</p>\n</blockquote>\n<p>oh, that wasn't something I considered. hmm.</p>",
        "id": 226010695,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613058441
    },
    {
        "content": "<p>anyway lets move along</p>",
        "id": 226010713,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613058449
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3Aregression-from-stable-to-nightly+label%3AP-high+no%3Aassignee\">Unassigned P-high nightly regressions</a></p>\n<ul>\n<li>No unassigned <code>P-high</code> nightly regressions this time.</li>\n</ul>",
        "id": 226010733,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613058458
    },
    {
        "content": "<h2>Performance logs</h2>\n<blockquote>\n<p><a href=\"https://github.com/rust-lang/rustc-perf/blob/master/triage/2021-02-09.md\">2021-02-09 full triage logs</a></p>\n</blockquote>\n<p>A week of more regressions than improvements with one fairly large regression in <code>incr-patched</code> benchmarks introduced in a rollup. Performance regressions introduced in rollups have been a source of headache lately and something the performance team is looking to improve in the future. </p>\n<p>Triage done by <strong>@rylev</strong>.</p>",
        "id": 226010763,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613058465
    },
    {
        "content": "<p>5 Regressions, 2 Improvements, 1 Mixed<br>\n2 of them in rollups</p>",
        "id": 226010786,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613058472
    },
    {
        "content": "<h4>Regressions</h4>\n<p>Rollup of 11 pull requests <a href=\"https://github.com/rust-lang/rust/issues/81660\">#81660</a></p>\n<ul>\n<li>Very large regression in <a href=\"https://perf.rust-lang.org/compare.html?start=f6cb45ad01a4518f615926f39801996622f46179&amp;end=a3ed564c130ec3f19e933a9ea31faca5a717ce91&amp;stat=instructions:u\">instruction counts</a> (up to 33.1% on <code>incr-patched: println</code> builds of <code>cargo-check</code>)</li>\n<li>A huge performance regression in a rollup which should not happen. This seems to be happening in <code>incr-patched</code> benchmarks in the <code>typeck</code> and <code>evaluate_obligation</code>.</li>\n<li>This points towards to <a href=\"https://github.com/rust-lang/rust/pull/80629\">#80629</a> as being the most likely culprit.</li>\n</ul>\n<p>Add a new ABI to support cmse_nonsecure_call <a href=\"https://github.com/rust-lang/rust/issues/81346\">#81346</a></p>\n<ul>\n<li>Moderate regression in <a href=\"https://perf.rust-lang.org/compare.html?start=e6a0f3cdf3801394a53ffa42683385d94b02c772&amp;end=b593389edbaa9ea0c90f0ed419283842f534e50a&amp;stat=instructions:u\">instruction counts</a> (up to 1.9% on <code>full</code> builds of <code>deeply-nested-async-check</code>)</li>\n<li>Adding support for an additional ABI shouldn't have performance implications on rustc. Perhaps this just happens to be noise, but it's hard to tell.</li>\n</ul>\n<p>Identify unreachable subpatterns more reliably <a href=\"https://github.com/rust-lang/rust/issues/80632\">#80632</a></p>\n<ul>\n<li>Moderate regression in <a href=\"https://perf.rust-lang.org/compare.html?start=5a5f3a980c0d2afd55f2162300339471378e341f&amp;end=36ecbc94eb6be90bc38b2d0fdd4bfac3f34d9923&amp;stat=instructions:u\">instruction counts</a> (up to 1.2% on <code>full</code> builds of <code>match-stress-enum-check</code>)</li>\n<li>This is a regression in a benchmark specifically for pattern match which is impacted by this change. The <a href=\"https://perf.rust-lang.org/detailed-query.html?commit=36ecbc94eb6be90bc38b2d0fdd4bfac3f34d9923&amp;base_commit=5a5f3a980c0d2afd55f2162300339471378e341f&amp;benchmark=match-stress-enum-check&amp;run_name=full\"><code>check match</code></a> query was responsible for the regression.</li>\n<li>Interestingly, a <a href=\"https://perf.rust-lang.org/compare.html?start=fde692739576089729885b7f79aa2232cb9778c5&amp;end=6e126cb311d93b2142d8eae09719d614926e04b7\">performance run</a> was done on this change during review which did not show the regressions seen here.</li>\n</ul>\n<p>expand/resolve: Turn <code>#[derive]</code> into a regular macro attribute <a href=\"https://github.com/rust-lang/rust/issues/79078\">#79078</a></p>\n<ul>\n<li>Moderate regression in <a href=\"https://perf.rust-lang.org/compare.html?start=36ecbc94eb6be90bc38b2d0fdd4bfac3f34d9923&amp;end=9778068cbc1e06cc3685422323ff38a2f397de26&amp;stat=instructions:u\">instruction counts</a> (up to 1.3% on <code>incr-unchanged</code> builds of <code>derive-check</code>)</li>\n<li>This largely seems to be impacting <code>incr-unchanged</code> benchmarks particularly in the <code>expand_crate</code> and <code>late_resolve_crate</code> queries, and it's happening mostly in stress benchmarks. The only \"real\" code base impacted this is <code>style-servo-check</code> at 1.0% for <code>incr-unchanged</code>.</li>\n</ul>\n<p>Use ufcs in derive(Debug) <a href=\"https://github.com/rust-lang/rust/issues/81294\">#81294</a></p>\n<ul>\n<li>Moderate improvement in <a href=\"https://perf.rust-lang.org/compare.html?start=6ad11e2e25919b75ebbc36d7910f2a1126a7e873&amp;end=186f7ae5b04d31d8ccd1746ac63cdf1ab4bc2354&amp;stat=instructions:u\">instruction counts</a> (up to -3.3% on <code>incr-patched: println</code> builds of <code>cargo-opt</code>)</li>\n<li>Moderate regression in <a href=\"https://perf.rust-lang.org/compare.html?start=6ad11e2e25919b75ebbc36d7910f2a1126a7e873&amp;end=186f7ae5b04d31d8ccd1746ac63cdf1ab4bc2354&amp;stat=instructions:u\">instruction counts</a> (up to 3.3% on <code>full</code> builds of <code>style-servo-check</code>)</li>\n<li>This was originally labeled as a \"mixed\" result, but this is largely a perf regression with only a few improvements. </li>\n<li>This is a correctness fix so it's possible that we'll need to eat any performance regressions.</li>\n<li>There is a PR <a href=\"https://github.com/rust-lang/rust/pull/81760\">open</a> to try to address the fact that more MIR is produced, but this doesn't seem to have a positive impact on <a href=\"https://perf.rust-lang.org/compare.html?start=822ebfd2c43fbe466da8ae34ffe3ce6cba2e8336&amp;end=d589fc7d554c7ecdab26eb7ae07fd6dc7e8280f7\">perf</a>.</li>\n</ul>",
        "id": 226010852,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613058484
    },
    {
        "content": "<h4>Improvements</h4>\n<ul>\n<li>Rollup of 14 pull requests <a href=\"https://github.com/rust-lang/rust/issues/81678\">#81678</a></li>\n<li>Revert 78373 (\"dont leak return value after panic in drop\") <a href=\"https://github.com/rust-lang/rust/issues/81257\">#81257</a></li>\n</ul>",
        "id": 226010892,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613058498
    },
    {
        "content": "<h4>Mixed</h4>\n<ul>\n<li>Fix derived PartialOrd operators  <a href=\"https://github.com/rust-lang/rust/issues/81384\">#81384</a></li>\n</ul>",
        "id": 226010905,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613058504
    },
    {
        "content": "<h4>Nags requiring follow up</h4>\n<ul>\n<li>Waiting on more investigation in <a href=\"https://github.com/rust-lang/rust/issues/81476\">#81476</a>.</li>\n<li>Need to follow up on the regressions reported this week.</li>\n</ul>",
        "id": 226010979,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613058527
    },
    {
        "content": "<blockquote>\n<p>This points towards to <a href=\"https://github.com/rust-lang/rust/issues/80629\">#80629</a> as being the most likely culprit.</p>\n</blockquote>\n<p>This I think serves as a great example of why @rylev's suggestion of just not allowing <code>compiler/</code> PRs in rollups could be good</p>",
        "id": 226011156,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613058597
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/80629\">#80629</a> is a lint, preparing people for a future migration</p>",
        "id": 226011304,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613058637
    },
    {
        "content": "<p>I can understand why something would put into a rollup, in terms of seeming low risk</p>",
        "id": 226011363,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613058655
    },
    {
        "content": "<p>but I'm also totally unsurprised that it made the compiler run significantly more expensive (at least in instruction counts)</p>",
        "id": 226011416,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613058672
    },
    {
        "content": "<h2>Nominated Issues</h2>",
        "id": 226011566,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613058718
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3AI-nominated+label%3AT-compiler\">T-compiler</a></p>\n<ul>\n<li>No nominated issues for <code>T-compiler</code> this time.</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3AI-nominated+label%3AT-libs-impl\">T-libs-impl</a></p>\n<ul>\n<li>No nominated issues for <code>T-libs-impl</code> this time.</li>\n</ul>",
        "id": 226011588,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613058723
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rfcs/issues?q=is%3Aopen+label%3AI-nominated+label%3AT-compiler\">RFC</a></p>\n<ul>\n<li>\"RFC: Checking conditional compilation at compile time\" <a href=\"https://github.com/rust-lang/rfcs/pull/3013\">rfcs#3013</a><ul>\n<li><a href=\"https://github.com/rust-lang/rfcs/pull/3013#pullrequestreview-568757930\">review by</a> by <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> </li>\n<li>RFC author implemented suggestions, waiting for feedback</li>\n</ul>\n</li>\n</ul>",
        "id": 226011640,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613058728
    },
    {
        "content": "<p>okay everyone</p>",
        "id": 226011651,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613058732
    },
    {
        "content": "<p>we've got 8 minutes left</p>",
        "id": 226011661,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613058736
    },
    {
        "content": "<p>lets spend it talking about <a href=\"https://github.com/rust-lang/rfcs/pull/3013\">rfcs#3013</a></p>",
        "id": 226011675,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613058742
    },
    {
        "content": "<p>its an opt-in feature: no change if user doesn't enable it</p>",
        "id": 226011783,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613058784
    },
    {
        "content": "<p>Is it something we might want to consider enabling in rust2021 by default?</p>",
        "id": 226011955,
        "sender_full_name": "nagisa",
        "timestamp": 1613058844
    },
    {
        "content": "<p>and it tries to alert you if you either 1. use an unknown name in a <code>#[cfg(..)]</code> or <code>cfg!(..)</code>, and 2. checks key-value pairs for \"well-known\" cfg inputs.</p>",
        "id": 226012019,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613058877
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202021-02-11.20.2354818/near/226011955\">said</a>:</p>\n<blockquote>\n<p>Is it something we might want to consider enabling in rust2021 by default?</p>\n</blockquote>\n<p>this is interesting; it might be too late, but maybe not</p>",
        "id": 226012055,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613058894
    },
    {
        "content": "<p>I guess if we get it implemented in the next month or two</p>",
        "id": 226012117,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613058919
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> was suggesting all the implementation be done by ~late march I think</p>",
        "id": 226012147,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613058931
    },
    {
        "content": "<p>so there should still be time</p>",
        "id": 226012157,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613058935
    },
    {
        "content": "<p><a href=\"https://docs.google.com/spreadsheets/d/1chZ2SL9T444nvU9al1kQ7TJMwC3IVQQV2xIv1HWGQ_k/edit?usp=drive_web&amp;ouid=116720734632510156368\">2021 edition tracking document</a></p>",
        "id": 226012204,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613058959
    },
    {
        "content": "<p>all features impl'd on nightly: 2021-05-01</p>",
        "id": 226012291,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613058977
    },
    {
        "content": "<p>I'm not sure if/how this is an edition thing</p>",
        "id": 226012316,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613058989
    },
    {
        "content": "<p>is it just warnings?</p>",
        "id": 226012352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613059001
    },
    {
        "content": "<p>heh. While I understand why the \"Key\" (aka Legend) is its own tab, it definiktely led me astray when I saw the \"XXX somebody write this\"</p>",
        "id": 226012376,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613059008
    },
    {
        "content": "<p>heh</p>",
        "id": 226012419,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613059024
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yeah I think its just warnings</p>",
        "id": 226012424,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613059027
    },
    {
        "content": "<p>ok.</p>",
        "id": 226012433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613059032
    },
    {
        "content": "<p>you think we could just turn it on for all editions?</p>",
        "id": 226012442,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613059037
    },
    {
        "content": "<p>it's relatively low priority then</p>",
        "id": 226012443,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613059037
    },
    {
        "content": "<p>I think we could potentially</p>",
        "id": 226012472,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613059048
    },
    {
        "content": "<p>we could also phase it in with the edition</p>",
        "id": 226012479,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613059052
    },
    {
        "content": "<p>right</p>",
        "id": 226012488,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613059056
    },
    {
        "content": "<p>but it doesn't require migration</p>",
        "id": 226012496,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613059061
    },
    {
        "content": "<p>I can see both sides of that</p>",
        "id": 226012505,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613059063
    },
    {
        "content": "<p>As <span class=\"user-mention\" data-user-id=\"274471\">@Arlie Davis</span> mentions in the RFC thread, there's two pieces to this RFC: a mechanism that rustc uses to generate the lints and policy which is generated by whatever is driving rustc. </p>\n<p>The rustc changes are two new flags that provide a way to describe what <code>--cfg</code> names are valid and what values for those names are valid. By default, if these flags are not specified, nothing changes. </p>\n<p>The policy that is also being proposed in the RFC is that cargo would begin passing the flag to let rustc know what feature values are valid based on the <code>Cargo.toml</code> file. In the future, we could potentially handle more cases such as <code>build.rs</code> files setting <code>--cfg</code> flags but the starting point would be the set of valid <code>feature</code>s.</p>",
        "id": 226012523,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1613059068
    },
    {
        "content": "<p>so it's relatively low risk and unscary</p>",
        "id": 226012529,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613059071
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> is the idea re <code>build.rs</code> that the build script might further <em>restrict</em> the set of valid inputs?</p>",
        "id": 226012721,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613059126
    },
    {
        "content": "<p>(I cannot see how it could expand the set, so it must mean restriction alone, right?)</p>",
        "id": 226012763,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613059143
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202021-02-11.20.2354818/near/226012442\">said</a>:</p>\n<blockquote>\n<p>you think we could just turn it on for all editions?</p>\n</blockquote>\n<p>(I don't think it's top priority right now, but my take would be: phase in with the new edition, and then later for all editions, a la nll)</p>",
        "id": 226012846,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613059175
    },
    {
        "content": "<p>Yes, in the sense that if the <code>build.rs</code> script specifies custom <code>--cfg</code> flags then it could also tell what the complete set of those flags are, what their valid values are, etc. which would allow rustc to warn on things beyond just <code>feature</code>.</p>",
        "id": 226012850,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1613059177
    },
    {
        "content": "<p>okay. so far my inclination is to go ahead and @fcp merge this puppy</p>",
        "id": 226012938,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613059197
    },
    {
        "content": "<p>I'm going to do that now in fact.</p>",
        "id": 226013025,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613059207
    },
    {
        "content": "<p>I believe there's a mention of having default policy for some of the \"well known\" cfgs like <code>test</code> and such.</p>",
        "id": 226013054,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1613059212
    },
    {
        "content": "<p>I'm inclined to merge, my only question is -- is this \"compiler\" or \"cargo\" or both?</p>",
        "id": 226013093,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613059218
    },
    {
        "content": "<p>I didn't check what the Teams on it are</p>",
        "id": 226013121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613059222
    },
    {
        "content": "<p>its tagged with both</p>",
        "id": 226013144,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613059226
    },
    {
        "content": "<p>It looks well motivated to me though</p>",
        "id": 226013149,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613059226
    },
    {
        "content": "<p>As it's currently written, it's both.</p>",
        "id": 226013163,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1613059228
    },
    {
        "content": "<p>sounds good, then I am happy</p>",
        "id": 226013215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613059235
    },
    {
        "content": "<p>everyone here, go check off your boxes now!</p>",
        "id": 226013251,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613059240
    },
    {
        "content": "<p>(shoot I meant to say that with still a minute remaining. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> )</p>",
        "id": 226013335,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613059254
    },
    {
        "content": "<p>Anyway, thank you to everyone in <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span>  for attending the meeting! Stay safe, stay virtually close, and don't be afraid of needles. Except ones on the street.</p>",
        "id": 226013713,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613059322
    },
    {
        "content": "<p>(whoa, eddy checked their box, but they're not here, are they ...?)</p>",
        "id": 226014067,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613059408
    },
    {
        "content": "<p>multi-chat-drifting</p>",
        "id": 226014128,
        "sender_full_name": "oli",
        "timestamp": 1613059426
    },
    {
        "content": "<p>they check their gh notifications, I imagine</p>",
        "id": 226014334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613059471
    },
    {
        "content": "<p>/me looks guiltily at their GH notification queue</p>",
        "id": 226014392,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613059494
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202021-02-11.20.2354818/near/226014334\">said</a>:</p>\n<blockquote>\n<p>they check their gh notifications, I imagine</p>\n</blockquote>\n<p>I would be shocked to hear that <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> I bet they happened to be following the meeting</p>",
        "id": 226014404,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613059498
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202021-02-11.20.2354818/near/226014067\">said</a>:</p>\n<blockquote>\n<p>(whoa, eddy checked their box, but they're not here, are they ...?)</p>\n</blockquote>\n<p>nope, someone mentioned <code>@rfcbot</code> somewhere and I remembered to check <a href=\"https://rfcbot.rs/fcp/eddyb\">https://rfcbot.rs/fcp/eddyb</a></p>",
        "id": 226017913,
        "sender_full_name": "eddyb",
        "timestamp": 1613060890
    },
    {
        "content": "<p>oh that's a really neat site</p>",
        "id": 226017989,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613060926
    },
    {
        "content": "<p>re <a href=\"https://github.com/rust-lang/rust/issues/80810\">#80810</a> if it is related to endianness it should also fail on mips64 and ppc64[be]</p>",
        "id": 226018004,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613060937
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"360752\">Ariadne Conill</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202021-02-11.20.2354818/near/226018004\">said</a>:</p>\n<blockquote>\n<p>re <a href=\"https://github.com/rust-lang/rust/issues/80810\">#80810</a> if it is related to endianness it should also fail on mips64 and ppc64[be]</p>\n</blockquote>\n<p>it seems unrelated to endianness: <a href=\"https://github.com/rust-lang/rust/issues/80810#issuecomment-757026959\">https://github.com/rust-lang/rust/issues/80810#issuecomment-757026959</a></p>",
        "id": 226018233,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613061037
    },
    {
        "content": "<p>Draft for next week's agenda: <a href=\"https://hackmd.io/deNj8imkTaSwe4MloUeZDw?view\">https://hackmd.io/deNj8imkTaSwe4MloUeZDw?view</a></p>\n<p>Scheduled checkins:</p>\n<ul>\n<li>@_<em>WG-mir-opt</em> checkin by @@<strong>oli</strong></li>\n<li>@_<em>WG-polonius</em> checkin by <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> and <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></li>\n</ul>",
        "id": 226019839,
        "sender_full_name": "apiraino",
        "timestamp": 1613061721
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202021-02-11.20.2354818/near/226014334\">said</a>:</p>\n<blockquote>\n<p>they check their gh notifications, I imagine</p>\n</blockquote>\n<p>wrong <a href=\"/user_uploads/4715/PaDCblD3jRV9eXX6nXuG8nKa/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/PaDCblD3jRV9eXX6nXuG8nKa/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/PaDCblD3jRV9eXX6nXuG8nKa/image.png\"></a></div>",
        "id": 226021277,
        "sender_full_name": "eddyb",
        "timestamp": 1613062229
    },
    {
        "content": "<p>lol</p>",
        "id": 226025159,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613063649
    }
]