[
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span>; the triage meeting will take place in about 1h30<br>\n<em>WG-prioritization</em> has done pre-triage in <a class=\"stream\" data-stream-id=\"245100\" href=\"/#narrow/stream/245100-t-compiler.2Fwg-prioritization.2Falerts\">#t-compiler/wg-prioritization/alerts</a> and prepared the <a href=\"https://hackmd.io/v-I1WY0JSSqpf6KxBhkc9Q\">meeting agenda</a></p>\n<p>Scheduled checkins from:</p>\n<ul>\n<li><span class=\"user-group-mention\" data-user-group-id=\"1175\">@WG-rfc-2229</span>  by <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> </li>\n<li><span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span>  by <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>  (anything to share?)</li>\n</ul>",
        "id": 239581118,
        "sender_full_name": "apiraino",
        "timestamp": 1621513469
    },
    {
        "content": "<p>(agenda looks packed today <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> )</p>",
        "id": 239581746,
        "sender_full_name": "apiraino",
        "timestamp": 1621513718
    },
    {
        "content": "<p>hi <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span> ; lets get started on this meeting! Add a <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> to show you're here</p>",
        "id": 239595903,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621519227
    },
    {
        "content": "<h3>Announcements</h3>",
        "id": 239596059,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621519262
    },
    {
        "content": "<p>I have an announcement to make: I'm happy to report that I recently joined the Rust team at Microsoft's developer division (the same team @Wesleywiser is on) -- which will allow me to spend a significant amount of time on Rust again <code>:)</code></p>",
        "id": 239596156,
        "sender_full_name": "mw",
        "timestamp": 1621519289
    },
    {
        "content": "<p>I have a draft up for a blog post, on behalf of T-compiler, advocating that Rust developers try out the next beta: <a href=\"https://github.com/rust-lang/blog.rust-lang.org/pull/846\">https://github.com/rust-lang/blog.rust-lang.org/pull/846</a></p>",
        "id": 239596302,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621519327
    },
    {
        "content": "<p>(feedback on post is very much welcome)</p>",
        "id": 239596339,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621519341
    },
    {
        "content": "<h3>MCPs/FCPs</h3>",
        "id": 239596503,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621519393
    },
    {
        "content": "<ul>\n<li>New MCPs (take a look, see if you like them!)<ul>\n<li>\"Write text output files to stdout if options like <code>-o -</code> or <code>--emit asm=-</code> are provided\" <a href=\"https://github.com/rust-lang/compiler-team/issues/431\">compiler-team#431</a></li>\n<li>\"Introduce ty::WhereClause to align chalk and rustc dyn representation\" <a href=\"https://github.com/rust-lang/compiler-team/issues/433\">compiler-team#433</a></li>\n</ul>\n</li>\n</ul>",
        "id": 239596532,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621519399
    },
    {
        "content": "<ul>\n<li>Old MCPs (not seconded, take a look)<ul>\n<li>\"Add different entry points for x.py\" <a href=\"https://github.com/rust-lang/compiler-team/issues/396\">compiler-team#396</a></li>\n<li>\"rustdoc is using rustc_ast_pretty, would it be possible to make it somewhat \"stable\"?\" <a href=\"https://github.com/rust-lang/compiler-team/issues/403\">compiler-team#403</a></li>\n<li>\"LLVM plugin support in Rust\" <a href=\"https://github.com/rust-lang/compiler-team/issues/419\">compiler-team#419</a></li>\n<li>\"Rename -Cllvm-args to something backend agnostic\" <a href=\"https://github.com/rust-lang/compiler-team/issues/421\">compiler-team#421</a></li>\n<li>\"Promote <code>aarch64-apple-ios-sim</code> to Tier 2\" <a href=\"https://github.com/rust-lang/compiler-team/issues/428\">compiler-team#428</a></li>\n</ul>\n</li>\n</ul>",
        "id": 239596553,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621519407
    },
    {
        "content": "<ul>\n<li>Pending FCP requests (check your boxes!)<ul>\n<li>No pending FCP requests this time.</li>\n</ul>\n</li>\n</ul>",
        "id": 239596566,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621519413
    },
    {
        "content": "<ul>\n<li>Things in FCP (make sure you're good with it)<ul>\n<li>\"Update the existing musl targets to be dynamically linked.\" <a href=\"https://github.com/rust-lang/compiler-team/issues/422\">compiler-team#422</a></li>\n<li>\"A --temps-dir option for specifying where the intermediate files are written\" <a href=\"https://github.com/rust-lang/compiler-team/issues/423\">compiler-team#423</a></li>\n<li>\"Make <code>TypeFolder::fold_*</code> return <code>Result</code>\" <a href=\"https://github.com/rust-lang/compiler-team/issues/432\">compiler-team#432</a></li>\n</ul>\n</li>\n</ul>",
        "id": 239596593,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621519424
    },
    {
        "content": "<ul>\n<li>Accepted MCPs<ul>\n<li>No new accepted proposals this time.</li>\n</ul>\n</li>\n</ul>",
        "id": 239596618,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621519431
    },
    {
        "content": "<ul>\n<li>Finalized FCPs (disposition merge)<ul>\n<li>\"Stabilize extended_key_value_attributes\" <a href=\"https://github.com/rust-lang/rust/pull/83366\">rust#83366</a></li>\n<li>\"Stabilize \"RangeFrom\" patterns\" <a href=\"https://github.com/rust-lang/rust/pull/83918\">rust#83918</a></li>\n<li>\"Uplift the invalid_atomic_ordering lint from clippy to rustc\" <a href=\"https://github.com/rust-lang/rust/pull/84039\">rust#84039</a></li>\n<li>\"rustdoc: Make \"rust code block is empty\" and \"could not parse code block\" warnings a lint (<code>INVALID_RUST_CODEBLOCKS</code>)\" <a href=\"https://github.com/rust-lang/rust/pull/84587\">rust#84587</a></li>\n<li>\"impl FromStr for proc_macro::Literal\" <a href=\"https://github.com/rust-lang/rust/pull/84717\">rust#84717</a></li>\n<li>\"FCP poll for ErrorKind::OutOfMemory\" <a href=\"https://github.com/rust-lang/rust/issues/84916\">rust#84916</a></li>\n</ul>\n</li>\n</ul>",
        "id": 239596639,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621519439
    },
    {
        "content": "<blockquote>\n<p>\"Stabilize extended_key_value_attributes\" <a href=\"https://github.com/rust-lang/rust/issues/83366\">rust#83366</a><br>\n\"rustdoc: Make \"rust code block is empty\" and \"could not parse code block\" warnings a lint (INVALID_RUST_CODEBLOCKS)\" <a href=\"https://github.com/rust-lang/rust/issues/84587\">rust#84587</a></p>\n</blockquote>\n<p>these were merged :)</p>",
        "id": 239596701,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1621519447
    },
    {
        "content": "<h3>WG checkins</h3>",
        "id": 239596707,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621519448
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1175\">@WG-rfc-2229</span>  by <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span>:</p>\n<ul>\n<li>\n<p>Overall improvement to closure diagnostics: we now point to part of the source code responsible for the capture kind associated with the error message.</p>\n<ul>\n<li>Some screenshots of diagnostics here:<a href=\"https://github.com/rust-lang/lang-team/issues/50\">https://github.com/rust-lang/lang-team/issues/50</a></li>\n</ul>\n</li>\n<li>\n<p>We can now detect if the closure after enabling RFC 2229 will not meet Clone or any of the auto trait bounds and can provide migrations for it. These migrations are supported via rustfix as well.</p>\n</li>\n<li>\n<p>We can annote drop implementations with <code>#[rustc_insignificant_dtor]</code> to avoid migrating in scenarios where drop order doesn't affect semantics of the program. We intend to use this attribute to annotate the stdlib to mark certain type as safe to be Drop reorded. eg: when a string gets dropped it would not affect the behavior of rest of the program.</p>\n</li>\n<li>\n<p>We wrote an initial implementation for printing out the closure size before and after the feature. The implementation is somewhat incomplete, but was good enough for us to get some data on cargo and stdlib.<br>\nCargo and all depensices size data: <a href=\"https://docs.google.com/spreadsheets/d/1Irsj5O7HPPfomWat2jPTPdx_KPlsyYo5kRuQpNNuwsQ/edit?usp=sharing\">https://docs.google.com/spreadsheets/d/1Irsj5O7HPPfomWat2jPTPdx_KPlsyYo5kRuQpNNuwsQ/edit?usp=sharing</a></p>\n</li>\n</ul>",
        "id": 239596739,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621519459
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-05-20.20.2354818/near/239596553\">said</a>:</p>\n<blockquote>\n<ul>\n<li>Old MCPs (not seconded, take a look)<ul>\n<li>\"Rename -Cllvm-args to something backend agnostic\" <a href=\"https://github.com/rust-lang/compiler-team/issues/421\">compiler-team#421</a></li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>huh, I seconded this...</p>",
        "id": 239596768,
        "sender_full_name": "nagisa",
        "timestamp": 1621519472
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/compiler-team/issues/432\">https://github.com/rust-lang/compiler-team/issues/432</a> was also seconded</p>",
        "id": 239596838,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1621519495
    },
    {
        "content": "<p>Is this an artifact from how early in the week the agenda is constructed?</p>",
        "id": 239596877,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621519511
    },
    {
        "content": "<p>hmm .... I need to check how we filter MCP</p>",
        "id": 239596889,
        "sender_full_name": "apiraino",
        "timestamp": 1621519515
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-05-20.20.2354818/near/239596877\">said</a>:</p>\n<blockquote>\n<p>Is this an artifact from how early in the week the agenda is constructed?</p>\n</blockquote>\n<p>Nope, that was seconded <strong>ages</strong> ago</p>",
        "id": 239596928,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621519532
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-05-20.20.2354818/near/239596877\">said</a>:</p>\n<blockquote>\n<p>Is this an artifact from how early in the week the agenda is constructed?</p>\n</blockquote>\n<p>for the merged PRs? I suspect so, yes</p>",
        "id": 239596943,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1621519537
    },
    {
        "content": "<p>okay, we'll look into that.</p>",
        "id": 239596965,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621519544
    },
    {
        "content": "<p>The -Cllvm-args one was even accepted 2 weeks ago. Who is on the hook for merging/closing/etc these?</p>",
        "id": 239596994,
        "sender_full_name": "nagisa",
        "timestamp": 1621519559
    },
    {
        "content": "<p>I do (I think)</p>",
        "id": 239597092,
        "sender_full_name": "apiraino",
        "timestamp": 1621519583
    },
    {
        "content": "<p>could we have rustbot close them automatically after the FCP?</p>",
        "id": 239597131,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1621519598
    },
    {
        "content": "<p>Okay. I think we should split out this into a separate topic and move on.</p>",
        "id": 239597203,
        "sender_full_name": "nagisa",
        "timestamp": 1621519630
    },
    {
        "content": "<p>I do think we should resolve these questions, but there are a ton of important backport ... yes, exactly</p>",
        "id": 239597225,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621519638
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> if there is a <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> checkin, feel free to add it to the <a href=\"https://hackmd.io/v-I1WY0JSSqpf6KxBhkc9Q?both\">agenda</a>; I'm going to move on to backport nominations to save time.</p>",
        "id": 239597305,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621519673
    },
    {
        "content": "<h2>Backport nominations</h2>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Abeta-nominated+-label%3Abeta-accepted+label%3AT-compiler\">T-compiler stable</a> / <a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Astable-nominated+-label%3Astable-accepted+label%3AT-compiler\">T-compiler beta</a></p>",
        "id": 239597326,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621519682
    },
    {
        "content": "<ul>\n<li><img alt=\":beta:\" class=\"emoji\" src=\"https://uploads.zulipusercontent.net/281681cc2061954ec1285786f6c55d81e6530445/68747470733a2f2f7a756c69702d617661746172732e73332e616d617a6f6e6177732e636f6d2f343731352f656d6f6a692f696d616765732f32303731372e706e67\" title=\"beta\"> \"Ensure TLS destructors run before thread joins in SGX\" <a href=\"https://github.com/rust-lang/rust/pull/84409\">rust#84409</a><ul>\n<li>opened by \"mzohreva\"</li>\n<li>r'ed by <span class=\"user-mention\" data-user-id=\"119235\">@David Tolnay</span> and <span class=\"user-mention\" data-user-id=\"138938\">@Jethro</span>, already merged</li>\n<li>A bit of context in this <a href=\"https://github.com/rust-lang/rust/pull/83416#discussion_r617282907\">comment</a></li>\n</ul>\n</li>\n</ul>",
        "id": 239597382,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621519691
    },
    {
        "content": "<p>what tier is SGX ?</p>",
        "id": 239597610,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621519785
    },
    {
        "content": "<p>I think 3, maybe 2</p>",
        "id": 239597646,
        "sender_full_name": "nagisa",
        "timestamp": 1621519799
    },
    {
        "content": "<p>sadly, no check-in from WG-rls2.0 this time (unless <span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink  [he/him]</span> wants to do one?) -- missed notification beforehand,  and a busy right now :(</p>",
        "id": 239597702,
        "sender_full_name": "matklad",
        "timestamp": 1621519806
    },
    {
        "content": "<p>(I skimmed forge but couldn't find it there.)</p>",
        "id": 239597713,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621519809
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-05-20.20.2354818/near/239597702\">said</a>:</p>\n<blockquote>\n<p>sadly, no check-in from WG-rls2.0 this time (unless <span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink  [he/him]</span> wants to do one?) -- missed notification beforehand,  and a busy right now :(</p>\n</blockquote>\n<p>not a problem, thanks!</p>",
        "id": 239597740,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621519817
    },
    {
        "content": "<p>tier 2 <br>\n<a href=\"https://doc.rust-lang.org/nightly/rustc/platform-support.html\">https://doc.rust-lang.org/nightly/rustc/platform-support.html</a></p>",
        "id": 239597741,
        "sender_full_name": "apiraino",
        "timestamp": 1621519818
    },
    {
        "content": "<p>ah okay, not on forge</p>",
        "id": 239597784,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621519831
    },
    {
        "content": "<p>Jethro is the owner of the target, so I think we should just backport.</p>",
        "id": 239597809,
        "sender_full_name": "nagisa",
        "timestamp": 1621519842
    },
    {
        "content": "<p>yeah lets just backport</p>",
        "id": 239597821,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621519849
    },
    {
        "content": "<p>(its also purely a libs-impl thing, right?)</p>",
        "id": 239597907,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621519891
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/84409\">rust#84409</a>: backport approved</p>",
        "id": 239597925,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621519899
    },
    {
        "content": "<ul>\n<li><img alt=\":beta:\" class=\"emoji\" src=\"https://uploads.zulipusercontent.net/281681cc2061954ec1285786f6c55d81e6530445/68747470733a2f2f7a756c69702d617661746172732e73332e616d617a6f6e6177732e636f6d2f343731352f656d6f6a692f696d616765732f32303731372e706e67\" title=\"beta\"> \"Update LLVM submodule\" <a href=\"https://github.com/rust-lang/rust/pull/85236\">rust#85236</a><ul>\n<li>opened by <span class=\"user-mention\" data-user-id=\"133224\">@Nikita Popov</span></li>\n<li>approved by <span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span></li>\n<li>merges recent changes from the upstream LLVM 12 branch, should also fix <a href=\"https://github.com/rust-lang/rust/issues/84958\">rustc#84958</a></li>\n</ul>\n</li>\n</ul>",
        "id": 239597949,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621519914
    },
    {
        "content": "<p>I think we either need to backport that PR or disable mutable-noalias annotatons on beta</p>",
        "id": 239598074,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1621519950
    },
    {
        "content": "<p>or both</p>",
        "id": 239598103,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621519963
    },
    {
        "content": "<p>yeah, non-exclusive or, I guess :)</p>",
        "id": 239598149,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1621519981
    },
    {
        "content": "<p>on that issue, briansmith argued for disabling it</p>",
        "id": 239598235,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621520011
    },
    {
        "content": "<p>lets definitely backport the PR</p>",
        "id": 239598264,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621520020
    },
    {
        "content": "<p>where should we have the discussion of whether to disable the optimization on the beta (and thus on the 1.53 series? I guess a #t-compiler topic seems appropriate</p>",
        "id": 239598369,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621520051
    },
    {
        "content": "<p>Is there a good way for regression testing issues like this?</p>",
        "id": 239598566,
        "sender_full_name": "mw",
        "timestamp": 1621520125
    },
    {
        "content": "<p>I don't think there's a good way of formally verifying the correctness of that optimization.</p>",
        "id": 239598722,
        "sender_full_name": "nagisa",
        "timestamp": 1621520171
    },
    {
        "content": "<p>I opened up a separate topic</p>",
        "id": 239598723,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621520171
    },
    {
        "content": "<p><a class=\"stream-topic\" data-stream-id=\"131828\" href=\"/#narrow/stream/131828-t-compiler/topic/should.20we.20disable.20mutable.20noalias.20in.201.2E53.20.28current.20beta.29\">#t-compiler &gt; should we disable mutable noalias in 1.53 (current beta)</a></p>",
        "id": 239598776,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621520185
    },
    {
        "content": "<p>but yes, <a href=\"https://github.com/rust-lang/rust/issues/85236\">rust#85236</a> backport approved.</p>",
        "id": 239598853,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621520212
    },
    {
        "content": "<ul>\n<li><img alt=\":beta:\" class=\"emoji\" src=\"https://uploads.zulipusercontent.net/281681cc2061954ec1285786f6c55d81e6530445/68747470733a2f2f7a756c69702d617661746172732e73332e616d617a6f6e6177732e636f6d2f343731352f656d6f6a692f696d616765732f32303731372e706e67\" title=\"beta\"> \"Fix incorrect gating of nonterminals in key-value attributes\" <a href=\"https://github.com/rust-lang/rust/pull/85445\">rust#85445</a><ul>\n<li>opened by <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span></li>\n<li>approved by <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span></li>\n<li>Fixes <a href=\"https://github.com/rust-lang/rust/issues/85432\">rust#85432</a></li>\n</ul>\n</li>\n</ul>",
        "id": 239598877,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621520220
    },
    {
        "content": "<p>^ this needs to be backported or there's no point in merging it</p>",
        "id": 239598949,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1621520245
    },
    {
        "content": "<p>the feature gate is completely gone on nightly</p>",
        "id": 239598967,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1621520251
    },
    {
        "content": "<p>okay <a href=\"https://github.com/rust-lang/rust/issues/85445\">rust#85445</a> backport approved.</p>",
        "id": 239599143,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621520302
    },
    {
        "content": "<p>what does that mean for users on current stable?</p>",
        "id": 239599159,
        "sender_full_name": "nagisa",
        "timestamp": 1621520308
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> stable is not affected, only beta</p>",
        "id": 239599228,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1621520336
    },
    {
        "content": "<p>on beta, this gives an incorrect error for code that used to compile</p>",
        "id": 239599262,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1621520347
    },
    {
        "content": "<ul>\n<li><img alt=\":beta:\" class=\"emoji\" src=\"https://uploads.zulipusercontent.net/281681cc2061954ec1285786f6c55d81e6530445/68747470733a2f2f7a756c69702d617661746172732e73332e616d617a6f6e6177732e636f6d2f343731352f656d6f6a692f696d616765732f32303731372e706e67\" title=\"beta\"> \"have on_completion record subcycles\" <a href=\"https://github.com/rust-lang/rust/pull/85186\">rust#85186</a><ul>\n<li>Fixes <a href=\"https://github.com/rust-lang/rust/issues/83538\">rust#83538</a>, a P-high issue with the trait evaluation cache</li>\n<li>approved by <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span></li>\n<li><a href=\"https://github.com/rust-lang/rust/pull/85186#issuecomment-840527579\">comment</a>: perf comparison seems to indicate a tiny regression but the gain provided by this patch greatly make it worth</li>\n<li>nominated by <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> because <a href=\"https://github.com/rust-lang/rust/pull/85186#issuecomment-840715095\">these incremental failures are a big problem</a></li>\n</ul>\n</li>\n</ul>",
        "id": 239599378,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621520385
    },
    {
        "content": "<p>I'm concerned about backporting this PR</p>",
        "id": 239599520,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1621520421
    },
    {
        "content": "<p>the coinductive cycle logic is quite subtle</p>",
        "id": 239599592,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1621520434
    },
    {
        "content": "<p>in practice we expect most of the incremental failures to be mitigated even without this, right?</p>",
        "id": 239599670,
        "sender_full_name": "simulacrum",
        "timestamp": 1621520462
    },
    {
        "content": "<p>and this PR affects all coinductive cycles (not just during incremental compilation</p>",
        "id": 239599672,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1621520463
    },
    {
        "content": "<p>that's right</p>",
        "id": 239599686,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1621520467
    },
    {
        "content": "<p>the main one seemed to be <code>predicates_of</code></p>",
        "id": 239599727,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1621520473
    },
    {
        "content": "<p>Yeah, I'm mixed here on backporting</p>",
        "id": 239599744,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621520480
    },
    {
        "content": "<p>OTOH, this is a correctness fix regardless, right?</p>",
        "id": 239599767,
        "sender_full_name": "simulacrum",
        "timestamp": 1621520491
    },
    {
        "content": "<p>uh</p>",
        "id": 239599798,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1621520503
    },
    {
        "content": "<p>I'm not certain</p>",
        "id": 239599810,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1621520508
    },
    {
        "content": "<p>I don't think so</p>",
        "id": 239599835,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621520517
    },
    {
        "content": "<p>I <em>think</em> that without it, we would just use <code>EvaluatedToOkModuloRegions</code> in more places</p>",
        "id": 239599844,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1621520520
    },
    {
        "content": "<p>yes</p>",
        "id": 239599895,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621520525
    },
    {
        "content": "<p>ok - then I think a backport is probably not necessary.</p>",
        "id": 239599933,
        "sender_full_name": "simulacrum",
        "timestamp": 1621520542
    },
    {
        "content": "<p>this doesn't cause a fingerprint failure?</p>",
        "id": 239599954,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621520554
    },
    {
        "content": "<p>it does</p>",
        "id": 239599974,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1621520561
    },
    {
        "content": "<p>sorry, let me clarify</p>",
        "id": 239599980,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1621520565
    },
    {
        "content": "<p>without this PR, we use <code>EvaluatedToOkModuloRegions</code> in more places - with incremental compilation, this can lead to fingerprint issues</p>",
        "id": 239600026,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1621520583
    },
    {
        "content": "<p>since whether or not we use <code>EvaluatedToOkModuloRegions</code> depends on global state</p>",
        "id": 239600045,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1621520589
    },
    {
        "content": "<p>without incremental compilation, I think we just end up doing extra work</p>",
        "id": 239600072,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1621520599
    },
    {
        "content": "<p>That's correct</p>",
        "id": 239600089,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621520610
    },
    {
        "content": "<p>in cases where we could have soundly returned <code>EvaluatedToOk</code></p>",
        "id": 239600095,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1621520613
    },
    {
        "content": "<p>if we don't backport this, should we disable incr-comp the same way it is in stable?</p>",
        "id": 239600146,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621520632
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-05-20.20.2354818/near/239600146\">said</a>:</p>\n<blockquote>\n<p>if we don't backport this, should we disable incr-comp the same way it is in stable?</p>\n</blockquote>\n<p>I don't think one person can answer that - are you asking how frequently the fingerprint failures for predicates_of happen?</p>",
        "id": 239600242,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1621520659
    },
    {
        "content": "<p>I'm trying to ask if we're going to see a bunch of fingerprint-related bug reports if we release beta as is without this backport</p>",
        "id": 239600247,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621520661
    },
    {
        "content": "<p>Is this particular fingerprint issue also a correctness issue? i.e. can it lead to miscompilations?</p>",
        "id": 239600376,
        "sender_full_name": "mw",
        "timestamp": 1621520706
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span> no</p>",
        "id": 239600414,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621520719
    },
    {
        "content": "<p>the fingerprint ICE should prevent this from leading to miscompilations (if that would be possible for this issue)</p>",
        "id": 239600464,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1621520738
    },
    {
        "content": "<p>since we panic as soon as we end up in a situation where there could be two different values of the same query in use</p>",
        "id": 239600506,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1621520754
    },
    {
        "content": "<p>OK, then I'd say it's a question of how often this occurs in practice</p>",
        "id": 239600545,
        "sender_full_name": "mw",
        "timestamp": 1621520763
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-05-20.20.2354818/near/239600242\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-05-20.20.2354818/near/239600146\">said</a>:</p>\n<blockquote>\n<p>if we don't backport this, should we disable incr-comp the same way it is in stable?</p>\n</blockquote>\n<p>I don't think one person can answer that - are you asking how frequently the fingerprint failures for predicates_of happen?</p>\n</blockquote>\n<p>I tried to search for this just now but the <code>--remap-path-prefix</code> fix also manifested as \"unstable fingerprints for <code>predicates_of</code>\" so it's hard to tell which issues are actually related</p>",
        "id": 239600613,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1621520781
    },
    {
        "content": "<p>and unfortunately we probably don't have good data about how often it occurs in practice</p>",
        "id": 239600634,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621520788
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> re: your earlier comment, your concern is that this will result in slower compilations, not about correctness?</p>",
        "id": 239600640,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1621520790
    },
    {
        "content": "<p>My opinion: it's indeed a subtle change, but I think both <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> and I feel pretty confident that it's correct</p>",
        "id": 239600645,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621520792
    },
    {
        "content": "<p>If the logic here is wrong, what is the usual effect? Is it that we compile invalid code without error or that we generate an error for valid code?</p>",
        "id": 239600655,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1621520796
    },
    {
        "content": "<p>from what I'm seen, the perf impact is tiny</p>",
        "id": 239600685,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1621520807
    },
    {
        "content": "<p>except on one <code>syn</code> benchmark for whatever reason</p>",
        "id": 239600703,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1621520818
    },
    {
        "content": "<p>Well, I think invalid logic with coinductive cycles can definitely be a soundness issue</p>",
        "id": 239600764,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621520842
    },
    {
        "content": "<p>I don't have any performance concerns - I was just commenting about the (theortical) impact of not making this change, in the absence of incremental compilation</p>",
        "id": 239600767,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1621520845
    },
    {
        "content": "<p>we've spent a lot of time on this - maybe it makes sense to delay the decision to next week?</p>",
        "id": 239600779,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1621520851
    },
    {
        "content": "<p>Which is why the subtlety is important</p>",
        "id": 239600791,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621520856
    },
    {
        "content": "<p>that will give more time for any issues to pop up</p>",
        "id": 239600799,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1621520858
    },
    {
        "content": "<p>sgtm</p>",
        "id": 239600836,
        "sender_full_name": "mw",
        "timestamp": 1621520874
    },
    {
        "content": "<p>If we delay, we might not get this backported in time to make the crater run for <code>beta</code></p>",
        "id": 239600837,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1621520875
    },
    {
        "content": "<p>The reason I want to resolve it is that we are planning to put out a blog post actively advertising people try out the beta</p>",
        "id": 239600839,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621520875
    },
    {
        "content": "<p>my view on these incremental bugs is that we should try to fix them 'incrementally'</p>",
        "id": 239600849,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1621520881
    },
    {
        "content": "<p>specifically, in part, to catch <em>new</em> incr-comp bugs</p>",
        "id": 239600905,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621520891
    },
    {
        "content": "<p>we've found out that there were a lot of bugs in the incremental system</p>",
        "id": 239600920,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1621520896
    },
    {
        "content": "<p>advertising a beta where <em>known bugs are not addressed</em></p>",
        "id": 239600934,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621520901
    },
    {
        "content": "<p>does not sound good to me</p>",
        "id": 239600947,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621520907
    },
    {
        "content": "<p>and I think we should avoid trying to rush fixes (especially for subtle issues</p>",
        "id": 239600960,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1621520911
    },
    {
        "content": "<p>if many people use beta without the fix, we should know more about how often this still occurs, right?</p>",
        "id": 239600968,
        "sender_full_name": "mw",
        "timestamp": 1621520914
    },
    {
        "content": "<p>beta is definitely going to be better than stable</p>",
        "id": 239600978,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1621520918
    },
    {
        "content": "<p>the question is just how much better</p>",
        "id": 239600992,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1621520922
    },
    {
        "content": "<p>well, it should get lots of testing in the ~4 weeks between now and next release, and even more because of the blog post</p>",
        "id": 239601042,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1621520943
    },
    {
        "content": "<p>we haven't yet fixed 100% of these bugs - there are still some PRs open</p>",
        "id": 239601077,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1621520957
    },
    {
        "content": "<p>so no matter what, beta is going to have at least one incremental bug</p>",
        "id": 239601092,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1621520967
    },
    {
        "content": "<p>Right. Okay so what I'm hearing is that we should not put out the blog post yet</p>",
        "id": 239601104,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621520973
    },
    {
        "content": "<p>but I think it would be reasonable to advertise it as better than stable</p>",
        "id": 239601105,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1621520974
    },
    {
        "content": "<p>I don't think that's good enough</p>",
        "id": 239601135,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621520986
    },
    {
        "content": "<p>in particular, the <code>predicate_of</code> bug that lots of people seemded to be hitting</p>",
        "id": 239601137,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1621520987
    },
    {
        "content": "<p>fair enough</p>",
        "id": 239601150,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1621520994
    },
    {
        "content": "<p>I don't have a strong view on whether or not we should do a blog post, or what it shoukld say</p>",
        "id": 239601234,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1621521010
    },
    {
        "content": "<p>Or at least, I'd rather plan to delay the blog post a bit longer</p>",
        "id": 239601237,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621521012
    },
    {
        "content": "<p>And work on resolving the remaining issues as best we can</p>",
        "id": 239601268,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621521023
    },
    {
        "content": "<p>I think for this particular PR, letting it sit on nightly for a bit longer is fine; but also fine to later beta backport</p>",
        "id": 239601311,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621521034
    },
    {
        "content": "<p>Okay. lets table the beta nomination of this PR to next week</p>",
        "id": 239601367,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621521052
    },
    {
        "content": "<p>(maybe we can delay the blog post by less than a week. I.e. time it so that the blog post comes out right after the last set of currently anticipated backports has landed)</p>",
        "id": 239601438,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621521082
    },
    {
        "content": "<ul>\n<li><img alt=\":stable:\" class=\"emoji\" src=\"https://uploads.zulipusercontent.net/2ad07b11f914f23d46d52fb16b528f0d1983b5df/68747470733a2f2f7a756c69702d617661746172732e73332e616d617a6f6e6177732e636f6d2f343731352f656d6f6a692f696d616765732f32303731362e706e67\" title=\"stable\"> \"have on_completion record subcycles\" <a href=\"https://github.com/rust-lang/rust/pull/85186\">rust#85186</a><ul>\n<li>(above isue nominated also for stable backport)</li>\n</ul>\n</li>\n</ul>",
        "id": 239601478,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621521097
    },
    {
        "content": "<p>okay we clearly aren't going to talk about this now</p>",
        "id": 239601501,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621521108
    },
    {
        "content": "<p>(I suspect we will discuss next week, and I suspect we will decline to backport, <em>unless</em> there is a strong motivation <em>outside of</em> incr-comp)</p>",
        "id": 239601620,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621521149
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Abeta-nominated+-label%3Abeta-accepted+label%3AT-libs-impl\">T-libs-impl stable</a> / <a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Astable-nominated+-label%3Astable-accepted+label%3AT-libs-impl\">T-libs-impl beta</a></p>",
        "id": 239601635,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621521159
    },
    {
        "content": "<p>(if we're going to backport anything to stable, I think we should backport --remap-path-prefix, since people were hitting that more often)</p>",
        "id": 239601642,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1621521162
    },
    {
        "content": "<p>was that stable nominated ?</p>",
        "id": 239601685,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621521182
    },
    {
        "content": "<p>no, I'm saying it should have been</p>",
        "id": 239601742,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1621521192
    },
    {
        "content": "<p>or at least, it's weird for on_completion to be stable nominated but not --remap-path-prefix</p>",
        "id": 239601782,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1621521206
    },
    {
        "content": "<p>okay. I'm going to keep working through the existing queue</p>",
        "id": 239601836,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621521229
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Abeta-nominated+-label%3Abeta-accepted+label%3AT-libs-impl\">T-libs-impl stable</a> / <a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Astable-nominated+-label%3Astable-accepted+label%3AT-libs-impl\">T-libs-impl beta</a></p>",
        "id": 239601866,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621521240
    },
    {
        "content": "<ul>\n<li><img alt=\":beta:\" class=\"emoji\" src=\"https://uploads.zulipusercontent.net/281681cc2061954ec1285786f6c55d81e6530445/68747470733a2f2f7a756c69702d617661746172732e73332e616d617a6f6e6177732e636f6d2f343731352f656d6f6a692f696d616765732f32303731372e706e67\" title=\"beta\"> \"remove InPlaceIterable marker from Peekable due to unsoundness\" <a href=\"https://github.com/rust-lang/rust/pull/85340\">rust#85340</a><ul>\n<li>opened by <span class=\"user-mention\" data-user-id=\"239181\">@The 8472</span></li>\n<li>approved  <span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span></li>\n<li>perf run shows overall neutral</li>\n<li>fixes a P-critical unsoundness (out of bounds access) <a href=\"https://github.com/rust-lang/rust/issues/85322\">rust#85322</a></li>\n</ul>\n</li>\n</ul>",
        "id": 239601929,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621521250
    },
    {
        "content": "<p>I see that two of the bencharmks had a <code>peekable()</code> called removed</p>",
        "id": 239602110,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1621521314
    },
    {
        "content": "<p>does that mean that this is breaking change?</p>",
        "id": 239602130,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1621521321
    },
    {
        "content": "<p>or was there some other reason for that?</p>",
        "id": 239602144,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1621521326
    },
    {
        "content": "<p>Okay, lets see: this is some unstable feature that has semantics that are observable from users of our stdlib...</p>",
        "id": 239602171,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621521334
    },
    {
        "content": "<p>I was assuming that they removed <code>peekable()</code> so that you continued to get in-place iteration</p>",
        "id": 239602304,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621521376
    },
    {
        "content": "<p>i.e. to avoid regressing the benchmarks' performance</p>",
        "id": 239602348,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621521390
    },
    {
        "content": "<p>but its a good question</p>",
        "id": 239602374,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621521399
    },
    {
        "content": "<p>I don't think its an invariant the users of the API are allowed to rely on.</p>",
        "id": 239602482,
        "sender_full_name": "nagisa",
        "timestamp": 1621521450
    },
    {
        "content": "<p>is <span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> here? Or some other person from libs-impl ?</p>",
        "id": 239602505,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621521457
    },
    {
        "content": "<p>i.e. its an incidental particularity of the behaviour.</p>",
        "id": 239602508,
        "sender_full_name": "nagisa",
        "timestamp": 1621521459
    },
    {
        "content": "<p>Is <code>InPlaceIterable</code> visible to stable users?</p>",
        "id": 239602538,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1621521473
    },
    {
        "content": "<p>the same way as calling <code>let x = alloc(); let y = alloc(free(x)); assert_eq!(x, y)</code> might return same pointers.</p>",
        "id": 239602603,
        "sender_full_name": "nagisa",
        "timestamp": 1621521487
    },
    {
        "content": "<p>Looks like it's an unstable trait</p>",
        "id": 239602625,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1621521495
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-05-20.20.2354818/near/239602538\">said</a>:</p>\n<blockquote>\n<p>Is <code>InPlaceIterable</code> visible to stable users?</p>\n</blockquote>\n<p>I was assuming its not, based on <code>#[unstable(issue = \"none\", feature = \"inplace_iteration\")]</code></p>",
        "id": 239602636,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621521499
    },
    {
        "content": "<p>So I don't think the effect of this is visible to users.</p>",
        "id": 239602710,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1621521529
    },
    {
        "content": "<p>its an implementation detail of specialization, so its viisble in terms of performance of certain code sequence and, as the benchmark suggests, reuse of backing storage.</p>",
        "id": 239602768,
        "sender_full_name": "nagisa",
        "timestamp": 1621521553
    },
    {
        "content": "<p>I think we can and should backport  <a href=\"https://github.com/rust-lang/rust/issues/85340\">rust#85340</a></p>",
        "id": 239602777,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621521558
    },
    {
        "content": "<p>backport approved</p>",
        "id": 239602816,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621521573
    },
    {
        "content": "<ul>\n<li>No stable nominations for <code>T-libs-impl</code> this time.</li>\n</ul>",
        "id": 239602851,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621521586
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Abeta-nominated+-label%3Abeta-accepted+label%3AT-rustdoc\">T-rustdoc stable</a> / <a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aall+label%3Astable-nominated+-label%3Astable-accepted+label%3AT-rustdoc\">T-rustdoc beta</a></p>",
        "id": 239602874,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621521594
    },
    {
        "content": "<ul>\n<li><img alt=\":beta:\" class=\"emoji\" src=\"https://uploads.zulipusercontent.net/281681cc2061954ec1285786f6c55d81e6530445/68747470733a2f2f7a756c69702d617661746172732e73332e616d617a6f6e6177732e636f6d2f343731352f656d6f6a692f696d616765732f32303731372e706e67\" title=\"beta\"> \"rustdoc: Call <code>initSidebarItems</code> in root module of crate\" <a href=\"https://github.com/rust-lang/rust/pull/85304\">rust#85304</a><ul>\n<li>opened by <span class=\"user-mention\" data-user-id=\"230287\">@Stu</span></li>\n<li>approved by <span class=\"user-mention\" data-user-id=\"315412\">@jsha</span></li>\n<li>Fixes <a href=\"https://github.com/rust-lang/rust/issues/85301\">rust#85301</a></li>\n</ul>\n</li>\n</ul>",
        "id": 239602893,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621521600
    },
    {
        "content": "<p>T-rustdoc?</p>",
        "id": 239603043,
        "sender_full_name": "nagisa",
        "timestamp": 1621521645
    },
    {
        "content": "<p>Yeah we always look at rustdoc backport nominations</p>",
        "id": 239603081,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621521662
    },
    {
        "content": "<p>I think T-rustdoc is fine with this backport</p>",
        "id": 239603167,
        "sender_full_name": "apiraino",
        "timestamp": 1621521694
    },
    {
        "content": "<p>the diff looks small enough...</p>",
        "id": 239603192,
        "sender_full_name": "mw",
        "timestamp": 1621521704
    },
    {
        "content": "<p>I don't know anything about the development of its frontend code to make an informed decision here <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>",
        "id": 239603194,
        "sender_full_name": "nagisa",
        "timestamp": 1621521705
    },
    {
        "content": "<p>I think this should be a T-rustdoc decision personally</p>",
        "id": 239603214,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1621521721
    },
    {
        "content": "<p>seems weird that T-compiler decides on backports</p>",
        "id": 239603263,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1621521727
    },
    {
        "content": "<p>The issue is that historically T-rustdoc has not had suffiicent process to actually move on backports</p>",
        "id": 239603316,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621521751
    },
    {
        "content": "<p>that was why our team agreed to take on the responsibility</p>",
        "id": 239603353,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621521764
    },
    {
        "content": "<p>I also approve it</p>",
        "id": 239603355,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1621521766
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> recently we've been pinging the team to check people are ok with it</p>",
        "id": 239603364,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1621521771
    },
    {
        "content": "<p>do you want to open a separate thread for improving the process?</p>",
        "id": 239603385,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1621521780
    },
    {
        "content": "<p>yes lets not derail the meeting to discuss that</p>",
        "id": 239603414,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621521793
    },
    {
        "content": "<p>but I really think no one in @_<em>T-compiler/meeting</em> has the context to make a decision</p>",
        "id": 239603435,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1621521803
    },
    {
        "content": "<p>(I think I've said before that I'd love to get it off our regular agenda)</p>",
        "id": 239603440,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621521805
    },
    {
        "content": "<p>Anyway, backport approved</p>",
        "id": 239603483,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621521830
    },
    {
        "content": "<ul>\n<li>No stable nominations for <code>T-rustdoc</code> this time.</li>\n</ul>",
        "id": 239603490,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621521835
    },
    {
        "content": "<h2>PRs S-waiting-on-team</h2>\n<p><a href=\"https://github.com/rust-lang/rust/pulls?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AS-waiting-on-team+label%3AT-compiler\">T-compiler</a></p>",
        "id": 239603504,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621521841
    },
    {
        "content": "<ul>\n<li>\"Remove unstable <code>--pretty</code> flag\" <a href=\"https://github.com/rust-lang/rust/pull/83491\">rust#83491</a></li>\n</ul>",
        "id": 239603543,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621521845
    },
    {
        "content": "<p>I wrote my comment</p>",
        "id": 239603554,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621521848
    },
    {
        "content": "<p>at this point I guess if no one else speaks up, we should go ahead and let this PR land</p>",
        "id": 239603683,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621521892
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pulls?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AS-waiting-on-team+label%3AT-libs-impl\">T-libs-impl</a></p>\n<ul>\n<li>No PRs waiting on <code>T-libs-impl</code> this time.</li>\n</ul>",
        "id": 239603702,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621521899
    },
    {
        "content": "<h2>Issues of Note</h2>\n<h3>Short Summary</h3>\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3AT-compiler+label%3AP-critical\">3 T-compiler P-critical issues</a><ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3AT-compiler+label%3AP-critical+no%3Aassignee\">2 of those are unassigned</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3AT-compiler+label%3AP-high\">75 T-compiler P-high issues</a><ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3AT-compiler+label%3AP-high+no%3Aassignee\">49 of those are unassigned</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/rust-lang/rust/labels/regression-from-stable-to-beta\">3 P-critical, 1 P-high, 3 P-medium, 0 P-low regression-from-stable-to-beta</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/labels/regression-from-stable-to-nightly\">1 P-critical, 2 P-high, 1 P-medium, 0 P-low regression-from-stable-to-nightly</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/labels/regression-from-stable-to-stable\">3 P-critical, 45 P-high, 85 P-medium, 11 P-low regression-from-stable-to-stable</a></li>\n</ul>",
        "id": 239603735,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621521908
    },
    {
        "content": "<h3>P-critical</h3>\n<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AP-critical+label%3AT-compiler\">T-compiler</a></p>",
        "id": 239603778,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621521919
    },
    {
        "content": "<ul>\n<li>\"Unstable fingerprints - what to do on beta (and stable)\" <a href=\"https://github.com/rust-lang/rust/issues/84970\">rust#84970</a><ul>\n<li>issue (and related ones) is being followed</li>\n<li>anything new to discuss for this tracking issue?</li>\n</ul>\n</li>\n</ul>",
        "id": 239603791,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621521925
    },
    {
        "content": "<p>(there is still work to be done, but I don't think we need to talk about it here.)</p>",
        "id": 239603851,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621521946
    },
    {
        "content": "<ul>\n<li>\"Miscompilation on ARM-M with nightly-2021-04-23\" <a href=\"https://github.com/rust-lang/rust/issues/85351\">rust#85351</a><ul>\n<li>regression from nightly <code>nightly-2021-04-23</code> (therefore <code>regression-from-stable-to-beta</code>) on 2 different Tier ARM targets (thumbv8m and thumbv7em)</li>\n<li>issue reporter mentions that it could affect other targets</li>\n<li>we don't have yet an mcve</li>\n<li>in this <a href=\"https://github.com/rust-lang/rust/issues/85351#issuecomment-842579818\">comment</a> \"@yroux\" mention is it indeed caused by LLVM 12 and will work on a patch</li>\n</ul>\n</li>\n</ul>",
        "id": 239603928,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621521966
    },
    {
        "content": "<p>wg-llvm should probably be pinged on that <del>PR</del> issue</p>",
        "id": 239604054,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621522010
    },
    {
        "content": "<p>or is it icebreakers-llvm</p>",
        "id": 239604387,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621522101
    },
    {
        "content": "<p>sigh</p>",
        "id": 239604389,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621522102
    },
    {
        "content": "<p>just llvm should work</p>",
        "id": 239604411,
        "sender_full_name": "simulacrum",
        "timestamp": 1621522112
    },
    {
        "content": "<p>jinx</p>",
        "id": 239604478,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621522140
    },
    {
        "content": "<p>its a P-critical bug. No owner yet</p>",
        "id": 239604538,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621522165
    },
    {
        "content": "<p>but there is activity on it</p>",
        "id": 239604671,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621522206
    },
    {
        "content": "<p>lets see what happens over the next week.</p>",
        "id": 239604687,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621522211
    },
    {
        "content": "<ul>\n<li>\"Regression on nightly in AVX2 byte shift intrinsics\" <a href=\"https://github.com/rust-lang/rust/issues/85446\">rust#85446</a><ul>\n<li>Unsoundness on byteshift on x86_64</li>\n<li>Seems part of the fallout from PR <a href=\"https://github.com/rust-lang/rust/issues/85446#issuecomment-843508538\">rustc#83278</a></li>\n</ul>\n</li>\n</ul>",
        "id": 239604706,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621522221
    },
    {
        "content": "<p>has a fix</p>",
        "id": 239604752,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621522241
    },
    {
        "content": "<p>in queue</p>",
        "id": 239604758,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621522243
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AP-critical+label%3AT-libs-impl\">T-libs-impl</a></p>\n<ul>\n<li>No <code>P-critical</code> issues for <code>T-libs-impl</code> this time.</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AP-critical+label%3AT-rustdoc\">T-rustdoc</a></p>\n<ul>\n<li>No <code>P-critical</code> issues for <code>T-rustdoc</code> this time.</li>\n</ul>",
        "id": 239604775,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621522250
    },
    {
        "content": "<h3>P-high regressions</h3>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3Aregression-from-stable-to-beta+label%3AP-high+-label%3AT-infra+-label%3AT-libs+-label%3AT-release+-label%3AT-rustdoc+-label%3AT-core\">P-high beta regressions</a></p>",
        "id": 239604797,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621522256
    },
    {
        "content": "<ul>\n<li>\"Rustc beta/nightly appears to ignore <code>unsafe</code> blocks inside closure in some cases\" <a href=\"https://github.com/rust-lang/rust/issues/85435\">rust#85435</a></li>\n</ul>",
        "id": 239604802,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621522261
    },
    {
        "content": "<p>oh this is worse than the title makes it sound</p>",
        "id": 239604900,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621522295
    },
    {
        "content": "<p>I might argue this is P-critical? We cannot release with this bug, right?</p>",
        "id": 239604972,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621522322
    },
    {
        "content": "<p>well what the title says per-se sounds P-critical</p>",
        "id": 239605088,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621522346
    },
    {
        "content": "<p>(It sounds like there may be workarounds, such as refactoring your code so that you don't <em>have</em> unsafe code in closure bodies.)</p>",
        "id": 239605095,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621522348
    },
    {
        "content": "<p>huh, I'm surprised that this ... did not get caught by any tests etc</p>",
        "id": 239605129,
        "sender_full_name": "simulacrum",
        "timestamp": 1621522357
    },
    {
        "content": "<p>I'm going to self-assign this one and bump priority to P-critical</p>",
        "id": 239605165,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621522374
    },
    {
        "content": "<p>I think p-critical is right though</p>",
        "id": 239605178,
        "sender_full_name": "simulacrum",
        "timestamp": 1621522381
    },
    {
        "content": "<p>we can presumably at least revert the PR, that should be easy enough, it alleges only diagnostic changes</p>",
        "id": 239605232,
        "sender_full_name": "simulacrum",
        "timestamp": 1621522403
    },
    {
        "content": "<p>true dat</p>",
        "id": 239605248,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621522411
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3Aregression-from-stable-to-nightly+label%3AP-high+no%3Aassignee+-label%3AT-infra+-label%3AT-libs+-label%3AT-release+-label%3AT-rustdoc+-label%3AT-core\">Unassigned P-high nightly regressions</a></p>\n<ul>\n<li>No unassigned <code>P-high</code> nightly regressions this time.</li>\n</ul>",
        "id": 239605267,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621522419
    },
    {
        "content": "<h2>Performance logs</h2>\n<blockquote>\n<p><a href=\"https://github.com/rust-lang/rustc-perf/blob/master/triage/2021-05-18.md\">triage logs for 2021-05-18</a></p>\n</blockquote>\n<p>A lot of noise in the benchmark results this week. We are discussing (<a href=\"https://zulip-archive.rust-lang.org/247081tcompilerperformance/06104coercionsdebugnoise.html\">zulip archive</a>, <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/coercions-debug.20noise\">live zulip</a>) how best to update the benchmark set to eliminate the noisy cases that are bouncing around. Beyond that, some large improvements to a few individual benchmarks.</p>\n<p>The memory usage (<a href=\"https://perf.rust-lang.org/?start=2021-05-11&amp;end=2021-05-18&amp;absolute=true&amp;stat=max-rss\">max-rss</a>) seemed largely flat. Except for an upward trend on <code>tuple-stess</code> that indicates 4% more memory from a week ago.</p>\n<p>Triage done by <strong>@pnkfelix</strong>.</p>\n<p>5 Regressions, 7 Improvements, 2 Mixed<br>\n1 of them in rollups</p>",
        "id": 239605296,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621522427
    },
    {
        "content": "<h4>Regressions</h4>\n<p>Reachable statics have reachable initializers <a href=\"https://github.com/rust-lang/rust/issues/84549\">#84549</a></p>\n<ul>\n<li>Moderate regression in <a href=\"https://perf.rust-lang.org/compare.html?start=747a5d2a5d6693f5e9426524b0dab34eb1587377&amp;end=f8e1e9238077a829ce1ac0cc1f2c7e0eaa4e679d&amp;stat=instructions:u\">instruction counts</a> (up to 1.4% on <code>incr-unchanged</code> builds of <code>ctfe-stress-4-opt</code>)</li>\n<li><code>ctfe-stress-4-debug</code> also saw a 1.2% regression in its <code>incr-unchanged</code> builds.</li>\n<li>Other benchmarks were not significantly impacted.</li>\n<li>The two regressions were <a href=\"https://github.com/rust-lang/rust/pull/84549#issuecomment-832760519\">anticipated</a> from a perf run on the PR itself.</li>\n</ul>",
        "id": 239605356,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621522444
    },
    {
        "content": "<h4>Improvements (summary)</h4>\n<ul>\n<li>have on_completion record subcycles <a href=\"https://github.com/rust-lang/rust/issues/85186\">#85186</a></li>\n<li>Store VariantIdx to distinguish enum variants <a href=\"https://github.com/rust-lang/rust/issues/85195\">#85195</a></li>\n<li>Do not allocate or unwind after fork <a href=\"https://github.com/rust-lang/rust/issues/81858\">#81858</a></li>\n</ul>",
        "id": 239605368,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621522452
    },
    {
        "content": "<h4>Mixed</h4>\n<p>BTree: no longer copy keys and values before dropping them <a href=\"https://github.com/rust-lang/rust/issues/84904\">#84904</a></p>\n<ul>\n<li>Moderate improvement in <a href=\"https://perf.rust-lang.org/compare.html?start=ba8d7e2cb7cfc87070585c17cd0aa4ae7f091a08&amp;end=5c029265465301fe9cb3960ce2a5da6c99b8dcf2&amp;stat=instructions:u\">instruction counts</a> (up to -1.2% on <code>incr-unchanged</code> builds of <code>ctfe-stress-4-check</code> and <code>ctfe-stress-4-opt</code> and <code>ctfe-stress-4-debug</code>)</li>\n<li>Moderate regression in <a href=\"https://perf.rust-lang.org/compare.html?start=ba8d7e2cb7cfc87070585c17cd0aa4ae7f091a08&amp;end=5c029265465301fe9cb3960ce2a5da6c99b8dcf2&amp;stat=instructions:u\">instruction counts</a> (up to 1.2% on <code>incr-patched: println</code> builds of <code>cargo-opt</code>)</li>\n<li>These changes were <a href=\"https://github.com/rust-lang/rust/pull/84904#issuecomment-837892302\">anticipated</a> from a perf run on the PR itself.</li>\n</ul>\n<p>rustc_codegen_ssa: only create backend <code>BasicBlock</code>s as-needed. <a href=\"https://github.com/rust-lang/rust/issues/84993\">#84993</a></p>\n<ul>\n<li>Moderate improvement in <a href=\"https://perf.rust-lang.org/compare.html?start=fe72845f7bb6a77b9e671e6a4f32fe714962cec4&amp;end=a55748ffe94e71f841c7b1d752779b0db138b342&amp;stat=instructions:u\">instruction counts</a> (up to -4.3% on <code>full</code> builds of <code>syn-opt</code>)</li>\n<li>Moderate regression in <a href=\"https://perf.rust-lang.org/compare.html?start=fe72845f7bb6a77b9e671e6a4f32fe714962cec4&amp;end=a55748ffe94e71f841c7b1d752779b0db138b342&amp;stat=instructions:u\">instruction counts</a> (up to 1.8% on <code>full</code> builds of <code>deeply-nested-async-check</code>)</li>\n<li>The improvement to <code>syn-opt</code> was <a href=\"https://github.com/rust-lang/rust/pull/84993#issuecomment-841687503\">anticipated</a> from perf runs on the PR itself.</li>\n<li>The regression on <code>deeply-nested-async-check</code> was not predicted by that run.</li>\n</ul>",
        "id": 239605384,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621522458
    },
    {
        "content": "<h4>Suspicious Noise (summary)</h4>\n<h5>coercions</h5>\n<ul>\n<li>rustc_driver cleanup <a href=\"https://github.com/rust-lang/rust/issues/83610\">#83610</a></li>\n<li>Add auto traits and clone trait migrations for RFC2229 <a href=\"https://github.com/rust-lang/rust/issues/84730\">#84730</a></li>\n<li>Provide ExitStatusError <a href=\"https://github.com/rust-lang/rust/issues/82973\">#82973</a></li>\n<li>Fix <code>--remap-path-prefix</code> not correctly remapping <code>rust-src</code> component paths and unify handling of path mapping with virtualized paths <a href=\"https://github.com/rust-lang/rust/issues/83813\">#83813</a></li>\n<li>Rollup of 5 pull requests <a href=\"https://github.com/rust-lang/rust/issues/85231\">#85231</a></li>\n<li>Rollup of 8 pull requests <a href=\"https://github.com/rust-lang/rust/issues/85414\">#85414</a></li>\n</ul>\n<h5>html5ever</h5>\n<ul>\n<li>Add support for const operands and options to global_asm! <a href=\"https://github.com/rust-lang/rust/issues/84107\">#84107</a></li>\n<li>Update cc crate <a href=\"https://github.com/rust-lang/rust/issues/85190\">#85190</a></li>\n</ul>",
        "id": 239605413,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621522476
    },
    {
        "content": "<p>(the \"suspicious noise\" are cases where the benchmarks were bouncing up and down in the results. As noted in summary, it is a sign that we need to revise how they're handled on perf.rlo itself, which we are looking at.)</p>",
        "id": 239605539,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621522523
    },
    {
        "content": "<h4>Nags requiring follow up</h4>\n<ul>\n<li>Double-check whether regression to <code>deeply-nested-async-check</code> from <a href=\"https://github.com/rust-lang/rust/issues/84993\">#84993</a> is noise or something real.</li>\n<li>Look into the 4% <code>tuple-stress</code> regression. The first seems like gradual creep, plus a 3% jump that seems to be associated with <a href=\"https://github.com/rust-lang/rust/pull/84571\">#84571</a>, \"Parse unnamed fields of struct and union type.\" (Perhaps its inherent given the nature of that microbenchmark, but some other benchmarks also had their <a href=\"https://perf.rust-lang.org/compare.html?start=44ec846f4ea68ffa6d06e7d68f078bd3cc59d4ec&amp;end=9964284fed181676300aad693449f5b751e35ff2&amp;stat=max-rss\">memory usage impacted</a>.</li>\n</ul>",
        "id": 239605551,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621522530
    },
    {
        "content": "<h2>Nominated Issues</h2>\n<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3AI-nominated+label%3AT-compiler\">T-compiler</a></p>",
        "id": 239605590,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621522547
    },
    {
        "content": "<ul>\n<li>\"ICE: unwrap none error in compiler\\rustc_mir\\src\\monomorphize\\collector.rs\" <a href=\"https://github.com/rust-lang/rust/issues/85447\">rust#85447</a><ul>\n<li>opened by \"kocsis1david\"</li>\n<li>ICE on nightly 2021-05-09 on target <code>x86_64-pc-windows-msvc</code>, latest working version was stable 1.51</li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/85447#issuecomment-843614853\">bisection comment</a> seems to point to <a href=\"https://github.com/rust-lang/rust/pull/81172\">#81172</a></li>\n<li>comment: It seems that this only occurs if the crate-type is <code>lib</code>. Even if I remove a <code>pub</code>, it can compile successfully.</li>\n<li><span class=\"user-mention\" data-user-id=\"219747\">@Simon Sapin</span> did <a href=\"https://github.com/rust-lang/rust/issues/85447#issuecomment-843879967\">some reduction and investigation</a>, asks for a bit more insights from someone more familiar with the compiler internals</li>\n</ul>\n</li>\n</ul>",
        "id": 239605615,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621522558
    },
    {
        "content": "<p>what priority should we give this bug?</p>",
        "id": 239605784,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621522606
    },
    {
        "content": "<p>I'm currently thinking P-high, and I will self-assign.</p>",
        "id": 239605974,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621522672
    },
    {
        "content": "<p>Maybe try to mentor or something</p>",
        "id": 239606054,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621522690
    },
    {
        "content": "<p>next</p>",
        "id": 239606119,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621522714
    },
    {
        "content": "<ul>\n<li>\"error: internal compiler error: unexpected panic: Failed to get crate data for crate21\" <a href=\"https://github.com/rust-lang/rust/issues/85386\">#85386</a><ul>\n<li>opened by \"T0mstone\"</li>\n<li>ICE on stable 1.52.1, beta 1.53.0-beta.2 and nightly 1.54</li>\n<li>issue only occurs when compiling for <code>wasm32-unknown-unknown</code></li>\n<li>A reduction is provided <a href=\"https://github.com/rust-lang/rust/issues/85386#issuecomment-842457820\">in this comment</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/85386#issuecomment-842487936\">comment</a>: adding a call to <code>extern crate proc_macros</code> makes the issue disappear</li>\n<li>perhaps related to <a href=\"https://github.com/rust-lang/rust/issues/56935\">#56935</a>?</li>\n<li>Question: would it be useful to have someone closer to the target <code>wasm32-unknown-unknown</code> evaliate this issue? We're not sure of its impact (maybe a P-high?)</li>\n</ul>\n</li>\n</ul>",
        "id": 239606124,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621522715
    },
    {
        "content": "<p>I can provide further info on that</p>",
        "id": 239606188,
        "sender_full_name": "Dennis Kobert(TrueDoctor)",
        "timestamp": 1621522739
    },
    {
        "content": "<p>who are stakeholders for <code>wasm32-unknown-unknown</code> ?</p>",
        "id": 239606225,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621522751
    },
    {
        "content": "<p>I have to go now</p>",
        "id": 239606260,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621522766
    },
    {
        "content": "<p>lets leave this nominated for next week.</p>",
        "id": 239606298,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621522777
    },
    {
        "content": "<p>(you all are free to discuss in my absence, of course)</p>",
        "id": 239606323,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621522784
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3AI-nominated+label%3AT-libs-impl\">T-libs-impl</a></p>\n<ul>\n<li>No nominated issues for <code>T-libs-impl</code> this time.</li>\n</ul>\n<p><a href=\"https://github.com/rust-lang/rfcs/issues?q=is%3Aopen+label%3AI-nominated+label%3AT-compiler\">RFC</a></p>\n<ul>\n<li>No nominated RFCs for <code>T-compiler</code> this time.</li>\n</ul>",
        "id": 239606330,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621522789
    },
    {
        "content": "<p>Just to finish properly: Thanks to everyone in <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span> for attending!</p>",
        "id": 239606364,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621522802
    },
    {
        "content": "<p>So, any comments on <a href=\"https://github.com/rust-lang/rust/issues/85386\">#85386</a>?<br>\n( I can always gather here feedback and paste them in next week's agenda)</p>",
        "id": 239606741,
        "sender_full_name": "apiraino",
        "timestamp": 1621522918
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/56935\">https://github.com/rust-lang/rust/issues/56935</a><br>\nis a known bug with cross compilation of macros</p>\n<p>what seems to cause the ice instead of an error (in a subset of test) is the import of two proc macros. When only one proc macro is imported, the compilation fails with found crates with colliding StableCrateId values.</p>",
        "id": 239606746,
        "sender_full_name": "Dennis Kobert(TrueDoctor)",
        "timestamp": 1621522919
    },
    {
        "content": "<blockquote>\n<p>at this point I guess if no one else speaks up, we should go ahead and let this PR land</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>  Oh I thought this was waiting on me</p>",
        "id": 239607184,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1621523068
    },
    {
        "content": "<p>Re: <a href=\"https://github.com/rust-lang/rust/issues/85386\">#85386</a> I think there are two questions:</p>\n<ul>\n<li>whether this impacts also other targets</li>\n<li>and how serious is that (I tend to assign a <code>P-high</code> since the code to reproduce seems simple)</li>\n</ul>",
        "id": 239607189,
        "sender_full_name": "apiraino",
        "timestamp": 1621523069
    },
    {
        "content": "<p>I have some half formed opinions I need to write up</p>",
        "id": 239607214,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1621523076
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-05-20.20.2354818/near/239606225\">said</a>:</p>\n<blockquote>\n<p>who are stakeholders for <code>wasm32-unknown-unknown</code> ?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> been doing a ton of work on wasm</p>",
        "id": 239607317,
        "sender_full_name": "nagisa",
        "timestamp": 1621523115
    },
    {
        "content": "<p>and I + <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> been reviewing a lot of it.</p>",
        "id": 239607398,
        "sender_full_name": "nagisa",
        "timestamp": 1621523148
    },
    {
        "content": "<p>thanks for the info, I'll mention them both in the issue :-)</p>",
        "id": 239607510,
        "sender_full_name": "apiraino",
        "timestamp": 1621523186
    },
    {
        "content": "<p>As far as I know this also impacts other cross compilation targets and is caused by the crate resolution<br>\nFor some reason the crate is imported twice with different ids</p>",
        "id": 239607583,
        "sender_full_name": "Dennis Kobert(TrueDoctor)",
        "timestamp": 1621523215
    },
    {
        "content": "<p>when using the explicit  <code>extern crate</code> the issue goes away</p>",
        "id": 239607688,
        "sender_full_name": "Dennis Kobert(TrueDoctor)",
        "timestamp": 1621523250
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"412622\">@Dennis Kobert(TrueDoctor)</span> that sounds like the #5xxxx issue that was linked somewhere</p>",
        "id": 239607700,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1621523254
    },
    {
        "content": "<p>It's a known bug in resolve</p>",
        "id": 239607728,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1621523263
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/56935\">https://github.com/rust-lang/rust/issues/56935</a><br>\nyes, this issue</p>",
        "id": 239607888,
        "sender_full_name": "Dennis Kobert(TrueDoctor)",
        "timestamp": 1621523300
    },
    {
        "content": "<p>Cool, so I think the wasm one should be closed as a duplicate</p>",
        "id": 239607952,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1621523321
    },
    {
        "content": "<p>The scenario described in there currently causes an error and not an ICE though, so there seem to have been some changes made</p>",
        "id": 239608072,
        "sender_full_name": "Dennis Kobert(TrueDoctor)",
        "timestamp": 1621523356
    },
    {
        "content": "<p><code>pub use proc_macros::{ToDiscriminant, TransitiveChild};</code> -&gt; ICE<br>\n<code>pub use proc_macros::{ToDiscriminant};</code> -&gt; Error</p>",
        "id": 239608167,
        "sender_full_name": "Dennis Kobert(TrueDoctor)",
        "timestamp": 1621523397
    },
    {
        "content": "<p>I also added a comment to the #5xx issue</p>",
        "id": 239608288,
        "sender_full_name": "Dennis Kobert(TrueDoctor)",
        "timestamp": 1621523426
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202021-05-20.20.2354818/near/239607952\">said</a>:</p>\n<blockquote>\n<p>Cool, so I think the wasm one should be closed as a duplicate</p>\n</blockquote>\n<p>I did get a second different ICE while debugging this</p>",
        "id": 239608365,
        "sender_full_name": "Dennis Kobert(TrueDoctor)",
        "timestamp": 1621523461
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error: internal compiler error: expansion entered force mode without producing any errors\n --&gt; core/editor/src/communication/document_action_handler.rs:7:1\n  |\n7 | #[impl_message(Message, Document)]\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: delayed at compiler/rustc_expand/src/expand.rs:450:34\n\nthread &#39;rustc&#39; panicked at &#39;no errors encountered even though `delay_span_bug` issued&#39;, compiler/rustc_errors/src/lib.rs:1013:13\nstack backtrace:\n</code></pre></div>\n<p>Not sure if that is just noise though</p>",
        "id": 239608610,
        "sender_full_name": "Dennis Kobert(TrueDoctor)",
        "timestamp": 1621523542
    },
    {
        "content": "<p>But feel free to close the issue, this is all well above my league xD</p>",
        "id": 239608794,
        "sender_full_name": "Dennis Kobert(TrueDoctor)",
        "timestamp": 1621523619
    }
]