[
    {
        "content": "<p>Opinions on adding some async runtime to bootstrap? I think there's some potential to execute steps in parallel but getting <code>ensure()</code> to juggle the output values of multiple tasks starts to look a lot like futures. The other option is to handroll it with a blocking thread per step and converting all cells to mutexes.</p>",
        "id": 254844776,
        "sender_full_name": "The 8472",
        "timestamp": 1632580805
    },
    {
        "content": "<p>I don't think we should be trying to execute steps in parallel at this point -- most of the steps are inherently internally parallel already, though, so the intent is that singlethreaded bootstrap is fine.</p>\n<p>Can you say more about why you want to parallelize steps, or which ones?</p>",
        "id": 254845406,
        "sender_full_name": "simulacrum",
        "timestamp": 1632581394
    },
    {
        "content": "<p>well, it's mostly that I see cpu utilization often dropping to 1 or a few cores during builds, leaving throughput on the table where some of the smaller steps could fit in</p>",
        "id": 254845492,
        "sender_full_name": "The 8472",
        "timestamp": 1632581459
    },
    {
        "content": "<p>Which steps does it drop down to 1 in, and which steps could fill in? Most of the time my expectation is that this happens e.g. during rustc compilation and you <em>could</em> be building compiletest, but that is a pretty rare thing to actually occur in practice</p>",
        "id": 254845629,
        "sender_full_name": "simulacrum",
        "timestamp": 1632581563
    },
    {
        "content": "<p>(since compiletest is cached off bootstrap)</p>",
        "id": 254845636,
        "sender_full_name": "simulacrum",
        "timestamp": 1632581570
    },
    {
        "content": "<p>yeah, building rustc would be one case. rustdoc too iirc or some of the other tools. I haven't made a list.</p>",
        "id": 254845744,
        "sender_full_name": "The 8472",
        "timestamp": 1632581668
    },
    {
        "content": "<p>but what are you expecting to put in that slot?</p>",
        "id": 254845799,
        "sender_full_name": "simulacrum",
        "timestamp": 1632581744
    },
    {
        "content": "<p>like, just because CPU is not 100% doesn't mean we have something to fill in with, necessarily</p>",
        "id": 254845812,
        "sender_full_name": "simulacrum",
        "timestamp": 1632581758
    },
    {
        "content": "<p>FWIW, we do upload CPU usage metrics from our CI builders, e.g., here are the x86_64-gnu and dist-x86_64-linux builders respectively</p>\n<p><a href=\"/user_uploads/4715/Rv6EDcHK2urRehrZMhdNrtrB/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/Rv6EDcHK2urRehrZMhdNrtrB/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/Rv6EDcHK2urRehrZMhdNrtrB/image.png\"></a></div><p><a href=\"/user_uploads/4715/HmeQGfNLhuTAE656nR4R9P1b/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/HmeQGfNLhuTAE656nR4R9P1b/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/HmeQGfNLhuTAE656nR4R9P1b/image.png\"></a></div>",
        "id": 254845907,
        "sender_full_name": "simulacrum",
        "timestamp": 1632581835
    },
    {
        "content": "<p>how many cores? amdahl's law gets worse when you have more.</p>",
        "id": 254845984,
        "sender_full_name": "The 8472",
        "timestamp": 1632581889
    },
    {
        "content": "<p>to some extent, improving these via targeted adjustments in bootstrap is fine -- but I think parallelism on the bootstrap layer would add quite a bit of complexity</p>",
        "id": 254845988,
        "sender_full_name": "simulacrum",
        "timestamp": 1632581892
    },
    {
        "content": "<p>CI I think has 8? Not sure</p>",
        "id": 254845995,
        "sender_full_name": "simulacrum",
        "timestamp": 1632581899
    },
    {
        "content": "<p>that's tiny</p>",
        "id": 254846006,
        "sender_full_name": "The 8472",
        "timestamp": 1632581913
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/UecQL1MNsYJN4sQW3jCL5oQy/dist.png\">dist.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/UecQL1MNsYJN4sQW3jCL5oQy/dist.png\" title=\"dist.png\"><img src=\"/user_uploads/4715/UecQL1MNsYJN4sQW3jCL5oQy/dist.png\"></a></div>",
        "id": 254846048,
        "sender_full_name": "The 8472",
        "timestamp": 1632581962
    },
    {
        "content": "<p>but the core count doesn't really matter, in theory</p>",
        "id": 254846064,
        "sender_full_name": "simulacrum",
        "timestamp": 1632581979
    },
    {
        "content": "<p>sequential bottlenecks mean lots of CPU-cycles left unused</p>",
        "id": 254846077,
        "sender_full_name": "The 8472",
        "timestamp": 1632581997
    },
    {
        "content": "<p>Sure? If you have concrete bottlenecks and stuff that can fill them, we can discuss how to avoid that -- my impression historically has been that most of those bottlenecks are not solvable through parallelism (we actually do have a dependency)</p>",
        "id": 254846197,
        "sender_full_name": "simulacrum",
        "timestamp": 1632582049
    },
    {
        "content": "<p>or, if they are, then the parallelism need not be inside rustbuild (e.g., Cargo runs rustdoc --test and libtest \"crates\" sequentially today, but could in theory do so in parallel if we had jobserver integration inside libtest. But that's not trivial.)</p>",
        "id": 254846239,
        "sender_full_name": "simulacrum",
        "timestamp": 1632582108
    },
    {
        "content": "<p>well, one issue is that when I do a stage 1 benchmark and change RUSTFLAGS it rebuilds everything, so some stage0 stuff could be built while it's doing stage1 rustc</p>",
        "id": 254846292,
        "sender_full_name": "The 8472",
        "timestamp": 1632582129
    },
    {
        "content": "<p>you mean like compiletest and such?</p>",
        "id": 254846309,
        "sender_full_name": "simulacrum",
        "timestamp": 1632582157
    },
    {
        "content": "<p>Yeah, I mean, that's true</p>",
        "id": 254846311,
        "sender_full_name": "simulacrum",
        "timestamp": 1632582161
    },
    {
        "content": "<p>yeah</p>",
        "id": 254846313,
        "sender_full_name": "The 8472",
        "timestamp": 1632582162
    },
    {
        "content": "<p>to some extent that's because we don't have a great way to thread rustflags through in a way that doesn't affect compiletest (which you probably don't <em>actually</em> want to recompile)</p>",
        "id": 254846358,
        "sender_full_name": "simulacrum",
        "timestamp": 1632582218
    },
    {
        "content": "<p>but rustbuild already is not the best at managing to keep track of dependency edges in a sequential world, I think parallelism would just make the amount of bugs we have even worse. It'd also make it harder for users to understand what is going on and increase memory requirements, so it's not a win for everyone.</p>",
        "id": 254846487,
        "sender_full_name": "simulacrum",
        "timestamp": 1632582294
    },
    {
        "content": "<p>yeah it would definitely have to be opt in. I tried cobbling something together with threads and it's several screens full of mutex poisons :D</p>",
        "id": 254846598,
        "sender_full_name": "The 8472",
        "timestamp": 1632582402
    },
    {
        "content": "<p>and I'm very wary of increasing rustbuild compile times, fwiw</p>",
        "id": 254846741,
        "sender_full_name": "simulacrum",
        "timestamp": 1632582528
    },
    {
        "content": "<p>Another case are the tool builds during <code>dist</code>. It doesn't affect me much since I don't do it often but it could speed up CI.</p>",
        "id": 254846748,
        "sender_full_name": "The 8472",
        "timestamp": 1632582535
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/242791-t-infra/topic/async.20in.20bootstrap.3F/near/254846741\">said</a>:</p>\n<blockquote>\n<p>and I'm very wary of increasing rustbuild compile times, fwiw</p>\n</blockquote>\n<p>oh speaking of which - I had some ideas about decreasing compile times for rustbuild itself the other day and forgot to write them down. In particular I remember</p>\n<ul>\n<li>bootstrap.py rebuilds when config.toml changes (maybe it's trying to apply debug assertions to rustbuild itself or something?)</li>\n<li>bootstrap.py uses <code>-Cdebuginfo=2</code> which presumably slows things down - do we actually need debug info? and if so, can we bring it down to debuginfo=1 instead?</li>\n<li>bootstrap.py applies <code>-Cdebuginfo=2</code> to all dependencies, not just bootstrap itself - this definitely seems unnecessary</li>\n</ul>",
        "id": 254847594,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1632583317
    },
    {
        "content": "<p>only line tables are probably fine</p>",
        "id": 254853516,
        "sender_full_name": "simulacrum",
        "timestamp": 1632588780
    },
    {
        "content": "<p>we added debuginfo because otherwise people seeing panics in the wild is a lost cause to debug</p>",
        "id": 254853526,
        "sender_full_name": "simulacrum",
        "timestamp": 1632588793
    },
    {
        "content": "<p>you mean rustbuild panics? those seem pretty rare</p>",
        "id": 254853545,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1632588821
    },
    {
        "content": "<p>yeah, they're rarer now, but I think it's worth keeping at least =1</p>",
        "id": 254853600,
        "sender_full_name": "simulacrum",
        "timestamp": 1632588844
    },
    {
        "content": "<p>we also probably want it for build_helper, fwiw</p>",
        "id": 254853609,
        "sender_full_name": "simulacrum",
        "timestamp": 1632588855
    },
    {
        "content": "<p>(mainly to make sure backtraces are ok)</p>",
        "id": 254853625,
        "sender_full_name": "simulacrum",
        "timestamp": 1632588869
    },
    {
        "content": "<p>I wish cargo had an option for \"apply these flags to all crates in the workspace\"</p>",
        "id": 254853635,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1632588880
    },
    {
        "content": "<p>the only knobs I know are RUSTFLAGS and <code>cargo rustc</code></p>",
        "id": 254853656,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1632588901
    },
    {
        "content": "<p>you can do it within Cargo.toml, I believe</p>",
        "id": 254853660,
        "sender_full_name": "simulacrum",
        "timestamp": 1632588905
    },
    {
        "content": "<p>oh good point <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 254853667,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1632588913
    },
    {
        "content": "<p>not sure about workspace, but definitely individual crates</p>",
        "id": 254853671,
        "sender_full_name": "simulacrum",
        "timestamp": 1632588915
    },
    {
        "content": "<p>yeah you can do non-workspace, so by resetting everything can do workspace: <a href=\"https://doc.rust-lang.org/cargo/reference/profiles.html#overrides\">https://doc.rust-lang.org/cargo/reference/profiles.html#overrides</a></p>",
        "id": 254853742,
        "sender_full_name": "simulacrum",
        "timestamp": 1632588964
    },
    {
        "content": "<p>I don't know that those are usable from env variables though, it'd be a bit of a pain otherwise</p>",
        "id": 254853754,
        "sender_full_name": "simulacrum",
        "timestamp": 1632588983
    },
    {
        "content": "<p>nah you're right cargo.toml is a lot simpler, and then we can stop adding so many flags in bootstrap.py</p>",
        "id": 254853871,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1632589091
    },
    {
        "content": "<p>I think env variables override it but since we're not really doing anything with rustbuild (e.g., no dist) it seems ok for config.toml to not affect it.</p>",
        "id": 254859320,
        "sender_full_name": "simulacrum",
        "timestamp": 1632593877
    }
]