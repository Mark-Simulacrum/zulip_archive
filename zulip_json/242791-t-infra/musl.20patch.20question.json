[
    {
        "content": "<p>I'm working on fixing <a href=\"https://github.com/rust-lang/rust/issues/90103\">#90103</a>. The gist of it is that if you try to get a backtrace (either from gdb or as part of a crash dump) while a Rust application built with the <code>-musl</code> targets is in the middle of a syscall, gdb can't properly walk the stack and you get garbage. Even after enabling debug info for musl this still doesn't work because we also need <a href=\"https://sourceware.org/binutils/docs/as/CFI-directives.html\">CFI directives</a> to be included in musl's assembly and there is a bug with musl's configure script when invoked from musl-cross-make. <a href=\"https://www.openwall.com/lists/musl/2021/10/21/2\">I've sent a patch upstream for that.</a></p>\n<p>To actually close this issue out, we need to start building musl with this patch (and debug info enabled). There's a few different ways I can see us doing that:</p>\n<ol>\n<li>Fork musl, apply the patch there and update our build scripts to use that fork.</li>\n<li>Fork musl-cross-make, add the patch into <a href=\"https://github.com/richfelker/musl-cross-make/tree/master/patches\">their patches folder</a> so it is applied before building musl and update our build scripts to use that fork. </li>\n<li>Store <a href=\"https://github.com/wesleywiser/musl-cross-make/commit/de8303aa6ed5b74e7bfc706330b6eac1ba6490be\">the patch</a> in tree (perhaps next to the build script) and copy it into the appropriate folder after cloning musl-cross-make.</li>\n</ol>\n<p>I don't think any of these will be significantly harder or easier to do than any of the others. Personally, I'm leaning toward option 3 since we don't have to fork and manage another repo. </p>\n<p>Do y'all have a preference?</p>",
        "id": 259925029,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1635802698
    },
    {
        "content": "<p>Are we expecting a long delay for the patch to be merged upstream and available to us?</p>",
        "id": 259930008,
        "sender_full_name": "simulacrum",
        "timestamp": 1635805739
    },
    {
        "content": "<p>(that is, why is option 4 - wait on the upstream merge and bump the version we use, not viable?)</p>",
        "id": 259930046,
        "sender_full_name": "simulacrum",
        "timestamp": 1635805773
    },
    {
        "content": "<p>But yeah option 3 seems ok - we'll want to make sure distros can work well with it, but I suspect that'll amount to them applying that patch to their own build scripts or just accepting not working</p>",
        "id": 259930189,
        "sender_full_name": "simulacrum",
        "timestamp": 1635805873
    },
    {
        "content": "<p>I am a little worried about us building musl with debuginfo increasing binary sizes in a painful way for folks - I guess stripping will still help.</p>",
        "id": 259930339,
        "sender_full_name": "simulacrum",
        "timestamp": 1635805998
    },
    {
        "content": "<p>Is glibc just usually built with debuginfo I guess?</p>",
        "id": 259930359,
        "sender_full_name": "simulacrum",
        "timestamp": 1635806015
    },
    {
        "content": "<p>glibc is usually built with detached debug symbols.</p>",
        "id": 259930433,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1635806059
    },
    {
        "content": "<p>And those are installed when (for example) gdb is installed as a suggestion? (Mainly wondering why I haven't seen this failure mode).</p>\n<p>How large is the size delta for debuginfo here?</p>",
        "id": 259932748,
        "sender_full_name": "simulacrum",
        "timestamp": 1635807791
    },
    {
        "content": "<p>No, gdb doesn't forcibly pull in glibc debug symbols, though some distributions have started using a debug-info-on-demand server.</p>",
        "id": 259967742,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1635843553
    },
    {
        "content": "<p>Regarding size, on my system the separate debug symbols for glibc are twice as big as the library itself.</p>",
        "id": 259968034,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1635843687
    },
    {
        "content": "<p>Oh, but looking at it, it looks like even the stripped glibc still has the .eh_frame section, which has the unwinding information. That's where the CFI information goes.</p>",
        "id": 259968225,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1635843814
    },
    {
        "content": "<p>Whereas the musl static library on my system doesn't have a .eh_frame section (though the dynamic library does).</p>",
        "id": 259968373,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1635843907
    },
    {
        "content": "<p>And for an idea of size, on my system glibc's <code>/lib/x86_64-linux-gnu/libc-2.32.so</code> is 1839168 bytes, and its <code>.eh_frame</code> is 25244 bytes.</p>",
        "id": 259969040,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1635844342
    },
    {
        "content": "<p>For musl I'd expect <code>.eh_frame</code> to be smaller.</p>",
        "id": 259969080,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1635844372
    },
    {
        "content": "<p>On my system, musl's <code>/lib/x86_64-linux-musl/libc.so</code> is 707056 bytes, and its <code>.eh_frame</code> is 44  bytes. (That seems surprisingly small, to the point that I wonder if it's actually correct...)</p>",
        "id": 259969285,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1635844527
    },
    {
        "content": "<p>Ah, I think that <em>is</em> wrong. It's only the eh_frame for some generated code (the PLT, I think), not for the library itself.</p>",
        "id": 259969951,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1635844966
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/242791-t-infra/topic/musl.20patch.20question/near/259930008\">said</a>:</p>\n<blockquote>\n<p>Are we expecting a long delay for the patch to be merged upstream and available to us?</p>\n</blockquote>\n<p>Good question. Looking at their release history, it seems like there's usually a release every ~4 months or so with a fair amount of variation. However, there hasn't been a release this year since January. I'd rather not wait on them to create another release before we can resolve this since a team I'm working with at MS brought it up as an issue they're hitting. </p>\n<p>Unless you just mean, it's merged into master upstream? I posted this about a week and half ago and it hasn't been acknowledged yet. I don't have much experience with mailing-list based projects so I'm not sure what their norms are with regards to this kind of thing. I was going to let it sit a few more days before sending a follow up message.</p>",
        "id": 260000112,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1635862211
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/242791-t-infra/topic/musl.20patch.20question/near/259930339\">said</a>:</p>\n<blockquote>\n<p>I am a little worried about us building musl with debuginfo increasing binary sizes in a painful way for folks - I guess stripping will still help.</p>\n</blockquote>\n<p>For people concerned with binary size, I would think they're already stripping their binaries so they shouldn't really be impacted. <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span>'s numbers seem about right to me but I will do some builds and get exact numbers. I'll also grab numbers for \"Rust hello world\" in a few different configurations (debug, release, release w/ strip) so we can see what worst case numbers probably look like.</p>",
        "id": 260000610,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1635862423
    },
    {
        "content": "<p>OK. Yeah, I don't mind too much if we have our own patch but I also know the musl folks are generally fairly active when poked (or that's been my impression) and would be great to not have an out-of-tree patch. Since it's just build system related I'm not too worried though.</p>",
        "id": 260006680,
        "sender_full_name": "simulacrum",
        "timestamp": 1635865001
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/242791-t-infra/topic/musl.20patch.20question/near/260006680\">said</a>:</p>\n<blockquote>\n<p>would be great to not have an out-of-tree patch. Since it's just build system related I'm not too worried though.</p>\n</blockquote>\n<p>100% agree! I just want to minimize the amount of time this continues to be broken for users.</p>",
        "id": 260007292,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1635865218
    },
    {
        "content": "<p>So for hello world, the results look like this:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>debug</th>\n<th>release</th>\n<th>release + strip</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>without musl debuginfo</td>\n<td>507kb</td>\n<td>495kb</td>\n<td>410kb</td>\n</tr>\n<tr>\n<td>with musl debuginfo</td>\n<td>874kb</td>\n<td>862kb</td>\n<td>410kb</td>\n</tr>\n</tbody>\n</table>\n<p>It's unfortunate that we do see the ~370kb increase in size but it is just debuginfo and stripping the binary puts us right back to where we are currently (down to the byte). For anyone concerned with binary size, stripping the binary is the first and easiest thing to do so this seems acceptable to me.</p>",
        "id": 260326578,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1636056247
    },
    {
        "content": "<p>yeah seems ok</p>",
        "id": 260326637,
        "sender_full_name": "simulacrum",
        "timestamp": 1636056277
    },
    {
        "content": "<p>Cool! I'll open a PR that contains this patch then and I'll also bump that thread upstream to see if they'll merge it.</p>",
        "id": 260326935,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1636056400
    },
    {
        "content": "<p>Would it be possible to make it conditional on debug info?</p>",
        "id": 260459426,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1636143618
    },
    {
        "content": "<p>As in, if debug info is enabled, include this too?</p>",
        "id": 260459461,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1636143637
    },
    {
        "content": "<p>I think that would mean we'd have to switch which crt artifacts we're linking to depending on <code>-g</code>?</p>",
        "id": 260463824,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1636145880
    },
    {
        "content": "<p>Actually, I think we've already statically linked musl into libstd for the x86{,_64} musl targets since they default to static linking right?</p>",
        "id": 260463951,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1636145938
    },
    {
        "content": "<p>So it's too late to link a different one.</p>",
        "id": 260463972,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1636145948
    }
]