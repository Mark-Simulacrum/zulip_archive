[
    {
        "content": "<p>Currently bors queue lands prs one by one, however when a previous job is running the merged commit is already created, and actually it is possible to merge next job onto that and create a \"upcoming\" ci job... So if there's enough machines, multiple jobs can actually run together (optimistically), right?</p>",
        "id": 242729836,
        "sender_full_name": "Charles Lew",
        "timestamp": 1623762814
    },
    {
        "content": "<p>we don't have enough concurrency for that :(</p>",
        "id": 242730002,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1623762881
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121055\">@Pietro Albini</span> just to clarify what you mean by “not enough concurrency”: Do you mean we don’t have machine capacity (i.e., the “if there’s enough machines” in <span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span> ’s message is a false precondition)? Or do you mean that our CI infrastructure isn’t well set up to <em>express</em> the spawning of the parallel work here?</p>",
        "id": 242731169,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623763404
    },
    {
        "content": "<p>kinda both</p>",
        "id": 242731216,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1623763425
    },
    {
        "content": "<p>support in bors would have to be implemented, but we would also get over our GHA concurrency limit IIRC</p>",
        "id": 242731291,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1623763451
    },
    {
        "content": "<p>bors can't do it to my knowledge (would need impl work, possibly non trivial), and we don't currently have good monitoring of the concurrency we <em>are</em> using, so making judgements there is hard, but generally we've been on the \"try to not use too much more\"</p>",
        "id": 242731299,
        "sender_full_name": "simulacrum",
        "timestamp": 1623763454
    },
    {
        "content": "<p>Hmm. I’d <em>like</em> to believe that both of these problems are solvable. (Now, as to whether this kind of \"speculative bors run” would actually pay off, that’s a different matter… <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>)</p>",
        "id": 242731713,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623763651
    },
    {
        "content": "<p>well, yes, but I really doubt infra has the capacity to tackle any of those right now :(</p>",
        "id": 242731745,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1623763671
    },
    {
        "content": "<p>There was a CI product which provided guarantees much like what bors does, but was able to run multiple CI jobs at once, still.</p>",
        "id": 242738273,
        "sender_full_name": "nagisa",
        "timestamp": 1623766317
    },
    {
        "content": "<p>I recall it also had a kind of feature that allowed it to test multiple merges by running the last one and in case of the failure automatically discovering which of the merges introduced a fault and automatically removed it.</p>",
        "id": 242738512,
        "sender_full_name": "nagisa",
        "timestamp": 1623766406
    },
    {
        "content": "<p>Would be great if I remembered the name/website though, wouldn't need to recite what it did from memory T_T.</p>",
        "id": 242738554,
        "sender_full_name": "nagisa",
        "timestamp": 1623766427
    },
    {
        "content": "<p><a href=\"https://zuul-ci.org/docs/zuul/discussion/gating.html\">https://zuul-ci.org/docs/zuul/discussion/gating.html</a> maybe?</p>",
        "id": 242738842,
        "sender_full_name": "nagisa",
        "timestamp": 1623766542
    },
    {
        "content": "<p>Yeah, zuul is what you're thinking of. It was originally developed for OpenStack, and still primarily used by them, though the Zuul devs would love it if it were more widely used. (In a former life I worked on OpenStack, and Zuul providesr arm64 testing for the pyca/cryptography project nowadays.)</p>",
        "id": 242739480,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1623766799
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121055\">Pietro Albini</span> <a href=\"#narrow/stream/242791-t-infra/topic/Idea.3A.20Why.20not.20run.20bors.20queue.20multiple.20jobs.20together.3F/near/242731745\">said</a>:</p>\n<blockquote>\n<p>well, yes, but I really doubt infra has the capacity to tackle any of those right now :(</p>\n</blockquote>\n<p>I understand that completely.</p>",
        "id": 242744407,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623768689
    },
    {
        "content": "<p>How would that be different from rollups? That it's automated?</p>",
        "id": 242752498,
        "sender_full_name": "The 8472",
        "timestamp": 1623771382
    },
    {
        "content": "<p>Yeah, in many ways too: not only rollups are executed at all times, it also auto-blames merges for the cause of failure and automatically excludes them from the testing too.</p>",
        "id": 242754312,
        "sender_full_name": "nagisa",
        "timestamp": 1623772089
    },
    {
        "content": "<p>In majority of the cases rollups would also be naturally much smaller, which helps with bisecting etc.</p>",
        "id": 242754509,
        "sender_full_name": "nagisa",
        "timestamp": 1623772163
    },
    {
        "content": "<p>So, it builds A, A+B, A+B+C, and so on, and merges all the ones that work while stopping and re-constructing if one of them fails?</p>",
        "id": 242827857,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1623815917
    },
    {
        "content": "<p>If it has A, B, and C to build, it builds <code>C</code> assuming that <code>A</code> and <code>B</code> already succeeded, and if the build of <code>C</code> succeeds, it merges all three of them (i.e. a lot like a rollup). And if one of them fails, it knows how to exclude it from the chain and merge the other commits still.</p>",
        "id": 242854323,
        "sender_full_name": "nagisa",
        "timestamp": 1623835730
    },
    {
        "content": "<p>That's how I understand it, anyway.</p>",
        "id": 242854481,
        "sender_full_name": "nagisa",
        "timestamp": 1623835803
    },
    {
        "content": "<p>the way it knows how / what to exclude is that is also tests the shorter chains in parallel</p>",
        "id": 242905411,
        "sender_full_name": "cuviper",
        "timestamp": 1623860696
    }
]