[
    {
        "content": "<p>As part of a discussion related to optimization and SIMD, I wanted to get some information on the infra implications of building additional copies of std with different target feature optimizations. Suppose, for instance, we wanted to build a second copy of std optimized for a certain set of target features (e.g. x86-64-v3) and teach rustc to use that copy when targeting that set of target features. That'd add a few minutes of build time to the x86-64 build, and then one extra copy of std (which could either be shipped in an existing rustup component or in a separate component).</p>",
        "id": 227030543,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1613769742
    },
    {
        "content": "<p>Would that potentially be feasible? Would that cause any major problems on the infra side of things?</p>",
        "id": 227030591,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1613769775
    },
    {
        "content": "<p>(Assuming that the requisite compiler and build system improvements to handle that were implemented.)</p>",
        "id": 227030622,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1613769794
    },
    {
        "content": "<p>I'm not on T-infra, but compiling libstd doesn't take terribly long, maybe 3 minutes on a bad day</p>",
        "id": 227030687,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613769841
    },
    {
        "content": "<p>Right. So, compile time would <em>probably</em> not be an issue on most targets (and we wouldn't be adding this to every target anyway)?</p>",
        "id": 227030778,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1613769885
    },
    {
        "content": "<p>I'd imagine that the additional storage requirements of shipping more copies of std would be the main issue.</p>",
        "id": 227030814,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1613769910
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span></p>",
        "id": 227030835,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1613769917
    },
    {
        "content": "<p>for reference, <code>rust-std-1.50.0-x86_64-unknown-linux-gnu</code> is 41.75 MiB <code>.tar.gz</code>, 24.46 MiB <code>.tar.xz</code></p>",
        "id": 227031486,
        "sender_full_name": "cuviper",
        "timestamp": 1613770255
    },
    {
        "content": "<p>and 124M installed</p>",
        "id": 227031725,
        "sender_full_name": "cuviper",
        "timestamp": 1613770381
    },
    {
        "content": "<p>(That makes a compelling argument for dropping .tar.gz eventually for new versions.)</p>",
        "id": 227031887,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1613770456
    },
    {
        "content": "<p>I don't think the installed size is a critical issue. If people deeply care we could potentially provide a separate rustup component. On the other hand, I wouldn't be surprised if putting multiple versions in the <em>same</em> rustup component would provide substantial compression benefits.</p>",
        "id": 227032215,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1613770651
    },
    {
        "content": "<p>If we weren't worried about installed size, and (say) adding 1-2 more copies of std made the std <code>.tar.xz</code> go to (say) 40-50MiB, how much of an imposition on infra would that be?</p>",
        "id": 227032371,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1613770725
    },
    {
        "content": "<p>hallo.</p>",
        "id": 227032607,
        "sender_full_name": "Jubilee",
        "timestamp": 1613770857
    },
    {
        "content": "<p>For people who may not be aware of what \"v3\" might mean, it roughly equates to \"an x86_64 CPU made in the last 7 years, so basically anything from Intel or AMD you can buy today.\" The problem is essentially that x86_64 implies only the baseline established 22 years ago, and there's a lot of possible target features that have been created since then.</p>\n<p>So if I was e.g. wanting to ship a game with reasonably complex math code, I would like to compile it targeting v3, and possibly v2 for older PCs, and have an installer (or a website, or something) pick which to download and install based on what was present. I would also like to not have to have the absolutely horrendous amount of cursed knowledge that Jubilee has been accumulating about the x86_64 architecture, so I would probably like to be able to just target v2 and v3 instead of having to know intimate details of how every target feature works and which I can use. :^)</p>",
        "id": 227033819,
        "sender_full_name": "Jubilee",
        "timestamp": 1613771521
    },
    {
        "content": "<p>If I am a ~DATA SCIENTIST~ using a recent Intel machine I would like to use v4 so I can be confident I am using \"AVX512 instructions, considered generically\", and again not have to have the huge piles of cursed knowledge that Jubilee has been accumulating regarding how AVX512 works, I just want to see the assembly have all those pretty incomprehensible huge names in it.</p>\n<p>But I would not do this for a game, because then my game would not run on all the Ryzen CPUs people are buying up lately.</p>",
        "id": 227036535,
        "sender_full_name": "Jubilee",
        "timestamp": 1613772469
    },
    {
        "content": "<p>fweimer tried to get Fedora to move to AVX2 (roughly v3, but this was before those were defined)</p>",
        "id": 227036844,
        "sender_full_name": "cuviper",
        "timestamp": 1613772559
    },
    {
        "content": "<p>there was much ado</p>",
        "id": 227036874,
        "sender_full_name": "cuviper",
        "timestamp": 1613772572
    },
    {
        "content": "<p>rejected: <a href=\"https://fedoraproject.org/wiki/Changes/x86-64_micro-architecture_update\">https://fedoraproject.org/wiki/Changes/x86-64_micro-architecture_update</a></p>",
        "id": 227037024,
        "sender_full_name": "cuviper",
        "timestamp": 1613772605
    },
    {
        "content": "<p>People care a lot about older computers. (There's valid equity reasons to care about older x86 CPUs I think, but truth be told I feel like most of the complaints I hear are from people who just like retro stuff.)</p>",
        "id": 227037115,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1613772634
    },
    {
        "content": "<p>Yeah, the nice thing that having multiple levels available would give would actually precisely be that it makes it easy to compile for \"a somewhat old, but not literally 20 years old\" machine, while also enabling you to easily switch up when you're expecting more modern features, or just not and shipping a \"no really, any x64 machine\" binary.</p>",
        "id": 227037393,
        "sender_full_name": "Jubilee",
        "timestamp": 1613772722
    },
    {
        "content": "<p>also note that Intel is still producing new Atoms without AVX, so v2 will stick around for some time yet</p>",
        "id": 227038806,
        "sender_full_name": "cuviper",
        "timestamp": 1613773219
    },
    {
        "content": "<p>I mean all my computers are used, personally, so I'm definitely part of the reason why it would. :^)</p>",
        "id": 227038966,
        "sender_full_name": "Jubilee",
        "timestamp": 1613773315
    },
    {
        "content": "<p>Are there any reasons \"more targets\" and \"make -Zbuild-std a first class citizen\" is not the optimal solution for this?</p>",
        "id": 227040076,
        "sender_full_name": "nagisa",
        "timestamp": 1613773908
    },
    {
        "content": "<p>AFAIK we don't really have any pushback for shipping libstd for more targets, maybe building it is a bigger issue because it requires CI resources.</p>",
        "id": 227040270,
        "sender_full_name": "nagisa",
        "timestamp": 1613773985
    },
    {
        "content": "<p>Hm. It's a slightly weird and nebulous relationship with the concept of \"target\", given that something built with a target triple + a -Ctarget-feature is... technically still built for that target triple, even though it's actually only built for a subset, now.</p>\n<p>And to be honest, -Zbuild-std came up early in the discussion we were having, but there was at least some pushback from people who were suspicious of adding \"rebuild some or all of std\" to compile time.</p>",
        "id": 227040931,
        "sender_full_name": "Jubilee",
        "timestamp": 1613774361
    },
    {
        "content": "<p>-Zbuild-std enables people to make sure std is built for exactly the thing they want to target. It is quite unlikely that it'd make sense to add a full target and distribution artifacts for all variations of architectures that people want to use. But having a couple well known targets and an easy way to target whatever would strike a balance I feel.</p>",
        "id": 227041297,
        "sender_full_name": "nagisa",
        "timestamp": 1613774592
    },
    {
        "content": "<p>MIR-only-rlibs also come into equation here to some extent in that codegen backends could optimize for a more precise targets.</p>",
        "id": 227041490,
        "sender_full_name": "nagisa",
        "timestamp": 1613774679
    },
    {
        "content": "<p>MIR-only would be missing specific cfg-target-feature resolution though, no?</p>",
        "id": 227041598,
        "sender_full_name": "cuviper",
        "timestamp": 1613774755
    },
    {
        "content": "<p>In some specific ways, yes. For instance runtime checks wouldn't get elided for <code>is_*_feature_detected</code>s either.</p>",
        "id": 227041772,
        "sender_full_name": "nagisa",
        "timestamp": 1613774844
    },
    {
        "content": "<p>I would love to see -Zbuild-std become first-class, but I expect that to take significantly longer to stabilize.</p>",
        "id": 227052153,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1613782039
    },
    {
        "content": "<p>And even with that, it would make sense to have pre-built versions for the most common target feature configurations, to speed up the common case.</p>",
        "id": 227052250,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1613782105
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/242791-t-infra/topic/building.20additional.20copies.20of.20std/near/227040270\">said</a>:</p>\n<blockquote>\n<p>AFAIK we don't really have any pushback for shipping libstd for more targets, maybe building it is a bigger issue because it requires CI resources.</p>\n</blockquote>\n<p>I wouldn't be particularly concerned about the build time, since it just has to build libstd, not all of rustc itself.</p>",
        "id": 227052276,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1613782137
    },
    {
        "content": "<p>Building just the libstd would imply not running tests for the target too I think, at least not most of them.</p>",
        "id": 227092795,
        "sender_full_name": "nagisa",
        "timestamp": 1613828949
    },
    {
        "content": "<p>which I think would disqualify the target from becoming a T1.</p>",
        "id": 227092809,
        "sender_full_name": "nagisa",
        "timestamp": 1613828966
    },
    {
        "content": "<p>I would rather have this as part of an existing target, but in any case, yes, I would expect to run the std-specific tests at least.</p>",
        "id": 227152139,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1613895325
    }
]