[
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/76446#issuecomment-688433733\">https://github.com/rust-lang/rust/pull/76446#issuecomment-688433733</a>:</p>\n<blockquote>\n<p>I suspect having two workspaces in rust-lang/rust might be a good idea long-term regardless to lessen various other pains, so I wouldn't mind having a dedicated library workspace. That'll take some work, though.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> do you have suggestions for getting started with this?</p>",
        "id": 209466743,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599619635
    },
    {
        "content": "<p>Not really, beyond just doing it and looking at errors that result.</p>",
        "id": 209467081,
        "sender_full_name": "simulacrum",
        "timestamp": 1599620149
    },
    {
        "content": "<p>well, adding <code>[workspace]</code> to <code>library/test/Cargo.toml</code> immediately comes up with 151 of</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0412</span><span class=\"p\">]</span>: <span class=\"nc\">cannot</span><span class=\"w\"> </span><span class=\"n\">find</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"n\">c_void</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">crate</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">-</span>-&gt; <span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">joshua</span><span class=\"o\">/</span><span class=\"p\">.</span><span class=\"n\">local</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">cargo</span><span class=\"o\">/</span><span class=\"n\">registry</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">github</span><span class=\"p\">.</span><span class=\"n\">com</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"n\">ecc6299db9ec823</span><span class=\"o\">/</span><span class=\"n\">libc</span><span class=\"o\">-</span><span class=\"mf\">0.2.76</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">unix</span><span class=\"o\">/</span><span class=\"n\">linux_like</span><span class=\"o\">/</span><span class=\"n\">linux</span><span class=\"o\">/</span><span class=\"n\">gnu</span><span class=\"o\">/</span><span class=\"n\">b64</span><span class=\"o\">/</span><span class=\"n\">x86_64</span><span class=\"o\">/</span><span class=\"n\">not_x32</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">420</span>:<span class=\"mi\">22</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">420</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"n\">newp</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span>::<span class=\"n\">c_void</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                      </span><span class=\"o\">^^^^^^</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">crate</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 209467137,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599620201
    },
    {
        "content": "<p>not sure why yet</p>",
        "id": 209467138,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599620205
    },
    {
        "content": "<p>maybe it's conflicting with the top-level workspace?</p>",
        "id": 209467149,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599620228
    },
    {
        "content": "<p>wouldn't you want the workspace to be in <code>library</code> instead of <code>library/test</code>?</p>",
        "id": 209467364,
        "sender_full_name": "Jubilee",
        "timestamp": 1599620545
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> yes, but it's easy enough to change the file location and it's the same error in both places</p>",
        "id": 209467372,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599620575
    },
    {
        "content": "<p>ah</p>",
        "id": 209467379,
        "sender_full_name": "Jubilee",
        "timestamp": 1599620591
    },
    {
        "content": "<p>does it go away if you just dump all of the root's dependencies into a Cargo.toml in <code>./library</code>?</p>",
        "id": 209467441,
        "sender_full_name": "Jubilee",
        "timestamp": 1599620645
    },
    {
        "content": "<p>I don't quite follow</p>",
        "id": 209467580,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599620928
    },
    {
        "content": "<p>by root are you including the compiler too?</p>",
        "id": 209467581,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599620934
    },
    {
        "content": "<p>yeah, root of /rust/</p>",
        "id": 209467993,
        "sender_full_name": "Jubilee",
        "timestamp": 1599621535
    },
    {
        "content": "<p>oh right, that is it's own.... hm.</p>",
        "id": 209468062,
        "sender_full_name": "Jubilee",
        "timestamp": 1599621606
    },
    {
        "content": "<p>ok this is giving me some hints</p>\n<div class=\"codehilite\"><pre><span></span><code>diff --git a/Cargo.lock b/Cargo.lock\nindex b84f6ef51ac..ffdfbe541fa 100644\n--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -6,10 +6,7 @@ version = &quot;0.13.0&quot;\n source = &quot;registry+https://github.com/rust-lang/crates.io-index&quot;\n checksum = &quot;1b6a2d3371669ab3ca9797670853d61402b03d0b4b9ebf33d677dfa720203072&quot;\n dependencies = [\n- &quot;compiler_builtins&quot;,\n  &quot;gimli&quot;,\n- &quot;rustc-std-workspace-alloc&quot;,\n- &quot;rustc-std-workspace-core&quot;,\n ]\n</code></pre></div>",
        "id": 209468536,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599622226
    },
    {
        "content": "<p>let me try adding those</p>",
        "id": 209468542,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599622233
    },
    {
        "content": "<p>oh I was warmer than I thought, even!</p>",
        "id": 209468718,
        "sender_full_name": "Jubilee",
        "timestamp": 1599622458
    },
    {
        "content": "<p>hmm not sure how to actually add those dependencies</p>",
        "id": 209468844,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599622613
    },
    {
        "content": "<p>they only have <code>[patch.crates.io]</code> in the root cargo.toml</p>",
        "id": 209468850,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599622623
    },
    {
        "content": "<p>in the Cargo.toml they're added as patches, yes. Try that?</p>",
        "id": 209468854,
        "sender_full_name": "Jubilee",
        "timestamp": 1599622632
    },
    {
        "content": "<p>no dice</p>",
        "id": 209468870,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599622651
    },
    {
        "content": "<p>tried adding bootstrap as a member but that gives an error that it's a member of two workspaces</p>",
        "id": 209469037,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599622804
    },
    {
        "content": "<p>actually the very first error is</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0433]: failed to resolve: could not find `prelude` in `core`\n</code></pre></div>",
        "id": 209469331,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599623195
    },
    {
        "content": "<p>not making much progress here, going to work on <a href=\"https://github.com/rust-lang/compiler-team/issues/351\">https://github.com/rust-lang/compiler-team/issues/351</a> instead</p>",
        "id": 209469417,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599623319
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n\n<p>diff</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gh\">diff --git a/Cargo.toml b/Cargo.toml</span>\n<span class=\"gh\">index fde1cb5a35c..918ba3261f1 100644</span>\n<span class=\"gd\">--- a/Cargo.toml</span>\n<span class=\"gi\">+++ b/Cargo.toml</span>\n<span class=\"gu\">@@ -2,8 +2,6 @@</span>\n members = [\n   &quot;src/bootstrap&quot;,\n   &quot;compiler/rustc&quot;,\n<span class=\"gd\">-  &quot;library/std&quot;,</span>\n<span class=\"gd\">-  &quot;library/test&quot;,</span>\n   &quot;src/tools/cargotest&quot;,\n   &quot;src/tools/clippy&quot;,\n   &quot;src/tools/compiletest&quot;,\n<span class=\"gu\">@@ -34,40 +32,6 @@ exclude = [</span>\n   &quot;obj&quot;,\n ]\n\n<span class=\"gd\">-[profile.release.package.compiler_builtins]</span>\n<span class=\"gd\">-# The compiler-builtins crate cannot reference libcore, and it&#39;s own CI will</span>\n<span class=\"gd\">-# verify that this is the case. This requires, however, that the crate is built</span>\n<span class=\"gd\">-# without overflow checks and debug assertions. Forcefully disable debug</span>\n<span class=\"gd\">-# assertions and overflow checks here which should ensure that even if these</span>\n<span class=\"gd\">-# assertions are enabled for libstd we won&#39;t enable then for compiler_builtins</span>\n<span class=\"gd\">-# which should ensure we still link everything correctly.</span>\n<span class=\"gd\">-debug-assertions = false</span>\n<span class=\"gd\">-overflow-checks = false</span>\n<span class=\"gd\">-</span>\n<span class=\"gd\">-# For compiler-builtins we always use a high number of codegen units.</span>\n<span class=\"gd\">-# The goal here is to place every single intrinsic into its own object</span>\n<span class=\"gd\">-# file to avoid symbol clashes with the system libgcc if possible. Note</span>\n<span class=\"gd\">-# that this number doesn&#39;t actually produce this many object files, we</span>\n<span class=\"gd\">-# just don&#39;t create more than this number of object files.</span>\n<span class=\"gd\">-#</span>\n<span class=\"gd\">-# It&#39;s a bit of a bummer that we have to pass this here, unfortunately.</span>\n<span class=\"gd\">-# Ideally this would be specified through an env var to Cargo so Cargo</span>\n<span class=\"gd\">-# knows how many CGUs are for this specific crate, but for now</span>\n<span class=\"gd\">-# per-crate configuration isn&#39;t specifiable in the environment.</span>\n<span class=\"gd\">-codegen-units = 10000</span>\n<span class=\"gd\">-</span>\n<span class=\"gd\">-# These dependencies of the standard library implement symbolication for</span>\n<span class=\"gd\">-# backtraces on most platforms. Their debuginfo causes both linking to be slower</span>\n<span class=\"gd\">-# (more data to chew through) and binaries to be larger without really all that</span>\n<span class=\"gd\">-# much benefit. This section turns them all to down to have no debuginfo which</span>\n<span class=\"gd\">-# helps to improve link times a little bit.</span>\n<span class=\"gd\">-[profile.release.package]</span>\n<span class=\"gd\">-addr2line.debug = 0</span>\n<span class=\"gd\">-adler.debug = 0</span>\n<span class=\"gd\">-gimli.debug = 0</span>\n<span class=\"gd\">-miniz_oxide.debug = 0</span>\n<span class=\"gd\">-object.debug = 0</span>\n<span class=\"gd\">-</span>\n # We want the RLS to use the version of Cargo that we&#39;ve got vendored in this\n # repository to ensure that the same exact version of Cargo is used by both the\n # RLS and the Cargo binary itself. The RLS depends on Cargo as a git repository\n<span class=\"gu\">@@ -87,12 +51,6 @@ rustfmt-nightly = { path = &quot;src/tools/rustfmt&quot; }</span>\n # here\n rustc-workspace-hack = { path = &#39;src/tools/rustc-workspace-hack&#39; }\n\n<span class=\"gd\">-# See comments in `library/rustc-std-workspace-core/README.md` for what&#39;s going on</span>\n<span class=\"gd\">-# here</span>\n<span class=\"gd\">-rustc-std-workspace-core = { path = &#39;library/rustc-std-workspace-core&#39; }</span>\n<span class=\"gd\">-rustc-std-workspace-alloc = { path = &#39;library/rustc-std-workspace-alloc&#39; }</span>\n<span class=\"gd\">-rustc-std-workspace-std = { path = &#39;library/rustc-std-workspace-std&#39; }</span>\n<span class=\"gd\">-</span>\n # This crate&#39;s integration with libstd is a bit wonky, so we use a submodule\n # instead of a crates.io dependency. Make sure everything else in the repo is\n # also using the submodule, however, so we can avoid duplicate copies of the\n<span class=\"gh\">diff --git a/library/Cargo.toml b/library/Cargo.toml</span>\nnew file mode 100644\n<span class=\"gh\">index 00000000000..f0ea550b815</span>\n<span class=\"gd\">--- /dev/null</span>\n<span class=\"gi\">+++ b/library/Cargo.toml</span>\n<span class=\"gu\">@@ -0,0 +1,46 @@</span>\n<span class=\"gi\">+[workspace]</span>\n<span class=\"gi\">+members = [</span>\n<span class=\"gi\">+  &quot;./std&quot;,</span>\n<span class=\"gi\">+  &quot;./test&quot;,</span>\n<span class=\"gi\">+]</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+[profile.release.package.compiler_builtins]</span>\n<span class=\"gi\">+# The compiler-builtins crate cannot reference libcore, and it&#39;s own CI will</span>\n<span class=\"gi\">+# verify that this is the case. This requires, however, that the crate is built</span>\n<span class=\"gi\">+# without overflow checks and debug assertions. Forcefully disable debug</span>\n<span class=\"gi\">+# assertions and overflow checks here which should ensure that even if these</span>\n<span class=\"gi\">+# assertions are enabled for libstd we won&#39;t enable then for compiler_builtins</span>\n<span class=\"gi\">+# which should ensure we still link everything correctly.</span>\n<span class=\"gi\">+debug-assertions = false</span>\n<span class=\"gi\">+overflow-checks = false</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+# For compiler-builtins we always use a high number of codegen units.</span>\n<span class=\"gi\">+# The goal here is to place every single intrinsic into its own object</span>\n<span class=\"gi\">+# file to avoid symbol clashes with the system libgcc if possible. Note</span>\n<span class=\"gi\">+# that this number doesn&#39;t actually produce this many object files, we</span>\n<span class=\"gi\">+# just don&#39;t create more than this number of object files.</span>\n<span class=\"gi\">+#</span>\n<span class=\"gi\">+# It&#39;s a bit of a bummer that we have to pass this here, unfortunately.</span>\n<span class=\"gi\">+# Ideally this would be specified through an env var to Cargo so Cargo</span>\n<span class=\"gi\">+# knows how many CGUs are for this specific crate, but for now</span>\n<span class=\"gi\">+# per-crate configuration isn&#39;t specifiable in the environment.</span>\n<span class=\"gi\">+codegen-units = 10000</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+# These dependencies of the standard library implement symbolication for</span>\n<span class=\"gi\">+# backtraces on most platforms. Their debuginfo causes both linking to be slower</span>\n<span class=\"gi\">+# (more data to chew through) and binaries to be larger without really all that</span>\n<span class=\"gi\">+# much benefit. This section turns them all to down to have no debuginfo which</span>\n<span class=\"gi\">+# helps to improve link times a little bit.</span>\n<span class=\"gi\">+[profile.release.package]</span>\n<span class=\"gi\">+addr2line.debug = 0</span>\n<span class=\"gi\">+adler.debug = 0</span>\n<span class=\"gi\">+gimli.debug = 0</span>\n<span class=\"gi\">+miniz_oxide.debug = 0</span>\n<span class=\"gi\">+object.debug = 0</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+[patch.crates-io]</span>\n<span class=\"gi\">+# See comments in `library/rustc-std-workspace-core/README.md` for what&#39;s going on</span>\n<span class=\"gi\">+# here</span>\n<span class=\"gi\">+rustc-std-workspace-core = { path = &#39;./rustc-std-workspace-core&#39; }</span>\n<span class=\"gi\">+rustc-std-workspace-alloc = { path = &#39;./rustc-std-workspace-alloc&#39; }</span>\n<span class=\"gi\">+rustc-std-workspace-std = { path = &#39;./rustc-std-workspace-std&#39; }</span>\n<span class=\"gh\">diff --git a/src/bootstrap/metadata.rs b/src/bootstrap/metadata.rs</span>\n<span class=\"gh\">index a38391c7b88..9047a2b43a7 100644</span>\n<span class=\"gd\">--- a/src/bootstrap/metadata.rs</span>\n<span class=\"gi\">+++ b/src/bootstrap/metadata.rs</span>\n<span class=\"gu\">@@ -1,7 +1,6 @@</span>\n use std::path::PathBuf;\n use std::process::Command;\n\n<span class=\"gd\">-use build_helper::output;</span>\n use serde::Deserialize;\n\n use crate::cache::INTERNER;\n<span class=\"gu\">@@ -37,7 +36,33 @@ pub fn build(build: &amp;mut Build) {</span>\n         .arg(&quot;--no-deps&quot;)\n         .arg(&quot;--manifest-path&quot;)\n         .arg(build.src.join(&quot;Cargo.toml&quot;));\n<span class=\"gd\">-    let output = output(&amp;mut cargo);</span>\n<span class=\"gi\">+    let output = build_helper::output(&amp;mut cargo);</span>\n<span class=\"gi\">+    let output: Output = serde_json::from_str(&amp;output).unwrap();</span>\n<span class=\"gi\">+    for package in output.packages {</span>\n<span class=\"gi\">+        if package.source.is_none() {</span>\n<span class=\"gi\">+            let name = INTERNER.intern_string(package.name);</span>\n<span class=\"gi\">+            let mut path = PathBuf::from(package.manifest_path);</span>\n<span class=\"gi\">+            path.pop();</span>\n<span class=\"gi\">+            let deps = package</span>\n<span class=\"gi\">+                .dependencies</span>\n<span class=\"gi\">+                .into_iter()</span>\n<span class=\"gi\">+                .filter(|dep| dep.source.is_none())</span>\n<span class=\"gi\">+                .map(|dep| INTERNER.intern_string(dep.name))</span>\n<span class=\"gi\">+                .collect();</span>\n<span class=\"gi\">+            build.crates.insert(name, Crate { name, id: package.id, deps, path });</span>\n<span class=\"gi\">+        }</span>\n<span class=\"gi\">+    }</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+    // Run `cargo metadata` to figure out what crates we&#39;re testing.</span>\n<span class=\"gi\">+    let mut cargo = Command::new(&amp;build.initial_cargo);</span>\n<span class=\"gi\">+    cargo</span>\n<span class=\"gi\">+        .arg(&quot;metadata&quot;)</span>\n<span class=\"gi\">+        .arg(&quot;--format-version&quot;)</span>\n<span class=\"gi\">+        .arg(&quot;1&quot;)</span>\n<span class=\"gi\">+        .arg(&quot;--no-deps&quot;)</span>\n<span class=\"gi\">+        .arg(&quot;--manifest-path&quot;)</span>\n<span class=\"gi\">+        .arg(build.src.join(&quot;library/Cargo.toml&quot;));</span>\n<span class=\"gi\">+    let output = build_helper::output(&amp;mut cargo);</span>\n     let output: Output = serde_json::from_str(&amp;output).unwrap();\n     for package in output.packages {\n         if package.source.is_none() {\n</code></pre></div>\n\n\n</div></div>",
        "id": 209485789,
        "sender_full_name": "bjorn3",
        "timestamp": 1599641254
    },
    {
        "content": "<p>This seems to work. (excluded <code>Cargo.lock</code> changes from the diff)</p>",
        "id": 209485811,
        "sender_full_name": "bjorn3",
        "timestamp": 1599641274
    },
    {
        "content": "<p>Opened <a href=\"https://github.com/rust-lang/rust/issues/76533\">#76533</a></p>",
        "id": 209552503,
        "sender_full_name": "bjorn3",
        "timestamp": 1599677665
    },
    {
        "content": "<p>Nice!</p>",
        "id": 209558786,
        "sender_full_name": "Jubilee",
        "timestamp": 1599680849
    }
]