[
    {
        "content": "<p>I have Q's about the isolation model of the current playground. is this is the right place to ask them?</p>",
        "id": 218625161,
        "sender_full_name": "pnkfelix",
        "timestamp": 1606945948
    },
    {
        "content": "<p>sure</p>",
        "id": 218625863,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1606946294
    },
    {
        "content": "<p>IIRC, the original playground used seccomp to restrict the capabilities of the program being run in the playground</p>",
        "id": 218626829,
        "sender_full_name": "pnkfelix",
        "timestamp": 1606946789
    },
    {
        "content": "<p>is that still our main basis for capability control? or do we use something else now?</p>",
        "id": 218626848,
        "sender_full_name": "pnkfelix",
        "timestamp": 1606946810
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> ^</p>",
        "id": 218631094,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1606949131
    },
    {
        "content": "<p>It’s mostly docker, but adding additional layers wouldn’t be bad.</p>",
        "id": 218631170,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1606949167
    },
    {
        "content": "<p><a href=\"https://github.com/integer32llc/rust-playground/issues/41\">https://github.com/integer32llc/rust-playground/issues/41</a></p>",
        "id": 218631233,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1606949205
    },
    {
        "content": "<p>Is docker isolated against e.g. a fork bomb attempt to <del>DDOS</del> DOS play.rlo?</p>",
        "id": 218635995,
        "sender_full_name": "pnkfelix",
        "timestamp": 1606952391
    },
    {
        "content": "<p>(to be clear I don't even know if one is allow to do a <code>fork</code> in play in the first place. That would be one way to guard against that, though probably stronger than what we'd want.)</p>",
        "id": 218636115,
        "sender_full_name": "pnkfelix",
        "timestamp": 1606952446
    },
    {
        "content": "<p>(oh I'm pretty sure <code>Command</code> works in play, so we can't have such a restriction in place, right?)</p>",
        "id": 218636223,
        "sender_full_name": "pnkfelix",
        "timestamp": 1606952523
    },
    {
        "content": "<p>well it runs at least, not sure if it ever <em>stops</em> running <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=5dc6531b7ec65d6fba390c1f6bdf6f09\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=5dc6531b7ec65d6fba390c1f6bdf6f09</a></p>",
        "id": 218636339,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606952604
    },
    {
        "content": "<p>At least that doesn't seem to have <del>DDOS</del> DOS'ed play.rlo</p>",
        "id": 218636494,
        "sender_full_name": "pnkfelix",
        "timestamp": 1606952687
    },
    {
        "content": "<p>so that's good</p>",
        "id": 218636498,
        "sender_full_name": "pnkfelix",
        "timestamp": 1606952690
    },
    {
        "content": "<p><a href=\"https://github.com/integer32llc/rust-playground/blob/e54f710abbfdc03d9084bc8add0459257780281e/ui/src/sandbox.rs#L453\">https://github.com/integer32llc/rust-playground/blob/e54f710abbfdc03d9084bc8add0459257780281e/ui/src/sandbox.rs#L453</a></p>",
        "id": 218637114,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1606953080
    },
    {
        "content": "<p>There are a variety of tests at the bottom of that file for the things we check</p>",
        "id": 218637759,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1606953449
    },
    {
        "content": "<p>docker will run a new process namespace, which will not affect the process namespace in the host.</p>",
        "id": 218818705,
        "sender_full_name": "nagisa",
        "timestamp": 1607079872
    },
    {
        "content": "<p>Similarly it will have a memory cgroup, so you cannot exhaust all of the memory – I believe playground has a limit on memory set.</p>",
        "id": 218818802,
        "sender_full_name": "nagisa",
        "timestamp": 1607079930
    },
    {
        "content": "<p>those two combined mean you cannot fork bomb pretty much – you'll run out of PIDs or memory and the processes within container will start getting killed, retaining operation of the system.</p>",
        "id": 218818895,
        "sender_full_name": "nagisa",
        "timestamp": 1607079977
    },
    {
        "content": "<p>(at which point the timeouts hit and kill the entire namespace/container)</p>",
        "id": 218818916,
        "sender_full_name": "nagisa",
        "timestamp": 1607079994
    },
    {
        "content": "<p>IIRC a typical Windows application also holds a system-global lock during process creation if its linked to certain common system dlls. Linux ones don't do that… that probably helps too.</p>",
        "id": 218818959,
        "sender_full_name": "nagisa",
        "timestamp": 1607080019
    },
    {
        "content": "<p>Also, as linked above, we set the max # of PIDs during the invocation.</p>",
        "id": 218837031,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1607091196
    }
]