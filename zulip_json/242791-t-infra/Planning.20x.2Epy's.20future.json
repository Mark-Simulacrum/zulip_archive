[
    {
        "content": "<p>I know <code>bootstrap -v --dry-run</code> exists, but it's pretty hard to read ... is there a way to tell if <code>build --stage 1</code> will build stage 1 rustc artifacts without having to go through a full build stage?</p>",
        "id": 209837778,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599859988
    },
    {
        "content": "<p>ughhhh it turns out I enabled <code>cargo</code> and it was being built by default</p>",
        "id": 209838014,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599860140
    },
    {
        "content": "<p>let me turn that off</p>",
        "id": 209838020,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599860143
    },
    {
        "content": "<p>yup that was literally it</p>",
        "id": 209838109,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599860168
    },
    {
        "content": "<p>oh well</p>",
        "id": 209838116,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599860169
    },
    {
        "content": "<p>dry run is your best bet, though it's not perfect</p>",
        "id": 209838345,
        "sender_full_name": "simulacrum",
        "timestamp": 1599860307
    },
    {
        "content": "<p>if you want to improve output be my guest :)</p>",
        "id": 209838369,
        "sender_full_name": "simulacrum",
        "timestamp": 1599860320
    },
    {
        "content": "<p>maybe another day ^^</p>",
        "id": 209838436,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599860369
    },
    {
        "content": "<p>it's working <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 209838571,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599860450
    },
    {
        "content": "<p>hmm where do you think <a href=\"https://github.com/rust-lang/rust/issues/76380\">https://github.com/rust-lang/rust/issues/76380</a> should be documented?</p>",
        "id": 209838597,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599860466
    },
    {
        "content": "<p>rustc-dev-guide seems like a bad place since the people using this aren't contributing to the compiler</p>",
        "id": 209838614,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599860479
    },
    {
        "content": "<p>src/bootstrap/README?</p>",
        "id": 209838618,
        "sender_full_name": "simulacrum",
        "timestamp": 1599860484
    },
    {
        "content": "<p>but realistically I am uncertain the idea is a good one</p>",
        "id": 209838646,
        "sender_full_name": "simulacrum",
        "timestamp": 1599860508
    },
    {
        "content": "<p>or, at least, I would not guarantee stability to it</p>",
        "id": 209838664,
        "sender_full_name": "simulacrum",
        "timestamp": 1599860517
    },
    {
        "content": "<p>I'm fine with an explicit version number that we bump when we knowingly break it though</p>",
        "id": 209838726,
        "sender_full_name": "simulacrum",
        "timestamp": 1599860537
    },
    {
        "content": "<p>it seems unlikely that this should <em>need</em> breaking changes though?</p>",
        "id": 209838747,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599860553
    },
    {
        "content": "<p>any changes I can imagine are only changes to defaults</p>",
        "id": 209838767,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599860565
    },
    {
        "content": "<p>or more configuration knobs to tweak</p>",
        "id": 209838789,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599860579
    },
    {
        "content": "<p>well, like, for example <a href=\"https://github.com/rust-lang/rust/pull/76415\">https://github.com/rust-lang/rust/pull/76415</a> changes the behavior of x.py on some inputs</p>",
        "id": 209838956,
        "sender_full_name": "simulacrum",
        "timestamp": 1599860683
    },
    {
        "content": "<p>in a sort of \"major\" way</p>",
        "id": 209838960,
        "sender_full_name": "simulacrum",
        "timestamp": 1599860687
    },
    {
        "content": "<p>and I want to be free to make that kind of change</p>",
        "id": 209838973,
        "sender_full_name": "simulacrum",
        "timestamp": 1599860697
    },
    {
        "content": "<p>like, stability is good, we try to keep it where possible, but I wouldn't want to over-promise</p>",
        "id": 209839015,
        "sender_full_name": "simulacrum",
        "timestamp": 1599860720
    },
    {
        "content": "<p>like we definitely don't want to lock down any part of the interface forever I think</p>",
        "id": 209839039,
        "sender_full_name": "simulacrum",
        "timestamp": 1599860742
    },
    {
        "content": "<p>yeah that makes sense</p>",
        "id": 209839125,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599860775
    },
    {
        "content": "<p>I'm not sure what do then ... maybe only guarantee <em>some</em> of the defaults?</p>",
        "id": 209839145,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599860790
    },
    {
        "content": "<p>or add a <code>--defaults-version</code> or something?</p>",
        "id": 209839163,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599860798
    },
    {
        "content": "<p>that defaults to 0, and <code>x.py</code> passes whatever the latest is</p>",
        "id": 209839204,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599860827
    },
    {
        "content": "<p>@infinity0 doesn't appear to be on this server unfortunately</p>",
        "id": 209839242,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599860850
    },
    {
        "content": "<p>I'm not sure -- it feels like ultimately the ask here is \"please document breaking changes\"</p>",
        "id": 209839336,
        "sender_full_name": "simulacrum",
        "timestamp": 1599860908
    },
    {
        "content": "<p>like, stage 2 vs 1 is a breaking change but is very minor in the grand scheme of things</p>",
        "id": 209839376,
        "sender_full_name": "simulacrum",
        "timestamp": 1599860960
    },
    {
        "content": "<p>so, here's their original response:</p>\n<blockquote>\n<p>Instead of trying to second-guess what everyone's individual subjective workflow is, I think it's much better to make a CLI that is simple and predictable. That means that defaults shouldn't change randomly based on second-guessing everyone's individual subjective workflow.<br>\nWhy is the default stage different between test and bench? I don't know, and I don't want to have to know. I already need to know a lot of things about rust already in order to maintain it, having to know extra idiosyncracies makes the task less fun.</p>\n</blockquote>",
        "id": 209839405,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599860991
    },
    {
        "content": "<p>so it's not just 'document the changes'</p>",
        "id": 209839414,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599861000
    },
    {
        "content": "<p>it's 'x.py should be consistent'</p>",
        "id": 209839462,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599861005
    },
    {
        "content": "<p>(from <a href=\"https://github.com/rust-lang/rust/issues/76165\">https://github.com/rust-lang/rust/issues/76165</a>)</p>",
        "id": 209839477,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599861014
    },
    {
        "content": "<p>and of course, being consistent is incompatible with being user-friendly since that means either doc is stage 2 or install is stage 0, neither of which are very appealing</p>",
        "id": 209839562,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599861074
    },
    {
        "content": "<p>that seems very orthogonal</p>",
        "id": 209839568,
        "sender_full_name": "simulacrum",
        "timestamp": 1599861080
    },
    {
        "content": "<p>like, there's one question of \"what should the defaults be\" and the other question is \"should there be multiple sets of defaults?\"</p>",
        "id": 209839718,
        "sender_full_name": "simulacrum",
        "timestamp": 1599861185
    },
    {
        "content": "<p>er, well, rather</p>",
        "id": 209839739,
        "sender_full_name": "simulacrum",
        "timestamp": 1599861193
    },
    {
        "content": "<p>there's defaults-related questions, both consistency and how many sets of defaults etc</p>",
        "id": 209839759,
        "sender_full_name": "simulacrum",
        "timestamp": 1599861209
    },
    {
        "content": "<p>but there's also the \"should x.py have some sort of stable interface?\"</p>",
        "id": 209839773,
        "sender_full_name": "simulacrum",
        "timestamp": 1599861220
    },
    {
        "content": "<p>oh I see the distinction you're making</p>",
        "id": 209839793,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599861235
    },
    {
        "content": "<p>I think in terms of defaults, I'm sort of all for x.py setup or something if we think it's helpful</p>",
        "id": 209839797,
        "sender_full_name": "simulacrum",
        "timestamp": 1599861237
    },
    {
        "content": "<p>but in terms of \"stable interface\" I think that's basically impossible in practice</p>",
        "id": 209839845,
        "sender_full_name": "simulacrum",
        "timestamp": 1599861249
    },
    {
        "content": "<p>so how's this possible outcome:</p>",
        "id": 209839872,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599861271
    },
    {
        "content": "<p>I implement <a href=\"https://github.com/rust-lang/rust/issues/76165\">https://github.com/rust-lang/rust/issues/76165</a> and <code>x.py setup</code></p>",
        "id": 209839889,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599861286
    },
    {
        "content": "<p>and then @infinit0 can run <code>x.py setup maintainer</code> or whatever</p>",
        "id": 209839900,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599861295
    },
    {
        "content": "<p>and they don't have to thing about it, because the defaults won't be changing for them</p>",
        "id": 209839917,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599861308
    },
    {
        "content": "<p>hm well maintainer will vary over time, presumably</p>",
        "id": 209839934,
        "sender_full_name": "simulacrum",
        "timestamp": 1599861320
    },
    {
        "content": "<p>it's not that it's <em>stable</em>, it's that the <em>defaults</em> are different</p>",
        "id": 209839936,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599861322
    },
    {
        "content": "<p>but perhaps, yes</p>",
        "id": 209839947,
        "sender_full_name": "simulacrum",
        "timestamp": 1599861330
    },
    {
        "content": "<p>right, maybe at some point we tweak exactly what the defaults are</p>",
        "id": 209839960,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599861336
    },
    {
        "content": "<p>but we tweak them with @infinity's feedback in mind, not just because it makes things easier for new contributors</p>",
        "id": 209839978,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599861353
    },
    {
        "content": "<p>I would also be fine with the \"defaults\" having a version tag that we just increment whenever changing defaults that nags you to re-run x.py setup</p>",
        "id": 209839986,
        "sender_full_name": "simulacrum",
        "timestamp": 1599861361
    },
    {
        "content": "<p>that seems possible too</p>",
        "id": 209840041,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599861393
    },
    {
        "content": "<p>that said, before we implement any sort of x.py setup I think we need to change config.toml parsing to something more structured</p>",
        "id": 209840047,
        "sender_full_name": "simulacrum",
        "timestamp": 1599861396
    },
    {
        "content": "<p>and ideally that avoids the current approach of \".toml.example\" which hopefully covers every option and is not misleading in terms of actual default</p>",
        "id": 209840080,
        "sender_full_name": "simulacrum",
        "timestamp": 1599861424
    },
    {
        "content": "<p>I don't know exactly -- maybe there's not a great alternative</p>",
        "id": 209840106,
        "sender_full_name": "simulacrum",
        "timestamp": 1599861451
    },
    {
        "content": "<p>what if <code>x.py setup</code> didn't add all the comments and commented-out defaults?</p>",
        "id": 209840116,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599861461
    },
    {
        "content": "<p>that also avoids the comments getting out of date</p>",
        "id": 209840140,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599861473
    },
    {
        "content": "<p>because currently <code>config.toml.example</code> changes while <code>config.toml</code> stays static basically forever</p>",
        "id": 209840192,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599861487
    },
    {
        "content": "<p>and that way it's much more managable and easy to see what changed</p>",
        "id": 209840218,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599861511
    },
    {
        "content": "<p>ah, so you're saying we just don't have defaults at all?</p>",
        "id": 209840232,
        "sender_full_name": "simulacrum",
        "timestamp": 1599861520
    },
    {
        "content": "<p>not in the <code>config.toml</code>, no</p>",
        "id": 209840253,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599861531
    },
    {
        "content": "<p>hmm</p>",
        "id": 209840264,
        "sender_full_name": "simulacrum",
        "timestamp": 1599861535
    },
    {
        "content": "<p>that seems bad, because it's much harder to tell \"intentional manual change\" vs \"auto-generated\" then</p>",
        "id": 209840308,
        "sender_full_name": "simulacrum",
        "timestamp": 1599861559
    },
    {
        "content": "<p>I'd rather have something like <code>include = \"maintainer\"</code> at the top</p>",
        "id": 209840338,
        "sender_full_name": "simulacrum",
        "timestamp": 1599861580
    },
    {
        "content": "<p>ooh I like that</p>",
        "id": 209840359,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599861594
    },
    {
        "content": "<p>and that pre-sets options from src/bootstrap/config.toml.maintainer, for example</p>",
        "id": 209840409,
        "sender_full_name": "simulacrum",
        "timestamp": 1599861604
    },
    {
        "content": "<p>and then you don't have to rerun <code>x.py setup</code> when the defaults change</p>",
        "id": 209840410,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599861605
    },
    {
        "content": "<p>and it's very clear what <em>you</em> changed vs. what the setup did</p>",
        "id": 209840439,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599861625
    },
    {
        "content": "<p>this sounds great :D</p>",
        "id": 209840471,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599861656
    },
    {
        "content": "<p>that said, I think it may make sense to also include a version that's bumped when any of the defaults change or new options are added</p>",
        "id": 209840494,
        "sender_full_name": "simulacrum",
        "timestamp": 1599861670
    },
    {
        "content": "<p>(somewhat orthogonal from default sets)</p>",
        "id": 209840515,
        "sender_full_name": "simulacrum",
        "timestamp": 1599861683
    },
    {
        "content": "<p>because e.g. when we introduce download-ci-llvm, you probably want to know about that</p>",
        "id": 209840543,
        "sender_full_name": "simulacrum",
        "timestamp": 1599861699
    },
    {
        "content": "<p>but currently we have no way of telling you nicely</p>",
        "id": 209840552,
        "sender_full_name": "simulacrum",
        "timestamp": 1599861710
    },
    {
        "content": "<p>sure, that seems easy enough to add. are you imagining that <code>x.py</code> says something the first time you run it after the version changes?</p>",
        "id": 209840569,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599861719
    },
    {
        "content": "<p>every time until you bump the version</p>",
        "id": 209840644,
        "sender_full_name": "simulacrum",
        "timestamp": 1599861751
    },
    {
        "content": "<p>probably version is actually a PR# or something so that you can go learn about the new thing</p>",
        "id": 209840689,
        "sender_full_name": "simulacrum",
        "timestamp": 1599861791
    },
    {
        "content": "<p>oh you opt <em>in</em> to breaking changes instead of them silently changing</p>",
        "id": 209840706,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599861801
    },
    {
        "content": "<p>(or an incrementing integer into a src/bootstrap/CHANGELOG)</p>",
        "id": 209840708,
        "sender_full_name": "simulacrum",
        "timestamp": 1599861804
    },
    {
        "content": "<p>I really like that :D</p>",
        "id": 209840713,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599861805
    },
    {
        "content": "<p>no no</p>",
        "id": 209840719,
        "sender_full_name": "simulacrum",
        "timestamp": 1599861813
    },
    {
        "content": "<p>we're not maintaining multiple versions</p>",
        "id": 209840725,
        "sender_full_name": "simulacrum",
        "timestamp": 1599861821
    },
    {
        "content": "<p>this is just saying \"hey the defaults changed here's how you find out how\"</p>",
        "id": 209840747,
        "sender_full_name": "simulacrum",
        "timestamp": 1599861832
    },
    {
        "content": "<p>oh I see, the version number only controls 'have you seen the warning'</p>",
        "id": 209840804,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599861850
    },
    {
        "content": "<p>yeah that sounds reasonable</p>",
        "id": 209840820,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599861857
    },
    {
        "content": "<p>essentially, and also provides a delta of changelog entries you need to read</p>",
        "id": 209840831,
        "sender_full_name": "simulacrum",
        "timestamp": 1599861866
    },
    {
        "content": "<p>right now you can basically \"git pull\" and your build breaks and you have no idea why</p>",
        "id": 209840848,
        "sender_full_name": "simulacrum",
        "timestamp": 1599861883
    },
    {
        "content": "<p>e.g., when we landed --stage 0</p>",
        "id": 209840857,
        "sender_full_name": "simulacrum",
        "timestamp": 1599861888
    },
    {
        "content": "<p>yeah  :/</p>",
        "id": 209840862,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599861895
    },
    {
        "content": "<p>but this way when you run x.py, it'll tell you \"hey, go read this file!\"</p>",
        "id": 209840874,
        "sender_full_name": "simulacrum",
        "timestamp": 1599861904
    },
    {
        "content": "<p>maybe even with the <em>default</em> being to stop the build if the version is desync'd, though not sure about that</p>",
        "id": 209840908,
        "sender_full_name": "simulacrum",
        "timestamp": 1599861933
    },
    {
        "content": "<p>I guess we can print at the start and at the end</p>",
        "id": 209840919,
        "sender_full_name": "simulacrum",
        "timestamp": 1599861942
    },
    {
        "content": "<p>\"version\" may also not be a good name, more like \"acknowledge changelog entry number\"</p>",
        "id": 209840992,
        "sender_full_name": "simulacrum",
        "timestamp": 1599861968
    },
    {
        "content": "<p>I think printing the change is enough</p>",
        "id": 209841005,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599861979
    },
    {
        "content": "<p>like the cross-compiling thing you linked won't actually affect many people</p>",
        "id": 209841018,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599861991
    },
    {
        "content": "<p>so it seems silly to force them to acknowledge it</p>",
        "id": 209841030,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599862000
    },
    {
        "content": "<p>well, sure, but I think we probably want a single universal default</p>",
        "id": 209841055,
        "sender_full_name": "simulacrum",
        "timestamp": 1599862017
    },
    {
        "content": "<p>because otherwise you'll have to read 5+ entries</p>",
        "id": 209841066,
        "sender_full_name": "simulacrum",
        "timestamp": 1599862027
    },
    {
        "content": "<p>vs. incrementally updating</p>",
        "id": 209841078,
        "sender_full_name": "simulacrum",
        "timestamp": 1599862032
    },
    {
        "content": "<p>like the default stage change seems pretty obvious that you want to read some stuff</p>",
        "id": 209841098,
        "sender_full_name": "simulacrum",
        "timestamp": 1599862056
    },
    {
        "content": "<p><em>before</em> you run your build</p>",
        "id": 209841155,
        "sender_full_name": "simulacrum",
        "timestamp": 1599862086
    },
    {
        "content": "<p>in retrospect, we should have landed the blog post several weeks <em>before</em> the change, not after</p>",
        "id": 209841159,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599862089
    },
    {
        "content": "<p>hindsight and all that</p>",
        "id": 209841168,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599862099
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/242791-t-infra/topic/Tips.20for.20debugging.20x.2Epy.20caching.3F/near/209841066\">said</a>:</p>\n<blockquote>\n<p>because otherwise you'll have to read 5+ entries</p>\n</blockquote>\n<p>sorry I don't follow - won't you have to do this no matter what?</p>",
        "id": 209841209,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599862143
    },
    {
        "content": "<p>I mean, we can aggregate them on one page maybe, but at some point all those changes happened</p>",
        "id": 209841232,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599862163
    },
    {
        "content": "<p>I mean that if you keep getting nagged but don't update to ack</p>",
        "id": 209841274,
        "sender_full_name": "simulacrum",
        "timestamp": 1599862196
    },
    {
        "content": "<p>then you'll likely not know whether the latest git pull brought you from 1 -&gt; 10 or from 6 -&gt; 10</p>",
        "id": 209841325,
        "sender_full_name": "simulacrum",
        "timestamp": 1599862210
    },
    {
        "content": "<p>which seems bad</p>",
        "id": 209841336,
        "sender_full_name": "simulacrum",
        "timestamp": 1599862222
    },
    {
        "content": "<p>gotcha, and your suggestion is to show all the changes along the way as well?</p>",
        "id": 209841359,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599862241
    },
    {
        "content": "<p>well, we'd probably just say \"you currently have id 6 in your file, but the build system is on id 10. Please read the changelog in src/bootstrap/changelog, and update your id in config.toml\"</p>",
        "id": 209841451,
        "sender_full_name": "simulacrum",
        "timestamp": 1599862316
    },
    {
        "content": "<p>or something along those lines</p>",
        "id": 209841499,
        "sender_full_name": "simulacrum",
        "timestamp": 1599862325
    },
    {
        "content": "<p>changelogs are definitely a good idea <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 209841518,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599862339
    },
    {
        "content": "<p>ok so summarizing a little:</p>\n<ul>\n<li>making x.py stable is not really feasible</li>\n<li>adding multiple sets of defaults in x.py itself is painful to maintain</li>\n<li>we can combine this with the <code>x.py setup</code> idea to some extent by having <code>include = \"maintainer\"</code>, which has defaults in a separate file that's easy to update</li>\n<li>we start versioning changes to x.py (even changes that aren't breaking)</li>\n<li>we start warning if you have a config file that's on an old version, and point you to the changelog</li>\n</ul>",
        "id": 209841608,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599862434
    },
    {
        "content": "<p>and presumably you can <code>--set include=maintainer</code> or whatever so @infinity0 can still use their own defaults without having to mess with <code>sed</code></p>",
        "id": 209841728,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599862503
    },
    {
        "content": "<p>sure yes</p>",
        "id": 209841758,
        "sender_full_name": "simulacrum",
        "timestamp": 1599862527
    },
    {
        "content": "<p>ok nice :) I'll open an issue with this</p>",
        "id": 209841787,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599862556
    },
    {
        "content": "<p>if there's some way we can get <code>--set 'path.to.field=value'</code> to work with x.py as well as ./configure that'd be great</p>",
        "id": 209841846,
        "sender_full_name": "simulacrum",
        "timestamp": 1599862572
    },
    {
        "content": "<p>so we don't need the annoying \"some options are replicated\"</p>",
        "id": 209841857,
        "sender_full_name": "simulacrum",
        "timestamp": 1599862582
    },
    {
        "content": "<p>but I don't know how easy that is</p>",
        "id": 209841868,
        "sender_full_name": "simulacrum",
        "timestamp": 1599862590
    },
    {
        "content": "<p>each of the changes this discussion suggests are pretty much separately implementable, btw</p>",
        "id": 209841898,
        "sender_full_name": "simulacrum",
        "timestamp": 1599862616
    },
    {
        "content": "<p><code>path.to.field=value</code> is valid toml, right? can we just parse that in <code>get_toml</code>?</p>",
        "id": 209841899,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599862617
    },
    {
        "content": "<p>\"No idea\"</p>",
        "id": 209841906,
        "sender_full_name": "simulacrum",
        "timestamp": 1599862623
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/242791-t-infra/topic/Tips.20for.20debugging.20x.2Epy.20caching.3F/near/209841898\">said</a>:</p>\n<blockquote>\n<p>each of the changes this discussion suggests are pretty much separately implementable, btw</p>\n</blockquote>\n<p>definitely, this is the 'end goal' you were asking for before :P</p>",
        "id": 209841939,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599862649
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/242791-t-infra/topic/Tips.20for.20debugging.20x.2Epy.20caching.3F/near/209841846\">said</a>:</p>\n<blockquote>\n<p>if there's some way we can get <code>--set 'path.to.field=value'</code> to work with x.py as well as ./configure that'd be great</p>\n</blockquote>\n<p>maybe we could also have a --persist option that writes it to your config file too :)</p>",
        "id": 209842097,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599862781
    },
    {
        "content": "<p>so you don't have to mess with editing it</p>",
        "id": 209842106,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599862787
    },
    {
        "content": "<p>ok going to start opening issues haha</p>",
        "id": 209842387,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599862992
    },
    {
        "content": "<p>I am scared of editing people's files</p>",
        "id": 209842394,
        "sender_full_name": "simulacrum",
        "timestamp": 1599862999
    },
    {
        "content": "<p>toml is a pretty simple format ... but this is the cherry on top of a whole bunch of frosting so I'm fine with not adding this</p>",
        "id": 209842508,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599863062
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/76616\">https://github.com/rust-lang/rust/issues/76616</a></p>",
        "id": 209842564,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599863102
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/76617\">https://github.com/rust-lang/rust/issues/76617</a></p>",
        "id": 209842735,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599863219
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/76619\">https://github.com/rust-lang/rust/issues/76619</a></p>",
        "id": 209843154,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599863537
    },
    {
        "content": "<p>ok I think that's everything</p>",
        "id": 209843189,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599863567
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> should I close <a href=\"https://github.com/rust-lang/rust/issues/76380\">https://github.com/rust-lang/rust/issues/76380</a> as wontfix?</p>",
        "id": 209843224,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599863598
    },
    {
        "content": "<p>I think so</p>",
        "id": 209843231,
        "sender_full_name": "simulacrum",
        "timestamp": 1599863608
    },
    {
        "content": "<p>ok I have to go, thanks for talking this over :)</p>",
        "id": 209843446,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599863787
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/76626\">https://github.com/rust-lang/rust/pull/76626</a></p>",
        "id": 209861388,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599879909
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/76625\">https://github.com/rust-lang/rust/pull/76625</a></p>",
        "id": 209861390,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599879918
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> any objections to a <code>rustbuild-breaking-change</code> tag? that would make it easier to find things than the changelog I think</p>",
        "id": 211208520,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600996357
    },
    {
        "content": "<p>(of course the changelog is still good)</p>",
        "id": 211208525,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600996364
    },
    {
        "content": "<p>Hm I think probably you just want \"rustbuild\"?</p>",
        "id": 211208571,
        "sender_full_name": "simulacrum",
        "timestamp": 1600996423
    },
    {
        "content": "<p>Everything is a breaking change on some level</p>",
        "id": 211208580,
        "sender_full_name": "simulacrum",
        "timestamp": 1600996439
    },
    {
        "content": "<p>breaking as in 'we bumped the version number' I mean</p>",
        "id": 211208633,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600996458
    },
    {
        "content": "<p>Hm</p>",
        "id": 211208642,
        "sender_full_name": "simulacrum",
        "timestamp": 1600996468
    },
    {
        "content": "<p>I mean I'm not opposed but I guarantee I'll forget it</p>",
        "id": 211208652,
        "sender_full_name": "simulacrum",
        "timestamp": 1600996478
    },
    {
        "content": "<p>maybe we can set highfive to ping me when the changelog is modified lol</p>",
        "id": 211208680,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600996511
    },
    {
        "content": "<p>I would hope most of the churn is short-term...</p>",
        "id": 211212875,
        "sender_full_name": "cuviper",
        "timestamp": 1601002075
    },
    {
        "content": "<p>Yeah, it almost certainly is - I imagine we'll even out to another plateau - but still, feels a bit excessive to bump that often in the short term too</p>",
        "id": 211243700,
        "sender_full_name": "simulacrum",
        "timestamp": 1601031840
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> were you planning to open an LLVM issue for <a href=\"https://github.com/rust-lang/rust/issues/77084\">https://github.com/rust-lang/rust/issues/77084</a> ? I'm happy to do it myself but I'm not exactly sure what they need to change on their end</p>",
        "id": 214875724,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603908069
    },
    {
        "content": "<p>I think we need to do some more investigation outside the rust build system for something we report upstream</p>",
        "id": 214875927,
        "sender_full_name": "simulacrum",
        "timestamp": 1603908143
    },
    {
        "content": "<p>That said I want to get our problems fixed first which means distributing static archives (.a) first, which should work, just not tested yet</p>",
        "id": 214876013,
        "sender_full_name": "simulacrum",
        "timestamp": 1603908177
    },
    {
        "content": "<p>from my perspective I don't care much about static vs dynamic as long as you can download LLVM</p>",
        "id": 214876114,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603908227
    },
    {
        "content": "<p>since it's only for contributors that don't want to build llvm in the first place</p>",
        "id": 214876135,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603908242
    },
    {
        "content": "<p>maybe for releases the distinction makes more sense</p>",
        "id": 214876179,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603908249
    },
    {
        "content": "<p>Sure. I think dynamic seems to be broken upstream (or can't work not really sure)</p>",
        "id": 214876182,
        "sender_full_name": "simulacrum",
        "timestamp": 1603908250
    },
    {
        "content": "<p>Dynamic permits less ci time spent if we do things like lto (since we link llvm twice at least with static archives)</p>",
        "id": 214876313,
        "sender_full_name": "simulacrum",
        "timestamp": 1603908310
    },
    {
        "content": "<p>I thought CI doesn't download LLVM?</p>",
        "id": 214876474,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603908372
    },
    {
        "content": "<p>since it's building it in the first place</p>",
        "id": 214876502,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603908380
    },
    {
        "content": "<p>Yes</p>",
        "id": 214878204,
        "sender_full_name": "simulacrum",
        "timestamp": 1603909216
    },
    {
        "content": "<p>But LTO runs at link time</p>",
        "id": 214878221,
        "sender_full_name": "simulacrum",
        "timestamp": 1603909227
    },
    {
        "content": "<p>And if you build a dylib, then it runs then</p>",
        "id": 214878233,
        "sender_full_name": "simulacrum",
        "timestamp": 1603909234
    },
    {
        "content": "<p>Whereas if you statically link you run it for each binary link (so stage1 and 2)</p>",
        "id": 214878262,
        "sender_full_name": "simulacrum",
        "timestamp": 1603909256
    },
    {
        "content": "<p>ahhh I see</p>",
        "id": 214878347,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603909312
    }
]