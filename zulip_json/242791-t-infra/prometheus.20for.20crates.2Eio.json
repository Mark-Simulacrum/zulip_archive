[
    {
        "content": "<p>wrote down the possible options I see for using prometheus with heroku</p>",
        "id": 232442482,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1617117107
    },
    {
        "content": "<p><a href=\"https://paper.dropbox.com/doc/crates.io-monitoring--BH7xt2hydhlC9nqMEJaovXGGAg-JWf5AxfJ1Nbc3lLuNcaTy\">https://paper.dropbox.com/doc/crates.io-monitoring--BH7xt2hydhlC9nqMEJaovXGGAg-JWf5AxfJ1Nbc3lLuNcaTy</a></p>",
        "id": 232442485,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1617117109
    },
    {
        "content": "<p>(I still think running prometheus on each dyno is the least impactful change)</p>",
        "id": 232442595,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1617117129
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <span class=\"user-mention\" data-user-id=\"117568\">@Aidan Hobson Sayers</span> ^</p>",
        "id": 232442601,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1617117133
    },
    {
        "content": "<p>I will try to get to reading and providing feedback today.</p>",
        "id": 232451043,
        "sender_full_name": "simulacrum",
        "timestamp": 1617120145
    },
    {
        "content": "<p>FWIW I had a ton of success having primary application merge metrics from a number of different sources in its <code>/metrics</code> endpoint.</p>",
        "id": 232451746,
        "sender_full_name": "nagisa",
        "timestamp": 1617120366
    },
    {
        "content": "<p>this also has the benefit of ensuring that the metrics in the prometheus database are more or less aligned for the same <code>instance</code> label.</p>",
        "id": 232451838,
        "sender_full_name": "nagisa",
        "timestamp": 1617120403
    },
    {
        "content": "<p>But I guess that doesn't help if the application doesn't know the nodes it runs on or how to merge the metrics.</p>",
        "id": 232452136,
        "sender_full_name": "nagisa",
        "timestamp": 1617120529
    },
    {
        "content": "<p>yeah, the whole problem is that heroku doesn't expose the underlying dynos in any way</p>",
        "id": 232456166,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1617122023
    },
    {
        "content": "<p>which is really unfortunate and prevents clean solutions</p>",
        "id": 232456244,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1617122043
    },
    {
        "content": "<p>Is having a small custom server at a known IP address an option? The application could establish a persistent TCP connection to such a server when it starts. The server then could retrieve metrics from the applications through that connection. Kinda pushgateway but not quite.</p>",
        "id": 232470934,
        "sender_full_name": "nagisa",
        "timestamp": 1617127659
    },
    {
        "content": "<p>yes, but we'd have to develop and maintain that server</p>",
        "id": 232483850,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1617132693
    },
    {
        "content": "<p>just running a prometheus server in every dyno configured to write metrics to our main server requires way less development effort</p>",
        "id": 232483985,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1617132736
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121055\">@Pietro Albini</span> to follow up on this - sorry it's been a bit - I'd like to better understand how big a priority the per-dyno metrics are. I'm correct that we can expose the service metrics from <a href=\"http://crates.io\">crates.io</a> anytime, right?</p>",
        "id": 233346764,
        "sender_full_name": "simulacrum",
        "timestamp": 1617725255
    },
    {
        "content": "<p>How common are per-dyno problems that wouldn't be visible in the service metrics?</p>",
        "id": 233346892,
        "sender_full_name": "simulacrum",
        "timestamp": 1617725305
    },
    {
        "content": "<p>we can indeed expose service metrics for <a href=\"http://crates.io\">crates.io</a> at anytime, yes</p>",
        "id": 233347061,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1617725378
    },
    {
        "content": "<p>but most of the metrics I would find useful right now are at the dyno level though</p>",
        "id": 233347131,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1617725404
    },
    {
        "content": "<p>could you expand on that in the doc / clarify that prioritization? It might be helpful to know what kind of metrics are being considered</p>",
        "id": 233347258,
        "sender_full_name": "simulacrum",
        "timestamp": 1617725451
    },
    {
        "content": "<p>I'll do that in a bit!</p>",
        "id": 233347354,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1617725506
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I put the metrics I need in the document, and asked the rest of the <a href=\"http://crates.io\">crates.io</a> team to do the same for the ones they need that I missed</p>",
        "id": 233370089,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1617735181
    },
    {
        "content": "<p>most of the useful ones are in the \"instance/dyno\" section</p>",
        "id": 233370121,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1617735202
    },
    {
        "content": "<p>I'll check your comments tomorrow</p>",
        "id": 233370145,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1617735213
    },
    {
        "content": "<p>thanks!</p>",
        "id": 233371413,
        "sender_full_name": "simulacrum",
        "timestamp": 1617735735
    },
    {
        "content": "<p>finally found the time to reply to the comments!</p>",
        "id": 234167236,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1618237290
    },
    {
        "content": "<p>opened a PR on the <a href=\"http://crates.io\">crates.io</a> side to serve metrics! <a href=\"https://github.com/rust-lang/crates.io/pull/3531\">https://github.com/rust-lang/crates.io/pull/3531</a></p>",
        "id": 235016142,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1618692185
    },
    {
        "content": "<p>it implements both service-level and instance-level metrics, even though right now we can collect only service-level ones</p>",
        "id": 235016160,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1618692206
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> did you investigate instance-level metrics more?</p>",
        "id": 235016170,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1618692223
    },
    {
        "content": "<p>(I know you've been busy, it's totally fine if you didn't manage to make progress <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>)</p>",
        "id": 235016183,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1618692239
    },
    {
        "content": "<p>you mean your comments -- no, not yet</p>",
        "id": 235019664,
        "sender_full_name": "simulacrum",
        "timestamp": 1618694241
    },
    {
        "content": "<p>have we completed investigation on upgrading prometheus?</p>",
        "id": 235019667,
        "sender_full_name": "simulacrum",
        "timestamp": 1618694251
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121055\">@Pietro Albini</span> one additional question I had -- is this setup going to be similar to what we end up with on other services (e.g., <a href=\"http://docs.rs\">docs.rs</a>) if we end up putting those behind e.g. ELB after moving parts of them to ECS?</p>",
        "id": 235020577,
        "sender_full_name": "simulacrum",
        "timestamp": 1618695176
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/242791-t-infra/topic/prometheus.20for.20crates.2Eio/near/235019667\">said</a>:</p>\n<blockquote>\n<p>have we completed investigation on upgrading prometheus?</p>\n</blockquote>\n<p>also no</p>",
        "id": 235020613,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1618695196
    },
    {
        "content": "<p>(and e.g. if we had 2 triagebot containers running instead of one, would we need this there too?)</p>",
        "id": 235020617,
        "sender_full_name": "simulacrum",
        "timestamp": 1618695198
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/242791-t-infra/topic/prometheus.20for.20crates.2Eio/near/235020577\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"121055\">Pietro Albini</span> one additional question I had -- is this setup going to be similar to what we end up with on other services (e.g., <a href=\"http://docs.rs\">docs.rs</a>) if we end up putting those behind e.g. ELB after moving parts of them to ECS?</p>\n</blockquote>\n<p>no, we can configure prometheus to periodically fetch the private IPs of the fargate instances from the AWS API and scrape the containers directly</p>",
        "id": 235020651,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1618695244
    },
    {
        "content": "<p>ah, so the only reason heroku is 'special' is that we have <em>no</em> access to the private IPs?</p>",
        "id": 235020712,
        "sender_full_name": "simulacrum",
        "timestamp": 1618695265
    },
    {
        "content": "<p>yep</p>",
        "id": 235020715,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1618695268
    },
    {
        "content": "<p>and no way to connect to them even if we somehow figure them</p>",
        "id": 235020724,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1618695281
    },
    {
        "content": "<p>sure, yeah</p>",
        "id": 235020768,
        "sender_full_name": "simulacrum",
        "timestamp": 1618695347
    },
    {
        "content": "<p>hm, so I'm trying to figure out how heroku's language runtime metrics work - they don't have them for rust yet, but for a bunch of other languages</p>",
        "id": 235021472,
        "sender_full_name": "simulacrum",
        "timestamp": 1618696121
    },
    {
        "content": "<p>my impression based on screenshots and the docs I can find is they're still service-level</p>",
        "id": 235021476,
        "sender_full_name": "simulacrum",
        "timestamp": 1618696137
    },
    {
        "content": "<p>they also use a prometheus agent though, according to this <a href=\"https://blog.heroku.com/heroku-exec-language-runtime-metrics-ga-runtime-debugging\">https://blog.heroku.com/heroku-exec-language-runtime-metrics-ga-runtime-debugging</a></p>",
        "id": 235021500,
        "sender_full_name": "simulacrum",
        "timestamp": 1618696183
    },
    {
        "content": "<p>so, heroku runs this to collect language metrics</p>",
        "id": 235021785,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1618696517
    },
    {
        "content": "<p><a href=\"https://github.com/heroku/heroku-buildpack-metrics/blob/master/.profile.d/heroku-metrics-daemon.sh\">https://github.com/heroku/heroku-buildpack-metrics/blob/master/.profile.d/heroku-metrics-daemon.sh</a></p>",
        "id": 235021790,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1618696517
    },
    {
        "content": "<p><a href=\"https://devcenter.heroku.com/articles/log-runtime-metrics\">https://devcenter.heroku.com/articles/log-runtime-metrics</a> seems to be a beta feature/experiment in exposing per-dyno metrics via logs</p>",
        "id": 235021793,
        "sender_full_name": "simulacrum",
        "timestamp": 1618696520
    },
    {
        "content": "<p><a href=\"https://github.com/heroku/agentmon\">https://github.com/heroku/agentmon</a></p>",
        "id": 235021816,
        "sender_full_name": "simulacrum",
        "timestamp": 1618696560
    },
    {
        "content": "<p>yep</p>",
        "id": 235021826,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1618696563
    },
    {
        "content": "<p><a href=\"https://github.com/heroku/agentmon/blob/master/doc/design.md\">https://github.com/heroku/agentmon/blob/master/doc/design.md</a></p>",
        "id": 235021857,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1618696566
    },
    {
        "content": "<p>my understanding is that the binary fetches the language-specific metrics with statsd or prometheus, collects them and sends them to the proprietary  heroku backend</p>",
        "id": 235021890,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1618696627
    },
    {
        "content": "<p>but that's limited to language specific metrics (like gc stats), not application specific metrics</p>",
        "id": 235021942,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1618696684
    },
    {
        "content": "<p>well, I mean, it's probably generic?</p>",
        "id": 235021969,
        "sender_full_name": "simulacrum",
        "timestamp": 1618696696
    },
    {
        "content": "<p>but regardless, the thing I think aggregates across dynos</p>",
        "id": 235021975,
        "sender_full_name": "simulacrum",
        "timestamp": 1618696706
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/242791-t-infra/topic/prometheus.20for.20crates.2Eio/near/235021969\">said</a>:</p>\n<blockquote>\n<p>well, I mean, it's probably generic?</p>\n</blockquote>\n<p>dunno, but in any case either that or the heroku backend will discard other metrics</p>",
        "id": 235021991,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1618696742
    },
    {
        "content": "<p>do we have some read on whether <a href=\"https://devcenter.heroku.com/articles/production-check#app-monitoring\">https://devcenter.heroku.com/articles/production-check#app-monitoring</a> is also service-level?</p>",
        "id": 235022177,
        "sender_full_name": "simulacrum",
        "timestamp": 1618696888
    },
    {
        "content": "<p>e.g., if I told you to just use new relic, could you?</p>",
        "id": 235022183,
        "sender_full_name": "simulacrum",
        "timestamp": 1618696896
    },
    {
        "content": "<p>it basically seems like heroku expects people to do this via logs - <a href=\"https://devcenter.heroku.com/articles/production-check#app-monitoring\">https://devcenter.heroku.com/articles/production-check#app-monitoring</a></p>",
        "id": 235022266,
        "sender_full_name": "simulacrum",
        "timestamp": 1618696974
    },
    {
        "content": "<p>I did think that one alternative to running prometheus is to run basically curl localhost/metrics &gt; file &amp;&amp; aws s3 cp file s3:// and then scrape that</p>",
        "id": 235022335,
        "sender_full_name": "simulacrum",
        "timestamp": 1618697037
    },
    {
        "content": "<p>but it doesn't seem obviously better, though in some sense has significantly less moving parts</p>",
        "id": 235022388,
        "sender_full_name": "simulacrum",
        "timestamp": 1618697057
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/242791-t-infra/topic/prometheus.20for.20crates.2Eio/near/235022177\">said</a>:</p>\n<blockquote>\n<p>do we have some read on whether <a href=\"https://devcenter.heroku.com/articles/production-check#app-monitoring\">https://devcenter.heroku.com/articles/production-check#app-monitoring</a> is also service-level?</p>\n</blockquote>\n<p>so, newrelic works at the instance-level, but that's because newrelic requires you to embed their collector inside your application, which then POSTs the metrics to the newrelic backend</p>",
        "id": 235023047,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1618697793
    },
    {
        "content": "<p>in our case the embedded collector would be the prometheus binary doing a remote write</p>",
        "id": 235023099,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1618697854
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/242791-t-infra/topic/prometheus.20for.20crates.2Eio/near/235022266\">said</a>:</p>\n<blockquote>\n<p>it basically seems like heroku expects people to do this via logs - <a href=\"https://devcenter.heroku.com/articles/production-check#app-monitoring\">https://devcenter.heroku.com/articles/production-check#app-monitoring</a></p>\n</blockquote>\n<p>yep, that's how they implement a lot of their current metrics too</p>",
        "id": 235023148,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1618697885
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121055\">Pietro Albini</span> <a href=\"#narrow/stream/242791-t-infra/topic/prometheus.20for.20crates.2Eio/near/235023047\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/242791-t-infra/topic/prometheus.20for.20crates.2Eio/near/235022177\">said</a>:</p>\n<blockquote>\n<p>do we have some read on whether <a href=\"https://devcenter.heroku.com/articles/production-check#app-monitoring\">https://devcenter.heroku.com/articles/production-check#app-monitoring</a> is also service-level?</p>\n</blockquote>\n<p>so, newrelic works at the instance-level, but that's because newrelic requires you to embed their collector inside your application, which then POSTs the metrics to the newrelic backend</p>\n</blockquote>\n<p>ah, so this is basically the same as what we're doing</p>",
        "id": 235023349,
        "sender_full_name": "simulacrum",
        "timestamp": 1618698113
    },
    {
        "content": "<p>yeah</p>",
        "id": 235023350,
        "sender_full_name": "simulacrum",
        "timestamp": 1618698115
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/242791-t-infra/topic/prometheus.20for.20crates.2Eio/near/235020577\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"121055\">Pietro Albini</span> one additional question I had -- is this setup going to be similar to what we end up with on other services (e.g., <a href=\"http://docs.rs\">docs.rs</a>) if we end up putting those behind e.g. ELB after moving parts of them to ECS?</p>\n</blockquote>\n<p>I looked a bit more into this, and it turns out it's even easier than I thought</p>",
        "id": 235025756,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1618700766
    },
    {
        "content": "<p>we just need to configure ecs to also create \"service discovery\" dns records into a private dns zone</p>",
        "id": 235025780,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1618700807
    },
    {
        "content": "<p>(basically a bunch of A records automatically managed by AWS)</p>",
        "id": 235025789,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1618700824
    },
    {
        "content": "<p>and tell prometheus to scrape all the records in that zone</p>",
        "id": 235025801,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1618700835
    },
    {
        "content": "<p>so for the stuff we have in ECS it's fairly easy</p>",
        "id": 235025810,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1618700858
    },
    {
        "content": "<p>good to know</p>",
        "id": 235025922,
        "sender_full_name": "simulacrum",
        "timestamp": 1618700957
    },
    {
        "content": "<p>granted the <a href=\"http://crates.io\">crates.io</a> team access to grafana and started scraping service-level metrics</p>",
        "id": 235844218,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1619186178
    },
    {
        "content": "<p>so, I looked into this briefly a bit more</p>",
        "id": 238183052,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1620668693
    },
    {
        "content": "<p><a href=\"https://www.reddit.com/r/grafana/comments/mjdz67/monitoring_heroku_dynos_addons_like_postgres/\">https://www.reddit.com/r/grafana/comments/mjdz67/monitoring_heroku_dynos_addons_like_postgres/</a></p>",
        "id": 238183074,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1620668702
    },
    {
        "content": "<p>so, it seems that there are a couple off-the-shelf \"run a regex over this log stream and export that as metrics\"</p>",
        "id": 238183163,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1620668734
    },
    {
        "content": "<p><a href=\"https://github.com/carlpett/stream_exporter\">https://github.com/carlpett/stream_exporter</a><br>\n<a href=\"https://github.com/fstab/grok_exporter\">https://github.com/fstab/grok_exporter</a></p>",
        "id": 238183180,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1620668741
    },
    {
        "content": "<p>yeah can't really find much else for integrating prometheus and heroku postgres</p>",
        "id": 238183963,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1620669031
    },
    {
        "content": "<p>Had an idea while reading <a href=\"https://fly.io/blog/measuring-fly/\">https://fly.io/blog/measuring-fly/</a> which might be a bit wild, but we could in theory have the heroku machines setup reverse tunnels or something on startup (even as easy as ssh) to the monitoring server so they could get scraped. Doesn't help with the postgres monitoring unfortunately, though.</p>",
        "id": 238703370,
        "sender_full_name": "simulacrum",
        "timestamp": 1620954213
    },
    {
        "content": "<p>that seems... fragile <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 238736049,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1620981824
    },
    {
        "content": "<p>in theory it's a cool idea, in practice I think either running prometheus on the dynos or parsing metrics from logs would be more reliable</p>",
        "id": 238736157,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1620981878
    },
    {
        "content": "<p>ok I think with <a href=\"https://vector.dev\">https://vector.dev</a> we can get something off-the-shelf that's not a pain to configure</p>",
        "id": 240836441,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1622469336
    },
    {
        "content": "<p>playing around with it right now, I should hopefully have something ready by the meeting</p>",
        "id": 240836476,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1622469361
    },
    {
        "content": "<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <a href=\"https://crates-io-heroku-metrics.infra.rust-lang.org/health\">https://crates-io-heroku-metrics.infra.rust-lang.org/health</a></p>",
        "id": 240915325,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1622539292
    },
    {
        "content": "<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <a href=\"https://grafana.rust-lang.org/d/IDdGv46Mk/heroku-postgres\">https://grafana.rust-lang.org/d/IDdGv46Mk/heroku-postgres</a> (team-only)</p>",
        "id": 240922836,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1622543948
    },
    {
        "content": "<p>and opened PRs for supporting instance-level metrics <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 241174157,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1622651381
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/crates.io/pull/3674\">https://github.com/rust-lang/crates.io/pull/3674</a></p>",
        "id": 241174170,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1622651388
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/crates-io-heroku-metrics/pull/1\">https://github.com/rust-lang/crates-io-heroku-metrics/pull/1</a></p>",
        "id": 241174174,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1622651393
    }
]