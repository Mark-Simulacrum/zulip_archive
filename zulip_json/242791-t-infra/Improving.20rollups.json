[
    {
        "content": "<p>As part of the failed MCP for <a href=\"https://github.com/rust-lang/compiler-team/issues/407\">never rolling up changes when touching the <code>compiler/</code> directory</a>, some great conversation on how to improve the rollup process was had in the related <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Never.20Rollup.20When.20Changing.20the.20.60compiler.60.E2.80.A6.20compiler-team.23407\">Zulip thread</a>. I'd like to continue those conversations here and start experimenting with ways to actually improve the rollup process.</p>\n<p>Overall, the goal of rolling up is to get changes into master faster and to make sure the queue does not get backed up. This means we want to maximize the number of PRs in a rollup and simultaneously minimize the number of changes that cause any issues (including failing builds, introducing performance regressions, etc.). Each rollup has an associated risk associated with it. I'd like to start exposing the estimated risk to users of the homu queue, track the success rate of \"risky\" rollups, and see if we can eventually lower the percentage of rollups that fail. </p>\n<p>My first change was to add a \"riskiness\" label to the rollup when creating it. This at least starts exposing to users of the queue how relatively risky their rollup is predicted to be: <a href=\"https://github.com/rust-lang/homu/pull/138\">https://github.com/rust-lang/homu/pull/138</a></p>",
        "id": 228592139,
        "sender_full_name": "rylev",
        "timestamp": 1614778831
    },
    {
        "content": "<p>it's why in the past we kept rollups to a small number of prs (generally around 5-6) - so that there is a lower risk to it</p>",
        "id": 228610942,
        "sender_full_name": "DPC",
        "timestamp": 1614785326
    },
    {
        "content": "<p>Yes, but that doesn't seem to be followed very often nowadays. Most rollups are around 10 PRs. This labeling should provide more of an indication of when someone is doing something that might lead to a \"risky\" rollup.</p>",
        "id": 228612641,
        "sender_full_name": "rylev",
        "timestamp": 1614785926
    },
    {
        "content": "<p>yeah i'm aware. the change happened because people felt that prs are remaining \"stale\" in the queue for a long time and hence we need larger rollups</p>",
        "id": 228614268,
        "sender_full_name": "DPC",
        "timestamp": 1614786432
    },
    {
        "content": "<p>Hopefully if we better quantify risk we can increase the size of Rollups while keeping the risk that they fail low. Thatâ€™s the hope at least</p>",
        "id": 228619784,
        "sender_full_name": "rylev",
        "timestamp": 1614788219
    },
    {
        "content": "<p>so, my understanding here is that we have two issues we're trying to solve</p>",
        "id": 228960692,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1614953972
    },
    {
        "content": "<p>the first one is that rollups make the rustc-perf data less granular, which makes it harder for people doing perf triage to figure out what actually made our benchmarks worse</p>",
        "id": 228960817,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1614954017
    },
    {
        "content": "<p>and the second one is that we would like to minimize the amount of times rollup fail</p>",
        "id": 228960880,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1614954042
    },
    {
        "content": "<p>That is correct, you can summarize these together as rollups should cause issues as seldom as possible.</p>",
        "id": 228961003,
        "sender_full_name": "rylev",
        "timestamp": 1614954086
    },
    {
        "content": "<p>Ideally all rollups would be merged first try and would never require reverting</p>",
        "id": 228961051,
        "sender_full_name": "rylev",
        "timestamp": 1614954112
    },
    {
        "content": "<p>personally I don't think the second problem is a big one: if a PR breaks a rollup it will also fail CI when tested on its own, so the number of times CI fails should be the same (if the person doing the rollup figures out the exact PR that failed)</p>",
        "id": 228961156,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1614954142
    },
    {
        "content": "<p>Obviously that's a tall order, but I'm convinced we're not as close to that ideal as we could be</p>",
        "id": 228961160,
        "sender_full_name": "rylev",
        "timestamp": 1614954145
    },
    {
        "content": "<p>but I agree the first problem is a bad one we need to solve</p>",
        "id": 228961191,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1614954159
    },
    {
        "content": "<p>I'm wondering if there is a better solution to it than just having people not put any compiler PR in the rollups</p>",
        "id": 228961282,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1614954205
    },
    {
        "content": "<p>I think your paranethetical is a big assumption, particularly in the case of the large rollups (10+ PRs)</p>",
        "id": 228961318,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1614954227
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121055\">Pietro Albini</span> <a href=\"#narrow/stream/242791-t-infra/topic/Improving.20rollups/near/228961156\">said</a>:</p>\n<blockquote>\n<p>personally I don't think the second problem is a big one: if a PR breaks a rollup it will also fail CI when tested on its own, so the number of times CI fails should be the same (if the person doing the rollup figures out the exact PR that failed)</p>\n</blockquote>\n<p>I'm not sure I agree with this</p>",
        "id": 228961394,
        "sender_full_name": "rylev",
        "timestamp": 1614954248
    },
    {
        "content": "<p>Rollups don't always fail due to an actual failed test. Rollups can also fail due to interactions between PRs.</p>",
        "id": 228961582,
        "sender_full_name": "rylev",
        "timestamp": 1614954335
    },
    {
        "content": "<p>my understanding is that perf doesn't actually need much to run the benchmarks: it just needs cargo + rustc + rustdoc for each commit it wants to benchmark, and it needs that just for x86_64 linux</p>",
        "id": 228961755,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1614954388
    },
    {
        "content": "<p>There is still an issue with hanging tests, roughly once a day, so that takes away 4h30m of CI time.</p>",
        "id": 228961926,
        "sender_full_name": "tm",
        "timestamp": 1614954466
    },
    {
        "content": "<p>I don't recall how long building cargo+rustc+rustdoc takes on CI, but if it's a reasonable amount of time it might make sense to create a small number of \"perf builders\" on CI that prepare the strict subset of artifacts perf needs for each PR when they detect a rollup</p>",
        "id": 228962078,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1614954518
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121055\">Pietro Albini</span> <a href=\"#narrow/stream/242791-t-infra/topic/Improving.20rollups/near/228962078\">said</a>:</p>\n<blockquote>\n<p>I don't recall how long building cargo+rustc+rustdoc takes on CI, but if it's a reasonable amount of time it might make sense to create a small number of \"perf builders\" on CI that prepare the strict subset of artifacts perf needs for each PR when they detect a rollup</p>\n</blockquote>\n<p>you'd still need stage2 artifacts, right?</p>",
        "id": 228962115,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614954537
    },
    {
        "content": "<p>I guess that's faster than building tools and running tests though</p>",
        "id": 228962127,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614954545
    },
    {
        "content": "<p>honestly I don't know what perf needs exactly, this is just me thinking aloud :)</p>",
        "id": 228962170,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1614954564
    },
    {
        "content": "<p>Yes, it needs stage 2 artifacts</p>",
        "id": 228962219,
        "sender_full_name": "rylev",
        "timestamp": 1614954588
    },
    {
        "content": "<p>I'm not sure how this helps though...</p>",
        "id": 228962231,
        "sender_full_name": "rylev",
        "timestamp": 1614954599
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224872\">rylev</span> <a href=\"#narrow/stream/242791-t-infra/topic/Improving.20rollups/near/228962231\">said</a>:</p>\n<blockquote>\n<p>I'm not sure how this helps though...</p>\n</blockquote>\n<p>it means PRs that affect perf can be merged in rollups</p>",
        "id": 228962362,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614954638
    },
    {
        "content": "<p>so we only have problem 2 to worry about</p>",
        "id": 228962372,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614954643
    },
    {
        "content": "<p>yeah</p>",
        "id": 228962598,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1614954731
    },
    {
        "content": "<p>Ah I see what you're saying: stop perf testing rollups as monoliths and perf test individual changes</p>",
        "id": 228962657,
        "sender_full_name": "rylev",
        "timestamp": 1614954752
    },
    {
        "content": "<p>yep</p>",
        "id": 228962671,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1614954759
    },
    {
        "content": "<p>This would lead to a lot of perf runs for inconsequential changes - change a markdown file, do a perf run</p>",
        "id": 228962795,
        "sender_full_name": "rylev",
        "timestamp": 1614954797
    },
    {
        "content": "<p>there could be a new flag to bors, like <code>@bors r+ rollup perf</code></p>",
        "id": 228962827,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614954817
    },
    {
        "content": "<p>which tells it to measure perf separate from the rollup</p>",
        "id": 228962855,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614954828
    },
    {
        "content": "<p>or just add heuristics to only produce those artifacts for PRs changing <code>compiler/</code></p>",
        "id": 228962950,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1614954855
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121055\">Pietro Albini</span> <a href=\"#narrow/stream/242791-t-infra/topic/Improving.20rollups/near/228962950\">said</a>:</p>\n<blockquote>\n<p>or just add heuristics to only produce those artifacts for PRs changing <code>compiler/</code></p>\n</blockquote>\n<p>or bootstrap or the standard library or ... I still feel like there should be a human involved</p>",
        "id": 228963022,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614954884
    },
    {
        "content": "<p>This is why I'd like to start collecting more statistics on rollups. It'd be nice to talk numbers here. For instance, how many rolled up PRs labeled rollup=always lead to issues</p>",
        "id": 228963169,
        "sender_full_name": "rylev",
        "timestamp": 1614954949
    },
    {
        "content": "<blockquote>\n<p>For instance, how many rolled up PRs labeled rollup=always lead to issues</p>\n</blockquote>\n<p>I feel like this is subjective too though, what are \"issues\"? failed rollups? perf regressions? perf improvements? what's the cutoff for a perf change?</p>",
        "id": 228963565,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614955091
    },
    {
        "content": "<p>Failed roll ups are a pretty obvious starting point albeit unrelated to the current topic of performance</p>",
        "id": 228963654,
        "sender_full_name": "rylev",
        "timestamp": 1614955131
    },
    {
        "content": "<p>sure, seems fine to collect those statistics, but I don't think it will help much with deciding what to do about rollups that affect perf</p>",
        "id": 228964193,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614955337
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224872\">rylev</span> <a href=\"#narrow/stream/242791-t-infra/topic/Improving.20rollups/near/228963169\">said</a>:</p>\n<blockquote>\n<p>This is why I'd like to start collecting more statistics on rollups. It'd be nice to talk numbers here. For instance, how many rolled up PRs labeled rollup=always lead to issues</p>\n</blockquote>\n<p>what's your plan for collecting those stats?</p>",
        "id": 228964229,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1614955350
    },
    {
        "content": "<p>Not sure yet. We just need to know track somewhere created rollups. I believe thatâ€™s not stored anywhere but GitHub</p>",
        "id": 228964557,
        "sender_full_name": "rylev",
        "timestamp": 1614955483
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224872\">rylev</span> <a href=\"#narrow/stream/242791-t-infra/topic/Improving.20rollups/near/228964557\">said</a>:</p>\n<blockquote>\n<p>Not sure yet. We just need to know track somewhere created rollups. I believe thatâ€™s not stored anywhere but GitHub</p>\n</blockquote>\n<p>you could look for merge commits that say \"Rollup of X pull requests\"</p>",
        "id": 228964645,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614955531
    },
    {
        "content": "<p>e.g. here's a rollup merge and a non-rollup merge:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ git log --author=bors\ncommit ec7f258d543e1ac7d0b94435972331e85da8c509\nMerge: 7f32f62aa5c 06630f7b5f6\nAuthor: bors &lt;bors@rust-lang.org&gt;\nDate:   Thu Mar 4 11:02:13 2021 +0000\n\n    Auto merge of #82756 - JohnTitor:rollup-e4ij7h6, r=JohnTitor\n\n    Rollup of 8 pull requests\n\n    Successful merges:\n\n     - #80527 (Make rustdoc lints a tool lint instead of built-in)\n     - #82310 (Load rustdoc&#39;s JS search index on-demand.)\n     - #82315 (Improve page load performance in rustdoc)\n     - #82564 (Revert `Vec::spare_capacity_mut` impl to prevent pointers invalidation)\n     - #82697 (Fix stabilization version of move_ref_pattern)\n     - #82717 (Account for macros when suggesting adding lifetime)\n     - #82740 (Fix commit detected when using `download-rustc`)\n     - #82744 (Pass `CrateNum` by value instead of by reference)\n\n    Failed merges:\n\n    r? `@ghost`\n    `@rustbot` modify labels: rollup\n\ncommit 7f32f62aa5ceba1b795f3702e502d8473238be6b\nMerge: 6f7673d077a 61114453ae5\nAuthor: bors &lt;bors@rust-lang.org&gt;\nDate:   Thu Mar 4 05:46:43 2021 +0000\n\n    Auto merge of #82304 - LeSeulArtichaut:unpretty-ast, r=spastorino\n\n    Add `-Z unpretty` flags for the AST\n\n    Implements rust-lang/compiler-team#408.\n    Builds on #82269, but if that PR is rejected or stalls out, I can implement this without #82269.\n    cc rust-lang/rustc-dev-guide#1062\n</code></pre></div>",
        "id": 228964754,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614955567
    },
    {
        "content": "<p>so, I looked a bit at the CI logs, and a <code>./x.py build --stage 2 library/std</code> on CI takes 0:16:25</p>",
        "id": 228964960,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1614955644
    },
    {
        "content": "<p>Yea I might just make a script that calls the GitHub api, but the missing info is what roll up status that each PR received</p>",
        "id": 228965029,
        "sender_full_name": "rylev",
        "timestamp": 1614955681
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224872\">rylev</span> <a href=\"#narrow/stream/242791-t-infra/topic/Improving.20rollups/near/228965029\">said</a>:</p>\n<blockquote>\n<p>Yea I might just make a script that calls the GitHub api, but the missing jnfo is what roll up status the each PR received</p>\n</blockquote>\n<p>I think we could have a <code>rollup_stats</code> table on homu's database that records each PR included in each rollup and their rollup state</p>",
        "id": 228965202,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1614955748
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121055\">Pietro Albini</span> <a href=\"#narrow/stream/242791-t-infra/topic/Improving.20rollups/near/228964960\">said</a>:</p>\n<blockquote>\n<p>so, I looked a bit at the CI logs, and a <code>./x.py build --stage 2 library/std</code> on CI takes 0:16:25</p>\n</blockquote>\n<p>this also includes building bootstrap and downloading from sccache and installing llvm, so if we also build cargo and rustdoc I think we should easily be between 20 and 25 minutes for every commit we generate artifacts in CI for</p>",
        "id": 228965738,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1614955951
    },
    {
        "content": "<p>so with really handwavy math we should be able to generate artifacts for every PR included in a &lt;= 10 rollup with one or two builders</p>",
        "id": 228965858,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1614956001
    },
    {
        "content": "<p>[in a call for the next 2 hours]</p>",
        "id": 228965866,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1614956005
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224872\">rylev</span> <a href=\"#narrow/stream/242791-t-infra/topic/Improving.20rollups/near/228963169\">said</a>:</p>\n<blockquote>\n<p>This is why I'd like to start collecting more statistics on rollups. It'd be nice to talk numbers here. For instance, how many rolled up PRs labeled rollup=always lead to issues</p>\n</blockquote>\n<p>don't have numbers but generally very few rollup=always prs fail. Largely because - most reviewers/other lurkers often use rollup=always sparingly and mostly for minor prs. </p>\n<p>Though getting stats for rollup=maybe and rollup=iffy would be nice and we can check probably how many of those should have been rollup=never to start with</p>",
        "id": 228986057,
        "sender_full_name": "DPC",
        "timestamp": 1614963193
    },
    {
        "content": "<p>out of curiosity, are there stats on how long a normal priority pr (no rollup, no p=1, no rollup=never etc) remains in the queue after being approved and how often it has to be rebased on average?</p>",
        "id": 228991210,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1614965009
    },
    {
        "content": "<p>I donâ€™t believe we have that information either. It would nice to know how long items are in the queue and to see how various factors influence that</p>",
        "id": 229020386,
        "sender_full_name": "rylev",
        "timestamp": 1614976559
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"217864\">matthiaskrgr</span> <a href=\"#narrow/stream/242791-t-infra/topic/Improving.20rollups/near/228991210\">said</a>:</p>\n<blockquote>\n<p>out of curiosity, are there stats on how long a normal priority pr (no rollup, no p=1, no rollup=never etc) remains in the queue after being approved and how often it has to be rebased on average?</p>\n</blockquote>\n<p>it varies a lot. it depends on - </p>\n<ul>\n<li>how long the queue is, especially if we are doing smaller rollups it means PRs will last longer </li>\n<li>number of rollup=never prs, since they are rolled up individually and get priority over non-never prs, other prs often have to wait for them to be merged which is why sometimes i'm fine to allow rollups to jump never-prs </li>\n<li>\n<p>stuff like failed rollups or tree being closed due to other reasons can sometimes  mean a few prs have to wait longer </p>\n</li>\n<li>\n<p>another pattern I used to observe often but not much off late is the \"vortex pattern\" of a pr remaining in the middle of the queue because new ones get added on the top and then included in a rollup, but before the ones in the middle get rolled up more prs get added and the cycle continues. (I guess having larger rollups reduced the chances of it occurring) </p>\n</li>\n</ul>\n<p>overall i'd think a PR remains for 1-2 days in normal cases, and 3-4 days or a week in worse cases but these are just speculations</p>",
        "id": 229049707,
        "sender_full_name": "DPC",
        "timestamp": 1614992246
    },
    {
        "content": "<p>so the \"vortex pattern\"  applies to to every pr that is neither rolled up nor prioritized in other way..?</p>",
        "id": 229089552,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1615029338
    },
    {
        "content": "<p>I wonder if it would be useful to add like p=0.4 to a pr once it has been approved but a merge conflict occurs.<br>\nThat means that once you resolve the merge conflict, your pr automatically gets prioritized over prs that don't need rebase.<br>\nPRs that get conflicts over and over again would naturally gain more cumulative priority and would then merge faster and small prs that are \"stable\" remain at the bottom and can be picked up by a rollup.</p>",
        "id": 229089774,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1615029549
    },
    {
        "content": "<p>Well, we already prioritize older PRs, though it's not quite the same.</p>",
        "id": 229098180,
        "sender_full_name": "simulacrum",
        "timestamp": 1615037482
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"217864\">matthiaskrgr</span> <a href=\"#narrow/stream/242791-t-infra/topic/Improving.20rollups/near/229089552\">said</a>:</p>\n<blockquote>\n<p>so the \"vortex pattern\"  applies to to every pr that is neither rolled up nor prioritized in other way..?</p>\n</blockquote>\n<p>not all the PRs but a few of those used to.</p>",
        "id": 229115244,
        "sender_full_name": "DPC",
        "timestamp": 1615052527
    }
]