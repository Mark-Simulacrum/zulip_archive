[
    {
        "content": "<p>Hi, does it make sense to nominate this for the next infra meeting?<br>\n<a href=\"https://github.com/rust-lang/rust/issues/93329\">https://github.com/rust-lang/rust/issues/93329</a><br>\nWe've had a  bunch of msvc hangs on ci (they always seem to happen while building the <code>rustc_macros</code> crate), maybe someone has an idea what could be going on there. :)</p>",
        "id": 270913905,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1644184328
    },
    {
        "content": "<p>you can add t-infra + i-nominated and it will be picked up at the meeting tomorrow</p>",
        "id": 270914173,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1644184685
    },
    {
        "content": "<p>will do, thanks!</p>",
        "id": 270915653,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1644186603
    },
    {
        "content": "<p>I've tried to reproduce it locally without any luck. <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span>  Running <code>x.py test --stage=2 compiler/rustc_macros ; ./x.py clean</code> in a loop for several hours with the same config as CI.  The only other idea I have is to try to debug within GitHub Actions, but that can be quite challenging.</p>",
        "id": 271019934,
        "sender_full_name": "Eric Huss",
        "timestamp": 1644257732
    },
    {
        "content": "<p>How long do these tests typically take on other builders? Is there a chance this is just GitHub hanging but our builders actually doing fine (i.e., unrelated to this specific compilation) - do we see other similar hang/timeouts elsewhere?</p>",
        "id": 271020098,
        "sender_full_name": "simulacrum",
        "timestamp": 1644257813
    },
    {
        "content": "<p>You mean compiling and running the rustc_macros test?  I think it's on the order of 10 seconds or so.</p>",
        "id": 271020524,
        "sender_full_name": "Eric Huss",
        "timestamp": 1644258007
    },
    {
        "content": "<p>I think all the other hangs we've seen have been resolved, this is the only one I'm aware of that is consistently happening right now.</p>",
        "id": 271020610,
        "sender_full_name": "Eric Huss",
        "timestamp": 1644258055
    },
    {
        "content": "<p>I was hoping the LLVM crash dialog fix in <a href=\"https://github.com/rust-lang/rust/issues/93402\">#93402</a> would have illuminated this issue, but that PR ran into this very same problem.</p>\n<p>(It also hit a hang in compiletest, but I haven't seen that since the readdir issue.)</p>",
        "id": 271020852,
        "sender_full_name": "Eric Huss",
        "timestamp": 1644258162
    },
    {
        "content": "<p>@matthiaskrgr It looks like there have been a large number of errors recently with <code>rustdoc-gui</code> tests failing. Is there an issue for that? Is the rustdoc team aware that is happening?</p>",
        "id": 271021637,
        "sender_full_name": "Eric Huss",
        "timestamp": 1644258492
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"217864\">@matthiaskrgr</span> ^ (looks like it didn't linkify/ping in your message)</p>",
        "id": 271022907,
        "sender_full_name": "simulacrum",
        "timestamp": 1644259020
    },
    {
        "content": "<p>Given that there are tests in rustc_macros I'm tempted to not ignore them</p>",
        "id": 271022943,
        "sender_full_name": "simulacrum",
        "timestamp": 1644259034
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span>  i don't think there is an issue for that</p>",
        "id": 271023182,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1644259162
    },
    {
        "content": "<p>but I'm also not <span aria-label=\"100\" class=\"emoji emoji-1f4af\" role=\"img\" title=\"100\">:100:</span> sure what you mean</p>",
        "id": 271023278,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1644259203
    },
    {
        "content": "<p><span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 271023310,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1644259207
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>2022-02-07T13:28:49.5981337Z Testing rustc_macros stage1 (x86_64-pc-windows-msvc -&gt; x86_64-pc-windows-msvc)\n2022-02-07T13:28:50.1790881Z [RUSTC-TIMING] build_script_build test:false 0.681\n2022-02-07T13:28:50.1791355Z [RUSTC-TIMING] unicode_xid test:false 0.156\n2022-02-07T13:28:50.1792067Z [RUSTC-TIMING] build_script_build test:false 0.591\n2022-02-07T13:28:50.1794322Z [RUSTC-TIMING] proc_macro2 test:false 1.752\n2022-02-07T13:28:50.1795355Z [RUSTC-TIMING] quote test:false 0.747\n2022-02-07T13:28:50.1796347Z [RUSTC-TIMING] syn test:false 12.510\n2022-02-07T13:28:50.1797353Z [RUSTC-TIMING] synstructure test:false 1.972\n2022-02-07T13:28:50.1798371Z [RUSTC-TIMING] rustc_macros test:false 4.130\n2022-02-07T13:28:50.1800148Z \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Compiling\u001b[0m rustc_macros v0.1.0 (D:\\a\\rust\\rust\\compiler\\rustc_macros)\n2022-02-07T13:28:57.1538353Z [RUSTC-TIMING] rustc_macros test:true 6.966\n2022-02-07T13:28:57.1586216Z \u001b[0m\u001b[0m\u001b[1m\u001b[32m    Finished\u001b[0m release [optimized] target(s) in 7.54s\n2022-02-07T13:28:57.1662601Z \u001b[0m\u001b[0m\u001b[1m\u001b[32m     Running\u001b[0m unittests (build\\x86_64-pc-windows-msvc\\stage1-rustc\\release\\deps\\rustc_macros-f5834e6eecb3f7e7.exe)\n2022-02-07T13:28:57.1761117Z\n2022-02-07T13:28:57.1761567Z running 5 tests\n2022-02-07T13:28:57.1809935Z test symbols::tests::check_dup_symbol ... ok\n2022-02-07T13:28:57.1810317Z test symbols::tests::check_dup_keywords ... ok\n2022-02-07T13:28:57.1810681Z test symbols::tests::check_dup_symbol_and_keyword ... ok\n2022-02-07T13:28:57.1811026Z test symbols::tests::check_symbol_order ... ok\n2022-02-07T13:28:57.4308113Z test symbols::tests::test_symbols ... ok\n2022-02-07T13:28:57.4308364Z\n2022-02-07T13:28:57.4308631Z test result: ok. 5 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.25s\n2022-02-07T13:28:57.4308964Z\n2022-02-07T13:28:57.4331582Z \u001b[0m\u001b[0m\u001b[1m\u001b[32m   Doc-tests\u001b[0m rustc_macros\n2022-02-07T13:28:57.7894201Z\n2022-02-07T13:28:57.7894696Z running 4 tests\n2022-02-07T13:28:57.7928794Z test src\\session_diagnostic.rs - session_diagnostic::SessionDiagnosticDeriveBuilder::build_format (line 564) ... ignored\n2022-02-07T13:28:57.7929576Z test src\\session_diagnostic.rs - session_diagnostic::SessionDiagnosticDeriveBuilder::build_format (line 573) ... ignored\n2022-02-07T13:28:57.7930207Z test src\\session_diagnostic.rs - session_diagnostic::session_diagnostic_derive (line 10) ... ignored\n2022-02-07T13:28:57.7930807Z test src\\session_diagnostic.rs - session_diagnostic::session_diagnostic_derive (line 33) ... ignored\n2022-02-07T13:28:57.7931112Z\n2022-02-07T13:28:57.7931385Z test result: ok. 0 passed; 0 failed; 4 ignored; 0 measured; 0 filtered out; finished in 0.00s\n2022-02-07T13:28:57.7931671Z\n2022-02-07T13:28:57.8078023Z    finished in 8.209 seconds\n2022-02-07T13:28:57.8078702Z [TIMING] Crate { compiler: Compiler { stage: 2, host: TargetSelection { triple: &quot;x86_64-pc-windows-msvc&quot;, file: None } }, target: TargetSelection { triple: &quot;x86_64-pc-windows-msvc&quot;, file: None }, mode: Rustc, test_kind: Test, krate: &quot;rustc_macros&quot; } -- 8.211\n</code></pre></div>\n<p>so it looks like it does take a bit of time to build, but tests themselves are fast</p>",
        "id": 271023464,
        "sender_full_name": "simulacrum",
        "timestamp": 1644259310
    },
    {
        "content": "<p>we could try to detect this particular compilation in CI and get a backtrace perhaps?</p>",
        "id": 271023708,
        "sender_full_name": "simulacrum",
        "timestamp": 1644259432
    },
    {
        "content": "<p>7s seems pretty fast to me?</p>",
        "id": 271023710,
        "sender_full_name": "Eric Huss",
        "timestamp": 1644259433
    },
    {
        "content": "<p>yeah, sure, I just mean not instant</p>",
        "id": 271023722,
        "sender_full_name": "simulacrum",
        "timestamp": 1644259441
    },
    {
        "content": "<p>What do you think about adding a timeout/watchdog to rustbuild?</p>",
        "id": 271023800,
        "sender_full_name": "Eric Huss",
        "timestamp": 1644259461
    },
    {
        "content": "<p>yeah, I was just thinking about that</p>",
        "id": 271023828,
        "sender_full_name": "simulacrum",
        "timestamp": 1644259473
    },
    {
        "content": "<p>it's not out of the question -- I'd like to do something more useful than just abort</p>",
        "id": 271023843,
        "sender_full_name": "simulacrum",
        "timestamp": 1644259483
    },
    {
        "content": "<p>how easy is it to get a backtrace from a child process? Is there a way to do that without killing it maybe?</p>",
        "id": 271023903,
        "sender_full_name": "simulacrum",
        "timestamp": 1644259512
    },
    {
        "content": "<p>I'm not sure.  One way would be to use gdb maybe?</p>",
        "id": 271024364,
        "sender_full_name": "Eric Huss",
        "timestamp": 1644259728
    },
    {
        "content": "<p>One option that might be a little easier is to detect CI and run with RUSTC_LOG=info or -Ztime-passes or something</p>",
        "id": 271024491,
        "sender_full_name": "simulacrum",
        "timestamp": 1644259769
    },
    {
        "content": "<blockquote>\n<p>how easy is it to get a backtrace from a child process? Is there a way to do that without killing it maybe?</p>\n</blockquote>\n<p><code>eu-stack -p &lt;pid&gt;</code> gives symbols at least. gdb in batch mode should work too.</p>",
        "id": 271035027,
        "sender_full_name": "The 8472",
        "timestamp": 1644264481
    },
    {
        "content": "<p>Unfortunately this is msvc, which I think makes things harder. Also, rustbuild only knows about the cargo process. It would need to do something like walk the process tree to find <code>rustc</code> (assuming it is not cargo that is hung), which I'm not sure how easy that is to do on windows.  </p>\n<p>Wish it was feasible to use something like rdp.</p>",
        "id": 271037475,
        "sender_full_name": "Eric Huss",
        "timestamp": 1644265701
    },
    {
        "content": "<p>windows has ssh these days. maybe install the component and keep the runner running on error? do they have public IPs</p>",
        "id": 271038557,
        "sender_full_name": "The 8472",
        "timestamp": 1644266281
    },
    {
        "content": "<p><a href=\"https://github.com/marketplace/actions/debugging-with-ssh\">https://github.com/marketplace/actions/debugging-with-ssh</a></p>\n<blockquote>\n<p>Windows is not supported.</p>\n</blockquote>\n<p>Heh.</p>",
        "id": 271038649,
        "sender_full_name": "The 8472",
        "timestamp": 1644266323
    },
    {
        "content": "<p>Yea, there is no public access.</p>",
        "id": 271038705,
        "sender_full_name": "Eric Huss",
        "timestamp": 1644266368
    },
    {
        "content": "<p>All of these remote access services seem sketchy to me.</p>",
        "id": 271038740,
        "sender_full_name": "Eric Huss",
        "timestamp": 1644266387
    },
    {
        "content": "<p>I've even noticed some have been shut down by GitHub for violating terms.</p>",
        "id": 271038914,
        "sender_full_name": "Eric Huss",
        "timestamp": 1644266467
    },
    {
        "content": "<p>Another option would be establishing an outgoing ssh session to a trusted machine and then tunneling a session in reverse over it.</p>",
        "id": 271038965,
        "sender_full_name": "The 8472",
        "timestamp": 1644266511
    },
    {
        "content": "<p>But if GH doesn't like runners being kept alive then that would be an issue. Or is it just the 3rd party services?</p>",
        "id": 271039025,
        "sender_full_name": "The 8472",
        "timestamp": 1644266533
    },
    {
        "content": "<p>great QoL feature: <a href=\"https://drewdevault.com/2019/08/19/Introducing-shell-access-for-builds.html\">https://drewdevault.com/2019/08/19/Introducing-shell-access-for-builds.html</a></p>",
        "id": 271039232,
        "sender_full_name": "The 8472",
        "timestamp": 1644266661
    },
    {
        "content": "<p>I'm not sure.  GitHub seems generally pretty generous with what they allow.</p>",
        "id": 271039447,
        "sender_full_name": "Eric Huss",
        "timestamp": 1644266787
    },
    {
        "content": "<p>Travis had ssh access, too.  But it wasn't secure (it printed the access key in the logs).</p>",
        "id": 271039494,
        "sender_full_name": "Eric Huss",
        "timestamp": 1644266820
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/242791-t-infra/topic/msvc.20hangs/near/271023903\">said</a>:</p>\n<blockquote>\n<p>how easy is it to get a backtrace from a child process? Is there a way to do that without killing it maybe?</p>\n</blockquote>\n<p>If you can find the PID, you should be able to attach cdb (the command line Windows debugger), dump a backtrace of all threads and detach without killing the process. </p>\n<p><a href=\"https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/cdb-command-line-options\">https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/cdb-command-line-options</a></p>",
        "id": 271058573,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1644276322
    },
    {
        "content": "<p>Ok, then I think we should probably get the code for that in bootstrap/bin/rustc.rs and in CI always start dumping backtraces if we're running &gt;600 seconds or so, every second (as a start).</p>\n<p>I can take a stab at an initial impl, though debugging will probably be a bit hard without a windows machine (maybe I can figure out a vm...).</p>",
        "id": 271062082,
        "sender_full_name": "simulacrum",
        "timestamp": 1644278599
    },
    {
        "content": "<p>Trying with a random (Edge) process on my machine, it looks like this command does what we want:</p>\n<div class=\"codehilite\"><pre><span></span><code>PS C:\\Users\\wesleywiser&gt; &amp; &#39;C:\\Program Files (x86)\\Windows Kits\\10\\Debuggers\\x64\\cdb.exe&#39; -c &quot;~*k;qd&quot; -p 22156\n</code></pre></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>output</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>Microsoft (R) Windows Debugger Version 10.0.22000.1 AMD64<br>\nCopyright (c) Microsoft Corporation. All rights reserved.</p>\n<p>*** wait with pending attach</p>\n<p><strong>*</strong><strong>*</strong><strong>* Path validation summary </strong><strong>*</strong><strong>*</strong>**<br>\nResponse                         Time (ms)     Location<br>\nDeferred                                       srv*<br>\nSymbol search path is: srv*<br>\nExecutable search path is:<br>\nModLoad: 00007ff6<code>bba20000 00007ff6</code>bbd93000   C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe<br>\nModLoad: 00007fff<code>71ec0000 00007fff</code>720c7000   C:\\WINDOWS\\SYSTEM32\\ntdll.dll<br>\nModLoad: 00007fff<code>70860000 00007fff</code>7091d000   C:\\WINDOWS\\System32\\KERNEL32.DLL<br>\n{more of this omitted}<br>\n(568c.3a0c): Break instruction exception - code 80000003 (first chance)<br>\nntdll!DbgBreakPoint:<br>\n00007fff`71f66f70 cc              int     3<br>\n0:008&gt; cdb: Reading initial command '~*k;qd'</p>\n<p>0  Id: 568c.5944 Suspend: 1 Teb: 0000001f<code>398da000 Unfrozen \"CrUtilityMain\"\nChild-SP          RetAddr               Call Site\n0000001f</code>3a1fe858 00007fff<code>6f9b2a4e     ntdll!ZwWaitForSingleObject+0x14\n0000001f</code>3a1fe860 00007fff<code>01f20c3e     KERNELBASE!WaitForSingleObjectEx+0x8e\n0000001f</code>3a1fe900 00007fff<code>03296255     msedge!base::WaitableEvent::TimedWait+0x25e\n0000001f</code>3a1fea60 00007fff<code>01d9f2ec     msedge!base::MessagePumpDefault::Run+0xc5\n0000001f</code>3a1feb10 00007fff<code>03fb1cc3     msedge!base::sequence_manager::internal::ThreadControllerWithMessagePumpImpl::Run+0xec\n0000001f</code>3a1feb80 00007fff<code>024a2da2     msedge!base::RunLoop::Run+0xc3\n0000001f</code>3a1fec60 00007fff<code>03df0a1f     msedge!content::UtilityMain+0x7b2\n0000001f</code>3a1fef80 00007fff<code>03fb4b4a     msedge!content::RunOtherNamedProcessTypeMain+0x126\n0000001f</code>3a1ff090 00007fff<code>03faf811     msedge!content::ContentMainRunnerImpl::Run+0x15a\n0000001f</code>3a1ff1b0 00007fff<code>05162244     msedge!content::RunContentProcess+0x141\n0000001f</code>3a1ff3e0 00007fff<code>051a245f     msedge!content::ContentMain+0x4c\n0000001f</code>3a1ff460 00007ff6<code>bbb4e4f6     msedge!ChromeMain+0x23f\n0000001f</code>3a1ff620 00007ff6<code>bba71733     msedge_exe!MainDllLoader::Launch+0x17c\n0000001f</code>3a1ff830 00007ff6<code>bbaff782     msedge_exe!wWinMain+0x1337\n0000001f</code>3a1ffd00 00007fff<code>708754e0     msedge_exe!__scrt_common_main_seh+0x106\n0000001f</code>3a1ffd40 00007fff<code>71ec485b     KERNEL32!BaseThreadInitThunk+0x10\n0000001f</code>3a1ffd70 00000000`00000000     ntdll!RtlUserThreadStart+0x2b</p>\n<p>1  Id: 568c.1238 Suspend: 1 Teb: 0000001f<code>398dc000 Unfrozen \"LoaderLockSampler\"\nChild-SP          RetAddr               Call Site\n0000001f</code>3a9ff328 00007fff<code>6f9b2a4e     ntdll!ZwWaitForSingleObject+0x14\n0000001f</code>3a9ff330 00007fff<code>0384c4a5     KERNELBASE!WaitForSingleObjectEx+0x8e\n0000001f</code>3a9ff3d0 00007fff<code>03296281     msedge!base::WaitableEvent::Wait+0x185\n0000001f</code>3a9ff520 00007fff<code>01d9f2ec     msedge!base::MessagePumpDefault::Run+0xf1\n0000001f</code>3a9ff5d0 00007fff<code>03fb1cc3     msedge!base::sequence_manager::internal::ThreadControllerWithMessagePumpImpl::Run+0xec\n0000001f</code>3a9ff640 00007fff<code>048625b4     msedge!base::RunLoop::Run+0xc3\n0000001f</code>3a9ff720 00007fff<code>03fb0be5     msedge!base::Thread::Run+0x44\n0000001f</code>3a9ff780 00007fff<code>03b42259     msedge!base::Thread::ThreadMain+0x125\n0000001f</code>3a9ff810 00007fff<code>708754e0     msedge!base::</code>anonymous namespace'::ThreadFunc+0x189<br>\n0000001f<code>3a9ff8b0 00007fff</code>71ec485b     KERNEL32!BaseThreadInitThunk+0x10<br>\n0000001f<code>3a9ff8e0 00000000</code>00000000     ntdll!RtlUserThreadStart+0x2b</p>\n<p>2  Id: 568c.5c40 Suspend: 1 Teb: 0000001f<code>398de000 Unfrozen \"ThreadPoolServiceThread\"\nChild-SP          RetAddr               Call Site\n0000001f</code>3b1ff1e8 00007fff<code>6f9b2a4e     ntdll!ZwWaitForSingleObject+0x14\n0000001f</code>3b1ff1f0 00007fff<code>0384c4a5     KERNELBASE!WaitForSingleObjectEx+0x8e\n0000001f</code>3b1ff290 00007fff<code>03296281     msedge!base::WaitableEvent::Wait+0x185\n0000001f</code>3b1ff3e0 00007fff<code>01d9f2ec     msedge!base::MessagePumpDefault::Run+0xf1\n0000001f</code>3b1ff490 00007fff<code>03fb1cc3     msedge!base::sequence_manager::internal::ThreadControllerWithMessagePumpImpl::Run+0xec\n0000001f</code>3b1ff500 00007fff<code>048625b4     msedge!base::RunLoop::Run+0xc3\n0000001f</code>3b1ff5e0 00007fff<code>04862548     msedge!base::Thread::Run+0x44\n0000001f</code>3b1ff640 00007fff<code>03fb0be5     msedge!base::internal::ServiceThread::Run+0x18\n0000001f</code>3b1ff680 00007fff<code>03b42259     msedge!base::Thread::ThreadMain+0x125\n0000001f</code>3b1ff710 00007fff<code>708754e0     msedge!base::</code>anonymous namespace'::ThreadFunc+0x189<br>\n0000001f<code>3b1ff7b0 00007fff</code>71ec485b     KERNEL32!BaseThreadInitThunk+0x10<br>\n0000001f<code>3b1ff7e0 00000000</code>00000000     ntdll!RtlUserThreadStart+0x2b</p>\n<p>3  Id: 568c.634 Suspend: 1 Teb: 0000001f<code>398e0000 Unfrozen \"ThreadPoolForegroundWorker\"\nChild-SP          RetAddr               Call Site\n0000001f</code>3b9ff448 00007fff<code>6f9b2a4e     ntdll!ZwWaitForSingleObject+0x14\n0000001f</code>3b9ff450 00007fff<code>01f20c3e     KERNELBASE!WaitForSingleObjectEx+0x8e\n0000001f</code>3b9ff4f0 00007fff<code>030ac296     msedge!base::WaitableEvent::TimedWait+0x25e\n0000001f</code>3b9ff650 00007fff<code>01ef1f2e     msedge!base::internal::WorkerThread::Delegate::WaitForWork+0x106\n0000001f</code>3b9ff6a0 00007fff<code>049c6838     msedge!base::internal::WorkerThread::RunWorker+0x3fe\n0000001f</code>3b9ff7f0 00007fff<code>03b42259     msedge!base::internal::WorkerThread::RunPooledWorker+0x18\n0000001f</code>3b9ff830 00007fff<code>708754e0     msedge!base::</code>anonymous namespace'::ThreadFunc+0x189<br>\n0000001f<code>3b9ff8d0 00007fff</code>71ec485b     KERNEL32!BaseThreadInitThunk+0x10<br>\n0000001f<code>3b9ff900 00000000</code>00000000     ntdll!RtlUserThreadStart+0x2b</p>\n<p>4  Id: 568c.3574 Suspend: 1 Teb: 0000001f<code>398e2000 Unfrozen \"ThreadPoolBackgroundWorker\"\nChild-SP          RetAddr               Call Site\n0000001f</code>3c1ff348 00007fff<code>6f9b2a4e     ntdll!ZwWaitForSingleObject+0x14\n0000001f</code>3c1ff350 00007fff<code>01f20c3e     KERNELBASE!WaitForSingleObjectEx+0x8e\n0000001f</code>3c1ff3f0 00007fff<code>030ac296     msedge!base::WaitableEvent::TimedWait+0x25e\n0000001f</code>3c1ff550 00007fff<code>01ef1f2e     msedge!base::internal::WorkerThread::Delegate::WaitForWork+0x106\n0000001f</code>3c1ff5a0 00007fff<code>049c6878     msedge!base::internal::WorkerThread::RunWorker+0x3fe\n0000001f</code>3c1ff6f0 00007fff<code>03b42259     msedge!base::internal::WorkerThread::RunBackgroundPooledWorker+0x18\n0000001f</code>3c1ff730 00007fff<code>708754e0     msedge!base::</code>anonymous namespace'::ThreadFunc+0x189<br>\n0000001f<code>3c1ff7d0 00007fff</code>71ec485b     KERNEL32!BaseThreadInitThunk+0x10<br>\n0000001f<code>3c1ff800 00000000</code>00000000     ntdll!RtlUserThreadStart+0x2b</p>\n<p>5  Id: 568c.1f40 Suspend: 1 Teb: 0000001f<code>398e4000 Unfrozen \"Chrome_ChildIOThread\"\nChild-SP          RetAddr               Call Site\n0000001f</code>3c9ff058 00007fff<code>6f9c0a33     ntdll!ZwRemoveIoCompletion+0x14\n0000001f</code>3c9ff060 00007fff<code>030b2c36     KERNELBASE!GetQueuedCompletionStatus+0x53\n0000001f</code>3c9ff0c0 00007fff<code>030b10f0     msedge!base::MessagePumpForIO::WaitForWork+0x136\n0000001f</code>3c9ff380 00007fff<code>03fd4dc1     msedge!base::MessagePumpForIO::DoRunLoop+0x100\n0000001f</code>3c9ff6e0 00007fff<code>01d9f2ec     msedge!base::MessagePumpWin::Run+0x71\n0000001f</code>3c9ff740 00007fff<code>03fb1cc3     msedge!base::sequence_manager::internal::ThreadControllerWithMessagePumpImpl::Run+0xec\n0000001f</code>3c9ff7b0 00007fff<code>048625b4     msedge!base::RunLoop::Run+0xc3\n0000001f</code>3c9ff890 00007fff<code>03fb0be5     msedge!base::Thread::Run+0x44\n0000001f</code>3c9ff8f0 00007fff<code>03b42259     msedge!base::Thread::ThreadMain+0x125\n0000001f</code>3c9ff980 00007fff<code>708754e0     msedge!base::</code>anonymous namespace'::ThreadFunc+0x189<br>\n0000001f<code>3c9ffa20 00007fff</code>71ec485b     KERNEL32!BaseThreadInitThunk+0x10<br>\n0000001f<code>3c9ffa50 00000000</code>00000000     ntdll!RtlUserThreadStart+0x2b</p>\n<p>6  Id: 568c.35a0 Suspend: 1 Teb: 0000001f<code>398ea000 Unfrozen \"MemoryInfra\"\nChild-SP          RetAddr               Call Site\n0000001f</code>3d1ff218 00007fff<code>6f9b2a4e     ntdll!ZwWaitForSingleObject+0x14\n0000001f</code>3d1ff220 00007fff<code>0384c4a5     KERNELBASE!WaitForSingleObjectEx+0x8e\n0000001f</code>3d1ff2c0 00007fff<code>03296281     msedge!base::WaitableEvent::Wait+0x185\n0000001f</code>3d1ff410 00007fff<code>01d9f2ec     msedge!base::MessagePumpDefault::Run+0xf1\n0000001f</code>3d1ff4c0 00007fff<code>03fb1cc3     msedge!base::sequence_manager::internal::ThreadControllerWithMessagePumpImpl::Run+0xec\n0000001f</code>3d1ff530 00007fff<code>048625b4     msedge!base::RunLoop::Run+0xc3\n0000001f</code>3d1ff610 00007fff<code>03fb0be5     msedge!base::Thread::Run+0x44\n0000001f</code>3d1ff670 00007fff<code>03b42259     msedge!base::Thread::ThreadMain+0x125\n0000001f</code>3d1ff700 00007fff<code>708754e0     msedge!base::</code>anonymous namespace'::ThreadFunc+0x189<br>\n0000001f<code>3d1ff7a0 00007fff</code>71ec485b     KERNEL32!BaseThreadInitThunk+0x10<br>\n0000001f<code>3d1ff7d0 00000000</code>00000000     ntdll!RtlUserThreadStart+0x2b</p>\n<p>7  Id: 568c.623c Suspend: 1 Teb: 0000001f<code>398f0000 Unfrozen \"ThreadPoolForegroundWorker\"\nChild-SP          RetAddr               Call Site\n0000001f</code>3d9ff7a8 00007fff<code>6f9b2a4e     ntdll!ZwWaitForSingleObject+0x14\n0000001f</code>3d9ff7b0 00007fff<code>01f20c3e     KERNELBASE!WaitForSingleObjectEx+0x8e\n0000001f</code>3d9ff850 00007fff<code>030ac296     msedge!base::WaitableEvent::TimedWait+0x25e\n0000001f</code>3d9ff9b0 00007fff<code>01ef1c4b     msedge!base::internal::WorkerThread::Delegate::WaitForWork+0x106\n0000001f</code>3d9ffa00 00007fff<code>049c6838     msedge!base::internal::WorkerThread::RunWorker+0x11b\n0000001f</code>3d9ffb50 00007fff<code>03b42259     msedge!base::internal::WorkerThread::RunPooledWorker+0x18\n0000001f</code>3d9ffb90 00007fff<code>708754e0     msedge!base::</code>anonymous namespace'::ThreadFunc+0x189<br>\n0000001f<code>3d9ffc30 00007fff</code>71ec485b     KERNEL32!BaseThreadInitThunk+0x10<br>\n0000001f<code>3d9ffc60 00000000</code>00000000     ntdll!RtlUserThreadStart+0x2b</p>\n<h1>8  Id: 568c.3a0c Suspend: 1 Teb: 0000001f`398f2000 Unfrozen</h1>\n<p>Child-SP          RetAddr               Call Site<br>\n0000001f<code>3e1ffc48 00007fff</code>71f980fe     ntdll!DbgBreakPoint<br>\n0000001f<code>3e1ffc50 00007fff</code>708754e0     ntdll!DbgUiRemoteBreakin+0x4e<br>\n0000001f<code>3e1ffc80 00007fff</code>71ec485b     KERNEL32!BaseThreadInitThunk+0x10<br>\n0000001f<code>3e1ffcb0 00000000</code>00000000     ntdll!RtlUserThreadStart+0x2b<br>\nquit:</p>\n</div></div>",
        "id": 271137650,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1644331432
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> Any objection if I run some tests on the <code>rust-lang/rust</code> repo using windows-latest-xl to try to investigate this?</p>",
        "id": 271198133,
        "sender_full_name": "Eric Huss",
        "timestamp": 1644357950
    },
    {
        "content": "<p>no, should be fine</p>",
        "id": 271198144,
        "sender_full_name": "simulacrum",
        "timestamp": 1644357958
    },
    {
        "content": "<p>Builds using my personal account take way too long.</p>",
        "id": 271198193,
        "sender_full_name": "Eric Huss",
        "timestamp": 1644357967
    },
    {
        "content": "<p>I'm not having much luck reproducing.  Other than <a href=\"https://github.com/rust-lang/rust/blob/09cb29c64c2a0e15debf2d6fca2bc7c71a682033/src/ci/run.sh#L46-L48\">this <code>isCiBranch</code> check</a>, can anyone think of anything that is special about <code>auto</code> builds?  </p>\n<p>I'm working under the assumption that the <code>windows-latest-xl</code> runners are from the same pool on rust-lang vs rust-lang-ci.</p>",
        "id": 272055234,
        "sender_full_name": "Eric Huss",
        "timestamp": 1644969377
    }
]