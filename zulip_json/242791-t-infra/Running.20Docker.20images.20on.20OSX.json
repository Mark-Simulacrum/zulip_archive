[
    {
        "content": "<p>In trying to better understand why <code>i686-gnu-nopt</code> and <code>x86_64-gnu-llvm-8</code> are generating different backtraces in <a href=\"https://github.com/rust-lang/rust/pull/75048\">https://github.com/rust-lang/rust/pull/75048</a>, I've tried to get the respective Docker images running locally (on OS X).  This has thrown up a couple of interesting problems, which I've finally managed to work-around:</p>\n<ol>\n<li>\n<p>By default on Docker Desktop for Mac, the bind mounts defined in <code>src/ci/docker/run.sh</code> use osxfs—this uses 64-bit inodes, which causes problems in 32-bit containers  such as <code>i686-gnu-nopt</code>.  Best workaround I've been able to find is to use NFS mounts instead; would a PR to <code>run.sh</code> that  selects a different volume type depending on host be appropriate, or is that out-of-scope for the CI scripts (in which case perhaps it should be documented somewhere instead)?</p>\n</li>\n<li>\n<p>When using an NFS mount, Python's <code>TarFile.extract</code> fails to set file permissions due to an exception being raised on attempting to set file ownership (which it only attempts to do because the Docker user is root).  Best workaround I've been able to find is to switch to a non-root user in the Docker container and then run the build from there.  Likewise, would a PR that switches all containers to using a non-root user be acceptable?</p>\n</li>\n</ol>",
        "id": 206171412,
        "sender_full_name": "eggyal",
        "timestamp": 1596734794
    },
    {
        "content": "<p>I'd have posted as issues on Github but I wasn't sure whether infra related things belong on <code>rust-lang/rust</code> or in another repo?</p>",
        "id": 206171623,
        "sender_full_name": "eggyal",
        "timestamp": 1596734885
    },
    {
        "content": "<p>rust-lang/rust is appropriate for things related to rust-lang/rust's infrastructure</p>",
        "id": 206171680,
        "sender_full_name": "simulacrum",
        "timestamp": 1596734920
    },
    {
        "content": "<p>(e.g., ci scripts)</p>",
        "id": 206171688,
        "sender_full_name": "simulacrum",
        "timestamp": 1596734927
    },
    {
        "content": "<p>Okay, good to know!   You're everywhere, Mark.  :)</p>",
        "id": 206171730,
        "sender_full_name": "eggyal",
        "timestamp": 1596734949
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"249694\">@eggyal</span> The current PR CI failure seems like it's not due to a platform difference, though maybe things are even more questionable than I thought..</p>",
        "id": 206171915,
        "sender_full_name": "simulacrum",
        "timestamp": 1596735032
    },
    {
        "content": "<p>I'm leaning towards it being an LLVM difference, but that's why I wanted to get the Docker images running—so I can inspect the IR.</p>",
        "id": 206171989,
        "sender_full_name": "eggyal",
        "timestamp": 1596735080
    },
    {
        "content": "<p>hm, that would be surprising to me</p>",
        "id": 206172009,
        "sender_full_name": "simulacrum",
        "timestamp": 1596735091
    },
    {
        "content": "<p>You don't think it could be the frame being TCO'd by LLVM in some situations but not others?</p>",
        "id": 206172128,
        "sender_full_name": "eggyal",
        "timestamp": 1596735133
    },
    {
        "content": "<p>It's not impossible, I guess, but I would not expect that personally</p>",
        "id": 206172162,
        "sender_full_name": "simulacrum",
        "timestamp": 1596735152
    },
    {
        "content": "<p>did you try the black_box on main that you mentioned?</p>",
        "id": 206172222,
        "sender_full_name": "simulacrum",
        "timestamp": 1596735184
    },
    {
        "content": "<p>Still, once I have the Dockers running I can poke around a bit.</p>",
        "id": 206172235,
        "sender_full_name": "eggyal",
        "timestamp": 1596735190
    },
    {
        "content": "<p>I added <code>black_box</code> to the closure that invokes <code>main</code> but that didn't cause the closure to have its own frame on OS X.</p>",
        "id": 206172292,
        "sender_full_name": "eggyal",
        "timestamp": 1596735227
    },
    {
        "content": "<p>I would not be opposed to a patch to our <a href=\"http://run.sh\">run.sh</a> that fixed docker on mac, though we'd probably want to make sure it's not affecting CI just in case</p>",
        "id": 206172314,
        "sender_full_name": "simulacrum",
        "timestamp": 1596735238
    },
    {
        "content": "<p>(can just turn it off on CI)</p>",
        "id": 206172363,
        "sender_full_name": "simulacrum",
        "timestamp": 1596735245
    },
    {
        "content": "<p>I think we may need a root user in the containers for other reasons -- I imagine we might be able to avoid the exception, though by setting some flags on Python's TarFile.extract?</p>",
        "id": 206172427,
        "sender_full_name": "simulacrum",
        "timestamp": 1596735284
    },
    {
        "content": "<p>I looked through the Python source and don't think the exception can be avoided, but it's only an issue because executables in <code>/bin</code> are not being set <code>+x</code> so one could manually set those perms after.</p>",
        "id": 206172549,
        "sender_full_name": "eggyal",
        "timestamp": 1596735347
    },
    {
        "content": "<p>\"manually\" -&gt; in <code>bootstrap.py</code> I mean</p>",
        "id": 206172657,
        "sender_full_name": "eggyal",
        "timestamp": 1596735387
    },
    {
        "content": "<p>Yeah I would be fine with that if it's needed</p>",
        "id": 206172720,
        "sender_full_name": "simulacrum",
        "timestamp": 1596735423
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"249694\">@eggyal</span> did you produce the current .stderr file on macOS? Or is the current output from the i686-nopt builder?</p>",
        "id": 206172815,
        "sender_full_name": "simulacrum",
        "timestamp": 1596735479
    },
    {
        "content": "<p>oh, that might actually be the problem now that I think of it</p>",
        "id": 206172865,
        "sender_full_name": "simulacrum",
        "timestamp": 1596735488
    },
    {
        "content": "<p>the nopt builders don't have optimizations on (in tests)</p>",
        "id": 206172876,
        "sender_full_name": "simulacrum",
        "timestamp": 1596735494
    },
    {
        "content": "<p>I think there's a compiletest flag to override that, let me look</p>",
        "id": 206172926,
        "sender_full_name": "simulacrum",
        "timestamp": 1596735522
    },
    {
        "content": "<p>hm I don't think there's anything dedicated, but you can try a <code>// compile-flags: -O</code></p>",
        "id": 206173129,
        "sender_full_name": "simulacrum",
        "timestamp": 1596735616
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"249694\">@eggyal</span> mind doing that? my hope is that we can then get consistent output between the nopt and non-nopt builders, and then proceed</p>",
        "id": 206173171,
        "sender_full_name": "simulacrum",
        "timestamp": 1596735641
    },
    {
        "content": "<p>(Presumably, the output the PR builder is giving)</p>",
        "id": 206173186,
        "sender_full_name": "simulacrum",
        "timestamp": 1596735651
    },
    {
        "content": "<p>Sure I'll give it a crack.  Will have to do it via CI though as my croaky old MacBook is still building LLVM for <code>i686-gnu-nopt</code> <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 206173300,
        "sender_full_name": "eggyal",
        "timestamp": 1596735720
    }
]