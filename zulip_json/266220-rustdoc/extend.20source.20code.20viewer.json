[
    {
        "content": "<p>I intend to extend a bit the source code viewer by turning functions and types used into links to their definition. So if you have:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nb\">String</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"12\"</span><span class=\"p\">.</span><span class=\"n\">to_owned</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>\n<p><code>String</code> would link to the <code>String</code> definition. As a second step, it'd be awesome to be able to generate link for <code>to_owned</code> too but let's do it one step at a time. Depending on how we implement it, it could be very trivial though.</p>\n<p>I took a quick look to see how we do currently but we use something close to what we have in proc macro, meaning we only have tokens. I looked around a bit but I don't think we can extract much information just from a <code>Span</code> and the <code>TyCtxt</code> (unless I missed it) so I plan to keep a copy of the original AST we get and then use it alongside the tokens so that I can get the item from its span.</p>\n<p>So I opened this topic mostly to see with you if that sounds like a valid approach to you or if maybe you have some other ideas?</p>",
        "id": 232805363,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617302679
    },
    {
        "content": "<p>I don't think you can do this with only the AST, you at least need the <code>Res</code> of the type</p>",
        "id": 232808044,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617303773
    },
    {
        "content": "<p>in general to link type-relative paths you'll need at least the HIR. To link <code>to_owned()</code> you'll need type information which will break <a href=\"https://doc.rust-lang.org/nightly/rustdoc/advanced-features.html#cfgdoc-documenting-platform-specific-or-feature-specific-information\">https://doc.rust-lang.org/nightly/rustdoc/advanced-features.html#cfgdoc-documenting-platform-specific-or-feature-specific-information</a>.  So you'll need to ignore errors and let the links go if they cause an error.</p>",
        "id": 232808243,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617303849
    },
    {
        "content": "<p>I think this is a major expansion of scope and should not be taken lightly. I've wanted this for a while as well; but you need a _lot_ more analysis to do this right. It will also bloat the src sizes a ton.</p>\n<p>Note that there already exists a tool that does this: <a href=\"https://github.com/rust-dev-tools/cargo-src\">https://github.com/rust-dev-tools/cargo-src</a> . We should consider putting effort into that _first_, and then perhaps making that a dependency of rustdoc. I'm very wary of making it a part of rustdoc.</p>",
        "id": 232830892,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617314296
    },
    {
        "content": "<p>Also, if we end up implementing this, I think we should keep the UI the same (i.e., no link underlines) so as not to make the output busy.</p>",
        "id": 232838936,
        "sender_full_name": "Noah Lev",
        "timestamp": 1617319374
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Camelid</span> <a href=\"#narrow/stream/266220-rustdoc/topic/extend.20source.20code.20viewer/near/232838936\">said</a>:</p>\n<blockquote>\n<p>Also, if we end up implementing this, I think we should keep the UI the same (i.e., no link underlines) so as not to make the output busy.</p>\n</blockquote>\n<p>Agreed. I intended to just updated when you go over it like we do in the item path at the top of the items' page.</p>\n<p><span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> This is why I wanted to give a try: to be able to actually see the difference both in file size and in rendering performance. With all this information, we can see exactly the impact.</p>",
        "id": 232874440,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617352029
    },
    {
        "content": "<p>Seems fair. My understanding is that cargo src is a heavy piece of software, and from what I know from clippy this stuff is pretty heavy, so worth experimenting but I think cargo-src is a good place to put effort into a reusable library that rustdoc can then use</p>",
        "id": 232874542,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617352110
    },
    {
        "content": "<p>My understanding is that cargo-src is going through all code once again. If we could re-use the information rustdoc has directly, we might be able to cut down the run time. But that could be interesting to see that directly with nrc. Well, first, I'll start reading cargo-src source code and see how they do.</p>",
        "id": 232875516,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617352862
    },
    {
        "content": "<p>Actually no: cargo-src is relying on rls, so cannot be used inside rustdoc...</p>",
        "id": 232890040,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617364101
    },
    {
        "content": "<p>FWIW I've had pretty good success in some research work I've been doing with running rust-analyzer as a subprocess and doing go-to-def queries to recover information from an AST, and that is actually really fast overall</p>",
        "id": 232900233,
        "sender_full_name": "simulacrum",
        "timestamp": 1617371142
    },
    {
        "content": "<p>Someone just suggested me to look at the rust-analyzer source code. If it can be used as a library, that'd make this whole thing muuuuch simpler</p>",
        "id": 232900414,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617371245
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132040\">Manish Goregaokar</span> <a href=\"#narrow/stream/266220-rustdoc/topic/extend.20source.20code.20viewer/near/232830892\">said</a>:</p>\n<blockquote>\n<p>I think this is a major expansion of scope and should not be taken lightly. I've wanted this for a while as well; but you need a _lot_ more analysis to do this right. It will also bloat the src sizes a ton.</p>\n<p>Note that there already exists a tool that does this: <a href=\"https://github.com/rust-dev-tools/cargo-src\">https://github.com/rust-dev-tools/cargo-src</a> . We should consider putting effort into that _first_, and then perhaps making that a dependency of rustdoc. I'm very wary of making it a part of rustdoc.</p>\n</blockquote>\n<p>I am also unconvinced FWIW that this is a good fit for rustdoc's src view; it feels like a pretty large expansion in scope and may be better suited for an alternative tool. I'm wary of pushing too much static analysis into rustdoc, personally.</p>",
        "id": 232901246,
        "sender_full_name": "simulacrum",
        "timestamp": 1617371699
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"210316\">GuillaumeGomez</span> <a href=\"#narrow/stream/266220-rustdoc/topic/extend.20source.20code.20viewer/near/232900414\">said</a>:</p>\n<blockquote>\n<p>Someone just suggested me to look at the rust-analyzer source code. If it can be used as a library, that'd make this whole thing muuuuch simpler</p>\n</blockquote>\n<p>The LSP protocol is not too hard to get started with, fwiw, I don't think using it as a binary over that would cause many problems for prototyping</p>",
        "id": 232901304,
        "sender_full_name": "simulacrum",
        "timestamp": 1617371734
    },
    {
        "content": "<p>I managed to get goto-def with ~100 lines of code or so</p>",
        "id": 232901326,
        "sender_full_name": "simulacrum",
        "timestamp": 1617371747
    },
    {
        "content": "<p>(Can put up a gist of that file if useful)</p>",
        "id": 232901390,
        "sender_full_name": "simulacrum",
        "timestamp": 1617371765
    },
    {
        "content": "<p>I was hoping to not run the server part and simply use their library to build the map I needed</p>",
        "id": 232902371,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617372336
    },
    {
        "content": "<p>I mean, I hear you, but for experimentation I don't think the server being around is really that bad, and gets you up and running much faster :)</p>",
        "id": 232902754,
        "sender_full_name": "simulacrum",
        "timestamp": 1617372543
    },
    {
        "content": "<p>then sure, I'd gladly like to have that gist ;)</p>",
        "id": 232902939,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617372638
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span> <a href=\"https://gist.github.com/Mark-Simulacrum/c173aa652d1e327358c9279120a9896c\">https://gist.github.com/Mark-Simulacrum/c173aa652d1e327358c9279120a9896c</a></p>",
        "id": 232903698,
        "sender_full_name": "simulacrum",
        "timestamp": 1617373053
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 232903731,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617373079
    },
    {
        "content": "<p>that has the constants defined in a sort of hacky way for my use case (that particular one is off of a c file) but it shouldn't be hard to alter them for rust etc</p>",
        "id": 232903778,
        "sender_full_name": "simulacrum",
        "timestamp": 1617373084
    },
    {
        "content": "<p>(e.g., I think that invokes clangd and not rust-analyzer)</p>",
        "id": 232903801,
        "sender_full_name": "simulacrum",
        "timestamp": 1617373099
    },
    {
        "content": "<p>but it should work with minor adjustments for rust-analyzer too, happy to help with questions as well</p>",
        "id": 232903850,
        "sender_full_name": "simulacrum",
        "timestamp": 1617373132
    },
    {
        "content": "<p>I'll alter the code as needed then ;)</p>",
        "id": 232903861,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617373138
    },
    {
        "content": "<p>but first, a break</p>",
        "id": 232903886,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617373152
    },
    {
        "content": "<p>thanks again!</p>",
        "id": 232903891,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617373155
    },
    {
        "content": "<p>an idea I posted elsewhere which may be relevant is that I think a good way forward here is to make cargo-src really good (and maybe make it possible for it to output static html pages), and then give rustdoc a config to change its src links to something else. this can also be useful for having src link to github</p>",
        "id": 233399084,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617747211
    },
    {
        "content": "<p>and we can work on shipping cargo-src, and having tigher integration, but we'd have a separate cargo-src team</p>",
        "id": 233399149,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617747244
    },
    {
        "content": "<p>and they would commit to building that tool as is</p>",
        "id": 233399170,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617747254
    },
    {
        "content": "<p>because adding this in rustdoc is a _huge_ expansion of scope</p>",
        "id": 233399181,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617747263
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132040\">Manish Goregaokar</span> <a href=\"#narrow/stream/266220-rustdoc/topic/extend.20source.20code.20viewer/near/233399149\">said</a>:</p>\n<blockquote>\n<p>and we can work on shipping cargo-src, and having tigher integration, but we'd have a separate cargo-src team</p>\n</blockquote>\n<p><em>is</em> there a cargo-src team btw? I haven't seen activity in the discord channel since december 2019 <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 233399499,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617747467
    },
    {
        "content": "<p>There is not; it was kinda built as a proof of concept for RLS</p>",
        "id": 233499657,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617806518
    },
    {
        "content": "<p>I clarified this with nox on twitter but it's worth clarifying here too: I don't mean to say that \"cargo-src exists so we shouldn't do this\", or that we should add it to cargo-src: cargo-src has problems too; it is server-based (unlike rustdoc, which is files-based), and uses RLS save-analysis stuff, and doesn't currently work.</p>\n<p>I mostly mean that I would like to see this in a separate tool _like_ cargo-src. <a href=\"http://Docs.rs\">Docs.rs</a> can use it by default, and we can make it easy for others to use by default, but I'd rather have a first-class separately-maintained tool for this.</p>",
        "id": 233506193,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617808140
    },
    {
        "content": "<p>This could even be a pluggable \"source generation\" library</p>",
        "id": 233506835,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617808277
    },
    {
        "content": "<p>so rustdoc's current source library just generates sources, but you can plug in this library and get better stuff</p>",
        "id": 233506919,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617808297
    },
    {
        "content": "<p>and there's a way to use it separately</p>",
        "id": 233506940,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617808302
    },
    {
        "content": "<p>ooh like pretty_assert</p>",
        "id": 233507226,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617808352
    },
    {
        "content": "<p>I like that</p>",
        "id": 233507233,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617808353
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span> instead of discussing this over twitter</p>",
        "id": 233507779,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617808480
    },
    {
        "content": "<p>I don't see the point of having that done in a separate library. :-/</p>",
        "id": 233508103,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617808552
    },
    {
        "content": "<p>As for twitter, I'm simply providing info there too. ;)</p>",
        "id": 233508325,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617808593
    },
    {
        "content": "<p>But just for here to have as much information: this is my WIP: <a href=\"https://github.com/rust-lang/rust/compare/master...GuillaumeGomez:src-to-definition?expand=1\">https://github.com/rust-lang/rust/compare/master...GuillaumeGomez:src-to-definition?expand=1</a></p>",
        "id": 233508440,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617808623
    },
    {
        "content": "<p>as you can see, it's really small</p>",
        "id": 233508465,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617808628
    },
    {
        "content": "<p>it doesn't try to do much and I don't think we should do much more than that</p>",
        "id": 233508561,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617808659
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span> I think this prototype is pretty small and i would be fine with maintaining just this functionality; i'm not convinced that a _good_ version of this feature will be at all this simple</p>",
        "id": 233509501,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617808987
    },
    {
        "content": "<p>my argument in favor of that is \"look how big cargo-src is\"</p>",
        "id": 233509534,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617808999
    },
    {
        "content": "<p>No, cargo-src is handling cross-crates and a lot more things like providing documentation directly when you hover something</p>",
        "id": 233509811,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617809074
    },
    {
        "content": "<p>yeah</p>",
        "id": 233509885,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617809097
    },
    {
        "content": "<p>why shouldn't we handle cross-crate?</p>",
        "id": 233509908,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617809103
    },
    {
        "content": "<p>that's kinda my point, cross-crate seems like crucial functionality here?</p>",
        "id": 233509960,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617809116
    },
    {
        "content": "<p>(might be misunderstanding cross-crate)</p>",
        "id": 233509996,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617809125
    },
    {
        "content": "<p>well, for example I didn't plan to allow to provide link on <code>String</code> in things outside std</p>",
        "id": 233510047,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617809152
    },
    {
        "content": "<p>okay, this is exactly my point :)</p>",
        "id": 233510124,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617809168
    },
    {
        "content": "<blockquote>\n<p>i'm not convinced that a _good_ version of this feature will be at all this simple</p>\n</blockquote>\n<p>I think cross-crate is an example of what people will expect for a good version of this</p>",
        "id": 233510209,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617809191
    },
    {
        "content": "<p>Well, good version can come a loooot later</p>",
        "id": 233510245,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617809206
    },
    {
        "content": "<p>my argument is not one of implementation effort</p>",
        "id": 233510287,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617809219
    },
    {
        "content": "<p>for now we can simply have it on nightly and that's it</p>",
        "id": 233510293,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617809220
    },
    {
        "content": "<p>oh, my bad, please explain then</p>",
        "id": 233510332,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617809233
    },
    {
        "content": "<p>so taking a step back this is what i mean by expansion of scope, too: right now, [src] is bare minimum, and people expect it to be bare minimum. people do not ask for features to make it _the absolutely best perfect src viewers_. right? i  mean, there are feature requests, but not huge ones.</p>\n<p>This is fine, this isn't great; but as a team we focus on maintaining certain areas of rustdoc. we don't do much with src, we also don't need to spend time on it. great!</p>\n<p>the moment we try to make src do lots of cool things that you _cannot find otherwise_, that becomes a primary focus of the tool. rustdoc becomes the tool for generating crosslinked src. which is fine, but it also means that people will want it to be _good_, and this means it becomes very dumb for us to _not_ support things like cross-crate :)</p>\n<p>remember that intra doc links also went through an rfc, and it also took a while for it to get things like cross-crate and such. it's a significant portion of our maintenance burden now, which is _fine_, but the team agreed to maintain that</p>",
        "id": 233511376,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617809557
    },
    {
        "content": "<p>(in meetings)</p>",
        "id": 233511391,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617809563
    },
    {
        "content": "<p>Yes and it's handled correctly. If your main argument is the maintenance burden, then I don't see the issue. People want more out of the source code viewer as the tweet reactions showed. I don't see any issue with implementing it</p>",
        "id": 233511857,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617809704
    },
    {
        "content": "<p>I think with an RFC we can see what people would want in such a thing and then carefully define our scope</p>",
        "id": 233512195,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617809806
    },
    {
        "content": "<p>because it's quite possible they'll want things like \"link every identifier to its type\" (HUGE amount of load)</p>",
        "id": 233512234,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617809824
    },
    {
        "content": "<p>I don't think an RFC is that big a barrier here</p>",
        "id": 233512405,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617809882
    },
    {
        "content": "<p>But an RFC would prevent us to do anything until then. What I suggest is instead to have something small only on nightly and when we have something, we then write an RFC to stabilize it</p>",
        "id": 233512453,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617809885
    },
    {
        "content": "<p>it definitely is</p>",
        "id": 233512469,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617809890
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span> oh i'm happy to allow this to land on nightly behind a cli flag</p>",
        "id": 233512522,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617809906
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"210316\">GuillaumeGomez</span> <a href=\"#narrow/stream/266220-rustdoc/topic/extend.20source.20code.20viewer/near/233512453\">said</a>:</p>\n<blockquote>\n<p>But an RFC would prevent us to do anything until then. What I suggest is instead to have something small only on nightly and when we have something, we then write an RFC to stabilize it</p>\n</blockquote>\n<p>I am strongly against this because <a href=\"http://docs.rs\">docs.rs</a> uses nightly</p>",
        "id": 233512528,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617809907
    },
    {
        "content": "<p>the second people can use it they will, and they'll be mad if it's removed</p>",
        "id": 233512549,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617809917
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> okay behind a cli flag that <a href=\"http://docs.rs\">docs.rs</a> doesn't use?</p>",
        "id": 233512559,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617809922
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132040\">Manish Goregaokar</span> <a href=\"#narrow/stream/266220-rustdoc/topic/extend.20source.20code.20viewer/near/233512559\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> okay behind a cli flag that <a href=\"http://docs.rs\">docs.rs</a> doesn't use?</p>\n</blockquote>\n<p>I would still rather not because you can pass custom rustflags</p>",
        "id": 233512597,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617809936
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> Should have precised a nightly argument, my bad</p>",
        "id": 233512614,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617809943
    },
    {
        "content": "<p>like, I'm ok if we get consensus that we want \"something like this\" and then put it on nightly behind a feature gate</p>",
        "id": 233512664,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617809962
    },
    {
        "content": "<p>but I don't think we should implement it before we decide whether we want it at all</p>",
        "id": 233512689,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617809974
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> oh yeah feature gate is fine</p>",
        "id": 233512708,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617809981
    },
    {
        "content": "<p>I feel like I'm not explaining this well :/</p>",
        "id": 233512835,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617810020
    },
    {
        "content": "<blockquote>\n<p>the second people can use it they will, and they'll be mad if it's removed<br>\nwe kinda made this mistake with intra-doc, though we didn't really want to remove it</p>\n</blockquote>",
        "id": 233512876,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617810036
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> from twitter, it seems quite unanimous. In any case, my PR is far from done so we have plenty of time. And until it's stabilized, we can completely change it as many times as we want</p>",
        "id": 233512885,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617810039
    },
    {
        "content": "<p>my concern is that people will use it as if it's stable whether it has a feature gate or not, look at all the people going to <a href=\"https://github.com/rust-lang/rust/issues/82768\">https://github.com/rust-lang/rust/issues/82768</a> saying they want to use it on <a href=\"http://docs.rs\">docs.rs</a> immediately</p>",
        "id": 233512928,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617810054
    },
    {
        "content": "<blockquote>\n<p>And until it's stabilized, we can completely change it as many times as we want</p>\n</blockquote>\n<p>that's my point though, if people start using it immediately we can't really :/</p>",
        "id": 233512977,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617810073
    },
    {
        "content": "<p>I can understand them haha</p>",
        "id": 233512981,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617810075
    },
    {
        "content": "<p>No, if it's nightly, it's prone to change</p>",
        "id": 233513011,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617810089
    },
    {
        "content": "<p>that's the deal</p>",
        "id": 233513033,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617810098
    },
    {
        "content": "<p>it's like a preview feature: \"use it at your own risk\"</p>",
        "id": 233513056,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617810109
    },
    {
        "content": "<p>maybe the solution here is <a href=\"http://docs.rs\">docs.rs</a> shouldn't use nightly</p>",
        "id": 233513070,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617810116
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> it needs to because some crates are nightly only</p>",
        "id": 233513160,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617810135
    },
    {
        "content": "<p>I don't see any other way for stability guarentees to actually mean something</p>",
        "id": 233513163,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617810136
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span> i said this in the case of notable_trait, but you've gotta be careful making conclusions off of twitter/etc like that because the conclusion you can make from your tweet is that folks want this functionality _somewhere_.</p>\n<p>I'm totally fine with this feature being something rustdoc can hook into (even by default!). I'm just wary of maintaining it inside rustdoc _without understanding the scope_. An RFC helps us understand the scope</p>",
        "id": 233513302,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617810190
    },
    {
        "content": "<p>and <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span>'s point beautifully illustrates why product-oriented thinking is important here, in that analogy <a href=\"http://docs.rs\">docs.rs</a> is our consumer and we need to make sure they can deal</p>",
        "id": 233513482,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617810257
    },
    {
        "content": "<p>nightly features are prone to breaking change, so i don't see how it comes in scope here</p>",
        "id": 233513630,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617810324
    },
    {
        "content": "<p>I agree for the RFC, but only once we have tested the feature for some time and got feedback so we know what is expected</p>",
        "id": 233513686,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617810344
    },
    {
        "content": "<p>Just to chime in, I personally like the sound of the 'pluggable' approach Manish mentioned.</p>",
        "id": 233513721,
        "sender_full_name": "CraftSpider",
        "timestamp": 1617810358
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"210316\">GuillaumeGomez</span> <a href=\"#narrow/stream/266220-rustdoc/topic/extend.20source.20code.20viewer/near/233513686\">said</a>:</p>\n<blockquote>\n<p>I agree for the RFC, but only once we have tested the feature for some time and got feedback so we know what is expected</p>\n</blockquote>\n<p>this is what experimental RFCs are for</p>",
        "id": 233513798,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617810375
    },
    {
        "content": "<p>so you don't have to lock down the final product, you're just exploring the space</p>",
        "id": 233513826,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617810385
    },
    {
        "content": "<p>I really don't like the idea of adding this without at least an eRFC</p>",
        "id": 233513863,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617810395
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"319144\">CraftSpider</span> <a href=\"#narrow/stream/266220-rustdoc/topic/extend.20source.20code.20viewer/near/233513721\">said</a>:</p>\n<blockquote>\n<p>Just to chime in, I personally like the sound of the 'pluggable' approach Manish mentioned.</p>\n</blockquote>\n<p>I'm curious: why?</p>",
        "id": 233513984,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617810434
    },
    {
        "content": "<p>would it make sense to have the intra-doc links as a plugin too?</p>",
        "id": 233514011,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617810448
    },
    {
        "content": "<p>and themes too?</p>",
        "id": 233514030,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617810458
    },
    {
        "content": "<p>themes <em>are</em> a plugin</p>",
        "id": 233514242,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617810539
    },
    {
        "content": "<p>you can pass <code>--theme</code> on stable</p>",
        "id": 233514251,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617810542
    },
    {
        "content": "<p>No, they are not</p>",
        "id": 233514282,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617810553
    },
    {
        "content": "<p>It's an option</p>",
        "id": 233514294,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617810557
    },
    {
        "content": "<p>there are 3 by default and you can extend them</p>",
        "id": 233514312,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617810565
    },
    {
        "content": "<p>themes have an \"API\" that is the \"stable\" css classes</p>",
        "id": 233514317,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617810567
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"210316\">GuillaumeGomez</span> <a href=\"#narrow/stream/266220-rustdoc/topic/extend.20source.20code.20viewer/near/233514312\">said</a>:</p>\n<blockquote>\n<p>there are 3 by default and you can extend them</p>\n</blockquote>\n<p>that is literally what a plugin is lol</p>",
        "id": 233514327,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617810572
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span> curious: when we say pluggable, are you assuming that we're declaring it won't be the default?</p>",
        "id": 233514376,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617810593
    },
    {
        "content": "<p>because that's not what we're saying</p>",
        "id": 233514384,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617810597
    },
    {
        "content": "<p>Ah, maybe we have a different meaning for plugin</p>",
        "id": 233514392,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617810599
    },
    {
        "content": "<p>pluggable = can be swapped out</p>",
        "id": 233514460,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617810611
    },
    {
        "content": "<p>No, what I'm afraid of is that we put it somewhere outside of rustdoc</p>",
        "id": 233514475,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617810618
    },
    {
        "content": "<p>aaaah</p>",
        "id": 233514489,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617810624
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span> can you expand on what you mean here?</p>",
        "id": 233514510,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617810632
    },
    {
        "content": "<p>if that's what you mean, I intended to disable it by default at first</p>",
        "id": 233514531,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617810639
    },
    {
        "content": "<p>my concern is _maintenance_ wise</p>",
        "id": 233514533,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617810641
    },
    {
        "content": "<p>it should perhaps be outside of rustdoc</p>",
        "id": 233514551,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617810651
    },
    {
        "content": "<p>OR it should be well-scoped enough that the rustdoc team is happy with taking on the maintenance efforts</p>",
        "id": 233514578,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617810667
    },
    {
        "content": "<p>It's tightly bound to rustdoc and shouldn't be put outside of rustdoc</p>",
        "id": 233514582,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617810669
    },
    {
        "content": "<p>and I'm happy with taking the maintenance for it (I'm paid to work on rustdoc now so I have more time now)</p>",
        "id": 233514642,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617810692
    },
    {
        "content": "<p>Intra-doc links, no. They're more fundamental, and I believe much harder to implement that way. Themes already <em>are</em> customizable, just in a different way.<br>\nImplementing it this way gets two advantages:<br>\n1) If we want it ourselves, this way doesn't stop that, but it also allows us to not<br>\n2) I think a good design would often look like this to some degree anyways, this ensures forward compat is considered.</p>",
        "id": 233514663,
        "sender_full_name": "CraftSpider",
        "timestamp": 1617810700
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span> I don't think a single person being able to maintain a thing is sufficient</p>",
        "id": 233514753,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617810725
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"319144\">@CraftSpider</span> Didn't understand your explanations at all, sorry :s</p>",
        "id": 233514774,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617810734
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span> also stepping back a bit for _good_ design i actually think the pluggable thing is better -- I personally have _often_ wanted to generate docs that link to github</p>",
        "id": 233514848,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617810767
    },
    {
        "content": "<p>Ah, sorry. Give me a minute, I'll be back not on my phone</p>",
        "id": 233514850,
        "sender_full_name": "CraftSpider",
        "timestamp": 1617810767
    },
    {
        "content": "<p>so having --srclinks plain --srclinks github --srclinks fancy</p>",
        "id": 233514875,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617810779
    },
    {
        "content": "<p>idk</p>",
        "id": 233514919,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617810792
    },
    {
        "content": "<p>people with size constraints can do --srclinks plain</p>",
        "id": 233514932,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617810803
    },
    {
        "content": "<p>I don't like this approach but I think it's a point of view thing here</p>",
        "id": 233514936,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617810804
    },
    {
        "content": "<p>or even --srclinks none</p>",
        "id": 233514939,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617810807
    },
    {
        "content": "<p>like i think there's a lot of cool stuff we could do if there's a flag like we have for themes</p>",
        "id": 233514969,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617810819
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132040\">Manish Goregaokar</span> <a href=\"#narrow/stream/266220-rustdoc/topic/extend.20source.20code.20viewer/near/233514848\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"210316\">GuillaumeGomez</span> also stepping back a bit for _good_ design i actually think the pluggable thing is better -- I personally have _often_ wanted to generate docs that link to github</p>\n</blockquote>\n<p><a href=\"http://docs.rs\">docs.rs</a> also wants to do this</p>",
        "id": 233514988,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617810825
    },
    {
        "content": "<p>this is exactly why I think there should be an RFC, so stakeholders have a place to say what would be useful</p>",
        "id": 233515082,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617810848
    },
    {
        "content": "<p>what I have in mind is <code>--enable-src-definitions</code> until we have a good enough thing (or an RFC)</p>",
        "id": 233515090,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617810850
    },
    {
        "content": "<p>sure</p>",
        "id": 233515210,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617810888
    },
    {
        "content": "<p>But I agree that it should disabled</p>",
        "id": 233515220,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617810889
    },
    {
        "content": "<p>happy to land a proof of concept as long as it is small enough</p>",
        "id": 233515240,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617810896
    },
    {
        "content": "<p>if that's what a plugin means to you, we agree on that</p>",
        "id": 233515257,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617810902
    },
    {
        "content": "<p>well</p>",
        "id": 233515272,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617810906
    },
    {
        "content": "<p>i hold multiple opinions here</p>",
        "id": 233515314,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617810917
    },
    {
        "content": "<p>What i want to avoid is having it in a different repository</p>",
        "id": 233515333,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617810926
    },
    {
        "content": "<p>(or in a different crate)</p>",
        "id": 233515385,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617810945
    },
    {
        "content": "<p>Firstly, I think we should be very clear on the scope of this. An RFC is enough for that. We should ask in a pre-rfc post what people would like to see in such a feature.</p>\n<p>If the scope is pretty large, I would prefer it to be a different \"project\" (can just be a folder under src/tools/rustdoc or src/tools), with perhaps its own list of maintainers (OWNERS file if it's under rustdoc/), and perhaps able to be run on its own (i would _love_ that). rustdoc can integrate directly into it so from the user's pov it doesn't matter. This is _entirely_ a maintenance concern. The user doesn't need to care.</p>\n<p>by pluggable I mean that for src generation we could have a set of traits and you can write different src generators. Because these APIs are unstable basically only rustdoc will write such src generators, but my main concern is that I don't want src generation stuff to leak into the rest of the code.</p>\n<p>So then rustdoc could have html/srcgen/plain and srcgen/fancy and srcgen/github folders, and each would implement this trait. that way it's _clean_,  we don't have to worry about it when working on the rest of rustdoc</p>\n<p>I do feel like if we did an RFC about it folks will bring up the github thing and that's why I'm focusing on pluggability; give rustdoc a single API for this, and we write multiple srcgen thingies for it</p>",
        "id": 233516858,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617811446
    },
    {
        "content": "<p>(unsure if this is what <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> means)</p>",
        "id": 233517367,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617811656
    },
    {
        "content": "<p>basically yes</p>",
        "id": 233517379,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617811664
    },
    {
        "content": "<p>but that's mostly what i'm looking for <span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span></p>",
        "id": 233517381,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617811667
    },
    {
        "content": "<p>Okay, Manish basically just summed up what I was going to say. (Sorry for the delay, Windows Update ate my laptop for a bit)</p>",
        "id": 233517383,
        "sender_full_name": "CraftSpider",
        "timestamp": 1617811668
    },
    {
        "content": "<p>i think having a trait API for this would make it much much easier to maintain</p>",
        "id": 233517399,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617811678
    },
    {
        "content": "<p>if there's an explicit opt-in for github then <a href=\"http://docs.rs\">docs.rs</a> can say \"use github for things with a github repo and use the built-in src viewer otherwise\"</p>",
        "id": 233517462,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617811691
    },
    {
        "content": "<p>intra doc links is scattered through the code and it's not great but it's also ... a one time thing</p>",
        "id": 233517466,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617811692
    },
    {
        "content": "<p>or even use its own source viewer instead of rustdoc's</p>",
        "id": 233517487,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617811703
    },
    {
        "content": "<p>--srclinks=github=manishearth/elsa:1.2.3</p>",
        "id": 233517495,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617811708
    },
    {
        "content": "<p>idk</p>",
        "id": 233517520,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617811720
    },
    {
        "content": "<p>oh I guess we do have to pass it for each crate at once, since you can view the source of an item re-exported from another crate</p>",
        "id": 233517584,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617811744
    },
    {
        "content": "<p>see this is exactly why an RFC would be useful <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 233517608,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617811753
    },
    {
        "content": "<p>The specifics can be an RFC, but I like the overall idea proposed :P</p>",
        "id": 233517658,
        "sender_full_name": "CraftSpider",
        "timestamp": 1617811772
    },
    {
        "content": "<p>To note that one reason I approve of this kind of design is the reason JSON bugs have some pain points: HTML was the only generator for so long, it's woven forward and back through the system. There isn't as clear a line of 'backend/generator', meaning that even entirely within rustdoc JSON leaks HTML implementation details sometimes.<br>\nAdopting a separated design from the start saves you from later issues, meaning we don't need external tools, but we make sure we aren't accidentally shooting ourselves in the foot down the line</p>",
        "id": 233517998,
        "sender_full_name": "CraftSpider",
        "timestamp": 1617811896
    },
    {
        "content": "<blockquote>\n<p>Adopting a separated design from the start saves you from later issues, meaning we don't need external tools, but we make sure we aren't accidentally shooting ourselves in the foot down the line</p>\n</blockquote>\n<p>Yeah this is my core point</p>",
        "id": 233518570,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617812137
    },
    {
        "content": "<p>well i have many core points</p>",
        "id": 233518575,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617812141
    },
    {
        "content": "<p>but i want to +1 that</p>",
        "id": 233518585,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617812146
    },
    {
        "content": "<p>I think this is over-engineering. Way too much. We're talking about a feature in the HTML generator. Just like no one (I know of) is using their own theme, I don't see anyone adding their own source code generator. Making things generic and extendable is rarely a good idea if it's not meant to be. But anyway, it's still far into the future, for now I'm still working on the POC that will remain disabled by default until we reach an agreement on what this feature should look like. Do you think it's fine as a start?</p>",
        "id": 233527716,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617815656
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span>  No, I'm not saying we should do this to enable others to write their own srcgen (I explicitly said earlier: it's going to be an unstable API, nobody will want to use it), I'm saying we should do this to make it easy to maintain internally</p>",
        "id": 233543099,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617821915
    },
    {
        "content": "<p>because my _guess_ is that it's goign to end up being way more complex than your current PR; and I want that code abstracted by a trait</p>",
        "id": 233543145,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617821937
    },
    {
        "content": "<p>and _if we do that_ it becomes easy to add \"plain\" srcdoc and \"link to github\" srcdoc</p>",
        "id": 233543183,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617821952
    },
    {
        "content": "<p>the latter is definitely something people want as well, and i'm talking about it because a unified solution is nice</p>",
        "id": 233543228,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617821976
    },
    {
        "content": "<p>Ah I see, makes sense.</p>",
        "id": 233544049,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617822273
    },
    {
        "content": "<p>like, i have two primary concerns here:</p>\n<ul>\n<li>maintenance</li>\n<li>understanding the scope</li>\n</ul>\n<p>the former is helped by abstracting it away properly (and as a bonus we can make --srcdoc github work later!). the latter is helped by an rfc and an internals post so we know how far we have to go with this</p>",
        "id": 233544419,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617822412
    }
]