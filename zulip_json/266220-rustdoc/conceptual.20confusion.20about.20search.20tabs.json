[
    {
        "content": "<p>I've been trying to figure out: Are the tabs on the search page more like inputs or more like outputs? They're presented kinda like outputs. But it makes a little more sense to model them as inputs to a search function. I.e. <code>search(foo, IN_PARAMETERS)</code>; <code>search(foo, IN_RETURN_VALUES)</code>.</p>\n<p>It's also weird because depending on how the query is parsed, it can mean \"pick one of those tabs.\" For example, searching <code>-&gt; foo</code> \"In Names\" or \"In Parameters\" is meaningless. Essentially <code>-&gt;</code> is a filter that means \"only generate the 'In Return Values' tab, and take me there.\"</p>\n<p>Also, <code>str -&gt; usize</code> takes you to the \"In Return Values\" tab, but that's not really what the search means. The search is something like \"Find me all functions that match this signature.\"</p>\n<p>I think we should probably eliminate the tabbed output for any function signature-based search. The tabbed output only really makes sense when you're searching for a type.</p>\n<p>Alternately: maybe search is the wrong way to solve the \"in parameters\" and \"in return values\" problem. For instance, maybe there should be a link from the page for <code>struct Foo</code> to find all methods that take <code>Foo</code> in parameters, and all methods that have<code>Foo</code> in return values. We could use the search code to find these, but it could have a different and clearer UI.</p>",
        "id": 266991488,
        "sender_full_name": "jsha",
        "timestamp": 1641416985
    },
    {
        "content": "<p>I think we should just get rid of the tabs altogether. <code>-&gt; foo</code> or <code>foo -&gt;</code> should handle their functionality.</p>",
        "id": 266997497,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641420064
    }
]