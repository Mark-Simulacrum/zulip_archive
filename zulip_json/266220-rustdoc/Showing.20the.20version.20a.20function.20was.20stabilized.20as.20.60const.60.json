[
    {
        "content": "<p>Picked it up, threaded const_stable_since through all the rendering, now waiting to see what tests fail / where I'll need to add new tests.</p>",
        "id": 218237929,
        "sender_full_name": "CraftSpider",
        "timestamp": 1606695328
    },
    {
        "content": "<p>that sounds awesome :D</p>",
        "id": 218237939,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606695349
    },
    {
        "content": "<p>as a start I recommend running <code>x.py doc --stage 1 library/std --open</code> and making sure it looks decent</p>",
        "id": 218237957,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606695363
    },
    {
        "content": "<p>Thanks. Implementation thoughts: 4 cases: <code>(None, None)</code>, <code>(Some(v), None)</code>, <code>(None, Some(cv))</code>, and <code>(Some(v), Some(cv)</code>. This assumes 'None' also includes the condition <code>containing != ver</code> and <code>!ver.is_empty()</code>. The case for all but one is trivial, but one case is unsure: const version is some, stable is None. Maybe just display 'const: X.X' instead of 'X.X (const: Y.Y)'?</p>",
        "id": 218238851,
        "sender_full_name": "CraftSpider",
        "timestamp": 1606696697
    },
    {
        "content": "<p>this is an internal attribute, so I would just error out if it has <code>const_since</code> but not <code>stable</code></p>",
        "id": 218238875,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606696746
    },
    {
        "content": "<p>if you run into errors with that, they should be fixed, not displayed :P</p>",
        "id": 218238885,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606696769
    },
    {
        "content": "<p>see <a href=\"https://github.com/rust-lang/rust/pull/76143/\">https://github.com/rust-lang/rust/pull/76143/</a> for an example of adding a new error</p>",
        "id": 218238943,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606696819
    },
    {
        "content": "<p>I'm more thinking the case where it is stable, but stable ver == containing_stable_ver, EG Result is stable from 1.0, and <code>is_some</code> is stable from 1.0, but it's const stable from after. Because currently, that displays nothing, so should it start displaying that duplicate information?</p>",
        "id": 218239098,
        "sender_full_name": "CraftSpider",
        "timestamp": 1606697088
    },
    {
        "content": "<p>I might be misreading: you're thinking of the case when an API was stabilized as const at the same time it was stabilized? But that doesn't match your second sentence.</p>",
        "id": 218239165,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606697176
    },
    {
        "content": "<p>Let me give a pseudocode example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[stable(version = </span><span class=\"s\">\"1.0\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">SomeStruct</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[const_stable(version = </span><span class=\"s\">\"1.50\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[stable(version = </span><span class=\"s\">\"1.0\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">is_fooey</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Existing code displays no 'stable since' on the function, because <code>stable_version</code> is the same as <code>containing_stable_version</code>. How should the new code handle this case?</p>",
        "id": 218239305,
        "sender_full_name": "CraftSpider",
        "timestamp": 1606697411
    },
    {
        "content": "<p>oh I see - currently, the <code>stable</code> annotation is deduplicated on <code>is_fooey</code> because it's also present on the impl</p>",
        "id": 218239345,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606697474
    },
    {
        "content": "<p>Exactly. Should I start displaying it, or should I only display a <code>const: X.X</code> to not add duplication?</p>",
        "id": 218239359,
        "sender_full_name": "CraftSpider",
        "timestamp": 1606697504
    },
    {
        "content": "<p>I would show both to avoid ambiguity, I think: <code>X.X (const Y.Y)</code></p>",
        "id": 218239362,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606697507
    },
    {
        "content": "<p>Alright, I'll do that</p>",
        "id": 218239367,
        "sender_full_name": "CraftSpider",
        "timestamp": 1606697522
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> - does that match your expectations?</p>",
        "id": 218239409,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606697540
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/twyDaraBJifBFvZJJR_7Fp5P/image.png\">image.png</a> <br>\nWith that behavior</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/twyDaraBJifBFvZJJR_7Fp5P/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/twyDaraBJifBFvZJJR_7Fp5P/image.png\"></a></div>",
        "id": 218239700,
        "sender_full_name": "CraftSpider",
        "timestamp": 1606698016
    },
    {
        "content": "<p>looks great <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 218239720,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606698066
    },
    {
        "content": "<p>Question: How does rustdoc handle emission of errors? In <code>from_def_id_and_parts</code>, do I emit an error with the <code>cx.tcx.error()</code> like in a normal rustc situation?</p>",
        "id": 218242774,
        "sender_full_name": "CraftSpider",
        "timestamp": 1606703214
    },
    {
        "content": "<p>yes, that's fine</p>",
        "id": 218242855,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606703330
    },
    {
        "content": "<p>if you're feeling really ambitious you can add a new error code</p>",
        "id": 218242860,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606703342
    },
    {
        "content": "<p>That would be an interesting time, and I'd probably want to do that in the rustc side I imagine. Make it a rule that 'const_stable' must be 'stable'.</p>",
        "id": 218243102,
        "sender_full_name": "CraftSpider",
        "timestamp": 1606703730
    },
    {
        "content": "<p>if you want to do that in a follow-up, I'm 100% ok with that</p>",
        "id": 218243151,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606703787
    },
    {
        "content": "<p>since I don't think it's enforced currently</p>",
        "id": 218243152,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606703793
    },
    {
        "content": "<p>Yeah, I think a follow-up would be good. I'll add a comment to the pull mentioning it, and write up an issue if one isn't already out there. Unrelated: Wish Intellij-Rust obeyed <code>#![feature(rustc_private)]</code>, the alternative I've found is repeatedly adding them all to cargo, then commenting it out before running tests so it doesn't rebuild them as deps</p>",
        "id": 218243233,
        "sender_full_name": "CraftSpider",
        "timestamp": 1606703915
    },
    {
        "content": "<p>actually, yeah, let's do that</p>",
        "id": 218243234,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606703916
    },
    {
        "content": "<p>if it helps, rust-analyzer works well with rustc_private IME</p>",
        "id": 218243240,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606703939
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/266220-rustdoc/topic/Issue.2076998/near/218239409\">said</a>:</p>\n<blockquote>\n<p>cc <span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> - does that match your expectations?</p>\n</blockquote>\n<p>I don't have any expectations^^ happy to leave UI design up to you here</p>",
        "id": 218269008,
        "sender_full_name": "RalfJ",
        "timestamp": 1606731726
    },
    {
        "content": "<p>Well, it certainly seems good enough for a first draft, if people complain it's easy to change. I think I like it as-is, though.</p>",
        "id": 218280350,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606739412
    },
    {
        "content": "<p>looks pretty good :)<br>\n<a href=\"/user_uploads/4715/MEtdWq71PgIK4VeX-1pZI_MM/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/MEtdWq71PgIK4VeX-1pZI_MM/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/MEtdWq71PgIK4VeX-1pZI_MM/image.png\"></a></div>",
        "id": 218593876,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606931476
    },
    {
        "content": "<p>definitively nice :)</p>",
        "id": 218593976,
        "sender_full_name": "apiraino",
        "timestamp": 1606931524
    }
]