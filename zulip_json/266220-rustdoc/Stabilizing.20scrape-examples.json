[
    {
        "content": "<p>Hi Rustdoc team, I would like to push the scrape-examples feature for stabilization soon. It's a big enough feature that it's easy to languish for months without progress. But I think it is <strong>so close</strong> to being done. Specifically, with the merging of:</p>\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust/pull/93217\">rust-lang/rust#93217</a></li>\n<li><a href=\"https://github.com/rust-lang/cargo/pull/10343\">rust-lang/cargo#10343</a></li>\n</ul>\n<p>Then I think scrape-examples is ready for prime-time. Right now, <a href=\"https://github.com/rust-lang/rust/issues/93217\">#93217</a> is waiting for confirmation from reviewers (<span class=\"user-mention\" data-user-id=\"315412\">@jsha</span> <span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span> <span class=\"user-mention\" data-user-id=\"307537\">@Noah Lev</span>). And <a href=\"https://github.com/rust-lang/rust/issues/10343\">#10343</a> is blocked on <a href=\"https://github.com/rust-lang/rust/issues/93217\">#93217</a> being merged.</p>\n<p>Please let me know if y'all have any remaining high-level issues or objections to the current design of the extension, especially those two PRs. If not, let me know if there's anything else I can do to help simplify the review process.</p>",
        "id": 277757477,
        "sender_full_name": "Will Crichton",
        "timestamp": 1649089689
    },
    {
        "content": "<p>It's still in my review list, I'll try to get back to it this week.</p>",
        "id": 277757686,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1649089802
    },
    {
        "content": "<p>As for the cargo PR, it's not up to the rustdoc team I think.</p>",
        "id": 277757770,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1649089833
    },
    {
        "content": "<p>I didn't realize that PR was waiting on review. Please use <code>@rustbot ready</code> in the future so it shows up as ready for review for me.</p>",
        "id": 277800776,
        "sender_full_name": "Noah Lev",
        "timestamp": 1649110204
    },
    {
        "content": "<p>My only concerns really are</p>\n<ol>\n<li>the cargo API (e.g., <a href=\"https://github.com/rust-lang/cargo/issues/10343\">cargo#10343</a>) and making sure it's consistent</li>\n<li>ensuring the API between rustdoc and cargo is unstable so we could improve it later</li>\n</ol>",
        "id": 277800913,
        "sender_full_name": "Noah Lev",
        "timestamp": 1649110291
    },
    {
        "content": "<ol start=\"2\">\n<li>is not possible. There's no way to stabilize an API only for cargo, it has to be stable for everyone or not at all.</li>\n</ol>",
        "id": 277801182,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649110466
    },
    {
        "content": "<p>(theoretically cargo could set RUSTC_BOOTSTRAP but that sets a bad precedent IMO)</p>",
        "id": 277801251,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649110509
    },
    {
        "content": "<p>Hmm... I thought that <em>was</em> possible</p>",
        "id": 277801280,
        "sender_full_name": "Noah Lev",
        "timestamp": 1649110538
    },
    {
        "content": "<p>I guess we do want non-cargo users to theoretically be able to use this feature as well</p>",
        "id": 277801345,
        "sender_full_name": "Noah Lev",
        "timestamp": 1649110566
    },
    {
        "content": "<p>The interface is just quite complicated, at least the version I knew of last, with multiple invocations and depositing JSON files in the target folder</p>",
        "id": 277801366,
        "sender_full_name": "Noah Lev",
        "timestamp": 1649110596
    },
    {
        "content": "<p>FWIW, if we somehow manage to do this in 1 pass in the future, it seems reasonable to deprecate the old flags, the way <code>--passes</code> is now deprecated and does nothing. They only need to be stable in the sense that rustdoc doesn't give a hard error when it seems them.</p>",
        "id": 277803295,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649111834
    },
    {
        "content": "<blockquote>\n<p>It's still in my review list, I'll try to get back to it this week.</p>\n</blockquote>\n<p>Fabulous thank you!</p>\n<blockquote>\n<p>I didn't realize that PR was waiting on review. Please use <code>@rustbot ready</code> in the future so it shows up as ready for review for me.</p>\n</blockquote>\n<p>Ah did not know I could do this, will do so in the future.</p>\n<blockquote>\n<p>The interface is just quite complicated, at least the version I knew of last, with multiple invocations and depositing JSON files in the target folder</p>\n</blockquote>\n<p>Yes that is still the case. Essentially the new Cargo-level concept is a <code>CompileMode::Docscrape</code> unit whose output is serialized metadata about call locations in a crate, which later gets read in by <code>Doc</code> units.</p>",
        "id": 277819872,
        "sender_full_name": "Will Crichton",
        "timestamp": 1649125230
    }
]