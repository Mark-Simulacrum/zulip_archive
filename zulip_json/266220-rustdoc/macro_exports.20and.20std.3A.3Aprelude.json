[
    {
        "content": "<p>It's pretty confusing that no exported macros show up or are mentioned on <a href=\"https://doc.rust-lang.org/std/prelude/v1/index.html\">https://doc.rust-lang.org/std/prelude/v1/index.html</a> given that there are apparently 22 exported macros from the prelude (<a href=\"https://github.com/rust-lang/rfcs/blob/master/text/3114-prelude-2021.md#prior-art\">https://github.com/rust-lang/rfcs/blob/master/text/3114-prelude-2021.md#prior-art</a>)</p>",
        "id": 243055032,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1623951474
    },
    {
        "content": "<p>The page at <a href=\"https://doc.rust-lang.org/std/prelude/index.html\">https://doc.rust-lang.org/std/prelude/index.html</a> also does not mention any</p>",
        "id": 243055161,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1623951516
    },
    {
        "content": "<p>I don't understand what you mean: on the site you linked, we can see several macros; on my machine, <code>curl 'https://doc.rust-lang.org/std/prelude/v1/index.html' 2&gt;&amp;- | grep -o macro\\\\. | wc -l</code> yields 31, for instance.</p>",
        "id": 243066554,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1623956211
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/hFVxuZ7khqQnEMAjTRKfw6eR/Screen-Shot-2021-06-17-at-20.57.45.png\">Screen-Shot-2021-06-17-at-20.57.45.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/hFVxuZ7khqQnEMAjTRKfw6eR/Screen-Shot-2021-06-17-at-20.57.45.png\" title=\"Screen-Shot-2021-06-17-at-20.57.45.png\"><img src=\"/user_uploads/4715/hFVxuZ7khqQnEMAjTRKfw6eR/Screen-Shot-2021-06-17-at-20.57.45.png\"></a></div>",
        "id": 243066668,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1623956272
    },
    {
        "content": "<p>oh. True. Guess that's my bad in reading them.</p>\n<p>Why is this less macros than is actually in the global scope though? Is it because the others are in <code>core</code>?</p>\n<p>Also uh, maybe re-exports could be sorted/labeled better ...</p>",
        "id": 243067326,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1623956549
    },
    {
        "content": "<blockquote>\n<p>Also uh, maybe re-exports could be sorted/labeled better ...</p>\n</blockquote>\n<p>Yeah, I guess rustdoc is ordering the re-exported items by <em>nature</em> of the reexported item rather than mixing them all up</p>\n<blockquote>\n<p>than in the global scope</p>\n</blockquote>\n<p>Oh, I see what you mean now: macros such as <code>println!</code> (which are <code>#[macro_export] macro_rules!</code> macros) are then into \"the prelude\" not by virtue of the <code>v1</code> prelude or whatnot, but actually because non-<code>#![no_std]</code> crates import the <code>std</code> crate through an implicit <code>#[macro_use] extern crate std;</code> statement (and <code>#[macro_use]</code> pulls the <code>#[macro_export]</code>ed macros into the prelude of the current crate).</p>\n<ul>\n<li>This is actually an issue since it circumvents the \"versioned\" prelude design, good catch! (That is, a <code>#[macro_export]</code>-ed <code>macro_rules!</code> macro defined in <code>std</code> acts, in practice, as if present in all preludes, present, and future. It thus seems like a bigger commitment than initially anticipated, and any future macros added to the language ought to be <code>macro</code> macros so as to properly contain their prelude-ness)</li>\n</ul>\n<p>This means that there should be a funny way to observe what you mean:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![no_std]</span><span class=\"w\"></span>\n\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"k\">crate</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span>::<span class=\"n\">std</span>::<span class=\"n\">prelude</span>::<span class=\"n\">v1</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">format_args!</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// OK</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// Error</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=5c6e3f21240f1c6a8dbb4dce63c570e7\">yields</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>error: cannot find macro `format` in this scope\n  --&gt; src/main.rs:10:13\n   |\n10 |     let _ = format!(\"\"); // Error\n   |             ^^^^^^\n   |\n   = note: consider importing this macro:\n           std::format\n</code></pre></div>\n<p>(and the inverse would be to do <code>#[macro_use] extern crate std;</code> without the prelude import)</p>\n<p>This is thus not a docs issue, but a libs one.</p>",
        "id": 243069524,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1623957440
    }
]