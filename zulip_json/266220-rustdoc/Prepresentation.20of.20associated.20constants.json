[
    {
        "content": "<p>Constants declared in the impl of a struct use the <code>AssocConstant</code> form, not <code>ConstantItem</code>. That's not particularly useful because the former has an optional default but in impls a definition is required very similar to an actual constant declaration. Also, the definition of an associated type in an impl is a TypedefItem and not an AssocTypeItem as expected.</p>\n<p>Compare the output:</p>\n<div class=\"codehilite\"><pre><span></span><code>pub trait EasyToImpl {\n    /// A type that must be declared.\n    type ToDeclare: Clone;\n    /// A method you do need to impl.\n    fn method_to_impl(&amp;self);\n    /// A provided method you do not need to impl.\n    fn method_not_to_impl(&amp;self) {}\n}\n\nstruct Simple;\n\n/// This inherent impl:\nimpl Simple {\n    pub const CONSTANT: usize = 0;\n}\n\n/// versus this trait impl\nimpl EasyToImpl for Simple {\n    type ToDeclare = usize;\n    fn method_to_impl(&amp;self) {}\n}\n</code></pre></div>",
        "id": 223817171,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1611499576
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"229913\">@HeroicKatora</span> I love that you're finding all rustdoc inconsistencies <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> are you interested in a PR to fix it?</p>",
        "id": 223817196,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611499626
    },
    {
        "content": "<p>this is a problem with the internal representation too, it duplicates lots of types</p>",
        "id": 223817203,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611499642
    },
    {
        "content": "<p>Not sure if I can make the time besides working on my own toolings, particularly if it affects the internals too (and probably has effects quite spread out over the code base then?)</p>",
        "id": 223817358,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1611499917
    },
    {
        "content": "<p>probably yes</p>",
        "id": 223817446,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611499993
    },
    {
        "content": "<p>ok, can you open an issue then?</p>",
        "id": 223817449,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611500000
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/81340\">https://github.com/rust-lang/rust/issues/81340</a></p>",
        "id": 223818123,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1611501011
    },
    {
        "content": "<p>thanks :) btw I think the JSON output would be more helpful than the debug output, it's more concise at least</p>",
        "id": 223818148,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611501115
    },
    {
        "content": "<p>Sure, let's update that.</p>",
        "id": 223818404,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1611501469
    },
    {
        "content": "<p>Okay, I need to set <code>no_std</code> and <code>no_core</code> for actually compact output</p>",
        "id": 223818483,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1611501549
    },
    {
        "content": "<p>Wonder if there would be a use for some way to tell JSON to only output things defined in the current crate, even if just for debugging</p>",
        "id": 223842447,
        "sender_full_name": "CraftSpider",
        "timestamp": 1611531264
    },
    {
        "content": "<p>Working on fixing this now. Leads to an interesting question of whether there should be more info in associated items about what item is their 'parent', it doesn't look like that info is readily available in the JSON currently? Unless I'm missing something not in the paths or items maps</p>",
        "id": 232348130,
        "sender_full_name": "CraftSpider",
        "timestamp": 1617058469
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"319144\">CraftSpider</span> <a href=\"#narrow/stream/266220-rustdoc/topic/Prepresentation.20of.20associated.20constants/near/223842447\">said</a>:</p>\n<blockquote>\n<p>Wonder if there would be a use for some way to tell JSON to only output things defined in the current crate, even if just for debugging</p>\n</blockquote>\n<p>I think you could do this with a JQ filter</p>",
        "id": 232349819,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617059534
    },
    {
        "content": "<p>hmm it turned out to be kind of tricky, I want to say \"any key\" but I don't know how to do that</p>",
        "id": 232350384,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617059928
    },
    {
        "content": "<p><code>.index |= [.[] | select(.id | startswith(\"0:\"))] | .paths |= with_entries(select(.key | startswith(\"0:\")))</code> seems to roughly do the correct filtering</p>",
        "id": 232353802,
        "sender_full_name": "CraftSpider",
        "timestamp": 1617062369
    },
    {
        "content": "<p>So, roughly where I stand:<br>\nI can swap it over to using constant fairly easily. The issue is then that HTML gets messed up, because it renders the same as a normal constant. This is basically because AssocConstItem/ConstantItem were not designed to actually parallel AssocTypeItem/TypedefItem when implemented.</p>",
        "id": 232367454,
        "sender_full_name": "CraftSpider",
        "timestamp": 1617074220
    },
    {
        "content": "<p>I'm learning a lot diving into the guts of HTML rendering and how rustdoc handles this stuff :P</p>",
        "id": 232367466,
        "sender_full_name": "CraftSpider",
        "timestamp": 1617074230
    },
    {
        "content": "<p>Yeah the hard part of this is getting the html to have the same behavior</p>",
        "id": 232394935,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617095180
    },
    {
        "content": "<p>I think I remember trying something similar for TypedefItem and it breaking Deref impls or something</p>",
        "id": 232394981,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617095208
    }
]