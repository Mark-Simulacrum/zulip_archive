[
    {
        "content": "<p>I wrote up a kinda-RFC, <span class=\"user-group-mention\" data-user-group-id=\"3925\">@T-rustdoc</span> please have a look! <a href=\"https://hackmd.io/@nbw0Mih0RLieoV6JBAtI3Q/rkXNEQ-Bd/edit\">https://hackmd.io/@nbw0Mih0RLieoV6JBAtI3Q/rkXNEQ-Bd/edit</a></p>\n<p>Feel free to comment there or here, and fill in some of the blank sections. As I said in the intro: this is currently written in RFC format but at present its purpose is to be discussed amongst the team; and there's a chance we may not need an RFC.</p>",
        "id": 232510588,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617145079
    },
    {
        "content": "<blockquote>\n<p>Currently rustdoc simply overwrites one file with the other, which means that doc generation on most Windows and Mac systems simply drops some files. This is suboptimal.</p>\n</blockquote>\n<p>lol understatement of the year <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 232514928,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617148012
    },
    {
        "content": "<blockquote>\n<p>Ideally, rustdoc will _never_ link to disambiguation pages on its own; these exist purely to make the URL scheme continue to work.</p>\n</blockquote>\n<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 232515014,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617148071
    },
    {
        "content": "<blockquote>\n<p>For this use case, rustdoc (and cargo doc?) will have a --generate-case-insensitive option that forces the disambiguation behavior regardless of the filesystem being used.</p>\n</blockquote>\n<p>I don't think this common enough to need a cargo flag. I don't see anyone using it besides the standard library.</p>",
        "id": 232515086,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617148103
    },
    {
        "content": "<blockquote>\n<p>It is a hard error for #[doc(filename)] files to ever clash with other files when compared case insensitively, so you cannot have #[doc(filename = \"Bar\")] struct Foo; and struct Bar; in the same module.</p>\n</blockquote>\n<p>this is internally consistent, but did you mean to write <code>doc(filename = \"bar\")</code> to show that it's case-insensitive?</p>",
        "id": 232515132,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617148141
    },
    {
        "content": "<p>I didn't but good idea</p>",
        "id": 232515161,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617148166
    },
    {
        "content": "<blockquote>\n<p>rustdoc::differing_only_by_case</p>\n</blockquote>\n<p>ooh I am so tempted to bikeshed this name but I'll hold off for now <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 232515207,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617148201
    },
    {
        "content": "<p>FWIW if <code>--generate-case-insensitive</code> is permaunstable internal-only and if we don't do the lints and such we don't need an RFC (and we can RFC the lints and such later), but I think it would be good to do so</p>",
        "id": 232515256,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617148207
    },
    {
        "content": "<p>yeah idgaf about the lint name</p>",
        "id": 232515274,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617148223
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132040\">Manish Goregaokar</span> <a href=\"#narrow/stream/266220-rustdoc/topic/Case.20insensitive.20RFC.20take.20two/near/232515256\">said</a>:</p>\n<blockquote>\n<p>FWIW if <code>--generate-case-insensitive</code> is permaunstable internal-only and if we don't do the lints and such we don't need an RFC (and we can RFC the lints and such later), but I think it would be good to do so</p>\n</blockquote>\n<p>hmm, do lints need an RFC? a lot of lints have been added recently and we only did an FCP when they were stabilized</p>",
        "id": 232515348,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617148283
    },
    {
        "content": "<p>although in general I'm not a fan of \"unstable\" lints since the names still leak onto stable, I'd rather do an FCP right away</p>",
        "id": 232515356,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617148301
    },
    {
        "content": "<p>(And in general rustdoc's stability story is not great because <a href=\"http://docs.rs\">docs.rs</a> uses nightly)</p>",
        "id": 232515649,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617148511
    },
    {
        "content": "<blockquote>\n<p>It is a hard error for <code>#[doc(filename)]</code> files to ever clash with other files when compared case insensitively, so you cannot have <code>#[doc(filename = \"bar\")] struct Foo;</code> and <code>struct Bar;</code> in the same module.</p>\n</blockquote>\n<p>This seems inconsistent with the behavior without <code>doc(filename)</code>. Nothing about the <code>doc(filename)</code> feature implies that it has to do with case-insensitive filesystems, although of course that's the motivation here. I think it would make more sense for <code>#[doc(filename = \"bar\")] struct Foo;</code> to act exactly the same as if the user had written <code>struct bar;</code> except it only affects the URL scheme. So you would get exactly the same disambiguation behavior: a disambiguation page at <code>struct.bar.html</code> is created (if <code>--generate-case-insensitive</code> is on), and the lint is triggered warning about the conflict (not sure if this lint is dependent on <code>--generate-case-insensitive</code>).</p>",
        "id": 232517270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617149641
    },
    {
        "content": "<p>I'm okay with that, I guess we should just emit another lint.</p>",
        "id": 232539216,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617169058
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> no, lints do not need an RFC. I am morally against lints which cannot be _fixed_ (and this is a rough policy rust has), which is why the lint would need to be paired with doc(filename) -- that _does_ need an RFC</p>",
        "id": 232539276,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617169099
    },
    {
        "content": "<p>also: RFC does not imply stability trains</p>",
        "id": 232539284,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617169109
    },
    {
        "content": "<p>RFC just means we're getting input</p>",
        "id": 232539286,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617169115
    },
    {
        "content": "<p>but i'm totally happy with landing disambiguation first, and figuring out the lint and stuff later</p>",
        "id": 232539294,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617169141
    },
    {
        "content": "<p>and doing that as a separate RFC, or a single joined RFC.</p>",
        "id": 232539305,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617169154
    },
    {
        "content": "<p>So in the end, what I was afraid of and didn't want to happen is happening: we add a new <code>doc()</code> attribute...</p>\n<p>Anyway, commented on the document.</p>",
        "id": 232557081,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617181169
    },
    {
        "content": "<p>Oh also, how will it work with \"--extern-html-root-url\"?</p>",
        "id": 232633058,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617212046
    },
    {
        "content": "<p>(posting this here instead of on the hackmd because of the unresolved question)</p>\n<blockquote>\n<p>Should rustdoc ever link to a disambiguation page directly?</p>\n<ul>\n<li>(manish) IMO it shouldnâ€™t; we should instead maintain a defid-to-file map and use that. This makes the disambiguation pages matter much less.</li>\n<li>(guillaume) How would it work for external crates linking to a \"conflicted\" item?</li>\n</ul>\n</blockquote>\n<p>External crates would need to use the same defid map. It shouldn't be difficult to come up with a numbering scheme that can be reliably replayed: for example sort all items in the case insensitive equivalence class by ascii order and number them in increasing order. Unresolved question: this numbering scheme has to either include private items, in which case adding private items changes public URLs, or else private items need a separate name mangling scheme.</p>",
        "id": 232637025,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617213608
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> It doesn't work for the option  \"--extern-html-root-url\" like I said above</p>",
        "id": 232638176,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617214022
    },
    {
        "content": "<p>I'm not sure how those are related</p>",
        "id": 232638357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617214093
    },
    {
        "content": "<p>I haven't used it but it looks like \"--extern-html-root-url\"  is supposed to set the base path for extern rustdoc links, while the stuff in this RFC is about the name mangling scheme for links <em>inside</em> a (possibly extern) crate, relative to the root path for the crate, whatever it is</p>",
        "id": 232638541,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617214176
    },
    {
        "content": "<p>Also <span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span> you responded twice on that RFC to <code>doc(filename)</code> with a complaint that can be paraphrased as \"no, just no.\" Could you elaborate on the reasons behind the disapproval?</p>",
        "id": 232638879,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617214319
    },
    {
        "content": "<p>From my POV it is strictly better to give people an option to tweak behavior rather than not, especially if they don't have to use it and still get reasonable behavior</p>",
        "id": 232639037,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617214382
    },
    {
        "content": "<p>Because, once again, users shouldn't fix tools limitations. If the code is valid, the users shouldn't have to add such things. I used as comparison <code>doc(cfg)</code>: we are trying to remove it and instead directly extract the information from the code</p>",
        "id": 232639113,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617214428
    },
    {
        "content": "<p>Well, this proposition has a lot of flaws</p>",
        "id": 232639188,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617214448
    },
    {
        "content": "<p>They can also silence the lint if they are happy with the disambiguation page</p>",
        "id": 232639191,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617214449
    },
    {
        "content": "<p>Adding a lint for that sounds like a really bad thing. \"Your code is perfectly fine but our tool cannot handle it because it was poorly deisgn so please fix your perfectly fine code\"</p>",
        "id": 232639359,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617214506
    },
    {
        "content": "<p>I'm really unhappy with the proposed solution. The only thing that makes me accept it is that at least it will generate the disambiguator only on windows and macOS</p>",
        "id": 232639480,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617214548
    },
    {
        "content": "<p>Also, the implementation will be a nightmare at some many level...</p>",
        "id": 232639558,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617214570
    },
    {
        "content": "<p>I guess you are assuming that the existing naming scheme doesn't need to be respected? I don't think we can move to change it in any significant way until intra-doc links are around for a while longer and everyone migrates</p>",
        "id": 232639741,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617214649
    },
    {
        "content": "<p>There are still tons of manual intra-doc links out there and changing the naming scheme will break all those links</p>",
        "id": 232639877,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617214693
    },
    {
        "content": "<p>And the naming scheme was even directly taught to people who had to write those links (like me circa 6 months ago)</p>",
        "id": 232639985,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617214732
    },
    {
        "content": "<p>The fact that there is a naming conflict is a direct consequence of the combination of the naming scheme + case insensitive file systems. Tools have nothing to do with it</p>",
        "id": 232640107,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617214794
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/266220-rustdoc/topic/Case.20insensitive.20RFC.20take.20two/near/232639741\">said</a>:</p>\n<blockquote>\n<p>I guess you are assuming that the existing naming scheme doesn't need to be respected? I don't think we can move to change it in any significant way until intra-doc links are around for a while longer and everyone migrates</p>\n</blockquote>\n<p>The whole point of this solution is that it allows to keep the current URL scheme. If we don't care about it, then let's fix it once and for all XD</p>",
        "id": 232640174,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617214805
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/266220-rustdoc/topic/Case.20insensitive.20RFC.20take.20two/near/232640107\">said</a>:</p>\n<blockquote>\n<p>The fact that there is a naming conflict is a direct consequence of the combination of the naming scheme + case insensitive file systems. Tools have nothing to do with it</p>\n</blockquote>\n<p>It's the fault of the tool in the first place for not taking this limitation into consideration.</p>",
        "id": 232640259,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617214838
    },
    {
        "content": "<p>The tool is not the naming scheme</p>",
        "id": 232640285,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617214848
    },
    {
        "content": "<p>The tool generates the URL scheme</p>",
        "id": 232640320,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617214862
    },
    {
        "content": "<p>But the naming scheme is ossified in the minds of programmers who use it and URL links across the web</p>",
        "id": 232640394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617214885
    },
    {
        "content": "<p>the tool can't do anything about this</p>",
        "id": 232640407,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617214892
    },
    {
        "content": "<p>It can. The alternative solution I suggested fixed it.</p>",
        "id": 232640445,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617214906
    },
    {
        "content": "<p>No more naming conflicts on windows/mac and no possible conflicts on modules either</p>",
        "id": 232640540,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617214933
    },
    {
        "content": "<p>but it would break all the current URLs, and that's why it was rejected</p>",
        "id": 232640591,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617214951
    },
    {
        "content": "<p>Maybe in an alternate reality where you proposed that pre-1.0 that would work</p>",
        "id": 232640608,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617214956
    },
    {
        "content": "<p>At the time, I was focusing mostly on compiler errors unfortunately :)</p>",
        "id": 232640654,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617214977
    },
    {
        "content": "<p>This is certainly a patch on a suboptimal naming scheme, but that's the price of backward compatibility</p>",
        "id": 232640762,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617215027
    },
    {
        "content": "<p>But I still think it would be possible to switch to this new URL scheme. To make it better, we could simply add a scheme converter on <a href=\"http://docs.rs\">docs.rs</a> and <a href=\"http://doc.rust-lang.org\">doc.rust-lang.org</a> so that old URLs still work in new docs (it's pretty easy in fact)</p>",
        "id": 232640766,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617215030
    },
    {
        "content": "<p>Backward compatibility could be maintained with a URL scheme converter on <a href=\"http://docs.rs\">docs.rs</a> and <a href=\"http://doc.rust-lang.org\">doc.rust-lang.org</a> like I suggested above. But not locally unfortunately</p>",
        "id": 232640975,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617215109
    },
    {
        "content": "<p>Even setting aside backward compatibilty, I think <code>Foo-2</code> looks better than <code>-foo</code> though</p>",
        "id": 232641017,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617215124
    },
    {
        "content": "<p>But it's incoherent. This can change without prior notice and it's a nightmare to implement</p>",
        "id": 232641079,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617215152
    },
    {
        "content": "<p>And we didn't even try to look at modules conflicts yet. I'm very curious at how we will fix it in the current suggestion.</p>",
        "id": 232641170,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617215183
    },
    {
        "content": "<p>Wasn't that addressed in the RFC as well?</p>",
        "id": 232641199,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617215195
    },
    {
        "content": "<p><code>aa-1/index.html</code> and such</p>",
        "id": 232641221,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617215205
    },
    {
        "content": "<p>For one level eventually, it's fine, but for multiple levels? Oh boy</p>",
        "id": 232641296,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617215233
    },
    {
        "content": "<p>?</p>",
        "id": 232641313,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617215238
    },
    {
        "content": "<p><code>aa-1/bb-2/struct.FoO-3.html</code></p>",
        "id": 232641359,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617215255
    },
    {
        "content": "<p>I'm not seeing the issue</p>",
        "id": 232641370,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617215259
    },
    {
        "content": "<p>When you change the name of a module, all its children have to take this change into account because it changes their URL too</p>",
        "id": 232641400,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617215268
    },
    {
        "content": "<p>yeah, that is true for normal module renames too</p>",
        "id": 232641489,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617215292
    },
    {
        "content": "<p>Yep, but then it's expected</p>",
        "id": 232641629,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617215351
    },
    {
        "content": "<p>But you are changing the name of a module, so the name changes</p>",
        "id": 232641674,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617215371
    },
    {
        "content": "<p>this seems quite expected</p>",
        "id": 232641688,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617215379
    },
    {
        "content": "<p>if you have <code>a::b::c::d</code> but a is <code>a</code> has a name conflict, then <code>d</code> is at completely different location</p>",
        "id": 232641703,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617215385
    },
    {
        "content": "<p>different than what?</p>",
        "id": 232641744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617215401
    },
    {
        "content": "<p><code>a/b/c/d/index.html</code> doesn't exist anymore if any part of the path has a name conflict</p>",
        "id": 232641870,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617215434
    },
    {
        "content": "<p>Anyway, to try to see all differences, I'm writing a little gist: <a href=\"https://gist.github.com/GuillaumeGomez/a9d5e0d92987599a7966f5363543f81f\">https://gist.github.com/GuillaumeGomez/a9d5e0d92987599a7966f5363543f81f</a></p>",
        "id": 232642082,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617215511
    },
    {
        "content": "<p>we'll see where it leads us to</p>",
        "id": 232642100,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617215518
    },
    {
        "content": "<p>Oh I see, you want a disambiguation page there too. I guess you could make disambiguation pages at all combinations of disambiguated and undisambigated names, although for backward compatibility you only need <code>a/b/c/d/index.html</code> for the disambiguation page and e.g. <code>a-1/b-3/c-2/d-1/index.html</code> for the real thing</p>",
        "id": 232642354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617215600
    },
    {
        "content": "<p>Yes, but you start to see the issue there, no? XD</p>",
        "id": 232642486,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1617215645
    },
    {
        "content": "<p>No, you don't need to have disambiguation pages for every combo</p>",
        "id": 232672660,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617228269
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span>  Ah, I think I see your issue with modules: Is your worry that _rustdoc_ won't be able to link to disambiguated modules from other crates?</p>\n<p>I don't think we have to worry about it -- we can teach rustdoc how to link to this scheme, and for efficiency we can store lists of clashing DefIds in metadata or in a rustdoc cache.</p>",
        "id": 232673881,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617228929
    },
    {
        "content": "<p>basically, if rustdoc needs to link to foo::bar::Baz, it looks up if <code>bar</code> has clashes, then if <code>Baz</code> has clashes</p>",
        "id": 232673917,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617228953
    },
    {
        "content": "<p>this is complicated but doable</p>",
        "id": 232673978,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617228968
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span> so from my POV the purpose of the disambiguation page is simple: it's so that you can type the URL you expect and it _sometimes_ works. We don't actually have to even implement it. The purpose of the disambiguation page is emphatically _not_ for rustdoc to ever link to it</p>",
        "id": 232674448,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617229230
    },
    {
        "content": "<p>and rustdoc should be capable of linking to the right thing directly without going via a disambiguation page</p>",
        "id": 232674496,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617229252
    },
    {
        "content": "<p>this is doable</p>",
        "id": 232674514,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617229264
    }
]