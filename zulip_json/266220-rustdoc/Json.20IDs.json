[
    {
        "content": "<p>Looking into <a href=\"https://github.com/rust-lang/rust/issues/80664#issuecomment-753681341\">This comment</a>. From what I understand, the issue is that a DefId is based on the compiler's understanding of what is public, while a HirId is based on items, but HirId isn't available to external items and DefId won't work right with items marked public in multiple locations but only visible from one?</p>",
        "id": 223404404,
        "sender_full_name": "CraftSpider",
        "timestamp": 1611162837
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"319144\">@CraftSpider</span> the issue is that, while HirId and DefIds have overlap, neither is a proper subset of the other</p>",
        "id": 223404942,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611163080
    },
    {
        "content": "<p>not all HirIds are serialized cross-crate, and HirIds are only available in the local crate</p>",
        "id": 223405019,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611163099
    },
    {
        "content": "<p>So basically, JSON is trying to represent a concept that neither is quite right for</p>",
        "id": 223405086,
        "sender_full_name": "CraftSpider",
        "timestamp": 1611163151
    },
    {
        "content": "<p>yes</p>",
        "id": 223405112,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611163166
    },
    {
        "content": "<p>Alright, time to stare at the code for a bit, then brainstorm solutions, unless you already have a specific one in mind?</p>",
        "id": 223405600,
        "sender_full_name": "CraftSpider",
        "timestamp": 1611163414
    },
    {
        "content": "<p>the issue I think is that rustdoc is exposing too much information</p>",
        "id": 223406049,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611163625
    },
    {
        "content": "<p>if we could just serialize DefIds without HirIds it would be fine</p>",
        "id": 223406069,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611163633
    },
    {
        "content": "<p>and I would prefer to do that rather than a JsonID or whatever</p>",
        "id": 223406081,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611163646
    },
    {
        "content": "<p>sorry I keep changing my mind on this</p>",
        "id": 223406303,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611163750
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"268539\">@Nixon Enraght-Moony</span></p>",
        "id": 223406320,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611163759
    },
    {
        "content": "<p>What do you mean? HirId is currently unused in the JSON. Do you mean similar to the solution proposed in the original issue, just don't document the unreachable items, or something entirely different?</p>",
        "id": 223406397,
        "sender_full_name": "CraftSpider",
        "timestamp": 1611163801
    },
    {
        "content": "<p>yes, don't document things that don't have a DefId</p>",
        "id": 223406535,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611163859
    },
    {
        "content": "<p>hmm, I guess this breaks anyone that wants to do similar things to rustdoc and show  the item at that scope</p>",
        "id": 223406582,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611163887
    },
    {
        "content": "<p>how does rustdoc even handle this?</p>",
        "id": 223406593,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611163892
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"c1\">// Stripped modules survive the rustdoc passes (i.e., `strip-private`)</span>\n<span class=\"w\">        </span><span class=\"c1\">// if they contain impls for public types. These modules can also</span>\n<span class=\"w\">        </span><span class=\"c1\">// contain items such as publicly re-exported structures.</span>\n<span class=\"w\">        </span><span class=\"c1\">//</span>\n<span class=\"w\">        </span><span class=\"c1\">// External crates will provide links to these structures, so</span>\n<span class=\"w\">        </span><span class=\"c1\">// these modules are recursed into, but not rendered normally</span>\n<span class=\"w\">        </span><span class=\"c1\">// (a flag on the context).</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">render_redirect_pages</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">render_redirect_pages</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">is_stripped</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Appears in <code>html/render/mod.rs</code>, which sounds relevant</p>",
        "id": 223406907,
        "sender_full_name": "CraftSpider",
        "timestamp": 1611164039
    },
    {
        "content": "<p><code>is_stripped</code> seems to special case ImportItems, referencing <code>!i.should_be_displayed</code>. The handling of <code>render_redirect_pages</code> is spread across multiple places, but in one place relates to whether rendering does <code>layout::render</code> or <code>layout::redirect</code>.</p>",
        "id": 223407530,
        "sender_full_name": "CraftSpider",
        "timestamp": 1611164364
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"319144\">@CraftSpider</span> right, but that's not really what I mean - I want to make sure info for doing this is <em>available</em> to other tools if they want it</p>",
        "id": 223407663,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611164425
    },
    {
        "content": "<p>Not necessarily that they use the same logic</p>",
        "id": 223407685,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611164436
    },
    {
        "content": "<p>So I guess that does mean it needs a separate id, one that represents both HIR and DefIds</p>",
        "id": 223407782,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611164485
    },
    {
        "content": "<p>Yeah. If we want to preserve this information we need a new ID, unless one wants to add some kind of optional 're-exported by' field</p>",
        "id": 223407857,
        "sender_full_name": "CraftSpider",
        "timestamp": 1611164523
    },
    {
        "content": "<p>Hmm, that might be easier for the consumer</p>",
        "id": 223408012,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611164585
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"229913\">@HeroicKatora</span> weren't you planning to use the JSON backend for something?</p>",
        "id": 223408049,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611164601
    },
    {
        "content": "<p>How would you prefer to expose info about re-exports?</p>",
        "id": 223408068,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611164613
    },
    {
        "content": "<p>Yep, already started but haven't gotten far. So basically, parsing the json and generating markdown/tex</p>",
        "id": 223408376,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1611164727
    },
    {
        "content": "<p>Oh wow, nice!</p>",
        "id": 223408436,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611164742
    },
    {
        "content": "<p>Oh, nice</p>",
        "id": 223408509,
        "sender_full_name": "CraftSpider",
        "timestamp": 1611164766
    },
    {
        "content": "<p>I presume you <em>want</em> to know about re-exports, right? This is really easy on our end if we just delete that and only emit the canonical definition lol</p>",
        "id": 223408535,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611164773
    },
    {
        "content": "<p>Haha. I think in terms of ease, 'ignoring re-exports' &lt; 're-exported at field' &lt; 'custom IDs' :P</p>",
        "id": 223408668,
        "sender_full_name": "CraftSpider",
        "timestamp": 1611164832
    },
    {
        "content": "<p>Yeah, I'd prefer to know. I believe something similar to typedefs would fit best.</p>",
        "id": 223408918,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1611164971
    },
    {
        "content": "<p>I'll have to consider it for a bit though and eat, let me get back to you in a bit</p>",
        "id": 223408967,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1611164990
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"229913\">HeroicKatora</span> <a href=\"#narrow/stream/266220-rustdoc/topic/Json.20IDs/near/223408376\">said</a>:</p>\n<blockquote>\n<p>Yep, already started but haven't gotten far. So basically, parsing the json and generating markdown/tex</p>\n</blockquote>\n<p>If this is public, can you send the link?</p>",
        "id": 223450426,
        "sender_full_name": "Nixon Enraght-Moony",
        "timestamp": 1611184287
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"229913\">@HeroicKatora</span> Any updates on this?</p>",
        "id": 223687131,
        "sender_full_name": "CraftSpider",
        "timestamp": 1611343720
    },
    {
        "content": "<p><a href=\"https://github.com/oberien/heradoc/tree/rustdoc/src/frontend/rustdoc\">https://github.com/oberien/heradoc/tree/rustdoc/src/frontend/rustdoc</a><br>\nThat's the repository and branch, I'm not pushing regularly as I'm not very certain of the implementation yet ;)</p>",
        "id": 223744382,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1611400430
    },
    {
        "content": "<blockquote>\n<p><a href=\"http://types.rs\">types.rs</a></p>\n</blockquote>\n<p>FYI we plan to make this a separate crate shortly so you can reuse exactly the same types rustdoc uses: <a href=\"https://github.com/rust-lang/rust/pull/81287\">https://github.com/rust-lang/rust/pull/81287</a></p>",
        "id": 223752978,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611413212
    },
    {
        "content": "<blockquote>\n<p>target.push(\"doc\");</p>\n</blockquote>\n<p>This can be wrong if the docs are cross compiled, or if a crate has <code>doc = false</code> set. Unfortunately I don't know a more accurate way without building the docs yourself. There's an example of that here: <a href=\"https://github.com/deadlinks/cargo-deadlinks/blob/3e984d56e4e6e92e6ae31d8a09758e57f55fdaa3/src/bin/cargo-deadlinks.rs#L210\">https://github.com/deadlinks/cargo-deadlinks/blob/3e984d56e4e6e92e6ae31d8a09758e57f55fdaa3/src/bin/cargo-deadlinks.rs#L210</a></p>",
        "id": 223753153,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611413483
    },
    {
        "content": "<p>I might publish a non-official library for writing rustdoc plugins</p>",
        "id": 223753237,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611413575
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/266220-rustdoc/topic/Json.20IDs/near/223753237\">said</a>:</p>\n<blockquote>\n<p>I might publish a non-official library for writing rustdoc plugins</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"229913\">@HeroicKatora</span> if I made this, would you be interested in using it? mostly it would be refactoring things out of cargo-deadlinks so it wouldn't be a ton of work on my end</p>",
        "id": 223814021,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611494898
    },
    {
        "content": "<p>As a real plugins? Not necessarily. Consuming the json output is okay and retaining control over the execution as a separate process works fine as well. Also I'm not interested in injecting more sources for link resolution (in fact that's pretty much a non-goal for the convertion I'm writing). At least not at the moment. But I'm not too sure about it yet. Maybe something for intra-doc links comes up that can't be easily solved by translating links, or I might need to influence the way it constructs IDs.</p>",
        "id": 223815950,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1611497762
    },
    {
        "content": "<p>not as in buliding from source, just like an easy way to wrap <code>cargo rustdoc</code></p>",
        "id": 223815998,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611497802
    },
    {
        "content": "<p>That might be more interesting.  In particular, getting the file name of the json output etc. and program options? Might be cool to discover how to use it best and what else exists for using the doc tool.</p>",
        "id": 223816382,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1611498366
    },
    {
        "content": "<p>I would have a <code>rustdoc_args</code> to pass things directly I think, otherwise it would get out of date rapidly</p>",
        "id": 223816406,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611498419
    },
    {
        "content": "<p>but the main benefit is you wouldn't have to guess where cargo is outputting the docs</p>",
        "id": 223816413,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611498431
    }
]