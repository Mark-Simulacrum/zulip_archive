[
    {
        "content": "<p>Rustdoc currently duplicates a lot of code, mainly in <code>clean</code>. There's one version for <code>rustc_hir</code>, and one for <code>rustc_middle::ty</code>. Usually, the HIR version corresponds to definitions from the local crate, while the <code>ty</code> version corresponds to external definitions, which don't have HIR available.</p>\n<p>Ideally, rustdoc would use <code>ty</code> information more, since it would avoid awful hacks like <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustdoc/core/struct.DocContext.html#structfield.substs\">syntax-directed type parameter substitution</a>. Also, rustdoc has <em>a lot</em> of <a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+is%3Aissue+label%3AA-cross-crate-reexports\">bugs related to cross-crate re-exports</a>, and I suspect many of these are due to local and external definitions having totally different codepaths.</p>\n<p>However, type aliases no longer exist in <code>ty::Ty</code>s—they are expanded away—but rustdoc currently keeps type aliases unexpanded when it would improve the docs reading experience. (FWIW, I'm pretty sure that re-exported functions that use type aliases always have them expanded, since re-exports should use the <code>ty</code> codepath.)</p>\n<p>I would really like to get rid of (a lot of) the HIR cleaning code, but I'm a bit stuck on how to deal with the type aliases situation. Does anyone have ideas on how to deal with this?</p>",
        "id": 264110515,
        "sender_full_name": "Noah Lev",
        "timestamp": 1638937524
    },
    {
        "content": "<p>Perhaps we should just always expand type aliases? It would at least make rustdoc's behavior consistent between local and external definitions, though it might regress the UX somewhat.</p>",
        "id": 264111418,
        "sender_full_name": "Noah Lev",
        "timestamp": 1638938428
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307537\">@Noah Lev</span> slightly correction - re-exported functions <em>from other crates</em> use the <code>ty</code> codepath. I'd expect local re-exports to preserve type aliases. Everything else looks right though.</p>\n<p>What uses type aliases? We could at least switch everything that doesn't use clean::Type</p>",
        "id": 264111436,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1638938455
    },
    {
        "content": "<p>Yeah, when I said \"re-exports\" I meant \"cross-crate re-exports\" <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 264111471,
        "sender_full_name": "Noah Lev",
        "timestamp": 1638938494
    },
    {
        "content": "<p>(Maybe we should use an acronym, like CCRE)</p>",
        "id": 264111525,
        "sender_full_name": "Noah Lev",
        "timestamp": 1638938528
    },
    {
        "content": "<p>Another alternative is to change rustc to preserve type alias info in metadata</p>",
        "id": 264111527,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1638938539
    },
    {
        "content": "<p>Hmm, my understanding was that type-checking just always expands type aliases</p>",
        "id": 264111542,
        "sender_full_name": "Noah Lev",
        "timestamp": 1638938559
    },
    {
        "content": "<blockquote>\n<p>What uses type aliases? We could at least switch everything that doesn't use clean::Type</p>\n</blockquote>\n<p>Not sure what you mean by \"What use type aliases?\". Could you elaborate?</p>",
        "id": 264111552,
        "sender_full_name": "Noah Lev",
        "timestamp": 1638938584
    },
    {
        "content": "<p>\"what code paths would have a user facing impact by switching to <code>ty</code>\"?</p>",
        "id": 264111579,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1638938627
    },
    {
        "content": "<p>I imagine any place where type signatures occur: functions, traits, struct fields, etc.</p>",
        "id": 264111636,
        "sender_full_name": "Noah Lev",
        "timestamp": 1638938678
    }
]