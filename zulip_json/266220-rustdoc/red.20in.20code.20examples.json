[
    {
        "content": "<p>While I've got people's attention on color, I did want to bring up one small aspect of code examples:</p>\n<p><a href=\"https://rustdoc.crud.net/jsha/fewer-colors/std/iter/trait.Iterator.html#method.intersperse\">https://rustdoc.crud.net/jsha/fewer-colors/std/iter/trait.Iterator.html#method.intersperse</a></p>\n<p>We currently use red to mark attributes, bool values, and values from the prelude (e.g. Some, None). There are three issues with this:</p>\n<ul>\n<li>attributes and values don't have anything in common, so it's confusing to color them the same</li>\n<li>red is a very attention-grabbing color and usually means \"danger\" (and we use it that way on no_compile examples)</li>\n<li>it's not clear that values from the prelude should get such distinct treatment relative to other values (which are unmarked)</li>\n</ul>",
        "id": 263667593,
        "sender_full_name": "jsha",
        "timestamp": 1638574726
    },
    {
        "content": "<p>I just noticed that in the above link, the associated type <code>Item</code> is not the purple color of structs/enums. Weren't we going to make them all the same? (Also, can you add a GUI test that things like <code>extern type</code>s get the same color?)</p>",
        "id": 263667776,
        "sender_full_name": "Noah Lev",
        "timestamp": 1638574896
    },
    {
        "content": "<p>ah yeah I should comment on associated types in the PR / zulip thread</p>",
        "id": 263668013,
        "sender_full_name": "jsha",
        "timestamp": 1638575091
    },
    {
        "content": "<p>I think it's pretty standard for syntax highlighters to specially highlight prelude things</p>",
        "id": 263696326,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1638611610
    },
    {
        "content": "<p>the choice of color, though, yeah i'm not sure</p>",
        "id": 263696329,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1638611622
    },
    {
        "content": "<p>Note that it's not prelude things in general that are highlighted with red, just \"prelude values\", which AFAICT is Some, None, Ok, Err (not technically values, but the CSS class is prelude-val.</p>\n<p>I'm running vscode with rust-analyzer, and it colors those items the same as any other ident - unmarked.</p>",
        "id": 263721066,
        "sender_full_name": "jsha",
        "timestamp": 1638639131
    },
    {
        "content": "<p>Hmm? All of those are values (well, both values and patterns, rustc calls them <code>Ctor</code>s)</p>",
        "id": 263723487,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1638641783
    },
    {
        "content": "<p>fair enough, sounds like I have my terminology wrong. I would have called them enum variants. Question: How can <code>Some</code> be a value if it's not complete (it needs an inner value)?</p>",
        "id": 263724903,
        "sender_full_name": "jsha",
        "timestamp": 1638643561
    },
    {
        "content": "<p>It's a function, you can pass it to another function expecting a <code>fn(T) -&gt; Option&lt;T&gt;</code> parameter</p>",
        "id": 263726339,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1638645106
    },
    {
        "content": "<p>oh, now I get it! so all functions are values. but methods aren't values, which is why there are no methods marked with <code>prelude-val</code>.</p>\n<p>it looks like the only other function in the prelude is <code>drop</code>, which isn't currently getting the <code>prelude-val</code> treatment: <a href=\"https://doc.rust-lang.org/stable/std/mem/fn.drop.html\">https://doc.rust-lang.org/stable/std/mem/fn.drop.html</a>.</p>",
        "id": 263727032,
        "sender_full_name": "jsha",
        "timestamp": 1638645941
    },
    {
        "content": "<p>Hmm, methods are values too - it seems weird to treat them inconsistently</p>",
        "id": 263727257,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1638646227
    },
    {
        "content": "<p>(e.g. <code>Option::unwrap(Some(0))</code> is legal)</p>",
        "id": 263727337,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1638646355
    },
    {
        "content": "<p>in general, I think \"prelude / non-prelude\" is not the right distinction to mark, anyhow. Instead something like \"current crate / other crate\" or \"item being documented / other items\" would probably be a more useful distinction. Or not marking out any idents as special, which is what rust-analyzer seems to do and what I think is common syntax highlighting practice.</p>",
        "id": 263727449,
        "sender_full_name": "jsha",
        "timestamp": 1638646460
    },
    {
        "content": "<p>Methods are values but with the dot syntax they're not being invoked as values</p>",
        "id": 263739788,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1638663565
    },
    {
        "content": "<p>The important distinction being with the dot syntax they don't have to be in scope</p>",
        "id": 263739790,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1638663578
    },
    {
        "content": "<p>I think \"this is a name from the local value scope\" (including preludes) is a fine distinction to hold</p>",
        "id": 263739794,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1638663599
    },
    {
        "content": "<p>But overall I'd look at what editors do before changing stuff: I think this distinction is commonly maintained elsewhere</p>",
        "id": 263739842,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1638663624
    },
    {
        "content": "<blockquote>\n<p>I'm running vscode with rust-analyzer, and it colors those items the same as any other ident - unmarked.</p>\n</blockquote>\n<p>What do you mean by \"unmarked\"? I'm also running VS Code with Rust Analyzer, but I have semantic highlighting enabled (which is the default AFAICT, since I didn't manually enable it), so e.g. methods are colored red and types are colored purple.</p>",
        "id": 263741858,
        "sender_full_name": "Noah Lev",
        "timestamp": 1638666973
    },
    {
        "content": "<p>oh, interesting! I am using the \"Solarized Light\" theme, which I guess flattens some of those distinctions. But switching over to \"Visual Studio Light\" I see now what you're talking about.</p>\n<p>Solarized Light:</p>\n<p><a href=\"/user_uploads/4715/FiCKffW86FDm5WV967_VOf2R/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/FiCKffW86FDm5WV967_VOf2R/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/FiCKffW86FDm5WV967_VOf2R/image.png\"></a></div><p>Visual Studio Light:</p>\n<p><a href=\"/user_uploads/4715/9VqS5Fgnw7C8-G_QNhPCnb6p/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/9VqS5Fgnw7C8-G_QNhPCnb6p/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/9VqS5Fgnw7C8-G_QNhPCnb6p/image.png\"></a></div>",
        "id": 263743583,
        "sender_full_name": "jsha",
        "timestamp": 1638669547
    },
    {
        "content": "<blockquote>\n<p>I think \"this is a name from the local value scope\" (including preludes) is a fine distinction to hold</p>\n</blockquote>\n<p>Is this equivalent to any unqualified ident? So for instance:</p>\n<div class=\"codehilite\"><pre><span></span><code>let mut x = 10;\nx = x + 10;\n</code></pre></div>\n<p>In this case <code>x</code> would get the same distinction as <code>Some</code>, <code>None</code>, and <code>drop</code>? And also <code>String</code> in <code>let x = String::from_utf8(vec![240, 159, 146, 150])</code>?</p>",
        "id": 263746936,
        "sender_full_name": "jsha",
        "timestamp": 1638675357
    }
]