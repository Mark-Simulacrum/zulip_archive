[
    {
        "content": "<p>The doc page for <a href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">reference</a> is actually really weird: the <code>trait implementations</code> section is filled with things that shouldn't be there in my opinion. In fact, you can't implement anything on it normally, so it should be empty. For example:</p>\n<div class=\"codehilite\"><pre><span></span><code>impl&lt;&#39;a, T&gt; Extend&lt;&amp;&#39;a T&gt; for LinkedList&lt;T&gt;\n</code></pre></div>\n<p>So maybe what I did in <a href=\"https://github.com/rust-lang/rust/pull/90726\">https://github.com/rust-lang/rust/pull/90726</a> was actually the good thing to do?</p>\n<p>What do you think?</p>",
        "id": 261360846,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1636810795
    },
    {
        "content": "<p>I don’t think those impls belong there, either. They’re normally only shown if <code>Self</code> equal to the type being shown (like on the <code>unit</code> page).</p>",
        "id": 261434408,
        "sender_full_name": "Michael Howell",
        "timestamp": 1636918322
    },
    {
        "content": "<p>IIRC, impls are also shown on a type's page if the type shows up in the generic params, so that's probably why that impl shows up on <code>reference</code>'s page. But I agree that we shouldn't be showing impls like that on its page.</p>",
        "id": 261582944,
        "sender_full_name": "Noah Lev",
        "timestamp": 1637023396
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/90946#issuecomment-970431167\">https://github.com/rust-lang/rust/pull/90946#issuecomment-970431167</a> cc <span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span> so my question here is are we hiding impls of the kind <code>impl&lt;T&gt; Trait for &amp;T</code> (etc)? Because those should probably show up here. They're not quite blanket impls, but they're important and i've needed to be able to see such impls in the past</p>",
        "id": 261724016,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1637105902
    },
    {
        "content": "<p>You'll still be able to see them but not on the reference page. You don't implement anything on a reference but on something behind a reference. Also, the current reference page trait impls doesn't make any sense...</p>",
        "id": 261757754,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1637139761
    },
    {
        "content": "<p>It's also important to note that it only lists implementations from std and core, making it even less useful.</p>",
        "id": 261761423,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1637142044
    },
    {
        "content": "<p>So I think most of the impls on that page are useless, but I'm specifically talking about impls like the <code>PartialEq</code> one and also auto traits: We should be showing those, those are useful to know.</p>\n<p>The problem we have right now is that that page _also_ shows traits like <code>Extend&lt;&amp;T&gt;</code>, we should _only_ be showing impls where the receiver is a reference, and ideally only _generic_ references.</p>\n<p>People do blanket impl on all references often and we should show those</p>",
        "id": 261812515,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1637167744
    },
    {
        "content": "<p>I agree we should be showing blanket impls on references, but it seems not very useful to show them on the page for <code>reference</code>; IMO they're only really useful on the trait's page. OTOH, special-casing references could increase complexity, and maybe people don't look at the impls on the <code>reference</code> page anyway (I know I don't).</p>",
        "id": 261812780,
        "sender_full_name": "Noah Lev",
        "timestamp": 1637167843
    },
    {
        "content": "<p>I actually didn't know these impls were on the <code>reference</code> page either, but even with this information, I don't really see how useful it could be for me.</p>",
        "id": 261813837,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1637168280
    },
    {
        "content": "<blockquote>\n<p>I actually didn't know these impls were on the reference page either</p>\n</blockquote>\n<p>Same here; in general I only look at primitive pages for things like <code>i32</code>, not <code>reference</code>.</p>",
        "id": 261816238,
        "sender_full_name": "Noah Lev",
        "timestamp": 1637169316
    },
    {
        "content": "<p>I'm a little confused why we're taking the viewpoint \"why would this documentation be useful\" - by that standard, why would <em>any</em> of the primitive page be useful compared to the equivalent page in the reference? Either the goal is to collect all the methods / traits for the primitive in one place, which the reference can't do by nature, or this only exists because we de facto know that no one updates the reference and these docs are more useful. In the first case we should keep the trait impls for <code>reference</code>, in the second we should delete these pages altogether and move the docs to the reference.</p>",
        "id": 261818735,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1637170348
    },
    {
        "content": "<p>(personally I would <em>love</em> not to have to maintain this code)</p>",
        "id": 261818834,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1637170395
    },
    {
        "content": "<p>I guess an alternative is to say \"references aren't a built in type\" and delete the page altogether, I would be ok with that too</p>",
        "id": 261819155,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1637170539
    },
    {
        "content": "<p>having docs for \"unit\" and \"tuple\" and \"slice\" always seemed weird to me anyway</p>",
        "id": 261819191,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1637170556
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/15654\">https://github.com/rust-lang/rust/issues/15654</a> mentions at least having &amp;T: Copy and that seems like something useful rustdoc can show but the reference wouldn't</p>",
        "id": 261820010,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1637170854
    },
    {
        "content": "<p>Anyway, my position is \"either tear it out altogether or leave the blanket impls because having the prose alone is not helpful\"</p>",
        "id": 261820230,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1637170942
    },
    {
        "content": "<p>Drive-by comment, but I think the pages should definitely exist because reading the rustdocs is how some people discover the language</p>",
        "id": 261820302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637170973
    },
    {
        "content": "<p>Related: <a href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">https://doc.rust-lang.org/nightly/std/primitive.tuple.html</a> has a very weird order of impls of e.g. <code>Debug</code> and <code>Default</code></p>",
        "id": 261820418,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637171034
    },
    {
        "content": "<p>Well, only related in that it shows how awful this code is lol</p>",
        "id": 261820533,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1637171073
    },
    {
        "content": "<p>I kind of get why it's there, but <code>impl ToSocketAddrs for (Ipv6Addr, u16)</code> seems like an odd thing to have on the tuple page</p>",
        "id": 261820718,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637171145
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> yes, that's how the conversation started - scroll up</p>",
        "id": 261820836,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1637171174
    },
    {
        "content": "<p>my point being that it's not just <code>reference</code> afflicted with weird impls</p>",
        "id": 261820948,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637171224
    },
    {
        "content": "<p>+1 to <span class=\"user-mention silent\" data-user-id=\"307537\">Noah Lev</span>'s suggestion to put them on the trait page</p>",
        "id": 261821044,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637171265
    },
    {
        "content": "<p>Ahhhh please read</p>\n<p>Noah is talking about blanket impls, not specific types. I disagree that blanket impls should go on the trait page, but that's irrelevant to your comment because the ToSocketAddr impl has no generic types</p>",
        "id": 261821260,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1637171351
    },
    {
        "content": "<p>Ah, I agree for blanket impls like <code>impl PartialOrd&lt;(A, B)&gt; for (A, B)</code>, those make sense on the tuple page, but <code>impl ToSocketAddrs for (Ipv6Addr, u16)</code> probably not</p>",
        "id": 261821550,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637171466
    },
    {
        "content": "<p>anyway, I'm just a lurker, don't mind me</p>",
        "id": 261821654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637171512
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/266220-rustdoc/topic/rendering.20for.20reference.20primitive.20doc.20page/near/261821044\">said</a>:</p>\n<blockquote>\n<p>+1 to <span class=\"user-mention silent\" data-user-id=\"307537\">Noah Lev</span>'s suggestion to put them on the trait page</p>\n</blockquote>\n<p>they already are on the trait page</p>",
        "id": 261833672,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1637176561
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/266220-rustdoc/topic/rendering.20for.20reference.20primitive.20doc.20page/near/261818735\">said</a>:</p>\n<blockquote>\n<p>I'm a little confused why we're taking the viewpoint \"why would this documentation be useful\" - by that standard, why would <em>any</em> of the primitive page be useful compared to the equivalent page in the reference? Either the goal is to collect all the methods / traits for the primitive in one place, which the reference can't do by nature, or this only exists because we de facto know that no one updates the reference and these docs are more useful. In the first case we should keep the trait impls for <code>reference</code>, in the second we should delete these pages altogether and move the docs to the reference.</p>\n</blockquote>\n<p>I think we start from a different point: for me, <code>reference</code> is a primitive type on which you can't implement anything (kinda like <code>tuple</code> which is a weird case too). I don't mind keeping things as is, just think that it's not useful and it would the code simpler to remove the impls from <code>reference</code>.</p>",
        "id": 261833966,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1637176718
    },
    {
        "content": "<blockquote>\n<p>reference is a primitive type on which you can't implement anything</p>\n</blockquote>\n<p>this is not true though, there's a blanket <code>impl&lt;T&gt; Copy for &amp;T {}</code></p>",
        "id": 261837407,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1637178276
    },
    {
        "content": "<p><code>reference</code> isn't a type on its own. You can't have <code>impl &amp; {}</code> or <code>impl Copy for &amp; {}</code>. It's always for a type behind a reference.</p>",
        "id": 261837688,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1637178371
    },
    {
        "content": "<p>ok, so? it's still useful to know \"this will be true for any reference regardless of the type behind it\"</p>",
        "id": 261837869,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1637178454
    },
    {
        "content": "<p>Yes, and for that you have the trait directly, or the type behind the reference.</p>",
        "id": 261838070,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1637178522
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"210316\">GuillaumeGomez</span> <a href=\"#narrow/stream/266220-rustdoc/topic/rendering.20for.20reference.20primitive.20doc.20page/near/261837688\">said</a>:</p>\n<blockquote>\n<p><code>reference</code> isn't a type on its own. You can't have <code>impl &amp; {}</code> or <code>impl Copy for &amp; {}</code>. It's always for a type behind a reference.</p>\n</blockquote>\n<p>FWIW, <code>Vec</code> has its own page, but you can't <code>impl Vec {}</code></p>",
        "id": 261838657,
        "sender_full_name": "Noah Lev",
        "timestamp": 1637178741
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"210316\">GuillaumeGomez</span> <a href=\"#narrow/stream/266220-rustdoc/topic/rendering.20for.20reference.20primitive.20doc.20page/near/261833672\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/266220-rustdoc/topic/rendering.20for.20reference.20primitive.20doc.20page/near/261821044\">said</a>:</p>\n<blockquote>\n<p>+1 to <span class=\"user-mention silent\" data-user-id=\"307537\">Noah Lev</span>'s suggestion to put them on the trait page</p>\n</blockquote>\n<p>they already are on the trait page</p>\n</blockquote>\n<p>I meant <em>only</em> put them on the trait page</p>",
        "id": 261838673,
        "sender_full_name": "Noah Lev",
        "timestamp": 1637178750
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Noah Lev</span> <a href=\"#narrow/stream/266220-rustdoc/topic/rendering.20for.20reference.20primitive.20doc.20page/near/261838657\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"210316\">GuillaumeGomez</span> <a href=\"#narrow/stream/266220-rustdoc/topic/rendering.20for.20reference.20primitive.20doc.20page/near/261837688\">said</a>:</p>\n<blockquote>\n<p><code>reference</code> isn't a type on its own. You can't have <code>impl &amp; {}</code> or <code>impl Copy for &amp; {}</code>. It's always for a type behind a reference.</p>\n</blockquote>\n<p>FWIW, <code>Vec</code> has its own page, but you can't <code>impl Vec {}</code></p>\n</blockquote>\n<p>Well, you can in <code>std</code>, but I think you got my point. ;)</p>",
        "id": 261839127,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1637178938
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Noah Lev</span> <a href=\"#narrow/stream/266220-rustdoc/topic/rendering.20for.20reference.20primitive.20doc.20page/near/261838673\">said</a>:</p>\n<blockquote>\n<p>I meant <em>only</em> put them on the trait page</p>\n</blockquote>\n<p>so you mean no more blanket impls on structs anymore?</p>",
        "id": 261843668,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1637180784
    },
    {
        "content": "<p>I feel like all this is more complicated than necessary :/ we can remove the things that obviously don't belong (<code>Extend</code> and the <code>ToSocketAddrs</code> thing) and the larger question of where to put blanket impls can wait until later</p>",
        "id": 261851332,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1637184189
    },
    {
        "content": "<p>If everyone agrees on this part, sure. I think <span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> was the one who had arguments to keep them?</p>",
        "id": 261856709,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1637186579
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> yeah I agree.</p>",
        "id": 261858050,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1637187093
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span> no, I want the extend and tosocketaddrs things to go, I don't want to lose the _other_ impls</p>",
        "id": 261858072,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1637187108
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span> when you impl on <code>&amp;T</code> you _are_ implementing on a reference</p>",
        "id": 261858150,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1637187136
    },
    {
        "content": "<p>you aren't implementing on T</p>",
        "id": 261858156,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1637187140
    },
    {
        "content": "<p>in fact references have a coherence exception to make this more useful</p>",
        "id": 261858167,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1637187152
    },
    {
        "content": "<p>references have:</p>\n<ul>\n<li>Copy/Clone/Send/Sync/etc impls</li>\n<li>PartialEq and similar</li>\n</ul>\n<p>which are quite relevant and I think we should show them</p>",
        "id": 261858215,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1637187181
    },
    {
        "content": "<p>Reference is a type on its own the way <code>Vec</code> is a type on its own, both are type _constructors_ because they have a generic parameter</p>",
        "id": 261858262,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1637187214
    },
    {
        "content": "<p>but we should treat it exactly the way we treat <code>Vec</code></p>",
        "id": 261858269,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1637187222
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132040\">Manish Goregaokar</span> <a href=\"#narrow/stream/266220-rustdoc/topic/rendering.20for.20reference.20primitive.20doc.20page/near/261858215\">said</a>:</p>\n<blockquote>\n<p>references have:</p>\n<ul>\n<li>Copy/Clone/Send/Sync/etc impls</li>\n<li>PartialEq and similar</li>\n</ul>\n<p>which are quite relevant and I think we should show them</p>\n</blockquote>\n<p>Good point!</p>",
        "id": 261858469,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1637187321
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"210316\">GuillaumeGomez</span> <a href=\"#narrow/stream/266220-rustdoc/topic/rendering.20for.20reference.20primitive.20doc.20page/near/261839127\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"307537\">Noah Lev</span> <a href=\"#narrow/stream/266220-rustdoc/topic/rendering.20for.20reference.20primitive.20doc.20page/near/261838657\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"210316\">GuillaumeGomez</span> <a href=\"#narrow/stream/266220-rustdoc/topic/rendering.20for.20reference.20primitive.20doc.20page/near/261837688\">said</a>:</p>\n<blockquote>\n<p><code>reference</code> isn't a type on its own. You can't have <code>impl &amp; {}</code> or <code>impl Copy for &amp; {}</code>. It's always for a type behind a reference.</p>\n</blockquote>\n<p>FWIW, <code>Vec</code> has its own page, but you can't <code>impl Vec {}</code></p>\n</blockquote>\n<p>Well, you can in <code>std</code>, but I think you got my point. ;)</p>\n</blockquote>\n<p>Oh, I thought you meant reference is not a type on its own because it requires a generic parameter.</p>",
        "id": 261988683,
        "sender_full_name": "Noah Lev",
        "timestamp": 1637268629
    },
    {
        "content": "<p>Ah no no, definitely not. Otherwise a lot of types wouldn't be types haha</p>",
        "id": 261988862,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1637268723
    },
    {
        "content": "<p>Yeah, I don't feel strongly about the impls for reference. Not showing the impls that have a reference in their params seems reasonable to me.</p>",
        "id": 261988936,
        "sender_full_name": "Noah Lev",
        "timestamp": 1637268755
    }
]