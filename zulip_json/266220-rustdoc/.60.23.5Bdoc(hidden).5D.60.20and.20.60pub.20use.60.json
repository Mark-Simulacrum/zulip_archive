[
    {
        "content": "<p>This came up in another thread; basically it would be quite desirable to have <code>#[doc(hidden)]</code> not (always) infect a <code>pub use</code>re-exported item; That is, given some <code>#[doc(hidden)] pub … item …</code>:</p>\n<ul>\n<li><code>#[doc(hidden)] pub use that::item</code> ought to \"remain\" hidden too;</li>\n<li><code>#[doc(inline)] pub use that::item</code> <strong>ought to <em>unhide</em> that item</strong> at the new path;<ul>\n<li><code>pub use that::item</code>, the default behavior, is left for you to decide, which basically boils down as to whether should <code>hidden</code>-infectiousness be opt-in or opt-out. <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> thinks that it's better for it to be opt-in rather than opt-out / that the <code>#[doc(hidden)] pub use …</code> alternative out there already covers the hidden case. I think I agree with this statement: <code>pub</code> items should be visible unless \"stated otherwise\", or in other words, if a user where to be suprised by the default behavior, whatever that one would be, using <code>#[doc(hidden)]</code> to hide something that wasn't is very intuitive, whereas using <code>#[doc(inline)]</code> to unhide something that was is not (as intuitive).</li>\n</ul>\n</li>\n</ul>\n<p>Know that this is not just a theoretical discussion: having some ability to <code>pub use</code> re-export and <em>expose</em> a public hidden item somewhere is the fastest way to be able to feature module-scoped macros in some crate:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">mod</span> <span class=\"nn\">some_path</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[doc(hidden)]</span><span class=\"w\"> </span><span class=\"cp\">#[macro_export]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* … */</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// #[doc(inline)]</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">crate</span>::<span class=\"n\">m</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<ul>\n<li>\n<p>Take, for instance, how the <code>::uninit</code> crate hacked its way into \"hiding\" the top-level exported crate: <a href=\"https://docs.rs/uninit/0.4.0/src/uninit/read/mod.rs.html#173\">https://docs.rs/uninit/0.4.0/src/uninit/read/mod.rs.html#173</a></p>\n</li>\n<li>\n<p>This is one way the stabilization of <code>ptr::raw_{const,mut}!</code> could be unblocked: <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Documenting.20ptr.3A.3Araw_const\">https://rust-lang.zulipchat.com/#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Documenting.20ptr.3A.3Araw_const</a></p>\n</li>\n</ul>",
        "id": 220958570,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1608977949
    }
]