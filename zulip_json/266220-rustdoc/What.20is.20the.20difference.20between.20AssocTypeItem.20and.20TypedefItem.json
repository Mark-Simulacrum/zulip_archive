[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span> do you know the difference between <code>AssocTypeItem</code> and <code>TypedefItem(_, true)</code>?</p>",
        "id": 221460344,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609693516
    },
    {
        "content": "<p>I would like to get rid of one or the other (preferably <code>TypedefItem(_, true)</code>)</p>",
        "id": 221460368,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609693536
    },
    {
        "content": "<p><code>TypedefItem</code> is an <code>AssocTypeItem</code> for me. I discovered that it was badly used at the same time as you today haha</p>",
        "id": 221460444,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1609693589
    },
    {
        "content": "<p>hmm, ok</p>",
        "id": 221460451,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609693601
    },
    {
        "content": "<p>I'll delete it and see what goes wrong <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 221460458,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609693609
    },
    {
        "content": "<p>I approve this way of doing things XD</p>",
        "id": 221460473,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1609693621
    },
    {
        "content": "<p>I don't understand this well enough to fix it. There's different info in each: <code>TypedefItem</code> holds</p>\n<ul>\n<li>the original item (<code>type_</code>)</li>\n<li><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustdoc/clean/types/struct.Generics.html\"><code>Generics</code></a></li>\n<li>the cleaned type (<code>item_type</code>)</li>\n</ul>\n<p>while <code>AssocTypeItem</code> only has the generic bounds and a place for the type default.</p>\n<p>There's all sorts of things wrong here:</p>\n<ul>\n<li><code>TypedefItem</code> doesn't have the type default. Maybe this is what goes wrong in <a href=\"https://github.com/rust-lang/rust/issues/80379\">https://github.com/rust-lang/rust/issues/80379</a> ?</li>\n<li><code>TypedefItem</code> duplicates the original type by storing both the original and the cleaned version. It should only store one or the other.</li>\n<li><code>AssocTypeItem</code> doesn't have the original type</li>\n<li><code>AssocTypeItem</code> is missing any generic parameters. I think this will prevent rustdoc from documenting GATs.</li>\n</ul>",
        "id": 221461855,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609695442
    },
    {
        "content": "<p>maybe I'll start small and just remove the cleaned version from <code>TypedefItem</code></p>",
        "id": 221461917,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609695488
    },
    {
        "content": "<p>wow this logic is just <em>so</em> convoluted</p>",
        "id": 221462056,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609695672
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/bcd69750794b315d7c673351f86cacdf5232a0b7/src/librustdoc/clean/mod.rs#L1124\"><code>impl Clean for hir::Impl</code></a> sees that it's an item, calculates the def id, passes it to <a href=\"https://github.com/rust-lang/rust/blob/bcd69750794b315d7c673351f86cacdf5232a0b7/src/librustdoc/clean/inline.rs#L277\"><code>build_ty</code></a>, <em>recalculates</em> the type, passes it to <a href=\"https://github.com/rust-lang/rust/blob/bcd69750794b315d7c673351f86cacdf5232a0b7/src/librustdoc/clean/inline.rs#L272\"><code>build_type_alias_item</code></a>, which then passes it <em>back</em> to <code>build_ty</code>, calculates the type I think a fourth time now, and only then actually does work in <code>impl Clean for Ty</code></p>",
        "id": 221462182,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609695837
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span> here's what goes wrong if I remove all that and just clone <code>type_</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code>comparing: /home/joshua/rustc2/build/x86_64-unknown-linux-gnu/test/rustdoc/deref-typedef.nightly/foo/struct.Bar.html ⟶   /home/joshua/rustc2/build/x86_64-unknown-linux-gnu/test/rustdoc/deref-typedef/foo/struct.Bar.html\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n\n41\n        &lt;div class=\"block items\"&gt;\n          &lt;a class=\"sidebar-title\" href=\"#deref-methods\"&gt;Methods from Deref&amp;lt;Target=FooC&amp;gt;&lt;/a&gt;\n          &lt;div class=\"sidebar-links\"&gt;\n<span class=\"gd\">-           &lt;a href=\"#method.foo_a\"&gt;foo_a&lt;/a&gt;&lt;a href=\"#method.foo_b\"&gt;foo_b&lt;/a&gt;&lt;a href=\"#method.foo_c\"&gt;foo_c&lt;/a&gt;</span>\n<span class=\"gi\">+           &lt;a href=\"#method.foo_c\"&gt;foo_c&lt;/a&gt;</span>\n          &lt;/div&gt;&lt;a class=\"sidebar-title\" href=\"#trait-implementations\"&gt;Trait Implementations&lt;/a&gt;\n          &lt;div class=\"sidebar-links\"&gt;\n            &lt;a href=\"#impl-Deref\"&gt;Deref&lt;/a&gt;\n\n91\n        Methods from &lt;a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\"&gt;Deref&lt;/a&gt;&amp;lt;Target = &lt;a class=\"type\" href=\"../foo/type.FooC.html\" title=\"type foo::FooC\"&gt;FooC&lt;/a&gt;&amp;gt;&lt;a href=\"#deref-methods\" class=\"anchor\"&gt;&lt;/a&gt;\n      &lt;/h2&gt;\n      &lt;div class=\"impl-items\"&gt;\n<span class=\"gd\">-       &lt;h4 id=\"method.foo_a\" class=\"method\"&gt;</span>\n<span class=\"gd\">-         &lt;code&gt;pub fn &lt;a href=\"#method.foo_a\" class=\"fnname\"&gt;foo_a&lt;/a&gt;(&amp;amp;self)&lt;/code&gt;&lt;a class=\"srclink\" href=\"../src/foo/deref-typedef.rs.html#18\" title=\"goto source code\"&gt;[src]&lt;/a&gt;</span>\n<span class=\"gd\">-       &lt;/h4&gt;</span>\n<span class=\"gd\">-     &lt;/div&gt;</span>\n<span class=\"gd\">-     &lt;div class=\"impl-items\"&gt;</span>\n<span class=\"gd\">-       &lt;h4 id=\"method.foo_b\" class=\"method\"&gt;</span>\n<span class=\"gd\">-         &lt;code&gt;pub fn &lt;a href=\"#method.foo_b\" class=\"fnname\"&gt;foo_b&lt;/a&gt;(&amp;amp;self)&lt;/code&gt;&lt;a class=\"srclink\" -ref=\"../src/foo/deref-typedef.rs.html#22\" title=\"goto source code\"&gt;[src]&lt;/a&gt;</span>\n<span class=\"gd\">-       &lt;/h4&gt;</span>\n<span class=\"gd\">-     &lt;/div&gt;</span>\n<span class=\"gd\">-     &lt;div class=\"impl-items\"&gt;</span>\n        &lt;h4 id=\"method.foo_c\" class=\"method\"&gt;\n</code></pre></div>",
        "id": 221463241,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609697158
    },
    {
        "content": "<p>and I'm very unclear why that happens</p>",
        "id": 221463279,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609697167
    },
    {
        "content": "<p>git says you were the person who added it in <a href=\"https://github.com/rust-lang/rust/commit/12f029b7eecc01a38fbeec0eebe9041aa1bab7a5\">https://github.com/rust-lang/rust/commit/12f029b7eecc01a38fbeec0eebe9041aa1bab7a5</a></p>",
        "id": 221463287,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609697187
    },
    {
        "content": "<p>well, to be fair, I added around 70% of rustdoc source code soooo... Let me check if I can remember this part.</p>",
        "id": 221463393,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1609697396
    },
    {
        "content": "<p>Ok I remember: it's because we need the derefed type</p>",
        "id": 221463469,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1609697489
    },
    {
        "content": "<p>if we don't get it, we can't get its methods</p>",
        "id": 221463478,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1609697510
    },
    {
        "content": "<p>This is why you have the missing methods when you removing it.</p>",
        "id": 221463523,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1609697528
    },
    {
        "content": "<p>but isn't <code>type_</code> already the deref type?</p>",
        "id": 221463546,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609697585
    },
    {
        "content": "<p>Apparently not, I'm still checking that</p>",
        "id": 221463562,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1609697610
    },
    {
        "content": "<p>I'm confused what calling <code>type_of</code> actually does</p>",
        "id": 221463563,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609697611
    },
    {
        "content": "<p>btw, the full PR is here: <a href=\"https://github.com/rust-lang/rust/pull/68093\">https://github.com/rust-lang/rust/pull/68093</a> and it's actually quite recent</p>",
        "id": 221463627,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1609697678
    },
    {
        "content": "<p>So, I think we use <code>Typedef</code> because it's kinda the same logic between deref item and type alias</p>",
        "id": 221463652,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1609697748
    },
    {
        "content": "<p>not very beautiful though...</p>",
        "id": 221463656,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1609697756
    },
    {
        "content": "<p>so I found there are two differences between <code>type_</code> and <code>item_type</code>:</p>\n<ol>\n<li><code>Res</code> is <code>FooA</code> for type_ and <code>Err</code> for item_type</li>\n<li>the path segments are <code>FooB</code> for type_ and <code>FooA</code> for item_type</li>\n</ol>",
        "id": 221466248,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609701499
    },
    {
        "content": "<p>I think the fix is that render shouldn't care about the path segments</p>",
        "id": 221466258,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609701521
    },
    {
        "content": "<p>oh wait no I'm dumb, the third and largest difference is the DefIds: <code>FooB</code> for <code>type_</code> and <code>FooA</code> for item_type</p>",
        "id": 221466267,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609701559
    },
    {
        "content": "<p>I think this might actually work by accident</p>",
        "id": 221466564,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609702048
    },
    {
        "content": "<p>one sec</p>",
        "id": 221466566,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609702050
    },
    {
        "content": "<p>oh no I'm just very confused</p>",
        "id": 221466681,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609702217
    },
    {
        "content": "<p>Let's just say I'm not very proud of that :-°</p>",
        "id": 221467096,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1609702784
    },
    {
        "content": "<p>ok yes I was right, I confused myself.<br>\n<span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span> this doesn't show any methods at all on <code>Bar</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">FooA</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">FooB</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FooA</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">FooC</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FooB</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">FooD</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FooC</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">FooE</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FooD</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">FooF</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FooE</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">FooG</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FooF</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">FooH</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FooG</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">FooI</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FooH</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">FooJ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FooI</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">FooA</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo_a</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">FooB</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo_b</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">FooC</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo_c</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Bar</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ops</span>::<span class=\"n\">Deref</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Target</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FooJ</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">deref</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">Self</span>::<span class=\"n\">Target</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"fm\">unimplemented!</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>What's going on is that each time you call <code>ty.clean().def_id()</code>, you get a different ID than before: it returns the ID of the item it's aliased to, not the original. So because you call <code>ty.clean().def_id().type_of().clean().def_id()</code> it works for two nested levels of aliases. But it breaks on anything more than two.</p>",
        "id": 221467146,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609702825
    },
    {
        "content": "<p>Yup</p>",
        "id": 221467158,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1609702855
    },
    {
        "content": "<p>ok well good, that means that this can be done much more simply</p>",
        "id": 221467176,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609702891
    },
    {
        "content": "<p>recursiooooooon</p>",
        "id": 221467239,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1609702963
    },
    {
        "content": "<p>well even simpler than that I think</p>",
        "id": 221467252,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609702974
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>rustdoc::clean::impl_Clean_for_TyAlias\n├─0ms DEBUG rustdoc::clean def_id=DefId(0:5 ~ foo[8787]::FooB), ty=Ty {\n│     hir_id: HirId {\n│         owner: DefId(0:5 ~ foo[8787]::FooB),\n│         local_id: 1,\n│     },\n│     kind: Path(\n│         Resolved(\n│             None,\n│             Path {\n│                 span: src/test/rustdoc/deref-typedef.rs:14:17: 14:21 (#0),\n│                 res: Def(\n│                     Struct,\n│                     DefId(0:3 ~ foo[8787]::FooA),\n│                 ),\n</code></pre></div>",
        "id": 221467260,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609702986
    },
    {
        "content": "<p>oh wait this is for FooB, not FooC</p>",
        "id": 221467271,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609702996
    },
    {
        "content": "<p>so yeah I guess recursion :(</p>",
        "id": 221467276,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609703022
    },
    {
        "content": "<p>I was really wondering for one sec how you could get it without recursing</p>",
        "id": 221467281,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1609703040
    },
    {
        "content": "<p>well I would <em>expect</em> there to be a compiler API for this</p>",
        "id": 221467323,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609703053
    },
    {
        "content": "<p>since it happens often, is expensive, and can easily be cached by short-circuiting</p>",
        "id": 221467325,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609703065
    },
    {
        "content": "<p>I guess there is one. But we still need to get all implementations made on each alias if any</p>",
        "id": 221467344,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1609703121
    },
    {
        "content": "<p>I would expect those to be present on the final DefId</p>",
        "id": 221467355,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609703145
    },
    {
        "content": "<p>it doesn't make sense for the API to work any other way</p>",
        "id": 221467361,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609703154
    },
    {
        "content": "<p>Well, sounds like a great new way to get things done :D</p>",
        "id": 221467435,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1609703250
    },
    {
        "content": "<p>oh I bet it's <code>normalize()</code></p>",
        "id": 221468003,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609703985
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> If I have <code>type B = A; type C = B; ...</code>, will normalize() turn <code>Z</code> into <code>A</code>?</p>",
        "id": 221468055,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609704016
    },
    {
        "content": "<p>you won't even have to normalize here, do you?</p>",
        "id": 221468504,
        "sender_full_name": "lcnr",
        "timestamp": 1609704542
    },
    {
        "content": "<p>what's the easier way?</p>",
        "id": 221468510,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609704554
    },
    {
        "content": "<p>the moment you convert to <code>ty::Ty</code> you should already end up with <code>A</code></p>",
        "id": 221468512,
        "sender_full_name": "lcnr",
        "timestamp": 1609704559
    },
    {
        "content": "<p>... I should?</p>",
        "id": 221468518,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609704570
    },
    {
        "content": "<p>type aliases don't really exist after hir</p>",
        "id": 221468519,
        "sender_full_name": "lcnr",
        "timestamp": 1609704572
    },
    {
        "content": "<p>that's not the behavior I'm seeing but maybe I'm just confused</p>",
        "id": 221468522,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609704579
    },
    {
        "content": "<p>hmm, maybe you are still using <code>hir::Ty</code>?</p>",
        "id": 221468589,
        "sender_full_name": "lcnr",
        "timestamp": 1609704629
    },
    {
        "content": "<p>or i am really confused rn <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 221468594,
        "sender_full_name": "lcnr",
        "timestamp": 1609704645
    },
    {
        "content": "<p>well all this code is a mess really lol <a href=\"#narrow/stream/266220-rustdoc/topic/What.20is.20the.20difference.20between.20AssocTypeItem.20and.20TypedefItem/near/221462182\">https://rust-lang.zulipchat.com/#narrow/stream/266220-rustdoc/topic/What.20is.20the.20difference.20between.20AssocTypeItem.20and.20TypedefItem/near/221462182</a></p>",
        "id": 221468610,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609704682
    },
    {
        "content": "<p>let me start by just calling <code>type_of</code> and see if it helps</p>",
        "id": 221468616,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609704695
    },
    {
        "content": "<p>ok you are correct that it is <code>A</code> before I ever pass it to normalize</p>",
        "id": 221468769,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609704888
    },
    {
        "content": "<p>which makes me think this is a bug elsewhere in rustdoc</p>",
        "id": 221468775,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609704896
    },
    {
        "content": "<p>anddd I found it, rustdoc does this in three places as usual <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/src/librustdoc/clean/mod.rs b/src/librustdoc/clean/mod.rs</span>\n<span class=\"gh\">index f4eb1924e6f..d78ae11fc78 100644</span>\n<span class=\"gd\">--- a/src/librustdoc/clean/mod.rs</span>\n<span class=\"gi\">+++ b/src/librustdoc/clean/mod.rs</span>\n<span class=\"gu\">@@ -1118,10 +1118,11 @@ fn clean(&amp;self, cx: &amp;DocContext&lt;'_&gt;) -&gt; Item {</span>\n                     }\n                     MethodItem(m, Some(self.defaultness))\n                 }\n<span class=\"gd\">-                hir::ImplItemKind::TyAlias(ref ty) =&gt; {</span>\n<span class=\"gd\">-                    let type_ = ty.clean(cx);</span>\n<span class=\"gd\">-                    let item_type = type_.def_id().and_then(|did| inline::build_ty(cx, did));</span>\n<span class=\"gd\">-                    TypedefItem(Typedef { type_, generics: Generics::default(), item_type }, true)</span>\n<span class=\"gi\">+                hir::ImplItemKind::TyAlias(ref hir_ty) =&gt; {</span>\n<span class=\"gi\">+                    let type_ = hir_ty.clean(cx);</span>\n<span class=\"gi\">+                    let item_type = hir_ty_to_ty(cx.tcx, hir_ty).clean(cx);</span>\n<span class=\"gi\">+                    TypedefItem(Typedef { type_: type_.clone(), generics: Generics::default(), item_type: Some(item_type) }, true)</span>\n                 }\n             };\n             Item::from_def_id_and_parts(local_did, Some(self.ident.name), inner, cx)\n</code></pre></div>",
        "id": 221469445,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609705743
    },
    {
        "content": "<p>thanks for the help everyone :)</p>",
        "id": 221469569,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609705913
    },
    {
        "content": "<p>I have an idea to simplify this further, but unfortunately it means the bug in <a href=\"https://github.com/rust-lang/rust/issues/80379\">https://github.com/rust-lang/rust/issues/80379</a> will apply to the current crate as well :(</p>",
        "id": 221470736,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609707621
    },
    {
        "content": "<p>if you don't mind looking into  type aliases in rustdoc, can you convert all tys to <code>ty::Ty</code> and then walk the substs for <code>Adt</code>s backwards during printing to remove all arguments which are equal to the default param?</p>",
        "id": 221470944,
        "sender_full_name": "lcnr",
        "timestamp": 1609707930
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/266220-rustdoc/topic/What.20is.20the.20difference.20between.20AssocTypeItem.20and.20TypedefItem/near/221470944\">said</a>:</p>\n<blockquote>\n<p>if you don't mind looking into  type aliases in rustdoc, can you convert all tys to <code>ty::Ty</code> and then walk the substs for <code>Adt</code>s backwards during printing to remove all arguments which are equal to the default param?</p>\n</blockquote>\n<p>that will break if someone explicitly writes <code>Vec&lt;usize, Global&gt;</code>, though, right?</p>",
        "id": 221471041,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609708061
    },
    {
        "content": "<p>I want to replace it only if it's been injected by the compiler</p>",
        "id": 221471049,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609708071
    },
    {
        "content": "<p>I guess there's not really a way to do that across crates</p>",
        "id": 221471057,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609708082
    },
    {
        "content": "<p>yeah</p>",
        "id": 221471091,
        "sender_full_name": "lcnr",
        "timestamp": 1609708085
    },
    {
        "content": "<p>though is printing <code>Vec&lt;usize, Global&gt;</code> desirable even if someone explicitly prints it?</p>",
        "id": 221471102,
        "sender_full_name": "lcnr",
        "timestamp": 1609708112
    },
    {
        "content": "<p>yeah, it probably makes sense to elide it no matter what</p>",
        "id": 221471107,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609708127
    },
    {
        "content": "<p>I don't have time to do this today probably but that sounds like the right approach :)</p>",
        "id": 221471111,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609708138
    },
    {
        "content": "<p>changing the param defaults is a breaking change so there shouldn't be too many reasons to explicitly specify the param default</p>",
        "id": 221471122,
        "sender_full_name": "lcnr",
        "timestamp": 1609708176
    },
    {
        "content": "<p>I can imagine it being confusing if <code>hashbrown</code> changes the default hasher across releases or something</p>",
        "id": 221471190,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609708289
    },
    {
        "content": "<p>but that still seems better than just never eliding it</p>",
        "id": 221471200,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609708311
    },
    {
        "content": "<p>yeah, it is a bit unfortunate</p>",
        "id": 221471286,
        "sender_full_name": "lcnr",
        "timestamp": 1609708434
    }
]