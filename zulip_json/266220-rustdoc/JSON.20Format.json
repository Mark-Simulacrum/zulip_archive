[
    {
        "content": "<p>Attempting to collect thoughts about JSON format improvements. List below is a mix of things from the original review and my additions.</p>",
        "id": 223414744,
        "sender_full_name": "CraftSpider",
        "timestamp": 1611167426
    },
    {
        "content": "<ul>\n<li>Distinguish between structs and unions | Given the other similarities, this may be as easy as adding a fourth option to StructType?</li>\n<li>Make <code>external_crates</code> just a list, instead of a map | It already uses just increasing numeric keys, nothing is lost</li>\n<li>Asked about the root field | It looks like the root field is used to indicate the ID of the root in the index, as IDs are supposed to be 'opaque'</li>\n<li><code>docs</code> should maybe be optional/nullable, not <code>unwrap_or_default</code> | Distinguishes between 'empty docs' and 'no docs'</li>\n<li><code>include_privates</code> may be unnecessary, whether private things are there will be obvious to the user as they passed the flag | Or see the 'private' items in the output, if passed</li>\n<li><code>index</code> could also be an array | This makes access by index harder, but removes duplicated info</li>\n</ul>",
        "id": 223414757,
        "sender_full_name": "CraftSpider",
        "timestamp": 1611167431
    },
    {
        "content": "<p>Several of these changes would be very easy to implement, but any thoughts on which would be useful, or any that opinions on have changed?</p>",
        "id": 223414796,
        "sender_full_name": "CraftSpider",
        "timestamp": 1611167451
    },
    {
        "content": "<blockquote>\n<p>include_privates may be unnecessary, whether private things are there will be obvious to the user as they passed the flag | Or see the 'private' items in the output, if passed</p>\n</blockquote>\n<p>I think this should be fixed first</p>",
        "id": 223416519,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611168255
    },
    {
        "content": "<p>other than that I don't remember exactly my comments, but this all looks vaguely in the right direction</p>",
        "id": 223416560,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611168280
    },
    {
        "content": "<p>would be great to hear from <span class=\"user-mention\" data-user-id=\"229913\">@HeroicKatora</span> when they get back from lunch :)</p>",
        "id": 223416593,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611168296
    },
    {
        "content": "<ul>\n<li>In <code>external_crate</code> I had missed the extra metadata that one would get from inspecting <code>cargo metadata</code>, such as versions, if that is possible. At least that would have made it a bit easier to provide a semantically meaningful list for offline documents such as pdf.</li>\n<li>Fully agree on the docs nullability.</li>\n<li>I'd like to make use of <code>include_privates</code> to generate a warning, indicating that the output is for development and not use. It might be obvious to the author but not any reader. I could probably also filter the items looking for any with non-public visibility.</li>\n<li><code>index</code> being an array would make it easier to iterate. Currently, I basically clone that map and pop the entries one-by-one since I can't borrow the map during iteration.</li>\n</ul>",
        "id": 223421637,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1611170410
    },
    {
        "content": "<p>In particular, since <code>index</code> and <code>paths</code> are not meant to be mutable, I have a very slight preference for a sorted array of sorts. But it's not a critical requirement by any means and a map is cleaner in the serde interaction/type interface.</p>",
        "id": 223422116,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1611170643
    },
    {
        "content": "<p>So, given Heroic's comment, I'd leave include_privates alone for the moment, but doc nullability should be easy long-hanging fruit, as it's just threading Option and removing some unwraps mostly</p>",
        "id": 223430005,
        "sender_full_name": "CraftSpider",
        "timestamp": 1611174260
    },
    {
        "content": "<p>Interesting how <code>clean::Union</code> has a StructType, as both Unit and Tuple unions are rejected by the parser (<code>expected `where` or `{` after union name, found `;` </code>)</p>",
        "id": 223435795,
        "sender_full_name": "CraftSpider",
        "timestamp": 1611176945
    },
    {
        "content": "<p>clean::Union and clean::Struct are the same, aside from their name. It would almost make more sense to consider 'Union' a StructType</p>",
        "id": 223435927,
        "sender_full_name": "CraftSpider",
        "timestamp": 1611177003
    },
    {
        "content": "<p>On the other hand, it makes sense to keep unions as distinct items. I'm thinking about this because I really want to fix the whole 'structs and unions are indistinguishable in JSON' thing</p>",
        "id": 223437020,
        "sender_full_name": "CraftSpider",
        "timestamp": 1611177542
    },
    {
        "content": "<p>could you make them different but leave out <code>StructType</code> from union?</p>",
        "id": 223437261,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611177659
    },
    {
        "content": "<p>Yeah, that works. Mind if I do that as part of a general move of StructType into <code>clean</code>, as that's now the only place with types that store it (rendering uses it)?</p>",
        "id": 223437729,
        "sender_full_name": "CraftSpider",
        "timestamp": 1611177916
    },
    {
        "content": "<p>sure, SGTM</p>",
        "id": 223437791,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611177953
    },
    {
        "content": "<p>PR for that up. I hope you don't mind that I keep requesting your review, I can let high-five pick if you'd rather not get the pings</p>",
        "id": 223441071,
        "sender_full_name": "CraftSpider",
        "timestamp": 1611179527
    },
    {
        "content": "<p>haha, nah this is fine</p>",
        "id": 223441136,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611179558
    },
    {
        "content": "<p>JSON PRs are easy to review because I don't have to worry about breaking things <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 223441167,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611179574
    },
    {
        "content": "<p>if something goes wrong <span class=\"user-mention silent\" data-user-id=\"229913\">HeroicKatora</span> can just ping me lol</p>",
        "id": 223441210,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611179591
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/81227/files#r561334410\">https://github.com/rust-lang/rust/pull/81227/files#r561334410</a></p>",
        "id": 223441945,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611179914
    },
    {
        "content": "<p>I like the idea of the json types being published as their own crate. Personally, I don't even think the rest of it is necessary (Or as reasonable, EG the conversion needs rustc internals), but the types with their serde impls is great.</p>",
        "id": 223685843,
        "sender_full_name": "CraftSpider",
        "timestamp": 1611343086
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> who would I talk to about autopublishing <code>src/librustdoc/json/types.rs</code> as a crate? Is that something that makes sense to do? Happy to do the work for it.</p>",
        "id": 223687363,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611343817
    },
    {
        "content": "<p>I would prefer to not do that personally</p>",
        "id": 223688067,
        "sender_full_name": "simulacrum",
        "timestamp": 1611344114
    },
    {
        "content": "<p>what is your use case I guess?</p>",
        "id": 223688101,
        "sender_full_name": "simulacrum",
        "timestamp": 1611344130
    },
    {
        "content": "<p>the use case is someone who wants to use the JSON API without rewriting the deserialization</p>",
        "id": 223688142,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611344154
    },
    {
        "content": "<p>if we don't publish this <em>someone</em> will, and it won't be as accurate or up to date</p>",
        "id": 223688191,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611344165
    },
    {
        "content": "<p>case in point: <a href=\"https://docs.rs/rustdoc-types/\">https://docs.rs/rustdoc-types/</a></p>",
        "id": 223688256,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611344187
    },
    {
        "content": "<p>then, autopublishing seems like the wrong approach to me</p>",
        "id": 223688269,
        "sender_full_name": "simulacrum",
        "timestamp": 1611344197
    },
    {
        "content": "<p>what would you suggest instead?</p>",
        "id": 223688297,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611344211
    },
    {
        "content": "<p>well, I guess, what kind of stability guarantees are we offering here?</p>",
        "id": 223688309,
        "sender_full_name": "simulacrum",
        "timestamp": 1611344215
    },
    {
        "content": "<p>not tied to releases, just a normal crate with semver</p>",
        "id": 223688331,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611344227
    },
    {
        "content": "<p>and we can document which version of the crate correponds to a Rust release</p>",
        "id": 223688365,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611344243
    },
    {
        "content": "<p>but you want nice semver? i.e. you expect to bump major versions rarely?</p>",
        "id": 223688419,
        "sender_full_name": "simulacrum",
        "timestamp": 1611344272
    },
    {
        "content": "<p>that's what I was imagining, yes</p>",
        "id": 223688450,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611344283
    },
    {
        "content": "<p>there's more discussion in the RFC, one sec</p>",
        "id": 223688489,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611344290
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rfcs/pull/2963#issuecomment-667342922\">https://github.com/rust-lang/rfcs/pull/2963#issuecomment-667342922</a>, <a href=\"https://github.com/rust-lang/rfcs/pull/2963#issuecomment-669466678\">https://github.com/rust-lang/rfcs/pull/2963#issuecomment-669466678</a></p>",
        "id": 223688525,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611344315
    },
    {
        "content": "<p>ok. so what I would do, I think, is move that file to a separate crate, and put it under, say, rust-lang/rustdoc-json github or something like that.</p>",
        "id": 223688809,
        "sender_full_name": "simulacrum",
        "timestamp": 1611344449
    },
    {
        "content": "<p>then we can publish that to <a href=\"http://crates.io\">crates.io</a> and use it from rustdoc via normal cargo.toml dep.</p>",
        "id": 223688841,
        "sender_full_name": "simulacrum",
        "timestamp": 1611344463
    },
    {
        "content": "<p>that said, I would personally prefer that we hold off on doing so until JSON in rustdoc moves out of erfc phase</p>",
        "id": 223688902,
        "sender_full_name": "simulacrum",
        "timestamp": 1611344498
    },
    {
        "content": "<p>hmm, I see - the idea is that the <em>conversions</em> might break based on changes to rustc, but changing the <em>types</em> should be an intentional semver break</p>",
        "id": 223688915,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611344506
    },
    {
        "content": "<p>Just to double check, would that trigger foreign impl rules on <code>impl From&lt;clean::Module&gt; for /* rustdoc_json:: */ Module</code>?</p>",
        "id": 223688935,
        "sender_full_name": "CraftSpider",
        "timestamp": 1611344516
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"319144\">CraftSpider</span> <a href=\"#narrow/stream/266220-rustdoc/topic/JSON.20Format/near/223688935\">said</a>:</p>\n<blockquote>\n<p>Just to double check, would that trigger foreign impl rules on <code>impl From&lt;clean::Module&gt; for /* rustdoc_json:: */ Module</code>?</p>\n</blockquote>\n<p>we can change it to free functions if need be, I'm not worried about that</p>",
        "id": 223689003,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611344534
    },
    {
        "content": "<p>rustdoc_json shouldn't depend on librustdoc anyway</p>",
        "id": 223689023,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611344545
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/266220-rustdoc/topic/JSON.20Format/near/223688902\">said</a>:</p>\n<blockquote>\n<p>that said, I would personally prefer that we hold off on doing so until JSON in rustdoc moves out of erfc phase</p>\n</blockquote>\n<p>I think it would be nice to have it as a separate crate (but not published to <a href=\"http://crates.io\">crates.io</a>) in-tree during the eRFC</p>",
        "id": 223689077,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611344575
    },
    {
        "content": "<p>Makes sense, I was worried about conversion difficulty, but thinking about it more changing to free functions is basically a renaming thing</p>",
        "id": 223689087,
        "sender_full_name": "CraftSpider",
        "timestamp": 1611344580
    },
    {
        "content": "<p>and people can use a git dependency</p>",
        "id": 223689093,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611344584
    },
    {
        "content": "<p>ok, well, that's not hard and doesn't require any checkin with anyone :)</p>",
        "id": 223689114,
        "sender_full_name": "simulacrum",
        "timestamp": 1611344593
    },
    {
        "content": "<p>haha, I'll start with that then</p>",
        "id": 223689168,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611344614
    },
    {
        "content": "<p>if we want a crate on <a href=\"http://crates.io\">crates.io</a> that we expect sort of \"end users\" to use, then I would like to see that go through an RFC.</p>",
        "id": 223689177,
        "sender_full_name": "simulacrum",
        "timestamp": 1611344619
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"319144\">@CraftSpider</span> ;)</p>",
        "id": 223689178,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611344619
    },
    {
        "content": "<p>(likely with T-core approval as a public facing artifact, in some sense)</p>",
        "id": 223689290,
        "sender_full_name": "simulacrum",
        "timestamp": 1611344656
    },
    {
        "content": "<p>Oh my. Well, I can take a look :P</p>",
        "id": 223689470,
        "sender_full_name": "CraftSpider",
        "timestamp": 1611344748
    },
    {
        "content": "<p>FWIW I would expect actually adding the new crate to be easy and the \"hard\" part to be rewriting things as free functions</p>",
        "id": 223689593,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611344793
    },
    {
        "content": "<p>but it's hard as in a lot of time, not as in difficult</p>",
        "id": 223689613,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611344803
    },
    {
        "content": "<p>Yeah. Where would the new crate go, just in <code>src</code>? As it's not really a 'tool'</p>",
        "id": 223689754,
        "sender_full_name": "CraftSpider",
        "timestamp": 1611344866
    },
    {
        "content": "<p>I would put it in <code>src/librustdoc/json-types</code> maybe</p>",
        "id": 223689879,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611344908
    },
    {
        "content": "<p>definitely in librustdoc somewhere</p>",
        "id": 223689886,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611344912
    },
    {
        "content": "<p>Yeah, that makes sense, assuming Cargo doesn't get mad because it's the same level as the <code>lib.rs</code> file? It wouldn't be a mod so I don't think so</p>",
        "id": 223690001,
        "sender_full_name": "CraftSpider",
        "timestamp": 1611344974
    },
    {
        "content": "<p>nah the module tree is independent of the file tree</p>",
        "id": 223690034,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611344991
    },
    {
        "content": "<p>Cool. I have managed to hit that point where like, I know a lot about some weird things, yet fairly little about other things. Yay self-teaching and diving into things head-first :P</p>",
        "id": 223690219,
        "sender_full_name": "CraftSpider",
        "timestamp": 1611345071
    },
    {
        "content": "<p>Hm. If we want to keep this untied to rustc, should I remove the <code>FxHashMap</code> usage?</p>",
        "id": 223690999,
        "sender_full_name": "CraftSpider",
        "timestamp": 1611345436
    },
    {
        "content": "<p>Replace it with just the <code>std::collections::HashMap</code></p>",
        "id": 223691028,
        "sender_full_name": "CraftSpider",
        "timestamp": 1611345450
    },
    {
        "content": "<p>yes, please do</p>",
        "id": 223691055,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611345468
    },
    {
        "content": "<p>you're just splitting out <code>types.rs</code>, right? <code>conversions.rs</code> needs to stay in rustdoc</p>",
        "id": 223691143,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611345498
    },
    {
        "content": "<p>Yeah</p>",
        "id": 223691158,
        "sender_full_name": "CraftSpider",
        "timestamp": 1611345508
    },
    {
        "content": "<p>The types use FxHashMap in... 4 places</p>",
        "id": 223691980,
        "sender_full_name": "CraftSpider",
        "timestamp": 1611345845
    },
    {
        "content": "<p>And at least 2 of those have been proposed to change to a Vec, so that number might go down in the future</p>",
        "id": 223692051,
        "sender_full_name": "CraftSpider",
        "timestamp": 1611345886
    },
    {
        "content": "<p>Admittedly I had just copied the types over as well, changing FxHashMap to std:: in the process.</p>",
        "id": 223744362,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1611400367
    },
    {
        "content": "<p>Generally, we tend to use <code>FxHashMap</code> in the compiler, so why making the switch?</p>",
        "id": 223744594,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1611400702
    },
    {
        "content": "<p>When publishing as a crate, I also wouldn't have changed it. It was just slightly more consistent with the local code that I already had and didn't take an extra dependency. It wouldn't really matter for consumption.</p>",
        "id": 223744667,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1611400807
    },
    {
        "content": "<p>One more thing to consider for a crate would be adding non_exhaustive attributes although that comes very close to sort-of stabilizing Rust syntax, which was the argument against including syn in std for proc-macors.</p>",
        "id": 223745600,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1611402406
    },
    {
        "content": "<p>That would mean to convert between the two types... Instead of exposing <code>FxHashMap</code>, can't we expose a trait (or multiple ones) that both <code>HashMap</code> and <code>FxHashMap</code> have so we can manipulate them both without caring about the actual type?</p>",
        "id": 223773364,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1611433298
    },
    {
        "content": "<p>what would be the point of doing that?</p>",
        "id": 223773409,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611433325
    },
    {
        "content": "<p>HashMap is not particularly complicated</p>",
        "id": 223773418,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611433339
    },
    {
        "content": "<p><code>FxHashMap</code> is a <code>HashMap</code> IIRC</p>",
        "id": 223773443,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1611433387
    },
    {
        "content": "<p>It's just a type alias with a different hasher than the default</p>",
        "id": 223773462,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1611433436
    },
    {
        "content": "<p>See <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_data_structures/fx/type.FxHashMap.html\">the docs</a></p>",
        "id": 223773490,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1611433444
    },
    {
        "content": "<p>Wait how does that work?</p>",
        "id": 223773701,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1611433744
    },
    {
        "content": "<p>Oh the usual HashMap methods are defined only for <code>S = RandomState</code></p>",
        "id": 223773717,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1611433789
    },
    {
        "content": "<p>Nevermind me then :p</p>",
        "id": 223773768,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1611433805
    },
    {
        "content": "<p>There was a concern marked on the PR about the new crate going in <code>src/etc</code>. So, should it be moved to <code>src/rustdoc-json-types</code> (Mark Simulacrum's suggestion), or is there some other place to put it?</p>",
        "id": 223786411,
        "sender_full_name": "CraftSpider",
        "timestamp": 1611447866
    },
    {
        "content": "<p>New issue, raised by <span class=\"user-mention silent\" data-user-id=\"229913\">HeroicKatora</span>: the <code>Method</code> kind does not possess an ABI field, but (trait) methods may have an ABI</p>",
        "id": 223786899,
        "sender_full_name": "CraftSpider",
        "timestamp": 1611448692
    },
    {
        "content": "<p>Add <code>is_unsafe</code> to the list missing from <code>Function</code> and <code>Method</code> as well. It's present on <code>FunctionPointer</code>.</p>",
        "id": 223786994,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1611448872
    },
    {
        "content": "<p>Currently, <code>unsafe</code> should appear as part of the <code>header</code> field. If it doesn't, that's a bug</p>",
        "id": 223787012,
        "sender_full_name": "CraftSpider",
        "timestamp": 1611448913
    },
    {
        "content": "<p>fn pointers are handled differently, I suspect because they currently cannot be <code>async</code> or <code>const</code>, the other things that appear in <code>header</code></p>",
        "id": 223787072,
        "sender_full_name": "CraftSpider",
        "timestamp": 1611448967
    },
    {
        "content": "<p>I see! That's fine then, unless it makes recombining the declaration harder.</p>",
        "id": 223787082,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1611448987
    },
    {
        "content": "<p>I'd think it would be fine. Max forward-compat would actually make function pointers drop <code>is_unsafe</code> and use <code>header</code>, so that if say <code>const</code> fn pointers ever come to be then it can be non-breaking to add them (assuming we mark that adding new values to header might happen at will)</p>",
        "id": 223787249,
        "sender_full_name": "CraftSpider",
        "timestamp": 1611449266
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"319144\">CraftSpider</span> <a href=\"#narrow/stream/266220-rustdoc/topic/JSON.20Format/near/223786411\">said</a>:</p>\n<blockquote>\n<p>There was a concern marked on the PR about the new crate going in <code>src/etc</code>. So, should it be moved to <code>src/rustdoc-json-types</code> (Mark Simulacrum's suggestion), or is there some other place to put it?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"319144\">@CraftSpider</span>  yes, <code>rustdoc-json-types</code> is fine. Next time can you please ask this on the PR? I had trouble finding your comment and I wasn't sure why you didn't make the change in the PR, I almost marked it waiting-on-author.</p>",
        "id": 223813946,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611494790
    },
    {
        "content": "<p>Current format changes I have in mind:</p>\n<ul>\n<li>Remove <code>struct_type</code> from <code>union</code></li>\n<li>Add <code>abi</code> to <code>method</code></li>\n<li>Change <code>header</code> to a <code>Vec&lt;String&gt;</code>, or even a <code>Vec&lt;Modifier&gt;</code> (name of new enum open to bikeshed). Replace <code>is_unsafe</code> on fn pointer with <code>header: Vec&lt;Modifier&gt;</code> for future-compat with const fn pointers</li>\n</ul>",
        "id": 223842929,
        "sender_full_name": "CraftSpider",
        "timestamp": 1611531858
    },
    {
        "content": "<p>Another thing I just noticed, Import calls the full path 'span', I feel there could be a better name?</p>",
        "id": 224558175,
        "sender_full_name": "CraftSpider",
        "timestamp": 1611970292
    },
    {
        "content": "<p>What about <code>path</code> <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 224563953,
        "sender_full_name": "Noah Lev",
        "timestamp": 1611979310
    }
]