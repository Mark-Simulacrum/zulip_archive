[
    {
        "content": "<p>So, <a href=\"https://github.com/rust-lang/rust/issues/86178\">#86178</a> has been open since June. I'm currently assigned on it, but I'm unsure what to do.</p>\n<p>On the one hand, ensuring DOM ids are declared in the map (or removed from the map if they are unused) seems like a good thing to have. On the other hand, the check adds a lot of code and seems very fragile. IIRC, it also only detects uses of ids with <code>write_small_section_header</code>, but ids are used in other places as well and there's nothing that ensures they are only used in <code>write_small_section_header</code>.</p>\n<p>On balance, I think I'm leaning towards closing it, but I don't feel super strongly. If someone else feels strongly in favor, please feel free to take over the review. I just don't want this PR to sit in limbo forever.</p>\n<p>What do you (T-rustdoc) think?</p>\n<p>cc <span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span></p>",
        "id": 264396984,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639104587
    },
    {
        "content": "<p>Could we make the check more reliable by checking the generated HTML instead of the Rust source?</p>",
        "id": 264400566,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639108750
    },
    {
        "content": "<p>that sounds more like a test than a tidy check, right? so e.g. generate library/std, grep for <code>id=\"([a-zA-z0-9-]*)\"</code>, and check the result matches the id map?</p>",
        "id": 264404223,
        "sender_full_name": "jsha",
        "timestamp": 1639113252
    },
    {
        "content": "<p>or do the same with the XPath tests instead, assuming they have equally good coverage and are smaller (and are generated anyhow during tests)</p>",
        "id": 264404233,
        "sender_full_name": "jsha",
        "timestamp": 1639113275
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/266220-rustdoc/topic/DOM.20id.20tidy.20check/near/264400566\">said</a>:</p>\n<blockquote>\n<p>Could we make the check more reliable by checking the generated HTML instead of the Rust source?</p>\n</blockquote>\n<p>If we do like that, it's very likely that we will miss a lot of potential ID duplication (and we already test that in the HTML too). </p>\n<p>Using regex like <span class=\"user-mention\" data-user-id=\"315412\">@jsha</span> suggested would work too I guess since we have to look inside html and rust code. The problem is really that we can't check using the generated HTML...</p>",
        "id": 264421912,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1639128898
    },
    {
        "content": "<p>Maybe related: I recently added my own header called “structs” which stole the anchor from the “jump to the list of structs” link. Would this address that?</p>",
        "id": 264445347,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1639142390
    },
    {
        "content": "<p>Probably not - to catch that we'd need a test that has an item named <code>structs</code></p>",
        "id": 264448931,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639144003
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/266220-rustdoc/topic/DOM.20id.20tidy.20check/near/264445347\">said</a>:</p>\n<blockquote>\n<p>Maybe related: I recently added my own header called “structs” which stole the anchor from the “jump to the list of structs” link. Would this address that?</p>\n</blockquote>\n<p>The test is to ensure that the ID used in rustdoc are listed in the ID map so that in your case, it doesn't conflict.</p>",
        "id": 264462913,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1639150117
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span> I'm confused by your response - are you saying the <em>goal</em> of the test is to catch issues like that? I'm saying even if that's the goal, none of the proposed <em>implementations</em> would catch it.</p>",
        "id": 264463028,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639150192
    },
    {
        "content": "<p>The goal of the test is to ensure that all IDs used in rustdoc are listed in the ID map to prevent ID conflicts when generating markdown (the headings all have an ID, which might conflict)</p>",
        "id": 264463425,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1639150359
    },
    {
        "content": "<p>the end goal is to prevent the issue <span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> was talking about ;)</p>",
        "id": 264463461,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1639150376
    },
    {
        "content": "<p>(does it make sense? I can try to reword if not)</p>",
        "id": 264463512,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1639150410
    },
    {
        "content": "<p>I think I get it - the ID map is an input to the markdown generator. If the markdown generator is about to generate an <code>id</code> that would conflict with an <code>id</code> already in use, it will rename the about-to-be-generated <code>id</code> so it doesn't conflict.</p>\n<p>The <code>id</code> <code>structs</code> is not currently in the ID map, but it should be. Presumably the \"regex on built HTML\" approach would catch that and tell us to add <code>structs</code> to the ID map. <span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span> in <a href=\"https://github.com/rust-lang/rust/pull/86178/files\">https://github.com/rust-lang/rust/pull/86178/files</a>, I don't see <code>structs</code> being added. Why is <code>structs</code> not caught by the technique you are using there?</p>",
        "id": 264487649,
        "sender_full_name": "jsha",
        "timestamp": 1639160514
    },
    {
        "content": "<p>Also I'm realizing the \"regex on built HTML\" approach will be _over_ inclusive, since it will catch IDs generated by markdown.</p>",
        "id": 264487732,
        "sender_full_name": "jsha",
        "timestamp": 1639160550
    },
    {
        "content": "<p>So, I'll try to re-explain it:</p>\n<p>In rustdoc, we generate the DOM with some hardcoded HTML IDs (like \"main\"). For each page, we have an ID map. When we generate something with an HTML ID, we first check if it already exists in the map. If not we add it into it, otherwise we add a <code>-n</code> (where <code>n</code> is number starting from 0 that we increase until we have a free ID and then store this new HTML ID).</p>\n<p>Now, a problem that often occurs is that we forget to declare a hardcoded ID into the ID map. If so, it means it's possible for an element of the page to use this ID, making it appear twice in the page. For example, if we don't add \"main\" to the ID map and I have a markdown like this:</p>\n<div class=\"codehilite\"><pre><span></span><code># main\n</code></pre></div>\n<p>It'll generate something like <code>&lt;h3 id=\"main\"&gt;main&lt;/h3&gt;</code>. But that is invalid in HTML to have more than one element with the same ID.</p>\n<p>We already have a tool which checks into the std docs if a page has a duplicated ID. However, it doesn't check if we forgot to add a harcoded ID into the map, making it possible (and based on the PR, it was very possible) to have a page with a duplicated ID.</p>\n<p>Since it's unfortunately not possible to check it on generated HTML, I wrote a tidy check which goes through rustdoc source code and look for <code>id=\"...\"</code> IDs (into templates too) and then check if they are in the ID map.</p>",
        "id": 264498115,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1639165357
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315412\">jsha</span> <a href=\"#narrow/stream/266220-rustdoc/topic/DOM.20id.20tidy.20check/near/264487732\">said</a>:</p>\n<blockquote>\n<p>Also I'm realizing the \"regex on built HTML\" approach will be _over_ inclusive, since it will catch IDs generated by markdown.</p>\n</blockquote>\n<p>We can only check if an ID is duplicated (and such a check already exists). But just like you said, we can't do it to check if we forgot to put a hardcoded ID into the ID map.</p>",
        "id": 264498279,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1639165444
    },
    {
        "content": "<p>so \"structs\" is a good example of where the approach of going through rustdoc source looking for <code>id=\"...\"</code> is fragile. We don't have <code>id=\"structs\"</code> anywhere. Instead we have<code>ItemType::Struct =&gt; (\"structs\", \"Structs\"),</code>, which gets interpolated eventually into <code>id=\"{}\"</code> somewhere.</p>",
        "id": 264499972,
        "sender_full_name": "jsha",
        "timestamp": 1639166307
    },
    {
        "content": "<p>Can we potentially move off of using <code>id</code> for things rustdoc generates, other than markdown output? that would presumably avoid this problem at the root, right? My assumption is that all IDs could in theory be replaced with e.g. classes at no real cost, and linting against <em>all</em> usage of id= in librustdoc seems considerably easier than trying to only use 'the right ones'.</p>",
        "id": 264500287,
        "sender_full_name": "simulacrum",
        "timestamp": 1639166439
    },
    {
        "content": "<p>(I feel like there must have been discussion on this aspect, but I don't actually recall discussing the need for IDs)</p>",
        "id": 264500446,
        "sender_full_name": "simulacrum",
        "timestamp": 1639166522
    },
    {
        "content": "<p>Obviously, it's also the case that collisions between e.g. css classes for styling, etc. would have problems too -- but that seems potentially more straightforward to solve</p>",
        "id": 264500606,
        "sender_full_name": "simulacrum",
        "timestamp": 1639166599
    },
    {
        "content": "<p>Don't you need IDs for things like: <a href=\"/user_uploads/4715/sOEZ-_yaSPR7gBvqYRwV-2RW/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/sOEZ-_yaSPR7gBvqYRwV-2RW/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/sOEZ-_yaSPR7gBvqYRwV-2RW/image.png\"></a></div>",
        "id": 264501832,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1639167262
    },
    {
        "content": "<p><code>id</code> is used for targetting parts of the page with URL fragments, e.g. <a href=\"https://doc.rust-lang.org/nightly/std/string/struct.String.html#implementations\">https://doc.rust-lang.org/nightly/std/string/struct.String.html#implementations</a></p>",
        "id": 264501843,
        "sender_full_name": "jsha",
        "timestamp": 1639167271
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315412\">jsha</span> <a href=\"#narrow/stream/266220-rustdoc/topic/DOM.20id.20tidy.20check/near/264501843\">said</a>:</p>\n<blockquote>\n<p><code>id</code> is used for targetting parts of the page with URL fragments, e.g. <a href=\"https://doc.rust-lang.org/nightly/std/string/struct.String.html#implementations\">https://doc.rust-lang.org/nightly/std/string/struct.String.html#implementations</a></p>\n</blockquote>\n<p>Ah, right. I forgot that we generated our own such IDs.</p>\n<p>As you mention with the structs example, it seems like it's easy for conflicts to arise even within rustdoc -- not just with markdown-generated IDs. Maybe we can enforce that IDs are generated through the id map by linting the final html s.t. ids are always prefixed with something (e.g., <code>rd-</code>...) but that seems suboptimal too.</p>",
        "id": 264502330,
        "sender_full_name": "simulacrum",
        "timestamp": 1639167514
    },
    {
        "content": "<p>This is one of the reasons I would like to use Tera for generating HTML. Since Tera templates are HTML with other stuff in it, you can use an HTML parser on the templates to get a full list of IDs in them, and build the ID map from that.</p>",
        "id": 264503631,
        "sender_full_name": "Michael Howell",
        "timestamp": 1639168170
    },
    {
        "content": "<p>Seems like that would have the same problem <a href=\"#narrow/stream/266220-rustdoc/topic/DOM.20id.20tidy.20check/near/264499972\">mentioned earlier</a>. Hypothetical Tera template:</p>\n<div class=\"codehilite\"><pre><span></span><code>&lt;div id=&quot;{{ awesome_id }}&quot; /&gt;\n</code></pre></div>\n<p>You wouldn't know the value of the ID from <em>just</em> the template, right?</p>",
        "id": 264504363,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1639168539
    },
    {
        "content": "<p>I really want to finish the Tera work too! Currently it's blocked on a performance regression from migrating the most recent template: <a href=\"https://github.com/rust-lang/rust/issues/89732\">https://github.com/rust-lang/rust/issues/89732</a>. I think that may be fundamental to Tera's use of <code>Serialize</code>. That could improve with a migration to <code>valuable</code> but that's a bit uncertain at the moment: <a href=\"https://github.com/Keats/tera/issues/637#issuecomment-941926705\">https://github.com/Keats/tera/issues/637#issuecomment-941926705</a>.</p>\n<p>At any rate, Jake Goulding is right; templating doesn't solve this particular problem because you can interpolate ids.</p>",
        "id": 264504635,
        "sender_full_name": "jsha",
        "timestamp": 1639168661
    },
    {
        "content": "<p>Here's an informative example of what currently happens:</p>\n<p><a href=\"https://doc.rust-lang.org/nightly/std/string/struct.String.html#examples\">https://doc.rust-lang.org/nightly/std/string/struct.String.html#examples</a><br>\n<a href=\"https://doc.rust-lang.org/nightly/std/string/struct.String.html#examples-1\">https://doc.rust-lang.org/nightly/std/string/struct.String.html#examples-1</a><br>\n<a href=\"https://doc.rust-lang.org/nightly/std/string/struct.String.html#examples-2\">https://doc.rust-lang.org/nightly/std/string/struct.String.html#examples-2</a></p>\n<p><code>String</code> has many different \"examples\" subheadings, in different parts of the doc. They would all conflict with each other, so ones after the first get renamed to add <code>-1</code> etc.</p>",
        "id": 264504777,
        "sender_full_name": "jsha",
        "timestamp": 1639168721
    },
    {
        "content": "<p>Actually, something we could do is add a tidy which checks that we don't have <code>id=\"...\"</code> in rustdoc source code and create a new struct looking like this: <code>struct HtmlId(&amp;'static str)</code> which would impl <code>Display</code> and render <code>id=\"...\"</code>. That seems much simpler no?</p>",
        "id": 264504873,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1639168784
    },
    {
        "content": "<p>That doesn't cover tera templates, but that reduces the problem quite a bit</p>",
        "id": 264504891,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1639168798
    },
    {
        "content": "<p>One possibility could be to scope ids by a \"parent\" id. So for instance <a href=\"https://doc.rust-lang.org/nightly/std/string/struct.String.html#method.with_capacity\">https://doc.rust-lang.org/nightly/std/string/struct.String.html#method.with_capacity</a> has an <code>Examples</code> section. Instead of having that be <code>id=\"examples-1\"</code>, it could be <code>id=\"method.with_capacity.examples\"</code></p>",
        "id": 264504935,
        "sender_full_name": "jsha",
        "timestamp": 1639168805
    },
    {
        "content": "<p>The topmost examples section could be <code>id=\"top.examples\"</code></p>",
        "id": 264505044,
        "sender_full_name": "jsha",
        "timestamp": 1639168877
    },
    {
        "content": "<p>And the examples section under <a href=\"https://doc.rust-lang.org/nightly/std/string/struct.String.html#method.from_utf8\">https://doc.rust-lang.org/nightly/std/string/struct.String.html#method.from_utf8</a> could be <code>id=\"method.from_utf8.examples\"</code></p>",
        "id": 264505104,
        "sender_full_name": "jsha",
        "timestamp": 1639168910
    },
    {
        "content": "<p>basically the intuition is that instead of avoiding conflicts by knowing everything in our id namespace, we should avoid conflicts by maintaining separate namespaces for our own ids and for markdown ids.</p>",
        "id": 264505321,
        "sender_full_name": "jsha",
        "timestamp": 1639169020
    },
    {
        "content": "<p>For my own selfish reasons, I'd love it if the numbered ids were removed in favor of something like that that appears (on the surface) to be less brittle to changes across versions</p>",
        "id": 264505428,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1639169062
    },
    {
        "content": "<p>That's also a great reason for the namespacing approach! yeah, the numbers are very brittle. That will be particularly an issue now that <a href=\"http://docs.rs\">docs.rs</a> uses /latest/ URLs rather than redirecting to specific versions.</p>",
        "id": 264507233,
        "sender_full_name": "jsha",
        "timestamp": 1639169959
    },
    {
        "content": "<p>I like the namespacing approach too</p>",
        "id": 264508011,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1639170288
    },
    {
        "content": "<p>no need to worry about hardcoded HTML IDs</p>",
        "id": 264508050,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1639170307
    },
    {
        "content": "<p>I love really like it</p>",
        "id": 264508057,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1639170311
    },
    {
        "content": "<p>Am I missing something or can we just have a check that runs on the doc output of tests or <code>library/std</code> to make sure there are no duplicate IDs for each page? It seems like we could use an off the shelf tool for that.</p>",
        "id": 264509233,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639170893
    },
    {
        "content": "<p>In other words, it wouldn't compare with the ID map; it would just ensure that each page only has one occurrence of each ID.</p>",
        "id": 264509278,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639170920
    },
    {
        "content": "<p>I think that would catch most of these issues.</p>",
        "id": 264509418,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639170969
    },
    {
        "content": "<p>Building our own tooling just seems like too much engineering effort and maintenance cost to be worth it.</p>",
        "id": 264509456,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639170988
    },
    {
        "content": "<p>that doesn't work because there's a good chance <code>library/std</code> happens to not duplicate any IDs, but some other crate would.</p>\n<p>For instance consider <span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span>'s case - they added a <code># Structs</code> and it broke. Is there any instance of <code># Structs</code> in <code>library/std</code>? Probably not, so we wouldn't have caught that problem.</p>",
        "id": 264509528,
        "sender_full_name": "jsha",
        "timestamp": 1639171019
    },
    {
        "content": "<p>(in fact I just grepped and there is no instance of <code># Structs</code> in <code>library/std</code>)</p>",
        "id": 264509598,
        "sender_full_name": "jsha",
        "timestamp": 1639171056
    },
    {
        "content": "<p>We could self-check on emitting HTML and panic, once we are more confident that the problem has been fixed at the root, so that at least there's bug reports when it happens (perhaps with some kind of opt-out from the checking so that users can still build docs...?)</p>",
        "id": 264509705,
        "sender_full_name": "simulacrum",
        "timestamp": 1639171098
    },
    {
        "content": "<p>But in general, yes, I think there's a need for some kind of hierarchy etc to get this right.</p>",
        "id": 264509736,
        "sender_full_name": "simulacrum",
        "timestamp": 1639171120
    },
    {
        "content": "<p>I think a warning would make more sense so we don't break people's builds. Although I guess that will just get hidden on <a href=\"http://docs.rs\">docs.rs</a>. Maybe we could have <a href=\"http://docs.rs\">docs.rs</a> grep the output of rustdoc and report somewhere if it sees the warning?</p>",
        "id": 264509971,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639171249
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315412\">jsha</span> <a href=\"#narrow/stream/266220-rustdoc/topic/DOM.20id.20tidy.20check/near/264509528\">said</a>:</p>\n<blockquote>\n<p>that doesn't work because there's a good chance <code>library/std</code> happens to not duplicate any IDs, but some other crate would.</p>\n<p>For instance consider <span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span>'s case - they added a <code># Structs</code> and it broke. Is there any instance of <code># Structs</code> in <code>library/std</code>? Probably not, so we wouldn't have caught that problem.</p>\n</blockquote>\n<p>Short of some sort of fancy static analysis, we're never going to catch <em>all</em> instances of this problem, but we might catch some at least. I don't think we should spend so much effort for a bug that is, in the end, not that big of a deal.</p>",
        "id": 264510053,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639171301
    },
    {
        "content": "<p>The worst that happens is that</p>\n<ul>\n<li>styles are applied incorrectly</li>\n<li>the wrong anchor is jumped to</li>\n</ul>\n<p>Is preventing that really worth all this effort? We'll get bug reports from users in many cases, and rustdoc has much more serious bugs that we should spend effort to prevent.</p>",
        "id": 264510188,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639171359
    },
    {
        "content": "<p>I think that's correct. My current opinion is: switch to namespacing, which fixes the most common instances of this bug, and don't land the tidy check. Still need to keep the ID map, and add to it the missing ids we've mentioned in this thread (\"Structs\" and friends)</p>",
        "id": 264510234,
        "sender_full_name": "jsha",
        "timestamp": 1639171381
    },
    {
        "content": "<p>I'm going to close the PR for now. I think it could make sense to do some kind of check (hand-rolled or off the shelf) on the std output, but other than that, I don't think it's worth it.</p>",
        "id": 264510282,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639171409
    },
    {
        "content": "<p>Switching to namespacing also yields side benefits like having more stable and readable anchors</p>",
        "id": 264510283,
        "sender_full_name": "jsha",
        "timestamp": 1639171409
    },
    {
        "content": "<p>Yes, namespacing seems like a good idea. I think that's a better way to solve the problem.</p>",
        "id": 264510303,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639171422
    },
    {
        "content": "<p>Ok, I closed the PR.</p>",
        "id": 264510554,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639171525
    },
    {
        "content": "<p>I've also opened two issues to track the primary outcomes of this discussion: <a href=\"https://github.com/rust-lang/rust/issues/91758\">#91758</a> and <a href=\"https://github.com/rust-lang/rust/issues/91759\">#91759</a>.</p>",
        "id": 264510978,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639171719
    },
    {
        "content": "<p>I'm happy to edit the descriptions for those to be a nice summary of the discussion so folks don't have to read through the zulip. What's the ettiquette - is it okay to just edit the top post even though that makes it look like my words were said by you (which is ok by me if it's ok by you)?</p>",
        "id": 264511780,
        "sender_full_name": "jsha",
        "timestamp": 1639172127
    },
    {
        "content": "<p>I'll check for an answer later, right now heading out to try and get boosted <span aria-label=\"injection\" class=\"emoji emoji-1f489\" role=\"img\" title=\"injection\">:injection:</span></p>",
        "id": 264511809,
        "sender_full_name": "jsha",
        "timestamp": 1639172149
    },
    {
        "content": "<p>Etiquette about editing posts varies somewhat. Usually editing the top post is more okay. Sometimes I put <code>EDIT(camelid)</code> to make it clear it's me. In this case, feel free to add some summaries :)</p>",
        "id": 264512976,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639172813
    },
    {
        "content": "<p>People can also see the edit history if they want to know who wrote it</p>",
        "id": 264513008,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639172833
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Noah Lev</span> <a href=\"#narrow/stream/266220-rustdoc/topic/DOM.20id.20tidy.20check/near/264509233\">said</a>:</p>\n<blockquote>\n<p>Am I missing something or can we just have a check that runs on the doc output of tests or <code>library/std</code> to make sure there are no duplicate IDs for each page? It seems like we could use an off the shelf tool for that.</p>\n</blockquote>\n<p>I said it multiple times but maybe I wasn't clear (sorry): there is a test which checks that there is no duplicated IDs</p>",
        "id": 264514839,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1639173752
    },
    {
        "content": "<p>Ah, where is it? I'm curious to see it.</p>",
        "id": 264515586,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639174168
    },
    {
        "content": "<p>Updated the issues (alas no booster; I was hoping the local pharmacy had walkups)</p>",
        "id": 264515621,
        "sender_full_name": "jsha",
        "timestamp": 1639174189
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Noah Lev</span> <a href=\"#narrow/stream/266220-rustdoc/topic/DOM.20id.20tidy.20check/near/264515586\">said</a>:</p>\n<blockquote>\n<p>Ah, where is it? I'm curious to see it.</p>\n</blockquote>\n<p><code>src/tools/linkchecker/main.rs</code> line 552</p>",
        "id": 264516733,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1639174647
    },
    {
        "content": "<p>:)</p>",
        "id": 264516739,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1639174651
    },
    {
        "content": "<blockquote>\n<p>I think a warning would make more sense so we don't break people's builds. Although I guess that will just get hidden on <a href=\"http://docs.rs\">docs.rs</a>. Maybe we could have <a href=\"http://docs.rs\">docs.rs</a> grep the output of rustdoc and report somewhere if it sees the warning?</p>\n</blockquote>\n<p>Please no, I don't want to have to add GitHub authentication to <a href=\"http://docs.rs\">docs.rs</a>. Plus it will be too noisy to reasonably deal with.</p>\n<p>We could add it to sentry issues but I really don't want to be the only person with access to both rustdoc and sentry, and I suspect there will be way too many false positives to have any hope of dealing with it manually.</p>",
        "id": 264524994,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639179753
    },
    {
        "content": "<p>Yeah, I realized that it's not worth it</p>",
        "id": 264525336,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639179956
    },
    {
        "content": "<p>If you go the namespace route, is it possible for rustdoc to provide a warning to the user if they create an id that starts with that namespace?</p>",
        "id": 264559006,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1639224192
    },
    {
        "content": "<p>E.g. if you picked <code>rd-</code> and I had the markdown <code># rd-cowabunga</code>?</p>",
        "id": 264559066,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1639224261
    },
    {
        "content": "<p>So not even an exact match, just a prefix match</p>",
        "id": 264559075,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1639224288
    },
    {
        "content": "<p>That wouldn't be an issue, because <code># rd-cowabunga</code> would become <code>id=\"rd-rd-cowabunga\"</code></p>",
        "id": 264573803,
        "sender_full_name": "jsha",
        "timestamp": 1639243486
    },
    {
        "content": "<p>(I have that reference!)</p>",
        "id": 264574355,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1639244097
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315412\">jsha</span> <a href=\"#narrow/stream/266220-rustdoc/topic/DOM.20id.20tidy.20check/near/264573803\">said</a>:</p>\n<blockquote>\n<p>That wouldn't be an issue, because <code># rd-cowabunga</code> would become <code>id=\"rd-rd-cowabunga\"</code></p>\n</blockquote>\n<p>So you are going to put all the <em>user</em> specified IDs into a namespace? I must have misunderstood.</p>",
        "id": 264582339,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1639253955
    },
    {
        "content": "<p>I think the idea was to prefix user IDs by the section of the docs they were in. E.g., a header for the method <code>my_method</code> would get the id <code>#method.my_method.the-header</code>.</p>",
        "id": 264582439,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639254112
    },
    {
        "content": "<p>Do we currently have plans to change the format for method/field/etc. URL fragments? I know <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> has suggested changing <code>struct.Foo.html</code> to <code>t.Foo.html</code>, but I wasn't sure if there were similar ideas for URL fragments.</p>",
        "id": 264582529,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639254183
    },
    {
        "content": "<p>The difficulty of changing URL fragments is that redirects are harder.</p>",
        "id": 264582548,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639254197
    },
    {
        "content": "<p>But if we think we might change them soon, we might want to wait on the namespacing to avoid having to create even more redirects.</p>",
        "id": 264582568,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639254218
    },
    {
        "content": "<p>That RFC's been open a year, I don't have much hope of it getting accepted</p>",
        "id": 264582715,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639254395
    },
    {
        "content": "<p>Did you end up opening an RFC? I thought it was just a pre-RFC but I may have missed it</p>",
        "id": 264582863,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639254583
    },
    {
        "content": "<p>Found it: <a href=\"https://github.com/rust-lang/rfcs/issues/2988\">rfcs#2988</a></p>",
        "id": 264583178,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639254965
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Noah Lev</span> <a href=\"#narrow/stream/266220-rustdoc/topic/DOM.20id.20tidy.20check/near/264582548\">said</a>:</p>\n<blockquote>\n<p>The difficulty of changing URL fragments is that redirects are harder.</p>\n</blockquote>\n<p>I don't see how it impacts the namespacing of the markdown headings ID: we don't link to them. Or were you talking about something else?</p>",
        "id": 265295399,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1639747870
    }
]