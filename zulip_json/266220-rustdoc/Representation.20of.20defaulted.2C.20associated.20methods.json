[
    {
        "content": "<p>How would one differentiate trait methods that are defaulted from those that must be provided? It seems that both kinds of Method items have <code>has_body: true</code>. Is this a bug?</p>",
        "id": 223785316,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1611446211
    },
    {
        "content": "<p>According to a quick glance at the RFC, <code>has_body</code> should be false in a trait definition with, well, no body. So it sounds like a bug. I'll take a look, and see if I can write up a fix + add some tests</p>",
        "id": 223786341,
        "sender_full_name": "CraftSpider",
        "timestamp": 1611447765
    },
    {
        "content": "<p>Reproduction case:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">ThisIsATrait</span>: <span class=\"nb\">Clone</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// An ordinary method taking `&amp;self`.</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">method</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">param</span>: <span class=\"kt\">usize</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Warning: Unhandled trait item: Item { id: Id(\"0:25\"), crate_id: 0, name: Some(\"method\"), source: Some(Span { filename: \"src/lib.rs\", begin: (41, 4), end: (41, 35) }), visibility: Public, docs: \"An ordinary method taking `&amp;self`.\", links: {}, attrs: [], deprecation: None, kind: Method, inner: MethodItem(Method { decl: FnDecl { inputs: [(\"self\", BorrowedRef { lifetime: None, mutable: false, type_: Generic(\"Self\") }), (\"param\", Primitive(\"usize\"))], output: None, c_variadic: false }, generics: Generics { params: [], where_predicates: [] }, header: \"\", has_body: true }) }\n</code></pre></div>",
        "id": 223786650,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1611448275
    },
    {
        "content": "<p>Another interesting case: <code>Method</code> does not have an ABI but it is valid to add an ABI annotation to trait methods.</p>",
        "id": 223786779,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1611448498
    },
    {
        "content": "<p><code>has_body: true</code> - nice</p>",
        "id": 223787562,
        "sender_full_name": "CraftSpider",
        "timestamp": 1611449651
    },
    {
        "content": "<p>Okay, so a <code>clean::Function</code> doesn't provide that item, and the way <code>From</code> was implemented is throwing out the extra data. I think I know how to fix it :P</p>",
        "id": 223787663,
        "sender_full_name": "CraftSpider",
        "timestamp": 1611449820
    },
    {
        "content": "<p>PR up to fix it: <a href=\"https://github.com/rust-lang/rust/pull/81318\">https://github.com/rust-lang/rust/pull/81318</a></p>",
        "id": 223789556,
        "sender_full_name": "CraftSpider",
        "timestamp": 1611452912
    }
]