[
    {
        "content": "<p>Hi all, it's my first time contributing to rustdoc (or rust in general) so sorry if this is a bit of a basic question! It was recommended that the place to start with this issue would be to use <code>resolve_associated_trait_item</code> from <code>resolve_primitive_associated_item</code>, and I understand how that would help with the issue, but I'm having trouble figuring out how to call <code>resolve_associated_trait_item</code> because it requires a DefId for the type and the module it comes from, and I don't have that info available in <code>resolve_primitive_associated_item</code>. If anyone has any insights that might help, or can point me in the direction of any info I should read up on, I'd really appreciate it!</p>",
        "id": 260865414,
        "sender_full_name": "Ryan Geary",
        "timestamp": 1636493876
    },
    {
        "content": "<p>Hmm, you might be able to add an <code>as_def_id() -&gt; Option&lt;DefId&gt;</code> function to <code>PrimitiveType</code>: <a href=\"https://doc.rust-lang.org/stable/nightly-rustc/rustdoc/clean/types/enum.PrimitiveType.html#method.from_symbol\">https://doc.rust-lang.org/stable/nightly-rustc/rustdoc/clean/types/enum.PrimitiveType.html#method.from_symbol</a></p>",
        "id": 260865576,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636493958
    },
    {
        "content": "<p>err uhh not sure if primitives actually have DefIds</p>",
        "id": 260865673,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636494003
    },
    {
        "content": "<p>This is a bit of a hack, but I think you could do <code>Type::Primitive(the_prim_in_question).def_id(&amp;cx.cache)</code></p>",
        "id": 260865713,
        "sender_full_name": "Noah Lev",
        "timestamp": 1636494013
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307537\">@Noah Lev</span> no, that's not helpful - it gives the defid of the module with <code>doc(primitive)</code></p>",
        "id": 260865757,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636494031
    },
    {
        "content": "<p>which will never have associated items</p>",
        "id": 260865764,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636494035
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/266220-rustdoc/topic/help.20with.20.2390703/near/260865673\">said</a>:</p>\n<blockquote>\n<p>err uhh not sure if primitives actually have DefIds</p>\n</blockquote>\n<p>They sort of do; IIRC they use the DefId of the primitive module</p>",
        "id": 260865767,
        "sender_full_name": "Noah Lev",
        "timestamp": 1636494036
    },
    {
        "content": "<p>there's some query that takes a ty::Ty and gives you the trait impls I think</p>",
        "id": 260865877,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636494103
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/266220-rustdoc/topic/help.20with.20.2390703/near/260865757\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"307537\">Noah Lev</span> no, that's not helpful - it gives the defid of the module with <code>doc(primitive)</code></p>\n</blockquote>\n<p>The link <code>[f32::to_le_bytes]</code> works, so somehow it's finding the assoc item</p>",
        "id": 260865878,
        "sender_full_name": "Noah Lev",
        "timestamp": 1636494104
    },
    {
        "content": "<p>How does inherent assoc item lookup work?</p>",
        "id": 260865905,
        "sender_full_name": "Noah Lev",
        "timestamp": 1636494119
    },
    {
        "content": "<p>it hard-codes all the <code>#[lang = \"f32_impl\"]</code> items</p>",
        "id": 260865986,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636494139
    },
    {
        "content": "<p>which uhhh doesn't work for traits lol</p>",
        "id": 260866022,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636494158
    },
    {
        "content": "<p>Hmm, I see</p>",
        "id": 260866043,
        "sender_full_name": "Noah Lev",
        "timestamp": 1636494168
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/266220-rustdoc/topic/help.20with.20.2390703/near/260865877\">said</a>:</p>\n<blockquote>\n<p>there's some query that takes a ty::Ty and gives you the trait impls I think</p>\n</blockquote>\n<p>^ <span class=\"user-mention\" data-user-id=\"273271\">@Ryan Geary</span> this is what I would suggest trying to figure out</p>",
        "id": 260866210,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636494247
    },
    {
        "content": "<p>Ok thanks, I'll look into it! Appreciate the help</p>",
        "id": 260866593,
        "sender_full_name": "Ryan Geary",
        "timestamp": 1636494446
    },
    {
        "content": "<p>and uhh sorry for marking this issue as easy <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> I don't think it will be <em>terribly</em> difficult but definitely not as simple as \"call this function\"</p>",
        "id": 260866705,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636494492
    },
    {
        "content": "<p>No worries at all! I'm willing to dig deeper, just figured I would see if you all had any pointers in the right direction for me as i spent a decent amount of time looking around just now</p>",
        "id": 260866850,
        "sender_full_name": "Ryan Geary",
        "timestamp": 1636494599
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/266220-rustdoc/topic/help.20with.20.2390703/near/260866210\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/266220-rustdoc/topic/help.20with.20.2390703/near/260865877\">said</a>:</p>\n<blockquote>\n<p>there's some query that takes a ty::Ty and gives you the trait impls I think</p>\n</blockquote>\n<p>^ <span class=\"user-mention silent\" data-user-id=\"273271\">Ryan Geary</span> this is what I would suggest trying to figure out</p>\n</blockquote>\n<p>I think you are referring to <code>traits_implemented_by</code>: <a href=\"https://github.com/rust-lang/rust/blob/495322d776fd6f679cd8cd4ca02b8fa834da654b/src/librustdoc/passes/collect_intra_doc_links.rs#L759\">https://github.com/rust-lang/rust/blob/495322d776fd6f679cd8cd4ca02b8fa834da654b/src/librustdoc/passes/collect_intra_doc_links.rs#L759</a>, which is actually used by <code>resolve_associated_trait_item</code>. In order to use either, I require the DefId of the module. Can I get a nudge in the right direction for getting the module DefId for a primitive?</p>",
        "id": 261071704,
        "sender_full_name": "Ryan Geary",
        "timestamp": 1636587161
    },
    {
        "content": "<p>this is actually the module where the <em>link</em> is being resolved, not the module where the primitive is defined (which is good, because primitives are lang items and not actually defined in a module)</p>",
        "id": 261075355,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636589630
    },
    {
        "content": "<p>it's available as a parameter to <code>resolve_associated_item</code>: <a href=\"https://github.com/rust-lang/rust/blob/495322d776fd6f679cd8cd4ca02b8fa834da654b/src/librustdoc/passes/collect_intra_doc_links.rs#L582\">https://github.com/rust-lang/rust/blob/495322d776fd6f679cd8cd4ca02b8fa834da654b/src/librustdoc/passes/collect_intra_doc_links.rs#L582</a></p>",
        "id": 261075423,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636589659
    },
    {
        "content": "<p>I was actually talking about <code>find_map_relevant_impl</code>, which traits_implemented_by uses, but most of the logic for <code>traits_implemented_by</code> and your primitive version will be the same</p>",
        "id": 261075508,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636589719
    },
    {
        "content": "<p>so I think the proper thing is to change <code>traits_implemented_by</code> to take a <code>ty::Ty</code> instead of a DefId and change the current call to pass in <code>tcx.type_of(def_id)</code>: <a href=\"https://github.com/rust-lang/rust/blob/495322d776fd6f679cd8cd4ca02b8fa834da654b/src/librustdoc/passes/collect_intra_doc_links.rs#L742\">https://github.com/rust-lang/rust/blob/495322d776fd6f679cd8cd4ca02b8fa834da654b/src/librustdoc/passes/collect_intra_doc_links.rs#L742</a></p>",
        "id": 261075583,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636589763
    },
    {
        "content": "<p>err actually that will mean you have to duplicate the logic in <code>resolve_associated_trait_item</code> too which is not great</p>",
        "id": 261075779,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636589927
    },
    {
        "content": "<p>so maybe change <code>resolve_associated_trait_item</code> to take a Ty instead - my idea is that <a href=\"https://github.com/rust-lang/rust/blob/495322d776fd6f679cd8cd4ca02b8fa834da654b/src/librustdoc/passes/collect_intra_doc_links.rs#L587\">https://github.com/rust-lang/rust/blob/495322d776fd6f679cd8cd4ca02b8fa834da654b/src/librustdoc/passes/collect_intra_doc_links.rs#L587</a> will look like <code>self.resolve_primitive_associated_item(prim, ns, item_name).or_else(|| self.resolve_associated_trait_item(prim))</code> (and maybe also rename <code>resolve_primitive_associated_item</code> to <code>resolve_primitive_inherent_assoc_item</code> to make it clear it doesn't include traits)</p>",
        "id": 261075948,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636590044
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"273271\">@Ryan Geary</span> I know I kind of blasted a wall of text - did it make sense? Can I explain it better or do you just need some time to sit down and work on it?</p>",
        "id": 261342099,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636782254
    },
    {
        "content": "<p>Yeah sorry I didn't respond lol. I think it makes sense, I just need to take some time to work through it. I'm kindof wrapping my head around the structure of everything. I was wondering if there's a right way to generate the rust docs for the compiler and/or librustdoc cause I tried a couple things but no success</p>",
        "id": 261358255,
        "sender_full_name": "Ryan Geary",
        "timestamp": 1636807050
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"273271\">@Ryan Geary</span>  <code>x.py doc --stage 1 src/librustdoc</code> should work</p>",
        "id": 261358323,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636807164
    },
    {
        "content": "<p>But also, the docs are on <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustdoc/index.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustdoc/index.html</a> if you don't need to see your local changes</p>",
        "id": 261358339,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636807192
    },
    {
        "content": "<p>Oh shoot I think my mistake was thinking I needed to do stage0 for some reason. But the hosted docs should be fine anyway, I don't know why I didn't think of that</p>",
        "id": 261358398,
        "sender_full_name": "Ryan Geary",
        "timestamp": 1636807255
    },
    {
        "content": "<p>Actually I think I was trying to generate them to include private items iirc</p>",
        "id": 261358414,
        "sender_full_name": "Ryan Geary",
        "timestamp": 1636807293
    },
    {
        "content": "<p>They already include private items :)</p>",
        "id": 261358470,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636807378
    },
    {
        "content": "<p>(basically all of rustdoc is private so they wouldn't be very useful otherwise)</p>",
        "id": 261358483,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636807392
    },
    {
        "content": "<p>That makes a lot of sense <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> I probably should have done a little more research on that front</p>",
        "id": 261358669,
        "sender_full_name": "Ryan Geary",
        "timestamp": 1636807646
    },
    {
        "content": "<p>Haha no worries :)</p>",
        "id": 261358675,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636807666
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/266220-rustdoc/topic/help.20with.20.2390703/near/261075948\">said</a>:</p>\n<blockquote>\n<p>so maybe change <code>resolve_associated_trait_item</code> to take a Ty instead - my idea is that <a href=\"https://github.com/rust-lang/rust/blob/495322d776fd6f679cd8cd4ca02b8fa834da654b/src/librustdoc/passes/collect_intra_doc_links.rs#L587\">https://github.com/rust-lang/rust/blob/495322d776fd6f679cd8cd4ca02b8fa834da654b/src/librustdoc/passes/collect_intra_doc_links.rs#L587</a> will look like <code>self.resolve_primitive_associated_item(prim, ns, item_name).or_else(|| self.resolve_associated_trait_item(prim))</code> (and maybe also rename <code>resolve_primitive_associated_item</code> to <code>resolve_primitive_inherent_assoc_item</code> to make it clear it doesn't include traits)</p>\n</blockquote>\n<p>I'm not sure I'm convinced about this. <code>traits_implemented_by</code> uses <code>tcx::type_of</code>to go from the DefId passed in to a ty::Ty, but calling that with <code>Res::Primitive(prim).def_id()</code> is causing it to panic and say \"Not a type\" in the panic. I'll keep digging, probably tomorrow evening.</p>",
        "id": 261453115,
        "sender_full_name": "Ryan Geary",
        "timestamp": 1636946273
    },
    {
        "content": "<p>Oh sorry - yeah you'll need to manually match on the primitive, you can't just call type_of (since that gives you the DefId of the module like I told Camelid above).</p>",
        "id": 261474850,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636968742
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"273271\">@Ryan Geary</span>, I know it's thanksgiving week but I just wanted to check on how things are going :) feel free to ask if things are confusing!</p>",
        "id": 262836175,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1637962405
    },
    {
        "content": "<p>I am a bit confused and probably have a question or two for you, but I'll have to get back to you early next week! Thanks for bearing with me</p>",
        "id": 262837105,
        "sender_full_name": "Ryan Geary",
        "timestamp": 1637963629
    },
    {
        "content": "<p>Sounds like a plan! No worries, take your time :)</p>",
        "id": 262837195,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1637963743
    },
    {
        "content": "<p>For the record: I've picked up this task and there is now a PR: <a href=\"https://github.com/rust-lang/rust/pull/92443#issuecomment-1003126559\">https://github.com/rust-lang/rust/pull/92443#issuecomment-1003126559</a><br>\nFurther discussions in the PR</p>",
        "id": 266445528,
        "sender_full_name": "Mahdi Dibaiee",
        "timestamp": 1640886858
    }
]