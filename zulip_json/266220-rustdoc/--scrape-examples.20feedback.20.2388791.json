[
    {
        "content": "<p>Hey! I don't want to comment on the tracking issue / ongoing draft PR since this is more future looking, curious to get initial takes before I potentially write up a longer comment -- </p>\n<p>I'm wondering if it may make sense to push the scraping of call sites into a JSON file into either rustc or rustdoc as an <code>--emit</code> flag -- it feels closer to something that could be done on the side, and though we'd not want to stabilize the output format, I could see it being useful for other tooling as well. I'm not sure, but it also feels like the use of JSON here is a little suspect -- I could easily imagine these files being <em>huge</em> and JSON is somewhat inherently limiting (e.g., it's unlikely we could just mmap such a file). AFAICT, there's no real reason we can't have this emitted as part of rustc's metadata (and then rustdoc would get <code>--example-crate</code> rather than <code>--extern crate=foo</code>, basically). Making the format less \"trivially parseable\" by random end users also seems like a stability win; the current JSON story seems like it would quickly become something people use for ctags and the like...</p>\n<p>If this sounds good I'd be happy to write up a more complete comment :)</p>",
        "id": 254137210,
        "sender_full_name": "simulacrum",
        "timestamp": 1632182453
    },
    {
        "content": "<p>Hmm, I'm worried that there's no metadata experts on the rustdoc team. We'd have to not just figure out how to get rustdoc to emit metadata, but need someone familiar within it to maintain the code when things go wrong.</p>\n<p>I'm also not sure how this can work with reverse dependencies - AFAICT the benefit would mostly be that we can reuse the existing format, but this is kind of \"inherently hacky\" in that we're trying to get information from reverse dependencies into documentation for the library.</p>",
        "id": 254142568,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1632187183
    },
    {
        "content": "<p>That said, using something like bincode instead of JSON seems like it would be both more performant and less likely for people to depend on the format changing</p>",
        "id": 254142641,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1632187229
    },
    {
        "content": "<p>(I don't have strong opinions on whether the flag should be called --scrape-examples or not; --emit=example-calls or something seems fine although I think it seems confusing to support that and not --emit=metadata)</p>",
        "id": 254142743,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1632187342
    },
    {
        "content": "<blockquote>\n<p>Hmm, I'm worried that there's no metadata experts on the rustdoc team. We'd have to not just figure out how to get rustdoc to emit metadata, but need someone familiar within it to maintain the code when things go wrong.</p>\n</blockquote>\n<p>I don't think \"metadata experts\" here are really necessary - the code would be entirely shared with the compiler proper. Regardless, even if we just get closer to that from the start (e.g., still emit JSON as just a blob inside the metadata), that would help us integrate this nicely I think</p>",
        "id": 254143020,
        "sender_full_name": "simulacrum",
        "timestamp": 1632187606
    },
    {
        "content": "<p>Hmm, ok. <span class=\"user-mention\" data-user-id=\"265377\">@Will Crichton</span> do you mind switching to that format instead? (Adding metadata support to rustdoc will probably be tricky - moving <a href=\"http://scrape_examples.rs\">scrape_examples.rs</a> to rustc instead is probably easier.)</p>",
        "id": 254143076,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1632187674
    },
    {
        "content": "<p>The reverse dependency integration is worthwhile to note, and I think it is a little concerning in the long run, but it seems like there's a continuous stream of problems where we sort of want that (e.g., intra-doc links in core pointing at std types, likewise in ecosystem crates)</p>",
        "id": 254143079,
        "sender_full_name": "simulacrum",
        "timestamp": 1632187676
    },
    {
        "content": "<p>To be clear, I don't think this should happen in the currently open PR</p>",
        "id": 254143129,
        "sender_full_name": "simulacrum",
        "timestamp": 1632187694
    },
    {
        "content": "<p>(That would block it for a longer time, seems unnecessary, etc.)</p>",
        "id": 254143141,
        "sender_full_name": "simulacrum",
        "timestamp": 1632187708
    },
    {
        "content": "<p>That's why I didn't post there :)</p>",
        "id": 254143143,
        "sender_full_name": "simulacrum",
        "timestamp": 1632187712
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/266220-rustdoc/topic/--scrape-examples.20feedback.20.2388791/near/254143079\">said</a>:</p>\n<blockquote>\n<p>The reverse dependency integration is worthwhile to note, and I think it is a little concerning in the long run, but it seems like there's a continuous stream of problems where we sort of want that (e.g., intra-doc links in core pointing at std types, likewise in ecosystem crates)</p>\n</blockquote>\n<p>FWIW this is part of why I think starting to move towards \"rustdoc as a metadata loader\" may be a better path than \"rustdoc which parses JSON files for this, reads crate metadata for that, and hopes that we don't mix up crates\" :)</p>",
        "id": 254143189,
        "sender_full_name": "simulacrum",
        "timestamp": 1632187770
    },
    {
        "content": "<p>Part of what made me think of this in the first place is I was going to suggest that --scrape-examples still builds docs like normal or asserts that no other flags are passed to avoid a future compat hazard (this is complicated because you need --extern still, at least... so maybe no rustdoc flags?)</p>",
        "id": 254143303,
        "sender_full_name": "simulacrum",
        "timestamp": 1632187875
    },
    {
        "content": "<p>I think it would be hard to distinguish rustdoc flags from rustc flags unless we go through them one by one (e.g. make the distinction required at compile time, like for stable()/unstable())</p>",
        "id": 254143412,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1632187979
    },
    {
        "content": "<p>I think moving it to rustc proper would be easier</p>",
        "id": 254143424,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1632187994
    },
    {
        "content": "<p>Unrelated, but you've just made me wonder if we can share for the search index between rustdoc and the client side so it doesn't have to be JSON ...</p>",
        "id": 254143523,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1632188076
    },
    {
        "content": "<p>We could have a tiny little crate compiled to wasm, something like rustdoc-json-types but for search. And then ItemType and all that will necessarily be the same between the client and server because they're both compiled from the same source</p>",
        "id": 254143710,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1632188271
    },
    {
        "content": "<p>wasm isn't generally supported in file:/// contexts from what I know, so probably a non starter, unfortunately :/</p>",
        "id": 254143766,
        "sender_full_name": "simulacrum",
        "timestamp": 1632188298
    },
    {
        "content": "<p>Yeah ... A lot of nice things are broken by file:/// URLs. I wonder if we could get cargo doc --open to run a mini static server instead of just opening a browser ...</p>",
        "id": 254143822,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1632188392
    },
    {
        "content": "<p>I'd rather not :)</p>",
        "id": 254143897,
        "sender_full_name": "simulacrum",
        "timestamp": 1632188439
    },
    {
        "content": "<p>Hmm, why not?</p>\n<p>Another example of things this would make nice: we could do <span class=\"user-mention\" data-user-id=\"210267\">@Nemo157</span>'s idea of serving the whole crate in one archive and decompressing one file at a time client side (<a href=\"https://github.com/Nemo157/oubliette\">https://github.com/Nemo157/oubliette</a>). And the whole --default-theme flag wouldn't have been necessary.</p>",
        "id": 254144003,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1632188545
    },
    {
        "content": "<p>Two things:<br>\n1) I did change the PR so it uses rustc's serialization system rather than serde. So the call sites are actually encoded with the binary format in <code>rustc_serialize::opaque</code>. Although I could add an option to change the output format based on a rustc flag.<br>\n2) If <code>--emit call-sites</code> were to get pushed into rustc, what would be its relationship to filters? Right now, my PR has a flag to indicate target crates to filter the set of call sites (avoiding potentially large metadata files). Would it be reasonable to add a comparable flag to rustc?</p>",
        "id": 254160161,
        "sender_full_name": "Will Crichton",
        "timestamp": 1632204818
    },
    {
        "content": "<p>I don't think the format needs to be configurable.</p>\n<p>I'd expect us to tackle the large files problem separately - potentially even not in rustc/rustdoc (but e.g. cargo). Offhand, my guess is that the files shouldn't get that big if we do some optimization work - no larger than the input text, roughly, in terms of added content, which is usually not too bad.</p>",
        "id": 254185898,
        "sender_full_name": "simulacrum",
        "timestamp": 1632220683
    },
    {
        "content": "<p>I think the main challenge is encoding source ranges. You can't trivially serialize <code>Span</code>, because the <code>SourceMap</code> of the reverse-dependency is not the same as the main crate. I get around this right now with an expensive <code>Span</code> proxy.</p>",
        "id": 254238811,
        "sender_full_name": "Will Crichton",
        "timestamp": 1632242571
    }
]