[
    {
        "content": "<p>I work on the rustls-ffi project, which provides C bindings to the Rust library <code>rustls</code>. I've been trying to figure out how best to do documentation. So far I'm just offering the header file as documentation, and cbindgen carries through my doccomments: <a href=\"https://github.com/rustls/rustls-ffi/blob/main/src/rustls.h\">https://github.com/rustls/rustls-ffi/blob/main/src/rustls.h</a>.</p>\n<p>But that's not very organized. It's one big file.</p>\n<p>Rustdoc probably isn't the best choice either, though it does remarkably well - with the one big exception that the function signatures are written Rust-style, rather than C-style. <a href=\"https://docs.rs/rustls-ffi/latest/rustls_ffi/connection/struct.rustls_connection.html\">https://docs.rs/rustls-ffi/latest/rustls_ffi/connection/struct.rustls_connection.html</a></p>\n<p>Anyhow, bit of a shot in the dark, but does anyone know of good tooling for maintaining docs for a C library, particularly one generated from Rust code with doccomments?</p>",
        "id": 264094741,
        "sender_full_name": "jsha",
        "timestamp": 1638922748
    },
    {
        "content": "<p>The best C docs I've seen are curl's, which are maintained in a Sphinx file separate from the code. I think rustdoc or Sphinx are probably the best you'll get, unless you want to try something experimental</p>",
        "id": 264095062,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1638922967
    },
    {
        "content": "<p>Someone in #black-magic on the community discord might have better suggestions</p>",
        "id": 264095430,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1638923274
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315412\">@jsha</span> I like using rustdoc, though you may also be interested in rust-diplomat/diplomat, which is still under active development but it does work and can produce sphinx docs</p>",
        "id": 264101977,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1638929103
    },
    {
        "content": "<p>n.b. it does not currently have a C backend that has an idiomatic API (the C support is very low level and optimized for other languages being able to shim over it), and it does not currently support free functions</p>",
        "id": 264102059,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1638929168
    },
    {
        "content": "<p>thanks! great tip, I'll check it out. Do you have any such crates you document using rustdoc that I could take a look at?</p>",
        "id": 264102585,
        "sender_full_name": "jsha",
        "timestamp": 1638929677
    },
    {
        "content": "<p>Oh, <span class=\"user-mention\" data-user-id=\"315412\">@jsha</span> you could also try mdbook, which is basically Sphinx with a rust flavor</p>",
        "id": 264103742,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1638930699
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315412\">@jsha</span> the ICU4X FFI module (ffi/diplomat) uses diplomat but is also just rustdoc documented  <a href=\"https://unicode-org.github.io/icu4x-docs/doc/icu_capi/\">https://unicode-org.github.io/icu4x-docs/doc/icu_capi/</a></p>",
        "id": 264106913,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1638933797
    },
    {
        "content": "<p>I believe the Stylo FFI was also rustdoc documented but we didn't publish that anywhere</p>",
        "id": 264106935,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1638933820
    }
]