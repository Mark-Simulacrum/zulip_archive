[
    {
        "content": "<p>Right now, some function comments in search.js that use an approximation of JSDoc style. Others use no formal doccomment style.</p>\n<p><span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span> and I have been discussing a bit on <a href=\"https://github.com/rust-lang/rust/pull/91977#discussion_r770857193\">https://github.com/rust-lang/rust/pull/91977#discussion_r770857193</a>.</p>\n<p>There are two directions we can take:</p>\n<ul>\n<li>fully embrace JSDoc and update our existing comments to follow it</li>\n<li>abandon JSDoc and use free-form function comments</li>\n</ul>\n<p>Some info about JSDoc here: <a href=\"https://jsdoc.app/about-getting-started.html\">https://jsdoc.app/about-getting-started.html</a>. An example JSDoc comment:</p>\n<div class=\"codehilite\"><pre><span></span><code>/**\n * Represents a book.\n * @constructor\n * @param {string} title - The title of the book.\n * @param {string} author - The author of the book.\n */\nfunction Book(title, author) {\n}\n</code></pre></div>\n<p>I think we should fully embrace JSDoc comments, even though we probably won't actually generate documentation from them. This will make our comments more consistent and encourage us to annotate type information for parameters and return types. Also, more importantly, we can use tooling to enforce some of the properties documented. At a minimum we can keep the parameter names in sync, and I have a vague recollection that we can do a small amount of static enforcement of types.</p>",
        "id": 265209466,
        "sender_full_name": "jsha",
        "timestamp": 1639683923
    },
    {
        "content": "<p>Some more details on checking types from JSDoc:</p>\n<p>I have successfully in the past used the Closure Compiler to check types, even when I don't actually use the output of the compiler: <a href=\"https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler\">https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler</a></p>\n<p>Also this post talks a little about type checking with JSDoc: <a href=\"https://www.xiaoru.li/post/light-type-checking-with-jsdoc/\">https://www.xiaoru.li/post/light-type-checking-with-jsdoc/</a></p>",
        "id": 265209874,
        "sender_full_name": "jsha",
        "timestamp": 1639684143
    },
    {
        "content": "<p>I don't know how much the infra people will like the idea to add even more JS tools haha</p>",
        "id": 265210035,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1639684226
    },
    {
        "content": "<p>Yeah, it may be a problem adding more tools to CI - but I think it's better to have something at least tool-friendly, even if we can't run the tool in CI.</p>",
        "id": 265210124,
        "sender_full_name": "jsha",
        "timestamp": 1639684277
    },
    {
        "content": "<p>I find the doc comments hard to read but I'm not the target here so I'll let others decide.</p>",
        "id": 265210673,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1639684520
    },
    {
        "content": "<p>making it consistent seems nice, yeah</p>",
        "id": 265211438,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639684856
    },
    {
        "content": "<p>I <em>really</em> like the idea of making it machine checkable :)</p>",
        "id": 265211475,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639684868
    },
    {
        "content": "<p>This is an interesting comment from <a href=\"https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler#param-type-varname-description\">closure compiler docs</a>:</p>\n<blockquote>\n<p>The Closure Compiler's type language derives from the annotations used by the JSDoc document-generation tool, although over the years it has diverged. This document describes the set of annotations and type expressions that the Closure Compiler understands.</p>\n</blockquote>\n<p>It's been years but I remember the Closure Compiler being surprisingly good at statically checking these things. So given the choice we should target the Closure Compiler dialect rather than the pure JSDoc dialect. Though I suspect they strongly overlap for the things we care about (mostly @params and @returns).</p>",
        "id": 265211925,
        "sender_full_name": "jsha",
        "timestamp": 1639685075
    },
    {
        "content": "<p>yeah I think we should stick with the subset they both support if at all possible</p>",
        "id": 265212041,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639685143
    },
    {
        "content": "<p>(I don't think we have anything complicated enough for it to be a problem)</p>",
        "id": 265212060,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639685153
    },
    {
        "content": "<p>I'm playing around with this a little locally and one nice thing is it's telling me to annotate which parameters to a function are optional. I'm often confused about which parameters in JS are optional, so that's helpful.</p>",
        "id": 265215246,
        "sender_full_name": "jsha",
        "timestamp": 1639686701
    },
    {
        "content": "<p>this sounds <em>amazing</em> tbh</p>",
        "id": 265215357,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639686751
    },
    {
        "content": "<p>like typescript but without the build system haha</p>",
        "id": 265215369,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639686759
    },
    {
        "content": "<p>I mean basically it is a build system but we would just be throwing away the built results :D</p>",
        "id": 265215564,
        "sender_full_name": "jsha",
        "timestamp": 1639686852
    },
    {
        "content": "<p>Sent a PR: <a href=\"https://github.com/rust-lang/rust/pull/92026\">https://github.com/rust-lang/rust/pull/92026</a></p>",
        "id": 265258439,
        "sender_full_name": "jsha",
        "timestamp": 1639722244
    }
]