[
    {
        "content": "<p>I'm currently slowly but steadily converting more types into the hir equivalents and I just hit a huge bottleneck: I need to provide <code>tcx</code> into <code>html/format.rs</code> functions, which is a disaster from a lifetime perspective. Should we maybe try to simplify it? The <code>display_fn</code> call doesn't need to be called everywhere I think for example, instead I'm thinking about providing another method alongisde <code>print</code> which will receive the <code>fmt::Formatter</code> parameter. What do you think?</p>\n<p>PS: the PR I'm working on is: <a href=\"https://github.com/rust-lang/rust/compare/master...GuillaumeGomez:rustdoc-const-ty?expand=1\">https://github.com/rust-lang/rust/compare/master...GuillaumeGomez:rustdoc-const-ty?expand=1</a></p>\n<p>The goal was to reduce the size of the <code>struct Const</code> and do some conversion on demand instead of ahead of time like now.</p>",
        "id": 227320325,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1614020941
    },
    {
        "content": "<p>Regarding the lifetimes, since <code>TyCtxt</code> is invariant in its lifetime param, you should be using a free distinct lifetime parameter for it, one so that <code>'tcx : 'a</code>, where <code>'a</code> is the lifetime for the other params (otherwise I imagine you will not be able to call the functions defined in <code>html/format.rs</code>).<br>\nThen, on the <code>impl</code> return type, you write <code>-&gt; impl Display + 'a + Captures&lt;'tcx&gt;</code> (<em>c.f.</em> <a href=\"https://doc.rust-lang.org/stable/nightly-rustc/rustc_data_structures/captures/trait.Captures.html\">https://doc.rust-lang.org/stable/nightly-rustc/rustc_data_structures/captures/trait.Captures.html</a>)<br>\n(The reason for needing that is that <code>-&gt; impl …</code> desugaring is currently a bit dumb, and only introduces parameters (for the existential type) for each parameter <em>used in that <code>impl …</code></em> (instead of defining an existential type parameter <em>for each parameter in scope</em>).</p>\n<p>That is, instead of doing:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">//               generic parameters that were in scope when you wrote `-&gt; impl …`</span>\n<span class=\"c1\">//               vv  vvvv</span>\n<span class=\"k\">type</span> <span class=\"nc\">ImplDisplay</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Display</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>so that the <code>'tcx</code>-invariantly-infected closure can match this definition,<br>\ncurrently, if you don't write that <code>Captures&lt;'tcx&gt;</code> hack, it does:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">ImplDisplay</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Display</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 227325205,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1614022868
    },
    {
        "content": "<p>It's worth a try, thanks for the suggestion!</p>",
        "id": 227328310,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1614024055
    }
]