[
    {
        "content": "<p>What's wrong with these <code>@has</code> checks? I'm getting <code>ValueError: No closing quotation</code> from htmldocck.</p>\n<div class=\"codehilite\"><pre><span></span><code>// @has &quot;foo/index.html&quot; &quot;//p&quot; &quot;This is the “start” of the ‘document’! How’d you know that “it’s” the start?&quot;\n// @has &quot;foo/index.html&quot; &quot;//h1&quot; &quot;Header with “smart punct’”&quot;\n// @has &quot;foo/index.html&quot; &#39;//a[@href=&quot;https://www.rust-lang.org&quot;]&#39; &quot;link with “smart punct’” – yessiree!&quot;\n// @has &quot;foo/index.html&quot; &#39;//code&#39; &#39;this inline code -- it shouldn\\&#39;t have &quot;smart punct&quot;&#39;\n// @has &quot;foo/index.html&quot; &#39;//pre&#39; &#39;let x = &quot;don\\&#39;t smart-punct me -- please!&quot;;&#39;\n// @has &quot;foo/index.html&quot; &#39;//pre&#39; &#39;I say &quot;don\\&#39;t smart-punct me -- please!&quot;&#39;\n</code></pre></div>",
        "id": 225611893,
        "sender_full_name": "Noah Lev",
        "timestamp": 1612820131
    },
    {
        "content": "<p>I'm pretty sure I escaped all of the <code>'</code> marks.</p>",
        "id": 225611934,
        "sender_full_name": "Noah Lev",
        "timestamp": 1612820154
    },
    {
        "content": "<p>It looks like it's hiccuping on this part:</p>\n<div class=\"codehilite\"><pre><span></span><code>&quot;foo/index.html&quot; &#39;//code&#39; &#39;this inline code -- it shouldn\\&#39;t have &quot;smart punct&quot;&#39;\n</code></pre></div>",
        "id": 225612408,
        "sender_full_name": "Noah Lev",
        "timestamp": 1612820351
    },
    {
        "content": "<p>I don't think it reads escaped quotations</p>",
        "id": 225617339,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612822602
    },
    {
        "content": "<p>You could add support for that if you like, seems useful</p>",
        "id": 225617359,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612822617
    },
    {
        "content": "<p>Or just use double quotes instead</p>",
        "id": 225617389,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612822636
    },
    {
        "content": "<p>It should handle escape ;)</p>",
        "id": 225620738,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1612824354
    },
    {
        "content": "<p>Interesting that we didn't have this issue until now</p>",
        "id": 225620805,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1612824371
    },
    {
        "content": "<p>It's because you're using single-quotes around the content</p>",
        "id": 225625548,
        "sender_full_name": "CraftSpider",
        "timestamp": 1612827293
    },
    {
        "content": "<p>Python shlex interpets <code>\"foo\\\"\"</code> as <code>foo\"</code>, but <code>'foo\\''</code> as <code>'foo', '</code> (an unclosed second string)</p>",
        "id": 225625613,
        "sender_full_name": "CraftSpider",
        "timestamp": 1612827347
    },
    {
        "content": "<p>(And <code>\"foo'\"</code> as <code>foo'</code>)</p>",
        "id": 225625667,
        "sender_full_name": "CraftSpider",
        "timestamp": 1612827371
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/266220-rustdoc/topic/.40has.20checks.20.22no.20closing.20quotation.22/near/225617389\">said</a>:</p>\n<blockquote>\n<p>Or just use double quotes instead</p>\n</blockquote>\n<p>I can't do that because I use double quotes too.</p>",
        "id": 225626375,
        "sender_full_name": "Noah Lev",
        "timestamp": 1612827970
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Camelid</span> <a href=\"#narrow/stream/266220-rustdoc/topic/.40has.20checks.20.22no.20closing.20quotation.22/near/225626375\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/266220-rustdoc/topic/.40has.20checks.20.22no.20closing.20quotation.22/near/225617389\">said</a>:</p>\n<blockquote>\n<p>Or just use double quotes instead</p>\n</blockquote>\n<p>I can't do that because I use double quotes too.</p>\n</blockquote>\n<p>You can escape inside double quotes, but not single quotes. So <code>\"... ' ... \\\"this things\\\"\"</code> should work</p>",
        "id": 225626511,
        "sender_full_name": "CraftSpider",
        "timestamp": 1612828089
    },
    {
        "content": "<p>Trying that now...</p>",
        "id": 225626524,
        "sender_full_name": "Noah Lev",
        "timestamp": 1612828100
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"319144\">CraftSpider</span> <a href=\"#narrow/stream/266220-rustdoc/topic/.40has.20checks.20.22no.20closing.20quotation.22/near/225625613\">said</a>:</p>\n<blockquote>\n<p>Python shlex interpets <code>\"foo\\\"\"</code> as <code>foo\"</code>, but <code>'foo\\''</code> as <code>'foo', '</code> (an unclosed second string)</p>\n</blockquote>\n<p>That's really bizarre behavior. I wonder why it does that...</p>",
        "id": 225626534,
        "sender_full_name": "Noah Lev",
        "timestamp": 1612828114
    },
    {
        "content": "<p>Indeed, that fixed it. Thanks so much <span class=\"user-mention\" data-user-id=\"319144\">@CraftSpider</span>!</p>",
        "id": 225626548,
        "sender_full_name": "Noah Lev",
        "timestamp": 1612828125
    },
    {
        "content": "<p>In bash, try <code>echo \"foo\\\"\" 'foo\\''</code>, to see why shlex does it like that :P</p>",
        "id": 225626740,
        "sender_full_name": "CraftSpider",
        "timestamp": 1612828288
    },
    {
        "content": "<p>I think you might have one extra <code>'</code> there?</p>",
        "id": 225626765,
        "sender_full_name": "Noah Lev",
        "timestamp": 1612828309
    },
    {
        "content": "<p>Yeah, fixed. One more ' ends the line. Basically, shlex is supposed to behave like a shell does, and thus 'expands' things in <code>\"</code>, but doesn't in <code>'</code>.</p>",
        "id": 225626872,
        "sender_full_name": "CraftSpider",
        "timestamp": 1612828380
    },
    {
        "content": "<p>Huh, I think I see. Still a bit confusing. Is that why it's called <strong>sh</strong>lex?</p>",
        "id": 225626902,
        "sender_full_name": "Noah Lev",
        "timestamp": 1612828409
    },
    {
        "content": "<p>Yeah. According to the python <code>shlex</code> documentation:</p>\n<blockquote>\n<p>The shlex class makes it easy to write lexical analyzers for simple syntaxes resembling that of the Unix shell. This will often be useful for writing minilanguages, (for example, in run control files for Python applications) or for parsing quoted strings.</p>\n</blockquote>",
        "id": 225627029,
        "sender_full_name": "CraftSpider",
        "timestamp": 1612828485
    },
    {
        "content": "<p>It can be configured to treat <code>'</code> and <code>\"</code> the same, which might be less confusing for people of the future</p>",
        "id": 225627191,
        "sender_full_name": "CraftSpider",
        "timestamp": 1612828589
    },
    {
        "content": "<p>How do you configure it that way? Do you want to open a PR for that?</p>",
        "id": 225631033,
        "sender_full_name": "Noah Lev",
        "timestamp": 1612831481
    },
    {
        "content": "<p>I would rather make it more clear that it uses shlex</p>",
        "id": 225633452,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612833198
    },
    {
        "content": "<p>Or use something other than shlex</p>",
        "id": 225633464,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612833205
    },
    {
        "content": "<p>\"sort of but not exactly the same as shlex\" sounds like the worst of both worlds</p>",
        "id": 225633481,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612833225
    },
    {
        "content": "<p>So, a couple options:<br>\n1) Document clearly that htmldocck (and jsondocck) use shlex, with all the conditions that entails<br>\n2) Configure shlex, by setting 'escapedquotes' to include <code>'</code><br>\n3) Use something else / roll our own simpler parser, with just like <code>''</code>, <code>\"\"</code>, and <code>\\</code></p>",
        "id": 225635892,
        "sender_full_name": "CraftSpider",
        "timestamp": 1612835293
    },
    {
        "content": "<p>I'm fine with (2) or (3), but I would rather not do (1). It didn't cross my mind at all that <code>@has</code> checks would be based on shell syntax, and it seems better to have behavior consistent with languages like Python and JS where <code>'</code> and <code>\"</code> are pretty much identical rather than with shell syntax.</p>",
        "id": 225751117,
        "sender_full_name": "Noah Lev",
        "timestamp": 1612901962
    },
    {
        "content": "<p>2) would be nice!</p>",
        "id": 225752054,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1612902373
    },
    {
        "content": "<p>I'm ok with 2) if other people like it</p>",
        "id": 225752404,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612902534
    }
]