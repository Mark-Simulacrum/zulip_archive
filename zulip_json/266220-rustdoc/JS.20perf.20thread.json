[
    {
        "content": "<p>This Twitter thread about an unintuitive aspect of JS performance is quite interesting: <a href=\"https://twitter.com/SeaRyanC/status/1496273922714902528\">https://twitter.com/SeaRyanC/status/1496273922714902528</a>. It probably has implications for the performance of search.js!</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/SeaRyanC/status/1496273922714902528\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/0a81d07c6b44299f4058b61a0e6d100c8a2b2b54/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f3837373631343239343639343733393936392f32593561787238465f6e6f726d616c2e6a7067\"></a><p>JavaScript performance is bananas, a thread.\n\nLet's write a function to sum the values from a the 'val' property of each element in an array:\n\nfunction sum(arr) {\n    let acc = 0;\n    for (let i = 0; i &lt; arr.length; i++) {\n        acc += arr[i].val;\n    }\n    return acc;\n}\n\n1/10</p><span>- Ryan Cavanaugh (@SeaRyanC)</span></div></div>",
        "id": 272906423,
        "sender_full_name": "jsha",
        "timestamp": 1645594006
    },
    {
        "content": "<p>The TL;DR is that if you have an array where some items have fields that other items don't have, the performance gets much worse.</p>",
        "id": 272906447,
        "sender_full_name": "jsha",
        "timestamp": 1645594062
    },
    {
        "content": "<p>I thought that is a fairly well-known property of JS engines that they basically try to infer implicit classes and then essentially turn <code>Vec&lt;HashMap&lt;String, &amp;dyn Obj&gt;&gt;</code> into <code>Vec&lt;T&gt;</code> at runtime.</p>",
        "id": 272936057,
        "sender_full_name": "The 8472",
        "timestamp": 1645615881
    },
    {
        "content": "<p>well-known if one reads blog posts about JS engines I guess <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 272937259,
        "sender_full_name": "The 8472",
        "timestamp": 1645616699
    },
    {
        "content": "<p>I didn't know at least. ^^'</p>",
        "id": 272939868,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1645618415
    },
    {
        "content": "<p>I knew about it. That's why I wrote code like this in it: <a href=\"https://github.com/rust-lang/rust/blob/c651ba8a542c7d89b271efbf024a31091c824f4b/src/librustdoc/html/static/js/search.js#L1322-L1324\">https://github.com/rust-lang/rust/blob/c651ba8a542c7d89b271efbf024a31091c824f4b/src/librustdoc/html/static/js/search.js#L1322-L1324</a></p>",
        "id": 272968355,
        "sender_full_name": "Michael notriddle Howell",
        "timestamp": 1645631929
    },
    {
        "content": "<p>yeah, I've come across that comment a few times, and didn't really grok it til I'd read this tweet thread. I did actually learn many years ago about how JS engines try to infer classes and optimize based on that - but I never turned that into concrete performance advice in my mind.</p>\n<p>I'm guessing that's also why search-index.js is organized as a bunch of arrays containing simple types (strings, ints), rather than a big array containing objects with fields? Or maybe that's more to save space on field names.</p>",
        "id": 273010341,
        "sender_full_name": "jsha",
        "timestamp": 1645649818
    },
    {
        "content": "<p>That's more of a disk space and network transmission optimization than a runtime perf optimization. <a href=\"https://github.com/rust-lang/rust/pull/83003\">https://github.com/rust-lang/rust/pull/83003</a> and <a href=\"https://github.com/rust-lang/rust/pull/13431\">https://github.com/rust-lang/rust/pull/13431</a> are the two PRs that really defined the current format compared to the naive object oriented original format.</p>",
        "id": 273013224,
        "sender_full_name": "Michael notriddle Howell",
        "timestamp": 1645651433
    },
    {
        "content": "<p>aha, super helpful! Thanks for the links.</p>",
        "id": 273014427,
        "sender_full_name": "jsha",
        "timestamp": 1645652085
    }
]