[
    {
        "content": "<p>Hello! Some of you may know may know that I worked last November on a tool whose goal was to extract the callgraph relations between all functions in a given crate: <a href=\"https://github.com/robinmoussu/cargo-callgraph\">cargo-callgraph</a>. Its input is a <code>tcx</code>, and its output is currently a graph in textual format (so you can pipe the output in graphviz, and get an image). Since it works in a very similar way to <code>rustdoc</code>, the easiest way for me to create a <code>main()</code> in which I have a <code>tcx</code> was to fork <code>rustc</code>, remove everything but <code>librustdoc</code>, then call the entry point to my own code from the <code>main()</code> of <code>librustdoc</code> (and change it to be a binary). Since I’m re-using internals part of rustc (just like <code>rustdoc</code>), I’m expecting to stay forever in nightly, and have to update some things once in a while. But, by forking <code>librustdoc</code> instead of just creating a <code>main()</code> from scratch means that I made my like more complicated than needed by increasing the coupling between the parts that move and my code (all of rustdoc + the part of rustc that I really use). In order to keep the maintenance easy to do, I will have to either:</p>\n<ul>\n<li>integrate my code in rustdoc</li>\n<li>completely dissociate myself from rustdoc and reduce compling as much as possible</li>\n</ul>\n<p>What should be the best path forward? <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> any input?</p>",
        "id": 226414816,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1613412184
    },
    {
        "content": "<p>I think this is a personal decision honestly - do you <em>want</em> your code to be part of rustdoc? I'm certainly interested in showing this somehow, maybe as another mode like <code>--show-coverage</code></p>",
        "id": 226415224,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613412405
    },
    {
        "content": "<p>Do I want it? That would be really sweet, at the same time I’m not sure the performances will be good enough for real creates (I don’t want to exceed 1mn even for very big project, but that can definitively be too much for rustdoc).</p>",
        "id": 226415487,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1613412598
    },
    {
        "content": "<p>I mean rustdoc already has terrible performance lol, I wouldn't dismiss it out just because of that</p>",
        "id": 226415568,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613412633
    },
    {
        "content": "<p>Said otherwise, if I dissociate myself completely from rustdoc, what should I keep in mind to be easy to be integrated later?</p>",
        "id": 226415570,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1613412634
    },
    {
        "content": "<p>I don't really understand the question I guess? It will be a ton of work no matter what if you change the fork too much</p>",
        "id": 226415618,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613412673
    },
    {
        "content": "<p>It would be simplest if you had a pass, the same way intra-doc links work, so you can just slot it in later. But I don't know how feasible that is, especially since rustdoc has lots of weird caching that doesn't go through queries</p>",
        "id": 226415743,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613412768
    },
    {
        "content": "<p>Currently my code is completely isolated in a new file (<code>extract_dependencies.rs</code>) with only two public function (and a few public types). As I said, it need a <code>tcx</code> as input, which mean that I modified a bit <code>core.rs</code> to call my code. Finally I removed some stuff from <code>core.rs</code> and <code>lib.rs</code> to make the analysis faster (rustdoc does some useless work for my usecase), as well as enabling a few more nightly features in <code>lib.rs</code>.</p>\n<p>I wasn’t expecting any difficulty to rebase my work, but since December rustdoc has a new internal dependency (<code>rustdoc-json-types</code>), and modified quite a bit both <code>lib.rs</code> and <code>core.rs</code>.</p>",
        "id": 226416384,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1613413241
    },
    {
        "content": "<p>I know that you gave me some stuff to read about what is a pass, but I totally forgot what this is. Is it something which is in <code>tcx.sess.time(\"build_call_graph\", || { my_code() })</code> or not at all?</p>",
        "id": 226416542,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1613413365
    },
    {
        "content": "<p>I mean a <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustdoc/passes/struct.Pass.html\"><code>Pass</code></a>: <a href=\"https://github.com/rust-lang/rust/blob/d1206f950ffb76c76e1b74a19ae33c2b7d949454/src/librustdoc/core.rs#L622\">https://github.com/rust-lang/rust/blob/d1206f950ffb76c76e1b74a19ae33c2b7d949454/src/librustdoc/core.rs#L622</a></p>",
        "id": 226417903,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613414352
    },
    {
        "content": "<blockquote>\n<p>I wasn’t expecting any difficulty to rebase my work, but since December rustdoc has a new internal dependency (rustdoc-json-types), and modified quite a bit both <a href=\"http://lib.rs\">lib.rs</a> and <a href=\"http://core.rs\">core.rs</a>.</p>\n</blockquote>\n<p>I wouldn't expect the new dependency to be a big deal, but yeah since then there's a <code>tcx</code> passed to the <code>render</code> backend which required a lot of restructuring</p>",
        "id": 226417996,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613414406
    },
    {
        "content": "<p>it might be easiest to just discard your changes to <a href=\"http://core.rs\">core.rs</a> and <a href=\"http://lib.rs\">lib.rs</a> and add <code>extract_dependencies</code> as a pass without trying to change the framework too much</p>",
        "id": 226418041,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613414459
    },
    {
        "content": "<p>That’s probably a better idea. I will try that.</p>",
        "id": 226418779,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1613415010
    },
    {
        "content": "<p>As far as I can tell, I should add a new pass, then activate it by adding it to <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustdoc/config/struct.Options.html#structfield.manual_passes\">rustdoc::Options::manual_passes</a>, but I can’t find how to set passes from the command lines.</p>",
        "id": 226422128,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1613417203
    },
    {
        "content": "<p>ah maybe it’s because the option exists for <code>rustdoc</code>, but not for <code>cargo doc</code></p>",
        "id": 226422477,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1613417460
    },
    {
        "content": "<p>You can pass flags to rustdoc with <code>cargo rustdoc -- --some-flag</code></p>",
        "id": 226423107,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613417891
    },
    {
        "content": "<p>I think we should propose it to the rest of the team. I personally think it's a bit too much out of context to be put in rustdoc. Also: it'd require maintenance and a whole test suite, which seems like a lot. Keeping it out of rustdoc seems better in my opinion. <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> seems to think otherwise though, which is why I think we should bring it up to the team.</p>",
        "id": 226453238,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1613429695
    },
    {
        "content": "<p>Yeah, I agree with Guillaume. This seems like a really great project, but aside from implementation it doesn't have much in common with rustdoc. Perhaps in the future it could be integrated into Cargo (of course, if the Cargo team were okay with it), much like what happened with <code>cargo-tree</code>.</p>",
        "id": 226470623,
        "sender_full_name": "Noah Lev",
        "timestamp": 1613449943
    },
    {
        "content": "<p>It could be integrated to rustc instead of cargo, it seems like a useful capability for anyone compiling rust, not just using cargo</p>",
        "id": 226504116,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1613476632
    },
    {
        "content": "<blockquote>\n<p>but aside from implementation it doesn't have much in common with rustdoc</p>\n</blockquote>\n<p>Currently it doesn’t, but in the future, it could have a soft-link. Given that it’s a graph of function, it makes a lot of sense to create a direct link to the function documentation.</p>",
        "id": 226552341,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1613498978
    },
    {
        "content": "<p>But it doesn't need to be in rustdoc code base to do so.</p>",
        "id": 226554036,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1613499605
    },
    {
        "content": "<p>That’s absolutely right. As long as it’s easy to craft the html link to the pages, I’m fine.</p>",
        "id": 226560162,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1613502404
    },
    {
        "content": "<p>There are multiple ways to do so, just depends which one you prefer. :)</p>",
        "id": 226562224,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1613503234
    }
]