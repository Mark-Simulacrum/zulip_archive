[
    {
        "content": "<p>For <a href=\"https://github.com/rust-lang/rust/issues/79497\">#79497</a>, I know where the error is, but I'm not sure the best path to fix it. The actual error seems to be because refutable pattern checking isn't done yet, so an argument can have an invalid type. How should rustdoc handle that though? Panic is wrong, but I'm not sure how to change a <code>Clean&lt;Argument&gt;</code> impl into something that can fail</p>",
        "id": 220498383,
        "sender_full_name": "CraftSpider",
        "timestamp": 1608430901
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"319144\">@Rune Tynan</span> I would make sure this is actually related to being refutable</p>",
        "id": 220500555,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608435251
    },
    {
        "content": "<p>I suspect it would give the same error on <code>0_u8..=255</code></p>",
        "id": 220500558,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608435273
    },
    {
        "content": "<p>Right, true. Which, if that's valid, then the solution is just to teach rustdoc to handle ranges, and refutability doesn't come into it.</p>",
        "id": 220500967,
        "sender_full_name": "CraftSpider",
        "timestamp": 1608436136
    },
    {
        "content": "<p>Honestly, I forgot/didn't know irrefutable ranges were valid function patterns, it's not something that tends to be used in 'normal' code. Gotta remember that function args really are basically just <code>Pattern: Type</code></p>",
        "id": 220501162,
        "sender_full_name": "CraftSpider",
        "timestamp": 1608436464
    },
    {
        "content": "<p>well, I'm not sure they <em>are</em> actually valid <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 220501250,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608436649
    },
    {
        "content": "<p>but at least this should be an error and not an ICE</p>",
        "id": 220501252,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608436656
    },
    {
        "content": "<p>I would double check by running rustc</p>",
        "id": 220501255,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608436661
    },
    {
        "content": "<p>I tried a <code>fn foo(0u8..=255: u8) {}</code>, and it did compile</p>",
        "id": 220501387,
        "sender_full_name": "CraftSpider",
        "timestamp": 1608436918
    },
    {
        "content": "<p>nice, and did rustdoc panic?</p>",
        "id": 220501508,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608437135
    },
    {
        "content": "<p>One minute and I'll tell you, though if it <em>doesn't</em> I'll be surprised :P</p>",
        "id": 220501610,
        "sender_full_name": "CraftSpider",
        "timestamp": 1608437319
    },
    {
        "content": "<p>Yep, it does panic</p>",
        "id": 220501624,
        "sender_full_name": "CraftSpider",
        "timestamp": 1608437397
    },
    {
        "content": "<p>From the same line, same message. A range can be irrefutable, but <code>name_from_pat</code> seems to have assumed it would never see it</p>",
        "id": 220501678,
        "sender_full_name": "CraftSpider",
        "timestamp": 1608437446
    },
    {
        "content": "<p>The most technically correct solution I can think of is to actually render out the range. On the other hand, that would require work to render Expr nodes (Unless there's already a util function somewhere, I'll look for one). On the other hand, it's unlikely this is a very desired use-case, so could probably do something like with <code>Lit</code>, where it warns and returns a dummy value (Could make it just like \"[range]\" or \"..=\" or \"()\" with little effort)</p>",
        "id": 220501693,
        "sender_full_name": "CraftSpider",
        "timestamp": 1608437516
    },
    {
        "content": "<p>I think currently it just shows __arg0 if it can't come up with a reasonable name</p>",
        "id": 220501790,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608437715
    },
    {
        "content": "<p>do you have a link to the code that's panicking?</p>",
        "id": 220501792,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608437726
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/librustdoc/clean/utils.rs#L416\">https://github.com/rust-lang/rust/blob/master/src/librustdoc/clean/utils.rs#L416</a></p>",
        "id": 220501833,
        "sender_full_name": "CraftSpider",
        "timestamp": 1608437766
    },
    {
        "content": "<p>Called from <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustdoc/clean/mod.rs#L956\">https://github.com/rust-lang/rust/blob/master/src/librustdoc/clean/mod.rs#L956</a>, cleaning Arguments, called by cleaning a function definition</p>",
        "id": 220501849,
        "sender_full_name": "CraftSpider",
        "timestamp": 1608437828
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/266220-rustdoc/topic/Issue.2079497/near/220501790\">said</a>:</p>\n<blockquote>\n<p>I think currently it just shows __arg0 if it can't come up with a reasonable name</p>\n</blockquote>\n<p>cc <a href=\"https://github.com/rust-lang/rust/issues/76517\">#76517</a></p>",
        "id": 220501850,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608437838
    },
    {
        "content": "<p>ok it looks like this is handled by pretty-printing the pattern</p>",
        "id": 220501903,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608437985
    },
    {
        "content": "<p>with custom code because of course it is <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 220501904,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608437994
    },
    {
        "content": "<p>so I think I would pretty-print the range and return that as the name</p>",
        "id": 220501944,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608438008
    },
    {
        "content": "<p>Alright. Is that a thing already in rustc I presume?</p>",
        "id": 220501948,
        "sender_full_name": "CraftSpider",
        "timestamp": 1608438036
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> I'm not the one to ask, sorry</p>",
        "id": 220501951,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608438052
    },
    {
        "content": "<p>maybe someone in <a class=\"stream\" data-stream-id=\"182449\" href=\"/#narrow/stream/182449-t-compiler.2Fhelp\">#t-compiler/help</a> will know</p>",
        "id": 220501952,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608438061
    },
    {
        "content": "<p>Looking myself, just found rustc_hir_pretty, which looks to be the desired thing</p>",
        "id": 220502063,
        "sender_full_name": "CraftSpider",
        "timestamp": 1608438245
    },
    {
        "content": "<p>when you finish fixing this bug, it would be nice to fix the rest of that function to use hir_pretty too</p>",
        "id": 220502074,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608438268
    },
    {
        "content": "<p>but no need to do both at once</p>",
        "id": 220502076,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608438274
    }
]