[
    {
        "content": "<p>I had to tear my project apart to find the cause of this bug. It turns out that a private macro in a completely separate module can cause intra doc links to break.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">mod</span> <span class=\"nn\">bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"w\"> </span><span class=\"p\">{()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">mod</span> <span class=\"nn\">foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">path</span>::<span class=\"p\">{</span><span class=\"n\">Path</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">PathBuf</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"n\">PathBuf</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ops</span>::<span class=\"n\">Deref</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">type</span> <span class=\"nc\">Target</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Path</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">deref</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">Path</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>If you run <code>cargo doc</code> on this, the documentation on <code>Foo::to_str()</code> coming from the deref impl, which contains</p>\n<blockquote>\n<p>Yields a <a href=\"http://str\"><code>&amp;str</code></a> slice if the <code>Path</code> is valid unicode.</p>\n</blockquote>\n<p>will link directly to str (not the macro <code>str!</code>, just a broken link to the same directory). If you remove the macro it correctly links to the str documentation in the standard library.</p>",
        "id": 224736870,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612191462
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 224741424,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1612193199
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> this is a bug, rustdoc should check for this in <a href=\"https://github.com/rust-lang/rust/blob/70b18bc2cbac4712020019f5bf57c00905373205/src/librustdoc/passes/collect_intra_doc_links.rs#L1095-L1101\">https://github.com/rust-lang/rust/blob/70b18bc2cbac4712020019f5bf57c00905373205/src/librustdoc/passes/collect_intra_doc_links.rs#L1095-L1101</a>. Can you open an issue?</p>",
        "id": 224756411,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612198627
    },
    {
        "content": "<p>actually it's twice a bug because the deref documentation should be resolved in the original scope of <code>Path</code></p>",
        "id": 224757779,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612199104
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/81633\">#81633</a></p>",
        "id": 224758069,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612199208
    },
    {
        "content": "<p>Is it a bad idea to have macros named <code>str</code>? I was half expecting that not to work because of the name shadowing but rust didn't complain so I figured it was fine, bugs notwithstanding</p>",
        "id": 224758367,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612199319
    },
    {
        "content": "<p>I mean it's probably <em>confusing</em> but I don't think it's <em>wrong</em></p>",
        "id": 224758854,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612199518
    },
    {
        "content": "<p>Since it gets written <code>str!</code> most of the time it isn't normally a disambiguation hazard, although intra-doc links might be an exception</p>",
        "id": 224759072,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612199589
    },
    {
        "content": "<p>intra-doc links should warn about ambiguity though</p>",
        "id": 224759340,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612199679
    },
    {
        "content": "<p>you found an edge case where they didn't, but they should</p>",
        "id": 224759363,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612199690
    },
    {
        "content": "<p>Yes, they should make you explicitly use either <code>prim@str</code> or <code>str!</code> in this case.</p>",
        "id": 224792788,
        "sender_full_name": "Noah Lev",
        "timestamp": 1612214441
    }
]