[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315412\">@jsha</span> opened <a href=\"https://github.com/rust-lang/rust/pull/91778\">https://github.com/rust-lang/rust/pull/91778</a>. I think it's a good idea personally but I wanted to check with the team first before moving forward. What do you think?</p>",
        "id": 264563671,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1639230405
    },
    {
        "content": "<p>Someone already mentioned on the issue that they use these links:<br>\n<a href=\"https://github.com/rust-lang/rust/issues/91173#issuecomment-991584294\">https://github.com/rust-lang/rust/issues/91173#issuecomment-991584294</a></p>\n<p>I don't see a strong reason to make these inconsistent with other primitive types.</p>",
        "id": 264565669,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639233305
    },
    {
        "content": "<p>That was my comment.  I use them from time to time, but I don't feel particularly strongly about it.  If it's a significant improvement to page size, then that probably outweighs the minor utility these links provide.</p>",
        "id": 264568448,
        "sender_full_name": "eggyal",
        "timestamp": 1639236924
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/266220-rustdoc/topic/Remove.20links.20on.20slice.20brackets.3F/near/264565669\">said</a>:</p>\n<blockquote>\n<p>Someone already mentioned on the issue that they use these links:<br>\n<a href=\"https://github.com/rust-lang/rust/issues/91173#issuecomment-991584294\">https://github.com/rust-lang/rust/issues/91173#issuecomment-991584294</a></p>\n</blockquote>\n<p>It's actually the main reason why I opened this thread. :)</p>\n<p>I like the idea of having less links, but I'm not sure if it's a good idea since it's something that has been around for a long time.</p>",
        "id": 264571033,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1639240201
    },
    {
        "content": "<blockquote>\n<p>These hyperlinks aren't very useful. For one thing, they present a very tiny click target, which is bad UX. For another thing, it's quite rare to be reading Rust documentation and needs to clarify that the [ and ] indicate a slice.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"315412\">@jsha</span> are you sure this is true for new developers? I can see it being useful when you're first learning the language.</p>\n<p>I think we could make them easier to click by including the generic <code>T</code> parameter as part of the link; that shouldn't be a reason to remove it altogether.</p>",
        "id": 264571502,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639240776
    },
    {
        "content": "<p>When it's a slice of a generic parameter T, we already do that in some places. See, for instance <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#impl-AsRef%3C%5BT%5D%3E\">https://doc.rust-lang.org/std/vec/struct.Vec.html#impl-AsRef%3C%5BT%5D%3E</a>.</p>\n<p>In the <code>impl</code> line we have the bad UX, with <code>&lt;a&gt;[&lt;/a&gt;T&lt;a&gt;]&lt;/a&gt;</code>. In <code>pub fn as_ref()</code> we have the good UX, with <code>&lt;a&gt;&amp;[T]&lt;/a&gt;</code>.</p>\n<p>However, for concrete types that's not practical. The inner type has a link to its own destination. For instance, see <a href=\"https://doc.rust-lang.org/std/io/trait.Read.html#tymethod.read\">https://doc.rust-lang.org/std/io/trait.Read.html#tymethod.read</a>. All of <code>&amp;mut [u8]</code> reads like one big link, but there's a surprise! If you click on one part of that link, you go to the slice page; if you click on another part of that link, you go to the u8 page. That strikes me as very bad UX. I'd much rather have <code>u8</code> stand out clearly as its own link, with black brackets to either side.</p>\n<p><span class=\"user-mention\" data-user-id=\"249694\">@eggyal</span> thanks for posting the comment! I'm curious to hear more about your use case. Is it more \"remind me what this syntax means,\" or something like \"given that I know this function returns a slice, I need to go check what methods are available on slices?\"</p>\n<p>For the latter I'm wondering if the search function can provide an acceptable substitute.</p>",
        "id": 264574330,
        "sender_full_name": "jsha",
        "timestamp": 1639244048
    },
    {
        "content": "<p>Definitely the latter in my case.</p>",
        "id": 264574420,
        "sender_full_name": "eggyal",
        "timestamp": 1639244178
    },
    {
        "content": "<blockquote>\n<p>For the latter I'm wondering if the search function can provide an acceptable substitute.</p>\n</blockquote>\n<p>What do you have in mind?</p>",
        "id": 264574513,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1639244296
    },
    {
        "content": "<p>If you recall - do you most commonly click on something like <code>&amp;mut [T]</code> where the whole link is an <code>&lt;a&gt;</code>, or do you also find yourself clicking on <code>&amp;mut [Foo]</code> where Foo is some concrete type?</p>",
        "id": 264574518,
        "sender_full_name": "jsha",
        "timestamp": 1639244304
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span> just the search functionality as it is today. It seems to me that one quick way to get to the slice page is to hit <code>s</code> and type \"slice\".</p>",
        "id": 264574536,
        "sender_full_name": "jsha",
        "timestamp": 1639244347
    },
    {
        "content": "<p>I don't specifically recall, but I can imagine wanting to lookup slice method signatures and/or invariants from anywhere that returns a slice.</p>",
        "id": 264574600,
        "sender_full_name": "eggyal",
        "timestamp": 1639244430
    },
    {
        "content": "<p>Can't (currently) search for std/core types from <a href=\"http://docs.rs\">docs.rs</a> of another crate.</p>",
        "id": 264574613,
        "sender_full_name": "eggyal",
        "timestamp": 1639244444
    },
    {
        "content": "<p>ah, that's a good point!</p>",
        "id": 264574618,
        "sender_full_name": "jsha",
        "timestamp": 1639244456
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315412\">jsha</span> <a href=\"#narrow/stream/266220-rustdoc/topic/Remove.20links.20on.20slice.20brackets.3F/near/264574536\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"210316\">GuillaumeGomez</span> just the search functionality as it is today. It seems to me that one quick way to get to the slice page is to hit <code>s</code> and type \"slice\".</p>\n</blockquote>\n<p>It only works in the std docs (with doc aliases)</p>",
        "id": 264574641,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1639244502
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/docs.rs/issues/494\">https://github.com/rust-lang/docs.rs/issues/494</a></p>",
        "id": 264574697,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639244550
    },
    {
        "content": "<p>Oh right, I opened an issue on rust repository to support it</p>",
        "id": 264574990,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1639244992
    },
    {
        "content": "<p>let me find it again...</p>",
        "id": 264574997,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1639244997
    },
    {
        "content": "<p>(we need it for gtk-rs)</p>",
        "id": 264575018,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1639245004
    },
    {
        "content": "<p>Ah it's already linked on the <a href=\"http://docs.rs\">docs.rs</a> issue: <a href=\"https://github.com/rust-lang/rust/issues/86715\">https://github.com/rust-lang/rust/issues/86715</a></p>",
        "id": 264575060,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1639245068
    },
    {
        "content": "<p>I don't understand <a href=\"https://github.com/rust-lang/rust/issues/86715\">https://github.com/rust-lang/rust/issues/86715</a> at all; isn't it the same as the <a href=\"http://docs.rs\">docs.rs</a> issue?</p>",
        "id": 264575126,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639245135
    },
    {
        "content": "<p>It's the proposed solution</p>",
        "id": 264575140,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1639245177
    },
    {
        "content": "<p>The idea is to tell rustdoc to also include another search-index to look into when you run a search.</p>",
        "id": 264575153,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1639245201
    },
    {
        "content": "<p>The use case is for gtk-rs to include crates from <code>gtk-rs-core</code> into <code>gtk3-rs</code> and <code>gtk4-rs</code> because they are not rendered together (we keep them split to avoid duplications).</p>",
        "id": 264575222,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1639245261
    },
    {
        "content": "<p>Another search index at compile time, so it can combine them itself without needing to push that knowledge into <a href=\"http://docs.rs\">docs.rs</a>? That seems reasonable, but I don't know how it would work if the crates were generated with different versions of rustdoc</p>",
        "id": 264575234,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639245275
    },
    {
        "content": "<p>No, not at compile-time. You only provide the URL to other search-index, that's it. They're not included</p>",
        "id": 264575254,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1639245309
    },
    {
        "content": "<p>They're loaded from the JS</p>",
        "id": 264575260,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1639245320
    },
    {
        "content": "<p>Like, the JS is making network requests? That seems kind of unfortunate ...</p>",
        "id": 264575268,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639245349
    },
    {
        "content": "<p>You'll have problems loading JS from a different origin though?</p>",
        "id": 264575271,
        "sender_full_name": "eggyal",
        "timestamp": 1639245353
    },
    {
        "content": "<p>You are both right</p>",
        "id": 264575314,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1639245375
    },
    {
        "content": "<p>The main idea was from \"same-website\" origin</p>",
        "id": 264575322,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1639245389
    },
    {
        "content": "<p>cross-website could work, but it would be up to each website's security</p>",
        "id": 264575348,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1639245410
    },
    {
        "content": "<p>That doesn't work for searching slices then, since the libstd docs aren't hosted on <a href=\"http://docs.rs\">docs.rs</a></p>",
        "id": 264575353,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639245431
    },
    {
        "content": "<p>I guess it could?</p>",
        "id": 264575371,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1639245456
    },
    {
        "content": "<p>but in any case, that was the suggestion :)</p>",
        "id": 264575389,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1639245468
    },
    {
        "content": "<p>If it's just a case of loading the search-index for core/std, <a href=\"http://docs.rs\">docs.rs</a> could be configured with a <code>Content-Security-Policy</code> that permits loading JS from <a href=\"https://doc.rust-lang.org\">https://doc.rust-lang.org</a>...?</p>",
        "id": 264575719,
        "sender_full_name": "eggyal",
        "timestamp": 1639245840
    },
    {
        "content": "<p>(Not a front-end dev so only vaguely think that's right?)</p>",
        "id": 264575829,
        "sender_full_name": "eggyal",
        "timestamp": 1639245950
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"249694\">@eggyal</span> close but it's backwards. <code>doc.rust-lang.org</code> has to say it's okay with <a href=\"http://docs.rs\">docs.rs</a> loading data from it.</p>",
        "id": 264575878,
        "sender_full_name": "jsha",
        "timestamp": 1639245981
    },
    {
        "content": "<p>Ah, ok.</p>",
        "id": 264575886,
        "sender_full_name": "eggyal",
        "timestamp": 1639245997
    },
    {
        "content": "<p>And it does that with the <code>Cross-Origin-Resource-Sharing</code> (CORS) header. Though there are some other ways too.</p>",
        "id": 264575900,
        "sender_full_name": "jsha",
        "timestamp": 1639246021
    },
    {
        "content": "<p>I'll just keep quiet :)</p>",
        "id": 264575912,
        "sender_full_name": "eggyal",
        "timestamp": 1639246040
    },
    {
        "content": "<p>no, you had exactly the right idea; just the terms were wrong. I'm just trying to be helpful with the corrections. :-)</p>",
        "id": 264575944,
        "sender_full_name": "jsha",
        "timestamp": 1639246077
    },
    {
        "content": "<p>Thank you, you are.  But this isn't my area of expertise, so I'm not adding anything useful!</p>",
        "id": 264576010,
        "sender_full_name": "eggyal",
        "timestamp": 1639246139
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"249694\">@eggyal</span> another question related to the original topic: the parentheses in tuples are also hyperlinked. See for instance the return type of <a href=\"https://doc.rust-lang.org/nightly/std/collections/struct.VecDeque.html#method.as_mut_slices\">https://doc.rust-lang.org/nightly/std/collections/struct.VecDeque.html#method.as_mut_slices</a>. Do you find yourself using those links as well?</p>",
        "id": 264576430,
        "sender_full_name": "jsha",
        "timestamp": 1639246678
    },
    {
        "content": "<p>Not really... there aren't any implicit methods on tuples, and most the implemented traits are pretty intuitive.  But hey, I can't speak for everyone?</p>",
        "id": 264576591,
        "sender_full_name": "eggyal",
        "timestamp": 1639246881
    },
    {
        "content": "<p>of course! but it's so useful when working on UX stuff to get feedback from users who care about it - even anecdotal personal evidence is quite helpful.</p>",
        "id": 264576616,
        "sender_full_name": "jsha",
        "timestamp": 1639246916
    },
    {
        "content": "<p>Slices just have a lot of methods, some are extremely commonly used and very familiar but occasionally I'm looking for something more obscure and have to refer to the docs.</p>",
        "id": 264576699,
        "sender_full_name": "eggyal",
        "timestamp": 1639246984
    },
    {
        "content": "<p>Plus there's quite a few unstable methods there in nightly, and it moves a bit.</p>",
        "id": 264576717,
        "sender_full_name": "eggyal",
        "timestamp": 1639247007
    },
    {
        "content": "<blockquote>\n<p>All of <code>&amp;mut [u8]</code> reads like one big link, but there's a surprise! If you click on one part of that link, you go to the slice page; if you click on another part of that link, you go to the u8 page. That strikes me as very bad UX. I'd much rather have u8 stand out clearly as its own link, with black brackets to either side.</p>\n</blockquote>\n<p>FWIW, this is part of the advantage of primitive links having a different color ;)</p>",
        "id": 264582318,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639253902
    },
    {
        "content": "<p>The principles I care about here:</p>\n<ol>\n<li>Links should be marked out from nearby text as links.</li>\n<li>Nearby links should be distinguished from each other, so they don't form an illusion of a single link.</li>\n<li>Click targets should be big enough to reliably hit.</li>\n</ol>\n<p>And from the discussion above we now have:</p>\n<ol start=\"4\">\n<li>From a method returning a slice, it should be easy to get to the slice documentation.</li>\n</ol>",
        "id": 264637086,
        "sender_full_name": "jsha",
        "timestamp": 1639334332
    },
    {
        "content": "<p>As <span class=\"user-mention\" data-user-id=\"307537\">@Noah Lev</span> says, we currently rely on color to distinguish the slice brackets from the links they are adjacent to. They're currently teal; in <a href=\"https://github.com/rust-lang/rust/pull/91480\">https://github.com/rust-lang/rust/pull/91480</a> I am making primitive types (like other concrete types) maroon, which brings problem (2) to the forefront.</p>\n<p>I still strongly believe <a href=\"https://github.com/rust-lang/rust/pull/91480\">https://github.com/rust-lang/rust/pull/91480</a> is the right move. The _primary_ use for method signatures is reading them, and reducing the number of color distinctions greatly improves the reading process.</p>",
        "id": 264637311,
        "sender_full_name": "jsha",
        "timestamp": 1639334582
    }
]