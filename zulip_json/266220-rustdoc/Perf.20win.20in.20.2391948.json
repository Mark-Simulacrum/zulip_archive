[
    {
        "content": "<p>What should be a nice perf win is coming in <a href=\"https://github.com/rust-lang/rust/pull/91948\">https://github.com/rust-lang/rust/pull/91948</a></p>",
        "id": 264952470,
        "sender_full_name": "nnethercote",
        "timestamp": 1639530524
    },
    {
        "content": "<p>In local measurements I see the following rustdoc improvements on rustc-perf:</p>\n<ul>\n<li>instructions: up to 5% better</li>\n<li>cycles: up to 8% better</li>\n<li>wall-time: up to 10% better</li>\n</ul>",
        "id": 264952499,
        "sender_full_name": "nnethercote",
        "timestamp": 1639530552
    },
    {
        "content": "<p>This is awesome! Thank you <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span>Ô∏è</p>",
        "id": 264955324,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639533131
    },
    {
        "content": "<p>I've learned that so much of what rustdoc does is just \"building up strings\", which makes sense</p>",
        "id": 264955938,
        "sender_full_name": "nnethercote",
        "timestamp": 1639533663
    },
    {
        "content": "<p>Those strings are built up, piecemeal, in lots of different functions. There would be scope for improving performance by starting with a single string and passing it as a <code>&amp;mut String</code> everywhere and all those functions would just append to it. It would avoid tons of allocations and <code>memcpy</code>s, which are the hottest things in the profiles. But it might be difficult to restructure things such that the ordering is correct.</p>",
        "id": 264956123,
        "sender_full_name": "nnethercote",
        "timestamp": 1639533831
    },
    {
        "content": "<p>Really rustdoc just shouldn't be building up Strings at all.</p>",
        "id": 264956213,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639533910
    },
    {
        "content": "<p>How did we both think of this change within a day of each other? <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 264956255,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639533963
    },
    {
        "content": "<p>What's the alternative?</p>",
        "id": 264956291,
        "sender_full_name": "nnethercote",
        "timestamp": 1639533965
    },
    {
        "content": "<p>Well, what Strings are you referring to?</p>",
        "id": 264956297,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639533975
    },
    {
        "content": "<p>The generated HTML</p>",
        "id": 264956313,
        "sender_full_name": "nnethercote",
        "timestamp": 1639533993
    },
    {
        "content": "<p>In the case of rendering, rustdoc writes to an <code>&amp;mut Buffer</code>, no?</p>",
        "id": 264956323,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639534017
    },
    {
        "content": "<p>I'm not sure what you're referring to wrt using <code>&amp;mut String</code></p>",
        "id": 264956362,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639534072
    },
    {
        "content": "<p>I'm not referring to any particular code. But it looks like <code>Buffer</code> is basically a wrapper around a <code>String</code>?</p>",
        "id": 264956642,
        "sender_full_name": "nnethercote",
        "timestamp": 1639534342
    },
    {
        "content": "<p>The places I were modifying were in the innards, I didn't really see the outer layers of rustdoc</p>",
        "id": 264956663,
        "sender_full_name": "nnethercote",
        "timestamp": 1639534371
    },
    {
        "content": "<p>FYI we're currently trying to switch a bunch of stuff to templates which should help quite a lot with all the formatting</p>",
        "id": 264957181,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639534869
    },
    {
        "content": "<p>See the \"reconsidering tera\" topic</p>",
        "id": 264957190,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639534886
    },
    {
        "content": "<p>very exciting! thanks for working on this.</p>",
        "id": 264957614,
        "sender_full_name": "jsha",
        "timestamp": 1639535250
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120989\">nnethercote</span> <a href=\"#narrow/stream/266220-rustdoc/topic/Perf.20win.20in.20.2391948/near/264956642\">said</a>:</p>\n<blockquote>\n<p>I'm not referring to any particular code. But it looks like <code>Buffer</code> is basically a wrapper around a <code>String</code>?</p>\n</blockquote>\n<p>Yes, but rustdoc passes <code>&amp;mut Buffer</code> usually, so I'm confused about this:</p>\n<blockquote>\n<p>There would be scope for improving performance by starting with a single string and passing it as a <code>&amp;mut String</code> everywhere and all those functions would just append to it. It would avoid tons of allocations and <code>memcpy</code>s, which are the hottest things in the profiles.</p>\n</blockquote>\n<p>since IIUC rustdoc already does this.</p>",
        "id": 264958472,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639536131
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307537\">@Noah Lev</span> I think Nick means a single buffer <em>everywhere</em>, no format calls, only write!</p>",
        "id": 264958673,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639536398
    },
    {
        "content": "<p>That would reduce the amount of copies quite a lot</p>",
        "id": 264958676,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639536412
    },
    {
        "content": "<p>Yes</p>",
        "id": 264959844,
        "sender_full_name": "nnethercote",
        "timestamp": 1639537797
    },
    {
        "content": "<p>All the code I was modifying was still building shortish strings that presumably end up being put into the <code>&amp;mut Buffer</code></p>",
        "id": 264959897,
        "sender_full_name": "nnethercote",
        "timestamp": 1639537820
    },
    {
        "content": "<p>Given that join_with_slash and join_with_double_colon seem to get called a lot, and are probably called with the same inputs much of the time - does it make sense to build a cache of the strings they build? So each time we call e.g. <code>join_with_slash(Some(\"..\"), &amp;[\"..\"])</code> we can return \"../../\" from a cache rather than doing an allocation?</p>",
        "id": 264960254,
        "sender_full_name": "jsha",
        "timestamp": 1639538257
    },
    {
        "content": "<p>Not sure. Feels like the lookup to detect repeats would be reasonably expensive?</p>",
        "id": 264960351,
        "sender_full_name": "nnethercote",
        "timestamp": 1639538368
    },
    {
        "content": "<p>yeah, probably true.</p>",
        "id": 264960375,
        "sender_full_name": "jsha",
        "timestamp": 1639538398
    },
    {
        "content": "<p>And it feels like unnecessary complexity too.</p>",
        "id": 264960660,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639538653
    },
    {
        "content": "<p>true. maybe it makes sense at a higher level? E.g. <code>href_with_root_path</code> is going to be called at least once for any DefId that appears on a page, right? And probably much more than that, since types usually appear multiple places on a page. So we could wrap DefId with a rustdoc-internal type that calculates its <code>href_with_root_path</code> on construction, and offers <code>href()</code> as an accessor.</p>",
        "id": 264960807,
        "sender_full_name": "jsha",
        "timestamp": 1639538807
    },
    {
        "content": "<p>I'm pretty sure <code>href_with_root_path</code> depends on the current position in the page hierarchy, so it probably wouldn't be that simple or as much of a gain.</p>",
        "id": 264960910,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639538913
    },
    {
        "content": "<p>It does that so it can emit relative URLs IIRC.</p>",
        "id": 264960914,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639538921
    },
    {
        "content": "<p>Also, constructing things ahead of time is a giant source of bugs and I'd really rather not</p>",
        "id": 264960943,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639538954
    }
]