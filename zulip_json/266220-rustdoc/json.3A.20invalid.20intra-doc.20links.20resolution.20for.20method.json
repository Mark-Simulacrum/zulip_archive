[
    {
        "content": "<p>I was exploring the json output of rustdoc with the <code>anyhow</code> crate when I realized that the intra-doc link <code>[Error::chain]</code> in the <a href=\"https://docs.rs/anyhow/1.0.42/anyhow/struct.Chain.html\">Chain</a> trait, was pointing to the <code>Error</code> struct and not to the <code>chain</code> method of the <code>Error</code> struct. Is this expected ? If yes, how can I get the method and not the struct ?<br>\n<code>Chain</code> item in the json:</p>\n<div class=\"codehilite\"><pre><span></span><code>&quot;0:598&quot;: {\n    &quot;id&quot;: &quot;0:598&quot;,\n    &quot;crate_id&quot;: 0,\n    &quot;name&quot;: &quot;Chain&quot;,\n    [...]\n    &quot;docs&quot;: &quot;Iterator of a chain of source errors.\\n\\nThis type is the iterator returned by [`Error::chain`].\\n\\n# Example\\n\\n```\\nuse anyhow::Error;\\nuse std::io;\\n\\npub fn underlying_io_error_kind(error: &amp;Error) -&gt; Option&lt;io::ErrorKind&gt; {\\n    for cause in error.chain() {\\n        if let Some(io_error) = cause.downcast_ref::&lt;io::Error&gt;() {\\n            return Some(io_error.kind());\\n        }\\n    }\\n    None\\n}\\n```&quot;,\n    &quot;links&quot;: {\n        &quot;`Error::chain`&quot;: &quot;0:542&quot;\n    },\n    [...]\n},\n</code></pre></div>\n<p>Path of Id <code>0:542</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>&quot;0:542&quot;: {\n    &quot;crate_id&quot;: 0,\n    &quot;path&quot;: [\n        &quot;anyhow&quot;,\n        &quot;Error&quot;\n    ],\n    &quot;kind&quot;: &quot;struct&quot;\n},\n</code></pre></div>\n<p>cc <span class=\"user-mention\" data-user-id=\"310818\">@Joseph Ryan</span></p>",
        "id": 248742025,
        "sender_full_name": "Urgau",
        "timestamp": 1628380675
    },
    {
        "content": "<p>At first glance that definitely seems like a bug, but the Json backend doesn't do any processing on intra doc links so it might be a problem somewhere else. If you look at the html output does that link actually take you to the method?</p>",
        "id": 248742255,
        "sender_full_name": "Joseph Ryan",
        "timestamp": 1628380990
    },
    {
        "content": "<p>Yes it take to the method. <code>href</code> is <code>struct.Error.html#method.chain</code></p>",
        "id": 248742322,
        "sender_full_name": "Urgau",
        "timestamp": 1628381080
    },
    {
        "content": "<p>I have also look at the json conversion code and as you stated the json conversion do nothing special for intra-links, just a simple <code>filter_map</code>.</p>",
        "id": 248742467,
        "sender_full_name": "Urgau",
        "timestamp": 1628381296
    },
    {
        "content": "<p>If anyone is interested the code for the conversion is <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustdoc/json/conversions.rs#L27-L36\">here</a>.</p>",
        "id": 248742558,
        "sender_full_name": "Urgau",
        "timestamp": 1628381422
    },
    {
        "content": "<p>Next thing to check would be the html backend code to see if they do anything different to find the actual item. It does seem weird that the id that we get doesn't just point directly at the method (sorry I don't have time to take a look at it at the moment)</p>",
        "id": 248742572,
        "sender_full_name": "Joseph Ryan",
        "timestamp": 1628381443
    },
    {
        "content": "<p>It seems that an intra-doc link is represented in rustdoc by the <a href=\"https://github.com/rust-lang/rust/blob/399ab4601b2d4087787659af72f6c3b373ef7baf/src/librustdoc/clean/types.rs#L961-L976\">ItemLink</a> struct, whitch contain an <code>fragment</code> field describe as <code>The url fragment to append to the link</code>. That must means that <code>did</code> field in <code>ItemLink</code> is not always the DefId of the target.<br>\nAnd because the json conversion only use the <code>did</code> field, this explain why I'm not getting the right \"target\".</p>",
        "id": 248743172,
        "sender_full_name": "Urgau",
        "timestamp": 1628382321
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span> Sorry to bother you. Do you know how this can be solved in rustdoc ? I'm kinda stuck on my side because of these invalid resolutions.</p>",
        "id": 248852350,
        "sender_full_name": "Urgau",
        "timestamp": 1628518524
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"327095\">@Urgau</span> this is because rustdoc uses the DefId of the page it links to, not the method itself. See <a href=\"https://github.com/rust-lang/rust/blob/eaf6f463599df1f18da94a6965e216ea15795417/src/librustdoc/passes/collect_intra_doc_links.rs#L520\">https://github.com/rust-lang/rust/blob/eaf6f463599df1f18da94a6965e216ea15795417/src/librustdoc/passes/collect_intra_doc_links.rs#L520</a>; I think it would be medium-hard to fix.</p>",
        "id": 248852858,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1628518693
    },
    {
        "content": "<p>I'd say that you shouldn't run the intra-doc pass in case you render JSON</p>",
        "id": 248852870,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1628518702
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span> that seems definitely wrong, it means you don't know what links resolve and what don't</p>",
        "id": 248852923,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1628518726
    },
    {
        "content": "<p>In particular <code>[std::process]</code> and <code>[std::x]</code> are both valid markdown, but one of them is rendered with brackets and the other isn't</p>",
        "id": 248853009,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1628518761
    },
    {
        "content": "<p>Yah, that would sucks, if I don't have the intra-doc links resolved.</p>",
        "id": 248853045,
        "sender_full_name": "Urgau",
        "timestamp": 1628518776
    },
    {
        "content": "<p>I'm not sure of the \"scope\" of the JSON output: do we want to keep the docs as is or do we want to run some treatment on it? From your comment I assume the latter</p>",
        "id": 248853052,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1628518782
    },
    {
        "content": "<p>I don't understand your comment. The JSON backend should see the same docs as the html backend.</p>",
        "id": 248853175,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1628518812
    },
    {
        "content": "<p>I simply assumed that it \"saw\" the original markdown</p>",
        "id": 248853212,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1628518830
    },
    {
        "content": "<p>Well, so does the HTML backend. But it has knowledge of which links resolve through the DocContext. So the JSON backend should too.</p>",
        "id": 248853319,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1628518865
    },
    {
        "content": "<p>The json output has the \"original\" markdown code + a list of the intra-doc links resolved.</p>",
        "id": 248853349,
        "sender_full_name": "Urgau",
        "timestamp": 1628518878
    },
    {
        "content": "<p>Oh I see, so it's the same as the HTML then (minus the special cases of the HTML). Then just like <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> said :)</p>",
        "id": 248853502,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1628518931
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"327095\">@Urgau</span> I won't have time to work on this, but I think it would be doable as a first issue if you want to take a look at the link I posted above :)</p>",
        "id": 248853520,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1628518935
    },
    {
        "content": "<p>I also don't have time to do the work right now, but I'd be good to review / help with any issues. Feel free to ping me if you get stuck.</p>",
        "id": 248854064,
        "sender_full_name": "CraftSpider",
        "timestamp": 1628519184
    },
    {
        "content": "<p>Okay, I will try to fix that. Cloning the rust repo, right now.</p>",
        "id": 248854566,
        "sender_full_name": "Urgau",
        "timestamp": 1628519403
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> <span class=\"user-mention\" data-user-id=\"319144\">@CraftSpider</span> What modifications do you want me to do ? Return a third argument with the real DefId ?</p>",
        "id": 248856217,
        "sender_full_name": "Urgau",
        "timestamp": 1628520127
    },
    {
        "content": "<p>And add it to the <code>ItemLink</code> struct ?</p>",
        "id": 248856288,
        "sender_full_name": "Urgau",
        "timestamp": 1628520167
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"327095\">@Urgau</span> remove the hack, so that it always uses the method DefId and never the id of the containing item</p>",
        "id": 248859756,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1628521549
    },
    {
        "content": "<p>there should only be one DefId</p>",
        "id": 248859768,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1628521554
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> I've looked more at the code and I don't think I well be able to do it, I don't know enough of the internal, plus their is another hack that need's to be remove as well who use the fragment field for primitive handling. It's seems that this is too hacky for a first-contribution. Sorry, maybe with some mentoring instructions I could retry but not sure.</p>",
        "id": 248884016,
        "sender_full_name": "Urgau",
        "timestamp": 1628531854
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"327095\">@Urgau</span> the fragment issue should be fixed by <a href=\"https://github.com/rust-lang/rust/pull/87073\">https://github.com/rust-lang/rust/pull/87073</a></p>",
        "id": 248896886,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1628537874
    },
    {
        "content": "<p>but yeah that's fair, I'll try to dedicate some time to fixing CI for 87073 next weekend and it should be much easier after that</p>",
        "id": 248896953,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1628537896
    },
    {
        "content": "<p>oh look at that I actually got around to it, what are the odds</p>",
        "id": 249546693,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1629087610
    }
]