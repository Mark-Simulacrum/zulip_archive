[
    {
        "content": "<p>After fixing the one rustdoc JSON ICE, I found that some other similar ICEs still occur, as many places end up using the ty architecture instead of HIR. It might be nice to use HIR more when possible, and there seem to be a couple ways to go about it. I could add checks for locality to the top of ty based methods, alternatively, it might be nice to refactor a bit, and mostly pass around DefId with the necessary information not needing to be passed into the function, but calculated on demand. There are surely other options too. Thoughts?</p>",
        "id": 269355152,
        "sender_full_name": "CraftSpider",
        "timestamp": 1643164276
    },
    {
        "content": "<p>What I think would look really nice is clean using a more query-like system on the context, so I can request 'a cleaned function' and it always goes through one code path, and gets cached for the future.</p>",
        "id": 269439647,
        "sender_full_name": "CraftSpider",
        "timestamp": 1643214545
    },
    {
        "content": "<p>We should <em>not</em> be using HIR more; we should be using <em>ty</em> more.</p>",
        "id": 269483617,
        "sender_full_name": "Noah Lev",
        "timestamp": 1643231829
    },
    {
        "content": "<p>HIR is missing a lot of semantic information, and it's only available for the local crate, which creates inconsistencies when there are cross-crate re-exports.</p>",
        "id": 269483679,
        "sender_full_name": "Noah Lev",
        "timestamp": 1643231862
    },
    {
        "content": "<p>My ultimate goal is to stop using HIR altogether, and only use <code>ty</code>.</p>",
        "id": 269483706,
        "sender_full_name": "Noah Lev",
        "timestamp": 1643231877
    },
    {
        "content": "<p>Why would it be better to use HIR for your use case?</p>",
        "id": 269483768,
        "sender_full_name": "Noah Lev",
        "timestamp": 1643231890
    },
    {
        "content": "<p>Ty and HIR are inconsistent locally due to ty not having a distinction between return default and return empty tuple, and trait implementation visibility is slightly different. Also currently ty doesn't match up with HIR for self parameters, though I think that's due to a weird special case in the clean function for method defs where it always uses an empty array of param names if the cleaned method is local?</p>",
        "id": 269484907,
        "sender_full_name": "CraftSpider",
        "timestamp": 1643232376
    },
    {
        "content": "<p>The Self issue is probably a rustdoc issue rather than a rustc one</p>",
        "id": 269485104,
        "sender_full_name": "Noah Lev",
        "timestamp": 1643232467
    },
    {
        "content": "<p>Yeah, that's why I separated it from the other two</p>",
        "id": 269485121,
        "sender_full_name": "CraftSpider",
        "timestamp": 1643232478
    },
    {
        "content": "<p>Regarding the return default vs return <code>()</code>, why not just normalize it in rustdoc to return default?</p>",
        "id": 269485177,
        "sender_full_name": "Noah Lev",
        "timestamp": 1643232488
    },
    {
        "content": "<p>And for the trait visibility, rustdoc just can do some post-processing to mark the methods as inherited visibility (which is what it does already I believe)</p>",
        "id": 269485221,
        "sender_full_name": "Noah Lev",
        "timestamp": 1643232517
    },
    {
        "content": "<p>If we can avoid it, IMO we shouldn't add more uses of HIR</p>",
        "id": 269485281,
        "sender_full_name": "Noah Lev",
        "timestamp": 1643232549
    },
    {
        "content": "<p>I just added more HIR to blanket impls to fix a JSON ICE, but I'd be willing to go the other direction just as well. The big thing is that blanket impls don't follow the normal clean code path, and currently fail tests if I try to use it. If we want to move towards <code>ty</code> more though, I'm down to work on tracking down the issues and see if it can unify more.</p>",
        "id": 269485607,
        "sender_full_name": "CraftSpider",
        "timestamp": 1643232706
    },
    {
        "content": "<p>The names which are probably an us thing, I know where to start on as I mentioned I saw the code that does it, I may try tracking down why it does it that way and if it can be fixed.</p>",
        "id": 269485716,
        "sender_full_name": "CraftSpider",
        "timestamp": 1643232751
    },
    {
        "content": "<p>The main issue with <code>ty</code> that I'm not sure how to solve is that type aliases are not preserved</p>",
        "id": 269485796,
        "sender_full_name": "Noah Lev",
        "timestamp": 1643232797
    },
    {
        "content": "<p>Other than that, I think we should be able to post-process it as needed</p>",
        "id": 269485825,
        "sender_full_name": "Noah Lev",
        "timestamp": 1643232814
    },
    {
        "content": "<p>Update: Check for 'is_local' appears to be because one caller uses <code>DefId::local(CRATE_DEF_INDEX)</code> as a sentinel for fn pointers / etc, which don't have arg names. This seems to be a very odd choice of sentinel value instead of, say, <code>None</code>, as it would also break if the def id was ever used in a new way in the future. I'll see if that's the whole issue or not.</p>",
        "id": 269487973,
        "sender_full_name": "CraftSpider",
        "timestamp": 1643233928
    },
    {
        "content": "<p>Yeah, removing junk like that will probably make the ty transition easier :)</p>",
        "id": 269489550,
        "sender_full_name": "Noah Lev",
        "timestamp": 1643234627
    },
    {
        "content": "<p>Looks like the sentinel can be cleanly swapped for None. I'll be working on that and some other changes to fix ty stuff</p>",
        "id": 269490263,
        "sender_full_name": "CraftSpider",
        "timestamp": 1643234963
    },
    {
        "content": "<p>I can try to review PRs related to that if you assign me :)</p>",
        "id": 269490308,
        "sender_full_name": "Noah Lev",
        "timestamp": 1643234990
    }
]