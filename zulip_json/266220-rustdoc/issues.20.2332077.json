[
    {
        "content": "<p>Hello, I've recently run into <a href=\"https://github.com/rust-lang/rust/issues/32077\">#32077</a>, and I wanted to see what I could do to help fix it. Looking at the issue, I see it's blocked on <a href=\"https://github.com/rust-lang/rust/issues/14072\">#14072</a>, but I'm not really sure where to get started on this.</p>",
        "id": 221430012,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1609642211
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"303115\">@Quy Nguyen</span> I am unclear what's going on in that issue. I modified the example in the OP:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Event</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"sd\">/// a key was pressed/released</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">KeyPressEvent</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Event</span><span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">KeyPressEvent</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// The keycode (a number representing a physical key on the keyboard) of the key</span>\n<span class=\"w\">    </span><span class=\"sd\">/// which was pressed.</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">detail</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"sd\">/// Time when the event was generated (in milliseconds).</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">time</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>which rendered this documentation:<br>\n<a href=\"/user_uploads/4715/iN1ZbH7KEtjhgRMY-CgOkWXY/image.png\">image.png</a> <br>\nwhich looks right to me. What is the bug you're running into?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/iN1ZbH7KEtjhgRMY-CgOkWXY/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/iN1ZbH7KEtjhgRMY-CgOkWXY/image.png\"></a></div>",
        "id": 221431200,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609644609
    },
    {
        "content": "<p>someone mentioned a further bug that rustdoc doesn't follow type aliases, but I see <a href=\"https://github.com/rust-lang/rust/pull/42027\">https://github.com/rust-lang/rust/pull/42027</a> which was merged and claimed to fix it</p>",
        "id": 221431224,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609644700
    },
    {
        "content": "<p>so I am unclear what the actual bug is</p>",
        "id": 221431226,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609644706
    },
    {
        "content": "<p>ok, so one difference is that <code>Event</code> is public in my code but not the OP - is that what you mean?</p>",
        "id": 221431286,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609644787
    },
    {
        "content": "<p>what can you actually do with a public alias to a private type?</p>",
        "id": 221431293,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609644797
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/42027\">#42027</a> fixed that simple case, but not this</p>\n<div class=\"codehilite\"><pre><span></span><code>pub struct Event&lt;T&gt;;\n/// a key was pressed/released\npub type KeyPressEvent = Event&lt;usize&gt;;\n\nimpl&lt;T&gt; Event&lt;T&gt; {\n    /// The keycode (a number representing a physical key on the keyboard) of the key\n    /// which was pressed.\n    pub fn detail(&amp;self) {}\n\n    /// Time when the event was generated (in milliseconds).\n    pub fn time(&amp;self) {}\n}\n</code></pre></div>",
        "id": 221431862,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1609645875
    },
    {
        "content": "<p>ok, the issue is that the documentation appears on <code>Event</code> but not <code>KeyPressEvent</code>, because the impl block used the name <code>Event&lt;T&gt;</code></p>",
        "id": 221431917,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609645990
    },
    {
        "content": "<p>unfortunately that probably means you won't be able to reuse much of the code from the simple fix</p>",
        "id": 221431921,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609646012
    },
    {
        "content": "<p>I would see how <code>Deref</code> docs are rendered, that does something similar where it looks at accessible associated items instead of just on the current item</p>",
        "id": 221431928,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609646040
    },
    {
        "content": "<p>I can't speak to whether a fix for this would be accepted without first fixing <a href=\"https://github.com/rust-lang/rust/issues/14072\">https://github.com/rust-lang/rust/issues/14072</a></p>",
        "id": 221432097,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609646343
    },
    {
        "content": "<p>Hmm funnily enough this works</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">FooA</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">FooB</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FooA</span><span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">FooA</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">happy</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">FooB</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">happyer</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Bar</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ops</span>::<span class=\"n\">Deref</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Target</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FooB</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">deref</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">FooB</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"fm\">unimplemented!</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 221432568,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1609647208
    },
    {
        "content": "<p>But the regular docs don't render</p>",
        "id": 221432569,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1609647216
    },
    {
        "content": "<p>(btw you can mark the code block as <code> ```rust</code> and it will highlight as rust)</p>",
        "id": 221432618,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609647291
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303115\">Quy Nguyen</span> <a href=\"#narrow/stream/266220-rustdoc/topic/issues.20.2332077/near/221432568\">said</a>:</p>\n<blockquote>\n<p>Hmm funnily enough this works</p>\n</blockquote>\n<p>honestly that doesn't suprise me too much - rustdoc has two ways that it collects data, one through the HIR ('what syntax you used') and one through metadata ('what is available to downstream crates'). Deref uses metadata, which normalizes a lot of things to be consistent.</p>",
        "id": 221432683,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609647416
    },
    {
        "content": "<p>so that's one possible way to fix this, use metadata for rendering info on type aliases</p>",
        "id": 221432702,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609647473
    },
    {
        "content": "<p>Did the changes so you don't have to build the compiler go through? Also, what's the difference (code-wise) between the two? Everything is stuffed into the <code>clean::types</code> module according to the docs.</p>",
        "id": 221436219,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1609653964
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303115\">Quy Nguyen</span> <a href=\"#narrow/stream/266220-rustdoc/topic/issues.20.2332077/near/221436219\">said</a>:</p>\n<blockquote>\n<p>Did the changes so you don't have to build the compiler go through? Also, what's the difference (code-wise) between the two? Everything is stuffed into the <code>clean::types</code> module according to the docs.</p>\n</blockquote>\n<p>It's still in progress. We are also working on reducing the size of the <code>clean::types</code> module (by relying more and more upon the <code>rustc</code> internals API. For the moment, we achieved great improvements in both speed and memory usage. About the difference betweeen HIR and <code>clean</code>, the second is a \"wrapper\" over the first to put things simply. It makes manipulating HIR items simpler from rustdoc point of view.</p>",
        "id": 221450667,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1609679822
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303115\">Quy Nguyen</span> <a href=\"#narrow/stream/266220-rustdoc/topic/issues.20.2332077/near/221436219\">said</a>:</p>\n<blockquote>\n<p>Did the changes so you don't have to build the compiler go through?</p>\n</blockquote>\n<p>you can track that at <a href=\"https://github.com/rust-lang/rust/pull/79540\">https://github.com/rust-lang/rust/pull/79540</a></p>",
        "id": 221455435,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609687164
    },
    {
        "content": "<p>How do I turn a <code>DefId</code> into the metadata definition?</p>",
        "id": 221468187,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1609704176
    },
    {
        "content": "<p>what do you mean by 'metadata definition'?</p>",
        "id": 221468221,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609704225
    },
    {
        "content": "<p>DefId is the metadata, in some sense</p>",
        "id": 221468269,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609704244
    },
    {
        "content": "<p>There's a trait represented as a <code>ResolvedPath</code>, and I need the original definition of the trait to replace the generics.</p>",
        "id": 221468290,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1609704286
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TyCtxt.html#method.trait_def\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TyCtxt.html#method.trait_def</a></p>",
        "id": 221468311,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609704324
    },
    {
        "content": "<p>(most things are on TyCtxt)</p>",
        "id": 221468316,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609704336
    },
    {
        "content": "<p>Does the <code>TyCtxt</code> in <code>SharedCtxt</code> work? It's not used anywhere in Rustdoc.</p>",
        "id": 221469376,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1609705663
    },
    {
        "content": "<p>SharedCtxt is probably too late - this is in <code>render</code>, right? right now all the computation happens in <code>clean</code></p>",
        "id": 221469469,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609705798
    },
    {
        "content": "<p>and render should just be for actually generating the HTML, not looking up what the types are</p>",
        "id": 221469515,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609705816
    },
    {
        "content": "<p>How do I get a runnable rustdoc off your fork? Just <code>x.py build</code> and pay the tax?</p>",
        "id": 221486069,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1609730892
    },
    {
        "content": "<p>you mean from the <code>no-xpy</code> branch? <code>git fetch origin pull/79540/head &amp;&amp; git rebase -i FETCH_HEAD</code>, then set <code>[rust] download-stage1 = true</code> in config.toml</p>",
        "id": 221486094,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609730976
    },
    {
        "content": "<p>and then x.py should work like normal</p>",
        "id": 221486101,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609730984
    },
    {
        "content": "<p>(no-xpy is now a misnomer but github doesn't allow renaming branches without closing the PR)</p>",
        "id": 221486173,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609731050
    },
    {
        "content": "<p>oh when you rebase make sure to drop all commits except your own, git gets confused and tries to apply all commits to master since I rebased the PR last</p>",
        "id": 221486294,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609731220
    },
    {
        "content": "<p>downloading <code>https://ci-artifacts.rust-lang.org/rustc-builds/a44774c3a9739b2eea8923e09d67b14312c78ef3/rust-std-nightly-x86_64-pc-windows-msvc.tar.xz</code> failed with 404 - did I screw up my git or is that build not published?</p>",
        "id": 221486432,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1609731391
    },
    {
        "content": "<p>hmm, that's weird</p>",
        "id": 221486447,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609731420
    },
    {
        "content": "<p>oh wow that is a <em>long</em> way back</p>",
        "id": 221486452,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609731446
    },
    {
        "content": "<p>you need to rebase to a commit that's less than 6 months out or the artifacts will have been deleted</p>",
        "id": 221486456,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609731459
    },
    {
        "content": "<p>so I would guess you probably did something strange with git, yeah</p>",
        "id": 221486514,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609731512
    },
    {
        "content": "<p>merge-base with my PR and master is <a href=\"https://github.com/rust-lang/rust/commit/bb178237c5539c75e1b85ab78a8ab902b1f333d5\">bb178237c5539c75e1b85ab78a8ab902b1f333d5</a> (1 week ago) so it's not left over from my experimenting with old commits</p>",
        "id": 221486547,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609731582
    },
    {
        "content": "<p>Nice, got it working. What's the mystery boolean in TypeDefItem?</p>",
        "id": 221490313,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1609737504
    },
    {
        "content": "<p>whether it's an associated item, apparently</p>",
        "id": 221490314,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609737516
    },
    {
        "content": "<p>that bit is still mostly a mystery to me</p>",
        "id": 221490318,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609737532
    },
    {
        "content": "<p>but I did make some minor cleanups: <a href=\"https://github.com/rust-lang/rust/pull/80661\">https://github.com/rust-lang/rust/pull/80661</a></p>",
        "id": 221490327,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609737556
    },
    {
        "content": "<p>Does Rustdoc expand type aliases? I know HIR wise it doesn't, but whenever it inlines from another crate does it expand it then?</p>",
        "id": 221491354,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1609739233
    },
    {
        "content": "<p>Right, so that's what I found: ty::Ty automatically expands aliases but hir::Ty does not</p>",
        "id": 221491811,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609739937
    },
    {
        "content": "<p>So the fix in all those places was to use tcx.type_of or hir_ty_to_ty</p>",
        "id": 221491825,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609739955
    },
    {
        "content": "<p>So really I just need to substitute every generic with the actual parameter. I could modify the cleaned structs in place, but that might mess with what the json backend or other parts of Rustdoc assume. The other way is to store the (raw, unsubstituted) generics and sub them in during render time, but that'll likely bloat memory use.</p>",
        "id": 221495825,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1609745481
    },
    {
        "content": "<p>I would start by modifying in place and see what breaks</p>",
        "id": 221524568,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609768135
    },
    {
        "content": "<p>I would <em>hope</em> rustdoc isn't depending on the names for anything</p>",
        "id": 221524635,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609768195
    },
    {
        "content": "<p>Hmm so I can't modify in place because not all of the items are available to me then, for instance if I impl a trait and don't override any defaults, all the  <code>MethodItem</code>s are stored on the trait and not actually on the <code>ImplItem</code>.</p>",
        "id": 221714494,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1609888337
    },
    {
        "content": "<p>Althoguh the implemntation also splices stuff in from Deref impls, so I'd also need to keep where I get the methods for those too. Probably going to do traits first as most everything is self contained tho.</p>",
        "id": 221714742,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1609888524
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"303115\">@Quy Nguyen</span> can you do this at the same time these items are generated? Then you don't have to modify them after the fact</p>",
        "id": 221729445,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609902897
    },
    {
        "content": "<p>Default method implemntations for traits aren't contained in an impl, so there's no way for me to change them without cloning everything. I'm just gonna try substitution at render time for now.</p>",
        "id": 222123802,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1610138901
    }
]