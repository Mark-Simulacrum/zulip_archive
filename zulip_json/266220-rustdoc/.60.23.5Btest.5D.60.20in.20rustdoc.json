[
    {
        "content": "<p>I have some rustdoc that looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">//! ```</span>\n<span class=\"sd\">//! #[global_allocator]</span>\n<span class=\"sd\">//! static ALLOC: dhat::Alloc = dhat::Alloc;</span>\n<span class=\"sd\">//!</span>\n<span class=\"sd\">//! #[test]</span>\n<span class=\"sd\">//! fn test1() {</span>\n<span class=\"sd\">//!     ...</span>\n<span class=\"sd\">//! }</span>\n<span class=\"sd\">//! ```</span>\n</code></pre></div>\n<p>It's showing how to write a test using the crate I'm working on. As written, <code>test1</code> doesn't get compiled and run as a rustdoc test during <code>cargo test</code> because of the <code>#[test]</code> attribute. I could remove that attribute to make it run, but then it's no longer a correct example.</p>\n<p>Is there a way to square this circle?</p>",
        "id": 264242445,
        "sender_full_name": "nnethercote",
        "timestamp": 1639010631
    },
    {
        "content": "<p>You could do</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"sd\">//! # #[cfg_attr(FALSE,</span>\n<span class=\"sd\">//! #[test]</span>\n<span class=\"sd\">//! # )]</span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>\n<p>which I think should disable the <code>#[test]</code> attribute for the doctest run, but still show it in the docs.</p>",
        "id": 264243188,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639011236
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@nnethercote</span> I think you can just call <code>test1()</code> at the bottom of the example (and hide it from the docs if you want)</p>",
        "id": 264244361,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639012329
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> but <code>test1</code> isn't visible:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0425]: cannot find function `test1` in this scope\n  --&gt; src/lib.rs:258:1\n   |\n31 | test1();\n   | ^^^^^ not found in this scope\n</code></pre></div>",
        "id": 264246130,
        "sender_full_name": "nnethercote",
        "timestamp": 1639014031
    },
    {
        "content": "<p>that seems ... odd. does that also happen outside of a doctest?</p>",
        "id": 264246155,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639014069
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307537\">@Noah Lev</span> Yours is close, but it's a syntax error. This compiles, but generates weird looking docs:</p>\n<div class=\"codehilite\"><pre><span></span><code>//! # #[cfg_attr(FALSE,\n//! test\n//! # )]\n</code></pre></div>",
        "id": 264246362,
        "sender_full_name": "nnethercote",
        "timestamp": 1639014253
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@nnethercote</span> this should work:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">//! # /*</span>\n<span class=\"sd\">//! #[test]</span>\n<span class=\"sd\">//! # */</span>\n</code></pre></div>",
        "id": 264246407,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639014302
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> Outside how?</p>",
        "id": 264246413,
        "sender_full_name": "nnethercote",
        "timestamp": 1639014305
    },
    {
        "content": "<p>Aha</p>",
        "id": 264246420,
        "sender_full_name": "nnethercote",
        "timestamp": 1639014314
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@nnethercote</span> like in a normal crate that depends on your library</p>",
        "id": 264246421,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639014315
    },
    {
        "content": "<p><code>#[test]</code> means \"ignore this unless you're the test runner\", right?</p>",
        "id": 264246600,
        "sender_full_name": "nnethercote",
        "timestamp": 1639014476
    },
    {
        "content": "<p>I don't think so, no. <a href=\"https://doc.rust-lang.org/reference/attributes/testing.html#the-test-attribute\">https://doc.rust-lang.org/reference/attributes/testing.html#the-test-attribute</a></p>",
        "id": 264246669,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639014534
    },
    {
        "content": "<blockquote>\n<p>These functions are only compiled when in test mode.</p>\n</blockquote>\n<p>oh hmm</p>",
        "id": 264246681,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639014558
    },
    {
        "content": "<p>that doesn't match my experience?</p>",
        "id": 264246687,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639014564
    },
    {
        "content": "<p>Well, all I can say is that the <code>#[test]</code> function is skipped when running doc tests</p>",
        "id": 264246720,
        "sender_full_name": "nnethercote",
        "timestamp": 1639014593
    },
    {
        "content": "<p>The comment trick works, so thanks for that</p>",
        "id": 264246764,
        "sender_full_name": "nnethercote",
        "timestamp": 1639014608
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/266220-rustdoc/topic/.60.23.5Btest.5D.60.20in.20rustdoc/near/264246687\">said</a>:</p>\n<blockquote>\n<p>that doesn't match my experience?</p>\n</blockquote>\n<p>I've often accidentally committed code where the <code>#[test]</code>s don't compile because I forgot to run them. I don't think unit tests are normally built as part of <code>cargo check/build</code>. Maybe a tool you use has been passing <code>--all-targets</code>?</p>",
        "id": 264246963,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639014831
    }
]