[
    {
        "content": "<p>I was trying to make some adjustments to how we render prose headings, and ran into a lot of stumbling blocks to <code>Methods from Deref</code>:</p>\n<p><a href=\"/user_uploads/4715/Bs1trOe669vNBhJJIAgqgHnZ/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/Bs1trOe669vNBhJJIAgqgHnZ/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/Bs1trOe669vNBhJJIAgqgHnZ/image.png\"></a></div><p>It's significantly different from our other prose headings, because it contains multiple internal links (<code>Deref</code> and <code>str</code>, in this case).</p>\n<p>Also, I notice that unlike the <code>Implementations</code> section, the <code>Methods from Deref</code> section doesn't have a wrapping <code>impl</code>.</p>\n<p>What would y'all think of making <code>Methods from Deref&lt;Target = str&gt;</code> a plain header (no internal links), and wrapping its section in a <code>impl Deref&lt;Target = str&gt;</code> block? That way we would still have links to <code>Deref</code> and <code>str</code>, but we'd also have more consistent UI.</p>",
        "id": 268619728,
        "sender_full_name": "jsha",
        "timestamp": 1642635190
    },
    {
        "content": "<p>I'm not quite sure what you're suggesting. What would the new UI look like?</p>",
        "id": 268626752,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642640298
    },
    {
        "content": "<p>Something like:</p>\n<div class=\"codehilite\"><pre><span></span><code>Methods from Deref&lt;Target = str&gt;\n--------------------------------------------\nimpl Deref&lt;Target = str&gt;\n  pub fn len(&amp;self) -&gt; usize\n....\n</code></pre></div>",
        "id": 268631646,
        "sender_full_name": "jsha",
        "timestamp": 1642644723
    },
    {
        "content": "<p>Wouldn't that be a duplicate of <code>Deref&lt;Target = str&gt;</code>?</p>",
        "id": 268662062,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642669702
    },
    {
        "content": "<p>(As this has come up, I noticed the list of methods under Deref&lt;str&gt; is very different from the list of methods for str (I think it only shows the ones defined in liballoc). Is this a known bug?)</p>",
        "id": 268664270,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1642670837
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256841\">Nick Cameron</span> <a href=\"#narrow/stream/266220-rustdoc/topic/Methods.20from.20Deref/near/268664270\">said</a>:</p>\n<blockquote>\n<p>(As this has come up, I noticed the list of methods under Deref&lt;str&gt; is very different from the list of methods for str (I think it only shows the ones defined in liballoc). Is this a known bug?)</p>\n</blockquote>\n<p>First time I heard of it. Please open an issue!</p>",
        "id": 268667019,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642672308
    },
    {
        "content": "<p>shall do!</p>",
        "id": 268668364,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1642672927
    },
    {
        "content": "<p>Well, trying to repro and it doesn't. I think I must have been looking at alloc::str::String, rather than the std one, and was confused because clicking on the str in Deref&lt;str&gt; takes you to core::str which has all the methods some how</p>",
        "id": 268669167,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1642673227
    },
    {
        "content": "<p>so I guess there is some minor inconsistency going on around the different layers of the std facades, rather than a problem with Deref handling</p>",
        "id": 268669244,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1642673278
    },
    {
        "content": "<p>It's pretty common sadly...</p>",
        "id": 268702657,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642690202
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315412\">jsha</span> <a href=\"#narrow/stream/266220-rustdoc/topic/Methods.20from.20Deref/near/268631646\">said</a>:</p>\n<blockquote>\n<p>Something like:</p>\n<p><div class=\"codehilite\"><pre><span></span><code>Methods from Deref&lt;Target = str&gt;\n--------------------------------------------\nimpl Deref&lt;Target = str&gt;\n  pub fn len(&amp;self) -&gt; usize\n....\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I'm against this: Like Guillaume said, it duplicates <code>Deref&lt;Target = str&gt;</code>. It's also invalid syntax. I don't think we need to make it look more like an impl, because it's not a regular impl. <code>impl Deref&lt;Target = str&gt;</code> seems really confusing because those methods are not defined in the Deref impl.</p>",
        "id": 268756079,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642712100
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256841\">Nick Cameron</span> <a href=\"#narrow/stream/266220-rustdoc/topic/Methods.20from.20Deref/near/268664270\">said</a>:</p>\n<blockquote>\n<p>(As this has come up, I noticed the list of methods under Deref&lt;str&gt; is very different from the list of methods for str (I think it only shows the ones defined in liballoc). Is this a known bug?)</p>\n</blockquote>\n<p>I've noticed this myself. I thought I opened an issue but I can't find one. It's something to do with cross-crate re-exports having different impls from the definition.</p>",
        "id": 268756397,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642712229
    },
    {
        "content": "<p>good point, you're right that those methods are not in the Deref impl, so this approach doesn't make sense. Thanks for clarifying!</p>",
        "id": 268772696,
        "sender_full_name": "jsha",
        "timestamp": 1642721025
    }
]