[
    {
        "content": "<p>Appears as though <a href=\"https://github.com/rust-lang/rust/issues/89596\">#89596</a> does <em>not</em> apply to <code>#[cfg(foo)]</code> that is placed in another file. Is this intentional?<br>\n(I don't know if the actual boundary is file. I just noticed it when it's on a module or a type defined elsewhere)</p>",
        "id": 257491224,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1634196321
    },
    {
        "content": "<p>Do you have an example please so I can take a look?</p>",
        "id": 257495787,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1634198916
    },
    {
        "content": "<p>Just on a hunch I created a minimal example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(doc_cfg)]</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[cfg(feature = </span><span class=\"s\">\"foo\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"k\">mod</span> <span class=\"nn\">foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">foo</span>::<span class=\"n\">bar</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 257496627,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1634199338
    },
    {
        "content": "<p>If I were to guess I'd say it has something to do with visibility, as making <code>foo</code> public displays the annotation as expected.</p>",
        "id": 257496699,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1634199367
    },
    {
        "content": "<p>In addition, <em>even if</em> <code>foo</code> is <code>pub</code>, adding <code>#[doc(inline)]</code> to <code>pub use foo::bar;</code> doesn't have the annotation.</p>",
        "id": 257496895,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1634199483
    },
    {
        "content": "<p>The annotations are displayed if the item is validating the cfg. If you want it to be displayed in any case, try <code>#]cfg(any(doc, feature = \"foo\"))]</code></p>",
        "id": 257496970,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1634199517
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245610\">Jacob Pratt</span> <a href=\"#narrow/stream/266220-rustdoc/topic/implied.20doc.28cfg.29/near/257496895\">said</a>:</p>\n<blockquote>\n<p>In addition, <em>even if</em> <code>foo</code> is <code>pub</code>, adding <code>#[doc(inline)]</code> to <code>pub use foo::bar;</code> doesn't have the annotation.</p>\n</blockquote>\n<p>that seems to be another issue</p>",
        "id": 257497002,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1634199533
    },
    {
        "content": "<p>Was that the goal of the PR? Or is that the end goal? As a user, I'd expect the <code>#[cfg]</code> annotation be displayed on the re-export in the code as shown.</p>",
        "id": 257497079,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1634199600
    },
    {
        "content": "<p>If that wasn't a goal of the PR, okay. But I just want to make sure.</p>",
        "id": 257497136,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1634199614
    },
    {
        "content": "<p>It was the goal: to display the cfg annotations for items validating the cfg</p>",
        "id": 257497159,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1634199627
    },
    {
        "content": "<p>Ok <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> Future goals then!</p>",
        "id": 257497221,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1634199664
    },
    {
        "content": "<p>Thank you for the minimal implementation, by the way. I'm by no means complaining. I'm happy to have <em>something</em>.</p>",
        "id": 257497255,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1634199687
    },
    {
        "content": "<p>otherwise, the technical challenges are much greater. For example, if you have the same item available under different cfgs, first, how do we recognize that it's the same item? Then we'd need to merge all cfgs (this part is easy so it's fine) by that'd require to store the cfgs from the other one, etc</p>",
        "id": 257497302,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1634199710
    },
    {
        "content": "<p>Oh, for sure. I just found what I had to be a common pattern - re-exporting something public from inside a private module. I certainly don't mind the few annotations that exist now as compared to before.</p>",
        "id": 257497639,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1634199849
    },
    {
        "content": "<p>Quick check shows that 54 instances were removed thanks to this change while 31 remain. So even this catches roughly two thirds of uses in my codebase!</p>",
        "id": 257498151,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1634200085
    },
    {
        "content": "<p>yeay! \\o/</p>",
        "id": 257500395,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1634201110
    }
]