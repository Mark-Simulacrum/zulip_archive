[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span> when I was poking around in the search JS last night, I noticed we rely a lot of side effects and \"global\" variables (not really global, but in the scope of search.js' big initSearch function). As one example: <code>buildIndex</code> generates two variables <code>searchIndex</code> and <code>searchWords</code>. It assigns <code>searchIndex</code> directly to the \"global\" variable <code>searchIndex</code> and it returns <code>searchWords</code>. But then the caller immediately assigned <code>searchWords</code> to the \"global\" variable <code>index</code>.</p>\n<p>I think we would be better off treating <code>buildIndex</code> as a pure function - it takes a raw index, and returns (<code>searchIndex</code>, <code>searchWords</code>). Then the caller can take care of storing those where it wants to.</p>\n<p>Even better we can define a class that contains (<code>searchIndex</code>, <code>searchWords</code>), and that class can expose functions like <code>execQuery</code> that use those fields.</p>",
        "id": 265342277,
        "sender_full_name": "jsha",
        "timestamp": 1639767007
    },
    {
        "content": "<p>I've been intending to split the big function for quite a while now. Just never found the time to. I wanted to use the rewrite of the search to do it and for now I need to finish it by splitting it up in smaller PRs (which is being done currently). But yes, I strongly agree, I don't like \"local global\" variables.</p>",
        "id": 265362351,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1639776162
    }
]