[
    {
        "content": "<p>Forking this from the other discussion :)</p>\n<p>I think an HTTP server gives us more room to be \"flexible\" and gives us a pretty high temptation for starting to make rustdoc more of a webapp than I think it should be. We get a lot of value from being able to point at our docs as just static HTML (with some JS, but that's not as noticeable for most people, since it just works). Needing to start up a web server is annoying; it forces us into e.g. cargo doc --open being the 'only' way to open docs after generation. It's really nice -- and to some extent I'd say \"stable feature\" -- that our docs are just HTTP files and can be served from e.g. github pages just as well as file://  and you don't need to think about it.</p>",
        "id": 254144548,
        "sender_full_name": "simulacrum",
        "timestamp": 1632189053
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> ^</p>",
        "id": 254144556,
        "sender_full_name": "simulacrum",
        "timestamp": 1632189059
    },
    {
        "content": "<p>I think wasm hits some of these tickboxes (still works with ~most static file hosts), so it's sort of a middle ground</p>",
        "id": 254144585,
        "sender_full_name": "simulacrum",
        "timestamp": 1632189090
    },
    {
        "content": "<p>I might be wrong about the wasm thing, though, with file://</p>",
        "id": 254144697,
        "sender_full_name": "simulacrum",
        "timestamp": 1632189175
    },
    {
        "content": "<p>At least MDN seems to suggest \"...  file:// URLs are also considered to have been delivered securely.\"</p>",
        "id": 254144709,
        "sender_full_name": "simulacrum",
        "timestamp": 1632189185
    },
    {
        "content": "<p>so maybe it works?</p>",
        "id": 254144712,
        "sender_full_name": "simulacrum",
        "timestamp": 1632189189
    },
    {
        "content": "<p>Regardless, it's a step up from JS which has a much older compat story, I'd guess</p>",
        "id": 254144728,
        "sender_full_name": "simulacrum",
        "timestamp": 1632189210
    },
    {
        "content": "<p>Hmm, my understanding is that WASM is intentionally backwards compatible with JS</p>",
        "id": 254144786,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1632189243
    },
    {
        "content": "<p>GitHub pages doesn't have any of the issues of file:/// btw, the server there is GitHub</p>",
        "id": 254144806,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1632189263
    },
    {
        "content": "<p>I don't follow the backwards compatibility statement</p>",
        "id": 254144860,
        "sender_full_name": "simulacrum",
        "timestamp": 1632189337
    },
    {
        "content": "<p>it seems clear that an old (e.g., IE?) browser just won't load wasm, right?</p>",
        "id": 254144875,
        "sender_full_name": "simulacrum",
        "timestamp": 1632189350
    },
    {
        "content": "<p>yeah, github pages is fine I think. I know in the early days of wasm there were some problems around the content-type not being correctly served by some hosts? I think I ran into that with e.g. python's -m http.server</p>",
        "id": 254144943,
        "sender_full_name": "simulacrum",
        "timestamp": 1632189390
    },
    {
        "content": "<p>I think I'm just confused, never mind. Rustdoc doesn't support IE though, I think all the browsers it supports run WASM (but I have to double check)</p>",
        "id": 254145457,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1632189796
    },
    {
        "content": "<p>I'm definitely not sure that all currently supported browsers support wasm considering how recent it is. I said it might be best towait a few year before porting rustdoc JS code into WASM but it's something I want us to do in the long term.</p>\n<p>As for HTTP server with rustdoc: no. Handling an HTTP server is super tricky: if you have docs in different places, you'd have to start multiple servers, when you reboot your computer and reload the URL, it won't work anymore so you have to restart the server. And final point: we'd need to either write ourselves the server or include it into every release. I really don't think it's worth it...</p>",
        "id": 254174099,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1632214091
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> btw, where was the other discussion so I can take a look at it to check if there was any additional comment.</p>",
        "id": 254174145,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1632214129
    },
    {
        "content": "<p>Scrape examples topic</p>",
        "id": 254186218,
        "sender_full_name": "simulacrum",
        "timestamp": 1632220921
    },
    {
        "content": "<p>Ah indeed, thanks!</p>",
        "id": 254189092,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1632222547
    },
    {
        "content": "<p>I think having <code>cargo doc --open</code> run a web server would be great. This is a common feature in static blog generators like Hugo and Jekyll. Those tools have an additional feature that is extremely helpful for doc authors: They auto-rebuild on file changes, and have special JS for local mode that reloads smoothly after a rebuild. It's an amazing experience to be able to write Markdown in one window and see it update in near-realtime in your browser window. It really increases your confidence as an author that you are getting the result you want, and that it will look good. I've also gotten a request for this feature from a friend who is an avid rust user and likes to write really high quality docs.</p>\n<p>I also think it's useful for the reason pointed out above: Browsers place restrictions on file:/// URLs that sometimes cause us to jump through hoops to make things work, or prevent certain things from working at all. For instance, see <a href=\"https://github.com/rust-lang/rust/issues/84539#issuecomment-886186821\">https://github.com/rust-lang/rust/issues/84539#issuecomment-886186821</a>. localStorage on file:/// URLs is localized to a per-URL basis, instead of a per-server basis for https:// URLs. This means settings (including themes) don't persist properly across pages.</p>\n<p>If we do pursue a built-in web server, we should definitely continue to support file-only browsing, but it may be missing some features like theme storage. @simulacrum makes a \"slippery slope\" argument, that once we have a built-in web server, we will be tempted to <em>only</em> support that mode of operation. However, we would still be deploying in file-only mode to <code>doc.rust-lang.org</code> and <code>docs.rs</code>, so we have a natural Schelling Fence to stop us from going down that slippery slope.</p>",
        "id": 255100721,
        "sender_full_name": "jsha",
        "timestamp": 1632768806
    },
    {
        "content": "<p>I think this is way too much work even though it improves users experience. Having to watch and handle an HTTP server is just a nightmare...</p>",
        "id": 255107681,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1632771552
    },
    {
        "content": "<p>Too much work for the rustdoc team or too much work for the doc author? The doc author experience in Hugo and Jekyll is excellent. You run the process in a terminal. If you're done with it, you Ctrl-C it.</p>\n<p>For the rustdoc team: Yes, it would be a sizeable addition, and would add a pile of new dependencies. I don't think we should undertake it lightly.</p>\n<p>Perhaps as a midpoint solution we could provide some recommended commands that achieve a similar effect: A <code>watch</code> that rebuilds docs, plus a python web server, plus maybe some option to insert the auto-reloading JS (do we have a flag to let doc authors inject arbitrary JS into their local builds?).</p>",
        "id": 255108749,
        "sender_full_name": "jsha",
        "timestamp": 1632771999
    },
    {
        "content": "<p>I think this would be better to build into cargo than to rustdoc - it can automatically rerun rustdoc on changes</p>",
        "id": 255111349,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1632773022
    },
    {
        "content": "<p>it already has a bundle of HTTP dependencies built in</p>",
        "id": 255111753,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1632773165
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315412\">jsha</span> <a href=\"#narrow/stream/266220-rustdoc/topic/why.20not.20http.20servers/near/255108749\">said</a>:</p>\n<blockquote>\n<p>Too much work for the rustdoc team or too much work for the doc author?</p>\n</blockquote>\n<p>For the rustdoc team.</p>\n<p>I think it's up to the cargo team at this point in any case (like <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> suggested).</p>",
        "id": 255185249,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1632820322
    },
    {
        "content": "<p>So there's a stronger version of this that has been a topic of discussion on and off: making rustdoc work over http as a dynamically generated site (steve worked on this as \"rustdoc2\" for a while).  But I don't want to scope creep. This would be a cool feature, makes more sense in cargo</p>",
        "id": 255248170,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1632847244
    },
    {
        "content": "<p>also tbh when I <code>cargo doc --open</code> i don't want to dedicate a shell to it :)</p>",
        "id": 255248235,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1632847270
    },
    {
        "content": "<p>but others may want it the other way. perhaps <code>cargo doc --serve --open</code> and also <code>cargo doc --serve</code></p>",
        "id": 255248283,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1632847290
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> when you say \"dynamically generated site\", do you mean literally having rustdoc running as a server? Because that would totally break <a href=\"http://docs.rs\">docs.rs</a>, it can't have millions of rustdoc processes running</p>",
        "id": 255260735,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1632849352
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> --serve seems useful (and cargo could build it today without changes to rustdoc) but it doesn't help with the original goal which is to stop needing to support the file:/// protocol</p>",
        "id": 255260962,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1632849440
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> not rustdoc processes, but yeah</p>",
        "id": 255261049,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1632849476
    },
    {
        "content": "<p>there are many design challenges</p>",
        "id": 255261123,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1632849488
    },
    {
        "content": "<p>I'm also not sure how useful it is compared to the difficulty? What's the benefit of generating the pages dynamically?</p>",
        "id": 255261212,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1632849517
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> search gets more efficient, we can have a lot more interactivity in general, etc</p>",
        "id": 255427797,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1632932288
    },
    {
        "content": "<p>In my opinion, the cons far outlast the pros. Just building/running the HTTP server would be a nightmare. And it doesn't even cover rewriting rustdoc search or dynamically serving files.</p>\n<p>Currently, we can already run <code>python -m http.server .</code> and we have files served without using the file:// protocol</p>",
        "id": 255448340,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1632939687
    },
    {
        "content": "<p>I mean, to be clear, I'm not proposing it, I'm a bit surprised at everyone's strong negative reaction. I was just giving some context</p>",
        "id": 255609519,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1633021277
    },
    {
        "content": "<p>It's far from the first time that this topic was debated. I thought you were there the previous times, maybe my memory is failing me as usual... Oh well.</p>",
        "id": 255615319,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1633023417
    },
    {
        "content": "<p>I was there! I was just mentioning it as prior art.</p>",
        "id": 255654874,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1633038915
    }
]