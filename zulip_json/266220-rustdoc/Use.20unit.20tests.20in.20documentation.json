[
    {
        "content": "<p>Has anyone ever discussed being able to use unit tests inside documentation, rather than having to write out the documentation test? This way you still get all the editor features writing a normal unit test but can quickly add it to the documentation for examples.</p>\n<p>e.g. right now you have to do something like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>/**\nGet median of arrays\n## Examples\n ```\nlet nums1 = vec![1, 5, 7];\nlet nums2 = vec![1, 4, 7];\nassert_eq!(algs::vec::median_sorted_two_vecs(nums1, nums2), 4.5);\n ```\n**/\n</code></pre></div>\n<p>My proposal is to be able to do this:</p>\n<div class=\"codehilite\"><pre><span></span><code>/**\nGet median of arrays\n\\#\\# Examples\n```algs::vec::test_sorted_f64```\n**/\n\n#[test]\nfn test_sorted_f64() {\n    let nums1 = vec![1.25, 15.2, 50.47];\n    let nums2 = vec![0.25, 15.77, 200.6];\n    assert_eq!(median_sorted_two_vecs(nums1, nums2), 15.485);\n}\n</code></pre></div>\n<p>Which would generate the exact same HTML with the example containing the code inside the test function.</p>\n<p>What do you think?</p>",
        "id": 269350120,
        "sender_full_name": "Jack Clayton",
        "timestamp": 1643159616
    },
    {
        "content": "<p>(the eyeball icon in the Zulip editor allows you to preview your markdown)</p>",
        "id": 269350660,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1643160025
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> lol thanks fixing it now</p>",
        "id": 269350728,
        "sender_full_name": "Jack Clayton",
        "timestamp": 1643160106
    },
    {
        "content": "<p>I don't follow how this would work. The <code>#[test]</code> is still inside of the comment block, so your editor would have to know that some lines aren't text and are code instead. Since your editor already needs to know that, what is stopping it from supporting the current form?</p>",
        "id": 269350818,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1643160175
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span>  I updated it, meant to put the test outside the documentation</p>",
        "id": 269351100,
        "sender_full_name": "Jack Clayton",
        "timestamp": 1643160381
    },
    {
        "content": "<p>potentially relevant things: </p>\n<ul>\n<li><a href=\"https://rust-lang.github.io/rfcs/3123-rustdoc-scrape-examples.html\">https://rust-lang.github.io/rfcs/3123-rustdoc-scrape-examples.html</a></li>\n<li><a href=\"https://stackoverflow.com/a/48982679/155423\">How is it possible to keep Rust module documentation in separate Markdown files?</a></li>\n</ul>",
        "id": 269351317,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1643160562
    },
    {
        "content": "<p>I do like the general goal of being able to write examples not inside <code>///</code>s, as that does make them somewhat more annoying to type out in the first place.</p>\n<p>My first instinct is that something needing name lookup to find it is a bit weird.  But maybe the ship has sailed on that now that intra-doc links exist, since those need it too.</p>\n<p>Spitballing: Maybe there could be a way to do this with <em>inner</em> stuff?  That'd still keep them closer than, say, a <code>#[test]</code> could be in an <code>impl</code> (since for something like the <code>Iterator</code> examples one would need to write the tests quite far from the method declaration).</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// Doc comments!</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// # Panics</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// They're so cool</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// # Examples</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">do_cool_stuff</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[example]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">so_great</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">do_cool_stuff</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"mi\">5</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>But this also brings up a whole bunch of questions like how to find the necessary <code>use</code>s to make it copy-paste runnable, how to do the equivalent of <code>#</code> lines, etc.</p>",
        "id": 269365474,
        "sender_full_name": "scottmcm",
        "timestamp": 1643174785
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span>  That gives me an idea around Rust Analyzer, using /** for comments allows you to put code without any <code>///</code>'s, it would just be a matter of setting Rust Analyzer to parse documentation tests inside a block like that as though it were a unit test. I'm going to work on this from that angle, thanks for the spitball. <span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> That scrape-examples is really cool I had a play with that thanks</p>",
        "id": 269366250,
        "sender_full_name": "Jack Clayton",
        "timestamp": 1643175692
    },
    {
        "content": "<p>Oh, right, I'm been so conditioned to never use <code>//*</code>s that I forgot about it.</p>\n<p>I should try out using</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// # Examples</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/** ```</span>\n<span class=\"sd\">    code here</span>\n<span class=\"sd\">    ``` */</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and see how it feels.</p>",
        "id": 269367957,
        "sender_full_name": "scottmcm",
        "timestamp": 1643177586
    },
    {
        "content": "<blockquote>\n<p>setting Rust Analyzer to parse documentation tests inside a block like that</p>\n</blockquote>\n<p>If you are going to do that, you could also make R-A look for ```rust in the doc anyway. No \"big\" changes.</p>",
        "id": 269442460,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1643215550
    },
    {
        "content": "<p>r-a already does syntax highlighting inside <code> ```rust </code>, so extending it to also give suggestions etc. seems like a good idea.</p>",
        "id": 269484245,
        "sender_full_name": "Noah Lev",
        "timestamp": 1643232104
    }
]