[
    {
        "content": "<blockquote>\n<p>I'm unclear on many parts yet but I guess most importantly unclear on with this change, how would the rustdoc feature work after I had managed to fix this...? would the docs just have the full, unbound path like &lt;Source as SelectDsl&gt;::Output for the type Select&lt;Source&gt; in your minimization <a href=\"https://github.com/rust-lang/rust/issues/79459#issuecomment-734984867\">https://github.com/rust-lang/rust/issues/79459#issuecomment-734984867</a> ?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"341229\">@Joonas Koivunen</span> Yes - the idea is that if it can't be normalized, it should just fallback to showing the original output</p>",
        "id": 234332402,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618323221
    },
    {
        "content": "<p>if you look at the rustdoc code it actually does that already for you: <a href=\"https://github.com/jyn514/rust/blob/0679a4cd93db7dfd33b45cd5bd6be52a0f5e894a/src/librustdoc/clean/mod.rs#L1544\">https://github.com/jyn514/rust/blob/0679a4cd93db7dfd33b45cd5bd6be52a0f5e894a/src/librustdoc/clean/mod.rs#L1544</a></p>",
        "id": 234332565,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618323274
    },
    {
        "content": "<p>the problem is that <code>normalize</code> is literally calling <code>process::exit</code> so it never gets that far</p>",
        "id": 234332604,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618323292
    },
    {
        "content": "<p>if you change <code>normalize</code> to return an error instead, basically the only change needed is to turn <code>map()</code> into <code>and_then()</code> and ignore the overflow error like all the other errors</p>",
        "id": 234332763,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618323353
    },
    {
        "content": "<p>thank you for working on this! <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 234333617,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618323633
    },
    {
        "content": "<p>Great! At least I understood that correctly. So far I've rebased your modifications and yes, like I mentioned, it was quite interesting to see the conflict reasons (there were huge changes merged between now and when you started -- though I guess this is normal).</p>\n<p>I should probably push that version in case I never get this done. I still think it's a good possibility since there's just so much ground to cover, or at least it seems like that.</p>\n<p>However, the rebased or incomplete version wasn't too clear for me (given the new codebase of rustc), so I started again from a clean <code>master</code> and now I pretty much agree with your changes, except the ones in <code>rustc_trait_selection/src/traits/error_reporting/{mod,suggestions}.rs</code>, but perhaps those can be discussed later.</p>",
        "id": 234340347,
        "sender_full_name": "Joonas Koivunen",
        "timestamp": 1618325753
    },
    {
        "content": "<p>tbh I did those changes while sleeping on a couch in a friends apartment so they may not be my best work <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 234341614,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618326053
    },
    {
        "content": "<p>sorry, with unclear I just meant the reasoning(s) behind each change, except for the type system requiring it :) I guess I'll continue working to better trying to understand the second commit. I do understand why the obligation needs to go into the OverflowError, but this commit changed the build errors so drasticly it's going to take some time.</p>\n<p>also I linked the rebased version to the issue <a href=\"https://github.com/rust-lang/rust/issues/81091\">rust#81091</a></p>",
        "id": 234344275,
        "sender_full_name": "Joonas Koivunen",
        "timestamp": 1618326563
    },
    {
        "content": "<blockquote>\n<p>I do understand why the obligation needs to go into the OverflowError, but this commit changed the build errors so drasticly it's going to take some time.</p>\n</blockquote>\n<p>yeah this was the point at which I gave up <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> if you find an easier way to do this without storing the obligation I'd definitely be interested</p>",
        "id": 234348066,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618327657
    },
    {
        "content": "<blockquote>\n<p>now I pretty much agree with your changes, except the ones in rustc_trait_selection/src/traits/error_reporting/{mod,suggestions}.rs, but perhaps those can be discussed later.</p>\n</blockquote>\n<p>the reason these don't exit on overflow is this only happens if an error is already going to be reported</p>",
        "id": 234349283,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618328053
    },
    {
        "content": "<p>so the overflow is from generating suggestions, it's unrelated to the actual problem in the code</p>",
        "id": 234349338,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618328070
    },
    {
        "content": "<p>my thinking was  the previous implementation would had stopped on the first overflow, if such would had been found when generating help. however I don't now if such a \"double-fault\" condition was ever possible. either way, that is probably something which should be visible when it comes to testing this..</p>",
        "id": 234361144,
        "sender_full_name": "Joonas Koivunen",
        "timestamp": 1618332322
    },
    {
        "content": "<p>well yes, but IMO that's the wrong behavior - it means you see an error that's unrelated to what actually went wrong</p>",
        "id": 234362043,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618332646
    },
    {
        "content": "<p>that is an excellent point, now that I think about it :)</p>",
        "id": 234362313,
        "sender_full_name": "Joonas Koivunen",
        "timestamp": 1618332758
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"341229\">@Joonas Koivunen</span> had you made any progress with this? Happy to help if you got stuck :)</p>",
        "id": 235224866,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618856158
    },
    {
        "content": "<p>no progress to report, been a bit busy with daily $work. I'll try to gather my notes/thoughts for tomorrow if I can get some concrete questions.</p>",
        "id": 235227327,
        "sender_full_name": "Joonas Koivunen",
        "timestamp": 1618857204
    },
    {
        "content": "<p>All righty.. sorry for the delay <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> . Been a bit busier than expected as deadlined $work has mysteriously appeared :)</p>\n<p>So what I was last looking was the necessity of the obligation you introduced in the <a href=\"https://github.com/rust-lang/rust/commit/596b1038423dcf07bc1ed8ddc0f6ae8756866600#diff-9c74165e2843a939fdde7bbaa0fb2c029c1db925a1ae178e35dc85cbd8b381e2L256-R256\">\"everything is broken\" commit</a> into <code>rustc_middle::traits::select::OverflowError</code>. This cannot work as is because either the Obligation would have to move from <code>rustc_infer::traits</code> to the middle, or be handled in some other way.</p>\n<p>In order the understand the \"other possible ways\", I started looking at the api surface of <code>rustc_trait_selection</code> and it's quite huge, almost all items seem to be public and I guess I was last left at this point.</p>",
        "id": 235393133,
        "sender_full_name": "Joonas Koivunen",
        "timestamp": 1618943786
    },
    {
        "content": "<p>Looking back into the hints provided on <a href=\"https://github.com/rust-lang/rust/issues/81091\">rust#81091</a> I know realize that perhaps there isn't any reason to expand this outwards from the given <code>rustc_trait_selection::traits::{select,projection}</code>. From the hint in issue description:</p>\n<blockquote>\n<p>until outside of rustc_trait_selection::traits::{select, project}, at which point they should be emitted.</p>\n</blockquote>\n<p>emit probably means reporting the error and stopping, similar to what <code>rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt::evaluate_obligation_no_overflow</code> used to do (it's now removed in the branch)?</p>",
        "id": 235393517,
        "sender_full_name": "Joonas Koivunen",
        "timestamp": 1618943955
    },
    {
        "content": "<p>After writing up this status report I feel like I've been sidetracked by following and pondering all of the possible OverflowError returns and instead (or in addition) I should try approach this by going top-down from the API surface of <code>rustc_trait_selection::traits::{select,project}::*</code> which I guess I've ended up looking up the least. Though there has certainly been enough of rustc dev guide to read here as well.</p>\n<p>Would the \"top-down\" sound sensible idea to you, or had you gotten some better idea in the meantime?</p>\n<p>Also, sorry for this many messages kind of comms. I'm on +03:00 timezone so we've got a bit of tz difference. I'll be a bit afk now but will check your reply tomorrow at the latest.</p>",
        "id": 235394107,
        "sender_full_name": "Joonas Koivunen",
        "timestamp": 1618944187
    },
    {
        "content": "<p>Oh no worries, I have a tendency to ramble in chats myself <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> I like the idea of doing this top-down. I'd start with where rustdoc calls <code>normalize()</code> - I think that's a query? So any type it returns has to be available in rustc_middle.</p>",
        "id": 235396564,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618945119
    },
    {
        "content": "<p>Ah yes, thanks to your note about it being most likely being a query, I think something clicked -- or at least it feels that way. The query abstraction and the way it's populated are definitely something I haven't yet come across elsewhere not to even mention the incremental side of it.</p>",
        "id": 235463248,
        "sender_full_name": "Joonas Koivunen",
        "timestamp": 1618987796
    },
    {
        "content": "<p>yes so queries are weird because they can be declared and implemented separately</p>",
        "id": 235478897,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618996760
    },
    {
        "content": "<p>you don't have to worry about the incremental part for this, but as long as the argument types and the return types are defined in rustc_middle the funciton itself can be defined anywhere</p>",
        "id": 235478950,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618996796
    },
    {
        "content": "<p>search for <code>provide(</code></p>",
        "id": 235479084,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618996843
    },
    {
        "content": "<p>Trying to move the obligation now, got ... 73 errors next, all <code>OverflowError</code> without <code>'tcx, T</code>. Feels weird writing such a change, as normally I'd want to know very deeply the query system and the incremental parts before moving such a struct into the return value. Lets see what'll happen :)</p>",
        "id": 235492040,
        "sender_full_name": "Joonas Koivunen",
        "timestamp": 1619003883
    },
    {
        "content": "<p>today I started moving Obligation et. al. over to <code>rustc_middle</code>, still a lot of errors. the biggest one is that <code>rustc_middle::traits::SelectionError</code> derives <code>TypeFoldable</code> and <code>Lift</code>. now that I've added <code>SelectionError::Overflow(PredicateOverflow&lt;'tcx&gt;)</code> which is <code>rustc_middle::traits::select::OverflowError&lt;'tcx, ty::Predicate&lt;'tcx&gt;&gt;</code>, I'm not seeing a trivial path to impl the traits by using the derives.</p>\n<p>I'm not really certain on any if these, but if you would happen to have already explored the <code>TypeFoldable</code> and <code>Lift</code> derives, is there any point in deriving it for the smaller types which most likely do not have anything to do with typefolding or even lifting (since they are <code>'static</code>). Also, it'd seem that deriving doesn't even work for some reason.</p>",
        "id": 235541324,
        "sender_full_name": "Joonas Koivunen",
        "timestamp": 1619022718
    },
    {
        "content": "<p>hmm maybe this is a sign this is the wrong approach</p>",
        "id": 235542222,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619023011
    },
    {
        "content": "<p>do you remember why I needed to make Obligation part of OverflowError in the first place?</p>",
        "id": 235542253,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619023027
    },
    {
        "content": "<blockquote>\n<p>do you remember why I needed to make Obligation part of OverflowError</p>\n</blockquote>\n<p>not so much as \"remember\" but my hunch is that if the resolution goes from terminating version to result returning version, the existing call sites which can't handle the OverflowError will need to have the previous reporting, which used to happen like:</p>\n<ul>\n<li>canonical: re-evaluate root obligation with TraitQueryMode::Standard (expecting it to terminate) or <code>span_bug!</code></li>\n<li>standard or canonical with re-evaluation: the actual error reporting happens through:</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><code>evaluate_root_obligation (compiler/rustc_trait_selection/src/traits/select/mod.rs)\n-&gt; evaluate_predicates_recursively\n-&gt; evaluate_predicate_recursively\n-&gt; check_recursion_limit\n-&gt; report_overflow_error (compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs)\n</code></pre></div>\n<p>where we'll have:</p>\n<div class=\"codehilite\"><pre><span></span><code>match self.query_mode {\n    TraitQueryMode::Standard =&gt; {\n        self.infcx().report_overflow_error(error_obligation, true);\n    }\n    TraitQueryMode::Canonical =&gt; {\n        // in master this doesn&#39;t have error_obligation\n        return Err(OverflowError(error_obligation.to_owned()));\n    }\n}\n</code></pre></div>\n<p>So I'd imagine those callsites which cannot handle the Overflow would in future call some new helper to re-evaluate the <code>root_obligation</code>, just called from some <code>unwrap_or_else(|| &lt;here&gt;)</code> (the new helper would have to unconditionally terminate).</p>",
        "id": 235626280,
        "sender_full_name": "Joonas Koivunen",
        "timestamp": 1619073026
    },
    {
        "content": "<blockquote>\n<p>hmm maybe this is a sign this is the wrong approach</p>\n</blockquote>\n<p>I think a \"no-op\" typefoldable at least might be easy to implement, as there'd be none to typefold over but I do agree with this hunch as:</p>\n<ul>\n<li>I'm not sure will the new version be satisfactory from design standpoint as we don't yet know how many reportings need to be put back in at the callsites (I don't even know which callsites)</li>\n<li>This doesn't yet borrowcheck as it doesn't typeck at all :)</li>\n</ul>\n<p>I rebased the branch yesterday, and now the HEAD reflects the current state: <a href=\"https://github.com/koivunej/rust/commit/e14bb0517b6da4e4bd4973bfeb339d522bc864c7\">https://github.com/koivunej/rust/commit/e14bb0517b6da4e4bd4973bfeb339d522bc864c7</a></p>",
        "id": 235627065,
        "sender_full_name": "Joonas Koivunen",
        "timestamp": 1619073663
    },
    {
        "content": "<blockquote>\n<p>I rebased the branch yesterday, and now the HEAD reflects the current state: <a href=\"https://github.com/koivunej/rust/commit/e14bb0517b6da4e4bd4973bfeb339d522bc864c7\">https://github.com/koivunej/rust/commit/e14bb0517b6da4e4bd4973bfeb339d522bc864c7</a></p>\n</blockquote>\n<p>I did reorderings to make the diff more readable and force pushed: <a href=\"https://github.com/koivunej/rust/commit/557f1a029fd87ffad89d6705a233aa83d6eacee6\">https://github.com/koivunej/rust/commit/557f1a029fd87ffad89d6705a233aa83d6eacee6</a></p>",
        "id": 235637847,
        "sender_full_name": "Joonas Koivunen",
        "timestamp": 1619079512
    },
    {
        "content": "<blockquote>\n<p>So I'd imagine those callsites which cannot handle the Overflow would in future call some new helper to re-evaluate the root_obligation, just called from some unwrap_or_else(|| &lt;here&gt;) (the new helper would have to unconditionally terminate).</p>\n</blockquote>\n<p>yes, that sounds like a good plan. and that would mean we don't have to add the obligation directly to the error</p>",
        "id": 235680603,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619099463
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> - does that sound like about what you were expecting?</p>",
        "id": 235680666,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619099490
    },
    {
        "content": "<p>And the issue was <a href=\"https://github.com/rust-lang/rust/issues/81091\">rust#81091</a> (for some reason I start to remember this series of digits :D)</p>",
        "id": 235698642,
        "sender_full_name": "Joonas Koivunen",
        "timestamp": 1619105330
    },
    {
        "content": "<p>hmm, I don't think that I was expecting overflow errors to be returned from queries.</p>",
        "id": 235712222,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1619110813
    }
]