[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> I was talking with <span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span> about the rustdoc ICE in <a href=\"https://github.com/mautamu/spirv-std-3\">https://github.com/mautamu/spirv-std-3</a></p>",
        "id": 240722017,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622323343
    },
    {
        "content": "<p>which is related to trying to resolve a link in a doc comment on a proc-macro crate</p>",
        "id": 240722027,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622323358
    },
    {
        "content": "<p>while we're documenting some other crate that depends on the proc-macro</p>",
        "id": 240722034,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622323371
    },
    {
        "content": "<p>looking at the ICE, the issue appears to be caused by rustdoc loading some crate (and therefore allocating a new <code>CrateNum</code>) that the tcx doesn't know about</p>",
        "id": 240722061,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622323405
    },
    {
        "content": "<p>which is why we get an ICE in <code>tcx.crate_num(bad_def_id)</code></p>",
        "id": 240722068,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622323423
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> the root cause is <a href=\"https://github.com/rust-lang/rust/issues/83761\">https://github.com/rust-lang/rust/issues/83761</a>. The proximate cause is the hack to load crates early is missing a crate for some reason. I don't know why it would be missing</p>",
        "id": 240722147,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1622323505
    },
    {
        "content": "<p>from what I can see, rustdoc clones the resolver, uses it to resolve things (including potentially loading new crate),and then uses the original <code>TyCtxt</code> (with its original resolver)</p>",
        "id": 240722156,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622323516
    },
    {
        "content": "<p>oh, so we try to load those crates before the <code>TyCtxt</code> is created?</p>",
        "id": 240722174,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622323547
    },
    {
        "content": "<p>Yes</p>",
        "id": 240722177,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1622323555
    },
    {
        "content": "<p>Fixing the root cause is hard and will take a solid 2 months IMO, I don't think we should try to tackle that right away</p>",
        "id": 240722230,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1622323569
    },
    {
        "content": "<p>ok, that makes sense</p>",
        "id": 240722232,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622323570
    },
    {
        "content": "<p>I put in about 2 weeks on it a while back and had to stop for my mental health, I expected it to be a ton of work and it was even more than I expected</p>",
        "id": 240722248,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1622323597
    },
    {
        "content": "<p>Fixing the proximate issue should be a lot easier</p>",
        "id": 240722259,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1622323618
    },
    {
        "content": "<p>I don't really understand the MCVE they made</p>",
        "id": 240722271,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1622323630
    },
    {
        "content": "<p>I tried writing my own without a proc macro but it didn't reproduce the crash</p>",
        "id": 240722283,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1622323644
    },
    {
        "content": "<p>I think the problem is around the proc-macro there</p>",
        "id": 240722290,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1622323659
    },
    {
        "content": "<p>ok, here's my current guess</p>",
        "id": 240722292,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622323667
    },
    {
        "content": "<p>They are handled a bit differently and it impacts dependencies from what <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> told me</p>",
        "id": 240722296,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1622323677
    },
    {
        "content": "<p>the crate we're trying to link to (<code>spirv_types</code>) is referenced in two palces</p>",
        "id": 240722345,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622323693
    },
    {
        "content": "<p>one place is a normal dependency of the crate we're tryng to document (<em>not</em> a proc-macro crate)</p>",
        "id": 240722353,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622323713
    },
    {
        "content": "<p>the other place is in a doc-comment of a proc-macro crate - that proc-macro crate <em>is</em> a dependency of the crate we're trying to load</p>",
        "id": 240722364,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622323735
    },
    {
        "content": "<p>the first time through (when we try to load the crates), we fail for some reason (possibbly because of the fact that we don't load proc-macro dependencies)</p>",
        "id": 240722385,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622323789
    },
    {
        "content": "<p>during the second pass, we succeed, which means that our cloned resolver has a crate loaded that thr tcx doesn't know about</p>",
        "id": 240722450,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622323833
    },
    {
        "content": "<p>the crate <code>spirv_types</code> is only ever referenced from the proc-macro</p>",
        "id": 240722458,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622323844
    },
    {
        "content": "<p>which I think is important</p>",
        "id": 240722460,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622323847
    },
    {
        "content": "<p>yup</p>",
        "id": 240722487,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622323880
    },
    {
        "content": "<p>adding <code>use spirv_types</code> to the top of <code>lib.rs</code> fixes the ICE</p>",
        "id": 240722490,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622323889
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> that tells the resolver about it, but there's actually an even narrower workaround, you can add an intra doc link to it in <a href=\"http://lib.rs\">lib.rs</a></p>",
        "id": 240722567,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1622323970
    },
    {
        "content": "<p>And that will be picked up by rustdoc's early loader</p>",
        "id": 240722574,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1622323983
    },
    {
        "content": "<p>oh, I see the problem</p>",
        "id": 240722576,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622323983
    },
    {
        "content": "<p>I'm pretty sure that importing the proc-macro does <em>not</em> affect the AST in the normal way</p>",
        "id": 240722608,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622324037
    },
    {
        "content": "<p>Can a crate be loaded twice and mess up IDs somehow?</p>",
        "id": 240722610,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1622324040
    },
    {
        "content": "<p>as it does for other imports</p>",
        "id": 240722611,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622324040
    },
    {
        "content": "<p>so the early collector doesn't see it</p>",
        "id": 240722650,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622324049
    },
    {
        "content": "<p>let me test this</p>",
        "id": 240722651,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622324051
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span> you can test if that's the issue or not, just add a debug statement to the early loader that prints the link</p>",
        "id": 240722673,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1622324099
    },
    {
        "content": "<p>If you don't see spirv_types that means duplicate CrateIds aren't related (whether or not they exist; they still won't be relevant)</p>",
        "id": 240722688,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1622324128
    },
    {
        "content": "<p>gonna check it then</p>",
        "id": 240722695,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1622324135
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> How does <code>IntraLinkCrateLoader</code> process attributes on itms imported from other crates?</p>",
        "id": 240722791,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622324265
    },
    {
        "content": "<p>e.g. if I do <code>use some_other_crate::SomeStruct;</code></p>",
        "id": 240722800,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622324277
    },
    {
        "content": "<p>and <code>SomeStruct</code> has a doc comment link referencing <code>third_party_crate</code></p>",
        "id": 240722842,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622324288
    },
    {
        "content": "<p>how does <code>third_party_crate</code> get loaded?</p>",
        "id": 240722847,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622324296
    },
    {
        "content": "<p>I don't know. However the code is written; I think I assumed that would work because the attribute still gets loaded bit I haven't tested</p>",
        "id": 240722850,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1622324310
    },
    {
        "content": "<p>reexported-items in rustdoc is kinda tape over tape currently...</p>",
        "id": 240722863,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1622324349
    },
    {
        "content": "<p>that appears to be the problem here</p>",
        "id": 240722878,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622324394
    },
    {
        "content": "<p>I'm not sure how that even works for normal items</p>",
        "id": 240722884,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622324401
    },
    {
        "content": "<p><code>IntraLinkCrateLoader</code> only implements <code>visit_attribute</code> and <code>visit_item</code></p>",
        "id": 240722928,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622324417
    },
    {
        "content": "<p>which isn't going to try to 'walk through' any <code>use</code> statements</p>",
        "id": 240722933,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622324430
    },
    {
        "content": "<p>I only tried to add <code>visit_foreign</code> and same for macros</p>",
        "id": 240722941,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1622324459
    },
    {
        "content": "<p>I wonder if I didn't try <code>visit_use_tree</code> unsuccessfully too...</p>",
        "id": 240722967,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1622324515
    },
    {
        "content": "<p>the answer is that it doesn't work :)</p>",
        "id": 240723013,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622324536
    },
    {
        "content": "<p>I changed the <code>macros</code> crate to a normal crate (exporting a struct), and got the same ICE</p>",
        "id": 240723015,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622324550
    },
    {
        "content": "<p>Ah right I did! The problem was that I can't get a <code>DefId</code> from a <code>NodeId</code> but ohterwise it didn't change anything</p>",
        "id": 240723021,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1622324569
    },
    {
        "content": "<p>I'll push up a fork</p>",
        "id": 240723026,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622324572
    },
    {
        "content": "<p>oh, that's interesting</p>",
        "id": 240723032,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1622324580
    },
    {
        "content": "<p>so the problem is reexported items once again</p>",
        "id": 240723036,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1622324591
    },
    {
        "content": "<p><a href=\"https://github.com/Aaron1011/spirv-std-3/tree/no-macro\">https://github.com/Aaron1011/spirv-std-3/tree/no-macro</a></p>",
        "id": 240723043,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622324614
    },
    {
        "content": "<p>so, the simplest solution would be to skip processing of intra-doc links on items imported from another crate</p>",
        "id": 240723055,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622324637
    },
    {
        "content": "<p>which should hopefully be a small enough diff for a beta backport</p>",
        "id": 240723106,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622324666
    },
    {
        "content": "<p>That is a breaking change</p>",
        "id": 240723112,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1622324672
    },
    {
        "content": "<p>It means all the links will be broken in the docs</p>",
        "id": 240723121,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1622324683
    },
    {
        "content": "<p>oh</p>",
        "id": 240723127,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622324688
    },
    {
        "content": "<p>because re-exported links work if the crate is already imported?</p>",
        "id": 240723131,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622324696
    },
    {
        "content": "<p>Because docs on the original  are still displayed whenever docs are inlined</p>",
        "id": 240723133,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1622324697
    },
    {
        "content": "<p>I see</p>",
        "id": 240723150,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622324717
    },
    {
        "content": "<p>a more complicated solution would be to disable crate loading in the TyCtxt resolver</p>",
        "id": 240723157,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622324740
    },
    {
        "content": "<p>and return an error whenever it would occur</p>",
        "id": 240723160,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622324748
    },
    {
        "content": "<p>which will cause us to fail to resolve the problematic links, instead of producing an ICE</p>",
        "id": 240723204,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622324766
    },
    {
        "content": "<p>That is also not very satisfying; the links will still be broken - yeah</p>",
        "id": 240723207,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1622324773
    },
    {
        "content": "<p>did they ever work?</p>",
        "id": 240723216,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622324795
    },
    {
        "content": "<p>Is it not possible to load the attributes of the original item before the tcx is built?</p>",
        "id": 240723217,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1622324796
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> yes, back when rustdoc loaded all crates unconditionally</p>",
        "id": 240723227,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1622324811
    },
    {
        "content": "<p>the specific kind of case in that repository, I mean - not the general re-exported links where the crate is already loaded</p>",
        "id": 240723228,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622324813
    },
    {
        "content": "<p>well, an alternate solution would be to try to 'fully explore' all of the items in the imported visitor</p>",
        "id": 240723240,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622324847
    },
    {
        "content": "<p>which I think would mean trying to 'follow' <code>use</code> statements in the AST visitor</p>",
        "id": 240723249,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622324863
    },
    {
        "content": "<p>not sure how hard that would be</p>",
        "id": 240723253,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622324867
    },
    {
        "content": "<p>I tried but got stuck quicky trying to get something out of the <code>NodeId</code>...</p>",
        "id": 240723313,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1622324901
    },
    {
        "content": "<p>I was actually able to get a <code>DefId</code> from the <code>NodeId</code>, but I think it was referring to the <code>use</code> and not to the item imported (but maybe I'm wrong there)</p>",
        "id": 240723356,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1622325000
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/266220-rustdoc/topic/crate.20loading.20during.20link.20resolution/near/240723240\">said</a>:</p>\n<blockquote>\n<p>well, an alternate solution would be to try to 'fully explore' all of the items in the imported visitor</p>\n</blockquote>\n<p>I think it's worth trying, at least for an hour or so.</p>\n<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> interested to hear your opinions on the root cause btw - I suggested making the resolver still available in the TyCtxt, which <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> was hesitant to do because it's a giant change. But the rustdoc change he suggested is at least as big and doesn't help with long-term goals the way making the resolver always available does. <a href=\"https://github.com/rust-lang/rust/issues/83761#issuecomment-812723093\">https://github.com/rust-lang/rust/issues/83761#issuecomment-812723093</a></p>\n<p>Probably the next step forward for that is to make an MCP and then dedicate lots of time to getting it working.</p>",
        "id": 240723466,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1622325123
    },
    {
        "content": "<p>I don't have a strong opinion on that</p>",
        "id": 240723506,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622325180
    },
    {
        "content": "<p>I know very little about how how path resolution works</p>",
        "id": 240723516,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622325191
    },
    {
        "content": "<p>np, I will try to do some reading on proposals for making path resolution incremental so I can summarize them in the MCP</p>",
        "id": 240723531,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1622325234
    },
    {
        "content": "<p>Thanks to both of you. In the meantime, if we can't make a fix, there is still <a href=\"https://github.com/rust-lang/rust/pull/85749\">https://github.com/rust-lang/rust/pull/85749</a> (which revert to loading ALL crates)</p>",
        "id": 240723598,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1622325339
    },
    {
        "content": "<p>We still have a few weeks before next release though, so let's just keep it as backup</p>",
        "id": 240723644,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1622325364
    },
    {
        "content": "<p>I see there's some progress on minimizing <a href=\"https://github.com/rust-lang/rust/issues/84738\">#84738</a>, could someone post a minimized self-contained reproduction to <a href=\"https://github.com/rust-lang/rust/issues/84738\">https://github.com/rust-lang/rust/issues/84738</a>?</p>",
        "id": 240747900,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1622368036
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 240752645,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1622376342
    },
    {
        "content": "<p>Done</p>",
        "id": 240752800,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1622376546
    }
]