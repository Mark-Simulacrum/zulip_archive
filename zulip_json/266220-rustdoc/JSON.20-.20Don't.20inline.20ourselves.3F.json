[
    {
        "content": "<p>Most remaining JSON ICEs relate to items with the same DefId being visible in multiple places. One way to handle this would be for JSON to never inline items itself. It would track inlined imports as just imports, and in general output closer to source code than HTML. Another would be to disambiguate IDs somehow based on source code.<br>\nPros:</p>\n<ul>\n<li>Fixes remaining ICEs</li>\n<li>\n<p>Gives the user more control / knowledge<br>\nCons:</p>\n</li>\n<li>\n<p>JSON must either always document private, or must use a special indicator for 'defined in a private location'</p>\n</li>\n<li>Users must re-implement inlining</li>\n<li>Some work on our end to add this special-casing to code paths</li>\n</ul>\n<p>Alternatively, we could try to find a way to disambiguate IDs beyond just DefId for inlined cases<br>\nPros:</p>\n<ul>\n<li>Less invasive</li>\n<li>\n<p>Users don't need to think about inlining<br>\nCons:</p>\n</li>\n<li>\n<p>Reduces user control - They actually can't know if an item the same definition or not necessarily</p>\n</li>\n<li>I have no idea what this would look like</li>\n</ul>",
        "id": 269894258,
        "sender_full_name": "CraftSpider",
        "timestamp": 1643497111
    },
    {
        "content": "<p>TL;DR - My two solutions so far are 'invasive but not hard to design' and 'less invasive, but I don't know how to implement'</p>",
        "id": 269894394,
        "sender_full_name": "CraftSpider",
        "timestamp": 1643497232
    },
    {
        "content": "<p>I would be in favor to track them as imports (ie not inlined) because this would means that re-export could be properly handle instead of the  many hacky things that I tried to do to properly handle them.</p>",
        "id": 269894523,
        "sender_full_name": "Urgau",
        "timestamp": 1643497409
    },
    {
        "content": "<p>is inlining related to re-exports? I.e. the process of making a re-export show up in its re-exported place rather than the original place? Seems like that's a big source of bugs in the HTML parts of rustdoc too.</p>\n<p>I'm in favor of any way we can simplify - which argues in favor of your first proposal. Rather than always documenting private items in JSON, how about only documenting private items that are targets of a re-export?</p>",
        "id": 269898708,
        "sender_full_name": "jsha",
        "timestamp": 1643503053
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315412\">@jsha</span> That was roughly my idea. Given a private item publically re-exported, we document it as a private item correctly and then otherwise document the public re-export as you'd expect. Given a public-in-private item, we document it with a special indicator that its parent module is private and has not been documented.</p>",
        "id": 269900347,
        "sender_full_name": "CraftSpider",
        "timestamp": 1643505001
    },
    {
        "content": "<p>Given the positive response so far, I think I'll start work on the idea. I know the first couple places it needs handled - the AST walker, which does local inlining, and then in clean, which does external crate inlining. Then the private pruning pass will need some additions to not prune the right items.</p>",
        "id": 269900510,
        "sender_full_name": "CraftSpider",
        "timestamp": 1643505180
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315412\">jsha</span> <a href=\"#narrow/stream/266220-rustdoc/topic/JSON.20-.20Don't.20inline.20ourselves.3F/near/269898708\">said</a>:</p>\n<blockquote>\n<p>is inlining related to re-exports? I.e. the process of making a re-export show up in its re-exported place rather than the original place? Seems like that's a big source of bugs in the HTML parts of rustdoc too.</p>\n</blockquote>\n<p>Yes, inlining is what you described. And yes, it is a big source of bugs.</p>",
        "id": 269972736,
        "sender_full_name": "Noah Lev",
        "timestamp": 1643595779
    },
    {
        "content": "<p>I feel a bit confused about the concept of not inlining only in the JSON format, though. My understanding is that inlining occurs before the JSON backend (or the HTML backend, for that matter) is run.</p>",
        "id": 269972748,
        "sender_full_name": "Noah Lev",
        "timestamp": 1643595808
    },
    {
        "content": "<p>I.e., inlining is output formatâ€“independent.</p>",
        "id": 269972755,
        "sender_full_name": "Noah Lev",
        "timestamp": 1643595827
    },
    {
        "content": "<p>It occurs during cleaning, but the context is already built and aware of which backend is running. That's why I marked it as 'invasive' though, it does involve adding backend-specificity to passes. On the other hand, I do think it's the better option.</p>",
        "id": 269975819,
        "sender_full_name": "CraftSpider",
        "timestamp": 1643599627
    },
    {
        "content": "<p>Update from implementation: It seems that actually, the passes don't need to be made aware of anything. The nature of how we currently store stripped items gives me enough info in JSON to do what is needed, only change is to just not inline in JSON</p>",
        "id": 270071795,
        "sender_full_name": "CraftSpider",
        "timestamp": 1643650636
    },
    {
        "content": "<p>Opened a PR: <a href=\"https://github.com/rust-lang/rust/issues/93518\">#93518</a></p>",
        "id": 270096306,
        "sender_full_name": "CraftSpider",
        "timestamp": 1643659579
    },
    {
        "content": "<p>I work on the AWS SDK for Rust, and I've built a tool for our CI that relies on rustdoc's JSON output to validate which external types are allowed in the public API. I'm keenly interested in seeing CraftSpider's PR (<a href=\"https://github.com/rust-lang/rust/issues/93518\">#93518</a>) merged since we observe some of these ICEs on a couple of our crates, which prevents us from using this tool on all of them.</p>\n<p>I see in the PR that it's waiting for <a href=\"https://github.com/rust-lang/rust/issues/93522\">#93522</a> and <a href=\"https://github.com/rust-lang/rust/issues/93524\">#93524</a> to be fixed. Are these required for merging this PR, or are these nice to have? Is there anything I can do to help out?</p>",
        "id": 274596278,
        "sender_full_name": "John DiSanti",
        "timestamp": 1646768898
    },
    {
        "content": "<p>I need to look into Urgau's reported bug about some things still inlining, and I was hoping for one of the two to be fixed, but I guess they might not be 100% blockers if you have an immediate use-case. Either one would provide a nice solution, but I believe the existing information is available, just more difficult to use without them.</p>",
        "id": 274914360,
        "sender_full_name": "CraftSpider",
        "timestamp": 1646957383
    },
    {
        "content": "<p>I made some headway on the path work a bit ago, before getting distracted with other things (Improved JSON test stuff). Not tonight, but this weekend I'll try to spend some more time looking into it.</p>",
        "id": 274914388,
        "sender_full_name": "CraftSpider",
        "timestamp": 1646957399
    },
    {
        "content": "<p>Sorry for slightly off topic , but would be great if you had time to also take another look at <a href=\"https://github.com/rust-lang/rust/pull/94150\">https://github.com/rust-lang/rust/pull/94150</a>, which you already approved once, it has just been rebased </p>\n<p>John, is that project public by any chance? I didn't  find it after a quick look at your GitHub. I would be interested in exploration your implementation as I am working on a similar project</p>",
        "id": 274934071,
        "sender_full_name": "Martin Nordholts",
        "timestamp": 1646977443
    },
    {
        "content": "<p>Yeah, you can find it here: <a href=\"https://github.com/awslabs/smithy-rs/tree/main/tools/api-linter\">https://github.com/awslabs/smithy-rs/tree/main/tools/api-linter</a></p>\n<p>I'm hoping to polish it up, rename it, and make it more generally usable by library authors throughout the community.</p>",
        "id": 275006138,
        "sender_full_name": "John DiSanti",
        "timestamp": 1647019816
    }
]