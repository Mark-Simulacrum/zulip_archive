[
    {
        "content": "<p>Hi, I am working on <a href=\"https://github.com/Enselic/cargo-public-items\">tooling</a> to support diffing the public API of library crates across versions via rustdoc JSON. For example, to diff the API between versions v0.9.0 and v0.10.0 of <a href=\"https://github.com/aDotInTheVoid/rustdoc-types/\">https://github.com/aDotInTheVoid/rustdoc-types/</a> you currently can do this in a checkout of its repo:</p>\n<div class=\"codehilite\" data-code-language=\"txt\"><pre><span></span><code>% cargo public-items --diff-git-checkouts v0.9.0 v0.10.0\n## Removed items from the public API\n* `pub struct field rustdoc_types::GenericParamDefKind::Const::ty: Type`\n* `pub struct field rustdoc_types::Trait::implementors: Vec&lt;Id&gt;`\n* `pub struct field rustdoc_types::WherePredicate::BoundPredicate::ty: Type`\n\n## Changed items in the public API\n(none)\n\n## Added items to the public API\n* `pub struct field rustdoc_types::GenericParamDefKind::Const::type_: Type`\n* `pub struct field rustdoc_types::Trait::implementations: Vec&lt;Id&gt;`\n* `pub struct field rustdoc_types::WherePredicate::BoundPredicate::type_: Type`\n</code></pre></div>\n<p>I want to make sure that my tool properly renders all possible syntactic variations of items. My question is: Does anyone here know of any test-crate with an API that uses \"all\" syntactic features of Rust?</p>\n<p>I have experimented with running my tool on all crates in <a href=\"https://github.com/rust-lang/rust/tree/master/src/test/rustdoc\">https://github.com/rust-lang/rust/tree/master/src/test/rustdoc</a> which does cover a wide range of item kinds and variations (with and without generics etc etc), but I found it too inconvenient to handle hundreds of crates in my repo.</p>",
        "id": 277140998,
        "sender_full_name": "Martin Nordholts",
        "timestamp": 1648645524
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"477660\">@Martin Nordholts</span> not sure what you mean by syntactic in this context, but you could make one manually by going through hir::Node and making sure you have a test case for each variant</p>",
        "id": 277141489,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648645712
    },
    {
        "content": "<p>(also, it would be a cool feature for your tool to detect renames instead of showing added/removed :)</p>",
        "id": 277141653,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648645790
    }
]