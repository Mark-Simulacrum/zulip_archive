[
    {
        "content": "<p>I've started working on a tool (<a href=\"https://github.com/aDotInTheVoid/jsondocckng\">link</a>) to replace the existing <code>jsondocck</code> /  <code>check_missing_items.py</code></p>\n<p>The idea is you write <code>module.rs</code> and <code>module_test.rs</code> and it will convert <code>module.rs</code> to a json <code>Crate</code>, and then <code>module_test.rs</code> exposes <code>pub(super) fn test(k: TCrate)</code> (TCrate is a conveniance wrapper over Crate`)</p>\n<h2>Advantages</h2>\n<ul>\n<li>Rust is a more expressive language than jsonpath, so writing tests is easier</li>\n<li>New Contributors dont need to be taught a new language to write tests</li>\n<li>Easier to maintain, as we get type errors when changing the format, rather than hard to diagnose json errors</li>\n<li>Easer to maintain, as we can create helper utilities to abstract away common paterns</li>\n</ul>\n<h2>Disadvantages</h2>\n<ul>\n<li>We move away from testing on the Raw Json, to the serialized rust repr</li>\n<li>Not currently complete</li>\n<li>Would we work to integrate</li>\n<li>Risk of adding bugs, as less mature</li>\n</ul>\n<p>cc <span class=\"user-mention\" data-user-id=\"319144\">@CraftSpider</span></p>",
        "id": 272462046,
        "sender_full_name": "Nixon Enraght-Moony",
        "timestamp": 1645220938
    },
    {
        "content": "<p>I've had a lot of trouble using the current jsondocck, so this sounds like a good idea to me.</p>",
        "id": 272471470,
        "sender_full_name": "Noah Lev",
        "timestamp": 1645225966
    },
    {
        "content": "<p>Why the <code>TCrate</code> wrapper though?</p>",
        "id": 272471532,
        "sender_full_name": "Noah Lev",
        "timestamp": 1645226000
    },
    {
        "content": "<p>It hosts higher level methods that dont make sense to put on <code>Crate</code></p>\n<p>eg <code> let foo = k.load_root::&lt;Enum&gt;(\"Foo\");</code></p>",
        "id": 272473731,
        "sender_full_name": "Nixon Enraght-Moony",
        "timestamp": 1645227416
    },
    {
        "content": "<p>Why not just create a trait that you implement on <code>Crate</code>?</p>",
        "id": 272473768,
        "sender_full_name": "Noah Lev",
        "timestamp": 1645227449
    },
    {
        "content": "<p>You could, but it feels like an abuse of extension traits, and a wrapper feels more natural</p>",
        "id": 272474817,
        "sender_full_name": "Nixon Enraght-Moony",
        "timestamp": 1645228266
    },
    {
        "content": "<p>I'm in support of the idea. I actually wrote a whole JsonPath crate, hoping to eventually replace the current one and fix several of its issues, but this looks like a better long-term solution. I think the cons are either acceptable, or will be mitigated by further work.</p>",
        "id": 272474923,
        "sender_full_name": "CraftSpider",
        "timestamp": 1645228342
    },
    {
        "content": "<p>And yeah, I think an extension trait would be fitting, as long as TCrate doesn't need any extra state.</p>",
        "id": 272474970,
        "sender_full_name": "CraftSpider",
        "timestamp": 1645228377
    },
    {
        "content": "<p>Ah, response before I sent to the extension idea :P<br>\nI'm fine with the wrapper if you really think it's better, this isn't something I'm too opinionated on either way.</p>",
        "id": 272475087,
        "sender_full_name": "CraftSpider",
        "timestamp": 1645228456
    },
    {
        "content": "<p>I don't really see how this is an abuse of extension traits, and I'm not sure why a wrapper would be better. Unless <code>TCrate</code> has extra data, there's no need for it?</p>",
        "id": 272475272,
        "sender_full_name": "Noah Lev",
        "timestamp": 1645228624
    },
    {
        "content": "<p>Another reason not do to a wrapper, many methods arnt part of the \"public\" (to tests) api, (eg the internals of validation), and I dont want to expose then throught the extension trait</p>",
        "id": 272475672,
        "sender_full_name": "Nixon Enraght-Moony",
        "timestamp": 1645228864
    },
    {
        "content": "<p>I've opened <a href=\"https://github.com/rust-lang/rust/issues/94140\">https://github.com/rust-lang/rust/issues/94140</a> to track this</p>",
        "id": 272476637,
        "sender_full_name": "Nixon Enraght-Moony",
        "timestamp": 1645229530
    },
    {
        "content": "<p>Hmm, I get the exposure concern. That swings me more towards a wrapper being a good idea.</p>",
        "id": 272476699,
        "sender_full_name": "CraftSpider",
        "timestamp": 1645229595
    },
    {
        "content": "<p>I'm confused about what methods you don't want to expose to the testsuite. Where are these methods defined? Isn't rustdoc-json-types just types?</p>",
        "id": 272484402,
        "sender_full_name": "Noah Lev",
        "timestamp": 1645236489
    },
    {
        "content": "<p>Oh, I hadn't pushed them yet, sorry</p>",
        "id": 272484896,
        "sender_full_name": "Nixon Enraght-Moony",
        "timestamp": 1645237018
    },
    {
        "content": "<p>See <a href=\"https://github.com/aDotInTheVoid/jsondocckng/blob/trunk/src/validate.rs\">https://github.com/aDotInTheVoid/jsondocckng/blob/trunk/src/validate.rs</a></p>",
        "id": 272484899,
        "sender_full_name": "Nixon Enraght-Moony",
        "timestamp": 1645237021
    },
    {
        "content": "<p><code>TCrate::validate</code> should be exposed, <code>TCrate::validate_*</code> shouldn't be, and the extension trait won't let us do this</p>",
        "id": 272484925,
        "sender_full_name": "Nixon Enraght-Moony",
        "timestamp": 1645237059
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/94140#issuecomment-1047957668\">More thaughs on github</a>. Where's the right place to ask questions about bootstrap/rustbuild/compiletest?</p>",
        "id": 272848583,
        "sender_full_name": "Nixon Enraght-Moony",
        "timestamp": 1645555484
    },
    {
        "content": "<p>I'd try asking in... t-compiler/help maybe? I am hoping to look into the integration of your stuff to compiletest myself at some point soon, as the existing stuff can handle things like 'custom compile flags' and 'one crate per test' stuff, so it may make your implementation simpler</p>",
        "id": 272849979,
        "sender_full_name": "CraftSpider",
        "timestamp": 1645556117
    },
    {
        "content": "<p>Yeah, I deffinatly want to put <code>compiletest</code> in charge of invoking rustdoc</p>",
        "id": 272850155,
        "sender_full_name": "Nixon Enraght-Moony",
        "timestamp": 1645556188
    },
    {
        "content": "<p>Here's the existing jsondocck invocation <a href=\"https://github.com/rust-lang/rust/blob/68369a041cea809a87e5bd80701da90e0e0a4799/src/tools/compiletest/src/runtest.rs#L2412\">https://github.com/rust-lang/rust/blob/68369a041cea809a87e5bd80701da90e0e0a4799/src/tools/compiletest/src/runtest.rs#L2412</a></p>",
        "id": 272850316,
        "sender_full_name": "CraftSpider",
        "timestamp": 1645556268
    },
    {
        "content": "<p>Some of the other stuff in that file may be helpful for figuring out how to handle compiling crates for testing 'alongside'. The existing 'auxiliary' infrastructure may be what you want to support the single common utilities.</p>",
        "id": 272850566,
        "sender_full_name": "CraftSpider",
        "timestamp": 1645556364
    },
    {
        "content": "<p>Though it may also not be, I'm not sure</p>",
        "id": 272850604,
        "sender_full_name": "CraftSpider",
        "timestamp": 1645556377
    },
    {
        "content": "<p>Started working on this: <a href=\"https://github.com/aDotInTheVoid/rust/tree/jsondocck-ng\">https://github.com/aDotInTheVoid/rust/tree/jsondocck-ng</a></p>",
        "id": 275039050,
        "sender_full_name": "Nixon Enraght-Moony",
        "timestamp": 1647035749
    }
]