[
    {
        "content": "<p>A couple weeks ago <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> added intra-doc link targets (not sure what to call them <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span>) for \"non-path primitives\" like <code>slice</code> and <code>pointer</code>. The <code>pointer</code> primitive has the intra-doc aliases <code>*const</code>, <code>*mut</code>, and <code>*</code> (though it might be removed: <a href=\"https://github.com/rust-lang/rust/issues/80892\">#80892</a>) as well. However, the <code>pointer</code> primitive feels like a bit of a footgun because things like <code>pointer::is_null</code> actually resolve to <code>&lt;*const T&gt;::is_null</code>. What should we do about it?</p>",
        "id": 222248720,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610322818
    },
    {
        "content": "<p>(We have a bit of time to figure this out because it hasn't hit beta yet btw.)</p>",
        "id": 222248775,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610322873
    },
    {
        "content": "<blockquote>\n<p>However, the pointer primitive feels like a bit of a footgun because things like pointer::is_null actually resolve to &lt;*const T&gt;::is_null. </p>\n</blockquote>\n<p>err, well, they happen to resolve that way for implementation reasons, but they could just as easily have been <code>*mut</code></p>",
        "id": 222249951,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610324652
    },
    {
        "content": "<p>I think the practical thing to do is slap this behind a feature gate and make it a problem for later</p>",
        "id": 222249962,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610324675
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/266220-rustdoc/topic/intra-doc.20.60pointer.60.20primitive/near/222249951\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>However, the pointer primitive feels like a bit of a footgun because things like pointer::is_null actually resolve to &lt;*const T&gt;::is_null. </p>\n</blockquote>\n<p>err, well, they happen to resolve that way for implementation reasons, but they could just as easily have been <code>*mut</code></p>\n</blockquote>\n<p>Yeah, that's my point: there's no canonical item to link to when you see <code>pointer::is_null</code>.</p>",
        "id": 222251103,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610326521
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/266220-rustdoc/topic/intra-doc.20.60pointer.60.20primitive/near/222249962\">said</a>:</p>\n<blockquote>\n<p>I think the practical thing to do is slap this behind a feature gate and make it a problem for later</p>\n</blockquote>\n<p>Should I open an issue? Also, can you/do you want to do it?</p>",
        "id": 222251107,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610326547
    },
    {
        "content": "<p>I can do it. Feel free to open an issue (I plan to have this done tonight, but in case not it should definitely be done before <a href=\"https://github.com/rust-lang/rust/pull/80181\">https://github.com/rust-lang/rust/pull/80181</a> hits beta).</p>",
        "id": 222252610,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610328940
    },
    {
        "content": "<p>Issue: <a href=\"https://github.com/rust-lang/rust/issues/80896\">#80896</a></p>",
        "id": 222253687,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610330580
    }
]