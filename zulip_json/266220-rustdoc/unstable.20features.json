[
    {
        "content": "<p>Rustdoc has a lot of unstable features. A lot of them haven't gone through RFC and are of questionable utility (is anyone actually using <code>--disable-minification</code> or <code>--sort-modules-by-appearance</code>?). I think we should go through them and sort them into 3 categories:</p>\n<ul>\n<li>should stabilize soon, just need feedback from people using them on nightly</li>\n<li>need an RFC to keep</li>\n<li>burn with fire</li>\n</ul>\n<p>and to avoid people getting mad their favorite feature is being removed we can say \"we'll readd this if it goes through RFC\".</p>\n<p>I have opinions on which should stay and go, but before I list them all, does that basic idea sound good?</p>",
        "id": 260579378,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636298173
    },
    {
        "content": "<p>here are the current unstable options:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ rg &#39;unstable\\(&quot;&#39; src/librustdoc/lib.rs\n291:        unstable(&quot;extern-html-root-url&quot;, |o| {\n300:        unstable(&quot;extern-html-root-takes-precedence&quot;, |o| {\n325:        unstable(&quot;document-hidden-items&quot;, |o| {\n332:        unstable(&quot;test-run-directory&quot;, |o| {\n376:        unstable(&quot;markdown-before-content&quot;, |o| {\n385:        unstable(&quot;markdown-after-content&quot;, |o| {\n410:        unstable(&quot;Z&quot;, |o| {\n414:        unstable(&quot;playground-url&quot;, |o| {\n423:        unstable(&quot;display-doctest-warnings&quot;, |o| {\n433:        unstable(&quot;sort-modules-by-appearance&quot;, |o| {\n450:        unstable(&quot;default-setting&quot;, |o| {\n471:        unstable(&quot;resource-suffix&quot;, |o| {\n510:        unstable(&quot;disable-minification&quot;, |o| {\n528:        unstable(&quot;index-page&quot;, |o| {\n531:        unstable(&quot;enable-index-page&quot;, |o| {\n534:        unstable(&quot;static-root-path&quot;, |o| {\n543:        unstable(&quot;disable-per-crate-search&quot;, |o| {\n550:        unstable(&quot;persist-doctests&quot;, |o| {\n558:        unstable(&quot;show-coverage&quot;, |o| {\n565:        unstable(&quot;enable-per-target-ignores&quot;, |o| {\n572:        unstable(&quot;runtool&quot;, |o| {\n580:        unstable(&quot;runtool-arg&quot;, |o| {\n588:        unstable(&quot;test-builder&quot;, |o| {\n591:        unstable(&quot;check&quot;, |o| o.optflagmulti(&quot;&quot;, &quot;check&quot;, &quot;Run rustdoc checks&quot;)),\n592:        unstable(&quot;generate-redirect-map&quot;, |o| {\n599:        unstable(&quot;emit&quot;, |o| {\n607:        unstable(&quot;no-run&quot;, |o| {\n610:        unstable(&quot;show-type-layout&quot;, |o| {\n613:        unstable(&quot;nocapture&quot;, |o| {\n616:        unstable(&quot;generate-link-to-definition&quot;, |o| {\n623:        unstable(&quot;scrape-examples-output-path&quot;, |o| {\n631:        unstable(&quot;scrape-examples-target-crate&quot;, |o| {\n639:        unstable(&quot;with-examples&quot;, |o| {\n$ rg debugging_opts src/librustdoc/lib.rs\nsrc/librustdoc/clean/mod.rs\n1364:    if !cx.tcx.sess.opts.debugging_opts.normalize_docs {\n$ rg is_unstable_enabled src/librustdoc/ -C2\nsrc/librustdoc/config.rs\n393-        if !matches!(matches.opt_str(&quot;output-format&quot;).as_deref(), None | Some(&quot;html&quot;))\n394-            &amp;&amp; !matches.opt_present(&quot;show-coverage&quot;)\n395:            &amp;&amp; !nightly_options::is_unstable_enabled(matches)\n396-        {\n397-            rustc_session::early_error(\n$ rg doc compiler/rustc_feature/src/active.rs\n    /// Allows `#[doc(notable_trait)]`.\n    /// Renamed from `doc_spotlight`.\n    (active, doc_notable_trait, &quot;1.52.0&quot;, Some(45040), None),\n    /// Allows `#[doc(cfg(...))]`.\n    (active, doc_cfg, &quot;1.21.0&quot;, Some(43781), None),\n    /// Allows `#[doc(masked)]`.\n    (active, doc_masked, &quot;1.21.0&quot;, Some(44027), None),\n    /// Allows using `#[doc(keyword = &quot;...&quot;)]`.\n    (active, doc_keyword, &quot;1.28.0&quot;, Some(51315), None),\n    /// Allows using `pointer` and `reference` in intra-doc links\n    (active, intra_doc_pointers, &quot;1.51.0&quot;, Some(80896), None),\n    /// Allows using doc(primitive) without a future-incompat warning\n    (active, doc_primitive, &quot;1.56.0&quot;, Some(88070), None),\n    /// Allows `#[doc(cfg_hide(...))]`.\n    (active, doc_cfg_hide, &quot;1.57.0&quot;, Some(43781), None),\n    /// Tells rustdoc to automatically generate `#[doc(cfg(...))]`.\n    (active, doc_auto_cfg, &quot;1.58.0&quot;, Some(43781), None),\n</code></pre></div>",
        "id": 260579608,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636298461
    },
    {
        "content": "<p>(a bunch of these don't even have tracking issues)</p>",
        "id": 260580231,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636299163
    },
    {
        "content": "<p>Sounds good to me!</p>",
        "id": 260581517,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1636300768
    },
    {
        "content": "<p>I like the general concept. I have used <code>--disable-minification</code> during rustdoc dev. It's been useful so that when I load a page in the browser and look at CSS or JS, it actually has multiple lines. I also used it so I could edit CSS and JS in-place in a doc tree, then copy them back into the rustdoc source when I was satisfied. However, I'm okay getting rid of it for now. What I really want long term is a rustdoc \"dev mode\" that does a few things:</p>\n<ul>\n<li>Live-reloads JS and CSS without having to rebuild rustdoc</li>\n<li>Disables minification</li>\n</ul>\n<p>Also, a bit of tangent: right now we transform our main CSS and JS before display. That makes it hard to edit JS and CSS \"in-place\" and copy it back, since you wind up with spurious diffs. I'd love to figure out a way for our main CSS and JS to get copied straight through, and have the small stuff that needs modifications come in somewhere else - maybe inline, or from a smaller auxiliary file.</p>",
        "id": 260582615,
        "sender_full_name": "jsha",
        "timestamp": 1636301957
    },
    {
        "content": "<p>yeah, adding a compile-time \"dev mode\" feature seems like a better approach than exposing this to all users</p>",
        "id": 260582733,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636302110
    },
    {
        "content": "<p>Oh my, that is a lot of unstable features!</p>",
        "id": 260584692,
        "sender_full_name": "Noah Lev",
        "timestamp": 1636304606
    },
    {
        "content": "<p>Trimming them down sounds good.</p>",
        "id": 260584695,
        "sender_full_name": "Noah Lev",
        "timestamp": 1636304613
    },
    {
        "content": "<p>Some of them might be unstable because they're only used internally (e.g., in <code>std</code>), I think.</p>",
        "id": 260584763,
        "sender_full_name": "Noah Lev",
        "timestamp": 1636304654
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Noah Lev</span> <a href=\"#narrow/stream/266220-rustdoc/topic/unstable.20features/near/260584763\">said</a>:</p>\n<blockquote>\n<p>Some of them might be unstable because they're only used internally (e.g., in <code>std</code>), I think.</p>\n</blockquote>\n<p>definitely - but I think at a minimum they should have a tracking issue explaining why they're necessary, and some of them can hopefully be removed at some point (e.g. <code>--emit=toolchain-specific</code> should go away once <a href=\"https://github.com/rust-lang/docs.rs/issues/1181\">https://github.com/rust-lang/docs.rs/issues/1181</a> is fixed)</p>",
        "id": 260735679,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636415318
    },
    {
        "content": "<p>I wrote up a draft of how I was going to categorize these and somehow deleted it by accident :( will try to make time sometime in the next week</p>",
        "id": 260736013,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636415580
    },
    {
        "content": "<p>following up on this, since <a href=\"https://github.com/rust-lang/rust/pull/92273\">https://github.com/rust-lang/rust/pull/92273</a> reminded me of it: I'd like to suggest that we do FCP for new unstable flags / features when they're first implemented, rather than when stabilizing</p>",
        "id": 266072186,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1640460493
    },
    {
        "content": "<p>we could \"enforce\" that by moving the flags in <a href=\"http://lib.rs\">lib.rs</a> out to a separate <a href=\"http://flags.rs\">flags.rs</a> file and having highfive ping either the reviewer or the whole team to say it should go through FCP</p>",
        "id": 266072279,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1640460697
    },
    {
        "content": "<p>oh and merry christmas all <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 266072409,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1640460904
    },
    {
        "content": "<p>I think moving the flags into a separate file is a good idea, but I don't think we should change when we do our FCP.</p>",
        "id": 266072791,
        "sender_full_name": "Noah Lev",
        "timestamp": 1640461540
    },
    {
        "content": "<p>hmm, why not?</p>",
        "id": 266072835,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1640461574
    },
    {
        "content": "<p>For one, it'd be inconsistent with the other teams (libs, compiler, ...).</p>",
        "id": 266072836,
        "sender_full_name": "Noah Lev",
        "timestamp": 1640461578
    },
    {
        "content": "<p>Also, the whole reason we have unstable features is that we want to gain experience with them before committing to them.</p>",
        "id": 266072841,
        "sender_full_name": "Noah Lev",
        "timestamp": 1640461595
    },
    {
        "content": "<p>And an FCP is a great way to have the whole team sign off on the commitment.</p>",
        "id": 266072864,
        "sender_full_name": "Noah Lev",
        "timestamp": 1640461643
    },
    {
        "content": "<p>Agreed, I think it's a good thing to try thing out in the \"unstable\" space and when we reach an acceptable state, we open an FCP</p>",
        "id": 266072865,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1640461647
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Noah Lev</span> <a href=\"#narrow/stream/266220-rustdoc/topic/unstable.20features/near/266072864\">said</a>:</p>\n<blockquote>\n<p>And an FCP is a great way to have the whole team sign off on the commitment.</p>\n</blockquote>\n<p>sure - we could do an FCP both before and after</p>",
        "id": 266072869,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1640461656
    },
    {
        "content": "<p>There's no (or very little) commitment inherent in adding an unstable feature.</p>",
        "id": 266072870,
        "sender_full_name": "Noah Lev",
        "timestamp": 1640461658
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Noah Lev</span> <a href=\"#narrow/stream/266220-rustdoc/topic/unstable.20features/near/266072870\">said</a>:</p>\n<blockquote>\n<p>There's no (or very little) commitment inherent in adding an unstable feature.</p>\n</blockquote>\n<p>this isn't true in practice though!</p>",
        "id": 266072873,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1640461666
    },
    {
        "content": "<blockquote>\n<p>sure - we could do an FCP both before and after</p>\n</blockquote>\n<p>I'm fine with that.</p>",
        "id": 266072913,
        "sender_full_name": "Noah Lev",
        "timestamp": 1640461688
    },
    {
        "content": "<p>if we removed <code>--persist-doctests</code> or something we'd get lots of people mad at us that we broke it</p>",
        "id": 266072914,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1640461692
    },
    {
        "content": "<p>even though it's absolutely just meant to be for trying things out</p>",
        "id": 266072920,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1640461700
    },
    {
        "content": "<p><a href=\"http://docs.rs\">docs.rs</a> makes this worse because people essentially treat unstable features as if they're stable, like doc(cfg)</p>",
        "id": 266072928,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1640461717
    },
    {
        "content": "<p>Well maybe we need something like the reverse of RUSTC_BOOTSTRAP?</p>",
        "id": 266072947,
        "sender_full_name": "Noah Lev",
        "timestamp": 1640461789
    },
    {
        "content": "<p>Like, <a href=\"http://docs.rs\">docs.rs</a> uses nightly rustdoc, but you have to manually opt into \"nightly mode\"</p>",
        "id": 266072993,
        "sender_full_name": "Noah Lev",
        "timestamp": 1640461816
    },
    {
        "content": "<p>I would rather just not add the feature in the first place :/ if we added a gate now, that still breaks everything currently on nightly</p>",
        "id": 266072998,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1640461837
    },
    {
        "content": "<p>if we were just now writing rustdoc and didn't have to worry about backwards compatibility I'd agree with you</p>",
        "id": 266073007,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1640461868
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/266220-rustdoc/topic/unstable.20features/near/266072928\">said</a>:</p>\n<blockquote>\n<p><a href=\"http://docs.rs\">docs.rs</a> makes this worse because people essentially treat unstable features as if they're stable, like doc(cfg)</p>\n</blockquote>\n<p>Don't people still need to use <code>#![feature(...)]</code>?</p>",
        "id": 266073010,
        "sender_full_name": "Noah Lev",
        "timestamp": 1640461883
    },
    {
        "content": "<p>yes, but with <code>#[cfg_attr(docs_rs, feature(...))]</code>, it shows up in blog posts even</p>",
        "id": 266073019,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1640461911
    },
    {
        "content": "<p>Still... they are explicitly opting into a feature</p>",
        "id": 266073067,
        "sender_full_name": "Noah Lev",
        "timestamp": 1640461937
    },
    {
        "content": "<p>That's something I don't really agree with <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span>, but unfortunately, <a href=\"http://docs.rs\">docs.rs</a> is making this split very difficult</p>",
        "id": 266073104,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1640462013
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"210316\">GuillaumeGomez</span> <a href=\"#narrow/stream/266220-rustdoc/topic/unstable.20features/near/266073104\">said</a>:</p>\n<blockquote>\n<p>That's something I don't really agree with <span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span>, but unfortunately, <a href=\"http://docs.rs\">docs.rs</a> is making this split very difficult</p>\n</blockquote>\n<p>you don't agree that people would get mad if we broke unstable features? or that there's little commitment to adding an unstable feature? or that we should do FCP both when adding a feature and just before stabilization?</p>",
        "id": 266173986,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1640613215
    },
    {
        "content": "<p>Clarification incoming: we used to go through RFC/FCP after the unstable option was implemented so we could iterate without worrying about breaking things. The fact that <a href=\"http://docs.rs\">docs.rs</a> relies on nightly rustdoc is making this complicated now because it prevents us to use this process now.</p>",
        "id": 266177092,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1640615884
    }
]