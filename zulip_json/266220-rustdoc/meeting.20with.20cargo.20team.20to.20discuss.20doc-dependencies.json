[
    {
        "content": "<p>Hi everyone! I think most of you are aware about <a href=\"https://github.com/rust-lang/cargo/issues/8905\">https://github.com/rust-lang/cargo/issues/8905</a>. Recently, <span class=\"user-mention\" data-user-id=\"327095\">@Urgau</span> worked on <a href=\"https://github.com/rust-lang/cargo/pull/10435\">https://github.com/rust-lang/cargo/pull/10435</a> to fix it but considering how big of a change it was, it was closed until we discuss about it more in details to come up with a plan.</p>\n<p>So the idea here would be to have a talk with the cargo team to present our needs and try to see with them what we could do.</p>\n<p>cc  <span class=\"user-group-mention\" data-user-group-id=\"3139\">@T-cargo</span>  <span class=\"user-group-mention\" data-user-group-id=\"3925\">@T-rustdoc</span></p>",
        "id": 273783552,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1646216253
    },
    {
        "content": "<p>I think first _we_ should discuss to be sure where we as a team stand here. I tend to agree with a lot of what josh has said there.</p>\n<p>We have to start out with concrete use cases that are not being handled right now, determine if we want them to be supported, and discuss potential solutions _within_ rustdoc</p>",
        "id": 273847644,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646243165
    },
    {
        "content": "<p>I definitely am skeptical of the \"use a cargo feature\" thing, but i'm also wondering to what extent this is an actual problem</p>",
        "id": 273847717,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646243196
    },
    {
        "content": "<p>proc macro docs are definitely a problem, but also i can't see how that would be fixed without a circular dep</p>",
        "id": 273847788,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646243224
    },
    {
        "content": "<p>The biggest case I can think of (apart from the proc macro) is in case you're providing an API with some parts behind features. You'd need to enable this crate's features in order to have them appear in the docs, it cannot be done automatically unfortunately. <code>cfg(doc)</code> was supposed to fix that but we realized that it couldn't because it was only applied to the top crate and not the dependencies. A good example is with the gtk-rs crates which enable the <code>dox</code> feature to be able provide documentation \"fully\".</p>",
        "id": 273857434,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1646246917
    },
    {
        "content": "<p>Also, can you tell me more about the circular dep please? I think I missed this issue.</p>",
        "id": 273857520,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1646246955
    },
    {
        "content": "<p>About the <code>dev-dependencies</code>, I think it's fine to use them for rustdoc as well. We just need a way to have doc-specific features too I think</p>",
        "id": 273857939,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1646247143
    },
    {
        "content": "<p>I don't have context for this discussion. Could someone explain the issue this is trying to solve?</p>",
        "id": 273860264,
        "sender_full_name": "Noah Lev",
        "timestamp": 1646247950
    },
    {
        "content": "<p>I don't think dev-dependencies are a good idea for this</p>",
        "id": 273861367,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646248376
    },
    {
        "content": "<p>(I left a comment on the issue saying why)</p>",
        "id": 273861384,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646248388
    },
    {
        "content": "<p>Also I don't understand your use case</p>",
        "id": 273861407,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646248398
    },
    {
        "content": "<p>Let me try to explain a bit more by using gtk-rs crates. So we handle versions by using features. So if you want to use 3.18 for example, you have to enable <code>v3_18</code>. However, since it now has the higher version, it means it'll get API that could be behind the feature for its dependencies. However, since gtk-rs provides all crates, we handle that nicely. The problem now for generating documentation is as follows: we can't use <code>cfg(doc)</code> on items behind the feature because they might use items in a dependency behind a feature as well. So if we want them, we have to enable them too. And for that, we need to create a <code>dox</code> feature. If we had a <code>doc-default</code> setting in <code>Cargo.toml</code>, we could remove <code>dox</code> altogether and enable all features when generating documentation.</p>\n<p>Sorry I tried to make it more clear but not sure if I succeeded...</p>",
        "id": 273866590,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1646250692
    },
    {
        "content": "<p>Sorry, I don't really follow. Could you give a specific example of an item in your gtk-rs crates that runs into issues with the status quo?</p>",
        "id": 273871790,
        "sender_full_name": "Noah Lev",
        "timestamp": 1646252926
    },
    {
        "content": "<p>(Or that would run into issues if <code>cfg(doc)</code> worked on dependencies and <code>dev-dependencies</code> were available for doc?)</p>",
        "id": 273872711,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646253306
    },
    {
        "content": "<p>Sure! So let's say you have this in <code>glib</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>#[cfg(any(feature = &quot;v3_7&quot;, feature = &quot;dox&quot;)]\npub struct Type() {}\n</code></pre></div>\n<p>and this in <code>gtk</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>#[cfg(any(feature = &quot;v3_7&quot;, feature = &quot;dox&quot;)]\npub fn foo(t: Type) {}\n</code></pre></div>\n<p>So when documenting <code>gtk</code>, if you enable <code>dox</code>, it needs to enable <code>glib/dox</code> too otherwise it'll fail.</p>",
        "id": 273874966,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1646254395
    },
    {
        "content": "<p>But it's always manual. So by default, you never see <code>foo</code> or <code>Type</code> in any of the two crates.</p>",
        "id": 273875019,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1646254419
    },
    {
        "content": "<p>with a <code>doc-default = [\"v3_7\"]</code>, we can completely remove the need for <code>dox</code></p>",
        "id": 273875123,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1646254448
    },
    {
        "content": "<p>(and switch back to <code>cfg(doc)</code> for imports)</p>",
        "id": 273875156,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1646254465
    },
    {
        "content": "<p>Why can glib not use <code>cfg(doc)</code>, and gtk use <code>cfg(doc)</code> as well?</p>",
        "id": 273875526,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646254620
    },
    {
        "content": "<p>So that both of them always show all items when documenting?</p>",
        "id": 273875554,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646254631
    },
    {
        "content": "<p>wait, i still don't understand. you can do this with feature dependencies</p>",
        "id": 273878112,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646255740
    },
    {
        "content": "<p>i feel like what y'all are doing here is a little bit weird; and rather specific to your project</p>",
        "id": 273878268,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646255808
    },
    {
        "content": "<p>i think we need to step back further away from _solutions_ and onto the _problems_ that we're trying to solve. <code>feature = dox</code> is a solution.</p>",
        "id": 273878342,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646255854
    },
    {
        "content": "<p>the problem _as far as i can tell_, is that you want all of the features to show up when documenting: is this not a use case for <code>--all-features</code>? I feel like this is pretty standard amongst the rust community: build your docs with <code>--all-features</code>. dependencies don't get that but that's fine, you're not using those functions</p>",
        "id": 273878461,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646255905
    },
    {
        "content": "<p>Like i think we really need to see a more worked out explanation of the use case and the various possible solutions here</p>",
        "id": 273878494,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646255938
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/266220-rustdoc/topic/meeting.20with.20cargo.20team.20to.20discuss.20doc-dependencies/near/273875526\">said</a>:</p>\n<blockquote>\n<p>Why can glib not use <code>cfg(doc)</code>, and gtk use <code>cfg(doc)</code> as well?</p>\n</blockquote>\n<p>Because glib isn't compiled with <code>cfg(doc)</code>, so that prevents gtk to use the items behind the features</p>",
        "id": 273881188,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1646257118
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132040\">Manish Goregaokar</span> <a href=\"#narrow/stream/266220-rustdoc/topic/meeting.20with.20cargo.20team.20to.20discuss.20doc-dependencies/near/273878461\">said</a>:</p>\n<blockquote>\n<p>the problem _as far as i can tell_, is that you want all of the features to show up when documenting: is this not a use case for <code>--all-features</code>? I feel like this is pretty standard amongst the rust community: build your docs with <code>--all-features</code>. dependencies don't get that but that's fine, you're not using those functions</p>\n</blockquote>\n<p>I don't think it's a good idea to rest on <code>--all-features</code> because for some crates, some features are mutually exclusive (even though they should be only additive but that's another debate).</p>",
        "id": 273881556,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1646257272
    },
    {
        "content": "<p>Another example I can give is:</p>\n<p>You're writing an application using gtk-rs (or sdl2, same problem). You don't really know where to start so you generate their documentation. Bad luck: you only have the default features, a huge part of it is missing.</p>",
        "id": 273881709,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1646257325
    },
    {
        "content": "<p>For me, the problem is really that we can't specify which features should be enabled when running <code>cargo doc</code></p>",
        "id": 273881798,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1646257381
    },
    {
        "content": "<p>With features, we can then have optional dependencies. Along the years, we got a few people asking for new markdown extensions like supporting latex because it's really problematic to do it with proc-macro since it'd have to be present all the times or to be done through a feature.</p>",
        "id": 273881942,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1646257453
    },
    {
        "content": "<p>Oh and <span class=\"user-mention\" data-user-id=\"210267\">@Nemo157</span> explained a bit more things on the issue too</p>",
        "id": 273882469,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1646257743
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"210316\">GuillaumeGomez</span> <a href=\"#narrow/stream/266220-rustdoc/topic/meeting.20with.20cargo.20team.20to.20discuss.20doc-dependencies/near/273881188\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/266220-rustdoc/topic/meeting.20with.20cargo.20team.20to.20discuss.20doc-dependencies/near/273875526\">said</a>:</p>\n<blockquote>\n<p>Why can glib not use <code>cfg(doc)</code>, and gtk use <code>cfg(doc)</code> as well?</p>\n</blockquote>\n<p>Because glib isn't compiled with <code>cfg(doc)</code>, so that prevents gtk to use the items behind the features</p>\n</blockquote>\n<p>That seems like a description of what was proposed to be treated as a bug and fixed, if possible.</p>",
        "id": 273885747,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646259179
    },
    {
        "content": "<p>When building documentation for gtk, which depends on glib, we'd enable anything with <code>cfg(doc)</code> attached in both gtk and glib, so gtk could cross-reference glib docs successfully.</p>",
        "id": 273885828,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646259227
    },
    {
        "content": "<p>That's blocked on the ability to produce <code>rmeta</code> files for crates that don't type check, isn't it?</p>",
        "id": 273886126,
        "sender_full_name": "Michael notriddle Howell",
        "timestamp": 1646259416
    },
    {
        "content": "<p>I think I'm slightly confused. With <code>cfg(doc)</code> it <em>would</em> typecheck, wouldn't it?</p>",
        "id": 273890565,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646261624
    },
    {
        "content": "<p>Oh. Is the issue that you wouldn't want to use that same rmeta file for a non-doc compilation?</p>",
        "id": 273890607,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646261642
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> If done then yes, it'd be fixed (which would be awesome!). I'm still curious on how we will differentiate with non-doc (aka tests) builds but that's another debate I think</p>",
        "id": 273890720,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1646261682
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span>  rustdoc deliberately swallows typechecking errors in function bodies. <a href=\"https://github.com/rust-lang/rust/pull/73566\">https://github.com/rust-lang/rust/pull/73566</a></p>",
        "id": 273891058,
        "sender_full_name": "Michael notriddle Howell",
        "timestamp": 1646261823
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"210316\">GuillaumeGomez</span> As far as I understand cargo use <code>-Cmetadata</code> to create the <code>rmeta</code> when documenting, so it's not a problem as the metadata (just a number) can just be different.</p>",
        "id": 273891141,
        "sender_full_name": "Urgau",
        "timestamp": 1646261875
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210053\">@Michael notriddle Howell</span> Oh, I see. Yeah, the API surface area and cross-references would typecheck, but the internals might not.</p>",
        "id": 273891218,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646261894
    },
    {
        "content": "<p>A mechanism to rapidly capture <em>only</em> the API surface area would be generally useful, not just for rustdoc, but that's a larger change.</p>",
        "id": 273891290,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646261937
    },
    {
        "content": "<p>I just checked with my prototype and it has different <code>-Cmetadata</code> when checking and checking for documenting;</p>",
        "id": 273891385,
        "sender_full_name": "Urgau",
        "timestamp": 1646261998
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/266220-rustdoc/topic/meeting.20with.20cargo.20team.20to.20discuss.20doc-dependencies/near/273891290\">said</a>:</p>\n<blockquote>\n<p>A mechanism to rapidly capture <em>only</em> the API surface area would be generally useful, not just for rustdoc, but that's a larger change.</p>\n</blockquote>\n<p>Isn't this rustdoc json ?</p>",
        "id": 273891518,
        "sender_full_name": "Urgau",
        "timestamp": 1646262023
    },
    {
        "content": "<p>It's not just the ability to capture only the API surface area. It's the ability for rustc to ingest only the API surface area, without crashing because it expects other stuff to be there that's absent.</p>",
        "id": 273891675,
        "sender_full_name": "Michael notriddle Howell",
        "timestamp": 1646262042
    },
    {
        "content": "<p>Right, that's what I mean about it being generally useful for other things as well.</p>",
        "id": 273892061,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646262233
    },
    {
        "content": "<p>It's also the reason why rustdoc json isn't sufficient. It needs to contain MIR for const functions, but not MIR for anything else.</p>",
        "id": 273892167,
        "sender_full_name": "Michael notriddle Howell",
        "timestamp": 1646262273
    },
    {
        "content": "<p>yeah overall i think for diagnostics and for docs we need better ways to talk about API surface areas, and part of the problem is that <code>cfg</code> is not powerful enough here. Ideally IMO we'd have different _types_ of <code>cfg</code>, e.g. different CFGs attrs for \"different API\", \"new API\", and \"different implementation\" . I may have posted about this somewhere before, i don't remember anymore, but it's something i've wanted for ages</p>",
        "id": 274288882,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646548219
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"210316\">GuillaumeGomez</span> <a href=\"#narrow/stream/266220-rustdoc/topic/meeting.20with.20cargo.20team.20to.20discuss.20doc-dependencies/near/273881798\">said</a>:</p>\n<blockquote>\n<p>For me, the problem is really that we can't specify which features should be enabled when running <code>cargo doc</code></p>\n</blockquote>\n<p>you can on <a href=\"http://docs.rs\">docs.rs</a> , and i think that's what's recommended</p>",
        "id": 274289074,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646548556
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"210316\">GuillaumeGomez</span> <a href=\"#narrow/stream/266220-rustdoc/topic/meeting.20with.20cargo.20team.20to.20discuss.20doc-dependencies/near/273881556\">said</a>:</p>\n<blockquote>\n<p>I don't think it's a good idea to rest on <code>--all-features</code> because for some crates, some features are mutually exclusive (even though they should be only additive but that's another debate).</p>\n</blockquote>\n<p>Yeah, this is a problem. My understanding of the general thing the community does is:</p>\n<p>- tell <a href=\"http://docs.rs\">docs.rs</a> to build the maximum set of features possible for the crate (usually, <code>--all-features</code>)<br>\n - downstream crates may not get all features in their locally built docs, but that's _fine_, they will when cross-linking on <a href=\"http://docs.rs\">docs.rs</a>, and if they don't use a feature in their own deps then it's kinda fine if the docs don't get built</p>",
        "id": 274289113,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646548564
    },
    {
        "content": "<p>like, i think i _still_ don't understand the precise problem here, because your statement of the problem is still framed in terms of the _particular_ solution gtk-rs has picked (<code>feature = \"dox\"</code>). But maybe I've missed something!</p>",
        "id": 274289122,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646548597
    },
    {
        "content": "<p>and i'm wary of us pushing for a solution to a problem involved in the implementation of _that_ solution. this is why i'm asking for a step back and a statement of the problem</p>",
        "id": 274289130,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646548638
    },
    {
        "content": "<p>here's what i <em>think</em> the problem seems to be, reading between the lines:</p>\n<ul>\n<li>Y'all want all features to show up in the docs</li>\n<li>Y'all want all features to show up in the docs even when used as a _dependency_ with only some features enabled</li>\n</ul>\n<p>is this accurate?</p>",
        "id": 274289201,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646548763
    },
    {
        "content": "<p>overall i'm a bit skeptical of the second goal there. the first goal seems quite reasonable (and already is well supported by <a href=\"http://docs.rs\">docs.rs</a>), but for the second goal: for locally built docs; it seems fine if not all features are documented in deps, only the visible ones?</p>",
        "id": 274289268,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646548893
    },
    {
        "content": "<p>and on <a href=\"http://docs.rs\">docs.rs</a> stuff works fine for this, and cross-links work fine. in my experience folks use <a href=\"http://docs.rs\">docs.rs</a> for doc discovery and the locally built docs are largely used for the crates they are actively working on as opposed to doc discovery in deps, so it's not a huge deal if APIs are missing in the deps because a feature isn't enabled. maybe i'm wrong on this.</p>",
        "id": 274289530,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646549317
    },
    {
        "content": "<p>a thing that i _do_ find annoying is that _super_ often intra-doc links are written with <code>--all-features</code> in mind, and so you get warnings from workspace deps (since the crate you built got all features, but not its deps, and the ones in the same workspace still warn). I have wondered about special syntax for intra-doc links where either you can declare the link resolution as fallible, or, even better, you can declare a feature that needs to be enabled for it to work, and the link will render with a tooltip. Though tbh that's a feature that can _technically_ be written as its own proc macro if not for the fact that a lot of feature flags exist solely for the purpose of not bringing in <code>syn</code> :)</p>",
        "id": 274289540,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646549366
    },
    {
        "content": "<blockquote>\n<p>Though tbh that's a feature that can _technically_ be written as its own proc macro</p>\n</blockquote>\n<p>The general problem, as I see it, is exactly because of weaknesses in proc macros as rustdoc plugins.</p>\n<p>We (or, at least, I) want to be able to pull in stuff like KaTeX or Mermaid.JS as dependencies of their rustdocs, without them becoming dependencies of the actual code. For something like a math kernel, \"KaTeX rustdocs\" might be the only proc macro used in the library at all, and you definitely don't want to force a dependency on <code>syn</code> and <code>quick-js</code> just for that.</p>\n<p>Naively, it seems like any solution to the KaTeX problem would also solve the GTK problem, since whatever preprocessing step KaTeX uses to convert TeX code to HTML can also be used by GTK to find the complete LGPL docs in a lookup table.</p>",
        "id": 274313376,
        "sender_full_name": "Michael (notriddle) Howell",
        "timestamp": 1646582506
    },
    {
        "content": "<p>@*<em>Michael (notriddle) Howell</em> hmm that comment was in the space of intra doc links only, but that's an interesting point</p>\n<p>but proc macros used for docs seem rare and also don't seem to be Guillaume's issue</p>",
        "id": 274314905,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646584708
    },
    {
        "content": "<p>My issue is that we need to pass the feature manually for gtk-rs because there is no way currently to set \"doc-features\". But what <span class=\"user-mention\" data-user-id=\"210053\">@Michael (notriddle) Howell</span> described is an issue I've heard a lot about: people don't want proc-macro for docs to be needed if you're not building docs (which is the most common I heard about with LaTeX).</p>",
        "id": 274320686,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1646591239
    },
    {
        "content": "<p>That seems like it would be addressed by dev-dependencies.</p>",
        "id": 274326229,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646598220
    },
    {
        "content": "<p>That sounds good to me as long as we have a way to setup things for rustdoc too</p>",
        "id": 274329372,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1646602415
    },
    {
        "content": "<p>(either it is done with dev-dependencies or not, doesn't matter)</p>",
        "id": 274329380,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1646602442
    },
    {
        "content": "<p>i think i'm strongly against dev-dependencies being used when building rmetas for doc dependencies.</p>\n<p>people write dev-dependencies with the assumption that they're the ones running it on their own CIs and environments. we _never_ have a scenario where building a crate requires building dependency dev-deps. dev-deps have relaxed semver requirements, too (because of this current situation). it's not unusual for crates to set up special environments for some dev-dep stuff especially around C builds</p>\n<p>my worry is that rustdoc will simply _not work_ if we're building all the transitive dev-deps because there will be crates that make assumptions in their dev-deps (having env vars set, having C libraries installed, that kind of stuff).</p>",
        "id": 274445856,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646681772
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"210316\">GuillaumeGomez</span> <a href=\"#narrow/stream/266220-rustdoc/topic/meeting.20with.20cargo.20team.20to.20discuss.20doc-dependencies/near/274320686\">said</a>:</p>\n<blockquote>\n<p>My issue is that we need to pass the feature manually for gtk-rs because there is no way currently to set \"doc-features\".</p>\n</blockquote>\n<p>I repeat, again, this is framed in terms of your attempted _solution_, whereas I still do not understand the core problem you are trying to fix.</p>\n<p>Can you speak in terms of the desired end result, and follow your logic from there?</p>",
        "id": 274446031,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646681876
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> You have to have dev-deps installed for cargo test. Why is that not a problem for test, but it is a problem for doc?</p>",
        "id": 274465265,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646690788
    },
    {
        "content": "<p>( I'm hoping the answer isn't just that we don't expect test to work for random crates.)</p>",
        "id": 274465284,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646690800
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> because i believe the suggestion here is for dev-deps to be enabled on _all crates_ transitively when building docs</p>\n<p>one never runs tests on dependency crates in the usual course of development</p>",
        "id": 274465589,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646690953
    },
    {
        "content": "<p>Ah, I see.</p>",
        "id": 274465638,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646690980
    },
    {
        "content": "<p>I don't feel like that's a complete non-starter, but I understand how it's different now, thank you.</p>",
        "id": 274465745,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646691016
    },
    {
        "content": "<p>but also i fear problems on <a href=\"http://docs.rs\">docs.rs</a> since it likely cannot give the ability to salvage broken dev-dep builds when the dev-deps need C dependencies</p>",
        "id": 274465809,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646691049
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132040\">Manish Goregaokar</span> <a href=\"#narrow/stream/266220-rustdoc/topic/meeting.20with.20cargo.20team.20to.20discuss.20doc-dependencies/near/274446031\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"210316\">GuillaumeGomez</span> <a href=\"#narrow/stream/266220-rustdoc/topic/meeting.20with.20cargo.20team.20to.20discuss.20doc-dependencies/near/274320686\">said</a>:</p>\n<blockquote>\n<p>My issue is that we need to pass the feature manually for gtk-rs because there is no way currently to set \"doc-features\".</p>\n</blockquote>\n<p>I repeat, again, this is framed in terms of your attempted _solution_, whereas I still do not understand the core problem you are trying to fix.</p>\n<p>Can you speak in terms of the desired end result, and follow your logic from there?</p>\n</blockquote>\n<p>I can take another example with the sdl2 crate: when documenting, you want all features to be enabled in order to have documentation for all parts of the crate (like <code>image</code> or <code>audio</code>).</p>",
        "id": 274513056,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1646730489
    },
    {
        "content": "<p>(and some of thee features could bring in dependencies)</p>",
        "id": 274524398,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1646736952
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span> sure but why is transitivity needed?</p>",
        "id": 274562356,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646755690
    },
    {
        "content": "<p>the problem you state is solved by --all-features or a documented dox feature as you're using</p>",
        "id": 274562471,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646755734
    },
    {
        "content": "<p>so I need to know more about the problem space</p>",
        "id": 274562528,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646755759
    },
    {
        "content": "<p>But that requires the user to pass it themselves. Unlike when running test, you can't have a default config</p>",
        "id": 274562536,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1646755763
    },
    {
        "content": "<p>I'm sorry, I'm so bad at explaining &gt;&lt;</p>",
        "id": 274562581,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1646755780
    },
    {
        "content": "<p>So there are 2 issues:</p>\n<ul>\n<li>We can't have features enabled/disabled \"by default\" when running <code>cargo doc</code> because the doc profile doesn't allow it (contrary to the dev profile).</li>\n<li>We can't have dependencies specific to <code>cargo doc</code>.</li>\n</ul>\n<p>So for example, in sdl2, if someone runs <code>cargo doc</code> they won't have the full docs unless they manually enable them.</p>\n<p>Another use case: <code>cfg(doc)</code> is mostly useless because the dependencies need to have a feature enabled in some cases. In gtk-rs, we use the <code>dox</code> feature to enable all of them so the dependencies are built with the needed features.</p>",
        "id": 274563032,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1646755930
    },
    {
        "content": "<p>okay</p>",
        "id": 274563625,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646756145
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span> why is it a big problem that the user has to pass it in themselves? Most of the time only the maintainers of a crate are running cargo doc on it, everyone else uses <a href=\"http://docs.rs\">docs.rs</a> (and <a href=\"http://docs.rs\">docs.rs</a> already lets you configure features)</p>",
        "id": 274563837,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646756221
    },
    {
        "content": "<p>I'll point out, this is an issue for running tests too, you need to --all-features sometimes</p>",
        "id": 274563887,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646756244
    },
    {
        "content": "<p>(also fwiw no profile lets you set features)</p>",
        "id": 274564057,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646756303
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132040\">Manish Goregaokar</span> <a href=\"#narrow/stream/266220-rustdoc/topic/meeting.20with.20cargo.20team.20to.20discuss.20doc-dependencies/near/274564057\">said</a>:</p>\n<blockquote>\n<p>(also fwiw no profile lets you set features)</p>\n</blockquote>\n<p>Ah my bad, I thought it was possible...</p>",
        "id": 274564099,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1646756323
    },
    {
        "content": "<p>Also, so far I don't see why this feature needs to be transitive</p>",
        "id": 274564105,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646756326
    },
    {
        "content": "<p>Because of reexport.</p>",
        "id": 274564241,
        "sender_full_name": "Urgau",
        "timestamp": 1646756374
    },
    {
        "content": "<p>I feel like you're talking about a larger issue around defaults (affects tests AND docs) that has historically not been considered an issue because the people who maintain a crate know what to do</p>",
        "id": 274564243,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646756374
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"327095\">@Urgau</span> this is unhelpful</p>",
        "id": 274564388,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646756414
    },
    {
        "content": "<p>Taking my gtk-rs use case as example for the why it'd be needed again: we use the <code>dox</code> feature to enable versions (like <code>3_22</code>). So if you have:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[cfg(any(doc, feature = </span><span class=\"s\">\"v3_22\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">arg</span>: <span class=\"nc\">deps</span>::<span class=\"n\">item_only_in_3_22</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It won't work out of the blue.</p>",
        "id": 274564448,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1646756441
    },
    {
        "content": "<p>So we use <code>dox</code> to go around this limitation.</p>",
        "id": 274564483,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1646756457
    },
    {
        "content": "<p>right, I understand that</p>",
        "id": 274564521,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646756473
    },
    {
        "content": "<p>I still don't see where transitivity comes from this</p>",
        "id": 274564586,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646756510
    },
    {
        "content": "<p>I get that cfg(doc) is useless here. Let's move on from that</p>",
        "id": 274564690,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646756537
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132040\">Manish Goregaokar</span> <a href=\"#narrow/stream/266220-rustdoc/topic/meeting.20with.20cargo.20team.20to.20discuss.20doc-dependencies/near/274563837\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"210316\">GuillaumeGomez</span> why is it a big problem that the user has to pass it in themselves? Most of the time only the maintainers of a crate are running cargo doc on it, everyone else uses <a href=\"http://docs.rs\">docs.rs</a> (and <a href=\"http://docs.rs\">docs.rs</a> already lets you configure features)</p>\n</blockquote>\n<p>I'd argue that if you are traveling or in a place with no internet connection, then you can only use whatever you have locally. You don't always have access to <a href=\"http://docs.rs\">docs.rs</a>. So making it easier for both crates maintainers and users to \"control\" how doc is built by default would be a nice improvement</p>",
        "id": 274564745,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1646756557
    },
    {
        "content": "<p>And also, sometimes, docs built on <a href=\"http://docs.rs\">docs.rs</a> are useless (gtk-rs again ^^')</p>",
        "id": 274564876,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1646756606
    },
    {
        "content": "<p>because of some restrictions or whatever (completely other debate)</p>",
        "id": 274564910,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1646756625
    },
    {
        "content": "<p>and sometimes you are working with a crate which hasn't been published yet and want to have its documentation.</p>",
        "id": 274565029,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1646756660
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> (I was responding to your previous comment).<br>\nIf you have a \"core\" crate that is reexported in there children and you want to document \"core\" with some specific feature but only for the documentation you can't.</p>",
        "id": 274565035,
        "sender_full_name": "Urgau",
        "timestamp": 1646756664
    },
    {
        "content": "<p>Well, there are many use cases where having local documentation makes sense</p>",
        "id": 274565071,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1646756677
    },
    {
        "content": "<p>of course</p>",
        "id": 274565085,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646756684
    },
    {
        "content": "<p>The biggest issue being described is that for example if you want to render latex, you have to use the latex crate which uses a proc-macro. And it doesn't make much sense to force it on every user if you don't use it.</p>",
        "id": 274565300,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1646756773
    },
    {
        "content": "<p>Does it give you a better understanding or am I completely missing what you were asking?</p>",
        "id": 274565366,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1646756807
    },
    {
        "content": "<p>y'all aren't doing that though</p>",
        "id": 274565472,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646756854
    },
    {
        "content": "<p>i understand notriddle's problem just fine</p>",
        "id": 274565485,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646756860
    },
    {
        "content": "<p>and i understand that sometimes folks need local docs</p>",
        "id": 274565524,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646756878
    },
    {
        "content": "<p>for the local doc case what i think most people do is either <code>--all-features</code> or check CONTRIBUTING.md for <code>--feature dox</code> or whatever</p>",
        "id": 274565646,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646756912
    },
    {
        "content": "<p>this doesn't explain why it needs to be transitive</p>",
        "id": 274565667,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646756919
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"327095\">@Urgau</span> yes but you don't need doc default features to be transitive for that, you define your feature deps</p>",
        "id": 274565779,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646756957
    },
    {
        "content": "<p>Then maybe I'm not understanding: by \"it needs to be transitive\", you mean \"why does it needs to be impacted on the dependencies as well\"?</p>",
        "id": 274565793,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1646756963
    },
    {
        "content": "<p>yes</p>",
        "id": 274565805,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646756970
    },
    {
        "content": "<p>okay, let me rephrase</p>",
        "id": 274565816,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646756974
    },
    {
        "content": "<p>because most of your solutions have had this property and you have been asking for this property before</p>",
        "id": 274565847,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646756986
    },
    {
        "content": "<p>let's say i have a crate <code>foo</code></p>",
        "id": 274565888,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646756997
    },
    {
        "content": "<p>and it depends on gtk-rs</p>",
        "id": 274565896,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646757001
    },
    {
        "content": "<p>do _you_ (not notriddle, ignore the latex case for now)</p>",
        "id": 274565964,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646757014
    },
    {
        "content": "<p>do _you_ need <code>cargo doc</code> on <code>foo</code> to enable to <code>dox</code> feature on gtk-rs too</p>",
        "id": 274566035,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646757031
    },
    {
        "content": "<p>and why</p>",
        "id": 274566037,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646757032
    },
    {
        "content": "<p>It depends if <code>foo</code> is a library or a binary. If it's a library, it's very likely that you have different versions (handled with features). If it's a binary you don't really care since the version of <code>gtk-rs</code> is set in stone</p>",
        "id": 274566162,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1646757088
    },
    {
        "content": "<p>So if you want to document all versions of <code>foo</code>, you have to use a higher version of <code>gtk-rs</code> as well.</p>",
        "id": 274566384,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1646757175
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132040\">Manish Goregaokar</span> <a href=\"#narrow/stream/266220-rustdoc/topic/meeting.20with.20cargo.20team.20to.20discuss.20doc-dependencies/near/274565779\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"327095\">Urgau</span> yes but you don't need doc default features to be transitive for that, you define your feature deps</p>\n</blockquote>\n<p>yeah, but that only works if you define it in your feature deps, you may not want to enable a feature by default in your deps but want that feature do be enable by default for doc</p>",
        "id": 274566472,
        "sender_full_name": "Urgau",
        "timestamp": 1646757207
    },
    {
        "content": "<p>okay, but this sounds like <code>foo</code> will have a bunch of features that transitively enable features on gtk-rs, and now it's <code>foo</code>'s problem to figure out how it wants to do doc defaults</p>",
        "id": 274566669,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646757276
    },
    {
        "content": "<p>like, it doesn't sound like we need doc defaults to be transitive</p>",
        "id": 274566700,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646757290
    },
    {
        "content": "<p>instead, whatever solution we need for doc defaults works here too</p>",
        "id": 274566770,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646757318
    },
    {
        "content": "<p>That would make things simpler and remove some pain points. Just like what we do for <a href=\"http://docs.rs\">docs.rs</a> in the end</p>",
        "id": 274566847,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1646757356
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> without getting too far into a solution, how big a deal would it be for _profiles_ to define default features. all of them. for local development only, not handled in dependencies. some way to make it work for workspaces.</p>",
        "id": 274566897,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646757364
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span> correct. this is why i was pushing back against the solutions earlier, they seemed to be solving problems i couldn't see</p>",
        "id": 274566942,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646757393
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132040\">Manish Goregaokar</span> <a href=\"#narrow/stream/266220-rustdoc/topic/meeting.20with.20cargo.20team.20to.20discuss.20doc-dependencies/near/274566897\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> without getting too far into a solution, how big a deal would it be for _profiles_ to define default features. all of them. for local development only, not handled in dependencies</p>\n</blockquote>\n<p>That would solve the latex issue so that'd be a very nice start :)</p>",
        "id": 274566992,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1646757411
    },
    {
        "content": "<p>actually it _doesn't_ solve the latex issue, not that well</p>",
        "id": 274567023,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646757430
    },
    {
        "content": "<p>Ah? Why not? If latex is optional, wouldn't it fix it?</p>",
        "id": 274567054,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1646757446
    },
    {
        "content": "<p>Then the doc profile would enable the dep. What am I missing?</p>",
        "id": 274567110,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1646757464
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span> yeah but if <code>foo</code> uses a crate <code>mathy_stuff</code> this means <code>foo</code> _needs to know_ to enable this feature. that's _kinda_ fine  to me but i wouldn't claim we have fully solved the problem :)</p>",
        "id": 274567349,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646757564
    },
    {
        "content": "<p>whereas in your case <code>foo</code> already knows which dep features it uses</p>",
        "id": 274567368,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646757574
    },
    {
        "content": "<p>Oh I see. So once again we're back to the transitive issue.</p>",
        "id": 274567472,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1646757603
    },
    {
        "content": "<p>well</p>",
        "id": 274567485,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646757608
    },
    {
        "content": "<p>also the reason i propose this for _all_ profiles is that this has been a problem for <code>cargo test</code> for ages</p>",
        "id": 274567527,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646757627
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"210316\">GuillaumeGomez</span> <a href=\"#narrow/stream/266220-rustdoc/topic/meeting.20with.20cargo.20team.20to.20discuss.20doc-dependencies/near/274567472\">said</a>:</p>\n<blockquote>\n<p>Oh I see. So once again we're back to the transitive issue.</p>\n</blockquote>\n<p>we  might be, however i'm not sure if we have to consider \"this dependency is heavy but only needed for docs\" to be a huge deal</p>",
        "id": 274567618,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646757669
    },
    {
        "content": "<p>I thought it was already done for <code>cargo test</code> because I remember a discussion about it years ago. My bad.</p>",
        "id": 274567626,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1646757672
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132040\">Manish Goregaokar</span> <a href=\"#narrow/stream/266220-rustdoc/topic/meeting.20with.20cargo.20team.20to.20discuss.20doc-dependencies/near/274567618\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"210316\">GuillaumeGomez</span> <a href=\"#narrow/stream/266220-rustdoc/topic/meeting.20with.20cargo.20team.20to.20discuss.20doc-dependencies/near/274567472\">said</a>:</p>\n<blockquote>\n<p>Oh I see. So once again we're back to the transitive issue.</p>\n</blockquote>\n<p>we  might be, however i'm not sure if we have to consider \"this dependency is heavy but only needed for docs\" to be a huge deal</p>\n</blockquote>\n<p>It's problematic if the crate is changing source code.</p>",
        "id": 274567694,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1646757710
    },
    {
        "content": "<p>oh i mean you would still <code>cfg(doc)</code> it , the problem just becomes that there's a useless dep being pulled in :)</p>",
        "id": 274567773,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646757736
    },
    {
        "content": "<p>that's not a _huge_ problem in my book</p>",
        "id": 274567808,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646757751
    },
    {
        "content": "<p>No I meant like your source code could be updated literally.</p>",
        "id": 274568000,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1646757834
    },
    {
        "content": "<p>In gtk-rs we put back the doc comments into the source code (which is why it doesn't work on <a href=\"http://docs.rs\">docs.rs</a> because it's read only).</p>",
        "id": 274568121,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1646757879
    },
    {
        "content": "<p>As for latex, I'm not sure. But if they update source code, it means it'll be rebuilt every time, so not great either.</p>",
        "id": 274568177,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1646757904
    },
    {
        "content": "<p>Ah no right! The problem with latex is that it's pulling in a C dependency which could be problematic.</p>",
        "id": 274568411,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1646757986
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"210316\">GuillaumeGomez</span> <a href=\"#narrow/stream/266220-rustdoc/topic/meeting.20with.20cargo.20team.20to.20discuss.20doc-dependencies/near/274568411\">said</a>:</p>\n<blockquote>\n<p>Ah no right! The problem with latex is that it's pulling in a C dependency which could be problematic.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span>  Not sure if you saw it but it was the actual issue with latex ^</p>",
        "id": 274735111,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1646852194
    },
    {
        "content": "<p>yeah i got that</p>",
        "id": 274743013,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646855593
    },
    {
        "content": "<p>i do think \"proc macro for docs\" is a rather weird use case and we have to decide if we really want to support that well</p>",
        "id": 274743058,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646855618
    },
    {
        "content": "<p>and when i say \"we\" i include cargo</p>",
        "id": 274743066,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1646855623
    },
    {
        "content": "<p>The problem isn't the proc macro here but the C library which is used by the proc macro.</p>",
        "id": 274743167,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1646855659
    }
]