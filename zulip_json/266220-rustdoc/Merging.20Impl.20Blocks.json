[
    {
        "content": "<p>Would it be possible, perhaps as a flag, for rustdoc to merge impl blocks in the HTML output?</p>\n<p>For example, <a href=\"https://docs.rs/wide/latest/wide/struct.f32x4.html\">https://docs.rs/wide/latest/wide/struct.f32x4.html</a>, this has 3 different \"impl f32x4\" blocks, but that's basically not important to users of the crate. An accident of having a sprawling crate with many contributors. It would be nice if I could just set some flag and have rustdoc put them together for me.</p>",
        "id": 269762335,
        "sender_full_name": "Lokathor",
        "timestamp": 1643387424
    },
    {
        "content": "<p>It 's \"complicated\" in case an impl block is documented.</p>",
        "id": 269774608,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1643392223
    },
    {
        "content": "<p>If it only merged undocumented blocks that would still be a great improvement.</p>\n<p>Particularly since nearly no one documents the impl blocks themselves.</p>",
        "id": 269777939,
        "sender_full_name": "Lokathor",
        "timestamp": 1643393427
    },
    {
        "content": "<p>Different <em>inherent</em> impl blocks seem particularly uninteresting, since I would generally expect any documentation to be on the type instead of the <code>impl Foo {</code> block.</p>\n<p>Going a step further, I tend to find bounds on impl blocks to be confusing.  Especially if you use the sidebar to jump to a method and then you can't tell that you're in a block that has extra bounds on some of the type parameters.  I'd almost rather any bounds from them just be merged into the function bounds, for rustdoc purposes.  (This was less the case back when almost everything on <code>Cell</code> needed <code>Copy</code> and almost everything on <code>HashMap</code> needed <code>K: Eq+Hash</code>, but now that a bunch of the bounds have been weakened the groupings seem pretty unhelpeful -- especially since they sometimes put <code>unwrap_or</code> and <code>unwrap_or_default</code> in very different places.)</p>",
        "id": 269788157,
        "sender_full_name": "scottmcm",
        "timestamp": 1643397523
    },
    {
        "content": "<p>I was just discussing this with <span class=\"user-mention\" data-user-id=\"315412\">@jsha</span> recently. We'd like to merge inherent impl blocks and automatically categorize (and thus sort) them based on whether they're constructors, destructors, mutators, or readers (partially custom terminology that I just came up with <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> ).</p>",
        "id": 269804803,
        "sender_full_name": "Noah Lev",
        "timestamp": 1643405142
    },
    {
        "content": "<p>Just remember that if it's an automatic assessment then Cell or anything Cell-like will probably screw up the assessment.</p>\n<p>Particularly, I asked about this because I've got many OS calls that take HWND (or some other \"handle/token\" value) as the first param and so I was going to rustify them as being methods on HWND that all just take <code>self</code> and do whatever, and all the little impl blocks would end up getting spread all over several modules and sub-modules. Since they're all <code>(self, other arg) -&gt; LibResult&lt;Type&gt;</code> or whatever, i don't think any sort of auto-detect system would be able to make much sense of things.</p>",
        "id": 269841327,
        "sender_full_name": "Lokathor",
        "timestamp": 1643434860
    },
    {
        "content": "<p>There's also this related item: <a href=\"https://github.com/rust-lang/rust/issues/85492\">https://github.com/rust-lang/rust/issues/85492</a></p>\n<p>My plan there had been to group by impl, so we'd have three repeating groups. But moving the impl bounds onto the methods is an interesting idea! It would mean a lot of repetition on the methods.</p>\n<p>Another idea: When you're scrolling a PR in GitHub, there's a stickied item at the top that says what file you're in. It's remarkably subtle and unintrusive. I've considered doing the same for <code>impl</code> headings. I wound up concluding it's not the right thing - I don't want too many sticky bars. But I figured I'd toss it out there and see if folks find it worth refining.</p>",
        "id": 269866091,
        "sender_full_name": "jsha",
        "timestamp": 1643464967
    },
    {
        "content": "<p>I think the sticky bar is at least worth a mockup to see how it feels.</p>",
        "id": 269885972,
        "sender_full_name": "Noah Lev",
        "timestamp": 1643487189
    },
    {
        "content": "<p>I like the sticky header bar idea</p>",
        "id": 269919827,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1643531588
    },
    {
        "content": "<p>That would be very problematic on <a href=\"http://docs.rs\">docs.rs</a> like <span class=\"user-mention\" data-user-id=\"315412\">@jsha</span> said (and I agree)</p>",
        "id": 269922629,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1643535300
    }
]