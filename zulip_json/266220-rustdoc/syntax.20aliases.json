[
    {
        "content": "<p>in rustdoc search queries, <code>&lt;</code> and <code>&gt;</code> are syntax (indicating type parameters).</p>\n<p>However, <code>&lt;</code> is also a valid search - it is a doc alias for the <code>Ord</code>family of traits. We have tests for this.</p>\n<p>I propose we eliminate the possibility of searching for <code>&lt;</code> as a type, in favor of an unambiguous grammar for rustdoc search queries. This would simplify the search code somewhat.</p>\n<p>More broadly - maybe we should eliminate the possibility of punctuation as a doc alias?</p>\n<p>Here's the PR that added doc aliases for many common operators: <a href=\"https://github.com/rust-lang/rust/pull/50231/files\">https://github.com/rust-lang/rust/pull/50231/files</a></p>",
        "id": 266896087,
        "sender_full_name": "jsha",
        "timestamp": 1641356034
    },
    {
        "content": "<p>alternately, we could say syntaxy doc aliases only get returned if they are an exact match for the whole search, so the query parser doesn't have to worry about them</p>",
        "id": 266897292,
        "sender_full_name": "jsha",
        "timestamp": 1641357247
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315412\">jsha</span> <a href=\"#narrow/stream/266220-rustdoc/topic/syntax.20aliases/near/266897292\">said</a>:</p>\n<blockquote>\n<p>alternately, we could say syntaxy doc aliases only get returned if they are an exact match for the whole search, so the query parser doesn't have to worry about them</p>\n</blockquote>\n<p>That seems like the best approach to me, assuming it's not too complicated to implement.</p>",
        "id": 266898716,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641359139
    },
    {
        "content": "<p>It winds up being kinda messy because it means the query parser has to accept any arbitrary string, in hopes of matching against some doc alias. Alternately there could be a separate phase that happens _before_ query parsing, where we try to match the raw query against all doc aliases. Neither way seems super appealing.</p>",
        "id": 266899713,
        "sender_full_name": "jsha",
        "timestamp": 1641360376
    },
    {
        "content": "<p>actually i thought of how to do this: in <span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span>'s PR in progress, when we catch a query parser error, we always return no results.</p>\n<p>Instead, when we catch a query parser error we should return a ParsedQuery with <code>raw: \"&lt;\"</code> and <code>literalSearch: true</code>.</p>",
        "id": 266938972,
        "sender_full_name": "jsha",
        "timestamp": 1641391469
    },
    {
        "content": "<p>Something I thought about was simply to do as follow: if there is an error, we simply try to check all doc aliases, and if there are none, then we show the syntax error</p>",
        "id": 266954701,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1641399180
    },
    {
        "content": "<p>I think it's better to have a clean separation of duties. The query parser's job is to produce a ParsedQuery (or possibly an error). <code>execSearch</code>'s job is to process that query.</p>\n<p>Since we already have a way to express \"match this exact string\" in a ParsedQuery, we might as well use that. Then <code>execSearch</code> can do its job as normal.</p>",
        "id": 266955567,
        "sender_full_name": "jsha",
        "timestamp": 1641399601
    },
    {
        "content": "<p>It's not part of the parser, it's after it. Something like:</p>\n<div class=\"codehilite\"><pre><span></span><code>var parsed = ParserQuery(userQuery);\nif (!parsed.error) {\n    execSearch(parsed);\n}\nlookForDocAliases(userQuery);\n</code></pre></div>\n<p>Currently, <code>lookForDocAliases</code> is called in the <code>!parsed.error</code> (and is already a special call).</p>",
        "id": 266956284,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1641399974
    },
    {
        "content": "<p>In the last round of review, I had a bunch of comments on places where we should really error out because invalid syntax was found, and you mentioned we can't do that because of doc aliases. I really think we should implement \"on error, search as a raw string\" as part of this PR. It will make the parser much much nicer.</p>",
        "id": 267203529,
        "sender_full_name": "jsha",
        "timestamp": 1641570066
    },
    {
        "content": "<p>I'm fine with it. So then we should show the syntax error message only if no result was found? It's a bit confusing no?</p>",
        "id": 267208444,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1641572432
    },
    {
        "content": "<p>Should I show the syntax error in any case?</p>",
        "id": 267209424,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1641572895
    },
    {
        "content": "<p>No, I think we should avoid showing syntax errors to the user if they can help it. What I'm thinking is like this:</p>\n<ul>\n<li>User enters <code>::::::</code></li>\n<li>Parser throws an error!</li>\n<li>We look for doc aliases that exactly match (or substring match?) <code>::::::</code>. If they exist, we show them.</li>\n<li>Otherwise, no results</li>\n</ul>",
        "id": 267210013,
        "sender_full_name": "jsha",
        "timestamp": 1641573209
    },
    {
        "content": "<p>We don't show the error like we do currently then? Because currently, if the parser has an error, we show it</p>",
        "id": 267216211,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1641576188
    },
    {
        "content": "<p>ah I hadn't realized that. yes, let's not show the error to the user. we could console.log it if you think it would be useful for debugging.</p>",
        "id": 267217500,
        "sender_full_name": "jsha",
        "timestamp": 1641576809
    },
    {
        "content": "<p>That seems pretty bad too... How can the user fix the query? Maybe we can show the syntax error and add something like <code>syntax error: ... but some doc aliases matched:</code></p>",
        "id": 267223500,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1641579792
    },
    {
        "content": "<p>I think we should show errors. Rustdoc's search is/will be complex enough that I think it'd be best to not silently fail.</p>",
        "id": 267232395,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641583937
    },
    {
        "content": "<p>Ok, so I'll implement all the errors suggested by <span class=\"user-mention\" data-user-id=\"315412\">@jsha</span> and if there are aliases matching it, show them too. I'll do that tomorrow. :)</p>",
        "id": 267244206,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1641590399
    }
]