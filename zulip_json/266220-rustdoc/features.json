[
    {
        "content": "<p>It would be interesting to try and list all the medium-sized \"features\" that rustdoc supports, as a way of thinking about complexity. An initial list of ones I can think of:</p>\n<ul>\n<li>themes</li>\n<li>custom HTML/CSS/JS/Markdown</li>\n<li>expand/collapse toggles</li>\n<li>mobile / desktop view</li>\n<li>works without JS</li>\n<li>works for local files</li>\n<li>search</li>\n<li>source view</li>\n<li>render without source</li>\n<li>intra-doc links</li>\n<li>discovery of implementors</li>\n<li>scrape examples</li>\n<li>playground links</li>\n<li>doctests</li>\n<li>jump to def</li>\n<li>doc(hidden)</li>\n<li>document private items</li>\n<li>doc lints</li>\n<li>standalone markdown file processing</li>\n</ul>\n<p>Of course these focus heavily on the frontend side because that's what I've been getting to know. Curious to hear what things others would add to the list!</p>",
        "id": 267327673,
        "sender_full_name": "jsha",
        "timestamp": 1641691929
    },
    {
        "content": "<p>Inlining is a huge source of complexity in rustdoc.</p>",
        "id": 267327862,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641692196
    },
    {
        "content": "<p>Auto traits and blanket impls also add a lot of complexity.</p>",
        "id": 267327881,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641692221
    },
    {
        "content": "<p>what's inlining in this context?</p>",
        "id": 267328004,
        "sender_full_name": "jsha",
        "timestamp": 1641692379
    },
    {
        "content": "<p>E.g., <code>std::vec::Vec</code> existing, even though Vec is actually defined in alloc.</p>",
        "id": 267328073,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641692407
    },
    {
        "content": "<p>ah. that's not done with a type alias?</p>",
        "id": 267328086,
        "sender_full_name": "jsha",
        "timestamp": 1641692431
    },
    {
        "content": "<p>Also the <code>doc(inline)</code> and <code>doc(no_inline)</code> attributes, which allow configuring inlining.</p>",
        "id": 267328087,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641692434
    },
    {
        "content": "<p>I guess that makes sense.. type aliases are displayed differently.</p>",
        "id": 267328092,
        "sender_full_name": "jsha",
        "timestamp": 1641692442
    },
    {
        "content": "<p>Nope, it's a re-export.</p>",
        "id": 267328093,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641692445
    },
    {
        "content": "<p>And type aliases only work for types; inlining works for anything.</p>",
        "id": 267328100,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641692458
    },
    {
        "content": "<p>oh right. so inlining is what we do to make re-exports look right?</p>",
        "id": 267328103,
        "sender_full_name": "jsha",
        "timestamp": 1641692462
    },
    {
        "content": "<p>Yep, but the rules are complicated and the process of inlining is complicated in general</p>",
        "id": 267328115,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641692487
    },
    {
        "content": "<p>And there's a lot of subtle bugs (which should be reduced once we, at some point, stop using HIR), like how occurrences of type aliases in an item are always shown as their value in re-exported docs, but may be opaque in the item's defining crate</p>",
        "id": 267328193,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641692570
    },
    {
        "content": "<p>Of course, we can't really get rid of inlining at this point (especially because it's very helpful and is relied upon by tons of crates), but it's still worth thinking of it as a source of complexity.</p>",
        "id": 267328257,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641692658
    },
    {
        "content": "<p>yeah, I think almost all of the features we would list are irremovable. But it's useful to count them (well, count is the wrong measure, but metaphorically pull them out of the chest and look at them all in a pile :-D)</p>",
        "id": 267328569,
        "sender_full_name": "jsha",
        "timestamp": 1641692984
    },
    {
        "content": "<p>I do wish we didn't support standalone Markdown file processing; it adds complexity and doesn't seem like rustdoc's job.</p>",
        "id": 267328877,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641693280
    }
]