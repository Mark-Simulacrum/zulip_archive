[
    {
        "content": "<p>I recently saw a <a href=\"https://twitter.com/ITStudiosi/status/1477637739080261638\">twitter thread</a> complaining about rust docs. The original tweeter was very aggressive and non-constructive in his criticism, but he did post a screenshot that got me thinking that some tweaks to the HTML formatting could make docs easier to read.</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/ITStudiosi/status/1477637739080261638\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/5c2b1dc8f66f281a53f407cb685ef5483f122ca7/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f313434333830353434373637333332373632332f73327843343744435f6e6f726d616c2e6a7067\"></a><p>Hint: I hate <a href=\"https://twitter.com/rustlang\">@rustlang</a> documentation</p><span>- üè¥‚Äç‚ò†Ô∏èüá™üá∫David Gil de G√≥mez (@ITStudiosi)</span></div></div>",
        "id": 268210772,
        "sender_full_name": "nnethercote",
        "timestamp": 1642372323
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/-on0-hYDseeIxNVRVQeDJkj5/rustdoc.jpg\">rustdoc.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/-on0-hYDseeIxNVRVQeDJkj5/rustdoc.jpg\" title=\"rustdoc.jpg\"><img src=\"/user_uploads/4715/-on0-hYDseeIxNVRVQeDJkj5/rustdoc.jpg\"></a></div>",
        "id": 268210782,
        "sender_full_name": "nnethercote",
        "timestamp": 1642372357
    },
    {
        "content": "<p>Possible areas for improvement.</p>\n<ul>\n<li>All the vertical gaps are the same: between <code>impl</code> sections, between functions, which makes it hard to see where one <code>impl</code> section ends and another begins.</li>\n<li>Big gap between <code>[-]</code> and <code>fn</code>. This provides space for the <code>¬ß</code> symbol to be added when hovering. But there's only ever zero or one <code>¬ß</code> symbols being shown, so it's unfortunate the big gap is present on every entry.</li>\n<li>Function description text is indented less than the type signature.</li>\n</ul>",
        "id": 268210990,
        "sender_full_name": "nnethercote",
        "timestamp": 1642372704
    },
    {
        "content": "<p>Possible solutions:</p>\n<ul>\n<li>More space (or even a horizontal line) between <code>impl</code> sections</li>\n</ul>",
        "id": 268211011,
        "sender_full_name": "nnethercote",
        "timestamp": 1642372777
    },
    {
        "content": "<ul>\n<li>swap position of the <code>[-]</code> and the <code>¬ß</code> slot</li>\n</ul>",
        "id": 268211018,
        "sender_full_name": "nnethercote",
        "timestamp": 1642372797
    },
    {
        "content": "<p>For reference this is the current (as of 1.58) docs for <code>Map</code>:<br>\n<a href=\"/user_uploads/4715/1dk3k7pZzU1t9W_KJO_21UKm/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/1dk3k7pZzU1t9W_KJO_21UKm/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/1dk3k7pZzU1t9W_KJO_21UKm/image.png\"></a></div>",
        "id": 268211061,
        "sender_full_name": "Urgau",
        "timestamp": 1642372857
    },
    {
        "content": "<p>Would people be open to these kinds of changes? I have no idea how finely honed the current formatting is, if the current formatting is the result of a lot of discussion or not</p>",
        "id": 268211070,
        "sender_full_name": "nnethercote",
        "timestamp": 1642372873
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"327095\">@Urgau</span> Good point. So the <code>¬ß</code> spacing issue is no longer a problem. But the boundaries between <code>impl</code> sections are even harder to see, because functions within <code>impl</code>s are no longer indented</p>",
        "id": 268211153,
        "sender_full_name": "nnethercote",
        "timestamp": 1642372980
    },
    {
        "content": "<p>I see the <code>impl</code> line is a slightly larger font than the <code>fn</code> lines, but that's a very subtle way to mark the sections. A bit of vertical space between <code>impl</code> sections would really help</p>",
        "id": 268211218,
        "sender_full_name": "nnethercote",
        "timestamp": 1642373081
    },
    {
        "content": "<p>I miss the indenting, too; I found that helpful to understand what the effect of folding would be</p>",
        "id": 268211246,
        "sender_full_name": "nnethercote",
        "timestamp": 1642373159
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@nnethercote</span> I like the idea of increasing vertical space between <code>impl</code> blocks! I also have a PR out to increase spacing between methods: <a href=\"https://github.com/rust-lang/rust/pull/92651\">https://github.com/rust-lang/rust/pull/92651</a>. </p>\n<p>I have heard a lot of critique that rustdoc is \"too noisy,\" and I tend to agree. There's a great post from 2019 laying out some of the critique in detail, plus linked issues: <a href=\"https://github.com/rust-lang/rust/issues/59829\">https://github.com/rust-lang/rust/issues/59829</a>. I've been working on some of those. I'd love additional collaboration!</p>",
        "id": 268211795,
        "sender_full_name": "jsha",
        "timestamp": 1642373912
    },
    {
        "content": "<p>For indent of <code>impl</code> blocks vs methods: I'm actually the one who removed that, in <a href=\"https://github.com/rust-lang/rust/pull/90155\">https://github.com/rust-lang/rust/pull/90155</a>. You can see from the before/after the problem I was trying to solve: methods weren't standing out enough from their bodies, because we \"split the difference\" on the indent for <code>impl</code> and <code>fn</code> respectively. <code>impl</code> blocks would get a 15px indent and <code>fn</code> blocks would get a 7px indent. Our standard indent is 24px.</p>\n<p>The other approach here would be to indent <code>impl</code> blocks by 24px, and <code>fn</code> blocks by another 24px. But I think that's less preferable. Many types have only one or a few impls. Indenting the whole page by an extra 24px because everything is nested under an impl seems wasteful. I much prefer your idea of doubling down on font sizes and spacing.</p>\n<p>Another thing that runs us into trouble: our biggest heading size (<code>h1</code>) is only 1.5em. The default size of an <code>h1</code> on an unstyled web page is 2em. If we let our <code>h1</code> be bigger, our other headings can be bigger too. Which gives us more room to distinguish <code>impl</code> headings by size.</p>",
        "id": 268212059,
        "sender_full_name": "jsha",
        "timestamp": 1642374228
    },
    {
        "content": "<p>Also, I think a lot of the critique revolves around the <code>[-]</code> / <code>[+]</code> controls. I would really like to find something better to do with them. I think the best thing is actually to hide them when not in use. The idea is that people are unlikely to go through clicking to collapse each individual toggle, but they _are_ likely to hit the \"collapse all\" button (or use the \"collapse all\" settings, or use the keyboard shortcut). Once things are collapsed, it makes sense to show the toggles. I presented a demo of this some months ago but didn't have the time and energy to spend convincing people it was the right way to go. <a href=\"https://github.com/rust-lang/rust/pull/86154\">https://github.com/rust-lang/rust/pull/86154</a></p>\n<p>Anyhow, please dive in and help prototype some design fixes! Happy to help you get to know the codebase if you don't already. I'm heading out for a walk but will be back online this evening Pacific Time.</p>",
        "id": 268212261,
        "sender_full_name": "jsha",
        "timestamp": 1642374471
    },
    {
        "content": "<p>Here's a rough cut of removing the toggles, increasing the spacing, and increasing the <code>impl</code> font size:</p>\n<p><a href=\"/user_uploads/4715/lNvJhTdyMbNd-K1DLd3cyp7s/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/lNvJhTdyMbNd-K1DLd3cyp7s/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/lNvJhTdyMbNd-K1DLd3cyp7s/image.png\"></a></div>",
        "id": 268212538,
        "sender_full_name": "jsha",
        "timestamp": 1642374781
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/6aWdZ-3LESjlr4RWXw4ir8Sh/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/6aWdZ-3LESjlr4RWXw4ir8Sh/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/6aWdZ-3LESjlr4RWXw4ir8Sh/image.png\"></a></div>",
        "id": 268212551,
        "sender_full_name": "jsha",
        "timestamp": 1642374809
    },
    {
        "content": "<p>@jsha I'm ambivalent about removing the folding controls, but I <strong>love</strong> the increased <code>impl</code> font size and vertical spacing in that second screenshot <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 268212711,
        "sender_full_name": "nnethercote",
        "timestamp": 1642375006
    },
    {
        "content": "<p>Whao! That looks so clean, much better that the current layout. <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span></p>",
        "id": 268212743,
        "sender_full_name": "Urgau",
        "timestamp": 1642375066
    },
    {
        "content": "<p>The only nit I have is that the spacing between the <code>impl</code>s look \"to much\" (out of the place).</p>",
        "id": 268212805,
        "sender_full_name": "Urgau",
        "timestamp": 1642375134
    },
    {
        "content": "<p>I think the spacing between <code>impls</code> is good, but the spacing after the \"Trait Implementations\" heading is possibly too big</p>",
        "id": 268213727,
        "sender_full_name": "nnethercote",
        "timestamp": 1642376447
    },
    {
        "content": "<p>the other thing I thought of after I stepped away: really our expand/collapse controls should have two different modes:</p>\n<ul>\n<li>for methods (i.e. intrinsic implementations), the expand/collapse should be on the individual methods.</li>\n<li>for trait implementations, the expand/collapse should be on the <code>impl</code>.</li>\n</ul>\n<p>That way we avoid a lot of the noisiness inherent in having many levels of expand/collapse controls close to each other.</p>",
        "id": 268223107,
        "sender_full_name": "jsha",
        "timestamp": 1642388810
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@nnethercote</span> <span class=\"user-mention\" data-user-id=\"327095\">@Urgau</span> what do you think of this?</p>\n<p><a href=\"https://rustdoc.crud.net/jsha/space-impls/std/string/struct.String.html#blanket-implementations\">https://rustdoc.crud.net/jsha/space-impls/std/string/struct.String.html#blanket-implementations</a><br>\n<a href=\"https://rustdoc.crud.net/jsha/space-impls/std/vec/struct.Vec.html#trait-implementations\">https://rustdoc.crud.net/jsha/space-impls/std/vec/struct.Vec.html#trait-implementations</a><br>\n<a href=\"https://rustdoc.crud.net/jsha/space-impls/std/iter/struct.Map.html#trait-implementations\">https://rustdoc.crud.net/jsha/space-impls/std/iter/struct.Map.html#trait-implementations</a></p>",
        "id": 268314688,
        "sender_full_name": "jsha",
        "timestamp": 1642453113
    },
    {
        "content": "<p><a href=\"https://github.com/jsha/rust/pull/new/space-impls\">https://github.com/jsha/rust/pull/new/space-impls</a></p>",
        "id": 268314913,
        "sender_full_name": "jsha",
        "timestamp": 1642453282
    },
    {
        "content": "<p>@jsha: the vertical spaces are lovely. I'm undecided about the folding changes... less noise on the left is nice, but for some impls with lots of methods only being able to fold the entire impl worries me a bit, e.g. <code>impl&lt;B, I, F&gt; Iterator for Map&lt;I, F&gt;</code></p>",
        "id": 268316880,
        "sender_full_name": "nnethercote",
        "timestamp": 1642455029
    },
    {
        "content": "<p>Also, for <code>String</code> and <code>Vec</code> the \"Trait implementations\" and \"Blanket implementations\" methods are missing their text descriptions...</p>",
        "id": 268316907,
        "sender_full_name": "nnethercote",
        "timestamp": 1642455059
    },
    {
        "content": "<p>Out of curiosity - do you often fold up individual methods as you're reading a doc?</p>",
        "id": 268316945,
        "sender_full_name": "jsha",
        "timestamp": 1642455106
    },
    {
        "content": "<blockquote>\n<p>Also, for String and Vec the \"Trait implementations\" and \"Blanket implementations\" methods are missing their text descriptions...</p>\n</blockquote>\n<p>I don't understand this.</p>",
        "id": 268317006,
        "sender_full_name": "jsha",
        "timestamp": 1642455143
    },
    {
        "content": "<p>For <code>impl ... Iterator for Map...</code>: the content below each method is only one line long, so it's not that helpful to be able to individually fold the methods.</p>",
        "id": 268317055,
        "sender_full_name": "jsha",
        "timestamp": 1642455228
    },
    {
        "content": "<p>Pretty good, I would prefer if the <code>impl</code> block was a little bit smaller (\"1.1rem\" instead of \"1.2rem\") but otherwise I love it.</p>",
        "id": 268317112,
        "sender_full_name": "Urgau",
        "timestamp": 1642455273
    },
    {
        "content": "<p>I swear the text descriptions were missing, but now they're back. Hmm, forget about that one <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 268317262,
        "sender_full_name": "nnethercote",
        "timestamp": 1642455441
    },
    {
        "content": "<p>As for the folding... my most common use case is to fold everything and then skim the methods list, unfolding and refolding individual methods one at a time. With your change the way folding works in the \"Implementations\" and \"Methods from...\" sections is different to how it works in the \"Trait Implementations\" and \"Auto Trait Implementations\" and \"Blanket Implementations\" sections. The inconsistency is a concern. Often those latter impls are small, but sometimes they're not, e.g. <code>impl ... Iterator for Map...</code>. You say for that example that the text is only a line long, but that's still a lot of extra text when scanning through it.</p>",
        "id": 268317676,
        "sender_full_name": "nnethercote",
        "timestamp": 1642455880
    },
    {
        "content": "<p>Aha, I've worked out the missing text mystery. If I use the mouse to fold/unfold, things work fine. If I use the '-' key to fold everything and then use the mouse to unfold individual traits, the method text goes missing. This is in Firefox 96</p>",
        "id": 268317911,
        "sender_full_name": "nnethercote",
        "timestamp": 1642456125
    },
    {
        "content": "<p>Ah now I see what you're saying. Yep, that's a bug in this demo that I'd need to fix.</p>",
        "id": 268317933,
        "sender_full_name": "jsha",
        "timestamp": 1642456149
    },
    {
        "content": "<p>What about the use case when nothing is folded (i.e. the default view)? Is it important to you that there be lots of <code>[-]</code> buttons in the default view?</p>",
        "id": 268317942,
        "sender_full_name": "jsha",
        "timestamp": 1642456161
    },
    {
        "content": "<p>Probably not. \"Shrink everything and then selectively unfold/refold\" is my most common case, for sure.</p>",
        "id": 268318135,
        "sender_full_name": "nnethercote",
        "timestamp": 1642456320
    },
    {
        "content": "<p>Hmm, I see already that \"fold everything\" doesn't actually fold everything. E.g. for <code>String</code> the <code>impl String</code> is only partially folded, the method signatures are still visible. You can subsequently fold the entire <code>impl String</code>. Interesting. And the \"Methods for...\" section doesn't have a top-level <code>impl</code> into which all the methods can be folded.</p>",
        "id": 268318233,
        "sender_full_name": "nnethercote",
        "timestamp": 1642456378
    },
    {
        "content": "<p>Is it worth doing the vertical spacing change in one PR, since that seems uncontroversial, and then tinker with the folding in a follow-up?</p>",
        "id": 268318277,
        "sender_full_name": "nnethercote",
        "timestamp": 1642456420
    },
    {
        "content": "<p>Yes, that's intentional. Most (not all) types have one or a small number of inherent impls, and the most common use case is \"skim the methods list.\" So there's no point in making people expand the single inherent impl.</p>",
        "id": 268318334,
        "sender_full_name": "jsha",
        "timestamp": 1642456449
    },
    {
        "content": "<p>Yeah, makes sense</p>",
        "id": 268318353,
        "sender_full_name": "nnethercote",
        "timestamp": 1642456479
    },
    {
        "content": "<p><code>Map</code> is an unusual case because it has no <code>impl</code> of its own, but it does have some very large Trait Implementations</p>",
        "id": 268318389,
        "sender_full_name": "nnethercote",
        "timestamp": 1642456507
    },
    {
        "content": "<p>Yep. And that will be common to most types that <code>impl Iterator</code>, I think.</p>",
        "id": 268318419,
        "sender_full_name": "jsha",
        "timestamp": 1642456545
    },
    {
        "content": "<p>If you were skimming the methods on a big impl like that, what would you be looking for?</p>",
        "id": 268318478,
        "sender_full_name": "jsha",
        "timestamp": 1642456578
    },
    {
        "content": "<p>TBH I probably wouldn't be skimming that section on <code>Map</code>, I'd be more likely to be looking at <a href=\"https://rustdoc.crud.net/jsha/space-impls/std/iter/trait.Iterator.html\">https://rustdoc.crud.net/jsha/space-impls/std/iter/trait.Iterator.html</a> to find iterator methods</p>",
        "id": 268318538,
        "sender_full_name": "nnethercote",
        "timestamp": 1642456668
    },
    {
        "content": "<p>So, I don't hate the folding change, I can see pros and cons. I suspect people might wonder \"why can I fold individual methods in this <code>impl</code>, but not this other <code>impl</code>\", consistency-wise</p>",
        "id": 268318606,
        "sender_full_name": "nnethercote",
        "timestamp": 1642456721
    },
    {
        "content": "<p>I'll leave you with it. Thanks for looking into this, and I appreciate that this stuff is not easy and there are trade-offs involved <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 268318700,
        "sender_full_name": "nnethercote",
        "timestamp": 1642456804
    },
    {
        "content": "<p>the input is very much appreciated!</p>",
        "id": 268318733,
        "sender_full_name": "jsha",
        "timestamp": 1642456817
    },
    {
        "content": "<p>But I'm happy to answer any follow-up questions</p>",
        "id": 268318740,
        "sender_full_name": "nnethercote",
        "timestamp": 1642456820
    },
    {
        "content": "<p>I'll probably leave this on the shelf for now - I've been doing some large UI simplifications lately (particularly <a href=\"https://github.com/rust-lang/rust/pull/92692\">https://github.com/rust-lang/rust/pull/92692</a>), and while I'm excited for the result, it's been a lot of work and I need to refocus on day job / pruning the pear tree / vacuuming the house. :-D</p>",
        "id": 268318817,
        "sender_full_name": "jsha",
        "timestamp": 1642456879
    },
    {
        "content": "<p>But when I regain energy for UI changes, this will be one I'm excited to push to the forefront. And if you'd like to shepherd it through earlier, I'm happy to review.</p>",
        "id": 268318848,
        "sender_full_name": "jsha",
        "timestamp": 1642456915
    },
    {
        "content": "<p>I would just remove the folding changes, keep the vertical space/font size changes, and then you'd effectively be reviewing your own code <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 268319210,
        "sender_full_name": "nnethercote",
        "timestamp": 1642457186
    },
    {
        "content": "<p>well, there's also tests to write and further rounds of feedback to respond to. :-)</p>",
        "id": 268320146,
        "sender_full_name": "jsha",
        "timestamp": 1642458102
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315412\">@jsha</span> what about indenting both the methods and their docs each 24px? Then it would be even easier to see what impl methods belong to.</p>",
        "id": 268324245,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642461440
    },
    {
        "content": "<p>(i.e., the indent for the methods' docs would add up to 48px)</p>",
        "id": 268324257,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642461455
    },
    {
        "content": "<p>yeah, I think that's probably a good idea</p>",
        "id": 268325207,
        "sender_full_name": "jsha",
        "timestamp": 1642462288
    },
    {
        "content": "<p>I hesitated to do that for methods because it means effectively everything is double-indented. But this might be another place where it makes sense to have different styling for intrinsic impls and trait impls.</p>",
        "id": 268325313,
        "sender_full_name": "jsha",
        "timestamp": 1642462410
    },
    {
        "content": "<p>I'd suggest indenting even the intrinsic impls? Indenting is good, especially when you're in the middle of a long <code>impl</code> body it's the only indicator that you are in an <code>impl</code> body</p>",
        "id": 268331001,
        "sender_full_name": "nnethercote",
        "timestamp": 1642468203
    },
    {
        "content": "<p>Yeah, indentation doesn't seem that bad to me. If anything, it'll reduce the line length of the docs, which should improve readability</p>",
        "id": 268432001,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642528941
    },
    {
        "content": "<p>On desktop, indentation seems fine. On mobile, it‚Äôs a bit more questionable.</p>",
        "id": 268618874,
        "sender_full_name": "Michael notriddle Howell",
        "timestamp": 1642634606
    },
    {
        "content": "<p>Maybe we could skip -- or reduce -- the indentation on mobile then</p>",
        "id": 268626665,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642640255
    },
    {
        "content": "<p>One way stuff could be cleaned up quite a bit is if the derived instances of a trait were somehow much more terse. Like we don't need to know for the 10000th time that if a type derived clone it has <code>clone</code> and <code>clone_from</code>. Replacing that entire blob with something to the effect of \"this was derived\" is fine. Same for PartialEq and so on.</p>",
        "id": 268722533,
        "sender_full_name": "Lokathor",
        "timestamp": 1642697681
    },
    {
        "content": "<p>Probably most all trait impls that don't have doc comments on the individual impl are simple enough they could be trimmed down into a simpler format.</p>",
        "id": 268722856,
        "sender_full_name": "Lokathor",
        "timestamp": 1642697827
    },
    {
        "content": "<p>I like this idea in theory, but the problem is: you and I know that <code>impl Clone for Foo</code> on the doc page means that <code>Foo</code> has <code>clone</code> and <code>clone_from</code>. But new users don't necessarily. Or they may \"know\" that but it hasn't really sunk in yet through repetition. Where do we draw the line of sufficiently obvious / tedious trait implementations that we wouldn't show the methods? I think any reasonable definition would be so narrow as to not make much difference in complexity. We're better off sticking to something consistent, which is showing them all. After all, if you<br>\nsee some code that calls <code>foo.clone()</code> and you want to see what that <code>clone</code> method does, you'd expect to find it on the doc page for <code>Foo</code>.</p>\n<p>(Also, fun note, I didn't know about <code>clone_from</code>, and I've been doing Rust for almost 2 years now)</p>",
        "id": 268725058,
        "sender_full_name": "jsha",
        "timestamp": 1642698634
    },
    {
        "content": "<p>I don't know what it is specifically but I'm finding the new sidebar a lot harder to scan</p>",
        "id": 268906319,
        "sender_full_name": "Alex Macleod",
        "timestamp": 1642800918
    },
    {
        "content": "<p>I think it's the blue text (light theme)</p>",
        "id": 268906976,
        "sender_full_name": "Alex Macleod",
        "timestamp": 1642801303
    },
    {
        "content": "<p>Darkening the text seems reasonable.</p>",
        "id": 268911575,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642803883
    },
    {
        "content": "<p>It is indeed!</p>",
        "id": 268913360,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642804980
    },
    {
        "content": "<p>there's an interesting thing here - we're using the same link color everywhere (#3873AD), but sometimes it's on a white background and sometimes it's on a grey background:</p>\n<p><a href=\"/user_uploads/4715/N9H-S6GYzgMfKidejjCbH5HU/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/N9H-S6GYzgMfKidejjCbH5HU/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/N9H-S6GYzgMfKidejjCbH5HU/image.png\"></a></div>",
        "id": 268924793,
        "sender_full_name": "jsha",
        "timestamp": 1642813124
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/A4Hh14UmjQU5mzql6ctqb7qq/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/A4Hh14UmjQU5mzql6ctqb7qq/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/A4Hh14UmjQU5mzql6ctqb7qq/image.png\"></a></div>",
        "id": 268924808,
        "sender_full_name": "jsha",
        "timestamp": 1642813144
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/HBgqCaSA-ThzjpG48Xqpbyf5/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/HBgqCaSA-ThzjpG48Xqpbyf5/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/HBgqCaSA-ThzjpG48Xqpbyf5/image.png\"></a></div>",
        "id": 268924820,
        "sender_full_name": "jsha",
        "timestamp": 1642813166
    },
    {
        "content": "<p>You can see that the contrast ratio is different depending on the background. Against a white background it's 4.97. Against a grey background it's 4.56. Not a huge difference, but noticeable.</p>\n<p>If we darken the link color, I'd like to do it in a principled way - by adjusting it whenever the link is on a grey background, to maintain the same contrast ratio we would have if it were on a white background.</p>",
        "id": 268924954,
        "sender_full_name": "jsha",
        "timestamp": 1642813258
    },
    {
        "content": "<p>Another thing I'd be interested in trying: What if we made the sidebar background white?</p>",
        "id": 268924982,
        "sender_full_name": "jsha",
        "timestamp": 1642813292
    },
    {
        "content": "<p>I think I'd personally prefer having darker sidebar text rather than a lighter background: something close to black but with enough of a blue tint to be noticed.</p>",
        "id": 268929916,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642818101
    },
    {
        "content": "<p>I'd at least like to try that as a possibility.</p>",
        "id": 268929919,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642818111
    }
]