[
    {
        "content": "<p>I've been looking at search results on mobile lately in some of my design changes, and the tabs (\"In names (200)\", \"In Parameters (...etc\") take up a lot of vertical space. Particularly given the user will have their keyboard open when searching, this can push the actual results offscreen, depending on screen size.</p>\n<p><a href=\"/user_uploads/4715/ogeZfAJ67_eAq6VwFJndKvMC/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/ogeZfAJ67_eAq6VwFJndKvMC/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/ogeZfAJ67_eAq6VwFJndKvMC/image.png\"></a></div><p>Some options:</p>\n<ul>\n<li>Summarize them (\"Names\", \"Params\", \"Returns\", and omit the counts)</li>\n<li>Remove them entirely on mobile</li>\n<li>Remove them entirely everywhere, in favor of advanced search options</li>\n</ul>",
        "id": 267804490,
        "sender_full_name": "jsha",
        "timestamp": 1642031354
    },
    {
        "content": "<blockquote>\n<p>Remove them entirely everywhere, in favor of advanced search options</p>\n</blockquote>\n<p>I think this is what we've been planning to do, right?</p>",
        "id": 267804544,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642031388
    },
    {
        "content": "<p>Perhaps! I wasn't sure if we'd fully reached that conclusion yet. If so, great. I'm in favor.</p>",
        "id": 267804827,
        "sender_full_name": "jsha",
        "timestamp": 1642031537
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span></p>",
        "id": 267804943,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642031615
    },
    {
        "content": "<p>We didn't reach a conclusion yet indeed. For specialized queries, it's definitely a good idea but for \"general\" queries (qith only one element), I don't know if it is...</p>",
        "id": 267840112,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642064417
    },
    {
        "content": "<p>I don't see the point of keeping the tabs if we have proper support for queries like <code>-&gt; String</code> and <code>-&gt; String</code>. They're redundant.</p>",
        "id": 267915183,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642100681
    },
    {
        "content": "<p>It's twice the same. But in any case, when you look for <code>String</code>, you might want to see if it's in arguments or in returned types as well. When you look for <code>-&gt; String</code>, you only care about the returned types</p>",
        "id": 267916620,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642101335
    },
    {
        "content": "<p><code>-&gt; String</code> <em>means</em> look at the returned types.</p>\n<p>If you're searching for <code>String</code> and you want to only see it in arguments, then just do <code>String -&gt;</code>.</p>",
        "id": 267917124,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642101544
    },
    {
        "content": "<p>Actually it's <code>(String)</code>.</p>",
        "id": 267918308,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642102120
    },
    {
        "content": "<p>And maybe you might want to simply see where the type is used. In such case, you simply type <code>String</code> and see where it's used in <code>arguments</code> and in <code>returned types</code>.</p>",
        "id": 267918367,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642102150
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"210316\">GuillaumeGomez</span> <a href=\"#narrow/stream/266220-rustdoc/topic/search.20tab.20height/near/267918308\">said</a>:</p>\n<blockquote>\n<p>Actually it's <code>(String)</code>.</p>\n</blockquote>\n<p>Wait, what? That seems like a really confusing syntax, and it'll prevent us from adding grouping syntax.</p>",
        "id": 267922605,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642104155
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"210316\">GuillaumeGomez</span> <a href=\"#narrow/stream/266220-rustdoc/topic/search.20tab.20height/near/267918367\">said</a>:</p>\n<blockquote>\n<p>And maybe you might want to simply see where the type is used. In such case, you simply type <code>String</code> and see where it's used in <code>arguments</code> and in <code>returned types</code>.</p>\n</blockquote>\n<p>Or you simply type <code>-&gt; String</code>, which accomplishes the same thing in practically the same amount of time</p>",
        "id": 267922694,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642104193
    },
    {
        "content": "<p>I really thing these tabs are redundant. If we're going to have type-based search syntax, we shouldn't also have tabs for one particular use case</p>",
        "id": 267922738,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642104215
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Noah Lev</span> <a href=\"#narrow/stream/266220-rustdoc/topic/search.20tab.20height/near/267922694\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"210316\">GuillaumeGomez</span> <a href=\"#narrow/stream/266220-rustdoc/topic/search.20tab.20height/near/267918367\">said</a>:</p>\n<blockquote>\n<p>And maybe you might want to simply see where the type is used. In such case, you simply type <code>String</code> and see where it's used in <code>arguments</code> and in <code>returned types</code>.</p>\n</blockquote>\n<p>Or you simply type <code>-&gt; String</code>, which accomplishes the same thing in practically the same amount of time</p>\n</blockquote>\n<p>No it doesn't do the same thing, it only shows you the returned types.</p>",
        "id": 267923665,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642104607
    },
    {
        "content": "<p>Well, and then you can use <code>(String)</code> to show you arguments</p>",
        "id": 267923790,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642104677
    },
    {
        "content": "<p>I don't see how it's not the same thing</p>",
        "id": 267923805,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642104690
    },
    {
        "content": "<p>Can you elaborate?</p>",
        "id": 267923813,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642104692
    },
    {
        "content": "<p><code>-&gt; String</code> only shows when <code>String</code> is in the returned types, <code>(String)</code> only shows when <code>String</code> is in the arguments, <code>String</code> shows both</p>",
        "id": 267923923,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642104739
    },
    {
        "content": "<p>Yes, <code>String</code> shows both, but the tabs only show one each</p>",
        "id": 267924594,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642105123
    },
    {
        "content": "<p>So they're the same</p>",
        "id": 267924637,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642105154
    },
    {
        "content": "<p>The only difference is that you just click on the tab to switch to the other view, but it seems like such a rare situation to be flipping between tabs enough that just using search syntax instead would be significantly harder</p>",
        "id": 267924687,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642105187
    },
    {
        "content": "<p>I guess your argument makes sense. So here what I suggest: let's merge the big PR first, then when we start working on the \"search syntax helper\", we can decide whether or not we want to keep the tabs</p>",
        "id": 267924923,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642105304
    },
    {
        "content": "<p>But I think we should change the \"in arguments\" search syntax from <code>(String)</code> to <code>String -&gt;</code>. Using parentheses seems quite confusing since they usually mean \"group these terms\" in a search. Also, it'd be nice for them to be symmetric with <code>-&gt; String</code>.</p>",
        "id": 267926084,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642105891
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315412\">@jsha</span> what do you think about ^?</p>",
        "id": 267926123,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642105917
    },
    {
        "content": "<p>ooh yeah excellent idea. and I agree about the ambiguity of <code>(String)</code>. It's also ambiguous with tuple syntax.</p>",
        "id": 267927931,
        "sender_full_name": "jsha",
        "timestamp": 1642106869
    },
    {
        "content": "<p>the other thing we could do is:</p>\n<p><code>returns: String</code></p>\n<p><code>param: String</code></p>\n<p>And we could even have a third:</p>\n<p><code>references: String</code></p>\n<p>Which would encompass both <code>returns</code> and <code>param</code></p>",
        "id": 267928048,
        "sender_full_name": "jsha",
        "timestamp": 1642106917
    },
    {
        "content": "<p>That would be a change to the syntax we accept today but would be cleaner conceptually</p>",
        "id": 267928090,
        "sender_full_name": "jsha",
        "timestamp": 1642106940
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315412\">jsha</span> <a href=\"#narrow/stream/266220-rustdoc/topic/search.20tab.20height/near/267927931\">said</a>:</p>\n<blockquote>\n<p>ooh yeah excellent idea. and I agree about the ambiguity of <code>(String)</code>. It's also ambiguous with tuple syntax.</p>\n</blockquote>\n<p>we don't handle tuples</p>",
        "id": 267928125,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642106952
    },
    {
        "content": "<p>and currently, you can look for a function/method name, while checking its args and its returned types</p>",
        "id": 267928303,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642107033
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Noah Lev</span> <a href=\"#narrow/stream/266220-rustdoc/topic/search.20tab.20height/near/267917124\">said</a>:</p>\n<blockquote>\n<p><code>-&gt; String</code> <em>means</em> look at the returned types.</p>\n<p>If you're searching for <code>String</code> and you want to only see it in arguments, then just do <code>String -&gt;</code>.</p>\n</blockquote>\n<p>From the peanut gallery: I had no idea that that was a possibility.</p>\n<p>(That might be my own fault, though.)</p>",
        "id": 267935323,
        "sender_full_name": "scottmcm",
        "timestamp": 1642110388
    },
    {
        "content": "<p>No, it's because the documentation isn't very accessible. We plan to add a \"advanced search\" thing once my big search refactoring is merged</p>",
        "id": 267935600,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642110554
    },
    {
        "content": "<p>Yeah, and <code>-&gt; String</code> currently has a lot of bugs, and <code>(String)</code> hasn't even been added yet. They're both handled by a PR that'll hopefully be ready to be merged soon.</p>",
        "id": 267937057,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642111284
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"210316\">GuillaumeGomez</span> <a href=\"#narrow/stream/266220-rustdoc/topic/search.20tab.20height/near/267928125\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"315412\">jsha</span> <a href=\"#narrow/stream/266220-rustdoc/topic/search.20tab.20height/near/267927931\">said</a>:</p>\n<blockquote>\n<p>ooh yeah excellent idea. and I agree about the ambiguity of <code>(String)</code>. It's also ambiguous with tuple syntax.</p>\n</blockquote>\n<p>we don't handle tuples</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span> I think jsha means that it looks ambiguous to users, and it'd be ambiguous if we ever added support</p>",
        "id": 267937108,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642111312
    },
    {
        "content": "<p>I think it's part of the \"we can look at it after the big PR cleaning up stuff is merged\". Changing the syntax will be pretty easy after</p>",
        "id": 267937289,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642111407
    },
    {
        "content": "<p>No it won't. It'll break the users' muscle memory!</p>",
        "id": 267937675,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642111637
    },
    {
        "content": "<p>No one is using the extended syntax currently, so I'm pretty sure it won't be an issue. Another thing to note is that we will have the \"advanced search\", so they won't even need to think to fill the search :D</p>",
        "id": 267938039,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642111811
    },
    {
        "content": "<p>I really think it makes sense to use the <code>String -&gt;</code> syntax from the beginning, rather than landing it as <code>(String)</code> and immediately changing it</p>",
        "id": 267938742,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642112063
    },
    {
        "content": "<p>Except that <code>String -&gt;</code> doesn't make sense to me</p>",
        "id": 267939230,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642112272
    },
    {
        "content": "<p>and how can I look for an item named \"u8\" while checking if one of its arguments is \"String\" with your syntax?</p>",
        "id": 267939339,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642112314
    },
    {
        "content": "<p>Well, how can you do it with the tabs?</p>",
        "id": 267955433,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642122694
    },
    {
        "content": "<p>It's put in \"others\" currently. I thought we were debating on the syntax ^^'</p>",
        "id": 267990626,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642153068
    },
    {
        "content": "<p>I'm curious. Could y'all do, like, <code>arg:String</code>?</p>",
        "id": 267994506,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1642155434
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417924\">@inquisitivecrystal</span> I actually like this suggestion</p>",
        "id": 268036822,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642177487
    },
    {
        "content": "<p>just not sure how to mix it with \"not\" arg or return elements...</p>",
        "id": 268036890,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642177532
    },
    {
        "content": "<p>FWIW, I still like <code>String -&gt;</code> because it's consistent with Hoogle (actually Hoogle is <code>String -&gt; *</code> IIRC)</p>",
        "id": 268067450,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642191834
    },
    {
        "content": "<p>Except that it doesn't allow what I mentioned above ;)</p>",
        "id": 268067535,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642191866
    },
    {
        "content": "<p>What is it that you mentioned above? I still don't understand :(</p>",
        "id": 268067669,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642191956
    },
    {
        "content": "<p>I want to look for an item named <code>foo</code> which takes a <code>string</code> as argument: <code>foo(string)</code></p>",
        "id": 268067833,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642192035
    },
    {
        "content": "<p>Oh, that's supported?</p>",
        "id": 268067871,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642192061
    },
    {
        "content": "<p>(In the giant PR)</p>",
        "id": 268067921,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642192070
    },
    {
        "content": "<p>Isn't that a really niche use case though?</p>",
        "id": 268067972,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642192080
    },
    {
        "content": "<p>If you already know what something is named, there aren't going to be that many results to pick from</p>",
        "id": 268068074,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642192093
    },
    {
        "content": "<p>Can you give an example of when this would be useful?</p>",
        "id": 268068107,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642192100
    },
    {
        "content": "<p>yes it's supported</p>",
        "id": 268068166,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642192113
    },
    {
        "content": "<p>no idea</p>",
        "id": 268068211,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642192123
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"210316\">GuillaumeGomez</span> <a href=\"#narrow/stream/266220-rustdoc/topic/search.20tab.20height/near/268068211\">said</a>:</p>\n<blockquote>\n<p>no idea</p>\n</blockquote>\n<p>That's the problem IMO. We can't think of a case where it'd be useful, and it adds complexity</p>",
        "id": 268068749,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642192302
    },
    {
        "content": "<p>Can you please remove support for that from the mega-PR? If we decide it's worthwhile later on, we can always re-add it</p>",
        "id": 268068834,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642192335
    },
    {
        "content": "<p>Can you also list all the features that are present in the mega-PR? I had no idea this one even existed</p>",
        "id": 268068872,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642192363
    },
    {
        "content": "<p>It doesn't add complexity. Depending on where we are in the parsing, we put the argument in <code>elems</code>, <code>args</code> or <code>returned</code>...</p>",
        "id": 268068934,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642192398
    },
    {
        "content": "<p>It does add <em>some</em> complexity to the implementation, but that's not my point. It adds yet another feature to the UI that we don't even need.</p>",
        "id": 268069066,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642192459
    },
    {
        "content": "<p>We shouldn't have features just for the sake of having them; there should actually be an important enough use that the additional complexity is worth it</p>",
        "id": 268069099,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642192480
    },
    {
        "content": "<p>Any time you add a feature, you increase complexity, even if it doesn't seem like it at first</p>",
        "id": 268069124,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642192496
    },
    {
        "content": "<p>I removed all the complexity T_T</p>",
        "id": 268069154,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642192508
    },
    {
        "content": "<p>Just because the implementation is better-written doesn't mean there's no complexity</p>",
        "id": 268069200,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642192534
    },
    {
        "content": "<p>And the implementation is still quite a lot of code, which demonstrates the complexity</p>",
        "id": 268069309,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642192578
    },
    {
        "content": "<p>the whole function handling this case: <a href=\"https://github.com/rust-lang/rust/pull/90630/files#diff-766c50b21af39c8c0abd3fdba5f3c49a73c38b7b66ded4c7939e83b7244dfd3dR1162\">https://github.com/rust-lang/rust/pull/90630/files#diff-766c50b21af39c8c0abd3fdba5f3c49a73c38b7b66ded4c7939e83b7244dfd3dR1162</a></p>",
        "id": 268069343,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642192598
    },
    {
        "content": "<p>not just this case but when we have mixed things, like arguments and returned types</p>",
        "id": 268069375,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642192622
    },
    {
        "content": "<p>(That anchor doesn't work)</p>",
        "id": 268069378,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642192623
    },
    {
        "content": "<p>ah? Hold on</p>",
        "id": 268069396,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642192631
    },
    {
        "content": "<p>Ah, fixed</p>",
        "id": 268069416,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642192641
    },
    {
        "content": "<p>I had to expand the file</p>",
        "id": 268069421,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642192643
    },
    {
        "content": "<p>I was about to say it's the function <code>handleArgs</code> in the <code>search.js</code> file</p>",
        "id": 268069447,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642192665
    },
    {
        "content": "<p>I find that function quite unclear still. What do <code>row</code> and <code>results</code> mean? Why are there three different local variables with <code>lev</code> (for Levenshtein, I presume) in them?</p>",
        "id": 268069565,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642192713
    },
    {
        "content": "<p>I'm not saying this particular feature adds a ton of complexity by itself, but it increases the overall load</p>",
        "id": 268069611,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642192737
    },
    {
        "content": "<p>No it doesn't, the code would be the same without it</p>",
        "id": 268069651,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642192758
    },
    {
        "content": "<p>What do you mean?</p>",
        "id": 268069669,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642192771
    },
    {
        "content": "<p>The code doesn't make a difference between arguments and items' name unless arguments are specified as such</p>",
        "id": 268069768,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642192809
    },
    {
        "content": "<p>row has a documentation entry in <code>extern.js</code> too</p>",
        "id": 268069815,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642192839
    },
    {
        "content": "<p>As for the lev variables, it's to compute median</p>",
        "id": 268069876,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642192873
    },
    {
        "content": "<p>(might be worth commenting it in the code)</p>",
        "id": 268069898,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642192884
    },
    {
        "content": "<p>I still don't really understand :(</p>\n<p>You said that if we changed the syntax to <code>String -&gt;</code>, it would break this feature. Then there must be some code that's responsible for this feature if it could break?</p>",
        "id": 268069950,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642192910
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"315412\">@jsha</span> – what do you think about this?</p>",
        "id": 268070375,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642193103
    },
    {
        "content": "<p>I didn't say it would break, I said that in your case, args and names are impossible to differentiate</p>",
        "id": 268070376,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642193105
    },
    {
        "content": "<p>so that case I provided doesn't work anymore</p>",
        "id": 268070411,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642193124
    },
    {
        "content": "<p>Ok, I just feel like <code>(String)</code> is unintuitive syntax, but supporting that use case is much more important that supporting searching by function name <em>and</em> arguments simultaneously</p>",
        "id": 268070540,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642193196
    },
    {
        "content": "<p>If <span class=\"user-mention\" data-user-id=\"315412\">@jsha</span> agrees with you, then I'll simply remove the <code>elems</code> and consider everything as either argument or returned type</p>",
        "id": 268070876,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642193396
    },
    {
        "content": "<p>I agree with what Noah is saying. The search PR (<a href=\"https://github.com/rust-lang/rust/pull/90630\">https://github.com/rust-lang/rust/pull/90630</a>) is a major refactoring, which is great. But it's dangerous to mix refactoring and new features (or in this case new syntax). So we should remove all new syntax from the search PR.</p>\n<p>If we want to add new syntax later, that should be a separate conversation from the refactoring.</p>",
        "id": 268071072,
        "sender_full_name": "jsha",
        "timestamp": 1642193510
    },
    {
        "content": "<p>And, like I said, if we find good reasons to have the feature, I'd be okay with re-adding it :)</p>",
        "id": 268071073,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642193511
    },
    {
        "content": "<p>At this point I just want to query parser to be merged so things are cleaned up and we can all remove the current horrific code we have. So whatever you want</p>",
        "id": 268071209,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642193583
    },
    {
        "content": "<p>do we still allow multiple arguments or not?</p>",
        "id": 268071234,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642193597
    },
    {
        "content": "<p>same question for returned types</p>",
        "id": 268071242,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642193605
    },
    {
        "content": "<p>are multiple arguments permitted by the current search syntax?</p>",
        "id": 268071393,
        "sender_full_name": "jsha",
        "timestamp": 1642193679
    },
    {
        "content": "<p>I don't think it is</p>",
        "id": 268071510,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642193755
    },
    {
        "content": "<p>then we shouldn't permit them in the refactoring PR</p>",
        "id": 268071580,
        "sender_full_name": "jsha",
        "timestamp": 1642193773
    },
    {
        "content": "<p>then this whole rework is mostly useless...</p>",
        "id": 268071666,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642193825
    },
    {
        "content": "<p>Why?</p>",
        "id": 268071681,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642193834
    },
    {
        "content": "<p>It's extremely valuable to improve code quality</p>",
        "id": 268071704,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642193845
    },
    {
        "content": "<p>because then there is no syntax to enforce or anything</p>",
        "id": 268071776,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642193879
    },
    {
        "content": "<p>we can keep a simple <code>split</code> call and forget about things</p>",
        "id": 268071837,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642193895
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"315412\">@jsha</span> and I see this PR as laying the groundwork for adding more features later</p>",
        "id": 268071848,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642193903
    },
    {
        "content": "<p>For example, I think everyone's in favor of having <em>some</em> form of type-based search</p>",
        "id": 268071875,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642193922
    },
    {
        "content": "<p>it's how I saw it too</p>",
        "id": 268071876,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642193922
    },
    {
        "content": "<p>currently you can't even make a search with an argument and a returned type</p>",
        "id": 268071932,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642193953
    },
    {
        "content": "<p>Also, I was confused by this PR because I saw all the things about multiple parameters, and assumed that was part of the current search that we had to keep supporting.</p>",
        "id": 268071955,
        "sender_full_name": "jsha",
        "timestamp": 1642193970
    },
    {
        "content": "<p>it supports generics and a few things</p>",
        "id": 268071997,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642193994
    },
    {
        "content": "<p>I think the biggest problem we have with this PR is that we all have different understanding and knowledge of what the current state of rustdoc is and what this PR changes it to</p>",
        "id": 268072100,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642194023
    },
    {
        "content": "<p>So let's list all the things that search currently supports, and then list all the things that it will support after the current version of this PR</p>",
        "id": 268072156,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642194047
    },
    {
        "content": "<p>I guess I failed my communication</p>",
        "id": 268072157,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642194047
    },
    {
        "content": "<p>so currently it supports quote strings, generics, returned type</p>",
        "id": 268072199,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642194078
    },
    {
        "content": "<p>It's ok, we'll learn how to communicate better about this sort of thing in the future :)</p>",
        "id": 268072203,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642194080
    },
    {
        "content": "<p>Can you elaborate what you mean by \"generics\"? Do you mean replacing occurrences of generics with their bounds?</p>",
        "id": 268072239,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642194105
    },
    {
        "content": "<p>hopefully, we all spent way too much time on something and if we all have a different understanding of the result, I made a terrible job</p>",
        "id": 268072259,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642194121
    },
    {
        "content": "<p>It also supports searching by item type: <code>struct:</code> etc.</p>",
        "id": 268072283,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642194122
    },
    {
        "content": "<p>ah true! type filtering too</p>",
        "id": 268072307,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642194131
    },
    {
        "content": "<p>I mean: <code>string&lt;u8&gt;</code></p>",
        "id": 268072323,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1642194143
    }
]