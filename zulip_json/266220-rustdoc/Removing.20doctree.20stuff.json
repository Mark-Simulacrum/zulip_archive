[
    {
        "content": "<p>Is anyone currently working on removing <code>doctree::Import</code>?</p>",
        "id": 222763658,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610650081
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"319144\">@Rune Tynan</span> not that I know of :)</p>",
        "id": 222769456,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610652431
    },
    {
        "content": "<p>it might be tricky though - I think <code>Import</code> is used for inlining</p>",
        "id": 222769481,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610652440
    },
    {
        "content": "<p>It looks like it is, but also that the inlining part of the clean implementation doesn't use anything not easily available from the Item or its Kind</p>",
        "id": 222769784,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610652555
    },
    {
        "content": "<p>gotcha - you can remove <code>doctree::Import</code> without changing much code in <code>visit_ast</code> or clean</p>",
        "id": 222769859,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610652579
    },
    {
        "content": "<p>sounds perfect :)</p>",
        "id": 222769869,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610652581
    },
    {
        "content": "<p>Yeah. I'm running tests now (I actually started doing the work, then thought 'wait I should ask if this is necessary'), I basically just ripped out <code>Import</code>, replaced <code>impl Clean</code> with <code>clean_use_statement</code>, and made <code>Item {...}</code> into <code>Item::from_def_id_and_parts</code></p>",
        "id": 222770146,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610652693
    },
    {
        "content": "<p>I got what looks like an unrelated failure from <code>issue-80893.rs</code>, about 'failed to spawn rustc process: The system cannot find the file specified'</p>",
        "id": 222771959,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610653293
    },
    {
        "content": "<p>Other than that, rustdoc-ui and rustdoc suites pass</p>",
        "id": 222771997,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610653307
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"319144\">Rune Tynan</span> <a href=\"#narrow/stream/266220-rustdoc/topic/Removing.20doctree.20stuff/near/222771959\">said</a>:</p>\n<blockquote>\n<p>I got what looks like an unrelated failure from <code>issue-80893.rs</code>, about 'failed to spawn rustc process: The system cannot find the file specified'</p>\n</blockquote>\n<p>hmm, is that a doctest or something?</p>",
        "id": 222772167,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610653360
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>// compile-flags: --test -Z unstable-options --test-builder true\n\n/// ```no_run\n/// This tests that `--test-builder` is accepted as a flag by rustdoc.\n/// ```\npub struct Foo;\n</code></pre></div>",
        "id": 222772272,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610653400
    },
    {
        "content": "<p>oh lol I don't think <code>true</code> exists on windows</p>",
        "id": 222772580,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610653498
    },
    {
        "content": "<p>I would just ignore that error, or if you have time find some innocuous command that's on both windows and linux</p>",
        "id": 222772625,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610653515
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/81021\">https://github.com/rust-lang/rust/issues/81021</a> opened</p>",
        "id": 222773614,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610653914
    },
    {
        "content": "<p>doctree::Variant looks like the easiest thing to remove: 1 use in all places, impl Clean for Variant, never constructed or referenced</p>",
        "id": 222777836,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610655582
    },
    {
        "content": "<p>I really wish the compiler would warn about unused <code>impl</code>s</p>",
        "id": 222778182,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610655726
    },
    {
        "content": "<p>I have a feeling there's a ton floating around rustdoc</p>",
        "id": 222778204,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610655737
    },
    {
        "content": "<p>Staples: that was easy<br>\n<a href=\"https://github.com/rust-lang/rust/pull/81023\">https://github.com/rust-lang/rust/pull/81023</a></p>",
        "id": 222778592,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610655886
    },
    {
        "content": "<p>I got in trouble on a final project once for saying that lol</p>",
        "id": 222778668,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610655913
    },
    {
        "content": "<p>teacher called me a smartass but gave me a 100 anyway <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 222778684,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610655922
    },
    {
        "content": "<p>Hahaha</p>",
        "id": 222778730,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610655944
    },
    {
        "content": "<p>The <code>StructType</code> enum is used in clean types, it and its associated function look like it might be worth to just move them into <code>clean/types.rs</code>. And maybe remove the duplicate type in the json rendering module</p>",
        "id": 222779414,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610656206
    },
    {
        "content": "<p>I would prefer to keep the JSON stuff for now</p>",
        "id": 222779457,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610656231
    },
    {
        "content": "<p>it's buggy enough without tying it to the rest of rustdoc</p>",
        "id": 222779488,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610656249
    },
    {
        "content": "<p>but yeah, +1 to moving things from doctree to clean</p>",
        "id": 222779529,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610656269
    },
    {
        "content": "<p>Alright, so all the JSON stuff getting cleaned up is its own whole project</p>",
        "id": 222779538,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610656273
    },
    {
        "content": "<p>well, getting it to work at <em>all</em> is a project <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 222779561,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610656284
    },
    {
        "content": "<p>it ICEs half the time right now</p>",
        "id": 222779566,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610656289
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/80664\">https://github.com/rust-lang/rust/issues/80664</a></p>",
        "id": 222779600,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610656307
    },
    {
        "content": "<p>Sounds like a Good Timeâ„¢</p>",
        "id": 222779732,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610656358
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/266220-rustdoc/topic/Removing.20doctree.20stuff/near/222779566\">said</a>:</p>\n<blockquote>\n<p>it ICEs half the time right now</p>\n</blockquote>\n<p>speaking of which <a href=\"https://github.com/rust-lang/rust/pull/81021#issuecomment-760456663\">https://github.com/rust-lang/rust/pull/81021#issuecomment-760456663</a></p>",
        "id": 222780199,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610656562
    },
    {
        "content": "<p>Looking at that error, and the code it errored on, it looks like that code expects python3 but was run with python2</p>",
        "id": 222780366,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610656647
    },
    {
        "content": "<p><code>super()</code> is a python3 construct, for python2 you use <code>super(ClsName, instance)</code></p>",
        "id": 222780504,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610656705
    },
    {
        "content": "<p>... why would it only fail now?</p>",
        "id": 222780505,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610656705
    },
    {
        "content": "<p>maybe it's never hit this code before</p>",
        "id": 222780516,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610656719
    },
    {
        "content": "<p>dynamic languages are so annoying</p>",
        "id": 222780537,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610656731
    },
    {
        "content": "<p>Yeah, it looks like this code is only hit in the error path</p>",
        "id": 222780738,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610656834
    },
    {
        "content": "<p>So there was a legitimate error, but we can't see it because it triggered an unrelated error</p>",
        "id": 222780822,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610656878
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"319144\">@Rune Tynan</span> if you have python3 locally you should be able to replicate the error</p>",
        "id": 222780874,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610656899
    },
    {
        "content": "<p><code>x.py test src/test/rustdoc-json</code></p>",
        "id": 222780888,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610656905
    },
    {
        "content": "<p>Yep, trying it now</p>",
        "id": 222780915,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610656922
    },
    {
        "content": "<p>Well. It just ran and both tests passed</p>",
        "id": 222780966,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610656932
    },
    {
        "content": "<p>Wait! Wrong branch</p>",
        "id": 222780980,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610656939
    },
    {
        "content": "<p>try with python2?</p>",
        "id": 222780983,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610656943
    },
    {
        "content": "<p>Running on the right branch with python3.6, and behind door number one is... (waiting for librustdoc to build again)</p>",
        "id": 222781232,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610657053
    },
    {
        "content": "<p><code>__main__.SubsetException: ['inner', 'items', '0:3', 'inner', 'items', '0:7', 'inner']: Key </code>glob<code> not found in output</code></p>",
        "id": 222781245,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610657070
    },
    {
        "content": "<p>Hmmm, guess it's time for me to look through the json code to understand what changed</p>",
        "id": 222781299,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610657098
    },
    {
        "content": "<p>hmm that's weird, you didn't mess with the JSON at all</p>",
        "id": 222781313,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610657103
    },
    {
        "content": "<p>I changed <code>Item {...}</code> into <code>Item::from_def_id_and_parts(...)</code>, I wonder if one of the values changed. You'd think that would change the HTML tests somehow, but maybe it's subtle / only the JSON cares??</p>",
        "id": 222781474,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610657183
    },
    {
        "content": "<p>I would see what the JSON output was before and after your change</p>",
        "id": 222781564,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610657252
    },
    {
        "content": "<p>(shouldn't need to recompile btw -  I would expect latest nightly to have the same output)</p>",
        "id": 222781692,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610657306
    },
    {
        "content": "<p>If I'm reading this trace right, the key missing is <code>\"glob\": false</code> on line 137 of nested.expected</p>",
        "id": 222782238,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610657540
    },
    {
        "content": "<p>Yeah, I can't see why this would have changed, except that I somehow changed the kind of the item</p>",
        "id": 222783590,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610658162
    },
    {
        "content": "<p>seems weird that the kind would have changed</p>",
        "id": 222783627,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610658185
    },
    {
        "content": "<p>if you revert the <code>from_def_id...</code> call, does it fix it?</p>",
        "id": 222783639,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610658194
    },
    {
        "content": "<p>if so you can run <code>assert_eq!</code> to see exactly what changed</p>",
        "id": 222783669,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610658206
    },
    {
        "content": "<p>That didn't seem to fix it, so I'm stumped. I also tried playing with using <code>renamed.unwrap_or(item.ident.name)</code> instead of what the generic impl does, and that didn't fix it either</p>",
        "id": 222785132,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610658887
    },
    {
        "content": "<p>hmm, let me look at the chnages again</p>",
        "id": 222785188,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610658920
    },
    {
        "content": "<p>Please do, I think I've hit the 'I wrote it and I can't see the error' part :P</p>",
        "id": 222785568,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610659083
    },
    {
        "content": "<p>oh don't worry, this happens every time I try to fix up clean lol</p>",
        "id": 222785765,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610659157
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"319144\">@Rune Tynan</span> can you revert the <code>from_def_id</code> change and push it to a branch somewhere so the diff is smaller?</p>",
        "id": 222786043,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610659293
    },
    {
        "content": "<p>even if it doesn't fix the error it will be easier to read</p>",
        "id": 222786056,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610659300
    },
    {
        "content": "<p><a href=\"https://github.com/CraftSpider/rust/tree/rustdoc-temp\">https://github.com/CraftSpider/rust/tree/rustdoc-temp</a><br>\nHere's the branch, minus the from_def_id_and_parts changes</p>",
        "id": 222786395,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610659448
    },
    {
        "content": "<p>Still errors, but may be easier to debug :P</p>",
        "id": 222786433,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610659465
    },
    {
        "content": "<p>thanks :)</p>",
        "id": 222786467,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610659484
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"319144\">@Rune Tynan</span> so the main difference I saw is that the new generated JSON has way more items than the old one</p>\n<div class=\"codehilite\"><pre><span></span><code>&gt; jq . /home/joshua/rustc/src/test/rustdoc-json/nested.expected | diff - &lt;(jq . /home/joshua/rustc/build/x86_64-unknown-linux-gnu/test/rustdoc-json/nested/nested.json) | grep &#39;^&gt;&#39; | wc -l\n20880\n</code></pre></div>",
        "id": 222794285,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610663133
    },
    {
        "content": "<p>so it's possible that the tests are just broken</p>",
        "id": 222794295,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610663138
    },
    {
        "content": "<p>Interesting. Also, looking at the actual json output, I notice that <code>[\"0:7\"][\"inner\"][\"glob\"]</code> exists, and is <code>false</code></p>",
        "id": 222797157,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610664773
    },
    {
        "content": "<p>Actually <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> From what I can tell, the <code>.expected</code> is not a full copy of the expected output, but a strict subset</p>",
        "id": 222797543,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610664970
    },
    {
        "content": "<p>As the test method is called 'check_subset'</p>",
        "id": 222797562,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610664985
    },
    {
        "content": "<p>And appears to only check that for item in expected, item matches in actual, not the other way around</p>",
        "id": 222797598,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610665019
    },
    {
        "content": "<p>I ran old vs new through a checker, and there is exactly one diff found:<br>\n<a href=\"/user_uploads/4715/eHiqJr8MDNFv9vVHtF7buAB4/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/eHiqJr8MDNFv9vVHtF7buAB4/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/eHiqJr8MDNFv9vVHtF7buAB4/image.png\"></a></div>",
        "id": 222802754,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610668751
    },
    {
        "content": "<p>(That image is backwards, new is on left)</p>",
        "id": 222802891,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610668835
    },
    {
        "content": "<p>I literally swap that line in expected, and... it works! Yay for error messages that didn't convey the change that occured</p>",
        "id": 222802947,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610668889
    },
    {
        "content": "<p>I think the position change is just because use items are now added to the final vec in the same order they are fed to rustdoc, not processed before other items</p>",
        "id": 222804204,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610670090
    },
    {
        "content": "<p>ok, so just a bug in the test suite then</p>",
        "id": 222804527,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610670351
    },
    {
        "content": "<p>maybe sort the items before checking them?</p>",
        "id": 222804578,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610670367
    },
    {
        "content": "<p>oh I see you updated the <code>.expected</code> file, that works too. Can you add a comment to the test suite for the next poor soul?</p>",
        "id": 222804863,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610670647
    },
    {
        "content": "<p>Does this sound good?</p>\n<div class=\"codehilite\"><pre><span></span><code># WARNING: The error messages produced by this may be misleading, in the case of list re-ordering it may\n#          point to apparently unrelated keys.\n</code></pre></div>",
        "id": 222805306,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610671038
    },
    {
        "content": "<p>looks great, thanks :)</p>",
        "id": 222805430,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610671139
    },
    {
        "content": "<p>All this JSON stuff is making me wonder about how it could be improved, either the tests or the JSON rendering itself. I wonder if there could be something like jsondocck.py, which would interpret <code>@has ...</code> comments into JSON paths, and allow things like 'in this list, but I don't care where'</p>",
        "id": 222805713,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610671357
    },
    {
        "content": "<p>that would be pretty cool :)</p>",
        "id": 222805910,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610671543
    }
]