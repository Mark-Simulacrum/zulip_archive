[
    {
        "content": "<p>I didn't see mention of this in the docs, so perhaps someone here knows if it's possible to mark all doc tests as <code> ```ignore</code> in a scope using attributes. I'm currently using some macro magic to duplicate the doc comment in another venue that can read markdown, and the code snippets are not actually rust code.</p>",
        "id": 218762569,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607033766
    },
    {
        "content": "<p>Btw, if it's not Rust and you don't want Rust syntax highlighting, you can use the <code>text</code> language (<code> ```text</code>).</p>",
        "id": 218762673,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607033828
    },
    {
        "content": "<p>I can't do that because they aren't text either, and the other doc tool that is reading it has a different default language</p>",
        "id": 218762782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607033890
    },
    {
        "content": "<p>I don't think there's a way to do this.</p>",
        "id": 218762883,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607033958
    },
    {
        "content": "<p>dang</p>",
        "id": 218762916,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607033976
    },
    {
        "content": "<p>what does rustdoc do with unrecognized languages?</p>",
        "id": 218762936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607033992
    },
    {
        "content": "<p>Doesn't highlight them nor run tests</p>",
        "id": 218763054,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1607034058
    },
    {
        "content": "<p>I guess that should be alright</p>",
        "id": 218763081,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607034080
    },
    {
        "content": "<p>I'm not exactly sure but I believe it just inject the raw source (barring <code># code</code> lines)</p>",
        "id": 218763192,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1607034128
    },
    {
        "content": "<p>...but it's markdown?</p>",
        "id": 218763223,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607034146
    },
    {
        "content": "<p><em>something</em> has to render it</p>",
        "id": 218763245,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607034157
    },
    {
        "content": "<p>well yes, but it doesn't add blocks inside the <code>&lt;pre&gt;</code> code block (when outputting html)</p>",
        "id": 218763360,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1607034217
    },
    {
        "content": "<p>ah gotcha</p>",
        "id": 218763399,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607034241
    },
    {
        "content": "<p>It still does <code>#</code> stripping even on unrecognized languages?</p>",
        "id": 218763473,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607034265
    },
    {
        "content": "<p>I'm currently editing the file for highlighting, it only handles rust, the rest is just pasted betwen <code>&lt;pre&gt;</code></p>",
        "id": 218763486,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1607034270
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/266220-rustdoc/topic/skip.20doctests.20attribute.3F/near/218763473\">said</a>:</p>\n<blockquote>\n<p>It still does <code>#</code> stripping even on unrecognized languages?</p>\n</blockquote>\n<p>Not sure</p>",
        "id": 218763497,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1607034277
    },
    {
        "content": "<p>well there's escaping so I guess the fallout from that isn't too bad</p>",
        "id": 218763586,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607034336
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// ```c</span>\n<span class=\"sd\">/// # static int a = 0;</span>\n<span class=\"sd\">/// int main(void) {</span>\n<span class=\"sd\">///     return 0;</span>\n<span class=\"sd\">/// }</span>\n<span class=\"sd\">/// ```</span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p><code>touch src/main.rs; cg doc --no-deps; cat target/doc/playground/fn.main.html </code></p>\n<p>Output:</p>\n<div class=\"codehilite\" data-code-language=\"HTML\"><pre><span></span><code><span class=\"p\">&lt;</span><span class=\"nt\">code</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"language-c\"</span><span class=\"p\">&gt;</span># static int a = 0;\nint main(void) {\n    return 0;\n}\n<span class=\"p\">&lt;/</span><span class=\"nt\">code</span><span class=\"p\">&gt;</span>\n</code></pre></div>",
        "id": 218763841,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1607034476
    },
    {
        "content": "<p>so <code># lines</code> are not ignored</p>",
        "id": 218763897,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1607034487
    },
    {
        "content": "<p>(<code>cg</code> is my local alias for <code>cargo</code>)</p>",
        "id": 218763939,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1607034524
    },
    {
        "content": "<p>Related to <code>cg</code>: I also recently learned that you can do <code>cargo r</code>, <code>cargo b</code>, <code>cargo c</code>, and <code>cargo t</code> for run, build, check, and test. So you could do <code>cg r</code> with your setup! (Though <code>cargo d</code> doesn't do <code>cargo doc</code>)</p>",
        "id": 218768036,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607037118
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Camelid</span> <a href=\"#narrow/stream/266220-rustdoc/topic/skip.20doctests.20attribute.3F/near/218768036\">said</a>:</p>\n<blockquote>\n<p>Related to <code>cg</code>: I also recently learned that you can do <code>cargo r</code>, <code>cargo b</code>, <code>cargo c</code>, and <code>cargo t</code> for run, build, check, and test. So you could do <code>cg r</code> with your setup! (Though <code>cargo d</code> doesn't do <code>cargo doc</code>)</p>\n</blockquote>\n<p>Well I do <code>cgr</code> (no space) because I have tons of aliases</p>",
        "id": 218768138,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1607037172
    },
    {
        "content": "<p><code>git</code> is <code>g</code></p>",
        "id": 218768148,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1607037182
    },
    {
        "content": "<p>Aliases are life, I type <code>cg</code> so much</p>",
        "id": 218768271,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1607037254
    },
    {
        "content": "<p>I have <code>gst</code> for <code>git status</code> -- <code>g=git</code> is a good idea :)</p>",
        "id": 218768674,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607037546
    }
]