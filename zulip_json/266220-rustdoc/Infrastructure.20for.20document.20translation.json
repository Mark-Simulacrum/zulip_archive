[
    {
        "content": "<p>Hello, i'm thinking about doing something inline with <a href=\"https://github.com/rust-lang/community-localization/issues/5\">https://github.com/rust-lang/community-localization/issues/5</a> .<br>\nBefore doing so, i'd like some basic directional review.</p>",
        "id": 239838100,
        "sender_full_name": "Charles Lew",
        "timestamp": 1621652248
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span> this is a giant feature, nothing about it is simple</p>",
        "id": 239840745,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1621655017
    },
    {
        "content": "<p>I would start with an RFC maybe</p>",
        "id": 239840746,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1621655020
    },
    {
        "content": "<p>Oh, the translation is back</p>",
        "id": 239872863,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1621690063
    },
    {
        "content": "<p>for the translation to be handled by rustdoc, I think we need to be able to generate doc from an external source</p>",
        "id": 239872904,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1621690088
    },
    {
        "content": "<p>like a big file which is used as reference for all API entries</p>",
        "id": 239872917,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1621690107
    },
    {
        "content": "<p>I decide to try if i can come up with something that works together well with mdbook first. I'll revisit <code>rustdoc</code> part after that.</p>",
        "id": 240007996,
        "sender_full_name": "Charles Lew",
        "timestamp": 1621834260
    },
    {
        "content": "<p>Continuing from the topic of <a href=\"#narrow/stream/226068-t-community.2Fl10n/topic/mdbook.20localization.20.282nd.20try.29\">https://rust-lang.zulipchat.com/#narrow/stream/226068-t-community.2Fl10n/topic/mdbook.20localization.20.282nd.20try.29</a> ,  now we all agree rustdoc should use key-indexed translations. The question is that, if the content itself is not a good enough key (which i was exploring). what could be better?</p>",
        "id": 241701518,
        "sender_full_name": "Charles Lew",
        "timestamp": 1623000483
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> meant that the items and not the documentation itself should be used as key (please correct me if I misunderstood). This is something I planned to do, but that will require a LOT of work on rustdoc to allow to have documentation written in files outside the code and then imported back. Funnily enough, I wrote a crate which allows to extract and put back doc comments (from a markdown file) with the <code>rustdoc-stripper</code> crate. However, I really don't recommend it for big projects and certainly not for rustdoc in general.</p>",
        "id": 241745265,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1623055454
    },
    {
        "content": "<p>thanks!</p>",
        "id": 241755710,
        "sender_full_name": "Charles Lew",
        "timestamp": 1623061682
    },
    {
        "content": "<p>I'm also still a little curious what's so bad about using the documentation itself as the key. I've participated in rust annual survey translation for a few times, and we've always been doing this.(Translating paragraph-by-paragraph)</p>\n<p>Is it concerns about ambiguities that make people feel bad about it?</p>",
        "id": 241756107,
        "sender_full_name": "Charles Lew",
        "timestamp": 1623061948
    },
    {
        "content": "<p>It makes the translation much harder, there is no more \"continuity\" between paragraphs, and a few more reasons that I don't remember</p>",
        "id": 241786367,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1623076831
    },
    {
        "content": "<p>Well, taking <a href=\"https://github.com/crlf0710/rust-bookshelf-l10n/blob/master/reference-l10n/l18n/introduction.md\">this as an example</a>. The continuity is still preserved, since neighboring paragraphs are just a few lines away...</p>",
        "id": 241788368,
        "sender_full_name": "Charles Lew",
        "timestamp": 1623077578
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span> yeah what <span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span> said is correct, I'd say that the doc items should work as keys. So perhaps the path, or something, but annoyingly there's ambiguity when you have reexports and such</p>",
        "id": 241846866,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1623103123
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span> documentation itself as a key is terrible because the documentation _changes_. the survey works fine because we take great care to _freeze_ the english version before handing it off to translators</p>",
        "id": 241846924,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1623103166
    },
    {
        "content": "<p>\"use the text itself as a key\" is an older technique (used by gettext, etc) that has largely been obsoleted</p>",
        "id": 241846946,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1623103186
    },
    {
        "content": "<p>the way I see rustdoc's thing going is that you have one cli option to export each doc item in rustdoc to a key-value pair, with uniquely named keys, and another cli option that can _take_ all these key-value pairs and \"replace\" docs</p>",
        "id": 241847200,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1623103268
    },
    {
        "content": "<p>I'm thinking that we basically have one json or ftl or whatever file per src file, to limit ambiguity, and then the keys are named something sufficiently disambiguating (fully qualified relative path?)</p>",
        "id": 241847274,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1623103316
    },
    {
        "content": "<p>i'd startt with json or something</p>",
        "id": 241847331,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1623103329
    },
    {
        "content": "<p>because in the case of rustdoc we don't need fancy i18n features like plurals and stuff, it's pure textual replacement</p>",
        "id": 241847359,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1623103346
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132040\">Manish Goregaokar</span> <a href=\"#narrow/stream/266220-rustdoc/topic/Infrastructure.20for.20document.20translation/near/241846946\">said</a>:</p>\n<blockquote>\n<p>\"use the text itself as a key\" is an older technique (used by gettext, etc) that has largely been obsoleted</p>\n</blockquote>\n<p>Thank you for the insights of this!</p>",
        "id": 241867549,
        "sender_full_name": "Charles Lew",
        "timestamp": 1623123744
    },
    {
        "content": "<p>I feel something compatible with markdown parser would be nice. When doing the actual translation it would be nice if the newly written translated markdown doc comments can get a side-preview on-the-fly.</p>",
        "id": 241867883,
        "sender_full_name": "Charles Lew",
        "timestamp": 1623124273
    },
    {
        "content": "<p><code>rustdoc-stripper</code> is compatible with markdown so it's definitely a possibility. And in addition to that, I find markdown simpler to read/edit and you can add comments. But it's personal preference. :)</p>",
        "id": 241883611,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1623139752
    }
]