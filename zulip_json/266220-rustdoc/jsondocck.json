[
    {
        "content": "<p>So, looking around, there already exists both a JSONPath idea, and an implementation of it in Python:<br>\n<a href=\"https://goessner.net/articles/JsonPath/\">https://goessner.net/articles/JsonPath/</a><br>\n<a href=\"https://pypi.org/project/jsonpath-ng/\">https://pypi.org/project/jsonpath-ng/</a></p>\n<p>The licensing is Apache 2.0, I'm not sure what the rules are for pip dependencies / if the source would need to be copied in somewhere, but it would allow parsing JSON output with the same kind of directives as HTML has, and in a way where index only matters if we want it to</p>",
        "id": 222903813,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610735816
    },
    {
        "content": "<p>I don't know the rules for dependencies either. I don't see any requirements.txt files which may mean no one has tried to do this before.</p>\n<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> how do you feel about adding a python dependency to <code>src/test/rustdoc-json</code>?</p>",
        "id": 222905381,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610736426
    },
    {
        "content": "<p>I don't know anything about that folder, but I feel pretty unhappy I think. Python is an easier sell than node, because it's already required for LLVM and x.py, but both of those just need the standard installation.</p>\n<p>I'm pretty sure I've seen rust crates providing a jq-like interface, though. Maybe we can use those?</p>",
        "id": 222905878,
        "sender_full_name": "simulacrum",
        "timestamp": 1610736632
    },
    {
        "content": "<p>sounds good to me :) <span class=\"user-mention\" data-user-id=\"319144\">@Rune Tynan</span> do you mind looking for ways to do this in rust instead?</p>",
        "id": 222906044,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610736701
    },
    {
        "content": "<p>I would also ask - do we really need this for testing? It might be worth talking to <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> about what rust-analyzer does - I imagine there's a similar need there.</p>",
        "id": 222906047,
        "sender_full_name": "simulacrum",
        "timestamp": 1610736703
    },
    {
        "content": "<p>the current testing situation is <em>really</em> painful</p>",
        "id": 222906087,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610736716
    },
    {
        "content": "<p>it took me and <span class=\"user-mention silent\" data-user-id=\"319144\">Rune Tynan</span> several hours to debug a recent failure: <a href=\"#narrow/stream/266220-rustdoc/topic/Removing.20doctree.20stuff/near/222780199\">https://rust-lang.zulipchat.com/#narrow/stream/266220-rustdoc/topic/Removing.20doctree.20stuff/near/222780199</a></p>",
        "id": 222906175,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610736743
    },
    {
        "content": "<p>and I would like to get away from contains.py if at all possible, I don't think it's really testing the right thing anyway</p>",
        "id": 222906223,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610736764
    },
    {
        "content": "<p>It looks like there is a jsonpath Rust crate, but also that it's fairly young/limited, I'll see if it's enough for what we want</p>",
        "id": 222906258,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610736781
    },
    {
        "content": "<p>hmm, that was last released 2 years ago which makes me a little nervous</p>",
        "id": 222906642,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610736937
    },
    {
        "content": "<p><a href=\"https://github.com/freestrings/jsonpath\">https://github.com/freestrings/jsonpath</a> looks better maintained</p>",
        "id": 222906675,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610736956
    },
    {
        "content": "<p>Yep, that's what I was just looking at</p>",
        "id": 222906972,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610737073
    },
    {
        "content": "<p>ah ok, I was looking at <a href=\"https://docs.rs/jsonpath/0.1.1/jsonpath/\">https://docs.rs/jsonpath/0.1.1/jsonpath/</a> originally</p>",
        "id": 222907057,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610737091
    },
    {
        "content": "<p>Oh, I was looking at that originally too. I had the same 'Hm, 2 years makes me nervous', one of the issues linked to a comparison page, that linked to the freestrings one</p>",
        "id": 222907108,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610737113
    },
    {
        "content": "<p>So now I was looking at the freestrings one, and it looks both recently maintained, and to have much better feature support. It appears to accept either a serde Value or a string, so we have options too :P</p>",
        "id": 222907284,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610737181
    },
    {
        "content": "<p>nice, that sounds good to me</p>",
        "id": 222907390,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610737206
    },
    {
        "content": "<p>(weird that they chose <code>jsonpath_lib</code> as the crate name, but doesn't matter a lot)</p>",
        "id": 222907461,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610737233
    },
    {
        "content": "<p>To be clear, I'd be totally fine with rolling our own small thing, too - I imagine rustdoc's needs may be somewhat unique.</p>",
        "id": 222907779,
        "sender_full_name": "simulacrum",
        "timestamp": 1610737337
    },
    {
        "content": "<p>rolling our own would be a lot more work than using the library I expect</p>",
        "id": 222907841,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610737359
    },
    {
        "content": "<p>this is less \"be a test suite\" and more \"I need an XPATH library\" (but for JSON)</p>",
        "id": 222907880,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610737371
    },
    {
        "content": "<p>Yeah, if there's something, definitely let's use it.</p>",
        "id": 222907890,
        "sender_full_name": "simulacrum",
        "timestamp": 1610737373
    },
    {
        "content": "<p><code>jsonpath</code> was released first, so I imagine <code>jsonpath_lib</code> because the other was taken</p>",
        "id": 222907920,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610737383
    },
    {
        "content": "<p>FWIW I think asking people running this test suite to install jq (cli library providing this) would be fine</p>",
        "id": 222908047,
        "sender_full_name": "simulacrum",
        "timestamp": 1610737432
    },
    {
        "content": "<p>It also looks like there's several wrappers for libjq out there which may be even better</p>",
        "id": 222908229,
        "sender_full_name": "simulacrum",
        "timestamp": 1610737487
    },
    {
        "content": "<p>libjq is a C library? that sounds more painful than either 'install jq' or a rust dependency</p>",
        "id": 222908273,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610737506
    },
    {
        "content": "<p>Well, I mean rust wrappers</p>",
        "id": 222908349,
        "sender_full_name": "simulacrum",
        "timestamp": 1610737542
    },
    {
        "content": "<p>So they probably just compile it internally</p>",
        "id": 222908387,
        "sender_full_name": "simulacrum",
        "timestamp": 1610737557
    },
    {
        "content": "<p>sure - I think we'll only need a small subset of jq's features though</p>",
        "id": 222908453,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610737566
    },
    {
        "content": "<p>But the CLI tool should be fine for us</p>",
        "id": 222908466,
        "sender_full_name": "simulacrum",
        "timestamp": 1610737570
    },
    {
        "content": "<p>jq is a whole programming language really lol</p>",
        "id": 222908497,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610737586
    },
    {
        "content": "<p><a href=\"https://github.com/dflemstr/rq\">https://github.com/dflemstr/rq</a></p>",
        "id": 222908584,
        "sender_full_name": "simulacrum",
        "timestamp": 1610737636
    },
    {
        "content": "<p>I think we have enough tools <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> but I appreciate the help</p>",
        "id": 222908621,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610737655
    },
    {
        "content": "<p>That feels like the thing to use</p>",
        "id": 222908634,
        "sender_full_name": "simulacrum",
        "timestamp": 1610737660
    },
    {
        "content": "<p>I think jsonpath works fine for our use cases, and has slightly less 'overhead' to it, but I'm fine either way. jq has at least as many features, I just went with the first option that fit the need :P</p>",
        "id": 222908717,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610737684
    },
    {
        "content": "<p>let's go with jsonpath for now</p>",
        "id": 222908803,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610737716
    },
    {
        "content": "<p>it uses the same syntax as jq, right?</p>",
        "id": 222908817,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610737724
    },
    {
        "content": "<p>that would make it pretty easy to switch later if we need to</p>",
        "id": 222908829,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610737732
    },
    {
        "content": "<p>Not quite the same, but similar. The jq wiki has a page on conversion, it looks easy to do</p>",
        "id": 222908858,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610737754
    },
    {
        "content": "<p>Alright, so the actual test is invoked by compiletest. Would I add stuff there, or somewhere else?</p>",
        "id": 222909865,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610738094
    },
    {
        "content": "<p>compiletest is just running <code>compare.py</code>, right? I would look how this works for <code>tidy</code>, which is also written in rust</p>",
        "id": 222909977,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610738150
    },
    {
        "content": "<p>the idea is you want rustbuild to compile the checker before calling compiletest</p>",
        "id": 222910058,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610738167
    },
    {
        "content": "<p>I'm playing the 'add things and see what breaks' method of learning what needs to change to make this work :P</p>",
        "id": 222914560,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610740033
    },
    {
        "content": "<p>me every time I try to change bootstrap lol</p>",
        "id": 222914602,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610740053
    },
    {
        "content": "<p>One issue is that there are currently two tests with a whole bunch of expected JSON, but the smart thing would be many smaller tests that assert specific parts of it. EG</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">PlainEmpty</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Tuple</span><span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Unit</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">WithPrimitives</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">num</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">s</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">WithGenerics</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">stuff</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">things</span>: <span class=\"nc\">HashMap</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This should be at least one file per struct, as the implication (No comments + short name = I have to guess the intent) is that it's just ensuring the structs document correctly.</p>",
        "id": 222916314,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610740744
    },
    {
        "content": "<p>sounds good to me - I think @pineapple wrote up his reasoning on the original PR if I can find it</p>",
        "id": 222916489,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610740804
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/75114#discussion_r469426829\">https://github.com/rust-lang/rust/pull/75114#discussion_r469426829</a></p>",
        "id": 222916549,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610740828
    },
    {
        "content": "<p>Awesome, thank you</p>",
        "id": 222917224,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610741068
    },
    {
        "content": "<p><del>The sudden temptation to merge htmldocck into this tool, to reduce duplication of rewriting parts of it in Rust</del></p>",
        "id": 222920180,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610742280
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>thread &#39;main&#39; panicked at &#39;not yet implemented&#39;, src\\tools\\jsondocck\\src\\main.rs\n</code></pre></div>\n<p>Yay! Now to actually implement the commands</p>",
        "id": 222921108,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610742668
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"319144\">Rune Tynan</span> <a href=\"#narrow/stream/266220-rustdoc/topic/jsondocck/near/222920180\">said</a>:</p>\n<blockquote>\n<p><del>The sudden temptation to merge htmldocck into this tool, to reduce duplication of rewriting parts of it in Rust</del></p>\n</blockquote>\n<p>FWIW once this is working I would be ok with extending it to replace htmldocck</p>",
        "id": 222921246,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610742719
    },
    {
        "content": "<p>that seems low-priority though, htmldocck is pretty reliable</p>",
        "id": 222921327,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610742748
    },
    {
        "content": "<p>Yeah, the only reason I said that is just that this basically has the exact same get_commands code, inputs, etc. So it hit the DRY part of my brain. But it's not what I'm focused on right now, I'd rather just get the json part done, then change it in the future.</p>",
        "id": 222922094,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610743140
    },
    {
        "content": "<p>Question: Is using unstable features allowed? I ask solely for Option::contains, so I'm fine if the answer is no, I'll just handle it inline / make a helper</p>",
        "id": 222923135,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610743695
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"319144\">@Rune Tynan</span> preferably not, bootstrap tools are compiled with beta and I'd like not to add more RUSTC_BOOTSTRAP special casing</p>",
        "id": 222923273,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610743777
    },
    {
        "content": "<p>see also <a href=\"https://github.com/rust-lang/rust/pull/76423\">https://github.com/rust-lang/rust/pull/76423</a></p>",
        "id": 222923620,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610743948
    },
    {
        "content": "<p>Makes sense. I'll just use it inline, or make a helper if it looks cleaner that way.</p>",
        "id": 222924593,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610744416
    },
    {
        "content": "<p>The python version of the regex uses lookbehind, which the regex crate doesn't support. It looks like it is basically equivalent to just including a single whitespace before the rest of the regex, so I'm doing that</p>",
        "id": 222928918,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610746668
    },
    {
        "content": "<p>How do I force the test to re-run, don't ignore unchanged tests?</p>",
        "id": 222929064,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610746752
    },
    {
        "content": "<p><code>touch test.rs</code> should work</p>",
        "id": 222929079,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610746763
    },
    {
        "content": "<p>there may be a flag but touch is usually easier</p>",
        "id": 222929091,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610746771
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>[\nCommand { negated: false, cmd: Has, args: [&quot;nested.json&quot;, &quot;$.[0:3]&quot;], lineno: 4 },\nCommand { negated: false, cmd: Has, args: [&quot;nested.json&quot;, &quot;$.[0:7].inner.glob&quot;, &quot;false&quot;], lineno: 7 }\n]\n</code></pre></div>\n<p>We're getting there</p>",
        "id": 222930435,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610747536
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/gGrW9Lz5hj0h3HfRoQzXrU7R/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/gGrW9Lz5hj0h3HfRoQzXrU7R/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/gGrW9Lz5hj0h3HfRoQzXrU7R/image.png\"></a></div>",
        "id": 222939468,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610752447
    },
    {
        "content": "<p>This is running the new jsondocck, not the old compare, with two directives added, and it fails if I swap their polarity or such!</p>",
        "id": 222939494,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610752473
    },
    {
        "content": "<p>that's awesome! :D</p>",
        "id": 222939530,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610752499
    },
    {
        "content": "<p>thank you so much for working on this <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 222939545,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610752504
    },
    {
        "content": "<p>No problem! Its been fun to work on.</p>",
        "id": 222939648,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610752565
    },
    {
        "content": "<p>What's left:<br>\n'count' command, maybe something like 'matches', and code cleanup</p>",
        "id": 222939732,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610752620
    },
    {
        "content": "<p>The whole <code>0:3</code> system of identifiers is gonna be interesting, that's hard to not hardcode and if I understand DefId's right, will change any time an item is added</p>",
        "id": 222939839,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610752686
    },
    {
        "content": "<p>yes, DefIds are not at all stable unfortunately</p>",
        "id": 222939850,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610752702
    },
    {
        "content": "<p>That's more a JSON format thing, if I remember the RFC those identifiers are explicitly allowed to change at rustdoc's discretion, so maybe there's a better alternative in the future. But that's outside the scope of just better testing :P</p>",
        "id": 222939977,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610752799
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"319144\">Rune Tynan</span> <a href=\"#narrow/stream/266220-rustdoc/topic/jsondocck/near/222939977\">said</a>:</p>\n<blockquote>\n<p>That's more a JSON format thing, if I remember the RFC those identifiers are explicitly allowed to change at rustdoc's discretion, so maybe there's a better alternative in the future. But that's outside the scope of just better testing :P</p>\n</blockquote>\n<p>if you're interested in this, take a look at <a href=\"https://github.com/rust-lang/rust/issues/80664#issuecomment-753681341\">https://github.com/rust-lang/rust/issues/80664#issuecomment-753681341</a></p>",
        "id": 222940056,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610752846
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/T_hR8h2VF7hw0pnHttlQaq5F/image.png\">image.png</a> <br>\nThoughts on this output format? (with line numbers / context)</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/T_hR8h2VF7hw0pnHttlQaq5F/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/T_hR8h2VF7hw0pnHttlQaq5F/image.png\"></a></div>",
        "id": 222941908,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610754265
    },
    {
        "content": "<p>seems fine - the context is the most important IMO</p>",
        "id": 222941995,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610754360
    },
    {
        "content": "<p>it would be really nice if it could say <em>where</em> it failed</p>",
        "id": 222942049,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610754376
    },
    {
        "content": "<p>like for <code>.x.y.z</code> say 'y' isn't found instead of '.x.y.z did not match'</p>",
        "id": 222942063,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610754396
    },
    {
        "content": "<p>I'll see if the jsonpath lib gives me that info, if so it should be easy enough to add. If not I'll consider, may make the sad-path slow but informative by making it 'peel back' each subpath and try again?</p>",
        "id": 222942354,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610754623
    },
    {
        "content": "<p>sounds great! yeah, that's how intra-doc links does error reporting</p>",
        "id": 222942660,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610754901
    },
    {
        "content": "<p>Oh, also, would you know why I keep getting a panic 'need path to cargo' from tidy when I run tests? The test suite keeps going, but it fills up output</p>",
        "id": 222943849,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610755908
    },
    {
        "content": "<p>Looking around, I think the <code>has_tidy</code> check in compiletest is doing it. It silences stdout but not stderr</p>",
        "id": 222944127,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610756131
    },
    {
        "content": "<p>Working on splitting up the tests better now</p>",
        "id": 222949041,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610760334
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/81063\">https://github.com/rust-lang/rust/pull/81063</a></p>",
        "id": 222949931,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610761143
    },
    {
        "content": "<p>Ready for the first round of reviews <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 222949954,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610761166
    },
    {
        "content": "<p>left another review, it's on the right track :)</p>",
        "id": 222994555,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610818607
    },
    {
        "content": "<p>I've gone through and left comments/reasoning on a couple</p>",
        "id": 223007821,
        "sender_full_name": "CraftSpider",
        "timestamp": 1610833076
    }
]