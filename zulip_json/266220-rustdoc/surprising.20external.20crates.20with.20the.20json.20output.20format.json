[
    {
        "content": "<p>Hello, I was experimenting with <code>rustdoc</code> and it's json output format when I realized that for a 5 lines <code>lib.rs</code>produce over 23000 lines of json when I open it I saw the entire standard library (<code>core</code>, <code>alloc</code>, <code>std</code>, ...) but also some internal crates like <code>rustc_std_workspace_alloc</code>, <code>rust_std_workspace_core</code> but also <code>rustc_demangle</code>. Is that expected ?</p>",
        "id": 247806636,
        "sender_full_name": "Urgau",
        "timestamp": 1627741603
    },
    {
        "content": "<p>Hmm, it does seem weird that it includes items from other crates</p>",
        "id": 247815359,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1627752300
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268539\">@Nixon Enraght-Moony</span> <span class=\"user-mention\" data-user-id=\"319144\">@CraftSpider</span> <span class=\"user-mention\" data-user-id=\"310818\">@Joseph Ryan</span> do one of you happen to remember why rustdoc does that? Or is it unintentional?</p>",
        "id": 247815377,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1627752339
    },
    {
        "content": "<p>Yeah so the reason that the output is so bloated right now is that it takes ALL items in scope (so everything in the prelude and transitively referenced by any external crate that you bring into scope) and includes them in the output. The affected fields are <code>index</code> which is supposed to include the full trait definition for any trait used (even if it's from an external crate) and <code>paths</code> which contains the full module path of any item referenced.</p>\n<p>The correct thing to do which we didn't get around to on the first pass implementation was to write a visitor that would figure out which items were actually \"reachable\" by following all <code>id</code> references from the crate root and only including those in the output. While the output would still contain stuff like blanket impls from std and external crates, it would definitely make the resulting blob much much smaller.</p>",
        "id": 247817421,
        "sender_full_name": "Joseph Ryan",
        "timestamp": 1627755168
    },
    {
        "content": "<p>Since removing unreachable output won't change any functionality it shouldn't be too hard to go ahead and write this pruning pass without messing with other parts of the code, if I have some time this week I'll try to make a pass at it, but if anyone else would like to I can walk you through it as well. I'd definitely like to be able to open the json output in my editor instead of poking at it with <code>jq</code> due to it's size <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 247817582,
        "sender_full_name": "Joseph Ryan",
        "timestamp": 1627755374
    }
]