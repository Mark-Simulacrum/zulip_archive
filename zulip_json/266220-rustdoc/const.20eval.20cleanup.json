[
    {
        "content": "<p>The current state of how rustdoc displays constants is a bit of a mess. Some constants are displayed using their pretty-printed HIR syntax; others show both their HIR version and their fully-evaluated <code>ty</code> version; and still others (like inherent associated constants) don't show any value at all.</p>\n<p>I'd like to start by at least no longer using the HIR. I explain my rationale <a href=\"https://github.com/rust-lang/rust/issues/83035#issuecomment-989336938\">here</a>.</p>\n<p>What do you all think?</p>",
        "id": 264373972,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639087537
    },
    {
        "content": "<p>Already approved on the issue I think? But just in case: I agree.</p>",
        "id": 264374074,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1639087575
    },
    {
        "content": "<p>(By the way, I do recommend reading, or at least skimming, <a href=\"https://github.com/rust-lang/rust/issues/83035#issuecomment-989336938\">the comment I linked above</a>, as it will provide helpful context.)</p>",
        "id": 264374114,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639087596
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"210316\">GuillaumeGomez</span> <a href=\"#narrow/stream/266220-rustdoc/topic/const.20eval.20cleanup/near/264374074\">said</a>:</p>\n<blockquote>\n<p>Already approved on the issue I think? But just in case: I agree.</p>\n</blockquote>\n<p>Well, that was back in March, so I wasn't sure if your opinion had changed ;)</p>",
        "id": 264374149,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639087622
    },
    {
        "content": "<p>Also, I do have working local code that implements most of this change.</p>",
        "id": 264374191,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639087651
    },
    {
        "content": "<p>One issue is that for, e.g., const generics, what happens if we don't know how to pretty-print the <code>ty::Const</code>? E.g., if it's an ADT?</p>",
        "id": 264374226,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639087669
    },
    {
        "content": "<p>Like, what if there's a function</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">MyGenericType</span><span class=\"o\">&lt;</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>?</p>",
        "id": 264374308,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639087698
    },
    {
        "content": "<p>(Currently unstable, but IIUC it's implemented and will be eventually stabilized.)</p>",
        "id": 264374332,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639087717
    },
    {
        "content": "<p>You can mark it as \"FIXME\" in the implementation and open an issue for this case. It's fine to come back to it later on and work on this in more than one PR</p>",
        "id": 264374514,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1639087813
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span> I don't think that's a good fit here - this is a significant amount of work, we should have at least an idea of how we'll eventually implement it so we don't end up reverting it</p>",
        "id": 264374621,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639087880
    },
    {
        "content": "<p>I saw that as a corner-case that could be handled later on but if it's not the case then we indeed need to have something before doing it.</p>",
        "id": 264374776,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1639087967
    },
    {
        "content": "<p>Well, actually, the compiler has some way of rendering these:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(adt_const_params)]</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">MyGenericType</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">X</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">MyGenericType</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">)}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">MyGenericType</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">MyGenericType</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"nb\">None</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>error[E0308]: mismatched types\n  --&gt; src/main.rs:10:36\n   |\n10 |     let _: MyGenericType&lt;{None}&gt; = foo();\n   |            ---------------------   ^^^^^ expected `Option::&lt;i32&gt;::None`, found `Option::&lt;i32&gt;::Some(42_i32)`\n   |            |\n   |            expected due to this\n   |\n   = note: expected struct `MyGenericType&lt;Option::&lt;i32&gt;::None&gt;`\n              found struct `MyGenericType&lt;Option::&lt;i32&gt;::Some(42_i32)&gt;`\n</code></pre></div>",
        "id": 264374786,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639087974
    },
    {
        "content": "<p>So we could probably reuse (some of) its code.</p>",
        "id": 264374808,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639087987
    },
    {
        "content": "<p>Ok cool, that seems like a good candidate for a FIXME then :)</p>",
        "id": 264375067,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639088087
    },
    {
        "content": "<p>... or just using that code altogether, rather than writing our own version of it :)</p>",
        "id": 264375585,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639088334
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Noah Lev</span> <a href=\"#narrow/stream/266220-rustdoc/topic/const.20eval.20cleanup/near/264375585\">said</a>:</p>\n<blockquote>\n<p>... or just using that code altogether, rather than writing our own version of it :)</p>\n</blockquote>\n<p>Be careful of that, we did that for attributes at some point and it didn't end well :)</p>",
        "id": 264375740,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1639088406
    },
    {
        "content": "<p>This code is used for rustc error messages, so it seems \"more okay\" than using the HIR pretty-printer.</p>",
        "id": 264376042,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639088588
    },
    {
        "content": "<p>It actually seems a bit difficult to get the machinery set up, so I'll just leave a FIXME for now</p>",
        "id": 264376258,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639088715
    },
    {
        "content": "<p>I'm extremely in favor of using the evaluated const and yeah we should just use the existing printing code</p>",
        "id": 264474604,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1639155034
    },
    {
        "content": "<p>though we could also provide an attribute to let people pick the HIR behavior because the fully expanded type may be large</p>",
        "id": 264474654,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1639155064
    },
    {
        "content": "<p>I really don't think we should expose a knob to enable HIR behavior:</p>\n<ul>\n<li>Using HIR doesn't work for cross-crate re-exports.</li>\n<li>It's an internal implementation detail.</li>\n<li>I very much want to stop rustdoc from using HIR at all since it creates two separate codepaths and lots of inconsistencies. Exposing an attribute like what you suggest would make that impossible.</li>\n</ul>",
        "id": 264500721,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639166646
    }
]