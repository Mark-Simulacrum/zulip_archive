[
    {
        "content": "<p>ahhhhh why is doc(primitive) stable</p>",
        "id": 244985333,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1625533293
    },
    {
        "content": "<p>this is literally useless to everyone except the standard library</p>",
        "id": 244985335,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1625533300
    },
    {
        "content": "<p>all the way back to 1.0 :(</p>",
        "id": 244985395,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1625533359
    },
    {
        "content": "<p>omg I think I found why primitives always link to <a href=\"http://doc.rust-lang.org\">doc.rust-lang.org</a> even when they shouldn't</p>",
        "id": 244990842,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1625539912
    },
    {
        "content": "<p><code>fn links()</code> in <code>clean/types.rs</code> completely skips the call to href() for primitives</p>",
        "id": 244990887,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1625539937
    },
    {
        "content": "<p>I think fixing <a href=\"https://github.com/rust-lang/rust/issues/73423\">https://github.com/rust-lang/rust/issues/73423</a> will also fix <a href=\"https://github.com/rust-lang/rust/issues/79630\">https://github.com/rust-lang/rust/issues/79630</a> and <a href=\"https://github.com/rust-lang/rust/issues/83083\">https://github.com/rust-lang/rust/issues/83083</a> at the same time</p>",
        "id": 244990913,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1625540019
    },
    {
        "content": "<p>hmm ok so let me think about this</p>",
        "id": 244991031,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1625540172
    },
    {
        "content": "<p>rustdoc's idea of \"primitive\" is strictly more general than the compiler's</p>",
        "id": 244991034,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1625540182
    },
    {
        "content": "<p>so <em>most</em> primitives have a DefId, but not all</p>",
        "id": 244991036,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1625540190
    },
    {
        "content": "<p>I wonder if PrimitiveType should use the DefId of the module used with <code>doc(primitive)</code> instead?</p>",
        "id": 244991050,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1625540222
    },
    {
        "content": "<p>aghh I keep causing myself bugs <a href=\"https://github.com/rust-lang/rust/pull/86737\">https://github.com/rust-lang/rust/pull/86737</a> caused rustdoc to be documented without --document-private-items</p>",
        "id": 244991111,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1625540293
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/86900\">https://github.com/rust-lang/rust/issues/86900</a></p>",
        "id": 244991143,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1625540379
    },
    {
        "content": "<p>ok perfect yes I can iterate through <code>krate.primitives</code> to find the DefId of the module where it's documented</p>",
        "id": 244991265,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1625540503
    },
    {
        "content": "<p>whew what a mess</p>",
        "id": 244991267,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1625540505
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/266220-rustdoc/topic/doc.28primitive.29/near/244991267\">said</a>:</p>\n<blockquote>\n<p>whew what a mess</p>\n</blockquote>\n<p>no kidding</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"c1\">// FIXME: this is both quadratic, expensive, and called a whole bunch.</span>\n<span class=\"w\">            </span><span class=\"c1\">// Instead, the cache should populate `primitive_locations` early (right now it only calls populate after this pass).</span>\n<span class=\"w\">            </span><span class=\"c1\">// FIXME: it's just embarassing how much work this redoes</span>\n<span class=\"w\">            </span><span class=\"n\">Res</span>::<span class=\"n\">Primitive</span><span class=\"p\">(</span><span class=\"n\">prim</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">externs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">crates</span><span class=\"p\">(()).</span><span class=\"n\">into_iter</span><span class=\"p\">().</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">crate_num</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">ExternalCrate</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">crate_num</span><span class=\"w\"> </span><span class=\"p\">}).</span><span class=\"n\">collect</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">externs</span><span class=\"p\">.</span><span class=\"n\">sort_unstable</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">externs</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">rev</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">other_prim</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">primitives</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">prim</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">other_prim</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">primitives</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ExternalCrate</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">crate_num</span>: <span class=\"nc\">LOCAL_CRATE</span><span class=\"w\"> </span><span class=\"p\">}.</span><span class=\"n\">primitives</span><span class=\"p\">(</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">other_prim</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">primitives</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">prim</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">other_prim</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"nb\">None</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 244991801,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1625541362
    },
    {
        "content": "<p>omg there's just bug after bug, <code>href()</code> doesn't work for <code>doc(primitive)</code> modules because they're private</p>",
        "id": 244992497,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1625542425
    },
    {
        "content": "<p>... and also because it doesn't record them in <code>paths</code> or <code>external_paths</code></p>",
        "id": 244992826,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1625542920
    },
    {
        "content": "<p>sometimes I really want to throw out rustdoc and rewrite it from scratch I swear</p>",
        "id": 244992865,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1625542929
    },
    {
        "content": "<p>Oh boy. You found more bugs XD. Rewriting rustdoc from scrath would certainly be more work than slowly fixing bugs haha</p>",
        "id": 245008283,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1625559679
    },
    {
        "content": "<p>If that can make you feel better, I found bugs in reexported items visibility :)</p>",
        "id": 245032252,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1625575225
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span> you mean <a href=\"https://github.com/rust-lang/rust/issues/64762\">https://github.com/rust-lang/rust/issues/64762</a> ? Or something else?</p>",
        "id": 245033360,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1625575809
    },
    {
        "content": "<p>No, something else. Still from <a href=\"https://github.com/rust-lang/rust/pull/86841\">https://github.com/rust-lang/rust/pull/86841</a>. When you use <code>pub(crate)</code> or equivalents, they don't show up even if you use <code>--document-private-items</code>. So I fixed that, then I realized they took the visibility of the item from its location and not from its reexport, so I fixed that as well</p>",
        "id": 245034864,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1625576492
    },
    {
        "content": "<p>I'm updating the tests currently</p>",
        "id": 245034893,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1625576508
    },
    {
        "content": "<p>luckily it didn't require much changes...</p>",
        "id": 245034910,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1625576515
    },
    {
        "content": "<p>Oh and we had an inconsistency with the display of visibility for typedefs</p>",
        "id": 245036337,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1625577206
    },
    {
        "content": "<p>This PR is a rabbit hole XD</p>",
        "id": 245036345,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1625577212
    },
    {
        "content": "<p>apparently this is currently broken because my hack comes up with the <code>core::str_prim</code> module  and the <code>cache.populate</code> call comes up with <code>std::str_prim</code></p>",
        "id": 245583972,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1625971485
    },
    {
        "content": "<p>maybe I should just feed cache through</p>",
        "id": 245583974,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1625971489
    },
    {
        "content": "<p>so I don't forget: I have this working in <a href=\"https://github.com/rust-lang/rust/compare/master...jyn514:primitive-docs\">https://github.com/rust-lang/rust/compare/master...jyn514:primitive-docs</a>, I need to clean it up and see the results of <a href=\"https://github.com/rust-lang/rust/pull/87050\">https://github.com/rust-lang/rust/pull/87050</a></p>",
        "id": 245590623,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1625983769
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/87073\">https://github.com/rust-lang/rust/pull/87073</a></p>",
        "id": 245635780,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626050982
    },
    {
        "content": "<p>whew that was crazy</p>",
        "id": 245635905,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626051232
    },
    {
        "content": "<p>I think this is enough rust for me this weekend lol</p>",
        "id": 245635907,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626051238
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"411291\">@Taylor Yu [they/she]</span> , you seemed interested :)</p>",
        "id": 245635969,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626051361
    },
    {
        "content": "<p>wow that is amazing!</p>",
        "id": 245641998,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1626061784
    },
    {
        "content": "<p>Thank you! It took ages haha</p>",
        "id": 245642771,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626062783
    },
    {
        "content": "<p>most cursed x.py invocation I've used in a while<br>\n<code> x test src/tools/linkchecker --stage 2 --keep-stage-std 0 --keep-stage-std 1</code></p>",
        "id": 245902224,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626218551
    }
]