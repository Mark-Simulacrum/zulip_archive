[
    {
        "content": "<p>So I went over an ran rustdoc-json on all the crates you can run in rustdoc (<a href=\"https://codeberg.org/adot/cheep-crator\">link</a>) and found 2 new issues</p>\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues/83720\">one</a> I completely understand (and can explain if you dont) but am not sure what the corrent thing to do is. <span class=\"user-mention\" data-user-id=\"319144\">@CraftSpider</span>  would love design input</li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/83718\">the other</a> I have no idea whats happing, and am extremely scared by as it makes literaly no sence to me how changing unrelated code can remove it</li>\n</ul>\n<p>Would love input on either</p>",
        "id": 232658970,
        "sender_full_name": "Nixon Enraght-Moony",
        "timestamp": 1617222165
    },
    {
        "content": "<blockquote>\n<p>the other I have no idea whats happing, and am extremely scared by as it makes literaly no sence to me how changing unrelated code can remove it</p>\n</blockquote>\n<p>I bet this has to do with the generic parameters somehow</p>",
        "id": 232659450,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617222375
    },
    {
        "content": "<p>I want to simplify it a bit before looking at it too much</p>",
        "id": 232659476,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617222384
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268539\">@Nixon Enraght-Moony</span> how did you get that pretty diff output?</p>",
        "id": 232661011,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617222974
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268539\">@Nixon Enraght-Moony</span> I think it's because the trait declaration and the function in the implementation have the same name. This crashes:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Get</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Load</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">load</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">P</span>: <span class=\"nc\">Get</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Load</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">load</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Wrapper</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Get</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Wrapper</span><span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>but this does not:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Get</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Load</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">load</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">P</span>: <span class=\"nc\">Get</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Load</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Wrapper</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Get</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Wrapper</span><span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 232661467,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617223179
    },
    {
        "content": "<p>not sure why <code>P: Get</code> is important, but if I remove it and do <code>impl Load for Wrapper</code> directly the crash goes away</p>",
        "id": 232661716,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617223293
    },
    {
        "content": "<p>ooh and one has <code>output: None</code> while the other has <code>output: Some(Tuple([]))</code> - I bet one is going through HIR and the other is going through metadata, that could explain why the generic parameter matters</p>",
        "id": 232661882,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617223363
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/266220-rustdoc/topic/More.20rdj.20duplication/near/232661011\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"268539\">Nixon Enraght-Moony</span> how did you get that pretty diff output?</p>\n</blockquote>\n<p><a href=\"https://docs.rs/pretty_assertions\">https://docs.rs/pretty_assertions</a></p>",
        "id": 232661966,
        "sender_full_name": "Nixon Enraght-Moony",
        "timestamp": 1617223408
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/266220-rustdoc/topic/More.20rdj.20duplication/near/232661716\">said</a>:</p>\n<blockquote>\n<p>not sure why <code>P: Get</code> is important, but if I remove it and do <code>impl Load for Wrapper</code> directly the crash goes away</p>\n</blockquote>\n<p>yeah it doesn't need the <code>P: Get</code> bound, just for P to be generic</p>",
        "id": 232662020,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617223435
    },
    {
        "content": "<p>mcve:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Load</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">load</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">P</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Load</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">load</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Wrapper</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 232662127,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617223463
    },
    {
        "content": "<p>left a comment on the issue (nothing that's not here)</p>",
        "id": 232662393,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617223569
    },
    {
        "content": "<blockquote>\n<p>It's unlear to me what the correct representation should be, as currently for items pub used from a non pub mod, we add the item to the mod it's being imported to, with the name it's imported under.</p>\n</blockquote>\n<p><del>json ids</del> <a href=\"https://github.com/rust-lang/rust/issues/80664#issuecomment-753681341\">https://github.com/rust-lang/rust/issues/80664#issuecomment-753681341</a></p>",
        "id": 232662964,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617223806
    },
    {
        "content": "<p>What does new ids do for this. Are you proposing that we just put it in the index twice, with a diffent name (and new json-id), but the same everthing else? Because I think that we want to somewhow indicate that these are the same underlying type.</p>",
        "id": 232663627,
        "sender_full_name": "Nixon Enraght-Moony",
        "timestamp": 1617224145
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268539\">Nixon Enraght-Moony</span> <a href=\"#narrow/stream/266220-rustdoc/topic/More.20rdj.20duplication/near/232663627\">said</a>:</p>\n<blockquote>\n<p>What does new ids do for this. Are you proposing that we just put it in the index twice, with a diffent name (and new json-id), but the same everthing else?</p>\n</blockquote>\n<p>Yes, that's what I mean. I don't see another way to keep the info about both re-exports.</p>\n<blockquote>\n<p>Because I think that we want to somewhow indicate that these are the same underlying type.</p>\n</blockquote>\n<p>We could add a new <code>original_id</code> field maybe?</p>",
        "id": 232663981,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617224313
    },
    {
        "content": "<p>alternatively we could remove re-exports from the index altogether and add a new field that's <em>only</em> re-exports and is keyed by (module, name) instead of id</p>",
        "id": 232664065,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617224358
    },
    {
        "content": "<p>Yeah, I'm not sure which of these things is better. The both seem quite bad, but I'm not sure good answers exits. I guess my primary consern is that we force consumers to acknoledge that items can have many names. (I thing this is right, as otherwize we'll get tooling that works 99% of the time, but falls down when someone does something weird.)</p>",
        "id": 232667382,
        "sender_full_name": "Nixon Enraght-Moony",
        "timestamp": 1617225789
    },
    {
        "content": "<blockquote>\n<p>I guess my primary consern is that we force consumers to acknoledge that items can have many names. (I thing this is right, as otherwize we'll get tooling that works 99% of the time, but falls down when someone does something weird.)</p>\n</blockquote>\n<p>Yeah, I don't see a way around this. The only alternative is to omit the info altogether and only document the first re-export, which seems at least as bad.</p>",
        "id": 232667759,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617225986
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"229913\">@HeroicKatora</span> btw</p>",
        "id": 232667769,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617225994
    },
    {
        "content": "<p>Doing all this has realy made me appreciate that maybe <code>go</code> was right to have such a simple module system</p>",
        "id": 232667844,
        "sender_full_name": "Nixon Enraght-Moony",
        "timestamp": 1617226041
    },
    {
        "content": "<p>how does go's module system work?</p>",
        "id": 232667870,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617226053
    },
    {
        "content": "<p>this doesn't seem like a super complicated part to me - it's just allowing renaming</p>",
        "id": 232667910,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617226077
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/266220-rustdoc/topic/More.20rdj.20duplication/near/232667870\">said</a>:</p>\n<blockquote>\n<p>how does go's module system work?</p>\n</blockquote>\n<p>No reexports, no renaming, everything in a folder is the same namespace (as opposed to file in rust). No need for <code>mod</code> statements to discover files. No inline modules</p>",
        "id": 232668102,
        "sender_full_name": "Nixon Enraght-Moony",
        "timestamp": 1617226165
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/266220-rustdoc/topic/More.20rdj.20duplication/near/232667910\">said</a>:</p>\n<blockquote>\n<p>this doesn't seem like a super complicated part to me - it's just allowing renaming</p>\n</blockquote>\n<p>But the fact that you can have an item with no \"canonical\" name (esp if both reeexports rename) is super trippy IMO</p>",
        "id": 232668171,
        "sender_full_name": "Nixon Enraght-Moony",
        "timestamp": 1617226203
    },
    {
        "content": "<p>oh well good point</p>",
        "id": 232668993,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617226567
    },
    {
        "content": "<p>yeah I've been meaning to make an RFC for doc(canonical)</p>",
        "id": 232669037,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617226590
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rfcs/issues/3011\">https://github.com/rust-lang/rfcs/issues/3011</a></p>",
        "id": 232669062,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617226603
    },
    {
        "content": "<p>The first one definitely looks like custom IDs are needed, or something similar. Personally I lean towards re-exports pointing towards their originator somehow, rather than making them their own field. Though that's more because it's less work and feels more 'consistent' with how most all items are just items currently.</p>",
        "id": 232688754,
        "sender_full_name": "CraftSpider",
        "timestamp": 1617238801
    },
    {
        "content": "<p>The second one, oh geez I'll take a look into how it handles the generics</p>",
        "id": 232688827,
        "sender_full_name": "CraftSpider",
        "timestamp": 1617238820
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"319144\">CraftSpider</span> <a href=\"#narrow/stream/266220-rustdoc/topic/More.20rdj.20duplication/near/232688827\">said</a>:</p>\n<blockquote>\n<p>The second one, oh geez I'll take a look into how it handles the generics</p>\n</blockquote>\n<p>I expect this to be a bug in rustdoc itself FWIW, not in the JSON backend</p>",
        "id": 232688842,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617238835
    },
    {
        "content": "<p>happy to help if you get stuck</p>",
        "id": 232688854,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617238838
    },
    {
        "content": "<p>Yeah, my suspicion was that I'd start looking at <code>clean</code> to see how rustdoc is getting the information. I'll ask if I run into issues</p>",
        "id": 232689082,
        "sender_full_name": "CraftSpider",
        "timestamp": 1617238997
    }
]