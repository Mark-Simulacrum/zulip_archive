[
    {
        "content": "<p>so I'm working on <a href=\"https://github.com/rust-lang/rust/issues/63037\">https://github.com/rust-lang/rust/issues/63037</a> and I found that the difference between the two is that the signature is different before rustdoc ever processes it</p>\n<div class=\"codehilite\"><pre><span></span><code>DEBUG rustdoc::clean clean_fn_sig: generics=Generics { params: [GenericParamDef { name: &quot;\\&#39;_&quot;, kind: Lifetime }], where_predicates: [] }, decl=FnDecl { inputs: Arguments { values: [Argument { type_: BorrowedRef { lifetime: Some(Lifetime(&quot;\\&#39;_&quot;)), mutability: Not, type_: Primitive(Str) }, name: &quot;foo&quot; }] }, output: Return(ImplTrait([TraitBound(PolyTrait { trait_: ResolvedPath { path: Path { global: false, res: Err, segments: [PathSegment { name: &quot;Future&quot;, args: AngleBracketed { args: [], bindings: [TypeBinding { name: &quot;Output&quot;, kind: Equality { ty: ResolvedPath { path: Path { global: false, res: Def(Struct, DefId(5:5688 ~ alloc[4799]::string::String)), segments: [PathSegment { name: &quot;String&quot;, args: AngleBracketed { args: [], bindings: [] } }] }, param_names: None, did: DefId(5:5688 ~ alloc[4799]::string::String), is_generic: false } } }] } }] }, param_names: None, did: DefId(2:9354 ~ core[f78c]::future::future::Future), is_generic: false }, generic_params: [] }, None)])), c_variadic: false, attrs: Attributes { doc_strings: [], other_attrs: [], cfg: None, span: None, links: [], inner_docs: false } }\nDEBUG rustdoc::clean clean_fn_sig: generics=Generics { params: [], where_predicates: [] }, decl=FnDecl { inputs: Arguments { values: [Argument { type_: BorrowedRef { lifetime: None, mutability: Not, type_: Primitive(Str) }, name: &quot;foo&quot; }] }, output: Return(ResolvedPath { path: Path { global: false, res: Def(Struct, DefId(5:5688 ~ alloc[4799]::string::String)), segments: [PathSegment { name: &quot;String&quot;, args: AngleBracketed { args: [], bindings: [] } }] }, param_names: None, did: DefId(5:5688 ~ alloc[4799]::string::String), is_generic: false }), c_variadic: false, attrs: Attributes { doc_strings: [], other_attrs: [], cfg: None, span: None, links: [], inner_docs: false } }\n</code></pre></div>",
        "id": 220716021,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608659435
    },
    {
        "content": "<p>which is slightly concerning</p>",
        "id": 220716064,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608659455
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> do you know where in rustc <code>async fn</code> gets desugared?</p>",
        "id": 220716086,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608659470
    },
    {
        "content": "<p>yeah, this is literally all the preprocessing that happens: <a href=\"https://github.com/rust-lang/rust/blob/0fe1dc6ac214d443369134177940b4d0111e1df6/src/librustdoc/visit_ast.rs#L311\">https://github.com/rust-lang/rust/blob/0fe1dc6ac214d443369134177940b4d0111e1df6/src/librustdoc/visit_ast.rs#L311</a></p>",
        "id": 220716812,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608659875
    },
    {
        "content": "<p>compiler/rustc_ast_lowering looks right</p>",
        "id": 220716936,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608659928
    },
    {
        "content": "<p>aha! <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast_lowering/enum.AnonymousLifetimeMode.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast_lowering/enum.AnonymousLifetimeMode.html</a></p>",
        "id": 220717381,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608660160
    },
    {
        "content": "<p>ok, so I found the function adding the lifetimes: <a href=\"https://github.com/rust-lang/rust/blob/0fe1dc6ac214d443369134177940b4d0111e1df6/compiler/rustc_ast_lowering/src/item.rs#L297-L310\">https://github.com/rust-lang/rust/blob/0fe1dc6ac214d443369134177940b4d0111e1df6/compiler/rustc_ast_lowering/src/item.rs#L297-L310</a></p>\n<p>before:</p>\n<div class=\"codehilite\"><pre><span></span><code>DEBUG rustc_ast_lowering::item lower_fn_kind(generics=Generics { params: [], where_clause: WhereClause { has_where_token: false, predicates: [], span: /home/joshua/rustc/src/librustdoc/async.rs:1:47: 1:47 (#0) }, span: /home/joshua/rustc/src/librustdoc/async.rs:1:26: 1:26 (#0) })\n</code></pre></div>\n<p>after:</p>\n<div class=\"codehilite\"><pre><span></span><code>DEBUG rustc_ast_lowering::item lower_fn_kind: generics=Generics { params: [GenericParam { hir_id: HirId { owner: DefId(0:3), local_id: 72 }, name: Fresh(0), attrs: [], bounds: [], span: /home/joshua/rustc/src/librustdoc/async.rs:1:32: 1:33 (#0), pure_wrt_drop: false, kind: Lifetime { kind: Elided } }], where_clause: WhereClause { predicates: [], span: /home/joshua/rustc/src/librustdoc/async.rs:1:47: 1:47 (#0) }, span: /home/joshua/rustc/src/librustdoc/async.rs:1:26: 1:26 (#0) }\n</code></pre></div>\n<p>and for comparison, the non-async version still has no params:</p>\n<div class=\"codehilite\"><pre><span></span><code>DEBUG rustc_ast_lowering::item lower_fn_kind(generics=Generics { params: [], where_clause: WhereClause { has_where_token: false, predicates: [], span: /home/joshua/rustc/src/librustdoc/async.rs:5:45: 5:45 (#0) }, span: /home/joshua/rustc/src/librustdoc/async.rs:5:24: 5:24 (#0) })\nDEBUG rustc_ast_lowering::item lower_fn_kind: generics=Generics { params: [], where_clause: WhereClause { predicates: [], span: /home/joshua/rustc/src/librustdoc/async.rs:5:45: 5:45 (#0) }, span: /home/joshua/rustc/src/librustdoc/async.rs:5:24: 5:24 (#0) }\n</code></pre></div>",
        "id": 220718061,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608660600
    },
    {
        "content": "<p>and in particular the new params are from <a href=\"https://github.com/rust-lang/rust/blob/0fe1dc6ac214d443369134177940b4d0111e1df6/compiler/rustc_ast_lowering/src/lib.rs#L898\">'add_in_band_defs'</a>:</p>\n<div class=\"codehilite\"><pre><span></span><code>DEBUG rustc_ast_lowering add_in_band_defs: params=[], in_band_defs=[GenericParam { hir_id: HirId { owner: DefId(0:3), local_id: 72 }, name: Fresh(0), attrs: [], bounds: [], span: /home/joshua/rustc/src/librustdoc/async.rs:1:32: 1:33 (#0), pure_wrt_drop: false, kind: Lifetime { kind: Elided } }]\n</code></pre></div>",
        "id": 220718495,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608660858
    },
    {
        "content": "<p>so now I have a useful question to ask: <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> do you know why <code>lower_generics_mut</code> behaves differently for <code>async fn</code> and <code>fn</code>? <a href=\"https://github.com/rust-lang/rust/blob/0fe1dc6ac214d443369134177940b4d0111e1df6/compiler/rustc_ast_lowering/src/lib.rs#L884-L893\">https://github.com/rust-lang/rust/blob/0fe1dc6ac214d443369134177940b4d0111e1df6/compiler/rustc_ast_lowering/src/lib.rs#L884-L893</a></p>",
        "id": 220718640,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608660966
    },
    {
        "content": "<p>the really weird thing is that <code>lower_generic_param</code> never gets called</p>",
        "id": 220718969,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608661218
    },
    {
        "content": "<p>maybe <code>async fn</code> adds an implicit <code>where</code> clause somehow?</p>",
        "id": 220718982,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608661230
    },
    {
        "content": "<p>aha! I was on the wrong track, these are actually added by <a href=\"https://github.com/rust-lang/rust/blob/0fe1dc6ac214d443369134177940b4d0111e1df6/compiler/rustc_ast_lowering/src/lib.rs#L760\"><code>lifetime_to_generic_param</code></a></p>",
        "id": 220719468,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608661568
    },
    {
        "content": "<p>oh interesting, for <code>fn</code>, <code>lifetime_to_generic_param</code> isn't called at all</p>",
        "id": 220719728,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608661722
    },
    {
        "content": "<p><del>so I guess somewhere a lifetime is getting marked as <code>Plain(\"_\")</code> instead of <code>Fresh</code>? <a href=\"https://github.com/rust-lang/rust/blob/0fe1dc6ac214d443369134177940b4d0111e1df6/compiler/rustc_ast_lowering/src/lib.rs#L779-L783\">https://github.com/rust-lang/rust/blob/0fe1dc6ac214d443369134177940b4d0111e1df6/compiler/rustc_ast_lowering/src/lib.rs#L779-L783</a> </del> nope - the debugging says it's <code>Fresh</code>: <a href=\"#narrow/stream/266220-rustdoc/topic/async.20functions.20show.20elided.20lifetimes/near/220718495\">https://rust-lang.zulipchat.com/#narrow/stream/266220-rustdoc/topic/async.20functions.20show.20elided.20lifetimes/near/220718495</a></p>",
        "id": 220720142,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608661963
    },
    {
        "content": "<p>ok so these are added to <a href=\"https://github.com/rust-lang/rust/blob/0fe1dc6ac214d443369134177940b4d0111e1df6/compiler/rustc_ast_lowering/src/lib.rs#L756\"><code>lifetimes_to_define</code></a> somewhere:<br>\n<code>DEBUG rustc_ast_lowering collect_in_band_defs: lifetimes_to_define=[(/home/joshua/rustc/src/librustdoc/async.rs:1:32: 1:33 (#0), Fresh(0))]</code></p>",
        "id": 220721603,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608662997
    },
    {
        "content": "<blockquote>\n<p>somewhere</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/blob/0fe1dc6ac214d443369134177940b4d0111e1df6/compiler/rustc_ast_lowering/src/lib.rs#L839\">https://github.com/rust-lang/rust/blob/0fe1dc6ac214d443369134177940b4d0111e1df6/compiler/rustc_ast_lowering/src/lib.rs#L839</a></p>",
        "id": 220721961,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608663212
    },
    {
        "content": "<p>ok I <em>finally</em> found the issue - <code>elided_ref_lifetime</code> is called with <code>AnonymousLifetimeMode::CreateParameter</code> for <code>async fn</code>, but with <code>PassThrough</code> for `fn<br>\n<a href=\"https://github.com/rust-lang/rust/blob/0fe1dc6ac214d443369134177940b4d0111e1df6/compiler/rustc_ast_lowering/src/lib.rs#L2577\">https://github.com/rust-lang/rust/blob/0fe1dc6ac214d443369134177940b4d0111e1df6/compiler/rustc_ast_lowering/src/lib.rs#L2577</a></p>",
        "id": 220722349,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608663439
    },
    {
        "content": "<p>and so <em>now</em> my question is why this is different from a normal function:</p>\n<div class=\"codehilite\"><pre><span></span><code>            // Intercept when we are in an impl header or async fn and introduce an in-band\n            // lifetime.\n            // Hence `impl Foo for &amp;u32` becomes `impl&lt;&#39;f&gt; Foo for &amp;&#39;f u32` for some fresh\n            // `&#39;f`.\n</code></pre></div>",
        "id": 220722402,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608663475
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/0fe1dc6ac214d443369134177940b4d0111e1df6/compiler/rustc_ast_lowering/src/lib.rs#L1751-L1754\">https://github.com/rust-lang/rust/blob/0fe1dc6ac214d443369134177940b4d0111e1df6/compiler/rustc_ast_lowering/src/lib.rs#L1751-L1754</a></p>\n<div class=\"codehilite\"><pre><span></span><code>            // In `async fn`, argument-position elided lifetimes\n            // must be transformed into fresh generic parameters so that\n            // they can be applied to the opaque `impl Trait` return type.\n            AnonymousLifetimeMode::CreateParameter\n</code></pre></div>",
        "id": 220722605,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608663584
    },
    {
        "content": "<p>added in <a href=\"https://github.com/rust-lang/rust/commit/749349fc9f7b12f212bca9ba2297e463328cb701\">https://github.com/rust-lang/rust/commit/749349fc9f7b12f212bca9ba2297e463328cb701</a></p>",
        "id": 220722763,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608663675
    },
    {
        "content": "<p>and indeed changing that fixes rustdoc's issue:<br>\n<a href=\"/user_uploads/4715/y4N7JeqFSjsqbgpWl-S5MVus/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/y4N7JeqFSjsqbgpWl-S5MVus/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/y4N7JeqFSjsqbgpWl-S5MVus/image.png\"></a></div>",
        "id": 220723110,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608663845
    },
    {
        "content": "<p>so <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> my question now is 'what will break' <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> is there a way to do this without creating fresh generic parameters? or does rustdoc need to change on its end?</p>",
        "id": 220723163,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608663885
    },
    {
        "content": "<p>oh I'm really sorry I've been pinging the wrong person</p>",
        "id": 220723489,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608664086
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> added this in <a href=\"https://github.com/rust-lang/rust/commit/749349fc9f7b12f212bca9ba2297e463328cb701\">https://github.com/rust-lang/rust/commit/749349fc9f7b12f212bca9ba2297e463328cb701</a></p>",
        "id": 220723503,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608664100
    },
    {
        "content": "<p>here's the error when I naively remove it:</p>\n<div class=\"codehilite\"><pre><span></span><code>---- [ui] ui/suggestions/issue-72766.rs stdout ----\ndiff of stderr:\n\n+   error[E0759]: `self` has an anonymous lifetime `&#39;_` but it needs to satisfy a `&#39;static` lifetime requirement\n+     --&gt; $DIR/issue-72766.rs:7:48\n+      |\n+   LL |       pub async fn call(&amp;self) -&gt; Result&lt;(), ()&gt; {\n+      |  _______________________-----____________________^\n+      | |                       |\n+      | |                       this data with an anonymous lifetime `&#39;_`...\n+   LL | |         Ok(())\n+   LL | |     }\n+      | |_____^ ...is captured here...\n+      |\n+   note: ...and is required to live as long as `&#39;static` here\n+     --&gt; $DIR/issue-72766.rs:7:33\n+      |\n+   LL |     pub async fn call(&amp;self) -&gt; Result&lt;(), ()&gt; {\n+      |                                 ^^^^^^^^^^^^^^\n+\n</code></pre></div>",
        "id": 220723635,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608664202
    },
    {
        "content": "<p>my first thought is to find a way to add information to the new parameter about it being “synthetic” that rustdoc can use to ignore it</p>",
        "id": 220743280,
        "sender_full_name": "tmandry",
        "timestamp": 1608677336
    },
    {
        "content": "<p>or find some other way to detect the situation (lifetime parameters with the ‘_ name in a function signature aren’t something I’ve seen in real code before but maybe you can write them?)</p>",
        "id": 220743383,
        "sender_full_name": "tmandry",
        "timestamp": 1608677405
    },
    {
        "content": "<p>yes, you can write <code>fn f(&amp;'_ self)</code></p>",
        "id": 220743500,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608677515
    },
    {
        "content": "<p>and I would prefer to keep that the same as the source code if possible</p>",
        "id": 220743549,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608677526
    },
    {
        "content": "<p>otherwise things get way more complicated because rustdoc needs to know <em>where</em> the lifetime comes from, because <code>Box&lt;dyn Trait + '_&gt;</code> is different from <code>Box&lt;dyn Trait&gt;</code></p>",
        "id": 220743580,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608677562
    },
    {
        "content": "<p>I meant in the generics list, like: fn&lt;‘_&gt;(...)</p>",
        "id": 220743746,
        "sender_full_name": "tmandry",
        "timestamp": 1608677676
    },
    {
        "content": "<p>but I’m not sure that’s represented any differently in HIR</p>",
        "id": 220743764,
        "sender_full_name": "tmandry",
        "timestamp": 1608677692
    },
    {
        "content": "<p>anyway, it’s sounding like you want some way of representing synthetic lifetimes</p>",
        "id": 220743883,
        "sender_full_name": "tmandry",
        "timestamp": 1608677777
    },
    {
        "content": "<p>that would work, I think</p>",
        "id": 220743948,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608677841
    },
    {
        "content": "<p>I'm not sure why the lifetimes are necessary in the first place</p>",
        "id": 220743969,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608677862
    },
    {
        "content": "<p>I guess otherwise the return type is <code>impl Future</code> instead of <code>impl Future + '_</code>?</p>",
        "id": 220744202,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608678012
    },
    {
        "content": "<p>which defaults to 'static?</p>",
        "id": 220744210,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608678022
    },
    {
        "content": "<p>if there were some way to <em>only</em> add the lifetime to the return type that would be ideal</p>",
        "id": 220744237,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608678051
    },
    {
        "content": "<p>well you need that but I think that’s already done in the desugaring</p>",
        "id": 220744865,
        "sender_full_name": "tmandry",
        "timestamp": 1608678541
    },
    {
        "content": "<p>this is so we can construct a synthetic type for the future / state machine returned by the function</p>",
        "id": 220744915,
        "sender_full_name": "tmandry",
        "timestamp": 1608678595
    },
    {
        "content": "<p>and we need to be able to name lifetimes in that type which correspond to the (elided) lifetimes in the function signature</p>",
        "id": 220744986,
        "sender_full_name": "tmandry",
        "timestamp": 1608678629
    },
    {
        "content": "<p>hmm, ok</p>",
        "id": 220745125,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608678739
    },
    {
        "content": "<p>let me try ignoring anonymous lifetimes in function parameters like you suggested</p>",
        "id": 220745140,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608678757
    },
    {
        "content": "<p>and the bogus <code>fn f&lt;'_, '_&gt;</code></p>",
        "id": 220745150,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608678763
    },
    {
        "content": "<p>so e.g. if you have <code>async fn foo(x: &amp;i32)</code> we have to be able to create <code>struct FooFuture&lt;'a&gt;(&amp;'a i32)</code>, roughly</p>",
        "id": 220745171,
        "sender_full_name": "tmandry",
        "timestamp": 1608678782
    },
    {
        "content": "<p>ahhh that makes sense</p>",
        "id": 220745189,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608678797
    },
    {
        "content": "<p>and resolve the opaque return type so it looks like <code>fn foo&lt;'a&gt;(x: &amp;'a i32) -&gt; FooFuture&lt;'a&gt;</code></p>",
        "id": 220745213,
        "sender_full_name": "tmandry",
        "timestamp": 1608678819
    },
    {
        "content": "<p>so I guess my question is - why is this different from normal functions?</p>",
        "id": 220745292,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608678870
    },
    {
        "content": "<p>for <code>fn foo(x: &amp;i32)</code> you still have an arbitrary lifetime, right?</p>",
        "id": 220745300,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608678882
    },
    {
        "content": "<p>is it because you need to name it?</p>",
        "id": 220745310,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608678891
    },
    {
        "content": "<p>yeah, you need to name the same lifetime in two different places</p>",
        "id": 220745486,
        "sender_full_name": "tmandry",
        "timestamp": 1608679044
    },
    {
        "content": "<p>for a single input/output lifetime elision can still work</p>",
        "id": 220745508,
        "sender_full_name": "tmandry",
        "timestamp": 1608679070
    },
    {
        "content": "<p>(I don't remember at what level elision is handled right now, I think desugaring?)</p>",
        "id": 220745565,
        "sender_full_name": "tmandry",
        "timestamp": 1608679105
    },
    {
        "content": "<p>but when there are multiple you need names</p>",
        "id": 220745567,
        "sender_full_name": "tmandry",
        "timestamp": 1608679108
    },
    {
        "content": "<p>so in general we need to handle cases where there are multiple unnamed lifetimes in the <code>async fn</code> signature</p>",
        "id": 220745633,
        "sender_full_name": "tmandry",
        "timestamp": 1608679180
    },
    {
        "content": "<p>oh that makes a lot of sense - I remember I tried <code>fn f(a: &amp;str, b: &amp;str)</code> with 1.34 (before this change was made) and it gave an error about multiple elided lifetimes</p>",
        "id": 220745698,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608679220
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116883\">tmandry</span> <a href=\"#narrow/stream/266220-rustdoc/topic/async.20functions.20show.20elided.20lifetimes/near/220743883\">said</a>:</p>\n<blockquote>\n<p>anyway, it’s sounding like you want some way of representing synthetic lifetimes</p>\n</blockquote>\n<p>hmm, I thought I could tell this apart by looking at <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/enum.LifetimeParamKind.html#variant.InBand\"><code>InBand</code></a> vs <code>Elided</code>, but these lifetimes are marked as Elided for some reason :/</p>",
        "id": 220749626,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608682408
    },
    {
        "content": "<p>what's the difference between 'elided' and 'inband' anyway?</p>",
        "id": 220749726,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608682494
    },
    {
        "content": "<p>ok well good news, filtering out Elided lifetimes gets rid of the <code>&lt;'_&gt;</code> :)</p>",
        "id": 220749842,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608682597
    },
    {
        "content": "<p>and that should always be safe because you can't write <code>&lt;'_&gt;</code> in user code</p>",
        "id": 220749846,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608682612
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/80319\">https://github.com/rust-lang/rust/pull/80319</a></p>",
        "id": 220754279,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608687778
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span>  thanks for the help with this :)</p>",
        "id": 220754455,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608688067
    },
    {
        "content": "<p>glad I could help!</p>",
        "id": 220754520,
        "sender_full_name": "tmandry",
        "timestamp": 1608688129
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> left a review, btw</p>",
        "id": 220755531,
        "sender_full_name": "tmandry",
        "timestamp": 1608689540
    },
    {
        "content": "<p>left a response</p>",
        "id": 220756194,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608690620
    }
]