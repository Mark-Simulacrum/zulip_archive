[
    {
        "content": "<p>Following up on <a href=\"https://github.com/rust-lang/rust/pull/92526#discussion_r777760153\">https://github.com/rust-lang/rust/pull/92526#discussion_r777760153</a> - I have some thoughts on how this could be implemented in a non-template-engine-specific way.</p>\n<p>The heuristic we want for HTML is: If a line ends in <code>&gt;</code> and the next line begins with <code>&lt;</code>, strip all whitespace to the beginning of the next line. If a line ends in <code>\"</code> or <code>'</code>', it's probably an HTML attribute. E.g.:</p>\n<div class=\"codehilite\"><pre><span></span><code>&lt;a href=&quot;https://example.com&quot;\n  title=&quot;foo&quot;&gt;\n</code></pre></div>\n<p>In that case we want to strip the newline and all whitespace, except for one space.</p>\n<p>We can do this by transforming the _template_ before we pass it to the templating engine.</p>",
        "id": 266899140,
        "sender_full_name": "jsha",
        "timestamp": 1641359695
    },
    {
        "content": "<blockquote>\n<p>We can do this by transforming the _template_ before we pass it to the templating engine.</p>\n</blockquote>\n<p>Hmm, that doesn't seem like the most efficient way to do this. Also, once Askama has better Spans, it'd mess up error messages since they'd point to a minimized version of the file.</p>",
        "id": 266983738,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641412996
    },
    {
        "content": "<p>There are two basic options - transform the template before it reaches the templating engine, or transform it after the templating engine interpolates. The latter is quite risky because you can get hard-to-reason-about behaviors where a string is injected and then modified.</p>\n<p>The other possibility would be to have a final pass through an HTML-aware minifier. That would be my preference, but we weren't able to find a Rust one. And also that would undo some of our \"reduce copies and allocations\" work.</p>\n<p>Yet another possibility would be to just accept some newlines and whitespace and figure they'll mostly (not entirely!) be dealt with through compression.</p>",
        "id": 266985983,
        "sender_full_name": "jsha",
        "timestamp": 1641414122
    },
    {
        "content": "<p>Removing whitespace in HTML is actually very tricky because depending on the tag we're in, it's definitely not always what we want. Same goes for a HTML-minifier: it's very complex.</p>\n<p>Even though it's very annoying for us to mark where the whitespace should be removed, I think it's the best solution we have currently.</p>",
        "id": 266986320,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1641414287
    },
    {
        "content": "<p>I'm saying there's another option, which is to have the templating engine remove whitespace \"on the fly\". This avoids all extra allocations. The templating engine would of course need to have an option to enable this behavior. I don't know how much it would complicate Askama though.</p>",
        "id": 266991463,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641416971
    }
]