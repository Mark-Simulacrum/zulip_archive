[
    {
        "content": "<p>I'm working on <a href=\"https://github.com/rust-lang/rust/issues/85492\">https://github.com/rust-lang/rust/issues/85492</a> (confusing sidebar for items with multiple impls, like <code>Any</code>), and I'm a bit stuck. I'd like feedback on a path forward. Here's my branch so far:</p>\n<p><a href=\"https://github.com/rust-lang/rust/compare/master...jsha:multi-impl-sidebar?expand=1\">https://github.com/rust-lang/rust/compare/master...jsha:multi-impl-sidebar?expand=1</a></p>\n<p>And here's a demo:</p>\n<p><a href=\"https://jacob.hoffman-andrews.com/rust/multi-impl-sidebar/std/any/trait.Any.html\">https://jacob.hoffman-andrews.com/rust/multi-impl-sidebar/std/any/trait.Any.html</a><br>\n<a href=\"https://jacob.hoffman-andrews.com/rust/multi-impl-sidebar/std/vec/struct.Vec.html\">https://jacob.hoffman-andrews.com/rust/multi-impl-sidebar/std/vec/struct.Vec.html</a><br>\n<a href=\"https://jacob.hoffman-andrews.com/rust/multi-impl-sidebar/std/string/struct.String.html\">https://jacob.hoffman-andrews.com/rust/multi-impl-sidebar/std/string/struct.String.html</a></p>\n<p>It's an improvement for <code>Any</code> (though I still need to refine what the sub-headings say). But for <code>Vec</code> I hadn't previously realized that there are five separate impls. Splitting the sidebar methods by their impl feels like a bit of a step backwards - I like seeing all the Vec methods in one big sorted list. But at the same time, breaking things out by impl mirrors the structure of the doc, and expresses some important semantics - like the fact that <code>dedup()</code> is only available when <code>T: PartialEq&lt;T&gt;</code>.</p>\n<p>Any ideas on how to express multiple impls in the sidebar?</p>",
        "id": 258323278,
        "sender_full_name": "jsha",
        "timestamp": 1634714435
    },
    {
        "content": "<p>I think it's a really good idea to separate these by the bounds on the impl :) I don't think we need to avoid that for Vec. I do worry that we'll start separating these even if the bounds are the same, which seems a little less helpful. But given that we already separate them in the main body of the page, maybe that's a good thing to make it consistent.</p>",
        "id": 258360293,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1634734056
    },
    {
        "content": "<p>Separating impls when the bounds are similar doesn't sound like a good idea to me... As a reader, I don't care if the method comes from \"impl A\" or \"impl B\", I just want to access it easily</p>",
        "id": 258367023,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1634736592
    },
    {
        "content": "<p>You can access it either way though</p>",
        "id": 258368351,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1634737053
    },
    {
        "content": "<p>But the sidebar itself will be more charged</p>",
        "id": 258371434,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1634738128
    },
    {
        "content": "<p>charged/loaded</p>",
        "id": 258371463,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1634738135
    },
    {
        "content": "<p>well you got it</p>",
        "id": 258371474,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1634738138
    },
    {
        "content": "<p>One comment I have is that it might be better for the sidebar to mention the bounds somehow, since \"Impl 1\" etc. are not very informative. I guess the issue is how to handle lots of bounds?</p>",
        "id": 258408407,
        "sender_full_name": "Noah Lev",
        "timestamp": 1634750731
    },
    {
        "content": "<p>Yep, definitely agreed we should show the bounds somehow. Impl 1 is a sort of placeholder because I couldn't figure out how to render the bounds, and also wanted to get feedback on the general concept of breaking up the sidebar before I plunged further into figuring it out.</p>",
        "id": 258409189,
        "sender_full_name": "jsha",
        "timestamp": 1634750974
    },
    {
        "content": "<p>Dunno if this is related, but it would also be cool to have nicer anchors for things like <a href=\"https://doc.rust-lang.org/std/fmt/trait.Debug.html#impl-Debug-111\">https://doc.rust-lang.org/std/fmt/trait.Debug.html#impl-Debug-111</a></p>",
        "id": 258409437,
        "sender_full_name": "scottmcm",
        "timestamp": 1634751047
    },
    {
        "content": "<p>Yeah, we've been talking about improving impl anchors recently: <a href=\"https://discord.com/channels/442252698964721669/459149231702278154/898646027521916948\">https://discord.com/channels/442252698964721669/459149231702278154/898646027521916948</a></p>",
        "id": 258411511,
        "sender_full_name": "Noah Lev",
        "timestamp": 1634751775
    },
    {
        "content": "<p>I think they should take the form <code>#impl-Debug-for-NonZeroU16</code>. Figuring out how to encode bounds might be a bit tricky though.</p>",
        "id": 258411591,
        "sender_full_name": "Noah Lev",
        "timestamp": 1634751802
    },
    {
        "content": "<p>I think it's fine to stick with numerical anchors for bounds for now, just showing the trait name will be helpful</p>",
        "id": 258412374,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1634752084
    },
    {
        "content": "<p>I also see a big down side on this: it's harder to find methods because they're alpha sorted by impls. So if you have a lot of methods in the first impl(s), finding methods from the next ones will be much less obvious</p>",
        "id": 258432353,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1634759353
    },
    {
        "content": "<p>Right, which relates to another issue: the sidebar acts as a Table of Contents, but one of the basic rules of a Table of Contents is that it's in the same order as the contents themselves. We violate that rule, sorting by alpha in the sidebar and by source order in the contents. It would be ideal if we could harmonize them.</p>\n<p>Alphabetical sort is useful and intuitive. Using the source order provides the opportunity for doc authors to emphasize groupings of related functions, as mentioned <a href=\"https://github.com/rust-lang/rust/issues/57448#issuecomment-452417768\">https://github.com/rust-lang/rust/issues/57448#issuecomment-452417768</a>. Though, interestingly, those are grouped together under Vec&lt;T, Global&gt; in my demo.</p>\n<p>I think my current preference is: group by impl bounds and then sort by alpha, in both the sidebar and the contents.</p>",
        "id": 258480475,
        "sender_full_name": "jsha",
        "timestamp": 1634785628
    },
    {
        "content": "<p>By the way, in the linked issue, someone made the case that rustdoc should respect the careful ordering of items by the doc author, because first, last, first_mut, last_mut etc should be grouped together. I looked at <a href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">slice</a> and they're ordered like this:</p>\n<p>first<br>\nfirst_mut<br>\nsplit_first<br>\nsplit_first_mut<br>\nsplit_last<br>\nsplit_last_mut<br>\nlast<br>\nlast_mut</p>\n<p>This cluster of methods is related to each other in many ways - for instance, you'd like split_first to be close to first, and also close to split_last. I don't think we can satisfy all the nearness constraints by simple ordering. Maybe the right solution for this sort of method grouping is for the doc author to give each grouping of methods a subheading in the top-doc, which summarizes the category of methods and links to each of them. Then each method's doc can also link back to that subheading.</p>",
        "id": 258481302,
        "sender_full_name": "jsha",
        "timestamp": 1634786299
    },
    {
        "content": "<p>I don't see the sidebar as a table of content, which is maybe why I don't see issues with the order being different... But I'm not sure how important it is for doc authors to have rustdoc keeping the items order or not</p>",
        "id": 258507534,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1634805334
    },
    {
        "content": "<p>A sidebar like the one we have is _usually_ a table of contents. See for example <a href=\"https://pkg.go.dev/database/sql\">https://pkg.go.dev/database/sql</a> or <a href=\"https://certbot.eff.org/docs/api/certbot.html#subpackages\">https://certbot.eff.org/docs/api/certbot.html#subpackages</a>.</p>\n<p>If ours is not a table of contents, is there another concept you think it maps to?</p>",
        "id": 258575090,
        "sender_full_name": "jsha",
        "timestamp": 1634833239
    },
    {
        "content": "<p>An abstract?</p>",
        "id": 258588406,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1634838442
    },
    {
        "content": "<blockquote>\n<p>I think my current preference is: group by impl bounds and then sort by alpha, in both the sidebar and the contents.</p>\n</blockquote>\n<p>I have to say I really disagree with sorting the contents alphabetically, even if first they are grouped by impl bounds. There's a de facto standard ordering that many crates (especially <code>std</code>) follow in terms of method ordering. Constructors come first, then \"deconstructors\" (like <code>into_inner</code>), and then all other methods. I find this de facto ordering to be useful—and I imagine it's especially useful for new users—since it reduces the feeling of having a sea of methods to look at. I'd much rather have the sidebar not match the ordering of the contents of the page than to have both be alphabetical.</p>\n<p>Alphabetical sorting is intuitive in some ways, but it puts items in an essentially random order. Library authors will do a much better job of organizing their API than an automatic alphabetical sort will.</p>",
        "id": 258611216,
        "sender_full_name": "Noah Lev",
        "timestamp": 1634847752
    },
    {
        "content": "<p>I think different sorting for the sidebar and the body is justifiable -- if I want to scroll through things \"exploratorily\" I'd rather hit the [-] and do that in the main body, but if I'm looking to go to something in particular then the alpha sorting in the sidebar is handy.</p>",
        "id": 258640380,
        "sender_full_name": "scottmcm",
        "timestamp": 1634863529
    },
    {
        "content": "<p>Keeping the order in the main pane might also encourage more documenting on <code>impl Foo</code> blocks, which would be nice -- de-facto-suggesting everything be up at the type level isn't necessarily great.</p>",
        "id": 258640534,
        "sender_full_name": "scottmcm",
        "timestamp": 1634863666
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/266220-rustdoc/topic/Feedback.20on.20multi-impl.20sidebar/near/258640534\">said</a>:</p>\n<blockquote>\n<p>Keeping the order in the main pane might also encourage more documenting on <code>impl Foo</code> blocks, which would be nice -- de-facto-suggesting everything be up at the type level isn't necessarily great.</p>\n</blockquote>\n<p>Yes, I would like rustdoc to improve how docs on inherent impls are displayed. IIRC, right now the UI for them is very confusing. I think we could layout impl docs a bit more like <a href=\"https://package.elm-lang.org/packages/elm/core/latest/Maybe\">Elm's docs</a> (and I think other docs tools have similar layouts).</p>",
        "id": 258640847,
        "sender_full_name": "Noah Lev",
        "timestamp": 1634863916
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/266220-rustdoc/topic/Feedback.20on.20multi-impl.20sidebar/near/258640380\">said</a>:</p>\n<blockquote>\n<p>I think different sorting for the sidebar and the body is justifiable</p>\n</blockquote>\n<p>Useful feedback, thanks! What do you think of splitting up the sidebar like in the Vec example above?</p>\n<p>What I'm concluding from this conversation is that a Grand Unified Sidebar Theory may be a long time in coming, so I'm going to work on a more narrow fix: Only when there are duplicate method names, split the sidebar methods up by impl. Put horizontal lines between them and don't try to give a title for the impl.</p>\n<p>By the way, here's another motivating example where methods are duplicated in different impls, creating confusion: <a href=\"https://docs.rs/rustls/0.20.0/rustls/struct.ConfigBuilder.html\">https://docs.rs/rustls/0.20.0/rustls/struct.ConfigBuilder.html</a></p>",
        "id": 258641821,
        "sender_full_name": "jsha",
        "timestamp": 1634864571
    },
    {
        "content": "<blockquote>\n<p>so I'm going to work on a more narrow fix: Only when there are duplicate method names, split the sidebar methods up by impl. Put horizontal lines between them and don't try to give a title for the impl.</p>\n</blockquote>\n<p>That sounds like a good plan :)</p>",
        "id": 258642691,
        "sender_full_name": "Noah Lev",
        "timestamp": 1634865231
    }
]