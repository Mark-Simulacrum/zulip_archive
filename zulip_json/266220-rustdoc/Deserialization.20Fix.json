[
    {
        "content": "<p>For <a href=\"https://github.com/rust-lang/rust/issues/82299\">#82299</a>, it was found that order matters for untagged enums. Fixing this could be as easy as moving the variants, but that's easy to break. The best alternative is adjacent tagging, which would match the current layout. The issue with this is that it means the <code>kind</code> would be consumed by the inner. There is a fix, but it is a little ugly. Here's my proposal:<br>\nWe make ItemEnum adjacently tagged. We make <code>Item::kind</code> into <code>#[serde(ignore)]</code>. We derive serialization, and manually implement deserialization to fill in <code>kind</code> based on the result of deserializing <code>inner</code>.</p>",
        "id": 228086101,
        "sender_full_name": "CraftSpider",
        "timestamp": 1614463612
    },
    {
        "content": "<p>This doesn't change the JSON at all, just how we implement one of the deserializations to prevent inner value conflicts. I think this is better than just moving stuff around because it also prevents a future problem with, say, <code>TypeA(String)</code> and <code>TypeB(String)</code></p>",
        "id": 228086173,
        "sender_full_name": "CraftSpider",
        "timestamp": 1614463699
    },
    {
        "content": "<p>I think you can do this with clever serde</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Serialize, Deserialize, Debug)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Item</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">name</span>: <span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[serde(flatten)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">inner</span>: <span class=\"nc\">Inner</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[derive(Serialize, Deserialize, Debug)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[serde(tag = </span><span class=\"s\">\"kind\"</span><span class=\"cp\">, content = </span><span class=\"s\">\"inner\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">Inner</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Struct</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">name</span>: <span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">n_field</span>: <span class=\"kt\">u8</span> <span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Function</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">name</span>: <span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">n_field</span>: <span class=\"kt\">u8</span> <span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=b6cc9cb7ebee8f7aeeb3a45911fa2764\">playground</a></p>\n<p>This way, we remove <code>kind</code> from <code>Item</code>, and have <code>ItemEnum</code> provide both the tag and the kind</p>",
        "id": 228087799,
        "sender_full_name": "Nixon Enraght-Moony",
        "timestamp": 1614465629
    },
    {
        "content": "<p>That would work, but my goal was to keep this non-breaking, so not remove <code>kind</code> from <code>Item</code></p>",
        "id": 228088465,
        "sender_full_name": "CraftSpider",
        "timestamp": 1614466426
    },
    {
        "content": "<p>Otherwise that would definitely solve the problem</p>",
        "id": 228088547,
        "sender_full_name": "CraftSpider",
        "timestamp": 1614466528
    },
    {
        "content": "<blockquote>\n<p>my goal was to keep this non-breaking,</p>\n</blockquote>\n<p>Why, breaking to whom?</p>\n<p>The json output is uneffected, and the rust types are not exported anywhere</p>",
        "id": 228088629,
        "sender_full_name": "Nixon Enraght-Moony",
        "timestamp": 1614466589
    },
    {
        "content": "<p>That's true. And overall I don't think there's a problem with removing the kind, as I think the common cases you want to match on inner anyways. I'd like <span class=\"user-mention\" data-user-id=\"229913\">@HeroicKatora</span>'s input on this, as they're the main consumer and I believe have started copying over the rustdoc types (The goal is once rustdoc-json stabilizes, the types become part of the public interface. That's why I was thinking of a change to them as 'breaking')</p>",
        "id": 228088748,
        "sender_full_name": "CraftSpider",
        "timestamp": 1614466756
    },
    {
        "content": "<p>Yeah, one day we should put <code>rustdoc-json-types</code> on <a href=\"http://crates.io\">crates.io</a>, (posibly before the format stabilizes, and only release 1.0 when rustdoc-json hits stable), but untill then, we should absolutly make breaking changes to the types</p>",
        "id": 228088865,
        "sender_full_name": "Nixon Enraght-Moony",
        "timestamp": 1614466883
    },
    {
        "content": "<p>Yeah, I've definitely been making breaking changes already too. Now is the time to make them :P</p>",
        "id": 228088927,
        "sender_full_name": "CraftSpider",
        "timestamp": 1614466931
    },
    {
        "content": "<p>I just always make sure to bump version when I do. Anyways, if removing <code>kind</code> and just exposing inner as a tagged enum works, that's definitely the cleanest solution.</p>",
        "id": 228088942,
        "sender_full_name": "CraftSpider",
        "timestamp": 1614466967
    },
    {
        "content": "<p>Sounds like a plan to me :)</p>",
        "id": 228089178,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614467217
    },
    {
        "content": "<p>The <code>#[serde(flatten)] inner</code> solution looks neat, especially if it leaves the current json structure in place. I'm not dependent on the files in rustdoc-json as of yet, just the json structure.</p>",
        "id": 228094013,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1614473220
    },
    {
        "content": "<p>So, making breaking changes in those types is fine. Even breaking the format is not usually a problem. Note that I've customized the types anyways since in my code the <code>version</code> field is replaced by one that asserts the expected version :)</p>",
        "id": 228094092,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1614473311
    },
    {
        "content": "<p>Opened <a href=\"https://github.com/rust-lang/rust/issues/82613\">#82613</a> with the proposed flatten fix</p>",
        "id": 228094224,
        "sender_full_name": "CraftSpider",
        "timestamp": 1614473501
    }
]