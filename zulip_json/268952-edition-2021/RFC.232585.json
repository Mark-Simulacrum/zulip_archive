[
    {
        "content": "<p>Do we want the lint from <a href=\"https://github.com/rust-lang/rfcs/issues/2585\">RFC#2585</a> to become warn-by-default in Edition 2021? Currently it's unstable (see <a href=\"https://github.com/rust-lang/rust/issues/79208\">#79208</a> for stabilization PR) and also allow-by-default.</p>\n<p>cc <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> (who wrote the RFC) and <span class=\"user-mention\" data-user-id=\"255061\">@LÃ©o Lanteri Thauvin</span> (who implemented it)</p>",
        "id": 221106891,
        "sender_full_name": "Noah Lev",
        "timestamp": 1609208824
    },
    {
        "content": "<p>(Or even make it deny-by-default; not sure what the plan is for that lint.)</p>",
        "id": 221107123,
        "sender_full_name": "Noah Lev",
        "timestamp": 1609209192
    },
    {
        "content": "<p>cc <span class=\"user-group-mention\" data-user-group-id=\"1977\">@T-lang</span></p>",
        "id": 221112525,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609218733
    },
    {
        "content": "<p>Personally I remain unconvinced that it ever ought to be a <em>hard</em> error, but would have no objection to changing its default severity as a lint.</p>",
        "id": 221116444,
        "sender_full_name": "scottmcm",
        "timestamp": 1609225736
    },
    {
        "content": "<p>I guess that's a matter of what the end goal is that we want to reach here eventually (in terms of default severity) -- not sure if T-lang has consensus on that</p>",
        "id": 221138233,
        "sender_full_name": "RalfJ",
        "timestamp": 1609252547
    },
    {
        "content": "<p>I didn't follow the RFC discussion, but a suppressable lint seems so non-committal here, making it just a style issue instead of <em>actually</em> saying that <code>unsafe fn</code> is not an <code>unsafe</code> block. We have to do that for compatibility, but if we're not going to make it a hard-error language change in the next edition, then the whole idea is weakened.</p>",
        "id": 221145331,
        "sender_full_name": "cuviper",
        "timestamp": 1609258697
    },
    {
        "content": "<p>As a stakeholder from a company where Rust's safety is the number one reason for adoption, the more we can push for de-coupling of unsafe functions and unsafe blocks, the better. I'd love to see this get close to deny-by-default as possible.</p>",
        "id": 221151700,
        "sender_full_name": "rylev",
        "timestamp": 1609263543
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> This is going to be a massive amount of churn. If we go this route, we still need to turn the lint up to warn in an edition, and then in a future edition we might be able to make the change.</p>",
        "id": 221158259,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609268716
    },
    {
        "content": "<p>Also, there isn't currently consensus among the lang team that we should do this at all. Most of us do think we should, but there are reasonable objections as well.</p>",
        "id": 221158343,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609268765
    },
    {
        "content": "<p>FWIW as one of the proponents of this idea originally I am increasingly uncertain it's quite the right thing - I might want to be even more strict - and I think we'd want to do no more than one migration here if at all possible. I do not think we should aim for anything in 2021; it seems unlikely that we will have consensus in the next year, speaking personally (not a lang team member of course).</p>",
        "id": 221158485,
        "sender_full_name": "simulacrum",
        "timestamp": 1609268890
    },
    {
        "content": "<p>I think that it's only marginally the right move to make at all. The automated \"fix\" is to just change <code>unsafe fn foo() {</code> into <code>unsafe fn foo(){ unsafe {</code> and from there you can't necessarily reduce the span of that unsafe block at all, so you've just added verbosity for no gain.</p>\n<p>Keeping it as deny-by-default and then allowing people who know they're doing a large amount of unsafe in a particular crate to override that in the crate is best.</p>\n<p>A hard error would just plain be bad.</p>",
        "id": 221192500,
        "sender_full_name": "Lokathor",
        "timestamp": 1609308164
    },
    {
        "content": "<p>The automated fix, IMO, should wrap each unsafe expression as tightly as possible - what you suggest is just the easiest fix.</p>",
        "id": 221210263,
        "sender_full_name": "simulacrum",
        "timestamp": 1609332829
    },
    {
        "content": "<blockquote>\n<p>Keeping it as deny-by-default and then allowing people who know they're doing a large amount of unsafe in a particular crate to override that in the crate is best.</p>\n</blockquote>\n<p>\"keeping\"? it's allow-by-default currently</p>",
        "id": 221212184,
        "sender_full_name": "RalfJ",
        "timestamp": 1609334853
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224872\">Ryan Levick</span> <a href=\"#narrow/stream/268952-edition/topic/RFC.232585/near/221151700\">said</a>:</p>\n<blockquote>\n<p>As a stakeholder from a company where Rust's safety is the number one reason for adoption, the more we can push for de-coupling of unsafe functions and unsafe blocks, the better. I'd love to see this get close to deny-by-default as possible.</p>\n</blockquote>\n<p>I'm not personally convinced that this makes a huge difference to that, though.  The correctness of the overall code still depends on all the code in the module outside of the unsafe blocks too.  That's why I'm ok with this as a lint -- so people can use it to help convince themselves things are correct -- but am not certain that it'd ever be worth making a strict <em>requirement</em> on <em>all</em> code.  (As I said earlier, I'm fine with it being opt-out, if that's helpful.  I just think it should remain <em>possible</em> to opt-out.)</p>\n<p>For example, I could imagine us making a parameterized effect-like system for <code>unsafe</code> eventually, to have compiler assistance that you've met all of the preconditions for an unsafe call.  At which point the more-focused blocks would lose much of their value.</p>",
        "id": 221253396,
        "sender_full_name": "scottmcm",
        "timestamp": 1609368817
    },
    {
        "content": "<p>Well, you presumably still want something like them to scope those effects. But I'm increasingly thinking that without an effects system of some kind, it's just really hard to maintain unsafe code today - it becomes almost write once.</p>",
        "id": 221254452,
        "sender_full_name": "simulacrum",
        "timestamp": 1609369815
    },
    {
        "content": "<blockquote>\n<p>I could imagine us making a parameterized effect-like system for unsafe eventually</p>\n</blockquote>\n<p>FWIW, I don't think <code>unsafe</code> can usefully be modeled as an effect. This is an old discussion though.<br>\nEffects (and, more importantly, their absence) are about restricting the observable behavior of a function. <code>unsafe</code> is not observable. <code>unsafe</code> is about proof obligations. I think this has nothing to do with effects except for some superficial syntactical similarities.</p>",
        "id": 221285569,
        "sender_full_name": "RalfJ",
        "timestamp": 1609415731
    },
    {
        "content": "<blockquote>\n<p>I'm not personally convinced that this makes a huge difference to that, though. The correctness of the overall code still depends on all the code in the module outside of the unsafe blocks too. That's why I'm ok with this as a lint -- so people can use it to help convince themselves things are correct -- but am not certain that it'd ever be worth making a strict requirement on all code.</p>\n</blockquote>\n<p>one key argument in the RFC that proposed this lint was also that the current state makes it harder to understand the dual nature of <code>unsafe</code>: the <code>unsafe</code> keyword has two meanings (<em>defining</em> proof obligations vs <em>discharging</em> them); the fact that <code>unsafe fn</code> does both makes that harder to understand, which leads to confusion for many people.</p>",
        "id": 221285645,
        "sender_full_name": "RalfJ",
        "timestamp": 1609415807
    },
    {
        "content": "<p>would you prefer the similar in goals, but different technique of <em>capability</em> instead of effect then ?</p>",
        "id": 221286394,
        "sender_full_name": "lqd",
        "timestamp": 1609416866
    },
    {
        "content": "<p>I guess I don't have a clear enough idea of what you mean by \"capability\" here. I know that term from \"capability machines\" a la CHERI but that sounds unrelated, so I assume you mean something else. Maybe related to \"object capabilities\"? But I don't see how that could model <code>unsafe</code>, either...</p>",
        "id": 221288087,
        "sender_full_name": "RalfJ",
        "timestamp": 1609419096
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I guess I am wondering which problem with <code>unsafe</code> you think could be solved with an effect system. Is it \"just\" a more explicit account of the proof obligations that are involved?</p>",
        "id": 221288138,
        "sender_full_name": "RalfJ",
        "timestamp": 1609419130
    },
    {
        "content": "<p>Yeah, basically. Effect might be the wrong word - I could imagine some kind of text based list of preconditions on functions which callers must either annotate as given or \"pass up\" to their own caller by name.</p>",
        "id": 221288266,
        "sender_full_name": "simulacrum",
        "timestamp": 1609419262
    },
    {
        "content": "<p>yeah, some form of crude \"program logic\" is the way I'd think about this</p>",
        "id": 221288277,
        "sender_full_name": "RalfJ",
        "timestamp": 1609419285
    },
    {
        "content": "<p>I think it's basically a formalization of what safety comments are intended to do (but nearly always fail to do)</p>",
        "id": 221288295,
        "sender_full_name": "simulacrum",
        "timestamp": 1609419309
    },
    {
        "content": "<p>after all a (sophisticated) program logic is what one can use to <a href=\"https://people.mpi-sws.org/~jung/thesis.html\">prove for real that some unsafe code is doing the right thing</a></p>",
        "id": 221288304,
        "sender_full_name": "RalfJ",
        "timestamp": 1609419326
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/268952-edition/topic/RFC.232585/near/221288295\">said</a>:</p>\n<blockquote>\n<p>I think it's basically a formalization of what safety comments are intended to do (but nearly always fail to do)</p>\n</blockquote>\n<p>well, I wouldn't call it a formalization since it's just giving names to preconditions, it doesn't formalize their <em>meaning</em></p>",
        "id": 221288323,
        "sender_full_name": "RalfJ",
        "timestamp": 1609419352
    },
    {
        "content": "<p>but it is making these safety comments more systematic</p>",
        "id": 221288368,
        "sender_full_name": "RalfJ",
        "timestamp": 1609419364
    },
    {
        "content": "<p>Well, I could see the next step being adding some \"well known\" ones</p>",
        "id": 221288386,
        "sender_full_name": "simulacrum",
        "timestamp": 1609419383
    },
    {
        "content": "<p>E.g. making ptr::read on a &amp;T which is T: Copy safe because a reference implicitly satisfies preconditions</p>",
        "id": 221288422,
        "sender_full_name": "simulacrum",
        "timestamp": 1609419429
    },
    {
        "content": "<p>But that's obviously a \"next\" step</p>",
        "id": 221288435,
        "sender_full_name": "simulacrum",
        "timestamp": 1609419450
    },
    {
        "content": "<p>yeah makes sense. we can start with a \"logic\" where everything is \"opaque\" (\"function symbols\" in the speak of first-order logic), and then introduce some identifiers that actually have a given meaning</p>",
        "id": 221288527,
        "sender_full_name": "RalfJ",
        "timestamp": 1609419518
    },
    {
        "content": "<p>I do think that if we do this we should use a resourceful logic, i.e. separation logic, instead of \"regular\" first-order logic... but that would be a topic for a design meeting I think</p>",
        "id": 221288554,
        "sender_full_name": "RalfJ",
        "timestamp": 1609419550
    },
    {
        "content": "<p>IOW, the logic should have a notion of \"ownership\"</p>",
        "id": 221288569,
        "sender_full_name": "RalfJ",
        "timestamp": 1609419568
    },
    {
        "content": "<p>this is fundamental in proper proofs of soundness of Rust code</p>",
        "id": 221288579,
        "sender_full_name": "RalfJ",
        "timestamp": 1609419585
    },
    {
        "content": "<p>Yeah, design meeting feels right</p>",
        "id": 221288582,
        "sender_full_name": "simulacrum",
        "timestamp": 1609419592
    },
    {
        "content": "<p>I'd be happy to be involved in such a design :)</p>",
        "id": 221288768,
        "sender_full_name": "RalfJ",
        "timestamp": 1609419726
    },
    {
        "content": "<p>I think getting the ergonomics right would be really hard - but not infeasible. My worry is that if we want to add this, doing so is going to imply a pretty major manual(!) shift in a lot of unsafe code, and in some sense we probably want to do it after UCG makes more progress, so that the proof obligations are better understood.</p>",
        "id": 221288796,
        "sender_full_name": "simulacrum",
        "timestamp": 1609419776
    },
    {
        "content": "<p>That said the design of the feature could proceed in parallel to that (just not stabilize, most likely).</p>",
        "id": 221288838,
        "sender_full_name": "simulacrum",
        "timestamp": 1609419824
    },
    {
        "content": "<p>I think one thing that I would want to see if we opt to include this in the edition is a formal style/lang guideline on where to place unsafe blocks - as tightly bound to the unsafe action, or wrapping the whole function. If it's the latter then (presumably) this tracking system would require us to later move them to tighter binding.</p>",
        "id": 221289020,
        "sender_full_name": "simulacrum",
        "timestamp": 1609420043
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> keeping -&gt; \"restricting the end goal of this change of the language\"</p>",
        "id": 221305972,
        "sender_full_name": "Lokathor",
        "timestamp": 1609437346
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> scott sorta hinted at it, but because lines next to an unsafe function can affect the legality of what's going on, auto-fix to have minimal sized blocks is probably incorrect sometimes, while auto-fix to maximum sized blocks is never incorrect (though it's often too wide a net).</p>",
        "id": 221306159,
        "sender_full_name": "Lokathor",
        "timestamp": 1609437543
    },
    {
        "content": "<p>And in many cases, the unsafety actually is spread across an entire module, in a way that the compiler doesn't ever see and won't warn you about, and in a way that other tooling to \"count lines of unsafe\" (or whatever) will likely also never quite be smart enough to understand.</p>",
        "id": 221306286,
        "sender_full_name": "Lokathor",
        "timestamp": 1609437645
    },
    {
        "content": "<p>It's not incorrect to scope to just the unsafe action; the unsafe blocks intent by my reading isn't to limit what needs to be audited, it's to know where the audit \"starts\" or terminates, where you need unsafety comments</p>",
        "id": 221306341,
        "sender_full_name": "simulacrum",
        "timestamp": 1609437705
    },
    {
        "content": "<p>Minimal scoping provides this quite a bit more than a function level scope</p>",
        "id": 221306410,
        "sender_full_name": "simulacrum",
        "timestamp": 1609437780
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/268952-edition/topic/RFC.232585/near/221288295\">said</a>:</p>\n<blockquote>\n<p>I think it's basically a formalization of what safety comments are intended to do (but nearly always fail to do)</p>\n</blockquote>\n<p>Yeah, that's a better phrasing of what I meant.</p>",
        "id": 221334024,
        "sender_full_name": "scottmcm",
        "timestamp": 1609474050
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/268952-edition/topic/RFC.232585/near/221306159\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> scott sorta hinted at it, but because lines next to an unsafe function can affect the legality of what's going on, auto-fix to have minimal sized blocks is probably incorrect sometimes, while auto-fix to maximum sized blocks is never incorrect (though it's often too wide a net).</p>\n</blockquote>\n<p>there's nothing \"incorrect\" about this IMO. e.g. <code>Vec::set_len</code> doesn't have an <code>unsafe</code> block in it, and I don't think that's incorrect.</p>",
        "id": 221354030,
        "sender_full_name": "RalfJ",
        "timestamp": 1609511561
    },
    {
        "content": "<p>That's correct for current rust, but current rust is insufficient to properly express a lot of situations, and this is one of them.</p>\n<p>Relying exclusively on privacy because we don't have a way to declare unsafe fields leads to a lot of needless trouble.</p>",
        "id": 221359087,
        "sender_full_name": "Lokathor",
        "timestamp": 1609520014
    },
    {
        "content": "<p>while unsafe fields would be nice, I think relying on privacy makes a lot of sense</p>",
        "id": 221359617,
        "sender_full_name": "RalfJ",
        "timestamp": 1609520881
    },
    {
        "content": "<p>privacy is one of <em>the</em> established abstraction mechanisms (some other ones being ML-style modules, and whatever Haskell is doing). and abstraction is the key to being able to hide unsafety behind a safe-to-use API.</p>",
        "id": 221359671,
        "sender_full_name": "RalfJ",
        "timestamp": 1609520931
    },
    {
        "content": "<p>Relying exclusively on privacy only makes sense in a \"this is the best we got\" context.</p>",
        "id": 221365536,
        "sender_full_name": "Lokathor",
        "timestamp": 1609530051
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/268952-edition/topic/RFC.232585/near/221365536\">said</a>:</p>\n<blockquote>\n<p>Relying exclusively on privacy only makes sense in a \"this is the best we got\" context.</p>\n</blockquote>\n<p>quite the contrary, privacy/modularity is <em>the key mechanism</em> to achieve separate reasoning and abstraction, like it is needed for safe APIs around unsafe code</p>",
        "id": 221365595,
        "sender_full_name": "RalfJ",
        "timestamp": 1609530130
    },
    {
        "content": "<p>IMO everything else is a hack</p>",
        "id": 221365604,
        "sender_full_name": "RalfJ",
        "timestamp": 1609530163
    },
    {
        "content": "<p>It's absolutely not needed for safe abstraction over unsafe operations <strong>if</strong> you're able to have unsafe fields (that can be marked as unsafe to read, write, or read-write). With an unsafe-field mechanism available, then data privacy would allow for being SemVer friendly and modular, but wouldn't be needed for safety.</p>",
        "id": 221365742,
        "sender_full_name": "Lokathor",
        "timestamp": 1609530369
    },
    {
        "content": "<p>that's what I meant by \"awful hack\"</p>",
        "id": 221398568,
        "sender_full_name": "RalfJ",
        "timestamp": 1609591524
    },
    {
        "content": "<p>IOW, I think unsafe fields must always be private</p>",
        "id": 221398580,
        "sender_full_name": "RalfJ",
        "timestamp": 1609591556
    },
    {
        "content": "<p>a public unsafe field is nonsense, if you ask me. either your field has extra invariants attached to it (-&gt; make it private and unsafe) or it doesn't</p>",
        "id": 221398582,
        "sender_full_name": "RalfJ",
        "timestamp": 1609591561
    },
    {
        "content": "<p>A public unsafe field is equivalent to an <code>pub fn foo();</code>, <code>pub unsafe fn set_foo(...);</code> function pair, except that is plays nicer with the borrow checker.</p>",
        "id": 221398639,
        "sender_full_name": "bjorn3",
        "timestamp": 1609591645
    },
    {
        "content": "<p>and except that the function makes it much easier to properly document and talk about what the caller and callee obligations are</p>",
        "id": 221398686,
        "sender_full_name": "RalfJ",
        "timestamp": 1609591684
    },
    {
        "content": "<p>also it's not entirely equivalent since you can take references, which is more powerful than a setter, isn't it?</p>",
        "id": 221398693,
        "sender_full_name": "RalfJ",
        "timestamp": 1609591709
    },
    {
        "content": "<p>you'd just document the field's invariants on the field's docs instead of a setter function's docs. There's no significant difference between those two.</p>",
        "id": 221406751,
        "sender_full_name": "Lokathor",
        "timestamp": 1609605669
    },
    {
        "content": "<p>that still feels much less clean... though I will admit I have a hard time putting into words why using visibility feels \"more right\" to me than <code>pub</code> unsafe fields...</p>",
        "id": 221407650,
        "sender_full_name": "RalfJ",
        "timestamp": 1609607096
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> what difference do you see between <code>pub unsafe fn set_len</code> and <code>pub unsafe len: usize</code>?</p>",
        "id": 221407684,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609607156
    },
    {
        "content": "<p>when doing soundness proofs, I tend to ignore unsafe functions. They are, by definition, not sound <em>in general</em>, and their \"safety\" comment is informal, so it is much less clear what one would want or hope to prove about them.</p>",
        "id": 221408083,
        "sender_full_name": "RalfJ",
        "timestamp": 1609607736
    },
    {
        "content": "<p>I suppose I could just pretend that all <code>unsafe</code> fields are private for the purpose of the proof, but... that feels wrong. Maybe I am just not used to it.</p>",
        "id": 221408137,
        "sender_full_name": "RalfJ",
        "timestamp": 1609607770
    },
    {
        "content": "<p>I agree with you: I think you're just not used to it</p>",
        "id": 221412674,
        "sender_full_name": "Lokathor",
        "timestamp": 1609614382
    },
    {
        "content": "<p>It sounds like you're missing tools for describing unsafe fields formally</p>",
        "id": 221412724,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609614479
    }
]