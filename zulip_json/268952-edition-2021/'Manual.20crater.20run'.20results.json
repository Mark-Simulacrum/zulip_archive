[
    {
        "content": "<p>Starting this thread to dump results in from trying the migrations and new edition manually on some code. (cc <span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> for the top 10 most popular crates)</p>",
        "id": 244166518,
        "sender_full_name": "Mara",
        "timestamp": 1624895926
    },
    {
        "content": "<p>I tried out the migration lints on some of my own code, and ran into one false positive:</p>\n<ul>\n<li>A <code>StructOpt</code> struct being used with <code>Opt::from_iter</code></li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><code> help: disambiguate the associated function: `&lt;Opt as StructOpt&gt;::from_iter`\n</code></pre></div>\n<p>This doesn't actually become ambiguous when FromIterator is imported, because Opt doesn't implement that.</p>",
        "id": 244166619,
        "sender_full_name": "Mara",
        "timestamp": 1624895949
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"322737\">@jam1garner</span> i think that's the expected behaviour?</p>",
        "id": 244166725,
        "sender_full_name": "Mara",
        "timestamp": 1624895968
    },
    {
        "content": "<p>Hm. Yes, I was under the impression it raised an error even if the trait wasn’t implemented by the type?</p>",
        "id": 244167101,
        "sender_full_name": "jam1garner",
        "timestamp": 1624896038
    },
    {
        "content": "<p>we could change that if we wanted</p>",
        "id": 244167392,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624896160
    },
    {
        "content": "<p>the trait does have to be implemented though</p>",
        "id": 244167422,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624896175
    },
    {
        "content": "<p>that is, the compiler won't consider it ambiguous if you don't implement the trait</p>",
        "id": 244167441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624896186
    },
    {
        "content": "<p>If that’s wrong though (which seems like it is from the playground) I don’t think that’s actually too hard to fix</p>",
        "id": 244167504,
        "sender_full_name": "jam1garner",
        "timestamp": 1624896217
    },
    {
        "content": "<p>shouldn't be that hard, we just need a call to <code>evaluate_predicate</code> I think</p>",
        "id": 244167665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624896284
    },
    {
        "content": "<p>Running these now. I find the error message from new resolver to be a bit confusing. </p>\n<div class=\"codehilite\"><pre><span></span><code>The following differences were detected with the current configuration:\n\n  proc-macro2 v1.0.27 removed features `default`\n</code></pre></div>\n<p>What is this trying to tell me? This looks as if I had updated to a new version of proc-macro2 and it removed the feature <code>default</code>, but that's not what's happening.</p>",
        "id": 244439161,
        "sender_full_name": "rylev",
        "timestamp": 1625065964
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> ^^</p>",
        "id": 244439183,
        "sender_full_name": "rylev",
        "timestamp": 1625065972
    },
    {
        "content": "<p>I've also run into an issue migrating <code>proc-macro2</code> where one of the benchmarks does not compile. It also seems to not compile before the migration, but I do wonder if failing to compile a piece of a crate should make the entire process error. If my crate's tests don't compile, this means my examples won't be migrated. Is that what we wnat?</p>",
        "id": 244440080,
        "sender_full_name": "rylev",
        "timestamp": 1625066309
    },
    {
        "content": "<p>Looks like we have an issue in <code>serde</code>. <code>serde</code> is currently on Rust 2015. I can update from 2015 to 2018 fine. But when I run <code>cargo fix</code> again, it doesn't seem to pick up the <code>dyn</code> changes. This works in a dummy crate I've created so it's definitely not just a simple case of unimplemented feature.</p>",
        "id": 244442513,
        "sender_full_name": "rylev",
        "timestamp": 1625067131
    },
    {
        "content": "<p>Looks like tokio experiences an ICE when running cargo fix. I'm going to start filing issues.</p>",
        "id": 244447838,
        "sender_full_name": "rylev",
        "timestamp": 1625069220
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/86751\">https://github.com/rust-lang/rust/issues/86751</a> - serde failure<br>\n<a href=\"https://github.com/rust-lang/rust/issues/86753\">https://github.com/rust-lang/rust/issues/86753</a> - tokio ICE</p>",
        "id": 244450567,
        "sender_full_name": "rylev",
        "timestamp": 1625070303
    },
    {
        "content": "<p>(the tokio ICE looks like <a href=\"https://github.com/rust-lang/rust/issues/86743\">https://github.com/rust-lang/rust/issues/86743</a> which has no actionable info yet)</p>",
        "id": 244450881,
        "sender_full_name": "lqd",
        "timestamp": 1625070457
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> the mini-crater run has shown that by far the closure captures migration is the one that gets triggered the most. Would you be able to look at some of the diffs and see if they look correct to you?</p>",
        "id": 244591677,
        "sender_full_name": "rylev",
        "timestamp": 1625156164
    },
    {
        "content": "<p>Here are some I collected: <a href=\"/user_uploads/4715/bw1Pr9bOffpwRHtQu6VJgKoC/diffs.zip\">diffs.zip</a></p>",
        "id": 244592191,
        "sender_full_name": "rylev",
        "timestamp": 1625156436
    },
    {
        "content": "<p>Yep! I just remembered that we found some pretty severe bugs that we were talking about fixing yesterday</p>",
        "id": 244603327,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625161750
    },
    {
        "content": "<p>notably <a href=\"https://github.com/rust-lang/project-rfc-2229/issues/51\">https://github.com/rust-lang/project-rfc-2229/issues/51</a></p>",
        "id": 244603387,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625161792
    },
    {
        "content": "<p>should add that to the project board too</p>",
        "id": 244603398,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625161798
    },
    {
        "content": "<p>The initial crates that were having issues have been resolved. I'm going to run a bit larger of a group now (top 100 crates), and see if there are any other issues</p>",
        "id": 245455675,
        "sender_full_name": "rylev",
        "timestamp": 1625843495
    },
    {
        "content": "<p>Seeing an issue when trying to upgrade the serde workspace - serde derive seems to fail though when I run <code>cargo fix</code> directly on serde_derive it works:</p>\n<div class=\"codehilite\"><pre><span></span><code> cargo +nightly fix --edition\n   Compiling serde_derive v1.0.126 (/home/rylevick/code/mini-crater/serde/serde_derive)\n   Compiling serde_derive_internals v0.26.0 (/home/rylevick/code/mini-crater/serde/serde_derive_internals)\n   Migrating serde_derive_internals/lib.rs from 2015 edition to 2018\n   Migrating serde_derive/src/lib.rs from 2015 edition to 2018\n       Fixed serde_derive_internals/src/receiver.rs (1 fix)\n       Fixed serde_derive_internals/lib.rs (1 fix)\n       Fixed serde_derive_internals/src/attr.rs (4 fixes)\n       Fixed serde_derive_internals/src/ast.rs (3 fixes)\n       Fixed serde_derive_internals/src/check.rs (3 fixes)\nwarning: failed to automatically apply fixes suggested by rustc to crate `serde_derive`\n\nafter fixes were automatically applied the compiler reported errors within these files:\n\n  * serde_derive/src/internals/ast.rs\n  * serde_derive/src/internals/attr.rs\n  * serde_derive/src/internals/check.rs\n  * serde_derive/src/internals/receiver.rs\n\nThis likely indicates a bug in either rustc or cargo itself,\nand we would appreciate a bug report! You&#39;re likely to see\na number of compiler warnings after this message which cargo\nattempted to fix but failed. If you could open an issue at\nhttps://github.com/rust-lang/rust/issues\nquoting the full output of this command we&#39;d be very appreciative!\nNote that you may be able to make some more progress in the near-term\nfixing code with the `--broken-code` flag\n\nThe following errors were reported:\nerror: expected `;`, found `rnals`\n --&gt; serde_derive/src/internals/ast.rs:3:94\n  |\n3 | use crate::internals::attrs::attcrate::internals::checkternalcrate::internals::{Ctxt, Derive}rnals::{Ctxt, Derive};\n  |                                                                                              ^^^^^ expected `;`\n  |\n  = note: glob-like brace syntax must be last on the path\n\nerror: expected one of `::`, `;`, or `as`, found `:`\n --&gt; serde_derive/src/internals/attr.rs:1:37\n  |\n1 | use crate::internals::respan::respan:respacrate::internals::symbol::*als::scrate::internals::{ungroup, Ctxt}nals::{ungroup, Ctxt};\n  |                                     ^ expected one of `::`, `;`, or `as`\n\nerror: expected one of `::`, `;`, or `as`, found `:`\n --&gt; serde_derive/src/internals/receiver.rs:1:37\n  |\n1 | use crate::internals::respan::respan:respan;\n  |                                     ^ expected one of `::`, `;`, or `as`\n\nerror: unexpected closing delimiter: `}`\n --&gt; serde_derive/src/internals/check.rs:1:177\n  |\n1 | ...gType}fier, crate::internals::{ungroup, Ctxt, Derive}ngroup, Ctxt, Derive};\n  |                                  -                     -                    ^ unexpected closing delimiter\n  |                                  |                     |\n  |                                  |                     ...matches this closing brace\n  |                                  this opening brace...\n\nerror: aborting due to 4 previous errors\n\nOriginal diagnostics will follow.\n</code></pre></div>",
        "id": 245469744,
        "sender_full_name": "rylev",
        "timestamp": 1625850329
    },
    {
        "content": "<p>Unfortunately, I don't have time to look deeper now, but I'll try to take a look as soon as I can</p>",
        "id": 245469795,
        "sender_full_name": "rylev",
        "timestamp": 1625850360
    },
    {
        "content": "<p>If you'd like to see the full mini-crater run you can here:</p>",
        "id": 245469882,
        "sender_full_name": "rylev",
        "timestamp": 1625850393
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/cq6RvQKkMZfi5GA1_Z-9W33N/logs.zip\">logs.zip</a></p>",
        "id": 245469889,
        "sender_full_name": "rylev",
        "timestamp": 1625850401
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> This is a known issue (<a href=\"https://github.com/rust-lang/cargo/issues/6528\">https://github.com/rust-lang/cargo/issues/6528</a>). The problem is that the same source file is included in multiple crates (via <a href=\"https://github.com/serde-rs/serde/blob/9c39115f827170f7adbdfa4115f5916c5979393c/serde_derive_internals/lib.rs#L43-L45\">here</a>).  Two concurrent executions try to modify the same file at the same time, causing corruption.  The solution is to migrate one package at a time.</p>",
        "id": 245476830,
        "sender_full_name": "Eric Huss",
        "timestamp": 1625853699
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224872\">rylev</span> <a href=\"#narrow/stream/268952-edition-2021/topic/'Manual.20crater.20run'.20results/near/245455675\">said</a>:</p>\n<blockquote>\n<p>The initial crates that were having issues have been resolved. I'm going to run a bit larger of a group now (top 100 crates), and see if there are any other issues</p>\n</blockquote>\n<p>Yay!</p>",
        "id": 245488206,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625859726
    },
    {
        "content": "<p>^^ keep in mind that the test suite for a crate may only work when certain features are enabled. For the time crate I gave up on trying to match the flags a while back, so <code>--all-features</code> is required to be passed.</p>",
        "id": 245501009,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1625865417
    },
    {
        "content": "<p>at least for the time crate, it runs fine, though it doesn't change anything.</p>",
        "id": 245501171,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1625865464
    },
    {
        "content": "<p>Posted <a href=\"https://github.com/rust-lang/cargo/pull/9677\">https://github.com/rust-lang/cargo/pull/9677</a> to fix the serde workspace issue.</p>",
        "id": 245582027,
        "sender_full_name": "Eric Huss",
        "timestamp": 1625968260
    },
    {
        "content": "<p>One very small \"issue\" I've noticed with the closure capture migration is that it adds a line on the same line as the beginning of the closure even if the body starts on the same line. I assume we just want to rely on rustfmt to take care of that, but I thought it worth mentioning.</p>",
        "id": 245721797,
        "sender_full_name": "rylev",
        "timestamp": 1626112151
    },
    {
        "content": "<p>I'm going to close the mini-crater issue as I think it's done. We've captured everything we can at this point and should focus on the full crater run.</p>",
        "id": 245722680,
        "sender_full_name": "rylev",
        "timestamp": 1626112517
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> yes we planned in relying on rustfmt</p>",
        "id": 245724886,
        "sender_full_name": "Aman Arora",
        "timestamp": 1626113423
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> great!</p>",
        "id": 245734079,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626117310
    }
]