[
    {
        "content": "<p>Relevant issue: <a href=\"https://github.com/rust-lang/stdarch/issues/248\">https://github.com/rust-lang/stdarch/issues/248</a></p>\n<p><code>stdarch</code> exports many intrinsics that use <code>#[rustc_args_required_const]</code>, many of which are stable. In retrospect, this was a bad idea and we would like to switch these to use const generics instead. One of the main issues is that <code>#[rustc_args_required_const]</code> is effectively just a lint, which means that we still need a huge <code>match</code> within the function itself for every possible constant value the intrinsic can take. This is necessary because LLVM chokes on non-immediate values passed to certain intrinsics (particularly in unoptimized builds).</p>\n<p>In <code>stdarch</code> we would like to replace this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[rustc_args_required_const(2)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">_mm_shuffle_ps</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">__m128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">__m128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">mask</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">__m128</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>With this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">_mm_shuffle_ps</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">mask</span>: <span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">__m128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">__m128</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">__m128</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This would allow us to remove the <code>match</code>es which were severely bloating the size of <code>libcore.rlib</code> to the point where it was having an impact on compile times.</p>\n<p>The problem is that <code>_mm_shuffle_ps</code> is already stable. We can work around this by providing a backward-compatibility feature in the compiler which automatically turns <code>_mm_shuffle_ps(a, b, c)</code> into <code>_mm_shuffle_ps::&lt;{c}&gt;(a, b)</code>. This transition helper would be disabled in the 2021 edition, forcing everyone to switch to the new const generics syntax.</p>",
        "id": 226467858,
        "sender_full_name": "Amanieu",
        "timestamp": 1613446986
    },
    {
        "content": "<blockquote>\n<p>The problem is that _mm_shuffle_ps is already stable. We can work around this by providing a backward-compatibility feature in the compiler which automatically turns _mm_shuffle_ps(a, b, c) into _mm_shuffle_ps::&lt;{c}&gt;(a, b). This transition helper would be disabled in the 2021 edition, forcing everyone to switch to the new const generics syntax.</p>\n</blockquote>\n<p>This doesn't actually solve the build time problem. The standard library has to support all editions.</p>",
        "id": 226467923,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613447066
    },
    {
        "content": "<p>If the compiler can, for older editions, transparently rewrite the call to a const generic invocation at the AST/HIR level then we can use const generics even for functions that were previously stabilized.</p>",
        "id": 226468010,
        "sender_full_name": "Amanieu",
        "timestamp": 1613447205
    },
    {
        "content": "<p>oh I see, the plan is to make <code>rustc_args_required_const</code> even more magic than currently</p>",
        "id": 226468023,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613447235
    },
    {
        "content": "<p>that could work</p>",
        "id": 226468024,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613447237
    },
    {
        "content": "<p>However I have no idea how to go about actually implementing that in the compiler, or where in the pipeline it would fit in.</p>",
        "id": 226468143,
        "sender_full_name": "Amanieu",
        "timestamp": 1613447355
    },
    {
        "content": "<p>hmm, does <code>required_const</code> only take <code>const</code> arguments? Or could you pass in a value calculated at runtime?</p>",
        "id": 226468217,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613447417
    },
    {
        "content": "<p>The arguments have to be compile-time constants. This is currently checked by the compiler.</p>",
        "id": 226468262,
        "sender_full_name": "Amanieu",
        "timestamp": 1613447486
    },
    {
        "content": "<p>Ok, neat. You could probably start by adapting whatever checks that currently then.</p>",
        "id": 226468286,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613447522
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 226468342,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613447561
    },
    {
        "content": "<p>oh booo zulip doesn't support <code>&lt;details&gt;</code></p>",
        "id": 226468348,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613447569
    },
    {
        "content": "<p>That check happens very late in MIR though. It is a hack based on the const promotion code.</p>",
        "id": 226468350,
        "sender_full_name": "Amanieu",
        "timestamp": 1613447570
    },
    {
        "content": "<p>Also the only potential issue is that <code>rustc_args_required_const</code> accepts constants derived from generic parameters, while const generics doesn't. I've been told that support for this is planned, but we would need to have it ready by the 2021 edition to avoid a breaking change.</p>",
        "id": 226468403,
        "sender_full_name": "Amanieu",
        "timestamp": 1613447641
    },
    {
        "content": "<p>another alternative is not to tie this to the edition</p>",
        "id": 226468465,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613447688
    },
    {
        "content": "<p>and deprecate the extra argument normally without removing it</p>",
        "id": 226468472,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613447698
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/268952-edition/topic/Replacing.20rustc_args_required_const.20with.20const.20generics/near/226468348\">said</a>:</p>\n<blockquote>\n<p>oh booo zulip doesn't support <code>&lt;details&gt;</code></p>\n</blockquote>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>You can use spoiler instead</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>See?</p>\n</div></div>",
        "id": 226468477,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613447705
    },
    {
        "content": "<p>you can't do a hard break anyway since you need to support 2018 edition</p>",
        "id": 226468483,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613447709
    },
    {
        "content": "<p>that would let you rewrite this into a const argument whenever const generics get support for generic parameters</p>",
        "id": 226468604,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613447824
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[rustc_allow_legacy_call_syntax]</span><span class=\"w\"> </span><span class=\"c1\">// Only for 2018</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">_mm_shuffle_ps</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">mask</span>: <span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">__m128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">__m128</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">__m128</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// Allowed in 2018, rejected in 2021</span>\n<span class=\"n\">_mm_shuffle_ps</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xb</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"c1\">// Allowed in both</span>\n<span class=\"n\">_mm_shuffle_ps</span>::<span class=\"o\">&lt;</span><span class=\"mh\">0xb</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 226468612,
        "sender_full_name": "Amanieu",
        "timestamp": 1613447833
    },
    {
        "content": "<p>But then we would have to support the legacy syntax forever.</p>",
        "id": 226468622,
        "sender_full_name": "Amanieu",
        "timestamp": 1613447844
    },
    {
        "content": "<p>(which I guess we do anyways...)</p>",
        "id": 226468631,
        "sender_full_name": "Amanieu",
        "timestamp": 1613447853
    },
    {
        "content": "<p>that's not an argument to clean up the language definition for everyone who isn't rustc though</p>",
        "id": 226468726,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613447945
    },
    {
        "content": "<p>well, IMO it's an argument to only deprecate and not make it a hard error</p>",
        "id": 226468743,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613447971
    },
    {
        "content": "<p>because making it a hard error doesn't gain you anything</p>",
        "id": 226468751,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613447980
    },
    {
        "content": "<p>well the actual parsing of the code gets tricky, so I think that's a good reason to make it officially not in the language anymore</p>",
        "id": 226468817,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613448008
    },
    {
        "content": "<p>you've got two function arguments in the definition and three in the call site</p>",
        "id": 226468825,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613448026
    },
    {
        "content": "<p>sure, rustc has to support this forever but alternate rust compilers don't (for example), and neither does the langref</p>",
        "id": 226468850,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613448067
    },
    {
        "content": "<p>I don't see how that can be true? You can't just remove parts of the language</p>",
        "id": 226468890,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613448120
    },
    {
        "content": "<p>I mean that future compilers can support only &gt;= 2021, say</p>",
        "id": 226468938,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613448142
    },
    {
        "content": "<p>rustc can't but that's a rustc problem not a rust problem</p>",
        "id": 226468945,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613448155
    },
    {
        "content": "<p>Oh. Well that seems to defeat the point of editions IMO.</p>",
        "id": 226468952,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613448168
    },
    {
        "content": "<p>Also we really want to switch to const generics as soon as possible:</p>\n<blockquote>\n<p>On x86-64, stdarch contributes now 56 MB out of 76 MB of libcore.rlib size.</p>\n</blockquote>",
        "id": 226469006,
        "sender_full_name": "Amanieu",
        "timestamp": 1613448234
    },
    {
        "content": "<p>Does it? rustc is still there if you want to compile old code. But third party compilers don't have to have the same backward compatibility guarantees as rustc, and similarly for the language reference and other documentation of that sort, which can pretend that the latest version is the only version</p>",
        "id": 226469062,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613448281
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/268952-edition/topic/Replacing.20rustc_args_required_const.20with.20const.20generics/near/226469006\">said</a>:</p>\n<blockquote>\n<p>Also we really want to switch to const generics as soon as possible:</p>\n<blockquote>\n<p>On x86-64, stdarch contributes now 56 MB out of 76 MB of libcore.rlib size.</p>\n</blockquote>\n</blockquote>\n<p>another alternative is to change this to use const generics unconditionally and do a crater run to see if it breaks any code in practice. If not, just document <code>rustc_const_required</code> as having the same semantics as const generics</p>",
        "id": 226469080,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613448311
    },
    {
        "content": "<p>I think we can probably try this out today by changing the definition of <code>rustc_args_required_const</code> to reject values derived from generics.</p>",
        "id": 226469270,
        "sender_full_name": "Amanieu",
        "timestamp": 1613448498
    },
    {
        "content": "<p>Anyways, the relevant question for 2021 edition planning is: should we forbid the legacy syntax in 2021 edition&gt;</p>",
        "id": 226469932,
        "sender_full_name": "Amanieu",
        "timestamp": 1613449233
    },
    {
        "content": "<p>Yes, forbid the legacy syntax in 2021+ edition</p>",
        "id": 226472498,
        "sender_full_name": "Lokathor",
        "timestamp": 1613451961
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>, <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span></p>",
        "id": 226492674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613469252
    },
    {
        "content": "<p>converting <code>rustc_args_required_const</code> to const generics should work. iirc we currently do this by explicitly promoting the last const argument which can capture variables from the outer scope or something? cc <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span></p>",
        "id": 226493047,
        "sender_full_name": "lcnr",
        "timestamp": 1613469466
    },
    {
        "content": "<p>so it might not be completely backwards compatible <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> even if the breakage is just theoretical</p>",
        "id": 226493133,
        "sender_full_name": "lcnr",
        "timestamp": 1613469502
    },
    {
        "content": "<p>well... at some point we'll want to allow generics from the surrounding scope</p>",
        "id": 226493192,
        "sender_full_name": "oli",
        "timestamp": 1613469534
    },
    {
        "content": "<p>yeah, but not variables</p>",
        "id": 226493231,
        "sender_full_name": "lcnr",
        "timestamp": 1613469551
    },
    {
        "content": "<p>oh, don't worry about that, you can't capture variables in promoteds <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 226493258,
        "sender_full_name": "oli",
        "timestamp": 1613469570
    },
    {
        "content": "<p>only if they are part of the expression</p>",
        "id": 226493264,
        "sender_full_name": "oli",
        "timestamp": 1613469576
    },
    {
        "content": "<p>hmm <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> then i might be wrongly remembering this</p>",
        "id": 226493303,
        "sender_full_name": "lcnr",
        "timestamp": 1613469602
    },
    {
        "content": "<p>you can promote <code>size_of</code> though, can you?</p>",
        "id": 226493370,
        "sender_full_name": "lcnr",
        "timestamp": 1613469618
    },
    {
        "content": "<p>so that would break with that change (unless we make an even bigger hack)</p>",
        "id": 226493389,
        "sender_full_name": "lcnr",
        "timestamp": 1613469631
    },
    {
        "content": "<p>ah, because it's an explicit promotion context</p>",
        "id": 226493414,
        "sender_full_name": "oli",
        "timestamp": 1613469646
    },
    {
        "content": "<p>yea</p>",
        "id": 226493416,
        "sender_full_name": "oli",
        "timestamp": 1613469647
    },
    {
        "content": "<p>damn, that thing biting us again</p>",
        "id": 226493435,
        "sender_full_name": "oli",
        "timestamp": 1613469655
    },
    {
        "content": "<p>imo it's probably fine to just break that</p>",
        "id": 226493469,
        "sender_full_name": "lcnr",
        "timestamp": 1613469674
    },
    {
        "content": "<p>agreed</p>",
        "id": 226493480,
        "sender_full_name": "oli",
        "timestamp": 1613469680
    },
    {
        "content": "<p>i don't expect anyone to rely on it ^^</p>",
        "id": 226493483,
        "sender_full_name": "lcnr",
        "timestamp": 1613469682
    },
    {
        "content": "<p>let's look at real world situtations first</p>",
        "id": 226493493,
        "sender_full_name": "oli",
        "timestamp": 1613469689
    },
    {
        "content": "<p>so, it should be feasible</p>",
        "id": 226493541,
        "sender_full_name": "lcnr",
        "timestamp": 1613469709
    },
    {
        "content": "<p>I don't think I will able to allocate the time and energy to work on an implementation here. Could review these changes though if someone else implements it</p>",
        "id": 226493778,
        "sender_full_name": "lcnr",
        "timestamp": 1613469802
    },
    {
        "content": "<p>modulo implementation complexity</p>",
        "id": 226493787,
        "sender_full_name": "oli",
        "timestamp": 1613469807
    },
    {
        "content": "<p>the hard part is rewriting calls</p>",
        "id": 226493807,
        "sender_full_name": "oli",
        "timestamp": 1613469819
    },
    {
        "content": "<p>so... even without those changes, there is some work to be done in parallel: create the new functions, deprecate the old ones in a way that we'll turn them off entirely in the new edition</p>",
        "id": 226493958,
        "sender_full_name": "oli",
        "timestamp": 1613469898
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/268952-edition/topic/Replacing.20rustc_args_required_const.20with.20const.20generics/near/226469062\">said</a>:</p>\n<blockquote>\n<p>Does it? rustc is still there if you want to compile old code. But third party compilers don't have to have the same backward compatibility guarantees as rustc, and similarly for the language reference and other documentation of that sort, which can pretend that the latest version is the only version</p>\n</blockquote>\n<p>As it is defined today, to be a compiler for Rust 1.50, you have to support all editions. They are as much part of the language as anything else.</p>",
        "id": 226495276,
        "sender_full_name": "isHavvy",
        "timestamp": 1613470700
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/268952-edition/topic/Replacing.20rustc_args_required_const.20with.20const.20generics/near/226493778\">said</a>:</p>\n<blockquote>\n<p>I don't think I will able to allocate the time and energy to work on an implementation here. Could review these changes though if someone else implements it</p>\n</blockquote>\n<p>I'm happy to work on it but I need some guidance. At what stage in the compilation should the rewriting happen? AST/HIR/MIR?</p>",
        "id": 226529778,
        "sender_full_name": "Amanieu",
        "timestamp": 1613490526
    },
    {
        "content": "<p>Currently <code>#[rustc_args_required_const]</code> doesn't actually rewrite anything, it's effectively just a lint that asserts the argument is a constant expression.</p>",
        "id": 226529894,
        "sender_full_name": "Amanieu",
        "timestamp": 1613490572
    },
    {
        "content": "<p>it does actually rewrite the MIR</p>",
        "id": 226530426,
        "sender_full_name": "oli",
        "timestamp": 1613490779
    },
    {
        "content": "<p>the argument becomes an anonymous constant that is evaluated at compile-time</p>",
        "id": 226530466,
        "sender_full_name": "oli",
        "timestamp": 1613490792
    },
    {
        "content": "<p>I feel that the rewrite needs to happen earlier, when function parameter checking happens. Since we are trying to pass 3 arguments to a function that only takes 2 + 1 const generic.</p>",
        "id": 226534456,
        "sender_full_name": "Amanieu",
        "timestamp": 1613491957
    },
    {
        "content": "<p>right, just stating what it is doing right now. Step 0 would probably be to change the attribute into a proc macro attribute that \"just\" rewrites the tokens of the function to be of the style that we want (with the attribute (or a modified version of it) left on the function, so that the call sites can query the attribute and rewrite the call).</p>",
        "id": 226534993,
        "sender_full_name": "oli",
        "timestamp": 1613492168
    },
    {
        "content": "<p>I was actually thinking of hacking rustfmt into doing the rewrite for me.</p>",
        "id": 226535197,
        "sender_full_name": "Amanieu",
        "timestamp": 1613492248
    },
    {
        "content": "<p>the actual change at the call sites probably needs to happen in AST -&gt; HIR lowering, so that typeck and similar work (or does argument count checking happen during name resolution?)</p>",
        "id": 226535201,
        "sender_full_name": "oli",
        "timestamp": 1613492248
    },
    {
        "content": "<p>The argument check happens in typeck, I just checked.</p>",
        "id": 226535260,
        "sender_full_name": "Amanieu",
        "timestamp": 1613492279
    },
    {
        "content": "<p>Can you elaborate on that? I don't know how rustfmt relates</p>",
        "id": 226535265,
        "sender_full_name": "oli",
        "timestamp": 1613492280
    },
    {
        "content": "<p>I would modify rustfmt to detect the attribute and rewrite the function into const-generic form. The modifications to rustfmt would only be in my local copy, they won't be committed.</p>",
        "id": 226535431,
        "sender_full_name": "Amanieu",
        "timestamp": 1613492328
    },
    {
        "content": "<p>oh right, we can just change the actual source of all the functions</p>",
        "id": 226535522,
        "sender_full_name": "oli",
        "timestamp": 1613492358
    },
    {
        "content": "<p>ok, I was thinking we'd just touch the attribute for now and leave the source code untouched</p>",
        "id": 226535565,
        "sender_full_name": "oli",
        "timestamp": 1613492374
    },
    {
        "content": "<p>but... that works, too, I guess. At the next stdsimd sync we'll also need to do the change to the call site rewrites in rustc at the same time then</p>",
        "id": 226535724,
        "sender_full_name": "oli",
        "timestamp": 1613492418
    },
    {
        "content": "<p>Actually I was thinking of introducing a separate attribute for this <code>#[rustc_magic_const_generic_call]</code>, so we can do the other changes incrementally.</p>",
        "id": 226535733,
        "sender_full_name": "Amanieu",
        "timestamp": 1613492423
    },
    {
        "content": "<p>yea, good point, that can be done independently</p>",
        "id": 226535831,
        "sender_full_name": "oli",
        "timestamp": 1613492462
    },
    {
        "content": "<p><code>#[rustc_args_required_const]</code> isn't changed, and is eventually removed later.</p>",
        "id": 226535832,
        "sender_full_name": "Amanieu",
        "timestamp": 1613492462
    },
    {
        "content": "<p>ok, that plan sounds good to me, so <code>rustc_magic_const_generic_call</code> is the first order of business?</p>",
        "id": 226535915,
        "sender_full_name": "oli",
        "timestamp": 1613492496
    },
    {
        "content": "<p>Yep. I'll have a look at the AST lowering code to see how it could fit in.</p>",
        "id": 226535978,
        "sender_full_name": "Amanieu",
        "timestamp": 1613492519
    },
    {
        "content": "<p>you'll need to have numbers like in <code>rustc_args_required_const</code> so you know which args to remap</p>",
        "id": 226536077,
        "sender_full_name": "oli",
        "timestamp": 1613492552
    },
    {
        "content": "<p>but since there are no methods with <code>rustc_args_required_const</code> afaik, you should be able to just touch the <code>ExprKind::Call</code> lowering and nothing else</p>",
        "id": 226536183,
        "sender_full_name": "oli",
        "timestamp": 1613492596
    },
    {
        "content": "<p>I thought the plan was to change <code>rustc_args_required_const</code> to create an inline const during some pre-MIR lowering step, e.g. to rewrite <code>foo(a,b,3+1)</code> to <code>foo(a,b,const{3+1})</code>? Then we could just kill the relevant part of promotion, since the argument would already be a const on the MIR level.<br>\nUsing const generics seems like an orthogonal second step to me.</p>",
        "id": 226549803,
        "sender_full_name": "RalfJ",
        "timestamp": 1613497904
    },
    {
        "content": "<p>@oli How can I access the attributes on a <code>DefId</code> from AST lowering? Normally I would use <code>tcx.get_attrs(def_id)</code> but this isn't available in AST lowering.</p>",
        "id": 227056542,
        "sender_full_name": "Amanieu",
        "timestamp": 1613786346
    },
    {
        "content": "<p>I would expect the node you're lowering to directly have the attributes somewhere on it, rather than needing to go through the tcx</p>",
        "id": 227057398,
        "sender_full_name": "simulacrum",
        "timestamp": 1613787205
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I'm lowering an <code>ExprKind::Call</code> and want to look at the attributes on the <code>fn</code> that is being called.</p>",
        "id": 227057921,
        "sender_full_name": "Amanieu",
        "timestamp": 1613787747
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(rustc_attrs)]</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[rustc_legacy_const_generics(0)]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">X</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">X</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 227057960,
        "sender_full_name": "Amanieu",
        "timestamp": 1613787835
    },
    {
        "content": "<p>hm, you'd need to access name resolution - I think? I'm not very familiar with this code, but I would assume that's necessary</p>",
        "id": 227058036,
        "sender_full_name": "simulacrum",
        "timestamp": 1613787900
    },
    {
        "content": "<p>aha</p>",
        "id": 227058115,
        "sender_full_name": "simulacrum",
        "timestamp": 1613787965
    },
    {
        "content": "<p>so it sounds like you can likely access that via self.resolver</p>",
        "id": 227058140,
        "sender_full_name": "simulacrum",
        "timestamp": 1613787987
    },
    {
        "content": "<p>and presumably get_partial_res on that with the nodeid from the Expr in the function call expr kind</p>",
        "id": 227058257,
        "sender_full_name": "simulacrum",
        "timestamp": 1613788092
    },
    {
        "content": "<p>ah no I think that's the wrong direction</p>",
        "id": 227058395,
        "sender_full_name": "simulacrum",
        "timestamp": 1613788224
    },
    {
        "content": "<p>if you lower the expr first, as is done today, that'll get you the hir path which is better</p>",
        "id": 227058406,
        "sender_full_name": "simulacrum",
        "timestamp": 1613788237
    },
    {
        "content": "<p>I can extract the <code>DefId</code> of the <code>fn</code> from the hir path already.</p>",
        "id": 227058437,
        "sender_full_name": "Amanieu",
        "timestamp": 1613788269
    },
    {
        "content": "<p>yeah that's what I just discovered</p>",
        "id": 227058451,
        "sender_full_name": "simulacrum",
        "timestamp": 1613788284
    },
    {
        "content": "<p>I'm just not sure how I can get to the attributes on that <code>DefId</code>.</p>",
        "id": 227058454,
        "sender_full_name": "Amanieu",
        "timestamp": 1613788293
    },
    {
        "content": "<p>hm, so in theory if you're in the same crate they're available via the hir</p>",
        "id": 227058581,
        "sender_full_name": "simulacrum",
        "timestamp": 1613788406
    },
    {
        "content": "<p>but the defid might be from a different crate, in which case you'd need to go through the crate store</p>",
        "id": 227058586,
        "sender_full_name": "simulacrum",
        "timestamp": 1613788421
    },
    {
        "content": "<p>Probably <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> can help better than I, sorry</p>",
        "id": 227058702,
        "sender_full_name": "simulacrum",
        "timestamp": 1613788536
    },
    {
        "content": "<p>In practice the <code>DefId</code> is always going to refer to a function in <code>core::arch</code>.</p>",
        "id": 227058752,
        "sender_full_name": "Amanieu",
        "timestamp": 1613788566
    },
    {
        "content": "<p>So I do need this to work across crates :/</p>",
        "id": 227058772,
        "sender_full_name": "Amanieu",
        "timestamp": 1613788576
    },
    {
        "content": "<p>right, yeah, I think it's definitely possible (we've already resolved it so the crate is loaded and such)</p>",
        "id": 227058826,
        "sender_full_name": "simulacrum",
        "timestamp": 1613788657
    },
    {
        "content": "<p>but I'm not immediately seeing a nice way of getting that out</p>",
        "id": 227058836,
        "sender_full_name": "simulacrum",
        "timestamp": 1613788673
    },
    {
        "content": "<p>I'm thinking I might need to add a method to <code>ResolverAstLowering</code>..</p>",
        "id": 227058905,
        "sender_full_name": "Amanieu",
        "timestamp": 1613788708
    },
    {
        "content": "<p>yeah that feels right to me, though a bit unfortunate from a separation perspective</p>",
        "id": 227059132,
        "sender_full_name": "simulacrum",
        "timestamp": 1613788992
    },
    {
        "content": "<p>and currently item attrs are only accessible from foreign crates via the query - it's technically likely relatively costly to decode them here too</p>",
        "id": 227059293,
        "sender_full_name": "simulacrum",
        "timestamp": 1613789168
    },
    {
        "content": "<p>Rather unfortunate considering I'd need to do this for every single <code>ExprKind::Call</code> lowering...</p>",
        "id": 227059541,
        "sender_full_name": "Amanieu",
        "timestamp": 1613789458
    },
    {
        "content": "<p>Right, yeah - I imagine it might be worthwhile to store a bitset or some more compact form specifically for this attribute</p>",
        "id": 227059571,
        "sender_full_name": "simulacrum",
        "timestamp": 1613789503
    },
    {
        "content": "<p>I would probably start with threading the cstore through and calling cdata.get_item_attrs(def_id.index, tcx.sess) on the right crate data; see examples in compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs which are for when you have a tcx already</p>",
        "id": 227059652,
        "sender_full_name": "simulacrum",
        "timestamp": 1613789572
    },
    {
        "content": "<p>and we can check benchmarks</p>",
        "id": 227059658,
        "sender_full_name": "simulacrum",
        "timestamp": 1613789582
    },
    {
        "content": "<p>yea, we can always make it efficient later, there are many ways to do that. The alternatives to modding lowering are unfortunately not great. We could fix up the call argument list checks and then do the transformation during MIR lowering, but all that feels like we'd be playing with fire as there'd be lots of code that could make the wrong assumptions</p>",
        "id": 227085694,
        "sender_full_name": "oli",
        "timestamp": 1613820829
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <a href=\"https://github.com/rust-lang/rust/issues/82447\">#82447</a> has an initial implementation, but it only works if the function definition is in a different crate than the function call. I'm having a bit of trouble figuring out how to recover attributes for an item in the crate that is currently being lowered. It's not a big deal since in practice we only care about cross-crate calls, so maybe we could just leave this unimplemented.</p>",
        "id": 227468350,
        "sender_full_name": "Amanieu",
        "timestamp": 1614100845
    },
    {
        "content": "<p>Wow, great to see progress on this. Only today I was testing inlining, and recorded following as top functions being MIR inlined in core:</p>\n<div class=\"codehilite\"><pre><span></span><code>   4515 &lt;x86::__m512i as x86::m512iExt&gt;::as_m512i\n   2978 &lt;x86::__m128 as x86::m128Ext&gt;::as_m128\n   2978 &lt;Self as x86::m128Ext&gt;::as_f32x4\n   2962 &lt;x86::__m128d as x86::m128dExt&gt;::as_m128d\n   2962 &lt;Self as x86::m128dExt&gt;::as_f64x2\n   2800 &lt;x86::__m512d as x86::m512dExt&gt;::as_m512d\n   ...\n</code></pre></div>",
        "id": 227469985,
        "sender_full_name": "tm",
        "timestamp": 1614101474
    },
    {
        "content": "<blockquote>\n<p>I'm having a bit of trouble figuring out how to recover attributes for an item in the crate that is currently being lowered. </p>\n</blockquote>\n<p>Does <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TyCtxt.html#method.get_attrs\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TyCtxt.html#method.get_attrs</a> work?</p>",
        "id": 227477637,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614104221
    },
    {
        "content": "<p>There is no tcx yet in AST lowering.</p>",
        "id": 227477705,
        "sender_full_name": "Amanieu",
        "timestamp": 1614104242
    },
    {
        "content": "<p>oh I see this happens very early</p>",
        "id": 227477793,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614104278
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/268952-edition-2021/topic/Replacing.20rustc_args_required_const.20with.20const.20generics/near/227477637\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>I'm having a bit of trouble figuring out how to recover attributes for an item in the crate that is currently being lowered. </p>\n</blockquote>\n<p>Does <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TyCtxt.html#method.get_attrs\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TyCtxt.html#method.get_attrs</a> work?</p>\n</blockquote>\n<p>Once <a href=\"https://github.com/rust-lang/rust/issues/79519\">#79519</a> lands, there will be a <code>HirId -&gt; &amp;[Attribute]</code>map constructed during lowering. By registering the attribute early enough, the attributes for the current item will be accessible.</p>",
        "id": 227478300,
        "sender_full_name": "cjgillot",
        "timestamp": 1614104488
    },
    {
        "content": "<p>Actually AST lowering isn't even early enough: late resolution happens before AST lowering and needs to be aware of the rewrite since the expression in the <code>AnonConst</code> needs to be resolved inside a <code>ConstantItemRibKind</code>.</p>",
        "id": 227478933,
        "sender_full_name": "Amanieu",
        "timestamp": 1614104709
    },
    {
        "content": "<p>This is needed to reject local variables passed in for the constant arg.</p>",
        "id": 227479198,
        "sender_full_name": "Amanieu",
        "timestamp": 1614104797
    }
]