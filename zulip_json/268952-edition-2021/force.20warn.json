[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  Regarding your gist on <code>--force-warn</code>, I don't think there <em>should</em> be any problems with multiple group membership. <code>warn(group)</code> behaves as-if it expands to a list of the members of that group. Source-order conflicts are already handled (in the same way was nested scopes are handled). I recently wrote some clarification of the behavior in <a href=\"https://github.com/rust-lang/reference/pull/998\">here</a>. I'm not aware of any diagnostics that deal with lint groups. I just did a quick test, and it seems to work as expected.</p>",
        "id": 236214729,
        "sender_full_name": "Eric Huss",
        "timestamp": 1619458936
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> good to know!</p>",
        "id": 236223249,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619462396
    },
    {
        "content": "<p>We discussed --force-warn in the Cargo meeting today. A thought occurred to me about the solution here:</p>",
        "id": 236394521,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1619551607
    },
    {
        "content": "<p>This is effectively adding a new lint level. Just as <code>forbid</code> is \"<code>error</code> and you can't turn it off\", this is <code>forewarn</code> (non-joking name needs bikeshedding): \"<code>warn</code> and you can't turn it off\".</p>",
        "id": 236394619,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1619551663
    },
    {
        "content": "<p>I think if we added that as a fifth lint level, we could then add a compiler option to enable that lint level.</p>",
        "id": 236394706,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1619551692
    },
    {
        "content": "<p>And it'd generalize to two orthogonal controls: lint level (allow/warn/error) and minimum required lint level (allow (default)/warn (forewarn)/error (forbid)).</p>",
        "id": 236394782,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1619551735
    },
    {
        "content": "<p>currently all the lint levels are totally ordered by \"severity\", where would forewarn go?</p>",
        "id": 236394801,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619551745
    },
    {
        "content": "<p>Following up on this channel</p>",
        "id": 239246417,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621342005
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> I realize I said chat on Zulip :)</p>",
        "id": 239599247,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621520341
    },
    {
        "content": "<p>I'm here, anyhow</p>",
        "id": 239599268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621520348
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I guess the only thing I'd want to know is what the right way to introduce a new command line option is. Does this need to be behind a -Z option?</p>",
        "id": 240622521,
        "sender_full_name": "rylev",
        "timestamp": 1622216610
    },
    {
        "content": "<p>The initial PR is up: <a href=\"https://github.com/rust-lang/rust/pull/85788\">https://github.com/rust-lang/rust/pull/85788</a></p>",
        "id": 240628181,
        "sender_full_name": "rylev",
        "timestamp": 1622219236
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> since this is on a path to stabilization, I'd probably make it an unstable option that requires <code>-Zunstable-options</code></p>",
        "id": 240951886,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622558446
    },
    {
        "content": "<p>I'll take a look at the PR</p>",
        "id": 240951895,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622558451
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> FYI: I took a look and the lint groups are expanded before the code  I've changed is run. So it only sees the expanded list. I tried to quickly find where the expansion is happening, but I've not found it yet.</p>",
        "id": 240970564,
        "sender_full_name": "rylev",
        "timestamp": 1622566078
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> ok, I'll try to take a look now</p>",
        "id": 241080254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622584156
    },
    {
        "content": "<p>ack, ran out of time, will tackle</p>",
        "id": 241081308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622584852
    },
    {
        "content": "<p>OK, <span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> <a href=\"https://github.com/rust-lang/rust/pull/85788#pullrequestreview-673693402\">thoughts here</a></p>",
        "id": 241093269,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622594383
    },
    {
        "content": "<p>I wanted to mention, I'm wondering if <code>force-warn</code> or something like it could be used as an alternative implementation for the future-incompatible reports.  I was wondering how it might interact with <code>--cap-lints</code>?</p>",
        "id": 241093604,
        "sender_full_name": "Eric Huss",
        "timestamp": 1622594655
    },
    {
        "content": "<p>Also, regarding the note on the PR about \"if a lint is a higher level (denied), should it be a warning, or left as an error\", I hadn't thought about that much. For the <code>fix</code> use case, I don't think it matters either way.  And my desire to use it for future-incompat doesn't matter either.   If you do decide to leave it as an error, my only concern is that the name of the flag might be a little confusing.  But I can't think of a use case where it would matter.</p>",
        "id": 241094513,
        "sender_full_name": "Eric Huss",
        "timestamp": 1622595440
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> are you thinking that the flag would be used to dump JSON that would be gathered up by cargo?</p>",
        "id": 241148373,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622640546
    },
    {
        "content": "<p>it feels like the right behavior, given the name, is to make it a <em>warning</em>, regardless</p>",
        "id": 241148415,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622640559
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I updated the PR and have warnings working based on lint group as well. This should be done though we need to come to a decision about the issue <span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> mentions. I agree that given the name it probably makes sense to downgrade denied lints to warnings, but I'm also not sure how useful that is.</p>",
        "id": 241164797,
        "sender_full_name": "rylev",
        "timestamp": 1622647316
    },
    {
        "content": "<p>It does depend on what we expect to use it for, I suppose</p>",
        "id": 241164875,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622647336
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>, since we are discussing the \"future compatibility warnings\" discussion</p>",
        "id": 241164942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622647362
    },
    {
        "content": "<p>I think that in that case, warning is exactly what we would want</p>",
        "id": 241164963,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622647368
    },
    {
        "content": "<p>I actually just wrote a test case for this, and I was wrong. It seems that deny-by-default lints are properly downgraded.</p>",
        "id": 241165231,
        "sender_full_name": "rylev",
        "timestamp": 1622647483
    },
    {
        "content": "<p>that is what I would expect</p>",
        "id": 241165253,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622647491
    },
    {
        "content": "<p>based on the code</p>",
        "id": 241165263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622647493
    },
    {
        "content": "<p>Let me push the test</p>",
        "id": 241165287,
        "sender_full_name": "rylev",
        "timestamp": 1622647502
    },
    {
        "content": "<p>in practice, of course, we would be using this in conjunction with cap-lints</p>",
        "id": 241165296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622647507
    },
    {
        "content": "<p>Test pushed. Ok - I think this is ready to be merged from my side. <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 241165475,
        "sender_full_name": "rylev",
        "timestamp": 1622647580
    },
    {
        "content": "<p>I just pushed a request for changes</p>",
        "id": 241165602,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622647635
    },
    {
        "content": "<p>one nit, plus we should add this to the unstable book</p>",
        "id": 241165614,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622647642
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ah also, I wasn't sure how to test that the command line option is unstable (other than manually testing) - it seems that the UI tests allow you to specify unstable options without explicitly adding the unstable options flag.</p>",
        "id": 241165738,
        "sender_full_name": "rylev",
        "timestamp": 1622647694
    },
    {
        "content": "<p>probably the UI framework adds that option for you</p>",
        "id": 241165771,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622647712
    },
    {
        "content": "<p>I'm not sure how best to do that either</p>",
        "id": 241165785,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622647718
    },
    {
        "content": "<p>we could make a run-make test</p>",
        "id": 241165807,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622647727
    },
    {
        "content": "<p>maybe one already exists</p>",
        "id": 241165811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622647730
    },
    {
        "content": "<p>Yep one exists</p>",
        "id": 241165871,
        "sender_full_name": "rylev",
        "timestamp": 1622647765
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/test/run-make/unstable-flag-required/README.md\">https://github.com/rust-lang/rust/blob/master/src/test/run-make/unstable-flag-required/README.md</a></p>",
        "id": 241165956,
        "sender_full_name": "rylev",
        "timestamp": 1622647798
    },
    {
        "content": "<p>Then add that too :)</p>",
        "id": 241166999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622648190
    },
    {
        "content": "<p>at that point I'm ready to r+</p>",
        "id": 241167005,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622648193
    },
    {
        "content": "<p>I feel happy with the semantics s is but I'm also open to others</p>",
        "id": 241167029,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622648205
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/268952-edition-2021/topic/force.20warn/near/241148373\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120518\">Eric Huss</span> are you thinking that the flag would be used to dump JSON that would be gathered up by cargo?</p>\n</blockquote>\n<p>Yea. Instead of having the extra machinery and JSON structures, cargo would instead pass something like <code>--force-warn future-breakage</code> where <code>future-breakage</code> is a new lint group that contains things we want to warn about. Cargo would still collect those into a report.  I'm just thinking it would simplify things (less code, simpler JSON interface).</p>\n<p>Or, alternatively, those lints are <em>always</em> included as <code>force-warn</code>.  My thinking here is that why would we want to hide these warnings?  This may make the integration for non-cargo build systems easier if they don't want to deal with the hassle of passing <code>--force-warn</code> and collecting results into a report.</p>",
        "id": 241168076,
        "sender_full_name": "Eric Huss",
        "timestamp": 1622648674
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> have you seen felix's RFC?</p>",
        "id": 241170144,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622649568
    },
    {
        "content": "<p>I believe we want to hide those warnings and present them to the user in an actionable format</p>",
        "id": 241170161,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622649575
    },
    {
        "content": "<p>Yea, I've read it a number of times.  Cargo would still collect them into an actionable format.  My consideration is for non-cargo systems.  They will unlikely be updated to have specific support for this, which means these warnings may never be seen in those situations.</p>",
        "id": 241170467,
        "sender_full_name": "Eric Huss",
        "timestamp": 1622649698
    },
    {
        "content": "<p>My expectation is that these warnings should be extremely rare, but when they do exist, I think it is important that they become apparent.  That's why I'm considering for non-cargo systems to make it easier to surface those warnings in some way.</p>",
        "id": 241170715,
        "sender_full_name": "Eric Huss",
        "timestamp": 1622649802
    },
    {
        "content": "<p>Instead of expecting them to also re-implement a reporting system.</p>",
        "id": 241170736,
        "sender_full_name": "Eric Huss",
        "timestamp": 1622649813
    },
    {
        "content": "<p>(Or expecting them to never see the warnings.)</p>",
        "id": 241170869,
        "sender_full_name": "Eric Huss",
        "timestamp": 1622649862
    },
    {
        "content": "<p>I have to go for the day. I've pushed the remaining changes (with the exception of adding a run-make test which I don't have time to do today). Feel free to wait on review until tomorrow or to r+ and merge today and I can add a run-make test as a follow-up.</p>",
        "id": 241171577,
        "sender_full_name": "rylev",
        "timestamp": 1622650192
    },
    {
        "content": "<p>I’m trying to play catch up here: Is the intention to have a <em>parallel</em> system to the report-future-incompat diagnostic system?</p>",
        "id": 241171892,
        "sender_full_name": "pnkfelix",
        "timestamp": 1622650352
    },
    {
        "content": "<p>or to merge the two in some way?</p>",
        "id": 241171905,
        "sender_full_name": "pnkfelix",
        "timestamp": 1622650359
    },
    {
        "content": "<p>Hm, I tried the PR with <code>--cap-lints</code>, and it seems like cap-lints takes precedence.  I assume that is due to <a href=\"https://github.com/rust-lang/rust/blob/2f601ef527a37de9fb181c5fb1a6c06d06218ed3/compiler/rustc_errors/src/lib.rs#L557-L559\">this</a> which cancels the diagnostic. I was playing with an experiment where I had an override for that.</p>",
        "id": 241172233,
        "sender_full_name": "Eric Huss",
        "timestamp": 1622650492
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>  To merge them essentially.</p>",
        "id": 241172282,
        "sender_full_name": "Eric Huss",
        "timestamp": 1622650510
    },
    {
        "content": "<p>The intention is to simplify things and remove some of the special-case code. The user experience with Cargo would be the same, the questions I had was around what the experience for non-cargo users should be.</p>",
        "id": 241172442,
        "sender_full_name": "Eric Huss",
        "timestamp": 1622650581
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> would you mind posting link to the “force-warn” gist of niko’s that you mentioned at the outset?</p>",
        "id": 241172983,
        "sender_full_name": "pnkfelix",
        "timestamp": 1622650860
    },
    {
        "content": "<p>Okay, I believe I’m in favor of merging (or generalizing the existing tech) rather than making two distinct-yet-similar systems</p>",
        "id": 241173050,
        "sender_full_name": "pnkfelix",
        "timestamp": 1622650891
    },
    {
        "content": "<p>(I'm still working on establishing context, but also am being forced to reboot laptop. Back soon!)</p>",
        "id": 241173094,
        "sender_full_name": "pnkfelix",
        "timestamp": 1622650908
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> there is a pending MCP describing the system</p>",
        "id": 241173160,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622650924
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120518\">Eric Huss</span> <a href=\"#narrow/stream/268952-edition-2021/topic/force.20warn/near/241172233\">said</a>:</p>\n<blockquote>\n<p>Hm, I tried the PR with <code>--cap-lints</code>, and it seems like cap-lints takes precedence.  I assume that is due to <a href=\"https://github.com/rust-lang/rust/blob/2f601ef527a37de9fb181c5fb1a6c06d06218ed3/compiler/rustc_errors/src/lib.rs#L557-L559\">this</a> which cancels the diagnostic. I was playing with an experiment where I had an override for that.</p>\n</blockquote>\n<p>good catch, we should add a test for that and fix it ... I think</p>",
        "id": 241173195,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622650942
    },
    {
        "content": "<p>I mean in practice cap-lints is usually used for warn</p>",
        "id": 241173213,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622650949
    },
    {
        "content": "<p>but I think the idea that <code>--force-warn</code> can be used as a very simple way to get warnings about you deps (when not using cargo) makes sense to me</p>",
        "id": 241173267,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622650983
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/268952-edition-2021/topic/force.20warn/near/241172983\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120518\">Eric Huss</span> would you mind posting link to the “force-warn” gist of niko’s that you mentioned at the outset?</p>\n</blockquote>\n<p><del>https://gist.github.com/nikomatsakis/9e3e1b9117839aa80a803b1faf320ef9</del> Yea, the mcp link is better.</p>",
        "id": 241173326,
        "sender_full_name": "Eric Huss",
        "timestamp": 1622651013
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/compiler-team/issues/434\">https://github.com/rust-lang/compiler-team/issues/434</a></p>",
        "id": 241173335,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622651018
    },
    {
        "content": "<p>MCP <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 241173347,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622651024
    },
    {
        "content": "<p>The override I added was in <code>struct_lint_level_impl</code>, something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gu\">@@ -263,6 +271,9 @@ fn struct_lint_level_impl(</span>\n             (Level::Deny | Level::Forbid, Some(span)) =&gt; sess.struct_span_err(span, \"\"),\n             (Level::Deny | Level::Forbid, None) =&gt; sess.struct_err(\"\"),\n         };\n<span class=\"gi\">+        if has_future_breakage &amp;&amp; err.cancelled() &amp;&amp; sess.opts.debugging_opts.emit_future_incompat_report {</span>\n<span class=\"gi\">+            err.level = rustc_errors::Level::Warning;</span>\n<span class=\"gi\">+        }</span>\n</code></pre></div>\n<p>very hacky, and I'm not sure how that could be adapted to force-warn.</p>",
        "id": 241173827,
        "sender_full_name": "Eric Huss",
        "timestamp": 1622651216
    },
    {
        "content": "<p>Ah an MCP is a good place for this</p>",
        "id": 241176105,
        "sender_full_name": "pnkfelix",
        "timestamp": 1622652257
    },
    {
        "content": "<p>/me is catching up on the future-compat RFC.</p>",
        "id": 241361391,
        "sender_full_name": "rylev",
        "timestamp": 1622708875
    },
    {
        "content": "<p>So it sounds like we want to use this mechanism for the mechanics proposed in <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2834-cargo-report-future-incompat.md\">@**pnkfelix**'s RFC</a>. I can work on adding a test and trying to fix the cap-lints issue</p>",
        "id": 241361469,
        "sender_full_name": "rylev",
        "timestamp": 1622708944
    },
    {
        "content": "<p>Great</p>",
        "id": 241389303,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622726490
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> I R+'d the PR in any case because that seemed like follow-up work</p>",
        "id": 241478847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622769737
    },
    {
        "content": "<p>It's on my list today to look into the cap-lints issue.</p>",
        "id": 241505221,
        "sender_full_name": "rylev",
        "timestamp": 1622795413
    },
    {
        "content": "<p>Should we just merge the PR as is and follow up with another PR fixing the cap-lints issue? I've had some PRs stall and I'm keen on just getting them in when they work even if there are some unresolved issues.</p>",
        "id": 241505488,
        "sender_full_name": "rylev",
        "timestamp": 1622795608
    },
    {
        "content": "<p>Taking a look at the cap-lints issue (which also is an issue when using <code>--allow warnings</code>). When we build a session, <a href=\"https://github.com/rust-lang/rust/blob/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler/rustc_session/src/session.rs#L1265-L1273\">we turn off warnings globally</a> by looking to see if <code>cap-lints</code> is set to <code>allow</code> OR if <code>--allow</code> is set to <code>warnings</code>. <br>\nIt looks like to fix this we'll need to be smarter about when to turn off warnings. Unfortunately, we want to ignore the <code>can_emit_warnings</code> flag for specific lints but the <code>DiagnosticBuilder</code> has no knowledge of specific lints, and we probably want to keep it that way.</p>",
        "id": 241514426,
        "sender_full_name": "rylev",
        "timestamp": 1622801135
    },
    {
        "content": "<p>Coming back to this, the closest I was able to come was something like this: <a href=\"https://github.com/rylev/rust/compare/force-warns...rylev:force-warnings-always\">https://github.com/rylev/rust/compare/force-warns...rylev:force-warnings-always</a> but this probably breaks a bunch of other stuff. _Usually_ when <code>can_emit_warnings</code> is false, the diagnostic is canceled so this works in the new cases together with <code>--force-warns</code>.</p>",
        "id": 241529282,
        "sender_full_name": "rylev",
        "timestamp": 1622810474
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> I was wondering if you consider the \"uncancel\" approach mentioned above is too hacky?  I don't particularly like it, but it does avoid the things that could break (like the deduplication logic).  Unfortunately <code>struct_warn</code> doesn't have enough context to know if it should be forced.</p>",
        "id": 241530942,
        "sender_full_name": "Eric Huss",
        "timestamp": 1622811462
    },
    {
        "content": "<p>This is similar to what I do here: <a href=\"https://github.com/rylev/rust/compare/force-warns...rylev:force-warnings-always\">https://github.com/rylev/rust/compare/force-warns...rylev:force-warnings-always</a> I just uncancel in a place where it's a bit clearer that we're in a force-warn situation.</p>",
        "id": 241531811,
        "sender_full_name": "rylev",
        "timestamp": 1622811950
    },
    {
        "content": "<p>As for whether this is too hacky, I'm not sure. I'd rather not have to rearchitect how --cap-lints and --allow warnings works</p>",
        "id": 241531914,
        "sender_full_name": "rylev",
        "timestamp": 1622811995
    },
    {
        "content": "<p>oh, I see, I'm blind! <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 241532015,
        "sender_full_name": "Eric Huss",
        "timestamp": 1622812066
    },
    {
        "content": "<p>I was confused by moving the has_future_breakage stuff.</p>",
        "id": 241532090,
        "sender_full_name": "Eric Huss",
        "timestamp": 1622812088
    },
    {
        "content": "<p>Yea, I think that should work.</p>",
        "id": 241532110,
        "sender_full_name": "Eric Huss",
        "timestamp": 1622812097
    },
    {
        "content": "<p>I can open up a PR for this to see what happens when we run bors on it. (I ran a big chunk of the test suite and it passed locally), but I'd like to merge the --force-warns PR first</p>",
        "id": 241532211,
        "sender_full_name": "rylev",
        "timestamp": 1622812166
    },
    {
        "content": "<p>thanks for taking a look at fixing it!</p>",
        "id": 241532216,
        "sender_full_name": "Eric Huss",
        "timestamp": 1622812171
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> The <code>--force-warns</code> flag doesn't seem to work with groups, do you happen to know why that is? For example, <code>--force-warns rust-2018-compatibility</code> returns <code>error[E0602]: unknown lint: `rust-2018-compatibility` </code>.</p>",
        "id": 241805161,
        "sender_full_name": "Eric Huss",
        "timestamp": 1623084181
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> hmmm… that should work. We have several test cases involving lint groups. I’ll take a look at this tomorrow.</p>",
        "id": 241823689,
        "sender_full_name": "rylev",
        "timestamp": 1623092233
    },
    {
        "content": "<p>I figured it out, it wasn't supporting dashes in the lint name.  Posted <a href=\"https://github.com/rust-lang/rust/pull/86117\">https://github.com/rust-lang/rust/pull/86117</a> with a fix.</p>",
        "id": 241837902,
        "sender_full_name": "Eric Huss",
        "timestamp": 1623098575
    },
    {
        "content": "<p>Submitted a fix for the --cap-lints issue <a href=\"https://github.com/rust-lang/rust/pull/86572\">here</a>. Need to work with <span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> on their refactoring of how we handle --force-warns though before we start the stabilization work</p>",
        "id": 243659563,
        "sender_full_name": "rylev",
        "timestamp": 1624458402
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> - <span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> posted a <a href=\"https://github.com/rust-lang/rust/pull/86009\">PR</a> which makes force-warn just another lint level. Essentially force-warn is to warn as forbid is to deny. Do we still like the name <code>force-warn</code>? I believe the name was picked quickly and was not thoroughly bike shed.</p>",
        "id": 244256921,
        "sender_full_name": "rylev",
        "timestamp": 1624960570
    },
    {
        "content": "<p>We can probably land the PR first, and bike shed the name as part of stabilization</p>",
        "id": 244257156,
        "sender_full_name": "rylev",
        "timestamp": 1624960714
    },
    {
        "content": "<p>sounds good</p>",
        "id": 244261547,
        "sender_full_name": "Mara",
        "timestamp": 1624963286
    },
    {
        "content": "<p>I'm going to work on stabilization of the force warn feature. One question:<br>\nIs everyone happy with the name force-warn? It behaves just like a warn, except that it always warns. <code>force-warn</code> sounds appropriate to me.</p>",
        "id": 245171444,
        "sender_full_name": "rylev",
        "timestamp": 1625661103
    },
    {
        "content": "<p>sounds okay to me. <code>always-warn</code> could also work.</p>",
        "id": 245172958,
        "sender_full_name": "Mara",
        "timestamp": 1625661881
    },
    {
        "content": "<p>Either of those names sound fine to me.  </p>\n<p>One thing I would note is possible confusion about the trailing <code>s</code>.  I noticed you wrote it without, but the flag is actually <code>--force-warns</code>.  Was there a discussion to change that from the original proposal?  I admit, I wrote it wrong a few times when I first started testing it, but I am biased since I had read the proposal that used <code>--force-warn</code>, so it may not be confusing to any users.</p>",
        "id": 245190877,
        "sender_full_name": "Eric Huss",
        "timestamp": 1625668877
    },
    {
        "content": "<p>The original proposal was <code>--force-warns</code> which is why I implemented it like that. Though there's been a shift in implementation that has also caused me to think differently about the option. </p>\n<p>Now, <code>--force-warns</code> is simply another type of level that a lint can be emitted at. For instance, just like you can turn an allow-by-default lint into a warning by using <code>-W</code>, you can take that same lint and ensure it's warned with <code>--force-warns</code></p>",
        "id": 245191666,
        "sender_full_name": "rylev",
        "timestamp": 1625669190
    },
    {
        "content": "<p>I think it's clear we at least need to remove the \"s\" at the end.</p>",
        "id": 245191706,
        "sender_full_name": "rylev",
        "timestamp": 1625669204
    },
    {
        "content": "<p>But by analogy of the other flags (i.e., -A, -F, -W, etc.), I could also see changing it to just <code>-FW</code> or something of the like</p>",
        "id": 245191881,
        "sender_full_name": "rylev",
        "timestamp": 1625669266
    },
    {
        "content": "<p>-FW seems ambiguous with -F -W, I don't think this option needs a shorthand</p>",
        "id": 245203743,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1625673831
    },
    {
        "content": "<p>-A -F -W: Always Force Warning <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 245205021,
        "sender_full_name": "Mara",
        "timestamp": 1625674393
    },
    {
        "content": "<p>-L: Loud warning</p>",
        "id": 245205063,
        "sender_full_name": "Mara",
        "timestamp": 1625674420
    },
    {
        "content": "<p>+1 to removing the trailing <code>s</code></p>",
        "id": 245220074,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625681394
    },
    {
        "content": "<p>Stabilization report has been filed: <a href=\"https://github.com/rust-lang/rust/issues/86516#issuecomment-886624828\">https://github.com/rust-lang/rust/issues/86516#issuecomment-886624828</a> <br>\nStabilization WIP PR has been opened: <a href=\"https://github.com/rust-lang/rust/pull/87472\">https://github.com/rust-lang/rust/pull/87472</a></p>",
        "id": 247190899,
        "sender_full_name": "rylev",
        "timestamp": 1627299463
    }
]