[
    {
        "content": "<p>Status updates! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>\n<ul>\n<li>std/core panic: Unchanged since last update: Implemented and available already. Automated migration doesn't work yet because of the rustfix multi-span issue.</li>\n<li>Range types: No progress. Not going to happen for edition 2021. :(</li>\n<li><code>k#</code> keywords: This got extended/generalized to reserving <code>anything#</code> and <code>anything\"..\"</code>, FCP started and is now blocked on a concern on about tokenization vs parsing errors. This went from 'lex all of them' to 'lex none of them' to 'lex all of them' again and then to 'lex some of them?'. This still needs a resolution, but looks like we're getting closer to that.</li>\n<li>Prelude changes: Crater report is available, but we still need a migration lint plan.</li>\n<li>Or patterns: Discussion on the name for a 'non-or pattern' settled on <code>:pat_param</code>. (See <a href=\"https://github.com/rust-lang/rust/pull/83386\">https://github.com/rust-lang/rust/pull/83386</a>)</li>\n<li>Disjoint captures: <span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> What's the status?</li>\n<li>IntoIter for <code>[T; N]</code> - This turns out to be feasible as an edition change after all! Implementation PR <a href=\"https://github.com/rust-lang/rust/pull/84147\">here</a>, with FCP already in progress.</li>\n<li>rustc_args_required_const: Reached consensus: See <a href=\"https://github.com/rust-lang/rust/issues/83167#issuecomment-819627409\">this comment</a>.</li>\n<li>Lints: <span class=\"user-mention\" data-user-id=\"224872\">@rylev</span>?</li>\n<li>rustfix multi-span issue: Nobody is working on this yet. See <a href=\"#narrow/stream/268952-edition-2021/topic/rustfix.20multi-span\">this topic</a>.</li>\n</ul>",
        "id": 235172149,
        "sender_full_name": "Mara",
        "timestamp": 1618835683
    },
    {
        "content": "<p>Lints are making steady progress. We're ready to merge the lints to errors PR once I figure out <a href=\"https://github.com/rust-lang/rust/pull/83213#issuecomment-821034253\">why some error code tests are failing</a>.</p>",
        "id": 235172385,
        "sender_full_name": "rylev",
        "timestamp": 1618835808
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"226095\">@Dirkjan Ochtman</span> any updates on the migration lint for the prelude?</p>",
        "id": 235201406,
        "sender_full_name": "Mara",
        "timestamp": 1618846461
    },
    {
        "content": "<p>Actually, <span class=\"user-mention\" data-user-id=\"226095\">@Dirkjan Ochtman</span>, we discussed this in the meeting and I will take a work item to write up the plan</p>",
        "id": 235201843,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618846648
    },
    {
        "content": "<p>i think I know how it should work</p>",
        "id": 235201848,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618846651
    },
    {
        "content": "<p>I'll open an issue with a write-up</p>",
        "id": 235201867,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618846657
    },
    {
        "content": "<p>I also came up with an idea for it</p>",
        "id": 235202022,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1618846704
    },
    {
        "content": "<p>Which I can write up in a few hours</p>",
        "id": 235202045,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1618846713
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"226095\">@Dirkjan Ochtman</span> ok -- my rough idea was as follows:</p>\n<ul>\n<li>tag each new trait with a <code>#[rustc_2021_prelude]</code> attribute</li>\n<li>collect all such traits and make them available \"somehow\" -- collect the methods defined on such traits</li>\n<li>when we finish method resolution, if the method name is in that set, and the trait is not, check whether the trait is implemented for the self type</li>\n<li>if so, issue a warning suggesting a rewrite into <code>Foo::bar</code> form; we can use the adjustments to track it</li>\n</ul>",
        "id": 235205451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618848051
    },
    {
        "content": "<p>Is that similar to what you had in mind/</p>",
        "id": 235205482,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618848060
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> Regarding syntax reservation, Niko has a concrete proposal that seems like it'll resolve the issue, and that proposal needs to be turned into RFC text. cc <span class=\"user-mention\" data-user-id=\"256342\">@bstrie</span></p>",
        "id": 235222261,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1618855103
    },
    {
        "content": "<p>We discussed this some in the meeting today</p>",
        "id": 235222406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618855174
    },
    {
        "content": "<p>I was pitching <span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> on returning the RFC to \"lexer error\" and then having her write an RFC just about <code>f\"...\"</code></p>",
        "id": 235222519,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618855212
    },
    {
        "content": "<p>(and other potentially interesting prefixes)</p>",
        "id": 235222550,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618855219
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> seemed amenable to that</p>",
        "id": 235222585,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618855230
    },
    {
        "content": "<p>(well, was I pitching it? I forget where the idea came from...but anyway that seemed like where we <em>landed</em>)</p>",
        "id": 235222662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618855254
    },
    {
        "content": "<p>otherwise we end up defining the exact lexing rules for <code>f</code> right now on this RFC. so we figured to go back once more to just make in a lexer error error. there's enough time left before the stabilization of the new edition to get an rfc through about <code>f\"..\"</code> syntax (or at least about how to tokenize it, but maybe the whole feature) after which it'll lex again.</p>",
        "id": 235223027,
        "sender_full_name": "Mara",
        "timestamp": 1618855402
    },
    {
        "content": "<p>I am a fan</p>",
        "id": 235223204,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618855473
    },
    {
        "content": "<p>I'd love to just have an RFC around <code>f\"foo\"</code>, which I think would be a nice feature</p>",
        "id": 235223224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618855484
    },
    {
        "content": "<p>the 'move the escaping rules out of the lexer and into the parser' idea (to avoid the lexer needing to understand the meaning of e.g. a <code>b</code> prefix) also seemed a bit trickier than it seemed at first: proc_macros can now assume the string literal tokens they get are already validated, and taking that guarantee might not be a great idea.</p>",
        "id": 235223753,
        "sender_full_name": "Mara",
        "timestamp": 1618855689
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> how so? <code>::proc_macro::Literal</code> is an opaque object, and the only thing that can be done with it is obtaining a stringified version / representation of it, which includes the delimiters and everything.</p>\n<p>Granted, there are crates out there, such as the elephant in the room, <code>::syn</code>, which feature their own fully-fledged re-parsing logic (<em>c.f.</em>, <a href=\"https://internals.rust-lang.org/t/getting-value-out-of-proc-macro-literal/14140/5?u=dhm\">this thread on IRLO</a>). From that implementation we can see already there that <code>syn</code> is not equipped to handle arbitrarily-prefixed literals. That is not an issue, however, since <code>syn</code> can release updates that adapt to the language, and the proc-macros that would then be using an outdated <code>syn</code> would just be unable to handle new user code that would try to use the new literals: it wouldn't break already existing code.</p>",
        "id": 235229301,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1618858048
    },
    {
        "content": "<p>yeah i mean that syn and possibly other crates parse the escape sequences and assume it was already validated. syn just panics if it sees an escape sequence that isn't valid.<br>\nand existing proc macros might assume the strings are valid for other reasons. maybe they're used literally embedded in some sql or shell script or whatever.<br>\nso i suppose we wouldn't want to start lexing <code>\"\\xFF\\abcd\"</code> or <code>b\"Ã¥\"</code> as valid tokens</p>",
        "id": 235230482,
        "sender_full_name": "Mara",
        "timestamp": 1618858546
    },
    {
        "content": "<p>Yeah, I was imagining that \"weird\" literals such as <code>\"\\xFF\\xabcd\"</code> could only be envisioned to be lexed like that assuming they carried some non-empty non-already-assigned prefix. In other words, <code>r</code>aw-like lexing would be the default one for all string literals, but for the non-prefixed one and the <code>b</code>-prefixed one.</p>",
        "id": 235237189,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1618861379
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/268952-edition-2021/topic/The.20Weekly.20Edition.20of.20the.20Edition.20Updates.2C.20Edition.20.23.E2.80.8B5/near/235205451\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"226095\">Dirkjan Ochtman</span> ok -- my rough idea was as follows:</p>\n<ul>\n<li>tag each new trait with a <code>#[rustc_2021_prelude]</code> attribute</li>\n<li>collect all such traits and make them available \"somehow\" -- collect the methods defined on such traits</li>\n<li>when we finish method resolution, if the method name is in that set, and the trait is not, check whether the trait is implemented for the self type</li>\n<li>if so, issue a warning suggesting a rewrite into <code>Foo::bar</code> form; we can use the adjustments to track it</li>\n</ul>\n</blockquote>\n<p>My idea was much more simplistic, basically hard-coding trait method names (so, \"try_from()\" and \"try_into()\" and possibly \"from_iter()\") and then, for any method call that resolves to a trait method of that name, if the trait is not from core or std, suggest a rewrite to expicitly disambiguating form (<code>&lt;foo as MyTryFrom&gt;::try_from()</code>).</p>",
        "id": 235246192,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1618865331
    },
    {
        "content": "<p>I think these come down to the same thing-ish, except you want fancy attributes to keep track of the traits/methods involved?</p>",
        "id": 235246431,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1618865436
    },
    {
        "content": "<blockquote>\n<p>In other words, <code>r</code>aw-like lexing would be the default one for all string literals, but for the non-prefixed one and the <code>b</code>-prefixed one.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span> Then how about <code>hello\"\\\"</code>? <code>r\"\\\"</code> is valid.</p>",
        "id": 235310152,
        "sender_full_name": "Mara",
        "timestamp": 1618908958
    },
    {
        "content": "<p>True, the quotes situations is more annoying than I had initially anticipated. Definitely makes sense then to conservatively start with them not even lexing, and then follow-up with targeted additions <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 235325694,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1618917427
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"226095\">@Dirkjan Ochtman</span> I agree they come down to the same thing; I think your approach is fine</p>",
        "id": 235357058,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618930596
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256342\">@bstrie</span> Thank you for the updated RFC!</p>",
        "id": 235368872,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1618934374
    },
    {
        "content": "<p>I was about to resolve the concern. One question on the text as written:</p>",
        "id": 235368956,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1618934404
    },
    {
        "content": "<p>Do we want to allow <code>prefix# ident</code> (space after but not before), or do we want to treat <code>prefix#</code> as reserved? I can imagine syntax extensions that might benefit from being able to say \"<code>xyz#</code> followed by zero or more characters\".</p>",
        "id": 235369473,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1618934554
    },
    {
        "content": "<p>I'm fine either way, just wanted to see if there was value in including that in the reservation.</p>",
        "id": 235369618,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1618934604
    },
    {
        "content": "<p>I'm not sure what you mean here.  Lexically I'd definitely not expect <code>prefix# ident</code> to be one token...</p>",
        "id": 235378982,
        "sender_full_name": "scottmcm",
        "timestamp": 1618938182
    },
    {
        "content": "<p>No, I wouldn't either.</p>",
        "id": 235384645,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1618940463
    },
    {
        "content": "<p>I'm suggesting that <code>prefix#</code> should be reserved.</p>",
        "id": 235384664,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1618940471
    },
    {
        "content": "<p>The rustfix can insert spaces on both sides of the <code>#</code>, which will make it un-reserved.</p>",
        "id": 235387543,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1618941683
    },
    {
        "content": "<p>I think that needing the <code>#</code> in a modifier seems odd to me.</p>\n<p>If it's before a keyword it can be contextual, for example, and not need the <code>#</code>.  Or it seems like it could often be <code>#[foo] bar</code> instead of <code>foo# bar</code></p>",
        "id": 235387880,
        "sender_full_name": "scottmcm",
        "timestamp": 1618941791
    },
    {
        "content": "<p>I guess practically I'd say leave it out, to avoid more churn in the RFC, since we'd always be able to just make it <code>Z#foo</code> for now, and if there's a need to do better we could make it <code>foo#</code> in a future edition.</p>",
        "id": 235388115,
        "sender_full_name": "scottmcm",
        "timestamp": 1618941886
    },
    {
        "content": "<p>The only case I was thinking of would be something like <code>newthing#</code> followed by a zero-or-more character literal, rather than one-or-more.</p>",
        "id": 235388121,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1618941888
    },
    {
        "content": "<p>I wasn't imagining that we'd define <code>foo#</code> alone (we could use <code>k#foo</code> or similar for that); I was imagining a case where there was value in defining <code>foo#</code> followed by zero-or-more of something.</p>",
        "id": 235388224,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1618941929
    },
    {
        "content": "<p>Oh, as in <code>foo#''</code> or <code>foo#'hello'</code>?</p>",
        "id": 235388232,
        "sender_full_name": "scottmcm",
        "timestamp": 1618941933
    },
    {
        "content": "<p>No, more like <code>foo#&lt;digit*&gt;</code> or <code>foo#[a-z]*</code>.</p>",
        "id": 235388354,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1618941974
    },
    {
        "content": "<p>I don't have a strong opinion about this.</p>",
        "id": 235388513,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618942041
    },
    {
        "content": "<p>it's a bit hard for me to imagine those use cases that <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> is describing</p>",
        "id": 235388544,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618942054
    },
    {
        "content": "<p>(I'd like <code>foo#''</code>, if it's not already reserved, but I'd lean to doing it as \"<code>''</code> and <code>'hello'</code> tokenize as character literals, but are rejected at parse time\", so that the existing lexical rules in the reservation RFC would pick it up.)</p>",
        "id": 235388559,
        "sender_full_name": "scottmcm",
        "timestamp": 1618942059
    },
    {
        "content": "<p>I don't have a specific use case in mind, and I don't want churn in the RFC either, so I'd be happy to just drop it.</p>",
        "id": 235388782,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1618942144
    },
    {
        "content": "<p>In any case, I'm going to drop my concern shortly.</p>",
        "id": 235388804,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1618942150
    }
]