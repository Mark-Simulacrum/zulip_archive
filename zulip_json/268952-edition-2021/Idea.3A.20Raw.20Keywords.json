[
    {
        "content": "<p>Raw idents (r#blah) solve the problem of calling code that needs an ident that is also a keyword, and this is great for moving forward in editions without breaking things, but to help limit the amount of churn, why don't we allow raw keywords e.g. <code>k#async</code> to be equivalent to the keyword, but also usable in editions where we can't make it a keyword?</p>",
        "id": 224837211,
        "sender_full_name": "isHavvy",
        "timestamp": 1612251512
    },
    {
        "content": "<p>what does it mean to have a keyword that hasn't been defined? It sounds like you want <code>k#async</code> to be recognized as a keyword on say rust 2015 even though it doesn't know what this keyword means, so wouldn't that always be a compile error?</p>",
        "id": 224837551,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612251841
    },
    {
        "content": "<p>Using <code>k#async</code> in the Rust 2015 edition would have the same meaning as using it in the 2018 edition.</p>",
        "id": 224837704,
        "sender_full_name": "isHavvy",
        "timestamp": 1612251963
    },
    {
        "content": "<p>If keyword meaning changes, we could also include the edition in there <code>k2024#for</code> but that situation hasn't happened yet and probably won't happen.</p>",
        "id": 224838405,
        "sender_full_name": "isHavvy",
        "timestamp": 1612252675
    },
    {
        "content": "<p>Isn't there more to interpreting the syntax than just seeing the keyword? For example the <code>use</code> keyword didn't change in 2018 but the meaning of import statements did</p>",
        "id": 224838500,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612252782
    },
    {
        "content": "<p>it's not clear to me that you can just opt in to the keyword without bringing the whole async/await semantics along with it (and those may well change between editions, or even to some extent between releases)</p>",
        "id": 224838653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612252881
    },
    {
        "content": "<p>The async/await semantics already exist; they're just unavailable syntactically in the 2015 edition. I guess with <code>use</code>, that would be a reason to do <code>k#2018use</code> if you wanted to use the 2018 semantics?</p>",
        "id": 224838908,
        "sender_full_name": "isHavvy",
        "timestamp": 1612253058
    },
    {
        "content": "<p>This is a really interesting proposal.</p>",
        "id": 224842649,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612255906
    },
    {
        "content": "<p>The language team talked, before, about the idea of having this kind of \"raw keyword\" mechanism.</p>",
        "id": 224842666,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612255918
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rfcs/pull/2919\">https://github.com/rust-lang/rfcs/pull/2919</a></p>",
        "id": 224842991,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612256156
    },
    {
        "content": "<p>Part of the notion was that it would work to introduce a keyword before we knew what that keyword should be, but that aspect of it ended up getting rejected.</p>",
        "id": 224843048,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612256178
    },
    {
        "content": "<p>But the idea that we could allow older editions to access newer syntax in some cases, at least when the only blocker is a keyword from a newer edition, seems quite nice.</p>",
        "id": 224843084,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612256209
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296643\">isHavvy</span> <a href=\"#narrow/stream/268952-edition/topic/Idea.3A.20Raw.20Keywords/near/224837704\">said</a>:</p>\n<blockquote>\n<p>Using <code>k#async</code> in the Rust 2015 edition would have the same meaning as using it in the 2018 edition.</p>\n</blockquote>\n<p>That's a breaking change in 2015 because of macro_rules, sadly.</p>\n<p>I'd definitely like to get a syntax space reserved for it in 2021, though.  (Personally I'd just make <code>{ident}#{ident}</code> and <code>{ident}@{string_lit}</code> parse as one thing always, so that we have lots of space here -- the rustfix for which would just be to put spaces around <code>#</code> in macros.)</p>",
        "id": 224912071,
        "sender_full_name": "scottmcm",
        "timestamp": 1612289563
    },
    {
        "content": "<p>I offered <code>br#keyword</code> for this in the raw identifiers RFC, since <code>br#</code> is currently forced to be the start of a raw byte string</p>",
        "id": 224915877,
        "sender_full_name": "cuviper",
        "timestamp": 1612291005
    },
    {
        "content": "<p>(same reason <code>r#</code> was chosen for raw identifiers)</p>",
        "id": 224915888,
        "sender_full_name": "cuviper",
        "timestamp": 1612291015
    },
    {
        "content": "<p>The RFC I linked above suggested <code>r#$&lt;keyword&gt;</code>, which seems vaguely reasonable to me, and which as far as I can tell would not be a breaking change.</p>",
        "id": 224935870,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612299673
    },
    {
        "content": "<p>Or am I misunderstanding why raw keywords of any kind would break macro_rules?</p>",
        "id": 224936047,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612299739
    },
    {
        "content": "<p>Yeah, that one might work.  It's just even less obvious.</p>",
        "id": 224948888,
        "sender_full_name": "scottmcm",
        "timestamp": 1612306241
    },
    {
        "content": "<p>I guess I'm less worried about allowing new keywords on editions before the introduction of a less-obtuse option.</p>",
        "id": 224948918,
        "sender_full_name": "scottmcm",
        "timestamp": 1612306268
    },
    {
        "content": "<p>Old code wanting to keep using their old idents back into the past feels more persuasive than new keywords need to be supported on old editions -- there's no existing code.</p>",
        "id": 224948984,
        "sender_full_name": "scottmcm",
        "timestamp": 1612306322
    },
    {
        "content": "<p>yes, it just needs to be something that does not tokenize yet. <code>r#</code> is greedy -- it used to error if that didn't start a raw string, which left room to let it take ident-start. You do get an error on <code>r#$anything</code> now, so that would be fine.</p>",
        "id": 224949056,
        "sender_full_name": "cuviper",
        "timestamp": 1612306357
    },
    {
        "content": "<p>So if this is only for stuff to be introduced in the future, I'd be happy to just make it <code>k#foo</code> and old have it work in 2021+</p>",
        "id": 224949072,
        "sender_full_name": "scottmcm",
        "timestamp": 1612306379
    },
    {
        "content": "<p>There's also no cross-edition call patterns with keywords, like there are for idents.</p>",
        "id": 224949118,
        "sender_full_name": "scottmcm",
        "timestamp": 1612306408
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/268952-edition/topic/Idea.3A.20Raw.20Keywords/near/224935870\">said</a>:</p>\n<blockquote>\n<p>The RFC I linked above suggested <code>r#$&lt;keyword&gt;</code>, which seems vaguely reasonable to me, and which as far as I can tell would not be a breaking change.</p>\n</blockquote>\n<p>I would avoid <code>$</code></p>",
        "id": 225201771,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612463393
    },
    {
        "content": "<p>I am somewhat inclined to agree with <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span>'s instinct of \"reserve space for this in 2021 and just use it going forward\"</p>",
        "id": 225201854,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612463417
    },
    {
        "content": "<p>so some stuff never gets backported to 2018, so what</p>",
        "id": 225201882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612463425
    },
    {
        "content": "<p>I'm very much in favor of having uglier ways to expose \"future edition\" behavior in older editions</p>",
        "id": 225201990,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612463471
    },
    {
        "content": "<p>The only downside I see to this particular proposal is that it isn't fully general, e.g., it wouldn't help with the pub macro rules change</p>",
        "id": 225202045,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612463499
    },
    {
        "content": "<p>but that's not really an <em>objection</em> -- I guess I'm just comparing in my mind to something like <code>from __future__ import X</code></p>",
        "id": 225202069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612463510
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/268952-edition/topic/Idea.3A.20Raw.20Keywords/near/225202045\">said</a>:</p>\n<blockquote>\n<p>The only downside I see to this particular proposal is that it isn't fully general, e.g., it wouldn't help with the pub macro rules change</p>\n</blockquote>\n<p>If we generalized to \"give me the token from this numbered edition\", it could. <code>macro_rules</code> wouldn't default to <code>pub(self)</code>, but <code>r#(some_syntax_here)2021macro_rules</code> could.</p>",
        "id": 225219605,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612471396
    },
    {
        "content": "<p>It doesn't have to use <code>$</code>; we could use any sigil that isn't <code>#</code>, <code>\"</code>, or a letter.</p>",
        "id": 225219789,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612471496
    },
    {
        "content": "<p>As a potentially intuitive syntax, what if we did something like <code>r#2021{ xyz r#}</code> to mean \"switch to 2021 edition for this span\"?</p>",
        "id": 225220382,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612471796
    },
    {
        "content": "<p>That's starting to sound like a <code>rust2021! { .. }</code> to switch a whole block/item to another edition.</p>",
        "id": 225220569,
        "sender_full_name": "Mara",
        "timestamp": 1612471881
    },
    {
        "content": "<p>That was what I had in mind, yeah.</p>",
        "id": 225220924,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612472052
    },
    {
        "content": "<p>Except that the \"raw\" syntax like that could theoretically work in contexts that macros don't.</p>",
        "id": 225220991,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612472087
    },
    {
        "content": "<p>(That's unlikely to matter except in cases where we change the interpretation of macro syntax.)</p>",
        "id": 225221047,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612472113
    },
    {
        "content": "<p>But yeah, given that it's <em>already</em> possible to embed a span from any edition in any edition (by using a macro from another crate), adding a lightweight way to do that without a separate crate seems helpful.</p>",
        "id": 225221199,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612472193
    },
    {
        "content": "<p>This would also mean we wouldn't need things like <code>:pat2021</code> the next time we make such a change.</p>",
        "id": 225221250,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612472219
    },
    {
        "content": "<p>And conversely, it'd allow incremental migration of syntax in a crate.</p>",
        "id": 225221327,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1612472260
    },
    {
        "content": "<p>Does <code>r##ident</code> parse right now? That could also be a possibility for keywords.</p>",
        "id": 225231332,
        "sender_full_name": "cuviper",
        "timestamp": 1612476723
    },
    {
        "content": "<p>I'm not convinced that letting people use future-edition in previous-edition is all that important.  What scenario do we see where there's a new edition <em>released</em> but it's better to hack in some <code>rust2051!</code> macros than to just migrate to the new edition, which we basically expect all actively-developed code to do anyway?</p>\n<p><em>Keywords</em>, on the other hand, I can see a reason: being able to stabilize something <em>without waiting for a new edition to release</em>.  Let's say we decide in 2022 that <code>yeet e;</code> is ready to go.  It would be nice to be able to say \"you can use it today as <code>k#yeet e;</code>, and in a future edition <code>yeet</code> will be a keyword so after you migrate you can remove the <code>k#</code>\".</p>",
        "id": 225237878,
        "sender_full_name": "scottmcm",
        "timestamp": 1612480066
    },
    {
        "content": "<p>I can see this enabling incremental migration of a large codebase</p>",
        "id": 225240673,
        "sender_full_name": "Nadrieril",
        "timestamp": 1612481752
    },
    {
        "content": "<p>Oh that was said already</p>",
        "id": 225240813,
        "sender_full_name": "Nadrieril",
        "timestamp": 1612481828
    },
    {
        "content": "<p>I guess I'm expecting that with <code>cargo fix</code> it's easy enough to migrate crate-by-crate.  (Maybe not to instantly fully optimally migrate, but enough that it'd still be nicer to just migrate the whole crate, check that in, then improve the code than to put <code>rust2036!</code> macros around parts.)</p>",
        "id": 225242140,
        "sender_full_name": "scottmcm",
        "timestamp": 1612482639
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/268952-edition/topic/Idea.3A.20Raw.20Keywords/near/225221199\">said</a>:</p>\n<blockquote>\n<p>But yeah, given that it's <em>already</em> possible to embed a span from any edition in any edition (by using a macro from another crate), adding a lightweight way to do that without a separate crate seems helpful.</p>\n</blockquote>\n<p>Just because I was super curious about that, here is a PoC of this: behold, the <code>edition_2018!</code> macro:</p>\n<p><a href=\"https://asciinema.org/a/L8f1xXSwRjOApLwAB5bMQvGhz\">https://asciinema.org/a/L8f1xXSwRjOApLwAB5bMQvGhz</a></p>",
        "id": 225288105,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1612525174
    },
    {
        "content": "<p>Demo: the following code compiles on edition 2015:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"k\">crate</span><span class=\"w\"> </span><span class=\"n\">__future__</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">__future__</span>::<span class=\"n\">edition_2018</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"n\">edition_2018</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"p\">{}.</span><span class=\"k\">await</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p><code>__future__</code>'s code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">//! __future/respan/src/lib.rs</span>\n<span class=\"k\">use</span><span class=\"w\"> </span>::<span class=\"n\">proc_macro</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[proc_macro]</span><span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">respan</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">input</span>: <span class=\"nc\">TokenStream</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span>-&gt; <span class=\"nc\">TokenStream</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">respan_with</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">span</span>: <span class=\"nc\">Span</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">      </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">FnMut</span><span class=\"p\">(</span><span class=\"n\">TokenTree</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">TokenTree</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">tt</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">tt</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">TokenTree</span>::<span class=\"n\">Group</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Group</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">g</span><span class=\"p\">.</span><span class=\"n\">delimiter</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">g</span><span class=\"p\">.</span><span class=\"n\">stream</span><span class=\"p\">().</span><span class=\"n\">into_iter</span><span class=\"p\">().</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">respan_with</span><span class=\"p\">(</span><span class=\"n\">span</span><span class=\"p\">)).</span><span class=\"n\">collect</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">).</span><span class=\"n\">into</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">tt</span><span class=\"p\">.</span><span class=\"n\">set_span</span><span class=\"p\">(</span><span class=\"n\">tt</span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"p\">().</span><span class=\"n\">resolved_at</span><span class=\"p\">(</span><span class=\"n\">span</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">tt</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">tokens</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">span</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tokens</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">span</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">tokens</span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">respan_with</span><span class=\"p\">(</span><span class=\"n\">span</span><span class=\"p\">)).</span><span class=\"n\">collect</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">//! __future__/src/lib.rs</span>\n\n<span class=\"cp\">#[macro_export]</span><span class=\"w\"></span>\n<span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">edition_2018</span><span class=\"w\"> </span><span class=\"p\">{(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">$($code</span>:<span class=\"nc\">tt</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">$crate</span>::<span class=\"n\">respan</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"c1\">// spanned here</span>\n<span class=\"w\">        </span><span class=\"cp\">$($code</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">)}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[doc(hidden)]</span><span class=\"w\"> </span><span class=\"sd\">/** Not part of the public API */</span><span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span>::<span class=\"n\">respan</span>::<span class=\"n\">respan</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 225288552,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1612525552
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/268952-edition/topic/Idea.3A.20Raw.20Keywords/near/225237878\">said</a>:</p>\n<blockquote>\n<p><em>Keywords</em>, on the other hand, I can see a reason: being able to stabilize something <em>without waiting for a new edition to release</em>.  Let's say we decide in 2022 that <code>yeet e;</code> is ready to go.  It would be nice to be able to say \"you can use it today as <code>k#yeet e;</code>, and in a future edition <code>yeet</code> will be a keyword so after you migrate you can remove the <code>k#</code>\".</p>\n</blockquote>\n<p>This is the use case I have in mind</p>",
        "id": 225530861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612783841
    },
    {
        "content": "<p>I want to be able to move forward with stabilization but have the \"good ergonomics\" wait until next edition</p>",
        "id": 225530922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612783884
    },
    {
        "content": "<p>I also want to reduce the cost of missing the edition</p>",
        "id": 225530928,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612783890
    },
    {
        "content": "<p>i.e., \"this didn't quite make it into 2021, but we can expose it in 2022 this way....\"</p>",
        "id": 225530947,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612783903
    },
    {
        "content": "<p>plausibly we could do that with more frequent editions, but I'm interested in alternatives</p>",
        "id": 225530959,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612783915
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>edition = &quot;1.52.0&quot;\n</code></pre></div>",
        "id": 225545613,
        "sender_full_name": "Mara",
        "timestamp": 1612791914
    },
    {
        "content": "<p>For various reasons I don't think that's the right way to go, but it's one logical conclusion</p>",
        "id": 225552959,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612795287
    },
    {
        "content": "<p>yeah :)</p>",
        "id": 225580839,
        "sender_full_name": "Mara",
        "timestamp": 1612806180
    }
]