[
    {
        "content": "<p>Would it be possible to upgrade the <code>unreachable_patterns</code> lint to be deny by default in the next edition? It's nearly always incorrect to have an unreachable_pattern. Usually when it happens it's on accident because you match on a constant that you forgot to import, so <code>MY_CONST</code> ends up being a catch-all case.</p>",
        "id": 221340201,
        "sender_full_name": "Lokathor",
        "timestamp": 1609485885
    },
    {
        "content": "<p>I think it needs to be a more nuanced lint, to get upgraded.  For example, this is <code>unreachable_patterns</code> now, but didn't used to be:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"mi\">5_</span><span class=\"k\">u8</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">0</span><span class=\"o\">..=</span><span class=\"mi\">255</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I'd love to get a new lint that we could make deny-by-default.  We do often trigger three different lints, so maybe there's a combination of those we could look for specifically -- I don't think that any of <code>unreachable_patterns</code>+<code>unused_variables</code>+<code>non_snake_case</code> individually deserve to be deny-by-default, but when a match triggers all three, it probably ought to be deny.</p>",
        "id": 221345323,
        "sender_full_name": "scottmcm",
        "timestamp": 1609495430
    },
    {
        "content": "<p>FWIW, I'll throw in catch-all patterns in the middle of a match sometimes if I want to do a quick test that a certain input value doesn't trigger early match values, including printing the value, so while I like it as a warning, I'd rather it not be a hard error.</p>",
        "id": 221347197,
        "sender_full_name": "isHavvy",
        "timestamp": 1609499023
    },
    {
        "content": "<p>Or if I have a bunch of unimplemented patterns and I can just return a dummy value. Or if I have rust-analyzer give me all the patterns, and then I condense them; I'll clean up the unused patterns after I've got all the patterns I do want.</p>",
        "id": 221347272,
        "sender_full_name": "isHavvy",
        "timestamp": 1609499133
    },
    {
        "content": "<p>Are there guidelines somewhere on what should or shouldn't be deny-by-default? My mental model is that errors should indicate something that's wrong enough that it better be fixed before code can run. That's not the case for unreachable patterns.</p>",
        "id": 221365236,
        "sender_full_name": "Nadrieril",
        "timestamp": 1609529566
    },
    {
        "content": "<p>Also unreachable patterns feels similar to dead_code and various \"unused\" lints. When I refactor those keep popping up; I would be severely annoyed if I couldn't run tests mid-refactor because some code is unreachable. I experienced this because the rustc codebase sets deny-warnings=true by default; I found it painful.</p>",
        "id": 221365456,
        "sender_full_name": "Nadrieril",
        "timestamp": 1609529895
    },
    {
        "content": "<p>(cc <a href=\"https://github.com/rust-lang/rust/pull/77492\">https://github.com/rust-lang/rust/pull/77492</a>)</p>",
        "id": 221365535,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609530046
    },
    {
        "content": "<p>Alright, well, i refine the proposal to what Scott said, because i don't mean to catch mid-refactor unreachables, but I would like to stop \"you named a const but it wasn't imported (or it was a typo) and now it's a catch-all case on accident.\"</p>",
        "id": 221365613,
        "sender_full_name": "Lokathor",
        "timestamp": 1609530177
    },
    {
        "content": "<p>Oh I see, that's a problematic case indeed. I like Scott's proposal</p>",
        "id": 221365744,
        "sender_full_name": "Nadrieril",
        "timestamp": 1609530374
    },
    {
        "content": "<p>I think that the issue with <code>const</code>ants can be handled in its vast majority by denying all-caps catch-up bindings that are not followed by an explicit <code>@ _</code> (and this is not <code>nonstandard_style</code> (nor <code>non_snake_case</code>):<code>nonstandard_style</code> is an opinionated lint that just happens to be one of the closest things we have to this suggestion). While oddly specific, in practice, such a lint would be surprisingly effective, which is kind of what we look for when dealing with lints. While not necessarily a deny-by-default lint, it would already allow using great diagnostics, and those who want it could opt into denying such specific lint (this whole thing makes me think such a lint should start in clippy <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span>)</p>",
        "id": 221366481,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1609531514
    },
    {
        "content": "<p>I agree that looking for suspiciously named variables is better than using <code>unreachable_patterns</code> to catch this, because <code>unreachable_patterns</code> only fires on the <em>second</em> unknown-constant-reinterpreted-as-variable, which means that if there is only one then you just have silent breakage</p>",
        "id": 221368842,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609535129
    },
    {
        "content": "<p>for example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">mod</span> <span class=\"nn\">foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">BAR</span>: <span class=\"kt\">u8</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">assert!</span><span class=\"p\">(</span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">BAR</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p><code>unreachable_patterns</code> doesn't notice this, although the mentioned style lints fire here since <code>BAR</code> is not a good variable name</p>",
        "id": 221369061,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609535443
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245339\">Nadrieril</span> <a href=\"#narrow/stream/268952-edition/topic/upgrade.20unreachable_patterns.20to.20deny.20by.20default/near/221365236\">said</a>:</p>\n<blockquote>\n<p>Are there guidelines somewhere on what should or shouldn't be deny-by-default? My mental model is that errors should indicate something that's wrong enough that it better be fixed before code can run. That's not the case for unreachable patterns.</p>\n</blockquote>\n<p>I don't think there's an official one; my personal one is (<a href=\"https://github.com/rust-lang/rfcs/pull/2438#issuecomment-403255258\">https://github.com/rust-lang/rfcs/pull/2438#issuecomment-403255258</a>):</p>\n<blockquote>\n<p>Is this something that's going to make what I'm trying right now not work?</p>\n</blockquote>\n<p>Which is essentially the same as the \"is it worth running my unit tests\" you mentioned.</p>\n<p>For example, there's no way that this is actually what I wanted, even temporarily, so deny is appropriate:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">std</span>::<span class=\"n\">net</span>::<span class=\"n\">IpAddr</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"kt\">str</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">V4</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"s\">\"version 4\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">V6</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"s\">\"version 6\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 221372207,
        "sender_full_name": "scottmcm",
        "timestamp": 1609540239
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/268952-edition/topic/upgrade.20unreachable_patterns.20to.20deny.20by.20default/near/221365613\">said</a>:</p>\n<blockquote>\n<p>Alright, well, i refine the proposal to what Scott said, because i don't mean to catch mid-refactor unreachables, but I would like to stop \"you named a const but it wasn't imported (or it was a typo) and now it's a catch-all case on accident.\"</p>\n</blockquote>\n<p>I think logistically the answer here is to make a new focused lint, and then we can start turning it on in <em>all</em> editions (assuming it's correctly focused enough that the code it breaks in crater is really incorrect).</p>\n<p>Want to sign up to make that lint, <span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span>?</p>",
        "id": 221372395,
        "sender_full_name": "scottmcm",
        "timestamp": 1609540537
    },
    {
        "content": "<p>I would prefer deny-by-default because, when testing, half the time RA doesn't show warnings, and the other half the time there's dozens of warnings for hours at a time, so \"cargo test\" or \"cargo run\" should just fail else the warning will get lost in the shuffle</p>",
        "id": 221372444,
        "sender_full_name": "Lokathor",
        "timestamp": 1609540582
    },
    {
        "content": "<p>also, sorry scott, but i don't really contribute to the <del>standard library</del> compiler, it's too much of a pain</p>",
        "id": 221372449,
        "sender_full_name": "Lokathor",
        "timestamp": 1609540603
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/268952-edition/topic/upgrade.20unreachable_patterns.20to.20deny.20by.20default/near/221372449\">said</a>:</p>\n<blockquote>\n<p>also, sorry scott, but i don't really contribute to the standard library, it's too much of a pain</p>\n</blockquote>\n<p>happy to help with this btw</p>",
        "id": 221372454,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609540625
    },
    {
        "content": "<p>Yes, turn it on as deny-by-default in all editions.</p>\n<p>(We don't <em>need</em> an edition to make something deny-by-default, thanks to cap-lints and such.)</p>",
        "id": 221372456,
        "sender_full_name": "scottmcm",
        "timestamp": 1609540627
    },
    {
        "content": "<p>have you tried it since the bootstrapping changes?</p>",
        "id": 221372461,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609540632
    },
    {
        "content": "<p>No, I just work on projects that actually work properly with <code>cargo</code>, and the rest of the time i practice the art of shouting loudly.</p>",
        "id": 221372656,
        "sender_full_name": "Lokathor",
        "timestamp": 1609540933
    },
    {
        "content": "<p>It's not <em>that</em> bad^^ actually understanding rustc internals is a lot more complicated than managing x.py...</p>",
        "id": 221399277,
        "sender_full_name": "RalfJ",
        "timestamp": 1609592658
    }
]