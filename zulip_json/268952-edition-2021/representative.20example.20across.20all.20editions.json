[
    {
        "content": "<p>Is there a (short) piece of code that behaves differently in all three editions? For example, I was using this for 2015 / 2018 testing:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It'd help me avoid some refactoring if there were a similar piece of code I could use for 2015/18/21.</p>",
        "id": 239184989,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1621301557
    },
    {
        "content": "<p>Untested:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">42</span><span class=\"p\">].</span><span class=\"n\">into_iter</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>EDIT: Oh, no, compilation doesn't get far enough to hit the 2021 difference.  Will need something more nuanced for 2015-2018.</p>",
        "id": 239185723,
        "sender_full_name": "scottmcm",
        "timestamp": 1621302162
    },
    {
        "content": "<p>This code errors with different errors on 2015 and 2018, and should compile with 2021</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">i64</span>::<span class=\"n\">try_from</span><span class=\"p\">(</span><span class=\"mi\">0_</span><span class=\"k\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>And here's a polyglot that prints the edition number</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">mod</span> <span class=\"nn\">m</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"mi\">5</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">#[allow(array_into_iter)]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"{:p}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">].</span><span class=\"n\">into_iter</span><span class=\"p\">().</span><span class=\"n\">next</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\">  </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"{:p}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"2021\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"2018\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"2015\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">m</span>::<span class=\"n\">func</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 239204667,
        "sender_full_name": "Kestrer",
        "timestamp": 1621319648
    },
    {
        "content": "<p>Haha, nice usage of 2015 namespacing rules (even in 2021 I still find it so confusing <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span>)</p>",
        "id": 239230227,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1621333554
    },
    {
        "content": "<p>Here is my attempt:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">MyFuture</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">r</span>#<span class=\"k\">await</span>: <span class=\"err\">…</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">MyFuture</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"nb\">_</span><span class=\"w\"> </span><span class=\"n\">MyFuture</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">r</span>#<span class=\"k\">async</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">my_fut</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">MyFuture</span>::<span class=\"n\">default</span><span class=\"p\">()].</span><span class=\"n\">into_iter</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_it</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">futures</span>::<span class=\"n\">future</span>::<span class=\"n\">ready</span><span class=\"p\">(());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_it</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">any</span>::<span class=\"n\">type_name_of_val</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">my_fut</span><span class=\"p\">.</span><span class=\"k\">await</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">futures</span>::<span class=\"n\">executor</span>::<span class=\"n\">block_on</span><span class=\"p\">(</span><span class=\"n\">_it</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<ul>\n<li><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=a2d59b876fb5fa775465a16848cf0165\">Playground</a></li>\n</ul>",
        "id": 239230375,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1621333626
    },
    {
        "content": "<p>(Maybe not the shortest example, but that's because I've wanted to feature type-distinct dispatch for that; I'd say that the</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">r</span>#<span class=\"k\">async</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cm\">/* … 1 … */</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cm\">/* … 2 … */</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>is the most key thing to get code that compiles for both 2015 and 2018 and where 2018 and onwards, <code>…1…</code> is a lazy block; and there with a bit of <code>[…].into_iter()</code> we get a difference between 2018 and 2021 that does not involve prelude changes <em>per se</em>)</p>",
        "id": 239230918,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1621333966
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> <code>panic!(async {})</code></p>",
        "id": 239259631,
        "sender_full_name": "Mara",
        "timestamp": 1621346900
    },
    {
        "content": "<p>As a <em>thing</em>, this seems to relatively consistently time out my tests in GitHub Actions.</p>",
        "id": 239468618,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1621446873
    },
    {
        "content": "<p>Gonna increase my timeouts from 5 seconds to 10</p>",
        "id": 239468645,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1621446883
    },
    {
        "content": "<p>And the playground gets ever slower.</p>",
        "id": 239468667,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1621446894
    },
    {
        "content": "<p>ah, I've been noticing the playground timing out a lot recently, is it backed by github actions these days? there's no way rustc is taking five seconds to compile such a trivial program, surely</p>",
        "id": 239470557,
        "sender_full_name": "bstrie",
        "timestamp": 1621447601
    },
    {
        "content": "<p>Continued in <a href=\"#narrow/stream/242791-t-infra/topic/playground.20oddly.20slow\">https://rust-lang.zulipchat.com/#narrow/stream/242791-t-infra/topic/playground.20oddly.20slow</a></p>",
        "id": 239473968,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1621448931
    },
    {
        "content": "<p>Ah, switching editions appears to trigger a rebuild. That's exciting. I'll open a new topic.</p>",
        "id": 239484994,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1621453563
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>real    1m8.700s\nuser    3m43.132s\n</code></pre></div>\n<p>yep, that'll blow out the 10 second timeout</p>",
        "id": 239485137,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1621453629
    }
]