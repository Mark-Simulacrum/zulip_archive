[
    {
        "content": "<p>We're currently tracking lint promotions in <a href=\"https://github.com/rust-lang/rust/issues/80165\">#80165</a>. There are several open questions related to lints that you can find in that issue. <br>\nI'd first like to figure out if there is consensus on promoting ELLIPSIS_INCLUSIVE_RANGE_PATTERNS and ELIDED_LIFETIMES_IN_PATHS from warn to deny or if an issue on rust-lang/lang-team should be opened in the same vain as for <a href=\"https://github.com/rust-lang/lang-team/issues/65\"><code>BARE_TRAIT_OBJECTS</code></a>.</p>",
        "id": 221216057,
        "sender_full_name": "rylev",
        "timestamp": 1609338427
    },
    {
        "content": "<p>As an individual, I'd say that ELLIPSIS_INCLUSIVE_RANGE_PATTERNS should upgrade to an error.  But with my lang hat on, it's probably in the \"we don't have a plan to use it for anything so there's not really a need to break people\" category.</p>",
        "id": 221254288,
        "sender_full_name": "scottmcm",
        "timestamp": 1609369660
    },
    {
        "content": "<p>ELIDED_LIFETIMES_IN_PATHS I seem to recall people having some complaints about -- <code>Formatter&lt;'_&gt;</code> comes to mind.  Maybe there'd be a way to split it so we could make the one in return types stricter?</p>",
        "id": 221254606,
        "sender_full_name": "scottmcm",
        "timestamp": 1609369968
    },
    {
        "content": "<p>I find ELIDED_LIFETIMES_IN_PATHS tricky because as an experienced Rustacean I feel like <code>&lt;'_&gt;</code> is line noise but as a beginner I remember being pretty confused about what things had lifetimes vs what didn't</p>",
        "id": 221415008,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1609617776
    },
    {
        "content": "<p>I think it's useful</p>",
        "id": 221415028,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609617795
    },
    {
        "content": "<p>There's a supposedly a reason cargo fix --edition-idioms went and added them for 2018</p>",
        "id": 221415032,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1609617803
    },
    {
        "content": "<p>as an example, <code>TyCtxt&lt;'_&gt;</code> in the compiler is actually a reference: <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_middle/ty/context.rs.html#906-908\">https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_middle/ty/context.rs.html#906-908</a><br>\nbut it would be hard to figure that out without the lifetime staring you in the face</p>",
        "id": 221415042,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609617841
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"226095\">Dirkjan Ochtman</span> <a href=\"#narrow/stream/268952-edition/topic/lint.20promotions/near/221415008\">said</a>:</p>\n<blockquote>\n<p>I find ELIDED_LIFETIMES_IN_PATHS tricky because as an experienced Rustacean I feel like <code>&lt;'_&gt;</code> is line noise but as a beginner I remember being pretty confused about what things had lifetimes vs what didn't</p>\n</blockquote>\n<p>The really important one is <code>fn foo(x: &amp;str) -&gt; Bar</code>.  It's good for that to be <code>fn foo(x: &amp;str) -&gt; Bar&lt;'_&gt;</code> when there's a lifetime so it's clear the output isn't independent of the input.  That also give an opportunity to notice the lifetime in <code>fn foo(&amp;self, x: &amp;str) -&gt; Bar&lt;'_&gt;</code> and double-check that the elision is the lifetime you wanted there.</p>\n<p>(Compare something like <code>fn foo(x: Foo&lt;'_&gt;) -&gt; u32</code>, where the <code>&lt;'_&gt;</code> is much less helpful since it's not tied to anything else.)</p>",
        "id": 221419387,
        "sender_full_name": "scottmcm",
        "timestamp": 1609624474
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/268952-edition/topic/lint.20promotions/near/221254288\">said</a>:</p>\n<blockquote>\n<p>As an individual, I'd say that ELLIPSIS_INCLUSIVE_RANGE_PATTERNS should upgrade to an error.  But with my lang hat on, it's probably in the \"we don't have a plan to use it for anything so there's not really a need to break people\" category.</p>\n</blockquote>\n<p>I feel like it's been a warning for long enough that it'd be nice to go ahead and tell people they need to migrate now, on the off chance they haven't. That would give us the opportunity to just stop parsing it entirely in a future edition.</p>",
        "id": 221423981,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609631500
    },
    {
        "content": "<p>I'm definitely game to deny-by-default for <code>...</code> use.</p>",
        "id": 221430201,
        "sender_full_name": "scottmcm",
        "timestamp": 1609642625
    },
    {
        "content": "<p>The conversation about variadic generic in IRLO is making me reconsider here and think that <code>...</code> patterns should just become a hard error in 2021.</p>\n<p>That way in 2025 we'd be free to use them for variadics.</p>\n<p>(Since IIRC we've said we don't want to go from usable-for-one-thing to usable-for-something-else over a single edition boundary)</p>",
        "id": 224132921,
        "sender_full_name": "scottmcm",
        "timestamp": 1611714500
    },
    {
        "content": "<p>No objection; it's been a fairly long time.</p>",
        "id": 224145755,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611730188
    },
    {
        "content": "<p>2025? Do you mean 2024?</p>",
        "id": 224410639,
        "sender_full_name": "Noah Lev",
        "timestamp": 1611877385
    },
    {
        "content": "<p>I mean \"some time a fair distance in the future, maybe not directly tied to an edition\"</p>",
        "id": 224418255,
        "sender_full_name": "scottmcm",
        "timestamp": 1611881957
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I've gone through all the \"warn-by-default\" lints and seen which ones might make sense to promote to deny (usually the ones labeled as future incompatible). There's quite a few of them, so I'm not sure if opening individual PRs for each of them is the right way to discuss whether want to promote them to deny in Rust 2021. Perhaps we should put this on the lang team's meeting agenda and discuss them all at once? <br>\nHere's the list of lints:<br>\nWHERE_CLAUSE_OBJECT_SAFETY<br>\nELLIPSIS_INCLUSIVE_RANGE_PATTERNS<br>\nBARE_TRAIT_OBJECTS<br>\nSAFE_PACKED_BORROWS<br>\nCENUM_IMPL_DROP_CAST<br>\nCOHERENCE_LEAK_CHECK<br>\nCLASHING_EXTERN_DECLARATIONS<br>\nCONST_EVALUATABLE_UNCHECKED<br>\nCONST_ITEM_MUTATION<br>\nILLEGAL_FLOATING_POINT_LITERAL_PATTERN<br>\nINDIRECT_STRUCTURAL_MATCH<br>\nLATE_BOUND_LIFETIME_ARGUMENTS<br>\nMUTABLE_BORROW_RESERVATION_CONFLICT<br>\nNONTRIVIAL_STRUCTURAL_MATCH<br>\nPRIVATE_IN_PUBLIC<br>\nPROC_MACRO_DERIVE_RESOLUTION_FALLBACK<br>\nTYPE_ALIAS_BOUNDS<br>\nUNINHABITED_STATIC<br>\nUNSUPPORTED_NAKED_FUNCTIONS</p>",
        "id": 225981270,
        "sender_full_name": "rylev",
        "timestamp": 1613045569
    },
    {
        "content": "<p>(note: a few that had been previously discussed have been removed as they were \"allow-by-default\" and we should probably promote them first to \"warn-by-default before then possibly moving to \"deny-by-default\". This would not require an edition though)</p>",
        "id": 225981421,
        "sender_full_name": "rylev",
        "timestamp": 1613045650
    },
    {
        "content": "<p>oh that's a lot more than those listed in &lt;<a href=\"https://github.com/rust-lang/rust/issues/80165\">https://github.com/rust-lang/rust/issues/80165</a>&gt;. might be good to edit that then.</p>",
        "id": 225981810,
        "sender_full_name": "Mara",
        "timestamp": 1613045902
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> do you have edit persmissions for issues?</p>",
        "id": 225982689,
        "sender_full_name": "Mara",
        "timestamp": 1613046453
    },
    {
        "content": "<p>(if not, we should probably get you those as part of the 2021 team/group/thing)</p>",
        "id": 225982806,
        "sender_full_name": "Mara",
        "timestamp": 1613046535
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> I do not unfortunately.</p>",
        "id": 225983437,
        "sender_full_name": "rylev",
        "timestamp": 1613046906
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> you mentioned a document that had already been started for the lang team meeting on lint promotion. Can you share this with me?</p>",
        "id": 226496319,
        "sender_full_name": "rylev",
        "timestamp": 1613471363
    },
    {
        "content": "<p>Yes!</p>",
        "id": 226496356,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613471387
    },
    {
        "content": "<p><a href=\"https://hackmd.io/HETreGqPSRezlN109vgCnQ\">https://hackmd.io/HETreGqPSRezlN109vgCnQ</a> -- <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> and I were working on this</p>",
        "id": 226496643,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613471534
    },
    {
        "content": "<p>the idea was to add the items in Structure for each one</p>",
        "id": 226496691,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613471560
    },
    {
        "content": "<p>we only gave ourselves 30 minutes and didn't get super far, but I've been meaning to circle back to it</p>",
        "id": 226496754,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613471588
    },
    {
        "content": "<p>I'll take a look</p>",
        "id": 226497152,
        "sender_full_name": "rylev",
        "timestamp": 1613471807
    },
    {
        "content": "<p>let me know if it makes sense</p>",
        "id": 226497421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613471995
    },
    {
        "content": "<p>I moved the lints from <code>rust-2018-idioms</code> to the top; it looks like there's a reasonable summary of each of those now.</p>\n<p>(I'd added some more after our meeting, Niko, don't know if anyone else also added stuff -- does HackMD have history?)</p>",
        "id": 226561578,
        "sender_full_name": "scottmcm",
        "timestamp": 1613502979
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> I've finished getting an overview of the lints (including separating out the future compatibility lints). Do either of you have 15 minutes to go through the list and make sure we remove any that we know we don't want to discuss for inclusion in Rust 2021?</p>",
        "id": 226638502,
        "sender_full_name": "rylev",
        "timestamp": 1613558153
    },
    {
        "content": "<p>I don't know that there's consensus on how to treat future-incompatibility with the edition.  Both \"well, might as well make them fail since the edition is opt-in\" and \"but it's not really about the edition because they'll go away on all editions\" have their arguments.</p>",
        "id": 226667771,
        "sender_full_name": "scottmcm",
        "timestamp": 1613573936
    },
    {
        "content": "<p>Something to note: some future compatibility warnings do point to becoming hard warnings \"in a future edition\" as opposed to others that point to a future release. That's something else we should look into.</p>",
        "id": 226668054,
        "sender_full_name": "rylev",
        "timestamp": 1613574042
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> I have time this morning if you want to go over that list</p>",
        "id": 226674574,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613576391
    },
    {
        "content": "<p>Agreed that it's not clear the best way to treat FCW. i think a good idea might be to kind of enumerate the set of categories we think might be useful.</p>",
        "id": 226674712,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613576427
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>: <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> and I are going over the list now</p>",
        "id": 226677339,
        "sender_full_name": "rylev",
        "timestamp": 1613577363
    },
    {
        "content": "<p>oh ok :)</p>",
        "id": 226679369,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613577849
    },
    {
        "content": "<p>let me know the tl;dr</p>",
        "id": 226679385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613577853
    },
    {
        "content": "<p>I think the core question we hit is that lint policy issue -- does it ever really make sense to make something deny on an edition switch if we're also willing to just make things warn in past editions?</p>",
        "id": 226682441,
        "sender_full_name": "scottmcm",
        "timestamp": 1613578861
    },
    {
        "content": "<p>Said otherwise, there were a bunch of lints that we \"making that deny sounds good, but how do we pick whether doing it on an edition is useful?\"</p>",
        "id": 226682626,
        "sender_full_name": "scottmcm",
        "timestamp": 1613578927
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> I just finished updating the edition RFC and I was thinking about this issue</p>",
        "id": 226691672,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613582206
    },
    {
        "content": "<p>in that RFC I laid out two kinds of changes</p>",
        "id": 226691687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613582212
    },
    {
        "content": "<ul>\n<li>Migrations -- hard error in new edition, must have automated tooling</li>\n<li>Idiom lint -- warn earlier, deny by default in new edition, should have automated tooling</li>\n</ul>",
        "id": 226691739,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613582233
    },
    {
        "content": "<p>However, I was thinking about some other use cases and pondering it</p>",
        "id": 226691762,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613582244
    },
    {
        "content": "<ul>\n<li>Automated tooling targets the \"intersection\" of two editions, and as such may produce non-idiomatic code that gets cleaned up by an edition lint; does it make sense for this to run in all editions, or only in 2021?</li>\n</ul>",
        "id": 226691822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613582269
    },
    {
        "content": "<p>I could not see the <em>harm</em> in having it run in all editions, but I did wonder if deny-by-default was appropriate</p>",
        "id": 226691905,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613582292
    },
    {
        "content": "<p>how much did you explore the space of options?</p>",
        "id": 226692027,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613582351
    },
    {
        "content": "<p>ok, <a href=\"https://hackmd.io/HETreGqPSRezlN109vgCnQ?view#Options\">this is the space of options as I see it</a></p>",
        "id": 226692369,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613582508
    },
    {
        "content": "<table>\n<thead>\n<tr>\n<th>name</th>\n<th>2018 and before</th>\n<th>2021</th>\n<th>automated tooling</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>migration</td>\n<td>warn</td>\n<td>hard error</td>\n<td>mandatory</td>\n</tr>\n<tr>\n<td></td>\n<td>warn</td>\n<td>forbid</td>\n<td>optional</td>\n</tr>\n<tr>\n<td></td>\n<td>warn</td>\n<td>deny</td>\n<td>optional</td>\n</tr>\n<tr>\n<td></td>\n<td>warn</td>\n<td>warn</td>\n<td>optional</td>\n</tr>\n<tr>\n<td></td>\n<td>allow</td>\n<td>warn</td>\n<td>optional</td>\n</tr>\n</tbody>\n</table>",
        "id": 226692429,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613582526
    },
    {
        "content": "<p>(that's in the hackmd)</p>",
        "id": 226692437,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613582530
    },
    {
        "content": "<p>I should add some notes on why one might want each option</p>",
        "id": 226692732,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613582650
    },
    {
        "content": "<p>XXX just check the hackmd</p>",
        "id": 226693150,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613582820
    },
    {
        "content": "<p>it looks better in the hackmd :)</p>",
        "id": 226693170,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613582825
    },
    {
        "content": "<table>\n<thead>\n<tr>\n<th>name</th>\n<th>2018 and before</th>\n<th>2021</th>\n<th>automated tooling</th>\n<th>why would we want this?</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>migration</td>\n<td>warn</td>\n<td>hard error or repurposed</td>\n<td>mandatory</td>\n<td>duh</td>\n</tr>\n<tr>\n<td>warn-forbid</td>\n<td>warn</td>\n<td>forbid</td>\n<td>mandatory</td>\n<td>we don't, incoherent</td>\n</tr>\n<tr>\n<td>warn-deny</td>\n<td>warn</td>\n<td>deny</td>\n<td>optional</td>\n<td>weak or insufficient migration tooling</td>\n</tr>\n<tr>\n<td>warn-warn</td>\n<td>warn</td>\n<td>warn</td>\n<td>optional</td>\n<td>suggestion only in 2021, otherwise just a normal lint</td>\n</tr>\n<tr>\n<td>allow-warn</td>\n<td>allow</td>\n<td>warn</td>\n<td>optional</td>\n<td>we don't, incoherent</td>\n</tr>\n<tr>\n<td>bug fix</td>\n<td>hard error</td>\n<td>hard error</td>\n<td>optional</td>\n<td>old code was flat out wrong or unsound</td>\n</tr>\n</tbody>\n</table>\n<p>Why each option?</p>\n<ul>\n<li><strong>migration</strong>: hard error ensures people don't do the thing, or allows us to repurpose syntax </li>\n<li><strong>warn-forbid</strong>: gives a very strong push to stop using the pattern, since people can't build code that relies on it locally. Avoids breaking dependencies, but then those dependencies are still using the old edition, so that's not relevant (except for the weird case where someone \"force publishes\" code that won't build locally to <a href=\"http://crates.io\">crates.io</a>). I made automated tooling mandatory because if we are forbidding people from building the code locally we really ought to help them. Conclusion: incoherent.</li>\n<li><strong>warn-deny</strong>: deny by default gives a strong push to stop using strong push the pattern, but people can use lint mechanism to make it \"allow\" temporarily. This option may be useful if we can't get automated tooling good enough.</li>\n<li><strong>warn-warn</strong>: this is almost 'just a lint', but perhaps it has some aspects that vary across editions, such as a fix that is specific code in the newer edition. This approach minimizes differences across editions.</li>\n<li><strong>allow-warn</strong>: this would permit code in older editions to remain with minimal disturbance. However, if we want to deprecate an older pattern, I'm not sure why we would want that -- presumably we consider the older pattern to be problematic, or we wouldn't have deprecated it. Could be used to \"cleanup\" bad code produced by automated migrations, but then, why wouldn't we want to cleanup that same code if it were written by hand? Conclusion: incoherent.</li>\n<li><strong>bug fix</strong>: some things we categorize as <strong>bug fixes</strong>. They can be done at any time, and they affect all editions equally. We often phase these in using \"future compatibility warnings\", so that they start out as lints, but we don't have to wait for an edition to mak that change.</li>\n</ul>",
        "id": 226694162,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613583228
    },
    {
        "content": "<p>ok, that's my analysis</p>",
        "id": 226694407,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613583326
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span>  <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 226694653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613583404
    },
    {
        "content": "<p>I'd like to know where you folks disagree (if anywhere)</p>",
        "id": 226694686,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613583416
    },
    {
        "content": "<p>Do we want to go straight from warn to repurposed without an intervening hard error?</p>",
        "id": 226694786,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1613583453
    },
    {
        "content": "<p>Or at least a deny?</p>",
        "id": 226694851,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1613583479
    },
    {
        "content": "<p>I don't see why not</p>",
        "id": 226694897,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613583485
    },
    {
        "content": "<p>you have to upgrade to Rust 2021 to see it</p>",
        "id": 226694920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613583491
    },
    {
        "content": "<p>(and we give you warnings on the older edition)</p>",
        "id": 226694987,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613583511
    },
    {
        "content": "<p>didn't we do that with the path changes? I believe we did</p>",
        "id": 226695004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613583517
    },
    {
        "content": "<p>Sure, but it means if you just upgrade and start to fix errors, you get weirdness.</p>",
        "id": 226695014,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1613583521
    },
    {
        "content": "<p>I'll separate it out</p>",
        "id": 226695062,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613583539
    },
    {
        "content": "<p>i agree it is 'less good'</p>",
        "id": 226695078,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613583544
    },
    {
        "content": "<p>We did that with module system changes because we expected almost every case to be compatible.</p>",
        "id": 226695089,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1613583549
    },
    {
        "content": "<p><em>almost</em></p>",
        "id": 226695126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613583558
    },
    {
        "content": "<p>being the key term :)</p>",
        "id": 226695141,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613583562
    },
    {
        "content": "<p><em>nod</em></p>",
        "id": 226695149,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1613583566
    },
    {
        "content": "<p>I guess your point is that this may not be considered \"repurposing\"</p>",
        "id": 226695161,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613583570
    },
    {
        "content": "<p>Right.</p>",
        "id": 226695191,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1613583579
    },
    {
        "content": "<p>I'm ok with that</p>",
        "id": 226695217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613583588
    },
    {
        "content": "<p>let's say \"hard error or limited repurposing\"</p>",
        "id": 226695242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613583596
    },
    {
        "content": "<p>That's the distinction I would draw: we could migrate to something mostly compatible with known exceptions, but not to a completely different use of the same syntax.</p>",
        "id": 226695357,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1613583627
    },
    {
        "content": "<p>Along the same lines, I think the \"limited repurpose\" case doesn't necessarily need tooling.</p>",
        "id": 226695499,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1613583709
    },
    {
        "content": "<p>If it works in most cases, and can give clear errors in other cases, that may suffice.</p>",
        "id": 226695592,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1613583735
    },
    {
        "content": "<p>so pub macro rules is an example here</p>",
        "id": 226695595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613583736
    },
    {
        "content": "<p>where we would be repurposing</p>",
        "id": 226695603,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613583741
    },
    {
        "content": "<p>I would not want to have an edition where we require <code>pub(self)</code></p>",
        "id": 226695620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613583749
    },
    {
        "content": "<p>however, I think you are arguing \"most of the time it kind of works\"</p>",
        "id": 226695644,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613583762
    },
    {
        "content": "<p>and in particular, if it doesn't, you typically get errors</p>",
        "id": 226695661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613583768
    },
    {
        "content": "<p>Right. And I don't think we *have\" to have tooling to migrate.</p>",
        "id": 226695671,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1613583772
    },
    {
        "content": "<p>I feel we do but it's primarily a question of measurement</p>",
        "id": 226695702,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613583791
    },
    {
        "content": "<p>that is, I consider \"identity function\" to be automated tooling</p>",
        "id": 226695725,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613583803
    },
    {
        "content": "<p>it's just automated tooling that is not very useful if the pattern is used across &gt;N% of crates :)</p>",
        "id": 226695758,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613583826
    },
    {
        "content": "<p>I believe I wrote 90% in the RFC</p>",
        "id": 226695791,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613583838
    },
    {
        "content": "<p>Hm, so I guess it feels like allow hard error (i.e. migration but without warn currently) also seems viable, if there's not much that can be done on current edition</p>",
        "id": 226695800,
        "sender_full_name": "simulacrum",
        "timestamp": 1613583841
    },
    {
        "content": "<p>I will add, but I think it is explicitly ruled out</p>",
        "id": 226695885,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613583863
    },
    {
        "content": "<p>not sure what you mean by \"not much that can be done\"</p>",
        "id": 226695899,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613583872
    },
    {
        "content": "<p>like, there is no way to avoid the error because required syntax is not available?</p>",
        "id": 226695925,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613583883
    },
    {
        "content": "<p>I would probably argue that we should ensure there <em>is</em> a way</p>",
        "id": 226695987,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613583907
    },
    {
        "content": "<p>(the <code>k#foo</code> goes in this direction)</p>",
        "id": 226696016,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613583916
    },
    {
        "content": "<p>but it depends a bit on the specifics I guess</p>",
        "id": 226696033,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613583925
    },
    {
        "content": "<p>Yes, with that it seems like maybe, but it isn't clear that the k#foo is preferable to doing nothing</p>",
        "id": 226696090,
        "sender_full_name": "simulacrum",
        "timestamp": 1613583950
    },
    {
        "content": "<p>(but it's really hard to generalize)</p>",
        "id": 226696171,
        "sender_full_name": "simulacrum",
        "timestamp": 1613583969
    },
    {
        "content": "<p>it's a bit hypothetical at this juncture <em>but</em></p>",
        "id": 226696257,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613584002
    },
    {
        "content": "<p>our tooling isn't setup for that really</p>",
        "id": 226696276,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613584007
    },
    {
        "content": "<p>Well we already have the migration lints? So not sure I understand</p>",
        "id": 226696323,
        "sender_full_name": "simulacrum",
        "timestamp": 1613584025
    },
    {
        "content": "<p>the expectation is that we target the \"intersection\" of editions</p>",
        "id": 226696324,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613584025
    },
    {
        "content": "<p>migration lints don't move you to the new edition, is the point</p>",
        "id": 226696350,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613584036
    },
    {
        "content": "<p>how important that is, I don't know. The idea was that you can migrate \"bits at a time\"</p>",
        "id": 226696386,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613584048
    },
    {
        "content": "<p>You can't - really - if we have anything that's not the intersection. Hmmm</p>",
        "id": 226696467,
        "sender_full_name": "simulacrum",
        "timestamp": 1613584075
    },
    {
        "content": "<p>Yeah I think this is a good summary</p>",
        "id": 226696577,
        "sender_full_name": "simulacrum",
        "timestamp": 1613584109
    },
    {
        "content": "<p>In any case ,I'm of the opinion that we shouldn't rule out anything, but we should make general rules. \"This is the pattern we like, for these reasons.\" If you can't fit that pattern, we can consider making an exception, but you have to argue against the counter arguments and why they don't apply to your specific case.</p>",
        "id": 226696615,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613584128
    },
    {
        "content": "<p>Yes that seems right</p>",
        "id": 226696637,
        "sender_full_name": "simulacrum",
        "timestamp": 1613584140
    },
    {
        "content": "<p>I think I would personally recommend migrations (in the sense that we can immediately repurpose syntax, but perhaps we don't till late in that edition's cycle) when possible. I'm not convinced there's much use to warnings getting stronger at edition boundaries, personally, since it feels like if you're not changing your code you wouldn't care about warnings and if you are then we want you to migrate</p>",
        "id": 226697025,
        "sender_full_name": "simulacrum",
        "timestamp": 1613584302
    },
    {
        "content": "<p>That said, I personally prefer keeping current edition unchanged for X cycles to give people an opportunity to migrate without being forced to hold back their compiler upgrade or add allows</p>",
        "id": 226697134,
        "sender_full_name": "simulacrum",
        "timestamp": 1613584337
    },
    {
        "content": "<p>on that basis</p>",
        "id": 226697175,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613584358
    },
    {
        "content": "<p>I revised the table</p>",
        "id": 226697183,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613584364
    },
    {
        "content": "<p>to separate out <strong>repurposed</strong></p>",
        "id": 226697196,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613584370
    },
    {
        "content": "<p>but I noted the cases where we make exceptions (e.g., name resolution) and the kinds of criteria we consider when doing so</p>",
        "id": 226697214,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613584381
    },
    {
        "content": "<p>Is that in hackmd?</p>",
        "id": 226697231,
        "sender_full_name": "simulacrum",
        "timestamp": 1613584388
    },
    {
        "content": "<p>I think that's the right way to think about it, rather than trying to pretend they are not a repurpose</p>",
        "id": 226697245,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613584401
    },
    {
        "content": "<p>yes, the lint hackmd for now</p>",
        "id": 226697256,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613584407
    },
    {
        "content": "<p><a href=\"https://hackmd.io/HETreGqPSRezlN109vgCnQ?view#Options\">https://hackmd.io/HETreGqPSRezlN109vgCnQ?view#Options</a></p>",
        "id": 226697259,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613584408
    },
    {
        "content": "<p>I imagine that this will become published lang team policy</p>",
        "id": 226697285,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613584422
    },
    {
        "content": "<p>once we settle it down :)</p>",
        "id": 226697295,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613584428
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/268952-edition/topic/lint.20promotions/near/226697025\">said</a>:</p>\n<blockquote>\n<p>I think I would personally recommend migrations (in the sense that we can immediately repurpose syntax, but perhaps we don't till late in that edition's cycle) when possible. I'm not convinced there's much use to warnings getting stronger at edition boundaries, personally, since it feels like if you're not changing your code you wouldn't care about warnings and if you are then we want you to migrate</p>\n</blockquote>\n<p>I think I agree with this</p>",
        "id": 226697514,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613584522
    },
    {
        "content": "<p>fewer options better</p>",
        "id": 226697538,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613584533
    },
    {
        "content": "<p>I think warn/warn can be said to be incoherent too, or at least, it feels weird as edition policy</p>",
        "id": 226697546,
        "sender_full_name": "simulacrum",
        "timestamp": 1613584537
    },
    {
        "content": "<p>I think it makes sense in the sense of</p>",
        "id": 226697582,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613584553
    },
    {
        "content": "<p>It seems clear that warnings should give you best suggestion possible for your case</p>",
        "id": 226697586,
        "sender_full_name": "simulacrum",
        "timestamp": 1613584554
    },
    {
        "content": "<p>basically this</p>",
        "id": 226697612,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613584563
    },
    {
        "content": "<p>I guess this fits with my argument that</p>",
        "id": 226697657,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613584571
    },
    {
        "content": "<p>I am ok deprecating things</p>",
        "id": 226697665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613584575
    },
    {
        "content": "<p>and the suggeston may be \"upgrade to Rust 2021 to gain access to the alternative\"</p>",
        "id": 226697691,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613584586
    },
    {
        "content": "<p>(or perhaps use <code>k#foo</code>)</p>",
        "id": 226697705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613584591
    },
    {
        "content": "<p>in some sense it seems like we're arguing ourselves away from idiom lints being a thing</p>",
        "id": 226697793,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613584630
    },
    {
        "content": "<p>I think I disagree with pushing people to upgrade via warnings, but I don't disagree with pushing them to upgrade in other ways</p>",
        "id": 226697804,
        "sender_full_name": "simulacrum",
        "timestamp": 1613584635
    },
    {
        "content": "<p>What's an example of another way?</p>",
        "id": 226697828,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613584651
    },
    {
        "content": "<p>Do you mean you disagree <em>specifically</em> with advertising the Edition via warnings?</p>",
        "id": 226697862,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613584667
    },
    {
        "content": "<p>I think I don't want the experience that stabilizing the edition means people get a bunch of warnings telling them to migrate all of a sudden</p>",
        "id": 226697970,
        "sender_full_name": "simulacrum",
        "timestamp": 1613584701
    },
    {
        "content": "<p>that seems not great</p>",
        "id": 226697977,
        "sender_full_name": "simulacrum",
        "timestamp": 1613584704
    },
    {
        "content": "<p>other ways might be e.g. desire to use new features</p>",
        "id": 226697984,
        "sender_full_name": "simulacrum",
        "timestamp": 1613584710
    },
    {
        "content": "<p>but it seems ungreat to have a \"hard date\" for people to have to take <em>some action</em> that they likely want to coordinate with (at least) their toolchain team on, e.g. at work</p>",
        "id": 226698113,
        "sender_full_name": "simulacrum",
        "timestamp": 1613584770
    },
    {
        "content": "<p>Is this purely theoretical?</p>",
        "id": 226731216,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613598575
    },
    {
        "content": "<p>I'm not sure that we have an example of any actual lints that would require migration</p>",
        "id": 226731241,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613598584
    },
    {
        "content": "<p>If we are not planning on making the lints hard errors in the new edition (I would be ok with just pure warnings, personally), then maybe the idiom lints should just...not be idiom lints, and we should turn them on</p>",
        "id": 226731360,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613598622
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> you are convincing me that Editions should be <em>just</em> about migrations</p>",
        "id": 226731670,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613598775
    },
    {
        "content": "<p>I like that story.  It's easy to communicate, too.</p>",
        "id": 226731852,
        "sender_full_name": "scottmcm",
        "timestamp": 1613598851
    },
    {
        "content": "<p>Right, I think this is my position (or one I'm coming to)</p>",
        "id": 226736607,
        "sender_full_name": "simulacrum",
        "timestamp": 1613600290
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/268952-edition/topic/lint.20promotions/near/226731360\">said</a>:</p>\n<blockquote>\n<p>If we are not planning on making the lints hard errors in the new edition (I would be ok with just pure warnings, personally), then maybe the idiom lints should just...not be idiom lints, and we should turn them on</p>\n</blockquote>\n<p>To clarify -- I don't think we should turn them on \"in the edition\" or \"in the same release\"; if T-lang (or whoever) feels that the lint is right (e.g., deprecating non-dyn using trait objects) then we should just do it across the board. But tying it to the edition muddles our message.</p>\n<p>In general, I think this is because I think editions are a poor proxy for \"I'm working on my code <em>now</em>\" -- that's what we really want for many of these warnings, but we don't have a way to get it today, I think, and that's unfortunate but not really solveable with editions</p>",
        "id": 226736893,
        "sender_full_name": "simulacrum",
        "timestamp": 1613600460
    },
    {
        "content": "<p>It may be that we want a mode in Cargo or some annotation that's basically \"maintenance level\" of the crate/workspace, which you can use to opt-in to \"helpful warnings\"</p>",
        "id": 226736950,
        "sender_full_name": "simulacrum",
        "timestamp": 1613600492
    },
    {
        "content": "<p>but if I'm not editing or changing my code, just wanting to keep on modern compilers to get soundness fixes and such, I <em>really</em> don't want to get warnings about syntax, since I need to investigate and allow them etc, and that seems unfortunate, represents high investment as project number grows</p>",
        "id": 226737105,
        "sender_full_name": "simulacrum",
        "timestamp": 1613600542
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> looking at the RFC draft, I think another point of contention may be that because of this \"I don't want to get useless warnings on not changing code\" principle I'm trying to gesture at, I disagree with \"Any code that compiles on edition N without warning will also compile on edition N+1, and with the same semantics.\"</p>\n<p>In particular I <em>don't</em> want a migration to require edition N to have a warning <em>by default</em>; I should opt-in to that warning too. Otherwise we're too forceful IMO.</p>",
        "id": 226737508,
        "sender_full_name": "simulacrum",
        "timestamp": 1613600759
    },
    {
        "content": "<p>if the crate is just in maintenance mode, does one really care about new warnings?</p>",
        "id": 226737873,
        "sender_full_name": "Lokathor",
        "timestamp": 1613600936
    },
    {
        "content": "<p>Absolutely. If I get a warning, I may need to take some action; e.g., maybe it's telling me about a soundness bug or other bugfix we're rolling out.</p>",
        "id": 226737933,
        "sender_full_name": "simulacrum",
        "timestamp": 1613600968
    },
    {
        "content": "<p>i guess i just almost never get a useful warning</p>",
        "id": 226738049,
        "sender_full_name": "Lokathor",
        "timestamp": 1613601020
    },
    {
        "content": "<p>reducing noise when crates are in maintenance mode seems like one of my personal values at least for design</p>",
        "id": 226738126,
        "sender_full_name": "simulacrum",
        "timestamp": 1613601069
    },
    {
        "content": "<p>and avoiding \"spurious\" new warnings is part of that</p>",
        "id": 226738149,
        "sender_full_name": "simulacrum",
        "timestamp": 1613601083
    },
    {
        "content": "<p>I'm debating</p>",
        "id": 226747383,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613606727
    },
    {
        "content": "<p>I hear what you're saying</p>",
        "id": 226747388,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613606729
    },
    {
        "content": "<p>I've been resisting it</p>",
        "id": 226747397,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613606735
    },
    {
        "content": "<p>I'm trying to remember what we did last time :)</p>",
        "id": 226747416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613606751
    },
    {
        "content": "<p>it's a question of how pushy we want to be, I guess</p>",
        "id": 226747420,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613606756
    },
    {
        "content": "<p>I'm not sure I buy the 'maintenance mode' though</p>",
        "id": 226747451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613606764
    },
    {
        "content": "<p>it feels like a lint group might help here</p>",
        "id": 226747481,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613606770
    },
    {
        "content": "<p><code>#![allow(style)]</code> or something</p>",
        "id": 226747489,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613606777
    },
    {
        "content": "<p>(where we could classify idiom lints as style)</p>",
        "id": 226747497,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613606784
    },
    {
        "content": "<p>I guess the question is whether you think it's too much work for a \"maintenance mode\" crate  to opt into \"allow nonstandard style\"</p>",
        "id": 226747544,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613606815
    },
    {
        "content": "<p>arguably that's a bit too broad... but I guess an analogous thing might be \"allow(rust_2021_style)\" or something... although that again gets back to the overloading of edition</p>",
        "id": 226747589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613606854
    },
    {
        "content": "<p>Right, I think a lint group is part of the story perhaps, but it's unclear to me that we'd want it to be <em>allow</em> vs opt-in, in some sense</p>",
        "id": 226753729,
        "sender_full_name": "simulacrum",
        "timestamp": 1613611632
    },
    {
        "content": "<p>IMO basically the point is that if we add lints that are \"stylistic deprecations\" (i.e., code is perhaps hard to read but the lint itself doesn't tell you if it's <em>wrong</em>) then we shouldn't lint on maintenance mode code</p>",
        "id": 226753815,
        "sender_full_name": "simulacrum",
        "timestamp": 1613611701
    },
    {
        "content": "<p>(because it does not add value but does add work to process the new warnings, regardless of how \"easy\" that is in theory to some extent)</p>",
        "id": 226753952,
        "sender_full_name": "simulacrum",
        "timestamp": 1613611827
    },
    {
        "content": "<p>there's just some amount of overhead to \"upgrading the compiler caused non-silent compilation\"</p>",
        "id": 226753991,
        "sender_full_name": "simulacrum",
        "timestamp": 1613611872
    },
    {
        "content": "<p>So one question is: what is maintenance mode, exactly?</p>\n<p>Like, <code>libm</code> is a part of <code>compiler-builtins</code>, which feeds into <code>core</code>. It's very critical to rust. It also hasn't been touched since Jun 8th of last year. And that's <em>fine</em>. And if it did suddenly have a new warning probably no one would notice because it's basically only built as a dependency because basically no one is working on it.</p>",
        "id": 226770602,
        "sender_full_name": "Lokathor",
        "timestamp": 1613630003
    },
    {
        "content": "<p>Well, if we had a monorepo we would</p>",
        "id": 226792952,
        "sender_full_name": "simulacrum",
        "timestamp": 1613645296
    },
    {
        "content": "<p>And we've wanted some set of future compat lints to bypass cap lints, too.</p>",
        "id": 226793262,
        "sender_full_name": "simulacrum",
        "timestamp": 1613645505
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> can you summarize where you think this conversation landed? The document lists a bunch of options but I'm having a hard time following what conclusions were reached.</p>",
        "id": 226803581,
        "sender_full_name": "rylev",
        "timestamp": 1613651944
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/268952-edition/topic/lint.20promotions/near/226793262\">said</a>:</p>\n<blockquote>\n<p>And we've wanted some set of future compat lints to bypass cap lints, too.</p>\n</blockquote>\n<p>yes but</p>",
        "id": 226826553,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613661848
    },
    {
        "content": "<p>we wanted those to give a useful message</p>",
        "id": 226826584,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613661861
    },
    {
        "content": "<p>and in particular <strong>you would definitely want them</strong></p>",
        "id": 226826594,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613661867
    },
    {
        "content": "<p>because those cases where the crate will break</p>",
        "id": 226826615,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613661877
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224872\">rylev</span> <a href=\"#narrow/stream/268952-edition/topic/lint.20promotions/near/226803581\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> can you summarize where you think this conversation landed? The document lists a bunch of options but I'm having a hard time following what conclusions were reached.</p>\n</blockquote>\n<p>I don't think it's quite landed yet, but it seems to be heading towards \"editions introduce hard errors\", and anything else that we want we should just turn on in general as a lint</p>",
        "id": 226826710,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613661928
    },
    {
        "content": "<p>I guess I can write that up as a concrete proposal. I think I agree with it.</p>",
        "id": 226826760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613661949
    },
    {
        "content": "<p>I also thikn it's <em>ok</em> to have lints that only trigger in a particular edition, but I'm not quite sure I see the use case yet</p>",
        "id": 226826849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613661969
    },
    {
        "content": "<p>I think the key disagreement we have left (maybe) is whether the \"current\" edition should give you warnings if it'll be a hard error in the next one</p>",
        "id": 226826922,
        "sender_full_name": "simulacrum",
        "timestamp": 1613662000
    },
    {
        "content": "<p>(I lean towards no)</p>",
        "id": 226826935,
        "sender_full_name": "simulacrum",
        "timestamp": 1613662010
    },
    {
        "content": "<p>I definitely think it should be. I'd like to hear the reasoning for we shouldn't warn on previous editions. Is this because you believe it will be noisy?</p>",
        "id": 226827139,
        "sender_full_name": "rylev",
        "timestamp": 1613662086
    },
    {
        "content": "<p>I am in favor of grouping all such lints into a lint group which can be turned off.</p>",
        "id": 226827222,
        "sender_full_name": "rylev",
        "timestamp": 1613662118
    },
    {
        "content": "<p>I don't see the advantage for developers to see those warnings if they're just saying \"hey you'll need to run rustfix <em>if</em> you migrate\"; I think if we're deprecating a pattern and/or migrating folks because we think that code is bad (not sure I have great examples) then it seems like we wouldn't want to tie that to edition at all, it's just a general lint</p>",
        "id": 226827504,
        "sender_full_name": "simulacrum",
        "timestamp": 1613662221
    },
    {
        "content": "<p>The example of <code>dyn Trait</code> is a good one. We don't want people to write bare traits but we can't enforce that until the transition to a new edition.</p>",
        "id": 226827957,
        "sender_full_name": "rylev",
        "timestamp": 1613662422
    },
    {
        "content": "<p>hm, not sure I follow -- that seems like a case of \"non-edition tied warning\"</p>",
        "id": 226828163,
        "sender_full_name": "simulacrum",
        "timestamp": 1613662500
    },
    {
        "content": "<p>there's a separate conversation as to whether we should introduce the lint on \"unmaintained\" code, but that's largely not related to editions; they're not really a good substitute for maintenance level</p>",
        "id": 226828383,
        "sender_full_name": "simulacrum",
        "timestamp": 1613662590
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/268952-edition/topic/lint.20promotions/near/226828163\">said</a>:</p>\n<blockquote>\n<p>hm, not sure I follow -- that seems like a case of \"non-edition tied warning\"</p>\n</blockquote>\n<p>The warning does not need to start at an edition boundary, but if we want to deny that syntax out-right, that needs to happen at the edition boundary</p>",
        "id": 226828499,
        "sender_full_name": "rylev",
        "timestamp": 1613662643
    },
    {
        "content": "<p>So it's good to warn folks that they shouldn't use that syntax (we would make it an error for them if we could), but the best we can do is give them a warning and deny it on a future edition</p>",
        "id": 226828636,
        "sender_full_name": "rylev",
        "timestamp": 1613662691
    },
    {
        "content": "<p>so...</p>",
        "id": 226828748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613662750
    },
    {
        "content": "<p>Sure. But that speaks to the pattern that I think I'm proposing, which is:</p>\n<ul>\n<li>lints can generally be introduced at anytime, though we should think more separately about whether doing so to all code makes sense or if we want to add some sort of maintenance declaration</li>\n<li>edition migrations (e.g., banning bare trait) are orthogonal, if we want to add one we don't necessarily warn in previous edition</li>\n</ul>\n<p>for the latter, for example, in 2015 I wouldn't warn on let async = 3; even though the migration will replace it</p>",
        "id": 226828759,
        "sender_full_name": "simulacrum",
        "timestamp": 1613662753
    },
    {
        "content": "<p>let's limit this to the 2021 edition</p>",
        "id": 226828772,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613662756
    },
    {
        "content": "<p>and not speak in generalities</p>",
        "id": 226828779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613662759
    },
    {
        "content": "<p>might be helpful</p>",
        "id": 226828790,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613662763
    },
    {
        "content": "<p>we have the \"closure capture transition\"</p>",
        "id": 226828813,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613662773
    },
    {
        "content": "<p>I think this is a good argument <em>in favor</em> of <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span>'s point</p>",
        "id": 226828852,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613662789
    },
    {
        "content": "<p>sure, concretely for 2021, I don't want lints in 2018 for \"your closure will behave differently in 2021\"</p>",
        "id": 226828853,
        "sender_full_name": "simulacrum",
        "timestamp": 1613662789
    },
    {
        "content": "<p>or do I</p>",
        "id": 226828875,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613662798
    },
    {
        "content": "<p>that seems useless</p>",
        "id": 226828881,
        "sender_full_name": "simulacrum",
        "timestamp": 1613662801
    },
    {
        "content": "<p>so the lint will, concretely, suggest that you put in things like <code>std::lint::capture!(a)</code> etc</p>",
        "id": 226828946,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613662810
    },
    {
        "content": "<p>I'm not sure that's uselesss</p>",
        "id": 226828957,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613662814
    },
    {
        "content": "<p>it means that if I read code, it reads the same in 2018 and 2021</p>",
        "id": 226828969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613662820
    },
    {
        "content": "<p><em>however</em></p>",
        "id": 226828973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613662822
    },
    {
        "content": "<p>hm, I guess, I see that as opt-in</p>",
        "id": 226828974,
        "sender_full_name": "simulacrum",
        "timestamp": 1613662823
    },
    {
        "content": "<p>the downside is that I suspect many of those capture calls will not be needed, even though we're doing our best to be careful when we insert them</p>",
        "id": 226829015,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613662844
    },
    {
        "content": "<p>and that folks in 2021 will remove them</p>",
        "id": 226829023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613662851
    },
    {
        "content": "<p>and/or maybe we'll even make it possible for them to just ignore that lint or make it more conservative</p>",
        "id": 226829060,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613662868
    },
    {
        "content": "<p>I'm not totally sure about what the migrations are for <code>format!</code></p>",
        "id": 226829094,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613662887
    },
    {
        "content": "<p>I think those are different</p>",
        "id": 226829099,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613662891
    },
    {
        "content": "<p>I think we need to make a distinction between things that we want to discourage across all editions and things that are only issues in a particular edition:</p>\n<ul>\n<li><code>async</code> being used as an identifier in 2015 is fine because there's nothing wrong with that. I agree we shouldn't warn-by-default just because it will not be allowed in a future edition (though having an allow-by-default lint makes a great deal of sense)</li>\n<li><code>dyn Trait</code> is always wrong and we should warn on every edition</li>\n</ul>",
        "id": 226829109,
        "sender_full_name": "rylev",
        "timestamp": 1613662896
    },
    {
        "content": "<p>I think we probably <em>want</em> people to do them</p>",
        "id": 226829111,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613662896
    },
    {
        "content": "<p><code>async</code> is a good example</p>",
        "id": 226829161,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613662914
    },
    {
        "content": "<p>I kind of think we <em>should</em> warn :)</p>",
        "id": 226829169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613662917
    },
    {
        "content": "<p>I guess it depends on how much we want all Rust code, regardless of edition, to read the same</p>",
        "id": 226829227,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613662928
    },
    {
        "content": "<p>I sort of do</p>",
        "id": 226829240,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613662934
    },
    {
        "content": "<p>I can certainly see the reverse argument though</p>",
        "id": 226829269,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613662948
    },
    {
        "content": "<p>but basically I don't want you to have to know what edition code is in for the most part, at least when reading</p>",
        "id": 226829287,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613662958
    },
    {
        "content": "<p>(otoh, <code>let async = 22</code> is...pretty clear what it means)</p>",
        "id": 226829317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613662973
    },
    {
        "content": "<p>ok, I'm wanting to make some categories :)</p>",
        "id": 226829393,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613663008
    },
    {
        "content": "<p>I think the \"editions largely look/read the same\" is a valuable argument, and I want it too, but not at the cost of spamming people basically :)</p>",
        "id": 226829410,
        "sender_full_name": "simulacrum",
        "timestamp": 1613663016
    },
    {
        "content": "<p>imo e.g. a lint against let async = ... in 2015 would basically feel like a \"false positive\"</p>",
        "id": 226829461,
        "sender_full_name": "simulacrum",
        "timestamp": 1613663034
    },
    {
        "content": "<p>it definitely is in tension with the \"upgrade when you are ready, not before\" tenet</p>",
        "id": 226829472,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613663039
    },
    {
        "content": "<p>so it comes down to which is more important</p>",
        "id": 226829551,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613663060
    },
    {
        "content": "<p>to lean even more into AWS terminology, it's also not a 1-way door</p>",
        "id": 226829580,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613663070
    },
    {
        "content": "<p>meaning-- if we decide not to warn people</p>",
        "id": 226829594,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613663075
    },
    {
        "content": "<p>and we find that it's becoming confusing to read rust code</p>",
        "id": 226829628,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613663086
    },
    {
        "content": "<p>we can change course :)</p>",
        "id": 226829635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613663088
    },
    {
        "content": "<p>which weakens my opposition</p>",
        "id": 226829663,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613663100
    },
    {
        "content": "<p>Yes, start as an allow-by-default lint. We can always go to warn-by-default later</p>",
        "id": 226829710,
        "sender_full_name": "rylev",
        "timestamp": 1613663115
    },
    {
        "content": "<p>Yeah, we can definitely change course. I don't think right now I have lints that I'd want to warn about <em>purely</em> because of differences between editions</p>",
        "id": 226829921,
        "sender_full_name": "simulacrum",
        "timestamp": 1613663181
    },
    {
        "content": "<p>I think the closure capture one is the strongest argument</p>",
        "id": 226829962,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613663195
    },
    {
        "content": "<p>and it's not that strong</p>",
        "id": 226829974,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613663199
    },
    {
        "content": "<p>uniformity across editions you mean?</p>",
        "id": 226829996,
        "sender_full_name": "simulacrum",
        "timestamp": 1613663208
    },
    {
        "content": "<p>right, I think it's the one where uniformity would be most important</p>",
        "id": 226830020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613663217
    },
    {
        "content": "<p>the keyword one doesn't apply as well because you can tell it's not a keyword</p>",
        "id": 226830077,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613663235
    },
    {
        "content": "<p>closures you can't tell, but I hope it doesn't really matter to you</p>",
        "id": 226830100,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613663246
    },
    {
        "content": "<p>I think it won't</p>",
        "id": 226830118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613663256
    },
    {
        "content": "<p>right, and \"doesn't matter to you\" feels like a high chance of false positives, I think we're going to really want to fine tune it</p>",
        "id": 226830154,
        "sender_full_name": "simulacrum",
        "timestamp": 1613663270
    },
    {
        "content": "<p>so I think we have 3 categories</p>",
        "id": 226830248,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613663295
    },
    {
        "content": "<table>\n<thead>\n<tr>\n<th>name</th>\n<th>2018</th>\n<th>2021</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>migrations</td>\n<td>opt-in warning</td>\n<td>error</td>\n</tr>\n<tr>\n<td>deprecations</td>\n<td>warn</td>\n<td>warn</td>\n</tr>\n<tr>\n<td>idioms</td>\n<td>opt-in warning</td>\n<td>warning</td>\n</tr>\n</tbody>\n</table>",
        "id": 226830426,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613663366
    },
    {
        "content": "<p>I'm not sure about idioms</p>",
        "id": 226830434,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613663369
    },
    {
        "content": "<p>What is an example of a 2021 idiom?</p>",
        "id": 226830503,
        "sender_full_name": "rylev",
        "timestamp": 1613663393
    },
    {
        "content": "<p>For deprecations, I would expect them to be introduced whenever, and I would expect that sometimes the <em>suggestion</em> changes based on edition</p>",
        "id": 226830573,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613663405
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224872\">rylev</span> <a href=\"#narrow/stream/268952-edition/topic/lint.20promotions/near/226830503\">said</a>:</p>\n<blockquote>\n<p>What is an example of a 2021 idiom?</p>\n</blockquote>\n<p>I'm not sure I have one :)</p>",
        "id": 226830608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613663414
    },
    {
        "content": "<p>I guess one thing might be</p>",
        "id": 226830633,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613663427
    },
    {
        "content": "<p>if there was a deprecation where the <em>fix</em> requires the new edition for some reason</p>",
        "id": 226830652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613663433
    },
    {
        "content": "<p>and we're going to lean against \"spamming\" people</p>",
        "id": 226830673,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613663440
    },
    {
        "content": "<p>that is, the idiomatic fix, not just \"add an allow\"</p>",
        "id": 226830702,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613663452
    },
    {
        "content": "<p>kind of a special case of deprecation</p>",
        "id": 226830749,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613663468
    },
    {
        "content": "<p>the other thing I have in my mind is \"cleaning up\" the changes made by migrations</p>",
        "id": 226830810,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613663490
    },
    {
        "content": "<p>e.g., maybe you rewrite things to a <code>k#foo</code> keyword</p>",
        "id": 226830822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613663498
    },
    {
        "content": "<p>and then in the new edition, you change it to <code>foo</code></p>",
        "id": 226830846,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613663505
    },
    {
        "content": "<p>ok, I guess that's it :)</p>",
        "id": 226830881,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613663520
    },
    {
        "content": "<p>IMO that should be opt-in, but perhaps sort of \"done for you\", i.e., we migrate your code and automatically insert a #![warn(...)] at the top of your crate</p>",
        "id": 226830949,
        "sender_full_name": "simulacrum",
        "timestamp": 1613663533
    },
    {
        "content": "<p>I do feel like we are going to introduce \"suboptimal\" syntax in order to expose features earlier</p>",
        "id": 226830956,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613663537
    },
    {
        "content": "<p>and you can just delete it</p>",
        "id": 226830961,
        "sender_full_name": "simulacrum",
        "timestamp": 1613663538
    },
    {
        "content": "<p>that...why?</p>",
        "id": 226831008,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613663557
    },
    {
        "content": "<p>that seems surprising to me, trying to figure out why</p>",
        "id": 226831058,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613663573
    },
    {
        "content": "<p>I guess it seems inconsistent with other cases where we enforce style lints by default</p>",
        "id": 226831099,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613663587
    },
    {
        "content": "<p>well, if we're going to have it on by default that seems fine</p>",
        "id": 226831125,
        "sender_full_name": "simulacrum",
        "timestamp": 1613663598
    },
    {
        "content": "<p>I would think it's \"warn by default in 2021 edition\"</p>",
        "id": 226831164,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613663613
    },
    {
        "content": "<p>there's no point in warning you about in 2018</p>",
        "id": 226831179,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613663620
    },
    {
        "content": "<p>since using <code>k#foo</code> is the <em>right thing to do there</em></p>",
        "id": 226831202,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613663627
    },
    {
        "content": "<p>yes, but even there, the lint should either rarely fire or be for the \"rare case\" we can't migrate you automatically</p>",
        "id": 226831303,
        "sender_full_name": "simulacrum",
        "timestamp": 1613663657
    },
    {
        "content": "<p>to be clear</p>",
        "id": 226831339,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613663667
    },
    {
        "content": "<p>lints are how we migrate you :)</p>",
        "id": 226831349,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613663670
    },
    {
        "content": "<p>I'm expecting such lints would have machine-applicable suggestions</p>",
        "id": 226831400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613663684
    },
    {
        "content": "<p>well, those lints are enabled via CLI flag or something by rustfix</p>",
        "id": 226831406,
        "sender_full_name": "simulacrum",
        "timestamp": 1613663687
    },
    {
        "content": "<p>but they're not -- necessarily -- on by default in any edition</p>",
        "id": 226831440,
        "sender_full_name": "simulacrum",
        "timestamp": 1613663700
    },
    {
        "content": "<p>yes. I think these ones should just be on.</p>",
        "id": 226831481,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613663714
    },
    {
        "content": "<p>to remind you to run rustfix in case you don't follow the book :)</p>",
        "id": 226831498,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613663724
    },
    {
        "content": "<p>hm, I guess maybe to be more concrete</p>",
        "id": 226831543,
        "sender_full_name": "simulacrum",
        "timestamp": 1613663739
    },
    {
        "content": "<p>but if you do the procedure, you won't see them</p>",
        "id": 226831551,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613663742
    },
    {
        "content": "<p>which ones?</p>",
        "id": 226831554,
        "sender_full_name": "simulacrum",
        "timestamp": 1613663742
    },
    {
        "content": "<p>let me try to write it out, but I have a call in 2 minutes...</p>",
        "id": 226831845,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613663850
    },
    {
        "content": "<p>/me is finding this conversation hard to follow. He's not sure why.</p>",
        "id": 226831875,
        "sender_full_name": "rylev",
        "timestamp": 1613663864
    },
    {
        "content": "<p>I think we're in agreement fwiw :)</p>",
        "id": 226832161,
        "sender_full_name": "simulacrum",
        "timestamp": 1613663952
    },
    {
        "content": "<p>I think we are too</p>",
        "id": 226832187,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613663964
    },
    {
        "content": "<p>I will try to make a quick write-up</p>",
        "id": 226832221,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613663978
    },
    {
        "content": "<p>and also to include specific examples</p>",
        "id": 226832231,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613663981
    },
    {
        "content": "<p>I find this much easier to follow with specific lints in mind</p>",
        "id": 226832252,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613663988
    },
    {
        "content": "<p>feeling good about it, though</p>",
        "id": 226832272,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613663999
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/268952-edition/topic/lint.20promotions/near/226830426\">said</a>:</p>\n<blockquote>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>2018</th>\n<th>2021</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>migrations</td>\n<td>opt-in warning</td>\n<td>error</td>\n</tr>\n<tr>\n<td>deprecations</td>\n<td>warn</td>\n<td>warn</td>\n</tr>\n<tr>\n<td>idioms</td>\n<td>opt-in warning</td>\n<td>warning</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<p>Just saw this table in passing -- wouldn't it be an on-by-default warning in 2018 for migrations?</p>",
        "id": 226868869,
        "sender_full_name": "scottmcm",
        "timestamp": 1613677581
    },
    {
        "content": "<p>no, there's no reason to tell people about the edition for migrations - or at least, that's my position. they'll get enabled during migration, but there's no reason to \"spam\" people telling them about the edition being ready</p>",
        "id": 226873630,
        "sender_full_name": "simulacrum",
        "timestamp": 1613679546
    },
    {
        "content": "<p>Hmm, I guess I'm thinking of the migrations from things that are already deprecated.  (Which I feel like will be the usual case, but maybe for things like keyword reservations it's not the only one?)</p>",
        "id": 226887635,
        "sender_full_name": "scottmcm",
        "timestamp": 1613685451
    },
    {
        "content": "<p>if they're deprecated then line 2 applies, though I suppose we'd sort of have:</p>\n<ul>\n<li>deprecated and migrating: warn, error</li>\n</ul>",
        "id": 226887816,
        "sender_full_name": "simulacrum",
        "timestamp": 1613685518
    },
    {
        "content": "<p>I did intend the rows to be non-exclusive</p>",
        "id": 226949351,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1613733054
    },
    {
        "content": "<p>Argh, sorry y'all, I got caught up in working on the <a href=\"https://nikomatsakis.github.io/wg-async-foundations/vision.html\">Async Vision Doc</a> and failed to write the summary -- going to take a stab at that now</p>",
        "id": 227401102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614071781
    },
    {
        "content": "<p>hacking <a href=\"https://hackmd.io/i1Ob4XS6TwuUv-rOVEoM4A\">here</a> -- as always, this is harder than it seemed at first :)</p>",
        "id": 227405290,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614074076
    },
    {
        "content": "<p>OK -- this is ready for review. I went ahead and gave it the structure of a simple RFC:</p>\n<p><a href=\"https://hackmd.io/i1Ob4XS6TwuUv-rOVEoM4A?view\">https://hackmd.io/i1Ob4XS6TwuUv-rOVEoM4A?view</a></p>",
        "id": 227415242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614079498
    },
    {
        "content": "<p>This looks great to me. I personally think putting it up as an RFC makes sense. I do think it highlights my desire to me at least for a \"I care about new warnings\" mechanism of some kind - but it's definitely not really addressable in this doc. :)</p>",
        "id": 227418568,
        "sender_full_name": "simulacrum",
        "timestamp": 1614081395
    },
    {
        "content": "<p>I agree that there is a desire for a feature like that</p>",
        "id": 227447484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614093772
    },
    {
        "content": "<p>Looking good but I still have questions (that I also let as comments in the hackmd):</p>\n<ul>\n<li>What is the distinction between errors and deny-by-default lints? </li>\n<li>Can soft deprecations be \"promoted\" to errors?</li>\n</ul>",
        "id": 227457168,
        "sender_full_name": "rylev",
        "timestamp": 1614096904
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> I think the answer is</p>\n<ul>\n<li>deny-by-default is not a recommended end-state, though it might be an option if we want to push harder against a pattern without breaking dependencies; I wouldn't move to deny-by-default in a new edition, though.</li>\n<li>can soft deprecations be promoted to hard ones? yes, but I think we don't yet have a good handle on the times when we want to do that.</li>\n</ul>",
        "id": 227465629,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614099801
    },
    {
        "content": "<blockquote>\n<p>deny-by-default is not a recommended end-state </p>\n</blockquote>\n<p>You should expand on this in the document I think and reconcile it with the existing deby-by-default lints</p>",
        "id": 227465819,
        "sender_full_name": "rylev",
        "timestamp": 1614099864
    },
    {
        "content": "<blockquote>\n<p>can soft deprecations be promoted to hard ones? yes, but I think we don't yet have a good handle on the times when we want to do that.</p>\n</blockquote>\n<p>We should talk about this since bare trait objects are likely to head in this direction</p>",
        "id": 227465970,
        "sender_full_name": "rylev",
        "timestamp": 1614099934
    },
    {
        "content": "<p>Yes</p>",
        "id": 227465995,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614099944
    },
    {
        "content": "<p>I think there's an argument for moving to hard deprecations more aggressively</p>",
        "id": 227466113,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614099977
    },
    {
        "content": "<p>I guess there are 3 options</p>",
        "id": 227466137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614099988
    },
    {
        "content": "<ul>\n<li>stay soft deprecated forever</li>\n<li>hard deprecate but only after warning has been in place for some period of time (N months?)</li>\n<li>hard deprecate all deprecations in the next edition</li>\n</ul>",
        "id": 227466272,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614100035
    },
    {
        "content": "<p>the question often comes up \"is it ok if the lint only started firing in the same release as the edition\"</p>",
        "id": 227466309,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614100053
    },
    {
        "content": "<p>personally, I don't see a problem, but it also seems like a red herring</p>",
        "id": 227466330,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614100062
    },
    {
        "content": "<p>unless the time period is measured in years</p>",
        "id": 227466372,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614100078
    },
    {
        "content": "<p>or even editons</p>",
        "id": 227466442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614100091
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/268952-edition-2021/topic/lint.20promotions/near/227466113\">said</a>:</p>\n<blockquote>\n<p>I think there's an argument for moving to hard deprecations more aggressively</p>\n</blockquote>\n<p>we should lay out the motivations <em>for</em> being aggressive though</p>",
        "id": 227466492,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614100116
    },
    {
        "content": "<blockquote>\n<p>hard deprecate but only after warning has been in place for some period of time (N months?)</p>\n</blockquote>\n<p>Correct me if I'm wrong but don't soft to hard deprecations have to happen on edition boundaries?</p>",
        "id": 227466663,
        "sender_full_name": "rylev",
        "timestamp": 1614100198
    },
    {
        "content": "<p>yes</p>",
        "id": 227466965,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614100303
    },
    {
        "content": "<p>that's implied by the description</p>",
        "id": 227466978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614100308
    },
    {
        "content": "<p>point is -- what are the conditions in which we can introduce a hard deprecation?</p>",
        "id": 227467051,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614100327
    },
    {
        "content": "<p>personally I think we can just always do it</p>",
        "id": 227467082,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614100341
    },
    {
        "content": "<p>nobody is forced to upgrade to a new edition, after all</p>",
        "id": 227467092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614100350
    },
    {
        "content": "<p>so the main question is when we <em>want</em> to</p>",
        "id": 227467127,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614100363
    },
    {
        "content": "<p>(versus just giving warnings indefinitely)</p>",
        "id": 227467154,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614100379
    },
    {
        "content": "<p>Yes. I think what's missing here maybe is a description of what various things lints are for. Lints meant for imposing good style or preventing mistakes that aren't always mistakes remain soft, but when it comes to \"fixing code\" that is now considered incorrect, we should always aim to error</p>",
        "id": 227467262,
        "sender_full_name": "rylev",
        "timestamp": 1614100424
    },
    {
        "content": "<p>Does this mean deny-by-default lints shouldn't exist ideally? What about the \"arithmetic-overflow\" lint?</p>",
        "id": 227467511,
        "sender_full_name": "rylev",
        "timestamp": 1614100516
    },
    {
        "content": "<p>I think deny-by-default is also appropriate for things like are error-like but are too heuristic to be good to <em>require</em> as part of a spec.</p>",
        "id": 227480275,
        "sender_full_name": "scottmcm",
        "timestamp": 1614105167
    },
    {
        "content": "<p>Like rust-the-spec says \"overflow wraps in release\", but that doesn't mean it shouldn't still have a lint for \"this always overflows, which sounds like it's not what you wanted\" which is still deny-by-default.</p>",
        "id": 227480430,
        "sender_full_name": "scottmcm",
        "timestamp": 1614105214
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Ryan and I got a starting point for discussion on all the idiom lints in <a href=\"https://hackmd.io/@nikomatsakis/SJggBfQbd\">https://hackmd.io/@nikomatsakis/SJggBfQbd</a></p>\n<p>(At least one of those are more \"well here's where the discussion can start\" more than \"I personally have great confidence that this is what we want\", though -- a few seem like they'll need discussion in the meeting.)</p>",
        "id": 227481662,
        "sender_full_name": "scottmcm",
        "timestamp": 1614105633
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/268952-edition-2021/topic/lint.20promotions/near/227480430\">said</a>:</p>\n<blockquote>\n<p>Like rust-the-spec says \"overflow wraps in release\", but that doesn't mean it shouldn't still have a lint for \"this always overflows, which sounds like it's not what you wanted\" which is still deny-by-default.</p>\n</blockquote>\n<p>I'm not totally convinced, but this is interesting</p>",
        "id": 227485739,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614107116
    },
    {
        "content": "<p>I was going over the deny-by-default lints</p>",
        "id": 227485754,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614107122
    },
    {
        "content": "<p>It seems to me like they could virtually all be \"hard deprecations\"</p>",
        "id": 227485780,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614107131
    },
    {
        "content": "<p>it also seems to me that there's the \"consistency across editions\" rule, if faithfully applied, might say that hard deprecations should be</p>\n<table>\n<thead>\n<tr>\n<th>Rust 2018</th>\n<th>Rust 2021</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>deny-by-default</td>\n<td>error</td>\n</tr>\n</tbody>\n</table>",
        "id": 227485853,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614107163
    },
    {
        "content": "<p>the argument here is basically that a hard deprecation is <em>almost</em> a bug-fix</p>",
        "id": 227485942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614107191
    },
    {
        "content": "<p>and not really tied to the edition in paricular</p>",
        "id": 227485968,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614107200
    },
    {
        "content": "<p>(like a bug fix, it might transition in via a warning period)</p>",
        "id": 227485998,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614107215
    },
    {
        "content": "<p>To try to elaborate on this a bit more: I know the C# spec has to spend a few pages on \"what exactly are the rules for things like when <code>while (expr)</code> is infinite\".  So I see this like how we've just said \"<code>while</code> isn't ever infinite, to the language\", but still want <em>lints</em> about \"you know that condition's always true/false, so this bit of code is unreachable\".</p>",
        "id": 227486720,
        "sender_full_name": "scottmcm",
        "timestamp": 1614107503
    },
    {
        "content": "<p>Or abstracting again, I think there's a place for flow-sensitive <code>deny</code> lints that we wouldn't want to be hard errors.</p>",
        "id": 227486872,
        "sender_full_name": "scottmcm",
        "timestamp": 1614107566
    },
    {
        "content": "<p>FWIW, I wrote guidelines on lint levels and such (<a href=\"https://rustc-dev-guide.rust-lang.org/diagnostics.html#lints-versus-fixed-diagnostics\">lint vs fixed</a> and <a href=\"https://rustc-dev-guide.rust-lang.org/diagnostics.html#diagnostic-levels\">levels</a>).  If ya'll come up with better guidelines, I think it would be nice to update that.</p>",
        "id": 227487819,
        "sender_full_name": "Eric Huss",
        "timestamp": 1614107980
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> thanks for the pointer! sorry I wasn't aware of that</p>",
        "id": 227576638,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614162061
    },
    {
        "content": "<p>Reading the comments, I'm thinking two things:</p>",
        "id": 227576949,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614162226
    },
    {
        "content": "<p>Hmm</p>",
        "id": 227577074,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614162278
    },
    {
        "content": "<table>\n<thead>\n<tr>\n<th>name</th>\n<th>Edition N</th>\n<th>Edition N+1</th>\n<th>Migrations?</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>repurposed syntax</td>\n<td>opt-in warning</td>\n<td>new meaning</td>\n<td>mandatory</td>\n</tr>\n<tr>\n<td>removed syntax (or semantics)</td>\n<td>opt-in warning</td>\n<td>error</td>\n<td>mandatory</td>\n</tr>\n<tr>\n<td>soft deprecations</td>\n<td>warn</td>\n<td>warn</td>\n<td>recommended</td>\n</tr>\n<tr>\n<td>hard deprecations</td>\n<td>warn -&gt; deny</td>\n<td>warn -&gt; deny</td>\n<td>recommended</td>\n</tr>\n<tr>\n<td>bug fix</td>\n<td>warn -&gt; error</td>\n<td>warn -&gt; error</td>\n<td>recommended</td>\n</tr>\n</tbody>\n</table>",
        "id": 227577359,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614162426
    },
    {
        "content": "<p>maybe this</p>",
        "id": 227577371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614162431
    },
    {
        "content": "<p>it's plausible that we remove syntax without deprecating it</p>",
        "id": 227577492,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614162494
    },
    {
        "content": "<p>although I find that a bit of a stretch</p>",
        "id": 227577508,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614162517
    },
    {
        "content": "<p>I'm trying to think of an example</p>",
        "id": 227577525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614162531
    },
    {
        "content": "<p>I'm trying to decide, <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span>, what I think about your examples of \"Deny by default\" lints that might stay that way forever</p>",
        "id": 227577554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614162549
    },
    {
        "content": "<p>I feel like it violates one of my \"lint tenets\", which is that there should always be a better way to write the code that doesn't trigger the lint</p>",
        "id": 227577594,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614162569
    },
    {
        "content": "<p>I'm not 100% sure how much I believe in that tenet, I've sometimes argued against it, but I've definitely observed that people like it :)</p>",
        "id": 227577622,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614162590
    },
    {
        "content": "<p>maybe it doesn't apply in the case of \"code that is <em>almost certainly</em> a bug\"</p>",
        "id": 227577708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614162615
    },
    {
        "content": "<p>but I think that e.g. for overflowing literals, I'd rather that we advised people to move from <code>255_u8 + 22_u8</code> to <code>25_u8.overflowing_add(22_u8)</code> or whatever that methods is called</p>",
        "id": 227577755,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614162655
    },
    {
        "content": "<p>let me review the categorizations you + <span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> did, it might affect my opinion</p>",
        "id": 227577795,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614162677
    },
    {
        "content": "<p>you mean <code>wrapping_add</code></p>",
        "id": 227808562,
        "sender_full_name": "Jubilee",
        "timestamp": 1614275500
    },
    {
        "content": "<p>or possibly <code>checked_add</code>, because you can't simply move to <code>overflowing_add</code>, because that returns a tuple instead of a Some(u8) / None, so you have to... well, you have to deconstruct the tuple anyways. There are unfortunately quite a lot of different methods that are \"do something specific on hitting the numeric bounds\" like that.</p>",
        "id": 227808795,
        "sender_full_name": "Jubilee",
        "timestamp": 1614275620
    },
    {
        "content": "<p>I meant <code>wrapping_add</code>, yes</p>",
        "id": 227955371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614358006
    },
    {
        "content": "<p>but actually my example was flawed</p>",
        "id": 227955401,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614358026
    },
    {
        "content": "<p>I think the lint in question was for literals like <code>257u8</code></p>",
        "id": 227955426,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614358037
    },
    {
        "content": "<p>so <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span>, <span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> -- there is some follow-up needed from the last meeting to consolidate thinking etc</p>",
        "id": 227955469,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614358059
    },
    {
        "content": "<p>Yes, there were lints we didn't get to and we never addressed future compatibility lints which while not strictly an edition topic, are an interesting lint topic for discussion.</p>",
        "id": 227961978,
        "sender_full_name": "rylev",
        "timestamp": 1614360812
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> can we set a meeting to regroup on the current state and decide if we need the lang team to continue the discussion? (Maybe a 15 minute sync with the three of us on Zulip or Zoom?)</p>",
        "id": 228214345,
        "sender_full_name": "rylev",
        "timestamp": 1614597962
    },
    {
        "content": "<p>I think that's a good idea and I was going to suggest something similar</p>",
        "id": 228253265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614613833
    },
    {
        "content": "<p>I'd prefer Zulip I think</p>",
        "id": 228253285,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614613841
    },
    {
        "content": "<p>it might be hard to find a time that works for everyone</p>",
        "id": 228253378,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614613873
    },
    {
        "content": "<p>I could do <time datetime=\"2021-03-02T19:30:00Z\">2021-03-02T14:30:00-05:00</time>, but that may be too late for you, <span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> ?</p>",
        "id": 228253632,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614613960
    },
    {
        "content": "<p>Works for me. I usually work late on Tuesdays anyway <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 228253904,
        "sender_full_name": "rylev",
        "timestamp": 1614614053
    },
    {
        "content": "<p>Unfortunately that's exactly when standup is for my $RealJob.  Any chance of a different time?  My entire tuesday is open except for that slot <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 228283710,
        "sender_full_name": "scottmcm",
        "timestamp": 1614624043
    },
    {
        "content": "<p>I could do <time datetime=\"2021-03-02T20:00:00Z\">2021-03-02T15:00:00-05:00</time> if that works for <span class=\"user-mention\" data-user-id=\"224872\">@rylev</span></p>",
        "id": 228447612,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614705273
    },
    {
        "content": "<p>That's fine</p>",
        "id": 228447658,
        "sender_full_name": "rylev",
        "timestamp": 1614705288
    },
    {
        "content": "<p>ok, updated calendar invite</p>",
        "id": 228447685,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614705300
    },
    {
        "content": "<p>When did the meeting end up being scheduled for?</p>",
        "id": 228466033,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614711678
    },
    {
        "content": "<p><time datetime=\"2021-03-02T20:00:00Z\">2021-03-02T21:00:00+01:00</time></p>",
        "id": 228466362,
        "sender_full_name": "rylev",
        "timestamp": 1614711807
    },
    {
        "content": "<p>So, 54 minutes from now?</p>",
        "id": 228466945,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614712022
    },
    {
        "content": "<p>Ah, OK. That's at the same time as the Cargo meeting, so I won't be able to join. That's alright; I look forward to seeing the result.</p>",
        "id": 228466996,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614712047
    },
    {
        "content": "<p>I would be interested in joining, but mostly because I likely have feelings :)</p>",
        "id": 228469433,
        "sender_full_name": "simulacrum",
        "timestamp": 1614712993
    },
    {
        "content": "<p>Is there any planned change to the proposal of \"make individual PRs for lints and FCP them\"?</p>",
        "id": 228471391,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614713735
    },
    {
        "content": "<p>I don't believe we've reached 100% consensus but I'd personally like to create a single PR for all edition related lints</p>",
        "id": 228475191,
        "sender_full_name": "rylev",
        "timestamp": 1614715186
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> were we going to use Zoom or another video app?</p>",
        "id": 228475431,
        "sender_full_name": "rylev",
        "timestamp": 1614715252
    },
    {
        "content": "<p>I guess I didn't specify</p>",
        "id": 228475517,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614715282
    },
    {
        "content": "<p>we can just use the zoom room from the lang team invite?</p>",
        "id": 228475573,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614715303
    },
    {
        "content": "<p>I don't think we plan to record, right?</p>",
        "id": 228475617,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614715319
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 228475714,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614715344
    },
    {
        "content": "<p>I don't think there's a need to record. We'll note everything of importance separately</p>",
        "id": 228475720,
        "sender_full_name": "rylev",
        "timestamp": 1614715346
    },
    {
        "content": "<p><a href=\"https://hackmd.io/7YycPi5ORhiXbualfhaQRw\">https://hackmd.io/7YycPi5ORhiXbualfhaQRw</a></p>",
        "id": 228475865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614715395
    },
    {
        "content": "<p>Did we reach consensus on <code>ELIDED_LIFETIMES_IN_PATHS</code>? Are we going to split the lint? I suppose this is not an edition question though since neither split lint will become an error in 2021.</p>",
        "id": 228564939,
        "sender_full_name": "rylev",
        "timestamp": 1614765627
    },
    {
        "content": "<p>I've <a href=\"https://github.com/rust-lang/rust/issues/80165#issuecomment-789598616\">updated the tracking issue</a>. Only <code>BARE_TRAIT_OBJECTS</code> and <code>ELLIPSIS_INCLUSIVE_RANGE_PATTERNS</code> will be promoted to errors in Rust 2021. Everything else can either be left to a later edition or are not actually edition related.</p>",
        "id": 228566562,
        "sender_full_name": "rylev",
        "timestamp": 1614766356
    },
    {
        "content": "<p>I believe we'll want to circle back around with the lang team one last time to close this out. Shall I nominate the tracking issue again?</p>",
        "id": 228566654,
        "sender_full_name": "rylev",
        "timestamp": 1614766402
    },
    {
        "content": "<p>(btw all the future compatibility lints are indeed bug fixes and can be turned into errors for all editions at any time - so they're not relevant for the edition discussion)</p>",
        "id": 228567965,
        "sender_full_name": "rylev",
        "timestamp": 1614766767
    },
    {
        "content": "<p>There are two deny-by-default lints that <em>might</em> make sense for promotion to hard errors: <code>USELESS_DEPRECATED</code> and <code>NO_MANGLE_CONST_ITEMS</code>. These aren't future compatbility lints but there's no reason one should write them. Thoughts?</p>",
        "id": 228594749,
        "sender_full_name": "rylev",
        "timestamp": 1614779773
    },
    {
        "content": "<p>I'm struggling to find any information on either of those, but making them hard errors like we have with inline, used, etc. in similar places feels at least consistent, even if I'm still not sure that it's the right decision.</p>",
        "id": 228598911,
        "sender_full_name": "simulacrum",
        "timestamp": 1614781218
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224872\">rylev</span> <a href=\"#narrow/stream/268952-edition-2021/topic/lint.20promotions/near/228564939\">said</a>:</p>\n<blockquote>\n<p>Did we reach consensus on <code>ELIDED_LIFETIMES_IN_PATHS</code>? Are we going to split the lint? I suppose this is not an edition question though since neither split lint will become an error in 2021.</p>\n</blockquote>\n<p>I think we decided to split it so that we'd get more information about which parts people are <code>allow</code>ing, and potentally to be stricter about the parts with broad agreement.</p>\n<p>I don't know that we had a clear decision about what the split actually <em>should be</em>, though.</p>\n<ul>\n<li>My proposal is still that it be \"ones which participate in elision\" vs \"those which are unconstrained\", so <code>fn foo(x: Ref&lt;T&gt;) -&gt; &amp;T</code> would lint the <code>Ref&lt;T&gt;</code> should be <code>Ref&lt;'_, T&gt;</code>.</li>\n<li>Alternatively,<ul>\n<li>Those in the return type vs those in arguments (which is subset of the previous, as unnamed lifetimes are only allowed in the return type when elided)</li>\n<li>Between \"top-level\" lifetimes and those that are \"covered\" by another lifetime (typically a <code>&amp;</code>, like <code>&amp;Formatter</code>)</li>\n</ul>\n</li>\n</ul>",
        "id": 228628131,
        "sender_full_name": "scottmcm",
        "timestamp": 1614791067
    },
    {
        "content": "<p>I agree with \"lifetimes that participate in elison\", though I also would like the qualifier \"and aren't covered by a reference with the same lifetime\".</p>",
        "id": 228630999,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614792113
    },
    {
        "content": "<p>Hmm, is it even possible to elide the two lifetimes in <code>-&gt; &amp;Ref&lt;T&gt;</code>?</p>",
        "id": 228637961,
        "sender_full_name": "scottmcm",
        "timestamp": 1614794648
    },
    {
        "content": "<p>I agree with <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span>'s split</p>",
        "id": 228692044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614816425
    },
    {
        "content": "<p>(\"those which participate in elision\")</p>",
        "id": 228692064,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614816436
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/268952-edition-2021/topic/lint.20promotions/near/228630999\">said</a>:</p>\n<blockquote>\n<p>I agree with \"lifetimes that participate in elison\", though I also would like the qualifier \"and aren't covered by a reference with the same lifetime\".</p>\n</blockquote>\n<p>My understanding for \"participate in elision\" is that the <code>&amp;Formatter</code> and <code>&amp;mut Context</code> examples do not participate in elision, and thus those ones would not be linted by the \"participate in elision\" lint.</p>\n<p>Were you thinking of a particular example of that?  I tried <code>fn foo(x: &amp;Ref&lt;i32&gt;) -&gt; &amp;i32</code>, but that's already an error.  I guess <code>fn bar(x: &amp;i32) -&gt; &amp;Ref&lt;i32&gt;</code> compiles today?  I don't know that I've ever seen such a thing in real code, though -- I kinda wish it didn't work, in fact, since it's <code>-&gt; &amp;'a Ref&lt;'a, i32&gt;</code>, and the lifetime getting put in both places seems sketchy.</p>",
        "id": 228714728,
        "sender_full_name": "scottmcm",
        "timestamp": 1614831943
    },
    {
        "content": "<p>I think the example that <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> was thinking of is</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">Ref</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 228754561,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614856871
    },
    {
        "content": "<p>Tangentially, macro authors may wish to have a lint to deny the elided lifetimes in <em>all</em> paths (if we ignore the fact that for technical reasons,  <code>elided_lifetimes_in_paths</code> can currently only be applied at the crate level), so as to be able to spot potential \"higher-order\" types and similar stuff. See <a href=\"https://github.com/rust-lang/rust/issues/71957#issuecomment-789709322\">this comment</a>.</p>\n<ul>\n<li>(Relatedly, a lint against implicitly elided lifetimes in trait objects would be nice, although macros don't need that one that bad (thanks to <code>deny(bare_trait_objects)</code>, these cannot disguise as classic type paths))</li>\n</ul>",
        "id": 228806565,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1614876092
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I was actually thinking of <code>&amp;Ref&lt;i32&gt;</code>, where there's a \"covering\" reference and thus a covering lifetime; that's the case where I don't think you need to be required to write <code>&amp;Ref&lt;'_, i32&gt;</code> or similar.</p>",
        "id": 228824357,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614882239
    },
    {
        "content": "<p>That's what I meant, but from the other perspective</p>",
        "id": 228824447,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614882258
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span> Yeah, I think it's reasonable to have an allow-by-default lint against all elision.</p>",
        "id": 228824454,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614882261
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Ah, got it.</p>",
        "id": 228824483,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614882270
    },
    {
        "content": "<p>Yes, the example you gave is a case where I <em>would</em> want to see the <code>'_</code> added.</p>",
        "id": 228824532,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614882288
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/268952-edition-2021/topic/lint.20promotions/near/228824357\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> I was actually thinking of <code>&amp;Ref&lt;i32&gt;</code>, where there's a \"covering\" reference and thus a covering lifetime; that's the case where I don't think you need to be required to write <code>&amp;Ref&lt;'_, i32&gt;</code> or similar.</p>\n</blockquote>\n<p>Can you show the full signature you were thinking about?  Because <code>&amp;Ref&lt;i32&gt;</code> behaves differently in different places.</p>",
        "id": 228831334,
        "sender_full_name": "scottmcm",
        "timestamp": 1614884798
    },
    {
        "content": "<p>I was thinking of something like <code>fn f(x: &amp;Something) -&gt; &amp;Ref&lt;T&gt;</code>.</p>",
        "id": 229077378,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615017410
    },
    {
        "content": "<p>Or something similar with &amp;Ref in the parameter.</p>",
        "id": 229077396,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615017440
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/268952-edition-2021/topic/lint.20promotions/near/229077378\">said</a>:</p>\n<blockquote>\n<p>I was thinking of something like <code>fn f(x: &amp;Something) -&gt; &amp;Ref&lt;T&gt;</code>.</p>\n</blockquote>\n<p>For that use case exactly I'm with <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> on this one: ideally lifetime elision in the return type would not apply to <em>nested</em> borrows, since that pattern is rarely the right one, and very often a code smell that leads to <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=d8120cf3129eb6d05f621a549afa2d6e\">over-restrictive APIs</a>. In other words, if lifetime elision exists, it's to alleviate writing the pervasive <em>idiomatic</em> patterns, and sadly <code>-&gt; &amp;Ref&lt;T&gt;</code> is not one of them. (Granted, for this example, spelling out <code>-&gt; &amp;Ref&lt;'_, T&gt;</code> does not improve the situation <em>that</em> much, although I do consider that it slightly improves it).</p>\n<hr>\n<p>As a parameter, on the other hand, if <code>&amp;Ref&lt;T&gt;</code> appears within a function signature that currently compiles, it necessarily means that it is not participating in the elision of the lifetimes in output position, so it not requiring the extra <code>'_, </code>  generic parameter is already covered by the \"requiring it only for lifetimes participating in elision\" rule <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 229102525,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1615041265
    },
    {
        "content": "<p>That's a really good playground demo.  Makes me want to disable elision for that case.</p>",
        "id": 229152713,
        "sender_full_name": "scottmcm",
        "timestamp": 1615088637
    },
    {
        "content": "<p>Note that on the question of whether there are compatbility lints that might require an edition to change into an error (because doing it across editions would introduce too much breakage): I'm going to look into which lints might fall in this category so we can discuss them.</p>",
        "id": 229516638,
        "sender_full_name": "rylev",
        "timestamp": 1615310782
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Here is the list of currently deny-by-default future compatibility lints. We should discuss if we want to move some of these lints from their current position as deny-by-default to errors on an edition boundary. The criteria for this would be if we believe doing this across edition boundaries would lead to too much breakage. I assume the best way to go about that is a crater run. Thoughts?</p>\n<div class=\"codehilite\"><pre><span></span><code>pub_use_of_private_extern_crate\nambiguous-associated-items\nconflicting-repr-hints\nill-formed-attribute-input\nincomplete-include\ninvalid-type-param-default\nmacro-expanded-macro-exports-accessed-by-absolute-paths\nmissing-fragment-specifier\norder-dependent-trait-objects\npatterns-in-fns-without-body\nsoft-unstable\n</code></pre></div>",
        "id": 230014606,
        "sender_full_name": "rylev",
        "timestamp": 1615549002
    },
    {
        "content": "<p>Is that the criteria?</p>",
        "id": 230030271,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615556747
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> I'm feeling a bit adrift on this topic, is there a \"summary write-up\" of the work we have done and the work to do somewhere?</p>",
        "id": 230030354,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615556769
    },
    {
        "content": "<p>sorry for my inability to retain context</p>",
        "id": 230030371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615556773
    },
    {
        "content": "<p>I think the criteria <span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> meant should be the opposite, right? That is, \"moving them to hard error across all editions leads to too much breakage\"</p>",
        "id": 230030482,
        "sender_full_name": "simulacrum",
        "timestamp": 1615556822
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> is correct - my writing is super unclear (sorry about that), but that's the way to interpret what I meant.</p>",
        "id": 230039712,
        "sender_full_name": "rylev",
        "timestamp": 1615560192
    },
    {
        "content": "<p>I can do a short write up of this issue.</p>",
        "id": 230039742,
        "sender_full_name": "rylev",
        "timestamp": 1615560202
    },
    {
        "content": "<p>I don't think the criteria should just be that making them a hard error in every addition doesn't produce substantial breakage in crater. I think the criteria should also be that we gain substantial value by making them a hard error. For example, if we need to reclaim or repurpose syntax, or if we can give better error messages, or similar.</p>",
        "id": 230067566,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615570086
    },
    {
        "content": "<p>(or if there's any soundness issue)</p>",
        "id": 230067644,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615570129
    },
    {
        "content": "<p>I looked at patterns-in-fns-without-body, which points to <a href=\"https://github.com/rust-lang/rust/issues/35203\">https://github.com/rust-lang/rust/issues/35203</a>, which says</p>\n<blockquote>\n<p>By restricting patterns in body-less function signatures to ident: TYPE we can make argument names optional and accept simply a TYPE in argument position (type T = fn(u8)) without introducing parsing ambiguities.</p>\n</blockquote>\n<p>But didn't we do a change for 2018 that says you <em>cannot</em> provide just a type for a trait-method-without-body?  So I feel like this needs reconsidering.</p>",
        "id": 230074242,
        "sender_full_name": "scottmcm",
        "timestamp": 1615572790
    },
    {
        "content": "<p>In general, I wonder if any future-incompat from before editions existed ought to be reconsidered to determine whether it should be an edition change instead.</p>",
        "id": 230074307,
        "sender_full_name": "scottmcm",
        "timestamp": 1615572826
    },
    {
        "content": "<p>That one lint looks like it has different parts -- the \"it accepted <code>fn foo(&amp;x: u8);</code> in a trait\" part seems like definitely a bug, and worthy of future-incompat.  But the part that's rejecting <code>fn foo(mut x: u8);</code>?  That seems worth linting, but I don't know that it deserves a hard error (maybe ever).</p>",
        "id": 230074983,
        "sender_full_name": "scottmcm",
        "timestamp": 1615573157
    },
    {
        "content": "<p>I think petrochenkov gave a pretty good reasoning for not allowing that <a href=\"https://github.com/rust-lang/rust/issues/35203#issuecomment-345443920\">here</a>.  The <code>mut</code> serves no purpose, does it?  </p>\n<p>If it becomes a hard error, it can still provide a suggestion to remove it.  I think it follows similar reasoning that other patterns are hard errors, like <code>ref foo</code>.  It seems strange to me to have this in-between status just for <code>mut ident</code>.</p>",
        "id": 230078679,
        "sender_full_name": "Eric Huss",
        "timestamp": 1615574783
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> In trying to write up the question posed above about moving deny-by-default future incompatible warnings to hard errors (and when such a transition needs to happen on an edition boundary), I wrote up a document detailing future incompatibility warnings. It would be nice to come to some sort of documented conclusion about this: <a href=\"https://hackmd.io/@ryanlevick/SkmhZ227d\">https://hackmd.io/@ryanlevick/SkmhZ227d</a> cc <span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> who has also been involved in these discussions and seems to remember context from the 2018 edition discussions.</p>",
        "id": 230323833,
        "sender_full_name": "rylev",
        "timestamp": 1615804981
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> I read over your document. I have a few comments about it:</p>\n<p>There are two classes of edition lints.  \"Compatibility\" lints which are usually allow-by-default, and only enabled on the edition boundary and transition is done with <code>cargo fix --edition</code>.  The other category is the \"idioms\" lints, which are stylistic.  <code>bare-trait-objects</code> is an example (I don't think <code>array-into-iter</code> is an edition lint).  These can be transitioned at any time with <code>cargo fix --edition-idioms</code>. Idiom lints have a more complex history, as most of them are still in the \"allow\" state.  There was intent to turn them on, but I think after 2018, nobody wanted to work on them.</p>\n<p>Also, in terms of procedure for elevating future-compat lints, I think the future-incompat-report system will be an important part of that story. The initial implementation just landed on nightly about a week ago.  I think once that stabilizes, that will provide valuable information on how safe it will be to elevate future-compat lints.</p>",
        "id": 230350408,
        "sender_full_name": "Eric Huss",
        "timestamp": 1615817482
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> thanks for the context. I can update the document with this. As for <code>array-into-iter</code>, it is listed <a href=\"https://github.com/rust-lang/rust/blob/7a7bbdb3abfa72ca717ef54ffc4f307d0d44de67/compiler/rustc_lint/src/array_into_iter.rs#L35-L45\">in the compiler</a> as a <code>future_incompatible</code>. This is an example where it seems like the way the lints are treated in the compiler vs how we think about them is not 100% aligned.  </p>\n<p>I'll make sure that I add a section about the future-incompat-report system.</p>",
        "id": 230356895,
        "sender_full_name": "rylev",
        "timestamp": 1615819845
    },
    {
        "content": "<p>First PR is out for this: <a href=\"https://github.com/rust-lang/rust/pull/83213\">https://github.com/rust-lang/rust/pull/83213</a></p>",
        "id": 230588875,
        "sender_full_name": "rylev",
        "timestamp": 1615927829
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> Left some comments. The analysis of FCWs is mostly accurate; but loads of details about editions are missed, in particular your document kinda conflates idiom and migration lints. Happy to talk more about this if you need.</p>",
        "id": 231129597,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1616225711
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> we are revisiting some of these terms =)</p>",
        "id": 231141164,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616240308
    },
    {
        "content": "<p>trying to write-up an overall policy around lints, deprecatiosn, etc that where editions are one tool but ultimately you classify the warning according to some criteria and goals and it guides you to the right thing</p>",
        "id": 231141197,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616240379
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Makes sense, but it feels weird to reuse the same terminology that way? And the first PR that has come out of the doc (<a href=\"https://github.com/rust-lang/rust/pull/83213#issuecomment-803266195\">https://github.com/rust-lang/rust/pull/83213#issuecomment-803266195</a>) got it \"wrong\" according to the existing edition policy -- it introduces a hard error but does not introduce anything that works with <code>cargo fix</code> to fix it</p>",
        "id": 231149704,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1616250627
    },
    {
        "content": "<p>Not to pick on Ryan but that's a _pretty large_ change from the old policy</p>",
        "id": 231149726,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1616250657
    },
    {
        "content": "<p>My hesitation with \"we're revisiting this\" is that the current policy is one that took multiple false starts to get to because back then we also didn't think it was necessary, and then after a bunch of work realized it was, so I'm wary of changing it without having the same context because I feel like we'll fall down the same rabbithole.</p>",
        "id": 231150679,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1616251701
    },
    {
        "content": "<p>Revisiting just the terms is fine i guess, though making one of the terms mean the other one seems confusing</p>",
        "id": 231150763,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1616251806
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132040\">Manish Goregaokar</span> <a href=\"#narrow/stream/268952-edition-2021/topic/lint.20promotions/near/231149704\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> Makes sense, but it feels weird to reuse the same terminology that way? And the first PR that has come out of the doc (<a href=\"https://github.com/rust-lang/rust/pull/83213#issuecomment-803266195\">https://github.com/rust-lang/rust/pull/83213#issuecomment-803266195</a>) got it \"wrong\" according to the existing edition policy -- it introduces a hard error but does not introduce anything that works with <code>cargo fix</code> to fix it</p>\n</blockquote>\n<p>This might be because I (mistakenly?) thought it would be fine to introduce the <code>cargo fix</code> in a separate PR. There is definitely a plan to have a fix.</p>",
        "id": 231324704,
        "sender_full_name": "rylev",
        "timestamp": 1616425356
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> I left a comment on the PR but I can't quite tell what you are saying. I feel like there are a few entangled threads I would like to sort out. One of them is a question of <em>policy</em> and one of them is a more a <em>technical question</em> -- what will <em>actually work</em>.</p>\n<p>I'd love to hear what you see as the 'hard constraints' and other key insights that you found in 2018 so we can make sure we are preserving them.</p>",
        "id": 231326679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616425994
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> It seems like there was a bunch of decisions reached in 2018, but I've not been able to find documentation on such decisions - I wasn't around for such discussions in 2018 so I think I'm missing a lot of context. If you can point me to that documentation, that would be <em>really</em> great. I think we're interested in potentially progressing the policy forward with the learnings of the past 3 years, but having the status quo policy in clear prose for us to compare to would make this much easier.</p>",
        "id": 231327564,
        "sender_full_name": "rylev",
        "timestamp": 1616426257
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> Unfortunatley there isn't any documentation.</p>\n<p>For context the RFCs in 2018 were extremely light on how the migration would work. I signed up to implement the migrations, but when I started I realized that there wasn't a proper documented plan. That would have been fine except each lang team member seemed to have a _different_ idea as to what the plan should be. So I had to do some ad-hoc design work on this, the whole concept of the migration/idiom split comes from weeks of trying other things, discussing a lot, and eventually figuring out what we _actually_ needed. After which we implemented a lot of the lints, but had to go back to the drawing board when we discovered that some imperfections which were purported to not be a problem actually were one, and since these imperfections had never been gamed out we had to re-plan a couple things.</p>\n<p>Basically, what should have been a couple weeks of work turned into months of work, and people were far too burnt out to actually document any of this after since it had already ballooned in scope immensely. I really wanted to write a separate RFC that constrained edition changes in the future to take some of these steps, but it was kinda too stressful (there were also some arguments with specific toxic individuals i would have had to have to just justify that this is important to think about, that part is no longer a problem). By the time I felt less stressed out it was already 2020, at which point it was suggested this be rolled into the 2021 RFC. I did say a bunch of this during its initial stages and a lot of this was worked in.</p>\n<blockquote>\n<p>This might be because I (mistakenly?) thought it would be fine to introduce the cargo fix in a separate PR. There is definitely a plan to have a fix.</p>\n</blockquote>\n<p>It's totally fine if done in a separate PR, I'm very strongly of the opinion that the _plan should be written down, along with contingencies_.</p>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Yeah I'm working on writing this down. I'll first write down the policy  I _wanted_ to write after 2018, and then the technical status quo, and you can lift whatever you need from it.</p>",
        "id": 231341320,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1616430470
    },
    {
        "content": "<p>I'm realizing now that I should not have relied on there being \"compiler/lang team members who remember all the nuances of 2018\" for this to work well in 2021, sorry about that</p>",
        "id": 231344361,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1616431559
    },
    {
        "content": "<p>OK. So the main constraints I remember are:</p>\n<ul>\n<li>Automated migrations target the intersection of editions, so that things can be moved piecemeal; this requires ensuring that there <em>is</em> a satisfying intersection.</li>\n<li>We can have lints (\"idiom lints\") that do cleanup in the newer editions. We've often debated the semantics of this, as another way to view things is that these are just cleanup lints that trigger only when they're applicable (and hence they don't fire in previous editions, to avoid false warnings), but I think this is mostly a question of terminology. </li>\n</ul>\n<p>Based on the PR, it sounded like there were a few other details about lint groups and things that need to be spelled out (and in particular if there are challenges from having a single lint in multiple groups; I'd like to understand that better, but we could always have clones of lints if needed). </p>\n<p>We've since been overhauling the policy to try and have a cleaner way for us to talk about why we're making the change and what that means -- I view editions as part of this change but not the entirety of it, they're a tool in the toolbox. I think that's effectively orthogonal.</p>",
        "id": 231354852,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616435406
    },
    {
        "content": "<p>Alright, wrote down the policy from 2018, plus details on implementation, in <a href=\"https://hackmd.io/@nbw0Mih0RLieoV6JBAtI3Q/SyFshP84O\">https://hackmd.io/@nbw0Mih0RLieoV6JBAtI3Q/SyFshP84O</a> cc <span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> . Please let me know if it's missing something!</p>",
        "id": 231402850,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1616457444
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> -- will take a look soon!</p>",
        "id": 231649818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616598397
    },
    {
        "content": "<p>I'm running behind this week, but I hope to be able to look at this tomorrow.</p>",
        "id": 231670602,
        "sender_full_name": "rylev",
        "timestamp": 1616605350
    },
    {
        "content": "<p>I finally had enough time to read this. Thank you <span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span>! I think it looks good, and I think the thinking lines up relatively well with the talks we were having for 2021. We should definitely get this stored in some place so we don't end up doing the same exercise for the next Rust edition. <br>\nThat being said, I think the most pressing issue we're facing is not answered by this document although it is mentioned. We have two idiom lints that we want to turn into hard errors in Rust 2021. We need to make sure there's a way to ensure that migration lints work even if the lint has been allowed.</p>",
        "id": 233515610,
        "sender_full_name": "rylev",
        "timestamp": 1617811022
    },
    {
        "content": "<p>On the <a href=\"https://github.com/rust-lang/rust/pull/83213#issuecomment-812545425\">PR</a> itself, there's still ambiguity on whether this question needs to be solved before merging or if it's ok to merge and then figure out the plan.</p>",
        "id": 233516015,
        "sender_full_name": "rylev",
        "timestamp": 1617811179
    },
    {
        "content": "<p>The issue is still nominated for the lang team discussion. Perhaps the lang team needs to discuss what migration path for such changes they would like to see happen. Though it seems like the PR might be able to be merged as is and any concerns around migration can be fixed in later PRs.</p>",
        "id": 233516586,
        "sender_full_name": "rylev",
        "timestamp": 1617811359
    },
    {
        "content": "<p>(with the small changes requests from Niko applied of course)</p>",
        "id": 233516890,
        "sender_full_name": "rylev",
        "timestamp": 1617811460
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> I don't think there's ambiguity on the PR -- I've stated this multiple times; but my only blocking concern there is that the lint is currently not hooked up to the migration lint machinery. We can worry about whether lint-was-allowed is in scope later, that's fine. (I woudl prefer that in the future these things get figured out first as detailed in my doc, but it's minor here)</p>",
        "id": 233526555,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1617815160
    },
    {
        "content": "<p>OK, I too finally read this. Apologies <span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> for being slow, and thank you for doing a detailed write-up.</p>",
        "id": 234172341,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618239026
    },
    {
        "content": "<p>I will integrate some of that text into the 2021 RFC as well, as requested</p>",
        "id": 234172401,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618239042
    },
    {
        "content": "<p>I do have a few thoughts:</p>\n<ul>\n<li>I'm not convinced idiom lints are an important thing to distinguish going forward. I think these are basically just style lints, but like any lint, they should avoid false warnings and not offer inapplicable suggestions.</li>\n</ul>",
        "id": 234172576,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618239111
    },
    {
        "content": "<ul>\n<li>The point about the danger of compatibility lints serving multiple purposes is well taken. I am debating what I think is the best way to fix this. I definitely think there are times when we will want to have things that are both <em>deprecated</em> and will become a hard error in the next edition -- in fact, this seems fairly common.</li>\n</ul>",
        "id": 234172782,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618239171
    },
    {
        "content": "<p>I think in my ideal world we would be able to (a) have lints in multiple groups and (b) have <code>cargo fix</code> supply the \"inverse\" of cap-lints, a kind of \"minimum lint severity\" for things that have to do with migration. Maybe a better way to think of it would be that it has some kind of option that just overrides all other lint settings and says <strong>always trigger lints in this group</strong></p>",
        "id": 234172910,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618239223
    },
    {
        "content": "<p>(OTOH, is it useful for folks to be able to <code>#[allow]</code> lints and things if they know cargo fix will misbehave? not sure.)</p>",
        "id": 234172978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618239244
    },
    {
        "content": "<p>Regardless, I'd like to separate out this question, which is something of an impl concern, from how we message things to people. I think what I would recommend is that RFCs have to detail out any migrations required (i.e., compatibility), and then that they also discuss style lints and rewrites, but those are not considered part of the edition migration <em>per se</em>.</p>",
        "id": 234173135,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618239298
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> thanks! Not all idiom lints are \"just style lints\" -- for example, for the 2018 path updates there _had_ to be a two step process, where the intermediate state was not great at all. The two-step process is important for flexibility; I think there's a distinction between \"some things don't need to be idiom lints and can just be regular future incompat\" and \"some changes need a compat + idiom lint to be robust\"</p>",
        "id": 234174024,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1618239606
    },
    {
        "content": "<p>I don't think RFCs should be required to include \"pure style lint\" idiom lints; but if an RFC has a two-step migration process I think it should include both steps because both steps integrate well</p>",
        "id": 234174360,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1618239663
    },
    {
        "content": "<p>I'm saying this because when it came to the path RFC I went around talking to each lang stakeholder and they had a completely different (and often unworkable) idea of how the migration would work, and I had to eventually sit down and invent the two-step process -- the two-step process is, for some changes, critical to a proper migration</p>",
        "id": 234174665,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1618239718
    },
    {
        "content": "<p>I don't think the fact that there had to be a two-step process means we need a category for it</p>",
        "id": 234175038,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618239789
    },
    {
        "content": "<p>I think we would just fire those lints all the time</p>",
        "id": 234175084,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618239797
    },
    {
        "content": "<p>but what you're saying makes sense about detailing out the two step plan</p>",
        "id": 234176033,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618240025
    },
    {
        "content": "<p>(and I would expect to do so)</p>",
        "id": 234176066,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618240033
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yeah that's totally fair! The category existed because at the time there were concerns about making them unconditionally Warn.</p>\n<p>But I do feel like the _conceptual_ category -- to be included in relevant RFCs, to be recognized in cargo fix -- should exist</p>",
        "id": 234176157,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1618240078
    },
    {
        "content": "<p>as in, we should talk about it</p>",
        "id": 234176212,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1618240088
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"224872\">@rylev</span>, <span class=\"user-mention\" data-user-id=\"310399\">@Mara</span>, <span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> -- I <a href=\"https://gist.github.com/nikomatsakis/9e3e1b9117839aa80a803b1faf320ef9\">wrote up the idea</a> to manage having a single lint that is both in the rust-2021 editions group <em>and</em> elsewhere. After writing it up, I did start to wonder if it's worth the trouble, versus having a fresh copy of the lint that is <em>just</em> for the migration (and writing a bit of logic to make that nice and easy to do).</p>",
        "id": 234203891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618250718
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> I took some educated guesses as to what makes it hard to have a lint be a member of multiple groups.</p>",
        "id": 234203932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618250738
    },
    {
        "content": "<p>sweet</p>",
        "id": 234203955,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1618250747
    },
    {
        "content": "<p>And yeah I had proposed just duplicatinh the lint :)</p>",
        "id": 234203975,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1618250756
    },
    {
        "content": "<p>Right</p>",
        "id": 234203997,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618250763
    },
    {
        "content": "<p>that (initially) seemed gross to me but .. otoh... who cares</p>",
        "id": 234204045,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618250772
    },
    {
        "content": "<p>especially if the \"migration lints\" are conisdered kind of \"internal\" that users don't see</p>",
        "id": 234204075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618250782
    },
    {
        "content": "<p>(i.e., because they are enabled just by <code>cargo rustfix</code>, and then just processed automatically)</p>",
        "id": 234204173,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618250831
    },
    {
        "content": "<p>I think this is largely true, right?</p>",
        "id": 234204184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618250837
    },
    {
        "content": "<p>Yeah, there should be no reason I think to enable a specific one (vs. the whole set), too.</p>",
        "id": 234204505,
        "sender_full_name": "simulacrum",
        "timestamp": 1618250962
    },
    {
        "content": "<p>Or at least not a common one</p>",
        "id": 234204639,
        "sender_full_name": "simulacrum",
        "timestamp": 1618251006
    },
    {
        "content": "<p>Yep</p>",
        "id": 234208650,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1618252558
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> document looks good. Would it be possible to also incorporate the part of my document pertaining to edition migrations into the 2021 RFC? tbh I've wanted to land this as an RFC separately for ages, and i'm happy to do that, but it feels like there's already text that _nearly_ gets there</p>",
        "id": 234209084,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1618252713
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> by \"document\" do you mean the gist I wrote?</p>",
        "id": 234209302,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618252814
    },
    {
        "content": "<p>I was going to copy some of that text you wrote into the 2021 RFC, probably right now actually</p>",
        "id": 234209324,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618252825
    },
    {
        "content": "<p>I'm trying to catch up on edition related tasks today as I've been neglecting them...</p>",
        "id": 234209347,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618252833
    },
    {
        "content": "<p>but I'm not sure which parts you mean :)</p>",
        "id": 234209400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618252864
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> I remembered one other thing that your write-up doesn't cover</p>",
        "id": 234214573,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618255024
    },
    {
        "content": "<p>it's pretty important that, for each change, we specify what bit of <em>syntax</em> is used to determine the edition</p>",
        "id": 234214601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618255037
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yeah document = gist</p>",
        "id": 234214607,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1618255043
    },
    {
        "content": "<p>i.e., \"the edition is tied to the method name\" or something</p>",
        "id": 234214610,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618255046
    },
    {
        "content": "<p>that's kind of 'lang team rules'</p>",
        "id": 234214620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618255051
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> oh damn that is important yeah</p>",
        "id": 234214626,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1618255055
    },
    {
        "content": "<p>(for lang changes)</p>",
        "id": 234214631,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1618255059
    },
    {
        "content": "<p>so maybe it doesn't belong in this RFC, but I might include it anyway</p>",
        "id": 234214637,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618255061
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> the part of the document I'm thinking of is mostly the \"edition migrations from the designer's perspective\" though the other two sections help motivate that</p>",
        "id": 234214786,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1618255134
    },
    {
        "content": "<p>actually, specifically the \"requirements\" bit</p>",
        "id": 234215057,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1618255260
    },
    {
        "content": "<p><a href=\"https://hackmd.io/@nbw0Mih0RLieoV6JBAtI3Q/SyFshP84O#Migration-plan-requirements-on-proposals-involving-edition-breaking-changes\">https://hackmd.io/@nbw0Mih0RLieoV6JBAtI3Q/SyFshP84O#Migration-plan-requirements-on-proposals-involving-edition-breaking-changes</a></p>",
        "id": 234215061,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1618255260
    },
    {
        "content": "<p>right</p>",
        "id": 234215090,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618255272
    },
    {
        "content": "<p>I'm adding that text, slightly edited, into the RFC</p>",
        "id": 234215101,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618255278
    },
    {
        "content": "<p>because i feel like this stuff isn't really written down in a place that can be referred to as \"yeah follow this recipe for your edition\"</p>",
        "id": 234215109,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1618255281
    },
    {
        "content": "<p>perfect ty</p>",
        "id": 234215118,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1618255283
    },
    {
        "content": "<p>very interested in how you write the \"what syntax determines the edition\" bit because iirc it's super subtle</p>",
        "id": 234215159,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1618255308
    },
    {
        "content": "<p>but you can also defer that subtlety onto the feature designer <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 234215225,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1618255326
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132040\">Manish Goregaokar</span> <a href=\"#narrow/stream/268952-edition-2021/topic/lint.20promotions/near/234215159\">said</a>:</p>\n<blockquote>\n<p>very interested in how you write the \"what syntax determines the edition\" bit because iirc it's super subtle</p>\n</blockquote>\n<p>this is what I wrote</p>",
        "id": 234215321,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618255367
    },
    {
        "content": "<blockquote>\n<h3>Determining the current edition</h3>\n<p>Altough there is an \"ambient\" edition for the crate that is specified as part of <code>Cargo.toml</code>, individual bits of code can be tied to earlier editions due to the interactions of macros. For example, if a Rust 2021 crate invokes a macro from a Rust 2018 crate, the body of that macro may be interpreted using Rust 2018 rules. For this reason, whenever an edition change is proposed, it's important to specify the tokens from which the edition is determined.</p>\n<p>As an example, if we are introducing a new keyword, then the edition will be taken from the keyword itself. If we were to make a change to the semantics of the <code>+</code> operator, we might say that the current edition is determined from the <code>+</code> token. This way, if a macro author were to write <code>$a + $b</code>, then this expression would use the edition rules from the macro definition (which contained the <code>+</code> token). Additions that defined in the <code>$a</code> expression would use the edition from which <code>$a</code> was derived.<br>\n</p>\n</blockquote>",
        "id": 234215326,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618255371
    },
    {
        "content": "<p>it's not my clearest writing, really, I could give an example at least</p>",
        "id": 234215375,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618255393
    },
    {
        "content": "<p>but I'd also not mind evolving this in the form of lang team documentation :)</p>",
        "id": 234215397,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618255409
    },
    {
        "content": "<p>really I feel it's \"mildly\" out of scope for this RFC, which is more focused on end-user experience</p>",
        "id": 234215432,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618255429
    },
    {
        "content": "<p>but only mildly, since it also talks about things like changes being skin deep</p>",
        "id": 234215450,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618255441
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> (has this not been pushed yet? the latest commit on the rfc doesn't have anything related)</p>",
        "id": 234222156,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1618258128
    },
    {
        "content": "<p>i like this description though! :)</p>",
        "id": 234222169,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1618258141
    },
    {
        "content": "<p>and yeah it's mildly out of scope but it's good to have imo</p>",
        "id": 234222195,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1618258155
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> whoops, fixed</p>",
        "id": 234222240,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618258183
    },
    {
        "content": "<p>didn't notice that the push failed</p>",
        "id": 234222257,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618258191
    },
    {
        "content": "<blockquote>\n<p>describe cargo and don't be vague</p>\n</blockquote>\n<p>some brutal commit messages right there :)</p>",
        "id": 234222917,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1618258474
    },
    {
        "content": "<p>unrelated to this discussion but i appreciate the \"editions are meant to be adopted\" section</p>",
        "id": 234223077,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1618258555
    },
    {
        "content": "<p>good to have tone-setting</p>",
        "id": 234223141,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1618258569
    },
    {
        "content": "<p>thanks for incorporating the feedback, it looks great wrt lints now :)</p>",
        "id": 234223178,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1618258588
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> great!</p>",
        "id": 234223969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618258948
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> did we land on a preferred route for handling migration lints. Do we want to add the flag to force lints for cargo fix to pick up or do we want to duplicate them? This impacts the edition lint PR I have open and which I'd like to finally get merged.</p>",
        "id": 234316933,
        "sender_full_name": "rylev",
        "timestamp": 1618317497
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> I'm open to either route, but after going through the whole exercise of writing it up, I am leaning somewhat towards \"just duplicate the lints and call it a day\"</p>",
        "id": 234317255,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618317620
    },
    {
        "content": "<p>the main work then is to make that possible in the code without requiring a lot of copy-and-paste</p>",
        "id": 234317301,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618317639
    },
    {
        "content": "<p>Is the idea that those new lints are all allow by default (to prevent users from allowing them, and cargo fix would cause them to warn and apply fixes?</p>",
        "id": 234317449,
        "sender_full_name": "rylev",
        "timestamp": 1618317714
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> yes</p>",
        "id": 234321431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618319392
    },
    {
        "content": "<p>I imagine something like this</p>",
        "id": 234321440,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618319398
    },
    {
        "content": "<p>we have a macro for declaring lints, right?</p>",
        "id": 234321466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618319403
    },
    {
        "content": "<p>I was imagining that we might have an option to \"tag\" as an edition lint that would automatically make a duplicate lint with a distinct name in the relevant group, and we would also automatically \"emit\" the duplicate lint when we emit the regular lint</p>",
        "id": 234321621,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618319451
    },
    {
        "content": "<p>the latter could be error-prone I guess  if there is some <code>if</code> that guards the overall test</p>",
        "id": 234321646,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618319462
    },
    {
        "content": "<p>I'm curious about why lean towards duplicating lints instead of a new flag.  I would think a new flag should be relatively easy to implement, and more flexible.  Duplicating lints sounds like it would introduce lots of issues, like confusing diagnostics (if it uses different lint names), dealing with documentation, dealing with <code>-W help</code> output, etc.</p>\n<p>Another option I was thinking of is just making the <code>rust-*-compatibility</code> group on the command-line take precedence over attributes.  That also doesn't sound <em>too</em> hard to implement, though I think I like the new flag route better.</p>",
        "id": 234328591,
        "sender_full_name": "Eric Huss",
        "timestamp": 1618321924
    },
    {
        "content": "<p>well, the main concern I had was the issue arond lints in multiple groups, but really I think those are orthogonal and we should fix them regardless</p>",
        "id": 234336316,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618324462
    },
    {
        "content": "<p>I'm getting persuaded the other way now :)</p>",
        "id": 234336341,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618324471
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> do you have an opinion? would you like mentoring one way or the other?</p>",
        "id": 234336385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618324488
    },
    {
        "content": "<p>I think I prefer a new flag to special casing the <code>rust-*-compatibility</code> groups</p>",
        "id": 234336412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618324498
    },
    {
        "content": "<p>I'm leaning towards adding the flag. It seems like it will ultimately the simpler and less edge-case prone way to do things.</p>",
        "id": 234337825,
        "sender_full_name": "rylev",
        "timestamp": 1618324934
    },
    {
        "content": "<p>Given that I'm struggling to find the time to work on this right now, I think having some sort of mentoring would be really helpful to speed things up.</p>",
        "id": 234337911,
        "sender_full_name": "rylev",
        "timestamp": 1618324968
    },
    {
        "content": "<p>I do think we can land the PR as is (after addressing a few of the outstanding and unrelated concerns)</p>",
        "id": 234338039,
        "sender_full_name": "rylev",
        "timestamp": 1618325008
    },
    {
        "content": "<p>OK, <span class=\"user-mention\" data-user-id=\"224872\">@rylev</span>, I think we need an MCP for this</p>",
        "id": 234358417,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618331298
    },
    {
        "content": "<p>I'll go ahead and convert that gist into an MCP and add in some mentoring notes</p>",
        "id": 234358440,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618331306
    },
    {
        "content": "<p>What’s the current plan for elided lifetimes? Will the lint get upgraded in/alongside the new edition? I noticed in the tracking issue this still seemed undecided</p>",
        "id": 238038685,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1620569714
    },
    {
        "content": "<p>(Ran into some issues with incorrectly inferred lifetimes this week, so…)</p>",
        "id": 238038704,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1620569742
    },
    {
        "content": "<p>only <code>bare-trait-objects</code> and <code>ellipsis-inclusive-range-patterns</code> get turned into hard errors</p>",
        "id": 238038766,
        "sender_full_name": "Mara",
        "timestamp": 1620569788
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"226095\">Dirkjan Ochtman</span> <a href=\"#narrow/stream/268952-edition-2021/topic/lint.20promotions/near/238038685\">said</a>:</p>\n<blockquote>\n<p>What’s the current plan for elided lifetimes? Will the lint get upgraded in/alongside the new edition? I noticed in the tracking issue this still seemed undecided</p>\n</blockquote>\n<p>The last lang conversation I remember about it was that there was still uncertainty over exactly which parts are important enough to lint about, and that there was no desire to move to hard errors for any of them just yet, so the question was punted from this edition.</p>\n<p>If anyone's interested in picking up some work on this, though, it'd be great to get the lint split to help focus the conversation on the different cases.  I recall there was general agreement that invisible lifetimes <em>that ended up being used in the return type</em> were more of a concern than others (particularly things like <code>&amp;Foo&lt;'_&gt;</code> vs just allowing <code>&amp;Foo</code>, when neither lifetime is used in the return type).  So separating those categories to potentially start to enable the less-controversial one (perhaps in all edition) would be great, if someone's interested in a project.</p>",
        "id": 238049739,
        "sender_full_name": "scottmcm",
        "timestamp": 1620582064
    },
    {
        "content": "<p>Yeah, I think it would make sense to start by making them warn by default</p>",
        "id": 238056949,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1620589613
    },
    {
        "content": "<p>at least for the return value position</p>",
        "id": 238056954,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1620589625
    },
    {
        "content": "<p>So what would be the proper venue/way to have that discussion? Just a Zulip thread in t-lang? Or should it be an MCP?</p>",
        "id": 238057007,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1620589666
    },
    {
        "content": "<p>There was a fairly extensive lang discussion in a meeting about lints, see <a href=\"https://hackmd.io/HETreGqPSRezlN109vgCnQ#ELIDED_LIFETIMES_IN_PATHS\">https://hackmd.io/HETreGqPSRezlN109vgCnQ#ELIDED_LIFETIMES_IN_PATHS</a></p>\n<p>From <a href=\"https://github.com/rust-lang/lang-team/blob/master/design-meeting-minutes/2021-02-24-Lints-and-editions.md\">https://github.com/rust-lang/lang-team/blob/master/design-meeting-minutes/2021-02-24-Lints-and-editions.md</a>, which has a recording</p>",
        "id": 238065730,
        "sender_full_name": "scottmcm",
        "timestamp": 1620598502
    },
    {
        "content": "<p>Personally, I think the next step is a code change to split the lint.  Then once that's happened, it could just be a lang FCP on a change to make the non-conrtoversial part warn-by-default.</p>\n<p>(Perhaps coupled with a crater run where it was deny to see the impact, and better judge whether it's providing sufficient value.)</p>",
        "id": 238065931,
        "sender_full_name": "scottmcm",
        "timestamp": 1620598702
    },
    {
        "content": "<p>To me, the starting point is \"lint on lifetimes in arguments that elision made equal to an output lifetime\", as the most useful case.  (And that avoids the things like <code>&amp;mut Context&lt;'_&gt;</code> for <code>&amp;mut Formatter&lt;'_&gt;</code> that a bunch of people are unhappy about with the current lint.)</p>",
        "id": 238065965,
        "sender_full_name": "scottmcm",
        "timestamp": 1620598788
    }
]