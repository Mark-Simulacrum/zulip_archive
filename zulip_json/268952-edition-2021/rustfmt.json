[
    {
        "content": "<p>Hello. Do you think it would worthwhile to consider changing how rustfmt works in the new edition? There is a long thread in internals about rustfmt, but one of them stands out for me: <a href=\"https://internals.rust-lang.org/t/forced-rustfmt-is-a-roadblock-to-contributing/11913/9\">https://internals.rust-lang.org/t/forced-rustfmt-is-a-roadblock-to-contributing/11913/9</a></p>",
        "id": 220996757,
        "sender_full_name": "Yerkebulan Tulibergenov",
        "timestamp": 1609051531
    },
    {
        "content": "<p>Perhaps <span class=\"user-mention\" data-user-id=\"198824\">@Kornel</span>, <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>,  <span class=\"user-mention\" data-user-id=\"222471\">@BurntSushi</span>  might have an opinion about that, since they were active participants in that thread. Sorry for noise.</p>",
        "id": 220996915,
        "sender_full_name": "Yerkebulan Tulibergenov",
        "timestamp": 1609051792
    },
    {
        "content": "<p>I do have opinions on rustfmt, yeah (also see the issue tracker)... but in the end this is down to the people doing the work, all I can do is try to provide constructive feedback</p>",
        "id": 221007823,
        "sender_full_name": "RalfJ",
        "timestamp": 1609073743
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"200172\">@Yerkebulan Tulibergenov</span> There are a couple of independent questions here. First, whether we <em>want</em> to make that change. But second, <em>can</em> we make that change in a reasonable way? <code>cargo fmt</code> could get the edition from <code>Cargo.toml</code>, but does that imply that using <code>rustfmt</code> directly will require passing the edition?</p>",
        "id": 221028729,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609112748
    },
    {
        "content": "<p>I don't think rustfmt currently has a mechanism for passing the edition; we'd have to add such a mechanism and allow it to change the defaults.</p>",
        "id": 221028775,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609112778
    },
    {
        "content": "<p>Also, changing the rustfmt defaults would be rather disruptive to the ecosystem, in terms of churn.</p>",
        "id": 221028780,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609112803
    },
    {
        "content": "<p>And disruptive in a second way: it'd create the expectation that rustfmt <em>can</em> change at an edition boundary, which would invite substantial bikeshedding on a regular cadence...</p>",
        "id": 221028790,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609112850
    },
    {
        "content": "<p>(rustfmt does have a mechanism for passing the edition, either in config <a href=\"https://github.com/rust-lang/rustfmt/blob/master/Configurations.md#edition\">https://github.com/rust-lang/rustfmt/blob/master/Configurations.md#edition</a> or <code>--edition</code> on the CLI)</p>",
        "id": 221028916,
        "sender_full_name": "lqd",
        "timestamp": 1609113056
    },
    {
        "content": "<p>I suspect that maintaining multiple very different formatting versions would be relatively painful, given that even one has tons of edge cases and \"bugs\" to consider</p>",
        "id": 221029164,
        "sender_full_name": "simulacrum",
        "timestamp": 1609113435
    },
    {
        "content": "<p>I'm not sure that editions are the right mechanism for formatting anyway, and I know that there are discussions about a 2.0. we should talk to the rustfmt devs but I suspect we should not tie anything to the edition.</p>",
        "id": 221029217,
        "sender_full_name": "simulacrum",
        "timestamp": 1609113512
    },
    {
        "content": "<p>that mechanism is most likely to specify the parsing side rather than the formatting result</p>",
        "id": 221029292,
        "sender_full_name": "lqd",
        "timestamp": 1609113609
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/268952-edition/topic/rustfmt/near/221028780\">said</a>:</p>\n<blockquote>\n<p>Also, changing the rustfmt defaults would be rather disruptive to the ecosystem, in terms of churn.</p>\n</blockquote>\n<p>well, the proposed change is to make rustfmt less \"invasive\" by staying closer to the original formatting of the code -- so there shouldn't be any churn for existing rustfmt-using projects</p>",
        "id": 221065489,
        "sender_full_name": "RalfJ",
        "timestamp": 1609167008
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> Ah, that makes sense.</p>",
        "id": 221073597,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609174118
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> That's the theory, but rustfmt is subtle and sometimes quick to anger, and that proposal would be a <em>major</em> change.</p>",
        "id": 221073674,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609174209
    },
    {
        "content": "<p>Doing that with the added constraint of not changing any existing formatting would be an even bigger challenge.</p>",
        "id": 221073695,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609174246
    },
    {
        "content": "<p>That's leaving aside whether people want the change. Some do, clearly. But we've also had reports from people who want to be able to utterly reformat code to normalize it without regard for the existing formatting. Which suggests that at the very least the current behavior is useful and still desirable in at least some circumstances.</p>",
        "id": 221073794,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609174325
    },
    {
        "content": "<p>My deal-breaker issue with rustfmt is that it doesn't preserve author's decision on single-line vs multi-line formatting, like gofmt does. AFAIK rustfmt doesn't even have a setting for this. It'd be great if this was changed, but I worry that if it's not an existing option, there's no straightforward path for making this change for the next edition.</p>",
        "id": 221257021,
        "sender_full_name": "Kornel",
        "timestamp": 1609372634
    },
    {
        "content": "<p>+1 to not tying to an edition, but I also strongly dislike rustfmt for the reasons mentioned in <a href=\"https://users.rust-lang.org/t/what-do-you-think-about-gofmt-vs-rustfmt/51605\">https://users.rust-lang.org/t/what-do-you-think-about-gofmt-vs-rustfmt/51605</a>: it's too invasive and leaves no room for the author's judgement without sprinkling <code>rustfmt::allow</code> everywhere. In particular I don't like that it will split expressions onto multiple lines when they get too large, or collapse them into a single line when they get 'small enough'. I would <em>love</em> an opt-in way to tell it not to do that (<code>use_min_heuristics = max</code> is sort of close, but still too invasive).</p>",
        "id": 221257224,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609372873
    },
    {
        "content": "<p>or in other words I think something like <code>clang-format</code> would be great, where it only fixes the most glaring issues and leaves most of the rest up to the author's judgement</p>",
        "id": 221257282,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609372948
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198824\">@Kornel</span> heh, it turns out you said the same thing but better <a href=\"https://users.rust-lang.org/t/what-do-you-think-about-gofmt-vs-rustfmt/51605/5?u=jyn514\">https://users.rust-lang.org/t/what-do-you-think-about-gofmt-vs-rustfmt/51605/5?u=jyn514</a></p>",
        "id": 221257360,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609373045
    },
    {
        "content": "<p>When writing messy branches that I want to cleanup afterwards and rebase after cherry-picking some commits to master, the normalizing behavious is very useful. I can use git filter-branch to format all commits and then when I rebase. I don't have to worry much about changed formatting due to the normalizing behaviour of rustfmt.</p>",
        "id": 221273787,
        "sender_full_name": "bjorn3",
        "timestamp": 1609397645
    },
    {
        "content": "<p>So that's another distinction: I think the 'format everything for me' mode should be different from 'format the things that are clearly wrong', and that CI should only check the second</p>",
        "id": 221292556,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609424104
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> That depends on whether you see the purpose of rustfmt in CI as \"deal with major formatting issues\" or \"make formatting always uniform\".</p>",
        "id": 221298860,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609430849
    },
    {
        "content": "<p>I would personally prefer to make rustfmt smarter and keep the normalizing behavior.</p>",
        "id": 221298912,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609430892
    },
    {
        "content": "<p>Can rustfmt be made smarter here? E.g. calculating some measure of line complexity for Rust code sounds like a hard research problem.</p>",
        "id": 221305833,
        "sender_full_name": "Chris Denton",
        "timestamp": 1609437134
    },
    {
        "content": "<p>If CI only checks for \"the things that are clearly wrong\", doing \"format everything for me\" wouldn't be useful for the workflow I mentioned, as it will also format unrelated code.</p>",
        "id": 221305862,
        "sender_full_name": "bjorn3",
        "timestamp": 1609437187
    },
    {
        "content": "<p>IIRC rustfmt already calculates some measure of complexity when trying to decide to split lines or not</p>",
        "id": 221415089,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1609617893
    },
    {
        "content": "<p>I also recall that.</p>\n<p>However, a flag to blanket disable line changes would be most welcomed. Fix all the spacing, adjust commas, move braces where they go, delete excess blank lines, etc etc, just <strong>don't</strong> add/remove any newlines <em>within</em> an expression.</p>\n<p>I would expect this to be an easy flag to implement, though that's purely a guess.</p>",
        "id": 221415388,
        "sender_full_name": "Lokathor",
        "timestamp": 1609618365
    },
    {
        "content": "<p>I mean, it would not be able to enforce line length, for one thing (which to me is a rather important property)</p>",
        "id": 221415546,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1609618616
    },
    {
        "content": "<p>If you turn on the \"stop messing with my frikkin newlines\" flag you clearly don't care about precise line length limits.</p>",
        "id": 221420654,
        "sender_full_name": "Lokathor",
        "timestamp": 1609626315
    },
    {
        "content": "<p>And if we wanted it to, it could still fail for lines that are longer than some threshold, just means it'd be up to the user to fix it.  (Without taking a position on whether it should.)</p>",
        "id": 221420810,
        "sender_full_name": "scottmcm",
        "timestamp": 1609626563
    }
]