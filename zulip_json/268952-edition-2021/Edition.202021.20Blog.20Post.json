[
    {
        "content": "<p>Blog post is live! <a href=\"https://blog.rust-lang.org/2021/05/11/edition-2021.html\">https://blog.rust-lang.org/2021/05/11/edition-2021.html</a></p>",
        "id": 238324756,
        "sender_full_name": "Mara",
        "timestamp": 1620746012
    },
    {
        "content": "<p>This mentions that the</p>\n<blockquote>\n<p>In addition, core::panic!() and std::panic!() will be identical in Rust 2021.</p>\n</blockquote>\n<p>Can you elaborate in what ways these were different that have been made identical? Because as far as I can see from the code, we still have two distinct implementations of panicking and <code>std</code> and <code>core</code> still dispatch to their own implementations.</p>",
        "id": 238365731,
        "sender_full_name": "nagisa",
        "timestamp": 1620760065
    },
    {
        "content": "<p>Oh, I see, libstd actually just reexports the core's <code>panic_2021!</code>. Good.</p>",
        "id": 238365921,
        "sender_full_name": "nagisa",
        "timestamp": 1620760137
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> until some versions ago, <code>core::panic!(\"123\")</code> resulted in a <code>String</code> and <code>std::panic!(\"123\")</code> resulted in a <code>&amp;str</code> being thrown (in the Box&lt;Any&gt;). also, core::panic!() accepted non-'static strs, but std::panic!() didn't. and std::panic!() accepted non-strings, but core::panic!() didn't.</p>",
        "id": 238366415,
        "sender_full_name": "Mara",
        "timestamp": 1620760343
    },
    {
        "content": "<p>can someone post the blog post on the rustlang twitter account? would be good to reach a lot  of people ^^ (cc <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <span class=\"user-mention\" data-user-id=\"121055\">@Pietro Albini</span>)</p>",
        "id": 238366939,
        "sender_full_name": "Mara",
        "timestamp": 1620760589
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116011\">@Steve Klabnik</span> usually handles twitter</p>",
        "id": 238366989,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1620760610
    },
    {
        "content": "<p>ah, sure!</p>",
        "id": 238367073,
        "sender_full_name": "Steve Klabnik",
        "timestamp": 1620760652
    },
    {
        "content": "<p>sorry, has been quite the day so far. will tweet now</p>",
        "id": 238367092,
        "sender_full_name": "Steve Klabnik",
        "timestamp": 1620760660
    },
    {
        "content": "<p>oh, thanks! :)</p>",
        "id": 238367135,
        "sender_full_name": "Mara",
        "timestamp": 1620760673
    },
    {
        "content": "<p><a href=\"https://twitter.com/rustlang/status/1392197306049601540\">https://twitter.com/rustlang/status/1392197306049601540</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/rustlang/status/1392197306049601540\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/f434d17b4da0a21ed9126d67157c1ed6317dd5f4/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f323339323437333336332f7637747868726a7039706471726b6474787870305f6e6f726d616c2e706e67\"></a><p>The Plan for the Rust 2021 Edition <a href=\"https://t.co/NgSFP7CAPK\">https://blog.rust-lang.org/2021/05/11/edition-2021.html</a></p><span>- Rust Language (@rustlang)</span></div></div>",
        "id": 238367238,
        "sender_full_name": "Steve Klabnik",
        "timestamp": 1620760697
    }
]