[
    {
        "content": "<p>Nesting items inside functions isn't supported by rust-analyzer. It hurts incrementality for end-to-end queries as it requires invalidating name resolution every time a function body changes. And it can be strange. For example you are allowed to nest <code>mod foo;</code> or <code>mod foo {}</code> inside a function. Forbidding items inside functions could possibly also help with parser recovery when you forget a closing <code>}</code> as rustc can insert as many <code>}</code> as necessary when it hits a keyword that starts an item when it is inside a function.</p>",
        "id": 221254841,
        "sender_full_name": "bjorn3",
        "timestamp": 1609370213
    },
    {
        "content": "<p>I think last time the team talked about it the consensus was that \"no items in function bodies\" was too strict to be accepted, so it would need a more nuanced proposal.</p>\n<p>As a possible starting point, perhaps something like \"no <code>impl</code>s inside a function for types declared outside that function\".</p>",
        "id": 221254976,
        "sender_full_name": "scottmcm",
        "timestamp": 1609370367
    },
    {
        "content": "<p>FWIW <a href=\"http://docs.rs\">docs.rs</a> does actually use this in real code <a href=\"https://github.com/rust-lang/docs.rs/blob/f029d0ba7566358afa82245aeb9fec0375609257/src/web/releases.rs#L226\">https://github.com/rust-lang/docs.rs/blob/f029d0ba7566358afa82245aeb9fec0375609257/src/web/releases.rs#L226</a></p>",
        "id": 221255065,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609370448
    },
    {
        "content": "<p><code>rustc</code> uses them too</p>",
        "id": 221255123,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1609370519
    },
    {
        "content": "<p>Yeah, lots of code uses local types.  Here's a <code>core</code> example: <a href=\"https://doc.rust-lang.org/1.48.0/src/core/ptr/mod.rs.html#455-514\">https://doc.rust-lang.org/1.48.0/src/core/ptr/mod.rs.html#455-514</a></p>",
        "id": 221255172,
        "sender_full_name": "scottmcm",
        "timestamp": 1609370538
    },
    {
        "content": "<p>Ah, maybe not <code>impl</code>s inside a function for types declared outside that function</p>",
        "id": 221255184,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1609370552
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"255061\">Léo Lanteri Thauvin</span> <a href=\"#narrow/stream/268952-edition/topic/forbid.20item.20definitions.20inside.20function.20bodies/near/221255184\">said</a>:</p>\n<blockquote>\n<p>Ah, maybe not <code>impl</code>s inside a function for types declared outside that function</p>\n</blockquote>\n<p>Exactly, yeah.  A local type that derives <code>Copy+Clone</code>, for example, is quite reasonable, hence allowing impls inside a function for a type inside that function.  And because the type is local, that shouldn't require invalidating all of name resolution for every function body change -- just for the changed function body.</p>\n<p>But I know no reason to put an impl for an external type inside a function, so restricting that seems quite reasonable.</p>",
        "id": 221255383,
        "sender_full_name": "scottmcm",
        "timestamp": 1609370771
    },
    {
        "content": "<p>What does <code>mod foo;</code> in a function even do?</p>",
        "id": 221255444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609370858
    },
    {
        "content": "<p>I would <em>expect</em> it to be the same as <code>mod foo;</code> outside the function</p>",
        "id": 221255453,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609370880
    },
    {
        "content": "<p>I personally think that the more scoped a definition is, the better. While I can imagine that from the compiler's point of view, it can be a very annoying thing to support, it is a great capability of the language, one that coupled to <code>const _: () = { ... };</code>, has allowed to avoid having macros forge unique identifiers for <em>ad-hoc</em> modules or <em>ad-hoc</em> helper types.<br>\nPersonally, if this capability were to be removed with the only way to opt into it being to remain in an old edition, I would choose to choose to stick to that older edition, for instance.</p>",
        "id": 221255489,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1609370884
    },
    {
        "content": "<p>(I am talking about the initial suggestion, I'll have to think about impls for non-involved types)</p>",
        "id": 221255507,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1609370935
    },
    {
        "content": "<p>Macros generally provide a good source of use cases of items in weird places</p>",
        "id": 221255541,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609370995
    },
    {
        "content": "<p>Note that something that I find great to do is, since construction and destruction are deeply tied, to <code>impl Drop</code> for a type within the body of its constructor. This is especially useful for <code>unsafe</code> code, where there may be less type safety to protect against incorrect refactorings, and so minimal distance between allocation and deallocation, for instance, is quite nice.</p>",
        "id": 221255586,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1609371016
    },
    {
        "content": "<p>But yes, I think that [forbidding]  <code>impl</code>s for <em>completely unrelated</em> types ought to be fine.<br>\nOne thing about these items inside blocks thing, however, is that items defined there cannot be referred to by \"explicit paths\".<br>\nThat is,</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">mod</span> <span class=\"nn\">bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">super</span>::<span class=\"n\">foo</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"c1\">//error</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span>::<span class=\"n\">foo</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// error</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I'd love for these relative namespacing rules to become more consistent, but so doing would be breaking and require, I think, more than an edition change, plus it may require changes in the compiler in order to better represent these unnamed namespaces (I don't know)</p>",
        "id": 221256011,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1609371447
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232018\">Daniel Henry-Mantilla</span> <a href=\"#narrow/stream/268952-edition/topic/forbid.20item.20definitions.20inside.20function.20bodies/near/221255489\">said</a>:</p>\n<blockquote>\n<p>I personally think that the more scoped a definition is, the better.</p>\n</blockquote>\n<p>For things that need to <em>be referenced by their name to use them</em>, I agree, because \"more scoped\" is implicitly restricted by \"but not so much that they can't be used by the places that need them\".</p>\n<p>But <code>impl</code>s just magically work from everywhere, so there <em>isn't</em> as \"most scoped\" location right now.  So I think a restriction like \"but not any more scoped that the most-scoped or the type or the trait\" (precise details TBD) would make sense.</p>",
        "id": 221256621,
        "sender_full_name": "scottmcm",
        "timestamp": 1609372159
    },
    {
        "content": "<p>Or to say it indirectly, it's weird that rustdoc needs to look inside function bodies.</p>",
        "id": 221256711,
        "sender_full_name": "scottmcm",
        "timestamp": 1609372238
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/268952-edition/topic/forbid.20item.20definitions.20inside.20function.20bodies/near/221256711\">said</a>:</p>\n<blockquote>\n<p>Or to say it indirectly, it's weird that rustdoc needs to look inside function bodies.</p>\n</blockquote>\n<p>well, <code>-&gt; impl Trait</code> also messes this up</p>",
        "id": 221256980,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609372588
    },
    {
        "content": "<p>but yeah if items in bodies weren't a thing everybody_loops probably would have trundled along for another few years at least</p>",
        "id": 221257006,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609372614
    },
    {
        "content": "<blockquote>\n<p>I personally think that the more scoped a definition is, the better. While I can imagine that from the compiler's point of view, it can be a very annoying thing to support, it is a great capability of the language, one that coupled to <code>const _: () = { ... };</code>, has allowed to avoid having macros forge unique identifiers for <em>ad-hoc</em> modules or <em>ad-hoc</em> helper types.</p>\n</blockquote>\n<p>Maybe it could only be forbidden for function bodies? Those are the most likely to change.</p>",
        "id": 221273628,
        "sender_full_name": "bjorn3",
        "timestamp": 1609397385
    },
    {
        "content": "<blockquote>\n<p>So I think a restriction like \"but not any more scoped that the most-scoped or the type or the trait\" (precise details TBD) would make sense.</p>\n</blockquote>\n<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 221273671,
        "sender_full_name": "bjorn3",
        "timestamp": 1609397445
    },
    {
        "content": "<p>Function local trait impls allows you to use local types in their implementations:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Magic</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Treat</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">b</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">user</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Magic</span>::<span class=\"n\">b</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">definer</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">struct</span> <span class=\"nc\">Loc</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Treat</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Magic</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">b</span><span class=\"p\">(){</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">loc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Loc</span><span class=\"w\"> </span><span class=\"p\">{};</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Is there some legitimate use case for this? The fact that you can implement a trait inside a function is certainly weird and confusing but this seems like it could be useful.</p>",
        "id": 221278550,
        "sender_full_name": "panstromek",
        "timestamp": 1609405813
    },
    {
        "content": "<p>Yeah I've also written code that does this (define a type in a fn body and implement a trait for it). It is extremely useful, I'd be very sad to see this feature go.</p>",
        "id": 221286077,
        "sender_full_name": "RalfJ",
        "timestamp": 1609416373
    },
    {
        "content": "<p>IIRC, all that RA needs is that \"what happens inside a fn body stays inside a fn body\" -- so, impl's for local types are fine, but impl's for outer types are not. I think this is a very reasonable proposal. It would also apply to <code>mod</code> -- <code>mod</code> inside <code>fn</code> is fine <em>if</em> it only affects name resolution inside that <code>fn</code>.<br>\nThis would permit rustdoc and RA to ignore fn bodies (except for the fn the cursor is currently in, for RA).<br>\nThis would however invalidate <span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span>'s approach of doing <code>impl Drop</code> inside the constructor.</p>",
        "id": 221286150,
        "sender_full_name": "RalfJ",
        "timestamp": 1609416488
    },
    {
        "content": "<p>Chock another one up for \"I define a function local type and give it a drop impl inside that function\".</p>\n<p>I've even declared extern functions inside of rust functions in <code>stdarch</code>, because only that one rust function ever calls the extern.</p>",
        "id": 221311507,
        "sender_full_name": "Lokathor",
        "timestamp": 1609443374
    },
    {
        "content": "<p>yes, I think the only thing that needs to be forbidden is using local trait or inherent impls outside of that block. Writing a local impl and only using it in that block should be possible to handle in RA</p>",
        "id": 223136418,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1610984987
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 223145803,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610990200
    },
    {
        "content": "<p>Since it hasn't been mentioned in this thread yet, cc <a href=\"https://github.com/rust-lang/rust/issues/65516\">https://github.com/rust-lang/rust/issues/65516</a></p>",
        "id": 223147003,
        "sender_full_name": "scottmcm",
        "timestamp": 1610990887
    }
]