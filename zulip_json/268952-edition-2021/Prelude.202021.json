[
    {
        "content": "<p>There was a discussion regarding adding <code>core::convert::identity</code> to the prelude. Is it considered to be added in new edition?</p>",
        "id": 220859706,
        "sender_full_name": "Kitsu",
        "timestamp": 1608803225
    },
    {
        "content": "<p>It's not a trait, so I don't think it needs to be an <em>edition</em> addition, so would probably just be a #t-libs question, not a #edition one</p>",
        "id": 220901890,
        "sender_full_name": "scottmcm",
        "timestamp": 1608865157
    },
    {
        "content": "<p>IMO, it's best to bundle such changes together if we're thinking about these changes at all.</p>",
        "id": 220901944,
        "sender_full_name": "isHavvy",
        "timestamp": 1608865223
    },
    {
        "content": "<p>Can you elaborate?  If something is strictly non-breaking and the relevant team decides it's wanted, why shouldn't it just go in the current prelude without waiting on the edition?  (And then be carried forward into the next prelude too.)</p>",
        "id": 220902032,
        "sender_full_name": "scottmcm",
        "timestamp": 1608865414
    },
    {
        "content": "<p>I've seen a lot of confusion over similar changes happening a few releases apart where one person thinks the other change happens or that it overrides the other change. It all gets sorted out over time, but the conversations do get weary after awhile. Plus, it's easier to document the prelude change once rather than multiple times.</p>",
        "id": 220902966,
        "sender_full_name": "isHavvy",
        "timestamp": 1608867280
    },
    {
        "content": "<p>I agree with isHavvy. Since it's not pressing, we should group the prelude changes together.</p>",
        "id": 220986864,
        "sender_full_name": "Lokathor",
        "timestamp": 1609031498
    },
    {
        "content": "<p>If nothing is broken by a prelude addition, there’s no point in making it edition-specific or grouping it together with other change</p>",
        "id": 221212892,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1609335555
    },
    {
        "content": "<p>For <code>identity</code> specifically I’m not convinced that it’s useful enough to justify adding it to the prelude. (But I’m not really opposed, if there’s consensus that it is)</p>",
        "id": 221213142,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1609335789
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> <a href=\"https://hackmd.io/3eG6OZWHRbSMxoRxzwNhGQ?view#-Prelude-changes\">https://hackmd.io/3eG6OZWHRbSMxoRxzwNhGQ?view#-Prelude-changes</a> lists 5 possible additions to a new edition-specific prelude, but of those only <code>TryFrom</code>/<code>TryInto</code> causes breakage that I know of. Unless there’s evidence of such breakage the rest should be considered for possible addition to the existing prelude, unrelated to editions</p>",
        "id": 221213725,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1609336351
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219747\">@Simon Sapin</span> yes, absolutely. for now i just want to collect all ideas in this document. but indeed, quite a few things might not require an edition change.</p>",
        "id": 221213792,
        "sender_full_name": "Mara",
        "timestamp": 1609336414
    },
    {
        "content": "<p>Ok</p>",
        "id": 221213813,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1609336433
    },
    {
        "content": "<p>but feel free to cross things out if it's already clear that it won't require an edition change</p>",
        "id": 221213884,
        "sender_full_name": "Mara",
        "timestamp": 1609336490
    },
    {
        "content": "<p>Does editing require an account?</p>",
        "id": 221213896,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1609336510
    },
    {
        "content": "<p>oh, i think so, yes. you can log in with github. does that work for you?</p>",
        "id": 221213907,
        "sender_full_name": "Mara",
        "timestamp": 1609336537
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> Also one reason the edition prelude didn’t happen for 2018 is we’d need to develop a compatibility warning to detect for example calls to <a href=\"https://crates.io/crates/try_from\">https://crates.io/crates/try_from</a> that would become ambiguous with the new prelude. <a href=\"https://rust-lang.github.io/rfcs/2052-epochs.html#hard-constraints\">https://rust-lang.github.io/rfcs/2052-epochs.html#hard-constraints</a> specifies this as a \"hard constraint\"</p>",
        "id": 221214002,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1609336622
    },
    {
        "content": "<p>Thanks, added it to the notes.</p>",
        "id": 221214107,
        "sender_full_name": "Mara",
        "timestamp": 1609336726
    },
    {
        "content": "<blockquote>\n<p>Prioritization of glob import method resolution the same as item resolution (language change)</p>\n</blockquote>\n<p>This sounds related but I’m not sure it is exactly the same: <em>name</em> resolution was changed some time ago so that an explicit import would \"win\" over the prelude, but not <em>trait method</em> resolution. The latter is what affects <code>TryFrom</code> / <code>TryInto</code>.</p>",
        "id": 221214189,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1609336802
    },
    {
        "content": "<p>TIL hackmd has github login, thanks</p>",
        "id": 221214269,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1609336880
    },
    {
        "content": "<p>thanks for contributing to the document ^^</p>",
        "id": 221214410,
        "sender_full_name": "Mara",
        "timestamp": 1609336983
    },
    {
        "content": "<p>Initial RFC draft: <a href=\"https://github.com/rust-lang/rfcs/pull/3090\">https://github.com/rust-lang/rfcs/pull/3090</a></p>",
        "id": 227995643,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1614374301
    },
    {
        "content": "<p>please comment there</p>",
        "id": 227995652,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1614374306
    },
    {
        "content": "<p>we should probably also <em>remove</em> RustcEncodable and RustcDecodable from the new prelude.</p>",
        "id": 230409913,
        "sender_full_name": "Mara",
        "timestamp": 1615838869
    },
    {
        "content": "<p>can we remove those from 2021 altogether? IIUC they're builtin attributes, right?</p>",
        "id": 230419727,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615842889
    },
    {
        "content": "<p>yes, they're only available through the prelude. so if we remove those they're gone from the new edition.</p>",
        "id": 230420691,
        "sender_full_name": "Mara",
        "timestamp": 1615843304
    },
    {
        "content": "<p>no wait, that's not exactly true. you could still reach them through std::prelude::v1::RustcEncodable.</p>",
        "id": 230422011,
        "sender_full_name": "Mara",
        "timestamp": 1615843945
    },
    {
        "content": "<p>but at least a regular <code>#[derive(RustcEncodable)]</code> wont work without the full path through <code>v1</code> or <code>rust_2015</code>/<code>rust_2018</code> then</p>",
        "id": 230422114,
        "sender_full_name": "Mara",
        "timestamp": 1615843996
    },
    {
        "content": "<p>looks like they are also in the root of <code>core</code></p>",
        "id": 230423042,
        "sender_full_name": "cuviper",
        "timestamp": 1615844487
    },
    {
        "content": "<p>or at least, that's where they are documented</p>",
        "id": 230423072,
        "sender_full_name": "cuviper",
        "timestamp": 1615844514
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> not on beta and nightly anymore</p>",
        "id": 230423503,
        "sender_full_name": "Mara",
        "timestamp": 1615844721
    },
    {
        "content": "<p>ah, ok</p>",
        "id": 230423663,
        "sender_full_name": "cuviper",
        "timestamp": 1615844800
    },
    {
        "content": "<p>seems that path wasn't actually usable on stable either</p>",
        "id": 230423768,
        "sender_full_name": "cuviper",
        "timestamp": 1615844881
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> <a href=\"#narrow/stream/268952-edition-2021/topic/Prelude.202021/near/230423768\">said</a>:</p>\n<blockquote>\n<p>seems that path wasn't actually usable on stable either</p>\n</blockquote>\n<p>yeah that was just a rustdoc bug</p>",
        "id": 230432948,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615848111
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/77862\">https://github.com/rust-lang/rust/pull/77862</a></p>",
        "id": 230432968,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615848119
    }
]