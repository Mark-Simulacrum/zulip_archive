[
    {
        "content": "<p>At some point, we'll want to have the compiler bootstrap against Rust 2021. Do we have a plan for this yet?</p>",
        "id": 232296648,
        "sender_full_name": "rylev",
        "timestamp": 1617035663
    },
    {
        "content": "<p>Does it need a plan? I would expect it to work like any other codebase updating, someone just makes a pr</p>",
        "id": 232296741,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617035720
    },
    {
        "content": "<p>I think it should be after 2021 is stabilized though, or at least closer to being stabilized</p>",
        "id": 232296780,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617035744
    },
    {
        "content": "<p>This needs to happen only once the majority of migration lints are ready, because you can't run them after you've switched to the next edition. But otherwise it's usually not too hard.</p>",
        "id": 232297129,
        "sender_full_name": "simulacrum",
        "timestamp": 1617035891
    },
    {
        "content": "<p>I think we want to ensure this is done before the edition is stabilized.</p>",
        "id": 232297167,
        "sender_full_name": "rylev",
        "timestamp": 1617035911
    },
    {
        "content": "<p>(that's all I really meant with plan - is it on our todo list)</p>",
        "id": 232297205,
        "sender_full_name": "rylev",
        "timestamp": 1617035932
    },
    {
        "content": "<p>I think it's a good smoke test and we can likely start doing it throughout the process, just not landing the results</p>",
        "id": 232298630,
        "sender_full_name": "simulacrum",
        "timestamp": 1617036552
    },
    {
        "content": "<p>is it now time to start this upgrade for real?</p>",
        "id": 251960304,
        "sender_full_name": "cuviper",
        "timestamp": 1630716926
    },
    {
        "content": "<p>well, no, I guess we need to wait for beta to actually be 1.56 first, if we want to keep that much stable</p>",
        "id": 251960904,
        "sender_full_name": "cuviper",
        "timestamp": 1630717479
    },
    {
        "content": "<p>Related to this, how about other rust-lang org repos? They're less likely to expose unknown bugs than rustc (since they're usually just normal crates), but it could be nice to do some extra testing. Thoughts?</p>",
        "id": 252596538,
        "sender_full_name": "rylev",
        "timestamp": 1631179767
    },
    {
        "content": "<p>Personally (for e.g. <a href=\"http://docs.rs\">docs.rs</a>) I would take PRs for that sort of thing but I wouldn't spend my own time on it</p>",
        "id": 252613264,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1631189088
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224872\">rylev</span> <a href=\"#narrow/stream/268952-edition-2021/topic/Updating.20rustc.20to.20use.20Rust.202021/near/252596538\">said</a>:</p>\n<blockquote>\n<p>Related to this, how about other rust-lang org repos? They're less likely to expose unknown bugs than rustc (since they're usually just normal crates), but it could be nice to do some extra testing. Thoughts?</p>\n</blockquote>\n<p>a bunch of those need to work on stable rust, so an edition upgrade can't be merged yet. but can't hurt to try it out already.</p>",
        "id": 252623478,
        "sender_full_name": "Mara",
        "timestamp": 1631193468
    },
    {
        "content": "<p>for published \"intentional\" crates, that's going to raise questions about MSRV</p>",
        "id": 252662501,
        "sender_full_name": "cuviper",
        "timestamp": 1631208003
    },
    {
        "content": "<p>Those are questions we already need to answer. For any crate we're maintaining, we should know what versions of Rust it needs to support.</p>",
        "id": 252667839,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1631210262
    },
    {
        "content": "<p>We need a coherent policy on this</p>",
        "id": 253467817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631731943
    },
    {
        "content": "<p>it doesn't make sense to have a crate-by-crate policy imo</p>",
        "id": 253467829,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631731948
    },
    {
        "content": "<p>/me thinks about \"LTS\"</p>",
        "id": 253467862,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631731964
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/268952-edition-2021/topic/Updating.20rustc.20to.20use.20Rust.202021/near/253467829\">said</a>:</p>\n<blockquote>\n<p>it doesn't make sense to have a crate-by-crate policy imo</p>\n</blockquote>\n<p>It may make sense to have different baselines for some crates, if there are crates that people commonly use with older compilers. But I agree that we should have one coherent policy, even if that policy includes cases for different levels of MSRV.</p>",
        "id": 253469260,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1631732462
    },
    {
        "content": "<p>For instance, I've seen the argument that the libc crate needs to support ancient MSRVs, because people use it with old rust compilers. I personally wonder if we need to support as far back as we do, though; I would love to see libc's MSRV updated to (say) at least Rust 2018 or so, if not newer.</p>",
        "id": 253469413,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1631732521
    },
    {
        "content": "<p>I would suggest we not use editions as a motivation <em>for</em> upgrading, at least in the short term after their release -- pinning to the N-1 edition may make some sense, though.</p>\n<p>Otherwise we risk the perception, I think, of an edition being a 'forceful' MSRV bump which we definitely want to avoid (if a bunch of project-owned official crates bump after an edition)</p>",
        "id": 253478664,
        "sender_full_name": "simulacrum",
        "timestamp": 1631736278
    },
    {
        "content": "<p>I'm not suggesting in general that we should use the edition as motivation for upgrading in general. I think many of our official crates should have a policy like \"stable minus one\", while a few others (perhaps libc) may need a lower MSRV.</p>",
        "id": 253480470,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1631736952
    },
    {
        "content": "<p>For libc in particular, I'd just love to upgrade the MSRV far enough to make use of a few useful compiler features without having to make them conditional.</p>",
        "id": 253480618,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1631737005
    },
    {
        "content": "<p>Sure -- not saying you were, necessarily, just wanted to flag it. Even if we had a policy, I wouldn't want it to ever say \"to the first Rust 2018\" compiler, rather, Rust 1.38 or w/e and then we can justify that with the edition, in part, but I just am very reactionary/scared of tying things to editions in docs that aren't actually so.</p>",
        "id": 253481837,
        "sender_full_name": "simulacrum",
        "timestamp": 1631737511
    },
    {
        "content": "<p>Yeah, I agree. In practice, the actual thing I'd want to bump MSRV to is the minimum version that gives us the features needed.</p>",
        "id": 253481995,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1631737582
    },
    {
        "content": "<p>It looks like if we bumped to Rust 1.33, we could eliminate all the conditional bits in libc.</p>",
        "id": 253482241,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1631737704
    },
    {
        "content": "<p>From the libc readme:</p>\n<div class=\"codehilite\" data-code-language=\"Markdown\"><pre><span></span><code><span class=\"gu\">## Rust version support</span>\n\nThe minimum supported Rust toolchain version is <span class=\"gs\">**Rust 1.13.0**</span> . APIs requiring\nnewer Rust features are only available on newer Rust toolchains:\n\n| Feature              | Version |\n|----------------------|---------|\n| <span class=\"sb\">`union`</span>              |  1.19.0 |\n| <span class=\"sb\">`const mem::size_of`</span> |  1.24.0 |\n| <span class=\"sb\">`repr(align)`</span>        |  1.25.0 |\n| <span class=\"sb\">`extra_traits`</span>       |  1.25.0 |\n| <span class=\"sb\">`core::ffi::c_void`</span>  |  1.30.0 |\n| <span class=\"sb\">`repr(packed(N))`</span>    |  1.33.0 |\n| <span class=\"sb\">`cfg(target_vendor)`</span> |  1.33.0 |\n</code></pre></div>",
        "id": 253482309,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1631737747
    },
    {
        "content": "<p>I think serde is still on 1.17? Is there a reverse dep there?</p>",
        "id": 253482573,
        "sender_full_name": "simulacrum",
        "timestamp": 1631737860
    },
    {
        "content": "<p>Looks like no</p>",
        "id": 253482736,
        "sender_full_name": "simulacrum",
        "timestamp": 1631737926
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <strong>serde</strong>: rustc 1.13+ <strong>serde_derive</strong>: rustc 1.31+</p>",
        "id": 253487718,
        "sender_full_name": "Urgau",
        "timestamp": 1631739936
    }
]