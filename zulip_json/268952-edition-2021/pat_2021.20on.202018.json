[
    {
        "content": "<p>Now that all my projects are reporting the OR_PATTERNS_BACK_COMPAT lint, it has me wondering what the intended fix is for people who want to migrate to the 2021 version. If I follow the lint's suggestion and use <code>pat_param</code> everywhere, then when 2021 comes around the code will still work but I won't be using <code>pat</code> like I would like. On the other hand, if I just ignore the warning, then in 2021 I will be able to use the migration and get a better result. So that seems like a perverse incentive to silence the lint (a future incompatible lint, no less).</p>\n<p>Would it be possible to introduce a <code>k#pat2021</code> matcher that works in old editions and can be cleaned up by a lint in 2021 edition? That would allow me to make the meaningful migration now, in advance of the edition boundary, and the second step can be fully automatic and pain free.</p>",
        "id": 243604366,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624419870
    },
    {
        "content": "<p>It was decided (<a href=\"https://github.com/rust-lang/rust/pull/83386#issuecomment-827890256\">around here</a>) to remove the pat2021 matcher.</p>\n<p>I would say, after migrating to 2021, just search/replace <code>pat_param</code> and change them to <code>pat</code> if that's what you want.</p>",
        "id": 243604895,
        "sender_full_name": "Eric Huss",
        "timestamp": 1624420780
    },
    {
        "content": "<p>I guess it would be good to have a (clippy?) lint that detects uses of <code>$($pat:pat_param)|+</code> in edition 2021 then. That should be roughly equivalent. Without the lint, I doubt I will remember to go back and fix the code in N months</p>",
        "id": 243605470,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624421669
    },
    {
        "content": "<p>Now that we have the syntax reservation, I wonder if we could introduce a <code>k2021#pat</code>, which would mean \"this keyword with the meaning it would have in the 2021 edition\".</p>",
        "id": 243607250,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624424414
    },
    {
        "content": "<p>I did mention edition migration prefixes as one of the potential uses for reserved prefixes in the RFC</p>",
        "id": 243608744,
        "sender_full_name": "bstrie",
        "timestamp": 1624426466
    },
    {
        "content": "<p>so hopefully the question is \"should\" rather than \"could\" :)</p>",
        "id": 243608755,
        "sender_full_name": "bstrie",
        "timestamp": 1624426484
    },
    {
        "content": "<blockquote>\n<p>reporting the OR_PATTERNS_BACK_COMPAT lint</p>\n</blockquote>\n<p>that sounds like that shouldn't happen. did we not make that lint allow-by-default? :S</p>",
        "id": 243623191,
        "sender_full_name": "Mara",
        "timestamp": 1624438333
    },
    {
        "content": "<p>note that the new <code>$_:pat</code> isn't identical to <code>$($_:pat_param)|+</code>. the former allows leading <code>|</code>s too.</p>",
        "id": 243623390,
        "sender_full_name": "Mara",
        "timestamp": 1624438489
    },
    {
        "content": "<blockquote>\n<p>introduce a <code>k2021#pat</code>, which would mean \"this keyword with the meaning it would have in the 2021 edition\".</p>\n</blockquote>\n<p>you can already do that using the <code>rust-2021</code> crate:   ;)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">rust_2021</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"cp\">$x</span>:<span class=\"nc\">pat</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{};</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>(nightly only)</p>",
        "id": 243623860,
        "sender_full_name": "Mara",
        "timestamp": 1624438767
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310399\">Mara</span> <a href=\"#narrow/stream/268952-edition-2021/topic/pat_2021.20on.202018/near/243623191\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>reporting the OR_PATTERNS_BACK_COMPAT lint</p>\n</blockquote>\n<p>that sounds like that shouldn't happen. did we not make that lint allow-by-default? :S</p>\n</blockquote>\n<p>I didn't realize it when I posted that, but I have a giant \"turn everything on\" lint section in my projects, and among the lint settings is <code>warn(future_incompatible)</code></p>",
        "id": 243624041,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624438870
    },
    {
        "content": "<p>ah, that explains</p>",
        "id": 243624052,
        "sender_full_name": "Mara",
        "timestamp": 1624438882
    },
    {
        "content": "<p>but maybe we shouldn't include edition things in that</p>",
        "id": 243624084,
        "sender_full_name": "Mara",
        "timestamp": 1624438896
    },
    {
        "content": "<p>because these aren't things that will just break at a point in the future at a new release or something</p>",
        "id": 243624105,
        "sender_full_name": "Mara",
        "timestamp": 1624438910
    },
    {
        "content": "<p>well, this one will, I think</p>",
        "id": 243624124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624438922
    },
    {
        "content": "<p>only when upgrading to the new edition, right?</p>",
        "id": 243624175,
        "sender_full_name": "Mara",
        "timestamp": 1624438933
    },
    {
        "content": "<p>right... oh I see you mean you want to reserve <code>future_incompatible</code> to things that will break in future versions of the compiler without an edition change</p>",
        "id": 243624283,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624438991
    },
    {
        "content": "<p>yeah exactly. things where your code will just break if you don't do anything</p>",
        "id": 243624300,
        "sender_full_name": "Mara",
        "timestamp": 1624439004
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> ^</p>",
        "id": 243624337,
        "sender_full_name": "Mara",
        "timestamp": 1624439027
    },
    {
        "content": "<p>doesn't that violate rust backward compatibility? the only things in that category should be incredibly rare</p>",
        "id": 243624406,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624439045
    },
    {
        "content": "<p>yes, those are very rare. mostly bug fixes. accidental accepted unsoundness etc.</p>",
        "id": 243624449,
        "sender_full_name": "Mara",
        "timestamp": 1624439071
    },
    {
        "content": "<p>i don't think we have any allow-by-default lints in that category</p>",
        "id": 243624471,
        "sender_full_name": "Mara",
        "timestamp": 1624439085
    },
    {
        "content": "<p>do you remember why you added <code>warn(future_incompatible)</code>?</p>",
        "id": 243624508,
        "sender_full_name": "Mara",
        "timestamp": 1624439108
    },
    {
        "content": "<p>It seems like a pretty logical thing to want to be warned about</p>",
        "id": 243624535,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624439126
    },
    {
        "content": "<p>yeah but i think all those warnings (except some edition-related ones) are already enabled by default anyway</p>",
        "id": 243624569,
        "sender_full_name": "Mara",
        "timestamp": 1624439153
    },
    {
        "content": "<p>I try to stay on top of changes to rust and so advance warning is always good (provided I can actually do something useful about it)</p>",
        "id": 243624620,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624439164
    },
    {
        "content": "<p>let's see.. ah, we do have two lints that are allow by default that are not edition lints. \"pointers are not structural-match\" and \"trailing semicolon in macro body used as expression\"</p>",
        "id": 243624715,
        "sender_full_name": "Mara",
        "timestamp": 1624439247
    },
    {
        "content": "<p>I believe my selection process for the big list was to turn on literally everything and then remove all the lints that had low value, disagree with my style or have high false positive rates</p>",
        "id": 243624727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624439266
    },
    {
        "content": "<p>interesting. i rarely see people enable extra lints, only disable some in some specific cases.</p>",
        "id": 243624813,
        "sender_full_name": "Mara",
        "timestamp": 1624439314
    },
    {
        "content": "<p>I believe originally the compiler only had the idea of future incompatible changes being breaking changes (usually due to soundness issues). Edition related future incompatible changes were added later. The idea of what a future incompatible change is has been somewhat fluid, and I think weâ€™re only now really getting a good idea of what that mechanism is</p>",
        "id": 243624845,
        "sender_full_name": "rylev",
        "timestamp": 1624439341
    },
    {
        "content": "<p>cargo also has this mechanism for showing these kind of backwards compatibility lints even for dependencies, even though lints are normally suppressed for (remote) dependencies</p>",
        "id": 243624899,
        "sender_full_name": "Mara",
        "timestamp": 1624439390
    },
    {
        "content": "<p>Oh I see, I actually filed a bug report about that a few hours ago</p>",
        "id": 243624955,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624439413
    },
    {
        "content": "<p>oh, do you have a link?</p>",
        "id": 243624966,
        "sender_full_name": "Mara",
        "timestamp": 1624439423
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/86567\">#86567</a></p>",
        "id": 243625027,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624439459
    },
    {
        "content": "<p>for edition-based future incompat lints, I think it is definitely wrong to warn on use in dependencies, since that won't actually break even if you upgrade your edition</p>",
        "id": 243625287,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624439576
    },
    {
        "content": "<p>yeah, that's a bug! but already on stable i'm afraid. :(</p>",
        "id": 243626207,
        "sender_full_name": "Mara",
        "timestamp": 1624440225
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> does your PR fix this too?</p>",
        "id": 243626584,
        "sender_full_name": "Mara",
        "timestamp": 1624440475
    },
    {
        "content": "<p>Hmmmâ€¦ there is logic already to avoid warning in dependencies. Iâ€™ll take a closer look at this.</p>",
        "id": 243626827,
        "sender_full_name": "rylev",
        "timestamp": 1624440616
    },
    {
        "content": "<p>Yeah, --cap-lints. but then there's a second mechanism to forward future incompatibility lints. but we shouldn't do that for edition stuff</p>",
        "id": 243626889,
        "sender_full_name": "Mara",
        "timestamp": 1624440665
    },
    {
        "content": "<p>and we should probably not add them to the <code>future_incompatible</code> group either. So an <code>else</code> in <code>compiler/rustc_lint/src/context.rs</code> around line 224 i suppose.</p>",
        "id": 243626934,
        "sender_full_name": "Mara",
        "timestamp": 1624440703
    },
    {
        "content": "<p>Yep. Iâ€™m not at my computer right now, but I have it on my todo list for today to look into the cap-lints issue and I can look into this today too</p>",
        "id": 243627022,
        "sender_full_name": "rylev",
        "timestamp": 1624440747
    },
    {
        "content": "<p>thank you!</p>",
        "id": 243627042,
        "sender_full_name": "Mara",
        "timestamp": 1624440756
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> </p>\n<blockquote>\n<p>This lint should be suppressed, because it originates in another crate.</p>\n</blockquote>\n<p>Note that that is not the case for crates that are a <code>{ path = .. }</code> dependency. Only 'remote' dependencies get --cap-lints passed automatically.</p>",
        "id": 243627469,
        "sender_full_name": "Mara",
        "timestamp": 1624440996
    },
    {
        "content": "<p>okay, with <code>git = \"file://\"</code>, same things happens.</p>",
        "id": 243628170,
        "sender_full_name": "Mara",
        "timestamp": 1624441447
    },
    {
        "content": "<p>looks like the warning is emitted when the macro_rules is used, not just when it is defined. so that might be a bug specifically with the or pattern lint, not with the future incompatibility lint mechanism</p>",
        "id": 243628211,
        "sender_full_name": "Mara",
        "timestamp": 1624441494
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> Are you saying above that the --cap-lints allow is being passed to the dependency but it is still warning?</p>",
        "id": 243637607,
        "sender_full_name": "rylev",
        "timestamp": 1624447694
    },
    {
        "content": "<p>I've been able to reproduce the issue in a test. I'm unsure why <a href=\"https://github.com/rust-lang/rust/blob/b6f3cb9502b1910f6af32f426fdb78e813b390ef/compiler/rustc_middle/src/lint.rs#L282-L302\">this code</a> does not prevent the lint from firing.</p>",
        "id": 243640535,
        "sender_full_name": "rylev",
        "timestamp": 1624449580
    },
    {
        "content": "<p>Looks like the span is not seen as coming from an external macro</p>",
        "id": 243642145,
        "sender_full_name": "rylev",
        "timestamp": 1624450492
    },
    {
        "content": "<p>The span for or pattern has a ExpnKind::Root. I'm not super up to speed on expansion, but does that make sense? Perhaps <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> can help? Is a macro_rules macro pattern considered a part of root expansion?</p>",
        "id": 243643056,
        "sender_full_name": "rylev",
        "timestamp": 1624451006
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310399\">Mara</span> <a href=\"#narrow/stream/268952-edition-2021/topic/pat_2021.20on.202018/near/243628211\">said</a>:</p>\n<blockquote>\n<p>looks like the warning is emitted when the macro_rules is used, not just when it is defined. so that might be a bug specifically with the or pattern lint, not with the future incompatibility lint mechanism</p>\n</blockquote>\n<p>I guess this matches up with what <span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> was saying</p>",
        "id": 243643303,
        "sender_full_name": "rylev",
        "timestamp": 1624451154
    },
    {
        "content": "<p>i think the macro_rules gets parsed <em>again</em> when compiling the crate that uses it</p>",
        "id": 243647897,
        "sender_full_name": "Mara",
        "timestamp": 1624453411
    },
    {
        "content": "<p>and then produces a warnings too, in that crate.</p>",
        "id": 243647919,
        "sender_full_name": "Mara",
        "timestamp": 1624453423
    },
    {
        "content": "<blockquote>\n<p>Are you saying above that the --cap-lints allow is being passed to the dependency but it is still warning?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> yes, kind of. The <code>rustc</code> invocation with <code>--cap-lints</code> to compile the crate that contains the macro_rules definition does <em>not</em> produce the warning. (even without --cap-lints. as the lint is set to allow there by default). the warning is produced by the <code>rustc</code> invocation on the binary crate that uses it</p>",
        "id": 243648067,
        "sender_full_name": "Mara",
        "timestamp": 1624453489
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310399\">Mara</span> <a href=\"#narrow/stream/268952-edition-2021/topic/pat_2021.20on.202018/near/243647897\">said</a>:</p>\n<blockquote>\n<p>i think the macro_rules gets parsed <em>again</em> when compiling the crate that uses it</p>\n</blockquote>\n<p>Yes it kind of seems like this is the case. I have no idea if that is a bug or if that needs to happen, and I'm not sure how the lint could track whether that's the case.</p>",
        "id": 243648304,
        "sender_full_name": "rylev",
        "timestamp": 1624453605
    },
    {
        "content": "<p>checking now where <code>compile_macro()</code> is called from</p>",
        "id": 243648656,
        "sender_full_name": "Mara",
        "timestamp": 1624453800
    },
    {
        "content": "<p>looks like there is a def_id with a .is_local() function to check if it  comes from the crate that's currently being compiled</p>",
        "id": 243648807,
        "sender_full_name": "Mara",
        "timestamp": 1624453879
    },
    {
        "content": "<p>Do you mean inside <code>get_macro_by_def_id</code>?</p>",
        "id": 243649037,
        "sender_full_name": "rylev",
        "timestamp": 1624453986
    },
    {
        "content": "<p>Looks like you are discussing <a href=\"https://github.com/rust-lang/rust/issues/85708\">https://github.com/rust-lang/rust/issues/85708</a>.</p>",
        "id": 243649063,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1624454005
    },
    {
        "content": "<p>Hmm yes definitely looks like it</p>",
        "id": 243649189,
        "sender_full_name": "rylev",
        "timestamp": 1624454063
    },
    {
        "content": "<p>yeah i guess that might be the root cause. compile_macro() happens again in every crate that uses a macro_rules? not just while compiling the crate that defined it?</p>",
        "id": 243649213,
        "sender_full_name": "Mara",
        "timestamp": 1624454077
    },
    {
        "content": "<blockquote>\n<p>However, it should be possible to make a hack that just fixes the problems for macros: when we're checking the span of a token for a foreign macro, fall back to the edition of that foreign crate if the is .</p>\n</blockquote>\n<p>Is there an easy way to check that a span is coming from a different crate?</p>",
        "id": 243649409,
        "sender_full_name": "rylev",
        "timestamp": 1624454163
    },
    {
        "content": "<blockquote>\n<p>compile_macro() happens again in every crate that uses a macro_rules? not just while compiling the crate that defined it?</p>\n</blockquote>\n<p>Yes.</p>\n<blockquote>\n<p>Is there an easy way to check that a span is coming from a different crate?</p>\n</blockquote>\n<p>Generally yes, but not for non-macro-expanded spans due to the aforementioned issue.</p>",
        "id": 243650050,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1624454455
    },
    {
        "content": "<p>Instead of using the span, would checking DefId.is_local() work at the place where compile_macro is called?</p>",
        "id": 243650162,
        "sender_full_name": "Mara",
        "timestamp": 1624454503
    },
    {
        "content": "<p>That's why the workaround in <a href=\"https://github.com/rust-lang/rust/pull/85709\">https://github.com/rust-lang/rust/pull/85709</a> takes the edition from somewhere else.</p>",
        "id": 243650167,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1624454505
    },
    {
        "content": "<p>If the def-id is the macro definition's def-id, then yes.</p>",
        "id": 243650307,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1624454549
    },
    {
        "content": "<p>I can check that</p>",
        "id": 243650348,
        "sender_full_name": "rylev",
        "timestamp": 1624454569
    },
    {
        "content": "<p>already implemented it, just waiting for it to compile.. :)</p>",
        "id": 243650419,
        "sender_full_name": "Mara",
        "timestamp": 1624454597
    },
    {
        "content": "<p>yeah that works</p>",
        "id": 243651183,
        "sender_full_name": "Mara",
        "timestamp": 1624454910
    },
    {
        "content": "<p>no more warning from the dep, but still a warning from a locally defined macro_rules. <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 243651224,
        "sender_full_name": "Mara",
        "timestamp": 1624454935
    },
    {
        "content": "<p>YAY! Do you push the change?</p>",
        "id": 243651321,
        "sender_full_name": "rylev",
        "timestamp": 1624454987
    },
    {
        "content": "<p>i'll open a PR once i cleaned it up a bit</p>",
        "id": 243651401,
        "sender_full_name": "Mara",
        "timestamp": 1624455007
    },
    {
        "content": "<p>Are you just passing a is_local bool all the way down the call stack until the lint check?</p>",
        "id": 243651487,
        "sender_full_name": "rylev",
        "timestamp": 1624455040
    },
    {
        "content": "<p>yeah kind of. checking now if i can just disable lints entirely when compiling remote macro_rules. seems like a better solution.</p>",
        "id": 243651654,
        "sender_full_name": "Mara",
        "timestamp": 1624455115
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> FYI: we don't disable future_compatibility lints that are not edition changes. This is so users know that their dependency will break at some point</p>",
        "id": 243653040,
        "sender_full_name": "rylev",
        "timestamp": 1624455721
    },
    {
        "content": "<p>yes</p>",
        "id": 243653106,
        "sender_full_name": "Mara",
        "timestamp": 1624455740
    },
    {
        "content": "<blockquote>\n<p>i'll open a PR once i cleaned it up a bit</p>\n</blockquote>\n<p>oops, got distracted.</p>\n<p>here it is: <a href=\"https://github.com/rust-lang/rust/pull/86574\">https://github.com/rust-lang/rust/pull/86574</a></p>",
        "id": 243674021,
        "sender_full_name": "Mara",
        "timestamp": 1624464175
    },
    {
        "content": "<p>Looks great! I also like the cleanup of that big rightward drift where the lint was being emitted.</p>",
        "id": 243683706,
        "sender_full_name": "rylev",
        "timestamp": 1624468635
    },
    {
        "content": "<p>yeah i had to add one more level, which was starting to get a bit too much ^^'</p>",
        "id": 243683925,
        "sender_full_name": "Mara",
        "timestamp": 1624468722
    },
    {
        "content": "<p>but in this case there were no bindings from the patterns needed, so <code>matches!()</code> worked fine</p>",
        "id": 243684019,
        "sender_full_name": "Mara",
        "timestamp": 1624468771
    },
    {
        "content": "<p>can't wait for let_chains though ^^</p>",
        "id": 243684030,
        "sender_full_name": "Mara",
        "timestamp": 1624468777
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/268952-edition-2021/topic/pat_2021.20on.202018/near/243624283\">said</a>:</p>\n<blockquote>\n<p>right... oh I see you mean you want to reserve <code>future_incompatible</code> to things that will break in future versions of the compiler without an edition change</p>\n</blockquote>\n<p>yes please</p>",
        "id": 243697632,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624474921
    },
    {
        "content": "<p>should there be a separate lint group for <code>edition_incompatible</code>? <code>migration_hazard</code>?</p>",
        "id": 243700955,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624476684
    },
    {
        "content": "<p>It seems like the term \"future incompatible\" has been understood by people in different ways. I think <span class=\"user-mention\" data-user-id=\"224872\">@rylev</span>'s PR distinguished various categories well. I would want to distinguish:</p>\n<ul>\n<li><em>breaking change</em>: code that may break or change meaning when upgrading to a new version of rustc (rare)</li>\n<li><em>edition change</em>: code that may break or change meaning when upgrading to a new edition (common, automated)</li>\n</ul>",
        "id": 243768399,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624532184
    },
    {
        "content": "<p>right now we treat those like two 'flavors' of future-incompatibility</p>",
        "id": 243768415,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624532201
    },
    {
        "content": "<p>personally they seem completely different to me</p>",
        "id": 243768421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624532208
    },
    {
        "content": "<p>so I agree, <span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span>, that we should have a distinct lint group for edition changes</p>",
        "id": 243768475,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624532257
    },
    {
        "content": "<p>we already have lint groups for each edition</p>",
        "id": 243771479,
        "sender_full_name": "Mara",
        "timestamp": 1624534317
    },
    {
        "content": "<p>so we just need an <code>else</code> in <code>compiler/rustc_lint/src/context.rs</code> around line 224</p>",
        "id": 243771558,
        "sender_full_name": "Mara",
        "timestamp": 1624534356
    },
    {
        "content": "<p>I was going to tackle this in a little bit unless <span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> wanted to work on it.</p>",
        "id": 243775544,
        "sender_full_name": "rylev",
        "timestamp": 1624536767
    },
    {
        "content": "<p>Going to look into this now</p>",
        "id": 243783561,
        "sender_full_name": "rylev",
        "timestamp": 1624540540
    },
    {
        "content": "<p>Should have a PR soon - just running tests and such</p>",
        "id": 243786045,
        "sender_full_name": "rylev",
        "timestamp": 1624541671
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> FYI: <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/future-incompatible-lint-group.rs\">the test</a> for the <code>future_incompatible</code> lint group tests against a lint that we are proposing does not qualify as a future incompatible lint (but rather an edition lint). Does this change require any larger consensus before we make it? While this isn't a breaking change, it could impact users in significant ways.</p>",
        "id": 243791759,
        "sender_full_name": "rylev",
        "timestamp": 1624543859
    },
    {
        "content": "<p>i think when the 2018 edition happened there was a bit more push towards leaving the old edition behind, instead of just considering them variants of rust we support in parallel.</p>",
        "id": 243793126,
        "sender_full_name": "Mara",
        "timestamp": 1624544449
    },
    {
        "content": "<p>Here's the changes: <a href=\"https://github.com/rylev/rust/compare/update-fcw-handling...rylev:future-compat-lint-group\">https://github.com/rylev/rust/compare/update-fcw-handling...rylev:future-compat-lint-group</a> I'll open a PR when <a href=\"https://github.com/rust-lang/rust/pull/86330\">https://github.com/rust-lang/rust/pull/86330</a> is merged</p>",
        "id": 243802556,
        "sender_full_name": "rylev",
        "timestamp": 1624548261
    },
    {
        "content": "<p>looks like you force-pushed that PR after the approval. then it needs re-approval i think</p>",
        "id": 243806206,
        "sender_full_name": "Mara",
        "timestamp": 1624549766
    },
    {
        "content": "<p>reapproved it and put it in a rollup. should be merged in a few hours.</p>",
        "id": 243806787,
        "sender_full_name": "Mara",
        "timestamp": 1624550015
    },
    {
        "content": "<p>Whoops sorry! I wish I had the ability to r+ even just other people <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 243816234,
        "sender_full_name": "rylev",
        "timestamp": 1624554360
    },
    {
        "content": "<p>Here's the change for not including edition lints in <code>future_incompatible</code> lint group: <a href=\"https://github.com/rust-lang/rust/pull/86689\">https://github.com/rust-lang/rust/pull/86689</a></p>",
        "id": 244156510,
        "sender_full_name": "rylev",
        "timestamp": 1624891897
    },
    {
        "content": "<p>reviewing now :)</p>",
        "id": 244157625,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624892339
    }
]