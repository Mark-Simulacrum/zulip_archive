[
    {
        "content": "<p>shortly after <code>?</code>-in-main was stabilized there was quite a bit of consternation (e.g. <a href=\"https://github.com/rust-lang/rust/issues/43301#issuecomment-409188042\">https://github.com/rust-lang/rust/issues/43301#issuecomment-409188042</a>) that the <code>impl Termination for Result&lt;_, impl Debug&gt;</code> should have been <code>impl Display</code> instead. does anyone think this is worth addressing in the new edition?</p>",
        "id": 230559220,
        "sender_full_name": "bstrie",
        "timestamp": 1615916696
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256342\">@bstrie</span> hm, seems like it'd be hard to make an automatic migration for that</p>",
        "id": 230559610,
        "sender_full_name": "Mara",
        "timestamp": 1615916824
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256342\">bstrie</span> <a href=\"#narrow/stream/268952-edition-2021/topic/Termination.20using.20Display.20rather.20than.20Debug/near/230559220\">said</a>:</p>\n<blockquote>\n<p>shortly after <code>?</code>-in-main was stabilized there was quite a bit of consternation (e.g. <a href=\"https://github.com/rust-lang/rust/issues/43301#issuecomment-409188042\">https://github.com/rust-lang/rust/issues/43301#issuecomment-409188042</a>) that the <code>impl Termination for Result&lt;, impl Debug&gt;</code> should have been <code>impl Display</code> instead. does anyone think this is worth addressing in the new edition?</p>\n</blockquote>\n<p>IIRC <span class=\"user-mention\" data-user-id=\"222471\">@BurntSushi</span> explicitly mentions this in a recent article <a href=\"https://github.com/benhoyt/countwords/blob/8553c8f600c40a4626e966bc7e7e804097e6e2f4/rust/simple/main.rs#L24-L33\">https://github.com/benhoyt/countwords/blob/8553c8f600c40a4626e966bc7e7e804097e6e2f4/rust/simple/main.rs#L24-L33</a></p>",
        "id": 230559717,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615916858
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310399\">Mara</span> <a href=\"#narrow/stream/268952-edition-2021/topic/Termination.20using.20Display.20rather.20than.20Debug/near/230559610\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"256342\">bstrie</span> hm, seems like it'd be hard to make an automatic migration for that</p>\n</blockquote>\n<p>I don't know how sophisticated the migration machinery is, but the migration is pretty rote: 1) see if <code>E</code> already implements <code>Display</code>, 2) if not, insert the following:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Display</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">fmt</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Formatter</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">std</span>::<span class=\"n\">fmt</span>::<span class=\"nb\">Result</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">write!</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>so the question is, does rustfix have access to type information, or does it only work on tokens?</p>",
        "id": 230561051,
        "sender_full_name": "bstrie",
        "timestamp": 1615917273
    },
    {
        "content": "<p>rustfix uses suggestions from the compiler itself - I guess theoretically the compiler could see if there was already an impl? I don't think that's super common to do but it should be possible</p>",
        "id": 230561467,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615917415
    },
    {
        "content": "<p>(though I guess coherence could be a problem, hm)</p>",
        "id": 230561862,
        "sender_full_name": "bstrie",
        "timestamp": 1615917540
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256342\">@bstrie</span> but that means if i return an <code>anyhow::Result</code>, i'll suddenly silently lose the error source chain. (it prints the chain with <code>{:?}</code>, but not with <code>{}</code>)</p>",
        "id": 230561873,
        "sender_full_name": "Mara",
        "timestamp": 1615917542
    },
    {
        "content": "<p>(which was a design decision driven by the fact that we print the Debug and not the Display version in Termination)</p>",
        "id": 230562427,
        "sender_full_name": "Mara",
        "timestamp": 1615917703
    },
    {
        "content": "<p>how does anyhow expect users to print the Display impl, then?</p>",
        "id": 230562984,
        "sender_full_name": "bstrie",
        "timestamp": 1615917895
    },
    {
        "content": "<p>Thinking just mechanism, without taking a position on whether it should: a 2021 binary could use <code>Termination2021</code> instead of <code>Termination2015</code>, which could have different implementations.</p>",
        "id": 230563292,
        "sender_full_name": "scottmcm",
        "timestamp": 1615918014
    },
    {
        "content": "<p>yeah, my original comment was (unfortunately) made shortly after stabilization. i really wish i had caught it beforehand. <a href=\"https://github.com/rust-lang/rust/issues/43301#issuecomment-388575730\">https://github.com/rust-lang/rust/issues/43301#issuecomment-388575730</a></p>\n<p>in \"real\" programs i tend to just use <code>anyhow</code> and it does the right thing because it hijacks the <code>Debug</code> impl, as <span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> mentioned above. so in some sense, it's not a huge deal, but it would be really nice to have it fixed.</p>",
        "id": 230563398,
        "sender_full_name": "BurntSushi",
        "timestamp": 1615918058
    },
    {
        "content": "<p>since this has to do with anyhow, perhaps <span class=\"user-mention\" data-user-id=\"119235\">@David Tolnay</span> has some thoughts</p>",
        "id": 230564073,
        "sender_full_name": "bstrie",
        "timestamp": 1615918301
    },
    {
        "content": "<p>multiple traits could be an option to avoid silently breaking/changing behaviour, but i also don't want to end up with Thing2015 and Thing2021 for everything in std (:</p>",
        "id": 230564201,
        "sender_full_name": "Mara",
        "timestamp": 1615918346
    },
    {
        "content": "<p>but maybe once the new try traits and Terminate are both stable, the current situation is much less of a problem. because you can just have some type <code>X</code> that you can use like <code>fn main() -&gt; X {}</code> which would allow <code>?</code> on Results and print them with Display or whatever you like. (and you could also modify/localise/stylize the hardcoded <code>\"Error: \"</code> prefix that we have now for <code>Result&lt;(), impl Debug&gt;</code>)</p>",
        "id": 230564543,
        "sender_full_name": "Mara",
        "timestamp": 1615918474
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310399\">Mara</span> <a href=\"#narrow/stream/268952-edition-2021/topic/Termination.20using.20Display.20rather.20than.20Debug/near/230564201\">said</a>:</p>\n<blockquote>\n<p>i also don't want to end up with Thing2015 and Thing2021 for everything in std (:</p>\n</blockquote>\n<p>well, that means we just need <code>std2018</code>, <code>std2021</code>, and so on :P</p>",
        "id": 230566696,
        "sender_full_name": "bstrie",
        "timestamp": 1615919372
    },
    {
        "content": "<p>I definitely think at the <code>main</code> level that the arguments against mixing residuals get much weaker.  Like it'd be great to have a (maybe perma-unstable) type that rustdoc could use in its <code>main</code> that's <code>Termination</code> and allows you to <code>?</code> whatever you want.</p>",
        "id": 230566791,
        "sender_full_name": "scottmcm",
        "timestamp": 1615919404
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> because error reporting</p>",
        "id": 230566972,
        "sender_full_name": "Mara",
        "timestamp": 1615919473
    },
    {
        "content": "<p>would a stable <code>try {}</code> also reduce the need for this? specifically, would a <code>catch</code> block replace the try_main pattern seen in burntsushi's code and the anyhow docs?</p>",
        "id": 230567003,
        "sender_full_name": "bstrie",
        "timestamp": 1615919492
    },
    {
        "content": "<p>(I'm not even sure if <code>try {} catch {}</code> is being considered, I'm so confused as to the state of that feature)</p>",
        "id": 230567073,
        "sender_full_name": "bstrie",
        "timestamp": 1615919521
    },
    {
        "content": "<p>not the <code>catch {}</code> part. the <code>try {}</code> block would return a Result or an Option, which you could use <code>.unwrap_or_else</code> on or whatever you want</p>",
        "id": 230567248,
        "sender_full_name": "Mara",
        "timestamp": 1615919580
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310399\">Mara</span> <a href=\"#narrow/stream/268952-edition-2021/topic/Termination.20using.20Display.20rather.20than.20Debug/near/230564543\">said</a>:</p>\n<blockquote>\n<p>but maybe once the new try traits and Terminate are both stable, the current situation is much less of a problem. because you can just have some type <code>X</code> that you can use like <code>fn main() -&gt; X {}</code> which would allow <code>?</code> on Results and print them with Display or whatever you like. (and you could also modify/localise/stylize the hardcoded <code>\"Error: \"</code> prefix that we have now for <code>Result&lt;(), impl Debug&gt;</code>)</p>\n</blockquote>\n<p>i brought that up in my linked comment. the thing is, if i have to go and create my own type and impl a trait and all that just to get the right output, then i'm probably just going to write <code>try_main</code> instead. now if i already have my custom error type for other reasons, then yeah, it works nicely once <code>Termination</code> is stable.</p>",
        "id": 230567936,
        "sender_full_name": "BurntSushi",
        "timestamp": 1615919847
    },
    {
        "content": "<p>We definitely cannot use Display</p>",
        "id": 230567937,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615919847
    },
    {
        "content": "<p>Sorry catching up still</p>",
        "id": 230567957,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615919859
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256342\">bstrie</span> <a href=\"#narrow/stream/268952-edition-2021/topic/Termination.20using.20Display.20rather.20than.20Debug/near/230567073\">said</a>:</p>\n<blockquote>\n<p>(I'm not even sure if <code>try {} catch {}</code> is being considered, I'm so confused as to the state of that feature)</p>\n</blockquote>\n<p>(The syntax space is reserved -- <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/try-block/try-block-catch.rs\">https://github.com/rust-lang/rust/blob/master/src/test/ui/try-block/try-block-catch.rs</a> -- but there's no plan for semantics for <code>catch</code> that I know of.)</p>",
        "id": 230567966,
        "sender_full_name": "scottmcm",
        "timestamp": 1615919861
    },
    {
        "content": "<p><a href=\"https://github.com/yaahc/blog.rust-lang.org/blob/master/posts/inside-rust/2021-03-15-What-the-error-handling-project-group-is-working-towards.md\">https://github.com/yaahc/blog.rust-lang.org/blob/master/posts/inside-rust/2021-03-15-What-the-error-handling-project-group-is-working-towards.md</a></p>",
        "id": 230568364,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615920012
    },
    {
        "content": "<p>This is a wip blog post that's gonna get published soon hopefully and the second section actually details my proposal for how we fix termination for Error types</p>",
        "id": 230568464,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615920046
    },
    {
        "content": "<p>Tho I think I might need to add a specific bullet to the summary for it</p>",
        "id": 230568485,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615920058
    },
    {
        "content": "<p>The gist is that we need some sort of error reporter in <code>std</code> that can access sources and print a full chain of errors</p>",
        "id": 230568667,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615920132
    },
    {
        "content": "<p>then we'd specialize <code>Termination</code> for <code>Result&lt;T, E: Error&gt;</code> so that it iterates over sources</p>",
        "id": 230568716,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615920150
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>3. Add basic reporting logic for printing via the `Error` trait including source errors, possibly by integrating it directly with the `fmt` grammar\n    * specialize `Termination` for `Result` when `E: Error` so that it prints the full chain of errors\n</code></pre></div>",
        "id": 230568880,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615920223
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"222471\">BurntSushi</span> <a href=\"#narrow/stream/268952-edition-2021/topic/Termination.20using.20Display.20rather.20than.20Debug/near/230563398\">said</a>:</p>\n<blockquote>\n<p>yeah, my original comment was (unfortunately) made shortly after stabilization. i really wish i had caught it beforehand. <a href=\"https://github.com/rust-lang/rust/issues/43301#issuecomment-388575730\">https://github.com/rust-lang/rust/issues/43301#issuecomment-388575730</a></p>\n<p>in \"real\" programs i tend to just use <code>anyhow</code> and it does the right thing because it hijacks the <code>Debug</code> impl, as <span class=\"user-mention silent\" data-user-id=\"310399\">Mara</span> mentioned above. so in some sense, it's not a huge deal, but it would be really nice to have it fixed.</p>\n</blockquote>\n<p>reading this fully now, and I generally agree with the sentiment but not with the conclusino that we should use <code>Display</code>. This is counter to the design of the <code>Error</code> trait in my experience, which encourages us to use the <code>Display</code> impl for the error message of each individual error, so we'd lose context. I would however not be opposed to the argument that we should implement termination for <code>E: Display</code> and then specialize for <code>E: Error</code> to still print the chain of errors</p>",
        "id": 230569569,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615920489
    },
    {
        "content": "<p>let me finish reading though to see if this is already addressed</p>",
        "id": 230569662,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615920528
    },
    {
        "content": "<p>regarding the last point, yea, I'm pretty worried that the ship has sailed on fixing the <code>Debug</code> vs <code>Display</code> impl issue, but I think we can fix it for errors at least which should be sufficient for the issues you raised</p>",
        "id": 230570097,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615920704
    },
    {
        "content": "<p>so long as you return a type that implements error it will use the display impls correctly _and_ iterate sources</p>",
        "id": 230570131,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615920718
    },
    {
        "content": "<p>and <code>Debug</code> doesn't sound like the worst fallback for debugging failures of non <code>Error</code> types</p>",
        "id": 230570199,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615920735
    },
    {
        "content": "<p>tho it's not particularly great for user experience :/</p>",
        "id": 230570226,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615920746
    },
    {
        "content": "<p>can we even do this kind of specialization?</p>",
        "id": 230570589,
        "sender_full_name": "Mara",
        "timestamp": 1615920908
    },
    {
        "content": "<p>my understanding is specializing <code>Error</code> over <code>Debug</code> should work because its strictly more specific</p>",
        "id": 230570666,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615920936
    },
    {
        "content": "<p>now that I think of it though</p>",
        "id": 230570770,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615920965
    },
    {
        "content": "<p>this change isn't really blocked by any of the other work on reporters and what not</p>",
        "id": 230570784,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615920973
    },
    {
        "content": "<p>we could implement the reporting logic by hand inside of the <code>Termination</code> impl</p>",
        "id": 230570816,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615920983
    },
    {
        "content": "<p>does it fall afoul of the same specialization problem that boats brings up in <a href=\"https://github.com/rust-lang/rust/issues/43301#issuecomment-428953929\">https://github.com/rust-lang/rust/issues/43301#issuecomment-428953929</a> ?</p>",
        "id": 230570823,
        "sender_full_name": "bstrie",
        "timestamp": 1615920988
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/268952-edition-2021/topic/Termination.20using.20Display.20rather.20than.20Debug/near/230570784\">said</a>:</p>\n<blockquote>\n<p>this change isn't really blocked by any of the other work on reporters and what not</p>\n</blockquote>\n<p>yeah i'm implementing it now to play with it. but compiler says no.</p>",
        "id": 230570913,
        "sender_full_name": "Mara",
        "timestamp": 1615921034
    },
    {
        "content": "<p>:(</p>",
        "id": 230570971,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615921060
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> you're specializing on <code>Error</code> right?</p>",
        "id": 230571056,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615921094
    },
    {
        "content": "<p>not <code>Debug + Display</code> as boats mentioned</p>",
        "id": 230571073,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615921099
    },
    {
        "content": "<p>yes</p>",
        "id": 230571078,
        "sender_full_name": "Mara",
        "timestamp": 1615921102
    },
    {
        "content": "<p>shit</p>",
        "id": 230571082,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615921104
    },
    {
        "content": "<p>whats the error?</p>",
        "id": 230571089,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615921107
    },
    {
        "content": "<p>(just curious)</p>",
        "id": 230571103,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615921114
    },
    {
        "content": "<p>this one: <a href=\"https://doc.rust-lang.org/stable/nightly-rustc/src/rustc_typeck/impl_wf_check/min_specialization.rs.html#378\">https://doc.rust-lang.org/stable/nightly-rustc/src/rustc_typeck/impl_wf_check/min_specialization.rs.html#378</a></p>",
        "id": 230571155,
        "sender_full_name": "Mara",
        "timestamp": 1615921137
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error: cannot specialize on trait `error::Error`\n    --&gt; library/std/src/process.rs:1890:1\n     |\n1890 | / impl&lt;E: crate::error::Error&gt; Termination for Result&lt;!, E&gt; {\n1891 | |     fn report(self) -&gt; i32 {\n1892 | |         let Err(err) = self;\n1893 | |         eprintln!(&quot;Error: {}&quot;, err);\n...    |\n1906 | |     }\n1907 | | }\n     | |_^\n</code></pre></div>",
        "id": 230571197,
        "sender_full_name": "Mara",
        "timestamp": 1615921151
    },
    {
        "content": "<p>what's  a global predicate?</p>",
        "id": 230571466,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615921243
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"c1\">// Global predicates are either always true or always false, so we</span>\n<span class=\"w\">        </span><span class=\"c1\">// are fine to specialize on.</span>\n<span class=\"w\">        </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">predicate</span><span class=\"p\">.</span><span class=\"n\">is_global</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 230571477,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615921247
    },
    {
        "content": "<p>in this context</p>",
        "id": 230571505,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615921255
    },
    {
        "content": "<p>trying to understand this code</p>",
        "id": 230571532,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615921263
    },
    {
        "content": "<p>One that doesn't mention lifetime/type/const parameters (or inference variables, but there should be any of those here)</p>",
        "id": 230571620,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1615921309
    },
    {
        "content": "<p>does that mean just concrete types?</p>",
        "id": 230571907,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615921442
    },
    {
        "content": "<p>with no parameters</p>",
        "id": 230571951,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615921447
    },
    {
        "content": "<p>if so that's way more restricted than I realized X_X</p>",
        "id": 230571999,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615921471
    },
    {
        "content": "<p>if i stick <code>#[rustc_specialization_trait]</code> onto <code>trait Error</code> just for fun, a ton of things break. probably not supposed to do that then <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 230572034,
        "sender_full_name": "Mara",
        "timestamp": 1615921495
    },
    {
        "content": "<p>lol</p>",
        "id": 230572058,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615921504
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error: cannot specialize on trait `Ord`\n   --&gt; library/std/src/error.rs:475:1\n    |\n475 | / impl&lt;&#39;a, K: Debug + Ord, V: Debug&gt; Error\n476 | |     for crate::collections::btree_map::OccupiedError&lt;&#39;a, K, V&gt;\n</code></pre></div>\n<p><span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 230572169,
        "sender_full_name": "Mara",
        "timestamp": 1615921549
    },
    {
        "content": "<p>??</p>",
        "id": 230572256,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615921568
    },
    {
        "content": "<p>it now accepts specialization for Error, but it'd indirectly specialize for Ord and Debug in the case of <code>OccupiedError&lt;'a, K: Debug + Ord, V: Debug&gt;</code>. since it'd have to pick the specialization of Termination based on K and V's bounds there in that case</p>",
        "id": 230572572,
        "sender_full_name": "Mara",
        "timestamp": 1615921697
    },
    {
        "content": "<p>(whether <code>&lt;Result&lt;(), OccupiedError&lt;'a, E, V&gt; as Termination&gt;::report()</code> is the specialized or generic version depends on E and V's Ord/Debug impls now)</p>",
        "id": 230572848,
        "sender_full_name": "Mara",
        "timestamp": 1615921809
    },
    {
        "content": "<p>slapping the attribute on <code>Ord</code> and <code>Debug</code> as well results in:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: cannot specialize on `&#39;static` lifetime\n   --&gt; library/core/src/any.rs:142:1\n    |\n142 | / impl fmt::Debug for dyn Any {\n</code></pre></div>\n<p>and at this point i feel like we probably shouldn't continue on this adventure of unsoundness :P</p>",
        "id": 230573420,
        "sender_full_name": "Mara",
        "timestamp": 1615922043
    },
    {
        "content": "<p><span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 230575801,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615922984
    },
    {
        "content": "<p>i appreciate the effort</p>",
        "id": 230575812,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615922988
    },
    {
        "content": "<p>yeah i am not stuck on <code>Display</code> specifically. at the time i wrote that comment, i think that was the only other reasonable choice at the time.</p>",
        "id": 230579043,
        "sender_full_name": "BurntSushi",
        "timestamp": 1615924111
    },
    {
        "content": "<p>so is it safe to say that we're back to where we started here, only instead of <code>impl Termination for Result&lt;_, E: Display&gt;</code> we'd be considering <code>impl Termination for Result&lt;_, E: Error&gt;</code>? worst case scenario, the <code>Debug</code> fallback could be done using <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span> compiler magic <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span> instead of specialization (in which case, we may not even need an edition-related change), yeah?</p>",
        "id": 230599378,
        "sender_full_name": "bstrie",
        "timestamp": 1615932295
    },
    {
        "content": "<p>more or less</p>",
        "id": 230604506,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1615933969
    },
    {
        "content": "<p>it might even be worth considering abandoning the <code>E: Debug</code> impl entirely in the new edition, with the hope that most users are already using types that implement Error (and that those that aren't can just .unwrap() to essentially the same effect)</p>",
        "id": 230605323,
        "sender_full_name": "bstrie",
        "timestamp": 1615934426
    },
    {
        "content": "<p>I wonder if the <code>Debug</code> case could be moved to something like <code>fn main() -&gt; Yolo</code>, à la <a href=\"https://lib.rs/crates/yolo-block\"><code>yolo!</code></a>, that's just \"it's <code>unwrap</code>, but you write it with <code>?</code>\".  And then the \"shows something nice in a smart way\" can use a different type.</p>",
        "id": 230607692,
        "sender_full_name": "scottmcm",
        "timestamp": 1615935722
    }
]