[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>: <a href=\"https://github.com/rust-lang/rust/pull/65819\"><code>impl IntoIter for [T; N]</code></a> has been open for ages because it breaks <code>array.into_iter()</code> which currently does <code>(&amp;array).into_iter()</code>. the plan there was to add a warning (which happened for some/most (?) cases) and wait for usage to drop low enough to allow us to just break it. however, we (libs team) are wondering whether the edition change can help here. i don't think we can have a trait implementation exist only in some editions, but maybe there's something else we can do here. e.g. special handling of <code>for</code> and/or <code>.into_iter()</code>, or something else. can either of you (or anyone else who knows the details of these kind of things) think a bit about this and tell us which things would be possible to do here (and how (un)desirable they are)?</p>",
        "id": 230374894,
        "sender_full_name": "Mara",
        "timestamp": 1615825030
    },
    {
        "content": "<p>Inspired by the trick in my try prototype, we could have <code>for</code> loops desugar to a different trait that has a blanket impl for normal <code>IntoIterator</code>.</p>\n<p>That would just mean <code>for x in [1, 2, 3]</code> would work, though, which might not really be worth bothering compared to the full thing.</p>",
        "id": 230397650,
        "sender_full_name": "scottmcm",
        "timestamp": 1615833661
    },
    {
        "content": "<p>If we are fine with never making arrays <code>IntoIterator</code>, an edition could bring a <code>ArrayIntoIterator</code> trait (available on all editions) into its prelude. That, combined with <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> of unsugaring <code>for</code> loops to using a helper trait (say, <code>ForLoopIntoIterator</code>), which would be implemented for all <code>impl IntoIterator</code>s as well as for arrays, would offer a quite nice workaround <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<ul>\n<li><a href=\"https://play.rust-lang.org/?version=beta&amp;mode=debug&amp;edition=2018&amp;gist=37fae9e69df6ec59b7cede66c1f5855c\">Demo</a></li>\n</ul>",
        "id": 230579447,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1615924267
    },
    {
        "content": "<p>While I'd potentially need some mentoring for the \"changing the unsugaring of <code>for</code> loops part\", the additional trait added to the prelude in a new edition is quite easy to implement, so I'd be willing to take care of submitting the PR with an implementation, should the <em>design</em> behind it be well received (<strong>the main drawback of this idea is that we'd definitely never be able to implement <code>IntoIterator</code> for arrays</strong>, else the edition with both <code>IntoIterator</code> and <code>ArrayIntoIterator</code> in scope would lead to <em>ambiguous method calls</em>, causing potentially big breakage).</p>",
        "id": 230582794,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1615925477
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232018\">Daniel Henry-Mantilla</span> <a href=\"#narrow/stream/268952-edition-2021/topic/IntoIter.20for.20.5BT.3B.20N.5D/near/230582794\">said</a>:</p>\n<blockquote>\n<p>the main drawback of this idea is that we'd definitely never be able to implement <code>IntoIterator</code> for arrays</p>\n</blockquote>\n<p>I think this is <em>way</em> too severe.  I <strong>really</strong> want <code>.flat_map(|x| [x, x])</code> to just work -- as well as the other bazillion places that take <code>IntoIterator</code> where this ought to work naturally.</p>\n<p><a href=\"#narrow/stream/219381-t-libs/topic/array.20by-value.20iterator.20stabilization/near/221116093\">Last I heard</a> the goal is still to add the impl -- it's allowed breakage, so it's just a question of when we think the warnings have been visible for long enough.  (Conveniently, the fix is trivial, works on every version of rust, is shorter, <em>and</em> is clearer, so there's really no reason for people not to do it.)</p>",
        "id": 230586853,
        "sender_full_name": "scottmcm",
        "timestamp": 1615927000
    },
    {
        "content": "<p>Good to hear that there is still the idea of going forward with that, given the OP I was worried we were gonna stay stuck with the clunky <code>array::IntoIter::new()</code> for most of these things.</p>\n<p>Now, the whole <code>ArrayIntoIterator</code> hack aside, there is still your suggestion of <code>for</code> loop unsugaring using a a new trait implemented for arrays and with an overridable / <code>default fn</code> impl for <code>impl IntoIterator</code>s. The question then is to know if having <code>for x in [42, 27]</code> work but <code>[42, 27].into_iter()</code> warn with the compatibility lint is an improvement or not <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 230786442,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1616023939
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> or <span class=\"user-mention\" data-user-id=\"118772\">@Lukas Kalbertodt</span> -- I'm looking at <a href=\"https://github.com/rust-lang/rust/issues/65819\">#65819</a> as requested.</p>",
        "id": 234166806,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618237144
    },
    {
        "content": "<p>I was wondering if either of you could point me at actual code examples that break</p>",
        "id": 234166832,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618237153
    },
    {
        "content": "<p>Ah, I see in the OP this example</p>",
        "id": 234166893,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618237174
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">array</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kc\">true</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">array</span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// x is a reference</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 234166901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618237176
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/65819#issuecomment-817857969\">wrote up my opinion here</a>, but the short version is that I actually think we CAN leverage editions to avoid breakage here if we want</p>",
        "id": 234168114,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618237574
    },
    {
        "content": "<p>and I do :)</p>",
        "id": 234168143,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618237582
    },
    {
        "content": "<p>we could even issue future-compatibility warnings and remove the hack after a while</p>",
        "id": 234168175,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618237592
    },
    {
        "content": "<p>(if we wanted)</p>",
        "id": 234168201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618237602
    },
    {
        "content": "<p>(not sure if I do)</p>",
        "id": 234168208,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618237605
    },
    {
        "content": "<p>Oh, that sounds like good news!</p>",
        "id": 234171508,
        "sender_full_name": "Mara",
        "timestamp": 1618238749
    },
    {
        "content": "<p>We've discussed method-resolution hacks before and gotten resistance, but I don't think anyone actually tried to implement that.</p>",
        "id": 234179875,
        "sender_full_name": "cuviper",
        "timestamp": 1618241375
    },
    {
        "content": "<p>Centril made a pretty firm statement against this, but no technical detail, just their own opinion.</p>",
        "id": 234180112,
        "sender_full_name": "cuviper",
        "timestamp": 1618241462
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> if you need someone to work on that, and can offer a few pointers, I'd be willing.</p>",
        "id": 234180709,
        "sender_full_name": "cuviper",
        "timestamp": 1618241674
    },
    {
        "content": "<p>I'm going to write up a mentoring issue</p>",
        "id": 234186144,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618243613
    },
    {
        "content": "<p>done</p>",
        "id": 234203743,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618250651
    },
    {
        "content": "<p>here's my PR: <a href=\"https://github.com/rust-lang/rust/issues/84147\">#84147</a></p>",
        "id": 234250813,
        "sender_full_name": "cuviper",
        "timestamp": 1618273928
    },
    {
        "content": "<p>I like the idea described in that PR a lot; while it is a bit hacky, the benefits it offers greatly outweigh that! One question, though: say we want to iterate over an enumerated or zipped or whatever array in edition &lt; 2021: right now we'd still need to resort to that horribly unergonomic <code>std::array::IntoIter::new([…]).enumerate()…</code>.</p>\n<p>Has it been considered to add an inherent method to soothe those ergonomics? Something like <code>.array_into_iter()</code> or whatnot</p>",
        "id": 234311455,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1618315111
    },
    {
        "content": "<p>you can iterate over an array like <code>IntoIter::into_iter(array)</code></p>",
        "id": 234317076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618317562
    },
    {
        "content": "<p>My personal take is that the \"Editions are meant to be adopted\" principle applies here; I wouldn't go out of my way to support that pattern</p>",
        "id": 234317136,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618317588
    },
    {
        "content": "<p>The new free <code>fn zip</code> can also help with that, cribbed from <code>itertools</code>, and <span class=\"user-mention\" data-user-id=\"139363\">@bluss</span>  suggested that <code>enumerate</code> would be another highly valuable one.</p>",
        "id": 234338110,
        "sender_full_name": "cuviper",
        "timestamp": 1618325036
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> one thing that we should add to the PR is an automated suggestion</p>",
        "id": 234346202,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618327067
    },
    {
        "content": "<p>I was going to comment on the PR, I think that we could add something like an <code>as_slice()</code> call probably?</p>",
        "id": 234346240,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618327082
    },
    {
        "content": "<p>so e.g. <code>array.into_iter()</code> becomes <code>array.as_slice().into_iter()</code> ?</p>",
        "id": 234346309,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618327092
    },
    {
        "content": "<p>that seems like a very simple textual edit: basically <code>s/into_iter/as_slice().into_iter/</code></p>",
        "id": 234346389,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618327116
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> the current lint already suggests <code>iter</code> in a way that's fixable -- is that not enough?</p>",
        "id": 234346880,
        "sender_full_name": "cuviper",
        "timestamp": 1618327280
    },
    {
        "content": "<p><code>array.as_slice()</code> exists, but isn't stable yet</p>",
        "id": 234346946,
        "sender_full_name": "cuviper",
        "timestamp": 1618327306
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> oh, I missed that</p>",
        "id": 234347208,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618327387
    },
    {
        "content": "<p>that sounds good, never mind me</p>",
        "id": 234347268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618327402
    },
    {
        "content": "<p>except-- how is that implemented? I'll have to peek</p>",
        "id": 234347311,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618327418
    },
    {
        "content": "<p>in particular if we use this for other traits, we'll have to extend it I guess</p>",
        "id": 234347333,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618327428
    },
    {
        "content": "<p>we can worry about that when the time comes</p>",
        "id": 234347364,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618327436
    },
    {
        "content": "<p>What other traits do you anticipate for this?</p>",
        "id": 234347519,
        "sender_full_name": "cuviper",
        "timestamp": 1618327476
    },
    {
        "content": "<p>I don't know :)</p>",
        "id": 234347800,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618327566
    },
    {
        "content": "<p>maybe there are none?</p>",
        "id": 234347812,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618327570
    },
    {
        "content": "<p>I was just imagining that we might have more traits that are now implemented for <code>[T; N]</code> for arbitrary <code>N</code> that weren't implemented before</p>",
        "id": 234347897,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618327596
    },
    {
        "content": "<p>which featured an <code>&amp;self</code> method</p>",
        "id": 234347932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618327611
    },
    {
        "content": "<p>Well, it would need to be traits or methods with &amp;self signature on [T] / &amp;[T], I think - for both we'd potentially want this</p>",
        "id": 234348087,
        "sender_full_name": "simulacrum",
        "timestamp": 1618327666
    },
    {
        "content": "<p>but I suspect into_iter() is the main one</p>",
        "id": 234348100,
        "sender_full_name": "simulacrum",
        "timestamp": 1618327671
    },
    {
        "content": "<p>I guess it would be any slice trait that could do something differently when owned, but iterating is the main one</p>",
        "id": 234348693,
        "sender_full_name": "cuviper",
        "timestamp": 1618327860
    },
    {
        "content": "<p>That could come up for inherent methods too, but we would need a different hack</p>",
        "id": 234348804,
        "sender_full_name": "cuviper",
        "timestamp": 1618327917
    },
    {
        "content": "<p>Yeah. Technically, iter() too could be more optimal if it was <code>array::Iter&lt;T, N&gt;</code> -- this is possibly more broadly true. But we may rely on LLVM opts there.</p>",
        "id": 234348874,
        "sender_full_name": "simulacrum",
        "timestamp": 1618327930
    },
    {
        "content": "<p>Could it? How so? Once you start iterating, I think the state is roughly the same, and the initial <code>N</code> is irrelevant.</p>",
        "id": 234349157,
        "sender_full_name": "cuviper",
        "timestamp": 1618328019
    },
    {
        "content": "<p>Well, you can trivially unroll that iteration precisely, unlike a general slice iterator</p>",
        "id": 234349255,
        "sender_full_name": "simulacrum",
        "timestamp": 1618328048
    },
    {
        "content": "<p>Hmm, maybe if you can keep <code>N</code> closer to its use. But again, the iterator type has to support partially-consumed state. So I think the const-prop from initial construction to use is not so different than the slice iterator.</p>",
        "id": 234350165,
        "sender_full_name": "cuviper",
        "timestamp": 1618328366
    },
    {
        "content": "<p>Yeah, perhaps.</p>",
        "id": 234350200,
        "sender_full_name": "simulacrum",
        "timestamp": 1618328382
    },
    {
        "content": "<p>Slice's <code>Concat</code> and <code>Join</code> could move array values, but those are unstable traits anyway.</p>",
        "id": 234350636,
        "sender_full_name": "cuviper",
        "timestamp": 1618328536
    },
    {
        "content": "<p>Methods like <code>as_chunks</code> could have a precise return type if we get math in const-generic types</p>",
        "id": 234351158,
        "sender_full_name": "cuviper",
        "timestamp": 1618328741
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232018\">Daniel Henry-Mantilla</span> <a href=\"#narrow/stream/268952-edition-2021/topic/IntoIter.20for.20.5BT.3B.20N.5D/near/234311455\">said</a>:</p>\n<blockquote>\n<p>Has it been considered to add an inherent method to soothe those ergonomics? Something like <code>.array_into_iter()</code> or whatnot</p>\n</blockquote>\n<p>That was discussed a bit around stabilizing <code>array::IntoIter</code>: <a href=\"https://github.com/rust-lang/rust/issues/65798#issuecomment-751994741\">https://github.com/rust-lang/rust/issues/65798#issuecomment-751994741</a></p>\n<p>Personally, I'd rather not add a method that would basically be instantly deprecated on the modern edition.  \"It's a bit ugly in an old edition\" is totally fine, IMHO.  (Even good, in a way, as a nudge to modernize.)</p>",
        "id": 234374967,
        "sender_full_name": "scottmcm",
        "timestamp": 1618337584
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> <a href=\"#narrow/stream/268952-edition-2021/topic/IntoIter.20for.20.5BT.3B.20N.5D/near/234348693\">said</a>:</p>\n<blockquote>\n<p>I guess it would be any slice trait that could do something differently when owned, but iterating is the main one</p>\n</blockquote>\n<p>Theoretically I think we could have already hit this with <code>[x; 100].to_owned()</code>, as that would have changed from producing a Vec to producing an array.  But probably it wasn't common enough to worry about.</p>",
        "id": 234375348,
        "sender_full_name": "scottmcm",
        "timestamp": 1618337724
    },
    {
        "content": "<p>This looks amazing, <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> &amp; <span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span> </p>\n<p>I'm so excited that I went and p-FCPed it: <a href=\"https://github.com/rust-lang/rust/pull/84147#issuecomment-818988909\">https://github.com/rust-lang/rust/pull/84147#issuecomment-818988909</a></p>",
        "id": 234384733,
        "sender_full_name": "scottmcm",
        "timestamp": 1618341439
    },
    {
        "content": "<p>FWIW, I think we could add a similar check on <code>InherentImplCandidate</code> to let the attribute work on inherent slice/array methods</p>",
        "id": 234423008,
        "sender_full_name": "cuviper",
        "timestamp": 1618360088
    },
    {
        "content": "<p>(but such methods need to be added before 2021 is finalized, since that's the opt-in boundary)</p>",
        "id": 234423090,
        "sender_full_name": "cuviper",
        "timestamp": 1618360154
    },
    {
        "content": "<p>I guess slice <code>as_chunks</code> isn't stable anyway, so if we wanted an array version, we can still get that in normally</p>",
        "id": 234423781,
        "sender_full_name": "cuviper",
        "timestamp": 1618360609
    },
    {
        "content": "<p>By the way, is <code>Box&lt;[T]&gt;::into_iter</code> also being considered as part of the edition change? It faces exactly the same problems, but last time I asked folks weren't as motivated about it since you can use <code>box_slice.into_vec().into_iter()</code></p>",
        "id": 234432134,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618367547
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> I ran into coherence with <code>&amp;Box&lt;[T], A&gt;</code>, but <code>&amp;Box&lt;[T]&gt;</code> seemed ok:<br>\n<a href=\"https://github.com/rust-lang/rust/issues/83589#issuecomment-808970824\">https://github.com/rust-lang/rust/issues/83589#issuecomment-808970824</a></p>",
        "id": 234433256,
        "sender_full_name": "cuviper",
        "timestamp": 1618368560
    },
    {
        "content": "<p>sorry, edit, that was for <code>&amp;Box</code></p>",
        "id": 234433371,
        "sender_full_name": "cuviper",
        "timestamp": 1618368637
    },
    {
        "content": "<p>Wait, that seems to be about <code>&amp;Box&lt;[T]&gt;</code>, I'm talking about an actual into_iter for boxed slices</p>",
        "id": 234433376,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618368641
    },
    {
        "content": "<p>but I tried <code>Box&lt;[T]&gt;</code> here: <a href=\"https://github.com/rust-lang/rust/issues/59878#issuecomment-808965376\">https://github.com/rust-lang/rust/issues/59878#issuecomment-808965376</a></p>",
        "id": 234433381,
        "sender_full_name": "cuviper",
        "timestamp": 1618368648
    },
    {
        "content": "<p>It sounds like the issue is that <code>Iterator for [T]</code> could be implemented downstream, but how does that work? Does it need to be <code>fundamental</code>?</p>",
        "id": 234433461,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618368729
    },
    {
        "content": "<p>Oh, it's because <code>Box</code> and <code>[T]</code> don't live in the same crates</p>",
        "id": 234433504,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618368800
    },
    {
        "content": "<p>Right</p>",
        "id": 234433519,
        "sender_full_name": "cuviper",
        "timestamp": 1618368823
    },
    {
        "content": "<p>this could be addressed by having a way for a crate to \"non-implement\" a trait, which could be generally useful for coherence</p>",
        "id": 234433576,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618368856
    },
    {
        "content": "<p>I'm not sure if that's the same as negative impls</p>",
        "id": 234433585,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618368865
    },
    {
        "content": "<p>since this is in core it is fine if the mechanism is rustc specific, although it would be nice to stabilize</p>",
        "id": 234433690,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618368963
    },
    {
        "content": "<p>Maybe, yeah. The attr hack would have to get smarter too for the same issue with <code>into_iter()</code> as a slice</p>",
        "id": 234433744,
        "sender_full_name": "cuviper",
        "timestamp": 1618369020
    },
    {
        "content": "<p>the non-impl solution fixes the errors about upstream coherence, but not downstream coherence in the <code>&amp;Box&lt;[T], A&gt;</code> case</p>",
        "id": 234433843,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618369118
    },
    {
        "content": "<p>I suppose you would need a declaration of the form \"downstream crates are not permitted to <code>impl Iterator for Box&lt;[Foo]&gt;</code>\"</p>",
        "id": 234433981,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618369223
    },
    {
        "content": "<p>This stuff would make sense with the Chalk approach to coherence, but it is definitely an extension that needs additional work</p>",
        "id": 234434168,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618369359
    },
    {
        "content": "<p>the only thing that I would hope to stabilize for edition 2021 would be to hack a workaround to make <code>impl&lt;T, A&gt; IntoIterator for Box&lt;[T], A&gt;</code> and possibly <code>impl&lt;'a, T, A&gt; IntoIterator for &amp;'a mut Box&lt;[T], A&gt;</code> work</p>",
        "id": 234434243,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618369434
    },
    {
        "content": "<p>or, barring that, an impl for just <code>Box&lt;[T]&gt;</code> since the <code>A</code> parameter is unstable anyway</p>",
        "id": 234434312,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618369482
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> did you want a crater run for <a href=\"https://github.com/rust-lang/rust/issues/84147\">#84147</a>?</p>",
        "id": 235703006,
        "sender_full_name": "cuviper",
        "timestamp": 1619107133
    },
    {
        "content": "<p>I feel reasonably confident that we should be good, but if the queue is not too long, might be worth checking</p>",
        "id": 235703049,
        "sender_full_name": "cuviper",
        "timestamp": 1619107159
    },
    {
        "content": "<p>I think it's a good idea</p>",
        "id": 235703103,
        "sender_full_name": "simulacrum",
        "timestamp": 1619107185
    }
]