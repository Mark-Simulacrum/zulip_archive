[
    {
        "content": "<p>The <a href=\"https://github.com/rust-lang/rust/pull/86717\">lint renaming PR</a> has a discussion on what to call the lint that is currently known as <code>reserved_prefix</code>. I'd like this to be a place to bikeshed the new name.<br>\nSome of the current possibilities: </p>\n<ul>\n<li><code>rust_2021_incompatible_prefix</code></li>\n<li><code>rust_2021_prefix</code></li>\n<li><code>reserved_token_prefixes</code></li>\n<li><code>future_prefixes</code></li>\n<li><code>future_prefix_syntax</code></li>\n<li><code>future_possible_prefix</code></li>\n</ul>",
        "id": 244328753,
        "sender_full_name": "rylev",
        "timestamp": 1624992495
    },
    {
        "content": "<p>I don't think it should have \"2021\" in it.</p>",
        "id": 244330251,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624993154
    },
    {
        "content": "<p>We're reserving this syntax for the future.</p>",
        "id": 244330265,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624993160
    },
    {
        "content": "<p>well in the future it won't be a lint, it will just be an error, so nobody will be seeing the name</p>",
        "id": 244330309,
        "sender_full_name": "bstrie",
        "timestamp": 1624993188
    },
    {
        "content": "<p>unless you're on an earlier edition, in which case it might be useful in understanding why and when it became a lint</p>",
        "id": 244330426,
        "sender_full_name": "bstrie",
        "timestamp": 1624993219
    },
    {
        "content": "<p>That's fair.</p>",
        "id": 244330472,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624993243
    },
    {
        "content": "<p>I'm assuming that the description of the lint will make that pretty clear regardless, but OK, I can see why it'd be useful to have in the name.</p>",
        "id": 244330509,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624993264
    },
    {
        "content": "<p>I don't tend to agree to the objection of \"reserved\" in \"reserved_prefix\"; they're reserved for use by the language, and it's no contradiction if the language decides to later exercise that reservation. I find \"token\" pretty jargony. \"future\" and \"possible\" would be objected to by anyone that rejected \"reserved\", on the same grounds. You can call it \"literal_prefixes\" if you don't mind lumping in identifiers as literals.</p>",
        "id": 244331240,
        "sender_full_name": "bstrie",
        "timestamp": 1624993569
    },
    {
        "content": "<p>as for the \"rust_2021\" prefix on the name, I tend to like it, but it should be consistent among all the edition lints</p>",
        "id": 244331345,
        "sender_full_name": "bstrie",
        "timestamp": 1624993623
    },
    {
        "content": "<p>I definitely like \"future_prefix_syntax\". it's not too jargon-y, isn't rooted in 2021 edition specifically. I think the main downside to it is that (a) <code>future</code> is kinda an overloaded term bc async and (b) the lack of \"reserved\" won't really tie it back to existing documentation. This makes it a bit hard to google, but I imagine that'd be resolved by newer documentation getting indexed by search engines...</p>",
        "id": 244333301,
        "sender_full_name": "jam1garner",
        "timestamp": 1624994445
    },
    {
        "content": "<p>So I guess what I'm saying is my support of that choice is a bit dependent on \"future prefix syntax\" being the Official Nameâ„¢ so it'll actually be discoverable</p>",
        "id": 244333421,
        "sender_full_name": "jam1garner",
        "timestamp": 1624994503
    },
    {
        "content": "<p>the lint is specifically part of rust_2021_compatibility and also mentions Rust 2021 in its message. we wouldn't reuse the same lint if we add a new type of prefix in rust 2024 or something.</p>",
        "id": 244337428,
        "sender_full_name": "Mara",
        "timestamp": 1624996325
    },
    {
        "content": "<p>having it in the name sounds fine, good even. it's a lint you can enable in older editions to warn about syntax that will be interpreted as a prefix in edition 2021 but currently isn't</p>",
        "id": 244337567,
        "sender_full_name": "Mara",
        "timestamp": 1624996408
    },
    {
        "content": "<p>ah I was missing that context! makes sense why 2021 was being considered in the name</p>",
        "id": 244346434,
        "sender_full_name": "jam1garner",
        "timestamp": 1625000147
    },
    {
        "content": "<p>rust_2021_prefix_syntax?</p>",
        "id": 244351157,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1625002525
    },
    {
        "content": "<p>rust_2021_token_prefixes</p>",
        "id": 244351554,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1625002787
    },
    {
        "content": "<p>Seems like rust_2021 is agreed on. Leaning toward token_prefixes since it seems the most descriptive.</p>",
        "id": 244351705,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1625002878
    },
    {
        "content": "<p>syntax_that_will_be_tokenized_differently_in_rust_2021</p>",
        "id": 244352258,
        "sender_full_name": "Mara",
        "timestamp": 1625003213
    },
    {
        "content": "<p>FWIW, I'd suggest not using \"future\", because I think people may think it has something to do with futures.</p>",
        "id": 244374670,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625024992
    },
    {
        "content": "<p>/me likes <code>rust_2021_reserved_prefix</code> or <code>rust_2021_reserved_syntax</code>, or the same without <code>rust_2021_</code>; all of those seem fine.</p>",
        "id": 244374761,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625025123
    },
    {
        "content": "<p>i don't think it should contain 'reserved', because this syntax isn't going to be reserved forever. we will be assigning meaning to it at some point. then the lint will warn about f\"\" or k#yeet not because it is reserved, but because f\"\" and k#yeet has meaning in rust 2021</p>",
        "id": 244378131,
        "sender_full_name": "Mara",
        "timestamp": 1625029637
    },
    {
        "content": "<p>rust_2021_incompatible_prefix</p>",
        "id": 244378143,
        "sender_full_name": "Lokathor",
        "timestamp": 1625029671
    },
    {
        "content": "<p>yes, that was my original suggestion on the PR</p>",
        "id": 244378216,
        "sender_full_name": "Mara",
        "timestamp": 1625029752
    },
    {
        "content": "<p>hard to beat that one</p>",
        "id": 244378288,
        "sender_full_name": "Lokathor",
        "timestamp": 1625029827
    },
    {
        "content": "<p>(:</p>",
        "id": 244378933,
        "sender_full_name": "Mara",
        "timestamp": 1625030647
    },
    {
        "content": "<p>I guess it seems to me like the syntax is always our reserved syntax, even if in the future we assign a meaning to it. Just as <code>_[A-Z][A-Za-z0-9]</code> is reserved syntax in C, and there are also various identifiers defined with that prefix.</p>",
        "id": 244392229,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625042067
    },
    {
        "content": "<p>I'd think that once the syntax is being used for something, the error should go away or at least change? Like, if we add <code>k#</code>, and you use it with something that isn't a keyword, that's an error, but a different one from the reserved prefixes error?</p>",
        "id": 244393004,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625042546
    },
    {
        "content": "<p>If that's the case, the lint would only apply to things that are currently reserved prefixes, and other lints or errors would apply to prefixes that were in use.</p>",
        "id": 244393239,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625042707
    },
    {
        "content": "<p>I'm personally in favor of <code>rust_2021_token_prefixes</code>- it's descriptive of what type of prefixes, rust_2021 implies that these are used in Rust 2021 but not before (meaning reserved and incompatible are redundant and not necessary).</p>",
        "id": 244398316,
        "sender_full_name": "rylev",
        "timestamp": 1625045832
    },
    {
        "content": "<p>Starting to like rust_2021_incompatible_prefix. It emphasizes \"this will be an error\" rather than \"this will be parsed as a prefix\". I think the former statement is more accurate or at least more important. I like incompatible more than reserved because reserved sounds more like a property of Rust syntax in general but incompatible describes a specific instance of code.</p>",
        "id": 244419400,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1625058154
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/268952-edition-2021/topic/Bikeshed.20renaming.20of.20.60reserved_prefix.60.20lint.20name/near/244392229\">said</a>:</p>\n<blockquote>\n<p>I guess it seems to me like the syntax is always our reserved syntax, even if in the future we assign a meaning to it. Just as <code>_[A-Z][A-Za-z0-9]</code> is reserved syntax in C, and there are also various identifiers defined with that prefix.</p>\n</blockquote>\n<p>the term 'reserved' is used there because people can define their own identifiers like that. that doesn't apply here, because it's either a syntax error or a new valid syntax with valid meaning. it's not that we're warning that you shouldn't use this because we <em>might</em> add something that would then conflict. we're warning because it's a syntax error in rust 2021 (or at some point, a valid new thing).</p>",
        "id": 244424641,
        "sender_full_name": "Mara",
        "timestamp": 1625060366
    },
    {
        "content": "<p>otherwise you could argue that <code>123</code> is reserved syntax because it has a meaning. all syntax is reserved for us. 'reserved syntax' just means 'invalid syntax on purpose' so we have a place to define new syntax without breaking things. the warning is that the syntax changed (to make <code>f\"..\"</code> invalid, or later that <code>f\"..\"</code> has a new meaning).</p>",
        "id": 244425677,
        "sender_full_name": "Mara",
        "timestamp": 1625060810
    },
    {
        "content": "<p>the lint doesn't even mention the word 'reserved' at all: \"detects identifiers that will be parsed as a prefix instead in Rust 2021\". the warning message is \"unknown prefix\" and the suggestion says \"insert whitespace here to avoid this being parsed as a prefix in Rust 2021\"</p>",
        "id": 244425924,
        "sender_full_name": "Mara",
        "timestamp": 1625060919
    },
    {
        "content": "<p>I've updated the PR with <code>rust_2021_token_prefixes</code>. Happy to change it again though if we come up with a better way of deciding which name.</p>",
        "id": 244427581,
        "sender_full_name": "rylev",
        "timestamp": 1625061658
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> we may also want to rethink <code>future_prelude_collisions</code> given some of the concerns around the use of the word \"future\"</p>",
        "id": 244427662,
        "sender_full_name": "rylev",
        "timestamp": 1625061698
    },
    {
        "content": "<p>i think a key part that's easily missed is that <em>all</em> of these new edition lints are for Rust 2015/2018 and warn about things that would work differently if the code would be interpreted Rust 2021.  so if you deny() that, you deny things that are incompatible with the new edition, even though it's currently not yet interpreted that way. so the prefix warning warns about identifiers that will no longer be parsed/tokenized as identifiers when parsed in Rust 2021. these lints do not run in Rust 2021 code. <code>deny(rust_2021_prefixes)</code> makes it sound like that'd deny <code>f\"\"</code> <em>in Rust 2021</em>. but there it's just a syntax error or a format string. instead, it denies <code>f\"\"</code> (two tokens) in Rust 2015/2018, because that syntax is changing and incompatible with Rust 2021.</p>",
        "id": 244429264,
        "sender_full_name": "Mara",
        "timestamp": 1625062370
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224872\">rylev</span> <a href=\"#narrow/stream/268952-edition-2021/topic/Bikeshed.20renaming.20of.20.60reserved_prefix.60.20lint.20name/near/244427662\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310399\">Mara</span> we may also want to rethink <code>future_prelude_collisions</code> given some of the concerns around the use of the word \"future\"</p>\n</blockquote>\n<p>yes. s/future/rust_2021/</p>",
        "id": 244429360,
        "sender_full_name": "Mara",
        "timestamp": 1625062412
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310399\">Mara</span> <a href=\"#narrow/stream/268952-edition-2021/topic/Bikeshed.20renaming.20of.20.60reserved_prefix.60.20lint.20name/near/244429264\">said</a>:</p>\n<blockquote>\n<p>i think a key part that's easily missed is that <em>all</em> of these new edition lints are for Rust 2015/2018 and warn about things that would work differently if the code would be interpreted Rust 2021.  so if you deny() that, you deny things that are incompatible with the new edition, even though it's currently not yet interpreted that way. so the prefix warning warns about identifiers that will no longer be parsed/tokenized as identifiers when parsed in Rust 2021. these lints do not run in Rust 2021 code. <code>deny(rust_2021_prefixes)</code> makes it sound like that'd deny <code>f\"\"</code> <em>in Rust 2021</em>. but there it's just a syntax error or a format string. instead, it denies <code>f\"\"</code> (two tokens) in Rust 2015/2018, because that syntax is changing and incompatible with Rust 2021.</p>\n</blockquote>\n<p>I like this reasoning. I can see how <code>incompatible</code> helps with that</p>",
        "id": 244429484,
        "sender_full_name": "rylev",
        "timestamp": 1625062454
    },
    {
        "content": "<p>Note that hitting this ought to be super rare, so a terse lint name will come with no true benefit but with the obvious drawback of terseness.<br>\nI agree that the name <em>future</em> ought to be avoided, and that the lint name ought to follow the lint naming scheme (which <code>rust_2018_idioms</code> did not, for instance).<br>\n<code>rust_2021_incompatible_prefix</code> is thus the <em>shortest</em> name I'd go for, and, as mentioned, we don't need the lint name to be \"that\" short for something statistically never happening, so I'd personally go as far as using: <code>rust_2021_incompatible_prefix_tokenization</code> (or <code>â€¦_prefix_parsing</code> to use more layman terms than <em>tokenization</em>, as <span class=\"user-mention\" data-user-id=\"256342\">@bstrie</span> pointed out).</p>",
        "id": 244430491,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1625062850
    },
    {
        "content": "<p>if we want to get real pedantic, one could argue that in the editions where the lint fires it's <em>not</em> a prefix, just an identifier. so it's not a prefix that's incompatible with the new edition, it's a identifier+literal-without-whitespace combination that is incompatible with the new edition.  that'd lead to <code>rust_2021_incompatible_syntax</code> or <code>rust_2021_prefix_incompatible_syntax</code>: \"incompatible with Rust 2021 prefixes\" and not \"prefix incompatible with Rust 2021\" ;)</p>",
        "id": 244432088,
        "sender_full_name": "Mara",
        "timestamp": 1625063491
    },
    {
        "content": "<p>The issue is that the snake casing doesn't make it easy to know which terms clump together. <code>rust_2021_prefix_incompatible_syntax</code> can be interpreted as \"rust 2021 syntax which is prefix incompatible\" or \"incompatible syntax to rust 2021 prefixes\".</p>",
        "id": 244549455,
        "sender_full_name": "rylev",
        "timestamp": 1625137647
    },
    {
        "content": "<p>Does <code>rust_2021_prefixes_incompatible_syntax</code> (notice prefixes vs prefix) help here?</p>",
        "id": 244549546,
        "sender_full_name": "rylev",
        "timestamp": 1625137687
    }
]