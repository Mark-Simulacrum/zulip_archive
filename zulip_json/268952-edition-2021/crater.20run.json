[
    {
        "content": "<p>I'm uncertain, my understanding is that crater is only designed to compare two toolchains.  It seems like for testing the edition, it needs to run different commands against \"start\" vs \" end\".   I'm not sure if crater has the ability to do that.  Just running <code>cargo fix</code> with two different toolchains isn't going to provide any information.  Does crater have the ability to do that?</p>",
        "id": 246084831,
        "sender_full_name": "Eric Huss",
        "timestamp": 1626351091
    },
    {
        "content": "<p>In the past, to do this, what I have done is create a custom Cargo that runs the commands I want.  That is, one could run crater in \"check\" mode, and have a custom cargo that when it runs <code>cargo check</code>, it actually runs something else (like <code>cargo fix --edition</code>, modify edition, <code>cargo check</code>).  That way, the \"start\" runs a normal check (to get a baseline), and then the \"end\" can do all the magic.</p>",
        "id": 246085525,
        "sender_full_name": "Eric Huss",
        "timestamp": 1626351558
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> that makes a lot of sense</p>",
        "id": 246103398,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626359830
    },
    {
        "content": "<p>Is cargo built from rust-lang/rust?</p>",
        "id": 246103591,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626359910
    },
    {
        "content": "<p>(when we do a crater run)</p>",
        "id": 246103601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626359915
    },
    {
        "content": "<p>i.e., can you make a single PR that encapsulates the change to cargo?</p>",
        "id": 246103614,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626359923
    },
    {
        "content": "<p>(cc <span class=\"user-mention\" data-user-id=\"121055\">@Pietro Albini</span>)</p>",
        "id": 246103626,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626359927
    },
    {
        "content": "<p>Yes.</p>",
        "id": 246103674,
        "sender_full_name": "Eric Huss",
        "timestamp": 1626359952
    },
    {
        "content": "<p>I can probably put something together.  It shouldn't be too hard.</p>",
        "id": 246103723,
        "sender_full_name": "Eric Huss",
        "timestamp": 1626359970
    },
    {
        "content": "<p>Much easier than changing crater.</p>",
        "id": 246103733,
        "sender_full_name": "Eric Huss",
        "timestamp": 1626359975
    },
    {
        "content": "<p>Yes, we should do that</p>",
        "id": 246103768,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626359991
    },
    {
        "content": "<p>It seems like the <em>ideal</em> would be to land a patch in cargo</p>",
        "id": 246103784,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626359997
    },
    {
        "content": "<p>such that this experiment is easy to repeat in the future</p>",
        "id": 246103861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626360015
    },
    {
        "content": "<p>but maybe we get it working first, and then try to do that?</p>",
        "id": 246103889,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626360029
    },
    {
        "content": "<p>(I'm imagining e.g. landing most of the patch, such that it's a 1-line diff to re-enable later or something...)</p>",
        "id": 246103979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626360076
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/268952-edition-2021/topic/crater.20run/near/246103591\">said</a>:</p>\n<blockquote>\n<p>Is cargo built from rust-lang/rust?</p>\n</blockquote>\n<p>it should, if it doesn't it's really easy to fix that</p>",
        "id": 246105763,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1626360854
    },
    {
        "content": "<p>I have a custom cargo ready to go.  When do we want to do the crater run?</p>",
        "id": 246221853,
        "sender_full_name": "Eric Huss",
        "timestamp": 1626441840
    },
    {
        "content": "<p>I was hoping we could land a fix for <a href=\"https://github.com/rust-lang/rust/issues/86940\">https://github.com/rust-lang/rust/issues/86940</a>. It's been claimed, but we're unsure when it will be fixed.</p>",
        "id": 246222254,
        "sender_full_name": "rylev",
        "timestamp": 1626442053
    },
    {
        "content": "<p>That's awesome</p>",
        "id": 246248179,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626453843
    },
    {
        "content": "<p>Hm, looks like there will be an issue with crater. It mounts the filesystem as read-only, but <code>cargo fix</code> needs to be able to modify the sources.  <span class=\"user-mention\" data-user-id=\"121055\">@Pietro Albini</span> Is there a feasible workaround?  Would it be horrible to have my custom script copy the workdir to <code>/tmp</code> or something like that?</p>",
        "id": 246268786,
        "sender_full_name": "Eric Huss",
        "timestamp": 1626464189
    },
    {
        "content": "<p>ugh changing that could be tricky</p>",
        "id": 246269665,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1626464695
    },
    {
        "content": "<p>and double ugh you need to run <code>cargo fix</code> inside the sandbox don't you</p>",
        "id": 246269728,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1626464737
    },
    {
        "content": "<p>Yea.</p>",
        "id": 246269802,
        "sender_full_name": "Eric Huss",
        "timestamp": 1626464765
    },
    {
        "content": "<p>Hey, maybe you can answer a quick question re crater.  Every time I run it, it downloads stable and rebuilds rustup-toolchain-install-master, which for me takes a few minutes.  Is there a way to avoid that?</p>",
        "id": 246269922,
        "sender_full_name": "Eric Huss",
        "timestamp": 1626464841
    },
    {
        "content": "<p>it... shouldn't?</p>",
        "id": 246270059,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1626464922
    },
    {
        "content": "<p>are you deleting the workspace?</p>",
        "id": 246270073,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1626464926
    },
    {
        "content": "<p>I run <code>delete-all-results</code> and then <code>run-graph</code>, and it downloads again.</p>",
        "id": 246270126,
        "sender_full_name": "Eric Huss",
        "timestamp": 1626464967
    },
    {
        "content": "<p>No worries, I can try to investigate a little.  I'm still struggling just to understand how things work. <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 246270149,
        "sender_full_name": "Eric Huss",
        "timestamp": 1626464986
    },
    {
        "content": "<p>it... shouldn't do that?</p>",
        "id": 246270776,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1626465341
    },
    {
        "content": "<p>can you paste the full logs somewhere?</p>",
        "id": 246270795,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1626465354
    },
    {
        "content": "<p>OK, I got my hacked <code>cargo fix</code> working with crater, so it should be ready to go whenever we're ready.  I tested with a demo crate containing <a href=\"https://github.com/rust-lang/rust/issues/86940\">#86940</a> and it properly reported a regression.</p>\n<p>Here is what the hack looks like: <a href=\"https://github.com/ehuss/cargo/commit/e32d9d54c8dfbe0c890cb88c327e22d05399313c\">https://github.com/ehuss/cargo/commit/e32d9d54c8dfbe0c890cb88c327e22d05399313c</a></p>\n<p>I also did a short run against a few real crates, and things seemed to work as expected. It did find one regression. <code>non-fmt-panics</code> is a <code>MaybeIncorrect</code> suggestion, so it fails to migrate (found while migrating <code>structopt</code>). Is that a known issue? I can't find any related to that.</p>",
        "id": 246281511,
        "sender_full_name": "Eric Huss",
        "timestamp": 1626470315
    },
    {
        "content": "<p>Oh, another question. My hack ignores 2015 packages. That can make the report look a little odd (if a 2015 fails during the first round, it will succeed in the second, appearing to be \"fixed\"). I'm thinking we can just ignore those in the report, does that sound reasonable?</p>",
        "id": 246283708,
        "sender_full_name": "Eric Huss",
        "timestamp": 1626471569
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> that sounds great! I agree we can ignore those.</p>",
        "id": 246308037,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626502721
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120518\">Eric Huss</span> <a href=\"#narrow/stream/268952-edition-2021/topic/crater.20run/near/246281511\">said</a>:</p>\n<blockquote>\n<p>I also did a short run against a few real crates, and things seemed to work as expected. It did find one regression. <code>non-fmt-panics</code> is a <code>MaybeIncorrect</code> suggestion, so it fails to migrate (found while migrating <code>structopt</code>). Is that a known issue? I can't find any related to that.</p>\n</blockquote>\n<p>It should produce both a MaybeIncorrect and a MachineApplicable suggestion as alternatives. <code>cargo fix --edition</code> should just pick the latter. Did that not happen?</p>",
        "id": 246449097,
        "sender_full_name": "Mara",
        "timestamp": 1626698415
    },
    {
        "content": "<p>ah, it happened in the panic!() insider assert!(). yeah. that one doesn't have a MachineApplicable suggestion. the only always correct suggestion would be <code>if !... { std::panic::panic_any(...); }</code> which isn't great. :/</p>",
        "id": 246449676,
        "sender_full_name": "Mara",
        "timestamp": 1626698797
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120518\">Eric Huss</span> <a href=\"#narrow/stream/268952-edition-2021/topic/crater.20run/near/246283708\">said</a>:</p>\n<blockquote>\n<p>Oh, another question. My hack ignores 2015 packages. That can make the report look a little odd (if a 2015 fails during the first round, it will succeed in the second, appearing to be \"fixed\"). I'm thinking we can just ignore those in the report, does that sound reasonable?</p>\n</blockquote>\n<p>I did have a question about this, why do 2015 crates fail in the first round-- oh, because we ignore them <em>entirely</em>? Can we just fallback to the \"normal\" behavior for 2015 crates instead, so that they show up as having the same result?</p>",
        "id": 246450855,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626699497
    },
    {
        "content": "<p>Short answer: I didn't want to waste the cycles running <code>cargo check</code> just to align the results.</p>\n<p>The issue is if a 2015 crate fails <code>cargo check</code> with the first toolchain (for unrelated reasons), the second toolchain doesn't know that.  It could run <code>cargo check</code> again, just so the results line up, but I figured that would be a waste of cycles, so it just exits immediately with \"success\".   There should be a relatively small set of packages that are 2015, and fail to compile <em>at all</em>.  Also, I seem to recall that crater eventually removes packages that never build, is that true?</p>\n<p>It could also migrate from 2015 &gt; 2021, but I figure the 2018 migration bugs would just cause too much noise.</p>",
        "id": 246464571,
        "sender_full_name": "Eric Huss",
        "timestamp": 1626706181
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310399\">Mara</span> <a href=\"#narrow/stream/268952-edition-2021/topic/crater.20run/near/246449676\">said</a>:</p>\n<blockquote>\n<p>ah, it happened in the panic!() insider assert!(). yeah. that one doesn't have a MachineApplicable suggestion. the only always correct suggestion would be <code>if !... { std::panic::panic_any(...); }</code> which isn't great. <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>\n</blockquote>\n<p>Should I file an issue for this?</p>",
        "id": 246465143,
        "sender_full_name": "Eric Huss",
        "timestamp": 1626706433
    },
    {
        "content": "<p>I went ahead and filed <a href=\"https://github.com/rust-lang/rust/issues/87313\">https://github.com/rust-lang/rust/issues/87313</a> to track the <code>assert!</code> problem.  I don't know if there are any practical options here.  Since <code>non_fmt_panics</code> has been warning for a while, I would assume most projects will have already cleaned it up, so perhaps automatic migration is not very important.</p>",
        "id": 246616114,
        "sender_full_name": "Eric Huss",
        "timestamp": 1626798812
    },
    {
        "content": "<p>Do ya'll have any thoughts on when you want to start the crater run?</p>",
        "id": 247207403,
        "sender_full_name": "Eric Huss",
        "timestamp": 1627308783
    },
    {
        "content": "<p>Good question. My thought is that it makes sense to let the public testing period run for a week or so?</p>",
        "id": 247214888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627311798
    },
    {
        "content": "<p>I'd like to at minimum patch up the known bugs</p>",
        "id": 247214902,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627311805
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> We've reached the week or so threshold and <span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> and I looked at the bugs and none seemed to be crater blocking. How do we kick off the crater run?</p>",
        "id": 247930808,
        "sender_full_name": "rylev",
        "timestamp": 1627916957
    },
    {
        "content": "<p>I'll rebuild my PR.  I don't have permission to run crater.  I'll either get myself added, or find someone who does.</p>",
        "id": 247930901,
        "sender_full_name": "Eric Huss",
        "timestamp": 1627917005
    },
    {
        "content": "<p>I want to run a small test (like top 1000) just to make sure it is working correctly.</p>",
        "id": 247930934,
        "sender_full_name": "Eric Huss",
        "timestamp": 1627917023
    },
    {
        "content": "<p>i have. just link me the PR</p>",
        "id": 247930937,
        "sender_full_name": "Mara",
        "timestamp": 1627917024
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 247930946,
        "sender_full_name": "Eric Huss",
        "timestamp": 1627917031
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310399\">@Mara</span>, the PR is <a href=\"https://github.com/rust-lang/rust/pull/87190\">https://github.com/rust-lang/rust/pull/87190</a>.  I think the command I want is <code>@craterbot check crates=top-1000</code></p>",
        "id": 247955217,
        "sender_full_name": "Eric Huss",
        "timestamp": 1627930208
    },
    {
        "content": "<p>just <code>check</code>?</p>",
        "id": 247955236,
        "sender_full_name": "Mara",
        "timestamp": 1627930223
    },
    {
        "content": "<p>Yea, it has an custom <code>cargo</code> that will run <code>cargo fix</code>, and then <code>cargo check</code> afterwards.  I don't think doing a full test is necessary, do you?</p>",
        "id": 247955301,
        "sender_full_name": "Eric Huss",
        "timestamp": 1627930274
    },
    {
        "content": "<p>yeah good question. i don't think we'd cause many run-time changes. but maybe the closure capture thing or panics might cause some run-time behaviour to change? but we'd have to be lucky for it to actually be tested by some crate.</p>",
        "id": 247955580,
        "sender_full_name": "Mara",
        "timestamp": 1627930438
    },
    {
        "content": "<p>Yea, that's definitely possible.  My understanding is that a <code>test</code> run takes quite a lot longer than a <code>check</code> run, is that correct?  I think it would be valuable to do some quick check runs first to see how things go, and then we can consider doing a <code>test</code> run later if desired.</p>",
        "id": 247955948,
        "sender_full_name": "Eric Huss",
        "timestamp": 1627930627
    },
    {
        "content": "<p>yeah, let's go for check for the top-1000 and then think a bit more meanwhile about if we want a test run</p>",
        "id": 247956034,
        "sender_full_name": "Mara",
        "timestamp": 1627930679
    },
    {
        "content": "<p>thanks!</p>",
        "id": 247956106,
        "sender_full_name": "Mara",
        "timestamp": 1627930700
    },
    {
        "content": "<p>Hello there! What are the chances of fn_traits getting into this edition or even making it into stable rust anytime soon? I kind of miss overloading the operator() from C++.</p>",
        "id": 248821088,
        "sender_full_name": "Karim Agha",
        "timestamp": 1628499971
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"390741\">@Karim Agha</span> <br>\n<code>fn_traits</code> is not a feature that needs an edition, so “getting into this edition” is not something that makes too much sense; the rest of the question is off-topic in this topic and stream, feel free to ask elsewhere.</p>",
        "id": 248830348,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1628506853
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> I accidentally pushed a stale branch. Can you re-run the same top-1000 crater command?</p>",
        "id": 248928060,
        "sender_full_name": "Eric Huss",
        "timestamp": 1628556744
    },
    {
        "content": "<p>the currently running job says <code>Estimated end:  3 months</code> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 248957117,
        "sender_full_name": "Mara",
        "timestamp": 1628587553
    },
    {
        "content": "<p>crater's estimates are bad if the run gets interrupted, should go down rapidly though</p>",
        "id": 248987048,
        "sender_full_name": "simulacrum",
        "timestamp": 1628605833
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> any idea what happened here? <a href=\"https://github.com/rust-lang/rust/pull/87190#issuecomment-897147568\">https://github.com/rust-lang/rust/pull/87190#issuecomment-897147568</a></p>",
        "id": 249218180,
        "sender_full_name": "Mara",
        "timestamp": 1628764306
    },
    {
        "content": "<p>I'm going through some of the errors in detail.  <span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> I think there were a few other issues in the <code>regressed: dependencies </code> section.  I don't know how crater determines if the error is in a dependency, but I think it is confused.  I'll be working through it off and on today.  I'll post what I've found so far.</p>",
        "id": 249248854,
        "sender_full_name": "Eric Huss",
        "timestamp": 1628781556
    },
    {
        "content": "<p>oh i didn't even look at the 'faulty deps' ones. trusting crater too much ^^'. yeah those look like root problems as well.</p>",
        "id": 249249093,
        "sender_full_name": "Mara",
        "timestamp": 1628781650
    },
    {
        "content": "<p>thanks!</p>",
        "id": 249249178,
        "sender_full_name": "Mara",
        "timestamp": 1628781691
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> crater sets <code>--message-format=json</code> and checks which crate caused the error: if the error is not in the crate being tested it's marked as a faulty dependency</p>",
        "id": 249250608,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1628782261
    },
    {
        "content": "<p>(crater uses the json format to also categorize root regressions)</p>",
        "id": 249250654,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1628782283
    },
    {
        "content": "<p>oooooh</p>",
        "id": 249250700,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1628782318
    },
    {
        "content": "<p>I think the cargo patch is messing with the detection</p>",
        "id": 249250815,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1628782358
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> crater uses <a href=\"https://github.com/rust-lang/crater/blob/24754820fdf522b723e8f679c981ab25a13fa748/src/runner/test.rs#L67-L78\">https://github.com/rust-lang/crater/blob/24754820fdf522b723e8f679c981ab25a13fa748/src/runner/test.rs#L67-L78</a> to determine which package ids are considered \"local crates\" -- is it possible that your cargo patch is messing with that?</p>",
        "id": 249251098,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1628782477
    },
    {
        "content": "<p>Yea, probably because it is copying the package to <code>/tmp</code>, and that changes the PackageId.</p>",
        "id": 249251396,
        "sender_full_name": "Eric Huss",
        "timestamp": 1628782636
    },
    {
        "content": "<p>ah, good to know</p>",
        "id": 249251729,
        "sender_full_name": "Mara",
        "timestamp": 1628782807
    },
    {
        "content": "<p>Lemme know if and when you want to proceed with a larger crater run.  The cargo hack seems to be working OK.  You can fire it off now, or wait for some more fixes to land.  I'm concerned about doing a full run will show hundreds or thousands of regressions.  Reviewing all of those will be a pretty big time investment.</p>",
        "id": 249294581,
        "sender_full_name": "Eric Huss",
        "timestamp": 1628803044
    },
    {
        "content": "<p>if we wait a few days we can do the run with the current problems fixed, hopefully  ^^</p>",
        "id": 249305268,
        "sender_full_name": "Mara",
        "timestamp": 1628810343
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> if we can somehow fix the pkgid detection crater should be more useful in categorizing the actual regressions</p>",
        "id": 249329564,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1628838197
    },
    {
        "content": "<p>I don't think it is necessary (or easy to fix).  This is a one-off situation, so I don't think we should put much energy into it.  All regressions should only be in root packages (since this is an unusual use of crater), so I think we can safely just combine the \"regressed dependencies\" and \"regressed root results\" lists.</p>",
        "id": 249359622,
        "sender_full_name": "Eric Huss",
        "timestamp": 1628861045
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> Are you looking through the remaining errors?  If not, I can probably scan through them now.</p>",
        "id": 249658577,
        "sender_full_name": "Eric Huss",
        "timestamp": 1629154263
    },
    {
        "content": "<p>yes! i'm going through 'regressed: dependencies - file%3A%2F%2F%2Ftmp%2Ffixit (38)' now</p>",
        "id": 249658720,
        "sender_full_name": "Mara",
        "timestamp": 1629154355
    },
    {
        "content": "<p>that's where all the relevant ones seem to be. but haven't checked the other sections in detail</p>",
        "id": 249658771,
        "sender_full_name": "Mara",
        "timestamp": 1629154396
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/87190#issuecomment-899881870\">https://github.com/rust-lang/rust/pull/87190#issuecomment-899881870</a></p>",
        "id": 249661221,
        "sender_full_name": "Mara",
        "timestamp": 1629156303
    },
    {
        "content": "<p>bed time <span aria-label=\"zzz\" class=\"emoji emoji-1f4a4\" role=\"img\" title=\"zzz\">:zzz:</span></p>",
        "id": 249661231,
        "sender_full_name": "Mara",
        "timestamp": 1629156310
    },
    {
        "content": "<p>(feel free to edit the comment to add details/issue numbers/etc.)</p>",
        "id": 249661239,
        "sender_full_name": "Mara",
        "timestamp": 1629156329
    },
    {
        "content": "<p>Thanks Mara!  I'll try to investigate some this evening.</p>",
        "id": 249661260,
        "sender_full_name": "Eric Huss",
        "timestamp": 1629156361
    },
    {
        "content": "<p>Posted <a href=\"https://github.com/rust-lang/cargo/pull/9799\">https://github.com/rust-lang/cargo/pull/9799</a> to help diagnose the errors we can't reproduce.</p>",
        "id": 249733172,
        "sender_full_name": "Eric Huss",
        "timestamp": 1629213134
    },
    {
        "content": "<p>Posted <a href=\"https://github.com/rust-lang/cargo/pull/9803\">https://github.com/rust-lang/cargo/pull/9803</a> to help improve the report about feature resolver differences, as one of the packages (<code>easy-jsonrpc-mw</code>) had a somewhat confusing error message.</p>",
        "id": 249793088,
        "sender_full_name": "Eric Huss",
        "timestamp": 1629244216
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> Do you want to coordinate triaging the crater results?  I expect there will be at least a few hundred failures, so it may take some time to categorize and investigate them.</p>",
        "id": 250516583,
        "sender_full_name": "Eric Huss",
        "timestamp": 1629825071
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> yes, but i probably won't have time until saturday</p>",
        "id": 250552723,
        "sender_full_name": "Mara",
        "timestamp": 1629841060
    },
    {
        "content": "<p>started here: <a href=\"https://github.com/rust-lang/rust/pull/87190#issuecomment-905250803\">https://github.com/rust-lang/rust/pull/87190#issuecomment-905250803</a></p>",
        "id": 250594175,
        "sender_full_name": "Mara",
        "timestamp": 1629881518
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> !  I'll be looking over these off and on over the next few days.</p>",
        "id": 250631487,
        "sender_full_name": "Eric Huss",
        "timestamp": 1629903275
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> would it make sense for <code>cargo fix --edition</code> to not apply any non-edition lints? cap them to allow while still forcing the edition lints to warn or something.</p>",
        "id": 250634108,
        "sender_full_name": "Mara",
        "timestamp": 1629904498
    },
    {
        "content": "<p>Hm.  So there is a long history with that (<a href=\"https://github.com/rust-lang/cargo/issues/5738\">https://github.com/rust-lang/cargo/issues/5738</a>).  Historically it has been a difficult thing to fix since it needed changes in rustc.  I'm not sure, maybe <code>--force-warn</code> makes it easier now?  I'd be concerned that some suggestions might be required, but offhand I can't think of any.</p>",
        "id": 250634477,
        "sender_full_name": "Eric Huss",
        "timestamp": 1629904689
    },
    {
        "content": "<p>looks like most of that issue is basically 'we need --force-warn'</p>",
        "id": 250635410,
        "sender_full_name": "Mara",
        "timestamp": 1629905126
    },
    {
        "content": "<p>(it overrides --cap-lints, i hope? maybe not)</p>",
        "id": 250635431,
        "sender_full_name": "Mara",
        "timestamp": 1629905139
    },
    {
        "content": "<p>It does (though I'm still catching up to see how things have changed with it since I've been away)</p>",
        "id": 251204874,
        "sender_full_name": "rylev",
        "timestamp": 1630316102
    },
    {
        "content": "<p>I'm going to stop looking at the rest of the crater results.  I think <a href=\"https://hackmd.io/xltX-gYFRpO-2OHDAW9Sag?both\">https://hackmd.io/xltX-gYFRpO-2OHDAW9Sag?both</a> covers all the known errors.  The rest (about two thirds) are going to be due to:</p>\n<ul>\n<li>New feature resolver</li>\n<li><code>dyn</code> and <code>...</code> in macros or generated code</li>\n<li>Non-edition fixes (<a href=\"https://github.com/rust-lang/cargo/issues/5738\">cargo#5738</a>) which has a PR up to fix at <a href=\"https://github.com/rust-lang/cargo/pull/9846\">cargo#9846</a></li>\n<li>One of the other listed errors</li>\n</ul>",
        "id": 251227041,
        "sender_full_name": "Eric Huss",
        "timestamp": 1630329312
    },
    {
        "content": "<p>nice! you went to a lot of them. thanks! good to see that they're mostly known issues or non-issues :D</p>",
        "id": 251227397,
        "sender_full_name": "Mara",
        "timestamp": 1630329466
    },
    {
        "content": "<p>I'm having a hard time seeing what's causing this error here: <a href=\"https://crater-reports.s3.amazonaws.com/pr-87190-3/try%23a7a572ce3edd6d476191fbfe92c9c1986e009b34/gh/44smkn.ironmonkey/log.txt\">https://crater-reports.s3.amazonaws.com/pr-87190-3/try%23a7a572ce3edd6d476191fbfe92c9c1986e009b34/gh/44smkn.ironmonkey/log.txt</a></p>",
        "id": 251401938,
        "sender_full_name": "rylev",
        "timestamp": 1630422825
    },
    {
        "content": "<p>It seems that the method is not found except for on a trait that is not in scope. What could cause this error?</p>",
        "id": 251402095,
        "sender_full_name": "rylev",
        "timestamp": 1630422879
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> Almost all of the name resolution errors are because of <code>cfg(test)</code> differences.  If someone has:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">thing</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">thing</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Then when checking that code as a non-test, it will remove <code>use thing;</code>, but then when building it as a unittest, it will fail since the <code>use</code> is now missing.</p>",
        "id": 251402513,
        "sender_full_name": "Eric Huss",
        "timestamp": 1630423062
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/cargo/pull/9846\">https://github.com/rust-lang/cargo/pull/9846</a> will fix this so that <code>--edition</code> will not remove stuff like that.</p>",
        "id": 251402642,
        "sender_full_name": "Eric Huss",
        "timestamp": 1630423109
    },
    {
        "content": "<p>Ah ok, that seems hard to tell apart from a legitimate error in resolution...</p>",
        "id": 251402684,
        "sender_full_name": "rylev",
        "timestamp": 1630423128
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> when you said yesterday that you were confident the remaining issues fell into known categories, did you mean that you don't think it's worth it for anyone to go through the remaining untriaged logs?</p>",
        "id": 251402794,
        "sender_full_name": "rylev",
        "timestamp": 1630423179
    },
    {
        "content": "<p>Yea, I don't think there is going to be much more useful information.</p>",
        "id": 251402927,
        "sender_full_name": "Eric Huss",
        "timestamp": 1630423216
    },
    {
        "content": "<p>I had categorized all the failures by the error codes, and the rest are going to be duplicates of what has already been reported.  Feel free to skim through, but I don't think there will be much more useful stuff in there.</p>",
        "id": 251403096,
        "sender_full_name": "Eric Huss",
        "timestamp": 1630423282
    },
    {
        "content": "<p>Oh, I forgot, I still had a small list of errors to look at.  If someone wants to help, take a look at these:</p>\n<ul>\n<li><a href=\"https://tiny.cc/oaaiuz/reg/linestring-0.6.3/log.txt\">https://tiny.cc/oaaiuz/reg/linestring-0.6.3/log.txt</a></li>\n<li><a href=\"https://tiny.cc/oaaiuz/reg/completion-0.2.1/log.txt\">https://tiny.cc/oaaiuz/reg/completion-0.2.1/log.txt</a></li>\n<li><a href=\"https://tiny.cc/oaaiuz/reg/ark-poly-commit-0.3.0/log.txt\">https://tiny.cc/oaaiuz/reg/ark-poly-commit-0.3.0/log.txt</a></li>\n<li><a href=\"https://tiny.cc/oaaiuz/reg/snarkvm-polycommit-0.7.9/log.txt\">https://tiny.cc/oaaiuz/reg/snarkvm-polycommit-0.7.9/log.txt</a></li>\n<li><a href=\"https://tiny.cc/oaaiuz/reg/rio_xml-0.6.1/log.txt\">https://tiny.cc/oaaiuz/reg/rio_xml-0.6.1/log.txt</a></li>\n<li><a href=\"https://tiny.cc/oaaiuz/reg/asn1-rs-0.2.0/log.txt\">https://tiny.cc/oaaiuz/reg/asn1-rs-0.2.0/log.txt</a></li>\n<li><a href=\"https://tiny.cc/oaaiuz/reg/fstrings-rust-proc-macro-1.0.0/log.txt\">https://tiny.cc/oaaiuz/reg/fstrings-rust-proc-macro-1.0.0/log.txt</a></li>\n<li><a href=\"https://tiny.cc/oaaiuz/gh/FeanorTheElf.Parser/log.txt\">https://tiny.cc/oaaiuz/gh/FeanorTheElf.Parser/log.txt</a></li>\n<li><a href=\"https://tiny.cc/oaaiuz/gh/T-parrish.rust_study_materials/log.txt\">https://tiny.cc/oaaiuz/gh/T-parrish.rust_study_materials/log.txt</a></li>\n</ul>\n<p>I'm not sure if those are already covered by the existing issues, the errors are a little cryptic, so you'll probably need to check out the source and look it over.</p>",
        "id": 251414046,
        "sender_full_name": "Eric Huss",
        "timestamp": 1630427110
    }
]