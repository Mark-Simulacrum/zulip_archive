[
    {
        "content": "<p>My hunch is that most of the edition-dependent features don't have a documented bit of text that we use to figure out what edition they are-- and that we don't have tests for that logic. I think we should file an issue to clarify this and document the \"edition span\" in the Edition Migration Guide.</p>",
        "id": 243488305,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624352174
    },
    {
        "content": "<p>(Also, I wish we used our repo more!)</p>",
        "id": 243488524,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624352319
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/86539\">https://github.com/rust-lang/rust/issues/86539</a></p>",
        "id": 243488597,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624352399
    },
    {
        "content": "<blockquote>\n<p>(Also, I wish we used our repo more!)</p>\n</blockquote>\n<p>What do you mean?</p>",
        "id": 243504739,
        "sender_full_name": "Mara",
        "timestamp": 1624362910
    },
    {
        "content": "<blockquote>\n<p>clarify this and document the \"edition span\"</p>\n</blockquote>\n<p>We should also decide in how much detail we want to document this and make guarantees. E.g. we can say 'the panic!(..) invocation', or we can clarify that's it specifically the <code>std</code> or <code>!</code> or <code>(</code> in <code>std::panic!(..)</code>. While in the end exactly one token is used, we might not want to make any guarantees more than just 'the span of <code>std::panic!</code>' or something like that.</p>",
        "id": 243504939,
        "sender_full_name": "Mara",
        "timestamp": 1624363046
    },
    {
        "content": "<p>There's a few cases of <code>span_a.with_lo(span_b.lo())</code> to merge spans. (E.g. to merge <code>$</code> with <code>x</code> in <code>$x</code>.) This will keep the edition of span_a, not span_b. But i doubt that was really a choice made on purpose. (Instead of <code>span_b.with_hi(span_a.hi())</code>, which is equivalent if span_a and span_b have the same metadata, which is almost always the case.)</p>",
        "id": 243505111,
        "sender_full_name": "Mara",
        "timestamp": 1624363200
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310399\">Mara</span> <a href=\"#narrow/stream/268952-edition-2021/topic/macro.20injection.20tests/near/243504739\">said</a>:</p>\n<blockquote>\n<p>What do you mean?</p>\n</blockquote>\n<p>I just like filing issues on a space dedicated to a particular project, versus the rust-lang/rust repo, which has that \"black hole\" feeling to me</p>",
        "id": 243526472,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624372793
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310399\">Mara</span> <a href=\"#narrow/stream/268952-edition-2021/topic/macro.20injection.20tests/near/243504939\">said</a>:</p>\n<blockquote>\n<p>We should also decide in how much detail we want to document this and make guarantees. E.g. we can say 'the panic!(..) invocation', or we can clarify that's it specifically the <code>std</code> or <code>!</code> or <code>(</code> in <code>std::panic!(..)</code>. While in the end exactly one token is used, we might not want to make any guarantees more than just 'the span of <code>std::panic!</code>' or something like that.</p>\n</blockquote>\n<p>Yes, I believe we want to document this in very precise detail. =)  There's no reason to be loosey-goosey about it. There was an open issue around it, I'm somewhat of the opinion that it makes sense to tie those spans to a particular token in each case, as it's easy to explain.</p>",
        "id": 243526640,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624372863
    },
    {
        "content": "<p>It's basically a \"lang team call\", I thnk, but it needs someone to draw up a proposal</p>",
        "id": 243526681,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624372882
    },
    {
        "content": "<p>And yes, it's exactly those kind of \"merging\" cases that I am worried about and why I want to see some tests</p>",
        "id": 243526705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624372893
    },
    {
        "content": "<p>I do think we should be consistent across various span-dependent edition-dependent cases. I personally think we should use the span of the function/macro name whenever possible.</p>",
        "id": 243534164,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624375818
    },
    {
        "content": "<blockquote>\n<p>the span of the function/macro name whenever possible.</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">panic</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">crate</span>::<span class=\"n\">a</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"..\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>So which span should it use here?</p>",
        "id": 243540131,
        "sender_full_name": "Mara",
        "timestamp": 1624378426
    },
    {
        "content": "<blockquote>\n<p>There's no reason to be loosey-goosey about it.</p>\n</blockquote>\n<p>The decisions on how to merge spans are mostly based on what gives nice diagnostics. Adding (maybe unnecssarily) strict requirements to them for the edition context might make it harder to keep giving nice  diagnostics.</p>",
        "id": 243540422,
        "sender_full_name": "Mara",
        "timestamp": 1624378542
    },
    {
        "content": "<blockquote>\n<p>I just like filing issues on a space dedicated to a particular project, versus the rust-lang/rust repo, which has that \"black hole\" feeling to me</p>\n</blockquote>\n<p>Interesting. For me, everything that's <em>not</em> rust-lang/rust is a \"black hole\". Searching through all issues of a single repository has much nicer tools than searching through the entire organisation. I can't easily keep track of which repositories exist and which issue might be attached to which one..</p>",
        "id": 243540874,
        "sender_full_name": "Mara",
        "timestamp": 1624378727
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/268952-edition-2021/topic/macro.20injection.20tests/near/243526705\">said</a>:</p>\n<blockquote>\n<p>And yes, it's exactly those kind of \"merging\" cases that I am worried about and why I want to see some tests</p>\n</blockquote>\n<p>there are many places in rustc where it is assumed that the first and last token in things like <code>::some::path</code> carry the exact same context. see also the FIXMEs in Span::to. So, also for things like hygiene: should that be based on <code>path</code> or on the first <code>::</code>? (Right now it is the first <code>::</code> if both or neither come from a macro, or the one that comes from the macro otherwise. Usually. I believe. At least until some FIXMEs are fixed. Maybe. ^^' Also, the tokens in the middle are completely ignored.)</p>",
        "id": 243541475,
        "sender_full_name": "Mara",
        "timestamp": 1624379028
    },
    {
        "content": "<p>(And <code>Span::until</code> and <code>Span::between</code> have different behaviour than <code>Span::to</code>. Those pick whichever does <em>not</em> come from a macro instead.)</p>",
        "id": 243541919,
        "sender_full_name": "Mara",
        "timestamp": 1624379235
    },
    {
        "content": "<p>To be honest, I think the answers to these questions are less important than having an answer</p>",
        "id": 243543391,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624379877
    },
    {
        "content": "<p>i'm just worried about hacky code in the future trying to maintain compatibility with the current not-very-well-defined state</p>",
        "id": 243543522,
        "sender_full_name": "Mara",
        "timestamp": 1624379926
    },
    {
        "content": "<p>Fun:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// library crate in Rust 2021:</span>\n<span class=\"cp\">#[macro_export]</span><span class=\"w\"></span>\n<span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"cp\">$t</span>:<span class=\"nc\">tt</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cp\">$t</span>::<span class=\"fm\">panic!</span><span class=\"p\">(</span><span class=\"s\">\"{{\"</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[macro_export]</span><span class=\"w\"></span>\n<span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"cp\">$t</span>:<span class=\"nc\">tt</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"cp\">$t</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"{{\"</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n\n<span class=\"c1\">// binary crate in Rust 2018:</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">dep2021</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">std</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">panic</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">std</span><span class=\"p\">);</span><span class=\"w\">   </span><span class=\"c1\">// 2021</span>\n<span class=\"w\">    </span><span class=\"n\">y</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">panic</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// 2021</span>\n<span class=\"w\">    </span><span class=\"n\">z</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\">     </span><span class=\"c1\">// 2018 !!</span>\n<span class=\"w\">    </span><span class=\"n\">z</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">);</span><span class=\"w\">     </span><span class=\"c1\">// 2021</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 243544281,
        "sender_full_name": "Mara",
        "timestamp": 1624380277
    },
    {
        "content": "<p>an <code>std::panic</code> path with <em>either</em> the <code>std</code> or <code>panic</code> token from a 2021 macro resolves to the 2021 panic, because <code>Span::to</code> prefers macros. but when both come from a macro, it just picks the first token instead.</p>",
        "id": 243544563,
        "sender_full_name": "Mara",
        "timestamp": 1624380386
    },
    {
        "content": "<p>so if you just want to document the current behaviour, this is what we end up with <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 243544680,
        "sender_full_name": "Mara",
        "timestamp": 1624380431
    },
    {
        "content": "<p>that's why i think it might be better to just say \"the edition of the <code>std::panic</code> path\", and leave it unspecified what we do if you do weird things like this.</p>",
        "id": 243544776,
        "sender_full_name": "Mara",
        "timestamp": 1624380475
    },
    {
        "content": "<p>same for the hygiene of <code>$a::$b</code> or something. right now it follows the same 'whichever is from a macro and otherwise just the first' (// FIXME) logic.</p>",
        "id": 243545344,
        "sender_full_name": "Mara",
        "timestamp": 1624380715
    },
    {
        "content": "<p>if it needs to be well defined in all cases, then Span::to/between/until shouldn't exist, and should always require explicitly picking a context. But what makes sense for editions and hygiene might be a bad choice for diagnostics.</p>",
        "id": 243545803,
        "sender_full_name": "Mara",
        "timestamp": 1624380906
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310399\">Mara</span> <a href=\"#narrow/stream/268952-edition-2021/topic/macro.20injection.20tests/near/243540131\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>the span of the function/macro name whenever possible.</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">panic</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">crate</span>::<span class=\"n\">a</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"..\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>So which span should it use here?</p>\n</blockquote>\n<p>The span of the token <code>panic</code>.</p>",
        "id": 243548729,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624382120
    },
    {
        "content": "<p>that span isn't even available to the macro invocation <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 243549612,
        "sender_full_name": "Mara",
        "timestamp": 1624382494
    },
    {
        "content": "<p>making that happen would be a complicated change, i'm afraid</p>",
        "id": 243549859,
        "sender_full_name": "Mara",
        "timestamp": 1624382589
    },
    {
        "content": "<p>:(</p>",
        "id": 243553236,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624383997
    },
    {
        "content": "<p>I was hoping that we could just tag the macro when it was picked up from the namespace.</p>",
        "id": 243553257,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624384008
    },
    {
        "content": "<p>As in, <code>std::panic</code> in 2021 refers to something different than <code>std::panic</code> in 2018, and once you've referenced it, you can call it in another edition.</p>",
        "id": 243553464,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624384102
    },
    {
        "content": "<p>right now it's a macro that <em>on expansion</em> expands to either <code>panic_2021!</code> or <code>panic_2015!</code>. that expansion doesn't happen in the <code>use</code> statement.</p>",
        "id": 243554064,
        "sender_full_name": "Mara",
        "timestamp": 1624384373
    },
    {
        "content": "<p>Ah, I see.</p>",
        "id": 243554276,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624384455
    },
    {
        "content": "<p>So we sort that out in expansion, not in name resolution.</p>",
        "id": 243554293,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624384464
    },
    {
        "content": "<p>Intuitively, I would have expected it to happen in name resolution.</p>",
        "id": 243554322,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624384478
    },
    {
        "content": "<p>I'm guessing fixing that would fall under \"name resolution is subtle and quick to anger\"?</p>",
        "id": 243554354,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624384496
    },
    {
        "content": "<p>I don't know much about how name resolution works in rustc. I have an implementation of <code>type</code> statements that resolve differently depending on the edition of where you refer to it from (<a href=\"https://github.com/rust-lang/rust/pull/82489/files#diff-5a64b779bd650207cd0c847489075514e307eef7142419ac5f4b9184fa19e187\">here</a>). But making that work for any item is hard, I've been told.</p>",
        "id": 243559909,
        "sender_full_name": "Mara",
        "timestamp": 1624386797
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/268952-edition-2021/topic/macro.20injection.20tests/near/243553236\">said</a>:</p>\n<blockquote>\n<p>:(</p>\n</blockquote>\n<p>but yeah, thatt might be another reason to not specify every single detail of how it works right now. using the <code>panic</code> token in that example would be better, but maybe not worth implementing if there's no code where it actually matters.</p>",
        "id": 243560406,
        "sender_full_name": "Mara",
        "timestamp": 1624387015
    }
]