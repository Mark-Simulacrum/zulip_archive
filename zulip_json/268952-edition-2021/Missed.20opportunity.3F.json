[
    {
        "content": "<p>I'm wondering if we missed an opportunity to make progress on <a href=\"https://github.com/rust-lang/rust/issues/71668\">unsafe blocks in unsafe functions</a> by requiring the use of unsafe blocks in unsafe functions.  I guess it's too late, but I thought it worth bringing up.</p>",
        "id": 244116862,
        "sender_full_name": "rylev",
        "timestamp": 1624870093
    },
    {
        "content": "<p>i think we discussed it at some point, quite early on. i think the conclusion was that it'd cause too much churn and would be hard to automatically migrate other than by wrapping <code>unsafe { .. }</code> around entire function bodies</p>",
        "id": 244120669,
        "sender_full_name": "Mara",
        "timestamp": 1624872661
    },
    {
        "content": "<p>I don't remember discussing it, but I'll take your word on it. That argument sounds like we'll _never_ make the change then though. Was that the conclusion reached?</p>",
        "id": 244121013,
        "sender_full_name": "rylev",
        "timestamp": 1624872902
    },
    {
        "content": "<p>maybe it was some informal discussion i had somewhere before we even started having meetings. not sure.</p>",
        "id": 244121494,
        "sender_full_name": "Mara",
        "timestamp": 1624873248
    },
    {
        "content": "<p>Oh well <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span> I'd really love to see that change happen as I think it makes unsafe code much easier to audit, but we can revisit this the next go around <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 244122042,
        "sender_full_name": "rylev",
        "timestamp": 1624873571
    },
    {
        "content": "<p>so how would the migration work?</p>",
        "id": 244123583,
        "sender_full_name": "Mara",
        "timestamp": 1624874577
    },
    {
        "content": "<p>I personally don't see an issue with wrapping <code>unsafe</code> functions in a massive unsafe block.</p>",
        "id": 244125221,
        "sender_full_name": "rylev",
        "timestamp": 1624875804
    },
    {
        "content": "<p>hm, okay. yeah maybe that wouldn't be that bad</p>",
        "id": 244127554,
        "sender_full_name": "Mara",
        "timestamp": 1624877591
    },
    {
        "content": "<p>i haven't seen many people use the feature yet. possibly because they don't know about it.</p>",
        "id": 244127594,
        "sender_full_name": "Mara",
        "timestamp": 1624877615
    },
    {
        "content": "<p>I didn't know about the feature until today. I only knew about the RFC. (Or I knew and I forgot).</p>",
        "id": 244130173,
        "sender_full_name": "rylev",
        "timestamp": 1624879274
    },
    {
        "content": "<p>I use this feature all the time, but I only know about it because libstd uses it (if I'm thinking of the right feature)</p>",
        "id": 244136948,
        "sender_full_name": "nagisa",
        "timestamp": 1624883540
    },
    {
        "content": "<p>I know about the feature and absolutely <em>would not</em> use it in at least one of my crates, but generally <em>would</em> use it the rest of the time. As a person who writes a whole lot of unsafe code, I was certainly initially wary. However, I've come around to it, and as long as it stays a Deny By Default lint that you can always turn off (in not just 2021 but in all future editions) then it's a good update for the language.</p>",
        "id": 244149241,
        "sender_full_name": "Lokathor",
        "timestamp": 1624889147
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> we did discuss it; I don't think we missed much of an opportunity, I think we can easily move to \"warn by default\" if we want to nudge people</p>",
        "id": 244154864,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624891281
    },
    {
        "content": "<p>I think the short version was that we were not in a position to make this a hard error yet</p>",
        "id": 244154932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624891308
    },
    {
        "content": "<p>I still believe it's the right direction, though</p>",
        "id": 244154945,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624891313
    },
    {
        "content": "<p>but I'd probably like to <em>really</em> make the change along with some other changes, such as a <code>trusted</code> keyword</p>",
        "id": 244155005,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624891325
    },
    {
        "content": "<p>Never mind the noise then <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span> We can discuss this again at some later point</p>",
        "id": 244155468,
        "sender_full_name": "rylev",
        "timestamp": 1624891502
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/268952-edition-2021/topic/Missed.20opportunity.3F/near/244154932\">said</a>:</p>\n<blockquote>\n<p>I think the short version was that we were not in a position to make this a hard error yet</p>\n</blockquote>\n<p>please not ever a hard error. if a person really has that much unsafe code then it really just adds noise to the file.</p>",
        "id": 244168323,
        "sender_full_name": "Lokathor",
        "timestamp": 1624896611
    },
    {
        "content": "<p>My personal stance on it: make it a deny-by-default at some point, <code>unsafe fn</code>s disabling the requirement for <code>unsafe</code> inside the body is still a weird oversight from the language, which leads to error-prone code. For cases such as <span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span>'s, they would have to add a <code>#![allow(unsafe_op_in_unsafe_fn)]</code> at the root of their crate to opt-in back into the \"legacy\" mode, which I do believe is reasonable (but I do agree that making it a hard error does more harm than good compared to a deny-by-default lint; especially since those wanting it to be a hard error can already <code>#![forbid(â€¦)]</code> it).</p>",
        "id": 244168359,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1624896623
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/268952-edition-2021/topic/Missed.20opportunity.3F/near/244154932\">said</a>:</p>\n<blockquote>\n<p>I think the short version was that we were not in a position to make this a hard error yet</p>\n</blockquote>\n<p>I'm personally in the \"not yet convinced it should ever be a hard error\" camp.</p>\n<p>Maybe deny-by-default, but I think that letting it be allowed in a module where you're basically writing C code and don't want the extra block seems reasonable.</p>",
        "id": 244238430,
        "sender_full_name": "scottmcm",
        "timestamp": 1624948401
    },
    {
        "content": "<p>I think that not making it a hard error may not fully meet the goals of getting rid of it? Part of the question here is what the semantics of an unsafe fn are. This is trying to move them from \"is unsafe to call and has an unsafe interior\" to \"is unsafe to call\".  Allowing someone to override the lint means that people have to carry around that extra mental rule, rather than being able to make a clear distinction between the two. From this perpective, it might be better to add an attribute for \"everything in this context is implicitly unsafe\", because at least that would be a clear seperation between the two. I'll also point out that if the module is basically C code, that still doesn't explain why <code>unsafe fn</code> functions should be treated differently from any <em>safe</em> C code functions you may have.</p>",
        "id": 244239272,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1624949252
    },
    {
        "content": "<p>To be clear, the idea of adding a new attribute was by way of example. I know that would be an entirely different discussion.</p>",
        "id": 244239532,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1624949478
    },
    {
        "content": "<p>It's also true that even without making it a hard error, the other goal of removing it, which is safer code, can still be met.</p>",
        "id": 244239715,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1624949621
    },
    {
        "content": "<p>I don't think we should make things hard errors because we don't like a style of code. The <em>only</em> case when things should be errors are:</p>\n<ul>\n<li>across editions, because then it's opt in, and we have a strong reason to reuse that syntax in the future</li>\n<li>when the feature is unsound and cannot be made sound</li>\n</ul>\n<p>Even <code>mem::uninitialized</code> hasn't been removed and it's completely impossible to use soundly.</p>\n<blockquote>\n<p>Allowing someone to override the lint means people have to carry around that extra mental rule</p>\n</blockquote>\n<p>Making it a hard error <strong>takes their choice away</strong>! There is enough trouble with Rust saying it is backwards compatible and breaking things because they aren't covered by the policy without breaking random things because we wish we'd made different decisions 5 years ago.</p>",
        "id": 244270889,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1624969126
    },
    {
        "content": "<p>Imagine if we were having this conversation about the 2015 module system. It's a much different system than 2018, so definitely you need extra mental rules to understand it. However, breaking it completely means <em>many crates stop compiling in new Rust versions</em> - that's bad enough now, imagine it in 2018 when the edition first came out. It would have been another python 2/3 fiasco</p>",
        "id": 244271330,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1624969388
    }
]