[
    {
        "content": "<p>It occurred to me today that you might want to have a function that is in a given link_secrion and then have it be marked for inline <em>only if</em> it would inline into another function within the same link section.</p>\n<p>Does this sound like a reasonable sort of thing?</p>",
        "id": 234393667,
        "sender_full_name": "Lokathor",
        "timestamp": 1618345087
    },
    {
        "content": "<p>I don't think there is a way to express this in LLVM IR...</p>",
        "id": 234409782,
        "sender_full_name": "Amanieu",
        "timestamp": 1618351652
    },
    {
        "content": "<p>It is also outside of the realm of the compiler and is more of a linker (LTO?) thing.</p>",
        "id": 234415687,
        "sender_full_name": "nagisa",
        "timestamp": 1618355313
    },
    {
        "content": "<p>My idea is that this would be rustc-side: if the caller is in another link section then rustc would omit the inline attribute in the llvm ir</p>",
        "id": 234429991,
        "sender_full_name": "Lokathor",
        "timestamp": 1618365716
    },
    {
        "content": "<p>oh wait, inline is on functions not calls</p>",
        "id": 234430053,
        "sender_full_name": "Lokathor",
        "timestamp": 1618365745
    },
    {
        "content": "<p>oh well</p>",
        "id": 234430077,
        "sender_full_name": "Lokathor",
        "timestamp": 1618365769
    }
]