[
    {
        "content": "<p>Hi hi, I wrote a blog post to attempt to answer the question:  \"Should async iteration syntax default to parallel or sequential semantics\"? -- this came up again during the streams lang meeting a few weeks ago, and figured it was worth exploring.</p>\n<p><a href=\"https://blog.yoshuawuyts.com/async-iteration/\">https://blog.yoshuawuyts.com/async-iteration/</a></p>",
        "id": 210496173,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1600421109
    },
    {
        "content": "<p>Hopefully at some point we'll get streaming iterators, too, which (in general) cannot be processed in parallel even if you wanted to.</p>",
        "id": 210588180,
        "sender_full_name": "scottmcm",
        "timestamp": 1600475032
    },
    {
        "content": "<p>tl;dr in general now, or in general ever?</p>",
        "id": 210589492,
        "sender_full_name": "oliver",
        "timestamp": 1600476763
    },
    {
        "content": "<p>Streaming iterators invalidate an item when you fetch the next item. For instance, it may be borrowed from the stream itself.</p>",
        "id": 210607128,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600508899
    },
    {
        "content": "<p>So with a streaming iterator, you couldn't process in parallel.</p>",
        "id": 210607133,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600508927
    },
    {
        "content": "<p>(unless you make copies)</p>",
        "id": 210607140,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600508942
    },
    {
        "content": "<p>I think it actually depends on the <code>Item&lt;'iter&gt;</code> type, or how you use the <code>'iter</code> lifetime.   If it's <code>type Item&lt;'iter&gt; = &amp;'iter i32;</code> that means it invalidates when you fetch the next item, if it's <code>type Item&lt;'iter&gt; = i32;</code> That would be the same with a normal iterator.</p>",
        "id": 210612136,
        "sender_full_name": "Charles Lew",
        "timestamp": 1600517575
    },
    {
        "content": "<p>Certainly it depends what exactly the type is.  But I wouldn't want <code>for</code> to fail to compile just because it's <code>type Item&lt;'iter&gt; = &amp;'iter mut State;</code>.</p>",
        "id": 210634536,
        "sender_full_name": "scottmcm",
        "timestamp": 1600548410
    },
    {
        "content": "<p>Oh that's a great point about streaming iterators!</p>",
        "id": 210638905,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1600555503
    },
    {
        "content": "<p>Updated the post with a note on lending streams: <a href=\"https://blog.yoshuawuyts.com/async-iteration/#addendum-lending-streams\">https://blog.yoshuawuyts.com/async-iteration/#addendum-lending-streams</a></p>",
        "id": 210640422,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1600558303
    },
    {
        "content": "<p>(side note: the streams RFC proposed to name \"streaming streams\" -&gt; \"lending streams\")</p>",
        "id": 210640478,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1600558416
    },
    {
        "content": "<blockquote>\n<p>A large part of the argument in favor of parallel semantics by default for async iteration is that it is the most commonly desired semantics. </p>\n</blockquote>\n<p>To be honest - I haven't found a single example of where trivial \"parallel iteration\" would be desirable. And this while maintaining more than enough (async) and highly concurrent codebases.<br>\nThe blog post also really doesn't provide one. It agrees that for things like stream manipulation (e.g. zipping) it wouldn't be helpful. And for things like a TCP listener that spawns subtasks I generally need way more functionality (e.g. control of maximum concurrency, integration into a shutdown system, etc). The latter is ususally provided by a more sophisticated framework (that uses some version of <code>spawn</code> internally).  <code>FuturesUnordered</code> is a primitive version of that - production apps might have something different dependening on their use-case.</p>",
        "id": 210641008,
        "sender_full_name": "Matthias247",
        "timestamp": 1600559529
    },
    {
        "content": "<p>But actually I'm not even convinced that we need any special \"async iteration\" semantics. <code>while let something = something().await</code> works perfectly fine.</p>",
        "id": 210641057,
        "sender_full_name": "Matthias247",
        "timestamp": 1600559653
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204219\">@Matthias247</span> </p>\n<blockquote>\n<p>To be honest - I haven't found a single example of where trivial \"parallel iteration\" would be desirable. And this while maintaining more than enough (async) and highly concurrent codebases.</p>\n</blockquote>\n<p>just to make sure I understand you, are you saying that you typically want <em>sequential</em> semantics?</p>",
        "id": 213840088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603138954
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>nikomatsakis: @Matthias247</p>\n</blockquote>\n<p>just to make sure I understand you, are you saying that you typically want sequential semantics?</p>\n</blockquote>\n<p>That's right. I only had use-cases for sequential semantics so far. There are some use-cases where I would <code>spawn</code> afterwards. But these are rare (&lt; 5%), and typically need some extra work to make sure parallelism is limited and there is an overall cancellation + wait mechanism.</p>",
        "id": 214011311,
        "sender_full_name": "Matthias247",
        "timestamp": 1603260625
    }
]