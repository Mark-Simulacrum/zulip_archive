[
    {
        "content": "<p>I understand the reasons why we can't have a fully general <code>impl PartialEq&lt;Option&lt;RHS&gt;&gt; for Option&lt;LHS&gt; where LHS: PartialEq&lt;RHS&gt;</code>.<br>\nBut is there some <em>specific</em> reason we can't have the more specific <code>impl PartialEq&lt;Option&lt;&amp;str&gt;&gt; for Option&lt;String&gt;</code> and vice versa?</p>",
        "id": 187238663,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1580713345
    },
    {
        "content": "<p>Would even that narrow impl break backwards compatibility?</p>",
        "id": 187238681,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1580713395
    },
    {
        "content": "<p>(Or break too many existing programs even if type inference stability rules allow us to make that change?)</p>",
        "id": 187238690,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1580713428
    },
    {
        "content": "<p>Related: is there some fundamental reason we can't <code>match</code> an <code>Option&lt;String&gt;</code> against a pattern like <code>Some(\"foo\")</code>, using a similar mechanism?</p>",
        "id": 187238739,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1580713470
    },
    {
        "content": "<p>Not sure about the former, but I don't think there's a fundamental reason we can't have the latter</p>",
        "id": 187580323,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581017448
    },
    {
        "content": "<p>Apart from not having any such mechanism</p>",
        "id": 187580327,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581017451
    },
    {
        "content": "<p>It might interact some with inference in corner cases</p>",
        "id": 187580336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581017458
    }
]