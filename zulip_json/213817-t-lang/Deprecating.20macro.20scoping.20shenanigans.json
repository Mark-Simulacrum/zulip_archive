[
    {
        "content": "<p>Compiler is having an interesting conversation about stuff that makes their life difficult.</p>\n<p>I thought I'd raise this one as something that we could plausibly start doing something about:<br>\n<a href=\"#narrow/stream/131828-t-compiler/topic/future.20of.20incremental.20compilation/near/272856809\">https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/future.20of.20incremental.20compilation/near/272856809</a></p>\n<p>Namely, that this works today, even in 2021 edition:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[macro_export]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">=&gt;</span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">bar</span><span class=\"o\">!</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>How would people feel about linting for <code>#[macro_export]</code>s not at \"normal\" module scope?  With the intent to just disallow that in EditionNext.</p>\n<p>(Thankfully this at least doesn't work without the <code>#[macro_export]</code>.)</p>",
        "id": 272857859,
        "sender_full_name": "scottmcm",
        "timestamp": 1645559694
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> I'm kinda sad that <code>pub macro_rules!</code> seems to have fallen by the wayside; I'd love to get to the point that we don't need <code>#[macro_export]</code> at all.</p>",
        "id": 272860175,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645560741
    },
    {
        "content": "<p>But yeah, future-compatibility-warning that with an eye towards disallowing it in 2024 sounds good to me.</p>",
        "id": 272860214,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645560766
    },
    {
        "content": "<p>This is the kind of thing that I think creating a 2024 edition at some point makes sense. As in, having an unstable edition for the next couple years. May as well do the work whenever instead of pushing it all into one year.</p>",
        "id": 272860652,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1645560992
    },
    {
        "content": "<p>I agree that it'd be nice for there to <em>always</em> be an unstable edition, <span class=\"user-mention silent\" data-user-id=\"245610\">Jacob Pratt</span>.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/Deprecating.20macro.20scoping.20shenanigans/near/272860175\">said</a>:</p>\n<blockquote>\n<p>I'd love to get to the point that we don't need <code>#[macro_export]</code> at all.</p>\n</blockquote>\n<p>I'd be curious what, if any, scenarios still require that for back-compat with 2015 crates consuming the macro.  I'm worried there might be some.</p>\n<p>Though that gives another potential avenue: say that <code>#[macro_export]</code> in 2024 has no effect <em>inside</em> the crate at all, and is only about what's exported for consumption by ..=2021 crates.</p>",
        "id": 272861779,
        "sender_full_name": "scottmcm",
        "timestamp": 1645561572
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> <code>#[allow(ugh)] #[macro_export_2015_compat] pub macro_rules! ...</code> ;)</p>",
        "id": 272861932,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645561671
    },
    {
        "content": "<blockquote>\n<p>I agree that it'd be nice for there to always be an unstable edition,</p>\n</blockquote>\n<p>yes please, I've mentioned this in the past but I really feel like we should create the new edition flag as part of stabilizing the previous one and just land edition dependent changes into it as they're finished throughout that next 3 year period</p>",
        "id": 272862460,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1645561950
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby [she/her]</span> <a href=\"#narrow/stream/213817-t-lang/topic/Deprecating.20macro.20scoping.20shenanigans/near/272862460\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>I agree that it'd be nice for there to always be an unstable edition,</p>\n</blockquote>\n<p>yes please, I've mentioned this in the past but I really feel like we should create the new edition flag as part of stabilizing the previous one and just land edition dependent changes into it as they're finished throughout that next 3 year period</p>\n</blockquote>\n<p>Yes please!</p>",
        "id": 272862505,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645561973
    },
    {
        "content": "<p>How hard is it to create a new edition? I wouldn't think it's that hard.</p>",
        "id": 272862567,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1645562010
    },
    {
        "content": "<p>(now that the 3 year pace is formalized)</p>",
        "id": 272862576,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1645562018
    },
    {
        "content": "<p>That is sort of what C++ does.<br>\nC++ compilers get a head start on implementing C++n+3 features as they start getting proposed and added to the working draft after C++n ships.</p>",
        "id": 272862696,
        "sender_full_name": "Connor Horman",
        "timestamp": 1645562094
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245610\">Jacob Pratt</span> <a href=\"#narrow/stream/213817-t-lang/topic/Deprecating.20macro.20scoping.20shenanigans/near/272862567\">said</a>:</p>\n<blockquote>\n<p>How hard is it to create a new edition? I wouldn't think it's that hard.</p>\n</blockquote>\n<p>I think if it's just an empty edition it's easy.  The hard part is collecting all the various things that are supposed to stabilize in it all at once.  But if those are done bit-by-bit over years, that would also be no big deal.</p>",
        "id": 272863460,
        "sender_full_name": "scottmcm",
        "timestamp": 1645562488
    },
    {
        "content": "<p>Yeah I'm referring to creating 2024, which would of course have nothing initially.</p>",
        "id": 272863497,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1645562516
    },
    {
        "content": "<p>Working on an unrelated PR right now, but I can look into doing that later.</p>",
        "id": 272863593,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1645562544
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/213817-t-lang/topic/Deprecating.20macro.20scoping.20shenanigans/near/272863460\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"245610\">Jacob Pratt</span> <a href=\"#narrow/stream/213817-t-lang/topic/Deprecating.20macro.20scoping.20shenanigans/near/272862567\">said</a>:</p>\n<blockquote>\n<p>How hard is it to create a new edition? I wouldn't think it's that hard.</p>\n</blockquote>\n<p>I think if it's just an empty edition it's easy.  The hard part is collecting all the various things that are supposed to stabilize in it all at once.  But if those are done bit-by-bit over years, that would also be no big deal.</p>\n</blockquote>\n<p>So long as we're careful to make sure nothing gets merged into the unstable edition channel until it's completely ready to be released including migration lints, etc</p>",
        "id": 272863905,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1645562720
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/Deprecating.20macro.20scoping.20shenanigans/near/272860175\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> I'm kinda sad that <code>pub macro_rules!</code> seems to have fallen by the wayside; I'd love to get to the point that we don't need <code>#[macro_export]</code> at all.</p>\n</blockquote>\n<p>The only problem with <code>pub macro_rules</code> was that the implementation was slightly buggy around metadata encoding/decoding, and no one had time to fix it.<br>\nAll the motivation for it still holds, and I would still like to see it as a replacement of <code>#[macro_export]</code>.</p>",
        "id": 272865582,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1645563557
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby [she/her]</span> Is there any reason we can't merge things into the edition channel that are still <em>unstable</em>?</p>",
        "id": 272866244,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645563673
    },
    {
        "content": "<p>I would think it'd be fine to add something to the edition, and work on it there, as long as it isn't stable.</p>",
        "id": 272866345,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645563697
    },
    {
        "content": "<p>Ah, and the second issue was that the migration lints required by the edition policy add several times more technical debt than any language cleanup removes, that kills all the motivation to work on such changes for me personally.</p>",
        "id": 272866431,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1645563736
    },
    {
        "content": "<p>For my part, I feel like cases where 90% of the time it'll Just Work are cases where it's sufficient to just lint on the old thing and suggest the new thing. I don't actually feel like we <em>have</em> to have a perfect rustfix for every edition migration, though I know others disagree with that.</p>",
        "id": 272866941,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645564005
    },
    {
        "content": "<p>decl_macros are much better for handling actual scoping, tbh.</p>",
        "id": 272871543,
        "sender_full_name": "Jubilee",
        "timestamp": 1645566740
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/Deprecating.20macro.20scoping.20shenanigans/near/272866345\">said</a>:</p>\n<blockquote>\n<p>I would think it'd be fine to add something to the edition, and work on it there, as long as it isn't stable.</p>\n</blockquote>\n<p>it splits the universe a second time: you have edition current/unstable and also toolchain stable/nightly. This might be worth the slightly mental overhead.</p>",
        "id": 272875053,
        "sender_full_name": "Lokathor",
        "timestamp": 1645568553
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/213817-t-lang/topic/Deprecating.20macro.20scoping.20shenanigans/near/272875053\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/Deprecating.20macro.20scoping.20shenanigans/near/272866345\">said</a>:</p>\n<blockquote>\n<p>I would think it'd be fine to add something to the edition, and work on it there, as long as it isn't stable.</p>\n</blockquote>\n<p>it splits the universe a second time: you have edition current/unstable and also toolchain stable/nightly. This might be worth the slightly mental overhead.</p>\n</blockquote>\n<p>I think that's sufficiently orthogonal.</p>",
        "id": 272875357,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645568723
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/Deprecating.20macro.20scoping.20shenanigans/near/272866244\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby [she/her]</span> Is there any reason we can't merge things into the edition channel that are still <em>unstable</em>?</p>\n</blockquote>\n<p>I think the main issue is that strict due diligence has to be done at some point in the process. Either we require the authors of new edition changes to satisfy a checklist or something to make sure that they've done everything necessary to prepare their feature for an edition (e.g., rustfix migrations, lints, docs, etc), we have the edition team do so for all authors at the end of each edition cycle and move any work that isn't fully ready to the next edition, or we use some other approach</p>",
        "id": 272877311,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1645569839
    },
    {
        "content": "<p>My worry is that the second approach is going to be more burdensome for maintainers and more error prone</p>",
        "id": 272877420,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1645569902
    },
    {
        "content": "<p>but it could easily be that the amount of extra work and the risk of missing some of said work is less significant than I anticipate</p>",
        "id": 272877554,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1645569997
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"281468\">@Arthur Cohen</span> as you are currently working on implementing macro_rules! in gccrs.</p>",
        "id": 272976363,
        "sender_full_name": "bjorn3",
        "timestamp": 1645635209
    },
    {
        "content": "<p>Thanks :) We haven't run into macro scoping shenanigans in gccrs yet, as visibility modifiers and imports are not completely implemented. The <code>[macro_export]</code> attribute is for now ignored in gccrs. I know that I personally wouldn't mind its removal</p>",
        "id": 272979252,
        "sender_full_name": "Arthur Cohen",
        "timestamp": 1645636296
    },
    {
        "content": "<p>I can't wait to handle macro scoping schenanigans myself  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> (I'm implementing macros rn in lccc).</p>",
        "id": 272979675,
        "sender_full_name": "Connor Horman",
        "timestamp": 1645636464
    },
    {
        "content": "<p>I can agree, though, that macro_export will be annoying.</p>",
        "id": 272979730,
        "sender_full_name": "Connor Horman",
        "timestamp": 1645636490
    }
]