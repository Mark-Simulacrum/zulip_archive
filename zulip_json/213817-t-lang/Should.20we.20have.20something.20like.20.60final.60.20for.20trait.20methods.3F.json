[
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/81157\">https://github.com/rust-lang/rust/issues/81157</a> is an interesting example of where it would be nice to have a helper method on a trait, but that makes it unreliable because people can implement it wrong -- and the workarounds of making it a function (or inherent method) is kinda annoying.</p>\n<p>(Reminds me of the \"sealed traits\" concept too.)</p>",
        "id": 223158363,
        "sender_full_name": "scottmcm",
        "timestamp": 1610999466
    },
    {
        "content": "<p>I've totally wanted this! A messier way to achieve it would be to have:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">MyTrait</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">final_method</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"fm\">todo!</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 223161967,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1611002354
    },
    {
        "content": "<p>there are some traits in bytemuck that have this, with part of the <code>unsafe trait</code> implementation contract being that you don't override that method.</p>",
        "id": 223162598,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1611002930
    },
    {
        "content": "<p>It would also be handy to have <code>final</code> for associated constants and types, not just functions.</p>",
        "id": 223165734,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1611005883
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span>: <span class=\"nc\">FooHelper</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">FooHelper</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Foo</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">FooHelper</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>A user could implement <code>FooHelper</code> for other types, but those can't also be <code>Foo</code></p>",
        "id": 223166981,
        "sender_full_name": "cuviper",
        "timestamp": 1611007193
    },
    {
        "content": "<p>Specialization makes me worry that <code>FooHelper</code> isn't reliable forever either...</p>",
        "id": 223176141,
        "sender_full_name": "scottmcm",
        "timestamp": 1611016381
    },
    {
        "content": "<p>is there a future where specialization is possible without explicitly opting in? (<code>default impl</code>/<code>default fn</code>)</p>",
        "id": 223181288,
        "sender_full_name": "cuviper",
        "timestamp": 1611022990
    },
    {
        "content": "<p>yeah i feel like this is the kind of thing i'd be worried about breaking in the face of future language features.</p>",
        "id": 223181814,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1611023758
    },
    {
        "content": "<p>that said its pretty clever</p>",
        "id": 223181858,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1611023778
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> <a href=\"#narrow/stream/213817-t-lang/topic/Should.20we.20have.20something.20like.20.60final.60.20for.20trait.20methods.3F/near/223181288\">said</a>:</p>\n<blockquote>\n<p>is there a future where specialization is possible without explicitly opting in? (<code>default impl</code>/<code>default fn</code>)</p>\n</blockquote>\n<p>the original design had <code>partial impl</code> instead of <code>default impl</code>-- this would address this use case as well</p>",
        "id": 224072788,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611681885
    },
    {
        "content": "<p>the idea was that you could write a <code>partial impl</code> with some items not defaulted, which then could not be specialized</p>",
        "id": 224072805,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611681897
    }
]