[
    {
        "content": "<p>Say we have <code>impl&lt;I: Into&lt;u64&gt;&gt; Shr&lt;I&gt; for i16x8</code>, and that's neat, because now we can shift right by any type we can turn into a <code>u64</code>.</p>\n<p>So you write <code>vals &gt;&gt; 2</code>, and then rustc spits at you.</p>\n<p>Because what happens is that <code>2</code> isn't kept as an <code>{integer}</code> for long enough, it's immediately turned into <code>i32</code>, and then there's no <code>i32</code> into <code>u64</code> impl, so you get a compile error.</p>",
        "id": 207083668,
        "sender_full_name": "Lokathor",
        "timestamp": 1597603604
    },
    {
        "content": "<p>long standing and a well known issue. I'm sure there's an issue for this somewhere, but can’t find it now.</p>",
        "id": 207083845,
        "sender_full_name": "nagisa",
        "timestamp": 1597603928
    },
    {
        "content": "<p>(also its more of an implementation issue rather than inherent language problem)</p>",
        "id": 207083852,
        "sender_full_name": "nagisa",
        "timestamp": 1597603943
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/36549\">https://github.com/rust-lang/rust/issues/36549</a> is what I was thinking of.</p>",
        "id": 207083898,
        "sender_full_name": "nagisa",
        "timestamp": 1597604018
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/213817-t-lang/topic/.60Into.60.20bounds.20and.20literals.20combine.20poorly/near/207083852\">said</a>:</p>\n<blockquote>\n<p>(also its more of an implementation issue rather than inherent language problem)</p>\n</blockquote>\n<p>Right, because we can always write an <code>impl</code>for every valid integer type.</p>",
        "id": 207084132,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597604249
    },
    {
        "content": "<p>I believe one of those ongoing typesystem projects with a fancy name (<del>polonius?</del> chalk? <del>both?</del>) would resolve this issue as well by properly tying all the disparate phases of our typesystem together.</p>",
        "id": 207084314,
        "sender_full_name": "nagisa",
        "timestamp": 1597604387
    },
    {
        "content": "<p>/me hopes so.</p>",
        "id": 207084357,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597604405
    },
    {
        "content": "<p>integer defaulting is, after all, a hack that was added very late right before 1.0 IIRC and I don’t believe it has changed much since in how it is implemented.</p>",
        "id": 207084375,
        "sender_full_name": "nagisa",
        "timestamp": 1597604426
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/213817-t-lang/topic/.60Into.60.20bounds.20and.20literals.20combine.20poorly/near/207084314\">said</a>:</p>\n<blockquote>\n<p>I believe one of those ongoing typesystem projects with a fancy name (polonius? chalk? both?) would resolve this issue as well by properly tying all the disparate phases of our typesystem together.</p>\n</blockquote>\n<p>it would be chalk if it was, polonius is about the borrow-checker <a href=\"https://www.youtube.com/watch?v=_agDeiWek8w\">https://www.youtube.com/watch?v=_agDeiWek8w</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"_agDeiWek8w\" href=\"https://www.youtube.com/watch?v=_agDeiWek8w\"><img src=\"https://i.ytimg.com/vi/_agDeiWek8w/default.jpg\"></a></div>",
        "id": 207084477,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1597604551
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> that work-around also presumes that only integers are <code>Into&lt;u64&gt;</code>.</p>",
        "id": 207084791,
        "sender_full_name": "Lokathor",
        "timestamp": 1597604850
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> I think that would feel a little too magic otherwise.</p>",
        "id": 207084839,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597604896
    },
    {
        "content": "<p>Well if you write the impl for Into&lt;u64&gt;, presumably you <em>wanted</em> to accept anything that's Into&lt;u64&gt; :P</p>",
        "id": 207084887,
        "sender_full_name": "Lokathor",
        "timestamp": 1597604926
    },
    {
        "content": "<p>not just \"all the things i can think of right now that are Into&lt;u64&gt;\"</p>",
        "id": 207084909,
        "sender_full_name": "Lokathor",
        "timestamp": 1597604955
    },
    {
        "content": "<p>I meant, I think that having that impl for <code>Into&lt;u64&gt;</code> seems potentially surprising. It's not like you can't do <code>x &gt;&gt; y.into::&lt;u64&gt;()</code>.</p>",
        "id": 207085111,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597605126
    },
    {
        "content": "<p>Well the actual shift amount can't ever usefully go above 63, so \"anything that's even vaguely a number, regardless of the upper limit on its range\" seems like an acceptable input for the shift operator.</p>\n<p>And particularly with &gt;&gt; and &lt;&lt; where we already have assumed long ago that there's going to be this extra magic to be very broad about what is allowed on the right hand side, to the point where there's notes in the docs warning you that x &gt;&gt; y and x.shr(y) can have different type inference (no other operator does this).</p>",
        "id": 207085393,
        "sender_full_name": "Lokathor",
        "timestamp": 1597605444
    },
    {
        "content": "<p>(note: 63 is assuming you generally support up to i64/u64. with i128/u128 the highest needed is 127 of course, in which case even i8 can still store the biggest shift you'd need, so the point generally holds)</p>",
        "id": 207085449,
        "sender_full_name": "Lokathor",
        "timestamp": 1597605516
    },
    {
        "content": "<p>The real problem comes down to the fact that the <em>correct</em> implementation is to only allow unsigned inputs as the shift value.</p>\n<p>But this \"bug\" in rust's literal system doesn't let us have the correctness <strong>and</strong> ergonomics at the same time. So we cave a bit and implement shifting by i32 as well as unsigned values... and then once we support i32 we also support i8, i16, etc for consistency.</p>",
        "id": 207085909,
        "sender_full_name": "Lokathor",
        "timestamp": 1597606278
    },
    {
        "content": "<p>Ah, now here's something interesting, if you <em>do</em> impl shifting for each integer type you can cause inference failures in a different direction:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">  </span><span class=\"cp\">#[inline]</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"cp\">#[must_use]</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">is_finite</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">shifted_exp_mask</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">u32x4</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"mh\">0xFF000000</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">u</span>: <span class=\"nc\">u32x4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cast</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">shift_u</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">shift_u</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"n\">shifted_exp_mask</span><span class=\"p\">).</span><span class=\"n\">cmp_eq</span><span class=\"p\">(</span><span class=\"n\">shifted_exp_mask</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">cast</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>This fails on <code>(shift_u &amp; shifted_exp_mask)</code> because it doesn't know the type of the expression, even though <code>shifted_exp_mask</code> is clearly <code>u32x4</code> and all impls of Shl for <code>u32x4</code> give <code>u32x4</code> as the output (and <code>BitAnd&lt;u32x4&gt; for u32x4</code> is implemented).</p>",
        "id": 207086306,
        "sender_full_name": "Lokathor",
        "timestamp": 1597607022
    },
    {
        "content": "<p>(the fix is of course to instead write <code>let shift_u = u &lt;&lt; 1_u64;</code> or <code>let shift_u: u32x4 = u &lt;&lt; 1;</code>)</p>",
        "id": 207086349,
        "sender_full_name": "Lokathor",
        "timestamp": 1597607073
    }
]