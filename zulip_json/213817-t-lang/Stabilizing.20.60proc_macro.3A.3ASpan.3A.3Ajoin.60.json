[
    {
        "content": "<p>Any opposition to a PR that would stabilize <code>proc_macro::Span::join</code> alone? The only concern I see in <a href=\"https://github.com/rust-lang/rust/issues/54725\">#54725</a> is the behavior when hygiene doesn't match. After testing it on nightly, it works exactly as I'd expect â€” the method returns <code>None</code> when they don't match semantically (mixed site depends on the situation, naturally). It's a small API that has plenty of use cases for diagnostics, even just <code>compile_error!</code> ones.</p>",
        "id": 242497201,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1623571107
    },
    {
        "content": "<p>Another option would be to, based on the <code>.located_at(...)</code> method, offer a specialized join utility affecting locations only, not \"resolved at\" semantics</p>",
        "id": 242498467,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1623573253
    },
    {
        "content": "<p>I suppose that could work, and would avoid the need to return an <code>Option&lt;Span&gt;</code>. I was more checking the temperature with regard to stabilizing the existing method, though. There hasn't been much discussion on it at all from what I can see.</p>",
        "id": 242498485,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1623573343
    },
    {
        "content": "<p>I haven't really seen any use of <code>join</code> where there was a good way to react to <code>None</code>. Returning just one of the spans or some dummy span instead isn't great either, but I'm not sure a Option&lt;Span&gt;-returning function will be great.</p>",
        "id": 243547503,
        "sender_full_name": "Mara",
        "timestamp": 1624381614
    },
    {
        "content": "<p>Is there a situation wherein the different hygienes/files is <em>not</em> programmer error? If it always is a programmer error, it would be sensible to just panic.</p>",
        "id": 243766303,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1624530666
    },
    {
        "content": "<p>If you're trying to replicate some of the logic done by the compiler (e.g. creating a span for an item by joining individual token spans), then you can legitimately run into this</p>",
        "id": 243800925,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1624547550
    },
    {
        "content": "<p>For example, you could have something like <code>pub fn foo() {}</code>, where each token has a span from a different file</p>",
        "id": 243801015,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1624547599
    },
    {
        "content": "<p>Could you explain where that would come up? I've only done relatively basic proc macros myself, so I admittedly don't know have the most experience.</p>",
        "id": 243858479,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1624576843
    },
    {
        "content": "<p>The combination of spans from different files happens when a proc-macro uses some interpolated tokens</p>",
        "id": 243865321,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1624582739
    },
    {
        "content": "<p>e.g. if it expands to <code>$vis fn foo() {}</code></p>",
        "id": 243865327,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1624582747
    },
    {
        "content": "<p>Sure, but where would <code>Span::join</code> be needed for that? I get that different hygienes exist, I just don't see where you'd even <em>attempt</em> to join them together.</p>",
        "id": 243865426,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1624582869
    },
    {
        "content": "<p>I see. I'm not aware of any concrete examples, but it seems plausible that a proc-macro could do so for diagnostic purposes (e.g. pointing to the function header span)</p>",
        "id": 243950832,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1624644537
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245610\">Jacob Pratt</span> <a href=\"#narrow/stream/213817-t-lang/topic/Stabilizing.20.60proc_macro.3A.3ASpan.3A.3Ajoin.60/near/243766303\">said</a>:</p>\n<blockquote>\n<p>Is there a situation wherein the different hygienes/files is <em>not</em> programmer error? If it always is a programmer error, it would be sensible to just panic.</p>\n</blockquote>\n<p>the compiler itself joins spans from different files/contexts all the time. (causing some interesting results sometimes ^^')</p>",
        "id": 243959418,
        "sender_full_name": "Mara",
        "timestamp": 1624649125
    },
    {
        "content": "<p>say i have <code>macro_rules! my_assert_eq { ($a:expr, $b:expr) =&gt; { my_assert!($a == $b) }; }</code>, then my <code>my_assert</code> proc_macro gets an expression with three different contexts. it might want to give an error about the whole <code>$a == $b</code> expression. but  the span of that expression spans up to three files and hygiene contexts.</p>",
        "id": 243959689,
        "sender_full_name": "Mara",
        "timestamp": 1624649250
    },
    {
        "content": "<p>a good example of a proc macro that should use <code>Span::join</code> is <code>paste!</code> since it creates new identifiers from concatenating existing identifiers and <em>should</em> preserve their hygiene</p>",
        "id": 243961139,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624649973
    },
    {
        "content": "<p>even that can be very tricky! a macro might look at the name of a type and make a new type with a prefix or something. so you'd paste <code>prefix_</code> and whatever the name of the struct is that came in. then paste!() would get two tokens from different contexts</p>",
        "id": 243961564,
        "sender_full_name": "Mara",
        "timestamp": 1624650200
    },
    {
        "content": "<p>after looking at the source, <code>paste!</code> actually uses the span of the <code>[]</code> in a token paste sequence <code>[&lt;a b c&gt;]</code></p>",
        "id": 243961957,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624650380
    },
    {
        "content": "<p><code>paste!</code> would likely use the correct span if it possible. Aside from just picking one of the two <code>Span</code>s, what could a user feasibly do? That's pretty much the only thing I can think of doing, in which case returning an <code>Option&lt;Span&gt;</code> would be sufficient to give the user control.</p>",
        "id": 243982191,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1624664326
    }
]