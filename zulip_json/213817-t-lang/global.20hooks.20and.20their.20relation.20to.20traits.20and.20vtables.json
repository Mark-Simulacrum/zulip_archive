[
    {
        "content": "<p>This is kinda snowballing out of <a href=\"https://github.com/rust-lang/project-error-handling/issues/3\">https://github.com/rust-lang/project-error-handling/issues/3</a> where  I'm doing research on moving Backtrace and Error into core to ensure we can stabilize it without backing ourselves in a corner</p>\n<p>The current plan for doing so is to define some hooks in core like <code>panic_impl</code> that get defined in <code>std</code> and invoked by the <code>Backtrace</code> type which is moved to <code>core</code> to access its implementation details</p>",
        "id": 211372160,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601143735
    },
    {
        "content": "<p>Its feeling more and more like traits and the adhoc hooks we're defining for stuff like the panic handler are sort of like universally quantified dynamic dispatch vs existentially quantified static dispatch (or maybe even const dynamic dispatch?)</p>",
        "id": 211372187,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601143801
    },
    {
        "content": "<p>where with traits you can have many impls and each object carries its vtable and uses virtual function calls</p>",
        "id": 211372242,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601143852
    },
    {
        "content": "<p>where as with hooks you have one statically defined implementor of the trait and all invocations of it are statically dispatched</p>",
        "id": 211372250,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601143874
    },
    {
        "content": "<p>so for backtrace it would be nice if we had something like this</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// in core</span>\n<span class=\"cp\">#[existential]</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Backtrace</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ....</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> notes:</p>\n<blockquote>\n<p>that's just a trait with orphan impls that still have to be coherent across a crate graph lmao</p>\n</blockquote>",
        "id": 211372401,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601144128
    },
    {
        "content": "<p>I don't think this should necessarily be done as a prerequisite for stabilizing backtrace but I thought I'd mention it</p>",
        "id": 211372471,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601144192
    },
    {
        "content": "<p>in my experience, most proposals like this have gotten little traction and ended up in the RFC graveyard</p>",
        "id": 211372615,
        "sender_full_name": "eddyb",
        "timestamp": 1601144410
    },
    {
        "content": "<p>so I'd be wary of going this route without knowing a lot can be invested in it. I'd start with looking into lang team buy-in, etc.</p>",
        "id": 211372729,
        "sender_full_name": "eddyb",
        "timestamp": 1601144598
    },
    {
        "content": "<p>oh this is in t-lang, oops I missed that</p>",
        "id": 211372808,
        "sender_full_name": "eddyb",
        "timestamp": 1601144730
    },
    {
        "content": "<p>the advantage of using traits here is that it fits Rust better than trying to emulate some ML module system</p>",
        "id": 211372860,
        "sender_full_name": "eddyb",
        "timestamp": 1601144777
    },
    {
        "content": "<p>I do love traits</p>",
        "id": 211372864,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601144792
    },
    {
        "content": "<p>so yeah cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>, curious what he thinks about using traits with intentional orphan impls (that are still coherent, even if enforced late in the crate graph, like lang items)</p>",
        "id": 211372886,
        "sender_full_name": "eddyb",
        "timestamp": 1601144853
    },
    {
        "content": "<p>actually is there a @ for wg-traits?</p>",
        "id": 211372895,
        "sender_full_name": "eddyb",
        "timestamp": 1601144872
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span></p>",
        "id": 211372936,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601144884
    },
    {
        "content": "<p>Another potential option (if we're interested in \"existential traits\") is to mark a specific impl as <code>#[existential]</code> instead. You'd write a coherent impl under the current framework, but with no implementation, and <code>#[existential]</code>. </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">MyTrait</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">do_thing</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"cp\">#[existential]</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">MyTrait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>This would allow another crate, which can observe the <code>#[existential]</code> impl, to write an impl which would otherwise violate coherence, such as:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">MyTrait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">do_thing</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"hello!\"</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>Rust would then enforce that exactly one non-<code>#[existential]</code> impl of <code>impl MyTrait for ()</code> exists in the crate graph while building. There _may_ need to be limitations on what is allowed on these impls, however, such as preventing associated types, constants, and/or generics, though I don't know enough to be sure.</p>",
        "id": 211373228,
        "sender_full_name": "Nika Layzell",
        "timestamp": 1601145414
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/213817-t-lang/topic/global.20hooks.20and.20their.20relation.20to.20traits.20and.20vtables/near/211372936\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span></p>\n</blockquote>\n<p>Unrelated, but it's surprising to me that I don't get pings for this</p>",
        "id": 211380200,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601150474
    },
    {
        "content": "<p>should be fixed now</p>",
        "id": 211380265,
        "sender_full_name": "simulacrum",
        "timestamp": 1601150529
    },
    {
        "content": "<p>test?</p>",
        "id": 211380278,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601150575
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span></p>",
        "id": 211381191,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601151981
    },
    {
        "content": "<p>That works, thanks!</p>",
        "id": 211381207,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601152026
    },
    {
        "content": "<p>Another option: I'd love to see <a href=\"https://docs.rs/linkme\">https://docs.rs/linkme</a> be promoted to a language feature. It's a crate that allows downstream crates to \"inject\" data into upstream crate defined collections.<br>\nWhile that crate is using linker hacks and can only support <code>[T]</code> as collection, if we implement them within rustc, i'd imagine it would be quite easy to support <code>Option&lt;T&gt;</code> as collection, which will have the same effect as existential trait, and also useful in many ways.</p>",
        "id": 211392683,
        "sender_full_name": "Charles Lew",
        "timestamp": 1601172120
    },
    {
        "content": "<p>That was a popular topic in IRLO for a bit last year, but AFAIK didn't go anywhere at the language level:</p>\n<ul>\n<li><a href=\"https://internals.rust-lang.org/t/pre-rfc-add-language-support-for-global-constructor-functions/9840?u=scottmcm\">https://internals.rust-lang.org/t/pre-rfc-add-language-support-for-global-constructor-functions/9840?u=scottmcm</a></li>\n<li><a href=\"https://internals.rust-lang.org/t/idea-global-static-variables-extendable-at-compile-time/9879?u=scottmcm\">https://internals.rust-lang.org/t/idea-global-static-variables-extendable-at-compile-time/9879?u=scottmcm</a></li>\n</ul>",
        "id": 211434151,
        "sender_full_name": "scottmcm",
        "timestamp": 1601240096
    },
    {
        "content": "<p>I am theoretically in favor of some design here</p>",
        "id": 211786296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601483299
    },
    {
        "content": "<p>I feel like it would theoretically make a nice project group</p>",
        "id": 211786327,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601483314
    },
    {
        "content": "<p>Unlike other trait things, it's not really blocked on chalk or anything like <em>that</em></p>",
        "id": 211786344,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601483322
    },
    {
        "content": "<p>My main concern would be getting the right folks and the question of it actually making progress -- I'd be reluctant to open a door like this unless we have confidence we can close it</p>",
        "id": 211786385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601483342
    },
    {
        "content": "<p>I would <em>love</em> to see a solution to this problem.</p>",
        "id": 211787468,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601483805
    },
    {
        "content": "<p>I can think of a few of the right people. <span class=\"user-mention\" data-user-id=\"128448\">@stjepang</span> for instance.</p>",
        "id": 211787493,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601483819
    },
    {
        "content": "<p>The idea of having trait-driven pseudo-global state makes sense.</p>",
        "id": 211787559,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601483855
    },
    {
        "content": "<p>there's already a trait-based design. <a href=\"https://github.com/rust-lang/rfcs/pull/2492\">https://github.com/rust-lang/rfcs/pull/2492</a></p>",
        "id": 211794251,
        "sender_full_name": "Jethro",
        "timestamp": 1601487031
    },
    {
        "content": "<p>Looking now...</p>",
        "id": 211798193,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601488911
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138938\">@Jethro</span> in answer to your question, I'd give it a solid <em>maybe</em> :)</p>",
        "id": 211798373,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601488989
    },
    {
        "content": "<p>I guess tbh I'm still sort of inclined to keep it postponed whilst we pursue other things</p>",
        "id": 211798411,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601489008
    },
    {
        "content": "<p>Looking through 2492, I personally feel it's close but there are additional bits I'd want to see.</p>",
        "id": 211798895,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601489233
    },
    {
        "content": "<p>Short version: I'd like to have a mechanism to actually <em>handle</em> conflict in the crate graph. Specifically, I'd like a crate that's \"higher\" in the crate graph to be able to say \"yeah, I know that something in my dependency tree says the type is X, but no, I'm overriding and saying the type is Y instead\".</p>",
        "id": 211799015,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601489291
    },
    {
        "content": "<p>Concretely: if A depends on B, and B depends on C and D, then if C and D both \"provide\" the type there's a compile error, but B can override and say \"here's the type\" and then there's no compile error (as long as the type meets the defined trait constraints).</p>",
        "id": 211799108,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601489351
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220594\">@John Ericson</span> assuming you are Ericson2314 on github, pointing you to this discussion</p>",
        "id": 211800562,
        "sender_full_name": "Jethro",
        "timestamp": 1601490169
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/global.20hooks.20and.20their.20relation.20to.20traits.20and.20vtables/near/211799108\">said</a>:</p>\n<blockquote>\n<p>Concretely: if A depends on B, and B depends on C and D, then if C and D both \"provide\" the type there's a compile error, but B can override and say \"here's the type\" and then there's no compile error (as long as the type meets the defined trait constraints).</p>\n</blockquote>\n<p>In particular, I think that'd be important for crates that want to offer <em>defaults</em> without <em>mandating</em> a specific type.</p>",
        "id": 211800809,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601490293
    },
    {
        "content": "<p>yeah I fully agree a defaulting mechanism is missing from the RFC. this was discussed in the thread but not everyone agreed</p>",
        "id": 211800867,
        "sender_full_name": "Jethro",
        "timestamp": 1601490332
    },
    {
        "content": "<p>This is one of those times where I don't think we can just punt because there's no consensus.</p>",
        "id": 211800967,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601490373
    },
    {
        "content": "<p>as for the overriding, assuming crate C and D both export their types implementing the relevant trait, B could just <em>also</em> set the global. if the dependency tree only has a single node that (sets the global and covers all other setting of the global), the compiler could pick that</p>",
        "id": 211801584,
        "sender_full_name": "Jethro",
        "timestamp": 1601490689
    },
    {
        "content": "<p>this may just be rephrasing what you were already thinking <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span></p>",
        "id": 211801722,
        "sender_full_name": "Jethro",
        "timestamp": 1601490745
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138938\">@Jethro</span> Given a careful definition of \"covers\", I think I'd agree.</p>",
        "id": 211801784,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601490781
    },
    {
        "content": "<p>I think it'd be reasonable to debate whether there should be a requirement to <em>declare</em> that you're overriding, though.</p>",
        "id": 211801812,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601490796
    },
    {
        "content": "<p>I don't know if that'd help or just generate churn.</p>",
        "id": 211801832,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601490809
    },
    {
        "content": "<p>/me is summoned.</p>",
        "id": 211802012,
        "sender_full_name": "John Ericson",
        "timestamp": 1601490883
    },
    {
        "content": "<p>I might recommend you allplay around with an ML or Haskell's backpack to get a flavor of the design space. I am happy to offer advice on each, though I have backpack much more paged in at the moment.</p>",
        "id": 211802283,
        "sender_full_name": "John Ericson",
        "timestamp": 1601491019
    },
    {
        "content": "<p>I think people are fairly confident traits are the way to go</p>",
        "id": 211802496,
        "sender_full_name": "Jethro",
        "timestamp": 1601491115
    },
    {
        "content": "<p>Backpack seems like it's built more around the idea of parameterizable modules.</p>",
        "id": 211802556,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601491153
    },
    {
        "content": "<p>Is that accurate?</p>",
        "id": 211802567,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601491158
    },
    {
        "content": "<p>It is built more about that, but i would still give a it spin. I don't mean the say that the design should be more like that in the areas it already covers, but when thinking about the Cargo/composition/defaults side of things</p>",
        "id": 211805858,
        "sender_full_name": "John Ericson",
        "timestamp": 1601492769
    },
    {
        "content": "<p>well if any movement starts happening on this I'd love to help</p>",
        "id": 211826388,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601499544
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/global.20hooks.20and.20their.20relation.20to.20traits.20and.20vtables/near/211786327\">said</a>:</p>\n<blockquote>\n<p>I feel like it would theoretically make a nice project group</p>\n</blockquote>\n<p>I'd definitely participate in such a group</p>",
        "id": 211826482,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1601499587
    }
]