[
    {
        "content": "<p>Maybe this has been discussed as part of Macros V2, or just that proc macros can cover it, but it would be really handy to have a designator which works for enum variants, rather than the enum type itself. It seems like something which would not be unreasonable to add to <code>macro_rules!</code>? Something like <code>:variant</code>?</p>",
        "id": 233212864,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1617648570
    },
    {
        "content": "<p>Macros know nothing about types, so for example in case of <code>Foo::Bar</code> it is undetermined if this is the <code>Bar</code> variant of <code>Foo</code> or the <code>Bar</code> type in the module <code>Foo</code>.</p>",
        "id": 233215481,
        "sender_full_name": "bjorn3",
        "timestamp": 1617649760
    },
    {
        "content": "<p>Variants themselves are <code>ident</code>ifiers when within an <code>enum</code> definition, <code>path</code>s otherwise. Did neither of these captures suffice?</p>",
        "id": 233221272,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1617652675
    },
    {
        "content": "<p>Hmm, I'll have to try <code>ident</code> and/or <code>path</code>. The available docs on this make it very hard to figure out what to use for some pretty common cases, e.g. <a href=\"https://doc.rust-lang.org/reference/macros-by-example.html#metavariables\">https://doc.rust-lang.org/reference/macros-by-example.html#metavariables</a> won't really get you far on answering this question, unfortunately.</p>",
        "id": 233222861,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1617653459
    },
    {
        "content": "<p>Yeah, there is room for improving the teaching materials for macros <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 233223277,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1617653714
    },
    {
        "content": "<p>Neither <code>:ident</code> or <code>:path</code> seem to work. I'm trying to macro out a bunch of similar <code>match</code> sub-statements, for what it's worth. And I was trying with <code>Enum::Varient</code> in full.</p>",
        "id": 233232484,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1617657467
    },
    {
        "content": "<p><code>Enum::Variant</code> should match <code>:path</code> and <code>:ty</code>, but won't match <code>:ident</code></p>",
        "id": 233236695,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617659688
    }
]