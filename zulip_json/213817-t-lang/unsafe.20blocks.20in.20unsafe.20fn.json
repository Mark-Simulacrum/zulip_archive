[
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> , regarding your <a href=\"https://github.com/rust-lang/rfcs/pull/2585#issuecomment-577852430\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/pull/2585#issuecomment-577852430\">recent comment</a>: does that mean you would be in favor of <code>#[unsafe] fn foo</code> if it were written <code>#[unsafe_to_call] fn foo</code> or something similar?</p>",
        "id": 186439447,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579815929
    },
    {
        "content": "<p>(I decided not to keep pushing <code>#[unsafe]</code> in the meeting because it seemed like few people were interested in pursuing that avenue of discussion, but I don't think you chimed in at that time.)</p>",
        "id": 186439553,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579815966
    },
    {
        "content": "<p>the idea was originally proposed by ogoffart <a href=\"https://github.com/rust-lang/rfcs/pull/2585#issuecomment-511313773\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/pull/2585#issuecomment-511313773\">here</a> on the RFC thread</p>",
        "id": 186439679,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579816053
    },
    {
        "content": "<p>(though I don't know if I agree with their generalization to <code>#[unsafe] trait UnsafeTrait { }</code> ; that seems premature to me, especially since I think <code>unsafe trait</code> has  no implied effect on its methods and default bodies.)</p>",
        "id": 186439826,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579816130
    },
    {
        "content": "<p>(that is, I don't see what the use of the attribute form buys one in terms of expressiveness there; at least with the <code>#[unsafe] fn</code> I can see how it differs from <code>unsafe fn</code>)</p>",
        "id": 186440630,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579816636
    },
    {
        "content": "<p>I would be slightly in favor, albeit that's a very verbose syntax.</p>",
        "id": 186440829,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579816746
    },
    {
        "content": "<p><code>#[unsafe_to_call] fn</code> is verbose? or <code>#[unsafe] fn</code>?</p>",
        "id": 186440868,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579816778
    },
    {
        "content": "<p>The former.</p>",
        "id": 186440883,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579816788
    },
    {
        "content": "<p>okay.But I assume the latter fails to convey intent sufficiently, right ?</p>",
        "id": 186440948,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579816804
    },
    {
        "content": "<p>Yeah, confusing similarity.</p>",
        "id": 186440975,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579816822
    },
    {
        "content": "<p>I don't have a good syntax to suggest.</p>",
        "id": 186441010,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579816840
    },
    {
        "content": "<p>another option that <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> had put forward was something like <code>#[safe_body] unsafe fn foo(..) { ... }</code></p>",
        "id": 186441017,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579816849
    },
    {
        "content": "<p>I prefer the lint approach. But I like the concept of <code>#[unsafe_to_call]</code>, just not the spelling.</p>",
        "id": 186441059,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579816884
    },
    {
        "content": "<p>which is again verbose, but perhaps captures intent nicely (especially since the fact that the body is safe is an <em>implementation</em> detail, and thus need not be part of the header.</p>",
        "id": 186441077,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579816901
    },
    {
        "content": "<p>I.e. maybe we could get away with adding <code>#[safe]</code>, and do <code>unsafe fn foo(...) { #![safe] ... }</code></p>",
        "id": 186441149,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579816933
    },
    {
        "content": "<p>which sidesteps the whole failure to reserve <code>safe</code> as a keyword.</p>",
        "id": 186441176,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579816961
    },
    {
        "content": "<p>and of course its quite likely that all of this was already debated on the RFC</p>",
        "id": 186441250,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579817007
    },
    {
        "content": "<p>could some sort of synonym help here?</p>",
        "id": 186441353,
        "sender_full_name": "Lokathor",
        "timestamp": 1579817060
    },
    {
        "content": "<p>I suppose <code>#![safe]</code> ends up turning into the lint approach</p>",
        "id": 186441400,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579817106
    },
    {
        "content": "<p>i.e. <code>unsafe fn foo(...) { #![safe] ... }</code> seems like it would be equivalent to <code>unsafe fn foo(...) { #![deny(unsafe_acts_outside_unsafe_block)] ...}</code>, or whatever we name the lint.</p>",
        "id": 186441526,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579817171
    },
    {
        "content": "<p>something like <code>danger fn set_len(&amp;self, new_len)</code></p>",
        "id": 186441605,
        "sender_full_name": "Lokathor",
        "timestamp": 1579817238
    },
    {
        "content": "<p>i'll admit I don't see why we need a new keyword for this concept. An attribute (i.e. <code>#[danger] fn set_len(&amp;mut self, new_len)</code> seems fine to me.)</p>",
        "id": 186441771,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579817373
    },
    {
        "content": "<p>(as long as adding the attribute cannot make us start accepting code with UB that would have otherwise been rejected, that is )</p>",
        "id": 186441876,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579817439
    },
    {
        "content": "<p>attributes are often quite clunky, but since it's infrequent that this one would be used it's probably fine</p>",
        "id": 186441917,
        "sender_full_name": "Lokathor",
        "timestamp": 1579817477
    },
    {
        "content": "<p>I think adding attributes (particularly <code>#[unsafe]</code> due to its keyword nature) or wholly new mechanisms rather than small edition based tweaks uses up relatively a lot of spec/compiler complexity for relatively little gain as <code>#[unsafe/safe/unsafe_to_call]</code> is unlikely to get widespread use</p>",
        "id": 186442071,
        "sender_full_name": "centril",
        "timestamp": 1579817570
    },
    {
        "content": "<p>If we don't make edition changes as proposed in the RFC, I would prefer to tweak the linting, and leave it there</p>",
        "id": 186442112,
        "sender_full_name": "centril",
        "timestamp": 1579817610
    },
    {
        "content": "<p>Specifically an attribute<br>\n1) displays poorly in generated rustdoc (relatively fixable)<br>\n2) doesn't have a defined order when there is more than one on the same function (harder to fix but maybe rustfmt could help)</p>\n<p>example: set_len is probably inline, and you could imagine must_use being added to other unsafe to call functions that are inline, such as index_unchecked or similar.</p>\n<p>Many disorganized attributes is fine if they are largely unimportant to the usage, such as inline being optimization only, and must_use being a hint only. When the attribute means that you need an unsafe block and you need to be manually verifying things, it is not so fun.</p>",
        "id": 186443310,
        "sender_full_name": "Lokathor",
        "timestamp": 1579818487
    },
    {
        "content": "<p>put another way: safe / unsafe_to_call_but_safe_body / unsafe_body is as important as async, and async is not an attribute either.</p>",
        "id": 186443392,
        "sender_full_name": "Lokathor",
        "timestamp": 1579818579
    },
    {
        "content": "<p>if not more important due to the well.. unsafety</p>",
        "id": 186443557,
        "sender_full_name": "centril",
        "timestamp": 1579818720
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> if you saw it in the RFC thread, how did you feel about the suggestion of allowing <code>unsafe</code> to prefix a single expression without need of braces:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">set_len</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x_val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"c1\">// and so on</span>\n</pre></div>",
        "id": 186554104,
        "sender_full_name": "Lokathor",
        "timestamp": 1579921105
    },
    {
        "content": "<p>Did see it, really not a fan. Unsafe should stand out.</p>",
        "id": 186554108,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1579921141
    },
    {
        "content": "<p>that makes it harder to program much of the time :/</p>",
        "id": 186554170,
        "sender_full_name": "Lokathor",
        "timestamp": 1579921257
    },
    {
        "content": "<p>i think it especially hinders calls where the return value is immediately checked with if or match</p>",
        "id": 186554180,
        "sender_full_name": "Lokathor",
        "timestamp": 1579921315
    },
    {
        "content": "<p>which is like, 97% of all the unsafe calls i make</p>",
        "id": 186554227,
        "sender_full_name": "Lokathor",
        "timestamp": 1579921367
    },
    {
        "content": "<p>we opted against this \"braceless unsafe\" in the past on the basis of the non-obviousness of its scope (this, btw, is a good example of the kind of \"jurispredunce\" I think we should be accumulating in a sort of FAQ)</p>",
        "id": 187278905,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1580747754
    }
]