[
    {
        "content": "<p>This is an idea from the same project that made me post about the literals thing but it's fundamentally different and I suspect far less controversial to change it.</p>\n<p>Supposing we have</p>\n<ul>\n<li><code>struct Foo</code></li>\n<li><code>impl From&lt;[i64;2]&gt; for Foo</code></li>\n<li><code>impl From&lt;[i32;4]&gt; for Foo</code></li>\n</ul>\n<p>If you then have code that says <code>Foo::from([1,2])</code>, you get an inference failure because the array is immediately given the type <code>[i32; 2]</code> instead of the more general <code>[{integer}; 2]</code>, so it can't find the correct <code>From</code> impl.</p>\n<p>So my question is: can we teach rust that the array should maintain <code>{integer}</code> element type as long as possible, and only pick the length right away?</p>",
        "id": 196944664,
        "sender_full_name": "Lokathor",
        "timestamp": 1588968591
    },
    {
        "content": "<p>What would happen if you also have an instance for <code>[i64]</code> and <code>[i32]</code>?</p>",
        "id": 196944863,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588968661
    },
    {
        "content": "<p>as far as I can see, this <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=79b6b308cc1f0dfbb01ca2be512cba78\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=79b6b308cc1f0dfbb01ca2be512cba78\">works</a>? I think there must be something additional going on</p>",
        "id": 196945658,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1588969161
    },
    {
        "content": "<p>ah, my mistake, i also had impls for the unsigned types as well (u32, u64, etc)</p>",
        "id": 196945709,
        "sender_full_name": "Lokathor",
        "timestamp": 1588969189
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> if you mean &amp;[i32] and &amp;[i64] then currently that gives a compile error saying that the compiler doesn't know what you mean and you need to be more specific. Which seems fine to me</p>",
        "id": 196946047,
        "sender_full_name": "Lokathor",
        "timestamp": 1588969345
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 196946556,
        "sender_full_name": "Lokathor",
        "timestamp": 1588969672
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=6a36c8644b5033a83a84cece7022877b\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=6a36c8644b5033a83a84cece7022877b\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=6a36c8644b5033a83a84cece7022877b</a> this demonstrates the problem, so i guess this is more like an bug in the error reporting process it goes through</p>",
        "id": 196946695,
        "sender_full_name": "Lokathor",
        "timestamp": 1588969743
    }
]