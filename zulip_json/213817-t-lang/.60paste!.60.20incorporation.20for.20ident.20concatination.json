[
    {
        "content": "<p>Random thought: I think the syntax from the <a href=\"https://github.com/dtolnay/paste\"><code>paste</code> crate</a> could just be a general part of rust's features (at least inside macros). Paste lets you do things like <code>[&lt;Q R S T&gt;]</code> to concatenate idents together. Which would be boring, except it also works with metavariables. Plus, you can modify the case or camel/snake-casedness, like this: <code>[&lt;ld_ $reg:lower _expr&gt;]</code>. That makes <code>$reg</code> lowercase. </p>\n<p>In other words, it's like <code>concat_idents!</code>, except it's more powerful and seems to avoid the ambiguity problems that <code>concat_idents!</code> has, allowing this syntax to be used in ident position. I realize that full support for macros in ident position would be better, but given how long <a href=\"https://github.com/rust-lang/rust/issues/29599\">#29599</a> has been open, I'm not getting the feeling that's ever going to happen.</p>",
        "id": 278384816,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1649474735
    },
    {
        "content": "<p>Examples are stolen from the paste README.</p>",
        "id": 278384897,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1649474878
    },
    {
        "content": "<p>Maybe the metavariable expression syntax could be leveraged to do this?<br>\nTo support <code>${concat_ident(ld_ $reg _expr)}</code>, at least.<br>\n<a href=\"https://github.com/rust-lang/rfcs/blob/master/text/3086-macro-metavar-expr.md\">https://github.com/rust-lang/rfcs/blob/master/text/3086-macro-metavar-expr.md</a></p>",
        "id": 278386542,
        "sender_full_name": "matt1992",
        "timestamp": 1649477396
    },
    {
        "content": "<p>Or the eager-expansion pattern:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">match</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"fm\">concat_idents!</span><span class=\"p\">(</span><span class=\"n\">ld_</span><span class=\"w\"> </span><span class=\"cp\">$ref</span><span class=\"w\"> </span><span class=\"n\">_expr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{(</span><span class=\"w\"> </span><span class=\"cp\">$fname</span>:<span class=\"nc\">ident</span><span class=\"w\"> </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"cp\">$fname</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">)}</span><span class=\"w\"></span>\n</code></pre></div>\n<ul>\n<li>prototyped <a href=\"https://docs.rs/with_builtin_macros/0.0.3/with_builtin_macros/builtin_macros/concat_idents/index.html\">over here</a></li>\n</ul>",
        "id": 278440061,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1649552183
    },
    {
        "content": "<p>Interesting!</p>",
        "id": 278452059,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1649573129
    },
    {
        "content": "<p>I'm not picky about how it gets done, although I do think that strong support for case conversions is vital.</p>",
        "id": 278452064,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1649573156
    },
    {
        "content": "<p>are case conventions currently a part of the language? AFAIK they are limited to lints and warnings only</p>",
        "id": 278459671,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649585134
    },
    {
        "content": "<p>What do you define as \"part of the language\"? They're <a href=\"https://rust-lang.github.io/api-guidelines/naming.html\">officially recommended</a> and have lints.</p>",
        "id": 278460235,
        "sender_full_name": "Chayim Refael Friedman",
        "timestamp": 1649586062
    },
    {
        "content": "<p>do they form part of the definition of what a valid rust program is</p>",
        "id": 278460250,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649586119
    },
    {
        "content": "<p>No, and they shouldn't (unless you <code>#[deny(...)]</code> the lints).</p>",
        "id": 278460302,
        "sender_full_name": "Chayim Refael Friedman",
        "timestamp": 1649586146
    },
    {
        "content": "<p>making them part of macro matchers would change that</p>",
        "id": 278460318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649586188
    },
    {
        "content": "<p>We can just let the user choose the casing, like the <code>paste</code> crate does.</p>",
        "id": 278460396,
        "sender_full_name": "Chayim Refael Friedman",
        "timestamp": 1649586329
    },
    {
        "content": "<p>that still makes case conversion a part of the standard though</p>",
        "id": 278461162,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649587531
    },
    {
        "content": "<p><strong>conversions</strong>, but not <strong>conventions</strong>. That's whole lot different. Casing is a concept that exists, and nobody can deny that; handling it in identifiers, in some sense, is like providing string manipulation functions to handle it. But forcing people to use specific naming conventions is something entirely different.</p>",
        "id": 278461237,
        "sender_full_name": "Chayim Refael Friedman",
        "timestamp": 1649587631
    },
    {
        "content": "<p>Yeah.</p>",
        "id": 278519837,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1649664459
    },
    {
        "content": "<p>I agree with Chayim.</p>",
        "id": 278519900,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1649664484
    },
    {
        "content": "<p>They already have lints. These are rustc lints too.s rustc will warn you that you're doing something wrong if you don't follow the convention.</p>",
        "id": 278519964,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1649664533
    },
    {
        "content": "<p>I wasn't proposing to make them any more required than they are now, just to allow the user to specify the casing. The alternative is to make everyone who wants to use <code>concat_idents!</code> ignore the lints (which we could do by default, but still). And if they did so they'd still have confusing expanded code.</p>",
        "id": 278520173,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1649664664
    },
    {
        "content": "<p>Here, we're providing people the option to follow case conventions in there macros.</p>",
        "id": 278520219,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1649664702
    },
    {
        "content": "<p>And yeah, that means officially defining camel case and snake space as part of the language spec. But lints are already almost part of the language spec themselves, so it's not a big change.</p>",
        "id": 278520316,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1649664748
    }
]