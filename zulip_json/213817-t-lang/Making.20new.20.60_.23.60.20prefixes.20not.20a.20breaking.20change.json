[
    {
        "content": "<p>Making raw idents worked only with <code>r#</code> because it was already reserved.</p>\n<p>We should, as part of the next edition, make _all_ <code>${ident}#${stuff}</code> be reserved, so that we have space here to do things.</p>\n<p>Without saying what those things would be, it could be <code>s\"Hello\"</code> for <code>Strings</code>, <code>keyword#yeet</code>, etc.</p>",
        "id": 195892494,
        "sender_full_name": "scottmcm",
        "timestamp": 1588276386
    },
    {
        "content": "<p>I think that this is a good idea</p>",
        "id": 195893410,
        "sender_full_name": "Sebastian Malton",
        "timestamp": 1588276777
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/213817-t-lang/topic/Making.20new.20.60_.23.60.20prefixes.20not.20a.20breaking.20change/near/195892494\" title=\"#narrow/stream/213817-t-lang/topic/Making.20new.20.60_.23.60.20prefixes.20not.20a.20breaking.20change/near/195892494\">said</a>:</p>\n<blockquote>\n<p>[...] it could be <code>s\"Hello\"</code> for <code>Strings</code>, [...]</p>\n</blockquote>\n<p>this was supposed to be <code>s#\"Hello\"</code>, right?</p>",
        "id": 195893579,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588276857
    },
    {
        "content": "<p><code>\"Hello\"s</code> is already a single token.</p>",
        "id": 195893688,
        "sender_full_name": "kennytm",
        "timestamp": 1588276917
    },
    {
        "content": "<p>I think we would want to do two things:</p>\n<ul>\n<li>reserve lexical space</li>\n<li>clarify the GOAL -- i.e., we're using this to stabilize primitives where we haven't figured out the best way to expose them</li>\n</ul>\n<p>and in particular, whenever we make use of this lexical space in a design, we are effectively encourage people to build and experiment.</p>",
        "id": 195893694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588276919
    },
    {
        "content": "<p>I would (personally) be fine with the \"must be a proc-macro\" version though</p>",
        "id": 195893753,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588276931
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125254\">kennytm</span> <a href=\"#narrow/stream/213817-t-lang/topic/Making.20new.20.60_.23.60.20prefixes.20not.20a.20breaking.20change/near/195893688\" title=\"#narrow/stream/213817-t-lang/topic/Making.20new.20.60_.23.60.20prefixes.20not.20a.20breaking.20change/near/195893688\">said</a>:</p>\n<blockquote>\n<p><code>\"Hello\"s</code> is already a single token.</p>\n</blockquote>\n<p>(yes but I think the intent was to enable a kind of easy playground for new language features, in this case literals that take the structure of <code>String</code> rather than <code>&amp;'static str</code>)</p>",
        "id": 195893797,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588276959
    },
    {
        "content": "<p>((at least that's my inference...))</p>",
        "id": 195893865,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588277009
    },
    {
        "content": "<p>Here's what I just posted to <a href=\"https://github.com/rust-lang/rust/issues/20760\" title=\"https://github.com/rust-lang/rust/issues/20760\">#20760</a>:</p>",
        "id": 195893911,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588277041
    },
    {
        "content": "<p>We'd also like to standardize a syntax for \"non-breaking syntax/keywords\", so that it'd be possible to introduce new keywords understood by the compiler in a namespace that nobody especially wants to type in their code regularly, but that people can experiment with surface syntax for in macros or proc macros. This syntax would be stabilized for a given feature, and continue working even after we introduce some new surface syntax (e.g. at an edition boundary). One such proposal would be <code>r#$token</code>, where <code>token</code> will always get interpreted as a keyword. Then, we could have e.g. <code>r#$raw_ref(...)</code> and <code>r#$raw_mut_ref(...)</code>, and decide what the surface syntax should look like later, deferring that either to an edition (with a new keyword) or a point where we find backward-compatible syntax.</p>",
        "id": 195893951,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588277045
    },
    {
        "content": "<p>Seems good. I'm definitely into the idea. But I agree that it's a good idea to have <a href=\"https://github.com/rust-lang/rust/issues/20760\" title=\"https://github.com/rust-lang/rust/issues/20760\">#20760</a> on our list of \"edition things to think about\"</p>",
        "id": 195894039,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588277104
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> so if I follow correctly, we would essentially make <code>#$</code> not allowed within identifiers?</p>",
        "id": 195894045,
        "sender_full_name": "simulacrum",
        "timestamp": 1588277107
    },
    {
        "content": "<p>BTW, just to spell out what I was saying about the \"special span\" idea --</p>\n<ul>\n<li>I think that you could say there is a way to programatically create these keywords (e.g., with a special span, or just a special API on token that is never used by the lexer or something).</li>\n<li>We could then publish a rust-lang crate on <a href=\"http://crates.io\" title=\"http://crates.io\">crates.io</a> like <code>experiments</code> and, for each such keyword, we create a macro in there, so that one can do <code>experiments::raw_ref(x)</code> or whatever</li>\n<li>We encourage playground to always include <code>experiments</code> in the list of crates</li>\n</ul>",
        "id": 195894211,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588277186
    },
    {
        "content": "<p>This honestly seems much nicer to me than some random set of tokens</p>",
        "id": 195894233,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588277211
    },
    {
        "content": "<p>I think the ideal is that we then tie these experiments into a running project group</p>",
        "id": 195894275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588277237
    },
    {
        "content": "<p>That is pursuing some design goals</p>",
        "id": 195894282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588277241
    },
    {
        "content": "<p>an interesting detail there is (in theory at least) we could make such a crate have a \"stability hole\" in it or whatever</p>",
        "id": 195894299,
        "sender_full_name": "simulacrum",
        "timestamp": 1588277253
    },
    {
        "content": "<p>So, this would be going the \"you can only generate this via macro\" route?</p>",
        "id": 195894313,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588277261
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/213817-t-lang/topic/Making.20new.20.60_.23.60.20prefixes.20not.20a.20breaking.20change/near/195894299\" title=\"#narrow/stream/213817-t-lang/topic/Making.20new.20.60_.23.60.20prefixes.20not.20a.20breaking.20change/near/195894299\">said</a>:</p>\n<blockquote>\n<p>an interesting detail there is (in theory at least) we could make such a crate have a \"stability hole\" in it or whatever</p>\n</blockquote>\n<p>what do you mean by stability hole?</p>",
        "id": 195894337,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588277272
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/Making.20new.20.60_.23.60.20prefixes.20not.20a.20breaking.20change/near/195894313\" title=\"#narrow/stream/213817-t-lang/topic/Making.20new.20.60_.23.60.20prefixes.20not.20a.20breaking.20change/near/195894313\">said</a>:</p>\n<blockquote>\n<p>So, this would be going the \"you can only generate this via macro\" route?</p>\n</blockquote>\n<p>right</p>",
        "id": 195894349,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588277279
    },
    {
        "content": "<p>so basically the programmatic way to use the syntax isn't actually stable, but the crate can use it</p>",
        "id": 195894399,
        "sender_full_name": "simulacrum",
        "timestamp": 1588277287
    },
    {
        "content": "<p>for writing compiler unit tests, I suspect I would prefer some token syntax nonetheless</p>",
        "id": 195894411,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588277290
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> What would be the advantage of having these be macro-generated-only, rather than having special lexer syntax?</p>",
        "id": 195894413,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588277291
    },
    {
        "content": "<p>(e.g. maybe we just put this crate in the sysroot)</p>",
        "id": 195894415,
        "sender_full_name": "simulacrum",
        "timestamp": 1588277295
    },
    {
        "content": "<p>but that wouldn't have to be stable</p>",
        "id": 195894419,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588277297
    },
    {
        "content": "<p>(I just mention my own desires because I don't want to get into a \"its good for me but not for thee\" situation, as pcwalton used to say...)</p>",
        "id": 195894461,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588277333
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/213817-t-lang/topic/Making.20new.20.60_.23.60.20prefixes.20not.20a.20breaking.20change/near/195894411\" title=\"#narrow/stream/213817-t-lang/topic/Making.20new.20.60_.23.60.20prefixes.20not.20a.20breaking.20change/near/195894411\">said</a>:</p>\n<blockquote>\n<p>for writing compiler unit tests, I suspect I would prefer some token syntax nonetheless</p>\n</blockquote>\n<p>that's an interesting point, presumably those unit tests could use <code>experiments::x</code> from sysroot or whatever?</p>",
        "id": 195894500,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588277352
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/213817-t-lang/topic/Making.20new.20.60_.23.60.20prefixes.20not.20a.20breaking.20change/near/195894415\" title=\"#narrow/stream/213817-t-lang/topic/Making.20new.20.60_.23.60.20prefixes.20not.20a.20breaking.20change/near/195894415\">said</a>:</p>\n<blockquote>\n<p>(e.g. maybe we just put this crate in the sysroot)</p>\n</blockquote>\n<p>If we're going to go the macro-only route, I would definitely want to see this crate in the sysroot. Perhaps in <code>meta</code>?</p>",
        "id": 195894510,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588277357
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> there is no real advantage apart from not having to define something like <code>r#$</code></p>",
        "id": 195894576,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588277382
    },
    {
        "content": "<p>one disadvantage to the sysroot is we can't issue breaking changes</p>",
        "id": 195894578,
        "sender_full_name": "simulacrum",
        "timestamp": 1588277383
    },
    {
        "content": "<p>what sort of breaking change would we issue?</p>",
        "id": 195894619,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588277397
    },
    {
        "content": "<p>well, e.g., say we \"finish\" experimentation and want to remove support</p>",
        "id": 195894680,
        "sender_full_name": "simulacrum",
        "timestamp": 1588277407
    },
    {
        "content": "<p>we never do that</p>",
        "id": 195894695,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588277412
    },
    {
        "content": "<p>that's the whole point :)</p>",
        "id": 195894708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588277414
    },
    {
        "content": "<p>the experiments are stable</p>",
        "id": 195894714,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588277417
    },
    {
        "content": "<p>they're just \"deprecated\"</p>",
        "id": 195894724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588277426
    },
    {
        "content": "<p>Yeah, the proposal here was that this is stable, and you just stop using it because it looks awful.</p>",
        "id": 195894729,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588277428
    },
    {
        "content": "<p>in favor of the new approach</p>",
        "id": 195894738,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588277431
    },
    {
        "content": "<p>or maybe not, who cares</p>",
        "id": 195894747,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588277436
    },
    {
        "content": "<p>well yes I meant that we experimented and found it wanting</p>",
        "id": 195894770,
        "sender_full_name": "simulacrum",
        "timestamp": 1588277439
    },
    {
        "content": "<p>like, we want to remove it as a feature entirely</p>",
        "id": 195894778,
        "sender_full_name": "simulacrum",
        "timestamp": 1588277445
    },
    {
        "content": "<p>I don't think we get that option</p>",
        "id": 195894791,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588277451
    },
    {
        "content": "<p>if we take this approach</p>",
        "id": 195894798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588277454
    },
    {
        "content": "<p>we might never make a nice syntax on top</p>",
        "id": 195894806,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588277458
    },
    {
        "content": "<p>but we never get to remove the core primitive</p>",
        "id": 195894813,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588277462
    },
    {
        "content": "<p>yeah, that makes sense</p>",
        "id": 195894826,
        "sender_full_name": "simulacrum",
        "timestamp": 1588277467
    },
    {
        "content": "<p>that said, we probably <em>do</em> want a way to have the core primitive on nightly only</p>",
        "id": 195894841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588277476
    },
    {
        "content": "<p>i.e., so we can tinker a bit with how the <em>core primitive</em> should work before we stabilize it</p>",
        "id": 195894853,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588277486
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> There's a straightforward way to do that.</p>",
        "id": 195894856,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588277487
    },
    {
        "content": "<p>which might also address your point, <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span>, since maybe we uncover in that time that the primitive is broken</p>",
        "id": 195894889,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588277508
    },
    {
        "content": "<p>We can decide when to stabilize the <code>r#$</code> version, and until it's stable it's like any nightly feature.</p>",
        "id": 195894896,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588277512
    },
    {
        "content": "<p>I see more of what you mean by the macro only thing now. as long as the playground can use the experiments crate that'd work.</p>",
        "id": 195894897,
        "sender_full_name": "Lokathor",
        "timestamp": 1588277513
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/Making.20new.20.60_.23.60.20prefixes.20not.20a.20breaking.20change/near/195894896\" title=\"#narrow/stream/213817-t-lang/topic/Making.20new.20.60_.23.60.20prefixes.20not.20a.20breaking.20change/near/195894896\">said</a>:</p>\n<blockquote>\n<p>We can decide when to stabilize the <code>r#$</code> version, and until it's stable it's like any nightly feature.</p>\n</blockquote>\n<p>yes</p>",
        "id": 195894907,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588277521
    },
    {
        "content": "<p>The advantage of this would be that we can <em>independently</em> make and stabilize two decisions: \"should we have this feature\" and \"what syntax should we use for this feature\".</p>",
        "id": 195894962,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588277532
    },
    {
        "content": "<p>Right now we have to tie the two together.</p>",
        "id": 195894975,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588277537
    },
    {
        "content": "<p>anyway <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> raised a good point about compiler unit tests, that's more convincing to me than playground</p>",
        "id": 195894989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588277545
    },
    {
        "content": "<p>I'd personally be on board with either a <code>meta</code> or <code>experiments</code> crate in sysroot or just tokens with <code>#$</code> in them (or whatever)</p>",
        "id": 195895016,
        "sender_full_name": "simulacrum",
        "timestamp": 1588277562
    },
    {
        "content": "<p>yes I don't care very much</p>",
        "id": 195895047,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588277577
    },
    {
        "content": "<p>we can also do something in between full on sysroot, e.g. you need to <code>rustup component add experiments</code> to get it</p>",
        "id": 195895072,
        "sender_full_name": "simulacrum",
        "timestamp": 1588277592
    },
    {
        "content": "<p>but I don't think there's much value in that</p>",
        "id": 195895096,
        "sender_full_name": "simulacrum",
        "timestamp": 1588277606
    },
    {
        "content": "<p>It may be a style issue or who you know or something, but almost all the experimental rust collaboration i see is via playground links</p>",
        "id": 195895097,
        "sender_full_name": "Lokathor",
        "timestamp": 1588277607
    },
    {
        "content": "<p>I think it depends on the scale</p>",
        "id": 195895119,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588277618
    },
    {
        "content": "<p>for <code>raw_ref</code>... yeah</p>",
        "id": 195895126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588277621
    },
    {
        "content": "<p>I can only think of one advantage to making this macro-only rather than special \"future keyword\" syntax:</p>",
        "id": 195895151,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588277634
    },
    {
        "content": "<p>but I could see us using this to e.g. experiment with generators or who knows at some point</p>",
        "id": 195895154,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588277635
    },
    {
        "content": "<p>or e.g. stuff like fehler</p>",
        "id": 195895225,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588277651
    },
    {
        "content": "<p>If it's macro-only, we can give it a fully descriptive name, like <code>ReturnError</code>, because proc macros are already quite verbose. If it's syntax-like, like <code>r#$foo</code>, it kinda wants to be shorter.</p>",
        "id": 195895343,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588277711
    },
    {
        "content": "<p>We <em>could</em> say <code>r#$return_error e;</code>, nothing stops us. Or we could say <code>r#$yeet e;</code>. :)</p>",
        "id": 195895450,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588277757
    },
    {
        "content": "<p>We could even say <code>r#$12345</code> where 12345 is the tracking issue. ;)</p>",
        "id": 195895533,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588277780
    },
    {
        "content": "<p>So for clarification, would be <code>experiments</code> proc-macro crate be specially blessed, or would all proc macros have a way to emit these special keywords and the <code>experiments</code> crate is just the easy way for outside users to access each special keyword one at a time?</p>",
        "id": 195895534,
        "sender_full_name": "Lokathor",
        "timestamp": 1588277780
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> The latter, if we go that route.</p>",
        "id": 195895567,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588277801
    },
    {
        "content": "<p>the only reason to have the experiments crate would be for playground</p>",
        "id": 195895645,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588277846
    },
    {
        "content": "<p>and tests etc</p>",
        "id": 195895651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588277850
    },
    {
        "content": "<p>i.e., not special, just a convenience</p>",
        "id": 195895667,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588277859
    },
    {
        "content": "<p>if we have the special keywords at all (vs programmatic access) I don't know that we'd want a \"special crate\"</p>",
        "id": 195895689,
        "sender_full_name": "simulacrum",
        "timestamp": 1588277878
    },
    {
        "content": "<p><code>r#$tracker_id</code> is a very good way to make it work and <em>strongly</em> encourage people to update their code as soon as the thing gets a real stable syntax, because it's even more ugly than the other proposals.</p>",
        "id": 195895742,
        "sender_full_name": "Lokathor",
        "timestamp": 1588277887
    },
    {
        "content": "<p>I do like the tracking issue number thing, though I'm sure it'll be the new thing on the \"obfuscated rust\" block :)</p>",
        "id": 195895785,
        "sender_full_name": "simulacrum",
        "timestamp": 1588277913
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> True. I'm still somewhat leaning towards <code>r#$descriptive_verbose_name</code>, though, for the sake of not making people carry around an index. :)</p>",
        "id": 195895817,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588277936
    },
    {
        "content": "<p>I'd rather people say \"wow that's long\" than \"wow that's obscure\".</p>",
        "id": 195895834,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588277950
    },
    {
        "content": "<p>That holds doubly true for things we stabilize, and thus things that will permanently work.</p>",
        "id": 195895890,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588277992
    },
    {
        "content": "<p>that's the policy that the <code>tinyvec</code> crate has to avoid name clashes with actual vec method names,  such as <code>ArrayVec::grab_spare_slice</code></p>",
        "id": 195895989,
        "sender_full_name": "Lokathor",
        "timestamp": 1588278032
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> Nice precedent.</p>",
        "id": 195896008,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588278047
    },
    {
        "content": "<p>One advantage that maybe hasn't been said out loud yet: it will probably be extremely easy for rustfix to apply the \"convert to stabilized syntax\" changes</p>",
        "id": 195896096,
        "sender_full_name": "Lokathor",
        "timestamp": 1588278104
    },
    {
        "content": "<p>Yeah. Even if the syntax isn't just a keyword.</p>",
        "id": 195896119,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588278118
    },
    {
        "content": "<p>It's easy to convert <code>r#$raw_ref(foo)</code> to an arbitrary raw reference syntax.</p>",
        "id": 195896182,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588278137
    },
    {
        "content": "<p>Likewise <code>r#$raw_mut_ref</code>, or <code>r#$asm()</code>.</p>",
        "id": 195896220,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588278157
    },
    {
        "content": "<p>what I'm imagining is that most folks wouldn't use the syntax directly anyway but rather some macro that wraps it, so rustfmt rewriting might not be super useful, but that's ok.</p>",
        "id": 195896450,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588278288
    },
    {
        "content": "<p>for e.g. packed struct fields I'm guessing using the syntax directly would be common</p>",
        "id": 195896475,
        "sender_full_name": "simulacrum",
        "timestamp": 1588278313
    },
    {
        "content": "<p>seems hard to do better than the r#$raw_reference (especially without postfix macros)</p>",
        "id": 195896492,
        "sender_full_name": "simulacrum",
        "timestamp": 1588278326
    },
    {
        "content": "<p>can a macro even return a place?</p>",
        "id": 195897289,
        "sender_full_name": "Lokathor",
        "timestamp": 1588278695
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">macro_rules</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$x</span>:<span class=\"nc\">ident</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cp\">$x</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 195897734,
        "sender_full_name": "kennytm",
        "timestamp": 1588278950
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/213817-t-lang/topic/Making.20new.20.60_.23.60.20prefixes.20not.20a.20breaking.20change/near/195894045\" title=\"#narrow/stream/213817-t-lang/topic/Making.20new.20.60_.23.60.20prefixes.20not.20a.20breaking.20change/near/195894045\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> so if I follow correctly, we would essentially make <code>#$</code> not allowed within identifiers?</p>\n</blockquote>\n<p>We couldn't do <code>raw#match</code> because that lexes as three things in macros today, and thus was a breaking change.  So what I meant is that we'd change that lexing rule to be one token (in an edition) and thus could define meaning for it later if we wanted.  And one could continue to call a macro that wanted it as three tokens by just adding spaces.</p>",
        "id": 195898061,
        "sender_full_name": "scottmcm",
        "timestamp": 1588279124
    },
    {
        "content": "<p>ah, okay, sure</p>",
        "id": 195898377,
        "sender_full_name": "simulacrum",
        "timestamp": 1588279293
    },
    {
        "content": "<p>So, if we want to move forward with <code>r#$descriptive_name</code> syntax, is anyone interested in writing that up and proposing it for review?</p>",
        "id": 195912936,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588287670
    },
    {
        "content": "<p>Suppose I could do that, i already have the repo cloned</p>",
        "id": 195913094,
        "sender_full_name": "Lokathor",
        "timestamp": 1588287780
    },
    {
        "content": "<p>Seems like a very simple proposal to write.</p>",
        "id": 195913110,
        "sender_full_name": "Lokathor",
        "timestamp": 1588287791
    },
    {
        "content": "<p>Thank you. Please feel free to note that this was discussed in a lang team meeting and subsequent Zulip thread.</p>",
        "id": 195913250,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588287888
    },
    {
        "content": "<p>The most important justification is that it lets us separately review and approve proposals for new functionality and proposals for syntax for that functionality.</p>",
        "id": 195913280,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588287913
    },
    {
        "content": "<p>And let people experiment with the latter.</p>",
        "id": 195913300,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588287927
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> do we want <code>r#$name</code> or <code>something#name</code>?  I guess it's the former if we need it _now_, but I would kinda rather the latter even though it'd only be usable in the next edition.</p>",
        "id": 195913514,
        "sender_full_name": "scottmcm",
        "timestamp": 1588288084
    },
    {
        "content": "<p>I'd like something that's usable in any Rust edition, going all the way back to 2015.</p>",
        "id": 195913559,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588288112
    },
    {
        "content": "<p>That doesn't prevent us from using <code>something#name</code> in new editions for <em>other</em> purposes, such as new kinds of literals.</p>",
        "id": 195913598,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588288154
    },
    {
        "content": "<p>But if we're developing something that's intended as \"raw syntaxless language constructs\", tying it to an edition seems counterproductive.</p>",
        "id": 195913635,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588288194
    },
    {
        "content": "<p>As an example, if we wanted some new syntax for literal <code>String</code> values or literal <code>Path</code> values, we could prototype it as <code>r#$string_literal(\"foo\")</code> or <code>r#$path_literal(\"foo\")</code> and later on introduce something like <code>s#\"foo\"#</code> or <code>s\"foo\"</code> or <code>p#\"foo\"#</code>.</p>",
        "id": 195913983,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588288438
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rfcs/pull/2919\" title=\"https://github.com/rust-lang/rfcs/pull/2919\">https://github.com/rust-lang/rfcs/pull/2919</a></p>",
        "id": 195919662,
        "sender_full_name": "Lokathor",
        "timestamp": 1588293247
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> Nice work!</p>",
        "id": 195920477,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588293988
    },
    {
        "content": "<p>In the last section, you might mention that such a crate may be provided via the sysroot. (And also, s/whitelist/safelist/ please.)</p>",
        "id": 195920495,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588294019
    },
    {
        "content": "<p>Another alternative:<br>\nWe could wait to implement and stabilize features until we've determined their final surface syntax. This would make it more difficult for people to experiment with surface syntax.</p>",
        "id": 195920591,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588294095
    },
    {
        "content": "<p>You might also add that this will allow usage of new features on old editions. Using the new syntax for those features may require moving to a new edition, but using the raw keyword syntax doesn't.</p>",
        "id": 195920799,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588294321
    },
    {
        "content": "<p>I'm not clear on what \"available via the sysroot means\". Does that mean it's like alloc and proc_macro where you never actually list it in your Cargo.toml file?</p>",
        "id": 195922961,
        "sender_full_name": "Lokathor",
        "timestamp": 1588296503
    },
    {
        "content": "<p>Right.</p>",
        "id": 195923890,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588297565
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/213817-t-lang/topic/Making.20new.20.60_.23.60.20prefixes.20not.20a.20breaking.20change/near/195919662\" title=\"#narrow/stream/213817-t-lang/topic/Making.20new.20.60_.23.60.20prefixes.20not.20a.20breaking.20change/near/195919662\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/rust-lang/rfcs/pull/2919\" title=\"https://github.com/rust-lang/rfcs/pull/2919\">https://github.com/rust-lang/rfcs/pull/2919</a></p>\n</blockquote>\n<p>woah, that was fast ... heh...</p>",
        "id": 196011014,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588367731
    }
]