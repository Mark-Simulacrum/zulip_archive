[
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"1977\">@T-lang</span> I think it would be a good idea to remove yield from the surface syntax (it's currently unstable), this implies removing the ability to write generators/coroutines. We should also make the Generator trait private. Since we're actively working on a new design for generators, this would give us a 'blank page' to start from. IMO the current (2033) is very specifically a design for implementing async/await, rather than working well for end users, and trying to incorporate it into the new design will lead to a sub-optimal result. Furthermore, trying to change it incrementally will be a high friction/inertia task. The obvious downside is that it makes it harder to experiment with syntax, etc. But presumably that would only require a very simple fork of the compiler since we'd want to keep all the internals in tact for the async/await implementation.</p>",
        "id": 261901413,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1637226110
    },
    {
        "content": "<p>Is this a ridiculous idea? If not I will propose a formal MCP thing, but I wanted to get some informal feedback first</p>",
        "id": 261901503,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1637226162
    },
    {
        "content": "<p>Hmmm.</p>",
        "id": 261929487,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637243620
    },
    {
        "content": "<p>It seems exceedingly likely that we will want to use the keyword \"yield\" for the operation of producing the next item from a generator.</p>",
        "id": 261929561,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637243649
    },
    {
        "content": "<p>I don't think we should un-reserve it.</p>",
        "id": 261929589,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637243663
    },
    {
        "content": "<p>I do absolutely agree that we should design generators without regard for the unstable prototype that was used to implement futures.</p>",
        "id": 261929619,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637243681
    },
    {
        "content": "<p>And ditto for any currently unstable surface syntax.</p>",
        "id": 261929649,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637243701
    },
    {
        "content": "<p>But I think we should keep the keyword <code>yield</code>.</p>",
        "id": 261929675,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637243713
    },
    {
        "content": "<p>I also think that while that might produce some anchoring on the keyword, we still have the option of choosing a surface syntax that doesn't involve that keyword, if something compelling arises.</p>",
        "id": 261929904,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637243812
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256841\">@Nick Cameron</span> Does that seem reasonable?</p>",
        "id": 261929929,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637243826
    },
    {
        "content": "<p>Also, if you're proposing to discard the existing unstable surface syntax for generators, I don't think that needs an MCP.</p>",
        "id": 261929970,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637243854
    },
    {
        "content": "<p>\"It seems exceedingly likely that we will want to use the keyword \"yield\" for the operation of producing the next item from a generator.\" - indeed, though possible with different semantics around resume args (or maybe something else as yet unforeseen)</p>",
        "id": 261930475,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1637244053
    },
    {
        "content": "<p>Oh, absolutely: I think the exact usage of the keyword may be different.</p>",
        "id": 261930542,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637244079
    },
    {
        "content": "<p>We may or may not end up with resume arguments, for example.</p>",
        "id": 261930561,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637244087
    },
    {
        "content": "<p>exactly</p>",
        "id": 261930581,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1637244096
    },
    {
        "content": "<p>To clarify, I just meant that I'd be shocked if the final syntax doesn't use the yield keyword, so I don't think we need to unreserve it.</p>",
        "id": 261930646,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637244124
    },
    {
        "content": "<p>In fact, its because we expect to use yield that I'm a bit uncomfortable leaving the current version around</p>",
        "id": 261930652,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1637244129
    },
    {
        "content": "<p>Would you be up for sending in a PR eliminating the unstable surface syntax?</p>",
        "id": 261930689,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637244152
    },
    {
        "content": "<p>I'd be happy to propose FCP on that PR.</p>",
        "id": 261930727,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637244170
    },
    {
        "content": "<p>Sure, though I'd rather check nobody will strongly object first.</p>",
        "id": 261930790,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1637244214
    },
    {
        "content": "<p>Fair enough.</p>",
        "id": 261930804,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637244223
    },
    {
        "content": "<p>I probably don't have time until next week in any case</p>",
        "id": 261930809,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1637244227
    },
    {
        "content": "<p>Hm, what is the benefit of removing it? I would guess that a good bit of the parsing etc may be somewhat similar in the future, so it seems like churn to drop it and then re-add it?</p>",
        "id": 261930917,
        "sender_full_name": "simulacrum",
        "timestamp": 1637244278
    },
    {
        "content": "<p>Then sure, go ahead and submit a minimal MCP; I don't think it needs any more detail then you put in this thread.</p>",
        "id": 261930922,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637244282
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I think it makes sense to eliminate a large source of anchoring. People proposing designs for generators shouldn't have to present them as an incremental evolution of the existing surface syntax.</p>",
        "id": 261930966,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637244313
    },
    {
        "content": "<p>Sure? But that seems ... independent of whether the compiler logic is there</p>",
        "id": 261930998,
        "sender_full_name": "simulacrum",
        "timestamp": 1637244330
    },
    {
        "content": "<p>In theory yes. In practice, though, will it be?</p>",
        "id": 261931034,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637244353
    },
    {
        "content": "<p>We can mark the feature as unstable etc, that seems fine</p>",
        "id": 261931036,
        "sender_full_name": "simulacrum",
        "timestamp": 1637244355
    },
    {
        "content": "<p>(incomplete, that is, not unstable)</p>",
        "id": 261931097,
        "sender_full_name": "simulacrum",
        "timestamp": 1637244370
    },
    {
        "content": "<p>It feels quite easy to tell anyone working on such a proposal \"don't worry about the current syntax\" -- put that in the tracking issue, amend the RFC discussing it, etc.</p>",
        "id": 261931180,
        "sender_full_name": "simulacrum",
        "timestamp": 1637244434
    },
    {
        "content": "<p>but adjusting the compiler and requiring e.g. proc macros experimenting with <em>different</em> syntax to say \"use this fork of rustc\" or \"this pinned nightly\" seems ... weird</p>",
        "id": 261931245,
        "sender_full_name": "simulacrum",
        "timestamp": 1637244467
    },
    {
        "content": "<p>Sometimes I wonder if it would make sense on nightly to let a proc macro directly generate MIR rather than surface syntax. That's a can of worms though.</p>",
        "id": 261931368,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637244517
    },
    {
        "content": "<p>couldn't the interpretation of the syntax depend on the enabled feature flags in that context?</p>",
        "id": 261932679,
        "sender_full_name": "The 8472",
        "timestamp": 1637245136
    },
    {
        "content": "<p>assuming there's any value in having a new implementation temporarily overlap with the old one</p>",
        "id": 261932782,
        "sender_full_name": "The 8472",
        "timestamp": 1637245200
    },
    {
        "content": "<p>I understand the rationale (would we want <code>expr.yield</code> instead of <code>yield expr</code>, and other questions), but it feels like removing it from the parser will be churn for churn sake for  two reasons: existing nightly-only explorations around these (not just mine but others') rely on that syntax, but more importantly because <em>we will have to parse this regardless of the final syntax</em> in order to provide appropriate suggestions, just like we do for <code>await</code></p>",
        "id": 261958720,
        "sender_full_name": "Esteban KÃ¼ber",
        "timestamp": 1637255601
    },
    {
        "content": "<p>I agree that this should have been <code>yield!()</code> instead, and we could progressively move towards that, but we should make <code>yield</code> either a parse synonym or an error telling you to use <code>yield!()</code> at least for now</p>",
        "id": 261958902,
        "sender_full_name": "Esteban KÃ¼ber",
        "timestamp": 1637255669
    },
    {
        "content": "<p>We've had cases in the past of removal of unstable syntax breaking havoc, the one I recall was <code>&lt;-</code>, but there were others. I know some things have been put in place to avoid such a problem where stable crates stop working after removing nightly syntax, but I have little confidence in them (mainly due to ignorance, not because I <em>know</em> they are wrong or insufficient)</p>",
        "id": 261959132,
        "sender_full_name": "Esteban KÃ¼ber",
        "timestamp": 1637255767
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/213817-t-lang/topic/Remove.20yield.20from.20surface.20syntax/near/261932679\">said</a>:</p>\n<blockquote>\n<p>couldn't the interpretation of the syntax depend on the enabled feature flags in that context?</p>\n</blockquote>\n<p>I've been doing exactly this while quietly prototyping a version of yield closures over the last year or so. The 2033 generators feature flag and yield_closures feature flag can be mutually incompatible without too much headache.</p>",
        "id": 261965803,
        "sender_full_name": "Sam Sartor",
        "timestamp": 1637258491
    },
    {
        "content": "<p>Really the syntax logic for 2033-style generators is not very significant in rustc. The logic for the generator type in rustc_middle and rustc_typeck is much more annoying to hack around TBH. If there is anything that I would advocate cleaning up, it is that.</p>",
        "id": 261966295,
        "sender_full_name": "Sam Sartor",
        "timestamp": 1637258690
    },
    {
        "content": "<p>Of course, there is really no point in doing all the work to clean it up without knowing what sort of coroutine semantics should actually underlay futures. So the design will probably have to happen first and the cleanup happen after.</p>",
        "id": 261966751,
        "sender_full_name": "Sam Sartor",
        "timestamp": 1637258903
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/Remove.20yield.20from.20surface.20syntax/near/261931368\">said</a>:</p>\n<blockquote>\n<p>Sometimes I wonder if it would make sense on nightly to let a proc macro directly generate MIR rather than surface syntax. That's a can of worms though.</p>\n</blockquote>\n<p>I do really like this idea overall. But like I said above, the interaction with layout, type checking, the trait system, etc is really the difficult part of all this IMO. Not sure how a proc macro could define the weird sort of types like <del>Generator</del> Coroutine that interact with MIR passes and so on.</p>",
        "id": 261967273,
        "sender_full_name": "Sam Sartor",
        "timestamp": 1637259174
    },
    {
        "content": "<p>That's what Josh is proposing: extending the proc-macro machinery to be able to integrate further into rustc, like plugins used to (still can, technically? has that finally atrophied to the point of unusability?), not just token expansion.</p>",
        "id": 261970767,
        "sender_full_name": "Esteban KÃ¼ber",
        "timestamp": 1637260843
    },
    {
        "content": "<p>Plugins have long been limited to just lint passes.</p>",
        "id": 261990732,
        "sender_full_name": "bjorn3",
        "timestamp": 1637269609
    },
    {
        "content": "<p>Proc-macros can't directly create rustc data structures. They need a stable abi (when compiled by different rustc versions from the same libproc_macro source) to allow rustc itself to use proc macros.</p>",
        "id": 261990925,
        "sender_full_name": "bjorn3",
        "timestamp": 1637269702
    },
    {
        "content": "<p>Plugins are currently only used by servo and once/if servo migrates away from it, plugins will likely be removed completely.</p>",
        "id": 261991029,
        "sender_full_name": "bjorn3",
        "timestamp": 1637269754
    },
    {
        "content": "<p>is clippy a plugin in this regard?</p>",
        "id": 261992226,
        "sender_full_name": "cuviper",
        "timestamp": 1637270329
    },
    {
        "content": "<p>No, a custom driver.</p>",
        "id": 262038366,
        "sender_full_name": "bjorn3",
        "timestamp": 1637309903
    },
    {
        "content": "<p>Yeah, the downside of letting proc macros output MIR or whatever is it means there is stabilisation pressure. It was a nightmare when plugins were still a thing</p>",
        "id": 262042721,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1637312907
    },
    {
        "content": "<p>Even the old style proc macros where they created AST nodes rather than tokens was really bad</p>",
        "id": 262042753,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1637312930
    },
    {
        "content": "<p>It sounds like keeping yield around is desirable, so lets leave it be</p>",
        "id": 262043050,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1637313178
    },
    {
        "content": "<p>it still might be worthwhile to introduce <code>yield!()</code> with identical behavior to <code>yield</code>, to make it easier to transition when they keyword gets reclaimed</p>",
        "id": 262197784,
        "sender_full_name": "bstrie",
        "timestamp": 1637433227
    },
    {
        "content": "<p>sort of like how <code>llvm_asm!</code> is still around even though it's both unstable and deprecated</p>",
        "id": 262197950,
        "sender_full_name": "bstrie",
        "timestamp": 1637433317
    },
    {
        "content": "<p>I hope nobody is actually using yield in anything serious, itâs unstable so we can totally just change the semantics as long as we donât break await</p>",
        "id": 262205924,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1637444123
    }
]