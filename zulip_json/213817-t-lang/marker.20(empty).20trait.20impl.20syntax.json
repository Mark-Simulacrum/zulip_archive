[
    {
        "content": "<p>My fingers <em>keep</em> wanting to implement marker traits like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Thingy</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 261077930,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1636591502
    },
    {
        "content": "<p>I'm wondering if it might be worth considering support for that syntax, rather than requiring empty braces.</p>",
        "id": 261077982,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1636591543
    },
    {
        "content": "<p>(This idea brought to you by <a href=\"https://github.com/rust-lang/git2-rs/pull/763\">https://github.com/rust-lang/git2-rs/pull/763</a> .)</p>",
        "id": 261081319,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1636594110
    },
    {
        "content": "<p>Yes please. I've done this countless times and always wanted it to work.</p>",
        "id": 261082507,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1636595081
    },
    {
        "content": "<p>It feels like an odd special case for <em>marker</em> traits. Wouldn't you want it, if at all, for all traits with no methods (which are a superset of <a href=\"https://doc.rust-lang.org/nightly/unstable-book/language-features/marker-trait-attr.html\"><code>#[marker]</code></a> traits)?</p>\n<p>But I'm not convinced of the value -- we don't allow almost any <code>{}</code> -&gt; <code>;</code> -- only on structs, really, right?</p>",
        "id": 261082798,
        "sender_full_name": "simulacrum",
        "timestamp": 1636595344
    },
    {
        "content": "<p>also on structs it has an actual effect, it is not interchangeable</p>",
        "id": 261082822,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636595383
    },
    {
        "content": "<p>also trait methods, again not interchangeable, and item-like macros (here it is interchangeable but parens or braces are required)</p>",
        "id": 261083011,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636595531
    },
    {
        "content": "<p>so while I wouldn't mind seeing this in the language, I think <span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> is right that there isn't any precedent for this</p>",
        "id": 261083166,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1636595712
    },
    {
        "content": "<p><code>unsafe trait Send; unsafe impl Send for Thingy;</code> to be consistent?</p>",
        "id": 261083494,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1636596012
    },
    {
        "content": "<p>I'm not sure that makes things more consistent, it only moves the inconsistency to people using <code>unsafe impl Send for Thingy {}</code></p>",
        "id": 261083745,
        "sender_full_name": "Jake",
        "timestamp": 1636596234
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/213817-t-lang/topic/marker.20.28empty.29.20trait.20impl.20syntax/near/261082798\">said</a>:</p>\n<blockquote>\n<p>It feels like an odd special case for <em>marker</em> traits. Wouldn't you want it, if at all, for all traits with no methods (which are a superset of <a href=\"https://doc.rust-lang.org/nightly/unstable-book/language-features/marker-trait-attr.html\"><code>#[marker]</code></a> traits)?</p>\n</blockquote>\n<p>To be clear, I think this should work for any trait, and it's just only useful for traits where you don't have to implement any methods.</p>",
        "id": 261085074,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1636597342
    },
    {
        "content": "<p>If we allow <code>;</code> instead of <code>{}</code> for empty trait impl, then for consistency one could claim that we should also allow empty functions to be written like <code>fn foo();</code> (which we definitely don't want)</p>",
        "id": 261092793,
        "sender_full_name": "Gary Guo",
        "timestamp": 1636605724
    },
    {
        "content": "<p>Yeah, I worry that there is a subtle distinction between {} and ; and that conflating the two in some cases would lead to more confusion</p>",
        "id": 261102429,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1636616550
    },
    {
        "content": "<p>My fingers <em>also</em> want to type that, but I'm not convinced that means we should allow it.  Personally I file that in the same bucket as \"oops, I wrote <code>struct Foo { x: i32 };</code> again\" -- something for which there should be (and is) a nice structured suggestion, but not a grammar change.  (And maybe r-a should just auto-convert a typed <code>;</code> to a <code>{}</code> there, since it's clear there that you're dealing with an <code>impl</code>.)</p>",
        "id": 261102630,
        "sender_full_name": "scottmcm",
        "timestamp": 1636616782
    },
    {
        "content": "<p>With a time machine I'd definitely like \"marker traits and auto traits are always with <code>;</code> instead of braces\", but I'm not convinced an migration would be worth it here.  (And I'm not a fan of allowing both when it's not substantially better.)</p>",
        "id": 261102758,
        "sender_full_name": "scottmcm",
        "timestamp": 1636616948
    },
    {
        "content": "<p>The win might be smaller than you think in many cases because rustfmt insists on breaking where bounds onto new lines anyway.</p>",
        "id": 261107670,
        "sender_full_name": "The 8472",
        "timestamp": 1636621017
    }
]