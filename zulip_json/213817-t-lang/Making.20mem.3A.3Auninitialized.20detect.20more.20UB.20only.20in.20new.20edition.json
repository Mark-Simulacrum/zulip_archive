[
    {
        "content": "<p>I have something I'd like to hear t-lang opinion on before someone starts to actually implement this. :)<br>\nFor quite a while now, we make mem::uninitialized (and mem::zeroed) panic at runtime when they are used on types like <code>&amp;T</code> (see <a href=\"https://github.com/rust-lang/rust/issues/66151\">#66151</a>). However, we currently do <em>not</em> panic when they are used on <em>arrays</em> of such types, because crater always came back with too many regressions when we tried this (most recently in <a href=\"https://github.com/rust-lang/rust/issues/87041\">#87041</a>). The last crater run had around 80% of its regressions caused by crates that use old versions of hyper or ancient versions of crossbeam. I am not sure if those crates will ever go sufficiently out of use that we can just break them.</p>\n<p>So <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> made the proposal of also taking into account the edition of the crate that calls the intrinsic, and only panicking if it is a 2021 (or higher) edition crate. What do y'all think of that? This would help ensure that at least new code doesn't use these functions the wrong way.</p>",
        "id": 276799993,
        "sender_full_name": "RalfJ",
        "timestamp": 1648404249
    },
    {
        "content": "<p>Caveat: the intrinsic is called fron libcore functional which would need to be inclined for this to work</p>",
        "id": 276800098,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1648404400
    },
    {
        "content": "<p>If <a href=\"https://github.com/rust-lang/rust/pull/86699\">https://github.com/rust-lang/rust/pull/86699</a> were to be merged libcore could directly re-export the intrinsic without using a wrapper.</p>",
        "id": 276800300,
        "sender_full_name": "bjorn3",
        "timestamp": 1648404686
    },
    {
        "content": "<p>If we're using an edition boundary can't we just remove it completely (for that edition)? Or are there cases where mem::uninitialized is still better than MaybeUninit?</p>",
        "id": 276800922,
        "sender_full_name": "The 8472",
        "timestamp": 1648405568
    },
    {
        "content": "<p>I mean, the behavior of <code>mem::uninitialized()</code> can - afaik - be completely recovered via <code>MaybeUninit::uninit().assume_init()</code>. That looks a lot scarier, which is why I prefer it even in cases when it's correct</p>",
        "id": 276803610,
        "sender_full_name": "Jak{e,ob} Degen",
        "timestamp": 1648409294
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/213817-t-lang/topic/Making.20mem.3A.3Auninitialized.20detect.20more.20UB.20only.20in.20new.20edition/near/276800922\">said</a>:</p>\n<blockquote>\n<p>If we're using an edition boundary can't we just remove it completely (for that edition)? Or are there cases where mem::uninitialized is still better than MaybeUninit?</p>\n</blockquote>\n<p><code>mem::uninitialized</code> indeed can hopefully be removed entirely in some future edition, but it seems too late to do that for 2021. (and we don't have infrastructure for things like this currently.)</p>",
        "id": 276804658,
        "sender_full_name": "RalfJ",
        "timestamp": 1648410898
    },
    {
        "content": "<p><code>mem::zeroed</code> in the other hand still has some legitimate uses so we might still want to work on the panics for that</p>",
        "id": 276804665,
        "sender_full_name": "RalfJ",
        "timestamp": 1648410916
    },
    {
        "content": "<p>I think it's quite reasonable to remove it from 2024.</p>",
        "id": 276909362,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648489967
    },
    {
        "content": "<p>+1 to doing <em>something</em> in Rust 2024</p>",
        "id": 276910883,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648490765
    },
    {
        "content": "<p>and I think something aggressive :)</p>",
        "id": 276910894,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648490770
    },
    {
        "content": "<p>If we never remove deprecated stuff in a future edition it's basically not even deprecated. Out with the <code>uninitialized</code></p>",
        "id": 276913203,
        "sender_full_name": "Lokathor",
        "timestamp": 1648491943
    },
    {
        "content": "<p>maybe a default-deny <code>edition_deprecated</code> lint?</p>",
        "id": 276913929,
        "sender_full_name": "cuviper",
        "timestamp": 1648492303
    },
    {
        "content": "<p>I was thinking something along the lines of a <code>#[rustc_removed_in_edition]</code> that is very much <em>not</em> a lint.</p>",
        "id": 276914224,
        "sender_full_name": "Connor Horman",
        "timestamp": 1648492445
    },
    {
        "content": "<p>IE. the thing just doesn't exist to edition 2024 code.</p>",
        "id": 276914261,
        "sender_full_name": "Connor Horman",
        "timestamp": 1648492473
    },
    {
        "content": "<p>yeah that sounds good</p>",
        "id": 276950703,
        "sender_full_name": "RalfJ",
        "timestamp": 1648519487
    },
    {
        "content": "<p>I was meaning to file a T-compiler MCP for such an attribute. If I remember I'll do it in the morning, though I likely won't be able to work on implementing it.</p>",
        "id": 276952292,
        "sender_full_name": "Connor Horman",
        "timestamp": 1648521862
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"257758\">Connor Horman</span> <a href=\"#narrow/stream/213817-t-lang/topic/Making.20mem.3A.3Auninitialized.20detect.20more.20UB.20only.20in.20new.20edition/near/276914224\">said</a>:</p>\n<blockquote>\n<p>I was thinking something along the lines of a <code>#[rustc_removed_in_edition]</code> that is very much <em>not</em> a lint.</p>\n</blockquote>\n<p>I think a better option would be to make a lint but leverage the \"edition-dependent\" options so that it is <em>forbidden</em> in Rust 2024 but deny-by-default earlier.</p>",
        "id": 276974073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648543292
    },
    {
        "content": "<p>that would still not impact code using outdated dependencies</p>",
        "id": 276974082,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648543301
    },
    {
        "content": "<p>I forget if we have done that in the past, I think maybe :)</p>",
        "id": 276974098,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648543313
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> would remember-- I believe they took point on making some previously linted things into hard errors for Rust 2021?</p>",
        "id": 276974166,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648543332
    },
    {
        "content": "<p>Yea, we've made things that are lints in previous editions hard errors in newer editions. See <a href=\"https://github.com/rust-lang/rust/pull/83213\">here</a></p>",
        "id": 276975660,
        "sender_full_name": "rylev",
        "timestamp": 1648544242
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/Making.20mem.3A.3Auninitialized.20detect.20more.20UB.20only.20in.20new.20edition/near/276974073\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"257758\">Connor Horman</span> <a href=\"#narrow/stream/213817-t-lang/topic/Making.20mem.3A.3Auninitialized.20detect.20more.20UB.20only.20in.20new.20edition/near/276914224\">said</a>:</p>\n<blockquote>\n<p>I was thinking something along the lines of a <code>#[rustc_removed_in_edition]</code> that is very much <em>not</em> a lint.</p>\n</blockquote>\n<p>I think a better option would be to make a lint but leverage the \"edition-dependent\" options so that it is <em>forbidden</em> in Rust 2024 but deny-by-default earlier.</p>\n</blockquote>\n<p>Forbidden as in forbid-by-default? Or forbidden as in actual hard error.</p>",
        "id": 276984095,
        "sender_full_name": "Connor Horman",
        "timestamp": 1648549301
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"257758\">Connor Horman</span> <a href=\"#narrow/stream/213817-t-lang/topic/Making.20mem.3A.3Auninitialized.20detect.20more.20UB.20only.20in.20new.20edition/near/276984095\">said</a>:</p>\n<blockquote>\n<p>Forbidden as in forbid-by-default? Or forbidden as in actual hard error.</p>\n</blockquote>\n<p><code>#![forbid(lint)]</code>, unlike <code>#![deny(lint)]</code>, doesn't allow you to subsequently use <code>#![allow(lint)]</code>.</p>",
        "id": 277007571,
        "sender_full_name": "Jules Bertholet",
        "timestamp": 1648561975
    },
    {
        "content": "<p>Yes, but forbid lints are affected by <code>--cap-lints</code>.</p>",
        "id": 277008844,
        "sender_full_name": "Connor Horman",
        "timestamp": 1648562504
    },
    {
        "content": "<p>also for things I looked into that became hard errors, the future-warning lint and the hard error are actually completely independent implementations (e.g. for requiring <code>dyn</code>)</p>",
        "id": 277026257,
        "sender_full_name": "RalfJ",
        "timestamp": 1648569273
    },
    {
        "content": "<p>just so y'all know, I literally proposed and implemented a denied-in-edition lint here: <a href=\"https://github.com/rust-lang/rfcs/pull/3088\">https://github.com/rust-lang/rfcs/pull/3088</a> :P</p>",
        "id": 277040015,
        "sender_full_name": "bstrie",
        "timestamp": 1648575126
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"257758\">Connor Horman</span> <a href=\"#narrow/stream/213817-t-lang/topic/Making.20mem.3A.3Auninitialized.20detect.20more.20UB.20only.20in.20new.20edition/near/277008844\">said</a>:</p>\n<blockquote>\n<p>Yes, but forbid lints are affected by <code>--cap-lints</code>.</p>\n</blockquote>\n<p>I forgot about that :) I meant a hard error. No strong opinion, I suppose, about whether it's always a lint or what.</p>",
        "id": 277114048,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648631039
    },
    {
        "content": "<p>But I do think it'd be ok to make it deny-by-default in older editions</p>",
        "id": 277114104,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648631049
    }
]