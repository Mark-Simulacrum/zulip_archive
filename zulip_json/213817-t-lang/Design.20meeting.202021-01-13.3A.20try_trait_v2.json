[
    {
        "content": "<p>RFC: <a href=\"https://github.com/rust-lang/rfcs/pull/3058\">https://github.com/rust-lang/rfcs/pull/3058</a></p>\n<p>If you're short on time, these are the two most illustrative parts of the reference section:</p>\n<ul>\n<li>The actual <code>?</code> desugaring: <a href=\"https://github.com/scottmcm/rfcs/blob/do-or-do-not/text/0000-try-trait-v2.md#desugaring-\">https://github.com/scottmcm/rfcs/blob/do-or-do-not/text/0000-try-trait-v2.md#desugaring-</a></li>\n<li>The use in <code>Iterator::try_find</code>, showing the HKT-like behaviour (turning a <code>Foo&lt;bool&gt;</code> into a <code>Foo&lt;Option&lt;Item&gt;&gt;</code>): <a href=\"https://github.com/scottmcm/rfcs/blob/do-or-do-not/text/0000-try-trait-v2.md#use-in-iterator\">https://github.com/scottmcm/rfcs/blob/do-or-do-not/text/0000-try-trait-v2.md#use-in-iterator</a></li>\n</ul>",
        "id": 222477788,
        "sender_full_name": "scottmcm",
        "timestamp": 1610477778
    },
    {
        "content": "<p>For anyone interested, this is starting shortly.</p>",
        "id": 222620493,
        "sender_full_name": "scottmcm",
        "timestamp": 1610560786
    },
    {
        "content": "<p>(did I get the wrong zoom link, or are we still waiting for host?)</p>",
        "id": 222620894,
        "sender_full_name": "simulacrum",
        "timestamp": 1610560926
    },
    {
        "content": "<p>I am waiting for host</p>",
        "id": 222620922,
        "sender_full_name": "pnkfelix",
        "timestamp": 1610560939
    },
    {
        "content": "<p>I'm still waiting for host</p>",
        "id": 222620926,
        "sender_full_name": "scottmcm",
        "timestamp": 1610560941
    },
    {
        "content": "<p>Ping <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span>?</p>",
        "id": 222620948,
        "sender_full_name": "scottmcm",
        "timestamp": 1610560953
    },
    {
        "content": "<p>or perhaps <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 222621010,
        "sender_full_name": "simulacrum",
        "timestamp": 1610560971
    },
    {
        "content": "<p>hmm</p>",
        "id": 222621023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1610560977
    },
    {
        "content": "<p>I just joined but I don't see anybody :)</p>",
        "id": 222621044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1610560986
    },
    {
        "content": "<p>Am <em>I</em> in the wrong zoom link? :)</p>",
        "id": 222621107,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1610561009
    },
    {
        "content": "<p>Likewise.</p>",
        "id": 222621108,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610561011
    },
    {
        "content": "<p>calendar invite has ID 947 2813 0050</p>",
        "id": 222621110,
        "sender_full_name": "pnkfelix",
        "timestamp": 1610561011
    },
    {
        "content": "<p>^ That's the one I'm in as well.</p>",
        "id": 222621138,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610561022
    },
    {
        "content": "<p>hm rejoining may have helped</p>",
        "id": 222621228,
        "sender_full_name": "simulacrum",
        "timestamp": 1610561045
    },
    {
        "content": "<p>I think I was in the wrong room</p>",
        "id": 222621259,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1610561062
    },
    {
        "content": "<p><a href=\"https://hackmd.io/AcQI-wG0Q1GVSHe6QaLjrA\">hackmd for notes</a></p>",
        "id": 222621317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1610561083
    },
    {
        "content": "<p>Following up from this: it seemed like several people were saying they didn't see the value in <code>BreakHolder</code>, but what would the alternative look like?</p>",
        "id": 222629302,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610564642
    },
    {
        "content": "<p>How would <code>Bubble</code> look without it?</p>",
        "id": 222629368,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610564663
    },
    {
        "content": "<p>I think you just delete it and everything else stays the same.</p>",
        "id": 222629507,
        "sender_full_name": "scottmcm",
        "timestamp": 1610564713
    },
    {
        "content": "<p>My understanding from what was said is that we could drop the bound on bubble, and users wanting to make use of breakholder (e.g., try_find) could add it in themselves</p>",
        "id": 222629525,
        "sender_full_name": "simulacrum",
        "timestamp": 1610564722
    },
    {
        "content": "<p>i.e., we don't necessarily need to keep it as part of the rfc, because we can backwards compatibly add it later, right? (not as a bound but for the known uses at least)</p>",
        "id": 222629597,
        "sender_full_name": "simulacrum",
        "timestamp": 1610564749
    },
    {
        "content": "<p>So, we'd still need <code>type Continue</code> and <code>type Holder</code> (whatever it ends up being called), and we'd just drop the bound?</p>",
        "id": 222629694,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610564779
    },
    {
        "content": "<p>that's my understanding, yes</p>",
        "id": 222629881,
        "sender_full_name": "simulacrum",
        "timestamp": 1610564866
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> Also, I think one of the first things that confused me in the RFC's guide-level explanation was that the very first bit of example code used <code>type Holder = &lt;Result&lt;T, U&gt; as Bubble&gt;::Holder;</code> , rather than defining its own <code>Holder</code>. It felt like a massive forward-reference to things that weren't explained yet.</p>",
        "id": 222629909,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610564879
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> I don't think the \"let's define it incrementally and reuse bits from <code>Result</code>\" approach is useful didactically; I think it's actively confusing.</p>",
        "id": 222630034,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610564921
    },
    {
        "content": "<p>(Plus, it contributes to the \"why isn't this just Result\" feeling.)</p>",
        "id": 222630132,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610564969
    },
    {
        "content": "<p>I'd have gotten a more intuitive explanation of Holder early on if it were <code>MyResult&lt;!, U&gt;</code>. \"Oh, I see, it's <code>MyResult</code> with a hole where <code>Continue</code> was.\"</p>",
        "id": 222630243,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610565012
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> Thinking about it, if we can wait to define and stabilize <code>BreakHolder</code> (or whatever we call it) until later, and still successfully define an extensible <code>?</code>, that seems worth having to have more complex bounds that don't automatically imply <code>BreakHolder</code>.</p>",
        "id": 222630949,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610565289
    },
    {
        "content": "<p>We could always make an alias for \"<code>Bubble</code> where <code>Holder</code> is a <code>BreakHolder</code>\", if need be.</p>",
        "id": 222630981,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610565310
    },
    {
        "content": "<p>Thinking about that some more, I don't know that such an alias would even be needed.</p>",
        "id": 222631687,
        "sender_full_name": "scottmcm",
        "timestamp": 1610565649
    },
    {
        "content": "<p>Since the bound on Holder is for the same continue type, but that's the case where you don't need to mention <code>BreakHolder</code> at all anyway.</p>",
        "id": 222631785,
        "sender_full_name": "scottmcm",
        "timestamp": 1610565683
    },
    {
        "content": "<p><code>zip_demo</code> needs <code>H: BreakHolder&lt;(T, U)&gt;</code> and <code>try_find</code> needs <code>R::Holder: ops::BreakHolder&lt;Option&lt;Self::Item&gt;&gt;</code> -- neither of them actually care about the bound that <code>Bubble</code> imposes on <code>Holder</code>.</p>",
        "id": 222632231,
        "sender_full_name": "scottmcm",
        "timestamp": 1610565866
    },
    {
        "content": "<p>(Technically <code>&lt;Self::Holder as BreakHolder&lt;Self::Continue&gt;&gt;::Output</code> <em>could</em> be a different type from <code>Self</code>, but nobody would actually use that; they'd just use <code>Self</code>.)</p>",
        "id": 222632467,
        "sender_full_name": "scottmcm",
        "timestamp": 1610565978
    },
    {
        "content": "<p>I can actually imagine a scenario where the output type is not self.</p>",
        "id": 222632764,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610566133
    },
    {
        "content": "<p>Imagine writing a function that accepts a closure, where the closure is more constrained than the possible values of the output.</p>",
        "id": 222632834,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610566157
    },
    {
        "content": "<p>The closure can only return an A or B or C, but the output could also have D or E.</p>",
        "id": 222632864,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610566171
    },
    {
        "content": "<p>So the output could be the more general type that you want, but the closure doesn't get to return those cases.</p>",
        "id": 222632901,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610566190
    },
    {
        "content": "<p>The RFC actually includes such a case -- because the <code>Poll</code> impls reuse <code>Result</code>'s holder, going through <code>::Output</code> will give a result, not a <code>Poll</code>.</p>",
        "id": 222632963,
        "sender_full_name": "scottmcm",
        "timestamp": 1610566205
    },
    {
        "content": "<p>(That's another reason why reusing Result's holder in the first <code>MyResult</code> example seems confusing.)</p>",
        "id": 222633024,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610566240
    },
    {
        "content": "<p>I think the conversation about the bound on Holder solves the original reason for that reuse, too -- if I don't need a <code>BreakHolder</code> implementation to get the first example to compile, then there's basically no reason to reuse Result's holder instead of just talking about the residual there</p>",
        "id": 222633266,
        "sender_full_name": "scottmcm",
        "timestamp": 1610566352
    },
    {
        "content": "<p>Are there any downsides to removing the <code>BreakHolder</code> bound from <code>Bubble</code>, other than more complex bounds on functions that want to be able to plug in a different type to the same type container?</p>",
        "id": 222633342,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610566389
    },
    {
        "content": "<p>This might just all be fallout from one of the intermediary designs I tried that had <code>Holder: BreakHolder&lt;Output = Self&gt;</code> (as mentioned in <a href=\"https://github.com/scottmcm/rfcs/blob/do-or-do-not/text/0000-try-trait-v2.md#bounds-on-bubbleholder\">https://github.com/scottmcm/rfcs/blob/do-or-do-not/text/0000-try-trait-v2.md#bounds-on-bubbleholder</a>)</p>",
        "id": 222633381,
        "sender_full_name": "scottmcm",
        "timestamp": 1610566409
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/Design.20meeting.202021-01-13.3A.20try_trait_v2/near/222633342\">said</a>:</p>\n<blockquote>\n<p>Are there any downsides to removing the <code>BreakHolder</code> bound from <code>Bubble</code>, other than more complex bounds on functions that want to be able to plug in a different type to the same type container?</p>\n</blockquote>\n<p>I think there might not even be more complex bounds in those cases (<a href=\"#narrow/stream/213817-t-lang/topic/Design.20meeting.202021-01-13.3A.20try_trait_v2/near/222632231\">https://rust-lang.zulipchat.com/#narrow/stream/213817-t-lang/topic/Design.20meeting.202021-01-13.3A.20try_trait_v2/near/222632231</a>)</p>\n<p>So it might just be all upside.</p>",
        "id": 222633558,
        "sender_full_name": "scottmcm",
        "timestamp": 1610566472
    },
    {
        "content": "<p>At the risk of bikeshedding, I do think that the name <code>Holder</code> has some ambiguity. In the value space, <code>Holder</code> is a thing that holds a break. But in the type space, <code>Holder</code> is a thing that's <em>ready</em> to hold a type parameter you hand it.</p>",
        "id": 222633821,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610566575
    },
    {
        "content": "<p>And when reading the RFC, the latter meaning came more readily to mind.</p>",
        "id": 222633852,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610566589
    },
    {
        "content": "<p>Yeah, <code>Holder</code> is pretty terrible, I agree.</p>",
        "id": 222634114,
        "sender_full_name": "scottmcm",
        "timestamp": 1610566714
    },
    {
        "content": "<p>In scenarios where you <em>don't</em> care about supporting things like <code>try_fold</code>, do you need to make <code>Holder</code> a type you define, or can you use an existing type? For instance, could the ErrorCode case do something like <code>type Holder = NonZeroI32</code>?</p>",
        "id": 222634246,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610566782
    },
    {
        "content": "<p>That's possible, though it has interconversion implications -- you'll need to have <code>YourWhatever: Try&lt;NonZeroI32&gt;</code>, so you'll start to interoperate with anyone else who also used that holder type.</p>",
        "id": 222634461,
        "sender_full_name": "scottmcm",
        "timestamp": 1610566863
    },
    {
        "content": "<p>Ah. Which may or may not be a feature.</p>",
        "id": 222634530,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610566894
    },
    {
        "content": "<p>Right.  And it's probably less a feature the more general the holder type -- see the discussion of <code>Ordering: Try&lt;bool&gt;</code> in <a href=\"https://github.com/rust-lang/rfcs/pull/3058#issuecomment-757598481\">https://github.com/rust-lang/rfcs/pull/3058#issuecomment-757598481</a>, for example</p>",
        "id": 222634708,
        "sender_full_name": "scottmcm",
        "timestamp": 1610566968
    },
    {
        "content": "<p>But, for instance, for the \"error or pointer\" type in the Linux kernel, using the errno type as the holder and interoperating with anything else using errno may be a feature.</p>",
        "id": 222634718,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610566974
    },
    {
        "content": "<p>Right.  It's probably bad with just <code>NonZeroCInt</code>, but with <code>struct ErrorNumber(NonZeroCInt); impl ErrorNumber { const DOM: Self = ...; const RANGE: Self = ...; }</code> it might be perfectly reasonable.</p>",
        "id": 222635076,
        "sender_full_name": "scottmcm",
        "timestamp": 1610567125
    },
    {
        "content": "<p>Right. I'm expecting some kind of <code>repr(transparent)</code> newtypes for errno.</p>",
        "id": 222635525,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610567328
    },
    {
        "content": "<p>(Possibly two, one for \"errno including success\" and one for \"errno that's definitely a failure\".)</p>",
        "id": 222635557,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610567347
    },
    {
        "content": "<p>Which is giving me a newfound appreciation for proposals on how to construct enum types from variants.</p>",
        "id": 222635606,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610567379
    },
    {
        "content": "<p>I'm wondering about another potential simplification...</p>",
        "id": 222636030,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610567553
    },
    {
        "content": "<p>Keeping a bound on Holder forces users to use a custom type for it, which may be a good thing</p>",
        "id": 222636073,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610567571
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> The desugaring for <code>?</code> doesn't use <code>continue_with</code>.</p>",
        "id": 222636102,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610567588
    },
    {
        "content": "<p>Does <code>continue_with</code> belong on <code>Bubble</code>, or on <code>Try</code>?</p>",
        "id": 222636130,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610567601
    },
    {
        "content": "<p>speaking of confusing explanations: I found the explanation in the hackmd in terms of \"there's residual stuff that the user shouldn't care about\" clearer than the RFC explanation</p>",
        "id": 222636263,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610567648
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/Design.20meeting.202021-01-13.3A.20try_trait_v2/near/222636130\">said</a>:</p>\n<blockquote>\n<p>Does <code>continue_with</code> belong on <code>Bubble</code>, or on <code>Try</code>?</p>\n</blockquote>\n<p>If it were on <code>Try</code>, it'd probably be spelled <code>from_continue</code>.</p>",
        "id": 222636388,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610567715
    },
    {
        "content": "<p>(Actually, that might be true even if it's on <code>Bubble</code>, since <code>_with</code> is usually a suffix for \"takes a closure\".)</p>",
        "id": 222636444,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610567744
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> The type without the generic parameter, because it doesn't make sense for the interpretation of the continue value to depend on the error type (just like it doesn't make sense for the continue <em>type</em> to depend on the error type)</p>",
        "id": 222636460,
        "sender_full_name": "scottmcm",
        "timestamp": 1610567754
    },
    {
        "content": "<p>I think I should undo <a href=\"https://github.com/scottmcm/rust/pull/2/commits/5fa9b9d0a315d56637b30dac9df3af796ea3bec0\">https://github.com/scottmcm/rust/pull/2/commits/5fa9b9d0a315d56637b30dac9df3af796ea3bec0</a> -- I originally had them as <code>TryCore</code>/<code>Try</code> because I'm not sure that trying to assign too much meaning to the difference between them is that useful</p>",
        "id": 222636598,
        "sender_full_name": "scottmcm",
        "timestamp": 1610567813
    },
    {
        "content": "<p>(<code>Core</code> wasn't a great suffix either, of course, because it makes it sounds like the <code>core</code>/<code>alloc</code>/<code>std</code> split, which is unrelated)</p>",
        "id": 222636650,
        "sender_full_name": "scottmcm",
        "timestamp": 1610567844
    },
    {
        "content": "<p><code>TryBase</code>?</p>",
        "id": 222636671,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610567852
    },
    {
        "content": "<p>Can you give an example where someone would <code>impl Try&lt;SomethingOtherThanTheDefault&gt;</code>?</p>",
        "id": 222636794,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610567898
    },
    {
        "content": "<p>Yeah, that was my next instinct -- hopefully it doesn't make the \"OOP is bad\" peanut gallery show up, though :P</p>",
        "id": 222636802,
        "sender_full_name": "scottmcm",
        "timestamp": 1610567902
    },
    {
        "content": "<p><code>Result</code> (and <code>Poll</code>) implements something other than the default, to handle error conversion: <a href=\"https://github.com/scottmcm/rfcs/blob/do-or-do-not/text/0000-try-trait-v2.md#result\">https://github.com/scottmcm/rfcs/blob/do-or-do-not/text/0000-try-trait-v2.md#result</a></p>",
        "id": 222636931,
        "sender_full_name": "scottmcm",
        "timestamp": 1610567958
    },
    {
        "content": "<p>If <code>continue_with</code> was moved to <code>Try</code>, then <code>Try</code> would essentially have a single member <code>unbranch(x: ControlFlow&lt;H, Self::Continue&gt;) -&gt; Self</code> that almost mirrors <code>Bubble::branch</code> except that <code>H</code> can be changed. I would find this a bit easier to follow I think</p>",
        "id": 222637095,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610568015
    },
    {
        "content": "<p>oh wait this would make inference bad again</p>",
        "id": 222637263,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610568095
    },
    {
        "content": "<p>ok, I finally see the point of the split, sry for the noise</p>",
        "id": 222637368,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610568132
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/213817-t-lang/topic/Design.20meeting.202021-01-13.3A.20try_trait_v2/near/222636931\">said</a>:</p>\n<blockquote>\n<p><code>Result</code> (and <code>Poll</code>) implements something other than the default, to handle error conversion: <a href=\"https://github.com/scottmcm/rfcs/blob/do-or-do-not/text/0000-try-trait-v2.md#result\">https://github.com/scottmcm/rfcs/blob/do-or-do-not/text/0000-try-trait-v2.md#result</a></p>\n</blockquote>\n<p>Sorry, let me rephrase that. I think I understand why they do so; I meant, would there be value in adding to the RFC an example of implementing <code>Try</code> for some other type, in a way that doesn't just use <code>From</code>?</p>",
        "id": 222637396,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610568145
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245339\">@Nadrieril</span> I made the same mistake; it's not noise. It seems clear that there's some additional explanation and clarity needed.</p>",
        "id": 222637575,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610568215
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> My first guess would be that it may make sense to implement <code>Try</code> yourself for multiple potential type parameters, with different implementations, effectively as your own more-constrained version of <code>From</code>.</p>",
        "id": 222637779,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610568304
    },
    {
        "content": "<p>Yeah, that seems plausible.  I don't have such a situation jumping to mind, though.</p>",
        "id": 222638777,
        "sender_full_name": "scottmcm",
        "timestamp": 1610568783
    },
    {
        "content": "<p>Hmm, maybe something about HTTP errors?</p>",
        "id": 222638795,
        "sender_full_name": "scottmcm",
        "timestamp": 1610568793
    },
    {
        "content": "<p>There's also this sketch in the R&amp;A section:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">H</span>: <span class=\"nc\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Debug</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">BreakHolder</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">Try</span><span class=\"o\">&lt;</span><span class=\"n\">H</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">LogAndIgnoreErrors</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">from_holder</span><span class=\"p\">(</span><span class=\"n\">h</span>: <span class=\"nc\">H</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">dbg!</span><span class=\"p\">(</span><span class=\"n\">h</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">Self</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Which locally I have as less of a sketch, with</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">LogAndIgnoreErrors</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"cp\">#[derive(Debug, Copy, Clone)]</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">WhatErrors</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Bubble</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">LogAndIgnoreErrors</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nb\">Ok</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Holder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WhatErrors</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">branch</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">ControlFlow</span><span class=\"o\">&lt;</span><span class=\"n\">WhatErrors</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">ControlFlow</span>::<span class=\"n\">Continue</span><span class=\"p\">(())</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">continue_with</span><span class=\"p\">(()</span>: <span class=\"p\">())</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">BreakHolder</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">WhatErrors</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">LogAndIgnoreErrors</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 222638865,
        "sender_full_name": "scottmcm",
        "timestamp": 1610568828
    },
    {
        "content": "<p>(Interestingly, that seems to be another good reason to remove the <code>BreakHolder</code> bound in <code>Bubble</code>/<code>TryBase</code>, since that implementation obviously doesn't care about it either.)</p>",
        "id": 222638997,
        "sender_full_name": "scottmcm",
        "timestamp": 1610568884
    },
    {
        "content": "<p>The <code>zip_demo</code> example is interesting from a user's perspective: taking <code>impl Bubble</code> as input feels like taking <code>impl IntoIterator</code>. I guess it's a pattern that users will have to learn to read. When implementing <code>IntoIterator</code> you have to come up with an IntoIter type which is either custom or composed of other <code>IntoIter</code> types.  <code>Holder</code> works similarly for <code>Bubble</code>. I think this could be an avenue for a more legible explanation/naming scheme</p>",
        "id": 222639312,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610569030
    },
    {
        "content": "<p>actually, could it be possible to get something closer to how we make new iterators, e.g. something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">zip_demo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">B</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Zip</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">A</span>: <span class=\"nc\">Bubble</span><span class=\"o\">&lt;</span><span class=\"n\">Continue</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Holder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">B</span>: <span class=\"nc\">Bubble</span><span class=\"o\">&lt;</span><span class=\"n\">Continue</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Holder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>where <code>Zip</code> would implement the appropriate traits</p>",
        "id": 222641258,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610569943
    },
    {
        "content": "<p>same question with <code>try_fold</code>. The idea being that when you want the output of your function to be bubblable and generic, you return a custom type or an <code>impl Bubble</code></p>",
        "id": 222641683,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610570135
    },
    {
        "content": "<p>Unfortunately returning <code>impl Bubble</code> from things is a bit awkward as it prevents the use of methods on the return value</p>",
        "id": 222642155,
        "sender_full_name": "scottmcm",
        "timestamp": 1610570327
    },
    {
        "content": "<p>You couldn't <code>.try_fold(...).map(...)</code>, for example, because <code>map</code> is on specific types, not on <code>Bubble</code>.</p>",
        "id": 222642219,
        "sender_full_name": "scottmcm",
        "timestamp": 1610570351
    },
    {
        "content": "<p>hm I see, users want to have exactly their return type of choice...</p>",
        "id": 222642742,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610570629
    },
    {
        "content": "<p>I don't think we need the BreakHolder bound in order to write <code>zip_demo</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">zip_demo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a</span>: <span class=\"o\">&lt;</span><span class=\"n\">H</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">BreakHolder</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">Output</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">b</span>: <span class=\"o\">&lt;</span><span class=\"n\">H</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">BreakHolder</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">Output</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">&lt;</span><span class=\"n\">H</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">BreakHolder</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"p\">)</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">Output</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">H</span>: <span class=\"nc\">BreakHolder</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">H</span>: <span class=\"nc\">BreakHolder</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">H</span>: <span class=\"nc\">BreakHolder</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Bubble</span>::<span class=\"k\">continue</span><span class=\"n\">_with</span><span class=\"p\">((</span><span class=\"n\">a</span><span class=\"o\">?</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">?</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This is even somewhat legible if we think as the holder as \"the thing that defines what the user wants returned\". Maybe it would make sense to rename it <code>GenericBubble</code>. Is there something else that really needs the BreakHolder bound?</p>",
        "id": 222644207,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610571352
    },
    {
        "content": "<p>Yeah, the BreakHolder bound <em>on <code>Bubble::Holder</code></em> seems to not provide value: <a href=\"#narrow/stream/213817-t-lang/topic/Design.20meeting.202021-01-13.3A.20try_trait_v2/near/222632231\">https://rust-lang.zulipchat.com/#narrow/stream/213817-t-lang/topic/Design.20meeting.202021-01-13.3A.20try_trait_v2/near/222632231</a></p>",
        "id": 222644974,
        "sender_full_name": "scottmcm",
        "timestamp": 1610571698
    },
    {
        "content": "<p>Oh, that's an interesting phrasing of <code>zip_demo</code>.</p>",
        "id": 222645115,
        "sender_full_name": "scottmcm",
        "timestamp": 1610571760
    },
    {
        "content": "<p>ok, I was reading the hackmd</p>",
        "id": 222645145,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610571776
    },
    {
        "content": "<p>Did you mean \"don't think we need the <code>Bubble</code> bound?\", in that example?</p>",
        "id": 222645224,
        "sender_full_name": "scottmcm",
        "timestamp": 1610571799
    },
    {
        "content": "<p>I meant \"don't need the BreakHolder bound on Bubble::Holder\"</p>",
        "id": 222645275,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610571830
    },
    {
        "content": "<p>That <code>zip_demo</code> is really interesting; it's adding the other bounds it needs via the bound on <code>::Output</code>.</p>",
        "id": 222645372,
        "sender_full_name": "scottmcm",
        "timestamp": 1610571850
    },
    {
        "content": "<p>huh right, I didn't notice but it doesn't explicitly mention Bubble or Try</p>",
        "id": 222645438,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610571872
    },
    {
        "content": "<p>Seems like it should even still type-infer properly, since <code>Output: Try&lt;Holder = Self&gt;</code>.</p>",
        "id": 222645807,
        "sender_full_name": "scottmcm",
        "timestamp": 1610572078
    },
    {
        "content": "<p><del>...yup, tried it out with my prototype compiler and it does.  Nicely done.</del></p>\n<p>Oops, sorry, I spoke too soon.</p>",
        "id": 222646099,
        "sender_full_name": "scottmcm",
        "timestamp": 1610572210
    },
    {
        "content": "<p>It compiled, but I forgot to use it :P</p>",
        "id": 222646183,
        "sender_full_name": "scottmcm",
        "timestamp": 1610572259
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">zip_demo_option</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">zip_demo_nadrieril</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>gives</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0283</span><span class=\"p\">]</span>: <span class=\"nc\">type</span><span class=\"w\"> </span><span class=\"n\">annotations</span><span class=\"w\"> </span><span class=\"n\">needed</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">C</span>:<span class=\"err\">\\</span><span class=\"n\">src</span><span class=\"err\">\\</span><span class=\"n\">rust</span><span class=\"err\">\\</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"err\">\\</span><span class=\"n\">ui</span><span class=\"err\">\\</span><span class=\"kr\">try</span><span class=\"o\">-</span><span class=\"n\">operator</span><span class=\"o\">-</span><span class=\"n\">custom</span><span class=\"o\">-</span><span class=\"n\">v2</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">184</span>:<span class=\"mi\">5</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"n\">LL</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"n\">zip_demo_nadrieril</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"o\">^^^^^^^^^^^^^^^^^^</span><span class=\"w\"> </span><span class=\"n\">cannot</span><span class=\"w\"> </span><span class=\"n\">infer</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">for</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">parameter</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">H</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">declared</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">zip_demo_nadrieril</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"n\">LL</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">zip_demo_nadrieril</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">        </span><span class=\"o\">------------------</span><span class=\"w\"> </span><span class=\"n\">required</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">bound</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"n\">LL</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">   </span><span class=\"n\">H</span>: <span class=\"nc\">BreakHolder</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">      </span><span class=\"o\">--------------</span><span class=\"w\"> </span><span class=\"n\">required</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">bound</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">zip_demo_nadrieril</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">cannot</span><span class=\"w\"> </span><span class=\"n\">satisfy</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">_</span>: <span class=\"nc\">BreakHolder</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"n\">help</span>: <span class=\"nc\">consider</span><span class=\"w\"> </span><span class=\"n\">specifying</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">arguments</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"n\">LL</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"n\">zip_demo_nadrieril</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                       </span><span class=\"o\">^^^^^^^^^^^</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 222646403,
        "sender_full_name": "scottmcm",
        "timestamp": 1610572374
    },
    {
        "content": "<p>oh right of course &gt;&lt;</p>",
        "id": 222646448,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610572403
    },
    {
        "content": "<p>can't infer the H knowing only the output</p>",
        "id": 222646469,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610572421
    },
    {
        "content": "<p>potential naming nit: intuitively the thing that bubbles up isn't <code>Result&lt;T,E&gt;</code>, it's <code>Result&lt;!,E&gt;</code> i.e. the holder. So maybe we could call holders \"bubbles\" and things like <code>Option&lt;T&gt;</code> \"bubblable\" (love that name ^^)</p>",
        "id": 222646685,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610572534
    },
    {
        "content": "<p>I was hoping it could via the <code>Self</code> bound in this.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">BreakHolder</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Output</span>: <span class=\"nc\">Try</span><span class=\"o\">&lt;</span><span class=\"n\">Continue</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Holder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 222646693,
        "sender_full_name": "scottmcm",
        "timestamp": 1610572538
    },
    {
        "content": "<p>But I guess not.</p>",
        "id": 222646793,
        "sender_full_name": "scottmcm",
        "timestamp": 1610572570
    },
    {
        "content": "<p>other idea: if the <code>Bubble::Holder : BreakHolder</code> is optional, would we have instead:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bubble</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"c1\">// as before, without a bound on Holder</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">GenericBubble</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>: <span class=\"nc\">Bubble</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">type</span> <span class=\"nc\">Output</span>: <span class=\"nc\">Try</span><span class=\"o\">&lt;</span><span class=\"n\">Continue</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Holder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">Holder</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>that way users could entirely forget about holders:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">zip_demo</span><span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a</span>: <span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">GenericBubble</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">Output</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">b</span>: <span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">GenericBubble</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">Output</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">R</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">R</span>: <span class=\"nc\">Bubble</span><span class=\"o\">&lt;</span><span class=\"n\">Continue</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">R</span>: <span class=\"nc\">GenericBubble</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">R</span>: <span class=\"nc\">GenericBubble</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Bubble</span>::<span class=\"k\">continue</span><span class=\"n\">_with</span><span class=\"p\">((</span><span class=\"n\">a</span><span class=\"o\">?</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">?</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>would that work? (you can easily choose which of the arguments/return value will drive inference here)</p>",
        "id": 222647369,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610572906
    },
    {
        "content": "<p>I think that'd work too.  The major difference would be an unused type parameter in the implementations of GenericBubble.</p>",
        "id": 222648905,
        "sender_full_name": "scottmcm",
        "timestamp": 1610573635
    },
    {
        "content": "<p>Right now it's</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">ops</span>::<span class=\"n\">BreakHolder</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;!</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>If it worked on the full bubble type, instead of the holder type, then the impl would look something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Yolo</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">GenericBubble</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Yolo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Now, that's not a huge deal, but I'm never a fan of unused generic parameters.</p>",
        "id": 222649226,
        "sender_full_name": "scottmcm",
        "timestamp": 1610573777
    },
    {
        "content": "<p>(Especially for types, since we don't support <code>_</code> there like we support <code>'_</code> for irrelevant lifetime parameters.)</p>",
        "id": 222661090,
        "sender_full_name": "scottmcm",
        "timestamp": 1610579858
    },
    {
        "content": "<p>There's an unused param in <code>impl Try for Result</code> too, right? It's kinda symmetrical</p>",
        "id": 222669028,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610585750
    },
    {
        "content": "<p>Good point.</p>",
        "id": 222741004,
        "sender_full_name": "scottmcm",
        "timestamp": 1610641171
    },
    {
        "content": "<p>Still trying to clarify the purpose of the traits. Conceptually I want <code>Bubble</code> to be the trait of things that can be put behind a <code>?</code>, i.e. things that can emit a short-circuit, and <code>Try</code> to be the type of things that can receive such a short-circuit. Then it's natural that <code>Try</code> has a parameter: why not catch a bunch of different short-circuits after all. The only weird thing is <code>continue_with</code>; it doesn't fit neatly in this idea</p>",
        "id": 222792992,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610662609
    },
    {
        "content": "<p>One thing I've been mentally playing with is flipping them:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">FromTryResidual</span><span class=\"o\">&lt;</span><span class=\"n\">Residual</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Try</span><span class=\"o\">&gt;</span>::<span class=\"n\">Residual</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">from_try_residual</span><span class=\"p\">(</span><span class=\"n\">r</span>: <span class=\"nc\">Residual</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Try</span>: <span class=\"nc\">FromTryResidual</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Continue</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Residual</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">branch</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">ControlFlow</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">Residual</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">Continue</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">from_continue</span><span class=\"p\">(</span><span class=\"n\">c</span>: <span class=\"nc\">Self</span>::<span class=\"n\">Continue</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">FromTryResidual</span><span class=\"o\">&lt;</span><span class=\"nb\">Result</span><span class=\"o\">&lt;!</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">!&gt;&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">from_try_residual</span><span class=\"p\">(</span><span class=\"n\">r</span>: <span class=\"nb\">Result</span><span class=\"o\">&lt;!</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">!&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=0b9f5b76e79c25e7afd9f1ae8f65efe0\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=0b9f5b76e79c25e7afd9f1ae8f65efe0</a></p>\n<p>Someone (I forget whom) asked about using infallible-<code>?</code> in <code>-&gt; ()</code> methods once, which this would allow.</p>",
        "id": 222794901,
        "sender_full_name": "scottmcm",
        "timestamp": 1610663499
    },
    {
        "content": "<p>huh, <code>&lt;Self as Try&gt;::Residual</code> is allowed without a <code>Try</code> bound? :o</p>",
        "id": 222795085,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610663583
    },
    {
        "content": "<p>Yeah, surprised me too :P</p>",
        "id": 222795142,
        "sender_full_name": "scottmcm",
        "timestamp": 1610663607
    },
    {
        "content": "<p>then do you even need <code>Try: FromTryResidual</code>?</p>",
        "id": 222795172,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610663627
    },
    {
        "content": "<p>It only needs the bound at the place where the default is actually used.</p>",
        "id": 222795180,
        "sender_full_name": "scottmcm",
        "timestamp": 1610663631
    },
    {
        "content": "<p>I still want <code>Try: FromTryResidual</code> so that the bound in something like <code>try_fold</code> can just be <code>R: Try</code>.  And I don't think there's a situation where it makes sense to be able to split a type apart but not put it back together again.</p>",
        "id": 222795354,
        "sender_full_name": "scottmcm",
        "timestamp": 1610663724
    },
    {
        "content": "<p>I was making an attempt at clarifying the roles of things with a new kind of vocabulary:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// Types that can be an input to `?`. A `x?` expression can either continue evaluation normally</span>\n<span class=\"sd\">/// with a value of type `Self::Continue`, or short-circuit into the nearest function boundary with</span>\n<span class=\"sd\">/// a value of type `Self::ShortCircuit`. The short-circuited value will then be converted to the</span>\n<span class=\"sd\">/// appropriate output type using `from_short_circuited`.</span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">EmitShortCircuit</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// The type of the carried data returned in the non-shortcircuiting case.</span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Continue</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// The type that carried the data that get's short-circuited.</span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">ShortCircuit</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// Decide whether or not to short-circuit.</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">branch</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">ControlFlow</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">ShortCircuit</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">Continue</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"sd\">/// Types that can short-circuit using the `?` operator. The trait is split in two because this may</span>\n<span class=\"sd\">/// accept more types of short-circuits than the one it emits. Typically `Result&lt;T, E&gt;` emits a</span>\n<span class=\"sd\">/// short-circuit that carries the `E`, but can accept short-circuits for any `E2: Into&lt;E&gt;`.</span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">ShortCircuiting</span><span class=\"o\">&lt;</span><span class=\"n\">SC</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">EmitShortCircuit</span><span class=\"o\">&gt;</span>::<span class=\"n\">ShortCircuit</span><span class=\"o\">&gt;</span>: <span class=\"nc\">EmitShortCircuit</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">from_continued</span><span class=\"p\">(</span><span class=\"n\">c</span>: <span class=\"nc\">Self</span>::<span class=\"n\">Continue</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">from_short_circuited</span><span class=\"p\">(</span><span class=\"n\">sc</span>: <span class=\"nc\">SC</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 222795356,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610663728
    },
    {
        "content": "<p>I think your inverted dependency would be even clearer because it forces a type to be able to catch its own short-circuiting</p>",
        "id": 222795475,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610663774
    },
    {
        "content": "<p>Yeah.  The other way only sortof did that, since the <code>::Output</code> on <code>BreakHolder</code> was bound to <code>Try&lt;Output = Self&gt;</code>.</p>",
        "id": 222795580,
        "sender_full_name": "scottmcm",
        "timestamp": 1610663844
    },
    {
        "content": "<p>But without the <code>Holder: BreakHolder</code> bound, even that weak guarantee is lost.</p>",
        "id": 222795620,
        "sender_full_name": "scottmcm",
        "timestamp": 1610663881
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/213817-t-lang/topic/Design.20meeting.202021-01-13.3A.20try_trait_v2/near/222794901\">said</a>:</p>\n<blockquote>\n<p>Someone (I forget whom) asked about using infallible-<code>?</code> in <code>-&gt; ()</code> methods once, which this would allow.</p>\n</blockquote>\n<p>Why wouldn't that work with the non-flipped design?</p>",
        "id": 222795833,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610663992
    },
    {
        "content": "<p>ah, because it would require <code>(): Bubble</code></p>",
        "id": 222796143,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610664158
    },
    {
        "content": "<p>hm ok, that convinces me that I prefer the flipped version: it doesn't make sense for a thing to emit a short-circuit it can't catch, but the <code>()</code> example shows that it makes sense for something to receive short-circuits even if it can't emit any</p>",
        "id": 222796407,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610664340
    },
    {
        "content": "<p>Can we usually avoid having <code>FromTryResidual</code>/<code>Bubble</code> show up in public APIs btw? It would make explaining things easier if it could be documented as \"internal\" to reduce the learning burden</p>",
        "id": 222796729,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610664513
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245339\">Nadrieril</span> <a href=\"#narrow/stream/213817-t-lang/topic/Design.20meeting.202021-01-13.3A.20try_trait_v2/near/222796143\">said</a>:</p>\n<blockquote>\n<p>ah, because it would require <code>(): Bubble</code></p>\n</blockquote>\n<p>Yeah, and consequently would allow <code>()??????????????????????????</code>, which would obviously be bad.</p>",
        "id": 222797124,
        "sender_full_name": "scottmcm",
        "timestamp": 1610664749
    },
    {
        "content": "<p>yup, not pretty</p>",
        "id": 222797136,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610664759
    },
    {
        "content": "<p><code>is_this_right()????;</code></p>",
        "id": 222797431,
        "sender_full_name": "isHavvy",
        "timestamp": 1610664909
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245339\">Nadrieril</span> <a href=\"#narrow/stream/213817-t-lang/topic/Design.20meeting.202021-01-13.3A.20try_trait_v2/near/222796729\">said</a>:</p>\n<blockquote>\n<p>Can we usually avoid having <code>FromTryResidual</code>/<code>Bubble</code> show up in public APIs btw? It would make explaining things easier if it could be documented as \"internal\" to reduce the learning burden</p>\n</blockquote>\n<p>I think so, especially with the flipped one -- it means that you could just call <code>Try::from_residual(...)</code> and not even notice that it's from a supertrait.</p>",
        "id": 222797570,
        "sender_full_name": "scottmcm",
        "timestamp": 1610664993
    },
    {
        "content": "<p>nice</p>",
        "id": 222797588,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610665007
    },
    {
        "content": "<p>(That almost works in the current version of the RFC, except that doing <code>Try::from_continue(...)</code> complains that you didn't specify the generic type for <code>Try</code>, despite the fact that it doesn't matter)</p>",
        "id": 222797617,
        "sender_full_name": "scottmcm",
        "timestamp": 1610665034
    },
    {
        "content": "<p>So you'd only have to think about the generic trait when implementing it, or when you're explicitly trying to mix residuals.</p>",
        "id": 222797697,
        "sender_full_name": "scottmcm",
        "timestamp": 1610665085
    },
    {
        "content": "<p>you might not even need to if you're implementing it for a simple case</p>",
        "id": 222797761,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610665149
    },
    {
        "content": "<p>You'd still have to mention the trait, though not the generic param.</p>",
        "id": 222798035,
        "sender_full_name": "scottmcm",
        "timestamp": 1610665309
    },
    {
        "content": "<p>oh right indeed, misread you</p>",
        "id": 222798111,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610665332
    },
    {
        "content": "<p>I'm still iffy about the location of <code>from_continue</code> from an explanatory perspective. I'd like <code>FromTryResidual</code>/<code>FromShortCircuit</code> to mean \"types <code>T</code> such that <code>-&gt; T</code> functions can have <code>?</code> in them\"; that reading makes me want to put <code>from_continue</code> there but that doesn't quite work</p>",
        "id": 222798139,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610665357
    },
    {
        "content": "<p>hm actually it's fine if it's just functions. In my head I'm generalizing to \"types <code>T</code> that can be the type of a <code>try</code> block\", and that does require <code>from_continue</code> if I've followed things correctly</p>",
        "id": 222798498,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610665567
    },
    {
        "content": "<p>Ah well you're doing sth different for <code>try</code> blocks anyways, so that would not be a correct description of the <code>FromShortCircuit</code> trait.</p>",
        "id": 222801020,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610667306
    },
    {
        "content": "<p>I do like your point about \"produce an <code>impl Try</code>\" (<code>try{}</code> or <code>from_holder) vs \"consume an </code>impl Try<code>\" (</code>?`) being a nice split.</p>",
        "id": 222801146,
        "sender_full_name": "scottmcm",
        "timestamp": 1610667396
    },
    {
        "content": "<p>It's just awkward to do with a consistent <code>Continue</code> type</p>",
        "id": 222801193,
        "sender_full_name": "scottmcm",
        "timestamp": 1610667438
    },
    {
        "content": "<p>I guess we could have a <code>FromTryContinue</code> trait that works like <code>FromTryResidual</code>, and the <code>Continue</code> type would be pinned by the default type param. That's of course overkill, unless we manage to use it to replace <code>BreakHolder</code> somehow</p>",
        "id": 222802626,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610668625
    },
    {
        "content": "<p>yeah no that's madness</p>",
        "id": 222802716,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610668695
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245339\">Nadrieril</span> <a href=\"#narrow/stream/213817-t-lang/topic/Design.20meeting.202021-01-13.3A.20try_trait_v2/near/222802626\">said</a>:</p>\n<blockquote>\n<p>unless we manage to use it to replace <code>BreakHolder</code> somehow</p>\n</blockquote>\n<p>I'm going to have to think on that one, in conjunction with your earlier point that the continue type is unused in FromTryResidual.</p>",
        "id": 222803453,
        "sender_full_name": "scottmcm",
        "timestamp": 1610669323
    },
    {
        "content": "<p>I can't see a way right now to do it, but this seems like one of those \"will only come to you when doing something totally unrelated\" kinds of insights...</p>",
        "id": 222803534,
        "sender_full_name": "scottmcm",
        "timestamp": 1610669407
    },
    {
        "content": "<p>Yeah, what I was exploring along these line is whether <code>from_continue</code> could actually be a member of <code>BreakHolder</code> or my previously suggested <code>GenericBubble</code> or sth like that</p>",
        "id": 222803580,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610669466
    },
    {
        "content": "<p>I don't think <code>BreakHolder</code> is the right place, because this topic has convinced me that <code>BreakHolder</code> should be irrelevant to everyone not trying to do the HKT scenarios</p>",
        "id": 222803669,
        "sender_full_name": "scottmcm",
        "timestamp": 1610669543
    },
    {
        "content": "<p>Related is the question of whether there might be a <code>Try</code> type that would lack a reasonable <code>from_continue</code></p>",
        "id": 222803672,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610669548
    },
    {
        "content": "<p>I'm confident that anything with a reasonable <code>branch</code> has a reasonable <code>from_continue</code>, because it's the thing that lets you put the <code>Continue</code> into that type in the first place.</p>",
        "id": 222803703,
        "sender_full_name": "scottmcm",
        "timestamp": 1610669592
    },
    {
        "content": "<p>The other way might not be true, though -- my <code>LogAndIgnoreErrors</code> example could make sense with <code>from_continue</code> and <code>from_holder</code> but not <code>branch</code>.</p>",
        "id": 222803817,
        "sender_full_name": "scottmcm",
        "timestamp": 1610669692
    },
    {
        "content": "<p>hm, <code>branch</code> might not be able to produce all possible values of the type <code>Continue</code></p>",
        "id": 222803833,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610669712
    },
    {
        "content": "<p>(But I also think that allowing <code>?</code> on it is low-impact, because it's not something that you'd be returning from a function anyway)</p>",
        "id": 222803853,
        "sender_full_name": "scottmcm",
        "timestamp": 1610669736
    },
    {
        "content": "<p>you could have <code>Continue = bool</code> and a <code>branch()</code> that never returns <code>Continue(false)</code> for some reason</p>",
        "id": 222803872,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610669759
    },
    {
        "content": "<p>something along the lines of packed errno maybe, but weirder</p>",
        "id": 222803935,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610669810
    },
    {
        "content": "<p>I'm not sure that's important to allow, though -- wouldn't it be good to encode that in the type system?</p>",
        "id": 222803937,
        "sender_full_name": "scottmcm",
        "timestamp": 1610669811
    },
    {
        "content": "<p>So the packed pointer thing would probably return an <code>AlignedPtr&lt;T&gt;</code> or something, not just a <code>*mut T</code>.</p>",
        "id": 222803976,
        "sender_full_name": "scottmcm",
        "timestamp": 1610669863
    },
    {
        "content": "<p>I don't want to underestimate the creativity of the rust community x)</p>",
        "id": 222804156,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610670015
    },
    {
        "content": "<p>How about some kind of <code>ResultRef&lt;T,E&gt;</code> that has <code>Continue=&amp;T</code> and does transmute magic to make the conversion in a way that doesn't work for an arbitrarily allocated <code>&amp;T</code>. Maybe it stores either a <code>T</code>or some impossible value at the start of the allocation, and if relevant stores the <code>E</code> after the space reserved for the <code>T</code>.</p>",
        "id": 222804715,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610670490
    },
    {
        "content": "<p>We could still decide that's a bit too crazy and not cater to that kind of thing, but I'd rather that be a concious choice than an lack of sufficiently mad creativity x)</p>",
        "id": 222804772,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610670577
    },
    {
        "content": "<p>Cause then we could remove <code>from_continue</code> from <code>Try</code> and have this instead:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">ContinuableTry</span><span class=\"o\">&lt;</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Try</span><span class=\"o\">&gt;</span>::<span class=\"n\">Continue</span><span class=\"o\">&gt;</span>: <span class=\"nc\">Try</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Output</span>: <span class=\"nc\">Try</span><span class=\"o\">&lt;</span><span class=\"n\">Continue</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Residual</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">Residual</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">from_continued</span><span class=\"p\">(</span><span class=\"n\">c</span>: <span class=\"nc\">C</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Output</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Functions like <code>simple_try_fold</code> would just take a <code>ContinuableTry&lt;Continue=T&gt;</code> bound, and functions like <code>zip_demo</code> would change the type param. I believe this subsumes <code>BreakHolder</code> entirely, modulo some rethinking of <code>try</code> desugaring</p>",
        "id": 222805770,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610671425
    },
    {
        "content": "<p>ah wait not quite &gt;&lt; <code>try_fold</code> would need <code>R::Output</code> which is not great. grmbl</p>",
        "id": 222805891,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610671515
    },
    {
        "content": "<p>maybe</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">ContinuableTry</span><span class=\"o\">&lt;</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Try</span><span class=\"o\">&gt;</span>::<span class=\"n\">Continue</span><span class=\"o\">&gt;</span>: <span class=\"nc\">Try</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">ChangeType</span>: <span class=\"nc\">ContinuableTry</span><span class=\"o\">&lt;</span><span class=\"n\">Continue</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Residual</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">Residual</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">from_continued</span><span class=\"p\">(</span><span class=\"n\">c</span>: <span class=\"nc\">Self</span>::<span class=\"n\">Continue</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 222806070,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610671680
    },
    {
        "content": "<p>hrm, getting knots to my brain. Time to sleep <span aria-label=\"bed\" class=\"emoji emoji-1f6cf\" role=\"img\" title=\"bed\">:bed:</span></p>",
        "id": 222806147,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610671735
    },
    {
        "content": "<p>The other downside of making <code>C</code> a generic type is that something like <code>let x: anyhow::Result&lt;i32&gt; = try { foo()?.parse()? };</code> stops working, because it can't get an expected type for the block body from the context any more.</p>",
        "id": 222808019,
        "sender_full_name": "scottmcm",
        "timestamp": 1610673404
    },
    {
        "content": "<p>Said otherwise, because <code>let x: i64 = { 4 };</code> works, I'd like <code>let x: Option&lt;u8&gt; = try { 4 };</code> to also work.  (As opposed to defaulting the literal to <code>i32</code> and giving \"<code>FromTryContinue&lt;i32&gt;</code> not implemented for <code>Option&lt;u8&gt;</code>\" error.)</p>",
        "id": 222808123,
        "sender_full_name": "scottmcm",
        "timestamp": 1610673542
    },
    {
        "content": "<p>does that work with the desugaring you propose in the RFC, based on <code>BreakHolder</code>?</p>",
        "id": 222809035,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610674453
    },
    {
        "content": "<p>Oh yeah ok I see where the ambiguity comes from. I understand why the one with <code>BreakHolder</code> works</p>",
        "id": 222809257,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610674656
    },
    {
        "content": "<p>Phew, so many constraints, I can see you've thought this through</p>",
        "id": 222809314,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610674685
    },
    {
        "content": "<p>I should test the breakholder desugaring for that scenario, actually.  I think I only tested it with the other desugar.</p>",
        "id": 222809347,
        "sender_full_name": "scottmcm",
        "timestamp": 1610674726
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245339\">Nadrieril</span> <a href=\"#narrow/stream/213817-t-lang/topic/Design.20meeting.202021-01-13.3A.20try_trait_v2/near/222809314\">said</a>:</p>\n<blockquote>\n<p>Phew, so many constraints, I can see you've thought this through</p>\n</blockquote>\n<p>Thanks <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>  It's been <a href=\"https://github.com/rust-lang/rfcs/pull/1859#issuecomment-279317876\">almost 4 years</a> of thinking about it now <span aria-label=\"cold sweat\" class=\"emoji emoji-1f630\" role=\"img\" title=\"cold sweat\">:cold_sweat:</span></p>",
        "id": 222809656,
        "sender_full_name": "scottmcm",
        "timestamp": 1610675016
    },
    {
        "content": "<p>for the record, here's my latest version with flipped dependency between traits and the \"short-circuiting\" vocab and many comments</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// Types `T` such that `-&gt; T` functions can have `?` in them. Usually implemented for</span>\n<span class=\"sd\">/// `ShortCircuiting` types, but there are also types like `()` that implement this yet cannot</span>\n<span class=\"sd\">/// themselves be the input of `?`.</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// The generic parameter is because a `ShortCircuiting` type may accept more types of</span>\n<span class=\"sd\">/// short-circuits than the one it emits. Typically `Result&lt;T, E&gt;` emits a short-circuit that</span>\n<span class=\"sd\">/// carries the `E`, but can accept short-circuits for any `E2: Into&lt;E&gt;`.</span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">CatchShortCircuit</span><span class=\"o\">&lt;</span><span class=\"n\">SC</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">ShortCircuiting</span><span class=\"o\">&gt;</span>::<span class=\"n\">ShortCircuit</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// If short-circuiting happened, construct the output value from the short-circuit data.</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">from_short_circuited</span><span class=\"p\">(</span><span class=\"n\">sc</span>: <span class=\"nc\">SC</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"sd\">/// Types that can short-circuit control-flow with `?`.</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// A `x?` expression can either continue evaluation normally with a value of type</span>\n<span class=\"sd\">/// `Self::Continue`, or short-circuit into the nearest function boundary with a value of type</span>\n<span class=\"sd\">/// `Self::ShortCircuit`. The short-circuited value will then be converted to the appropriate</span>\n<span class=\"sd\">/// output type using `from_short_circuited`. If no short-circuiting happened, a `Continue` value</span>\n<span class=\"sd\">/// can also be converted into the output type using `from_continued`.</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// The trait is split in two because some types (like `()`) can accept short-circuits but not be</span>\n<span class=\"sd\">/// inputs of `?`.</span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">ShortCircuiting</span>: <span class=\"nc\">CatchShortCircuit</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// The type of the carried data returned in the non-short-circuiting case.</span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Continue</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// The type that carried the data that get's short-circuited.</span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">ShortCircuit</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// Decide whether or not to short-circuit.</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">branch</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">ControlFlow</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">ShortCircuit</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">Continue</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// If no short-circuiting happened, construct the output value from a `Continue` value.</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">from_continued</span><span class=\"p\">(</span><span class=\"n\">c</span>: <span class=\"nc\">Self</span>::<span class=\"n\">Continue</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 222887954,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610729749
    },
    {
        "content": "<p>And my take on <code>BreakHolder</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// Sometimes a short-circuit type defines a \"family\" of related `ShortCircuiting` types with</span>\n<span class=\"sd\">/// varying `Continue` types but the same `ShortCircuit`. In this case, the `ShortCircuit` can</span>\n<span class=\"sd\">/// implement this trait, which makes it possible to make functions that are generic in such a</span>\n<span class=\"sd\">/// family.</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// If a short-circuit `SC` implements `ShortCircuitFamily&lt;T&gt;`, we can turn it into some type of</span>\n<span class=\"sd\">/// the family that implements `ShortCircuiting&lt;Continue = T, ShortCircuit = SC&gt;`.</span>\n<span class=\"sd\">/// For example, if `SC` is `&lt;Result&lt;T, E&gt;&gt;::ShortCircuit`, we can use that to turn the</span>\n<span class=\"sd\">/// short-circuiting case into a `Result&lt;U, E&gt;`.</span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">ShortCircuitFamily</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Output</span>: <span class=\"nc\">ShortCircuiting</span><span class=\"o\">&lt;</span><span class=\"n\">Continue</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ShortCircuit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">zip_demo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SC</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// The inputs are both of a short-circuiting type of a same family but for different `Continue` types,</span>\n<span class=\"w\">    </span><span class=\"c1\">// for example `Option&lt;T&gt;` and `Option&lt;U&gt;`.</span>\n<span class=\"w\">    </span><span class=\"n\">a</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">ShortCircuiting</span><span class=\"o\">&lt;</span><span class=\"n\">Continue</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ShortCircuit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">SC</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">b</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">ShortCircuiting</span><span class=\"o\">&lt;</span><span class=\"n\">Continue</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ShortCircuit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">SC</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">&lt;</span><span class=\"n\">SC</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">ShortCircuitFamily</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"p\">)</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">Output</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Using `ShortCircuitFamily`, we can construct the output type with the `Continue` type we want,</span>\n<span class=\"w\">    </span><span class=\"c1\">// e.g. `Option&lt;(T, U)&gt;`. We need this bound to ensure the family supports this type.</span>\n<span class=\"w\">    </span><span class=\"n\">SC</span>: <span class=\"nc\">ShortCircuitFamily</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ShortCircuiting</span>::<span class=\"n\">from_continued</span><span class=\"p\">((</span><span class=\"n\">a</span><span class=\"o\">?</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">?</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 222943572,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610755678
    },
    {
        "content": "<p>of course all subject to bikeshed, but now there's only one concept instead of three</p>",
        "id": 222943671,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610755742
    },
    {
        "content": "<p>sortof related: Someone pointed out that my <code>continue_with</code> name was bad because that's the convention for something taking a closure, which is true.</p>\n<p>But that made me think of <code>Vec::with_capacity</code>.  Translating that to the type level as <code>&lt;R as WithContinue&lt;(T, U)&gt;&gt;::Output</code> kinda works.</p>",
        "id": 222949714,
        "sender_full_name": "scottmcm",
        "timestamp": 1610760959
    },
    {
        "content": "<p>(Looks weird as a bound, though)</p>",
        "id": 222949779,
        "sender_full_name": "scottmcm",
        "timestamp": 1610761001
    },
    {
        "content": "<p>huh, not bad, it definitely makes the meaning of the parameter more legible</p>",
        "id": 222953475,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610764893
    },
    {
        "content": "<p>Yeah, <code>with_continue</code> sounds more reasonable.</p>",
        "id": 222954964,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610766546
    },
    {
        "content": "<p>hm, I wonder if continue is not the right word fwiw - you don't usually \"continue with a value\", unlike break. Maybe we can find something else, like \"provide\"? That would help here, I think</p>",
        "id": 222955173,
        "sender_full_name": "simulacrum",
        "timestamp": 1610766792
    },
    {
        "content": "<p>I think continue makes sense personally</p>",
        "id": 222955883,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610767676
    },
    {
        "content": "<p>Hmm, I'd actually only meant <code>WithContinue</code> at the type level.  Had been thinking of just going back to <code>from_continue</code> and <code>from_theotherbikeshed</code> like the other RFC used <code>from_ok</code> and <code>from_error</code>.</p>",
        "id": 222958113,
        "sender_full_name": "scottmcm",
        "timestamp": 1610770251
    },
    {
        "content": "<p>continue confused me because I connected it to <code>continue</code> in loops</p>",
        "id": 223061315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1610915206
    },
    {
        "content": "<p>particularly given the use of the word <code>break</code></p>",
        "id": 223061321,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1610915216
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> For methods, associated types, or both?</p>",
        "id": 223062669,
        "sender_full_name": "scottmcm",
        "timestamp": 1610917030
    },
    {
        "content": "<p>I think it confused me for all of them, personally, because I also connected it to loops</p>",
        "id": 223062837,
        "sender_full_name": "simulacrum",
        "timestamp": 1610917289
    }
]