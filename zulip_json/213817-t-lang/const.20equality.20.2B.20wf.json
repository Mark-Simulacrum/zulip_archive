[
    {
        "content": "<p><a href=\"https://hackmd.io/OZG_XiLFRs2Xmw5s39jRzA?view\">https://hackmd.io/OZG_XiLFRs2Xmw5s39jRzA?view</a></p>\n<p>I tried to make a quick design doc for const wf bounds and equality, not sure what to do with this <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 205628249,
        "sender_full_name": "lcnr",
        "timestamp": 1596221755
    },
    {
        "content": "<p>Is this too complex for a lang MCP?</p>",
        "id": 205628456,
        "sender_full_name": "lcnr",
        "timestamp": 1596221873
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"256759\">@boats</span></p>",
        "id": 205628540,
        "sender_full_name": "lcnr",
        "timestamp": 1596221902
    },
    {
        "content": "<p>A huge thanks to <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> for designing this with me in <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/const.20wf.20bounds.20implementation\">https://rust-lang.zulipchat.com/#narrow/stream/146212-t-compiler.2Fconst-eval/topic/const.20wf.20bounds.20implementation</a>. The good here was made thanks to him and errors are my own <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span></p>",
        "id": 205628864,
        "sender_full_name": "lcnr",
        "timestamp": 1596222108
    },
    {
        "content": "<p>This also doesn't really talk about how we can implement this, for that a good summary might be <a href=\"https://hackmd.io/z7LKv6WKRkiw2WC7KDkvYw#Implementation\">https://hackmd.io/z7LKv6WKRkiw2WC7KDkvYw#Implementation</a></p>",
        "id": 205630147,
        "sender_full_name": "lcnr",
        "timestamp": 1596222863
    },
    {
        "content": "<p>I'm not sure if an MCP is needed if it's kind of \"part of const generics\", but this is great regardless</p>",
        "id": 205632715,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596224234
    },
    {
        "content": "<p>I'll skim over it</p>",
        "id": 205632741,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596224252
    },
    {
        "content": "<p>the only design question I have is if we should invent placeholder syntax from the start, because untangling the constants in the where bounds from the types they are in seems messy and fragile (unless placeholder syntax means <code>[(), N]</code> where <code>N</code> can be any expression, so we just look for arrays of unit element type).</p>",
        "id": 205640894,
        "sender_full_name": "oli",
        "timestamp": 1596229109
    },
    {
        "content": "<p>\"placeholder\" syntax?</p>",
        "id": 205640936,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596229145
    },
    {
        "content": "<p>well... there were ideas like <code>where {some expression}</code> or <code>where (some expression)</code></p>",
        "id": 205640976,
        "sender_full_name": "oli",
        "timestamp": 1596229166
    },
    {
        "content": "<p>which is sufficiently different from type syntax so we can just dump anon consts in where bounds</p>",
        "id": 205640996,
        "sender_full_name": "oli",
        "timestamp": 1596229181
    },
    {
        "content": "<p>but for an MVP using <code>[(); N]:</code> seems totally fine to me, so I we can ignore this</p>",
        "id": 205641060,
        "sender_full_name": "oli",
        "timestamp": 1596229205
    },
    {
        "content": "<p>Well, at least my idea was to just look at all anon consts in the public api for this</p>",
        "id": 205641082,
        "sender_full_name": "lcnr",
        "timestamp": 1596229226
    },
    {
        "content": "<p>that's the part that worries me ^^</p>",
        "id": 205641095,
        "sender_full_name": "oli",
        "timestamp": 1596229237
    },
    {
        "content": "<p>that's a very open list of things</p>",
        "id": 205641107,
        "sender_full_name": "oli",
        "timestamp": 1596229249
    },
    {
        "content": "<p>I don't want to spend time caring about syntax here <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 205641144,
        "sender_full_name": "lcnr",
        "timestamp": 1596229279
    },
    {
        "content": "<p>using the signature and some very explicit things seems ok, but if you start walking everything in the where bounds, idk what kind of implicit things we will encounter</p>",
        "id": 205641150,
        "sender_full_name": "oli",
        "timestamp": 1596229286
    },
    {
        "content": "<p>yea, that's why I mean \"don't search recursively, just grab empty bounds on arrays of unit element type and use their length constants\"</p>",
        "id": 205641182,
        "sender_full_name": "oli",
        "timestamp": 1596229316
    },
    {
        "content": "<p>if we don't have support for automatic detection of constants in the signature in the MVP that's totally fine</p>",
        "id": 205641237,
        "sender_full_name": "oli",
        "timestamp": 1596229333
    },
    {
        "content": "<p>also fine with me, don't think that's the interesting part here :)</p>",
        "id": 205641276,
        "sender_full_name": "lcnr",
        "timestamp": 1596229369
    },
    {
        "content": "<p>we may want to look into syntax before stabilizing this, but that's still quite far in the future</p>",
        "id": 205641325,
        "sender_full_name": "lcnr",
        "timestamp": 1596229428
    },
    {
        "content": "<p>as we depend on lazy norm for that</p>",
        "id": 205641383,
        "sender_full_name": "lcnr",
        "timestamp": 1596229450
    },
    {
        "content": "<p>which might be annoying to actually enable by default</p>",
        "id": 205641400,
        "sender_full_name": "lcnr",
        "timestamp": 1596229466
    },
    {
        "content": "<p>ok, so I guess from the feedback: impl it and keep the design document somewhere visible in the tracking issue?</p>",
        "id": 205641543,
        "sender_full_name": "oli",
        "timestamp": 1596229566
    },
    {
        "content": "<blockquote>\n<p>because untangling the constants in the where bounds from the types they are in seems messy and fragile</p>\n</blockquote>\n<p>a small note here, I don't actually think this will be either messy or fragile, as it's probably \"just\" a <code>TypeVisitor</code>, but we will see that when implementing this</p>",
        "id": 205641544,
        "sender_full_name": "lcnr",
        "timestamp": 1596229567
    },
    {
        "content": "<p>I'm not worried about missing things, I'm worried about the <code>TypeVisitor</code> picking up things that we did not intend it to pick up</p>",
        "id": 205641577,
        "sender_full_name": "oli",
        "timestamp": 1596229596
    },
    {
        "content": "<p>do you have something specific in mind here, probably something like type aliases and stuff?</p>",
        "id": 205641619,
        "sender_full_name": "lcnr",
        "timestamp": 1596229636
    },
    {
        "content": "<p>or implied bounds?</p>",
        "id": 205641631,
        "sender_full_name": "lcnr",
        "timestamp": 1596229646
    },
    {
        "content": "<p>I was thinking generator or closure substs</p>",
        "id": 205641638,
        "sender_full_name": "oli",
        "timestamp": 1596229650
    },
    {
        "content": "<p>or associated types of trait bounds that aren't mentioned</p>",
        "id": 205641667,
        "sender_full_name": "oli",
        "timestamp": 1596229671
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 205641790,
        "sender_full_name": "lcnr",
        "timestamp": 1596229759
    }
]