[
    {
        "content": "<p>The conversation about some lints not always mattering (and related things like how some lints disable themselves in macro-generated code) made me think about the possibility of a <code>generated_code</code> attribute.</p>\n<p>So if you generate an rs file (like <a href=\"https://github.com/rust-lang/rust/blob/master/library/core/src/unicode/printable.rs#L1-L2\">https://github.com/rust-lang/rust/blob/master/library/core/src/unicode/printable.rs#L1-L2</a> , or bindgen, or protobuf, or whatever) you could stick a <code>#![generated_code]</code> at the top, rather than potentially needing to <code>allow</code> a long and changing list of things.  For example, the non-standard style lints could completely ignore it, clippy's style category could ignore it, rustfmt could know not to look at it, etc.</p>\n<p>Thoughts?  I suppose one easier alternative would be to just add a lint category, so you could allow a bunch of stuff at once, and we could add new lints to that category as part of checking new things, if they're just stylistic.</p>",
        "id": 277672429,
        "sender_full_name": "scottmcm",
        "timestamp": 1649035782
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> I'd be in favor of the concept, though I think there are still <em>some</em> lints I'd want to keep enabled for such code.</p>",
        "id": 277673379,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1649037248
    },
    {
        "content": "<p>I think there are a couple of kinds of generated code, and I wonder if we should distinguish between them.</p>",
        "id": 277673392,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1649037269
    },
    {
        "content": "<p>There's generated code for bindings, where it's appropriate to disable naming lints.</p>",
        "id": 277673414,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1649037293
    },
    {
        "content": "<p>But for other kinds of generated code, it may still be appropriate to keep the naming lints.</p>",
        "id": 277673426,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1649037311
    },
    {
        "content": "<p>Aside: I wonder if we should just make <code>extern \"C\" functionNameHere(...);</code> always disable naming lints? In general, if you're referencing an extern function, you probably don't get to pick the name.</p>",
        "id": 277673472,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1649037362
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/idea.3A.20a.20.60.23!.5Bgenerated_code.5D.60.20attribute/near/277673379\">said</a>:</p>\n<blockquote>\n<p>I think there are still <em>some</em> lints I'd want to keep enabled for such code.</p>\n</blockquote>\n<p>Absolutely.  Especially deny-by-default correctness lints we would presumably still want on.</p>",
        "id": 277673503,
        "sender_full_name": "scottmcm",
        "timestamp": 1649037373
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/idea.3A.20a.20.60.23!.5Bgenerated_code.5D.60.20attribute/near/277673472\">said</a>:</p>\n<blockquote>\n<p>In general, if you're referencing an extern function, you probably don't get to pick the name.</p>\n</blockquote>\n<p>Looks like we already don't lint there: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=3108f182ed84a85d87f32756c9a9d137\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=3108f182ed84a85d87f32756c9a9d137</a></p>",
        "id": 277673531,
        "sender_full_name": "scottmcm",
        "timestamp": 1649037438
    },
    {
        "content": "<p>Oh, nice. For some reason I thought we did, given all the lints I see disabled in FFI code and bindgen-generated code and similar.</p>",
        "id": 277673547,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1649037478
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/idea.3A.20a.20.60.23!.5Bgenerated_code.5D.60.20attribute/near/277673426\">said</a>:</p>\n<blockquote>\n<p>But for other kinds of generated code, it may still be appropriate to keep the naming lints.</p>\n</blockquote>\n<p>I wonder how much it'd be handled by</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">blah</span><span class=\"p\">(</span><span class=\"n\">still_lint_here</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#![generated_code]</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 277673609,
        "sender_full_name": "scottmcm",
        "timestamp": 1649037553
    },
    {
        "content": "<p>If there's a similar <code>#![unfinished_code]</code> attribute and todo!() macro can somehow \"inject\" this attribute it would also be very useful.</p>",
        "id": 277684404,
        "sender_full_name": "Charles Lew",
        "timestamp": 1649050924
    },
    {
        "content": "<p>I think it's great, on a number of occasions i've had to resort to a hack like <code>mod disable_lints { #![allow(...)] use generated; } use disable_lints::*;</code>, which I think would be less of an issue if it was a non-moving target like <code>#![generated_code]</code>.</p>",
        "id": 277692930,
        "sender_full_name": "matt rice",
        "timestamp": 1649058226
    },
    {
        "content": "<p>BTW, there is undocumented <code>#[automatically_derived]</code> attribute that is used for this purpose.</p>",
        "id": 277695766,
        "sender_full_name": "tm",
        "timestamp": 1649059832
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116458\">Charles Lew</span> <a href=\"#narrow/stream/213817-t-lang/topic/idea.3A.20a.20.60.23!.5Bgenerated_code.5D.60.20attribute/near/277684404\">said</a>:</p>\n<blockquote>\n<p>If there's a similar <code>#![unfinished_code]</code> attribute and todo!() macro can somehow \"inject\" this attribute it would also be very useful.</p>\n</blockquote>\n<p>Yes please. clippy especially is very obnoxious when I have code that's obviously incomplete. I just want something that works and clippy wants me to have written the whole program and rigoursly proved it correct.</p>",
        "id": 277714089,
        "sender_full_name": "Connor Horman",
        "timestamp": 1649070045
    },
    {
        "content": "<p>Do you run clippy on <code>ctrl-s</code> or something?</p>",
        "id": 277714411,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1649070283
    },
    {
        "content": "<p>Nah, in CI.</p>",
        "id": 277714556,
        "sender_full_name": "Connor Horman",
        "timestamp": 1649070373
    },
    {
        "content": "<p>(This is on something like <a href=\"https://github.com/LightningCreations/lccc\">https://github.com/LightningCreations/lccc</a>, where getting something fully working would take a few months - or I can finish stuff as it's needed)</p>",
        "id": 277714607,
        "sender_full_name": "Connor Horman",
        "timestamp": 1649070422
    },
    {
        "content": "<p>I run into a lot of similar grumbling due to clippy and picky rustc lints in CI that would be alleviated by a <code>#![unfinished_code]</code>. Currently we have a group of allows that get pasted into files people are working on in a dev branch. It would be nicer to have something with clearer semantic meaning than <code>#![allow(dead_code)]</code> and friends.</p>\n<p>Also voicing my support for <code>#![generated_code]</code> not silencing everything. <code>bindgen</code> generates a lot of UB by default and it's good that rustc complains very loudly about this.</p>",
        "id": 277728664,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1649077974
    },
    {
        "content": "<p>I want this (or something similar) for SNAFU:</p>\n<blockquote>\n<p>I think the problem is that we generate structs for each variant, and each struct has methods and/or trait implementations which generate that variant, which means that the variant isn't unused.</p>\n</blockquote>\n<blockquote>\n<p>I think that the struct itself isn't marked as unused because nothing generated by a procedural macro is marked as unused. I don't know of a way to indicate otherwise.</p>\n</blockquote>\n<p>See also <a href=\"https://github.com/rust-lang/rust/issues/47851\">impls should not inhibit the unused_item lint #47851</a></p>",
        "id": 277731650,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1649079454
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"352985\">tm</span> <a href=\"#narrow/stream/213817-t-lang/topic/idea.3A.20a.20.60.23!.5Bgenerated_code.5D.60.20attribute/near/277695766\">said</a>:</p>\n<blockquote>\n<p>BTW, there is undocumented <code>#[automatically_derived]</code> attribute that is used for this purpose.</p>\n</blockquote>\n<p>It is documented here: <a href=\"https://doc.rust-lang.org/nightly/reference/attributes/derive.html#the-automatically_derived-attribute\">https://doc.rust-lang.org/nightly/reference/attributes/derive.html#the-automatically_derived-attribute</a></p>",
        "id": 277754724,
        "sender_full_name": "Eric Huss",
        "timestamp": 1649088604
    },
    {
        "content": "<p>just as a note, I'd still like to run rustfmt on my generated code.</p>",
        "id": 277812215,
        "sender_full_name": "Lokathor",
        "timestamp": 1649118554
    },
    {
        "content": "<p>FWIW, on the topic of formatting generated code, there is also <a href=\"https://docs.rs/prettyplease\">https://docs.rs/prettyplease</a> —or <a href=\"https://crates.io/crates/prettyplease-cli\">https://crates.io/crates/prettyplease-cli</a> as a basic standalone cli wrapper. (although it will crash on certain Rust code, since <a href=\"https://github.com/dtolnay/syn/issues/1143\">there is Rust code that <code>syn</code> is unable to parse</a>)</p>",
        "id": 277914146,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1649179409
    },
    {
        "content": "<p>I don't use <code>syn</code> during my code generation.</p>\n<p>I just want to be able to run rustfmt on the file</p>",
        "id": 277924873,
        "sender_full_name": "Lokathor",
        "timestamp": 1649183771
    }
]