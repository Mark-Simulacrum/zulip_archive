[
    {
        "content": "<p>Opening this topic to follow up with <span class=\"user-mention\" data-user-id=\"295632\">@Diggsey</span></p>",
        "id": 241296919,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622657331
    },
    {
        "content": "<p>I was saying that we were looking for a different term from Thunk, and they asked if I had a term in mind :)</p>",
        "id": 241296950,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622657347
    },
    {
        "content": "<p>I think that for me I strongly associate \"thunk\" with lazy evaluation, though it's also used in many ways</p>",
        "id": 241296978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622657361
    },
    {
        "content": "<p>I'd probably call this case -- adapting or putting advice around a function -- a \"shim\" but I don't think that's a standard terminology</p>",
        "id": 241297051,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622657389
    },
    {
        "content": "<p>maybe just \"adapter thunk\"?</p>",
        "id": 241297075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622657399
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> did you have an alternate suggestion?</p>",
        "id": 241297138,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622657413
    },
    {
        "content": "<p>I also mentioned that it'd be great to have some examples of how such a function could be used</p>",
        "id": 241297209,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622657449
    },
    {
        "content": "<p>Yeah, I can come up with an example - I guess it depends how \"real\" you want :)</p>",
        "id": 241297459,
        "sender_full_name": "Diggsey",
        "timestamp": 1622657550
    },
    {
        "content": "<p>I think one aspect of it is that it's not definitively clear to me that the majority of the solution space being explored is centered around specifically shims/trampolines/thunks, but rather somehow \"calling a function type\" (rather than a function value). I might be wrong about this notion though, it's not fully formed.</p>",
        "id": 241297524,
        "sender_full_name": "simulacrum",
        "timestamp": 1622657570
    },
    {
        "content": "<p>a lot of the practical cases involve interactions with obscure C APIs...</p>",
        "id": 241297527,
        "sender_full_name": "Diggsey",
        "timestamp": 1622657570
    },
    {
        "content": "<p>I think having at least one really practical example for this note in particular, even if that means \"with this particular c library\", is very good</p>",
        "id": 241297680,
        "sender_full_name": "simulacrum",
        "timestamp": 1622657602
    },
    {
        "content": "<p>that would indeed be helpful</p>",
        "id": 241297989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622657656
    },
    {
        "content": "<p>I agree with trampoline as a possible name too, although I tend to think of that as a function that takes a fn pointer and calls it</p>",
        "id": 241298029,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622657670
    },
    {
        "content": "<p>yeah, this is why I feel like it's not really about function values to some extent</p>",
        "id": 241298068,
        "sender_full_name": "simulacrum",
        "timestamp": 1622657688
    },
    {
        "content": "<p>\"static thunk\"</p>",
        "id": 241298106,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622657703
    },
    {
        "content": "<p>\"derived functions\"?</p>",
        "id": 241298416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622657862
    },
    {
        "content": "<p>(it's one function that is <em>derived</em> from another)</p>",
        "id": 241298430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622657872
    },
    {
        "content": "<p>\"advised functions\"? (referencing AOT)</p>",
        "id": 241298455,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622657882
    },
    {
        "content": "<p>at least to me, all of these - \"thunks\", \"trampolines\" etc are implied to be static - I've only ever seen this terminology used with compiler-generated code, where the compiler knows the address of the target function, and it's generating a \"trampoline\" that's specific to that function</p>",
        "id": 241298495,
        "sender_full_name": "Diggsey",
        "timestamp": 1622657888
    },
    {
        "content": "<p>if the target function was passed in, then the thunk/trampoline/etc wouldn't be needed in the first place</p>",
        "id": 241298562,
        "sender_full_name": "Diggsey",
        "timestamp": 1622657914
    },
    {
        "content": "<p>(because that code could just live in a library, it wouldn't need to be generated by the compiler)</p>",
        "id": 241298831,
        "sender_full_name": "Diggsey",
        "timestamp": 1622658008
    },
    {
        "content": "<p>I'm ok with thunks, although I agree with the sentiment that this doesn't quite <em>feel</em> like what I think of as a thunk, which remains a kind of \"continuation\"</p>",
        "id": 241299350,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622658263
    },
    {
        "content": "<p>How do you feel about the term trampoline, <span class=\"user-mention\" data-user-id=\"295632\">@Diggsey</span> ?</p>",
        "id": 241299384,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622658283
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Trampoline_(computing)\">https://en.wikipedia.org/wiki/Trampoline_(computing)</a></p>",
        "id": 241299432,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622658309
    },
    {
        "content": "<blockquote>\n<p>As used in some Lisp implementations, a trampoline is a loop that iteratively invokes thunk-returning functions (continuation-passing style). A single trampoline suffices to express all control transfers of a program; a program so expressed is trampolined, or in trampolined style; converting a program to trampolined style is trampolining. Programmers can use trampolined functions to implement tail-recursive function calls in stack-oriented programming languages.[1]</p>\n</blockquote>",
        "id": 241299458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622658323
    },
    {
        "content": "<p>this is the usage I am thinking of</p>",
        "id": 241299463,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622658326
    },
    {
        "content": "<blockquote>\n<p>When interfacing pieces of code with incompatible calling conventions, a trampoline is used to convert the caller's convention into the callee's convention.</p>\n</blockquote>",
        "id": 241299492,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622658341
    },
    {
        "content": "<p>but this seems very similar</p>",
        "id": 241299499,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622658344
    },
    {
        "content": "<p>I'd be happy with trampoline</p>",
        "id": 241299931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622658528
    },
    {
        "content": "<p>I'm honestly fine with thunks, as long as there's a clear definition and example that includes \"how is this called\".</p>",
        "id": 241313541,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622664907
    },
    {
        "content": "<p>FWIW: I personally find trampoline or generic shim to match best the idea of deriving a function out of another, <em>with no captures</em> / environment involved. Thunk makes me think of a <code>dyn</code> closure (with a pinch of boxing), I don't know why <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 241315589,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1622665908
    },
    {
        "content": "<p>I'm happy with either</p>",
        "id": 241319357,
        "sender_full_name": "Diggsey",
        "timestamp": 1622667686
    },
    {
        "content": "<p>I updated the PR with the suggestions and added an example.</p>",
        "id": 241450989,
        "sender_full_name": "Diggsey",
        "timestamp": 1622753462
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"295632\">@Diggsey</span> awesome, sorry for the radio silence! returning to this now</p>",
        "id": 245084011,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625598090
    }
]