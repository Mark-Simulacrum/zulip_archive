[
    {
        "content": "<p>I am confused as why the former doesn't work but the latter does:<br>\n<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=7dbaa22e643951cd337500e197c779da\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=7dbaa22e643951cd337500e197c779da</a><br>\n<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=a09315d3b59f9d39791f69e301ec8a78\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=a09315d3b59f9d39791f69e301ec8a78</a></p>",
        "id": 260595052,
        "sender_full_name": "Jasmine Burnside",
        "timestamp": 1636318463
    },
    {
        "content": "<p><code>Self</code> isn't an alias. It is treated as a generic parameter that just happens to have the same type as <code>Bar</code>.</p>",
        "id": 260597103,
        "sender_full_name": "Eric Huss",
        "timestamp": 1636321438
    },
    {
        "content": "<p>Why isn't it an alias?</p>",
        "id": 260597168,
        "sender_full_name": "Jasmine Burnside",
        "timestamp": 1636321511
    },
    {
        "content": "<p>I'm not sure if I can answer that well. Imagine if your <code>Bar</code> was generic as in <code>Bar&lt;T&gt;</code>, then <code>Self</code> would depend on the type of T. When <code>Self</code> is referenced inside another item like a <code>static</code>, there wouldn't be just one <code>Self</code> that it was referring to.  (Not to mention, nested uses of <code>Self</code> could get really confusing.)</p>",
        "id": 260599496,
        "sender_full_name": "Eric Huss",
        "timestamp": 1636324519
    },
    {
        "content": "<p>that doesn't make sense Self would refer to a single <code>Bar&lt;T&gt;</code> instance correct? you don't have to do <code>Self&lt;T&gt;</code></p>",
        "id": 260600010,
        "sender_full_name": "Jasmine Burnside",
        "timestamp": 1636325251
    },
    {
        "content": "<p>nested items couldn't refer to generic parameters. Self may refer to generic parameters though.</p>",
        "id": 260601459,
        "sender_full_name": "Gary Guo",
        "timestamp": 1636327022
    },
    {
        "content": "<p>Well shouldn't Self resolve to a single type no matter what?</p>",
        "id": 260602038,
        "sender_full_name": "Jasmine Burnside",
        "timestamp": 1636327743
    },
    {
        "content": "<p>How?</p>",
        "id": 260608035,
        "sender_full_name": "Gary Guo",
        "timestamp": 1636336678
    },
    {
        "content": "<p>You can use Self in a generic impl.</p>",
        "id": 260608074,
        "sender_full_name": "Gary Guo",
        "timestamp": 1636336689
    },
    {
        "content": "<p>but not as a Generic arg. and Self should refer to a concrete type no?</p>",
        "id": 260610337,
        "sender_full_name": "Jasmine Burnside",
        "timestamp": 1636340002
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">empty</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"kt\">str</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">FOO</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">empty</span>::<span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 260610403,
        "sender_full_name": "Gary Guo",
        "timestamp": 1636340125
    },
    {
        "content": "<p>What concrete type is <code>Self</code> referring to here?</p>",
        "id": 260610405,
        "sender_full_name": "Gary Guo",
        "timestamp": 1636340133
    },
    {
        "content": "<p>const/static are items. Since they're not associated items here, they don't have access to <code>Self</code>.</p>",
        "id": 260611261,
        "sender_full_name": "Charles Lew",
        "timestamp": 1636341252
    },
    {
        "content": "<p>You can imagine them defined within an imaginary module that has the scope of the function body.</p>",
        "id": 260611374,
        "sender_full_name": "Charles Lew",
        "timestamp": 1636341416
    },
    {
        "content": "<p>Foo&lt;T&gt; isn't yet concrete in that example.  it would refer to Foo&lt;T&gt; when T is provided</p>",
        "id": 260652650,
        "sender_full_name": "Jasmine Burnside",
        "timestamp": 1636376207
    },
    {
        "content": "<p>You can't have generic statics in Rust, for incidentally similar reasons to <code>dyn Trait</code>s not supporting generic methods: in both cases the compiler would need to know, at that point in the compilation, of all the possible instantiations of that generic, which is problematic to say the least given that such instantiations could stem from downstream / dependent crates.</p>\n<p>More generally, as <span class=\"user-mention\" data-user-id=\"303710\">@Gary Guo</span> pointed out, you can only have items that depend on the generics introduced by an <code>impl</code> block if they are written directly inside that block, in a non-nested fashion, since that makes those items be <em>associated</em> items (<code>Foo::&lt;T&gt;::assoc_item</code>). The moment something is written elsewhere or in a nested fashion (such as a type / const / static def inside a function's body), the \"being inside a generic context / scope\" is lost, even if <em>syntactically</em> it does look like we are inside that scope:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">FOO</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">â€¦</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>is actually equivalent to:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"n\">kind</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"n\">accessible</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">Foo</span>::<span class=\"n\">foo</span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"na\">s</span><span class=\"w\"> </span><span class=\"n\">body</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">FOO</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">â€¦</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Which is why even if we replaced that <code>static</code> with a <code>const</code> (those can be generic / associated items in a generic impl), the code would still not compile, since the <code>const</code> would be defined <em>outside</em> the generic context.</p>",
        "id": 260654272,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1636377018
    }
]