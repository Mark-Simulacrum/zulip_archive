[
    {
        "content": "<p>I noticed a curious interaction today that I can't find a documented rationale for. Default type parameters don't work with inferred types/type holes, <code>_</code>. See the following program:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nc\">HashMap</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)].</span><span class=\"n\">into_iter</span><span class=\"p\">().</span><span class=\"n\">collect</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// ok</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"nc\">HashMap</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)].</span><span class=\"n\">into_iter</span><span class=\"p\">().</span><span class=\"n\">collect</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// fails</span>\n</code></pre></div>\n<p>the first line omits the final type parameter, and gets inferred properly. the second line explicitly tells the compiler to infer the parameter, and gives a type inference error. is this intended?</p>",
        "id": 235025879,
        "sender_full_name": "bstrie",
        "timestamp": 1618700925
    },
    {
        "content": "<p>reminder that HashMap is defined as <code>pub struct HashMap&lt;K, V, S = RandomState&gt; {</code></p>",
        "id": 235025950,
        "sender_full_name": "bstrie",
        "timestamp": 1618700992
    },
    {
        "content": "<p>It's definitely how default type parameters are spec'd to work.</p>",
        "id": 235030019,
        "sender_full_name": "scottmcm",
        "timestamp": 1618705570
    },
    {
        "content": "<p><code>HashMap&lt;_, _&gt;</code> is explicitly <code>HashMap&lt;_, _, RandomState&gt;</code>, not another <code>_</code>.</p>",
        "id": 235030115,
        "sender_full_name": "scottmcm",
        "timestamp": 1618705690
    },
    {
        "content": "<p>I think it's sortof stuck that way, because otherwise adding defaults would make everything break with \"type argument not specified\" in existing code.</p>",
        "id": 235030206,
        "sender_full_name": "scottmcm",
        "timestamp": 1618705804
    },
    {
        "content": "<p>I think <code>HashMap&lt;_, _, _&gt;</code> should also fall back to the explicit default in the type param, though</p>",
        "id": 235030533,
        "sender_full_name": "simulacrum",
        "timestamp": 1618706105
    },
    {
        "content": "<p>how would you express \"use type inference\" then?</p>",
        "id": 235031288,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618706968
    },
    {
        "content": "<p>hm, well, I mean <em>fall back</em></p>",
        "id": 235031298,
        "sender_full_name": "simulacrum",
        "timestamp": 1618707000
    },
    {
        "content": "<p>just like <code>let i: _ = 3;</code> falls back to i32, but can use some other type too?</p>",
        "id": 235031348,
        "sender_full_name": "simulacrum",
        "timestamp": 1618707016
    },
    {
        "content": "<p>so not sure I understand the question</p>",
        "id": 235031362,
        "sender_full_name": "simulacrum",
        "timestamp": 1618707028
    },
    {
        "content": "<p>I definitely think some sort of hinting like that would be great.  We've wanted a way to nudge indexing to <code>usize</code> (so we can also allow more widths) for a while, for example.  Dunno exactly what that should look like, though.</p>",
        "id": 235036814,
        "sender_full_name": "scottmcm",
        "timestamp": 1618713279
    },
    {
        "content": "<p>Hasn't \"fallback to default type param\" been discussed for years? Or am I imagining that?</p>",
        "id": 235054980,
        "sender_full_name": "RalfJ",
        "timestamp": 1618733706
    },
    {
        "content": "<p>e.g. it is mentioned here <a href=\"https://github.com/rust-lang/rust/issues/27242\">https://github.com/rust-lang/rust/issues/27242</a></p>",
        "id": 235055010,
        "sender_full_name": "RalfJ",
        "timestamp": 1618733759
    },
    {
        "content": "<p>yeah I think it has been</p>",
        "id": 235076565,
        "sender_full_name": "simulacrum",
        "timestamp": 1618756904
    }
]