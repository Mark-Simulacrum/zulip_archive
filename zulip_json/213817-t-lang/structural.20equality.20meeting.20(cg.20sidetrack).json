[
    {
        "content": "<blockquote>\n<p>make <code>StructuralEq</code> recursive and autogenerate <code>T: StructuralEq</code> bounds for all <code>T</code> that are used in const generic parameters' types like <code>fn foo&lt;T, const C: T&gt;</code>.</p>\n</blockquote>\n<p>that seems very difficult to get right.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">const</span><span class=\"w\"> </span><span class=\"nb\">Default</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">bar</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">T</span>::<span class=\"n\">default</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"nc\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>how do we add the <code>T: StructuralEq</code> bound to <code>foo</code>? Do we fail to compile, if so, how do we modify this snippet to make it compile?</p>",
        "id": 248622148,
        "sender_full_name": "lcnr",
        "timestamp": 1628262267
    },
    {
        "content": "<p>hmm... true</p>",
        "id": 248635085,
        "sender_full_name": "oli",
        "timestamp": 1628267855
    },
    {
        "content": "<p>that doesn't work nicely</p>",
        "id": 248635092,
        "sender_full_name": "oli",
        "timestamp": 1628267859
    },
    {
        "content": "<p>yea I think we need to expose the trait for that so users can write it</p>",
        "id": 248635232,
        "sender_full_name": "oli",
        "timestamp": 1628267932
    },
    {
        "content": "<p>could still make implementing it behind a feature gate as an intermediate step</p>",
        "id": 248635268,
        "sender_full_name": "oli",
        "timestamp": 1628267948
    }
]