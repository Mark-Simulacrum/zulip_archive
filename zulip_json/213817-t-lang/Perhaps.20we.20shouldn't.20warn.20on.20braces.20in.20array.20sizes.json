[
    {
        "content": "<p>If you have an expression in a const generic you <em>must</em> put braces, <code>{ 32 * 32 }</code>.<br>\nIf you have an expression in an array size you <em>can</em> put braces, but you're warned against doing this.</p>\n<p>Perhaps we should stop warning against putting the braces in array sizes (not remove the lint, just make it allow by default).</p>",
        "id": 262257172,
        "sender_full_name": "Lokathor",
        "timestamp": 1637524288
    },
    {
        "content": "<p>Some thoughts from various people in the meeting:</p>\n<ul>\n<li>\n<p>Given that we lint on things like <code>if (true || true) {</code> saying that the parens are unnecessary, it seems like linting against the braces in an array size are consistent with that precedent.</p>\n</li>\n<li>\n<p>It's possible that this kind of lint in general is something that rustc shouldn't be doing, as it's rarely about correctness.  (Nor about things that matter to users of the crate, like the naming ones -- though the naming lints are also sometimes correctness-related due to things with patterns.)</p>\n</li>\n<li>\n<p>There was a conversation about macros, and that this probably shouldn't lint in macro-generated code.  It probably already doesn't lint in the expansion for when the whole <code>{ 32 * 32 }</code> is an <code>expr</code> (as opposed to <code>tt</code>s).</p>\n</li>\n<li>\n<p>The lint does have some cases where it decides that parens should not be linted about even though they're not strictly necessary, like in <code>let x = (2 * 3) + 1;</code>.  So it would be possible to decide that this is one of those cases.  (Though precedence clarification feels different from type-vs-expr clarification to scottmcm personally.)</p>\n</li>\n</ul>",
        "id": 262495149,
        "sender_full_name": "scottmcm",
        "timestamp": 1637692159
    }
]