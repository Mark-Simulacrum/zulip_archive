[
    {
        "content": "<p>So I was talking to <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> about the tooling that they built for the compiler team prioritization working group. I want to adapt it to generate our triage meeting agenda</p>",
        "id": 205498868,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596125590
    },
    {
        "content": "<p>Actually <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> you mentioned maybe you can help :P</p>",
        "id": 205498892,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596125601
    },
    {
        "content": "<p><a href=\"https://paper.dropbox.com/doc/T-Lang-Meeting-Current-meeting--A4uEnWRPEsgqDN2i3QzvNlyXAg-nRfrSxCbfeo9q7fEYogZQ#:uid=484128051656989512189486&amp;h2=Agenda\">this section</a> of the dropbox paper doc describes our current agenda, which is just a bunch of queries I think we could readily manage using the triagebot infrastructure that you already built up</p>",
        "id": 205499032,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596125644
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/meeting.20agendas/near/205498892\">said</a>:</p>\n<blockquote>\n<p>Actually <span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> you mentioned maybe you can help :P</p>\n</blockquote>\n<p>definitely, do not waste time trying to understand the code and adapting things and all that :)</p>",
        "id": 205501903,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1596127084
    },
    {
        "content": "<p>what I think I could do is to setup a structure on triagebot that could work for you and then you guys adjust it to your specific needs and write the agenda template</p>",
        "id": 205502100,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1596127199
    },
    {
        "content": "<p><em>Triagebot is taking over</em></p>",
        "id": 205506093,
        "sender_full_name": "LÃ©o Lanteri Thauvin",
        "timestamp": 1596129463
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> hey, just had a couple of minutes and did something ...</p>",
        "id": 205512080,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1596132466
    },
    {
        "content": "<p>probably has something wrong because I did it quick and dirty</p>",
        "id": 205512163,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1596132487
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>[santiago@galago triagebot (add-lang-agenda-structure)]$ cargo run --bin lang-agenda\n   Compiling triagebot v0.1.0 (/home/santiago/src/oss/triagebot)\n    Finished dev [unoptimized + debuginfo] target(s) in 7.47s\n     Running `target/debug/lang-agenda`\nsetting logger\n# T-lang meeting agenda\n\n## Newly created RFCs\n  - &quot;Objects should be upcastable to supertraits&quot; [rfcs#2765](https://github.com/rust-lang/rfcs/issues/2765)\n  - &quot;Consider infering floats from integer literals&quot; [rfcs#260](https://github.com/rust-lang/rfcs/issues/260)\n  - &quot;newtype / generalized newtype deriving&quot; [rfcs#261](https://github.com/rust-lang/rfcs/issues/261)\n  - &quot;RFC: Extend pattern syntax&quot; [rfcs#263](https://github.com/rust-lang/rfcs/issues/263)\n  - &quot;FromLiteral&quot; [rfcs#265](https://github.com/rust-lang/rfcs/issues/265)\n  - &quot;Reintroduce &#39;do&#39; keyword as sugar for nested match statements&quot; [rfcs#267](https://github.com/rust-lang/rfcs/issues/267)\n  - &quot;RFC: Uninitialized Pointers&quot; [rfcs#268](https://github.com/rust-lang/rfcs/issues/268)\n  - &quot;RFC: Coercible and HasPrefix for Zero Cost Coercions&quot; [rfcs#270](https://github.com/rust-lang/rfcs/issues/270)\n  - &quot;RFC: Private trait items&quot; [rfcs#275](https://github.com/rust-lang/rfcs/issues/275)\n  - &quot;RFC: Enum trait&quot; [rfcs#284](https://github.com/rust-lang/rfcs/issues/284)\n  - &quot;`#[no_override]` for default methods&quot; [rfcs#291](https://github.com/rust-lang/rfcs/issues/291)\n  - &quot;Anonymous sum types&quot; [rfcs#294](https://github.com/rust-lang/rfcs/issues/294)\n  - &quot;RFC: Allow inference of argument/return value in trait impls&quot; [rfcs#309](https://github.com/rust-lang/rfcs/issues/309)\n  - &quot;Idea: &quot;compact&quot; enums and structs&quot; [rfcs#311](https://github.com/rust-lang/rfcs/issues/311)\n  - &quot;support bit fields for C interop&quot; [rfcs#314](https://github.com/rust-lang/rfcs/issues/314)\n  - &quot;Cross-memory model data&quot; [rfcs#318](https://github.com/rust-lang/rfcs/issues/318)\n  - &quot;Wishlist: functions with keyword args, optional args, and/or variable-arity argument (varargs) lists&quot; [rfcs#323](https://github.com/rust-lang/rfcs/issues/323)\n  - &quot;Higher kinded polymorphism&quot; [rfcs#324](https://github.com/rust-lang/rfcs/issues/324)\n  - &quot;Add support for bit data&quot; [rfcs#346](https://github.com/rust-lang/rfcs/issues/346)\n  - &quot;Allow nested C-like enums with user control over layout&quot; [rfcs#347](https://github.com/rust-lang/rfcs/issues/347)\n  - &quot;Make `bool` an `enum`&quot; [rfcs#348](https://github.com/rust-lang/rfcs/issues/348)\n  - &quot;Efficient code reuse&quot; [rfcs#349](https://github.com/rust-lang/rfcs/issues/349)\n  - &quot;Improve cross-borrowing ergonomics&quot; [rfcs#368](https://github.com/rust-lang/rfcs/issues/368)\n  - &quot;Destructuring assignment&quot; [rfcs#372](https://github.com/rust-lang/rfcs/issues/372)\n  - &quot;Explicit refutable `let`: `let`..`else`&quot; [rfcs#373](https://github.com/rust-lang/rfcs/issues/373)\n  - &quot;Array splicing&quot; [rfcs#374](https://github.com/rust-lang/rfcs/issues/374)\n  - &quot;Draft RFC: variadic generics&quot; [rfcs#376](https://github.com/rust-lang/rfcs/issues/376)\n  - &quot;Unsafe fields&quot; [rfcs#381](https://github.com/rust-lang/rfcs/issues/381)\n  - &quot;Explicit lifetimes&quot; [rfcs#389](https://github.com/rust-lang/rfcs/issues/389)\n  - &quot;implement scope guards, as a syntax ext or language feature&quot; [rfcs#394](https://github.com/rust-lang/rfcs/issues/394)\n  - &quot;UFCS RFC needs to be clearer about method call syntax&quot; [rfcs#395](https://github.com/rust-lang/rfcs/issues/395)\n  - &quot;macro_rules should expose accessors for total iteration count and current iteration number&quot; [rfcs#407](https://github.com/rust-lang/rfcs/issues/407)\n  - &quot;Consider some form of extensible enums&quot; [rfcs#409](https://github.com/rust-lang/rfcs/issues/409)\n  - &quot;How `box` should work&quot; [rfcs#413](https://github.com/rust-lang/rfcs/issues/413)\n  - &quot;&quot;Mutability polymorphism&quot;&quot; [rfcs#414](https://github.com/rust-lang/rfcs/issues/414)\n  - &quot;Garbage collection&quot; [rfcs#415](https://github.com/rust-lang/rfcs/issues/415)\n  - &quot;Support for intrusive data structures and unmoveable types&quot; [rfcs#417](https://github.com/rust-lang/rfcs/issues/417)\n  - &quot;Struct properties&quot; [rfcs#419](https://github.com/rust-lang/rfcs/issues/419)\n  - &quot;More flexible operator overloading&quot; [rfcs#420](https://github.com/rust-lang/rfcs/issues/420)\n  - &quot;Parametrise modules&quot; [rfcs#424](https://github.com/rust-lang/rfcs/issues/424)\n  - &quot;Macros should have an operator type&quot; [rfcs#426](https://github.com/rust-lang/rfcs/issues/426)\n  - &quot;Improve unsafe ergonomics&quot; [rfcs#433](https://github.com/rust-lang/rfcs/issues/433)\n  - &quot;#[deriving(PartialEq, Eq, Show, Clone, Hash, PartialOrd, Ord, Default, Encodable, Decodable)] is too verbose&quot; [rfcs#441](https://github.com/rust-lang/rfcs/issues/441)\n  - &quot;partially initialized structs in local variables, similar to partially moved structs, perhaps should be possible&quot; [rfcs#448](https://github.com/rust-lang/rfcs/issues/448)\n  - &quot;Support &#39;..&#39; syntax in closures&quot; [rfcs#465](https://github.com/rust-lang/rfcs/issues/465)\n  - &quot;Consider making shadowing of type/lifetime parameters a lint&quot; [rfcs#489](https://github.com/rust-lang/rfcs/issues/489)\n  - &quot;Crates should allow private impl of external traits for external structs &quot; [rfcs#493](https://github.com/rust-lang/rfcs/issues/493)\n  - &quot;Match destructuring in alternations should be generic over types&quot; [rfcs#525](https://github.com/rust-lang/rfcs/issues/525)\n  - &quot;rust should support an extract-method refactoring&quot; [rfcs#562](https://github.com/rust-lang/rfcs/issues/562)\n  - &quot;Improve associated type ergonomics&quot; [rfcs#585](https://github.com/rust-lang/rfcs/issues/585)\n  - &quot;unassigned values for enums should be smarter about finding new options&quot; [rfcs#598](https://github.com/rust-lang/rfcs/issues/598)\n  - &quot;Native C++ FFI in the same manner as D&quot; [rfcs#602](https://github.com/rust-lang/rfcs/issues/602)\n  - &quot;Test functions should work when defined inside other functions&quot; [rfcs#612](https://github.com/rust-lang/rfcs/issues/612)\n  - &quot;OpenCL support&quot; [rfcs#614](https://github.com/rust-lang/rfcs/issues/614)\n  - &quot;Allow a minimum complete implementation to be specified for mutually recursive default methods&quot; [rfcs#628](https://github.com/rust-lang/rfcs/issues/628)\n  - &quot;Pattern matching on unsafe pointers doesn&#39;t work&quot; [rfcs#641](https://github.com/rust-lang/rfcs/issues/641)\n  - &quot;Add a lint for shadowed names&quot; [rfcs#660](https://github.com/rust-lang/rfcs/issues/660)\n  - &quot;make runtime library loading safer&quot; [rfcs#661](https://github.com/rust-lang/rfcs/issues/661)\n  - &quot;Encodable trait objects&quot; [rfcs#668](https://github.com/rust-lang/rfcs/issues/668)\n  - &quot;Range types for integers (or refinement types?)&quot; [rfcs#671](https://github.com/rust-lang/rfcs/issues/671)\n  - &quot;Add a macro non-terminal for the interior of a block&quot; [rfcs#672](https://github.com/rust-lang/rfcs/issues/672)\n  - &quot;RFC: Can we make drop glue for recursive types not stack overflow?&quot; [rfcs#686](https://github.com/rust-lang/rfcs/issues/686)\n  - &quot;It&#39;s not possible to get the size of the offset from an arbitrary structure to it&#39;s field.&quot; [rfcs#710](https://github.com/rust-lang/rfcs/issues/710)\n  - &quot;Potential generalization of destructing struct destructuring&quot; [rfcs#713](https://github.com/rust-lang/rfcs/issues/713)\n  - &quot;Attribute for &quot;swapping&quot; types in tests, making dependency injecting easier &quot; [rfcs#714](https://github.com/rust-lang/rfcs/issues/714)\n  - &quot;Add a way to fail the process on `panic!`&quot; [rfcs#715](https://github.com/rust-lang/rfcs/issues/715)\n  - &quot;include! macro fails if included file has top-level inner attributes&quot; [rfcs#752](https://github.com/rust-lang/rfcs/issues/752)\n  - &quot;Add datasort refinements to Rust&quot; [rfcs#754](https://github.com/rust-lang/rfcs/issues/754)\n  - &quot;A macro fragment matcher analogous to right-hand side of a match arm&quot; [rfcs#773](https://github.com/rust-lang/rfcs/issues/773)\n  - &quot;[UR] local storage inside function&quot; [rfcs#795](https://github.com/rust-lang/rfcs/issues/795)\n  - &quot;RFC: Add linear type facility&quot; [rfcs#814](https://github.com/rust-lang/rfcs/issues/814)\n  - &quot;cfg meta variables&quot; [rfcs#831](https://github.com/rust-lang/rfcs/issues/831)\n  - &quot;Conditionally-Revoked Borrows&quot; [rfcs#881](https://github.com/rust-lang/rfcs/issues/881)\n  - &quot;Donât require explicitly initialising zero-sized types&quot; [rfcs#896](https://github.com/rust-lang/rfcs/issues/896)\n  - &quot;Consider tuple iteration&quot; [rfcs#930](https://github.com/rust-lang/rfcs/issues/930)\n  - &quot;More robust treatment of uncaught panics for child threads&quot; [rfcs#946](https://github.com/rust-lang/rfcs/issues/946)\n  - &quot;Ability to pass ownership of unsized types&quot; [rfcs#990](https://github.com/rust-lang/rfcs/issues/990)\n  - &quot;Escape chars for use as separators in macros&quot; [rfcs#991](https://github.com/rust-lang/rfcs/issues/991)\n  - &quot;Extending deref/index with ownership transfer: DerefMove, IndexMove, IndexSet&quot; [rfcs#997](https://github.com/rust-lang/rfcs/issues/997)\n  - &quot;Owned references to contents in an earlier stack frame (`&amp;own`, `&amp;move`, etc)&quot; [rfcs#998](https://github.com/rust-lang/rfcs/issues/998)\n  - &quot;Allow `as` in match statements&quot; [rfcs#1009](https://github.com/rust-lang/rfcs/issues/1009)\n  - &quot;Finally blocks for safer, faster, and clearer unsafe code&quot; [rfcs#1010](https://github.com/rust-lang/rfcs/issues/1010)\n  - &quot;Generic structs with additional fields for certain type constraints&quot; [rfcs#1021](https://github.com/rust-lang/rfcs/issues/1021)\n  - &quot;Serializable Lambda expression&quot; [rfcs#1022](https://github.com/rust-lang/rfcs/issues/1022)\n  - &quot;Allow a trait to implement its parent trait&quot; [rfcs#1024](https://github.com/rust-lang/rfcs/issues/1024)\n  - &quot;Improve the `fn` pointer types&quot; [rfcs#1037](https://github.com/rust-lang/rfcs/issues/1037)\n  - &quot;More flexible coherence rules that permit overlap&quot; [rfcs#1053](https://github.com/rust-lang/rfcs/issues/1053)\n  - &quot;consider changing size of empty enum to usize::MAX&quot; [rfcs#1076](https://github.com/rust-lang/rfcs/issues/1076)\n  - &quot;Design By Contract&quot; [rfcs#1077](https://github.com/rust-lang/rfcs/issues/1077)\n  - &quot;Implement first-class continuations&quot; [rfcs#1082](https://github.com/rust-lang/rfcs/issues/1082)\n</code></pre></div>",
        "id": 205512244,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1596132525
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>  - &quot;Allow safe impls of `unsafe trait` default traits to assert that the implementation exists&quot; [rfcs#1086](https://github.com/rust-lang/rfcs/issues/1086)\n  - &quot;Deterministic parallel execution of native threads&quot; [rfcs#1090](https://github.com/rust-lang/rfcs/issues/1090)\n  - &quot;Extend interior mutability (e.g. Cell) for better composition with other types.&quot; [rfcs#1106](https://github.com/rust-lang/rfcs/issues/1106)\n  - &quot;Trait attribute that asserts no blanket impl will be added&quot; [rfcs#1113](https://github.com/rust-lang/rfcs/issues/1113)\n  - &quot;A trait which is implemented only by raw trait objects&quot; [rfcs#1115](https://github.com/rust-lang/rfcs/issues/1115)\n  - &quot;Allow FRU for types that are Copy OR types that are not Drop&quot; [rfcs#1117](https://github.com/rust-lang/rfcs/issues/1117)\n  - &quot;Relax Trait Coherence rules to allow the implementation of a trait on generic types where the type must impl another trait owned by the current crate&quot; [rfcs#1124](https://github.com/rust-lang/rfcs/issues/1124)\n  - &quot;OIBIT behaviour with primitives (specifically references) doesn&#39;t seem perfected&quot; [rfcs#1132](https://github.com/rust-lang/rfcs/issues/1132)\n  - &quot;Allocator adaptors for building strings and vectors with shared ownership.&quot; [rfcs#1138](https://github.com/rust-lang/rfcs/issues/1138)\n  - &quot;Recursive and unsized enums&quot; [rfcs#1151](https://github.com/rust-lang/rfcs/issues/1151)\n\n## Nominated RFCs\n  - &quot;RFC: Overconstraining and omitting `unsafe` in impls of `unsafe` trait methods&quot; [rfcs#2316](https://github.com/rust-lang/rfcs/pull/2316)\n\n## P-high issues\n  - &quot;Coherence can be bypassed by an indirect impl for a trait object&quot; [rust#57893](https://github.com/rust-lang/rust/issues/57893)\n  - &quot;Lifetime bounds in auto trait impls prevent trait from being implemented on generators&quot; [rust#64552](https://github.com/rust-lang/rust/issues/64552)\n\n## Nominated PRs\n  - &quot;[CRATER] make `ConstEvaluatable` more strict&quot; [rust#74595](https://github.com/rust-lang/rust/pull/74595)\n\n## Nominated issues\n  - &quot;[CRATER] make `ConstEvaluatable` more strict&quot; [rust#74595](https://github.com/rust-lang/rust/pull/74595)\n</code></pre></div>",
        "id": 205512265,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1596132537
    },
    {
        "content": "<p>So many \"new\" RFCs <span aria-label=\"astonished\" class=\"emoji emoji-1f632\" role=\"img\" title=\"astonished\">:astonished:</span><span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 205512684,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596132734
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> right, so ... I think Niko's queries are not 100% complete</p>",
        "id": 205513043,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1596132900
    },
    {
        "content": "<p>my guess is that he checks the full list and figures out quickly which are news</p>",
        "id": 205513080,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1596132918
    },
    {
        "content": "<p>in prioritization-wg we've used two things for that, one was date based queries to check what's new and what's not, but lately we ended using a <code>to-announce</code> label</p>",
        "id": 205513152,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1596132956
    },
    {
        "content": "<p>I've just copied the queries verbatim but this is what I meant with ... I'd leave this up to you people to tweak it :)</p>",
        "id": 205513237,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1596132989
    },
    {
        "content": "<p>I was referring to queries and the template</p>",
        "id": 205513259,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1596133000
    },
    {
        "content": "<p>here lives the code <a href=\"https://github.com/spastorino/triagebot/tree/add-lang-agenda-structure\">https://github.com/spastorino/triagebot/tree/add-lang-agenda-structure</a></p>",
        "id": 205513288,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1596133017
    },
    {
        "content": "<p>and this <a href=\"https://github.com/rust-lang/triagebot/commit/40366c138f08398f741ef6ac12d9c28749616a60\">https://github.com/rust-lang/triagebot/commit/40366c138f08398f741ef6ac12d9c28749616a60</a> is specifically what needs to be done to dump a new agenda</p>",
        "id": 205513344,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1596133038
    },
    {
        "content": "<p>I've said this already but if someone wants to improve the code and move all that repetition to a toml file that's more than welcome :)</p>",
        "id": 205513416,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1596133064
    },
    {
        "content": "<p>it should take me too long but I've been lazy :)</p>",
        "id": 205513441,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1596133078
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> yeah the \"new RFCs\"... well .. that is not right, but that's ok, I can cut it down</p>",
        "id": 205524788,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596138955
    },
    {
        "content": "<p>and eventually I think that will be less relevant as we get a better procedure</p>",
        "id": 205524842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596138963
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span></p>",
        "id": 205524860,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596138971
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> let me know if you need more help with the code or something</p>",
        "id": 205524979,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1596139041
    },
    {
        "content": "<p>After \"Backlog Bonanza\" comes \"RFC Bonanza\"? <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 205532317,
        "sender_full_name": "DPC",
        "timestamp": 1596143030
    },
    {
        "content": "<p>opened <a href=\"https://github.com/rust-lang/triagebot/pull/740\">https://github.com/rust-lang/triagebot/pull/740</a></p>",
        "id": 205591243,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596203058
    }
]