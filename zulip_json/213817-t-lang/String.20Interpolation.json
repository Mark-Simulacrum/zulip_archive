[
    {
        "content": "<p>So I've been slowly learning rust, and so far, I have been loving it. One question I have though, is why not have string interpolation? </p>\n<div class=\"codehilite\"><pre><span></span><code>\n</code></pre></div>",
        "id": 230713638,
        "sender_full_name": "Jeff",
        "timestamp": 1615996278
    },
    {
        "content": "<p>Oops, hit enter too fast XD<br>\nAnyways,</p>\n<div class=\"codehilite\"><pre><span></span><code>fn main() {\n   let x: usize = 100000000;\n\n    println!(&quot;{}&quot;, x);\n}\n</code></pre></div>\n<p>Here, </p>\n<div class=\"codehilite\"><pre><span></span><code>\n</code></pre></div>",
        "id": 230713851,
        "sender_full_name": "Jeff",
        "timestamp": 1615996342
    },
    {
        "content": "<p>God dang it, not again XD<br>\nFor the third time</p>\n<div class=\"codehilite\"><pre><span></span><code>println!(&quot;{}&quot;,  x);\n</code></pre></div>",
        "id": 230714016,
        "sender_full_name": "Jeff",
        "timestamp": 1615996378
    },
    {
        "content": "<p>you might find this helpful: <a href=\"https://blog.thoughtram.io/string-vs-str-in-rust/\">https://blog.thoughtram.io/string-vs-str-in-rust/</a></p>",
        "id": 230714313,
        "sender_full_name": "oliver",
        "timestamp": 1615996464
    },
    {
        "content": "<p>Im just going to give up now.<br>\nWhy not incorporate something like </p>\n<div class=\"codehilite\"><pre><span></span><code>println!(&quot;{x}&quot;);\n</code></pre></div>\n<p>?<br>\nThis is, imo, much easier to read</p>",
        "id": 230714610,
        "sender_full_name": "Jeff",
        "timestamp": 1615996555
    },
    {
        "content": "<p>that is not valid syntax the interior of the braces is reserved for formatting specifiers</p>",
        "id": 230714739,
        "sender_full_name": "oliver",
        "timestamp": 1615996595
    },
    {
        "content": "<p>what you have suggested is not conventional and would be confusing to many readers</p>",
        "id": 230714854,
        "sender_full_name": "oliver",
        "timestamp": 1615996642
    },
    {
        "content": "<p>it was recently suggested that <code>println!(x)</code> could automatically interpretate <code>x</code> without the <code>{}</code></p>",
        "id": 230716029,
        "sender_full_name": "oliver",
        "timestamp": 1615996922
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281739\">oliver</span> <a href=\"#narrow/stream/213817-t-lang/topic/String.20Interpolation/near/230714854\">said</a>:</p>\n<blockquote>\n<p>what you have suggested is not conventional and would be confusing to many readers</p>\n</blockquote>\n<p>well... it's very common in python, and I think lots of ppl like that syntax. But it's also very hard to get this right, as you have to parse arbitrary expressions within a string. This may require something similar to python where you prefix the formatting string with a letter (example: <code>f\"{x}\"</code>)</p>",
        "id": 230716112,
        "sender_full_name": "oli",
        "timestamp": 1615996932
    },
    {
        "content": "<p>I think if we just tried to do that for <code>format_args!</code> and friends, we may run into hygiene and parser troubles that aren't easy to solve and may even be backwards incompatible.</p>",
        "id": 230716474,
        "sender_full_name": "oli",
        "timestamp": 1615996994
    },
    {
        "content": "<p>()</p>",
        "id": 230716555,
        "sender_full_name": "oliver",
        "timestamp": 1615997007
    },
    {
        "content": "<p>it's not around variables, you can put arbitrary expressions in there</p>",
        "id": 230716646,
        "sender_full_name": "oli",
        "timestamp": 1615997026
    },
    {
        "content": "<p>I believe there is a plan to make <code>println!(\"{x}\");</code> work.</p>",
        "id": 230716875,
        "sender_full_name": "Amanieu",
        "timestamp": 1615997068
    },
    {
        "content": "<p>sure in Julia you can do \"1 + 1 = $(1+ 1)\" which is reminiscent of Bash</p>",
        "id": 230716978,
        "sender_full_name": "oliver",
        "timestamp": 1615997093
    },
    {
        "content": "<p><a href=\"https://rust-lang.github.io/rfcs/2795-format-args-implicit-identifiers.html\">https://rust-lang.github.io/rfcs/2795-format-args-implicit-identifiers.html</a></p>",
        "id": 230716989,
        "sender_full_name": "Amanieu",
        "timestamp": 1615997096
    },
    {
        "content": "<p>yes, it's actually implemented and works today, though it is not yet stable:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(format_args_capture)]</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{x}\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>IIRC it is intended to be stabilized after the 2021 edition comes out, due to some historical peculiarities with the <code>panic!</code> macro that need an edition change to address</p>",
        "id": 230719401,
        "sender_full_name": "bstrie",
        "timestamp": 1615997635
    },
    {
        "content": "<p>()</p>",
        "id": 230721340,
        "sender_full_name": "oliver",
        "timestamp": 1615998102
    },
    {
        "content": "<p>well, if your use case is doing println debugging, that's what the <code>dbg!(x)</code> macro is for</p>",
        "id": 230721545,
        "sender_full_name": "bstrie",
        "timestamp": 1615998158
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"398492\">Jeff</span> <a href=\"#narrow/stream/213817-t-lang/topic/String.20Interpolation/near/230714610\">said</a>:</p>\n<blockquote>\n<p>Im just going to give up now.<br>\nWhy not incorporate something like </p>\n<div class=\"codehilite\"><pre><span></span><code>println!(&quot;{x}&quot;);\n</code></pre></div>\n<p>?<br>\nThis is, imo, much easier to read</p>\n</blockquote>\n<p>yes, and both the lang and libs team <a href=\"https://github.com/rust-lang/rfcs/pull/2795#issuecomment-549213465\">agreed</a> with that! <a href=\"https://rust-lang.github.io/rfcs/2795-format-args-implicit-identifiers.html\">rfc 2795</a> proposed exactly that, and was accepted :)</p>\n<p>it's already implemented, but not yet available in stable rust. there's still some small unfinished parts though, if i understand correctly. (e.g. the behaviour around concat!() and some other things, maybe.)</p>\n<p>one of the blockers was that <code>panic!(\"{x}\")</code> was 'accidentally' already accepted and would be confusing when it didn't work with this feature. this is fixed in edition 2021. however, in all editions we now warn about that case anyway, so we can probably just enable this feature in all editions. <a href=\"/user_uploads/4715/xYz3Oij8ADHwhK-QqvuYu4VM/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/xYz3Oij8ADHwhK-QqvuYu4VM/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/xYz3Oij8ADHwhK-QqvuYu4VM/image.png\"></a></div>",
        "id": 230736367,
        "sender_full_name": "Mara",
        "timestamp": 1616003328
    },
    {
        "content": "<p>And in the meantime, there is <a href=\"https://docs.rs/fstrings\">https://docs.rs/fstrings</a> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> :</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">println_f</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"{x}\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 230755270,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1616010586
    }
]