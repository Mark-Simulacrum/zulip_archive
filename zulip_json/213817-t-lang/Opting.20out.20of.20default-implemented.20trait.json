[
    {
        "content": "<p>When working on <code>https://github.com/rust-lang/rust/pull/87146</code>, I ran into a bug caused by an <code>ast::Visitor</code> forgetting to override a particular method. All of the visitor methods have a default implementation, but for some impls of that traits, it would be useful to require an explicit override. This would force us to check if the default impementation is correct for that particular impl</p>",
        "id": 246041079,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1626311402
    },
    {
        "content": "<p>I think this could potentially be useful for other crates as well - though this would be an explicit Semver opt-out if used for a foreign trait impl, it could be helpful for crates that want to ensure that they're handling all cases for a visitor-like trait</p>",
        "id": 246041124,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1626311458
    },
    {
        "content": "<p>If we got some kind of opt-out for <code>#[non_exhaustive]</code> (e.g. <code>#[exhaustive]</code> match foo { .. }<code>) that allows you to omit the </code>_ =&gt; {}` branch, then we could potentially re-use it for this feature</p>",
        "id": 246041187,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1626311530
    },
    {
        "content": "<p>e.g. <code>#[exhaustive] impl MyTrait for MyType { ... }</code> would error if there are any default-implemented methods being used</p>",
        "id": 246041195,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1626311541
    },
    {
        "content": "<p>you'd have to remember to add that attribute on the implementation to begin with, right? but i guess if there are lots of default methods, it would help to detect one that's not overridden</p>",
        "id": 246041274,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1626311686
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/213817-t-lang/topic/Opting.20out.20of.20default-implemented.20trait/near/246041187\">said</a>:</p>\n<blockquote>\n<p>If we got some kind of opt-out for <code>#[non_exhaustive]</code> (e.g. <code>#[exhaustive]</code> match foo { .. }<code>) that allows you to omit the </code>_ =&gt; {}` branch, then we could potentially re-use it for this feature</p>\n</blockquote>\n<p>I don't think it can allow <em>omitting</em> the <code>_ =&gt;</code> branch -- since that breaks the core point of being <code>non_exhaustive</code> -- but there could be an opt-in to get a lint about missing something.  (And with cap-lints, that would end up still actually compiling as a dependency when the type got an extra variant.)</p>",
        "id": 246630475,
        "sender_full_name": "scottmcm",
        "timestamp": 1626805728
    },
    {
        "content": "<p>We allow omitting the <code>_</code> <em>in the same crate</em>, for non-exhaustive, right?</p>",
        "id": 246696936,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626859804
    },
    {
        "content": "<p>That probably wouldn't in this case, admittedly</p>",
        "id": 246696964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626859810
    },
    {
        "content": "<p>I agree with the concept</p>",
        "id": 246696988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626859830
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/213817-t-lang/topic/Opting.20out.20of.20default-implemented.20trait/near/246630475\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/213817-t-lang/topic/Opting.20out.20of.20default-implemented.20trait/near/246041187\">said</a>:</p>\n<blockquote>\n<p>If we got some kind of opt-out for <code>#[non_exhaustive]</code> (e.g. <code>#[exhaustive]</code> match foo { .. }<code>) that allows you to omit the </code>_ =&gt; {}` branch, then we could potentially re-use it for this feature</p>\n</blockquote>\n<p>I don't think it can allow <em>omitting</em> the <code>_ =&gt;</code> branch -- since that breaks the core point of being <code>non_exhaustive</code> -- but there could be an opt-in to get a lint about missing something.  (And with cap-lints, that would end up still actually compiling as a dependency when the type got an extra variant.)</p>\n</blockquote>\n<p>I would like to see such, but I would strongly want that to be deny-by-default/forbid-by-default (which is probably reasonable if it's opt-in per-match). I deal with parsing targets in a library that is basically 5 <code>#[non_exhaustive]</code> enums and a struct (and a ton of pain). The component types are non_exhaustive so I can add components in minor versions (at the same time, I also reserve the right to change the parsing rules/how certain strings parse), so the library doesn't end up with major version &gt;100. However, downstream, I have a few things that are determining additional properties of the targets, and the <code>_ =&gt; {}</code> pattern is just a runtime error (of some kind) waiting to happen.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/Opting.20out.20of.20default-implemented.20trait/near/246696936\">said</a>:</p>\n<blockquote>\n<p>We allow omitting the <code>_</code> <em>in the same crate</em>, for non-exhaustive, right?</p>\n</blockquote>\n<p>That is indeed allowed. I've used that exact thing for the same thing as above (but for internal property checking/canonicalization, rather than external).</p>",
        "id": 246702850,
        "sender_full_name": "Connor Horman",
        "timestamp": 1626864204
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> I think they were hinting at proposals / suggestions out there <strong>targeting tests only</strong> for libraries wanting to be <em>as exhaustive as possible</em> to make sure they are up-to-date with their dependency's variants at the time of running CI / maintaining their own stuff. Outside testing, they'd still have to handle the <code>_ =&gt;</code> branch to preserve Semver, of course!</p>",
        "id": 246743621,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1626884904
    },
    {
        "content": "<p>I don't think a different rule for \"this is tests\" is a good idea.  I think the lint that's deny but still requires the <code>_ =&gt;</code> is fine -- the people building the tests will get it.  It doesn't need to be a hard error.</p>",
        "id": 246750375,
        "sender_full_name": "scottmcm",
        "timestamp": 1626887856
    }
]