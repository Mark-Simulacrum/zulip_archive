[
    {
        "content": "<p>Hmm, <span class=\"user-group-mention\" data-user-group-id=\"1977\">@T-lang</span>, thinking more about <a href=\"https://github.com/rust-lang/rust/issues/57893\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57893\">#57893</a>, it occurs to me that <em>another</em> potential solution -- one that is perhaps safer in the short term -- is to say that a trait <code>T</code> is not dyn-safe if:</p>\n<ul>\n<li>it has a \"potentially dyn-overlapping impl\" <em>and</em> it has associated items that are not fns</li>\n</ul>\n<p>That, coupled with saying that all fns in a dyn-overlapping impl are (conceptually, at least) <code>default</code>, would be a fairly targeted change, and would not (I think) be very likely to break anyone. In particular it obviates the concern about traits that \"just happen\" to be dyn-safe being forced to use <code>default</code>.</p>",
        "id": 185520353,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578939679
    },
    {
        "content": "<p>It does mean of course that the dyn-safe rules are getting increasingly arcane</p>",
        "id": 185520373,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578939691
    },
    {
        "content": "<p>But that's kind of true regardless</p>",
        "id": 185520381,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578939699
    },
    {
        "content": "<p>Under this change, I think that all of the breakage I saw in practice would be removed, but I can test that</p>",
        "id": 185520533,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578939758
    },
    {
        "content": "<p>(I'm experimenting with this change now, should be fairly easy to implement.)</p>",
        "id": 185521216,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578940149
    },
    {
        "content": "<blockquote>\n<p>trait <code>T</code> is not dyn-safe if: it has a  \"potentially dyn-overlapping impl\" and it has associated items that are not fns</p>\n</blockquote>\n<p>nit: associated items that are not fns which do not have a <code>where Self: Sized</code> bound, right?</p>",
        "id": 185523303,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1578941250
    },
    {
        "content": "<p>mm I don't think so</p>",
        "id": 185523400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578941289
    },
    {
        "content": "<p>I guess maybe eventually</p>",
        "id": 185523433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578941305
    },
    {
        "content": "<p>but that would be like <code>trait Foo { type X where Self: Sized; }</code></p>",
        "id": 185523461,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578941324
    },
    {
        "content": "<p>which, without GATs, we don't even really support</p>",
        "id": 185523472,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578941331
    },
    {
        "content": "<p>or hmm</p>",
        "id": 185523499,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578941347
    },
    {
        "content": "<p>or are you saying that if you have a <code>where Self: Sized</code> fn, that is potentially a problem? I don't think it is -- it's not present in the vtable, but it's also not invokable on a <code>dyn Trait</code> type</p>",
        "id": 185523575,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578941383
    },
    {
        "content": "<p>I definitely have reasons why I would want that to be supported.</p>",
        "id": 185523576,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1578941383
    },
    {
        "content": "<p>^^ no, your example <code>Foo</code> is similar to what I had in mind.</p>",
        "id": 185523602,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1578941397
    },
    {
        "content": "<blockquote>\n<p>I definitely have reasons why I would want that to be supported.</p>\n</blockquote>\n<p>(e.g. a method with a <code>where Self: Sized</code> bound that returns a <code>where Self: Sized</code> associated type)</p>",
        "id": 185523833,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1578941521
    },
    {
        "content": "<p>ok, well, I agree we could add that caveat</p>",
        "id": 185524182,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578941708
    },
    {
        "content": "<p>I updated <a href=\"https://github.com/rust-lang/rust/pull/66037\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/66037\">https://github.com/rust-lang/rust/pull/66037</a> with this idea -- not <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span>'s variant, just the basic one, but I think we could extend it</p>",
        "id": 185554164,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578962465
    }
]