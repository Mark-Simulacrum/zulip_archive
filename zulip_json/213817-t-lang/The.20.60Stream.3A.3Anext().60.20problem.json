[
    {
        "content": "<p>I wrote up a note on the problem we're facing in the Stream RFC: <a href=\"https://hackmd.io/@CTI_5_5PSN2-6VHLeF5YuQ/r1Af46oaD/edit\">The <code>Stream::next()</code> problem</a></p>\n<p>In short, we want to provide a <code>next</code> method on the trait itself, since that's what everyone will use. But the method signature mentions <code>Self</code>, which means it won't work on trait objects. There is a perfectly reasonable method dispatch path that the language _could_ take instead for trait objects, but doesn't.</p>",
        "id": 221324669,
        "sender_full_name": "tmandry",
        "timestamp": 1609457717
    },
    {
        "content": "<p>I list a few different solutions in the doc, though I'm probably missing some.</p>",
        "id": 221324825,
        "sender_full_name": "tmandry",
        "timestamp": 1609457981
    },
    {
        "content": "<p>I think this could be a chance to improve usability of trait objects.</p>",
        "id": 221324876,
        "sender_full_name": "tmandry",
        "timestamp": 1609458051
    },
    {
        "content": "<p>about \"Object-safe <code>Self</code>\"</p>",
        "id": 221345627,
        "sender_full_name": "lcnr",
        "timestamp": 1609495959
    },
    {
        "content": "<p>could we theoretically allow self exactly if <code>CoerceUnsized</code> can be applied to all uses of <code>Self</code>?</p>",
        "id": 221345640,
        "sender_full_name": "lcnr",
        "timestamp": 1609496007
    },
    {
        "content": "<p>so for <code>Stream::next</code> this would be fine as <code>Next&lt;Foo&gt;</code> can be coerced to <code>Next&lt;dyn Stream&gt;</code> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 221345685,
        "sender_full_name": "lcnr",
        "timestamp": 1609496062
    },
    {
        "content": "<p>this should be fairly straighforward to implement though I am a bit worried that there is code which relies on uses of <code>Self</code> to not be object safe</p>",
        "id": 221345704,
        "sender_full_name": "lcnr",
        "timestamp": 1609496133
    },
    {
        "content": "<p>dispatch on <code>Self: Sized</code> also seems like a nice solution to me</p>",
        "id": 221345824,
        "sender_full_name": "lcnr",
        "timestamp": 1609496339
    },
    {
        "content": "<p>The main workaround currently available is something along these lines:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// Have the following trait be a super trait of `Stream`.</span>\n<span class=\"k\">pub</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">DynNext</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">dyn_next</span><span class=\"o\">&lt;'</span><span class=\"na\">slf</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"bp\">self</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">_</span> <span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">      </span>-&gt; <span class=\"nc\">Next</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">slf</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Stream</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Unpin</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">Self</span><span class=\"w\"> </span>: <span class=\"o\">'</span><span class=\"na\">slf</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span>: <span class=\"nc\">Stream</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Unpin</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">DynNext</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">dyn_next</span><span class=\"o\">&lt;'</span><span class=\"na\">slf</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"bp\">self</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">_</span> <span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">      </span>-&gt; <span class=\"nc\">Next</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">slf</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Stream</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Unpin</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">Self</span><span class=\"w\"> </span>: <span class=\"o\">'</span><span class=\"na\">slf</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Next</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>so that trait objects can use <code>.dyn_next()</code> (<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=3291ef11e1dd420fdabe04884edfa23c\">Playground</a>)</p>\n<hr>\n<p>Note that with this approach it's adding an associated type that becomes challenging: we easily stumble upon cycle detected when writing things like <code>Stream : DynNext&lt;Self::Item&gt;</code>, leading to the supertrait hierarchy needing to be inverted so that  <code>Self::Item</code> is available to <code>DynNext</code>.<br>\nThis, in turn, leads to an associated <code>fn dyn_next</code> helper method on <code>Stream</code> (since the initial objective is not to require a helper trait in scope), which happens not to be object-safe!</p>\n<p>Basically,</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Whatever</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">id</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"bp\">self</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">_</span> <span class=\"nc\">Self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">_</span> <span class=\"p\">(</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Whatever</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">AutoTrait</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">Self</span><span class=\"w\"> </span>: <span class=\"nc\">AutoTrait</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>is not object-safe; and I fail to see why (<code>dyn Whatever</code> wouldn't be able to call <code>.id()</code>, but <code>dyn Whatever + AutoTrait</code> would). If something needs to be changed or improved, then this auto trait situation is definitely it! Since <code>where Self : 'lifetime</code> bounds are already supported, and since lifetimes and auto-traits behave very similarly with trait objects, I think the \"do not mention <code>Self</code> in the <code>where</code> clauses\" rule should <strong>also</strong> make an exception for auto traits.</p>",
        "id": 221365598,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1609530142
    },
    {
        "content": "<p>I'm not sure I follow the second part of your comment, the <code>dyn_next</code> method you wrote can be placed on Stream directly and it remains object safe</p>",
        "id": 221373965,
        "sender_full_name": "tmandry",
        "timestamp": 1609543010
    },
    {
        "content": "<p>The private supertrait pattern is useful for adding helper methods that can't be overridden (and TIL you could write <code>impl&lt;T: SubTrait&gt; SuperTrait for T {}</code>)</p>",
        "id": 221374025,
        "sender_full_name": "tmandry",
        "timestamp": 1609543104
    },
    {
        "content": "<p>ideally we don't need a <code>dyn_next()</code> and can always use <code>next()</code>, but that could be an acceptable interim solution</p>",
        "id": 221374319,
        "sender_full_name": "tmandry",
        "timestamp": 1609543569
    },
    {
        "content": "<p>I can't think of cases where you would actually <em>want</em> <code>dyn_next()</code> if we were to solve this later, though</p>",
        "id": 221374342,
        "sender_full_name": "tmandry",
        "timestamp": 1609543633
    },
    {
        "content": "<p>since for <code>T: Stream + Unpin</code>, <code>Next&lt;'_, T&gt;</code> should coerce to <code>Next&lt;'_, dyn Stream + Unpin&gt;</code></p>",
        "id": 221374397,
        "sender_full_name": "tmandry",
        "timestamp": 1609543694
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/213817-t-lang/topic/The.20.60Stream.3A.3Anext().60.20problem/near/221345640\">said</a>:</p>\n<blockquote>\n<p>could we theoretically allow self exactly if <code>CoerceUnsized</code> can be applied to all uses of <code>Self</code>?</p>\n</blockquote>\n<p>Yeah this does seem promising, it would have a huge impact on the usability of trait objects imo</p>",
        "id": 221374407,
        "sender_full_name": "tmandry",
        "timestamp": 1609543742
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/213817-t-lang/topic/The.20.60Stream.3A.3Anext().60.20problem/near/221345704\">said</a>:</p>\n<blockquote>\n<p>this should be fairly straighforward to implement though I am a bit worried that there is code which relies on uses of <code>Self</code> to not be object safe</p>\n</blockquote>\n<p>If the feature is shipped this year, there's always the idea of opting into dynamic dispatch that's been thrown around recently, so it wouldn't be a big deal.</p>",
        "id": 221386669,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1609568356
    }
]