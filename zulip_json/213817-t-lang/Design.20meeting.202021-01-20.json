[
    {
        "content": "<p>Dear <span class=\"user-group-mention\" data-user-group-id=\"1977\">@T-lang</span>,</p>\n<p>The <span class=\"user-group-mention\" data-user-group-id=\"1175\">@WG-rfc-2229</span> folks and I prepared a document for use in the design meeting tomorrow:</p>\n<p><a href=\"https://hackmd.io/wPs-tHJZR1Cj9j_vwsxwbw?view\">https://hackmd.io/wPs-tHJZR1Cj9j_vwsxwbw?view</a></p>\n<p>Feel free to take a look, but I think we intend to start the meeting by reviewing its contents, so to some extent it's an \"outline\" for the kinds of things we want to cover.</p>",
        "id": 223265796,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611079081
    },
    {
        "content": "<p>I just realized that the doc does not include a concrete list of questions we hope to answer or a least get people thinking about</p>",
        "id": 223265893,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611079105
    },
    {
        "content": "<p>I will try to add that</p>",
        "id": 223265897,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611079107
    },
    {
        "content": "<p>Or maybe <span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> you could take a stab if you have a sense of them :)</p>",
        "id": 223265917,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611079118
    },
    {
        "content": "<p>Updated the doc</p>",
        "id": 223275039,
        "sender_full_name": "Aman Arora",
        "timestamp": 1611082669
    },
    {
        "content": "<p>Am I in the wrong zoom room?</p>",
        "id": 223410870,
        "sender_full_name": "scottmcm",
        "timestamp": 1611165761
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> maybe?</p>",
        "id": 223411039,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611165828
    },
    {
        "content": "<p>Hello <span class=\"user-group-mention\" data-user-group-id=\"1977\">@T-lang</span> -- design meeting now</p>",
        "id": 223411105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611165853
    },
    {
        "content": "<p>I think I'm less concerned about a specific percentage of <code>let x = x;</code> and more about an admittedly-fuzzy \"do the ones that show up seem reasonable\".</p>",
        "id": 223418915,
        "sender_full_name": "scottmcm",
        "timestamp": 1611169364
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> Agreed. If all of those we end up with are necessary for correctness, that's fine.</p>",
        "id": 223423861,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611171422
    },
    {
        "content": "<p>Hmm, I think it's more than \"necessary for correctness\" -- if they become necessary in situations that don't feel in some way \"yeah, that code's doing something tricky\" then I'd have concerns that the rules might not be the right ones, even if the migration fixes were perfect.</p>",
        "id": 223432111,
        "sender_full_name": "scottmcm",
        "timestamp": 1611175235
    },
    {
        "content": "<p>One question that remains a bit unclear from the hackmds alone (don't have time to see the recording), is the difference between the suggested <code>let x = x;</code>, which makes the closure not be more than <code>FnOnce</code> if <code>x</code> is not <code>Copy</code>, _vs._ <code>if false { let _x = x; loop {} }</code>, which just makes the closure <em>capture <code>x</code></em> without necessarily <em>consuming</em> it when called (same as currently doing <code>let _ = x;</code> in a <code>move</code> closure).<br>\n<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=90049afee37fc9377ca13c89523d8d4b\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=90049afee37fc9377ca13c89523d8d4b</a></p>",
        "id": 223505615,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1611234907
    },
    {
        "content": "<p>Hmm</p>",
        "id": 223560431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611258104
    },
    {
        "content": "<p>Huh</p>",
        "id": 223560559,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611258146
    },
    {
        "content": "<p>I had kind of overlooked the <code>FnOnce</code> interaction</p>",
        "id": 223560575,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611258154
    },
    {
        "content": "<p>I was thinking \"oh, it moves anyway, so it must be <code>FnOnce</code>\", but of course that's not true for a move closure</p>",
        "id": 223560591,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611258168
    },
    {
        "content": "<p>(I do regret that name)</p>",
        "id": 223560616,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611258177
    },
    {
        "content": "<p>Good catch <span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span></p>",
        "id": 223560640,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611258188
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 223560649,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611258195
    },
    {
        "content": "<p>we should file a bug on this</p>",
        "id": 223560656,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611258200
    },
    {
        "content": "<p>I think I understand the problem, but not the example. <code>if false { let _x = x; loop {} }</code> will consume x today and therefore make the closure at best FnOnce</p>",
        "id": 223561932,
        "sender_full_name": "Aman Arora",
        "timestamp": 1611258796
    },
    {
        "content": "<p>how would the migration work if <code>x</code> is actually <code>self</code>? you can't rebind that, so would you rename it throughout the closure?</p>",
        "id": 223563754,
        "sender_full_name": "cuviper",
        "timestamp": 1611259707
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> <a href=\"#narrow/stream/213817-t-lang/topic/Design.20meeting.202021-01-20/near/223563754\">said</a>:</p>\n<blockquote>\n<p>how would the migration work if <code>x</code> is actually <code>self</code>? you can't rebind that, so would you rename it throughout the closure?</p>\n</blockquote>\n<p>I hadn't thought of that. Hmm I think I have seen <code>this: Self</code> as a closure parameter, so maybe that. But that also means that all the rest of the code would have to use <code>this</code> instead of self</p>",
        "id": 223586736,
        "sender_full_name": "Aman Arora",
        "timestamp": 1611272452
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232018\">Daniel Henry-Mantilla</span> <a href=\"#narrow/stream/213817-t-lang/topic/Design.20meeting.202021-01-20/near/223505615\">said</a>:</p>\n<blockquote>\n<p>One question that remains a bit unclear from the hackmds alone (don't have time to see the recording), is the difference between the suggested <code>let x = x;</code>, which makes the closure not be more than <code>FnOnce</code> if <code>x</code> is not <code>Copy</code>, _vs._ <code>if false { let _x = x; loop {} }</code>, which just makes the closure <em>capture <code>x</code></em> without necessarily <em>consuming</em> it when called (same as currently doing <code>let _ = x;</code> in a <code>move</code> closure).<br>\n<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=90049afee37fc9377ca13c89523d8d4b\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=90049afee37fc9377ca13c89523d8d4b</a></p>\n</blockquote>\n<p>If we have </p>\n<div class=\"codehilite\"><pre><span></span><code>let x: String;\n\nlet c = || {\n    let _ = x;\n};\n</code></pre></div>\n<p>And your concern is that if we did migration using <code>let x = x</code>, the closure would be <code>FnOnce</code> instead of <code>Fn</code>. </p>\n<div class=\"codehilite\"><pre><span></span><code>let c = || {\n    let x = x;\n    let _ = x;\n};\n</code></pre></div>\n<p>If I understand this correctly, we can detect places that aren't used within the closure (x is mentioned but not used) and not migrate for them. We would've to be careful when we <a href=\"https://github.com/rust-lang/project-rfc-2229/issues/27\">fix match</a> to not always capture the place being matched on.</p>",
        "id": 223591409,
        "sender_full_name": "Aman Arora",
        "timestamp": 1611276689
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281950\">Aman Arora</span> <a href=\"#narrow/stream/213817-t-lang/topic/Design.20meeting.202021-01-20/near/223586736\">said</a>:</p>\n<blockquote>\n<p>Hmm I think I have seen <code>this: Self</code> as a closure parameter, so maybe that.</p>\n</blockquote>\n<p>Sure, you can also see <code>this</code> used in wrapper types like <code>Rc</code> that don't want to impede auto-deref method resolution to the inner type. So that's a reasonable candidate, assuming <code>this</code> is not already present, but it's a much more invasive change to rename it throughout the closure.</p>",
        "id": 223591926,
        "sender_full_name": "cuviper",
        "timestamp": 1611277146
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> note that I don't know how the MIR lowering and \"detecting\" captures works exactly, or rather, how it is being implemented in that RFC. <strong>Currently</strong>, since the detection is done \"syntactically\" rather than \"semantically\" (sorry for the loose terminology, but, again, I don't know the implementation details, just empirical results), then unreachable code that requires owned access to the capture will:</p>\n<ul>\n<li>trigger a capture-by-move due to the \"syntactical rules\";</li>\n<li>still not restrict the closure to be <code>FnOnce()</code>, since <em>the code that consumes the capture is \"semantically\" understood as unreachable (and diverging) and thus can be \"disregarded move/borrow-wise\"</em>.</li>\n</ul>\n<p>(This current <em>status quo</em> can be seen in the Playground I linked). Since the RFC seems to be changing the way the captures work so that it becomes smarter, I imagine the RFC implementation will (if it doesn't do it already), not trigger a capture-by-move thanks to a \"semantic\" interpretation of the closure: \"captures in trivially unreachable-and-diverging code can be disregarded\" we could say (in that regard your \"we can detect places that aren't used within the closure\" seems very relevant).</p>\n<p>I am not saying that there is actually an issue (I don't know exactly what the RFC is doing, so I can't judge that) I just wanted to raise awareness about this \"move something but in trivially unreachable code\" situation <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> (especially with the added challenge of trying to feature \"migration fixes\").</p>",
        "id": 223626167,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1611312551
    },
    {
        "content": "<p>An update from today's 2229 sync:</p>\n<ul>\n<li>\n<p>For code that may be unreacheable but use a variable, the feature will consider it a capture. One of the motivations for this is to prevent subtle changes to drop order and closure trait,  eg in cases where the user just used an <code>if false { }</code> as an alternative to commenting out some code.</p>\n</li>\n<li>\n<p>We decided on a new migration, possibly via some macro(TBD) like <code>capture!(x)</code>, which would desugar to <code>drop(&amp;x)</code>. This will force a move without actually taking ownership. This would also solve the problem of having to deal with <code>self</code>.</p>\n</li>\n</ul>",
        "id": 223717186,
        "sender_full_name": "Aman Arora",
        "timestamp": 1611359390
    },
    {
        "content": "<p>One thing I realized we missed in the meeting (or I don't remember going over in too many details) is Box performance<br>\neg: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">tuple</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"p\">([</span><span class=\"nb\">String</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">4096</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">move_value</span><span class=\"p\">(</span><span class=\"n\">tuple</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// This is really (*tuple).0</span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Since the stack contains <code>tuple</code>, we will move *tuple.0 into the closure which is this really large value <code>[String; 4096]</code>.</p>",
        "id": 223733243,
        "sender_full_name": "Aman Arora",
        "timestamp": 1611380221
    },
    {
        "content": "<p>Do we want to special case box or let the user know that this results in a fairly large move operation?</p>",
        "id": 223733263,
        "sender_full_name": "Aman Arora",
        "timestamp": 1611380279
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> i thought that this would move <code>tuple</code> and not <code>tuple.0</code></p>",
        "id": 224072894,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611681936
    },
    {
        "content": "<p><code>tuple.0</code> is actually <code>(*tuple).0</code>, and hence the big array is not actually stored on the stack</p>",
        "id": 224072989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611681967
    }
]