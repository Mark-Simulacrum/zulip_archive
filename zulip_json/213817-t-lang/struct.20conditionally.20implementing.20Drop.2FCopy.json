[
    {
        "content": "<p>I'm working on a problem where I want a single <code>struct</code> to be both Copy and Drop (though never at the same time), based on a generic parameter implementing Copy.</p>\n<p>The straightforward definition doesn't work, because rustc complains about both Copy and Drop being implemented. AFAICT, the only way to bypass this today is to have two separate struct definitions, which is rather a pain. Could we relax this restriction?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">P</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">P</span>: <span class=\"nb\">Copy</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Copy</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">P</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">P</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Drop</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">P</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 207071118,
        "sender_full_name": "simulacrum",
        "timestamp": 1597583390
    },
    {
        "content": "<p>I'd be fine with something like <code>impl&lt;P: !Copy&gt; Drop for Bar&lt;P&gt; {}</code> to be clear</p>",
        "id": 207071162,
        "sender_full_name": "simulacrum",
        "timestamp": 1597583438
    },
    {
        "content": "<p>Right now, you can't constrain <code>Drop</code> differently than the type at all.</p>",
        "id": 207086981,
        "sender_full_name": "cuviper",
        "timestamp": 1597607927
    },
    {
        "content": "<p>i.e. <code>Drop</code> is all or nothing, nevermind what you want to do with <code>Copy</code></p>",
        "id": 207086988,
        "sender_full_name": "cuviper",
        "timestamp": 1597607968
    },
    {
        "content": "<p>Recent thread: <a href=\"https://internals.rust-lang.org/t/can-we-fix-drop-to-allow-specialization/12873\">https://internals.rust-lang.org/t/can-we-fix-drop-to-allow-specialization/12873</a></p>",
        "id": 207087377,
        "sender_full_name": "cuviper",
        "timestamp": 1597608357
    },
    {
        "content": "<p>Hm yes, that is indeed recent. I don't think that thread answers whether we can just allow Copy and Drop to co-exist (perhaps with a warning)</p>",
        "id": 207088043,
        "sender_full_name": "simulacrum",
        "timestamp": 1597609162
    },
    {
        "content": "<p>in my case the drop impl would then be a no-op, semantically at least, since it would just do mem::drop on a copy value</p>",
        "id": 207088053,
        "sender_full_name": "simulacrum",
        "timestamp": 1597609192
    },
    {
        "content": "<p>That seems like it should need more than a warning, since it'd be hard to predict when the Drop will get called and when it won't.</p>",
        "id": 207088175,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597609357
    },
    {
        "content": "<p>Well, in my case for Copy-implementing P, the Drop impl is basically just <code>fn drop(&amp;mut self) {}</code> which is fine to not get called <em>ever</em></p>",
        "id": 207088238,
        "sender_full_name": "simulacrum",
        "timestamp": 1597609449
    },
    {
        "content": "<p>I know a number of unsafe authors, and authors in general, who assume that Copy and Drop are fully exclusive to one another, so they use Copy bounds as a !Drop bound.</p>",
        "id": 207088250,
        "sender_full_name": "Lokathor",
        "timestamp": 1597609463
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> right, and that's essentially true (you can't have a Drop implementing Copy struct AFACIT, that's what this thread is about) but I don't think what I'm asking about would actually change that -- the Drop impl wouldn't matter</p>",
        "id": 207088268,
        "sender_full_name": "simulacrum",
        "timestamp": 1597609545
    },
    {
        "content": "<p>to be more concrete <a href=\"https://github.com/rust-lang/rust/pull/75590\">https://github.com/rust-lang/rust/pull/75590</a> is where I'm encountering this -- note the essentially duplicated CopyTaggedPtr and TaggedPtr</p>",
        "id": 207088319,
        "sender_full_name": "simulacrum",
        "timestamp": 1597609597
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> The most troublesome case I could come up with is this one:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Drop</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"nb\">&#39;static</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;uhoh&quot;</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_x</span>: <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// _x is dropped here; does it need to run code?</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>Basically trying to find a way to encode the problems I remembered from specialization <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<p>For things that are monomorphized I couldn't come up with a problem (though maybe one could hide it in a boxed trait object or something somehow and have it again; I didn't think through vtable implications) but anything that's erased seems complex.</p>",
        "id": 207192693,
        "sender_full_name": "scottmcm",
        "timestamp": 1597695763
    },
    {
        "content": "<p>yeah I get that there's ways to break it</p>",
        "id": 207192893,
        "sender_full_name": "simulacrum",
        "timestamp": 1597695864
    },
    {
        "content": "<p>my point is it feels like there should be some escape hatch</p>",
        "id": 207192907,
        "sender_full_name": "simulacrum",
        "timestamp": 1597695878
    },
    {
        "content": "<p>and note that I don't actually want a \"conditional impl\" in that sense</p>",
        "id": 207192935,
        "sender_full_name": "simulacrum",
        "timestamp": 1597695894
    },
    {
        "content": "<p>i.e., I am 100% fine with Drop and Copy coexisting and drop running (or not running)</p>",
        "id": 207192992,
        "sender_full_name": "simulacrum",
        "timestamp": 1597695925
    },
    {
        "content": "<p>I don't remember exactly <em>why</em> we made <code>Drop</code> be all-or-nothing</p>",
        "id": 207397685,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597837882
    },
    {
        "content": "<p>I thnk it had to do both with being cautious but also that Drop is significant to borrow checker and has to be checked at monomorphization time</p>",
        "id": 207397716,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597837915
    },
    {
        "content": "<p>and when we were doing drop elaboration, we didn't want it to be a complex result</p>",
        "id": 207397765,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597837924
    },
    {
        "content": "<p>it may be possible to loosen that restriction but I have to say I'd be reluctant to open that can of worms at present :)</p>",
        "id": 207397782,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597837938
    }
]