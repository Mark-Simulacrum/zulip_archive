[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> I'd be very interested in doing a kind of \"review\" of the patterns you're seeing that people have to \"roll their own\"</p>",
        "id": 194489443,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587151947
    },
    {
        "content": "<p>in particular ones that may have implications for language design</p>",
        "id": 194489452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587151953
    },
    {
        "content": "<p>I'm also quite interested, in general, in trying to find ways to make writing correct, efficient unsafe code more ergonomic.</p>",
        "id": 194489485,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587151977
    },
    {
        "content": "<p>It might be useful to have a kind of joint lang/secure-code brainstorming session to share thoughts and ideas?</p>",
        "id": 194489517,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587151993
    },
    {
        "content": "<p>Heck we could do a virtual workshop :)</p>",
        "id": 194489532,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587152000
    },
    {
        "content": "<p>/me gettin' crazy</p>",
        "id": 194489538,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587152003
    },
    {
        "content": "<p>Cool, I guess I need to sit down and make a list then! Or better, enable other people to make it themselves.<br>\nOne was coming up so frequently I made an RFC to fix it: <a href=\"https://github.com/rust-lang/rfcs/pull/2714\" title=\"https://github.com/rust-lang/rfcs/pull/2714\">https://github.com/rust-lang/rfcs/pull/2714</a></p>",
        "id": 194489744,
        "sender_full_name": "Shnatsel",
        "timestamp": 1587152110
    },
    {
        "content": "<p>ah yes I remember that now</p>",
        "id": 194490269,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587152398
    },
    {
        "content": "<p>I'd like to see that move forward.</p>",
        "id": 194490317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587152407
    },
    {
        "content": "<p>interesting.</p>",
        "id": 194490318,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587152409
    },
    {
        "content": "<p>I was just saying to <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> randomly that I think there is a lot of value in enabling people to write \"things that used to need unsafe\" but without unsafe</p>",
        "id": 194490376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587152446
    },
    {
        "content": "<p>this is a point that <span class=\"user-mention\" data-user-id=\"224872\">@Ryan Levick</span> impressed upon me when we were discussing <a class=\"stream\" data-stream-id=\"216762\" href=\"/#narrow/stream/216762-project-safe-transmute\">#project-safe-transmute</a></p>",
        "id": 194490400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587152466
    },
    {
        "content": "<p>but I think that this is <em>going</em> to ultimately mean 80% abstractions that can't cover all the cases</p>",
        "id": 194490423,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587152485
    },
    {
        "content": "<p>I guess that this method fits in that category</p>",
        "id": 194490522,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587152531
    },
    {
        "content": "<p>Yeah, we can't cover all the cases but we can gradually cover more and more of them. <code>from_le_bytes</code> and friends on integers made a huge difference, as did TryFrom stabilization because it enabled feeding subslices to <code>from_*_bytes</code></p>",
        "id": 194490616,
        "sender_full_name": "Shnatsel",
        "timestamp": 1587152593
    },
    {
        "content": "<p>Yeah. Though that reminds me...</p>",
        "id": 194490679,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587152633
    },
    {
        "content": "<p>I would really love to have a trait for <code>to_le_bytes</code>.</p>",
        "id": 194490695,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587152640
    },
    {
        "content": "<p>Another thing that's actually landing in 1.43 and came out of safety-dance is creating a <code>CString</code> from a <code>Vec&lt;NonZeroU8&gt;</code> without scanning the data twice. This enables constructing a <code>CString</code> from a reader without resorting to <code>unsafe</code> to avoid the rescan.</p>",
        "id": 194490762,
        "sender_full_name": "Shnatsel",
        "timestamp": 1587152669
    },
    {
        "content": "<p>Nice!</p>",
        "id": 194490781,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587152682
    },
    {
        "content": "<p>The first scan can transmute to note that it's non-zero?</p>",
        "id": 194490805,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587152695
    },
    {
        "content": "<p>Basically you read bytes from a reader until you reach 0, and since you're checking the bytes one by one anyway you might as well construct a <code>NonZeroU8</code> out of them right away as you put them in a <code>Vec</code>. Then you can get a <code>CString </code>from that <code>Vec</code> without a second scan.</p>",
        "id": 194490957,
        "sender_full_name": "Shnatsel",
        "timestamp": 1587152770
    },
    {
        "content": "<p>Given const generics, how hard would it be to specify a trait <code>ToEndianBytes</code> that provides <code>to_le_bytes</code> for a type, returning a slice of <code>u8</code> where the size of the slice depends on the type but it's known to be a slice of <code>u8</code>?</p>",
        "id": 194490990,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587152792
    },
    {
        "content": "<p>Because then I could rewrite my current macro <code>write_le!</code> as a function rather than a macro.</p>",
        "id": 194491028,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587152819
    },
    {
        "content": "<p>I don't want to write out <code>w.write_all(&amp;(expr).to_le_bytes())?;</code> hundreds of times, so I have a macro wrapping that: <code>write_le!(w, expr)?;</code>.</p>",
        "id": 194491097,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587152863
    },
    {
        "content": "<p>The latest thing I looked at was <code>rand</code>. I've put an assert on lengths before a hot loop so that the compiler would optimize away the bounds checks and <code>get_unchecked()</code> would not be needed. This seems to be a very valuable but little-known trick. I think we should document it somewhere</p>",
        "id": 194491428,
        "sender_full_name": "Shnatsel",
        "timestamp": 1587153046
    },
    {
        "content": "<p>Nice!</p>",
        "id": 194491497,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587153090
    },
    {
        "content": "<p>Where did the value come from right before the loop, that it had a bound but the compiler didn't know that?</p>",
        "id": 194491520,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587153109
    },
    {
        "content": "<p>A surprisingly unsafe-heavy crate is <code>log</code>. It tries to have an atomic integer that actually represents an enum, and conversions to and from that enum are necessarily unsafe and unchecked because they're on the hot path for logging, and they don't want to have unwinding code in there. I think it also hand-rolls a <code>no_std</code> variant of <code>lazy_static</code> inside the crate.</p>",
        "id": 194491600,
        "sender_full_name": "Shnatsel",
        "timestamp": 1587153137
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> here's the PR: <a href=\"https://github.com/rust-random/rand/pull/960\" title=\"https://github.com/rust-random/rand/pull/960\">https://github.com/rust-random/rand/pull/960</a></p>",
        "id": 194491643,
        "sender_full_name": "Shnatsel",
        "timestamp": 1587153172
    },
    {
        "content": "<p>Interesting. So, I get why dd is less than 512 (the compiler should really know that the result of <code>% 512</code> will be less than 512), but what makes <code>cc + 15 &lt; 512</code>? How does the code know that?</p>",
        "id": 194491864,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587153269
    },
    {
        "content": "<p>Oh, I see the assertion right above that, nevermind.</p>",
        "id": 194491902,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587153286
    },
    {
        "content": "<p>I wonder how hard it would be to get the compiler to do some numerical reasoning like that?</p>",
        "id": 194491929,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587153301
    },
    {
        "content": "<p>GCC is capable of some <em>amazing</em> reasoning about bit patterns in a value; you can hand-write things like byte swaps and rotates, and they'll turn into the corresponding instruction.</p>",
        "id": 194491977,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587153330
    },
    {
        "content": "<p>I probably should dust off <a href=\"https://github.com/rust-lang/rfcs/pull/2714\" title=\"https://github.com/rust-lang/rfcs/pull/2714\">https://github.com/rust-lang/rfcs/pull/2714</a>, I have an implementation of the current proposed design handy but I'm not sure it's the best design anymore. It's the easiest one to explain, but it doesn't really solve the problem in the fastest possible way, so people might still want to hand-roll a custom implementation. And the fastest possible version is harder to explain, even though it's more general</p>",
        "id": 194493148,
        "sender_full_name": "Shnatsel",
        "timestamp": 1587153892
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'll look through safety-dance crates and make an issue on a dedicated repo for every currently unavoidable <code>unsafe</code> I find, then send you a link. That way we can have a clear set of problems and it would make sense to start brainstorming solutions. How's that for a plan?</p>",
        "id": 194494175,
        "sender_full_name": "Shnatsel",
        "timestamp": 1587154418
    },
    {
        "content": "<p>Also I've been replacing a ton of ad-hoc unsafe with variants of <code>u16::from_le_bytes([..2].try_into().unwrap())</code> which is fine, but counter-intuitive. I'm told that const generics might help with the <code>.try_into().unwrap()</code> part.</p>",
        "id": 194494514,
        "sender_full_name": "Shnatsel",
        "timestamp": 1587154578
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> that sounds like a good plan</p>",
        "id": 194538521,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587207391
    },
    {
        "content": "<p>Regarding bounds checks: a quick search through <a href=\"http://crates.io\" title=\"http://crates.io\">crates.io</a> shows that there are currently 10670 invocations of <code>get_unchecked</code> (incl. <code>_mut</code> variant) across 864 crates, and the median number of uses per crate is 3.</p>",
        "id": 194552422,
        "sender_full_name": "Shnatsel",
        "timestamp": 1587226923
    },
    {
        "content": "<p>Wow, that's kind of astounding.</p>",
        "id": 194725389,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587412924
    },
    {
        "content": "<p>How many <em>crates</em> use it?</p>",
        "id": 194725401,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587412930
    },
    {
        "content": "<p>864 crates</p>",
        "id": 194746194,
        "sender_full_name": "Lokathor",
        "timestamp": 1587425979
    },
    {
        "content": "<p>oh heh it's... right there in the message</p>",
        "id": 194830503,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587487791
    },
    {
        "content": "<p>OK, so that is \"3 uses per crate <strong>that use <code>get_unchecked</code></strong>, not 3 uses per crate on <a href=\"http://crates.io\" title=\"http://crates.io\">crates.io</a> or something...</p>",
        "id": 194830608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587487837
    },
    {
        "content": "<p>About safe abstractions. Someone made a nice (but a little outdated since it's in '18) list here:<br>\n<a href=\"https://users.rust-lang.org/t/list-of-crates-that-improves-or-experiments-with-rust-but-may-be-hard-to-find/17806\" title=\"https://users.rust-lang.org/t/list-of-crates-that-improves-or-experiments-with-rust-but-may-be-hard-to-find/17806\">https://users.rust-lang.org/t/list-of-crates-that-improves-or-experiments-with-rust-but-may-be-hard-to-find/17806</a></p>",
        "id": 194919920,
        "sender_full_name": "Charles Lew",
        "timestamp": 1587557141
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I've put together a list of missing safe abstractions encountered during <a href=\"https://github.com/rust-secure-code/safety-dance\">Safety Dance</a>: <a href=\"https://hackmd.io/@xmxSgN6MSImJPcY4MOKfjA/rJSKhO9kw/edit\">https://hackmd.io/@xmxSgN6MSImJPcY4MOKfjA/rJSKhO9kw/edit</a><br>\nIt's a little rough and possibly incomplete, but if I keep working on it I'll never release it. I can go in a lot of depth on pretty much every point though, so please ask.<br>\nIt should also be editable by everyone with a link, feel free to add things there.</p>",
        "id": 203790475,
        "sender_full_name": "Shnatsel",
        "timestamp": 1594689934
    },
    {
        "content": "<p>That's really interesting!</p>",
        "id": 203790564,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594690049
    },
    {
        "content": "<p>I'm wondering if that might make a good subject for a future design meeting.</p>",
        "id": 203790569,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594690063
    },
    {
        "content": "<p>Though probably half of them are libs material rather than lang.</p>",
        "id": 203790618,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594690083
    },
    {
        "content": "<p>hey hey hey Shnatsel you very well know that there's safe explicit SIMD ;P</p>",
        "id": 203790985,
        "sender_full_name": "Lokathor",
        "timestamp": 1594690547
    },
    {
        "content": "<p>Seeing how people keep trying to build yet another version of it and promptly devolve into something that fits very few actual use cases, I'd say there's really not.<br>\nAlso you never promoted your other SIMD crate (not <code>wide</code>) so I'm kind of unaware of what it does, I don't even remember the name. Also I'm unaware of its current status.</p>",
        "id": 203791208,
        "sender_full_name": "Shnatsel",
        "timestamp": 1594690774
    },
    {
        "content": "<p>Oh it's <a href=\"https://crates.io/crates/safe_arch\"><code>safe_arch</code></a>. Looks cool but nothing uses it. People just seem to avoid explicit SIMD for the time being in general.</p>",
        "id": 203791372,
        "sender_full_name": "Shnatsel",
        "timestamp": 1594690952
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> this reminds me, we should work on announcements for your crates. <code>bytemuck</code> could use more press.</p>",
        "id": 203791571,
        "sender_full_name": "Shnatsel",
        "timestamp": 1594691219
    },
    {
        "content": "<p><code>wide</code> is half baked and should be part of libcore/libstd some day</p>",
        "id": 203791587,
        "sender_full_name": "Lokathor",
        "timestamp": 1594691272
    },
    {
        "content": "<p>I think it's easier to use than packed_simd, but also made it so i know it super well.</p>\n<p>but anyway, there's already an MCP in for SIMD improvements</p>",
        "id": 203791648,
        "sender_full_name": "Lokathor",
        "timestamp": 1594691347
    },
    {
        "content": "<p>What's an MCP?</p>",
        "id": 203792410,
        "sender_full_name": "Shnatsel",
        "timestamp": 1594692506
    },
    {
        "content": "<p>oh uh, a Major Change Proposal, it's the new \"pre-RFC\" system basically</p>",
        "id": 203792420,
        "sender_full_name": "Lokathor",
        "timestamp": 1594692554
    }
]