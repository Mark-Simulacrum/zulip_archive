[
    {
        "content": "<p>Hey <span class=\"user-group-mention\" data-user-group-id=\"1977\">@T-lang</span>, to follow up on our discussion from yesterday: I prepared a <a href=\"https://hackmd.io/AC5EJng9SDStdsjG2M9cUQ\">hackmd</a> that explains the situation around structs that implement <code>Drop</code> and outlines the options that I see and their implications.</p>\n<p>I realized one thing in writing this, which is that we actually <em>don't</em> have total freedom to decide this later. The current rules still allow capturing fields of <code>Copy</code> type from structs that implement <code>Drop</code>, which limits our options somewhat.</p>",
        "id": 251628184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630529865
    },
    {
        "content": "<p>I don't see a <em>perfect</em> option right now. The optimal thing depends on a number of factors, so making the rules do the \"best thing\" results in fairly complex rules, and the other rules tend to rule out one scenario or another. I'm not sure which is the most common. I think I lean mildly towards tweaking the rules myself, since I think erring towards capturing <em>more</em> is <em>probably</em> better, but it's not obvious to me.</p>",
        "id": 251628624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630530020
    },
    {
        "content": "<p>Whichever way we go, of course, we can have the compiler supply helpful tips.</p>",
        "id": 251628711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630530055
    },
    {
        "content": "<p>You should make it clear when you introduce your summary table that it is forward-referencing options that have not yet been defined in the doc. That was confusing to me when I first read it (and I skimmed backward to see what I missed, rather than forward)</p>",
        "id": 251634140,
        "sender_full_name": "pnkfelix",
        "timestamp": 1630532648
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> How difficult would it be, for today, to continue to treat partial moves of Drop types as an error, and make people either drop <code>move</code> or use <code>let top_level_thing = top_level_thing;</code> to capture the whole thing?</p>",
        "id": 251642412,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630537636
    },
    {
        "content": "<p><em>That</em> seems like it'd be forward-compatible, insofar as we can always make it better in the future.</p>",
        "id": 251642427,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630537650
    },
    {
        "content": "<p>Separate from that, I think it's fine to allow copying <code>Copy</code> fields; if something is only <code>Copy</code> then that can affect captures.</p>",
        "id": 251642456,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630537681
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/rfc.202229.20capture.20and.20Drop/near/251642412\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> How difficult would it be, for today, to continue to treat partial moves of Drop types as an error, and make people either drop <code>move</code> or use <code>let top_level_thing = top_level_thing;</code> to capture the whole thing?</p>\n</blockquote>\n<p>that is the current behavior, if I understand</p>",
        "id": 251642511,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630537699
    },
    {
        "content": "<p>so not difficult at all :)</p>",
        "id": 251642535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630537715
    },
    {
        "content": "<p>I'm potentially leaning that way-- I don't love the rules around moves out of <code>Drop</code> types and given that I don't think we can cover all the bases, maybe the best thing is to just add some form of capture clause (which I want to do anyway)</p>",
        "id": 251642573,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630537751
    },
    {
        "content": "<p>We can always add a capture clause in the future, but for now, I think having something like <code>let x = x;</code> to capture x seems fine.</p>",
        "id": 251642826,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630537919
    },
    {
        "content": "<p>(Or <code>drop(x)</code> at the end of the function, or something.)</p>",
        "id": 251642871,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630537928
    },
    {
        "content": "<p>I would personally be rather annoyed by needing to write <code>let x = x;</code> in closures -- my expectation was that would not need to happen in ~any Rust code, basically, beyond our migrations that try to make sure destructors are in the same place (and in many of those cases such an addition can likely just be dropped). If we <em>had</em> capture clauses of some kind, I think it would be different, but given that all the capturing patterns look pretty \"ugly\" to my eyes I'd personally want to do everything to avoid it.</p>\n<p>I think the main downside to capturing <em>more</em> by default is that some code continues to not work (e.g., if a separate field is mutated outside the closure). Our statistics seem to show that closure sizes don't really change in ~any crates in a significant way, so the \"runtime\" cost seems not terribly important. The more complicated rules I don't think practically matter; like we saw with NLL, people in general don't really seem to care about the rules so long as their code works \"as they expect\", and in practice I am doubtful anyone is relying on particular destructor orders with closure captures (and if they are, I'd argue they should be adding explicit drops...).</p>\n<p>So in general I think at least for me the potential downside of  user frustration with something that used to work no longer working (i.e., a 2229 migration they can't just delete, like most other such migrations) outweighs the possible downsides along the other axes.</p>\n<p>I think the hackmd doesn't really lay out the axes of consideration for the decision -- that might be helpful. Obviously we'll all have different weights, but I think it'd be good to add a list of \"things considered\". I've tried to add a section at the bottom with the ones from this comment -- happy to have others added.</p>",
        "id": 251652741,
        "sender_full_name": "simulacrum",
        "timestamp": 1630545480
    },
    {
        "content": "<p>I would expect it to be <em>rare</em> to need to write <code>let x = x;</code>, since it's rare to want to move out of a field from a Drop struct.</p>",
        "id": 251656206,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630548710
    },
    {
        "content": "<p>And the code in question wouldn't compile at all before.</p>",
        "id": 251656217,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630548721
    },
    {
        "content": "<p>I agree that it <em>may</em> be possible to make it work automatically in the future.</p>",
        "id": 251656269,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630548742
    },
    {
        "content": "<p>But given that this is a flagship feature of the edition, and the edition is branching approximately <em>now</em>, I'd rather go with something that's already working and tested that we can always expand later, rather than committing in a hurry to something we want but haven't fully designed or explored.</p>",
        "id": 251656295,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630548779
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/rfc.202229.20capture.20and.20Drop/near/251656217\">said</a>:</p>\n<blockquote>\n<p>And the code in question wouldn't compile at all before.</p>\n</blockquote>\n<p>I'm not sure we're on the same page here -- the code being described here <em>works</em> on 2018, and under the current implementation, stops working in 2021. (Obviously, our migrations can prevent that. But not in a nice way, and new code will need to use the weird pattern(s)).</p>\n<p>I'm not convinced the working and tested is <em>really</em> that true -- we're going to get roughly the same amount of testing I think whichever rule set we choose (I'd expect at least one more, likely more, crater runs for example). The rule change is targeted and seems likely to be pretty minimal in terms of effects, as far as I can tell. I'd personally rather say that this is showcasing we may not be ready, and should \"just\" delay the edition by a cycle. We are pushing pretty close to the deadline regardless with design discussions like this late in the cycle.</p>",
        "id": 251656523,
        "sender_full_name": "simulacrum",
        "timestamp": 1630549005
    },
    {
        "content": "<blockquote>\n<p>the code being described here works on 2018, and under the current implementation, stops working in 2021</p>\n</blockquote>\n<p>That's not my understanding. In the conversations in the meeting, it sounded like the code in question just didn't compile, and will continue to not compile.</p>",
        "id": 251659889,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630552251
    },
    {
        "content": "<p>/me tests in the playground.</p>",
        "id": 251659894,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630552260
    },
    {
        "content": "<p>Well, now I'm very confused.</p>",
        "id": 251660041,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630552424
    },
    {
        "content": "<p>I just tried <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=252fce51b2630084b2ef4b6da78fe57e\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=252fce51b2630084b2ef4b6da78fe57e</a> , which compiles and runs.</p>",
        "id": 251660046,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630552429
    },
    {
        "content": "<p>For one thing I'm confused about <em>why</em> that compiles and runs today.</p>",
        "id": 251660081,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630552444
    },
    {
        "content": "<p>And for another, if it <em>does</em> compile, I'm confused about why it would <em>stop</em> with RFC 2229.</p>",
        "id": 251660097,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630552457
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=c6a98aa76ae001aaf346af87b6b88ce4\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=c6a98aa76ae001aaf346af87b6b88ce4</a> doesn't work, which makes more sense.</p>",
        "id": 251660147,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630552527
    },
    {
        "content": "<p>So it seems like <code>println!(\"{}\", foo.0)</code> does the right thing, and translates into a borrow which doesn't require moving out of the struct that implements <code>Drop</code>.</p>",
        "id": 251660168,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630552557
    },
    {
        "content": "<p>Given all that, it's not obvious to me why we'd need to make this <em>stop</em> working.</p>",
        "id": 251660347,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630552737
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/rfc.202229.20capture.20and.20Drop/near/251660081\">said</a>:</p>\n<blockquote>\n<p>For one thing I'm confused about <em>why</em> that compiles and runs today.</p>\n</blockquote>\n<p>because today we always capture entire variables (in this case, <code>w</code>)</p>",
        "id": 251722011,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630592124
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/rfc.202229.20capture.20and.20Drop/near/251660347\">said</a>:</p>\n<blockquote>\n<p>Given all that, it's not obvious to me why we'd need to make this <em>stop</em> working.</p>\n</blockquote>\n<p>that's the whole topic of the doc :)</p>",
        "id": 251722039,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630592135
    },
    {
        "content": "<p>I agree that I didn't get around to \"areas of consideration\", let me try to add some.</p>",
        "id": 251722073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630592146
    },
    {
        "content": "<p>I started where Mark is, moved a bit, but I might be circling back around. I'm trying to think about this a bit from the perspective, though, of a Rust 2021 user, who doesn't know/care what \"used to work\" in Rust 2018, and wants consistent rules.</p>",
        "id": 251722178,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630592170
    },
    {
        "content": "<p>I think my intuition is that no one will actually try to learn the rules, and truncating at a drop-implementing struct is not that <em>hard</em> a rule, really.</p>",
        "id": 251724359,
        "sender_full_name": "simulacrum",
        "timestamp": 1630592993
    },
    {
        "content": "<p>I wrote out my consideratons</p>",
        "id": 251724906,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630593169
    },
    {
        "content": "<p>There is probably one more</p>",
        "id": 251724921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630593174
    },
    {
        "content": "<p>just added</p>",
        "id": 251725344,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630593322
    },
    {
        "content": "<p>that was a helpful exercise, <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span>, thanks, I think it changed my position yet again ;)</p>",
        "id": 251725369,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630593331
    },
    {
        "content": "<p>I think I favor the \"truncate by-value captures at Drop if the type is not copy\"</p>",
        "id": 251725415,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630593351
    },
    {
        "content": "<p>one thing I realized is that adding <code>Copy</code> can <em>already</em> change when code runs today, in Rust 2018</p>",
        "id": 251725653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630593421
    },
    {
        "content": "<p>as it can cause local variables to change from \"by ref\" access to \"by move\"</p>",
        "id": 251725675,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630593429
    },
    {
        "content": "<p>this can also inluence what kind of borrow check errors you get</p>",
        "id": 251725763,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630593466
    },
    {
        "content": "<p>same as <code>Drop</code></p>",
        "id": 251725765,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630593468
    },
    {
        "content": "<p>all of these things exist today and I don't think they've <em>ever</em> come on my radar as a source of concern</p>",
        "id": 251725849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630593487
    },
    {
        "content": "<p>in contrast to \"closures that aren't capturing the right things\" :P</p>",
        "id": 251725895,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630593502
    },
    {
        "content": "<p><a href=\"https://hackmd.io/AC5EJng9SDStdsjG2M9cUQ?view#Niko%E2%80%99s-conclusion\">Niko's conclusion</a></p>",
        "id": 251726408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630593716
    },
    {
        "content": "<p>people should feel free to add other lines of reasoning if they disagree</p>",
        "id": 251726449,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630593723
    },
    {
        "content": "<p>Reposting here for visibility: <a href=\"/user_uploads/4715/pZGD5WvTyqgNxaiKA_e31l-d/Screen-Shot-2021-09-02-at-20.56.22.png\">Screen-Shot-2021-09-02-at-20.56.22.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/pZGD5WvTyqgNxaiKA_e31l-d/Screen-Shot-2021-09-02-at-20.56.22.png\" title=\"Screen-Shot-2021-09-02-at-20.56.22.png\"><img src=\"/user_uploads/4715/pZGD5WvTyqgNxaiKA_e31l-d/Screen-Shot-2021-09-02-at-20.56.22.png\"></a></div>",
        "id": 251767689,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1630608999
    },
    {
        "content": "<p>So the fix to remain <code>Fn</code> or <code>FnMut()</code> is to <code>drop(&amp;w);</code> or <code>let _ = &amp;w;</code> as written in the hachmd: anything that has to do with <code>w</code>, but <em>which does not move it</em></p>",
        "id": 251768152,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1630609179
    },
    {
        "content": "<p>Yes the migration lint we suggest is <code>let _ = &amp;w</code></p>",
        "id": 251770469,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630610051
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span>, you are correct</p>",
        "id": 251776978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630612688
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/rfc.202229.20capture.20and.20Drop/near/251726449\">said</a>:</p>\n<blockquote>\n<p>people should feel free to add other lines of reasoning if they disagree</p>\n</blockquote>\n<p>Hey <span class=\"user-group-mention\" data-user-group-id=\"1977\">@T-lang</span> -- I'd appreciate a <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> or something to indicate \"I read this and it made some sense to me\" and perhaps a <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> if you're not sure :) I'd be happy to talk it over with people</p>",
        "id": 251876851,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630674438
    },
    {
        "content": "<p>(others too :)</p>",
        "id": 251876870,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630674448
    },
    {
        "content": "<p><span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> from me</p>",
        "id": 251878848,
        "sender_full_name": "simulacrum",
        "timestamp": 1630675367
    },
    {
        "content": "<p>I am thinking I could start an FCP on the PR <a href=\"https://github.com/rust-lang/rust/pull/88477\">https://github.com/rust-lang/rust/pull/88477</a> along with the write-up</p>",
        "id": 251885013,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630677735
    },
    {
        "content": "<p>(Though we probably don't want to wait 10 days).</p>",
        "id": 251887321,
        "sender_full_name": "simulacrum",
        "timestamp": 1630678597
    },
    {
        "content": "<p>no, but it's a way to have folks check</p>",
        "id": 251887899,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630678813
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232018\">Daniel Henry-Mantilla</span> <a href=\"#narrow/stream/213817-t-lang/topic/rfc.202229.20capture.20and.20Drop/near/251768152\">said</a>:</p>\n<blockquote>\n<p>So the fix to remain <code>Fn</code> or <code>FnMut()</code> is to <code>drop(&amp;w);</code> or <code>let _ = &amp;w;</code> as written in the hachmd: anything that has to do with <code>w</code>, but <em>which does not move it</em></p>\n</blockquote>\n<p>Something like using <code>&amp;(&amp;w).0</code> in place of the <code>&amp;w.0</code> works as well as a workaround. It avoids having to type out the variable name <code>w</code> a second time.</p>",
        "id": 252027964,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1630791445
    }
]