[
    {
        "content": "<p><a href=\"https://blog.regehr.org/archives/1737\">https://blog.regehr.org/archives/1737</a> is an excellent blog post on LLVM IR semantics. Many of the concerns there apply to Rust, in particular those in \"Other issues\". The FP issue is <a href=\"https://github.com/rust-lang/rust/issues/73328\">https://github.com/rust-lang/rust/issues/73328</a>. \"Load widening\" and \"inttoptr(ptrtoint(x)) =&gt; x\" is something I mention occasionally.</p>\n<p>The one I haven't seen is \"Shufflevector semantics\". What are the Rust-side rules here for OOB shufflevector masks -- is it just UB and so we are fine no matter what LLVM decides?<br>\nCc <span class=\"user-group-mention\" data-user-group-id=\"1176\">@WG-llvm</span> <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span></p>",
        "id": 200978945,
        "sender_full_name": "RalfJ",
        "timestamp": 1592290666
    },
    {
        "content": "<p>I don't think we have any generic shufflevector-like operation in stable (the intrinsic used to implement some core::arch functions is unstable), so we shouldn't be constrained here. If it's not already spelled out then I agree we should just make OOB indices UB. More generally, LLVM's <code>shufflevector</code> is very clever and general to represent a million different patterns in one instruction, but there's no reason to mirror this in Rust interfaces, we can just have dedicated intrinsics for different patterns that side-step these tricky aspects.</p>",
        "id": 200986139,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1592296331
    },
    {
        "content": "<p>I am not aware of the shuffle const being constrained other than by the standard \"the intrinsic does what the Intel docs say\", and they don't say UB for an OOB const, so right now it's not UB.</p>\n<p>In the <code>safe_arch</code> crate I do use masking to only allow in-bounds values to be generated.</p>",
        "id": 201024158,
        "sender_full_name": "Lokathor",
        "timestamp": 1592318089
    },
    {
        "content": "<p>Since the mask must be a compile-time constant I think it is implied that the compiler is expected to error if an invalid value is passed in.</p>",
        "id": 201034629,
        "sender_full_name": "Amanieu",
        "timestamp": 1592322329
    },
    {
        "content": "<p>but then if this is so trivial to detect at compiletime, why does LLVM not do that?</p>",
        "id": 201471429,
        "sender_full_name": "RalfJ",
        "timestamp": 1592647973
    },
    {
        "content": "<p>I can only guess, but in other situations similar to this, some relevant concerns are: backwards compatibility (specifically, ability to upgrade old IR), hard errors being undesirable if it occurs in dead code (e.g., from C++ template instantiations), and hard-UB (instead of poison/undef result) creating a footgun for code hoisting transforms.</p>",
        "id": 201472442,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1592649801
    },
    {
        "content": "<p>The first point might be particular important since shufflevector semantics in general are... very old and organically-grown.</p>",
        "id": 201472505,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1592649878
    },
    {
        "content": "<p>okay, I see</p>",
        "id": 201472743,
        "sender_full_name": "RalfJ",
        "timestamp": 1592650368
    },
    {
        "content": "<p>so if we agree that rustc should just reject OOB indices statically for now... is that currently implemented and tested?</p>",
        "id": 201472750,
        "sender_full_name": "RalfJ",
        "timestamp": 1592650401
    },
    {
        "content": "<p>Nope: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=3e5c8da20683871a552d0b4067a3f8cc\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=3e5c8da20683871a552d0b4067a3f8cc</a></p>",
        "id": 201473154,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1592651077
    },
    {
        "content": "<p>But I don't know if we can <em>just</em> prohibit it. There might be some std::arch intrinsics using \"shufflevector that results in some undef lanes\" internally because that's (part of) the canonical way to represent certain SIMD operations in LLVM IR. If such a check is implemented and it fires on std::arch code, then we may have to add new intrinsics to express those patterns. (Which would be good, to be clear, I just want to note that this may be necessary to make the move.)</p>",
        "id": 201473223,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1592651211
    },
    {
        "content": "<p>what I am interested in here (as usual) is the MIR semantics</p>",
        "id": 201473600,
        "sender_full_name": "RalfJ",
        "timestamp": 1592651931
    },
    {
        "content": "<p>if we have such things internally in <code>std::arch</code> that would mean MIR already supports OOB shuffles (and makes them undef or UB or something)</p>",
        "id": 201473609,
        "sender_full_name": "RalfJ",
        "timestamp": 1592651962
    },
    {
        "content": "<p>well looks like this needs an issue</p>",
        "id": 201473612,
        "sender_full_name": "RalfJ",
        "timestamp": 1592651978
    },
    {
        "content": "<p>I don't think there's much use in trying to reverse engineer what the de facto MIR semantics of this intrinsics are today. There's (roughly) agreement what the semantics <em>ought</em> to be, and I'm just pointing out we may need some extra intrinsics to actually implement and enforce the desirable semantics.</p>",
        "id": 201473725,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1592652139
    },
    {
        "content": "<p>so, like this? <a href=\"https://github.com/rust-lang/rust/issues/73542\">https://github.com/rust-lang/rust/issues/73542</a></p>",
        "id": 201473914,
        "sender_full_name": "RalfJ",
        "timestamp": 1592652523
    },
    {
        "content": "<p>LGTM</p>",
        "id": 201473929,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1592652577
    },
    {
        "content": "<p>Trying to make sure I understand something. Is this about SIMD operations that run off the end of a slice, and then assume that at a machine level they won't touch the bits that came from past the end?</p>",
        "id": 201481245,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1592665469
    },
    {
        "content": "<p>Or am I missing the nature of the OOB operations here?</p>",
        "id": 201481261,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1592665502
    },
    {
        "content": "<p>No memory accesses. Just vector -&gt; vector shuffles. There's more discussion in the issue Ralf created.</p>",
        "id": 201482929,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1592667917
    },
    {
        "content": "<p>I read through that whole issue, and the linked blog post, and didn't see what \"OOB masks\" meant.</p>",
        "id": 201483448,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1592668563
    },
    {
        "content": "<p>So, something like using a mask value of 12 with a vector register containing 8 values?</p>",
        "id": 201483464,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1592668596
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> this is about an operation like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>simd_shuffle4(x, y, [0,4,7,9])\n</code></pre></div>\n\n\n<p>The indices in the last argument refer to the first two arguments' elements, and as such can be OOB.</p>",
        "id": 201483588,
        "sender_full_name": "RalfJ",
        "timestamp": 1592668742
    },
    {
        "content": "<p>Got it, thank you.</p>",
        "id": 201483608,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1592668766
    },
    {
        "content": "<p>I agree with you that that doesn't seem like something we need to support.</p>",
        "id": 201483683,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1592668806
    },
    {
        "content": "<blockquote>\n<p>SIMD operations that run off the end of a slice, and then assume that at a machine level they won't touch the bits that came from past the end?</p>\n</blockquote>\n<p>Is there another issue discussing this? Itâ€™s relevant to my crates.</p>",
        "id": 201494570,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1592683184
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> I don't think you can do that in general, based on my limited understanding of the situation, but you should write out your scenario as a thread of its own probably.</p>",
        "id": 201498165,
        "sender_full_name": "Lokathor",
        "timestamp": 1592687836
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> I think <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/2\">https://github.com/rust-lang/unsafe-code-guidelines/issues/2</a> is what you are looking for</p>",
        "id": 201526694,
        "sender_full_name": "RalfJ",
        "timestamp": 1592732354
    },
    {
        "content": "<p>the summary is, I have no idea how to do this given LLVM's semantics</p>",
        "id": 201526696,
        "sender_full_name": "RalfJ",
        "timestamp": 1592732366
    },
    {
        "content": "<p>so this would likely need someone to push a corresponding change through LLVM first</p>",
        "id": 201526702,
        "sender_full_name": "RalfJ",
        "timestamp": 1592732381
    },
    {
        "content": "<p>Yes that looks relevant. Thank you.</p>",
        "id": 201528666,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1592735797
    }
]