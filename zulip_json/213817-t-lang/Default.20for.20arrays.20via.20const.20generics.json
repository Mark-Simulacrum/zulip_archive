[
    {
        "content": "<p>MikailBag (who might be <span class=\"user-mention\" data-user-id=\"223584\">@Mikail Bagishov</span> on zulip, not sure) opened <a href=\"https://github.com/rust-lang/rust/issues/74254\">#74254</a> recently. This PR implements <code>Default</code> for arrays using const generics. I am confident in the implementation and think the we can use this after some doc/naming improvements and some more tests.</p>\n<p>Unlike the traits implemented in <a href=\"https://github.com/rust-lang/rust/issues/74060\">#74060</a>, <code>Default</code> is also implemented for <code>[T; 0]</code>, even if <code>T</code> does not implement <code>Default</code> itself, which means we can't just use <code>impl&lt;T, const N: usize&gt; Default for [T; N]</code>.</p>",
        "id": 204289821,
        "sender_full_name": "lcnr",
        "timestamp": 1595058427
    },
    {
        "content": "<p>There are 3 ways we can proceed here.</p>\n<ol>\n<li>keep using the old manual impls</li>\n<li>use the new impls with a <code>LengthAtMost32</code> bound</li>\n<li>do not restrict the default impls, remove the bound on <code>Default</code> at the same time as <a href=\"https://github.com/rust-lang/rust/issues/74060\">#74060</a> (in the same stable release)</li>\n</ol>",
        "id": 204289822,
        "sender_full_name": "lcnr",
        "timestamp": 1595058434
    },
    {
        "content": "<p>First of all, I <em>strongly</em> believe 2 is better than 1. Using const generics here results in better error messages, <a href=\"https://perf.rust-lang.org/compare.html?start=c2dbebd3d4ad21e80ef4e7535dd1e868aaad7e50&amp;end=fdf2a2df58d771b9afde026fa1c894dfd15e138e\">slightly faster compile times</a>(not really...  it seems like it's most <code>cargo doc</code>which got faster) and cleaner docs.</p>\n<p>We do not perfectly optimize the use of <code>MaybeUninit::assume_init</code> here though,<br>\nwhich results in slightly worse codegen for types with <code>T::default() != mem::zeroed()</code>, which imo will most probably not be noticeable.</p>",
        "id": 204289826,
        "sender_full_name": "lcnr",
        "timestamp": 1595058450
    },
    {
        "content": "<p>Now, about 3. This PR uses <code>#![feature(marker_trait_attrs, const_generics, min_specialization)]</code>, meaning that doing this implicitly guarantees that we will always have some version of this in the standard library.</p>\n<p>I am personally <em>slightly</em> in favor of not restricting <code>Default</code> to <code>ArrayLenAtMost32</code>.</p>",
        "id": 204289868,
        "sender_full_name": "lcnr",
        "timestamp": 1595058488
    },
    {
        "content": "<p>It looks like <code>marker_trait_attrs</code> is fairly close to stabilization,<br>\nsee <a href=\"https://github.com/rust-lang/rust/issues/29864#issuecomment-660323818\">#29864(comment)</a> and <code>min_specialization</code> is already very prevalent inside of std for performance reasons, which makes me believe that it will be very unlikely that we want/can remove these features without also having a working replacement for the <code>Default</code> impls.</p>",
        "id": 204289877,
        "sender_full_name": "lcnr",
        "timestamp": 1595058506
    },
    {
        "content": "<p>Even if <code>min_specialization</code> or <code>marker_trait_attrs</code> end up getting removed, we can still keep this implementation by changing <code>Default</code> to a <code>#[lang_item]</code> and adding a builtin impl for <code>[T; 0]</code>. (not completely sure how easy this would be, if required, I can try and create a proof of concept here)</p>",
        "id": 204289882,
        "sender_full_name": "lcnr",
        "timestamp": 1595058518
    },
    {
        "content": "<p>Why <code>Default</code> for <code>N &gt; 32 </code>is desirable:</p>\n<ul>\n<li>arrays implement default <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> </li>\n<li>consistency with other impls after <a href=\"https://github.com/rust-lang/rust/issues/74060\">#74060</a> lands</li>\n<li><code>#[derive(Default)]</code> now works for structs containing arrays.</li>\n<li>We can remove <code>ArrayLenAtMost32</code>, resulting in cleaner docs (and potentially minimally better compile perf).</li>\n</ul>",
        "id": 204289892,
        "sender_full_name": "lcnr",
        "timestamp": 1595058583
    },
    {
        "content": "<p>Any thoughts here?</p>",
        "id": 204289932,
        "sender_full_name": "lcnr",
        "timestamp": 1595058627
    },
    {
        "content": "<p>I'd like to know more about MaybeUninit optimization problems:<br>\nWho is at fault: rustc/llvm?<br>\nIs it difficult to fix?<br>\nShould we wait until that problem is resolved?</p>",
        "id": 204294882,
        "sender_full_name": "Mikail Bagishov",
        "timestamp": 1595067897
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119235\">David Tolnay</span> opened a issue for this in <a href=\"https://github.com/rust-lang/rust/issues/74267\">#74267</a>.</p>\n<blockquote>\n<p>Who is at fault: rustc/llvm?</p>\n</blockquote>\n<p>At least from what I can see this is an issue with llvm which we might be able to circumvent with better mir opts.</p>\n<blockquote>\n<p>Is it difficult to fix?</p>\n</blockquote>\n<p>Not completely sure but I would expect that it is not too difficult.</p>\n<blockquote>\n<p>Should we wait until that problem is resolved?</p>\n</blockquote>\n<p>I personally don't think so as I highly doubt this will be noticeable.</p>",
        "id": 204295377,
        "sender_full_name": "lcnr",
        "timestamp": 1595068922
    },
    {
        "content": "<p>I seem to recall seeing that for any usize N, there would be a default for length {N+1}. That avoided the 0 issue because the const of 0 would generate an impl for length 1.</p>",
        "id": 204298984,
        "sender_full_name": "Lokathor",
        "timestamp": 1595075679
    },
    {
        "content": "<p>Am I totally imagining that or was that a suggestion at one point?</p>",
        "id": 204298987,
        "sender_full_name": "Lokathor",
        "timestamp": 1595075703
    },
    {
        "content": "<p>uuuh</p>",
        "id": 204299111,
        "sender_full_name": "lcnr",
        "timestamp": 1595075989
    },
    {
        "content": "<p>that's really far from working as desired :/</p>",
        "id": 204299150,
        "sender_full_name": "lcnr",
        "timestamp": 1595076010
    },
    {
        "content": "<p>so it does make sense from a theoretical perspective, but there are quite a lot of reasons why this won't actually work</p>",
        "id": 204299168,
        "sender_full_name": "lcnr",
        "timestamp": 1595076052
    },
    {
        "content": "<p>ignoring the current <code>ConstEvaluatable</code> restriction, this doesn't enable us to write <code>&lt;[T; N]&gt;::default()</code> because rustc doesn't combine impls</p>",
        "id": 204299226,
        "sender_full_name": "lcnr",
        "timestamp": 1595076143
    },
    {
        "content": "<p>i.e. we don't allow the following</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">A</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&lt;</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&lt;</span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"c1\">// ...</span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&lt;</span><span class=\"mi\">255</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">A</span>::<span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span>::<span class=\"n\">foo</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204299301,
        "sender_full_name": "lcnr",
        "timestamp": 1595076319
    },
    {
        "content": "<p>for</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#![feature(const_generics)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">A</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>we also get the error</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0207]: the const parameter `N` is not constrained by the impl trait, self type, or predicates\n --&gt; src/lib.rs:4:12\n  |\n4 | impl&lt;const N: usize&gt; Foo for A&lt;{N + 1}&gt; {}\n  |            ^ unconstrained const parameter\n\nerror: aborting due to previous error; 1 warning emitted\n</code></pre></div>",
        "id": 204299363,
        "sender_full_name": "lcnr",
        "timestamp": 1595076445
    },
    {
        "content": "<p>If you could do <code>{N+1}</code>, would that automatically exclude overflow?</p>",
        "id": 204334382,
        "sender_full_name": "cuviper",
        "timestamp": 1595137335
    },
    {
        "content": "<p>idk, this doesn't really have clear semantics. <code>impl&lt;const N: usize&gt; Foo for A&lt;{N + 1}&gt; {}</code>should probably never work for the same reasons that the following is not possible</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Iterator</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span>::<span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>If we have something like <code>impl&lt;const N: usize&gt; Foo&lt;N&gt; for A&lt;{N + 1}&gt; {}</code>, then we would probably get a const eval error when writing<br>\n<code>let _: impl Foo&lt;{std::usize::MAX}&gt; = A;</code></p>",
        "id": 204338202,
        "sender_full_name": "lcnr",
        "timestamp": 1595145515
    },
    {
        "content": "<p>We don't really have a good plan for things like <code>{N + 1}</code> yet, so I can't give you definite answers here</p>",
        "id": 204338215,
        "sender_full_name": "lcnr",
        "timestamp": 1595145593
    },
    {
        "content": "<p>That's fine – if it's an open question that's a good reason why this shouldn't be supported yet. 🙂</p>",
        "id": 204370280,
        "sender_full_name": "cuviper",
        "timestamp": 1595191860
    }
]