[
    {
        "content": "<p>Is there any work done on opt-out blanket impls, by which I mean a generic impl in a crate that defines a trait, where a crate defining a type could define a local impl for the same trait that would supplant the generic one, rather than being a coherence violation? Is there any conceptual barrier to that?</p>\n<p>Asking because I'm writing a reply on the IndexGet/DerefMove thread and I'm realizing I really want it.</p>",
        "id": 201910475,
        "sender_full_name": "alercah",
        "timestamp": 1593037000
    },
    {
        "content": "<p>(In this specific case, we can get around it because we're talking about operators, so the compiler could do the fallback work in the language, but that's far less clean I think.)</p>",
        "id": 201910886,
        "sender_full_name": "alercah",
        "timestamp": 1593037336
    },
    {
        "content": "<p>I guess this is really a particular case of specialization, I'll poke at that.</p>",
        "id": 201911090,
        "sender_full_name": "alercah",
        "timestamp": 1593037511
    },
    {
        "content": "<p>Wait... for some reason I thought that specialization as it was proposed still required each leaf impl to be declared separately. I think I can safely be ignored, then.</p>",
        "id": 201911268,
        "sender_full_name": "alercah",
        "timestamp": 1593037623
    },
    {
        "content": "<p>I'll just mosey on back out :P</p>",
        "id": 201912477,
        "sender_full_name": "alercah",
        "timestamp": 1593038433
    },
    {
        "content": "<p>This sounds like specialization to me</p>",
        "id": 201922995,
        "sender_full_name": "Lokathor",
        "timestamp": 1593047798
    },
    {
        "content": "<p>Okay, actual question though: is there any way to make blanket impl that can be <em>opted out of</em> rather than implemented differently.</p>\n<p>Ignoring bikeshed syntax, this would mean that <code>opt_out impl&lt;T&gt; Trait for T</code> couldn't even be used in a generic context where you just have <code>T</code>.</p>",
        "id": 202015619,
        "sender_full_name": "alercah",
        "timestamp": 1593114157
    },
    {
        "content": "<p>Looking for ways that <code>m[k] = v;</code> could work and <code>m[&amp;k] = v;</code> could fail without breaking indexed assignment for existing <code>IndexMut</code> users.</p>",
        "id": 202015665,
        "sender_full_name": "alercah",
        "timestamp": 1593114201
    },
    {
        "content": "<p>Your new (actual) question sounds like negative impls?</p>",
        "id": 202611466,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593630825
    },
    {
        "content": "<p>I've pondered before about whether there's a version of negative bounds that wouldn't be a hazard, perhaps by saying that you can have an impl with a negative bound only when there's also an impl for the equivalent but with a positive bound.  That would allow one for <code>: Copy</code> and one for <code>: Clone + !Copy</code>, for example, which might hit many of the places it was desired.</p>",
        "id": 203301498,
        "sender_full_name": "scottmcm",
        "timestamp": 1594231463
    },
    {
        "content": "<p>(long-time reader, first-time caller)</p>\n<p>that would probably solve a lot of cases where I wanted negative bounds; it was almost always express a fully disjoint calling pattern</p>",
        "id": 203307766,
        "sender_full_name": "David Barsky",
        "timestamp": 1594234678
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> there is a version of negative that works ok, I think, but it involves something like this:</p>",
        "id": 203325941,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594243733
    },
    {
        "content": "<p>for each trait <code>Foo</code>, you can imagine there is an \"anti-trait\" called <code>!Foo</code></p>",
        "id": 203325963,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594243745
    },
    {
        "content": "<p>coherence guarantees that the impls of <code>Foo</code> and <code>!Foo</code> do not overlap</p>",
        "id": 203325993,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594243758
    },
    {
        "content": "<p>(in the same way that it guarantees distinct impls of <code>Foo</code> don't overlap)</p>",
        "id": 203326012,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594243767
    },
    {
        "content": "<p>now you can write <code>T: Foo</code> and <code>T: !Foo</code> and they are both fine -- basically, proving <code>T: !Foo</code> involves searching for an applicable impl of <code>!Foo</code></p>",
        "id": 203326048,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594243789
    },
    {
        "content": "<p>this <em>doesn't</em> incorporate the idea of \"you get to assume your crate-local types do not implement things\"</p>",
        "id": 203326104,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594243805
    },
    {
        "content": "<p>and we'd also maybe want to extend coherence to understand that <code>T: Copy</code> and <code>T: !Copy</code> are mutually incompaible</p>",
        "id": 203326119,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594243818
    },
    {
        "content": "<p>but it avoids some of the hazards of adding negative goals that we have to prove, because we'r enot really proving negative goals</p>",
        "id": 203326148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594243834
    },
    {
        "content": "<p>that is, we're not proving \"there is no impl of <code>Foo</code>\", we're proving \"there is a negative impl of <code>Foo</code>\"</p>",
        "id": 203326162,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594243848
    },
    {
        "content": "<p>That makes total sense to me for allowing people to write <code>impl !Copy for String</code>, or whatever, and have things take advantage of it explicitly.  I guess my post had been more from the specialization angle rather than the disjointness angle -- not asking people to _promise_ <code>!Copy</code>, but taking advantage of <code>Copy</code>-vs-<code>!Copy</code> for different implementations in such a way that my code will continue to work regardless of whether they implement <code>Copy</code> or <code>!Copy</code> on their type that currently isn't either.</p>",
        "id": 204492967,
        "sender_full_name": "scottmcm",
        "timestamp": 1595285193
    }
]