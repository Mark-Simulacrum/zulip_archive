[
    {
        "content": "<p><em>I think I brought this up before but confused everyone with the meaning of \"negative impl\".</em></p>\n<p>It would be very handy to be able to tell the compiler that for certain trait impls we wish to exclude a specific type or group of types.<br>\nIn most cases I will be mentioning this would actually only be a more limited case, only for the type which is <code>Self</code>.</p>\n<p>I've seen it happen elsewhere (with <code>AsyncBufRead</code>) but the use case is particularly prevalent with dyn error wrapper such as <code>anyhow</code>, <code>eyre</code>, <code>http_types::Error</code>. It becomes particularly annoying if libaries use these types 9even if it is with good reason) because downstream users loose auto-type-conversion (say between <code>anyhow</code> and <code>eyre</code>) because dyn error wrappers which implement <code>From&lt;StdError&gt;</code> (so that they work seamlessly with <code>?</code>) cannot impl <code>StdError</code> themselves because that then conflicts with <code>From&lt;T&gt; for T</code>.</p>\n<p>This seems like it could be solved by allowing you to say something like so:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">From</span><span class=\"o\">&lt;</span><span class=\"n\">std</span>::<span class=\"n\">error</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">anyhow</span>::<span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"n\">exclude</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// No longer tries to override `From&lt;T&gt; for T` with `From&lt;Self&gt; for Self` from this impl.</span>\n<span class=\"w\">    </span><span class=\"c1\">//</span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Has this idea been proposed before? If so, does anyone have links to discussions?</p>\n<p>Otherwise, does anyone see any obvious reasons that would make this particularly difficult to do?</p>\n<p>As far as I am aware, this is not covered well by the existing specialization proposals, negative trait impls, etc; but it seems much easier and also much more immediately useful.</p>",
        "id": 248513753,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1628186720
    },
    {
        "content": "<p>No comments? Should I just try making a pre-RFC to <a href=\"http://internals.rust-lang.org\">internals.rust-lang.org</a> instead?</p>",
        "id": 249011973,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1628617598
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"319552\">Jeremiah Senkpiel</span> <a href=\"#narrow/stream/213817-t-lang/topic/.22exclude.20Type.22.20in.20Trait.20impl/near/249011973\">said</a>:</p>\n<blockquote>\n<p>No comments? Should I just try making a pre-RFC to <a href=\"http://internals.rust-lang.org\">internals.rust-lang.org</a> instead?</p>\n</blockquote>\n<p>Posting on internals is probably a good idea.<br>\nI think this proposal (or something like it) would be useful -- something I'd want added to Rust.</p>",
        "id": 249015451,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1628619255
    }
]