[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> and <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> , while talking to alex about preparing a doc for next week’s design meeting, I noticed there wasn’t a calendar event for it. I don’t have permissions to create an event on the lang team calendar; otherwise I’d just do it by cloning the “dismantle &amp;Atomic bomb” meeting.</p>",
        "id": 234897605,
        "sender_full_name": "pnkfelix",
        "timestamp": 1618596448
    },
    {
        "content": "<p>Ah, thanks for reminding me</p>",
        "id": 234905517,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618600038
    },
    {
        "content": "<p>I was going to create that today!</p>",
        "id": 234905533,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618600041
    },
    {
        "content": "<p>let me go do that</p>",
        "id": 234905534,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618600043
    },
    {
        "content": "<p>but I also had some questions for <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> on this topic...</p>",
        "id": 234905757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618600145
    },
    {
        "content": "<p>...trying to remember what they were</p>",
        "id": 234905766,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618600148
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> if you're around could you merge <a href=\"https://github.com/rust-lang/blog.rust-lang.org/pull/818\">https://github.com/rust-lang/blog.rust-lang.org/pull/818</a> ?</p>",
        "id": 234907792,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618601137
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> once nits are fixed, happy to merge. feel free to ping me.</p>",
        "id": 234909807,
        "sender_full_name": "simulacrum",
        "timestamp": 1618602128
    },
    {
        "content": "<p>I've written up some initial notes ahead of time for this at <a href=\"https://hackmd.io/Xrgc68kDRtmNnG8g8CzA6Q\">https://hackmd.io/Xrgc68kDRtmNnG8g8CzA6Q</a>, but if folks have other questions please let me know and I can fill in more info!</p>",
        "id": 234925501,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1618609087
    },
    {
        "content": "<p>am I connected to the correct zoom session? <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ?</p>",
        "id": 235545974,
        "sender_full_name": "pnkfelix",
        "timestamp": 1619024534
    },
    {
        "content": "<p>I'm wondering the same thing.</p>",
        "id": 235546013,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1619024549
    },
    {
        "content": "<p>FWIW I would personally be nowhere near comfortable stabilizing anything related to <code>extern \"wasm\"</code> just yet, I would personally at least want a lot more input from C and the expected migration paths there</p>",
        "id": 235554765,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1619028083
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116015\">Alex Crichton</span> <a href=\"#narrow/stream/213817-t-lang/topic/design.20meeting.202021-04-21.3A.20extern.20.E2.80.9Cwasm.22/near/235554765\">said</a>:</p>\n<blockquote>\n<p>FWIW I would personally be nowhere near comfortable stabilizing anything related to <code>extern \"wasm\"</code> just yet, I would personally at least want a lot more input from C and the expected migration paths there</p>\n</blockquote>\n<p>That's good to know.</p>",
        "id": 235554801,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1619028103
    },
    {
        "content": "<p>If you're intending this to be nightly only for quite some time, that's an important detail.</p>",
        "id": 235554827,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1619028116
    },
    {
        "content": "<p>I think the story for how C intends to migrate ABI changes will affect this a lot, whether we want it at all or how we expose it</p>",
        "id": 235554832,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1619028121
    },
    {
        "content": "<p>Yeah. I wonder if the LLVM transition is going to end up being as painful as C++ ABI transitions have been in the past.</p>",
        "id": 235554901,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1619028140
    },
    {
        "content": "<p>I do really want to get multi-value returns stable on Rust sooner rather than later, but you can sort of do that with <code>-Ctarget-feature=+multivalue</code> today</p>",
        "id": 235554925,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1619028148
    },
    {
        "content": "<p>so I think there's less pressure</p>",
        "id": 235554953,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1619028159
    },
    {
        "content": "<p>my prediction is it's going to be just as painful</p>",
        "id": 235554977,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1619028171
    },
    {
        "content": "<p>that there will be a flag \"this object uses this abi\" and the world blows up if anything disagrees</p>",
        "id": 235555035,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1619028187
    },
    {
        "content": "<p>At least there's a flag.</p>",
        "id": 235555242,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1619028267
    },
    {
        "content": "<p>With C++, some of the transitions didn't even have <em>that</em>.</p>",
        "id": 235555261,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1619028277
    },
    {
        "content": "<p>In the context of ABI, I'd rather a slightly more painful transition than a lingering one.</p>",
        "id": 235555327,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1619028305
    },
    {
        "content": "<p>I've posted a comment for other C folks to take a look at -- <a href=\"https://github.com/WebAssembly/tool-conventions/issues/54#issuecomment-824274703\">https://github.com/WebAssembly/tool-conventions/issues/54#issuecomment-824274703</a> -- and doing some more thinking I think that <code>extern \"wasm\"</code> may not end up needing a definition in Rust. The theory, I believe, is that C will have multiple versions of the wasm C ABI. Currently we're at \"v1\" and presumably \"v2\" will be the one that incorporates multiple return values. Given this situation what we can do in Rust is something like:</p>\n<ul>\n<li>For each ABI version defined for C, add a <code>extern \"wasm-v2\"</code> ABI</li>\n<li>Automatically map <code>extern \"C\"</code> to whatever the default ABI is at the time (e.g. today it's <code>\"v1\"</code>)</li>\n</ul>\n<p>And... that's it. That way Rust isn't defining anything itself. All types are supported at all time just like the C ABI, and if wasm ever adds new features that changes the ABI then <em>C</em> would add another version of the ABI and we would then match that in Rust. This I think gives freedom to evolve over time while still having a generally usable ABI today.</p>\n<p>What this would mean is that I would add <code>extern \"wasm-v1\"</code> as an alias to <code>extern \"C\"</code> today. I would then rename <code>extern \"wasm\"</code> to <code>extern \"wasm-v2\"</code>. Stabilization would then be gated on there actually being a C ABI v2 agreed upon by wasm folks (external from Rust) and then a stabilization for the naming scheme and ABI scheme in Rust (this is for Rust folks).</p>",
        "id": 235560839,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1619030564
    },
    {
        "content": "<p>For thread support and simd you already need to compile everything with those feature flags enabled. At least in case of threads lld will actively refuse linking as far as I know and in case of simd rust changes the abi for simd types depending on of simd is enabled or not. Unlike for other archs. The most sensible thing IMHO would be to just make the abi conditional on multivalue being enabled or not.</p>",
        "id": 235562018,
        "sender_full_name": "bjorn3",
        "timestamp": 1619031086
    },
    {
        "content": "<p>We talked about this in the meeting but I would personally prefer to avoid doing that. That doesn't work for precompiled binaries such as libstd or wasi-libc which we ship via rustup, and I don't think it's necessary to create whole new targets for just getting a matching C ABI. A whole new target isn't needed for simd either because it can be used on a function-local basis. I suspect a whole new target is needed for threads, though, because it has ramifications on the standard library and implementations of primitives there</p>",
        "id": 235562998,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1619031512
    },
    {
        "content": "<p>The versioned approach sounds promising, assuming there's a linear progression of versions.</p>",
        "id": 235563677,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1619031731
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116015\">Alex Crichton</span> <a href=\"#narrow/stream/213817-t-lang/topic/design.20meeting.202021-04-21.3A.20extern.20.E2.80.9Cwasm.22/near/235562998\">said</a>:</p>\n<blockquote>\n<p>[...] A whole new target isn't needed for simd either because it can be used on a function-local basis. [...]</p>\n</blockquote>\n<p>For simd that would require forcing all simd arguments to be passed on the stack like for other archs. <a href=\"https://github.com/rust-lang/rust/blob/25c15cdbe070f49d708f34750df2632e38bd4846/compiler/rustc_middle/src/ty/layout.rs#L2905-L2930\">https://github.com/rust-lang/rust/blob/25c15cdbe070f49d708f34750df2632e38bd4846/compiler/rustc_middle/src/ty/layout.rs#L2905-L2930</a></p>",
        "id": 235686936,
        "sender_full_name": "bjorn3",
        "timestamp": 1619101464
    },
    {
        "content": "<p>No, that's not true. WebAssembly modules are unlike native executables where native executables work so long as you don't execute code your cpu doesn't support. WebAssembly modules are all-or-nothing where nothing works if something doesn't work.</p>",
        "id": 235694733,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1619103961
    }
]