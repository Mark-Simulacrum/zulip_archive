[
    {
        "content": "<p>For bit level parsing tasks, the ability to selectively match and ignore individual bits of a integer could be quite helpful. For example, using the (undecided) syntax “0t...”</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"mi\">0</span><span class=\"n\">t10</span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"c1\">//Hits ..01000, ..01001, ..01010, and ..01011</span>\n<span class=\"mi\">0</span><span class=\"n\">t11xx</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"c1\">//Matches 11--, puts ignored part in x. Would need some serious work to fit this in syntactically!</span>\n<span class=\"mi\">0</span><span class=\"n\">t1</span><span class=\"o\">-</span><span class=\"mi\">11</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"c1\">// matches 1011 and 1111.</span>\n<span class=\"mi\">0</span><span class=\"n\">t1</span><span class=\"o\">-</span><span class=\"mi\">0</span><span class=\"o\">-</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"c1\">// matches 10000, 10010, 11000, and 11010.</span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>Was hoping for some quick discussion on the merits of the concept before taking it to the forum. Note: patterns that do not match the full type require the undeclared bits be 0. 0t10-- Doesn’t match 11000.</p>",
        "id": 209540872,
        "sender_full_name": "Braden Nelson",
        "timestamp": 1599671904
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"277614\">@Braden Nelson</span> I think it's been discussed a couple of times before as well, and I believe there's a crate providing a macro for that, too.</p>",
        "id": 209541407,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599672125
    },
    {
        "content": "<p>It seems potentially reasonable.</p>",
        "id": 209541435,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599672136
    },
    {
        "content": "<p>Two notable issues:</p>",
        "id": 209541447,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599672142
    },
    {
        "content": "<ul>\n<li>Syntax, which seems likely to be endlessly bikesheddable.</li>\n</ul>",
        "id": 209541487,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599672159
    },
    {
        "content": "<p>I see a big merit to putting it into the language directly: optimization. Compiler can do a lot of transforms a macro cannot.</p>",
        "id": 209541540,
        "sender_full_name": "Braden Nelson",
        "timestamp": 1599672180
    },
    {
        "content": "<ul>\n<li>Ensuring the match arms provide complete coverage of possible values.</li>\n</ul>",
        "id": 209541601,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599672206
    },
    {
        "content": "<p>Regarding syntax, I wouldn't want to use <code>-</code> because it looks like subtraction. And <code>_</code> is already used for spacing within numbers.</p>",
        "id": 209541666,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599672237
    },
    {
        "content": "<p>I do like the idea of being able to match out specific bits.</p>",
        "id": 209541747,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599672263
    },
    {
        "content": "<p>On a slightly related note, which might be able to share some support with the match arm checker:</p>",
        "id": 209541775,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599672276
    },
    {
        "content": "<p>The coverage problem is actually not too hard. You can collapse these bit patterns down, but it may be expensive to calculate in some cases (where there’s lots of holes in coverage)</p>",
        "id": 209541789,
        "sender_full_name": "Braden Nelson",
        "timestamp": 1599672283
    },
    {
        "content": "<p>Would need to support multiple ranges of values being covered in one arm.</p>",
        "id": 209541885,
        "sender_full_name": "Braden Nelson",
        "timestamp": 1599672320
    },
    {
        "content": "<p>It'd be nice to be able to write this and have Rust accept it as complete:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">0</span><span class=\"w\"> </span>-&gt; <span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">1</span><span class=\"w\"> </span>-&gt; <span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">2</span><span class=\"w\"> </span>-&gt; <span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">3</span><span class=\"w\"> </span>-&gt; <span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">4</span><span class=\"w\"> </span>-&gt; <span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">5</span><span class=\"w\"> </span>-&gt; <span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">6</span><span class=\"w\"> </span>-&gt; <span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">7</span><span class=\"w\"> </span>-&gt; <span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 209542040,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599672375
    },
    {
        "content": "<p>Indeed it would. That’s probably the more complicated part, but it’s still decidable. Adding it could make certain compiler optimizations possible and probably  improve match ergonomics in other cases. Problem is that it’s extra data to carry around with the type and can get quite complex.</p>",
        "id": 209542314,
        "sender_full_name": "Braden Nelson",
        "timestamp": 1599672489
    },
    {
        "content": "<p>LLVM has some infrastructure to do this on their end already iirc (it can figure out the range of, say, <code>bool1 &lt;&lt; 1 | bool2</code>)</p>",
        "id": 209542447,
        "sender_full_name": "Braden Nelson",
        "timestamp": 1599672550
    },
    {
        "content": "<p>Some assumptions in that comment, do correct me if I’m wrong.</p>",
        "id": 209542527,
        "sender_full_name": "Braden Nelson",
        "timestamp": 1599672588
    },
    {
        "content": "<p>Yeah, LLVM has some range infrastructure.</p>",
        "id": 209543430,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599672966
    },
    {
        "content": "<p>I don't know if that's early enough for us to use it though.</p>",
        "id": 209543550,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599673023
    },
    {
        "content": "<p>We may need to handle that ourselves.</p>",
        "id": 209543551,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599673023
    },
    {
        "content": "<p>That’s very likely. I only mentioned it as it’d be a helpful reference.</p>",
        "id": 209543603,
        "sender_full_name": "Braden Nelson",
        "timestamp": 1599673050
    },
    {
        "content": "<p>A potentially helpful side effect of range detection in the compiler would be rustc being able to omit overflow checks on it’s own instead of relying on LLVM. And a whole class of check omission optimizations.</p>",
        "id": 209544480,
        "sender_full_name": "Braden Nelson",
        "timestamp": 1599673434
    },
    {
        "content": "<p>LLVM is pretty good at that already</p>",
        "id": 209545418,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1599673901
    },
    {
        "content": "<p>It is, but having that in Rust tends to be faster, and we might be able to do some kinds of range checking pre-monomorphization.</p>",
        "id": 209546494,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599674413
    },
    {
        "content": "<p>I think that to make <code>match x &amp; 1 { 0 =&gt; ..., 1 =&gt; ... }</code> legal I'd want there to be an actual type that came out of the <code>&amp;</code>.  (Like the <code>Integer&lt;LOW, HIGH&gt;</code> that's been oft discussed.)</p>",
        "id": 209565501,
        "sender_full_name": "scottmcm",
        "timestamp": 1599683691
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> That type won't always be expressible in the type system, though.</p>",
        "id": 209568991,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599685741
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> Or rather, what the Rust compiler is capable of proving many not be.</p>",
        "id": 209569025,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599685759
    },
    {
        "content": "<p>And we may not want to expose that information in the user-visible type system.</p>",
        "id": 209569154,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599685824
    },
    {
        "content": "<p>Right, but we need a stability guarantee for match checking.  And we could certainly prove more things than we might want to promise (like the discussions about using SAT solvers to do things).</p>",
        "id": 209570766,
        "sender_full_name": "scottmcm",
        "timestamp": 1599686726
    }
]