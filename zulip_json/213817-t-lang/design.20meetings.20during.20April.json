[
    {
        "content": "<p>So hey <span class=\"user-group-mention\" data-user-group-id=\"1977\">@T-lang</span>, let's talk about design meetings! We've got a list of potential topics for April in the paper, which is currently</p>\n<ul>\n<li>how to deal with type aliases and bounds, and especially the proposal <a href=\"https://github.com/rust-lang/rust/issues/69741\" title=\"https://github.com/rust-lang/rust/issues/69741\">#69741</a></li>\n<li>unsafe code guidelines, how to integrate and make progress </li>\n<li>“Copy out of references” — focus on use cases and inter-related problems -- I think this was <code>&amp;T</code> to <code>T</code> coercion where <code>T: Copy</code></li>\n</ul>",
        "id": 192729489,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585863122
    },
    {
        "content": "<p>I think I might add a few more such as</p>",
        "id": 192729523,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585863127
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  on type aliases &amp; bounds</p>",
        "id": 192729575,
        "sender_full_name": "centril",
        "timestamp": 1585863159
    },
    {
        "content": "<ul>\n<li>Edition planning -- one of the things we're supposed to be doing is thinking about breaking changes for the edition, maybe we want to thinking a bit in advance. I remember the last time I thought about this I had a few thoughts of the kinds of things we might consider.</li>\n</ul>",
        "id": 192729599,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585863175
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I would love to have the \"copy out of references\" discussion, and better understand the use cases there. Can I suggest that we schedule that one at a time that would allow enough prep time for folks who want a change there to supply some use cases or examples without feeling rushed?</p>",
        "id": 192729660,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585863201
    },
    {
        "content": "<ul>\n<li>TryInto and try functions and try blocks oh my (cc <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> in particular on that one)</li>\n</ul>",
        "id": 192729696,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585863222
    },
    {
        "content": "<p>I feel like UCG is sufficiently amorphous that the only discrete topic I can think of there is \"what discrete topics are separable and able to be evaluated\"?</p>",
        "id": 192729779,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585863248
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> handed me: <a href=\"https://github.com/rust-lang/rust/pulls?q=is%3Aclosed+is%3Apr+author%3Aeddyb+is%3Aunmerged+type+alias+\" title=\"https://github.com/rust-lang/rust/pulls?q=is%3Aclosed+is%3Apr+author%3Aeddyb+is%3Aunmerged+type+alias+\">https://github.com/rust-lang/rust/pulls?q=is%3Aclosed+is%3Apr+author%3Aeddyb+is%3Aunmerged+type+alias+</a></p>",
        "id": 192729902,
        "sender_full_name": "centril",
        "timestamp": 1585863328
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Also CC <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> on the <code>try</code> family of items. And for that one, I would be happy to come prepared to discuss and evaluate alternatives there, and I've found myself increasingly open to changing my mind. I no longer have the objection I once did to <code>try</code> blocks, and my only point of contention is \"what type do they have and how do we write that type\", which I feel like is a narrower point conducive to collaborative solution-finding.</p>",
        "id": 192729932,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585863343
    },
    {
        "content": "<p>All the type alias PRs are in those search results</p>",
        "id": 192729956,
        "sender_full_name": "centril",
        "timestamp": 1585863358
    },
    {
        "content": "<p>(Also, let me say that more strongly: I have found lately that I've actively <em>wanted</em> <code>try</code> blocks several times, so it's not just that I'm now neutral to them.)</p>",
        "id": 192730155,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585863444
    },
    {
        "content": "<p>/me opens a separate thread for a related tangent.</p>",
        "id": 192730198,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585863464
    },
    {
        "content": "<p>note that <a href=\"https://github.com/rust-lang/rust/issues/49441#issuecomment-421136550\" title=\"https://github.com/rust-lang/rust/issues/49441#issuecomment-421136550\">https://github.com/rust-lang/rust/issues/49441#issuecomment-421136550</a> is the issue we were using to track the 2018 stuff before it fell through the floor</p>",
        "id": 192730330,
        "sender_full_name": "eddyb",
        "timestamp": 1585863535
    },
    {
        "content": "<p>2018 burnout was real :(</p>",
        "id": 192730336,
        "sender_full_name": "eddyb",
        "timestamp": 1585863540
    },
    {
        "content": "<p>Sorry, I'm a bit afk actually, having kind of started this discussion off :)</p>",
        "id": 192730486,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585863632
    },
    {
        "content": "<p>Didn't realize how late it was</p>",
        "id": 192730495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585863639
    },
    {
        "content": "<p>In terms of available dates in April, we have</p>\n<ul>\n<li>Apr 13</li>\n<li>Apr 20</li>\n<li>Apr 27</li>\n</ul>",
        "id": 192730527,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585863655
    },
    {
        "content": "<p>(Excluding next week)</p>",
        "id": 192730585,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585863689
    },
    {
        "content": "<p>I'm guessing edition planning should be handled at <em>some</em> point during this design cycle</p>",
        "id": 192828688,
        "sender_full_name": "pnkfelix",
        "timestamp": 1585930884
    },
    {
        "content": "<p>given that its already April</p>",
        "id": 192828695,
        "sender_full_name": "pnkfelix",
        "timestamp": 1585930888
    },
    {
        "content": "<p>but I don't think it will matter much if we do it in mid April or at end of April</p>",
        "id": 192828732,
        "sender_full_name": "pnkfelix",
        "timestamp": 1585930907
    },
    {
        "content": "<p>I would suggest 20th for the edition stuff, and 27th for the type alias stuff (since it ties into the edition)</p>",
        "id": 192829877,
        "sender_full_name": "centril",
        "timestamp": 1585931403
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> so see the available dates above</p>",
        "id": 193378989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586380139
    },
    {
        "content": "<p>I think discussing try seems good</p>",
        "id": 193379147,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586380226
    },
    {
        "content": "<p>but there are a few different aspects to it</p>",
        "id": 193379163,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586380237
    },
    {
        "content": "<p>I wonder if we can fit it all in one meeting?</p>",
        "id": 193379173,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586380243
    },
    {
        "content": "<p>I'm thinking of:</p>",
        "id": 193379254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586380310
    },
    {
        "content": "<ul>\n<li><code>Try</code> trait</li>\n</ul>",
        "id": 193379257,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586380313
    },
    {
        "content": "<ul>\n<li>try blocks and ok-wrapping</li>\n</ul>",
        "id": 193379263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586380318
    },
    {
        "content": "<ul>\n<li>try functions and some of the details there</li>\n</ul>",
        "id": 193379309,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586380324
    },
    {
        "content": "<p>I've not read <span class=\"user-mention\" data-user-id=\"256759\">@boats</span>'s posts, but obviously i'd like for them to be present</p>",
        "id": 193379321,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586380334
    },
    {
        "content": "<p>though not necessarily for the first point</p>",
        "id": 193379438,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586380415
    },
    {
        "content": "<p>Hmm, I think doing </p>\n<ul>\n<li>13th -- something about try, maybe, but it depends if <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> and/or <span class=\"user-mention\" data-user-id=\"256759\">@boats</span> are available</li>\n<li>20th -- Overall Edition planning - who will lead and can we narrow this topic?</li>\n<li>27th -- type alias -- someone has to lead and gather data. I'm curious also if <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> would be able to attend (<span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>, the meetings are at 12:00 Eastern time, so I think that would be 19:00 your time)</li>\n</ul>",
        "id": 193379583,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586380508
    },
    {
        "content": "<p>(On mondays)</p>",
        "id": 193379592,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586380514
    },
    {
        "content": "<p>seems reasonable</p>",
        "id": 193379605,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586380523
    },
    {
        "content": "<p>I would be happy to try and lead up the Edition a bit</p>",
        "id": 193379629,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586380540
    },
    {
        "content": "<p>I would also be ok with putting off the type alias slightly further, if we think that's too many meetings and we won't be able to manage it</p>",
        "id": 193379700,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586380564
    },
    {
        "content": "<p>it's fine I think</p>",
        "id": 193379701,
        "sender_full_name": "eddyb",
        "timestamp": 1586380564
    },
    {
        "content": "<p>i.e., we could do it first thing in may</p>",
        "id": 193379710,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586380571
    },
    {
        "content": "<p>I would suggest that if we order it correctly, we could get through as much as we can in one meeting:<br>\n1) <code>try</code> blocks and <code>Ok</code>-wrapping, for which as far as I an tell there aren't any remaining disagreements.<br>\n2) <code>Try</code> trait: what do we need to complete in order to stabilize <code>try</code> blocks? This is more complicated, but not necessarily a source of massive disagreements, just technical difficulties.<br>\n3) <code>try</code> functions and potential syntax there; this is likely to expand to encompass <code>-&gt; Result&lt;T, E&gt;</code> versus syntax proposals that hide <code>Result</code>, so let's put it last and if we run out of time that's OK.</p>",
        "id": 193379712,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1586380571
    },
    {
        "content": "<p>This sounds reasonable</p>",
        "id": 193379731,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586380583
    },
    {
        "content": "<p>What do you think of that overall schedule? Also, can we discuss how the Edition planning might work</p>",
        "id": 193379805,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586380654
    },
    {
        "content": "<p>I'm also wondering if there'd be any objection to <em>starting</em> on (1) and getting the <em>skeleton</em> of what needs to be solved for (2) in Thursday's meeting?</p>",
        "id": 193379810,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1586380657
    },
    {
        "content": "<p>are you referring to try blocks?</p>",
        "id": 193379828,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586380673
    },
    {
        "content": "<p>I thkn that try blocks ok wrap <em>now</em></p>",
        "id": 193379836,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586380681
    },
    {
        "content": "<p>so I don't think there's any real \"work\" to be done there</p>",
        "id": 193379875,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586380686
    },
    {
        "content": "<p>Yes. Because if we end up resolving (1) <em>in</em> Thursday's meeting, and getting a skeleton for (2), then the design meeting on Monday could be much simpler.</p>",
        "id": 193379877,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1586380688
    },
    {
        "content": "<p>if we want to reach a decision, I could imagine that we create an issue with a summary of some of the pros/cons and do an fcp</p>",
        "id": 193379903,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586380719
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> The \"work\" is effectively an explicit \"are there any remaining objections, or any other blockers for <code>try</code> block stabilization other than the <code>Try</code> trait\".</p>",
        "id": 193379909,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1586380721
    },
    {
        "content": "<p>to make it official</p>",
        "id": 193379911,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586380722
    },
    {
        "content": "<p>and I think we could just do that today</p>",
        "id": 193379928,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586380736
    },
    {
        "content": "<p>the problem is that I don't know that thu meeting necessary has all the folks presnt in it?</p>",
        "id": 193379944,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586380745
    },
    {
        "content": "<p>but I guess it has enough</p>",
        "id": 193379948,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586380749
    },
    {
        "content": "<p>that's also fine</p>",
        "id": 193379953,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586380751
    },
    {
        "content": "<p>An FCP on an appropriate issue sounds good, sure. I wasn't sure which issue it should occur on. ;)</p>",
        "id": 193379961,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1586380757
    },
    {
        "content": "<p>I'd make a dedicated issue personally, and link to it</p>",
        "id": 193379973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586380764
    },
    {
        "content": "<p>I prefer to have an issue per decision</p>",
        "id": 193379984,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586380771
    },
    {
        "content": "<p>link to it from <a href=\"https://github.com/rust-lang/rust/issues/31436\" title=\"https://github.com/rust-lang/rust/issues/31436\">https://github.com/rust-lang/rust/issues/31436</a> I mean, I guess</p>",
        "id": 193380014,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586380794
    },
    {
        "content": "<p>Thinking about the overall schedule...</p>",
        "id": 193380016,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1586380795
    },
    {
        "content": "<p>type alias as in <code>impl Trait</code>?</p>",
        "id": 193380099,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1586380832
    },
    {
        "content": "<p>no</p>",
        "id": 193380115,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586380846
    },
    {
        "content": "<p>that is referring to the long-standing issue that <code>type Foo&lt;T: Trait&gt; = ...</code> doesn't enforce <code>T: Trait</code></p>",
        "id": 193380130,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586380862
    },
    {
        "content": "<p>Oh!</p>",
        "id": 193380140,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1586380871
    },
    {
        "content": "<p>the topic has been coming up again because of a recent PR to enforce \"well-formedness conditions\" in some cases</p>",
        "id": 193380161,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586380886
    },
    {
        "content": "<p>we deferred it for Rust 2018</p>",
        "id": 193380172,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586380893
    },
    {
        "content": "<p>which we <em>almost</em> fixed back for Rust 2018</p>",
        "id": 193380176,
        "sender_full_name": "eddyb",
        "timestamp": 1586380894
    },
    {
        "content": "<p>if we want to address it again, we thought we would review what happened last time</p>",
        "id": 193380187,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586380905
    },
    {
        "content": "<p>but <em>gestures vaguely</em> stuff happened</p>",
        "id": 193380188,
        "sender_full_name": "eddyb",
        "timestamp": 1586380905
    },
    {
        "content": "<p>and talk about some of the options</p>",
        "id": 193380193,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586380909
    },
    {
        "content": "<p>Is this also related to not being able to assume <code>&lt;T: Trait&gt;</code> in the <code>impl SomeType</code> block of a type, even if the data type implies that <code>T: Trait</code>?</p>",
        "id": 193380202,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1586380918
    },
    {
        "content": "<p>I don't think so</p>",
        "id": 193380251,
        "sender_full_name": "eddyb",
        "timestamp": 1586380930
    },
    {
        "content": "<p>I think you're referring to <em>implied bounds</em></p>",
        "id": 193380261,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586380938
    },
    {
        "content": "<p>there actually is a relationship</p>",
        "id": 193380269,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586380946
    },
    {
        "content": "<p>but it's not .. direct?</p>",
        "id": 193380278,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586380955
    },
    {
        "content": "<p>this is about <code>type Foo = ...;</code> not type-checking <code>...</code> at all at the definition site</p>",
        "id": 193380280,
        "sender_full_name": "eddyb",
        "timestamp": 1586380957
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/design.20meetings.20during.20April/near/193380261\" title=\"#narrow/stream/213817-t-lang/topic/design.20meetings.20during.20April/near/193380261\">said</a>:</p>\n<blockquote>\n<p>I think you're referring to <em>implied bounds</em></p>\n</blockquote>\n<p>I think you're right, yeah.</p>",
        "id": 193380281,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1586380957
    },
    {
        "content": "<p>and also use sites don't see the bounds at all, just the <code>...</code> part (the \"RHS\")</p>",
        "id": 193380312,
        "sender_full_name": "eddyb",
        "timestamp": 1586380983
    },
    {
        "content": "<p>There is a relationship in that one way to \"rationalize\" today's behavior is to imagine that there's an implied where clause that says the RHS if well-formed, which is a kind of \"implied bound\".</p>",
        "id": 193380372,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586381026
    },
    {
        "content": "<p>but it's not a \"real relationship\"</p>",
        "id": 193380389,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586381040
    },
    {
        "content": "<p>anyway <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> can handle this, ping me if you have any questions for me specifically (trying not to multitask too much :P)</p>",
        "id": 193380461,
        "sender_full_name": "eddyb",
        "timestamp": 1586381072
    },
    {
        "content": "<p>( another relationship is that continued progress around chalk is related )</p>",
        "id": 193380462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586381073
    },
    {
        "content": "<p>Alright. So, that seems like a reasonable thing to put on the agenda, and I'll be interested to listen and hear many things about traits and types and inference that I likely don't know. :)</p>",
        "id": 193380466,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1586381075
    },
    {
        "content": "<p>it seems good to revisit it</p>",
        "id": 193380492,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586381093
    },
    {
        "content": "<p>So, the three proposals sound good to me.</p>",
        "id": 193380500,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1586381098
    },
    {
        "content": "<p>but let's talk a bit about the edition meeting</p>",
        "id": 193380502,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586381099
    },
    {
        "content": "<p>what's needed to make that productive</p>",
        "id": 193380509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586381102
    },
    {
        "content": "<p>what I have in mind is</p>",
        "id": 193380514,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586381104
    },
    {
        "content": "<p>We should make a document of \"things we might want to change in an edition\", and give people plenty of time to contribute to it before a meeting, I think...</p>",
        "id": 193380542,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1586381126
    },
    {
        "content": "<p>(1) go back over 'ergonomic initiative' and other stuff that didn't make it for Rust 2018 (which includes the type alias stuff) and try to write out some of the potential edition implications</p>",
        "id": 193380552,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586381140
    },
    {
        "content": "<p>yes</p>",
        "id": 193380563,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586381146
    },
    {
        "content": "<p>I am basically imagining creating such a doc and starting to fill it out</p>",
        "id": 193380567,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586381153
    },
    {
        "content": "<p>and trying to do that early</p>",
        "id": 193380570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586381155
    },
    {
        "content": "<p>That sounds good to me.</p>",
        "id": 193380576,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1586381162
    },
    {
        "content": "<p>I think we should also include  things like \"change of defaults\"</p>",
        "id": 193380620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586381166
    },
    {
        "content": "<p>I'm going to take a few minutes and write up a dedicated issue for <code>try</code> block <code>Ok</code>-wrapping.</p>",
        "id": 193380635,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1586381182
    },
    {
        "content": "<p>i.e., I would include the \"unsafe ops in unsafe fns\"</p>",
        "id": 193380637,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586381182
    },
    {
        "content": "<p>(we had some discussion of whether we might switch the default there)</p>",
        "id": 193380641,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586381188
    },
    {
        "content": "<p>I think it'd be good to have a master list that we can revisit and keep an eye on</p>",
        "id": 193380656,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586381202
    },
    {
        "content": "<p>and use to drive our efforts</p>",
        "id": 193380660,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586381205
    },
    {
        "content": "<p>so our goal should be to produce that, and we should start the list <em>now</em></p>",
        "id": 193380669,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586381214
    },
    {
        "content": "<p>that is, while you do that, I will create a paper document and start adding stuff</p>",
        "id": 193380694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586381233
    },
    {
        "content": "<p>We should also include, in the list, things we <em>don't</em> plan to do but that someone might expect. For instance, someone on internals recently suggested killing <code>ref</code> and <code>ref mut</code> in an edition, which, let's not. ;)</p>",
        "id": 193380700,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1586381236
    },
    {
        "content": "<p>heh. Yeah, I'm ok waiting on that (although I don't find I use them anymore)</p>",
        "id": 193380730,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586381258
    },
    {
        "content": "<p>I'd like to err on the side of completeness, rather than prioritizing the list of \"things we want to do\" over \"things we don't want to do\".</p>",
        "id": 193380747,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1586381277
    },
    {
        "content": "<p>btw</p>",
        "id": 193380750,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586381279
    },
    {
        "content": "<p>I just happened to click on that internals thread and see your post</p>",
        "id": 193380801,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586381287
    },
    {
        "content": "<p>that issue around <code>&amp;u32</code> is definitely one of the key motivators for the <code>&amp;T -&gt; T</code> coercions where <code>T: Copy</code></p>",
        "id": 193380824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586381310
    },
    {
        "content": "<p>but I guess you know that :)</p>",
        "id": 193380827,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586381312
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/design.20meetings.20during.20April/near/193380801\" title=\"#narrow/stream/213817-t-lang/topic/design.20meetings.20during.20April/near/193380801\">said</a>:</p>\n<blockquote>\n<p>I just happened to click on that internals thread and see your post</p>\n</blockquote>\n<p>I find myself wishing I could have written the example that I did back when we were debating this.</p>",
        "id": 193380829,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1586381313
    },
    {
        "content": "<p>that issue was extensively discussed, fwiw</p>",
        "id": 193380843,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586381327
    },
    {
        "content": "<p>but maybe not extensively enough :)</p>",
        "id": 193380874,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586381353
    },
    {
        "content": "<p>I remember, vividly. I just don't remember any examples coming up that demonstrated, on a practical level,  the \"rustc can't help me find the root error anymore\" problem.</p>",
        "id": 193380899,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1586381369
    },
    {
        "content": "<p>Yeah, I mean, I think we just didn't do the follow-up</p>",
        "id": 193380913,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586381391
    },
    {
        "content": "<p>All the more reason to do it now!</p>",
        "id": 193380918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586381396
    },
    {
        "content": "<p><em>nod</em></p>",
        "id": 193380970,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1586381409
    },
    {
        "content": "<p>I guess I disagree with your assertion that suggesting <code>*x</code> is wrong</p>",
        "id": 193380991,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586381424
    },
    {
        "content": "<p>but let's not get too far off topic</p>",
        "id": 193380997,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586381430
    },
    {
        "content": "<p>(in particular, the edit I make in practice is adding a <code>*x</code>)</p>",
        "id": 193381007,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586381437
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/design.20meetings.20during.20April/near/193380824\" title=\"#narrow/stream/213817-t-lang/topic/design.20meetings.20during.20April/near/193380824\">said</a>:</p>\n<blockquote>\n<p>that issue around <code>&amp;u32</code> is definitely one of the key motivators for the <code>&amp;T -&gt; T</code> coercions where <code>T: Copy</code></p>\n</blockquote>\n<p>Thank you for pointing that out; that helps me understand a bit better. Needs some further thought.</p>",
        "id": 193381011,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1586381442
    },
    {
        "content": "<p>(not that I'm super happy about that)</p>",
        "id": 193381019,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586381451
    },
    {
        "content": "<p>that's on our list, but I think we can discuss those things post April</p>",
        "id": 193381042,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586381468
    },
    {
        "content": "<p>I would love to talk with you and introspect a bit on your feeling of \"not that I'm super happy about that\", to understand why that's the fix you tend to make in practice even if you don't want to.</p>",
        "id": 193381071,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1586381493
    },
    {
        "content": "<p>yes, I'd enjoy that</p>",
        "id": 193381174,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586381550
    },
    {
        "content": "<p>oops dang it</p>",
        "id": 193381186,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586381562
    },
    {
        "content": "<p>I had a draft of the final schedule</p>",
        "id": 193381194,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586381568
    },
    {
        "content": "<p>And yes, this is getting a little off-topic. ;)<br>\nThe slightly more comedic version I considered, when trying to explain my reaction to rustc's errors: <br>\n\"Your foundation is broken. Would you like to add a flying buttress?\" No, rustc, I'd like to fix the foundation, not patch around the original error by propping up the wobbly result the other way.</p>",
        "id": 193381200,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1586381570
    },
    {
        "content": "<p>and I stupidly did select-all delete and lost it</p>",
        "id": 193381206,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586381575
    },
    {
        "content": "<p>let me rewrite it :)</p>",
        "id": 193381208,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586381577
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/design.20meetings.20during.20April/near/193381007\" title=\"#narrow/stream/213817-t-lang/topic/design.20meetings.20during.20April/near/193381007\">said</a>:</p>\n<blockquote>\n<p>(in particular, the edit I make in practice is adding a <code>*x</code>)</p>\n</blockquote>\n<p>I almost always try to add <code>&amp;</code> to a pattern  before I find it prettier than <code>*</code> (and for more than 1 use, it's less noise since only the pattern needs to change, not the uses)</p>",
        "id": 193381547,
        "sender_full_name": "eddyb",
        "timestamp": 1586381775
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> Agreed. Though adding <code>*</code> to the match scrutinee can avoid the need to add <code>&amp;</code> to a half-dozen patterns; for some reason I don't tend to find <em>that</em> intuitive to reach for, though.</p>",
        "id": 193381647,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1586381840
    },
    {
        "content": "<p>I mean <code>|&amp;x| x</code> instead of <code>|x| *x</code>, where the <code>*</code> would be <em>later</em> than the <code>&amp;</code></p>",
        "id": 193381695,
        "sender_full_name": "eddyb",
        "timestamp": 1586381871
    },
    {
        "content": "<p>I think I have some kind of incorrect associations regarding <code>match *x</code>, such that it \"feels\" like that's going to surprise me by making a copy I don't expect.</p>",
        "id": 193381698,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1586381873
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> (I know, and that's what niko meant too. I was referring to a third possibility there.)</p>",
        "id": 193381745,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1586381892
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> how does <a href=\"https://gist.github.com/nikomatsakis/6993a31554708c1e84282d90f15fbb0b\" title=\"https://gist.github.com/nikomatsakis/6993a31554708c1e84282d90f15fbb0b\">this gist</a> look to you?</p>",
        "id": 193381780,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586381910
    },
    {
        "content": "<p>Does <code>asm!</code> need a design meeting to move forward? Or is it blocked on something else?</p>",
        "id": 193381856,
        "sender_full_name": "Amanieu",
        "timestamp": 1586381967
    },
    {
        "content": "<p>I don't believe it does.</p>",
        "id": 193381879,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586381978
    },
    {
        "content": "<p>Well, let me revisit that</p>",
        "id": 193381895,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586381983
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Minor request: could you change \"try functions\" to \"function-level try\"? I feel like the former predisposes us towards the syntax <code>try fn</code>, while the latter feels more syntax-agnostic to me as a description.</p>",
        "id": 193381929,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1586382000
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> so here is why I am revisiting that</p>",
        "id": 193382022,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586382041
    },
    {
        "content": "<p><em>in general</em>, I think it'd be super healthy for us</p>",
        "id": 193382033,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586382047
    },
    {
        "content": "<p>if when we are introducing a major new piece of design</p>",
        "id": 193382040,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586382051
    },
    {
        "content": "<p>we spend a design meeting on it</p>",
        "id": 193382044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586382054
    },
    {
        "content": "<p>to have somebody kind of walk over the RFC and lay out what it does</p>",
        "id": 193382054,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586382062
    },
    {
        "content": "<p>even if we've all already read it</p>",
        "id": 193382061,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586382068
    },
    {
        "content": "<p>and kind of know</p>",
        "id": 193382064,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586382069
    },
    {
        "content": "<p>it produces a video that we can publish</p>",
        "id": 193382074,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586382074
    },
    {
        "content": "<p>I also question whether it's ever <em>really</em> true that everybody has had time to catch up</p>",
        "id": 193382098,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586382088
    },
    {
        "content": "<p>(We did actually spend a big piece of a lang meeting on <code>asm!</code>, by the way, when it first came up.)</p>",
        "id": 193382100,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1586382088
    },
    {
        "content": "<p>well, we did, but that's different</p>",
        "id": 193382113,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586382099
    },
    {
        "content": "<p>also, I don't know that we really did</p>",
        "id": 193382123,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586382107
    },
    {
        "content": "<p>I'm not arguing that we shouldn't spend another. ;)</p>",
        "id": 193382124,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1586382107
    },
    {
        "content": "<p>in particular, the final RFC didn't exist</p>",
        "id": 193382147,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586382118
    },
    {
        "content": "<p>we talked about <em>whether</em> to do <code>asm!</code>, but not so much about the actual proposal, and the discussion that arose during the course of it, and so forth</p>",
        "id": 193382198,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586382133
    },
    {
        "content": "<p>all of that said, I'm not sure it's the best use of time this month</p>",
        "id": 193382215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586382148
    },
    {
        "content": "<p>Ah, I see. You're suggesting that in general we should spend a meeting reviewing the details of a (seemingly) completed RFC?</p>",
        "id": 193382228,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1586382157
    },
    {
        "content": "<p>I just think in general it'd be cool to be doing more presentations like that</p>",
        "id": 193382229,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586382159
    },
    {
        "content": "<p>I kind of think so, yes</p>",
        "id": 193382238,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586382168
    },
    {
        "content": "<p>I think that's a good idea, especially if we manage to move more to the \"approve delegating this\" and later \"approve the result of the delegated team\" model.</p>",
        "id": 193382254,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1586382184
    },
    {
        "content": "<p>or at least I think it's a healthy thing to do</p>",
        "id": 193382256,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586382185
    },
    {
        "content": "<p>I don't think I'd say it should be \"required\"</p>",
        "id": 193382260,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586382193
    },
    {
        "content": "<p>exactly</p>",
        "id": 193382268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586382198
    },
    {
        "content": "<p>(it depends, I think, on the scope of the RFC etc)</p>",
        "id": 193382279,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586382207
    },
    {
        "content": "<p>Schedule looks good to me other than that one nit.</p>",
        "id": 193382310,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1586382240
    },
    {
        "content": "<p>There's also the distinction between replacing <code>asm!</code> in nightly and stabilizing it. How much should the former be blocked on lang team approval (which is definitely needed for the latter).</p>",
        "id": 193382433,
        "sender_full_name": "Amanieu",
        "timestamp": 1586382315
    },
    {
        "content": "<p>so we discussed this just a bit in privmsg but to bring it here</p>",
        "id": 193382913,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586382636
    },
    {
        "content": "<p>that's actually a more interesting question than I thought at first :P</p>",
        "id": 193382920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586382643
    },
    {
        "content": "<p>I think in my ideal world we would tilt ourselves towards permitting stuff to land before a design is \"ready\"</p>",
        "id": 193382943,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586382662
    },
    {
        "content": "<p>this <em>was</em> the idea of creating project groups</p>",
        "id": 193382960,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586382674
    },
    {
        "content": "<p>that we clear up the \"intent to explore this\" first</p>",
        "id": 193382970,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586382680
    },
    {
        "content": "<p>and then people can land etc etc</p>",
        "id": 193382975,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586382683
    },
    {
        "content": "<p>and the RFC could indeed come after the impl is done</p>",
        "id": 193382979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586382689
    },
    {
        "content": "<p>and it is just laying out the design that we wound up with</p>",
        "id": 193382991,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586382694
    },
    {
        "content": "<p>(ideally, they co-evolve, as I think happened here)</p>",
        "id": 193382998,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586382700
    },
    {
        "content": "<p>so I think in this case what we really need is to resolve <a href=\"https://github.com/rust-lang/rfcs/pull/2836\" title=\"https://github.com/rust-lang/rfcs/pull/2836\">https://github.com/rust-lang/rfcs/pull/2836</a>, and I don't think a design meeting is the best venue for that ultimately</p>",
        "id": 193383073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586382733
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> how is this :)</p>\n<blockquote>\n<h1>April 13 -- Try blocks, try traits, functions that try, oh my!</h1>\n</blockquote>",
        "id": 193383294,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586382863
    },
    {
        "content": "<p>I like my whimsical rhyme ;)</p>",
        "id": 193383312,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586382873
    },
    {
        "content": "<p>i can attend any week</p>",
        "id": 193383975,
        "sender_full_name": "boats",
        "timestamp": 1586383334
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I just realized something else that needs adding to the <code>try</code> design meeting, which I'd suggest covering after the <code>Try</code> trait and before functions that try: the error return mechanism from try blocks and functions that try. <code>fail err;</code>, <code>throw err;</code>, <code>raise err;</code>, <code>Err(err)?;</code>...</p>",
        "id": 193384772,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1586383849
    },
    {
        "content": "<p>Still likely to lead to syntax disputes, but less so than the syntax for functions that try.</p>",
        "id": 193384815,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1586383880
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/design.20meetings.20during.20April/near/193379583\" title=\"#narrow/stream/213817-t-lang/topic/design.20meetings.20during.20April/near/193379583\">said</a>:</p>\n<blockquote>\n<ul>\n<li>13th -- something about try, maybe, but it depends if scottmcm and/or boats are available</li>\n</ul>\n</blockquote>\n<p>I can make the 13th.  Anything particular you'd like me to prepare for it?</p>",
        "id": 193411186,
        "sender_full_name": "scottmcm",
        "timestamp": 1586413569
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/design.20meetings.20during.20April/near/193380700\" title=\"#narrow/stream/213817-t-lang/topic/design.20meetings.20during.20April/near/193380700\">said</a>:</p>\n<blockquote>\n<p>We should also include, in the list, things we <em>don't</em> plan to do but that someone might expect. For instance, someone on internals recently suggested killing <code>ref</code> and <code>ref mut</code> in an edition, which, let's not. ;)</p>\n</blockquote>\n<p>I think that's a great idea to avoid the free-for-all; and I'm in full agreement re. \"let's not\" for <code>ref mut?</code></p>",
        "id": 193411202,
        "sender_full_name": "centril",
        "timestamp": 1586413601
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/design.20meetings.20during.20April/near/193384772\" title=\"#narrow/stream/213817-t-lang/topic/design.20meetings.20during.20April/near/193384772\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> I just realized something else that needs adding to the <code>try</code> design meeting, which I'd suggest covering after the <code>Try</code> trait and before functions that try: the error return mechanism from try blocks and functions that try. <code>fail err;</code>, <code>throw err;</code>, <code>raise err;</code>, <code>Err(err)?;</code>...</p>\n</blockquote>\n<p>This also ties into the edition as we have to use that mechanism for any keyword; <code>throw err;</code> seems more unlikely now that more macros named <code>throw!(err);</code> exist, so <code>fail err;</code> seems more plausible now I think.</p>",
        "id": 193411468,
        "sender_full_name": "centril",
        "timestamp": 1586413874
    },
    {
        "content": "<p>I think that what we might want to do with <code>throw</code> comes into the trait discussions as well.  Both in the obvious way that we need to desugar it to something, but also in that if one of the <code>Try</code> rewrite goals is that it \"remembers\" result- or option-ness from a <code>?</code> then we'd need to figure out how to colour a <code>throw</code> properly.</p>",
        "id": 193411966,
        "sender_full_name": "scottmcm",
        "timestamp": 1586414326
    },
    {
        "content": "<p>In a function that returns an Option, I would think we'd just want <code>fail;</code> with no arguments.</p>",
        "id": 193412594,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1586414883
    },
    {
        "content": "<p>Hmm, interesting.  I agree, but I also think that <code>bikeshed;</code> and <code>bikeshed ();</code> so the same thing here, as they do with <code>return</code> and <code>break</code>.  And I think those two statements contradict each other</p>",
        "id": 193413185,
        "sender_full_name": "scottmcm",
        "timestamp": 1586415536
    },
    {
        "content": "<p>That would probably depend on how it desugars.</p>",
        "id": 193413220,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1586415593
    },
    {
        "content": "<p>Unbaked idea that I wanted to write down because I'm forgetful: right now the error-conversion we do for results is part of the <code>?</code> desugar.  But AFAICT that's currently indistinguishable from it happening at function-level, since there can only be one \"level\" of <code>?</code>s in a function.  So if we wanted to we could potentially _not_ to the error-conversion inside <code>try</code>, to reduce the type annotation requirements.  (For the whole \"I'd like to not have to annotate <code>try { a? + b? }</code> and have it just use the same carrier and error type\" conversation.)  Though I suppose that has the obvious downside that IIFEs and <code>try{}</code>s would do different things, so maybe it's bad.</p>",
        "id": 193416212,
        "sender_full_name": "scottmcm",
        "timestamp": 1586418095
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> Seems like a good idea to move the <code>From::from</code> part of lowering into something specific to <code>Result&lt;_, _&gt;</code> if possible so that users can have a choice about that conversion for their own types</p>",
        "id": 193416348,
        "sender_full_name": "centril",
        "timestamp": 1586418210
    },
    {
        "content": "<p>Except that's not what you're saying <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 193416383,
        "sender_full_name": "centril",
        "timestamp": 1586418242
    },
    {
        "content": "<p>/me is tired...</p>",
        "id": 193416426,
        "sender_full_name": "centril",
        "timestamp": 1586418253
    },
    {
        "content": "<p>It's still a good idea :P  And fits well in the trait split I think we're heading towards</p>",
        "id": 193416530,
        "sender_full_name": "scottmcm",
        "timestamp": 1586418317
    },
    {
        "content": "<p>Also, <span class=\"user-mention\" data-user-id=\"198590\">@comex</span>'s point regarding perf seems like something we should keep in mind and avoid making MIR optimizations have too much of a hard time with <code>?</code></p>",
        "id": 193416759,
        "sender_full_name": "centril",
        "timestamp": 1586418475
    },
    {
        "content": "<p>My current thought is that we should have a <code>TryBlock</code> trait with an associated type for the continue-normally path, because that gives us the \"you get a predictable type from <code>x?</code>\" and \"you can flow type information backwards into a <code>try{ Default::default() }</code>\" things that are why we picked the current Try design.  But that for the splitting-and-error-handling stuff we should use a separate trait -- like the one in the original Try RFC design -- to allow the implementation to choose with which types it's willing to interoperate.</p>",
        "id": 193417065,
        "sender_full_name": "scottmcm",
        "timestamp": 1586418671
    },
    {
        "content": "<p>Update: given that there's been a lot of discussion around try, we opted to push the meeting back a bit to let things and opinions settle down. For now the \"try meeting\" is tentatively scheduled for May 4, but we can revisit as we think about meetings for May later on. <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 193622359,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586555706
    }
]