[
    {
        "content": "<p>I missed the meeting, but the point about reserving a keyword for <code>asm</code> is based on this issue by <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span>: <a href=\"https://github.com/rust-lang/project-inline-asm/issues/8\" title=\"https://github.com/rust-lang/project-inline-asm/issues/8\">https://github.com/rust-lang/project-inline-asm/issues/8</a></p>",
        "id": 194843003,
        "sender_full_name": "Amanieu",
        "timestamp": 1587493615
    },
    {
        "content": "<blockquote>\n<p>Macros expanding directly into internal compiler structures (AST) are rather an exception in <code>rustc</code> than a rule.<br>\nThe compiler frontend is in a process of migration to a token-based model (inspired by proc macros) where each macro expands to some actual non-macro syntax (token stream).</p>\n<p>For inline assembly the surface syntax of that non-macro representation is not important right now, except that it should be unambiguous in the expression position, like <code>extern break box { ... }</code> or whatever.<br>\nIt can probably be wordy or unwieldy to write manually, but not necessarily.</p>\n<p>What's important in my opinion is ability to lower different surface asm syntaxes into this common non-macro representation.<br>\nBasically, if you are bikeshedding some <code>asm!(syntax1)</code> vs <code>asm!(syntax2)</code> alternative, make sure that both can be converted into a common non-macro form, so that the <code>asm!(syntax2)</code> alternative could always be implemented just as a different proc macro <code>my_asm!(syntax2)</code>.</p>\n</blockquote>",
        "id": 194843037,
        "sender_full_name": "Amanieu",
        "timestamp": 1587493634
    },
    {
        "content": "<p>Interesting. What's the underlying reason for that?</p>",
        "id": 194844375,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587494187
    },
    {
        "content": "<p>Why does it matter that <code>asm!</code> be a macro that expands to tokens, rather than a first-class thing the compiler understands?</p>",
        "id": 194844417,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587494213
    },
    {
        "content": "<p>Basically this part:</p>\n<blockquote>\n<p>The compiler frontend is in a process of migration to a token-based model (inspired by proc macros) where each macro expands to some actual non-macro syntax (token stream).</p>\n</blockquote>",
        "id": 194845264,
        "sender_full_name": "Amanieu",
        "timestamp": 1587494613
    },
    {
        "content": "<p>That's what I'm trying to understand. Why can the token not just be <code>asm!</code> ?</p>",
        "id": 194845604,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587494764
    },
    {
        "content": "<p>Or some other token that can't be written in the Rust language?</p>",
        "id": 194845639,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587494795
    },
    {
        "content": "<p>fwiw, I've been wanting to write a blog post</p>",
        "id": 194845751,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587494857
    },
    {
        "content": "<p>I get the idea of separating macro expansion from tokens, but why can't we just add an appropriate internal-use-only token for it to expand to?</p>",
        "id": 194845758,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587494864
    },
    {
        "content": "<p>that advocates for us to sometimes start with the approach of adding (stable) macros</p>",
        "id": 194845762,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587494866
    },
    {
        "content": "<p>probably with creepy names that aren't meant to be used by end users</p>",
        "id": 194845780,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587494878
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> s/aren't meant to be/can't be/ please? :)</p>",
        "id": 194845843,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587494893
    },
    {
        "content": "<p>with the intention that folks can use proc macros to experiment with syntaxes and so forth</p>",
        "id": 194845847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587494895
    },
    {
        "content": "<p>no, I wrote what I meant</p>",
        "id": 194845863,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587494902
    },
    {
        "content": "<p>Ah.</p>",
        "id": 194845868,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587494904
    },
    {
        "content": "<p>I see.</p>",
        "id": 194845875,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587494906
    },
    {
        "content": "<p>well</p>",
        "id": 194845876,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587494906
    },
    {
        "content": "<p>I vote for <code>unsafe box { ... }</code> to be the new replacement for <code>asm!{ ... }</code></p>",
        "id": 194845880,
        "sender_full_name": "pnkfelix",
        "timestamp": 1587494908
    },
    {
        "content": "<p>I think it's <em>plausible</em> for proc macros to generate those magic idents</p>",
        "id": 194845891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587494916
    },
    {
        "content": "<p>I guess that would be ok too</p>",
        "id": 194845895,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587494918
    },
    {
        "content": "<p>I don't care too much about that detail, really</p>",
        "id": 194845904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587494923
    },
    {
        "content": "<p>I forget where this came up recently</p>",
        "id": 194845923,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587494936
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I understand the goal now. But I'm hoping that the internal-use token can be unstable even if the macro syntax is stable?</p>",
        "id": 194845934,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587494942
    },
    {
        "content": "<p>I guess maybe around <code>yeet</code>/<code>throws</code>? I was thinking about it as a plausible route for something</p>",
        "id": 194845956,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587494955
    },
    {
        "content": "<p>(i.e., it seems very silly to me to reserve a whole new keyword for something that isn't meant to be exposed to end users in the first place.)</p>",
        "id": 194845958,
        "sender_full_name": "pnkfelix",
        "timestamp": 1587494956
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> I guess? that's an impl detail</p>",
        "id": 194845983,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587494969
    },
    {
        "content": "<p>the main thing is that I would want you to be able to use those proc macros on stable</p>",
        "id": 194845994,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587494976
    },
    {
        "content": "<p>Right.</p>",
        "id": 194846005,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587494982
    },
    {
        "content": "<p>and then maybe the proc macros get deprecated once there is a real lang feature that reaplces them</p>",
        "id": 194846012,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587494987
    },
    {
        "content": "<p>but the code keeps working</p>",
        "id": 194846015,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587494989
    },
    {
        "content": "<p>it's just \"old\"</p>",
        "id": 194846019,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587494991
    },
    {
        "content": "<p>So, for instance, the tokens could just as easily be something like <code>#[rustc_internal_asm] {}</code>.</p>",
        "id": 194846025,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587494995
    },
    {
        "content": "<p>right</p>",
        "id": 194846085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587495008
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 194846100,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587495015
    },
    {
        "content": "<p>oh that's good</p>",
        "id": 194846103,
        "sender_full_name": "pnkfelix",
        "timestamp": 1587495019
    },
    {
        "content": "<p>that said, for assembly</p>",
        "id": 194846138,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587495037
    },
    {
        "content": "<p>it seems like we might be leap-frogging this state</p>",
        "id": 194846151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587495045
    },
    {
        "content": "<p>and I'd probably be ok with just <code>asm</code></p>",
        "id": 194846160,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587495048
    },
    {
        "content": "<p>but ...</p>",
        "id": 194846161,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587495050
    },
    {
        "content": "<p>But I can see the general case, and I'd be all for a <code>#[rustc_internal_yeet]</code> attribute.</p>",
        "id": 194846224,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587495079
    },
    {
        "content": "<p>it occurs to me that some kind of \"namespace\" like <code>foo::xxx! (..)</code> could be used for this</p>",
        "id": 194846651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587495318
    },
    {
        "content": "<p>if we can just find some existing keyword that is suitable ;)</p>",
        "id": 194846663,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587495326
    },
    {
        "content": "<p><code>static::xxx!</code> of course, per the C++ tradition</p>",
        "id": 194846667,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587495333
    },
    {
        "content": "<p>actually, that'd be kind of funny :)</p>",
        "id": 194846674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587495336
    },
    {
        "content": "<p><code>::meta::rustc_internal::</code> ?</p>",
        "id": 194847980,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587496060
    },
    {
        "content": "<p>We did reserve <code>::meta</code> for just such an occasion. :)</p>",
        "id": 194848000,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587496071
    },
    {
        "content": "<p>I still like <code>::static::asm!()</code>, but yes :)</p>",
        "id": 194852434,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587498539
    },
    {
        "content": "<p>Does that mean proc macros would have to write <code>::r#static::</code>?</p>",
        "id": 194853500,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587499147
    },
    {
        "content": "<p>well I imagined it as hack-y keyword in the grammar</p>",
        "id": 194930588,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587562432
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> </p>\n<blockquote>\n<p>That's what I'm trying to understand. Why can the token not just be <code>asm!</code> ?</p>\n</blockquote>\n<p>Well, because you get infinite recursion.<br>\nMacros produce tokens, tokens are then parsed, if the tokens are parsed into the same thing that produced it that's not good.</p>",
        "id": 194958393,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1587573730
    },
    {
        "content": "<p>With any kind of eager expansion, user-defined macros will need to be able to expand arbitrary macro calls to their non-macro forms as well, including <code>asm</code>.</p>",
        "id": 194958615,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1587573846
    },
    {
        "content": "<p>With sufficient amount of hacks we could keep expanding <code>asm!</code> into <code>asm!</code>, but why would we want it, if we could expand it into some unstable but proper syntax instead.</p>",
        "id": 194958747,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1587573924
    },
    {
        "content": "<p>I'm not sure what benefits we get from using the path syntax like <code>::static::asm</code> for asm blocks when they are clearly not paths.<br>\n(Which would mean either exceptions in the parser to not treat <code>::static::asm</code> as a path, or hacks in resolve to not resolve paths if they look like <code>::static::asm</code>.)<br>\nYou can compose an unambiguous proper syntax like <code>static asm { ... }</code> from the same identifiers instead.</p>",
        "id": 194959757,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1587574401
    },
    {
        "content": "<p><code>static</code> looks more like something related to <code>global_asm!</code> though <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 194959981,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1587574510
    },
    {
        "content": "<p>Niko already explained the use case, so I understand why it needs to be a separate symbol. I do think it makes sense to use something like <code>#[rustc_internal_asm]</code> though, so we don't need separate reserved keywords.</p>",
        "id": 194960154,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587574587
    },
    {
        "content": "<p>If <code>asm</code> is preceded by any other keyword, then we don't need to make it reserved itself.</p>",
        "id": 194960528,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1587574743
    },
    {
        "content": "<p>But that would then require prefixing it with some other keyword.</p>",
        "id": 194960655,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587574800
    },
    {
        "content": "<p>Which is not a problem because it's unstable and only generated by <code>asm!</code> in most cases.</p>",
        "id": 194960853,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1587574868
    },
    {
        "content": "<p>Rather than artificially constructing a syntax just for the parser to re-digest, and telling people writing macros to generate that, we could use a straightforward, unique, clearly internal syntax.</p>",
        "id": 194960863,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587574870
    },
    {
        "content": "<p>The suggestions with paths and attributes are anything but straightforward though.</p>",
        "id": 194960959,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1587574911
    },
    {
        "content": "<p>Even if the underlying syntax ends up getting stabilized somewhere in Rust 2024, double keyword syntaxes like <code>unsafe asm { ... }</code> and <code>static unsafe asm { ... }</code> for global asm still look pretty good.</p>",
        "id": 194961134,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1587574982
    },
    {
        "content": "<p>Plus Rust 2024 could reserve a single new keyword, but that's too much speculation already.</p>",
        "id": 194961329,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1587575050
    },
    {
        "content": "<p>I don't expect the underlying syntax to get stabilized; it's there for experimentation in nightly.</p>",
        "id": 194961407,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587575089
    },
    {
        "content": "<p>But it'd be nice if it weren't something artificial.</p>",
        "id": 194961424,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587575096
    },
    {
        "content": "<p>Also, a syntax like <code>unsafe asm</code> closes off future language parsing possibilities. For instance, we've had requests for brace-less <code>unsafe</code> before.</p>",
        "id": 194961475,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587575120
    },
    {
        "content": "<p>Summary of my opinion: some arbitrary unstable but proper syntax is the most straightforward and least hacky way to resolve the linked issue.</p>",
        "id": 194961512,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1587575140
    },
    {
        "content": "<p>Or, for that matter, <code>&amp;unsafe arbitrary_name</code> as a raw pointer syntax.</p>",
        "id": 194961516,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587575142
    },
    {
        "content": "<p>I'm curious: what in the parser makes <code>#[some_arbitrary_attribute]</code> painful to deal with? Is there some other extensible syntax that's more easily parsed later on?</p>",
        "id": 194961723,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587575218
    },
    {
        "content": "<p><code>#[some_arbitrary_attribute]</code> is potentially a macro invocation itself, it's more a \"semantic\" than \"syntactic\" entity.</p>",
        "id": 194961828,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1587575274
    },
    {
        "content": "<p>Fair.</p>",
        "id": 194962804,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587575652
    },
    {
        "content": "<p>Another possibility that seems like it might be more extensible: <code>extern \"rustc_asm\" { ... arbitrary ... }</code> ?</p>",
        "id": 194962916,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587575707
    },
    {
        "content": "<p>That sort of makes sense, since the asm is external to rust</p>",
        "id": 194967374,
        "sender_full_name": "Sebastian Malton",
        "timestamp": 1587577692
    },
    {
        "content": "<p>Yeah, something like <code>keyword literal</code> is ok too.</p>",
        "id": 194970960,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1587579388
    },
    {
        "content": "<p>(<code>extern \"rustc_asm\" {</code> specifically needs some relatively large lookahead to discern if from an extern block item though.)</p>",
        "id": 194971277,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1587579537
    },
    {
        "content": "<p>Fair. What <em>would</em> be easiest to parse and already has arbitrary extensibility without closing off future parsing avenues?</p>",
        "id": 194971343,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587579584
    },
    {
        "content": "<p>I suggested <code>extern asm</code> in the issue.</p>",
        "id": 194972289,
        "sender_full_name": "Amanieu",
        "timestamp": 1587580047
    },
    {
        "content": "<p>But as you said, it doesn't matter what syntax it expands to: since it's unstable, we can change it whenever we want.</p>",
        "id": 194972415,
        "sender_full_name": "Amanieu",
        "timestamp": 1587580095
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> to clarify, I don't particularly care what we do, but what I was saying is that I would like to have some way for us to introduce <strong>stable syntax</strong> that is not meant for end-users to use, but only to be targeted by procedural macros. This would correspond to us exposing base capabilities but where we don't know yet what the full user syntax should be.</p>\n<p>I am somewhat inspired by Ember's model, where they explicitly introduce functions and core capabilities,, and then encourage people to experiment \"in user space\" with different ways to expose those capabilities, and then later (in what they call an \"Edition\", obviously distinct from how we use the term) they survey those terms, synthesize one into the \"final\" result, and release it. </p>\n<p>But the key point is that those \"user space experiments\" still work, because they were based on underlying capabilities.</p>\n<p>Anyway, when I proposed e.g., <code>_::foo</code> as a syntax, it wasn't meant to be parsed as a <em>path</em> -- rather, when we start parsing paths, we would presumably look ahead for <code>_</code> followed by <code>::</code> and, if we see those two tokens, we would look at the next keyword and parse it directly into a <code>foo</code> AST node.</p>",
        "id": 194984688,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587586001
    },
    {
        "content": "<p>So e.g. if we wanted to export <code>asm!</code> as such a \"core capability\" it might be <code>_::asm</code>. Anyway, it doesn't have to be <code>_::</code>, that's not the high-order bit, I mostly just wanted to find some bit of syntax that has no meaning and that we're happy committing to it having no meaning.</p>",
        "id": 194984776,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587586056
    },
    {
        "content": "<p>Though for all I know that is legal in some way :)</p>",
        "id": 194984797,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587586069
    },
    {
        "content": "<p>Part of my motivation here is that I think a good way to help defuse hot syntax debates is to have people gain <em>actual experience</em> using the various alternatives.</p>",
        "id": 194984890,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587586099
    },
    {
        "content": "<p>At least it always clarifies my opinions immensly.</p>",
        "id": 194984908,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587586109
    },
    {
        "content": "<p>That makes a lot of sense, and I know that you said that <code>_::</code> isn't the point. However, it is one of the main contenders listed in <a href=\"https://internals.rust-lang.org/t/bring-enum-variants-in-scope-for-patterns/12104\" title=\"https://internals.rust-lang.org/t/bring-enum-variants-in-scope-for-patterns/12104\">https://internals.rust-lang.org/t/bring-enum-variants-in-scope-for-patterns/12104</a>.</p>\n<p>I think that getting people to use various syntaxes would be useful, like with <code>.await</code></p>",
        "id": 194985415,
        "sender_full_name": "Sebastian Malton",
        "timestamp": 1587586373
    },
    {
        "content": "<p>Maybe we can reserve a contextual keyword called \"experimental\", and allow <code>Vis</code> <code>experimental</code> <code>{}</code> indefinitely.</p>\n<div class=\"codehilite\"><pre><span></span>#[library_defined_asm]\npub experimental {\n        asm! {\n        }\n}\n</pre></div>\n\n\n<p>And let the macro rewrite the whole inner token stream into anything it's happy with.</p>",
        "id": 195012377,
        "sender_full_name": "Charles Lew",
        "timestamp": 1587607821
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247082\">@Sebastian Malton</span> good point re: <code>_::</code> and the enum variants</p>",
        "id": 195415061,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587993540
    },
    {
        "content": "<p>another potion would be to grab some sigil like <code>%foo</code></p>",
        "id": 195415157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587993587
    },
    {
        "content": "<p>That has a meaning already.</p>",
        "id": 195429183,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587999401
    },
    {
        "content": "<p>What meaning is that?</p>",
        "id": 195429236,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587999426
    },
    {
        "content": "<p>I think it has a meaning as a binary operator, but as a unary one?</p>",
        "id": 195429256,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587999435
    },
    {
        "content": "<p>Would that be unambiguous, though?</p>",
        "id": 195429308,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587999456
    },
    {
        "content": "<p>In any case, you can insert \"favorite sigil here\".. e.g. <code>$</code></p>",
        "id": 195429317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587999460
    },
    {
        "content": "<p>sure, same way that <code>-22</code> and <code>22 - 44</code> is not ambiguous</p>",
        "id": 195429350,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587999469
    },
    {
        "content": "<p>but I think picking a fully unused sigil is probably preferable</p>",
        "id": 195429453,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587999500
    },
    {
        "content": "<p>Right, but that means the parser goes from \"I can tell that's an error from the first token\" to \"expected asm after %\", which seems like it'd confuse people.</p>",
        "id": 195429551,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587999552
    },
    {
        "content": "<p>Agreed.</p>",
        "id": 195429568,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587999558
    },
    {
        "content": "<p>An unused sigil or a keyword that doesn't have a meaning in this context.</p>",
        "id": 195429715,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587999611
    },
    {
        "content": "<p>heck we could even actually use emoji :)</p>",
        "id": 195429802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587999651
    },
    {
        "content": "<p>Ow</p>",
        "id": 195431521,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588000360
    },
    {
        "content": "<p>Actually, using emoji for bikeshedding in general is probably not a terrible idea, since it makes it very clear that it is not a final design</p>",
        "id": 195450907,
        "sender_full_name": "Sebastian Malton",
        "timestamp": 1588008941
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/Reserving.20a.20keyword.20for.20asm.20in.20the.20new.20edition/near/195429715\" title=\"#narrow/stream/213817-t-lang/topic/Reserving.20a.20keyword.20for.20asm.20in.20the.20new.20edition/near/195429715\">said</a>:</p>\n<blockquote>\n<p>An unused sigil or a keyword that doesn't have a meaning in this context.</p>\n</blockquote>\n<p><code>\\foo</code>?</p>",
        "id": 195457888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588012466
    },
    {
        "content": "<p>Anyways, I guess the core question is resolved: we don't need to reserve a new keyword and can just continue using the macro as the main entry point for inline assembly.</p>",
        "id": 195470425,
        "sender_full_name": "Amanieu",
        "timestamp": 1588019007
    },
    {
        "content": "<p>The exact syntax we choose doesn't really matter.</p>",
        "id": 195470440,
        "sender_full_name": "Amanieu",
        "timestamp": 1588019016
    }
]