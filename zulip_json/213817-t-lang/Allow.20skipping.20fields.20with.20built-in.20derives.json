[
    {
        "content": "<p>I'm thinking of writing up an RFC to allow skipping fields for built-in derives (where it makes sense) - e.g. <code>PartialEq</code>, <code>PartialOrd</code>, <code>Hash</code>,  and <code>Debug</code>.</p>\n<p>The idea is to add helper attributes for each of those derive macros (<code>#[partialeq]</code>, <code>#[partialord]</code>, etc.). The only supported form would be <code>#[partialeq(ignore)]</code> on a field, which would skip generating code for that field.</p>\n<p>Derive helper attributes effectively have a single global namespace - all proc-macros can see all helper attributes, and multi derive macros can register a helper attr with the same name. To avoid conflicts, the builtin derive macros would ignore these attributes if there are any other applied derive macros which also register them (and emit a warning). Hopefully, no one is using helper attributes with any of those names - but if they are, we won't start changing the behavior of their derived traits. Any such proc macros could then provide alternative names to allow better interoperability with the builtin derive macros.</p>\n<p>I considered more complicated workarounds, like making helper attributes full-fledged importable things (like attribute macros are). However, this seems like it would result in at least one of the following:</p>\n<ol>\n<li>Make writing proc-macros an enormous pain (you would essentially have to re-implement path resolution yourself to support all possible invocations)</li>\n<li>Be weirdly inconsistent compared to other imports (e.g. no re-exporting), which would be bad for facade crates like <code>serde</code> and <code>pin-project</code></li>\n<li>Require re-writing/normalizing helper attribute paths before invoking macros, which seems against the spirit of proc-macros.</li>\n</ol>\n<p>I haven't been able to find any recent work done in this area. Are there any issues I should know about before I start writing up a pre-rfc?</p>",
        "id": 210699504,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600660540
    },
    {
        "content": "<p>I know crates like <code>derivative</code> exist, but many library crates aren't going to pull in a proc-macro dependency just to make writing some impls more convenient. So, not having this in libcore effectively means that many crates will be permanently stuck writing manual impls (which are also crates that might benefit from it the most)</p>",
        "id": 210699576,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600660659
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> The biggest issue I'd be concerned about is whether any other crate in the ecosystem currently uses helper attributes with those names.</p>",
        "id": 210699693,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600660850
    },
    {
        "content": "<p>Could you search for <code>#[partialeq</code>, <code>#[partialord</code>, and similar via some code search sites and get an idea of whether they appear anywhere?</p>",
        "id": 210699706,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600660908
    },
    {
        "content": "<p>Also, I think it'd be reasonable to capitalize them just like the trait: <code>#[PartialEq(ignore)]</code> for instance.</p>",
        "id": 210699751,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600660938
    },
    {
        "content": "<p>(which might have the advantage of further avoiding conflicts; you should check)</p>",
        "id": 210699753,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600660951
    },
    {
        "content": "<p>This concept seems reasonable to me.</p>",
        "id": 210699766,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600660987
    },
    {
        "content": "<p>could these attributes be reserved at an edition boundary?</p>",
        "id": 210699773,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600661001
    },
    {
        "content": "<p>You will need to define what precisely those attributes mean for various types of types. For instance, what if someone puts <code>#[PartialEq(ignore)]</code> on an enum variant?</p>",
        "id": 210699775,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600661004
    },
    {
        "content": "<p>And you'll want to specify that <code>#[PartialEq(ignore)]</code> works syntactically inside a tuple struct, or an enum struct variant, or all the places it could reasonably appear in a <code>derive(PartialEq)</code>.</p>",
        "id": 210699789,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600661038
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/213817-t-lang/topic/Allow.20skipping.20fields.20with.20built-in.20derives/near/210699773\">said</a>:</p>\n<blockquote>\n<p>could these attributes be reserved at an edition boundary?</p>\n</blockquote>\n<p>I think it'd be possible to do that, if needed. They could also go by longer names (e.g. <code>core::something::attrs::PartialEq(ignore)</code>) before that edition boundary.</p>",
        "id": 210699844,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600661094
    },
    {
        "content": "<p>(Also, I hope this sets a precedent that'll apply just as well for things like <code>derive(Display)</code>.)</p>",
        "id": 210699854,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600661112
    },
    {
        "content": "<p>(Or <code>#[Debug(ignore)]</code>.)</p>",
        "id": 210699857,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600661123
    },
    {
        "content": "<p>that would be quite nice</p>",
        "id": 210699913,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600661205
    },
    {
        "content": "<p>I'll try to see if those attributes are used within the ecosystem. However,. I don't think we would want to name them anything else, and the compatibility strategy I outlined should allow us to avoid any breakage</p>",
        "id": 210700750,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600662719
    },
    {
        "content": "<p>Allowing a fully-qualified path runs into the issues I mentioned - unless we give libstd/libcore the ability to have special helper attrs. However, I'd like to avoid giving bultin derives any abilities that proc-macros don't have (other than the back-compat ignoring, which seems unavoidable)</p>",
        "id": 210700890,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600662916
    },
    {
        "content": "<p>Hm, so one note is that serde at least uses serde as the in-struct attribute name for it's two derive macros. I wonder if we should do the same (e.g. std and core). But I think the answer is probably no, because the set of derives in std is pretty orthogonal to each other. Though it might provide another namespace :)</p>",
        "id": 210730066,
        "sender_full_name": "simulacrum",
        "timestamp": 1600689051
    },
    {
        "content": "<p><a href=\"https://crates.io/crates/derivative\"><code>derivative</code></a> and <a href=\"https://crates.io/crates/educe\"><code>educe</code></a> both use their own name for attributes</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#[derivative(Debug=</span><span class=\"s\">&quot;ignore&quot;</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[educe(Debug(ignore))]</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 210768847,
        "sender_full_name": "cuviper",
        "timestamp": 1600707214
    },
    {
        "content": "<p>It sounds like people are supportive of the general concept (adding builtin derive helper attributes to skip fields). I'm going to start working on a pre-rfc - I don't think the exact naming of the attributes needs to block work on this</p>",
        "id": 210779094,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600711906
    },
    {
        "content": "<p>My hope is that we could also use helper attributes to allow relaxing the bounds on parameters (e.g. not requiring <code>T: Debug</code>). However, I'll leave that for a future RFC, as there's significantly more to discuss</p>",
        "id": 210779314,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600711999
    },
    {
        "content": "<p>nit: <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> I think this is technically t-libs, not t-lang?  Conceptually the built-in derives are just <a href=\"https://doc.rust-lang.org/nightly/std/marker/macro.Copy.html\">macros provided by the library</a> (though t-libs-impl may choose to build them into the compiler directly if they so wish, of course).  So you might want to raise it over there first.</p>\n<p>I guess the lang thing is making them special to avoid impacting existing attributes?  It feels like if there's a conflict-between-proc-macro-attributes problem here we would ideally solve that more generally than \"well std has some special ones\"...</p>",
        "id": 210781328,
        "sender_full_name": "scottmcm",
        "timestamp": 1600712943
    },
    {
        "content": "<p>Whoa, I just took a look at the source code for that:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#[rustc_builtin_macro]</span><span class=\"w\"></span>\n<span class=\"cp\">#[stable(feature = </span><span class=\"s\">&quot;builtin_macro_prelude&quot;</span><span class=\"cp\">, since = </span><span class=\"s\">&quot;1.38.0&quot;</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[allow_internal_unstable(core_intrinsics, derive_clone_copy)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"kr\">macro</span><span class=\"w\"> </span><span class=\"nb\">Copy</span><span class=\"p\">(</span><span class=\"cp\">$item</span>:<span class=\"nc\">item</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cm\">/* compiler built-in */</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>Since when is <code>macro</code> a keyword? Can that syntax be used for anything except intrinsic macros?</p>",
        "id": 210781591,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600713100
    },
    {
        "content": "<p>thats from macros 2.0</p>",
        "id": 210781623,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600713119
    },
    {
        "content": "<p>you can use that on nightly</p>",
        "id": 210781641,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1600713123
    },
    {
        "content": "<p><code>macro</code> is reserved for the <del>mythical</del> \"Macros 2.0\" that will be like macro_rules but better.  (More control over hygiene, for example.)</p>",
        "id": 210781703,
        "sender_full_name": "scottmcm",
        "timestamp": 1600713157
    },
    {
        "content": "<p>i think an attribute per derive is way overkill. can't we have some sort of <code>derive_skip</code> attribute that says \"skip this\" or optionally <code>derive_skip(eq, hash)</code> or something if you only want it skipped for some things? And then not every single derive, both in and out of the standard library, is making up its own convention about how to mark a field you want ignored.</p>",
        "id": 210781805,
        "sender_full_name": "Lokathor",
        "timestamp": 1600713225
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> My intention is for these attributes to be usable for more fine-grained control over the output produced by derive macros. For example, something like <code>#[derive(Debug)] struct Foo&lt;#[Debug(no_bound)] T&gt;  { val: PhantomData&lt;T&gt; }</code> would be made possible by this RFC, without needing to introduce new attributes</p>",
        "id": 210782328,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600713479
    },
    {
        "content": "<p>actually that already has a stalled RFC pending</p>",
        "id": 210782449,
        "sender_full_name": "Lokathor",
        "timestamp": 1600713531
    },
    {
        "content": "<p>also, I'm not certain that 'skipping' is broadly applicable enough for an attribute to make sense</p>",
        "id": 210782458,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600713537
    },
    {
        "content": "<p>For example, serde allows you to skip fields for serializing, deserializing, or both</p>",
        "id": 210782484,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600713550
    },
    {
        "content": "<p>it probably would not want to use <code>derive_skip</code>, because that makes it unclear what exactly is being skipped</p>",
        "id": 210782510,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600713567
    },
    {
        "content": "<p>imho, using the macro name (e.g. <code>#[PartialEq(skip)]</code>) makes it clear that what it means to 'skip' a field is specific to the particular derive macro being used</p>",
        "id": 210782619,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600713617
    },
    {
        "content": "<p>skip(Serialize) seems identical to serialize(skip), except that one of them puts all the skips under a common prefix</p>",
        "id": 210782719,
        "sender_full_name": "Lokathor",
        "timestamp": 1600713667
    },
    {
        "content": "<p>but <code>serde</code> also has <code>skip_serializing_if</code></p>",
        "id": 210782783,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600713703
    },
    {
        "content": "<p>which is probably not something that makes sense for arbitrary <code>derive</code> macros</p>",
        "id": 210782799,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600713713
    },
    {
        "content": "<p>within skip nothing is stopping serialize from accepting more args</p>",
        "id": 210782899,
        "sender_full_name": "Lokathor",
        "timestamp": 1600713755
    },
    {
        "content": "<p>ah, here's that RFC i mentioned, <a href=\"https://github.com/rust-lang/rfcs/pull/2353\">https://github.com/rust-lang/rfcs/pull/2353</a></p>",
        "id": 210782923,
        "sender_full_name": "Lokathor",
        "timestamp": 1600713766
    },
    {
        "content": "<p>hmm</p>",
        "id": 210782928,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600713770
    },
    {
        "content": "<p>my concern is a namespace clogging one. with one attribute for derive skips, it's clear that's what's going on, minimal top level conflicts. <em>within</em> that attribute usage you can go back to being arbitratily complicated and no one cares because it doens't name clash with what they're doing.</p>",
        "id": 210783098,
        "sender_full_name": "Lokathor",
        "timestamp": 1600713853
    },
    {
        "content": "<p>My concern is that we'll run into the namespace issue again if we ever want to allow more customization of builtin derives</p>",
        "id": 210783168,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600713900
    },
    {
        "content": "<p>e.g. the RFC you linked</p>",
        "id": 210783178,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600713903
    },
    {
        "content": "<p>but perhaps that just points the need to some form of namespacing (as <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> mentioned)</p>",
        "id": 210783204,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600713920
    },
    {
        "content": "<p>there's only two hard things in programming, and naming is one of them.</p>",
        "id": 210783219,
        "sender_full_name": "Lokathor",
        "timestamp": 1600713930
    },
    {
        "content": "<p>(The other is cache invalidation and off-by-one errors.)</p>",
        "id": 210783563,
        "sender_full_name": "scottmcm",
        "timestamp": 1600714100
    },
    {
        "content": "<p>I strongly believe that we shouldn't make helper attributes importable items (like attribute macros). The only way for proc-macros to reliably handle such attributes would be for rustc to 'normalize' the attribute before invoking the proc-macro, which seems to violate the whole spirit of proc macros (you get the exact tokens written by the user,  to the greatest extent possible).</p>\n<p>Unfortuntely, that doesn't leave us with many options</p>",
        "id": 210783616,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600714136
    },
    {
        "content": "<p>Here's an idea for namespacing helper attributes - we allow prefixing them with a path to the derive macro.<br>\nE.g. <code>#[derive(Debug)] struct Foo { #[Debug::debug(skip)] field: u8 }</code></p>\n<p>When invoking the derive macro, we strip off the prefix if it matches the macro being invoked.</p>\n<p>So, in <code>#[derive(Debug, CustomDerive)] struct Foo { #[Debug::debug(skip)] val: u8 }</code>, the <code>Debug</code> macro would see <code>struct Foo { #[debug(skip)] field: u8 }</code>, while the <code>CustomDerive</code> macro would see <code>struct Foo { #[Debug::debug(skip)] field: u8 }</code></p>\n<p>We would still be modifying the tokens passed to the macro, but we are only <em>removing</em> tokens, so there are no issues with spans. We need to do this for <code>#[cfg]</code> attributes anyway, so it's not as if derive macros previous received the exact input in all cases.</p>\n<p>This has the downside of making derive macros see different versions of the same code. However, derive macros can only emit new tokens, so this os only observable of a derive macro decides to re-emit a helper attribute. Also, attribute macros currently see different 'views' of a target (it depends on the order they occur in), so there's precedent for this.</p>",
        "id": 210930911,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600808624
    },
    {
        "content": "<p>If the path isn't fully qualified, there could be an ambiguity (e.g you have <code>use some_crate::Debug</code> in scope, where <code>Debug</code> is a module), but that can just be a hard error. Specifiyng a fully-qualified path should always resolve the ambiguity.</p>",
        "id": 210931104,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600808744
    },
    {
        "content": "<p>This would allow us to introduce builtin derive helpers without needing a permanent special case for the standard library. We would still want to ignore them for builtin derives in cases of overlap (to avoid affecting existing code), but this could be changed in a future edition.</p>",
        "id": 210931604,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600809037
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> any objections to the above strategy for disambiguating derive helper attributes? If not, I'll work on a pre-RFC</p>",
        "id": 210931691,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600809095
    },
    {
        "content": "<p>If we do that, is there any reason it couldn't be <code>#[Debug::skip]</code>?</p>",
        "id": 210945087,
        "sender_full_name": "tmandry",
        "timestamp": 1600818685
    },
    {
        "content": "<p>Either <code>Debug(skip)</code> or <code>Debug::skip</code> seems reasonable.</p>",
        "id": 210946464,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600820022
    },
    {
        "content": "<p>The idea is for this to be an alternate way of specifying the normal helper name. So, the normal form would be <code>#[debug(skip)]</code>, disambiguated as <code>#[Debug::debug(skip)]</code></p>",
        "id": 210946578,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600820149
    },
    {
        "content": "<p><code>#[Debug::skip]</code> would mean that <code>Debug</code> defined a helper attr named <code>skip</code></p>",
        "id": 210946589,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600820162
    },
    {
        "content": "<p>I think <code>Debug(skip)</code> looks too much like another invocation of <code>Debug</code></p>",
        "id": 210946644,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600820218
    },
    {
        "content": "<p>the disambiguated syntax does look weird, but the idea is that it would almost never need to be used</p>",
        "id": 210946882,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600820468
    },
    {
        "content": "<p>it's just to prevent a situtation where combining two derives macros becomes impossible</p>",
        "id": 210946899,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600820492
    },
    {
        "content": "<p>Ah, I see.</p>",
        "id": 210955036,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600830088
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> I'll try to read this thread this evening.</p>",
        "id": 210958446,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1600835335
    },
    {
        "content": "<p>I really dislike the idea of introducing new language features for this, and suggest to use the existing mechanism of helper attributes as if <code>Debug</code> were a regular third-party proc macro (which it could totally be, proc macros being implemented in a compiler crate rather than in a regular proc macro crate is more like an implementation detail).</p>",
        "id": 211060017,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1600893905
    },
    {
        "content": "<p>Since helper attributes are pretty fundamentally global due to proc macros having to do simple textual match instead of name resolution, I suggest to deal with possible ambiguities by using an unique enough name.</p>",
        "id": 211060196,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1600894012
    },
    {
        "content": "<p>My concern is about what will happen if there is a collision</p>",
        "id": 211060366,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600894108
    },
    {
        "content": "<p>if the collision was with a normal importable name, the user would get an error</p>",
        "id": 211060504,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600894181
    },
    {
        "content": "<p>However, an overlap with derive helper attributes could cause the behavior to silently change when the compiler is updated</p>",
        "id": 211060588,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600894211
    },
    {
        "content": "<p>(Also, helper attributes are actually importable due to 2018 edition uniform imports, see <a href=\"https://github.com/rust-lang/rust/pull/64694\">https://github.com/rust-lang/rust/pull/64694</a>, but there's a rule preventing their use in imported form, so proc macros still can do textual matching. This is very similar to <a href=\"#narrow/stream/122651-general/topic/What's.20the.20deal.20with.20importing.20builtin.20attributes.3F\">https://rust-lang.zulipchat.com/#narrow/stream/122651-general/topic/What's.20the.20deal.20with.20importing.20builtin.20attributes.3F</a>)</p>",
        "id": 211060604,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1600894221
    },
    {
        "content": "<p>my initial idea was ignore them in builtin derives if there was an overlap, but I think <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> was worried about making the special library extra special with regard to macros</p>",
        "id": 211060700,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600894282
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/213817-t-lang/topic/Allow.20skipping.20fields.20with.20built-in.20derives/near/211060366\">said</a>:</p>\n<blockquote>\n<p>My concern is about what will happen if there is a collision</p>\n</blockquote>\n<p>What third-party proc macros do if there's a collision? We should do the same thing.<br>\n(That probably again means unique enough names.)</p>",
        "id": 211060707,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1600894286
    },
    {
        "content": "<p>With third party macros, the crate using them can control the dependency versions</p>",
        "id": 211060739,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600894310
    },
    {
        "content": "<p>so they at least have a chance of defending against overlap by checking release notes before upgrading</p>",
        "id": 211060805,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600894323
    },
    {
        "content": "<p>when it's the standard library introducing helper attributes, they may not realize there's a conflict if they test on older versions of Rust</p>",
        "id": 211060854,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600894361
    },
    {
        "content": "<p>but their downstream users will get silent behavior changes</p>",
        "id": 211060867,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600894368
    },
    {
        "content": "<p>My hope is that this almost never comes up in practice, but I'm uncomfortable with users having no way of defending against this (other than reading the release notes for every single rust update, and auditing every single derive invocation in their crate)</p>",
        "id": 211061030,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600894455
    },
    {
        "content": "<p>These compatibility issues are theoretical so far. I suggest to use names that are unlikely to cause conflicts and check it with crater.</p>",
        "id": 211061046,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1600894465
    },
    {
        "content": "<p>Alternatively, we can <em>encourage</em> this \"overlap\" and reuse the single built-in attribute <code>#[ignore]</code> to tell <em>all</em> derives to ignore the field on which it is placed.</p>",
        "id": 211061154,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1600894545
    },
    {
        "content": "<p>I don't think we should have a single attribute - there are legitimate usecases for only ignoring certain derives</p>",
        "id": 211061228,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600894588
    },
    {
        "content": "<p>E.g. a <code>#[derive(PartialEq, Debug)]</code> struct with a non-debuggable type</p>",
        "id": 211061248,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600894604
    },
    {
        "content": "<p>They will still need to be written manually then.<br>\n(Derive is still a sugar for common cases after all.)</p>",
        "id": 211061293,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1600894631
    },
    {
        "content": "<p>Or we can use <code>#[ignore(Debug)]</code>.</p>",
        "id": 211061329,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1600894653
    },
    {
        "content": "<p>My worry about encouraging overlap is that it gives us no way to distinguish between intentional and unintentional overlap (e.g. a custom derive that already interprets <code>#[ignore(Debug)]</code> for some reason.</p>",
        "id": 211061876,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600894943
    },
    {
        "content": "<p>I really hope no one is currently doing that, but I really dislike the idea of silent behavior change</p>",
        "id": 211061913,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600894963
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rfcs/pull/2353\">https://github.com/rust-lang/rfcs/pull/2353</a> appears to encourage overlap as well (single attribute for all macros, built-in and third-party).<br>\nIt and also doesn't consider potential breakage from macros already using <code>#[derive_no_bound]</code> and <code>#[derive_field_bound]</code> as helpers.</p>",
        "id": 211062889,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1600895480
    },
    {
        "content": "<p>Ok, I still think we should try the simplest thing first  - just add a regular helper (or reuse a built-in), and start thinking about problems only if they actually appear.</p>",
        "id": 211063255,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1600895684
    },
    {
        "content": "<p>I'll do a crater run so we can get a lower bound on the amount of breakage</p>",
        "id": 211063436,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600895797
    },
    {
        "content": "<p>there's only one item in the queue atm</p>",
        "id": 211063460,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600895816
    },
    {
        "content": "<p>The crater run didn't even start - bootstrapping failed, since chalk deliberately overlaps helper attributes</p>",
        "id": 211330057,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1601077724
    },
    {
        "content": "<p>which would seem to suggest that overlapping helper attributes might be somewhat common in practice</p>",
        "id": 211330095,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1601077795
    }
]