[
    {
        "content": "<p>Would it potentially be feasible to make associated values and associated constants available via values, not just via types?</p>",
        "id": 231702959,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616617645
    },
    {
        "content": "<p>Simple (non-motivating) example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kt\">u32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"fm\">dbg!</span><span class=\"p\">(</span><span class=\"n\">x</span>::<span class=\"n\">MAX</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 231702996,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616617664
    },
    {
        "content": "<p>This has more value for associated types, in particular. This would be a generalized solution for things like <code>some_function::Output</code>.</p>",
        "id": 231703250,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616617779
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 231703261,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616617784
    },
    {
        "content": "<p>aren't they different namespaces? i.e. you could have <code>mod x</code> that's still accessible despite the local <code>x</code></p>",
        "id": 231703271,
        "sender_full_name": "cuviper",
        "timestamp": 1616617790
    },
    {
        "content": "<p>maybe another flavor of qualified paths, like  <code>&lt;typeof(x)&gt;::MAX</code> ?</p>",
        "id": 231750460,
        "sender_full_name": "Charles Lew",
        "timestamp": 1616650886
    },
    {
        "content": "<p>why would you want that?</p>",
        "id": 231917775,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616737061
    },
    {
        "content": "<blockquote>\n<p>This has more value for associated types, in particular. This would be a generalized solution for things like <code>some_function::Output</code>.</p>\n</blockquote>",
        "id": 231979531,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616770946
    },
    {
        "content": "<p>maybe <code>{foo}::ETC</code> to give it a value context?</p>",
        "id": 231997658,
        "sender_full_name": "cuviper",
        "timestamp": 1616777402
    },
    {
        "content": "<p>If that's needed to disambiguate.</p>",
        "id": 231998059,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616777538
    },
    {
        "content": "<p>This definitely seems to me more like <code>typeof</code>.</p>",
        "id": 232461656,
        "sender_full_name": "scottmcm",
        "timestamp": 1617123999
    },
    {
        "content": "<p>Modulo syntax, supporting either feature leads to featuring the other one:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"p\">}</span>::<span class=\"n\">ASSOC</span><span class=\"w\"></span>\n<span class=\"c1\">// can be implemented with</span>\n<span class=\"o\">&lt;</span><span class=\"kr\">typeof</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">)</span><span class=\"o\">&gt;</span>::<span class=\"n\">ASSOC</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kr\">typeof</span><span class=\"p\">(</span><span class=\"n\">EXPR</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"c1\">// can be implemented with</span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">GetTypeOf</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">TypeOf</span><span class=\"w\"> </span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"c1\">// Or use a helper wrapper type with an inherent assoc type, once supported</span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">GetTypeOf</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">TypeOf</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">EXPR</span><span class=\"w\"> </span><span class=\"p\">}</span>::<span class=\"n\">TypeOf</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 232476531,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1617129928
    }
]