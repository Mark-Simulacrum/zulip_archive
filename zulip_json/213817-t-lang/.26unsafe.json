[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> do you know where the majority discussion of <code>&amp;unsafe</code> has taken place?</p>",
        "id": 215113282,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604073174
    },
    {
        "content": "<p>I don't think there's been one place, maybe some UCG issues?</p>",
        "id": 215113304,
        "sender_full_name": "simulacrum",
        "timestamp": 1604073184
    },
    {
        "content": "<p>I'd like to have a better understanding of the proposed payoff for adding it</p>",
        "id": 215113311,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604073187
    },
    {
        "content": "<p>I think the idea is that <em>in practice</em> you almost never want <code>*const/*mut</code> in some sense</p>",
        "id": 215113366,
        "sender_full_name": "simulacrum",
        "timestamp": 1604073212
    },
    {
        "content": "<p>so adding a third variant is the answer?</p>",
        "id": 215113391,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604073223
    },
    {
        "content": "<p>(with, what, some sort of subtype relation?)</p>",
        "id": 215113455,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604073243
    },
    {
        "content": "<p>I believe the idea is that we would overtime deprecate raw pointers almost entirely</p>",
        "id": 215113464,
        "sender_full_name": "simulacrum",
        "timestamp": 1604073244
    },
    {
        "content": "<p>hmm</p>",
        "id": 215113485,
        "sender_full_name": "pnkfelix",
        "timestamp": 1604073247
    },
    {
        "content": "<p>I don't know of any structured discussion or document for this</p>",
        "id": 215189818,
        "sender_full_name": "RalfJ",
        "timestamp": 1604147923
    },
    {
        "content": "<p>Just some ideas floating around for, basically, a more ergonomic built-in version of <code>NonNull</code></p>",
        "id": 215189827,
        "sender_full_name": "RalfJ",
        "timestamp": 1604147939
    },
    {
        "content": "<p>Might be an interesting opportunity to do more things with alignment too.  Either an alignment validity option on pointers (so you could have a 4-aligned u8 pointer, or a 1-aligned i32 pointer for <code>repr(packed)</code>), or an erased thing that works more like a lint kind like I understand zig has for its pointers.</p>",
        "id": 215207684,
        "sender_full_name": "scottmcm",
        "timestamp": 1604172248
    },
    {
        "content": "<p>the zig thing is a lint? so far I was under the impression that it is enforced? that's how people in /r/rust seem to tout it anyways^^</p>",
        "id": 215209471,
        "sender_full_name": "RalfJ",
        "timestamp": 1604174677
    },
    {
        "content": "<p>but yes, &amp;unsafe should either make no alignment requirements (so reads/writes are implicitly unaligned) or should have fine-grained alignment control</p>",
        "id": 215209487,
        "sender_full_name": "RalfJ",
        "timestamp": 1604174712
    },
    {
        "content": "<p>\"lint\" was probably a poor word, though it might be a \"lint\" in the way that <code>*mut</code>-vs-<code>*const</code> is a \"lint\".  I haven't looked to see whether Zig actually monomorphizes differently by alignment of the pointer, or whether it's erased after the compile-time check.</p>",
        "id": 215211575,
        "sender_full_name": "scottmcm",
        "timestamp": 1604177676
    },
    {
        "content": "<p>One issue with <code>&amp;unsafe</code> syntax: <code>&amp;unsafe { 1 }</code> is valid already and is equivalent to <code>&amp;1</code></p>",
        "id": 215223605,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1604199538
    },
    {
        "content": "<p>I think using only <code>&amp;unsafe const</code> or <code>&amp;unsafe mut</code> could work, though</p>",
        "id": 215223689,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1604199646
    },
    {
        "content": "<p>Zig erases the alignments at runtime, but there's an alignment cast which has a safety check in debug.</p>",
        "id": 215225247,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1604202450
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303115\">Quy Nguyen</span> <a href=\"#narrow/stream/213817-t-lang/topic/.26unsafe/near/215225247\">said</a>:</p>\n<blockquote>\n<p>Zig erases the alignments at runtime</p>\n</blockquote>\n<p>Sure, but Rust also erases lifetimes at runtime and they are very much not a lint ;)</p>",
        "id": 215234227,
        "sender_full_name": "RalfJ",
        "timestamp": 1604220453
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/213817-t-lang/topic/.26unsafe/near/215211575\">said</a>:</p>\n<blockquote>\n<p>\"lint\" was probably a poor word, though it might be a \"lint\" in the way that <code>*mut</code>-vs-<code>*const</code> is a \"lint\".  I haven't looked to see whether Zig actually monomorphizes differently by alignment of the pointer, or whether it's erased after the compile-time check.</p>\n</blockquote>\n<p>I get that, but that is not the impression I had of Zig. But I never used Zig, my impression is based on the posts that occasionally come up in TWiR.</p>",
        "id": 215234231,
        "sender_full_name": "RalfJ",
        "timestamp": 1604220481
    },
    {
        "content": "<p>Namely I thought the point was that Zig <em>guarantees</em> correctness of these alignment annotations.<br>\nNow <span class=\"user-mention\" data-user-id=\"303115\">@Quy Nguyen</span> says there are alignment casts, so I wonder -- are those considered \"unsafe\" in some sense?</p>",
        "id": 215234272,
        "sender_full_name": "RalfJ",
        "timestamp": 1604220531
    },
    {
        "content": "<p>Remember, Zig is not a safe language. Alignment casts are a type of safety check described here. <a href=\"https://ziglang.org/#Performance-and-Safety-Choose-Two\">https://ziglang.org/#Performance-and-Safety-Choose-Two</a></p>",
        "id": 215247830,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1604242925
    },
    {
        "content": "<p>So, just to make sure I understood things correctly, would non-null-ness be the only difference between the suggested <code>&amp;unsafe</code> and <code>&amp;raw</code>?</p>\n<ul>\n<li>Given the whole thread, an <code>&amp;'unsafe</code> lifetime to represent a non-null and well-aligned but not <code>dereferenceable</code> reference would seem to solve most of the issues, be clearer about the meaning (we are lying about the <em>lifetime</em> and thus area of usability and validity of the reference), and would combine better with nested types <code>Foo&lt;'unsafe&gt;</code>). Such a reference, at the primitive level, could be constructed using<code>&amp;raw</code> It would also help when trying to easily remove lifetime params, like self-referential helper cates do (they often use <code>'static</code> for this <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span>)</li>\n</ul>\n<p>Also, one old proposal that was quite technical but thus also detailed, about \"expired references\", that may then be related / worth reading would be: <a href=\"https://internals.rust-lang.org/t/proposal-about-expired-references/11675\">https://internals.rust-lang.org/t/proposal-about-expired-references/11675</a></p>",
        "id": 215255071,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1604254193
    },
    {
        "content": "<p>If <code>'unsafe</code> is a lifetime, then what should happen when you call a (safe) <code>Foo&lt;'a&gt;</code> function on a <code>Foo&lt;'unsafe&gt;</code>? Presumably this should be unsafe but then how do the <code>unsafe</code> blocks work?</p>",
        "id": 215256880,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604256936
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> I'd guess the language would need to provide an <code>unsafe</code> cast: <code>as Foo&lt;'_&gt;</code>, to inject an arbitrary lifetime there, whereby asserting the validity of the involved reference(s) for the duration of that lifetime. Obviously that would have the drawback of dealing with potentially unbounded lifetimes, but we do know how to write shims to get that under control (connect an unbounded lifetime parameter with that of a reference to some dummy local (<code>&amp;'local ()</code>), or use higher-order lifetimes to ensure the lifetime does not escape the syntactically visible scope of the provided closure:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">unsafe</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">with_assume_valid</span><span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span>: <span class=\"nc\">Foo</span><span class=\"o\">&lt;'</span><span class=\"na\">unsafe</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">with</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">(</span><span class=\"n\">Foo</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">R</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">R</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">with</span><span class=\"p\">(</span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"c1\">// Usage:</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">foo</span>: <span class=\"nc\">Foo</span><span class=\"o\">&lt;'</span><span class=\"na\">unsafe</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* ... */</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">with_assume_valid</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">foo</span>: <span class=\"nc\">Foo</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">safe_fn</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"p\">})};</span><span class=\"w\"> </span><span class=\"c1\">// &lt;- we assume / Rust knows `foo` is `dereferenceable` during this whole scope.</span>\n</code></pre></div>\n<hr>\n<p>Anyways, I am not making an RFC or even a pre-RFC here, so I haven't thought of the ways <code>Foo&lt;'unsafe&gt;</code> stuff could work; it just seems, at first glance, that such design could at least have some hope of interacting with these complex types, whereas <code>&amp;unsafe</code>-forged raw pointers wouldn't. For a more full-fledged proposal, the internals thread I linked to does mention some interesting ideas, and contrary to me, they seem to have done their theorycrafting homework <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n<p>So feel free to dismiss my brainstormed <code>&amp;'unsafe</code> idea; I am more interested in knowing an actually meaningful difference between <code>&amp;raw</code> and <code>&amp;unsafe</code> other than <code>NonNull</code>-ness;</p>",
        "id": 215259473,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1604260775
    },
    {
        "content": "<blockquote>\n<p>So, just to make sure I understood things correctly, would non-null-ness be the only difference between the suggested &amp;unsafe and &amp;raw?</p>\n</blockquote>\n<p>There is no concrete proposal yet, so there is no definite answer. Also, <code>&amp;raw</code> is not a type, it is an operation, so I do not understand the comparison.<br>\nin terms of validity, non-null-ness was the proposed main difference between <code>&amp;unsafe</code> and <code>*mut</code>. but the proposal also involves ergonomic differences (which coercions etc are applied). I am not sure what exactly the ideas here were, <span class=\"user-mention\" data-user-id=\"256759\">@boats</span> might remember more.</p>",
        "id": 215260802,
        "sender_full_name": "RalfJ",
        "timestamp": 1604262503
    },
    {
        "content": "<p>Thanks for the answer <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<blockquote>\n<p>Also, &amp;raw is not a type, it is an operation, so I do not understand the comparison.</p>\n</blockquote>\n<p>IIUC, understood <code>&amp;unsafe</code> would be (at least) an operation too, since I saw somewhere some talk of it being ambiguous with <code>&amp;unsafe {</code>.</p>\n<p>I guess the idea then would be to have, similar to <code>&amp;</code> and <code>&amp;mut</code>, a \"common\" syntax for both the <code>&amp;raw</code>-as-a-nonnull operation and the <code>ptr::NonNull</code> type itself? (with a special <code>ptr::NonNullInvariant&lt;T&gt;</code> type for the <code>&amp;unsafe mut</code> case?)</p>\n<p>* In that case, is there a specific motivation for not including alignment among the validity invariants?</p>",
        "id": 215262564,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1604265244
    },
    {
        "content": "<blockquote>\n<p>IIUC, understood &amp;unsafe would be (at least) an operation too, since I saw somewhere some talk of it being ambiguous with &amp;unsafe {.</p>\n</blockquote>\n<p>once we have a new type <code>&amp;unsafe T</code> we need an operation to create elements of the type. :)<br>\nbut the key point is that it is a new type.</p>",
        "id": 215264898,
        "sender_full_name": "RalfJ",
        "timestamp": 1604268616
    },
    {
        "content": "<p>also I am not the one making the proposal so I am probably ill-suited to answer all these questions :D<br>\nthe goal is to solve some problems around raw pointers:</p>\n<ul>\n<li>the mut/const distinction is mostly just annoying</li>\n<li>NonNull should be used most of the time but is very unergonomic</li>\n<li>field accesses to raw pointers are also rather annoying... <code>(*(*x).field.ptr).nested_field</code> is awful. [this is the \"postfix deref\" part of the plan, which is orthogonal to <code>&amp;unsafe</code> but part of the larger \"unsafe/raw ptr ergnomic\" issue]</li>\n</ul>",
        "id": 215265007,
        "sender_full_name": "RalfJ",
        "timestamp": 1604268758
    },
    {
        "content": "<p>Could we instead make NonNull and the like more ergonomic? One thing I'd want for example is implementing stuff for *T and not just &amp;T.</p>",
        "id": 215266532,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1604270970
    },
    {
        "content": "<p>Ralf's summary is accurate to my memory. This never advanced to the point of a fleshed out proposal.</p>",
        "id": 215494917,
        "sender_full_name": "boats",
        "timestamp": 1604429021
    },
    {
        "content": "<p>One thing we wanted to do I remember was e.g. making the cast between target type and the cast from const to mut syntactically different, instead of both being with <code>as</code>, to help readers understand better what was happening.</p>",
        "id": 215495040,
        "sender_full_name": "boats",
        "timestamp": 1604429073
    },
    {
        "content": "<p>we also considered entirely killing the const/mut distinction</p>",
        "id": 215952270,
        "sender_full_name": "RalfJ",
        "timestamp": 1604751070
    },
    {
        "content": "<p>What would be the default variance, then? Invariant would make it <em>impossible</em> to define covariant wrappers around it, and covariant would make it quite easy to accidentally construct unsound covariant  abstractions… (the issue coming from the \"auto-trait nature\" of variance). If we were to speculate about potential future additions, I'd love to see variance involved at use-site rather than tied to the type. That is, something involving <code>&amp;unsafe T</code> would be invariant, but something (such as a function or a wrapper type definition) involving <code>#[covariant] &amp;unsafe T</code> would get to be covariant, at least <em>w.r.t.</em> that specific usage:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Iter</span><span class=\"o\">&lt;'</span><span class=\"na\">iter</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span>: <span class=\"o\">'</span><span class=\"na\">iter</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">remaining_slice</span>: <span class=\"cp\">#[covariant]</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_lifetime</span>: <span class=\"nc\">PhantomData</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">iter</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">IterMut</span><span class=\"o\">&lt;'</span><span class=\"na\">iter</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span>: <span class=\"o\">'</span><span class=\"na\">iter</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">remaining_slice</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">unsafe</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_lifetime</span>: <span class=\"nc\">PhantomData</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">iter</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This is way, the default choice is the conservative invariant design, butt hat doesn't prevent users from opting into covariance.</p>",
        "id": 215959717,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1604762792
    },
    {
        "content": "<blockquote>\n<p>Invariant would make it impossible to define covariant wrappers around it</p>\n</blockquote>\n<p>not if we allow something like <code>unsafe impl Covariant for ...</code> (this does not make sense as a trait because the \"subject\" of variance is not a type but a type constructor... but you get the idea).<br>\nI guess attributes also work like you suggested.</p>",
        "id": 215960603,
        "sender_full_name": "RalfJ",
        "timestamp": 1604764022
    },
    {
        "content": "<p>I don't think manual variance annotations should be attached to fields</p>",
        "id": 215960610,
        "sender_full_name": "RalfJ",
        "timestamp": 1604764044
    },
    {
        "content": "<p>they should be attached to parameters, because those are the things that have variance</p>",
        "id": 215960616,
        "sender_full_name": "RalfJ",
        "timestamp": 1604764055
    },
    {
        "content": "<p>so more like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Iter</span><span class=\"o\">&lt;'</span><span class=\"na\">iter</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">#[covariant]</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span>: <span class=\"o\">'</span><span class=\"na\">iter</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">remaining_slice</span>: <span class=\"cp\">#[covariant]</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_lifetime</span>: <span class=\"nc\">PhantomData</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">iter</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 215960634,
        "sender_full_name": "RalfJ",
        "timestamp": 1604764083
    },
    {
        "content": "<p>I agree with that, but the current necessary-<code>PhantomData</code>-or-other-usage-to-infer-variance-from-it design kind of leans the other way around.</p>\n<p>But past \"mistakes\" should not dictate future design choices: I agree that explicit covariance annotations affecting a type constructor is what makes most sense / is less error-prone. When/If these are added, it would free us from the obligation to \"use\" the type somewhere, and get rid of many <code>PhantomData</code> usages altogether.</p>\n<p>And given that it can't be a trait (at least until we get HKT), using <code>#[attributes]</code> is the next most logical syntax, and adding the annotations when introducing the parameters looks quite nice indeed.</p>",
        "id": 215960915,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1604764458
    },
    {
        "content": "<p>A big +1 from me for marking <code>#[covariant]</code> on struct parameters, independently from <code>&amp;unsafe</code>. However, that attribute needs to be unsafe; where would the <code>unsafe</code> go?</p>",
        "id": 215962888,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604767399
    },
    {
        "content": "<p>hm... this reminds me we really need a story for unsafe attributes...</p>",
        "id": 215963059,
        "sender_full_name": "RalfJ",
        "timestamp": 1604767600
    },
    {
        "content": "<p>(e.g., <code>link_name</code>, or <code>no_mangle</code>)</p>",
        "id": 215963063,
        "sender_full_name": "RalfJ",
        "timestamp": 1604767607
    },
    {
        "content": "<p>(<a href=\"https://github.com/rust-lang/rust/pull/72209\">https://github.com/rust-lang/rust/pull/72209</a> fwiw)</p>",
        "id": 215963257,
        "sender_full_name": "simulacrum",
        "timestamp": 1604767852
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/213817-t-lang/topic/.26unsafe/near/215963257\">said</a>:</p>\n<blockquote>\n<p>(<a href=\"https://github.com/rust-lang/rust/pull/72209\">https://github.com/rust-lang/rust/pull/72209</a> fwiw)</p>\n</blockquote>\n<p>that's nice, but only useful for people that set <code>deny(unsafe_code)</code>.<br>\nit seems somewhat unfortunate that we should allow unsafe attributes by default unless one opts out; that is not how we usually handle unsafety ;)</p>",
        "id": 215963398,
        "sender_full_name": "RalfJ",
        "timestamp": 1604768039
    },
    {
        "content": "<p>yeah</p>",
        "id": 215963482,
        "sender_full_name": "simulacrum",
        "timestamp": 1604768124
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/213817-t-lang/topic/.26unsafe/near/215963398\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/213817-t-lang/topic/.26unsafe/near/215963257\">said</a>:</p>\n<blockquote>\n<p>(<a href=\"https://github.com/rust-lang/rust/pull/72209\">https://github.com/rust-lang/rust/pull/72209</a> fwiw)</p>\n</blockquote>\n<p>that's nice, but only useful for people that set <code>deny(unsafe_code)</code>.<br>\nit seems somewhat unfortunate that we should allow unsafe attributes by default unless one opts out; that is not how we usually handle unsafety ;)</p>\n</blockquote>\n<p>could we add a separate <code>unsafe_attributes</code> lint that's warn by default?</p>",
        "id": 215967109,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604773394
    },
    {
        "content": "<p>or even error-by-default if you want people to have to opt-in</p>",
        "id": 215967122,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604773436
    },
    {
        "content": "<p>I am imagining something like <code>#[unsafe(....)]</code>, with a lint for existing attributes that fail to be wrapped in <code>unsafe</code>. the lint should be warn-by-default on current editions and err-by-default on future editions.</p>",
        "id": 215967305,
        "sender_full_name": "RalfJ",
        "timestamp": 1604773702
    },
    {
        "content": "<p>unfortunately I have no bandwidth to push for something like this^^</p>",
        "id": 215967310,
        "sender_full_name": "RalfJ",
        "timestamp": 1604773721
    },
    {
        "content": "<p>Note that having <code>#[unsafe(…)]</code> would be a nice way to, for instance, assert that the declarations of functions inside an <code>extern \"ABI\" { … }</code> block do not need to be <code>unsafe</code>-to-call, which I know is a feature desired by some people:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[unsafe(assume_safe)]</span><span class=\"w\"></span>\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"ABI\"</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">wrapping_add</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 216004013,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1604836909
    },
    {
        "content": "<p>yeah there are probably more ways this is useful than just fixing the existing soundness holes</p>",
        "id": 216004355,
        "sender_full_name": "RalfJ",
        "timestamp": 1604837329
    },
    {
        "content": "<p>if someone wants to take the lead on this I'd be happy to give feedback for an RFC or whatever the right process might be ;)</p>",
        "id": 216004372,
        "sender_full_name": "RalfJ",
        "timestamp": 1604837356
    },
    {
        "content": "<p>Also see <a href=\"https://github.com/image-rs/image/pull/1358\">https://github.com/image-rs/image/pull/1358</a> for a case where <code>*mut</code> vs <code>*const</code> actually could have helped identify a bug, if const-to-mut casts required special syntax</p>",
        "id": 216587569,
        "sender_full_name": "RalfJ",
        "timestamp": 1605260467
    },
    {
        "content": "<p>Also <a href=\"https://blog.rust-lang.org/2017/02/09/Rust-1.15.1.html#whats-in-1151-stable\">https://blog.rust-lang.org/2017/02/09/Rust-1.15.1.html#whats-in-1151-stable</a>, of course.</p>",
        "id": 216671400,
        "sender_full_name": "scottmcm",
        "timestamp": 1605300764
    }
]