[
    {
        "content": "<p>It seems <code>Fn*</code> traits themselves cannot make any progress before the matter of variadic generics is settled. (Which i think won't happen in a few years time)  Is it possible to create and stablize a macro to allow people to impl these traits themselves for common cases?</p>",
        "id": 237644073,
        "sender_full_name": "Charles Lew",
        "timestamp": 1620301414
    },
    {
        "content": "<p>Isn't that why we require the <code>Fn(T1, T2, ...)</code> syntax and <code>Fn&lt;(args)&gt;</code> is unstable?</p>",
        "id": 237667309,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1620311453
    },
    {
        "content": "<p>we could allow people to <code>impl Fn(T1, T2) for CustomType</code>, no?</p>",
        "id": 237667362,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1620311472
    },
    {
        "content": "<p>I would guess the problem is more so the \"call\" method, right? Since that needs to somehow take a variable number of parameters</p>",
        "id": 237667398,
        "sender_full_name": "simulacrum",
        "timestamp": 1620311484
    },
    {
        "content": "<p>yeah, true</p>",
        "id": 237667455,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1620311506
    },
    {
        "content": "<p>(We could sidetype the question or decide on <em>some</em> lowering; I don't know that it needs to actually be blocked on variadics stabilizing fully)</p>",
        "id": 237667487,
        "sender_full_name": "simulacrum",
        "timestamp": 1620311518
    },
    {
        "content": "<p>last time this was brought up my impression was that the <code>\"rust-call\"</code> ABI simply needs to be replaced with lang items</p>",
        "id": 237667539,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1620311528
    },
    {
        "content": "<p>I don't really know what this has to do with macros though, tbh</p>",
        "id": 237667576,
        "sender_full_name": "simulacrum",
        "timestamp": 1620311541
    },
    {
        "content": "<p>oh, obviously i was inspired by the <code>addr_of</code> stablization to avoid deciding on stablizing <code>&amp;raw const</code> in the near future.</p>",
        "id": 237688659,
        "sender_full_name": "Charles Lew",
        "timestamp": 1620318539
    },
    {
        "content": "<p>I think as long as we're non-specific about the exact ABI of <code>rust-call</code>, we could probably find a path to stabilizing that exact mechanism without stabilizing variadic generics in general.</p>",
        "id": 237688873,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620318621
    },
    {
        "content": "<p>I believe <code>rust-call</code> currently supports an arbitrary amount of arguments before the final tuple argument. Do we want to stabilize this or only allow <code>extern \"rust-call\" fn (self: A, args: (B, C))</code>?</p>",
        "id": 237689987,
        "sender_full_name": "bjorn3",
        "timestamp": 1620319092
    },
    {
        "content": "<p>Looks like it only supports exactly zero or one argument before the final tuple argument.</p>",
        "id": 237690228,
        "sender_full_name": "bjorn3",
        "timestamp": 1620319206
    },
    {
        "content": "<p>And this works:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"rust-call\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>but this doesn't:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"rust-call\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"bp\">self</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>nor does this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"rust-call\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"bp\">self</span>: <span class=\"nc\">Rc</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 237690758,
        "sender_full_name": "bjorn3",
        "timestamp": 1620319417
    },
    {
        "content": "<p>What are the different unstable pieces, and how much are we concerned about them?</p>\n<p>Like are we sad if we can never use variadics in the trait because people are doing <code>impl Fn&lt;(i32,)&gt; for ...</code> for a unary method?</p>",
        "id": 237694488,
        "sender_full_name": "scottmcm",
        "timestamp": 1620320829
    }
]