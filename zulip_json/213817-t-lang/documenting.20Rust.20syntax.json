[
    {
        "content": "<p>I'd like to broach the topic of adding otherwise invalid syntax to the language to accommodate macros and DSLs. <br>\nThe AST-level syntax is becoming so far removed from what is semantically valid that it is becoming increasingly difficult to document and explain what is \"valid Rust syntax\". There is a large queue of such changes that were made last year that have not been documented, because they tend to significantly complicate the documentation. At a certain point, there is more text explaining the differences between the AST syntax and the accepted language, than there is in the grammar itself.</p>\n<p>I'm not sure why so many changes to the syntax of the language are made without an RFC, without community input, or even without team approval. To me, the syntax of the language is very important, and changes to it should be made with great care. I feel like various macro DSLs are being created to take advantage of rustc's parser instead of writing their own parser against raw token streams. The language then forever contains these extensions, even if the users that motivated them are no longer around.</p>\n<p>I realize my voice is unlikely to sway the language team from continuing this trend. I recognize that these changes makes certain macro DSLs much easier to write. I would appreciate if someone could at least help with developing a strategy of how to document \"valid Rust\". I'm reluctant to add two grammars to the reference, but it is getting to the point that I don't see an alternative. Unfortunately, I feel like this adds significantly to the complexity budget of the language, which I feel is already very complex.</p>",
        "id": 214522243,
        "sender_full_name": "Eric Huss",
        "timestamp": 1603673270
    },
    {
        "content": "<p>w.r.t <code>writing their own parser against raw token steams</code>:</p>",
        "id": 214522478,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603673606
    },
    {
        "content": "<p>Do you have some examples of such changes? (I don't doubt you at all, but I haven't been watching this closely)</p>",
        "id": 214522486,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603673621
    },
    {
        "content": "<p>This can only be done for bang macros, which take an arbitrary delimited tokenstream</p>",
        "id": 214522489,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603673633
    },
    {
        "content": "<p>For attribute macros, the target must be a syntactically valid rust attribute target, which can be parsed by the built-in parser</p>",
        "id": 214522533,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603673663
    },
    {
        "content": "<p>Unfortunately, the syntax of attributes doesn't allow for looser parsing</p>",
        "id": 214522550,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603673702
    },
    {
        "content": "<p>E.g. we need to be able to parse </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"cp\">#[attr]</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">inner_fn</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 214522612,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603673778
    },
    {
        "content": "<p>Yea, I recognize that it accommodates attribute macros better, and that bang macros in some cases would be uglier. I realize that there are good motivations for the changes. But added together they have consequences in terms of the total complexity.</p>",
        "id": 214522613,
        "sender_full_name": "Eric Huss",
        "timestamp": 1603673779
    },
    {
        "content": "<p>I am reluctant to point at any specific changes, because I don't want to single anyone out.</p>",
        "id": 214522618,
        "sender_full_name": "Eric Huss",
        "timestamp": 1603673800
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 214522634,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603673848
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 214522635,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603673850
    },
    {
        "content": "<p>I largely agree with you</p>",
        "id": 214522636,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603673853
    },
    {
        "content": "<p>Individually, I think each of the changes have been a good idea (e.g. allowing <code>unsafe</code> on modules)</p>",
        "id": 214522683,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603673885
    },
    {
        "content": "<p>But taken together, they create a 'psuedo-rust' that can be quite different from normal rust</p>",
        "id": 214522707,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603673944
    },
    {
        "content": "<p>(off topic: zulip sent my message three times earlier)</p>",
        "id": 214522713,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603673959
    },
    {
        "content": "<p>FWIW, I don't think this is something we should do without bound.</p>",
        "id": 214522898,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603674234
    },
    {
        "content": "<p>I think it's OK to do when there's a natural reason for it (e.g. attributes everywhere).</p>",
        "id": 214522948,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603674263
    },
    {
        "content": "<p>And thank you for bringing it up.</p>",
        "id": 214534088,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603689356
    },
    {
        "content": "<p>Can we color tokens (red?) in the grammar where they parse correctly but aren't semantically allowed? Or otherwise attach information to them showing they're not allowed semantically? Or are there changes that aren't simple tokens? It would be useful to have a list of these cases somewhere I think, although the reference wouldn't really fit. Perhaps the rustc-dev book as an appendix?</p>",
        "id": 214534345,
        "sender_full_name": "isHavvy",
        "timestamp": 1603689733
    },
    {
        "content": "<p>There were two categories of syntactic additions:</p>\n<ul>\n<li>Those from the \"item syntax unification\" effort - the logic there was always similar to \"if function items supports a curly-braced body in some parent context, then they should support it in all parent contexts\", this is how we got bodies for functions in foreign blocks, for example. (This is how we got <code>$item:item</code> working in all parent contexts as well.)</li>\n<li>Arbitrary additions \"for proc macros\" - \"this is syntactically valid, but never semantically valid\", this is how we got visibilities on enums, unsafe on modules, maybe something else. I'd personally reject proposals from this category, but it isn't my decision.</li>\n</ul>",
        "id": 214628682,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1603744095
    }
]