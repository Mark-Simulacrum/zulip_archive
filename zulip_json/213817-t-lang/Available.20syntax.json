[
    {
        "content": "<p>Related to the discussion of \"raw keywords\", it seems useful to note some areas where our lexing allows for compatible extension without an edition boundary.</p>",
        "id": 231665560,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616603596
    },
    {
        "content": "<p>A few that we've talked about:<br>\n<code>r#</code> followed by any token other than an identifier or <code>\"</code> or <code>#</code><br>\n<code>r##</code> (with two or more #) followed by any token other than <code>\"</code> or <code>#</code><br>\n<code>br#</code> (with one or more #) followed by any token other than <code>\"</code> or <code>#</code></p>",
        "id": 231666103,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616603779
    },
    {
        "content": "<p>I'm wondering, given existing attribute syntax, is <code>#</code> alone followed by anything other than <code>!</code> or <code>[</code> available?</p>",
        "id": 231666420,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616603894
    },
    {
        "content": "<p>no, <code>#</code> tokenizes alone -- here's a <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=40ed4402b617551d5f080add005126f1\">playground</a> to experiment with.</p>",
        "id": 231666798,
        "sender_full_name": "cuviper",
        "timestamp": 1616604049
    },
    {
        "content": "<p>Ah, thank you. Didn't realize that was valid.</p>",
        "id": 231666962,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616604111
    },
    {
        "content": "<p>And similarly, <code>#!foo</code> is not available.</p>",
        "id": 231667100,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616604162
    },
    {
        "content": "<p>notice that you can also define a macro with spaced tokens like <code>( r # $x:ident )</code>, and use it with <code>foo!( r # foo )</code>, but the use doesn't work with mashed tokens <code>r#foo</code></p>",
        "id": 231667285,
        "sender_full_name": "cuviper",
        "timestamp": 1616604228
    },
    {
        "content": "<p>Also, <code>r# foo</code> doesn't work in a macro, so it's available.</p>",
        "id": 231667592,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616604326
    },
    {
        "content": "<p>it seems <code>\\</code> is available, <code>error: unknown start of token: \\</code></p>",
        "id": 231668117,
        "sender_full_name": "cuviper",
        "timestamp": 1616604507
    },
    {
        "content": "<p>Anything involving the backquote character (<code> ` </code>) is available.</p>",
        "id": 231668119,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616604510
    },
    {
        "content": "<p>(I think it may make sense to capture the result of this thread in a lang team design note, for future reference.)</p>",
        "id": 231668208,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616604557
    },
    {
        "content": "<p>I guess you can check for anything that ends up as <code>rustc_lexer::TokenKind::Unknown</code></p>",
        "id": 231668453,
        "sender_full_name": "cuviper",
        "timestamp": 1616604644
    },
    {
        "content": "<p>which includes most Unicode, but I suppose we want to stick to ascii symbols</p>",
        "id": 231668500,
        "sender_full_name": "cuviper",
        "timestamp": 1616604665
    },
    {
        "content": "<p>control plane symbols!</p>",
        "id": 231668560,
        "sender_full_name": "nagisa",
        "timestamp": 1616604692
    },
    {
        "content": "<p>ok, <em>printable</em> ascii</p>",
        "id": 231668597,
        "sender_full_name": "cuviper",
        "timestamp": 1616604711
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> <a href=\"#narrow/stream/213817-t-lang/topic/Available.20syntax/near/231668597\">said</a>:</p>\n<blockquote>\n<p>ok, <em>printable</em> ascii</p>\n</blockquote>\n<p>ACK to that. ;)</p>",
        "id": 231668788,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616604777
    },
    {
        "content": "<p>I think that <code>$</code> followed by a non-identifier qualifies, though that'd be <em>extremely confusing</em> as an extension point for something other than macro syntax.</p>",
        "id": 231670122,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616605224
    },
    {
        "content": "<p>Interestingly, <code>~</code> still seems to lex as a token, even though I don't think it's used in any existing syntax: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=01da90badd238a610417b72a0c4fa3d6\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=01da90badd238a610417b72a0c4fa3d6</a></p>",
        "id": 231672769,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616606061
    },
    {
        "content": "<p>(It was removed from its meaning related to Box by <a href=\"https://github.com/rust-lang/rfcs/pull/59\">https://github.com/rust-lang/rfcs/pull/59</a> .)</p>",
        "id": 231673470,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616606340
    },
    {
        "content": "<p>another way to play with this is to use a broad <code>$($x:tt)*</code> in the play macro, then try different uses to see what tokenizes at all</p>",
        "id": 231674977,
        "sender_full_name": "cuviper",
        "timestamp": 1616606894
    },
    {
        "content": "<p>I would definitely like to reserve all </p>\n<blockquote>\n<p>\\w+ <em>string</em></p>\n</blockquote>\n<p>for future use.  Or in general, most places where <code>a\"asdf\"</code> and <code>b\"asdf\"</code> tokenize differently when there's no whitespace.</p>",
        "id": 232461264,
        "sender_full_name": "scottmcm",
        "timestamp": 1617123873
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> agreed, you opened the <code>k#foo</code> RFC, should we try to make a quick one for reserving the more general syntactic space?</p>",
        "id": 232466540,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617125971
    },
    {
        "content": "<p>I'd be in favour.  I can probably write one of those on the weekend, dunno if that's soon enough.</p>",
        "id": 232468328,
        "sender_full_name": "scottmcm",
        "timestamp": 1617126719
    },
    {
        "content": "<p>I'd be willing to write the RFC for reserving both <code>[a-z]+#</code> and <code>[a-z]+\"</code>, and I can probably have it done by today. I don't know enough about how macros eat tokens to make the reference-level explanation very detailed, but other than that it shouldn't take me long I think</p>",
        "id": 232469148,
        "sender_full_name": "bstrie",
        "timestamp": 1617127020
    },
    {
        "content": "<p>I'm curious if we should reserve <code>[a-z][\"#]</code> or <code>[a-z]+[\"#]</code>. The latter is a <em>much</em> bigger syntax space.</p>",
        "id": 232470166,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617127365
    },
    {
        "content": "<p>I'm definitely in favor of the former, and I might be in favor of the latter but I'm unsure.</p>",
        "id": 232470194,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617127382
    },
    {
        "content": "<p>I think it's the latter because of <code>br\"hello\"</code></p>",
        "id": 232470436,
        "sender_full_name": "scottmcm",
        "timestamp": 1617127461
    },
    {
        "content": "<p>right, we can combine them arbitrarily</p>",
        "id": 232470458,
        "sender_full_name": "bstrie",
        "timestamp": 1617127468
    },
    {
        "content": "<p>Ah! OK, convinced now.</p>",
        "id": 232470492,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617127485
    },
    {
        "content": "<p>I don't yet have an idea of the exact semantics of what <code>bf\"{foo}\"</code> might be, but it would be good to leave the option open</p>",
        "id": 232470508,
        "sender_full_name": "bstrie",
        "timestamp": 1617127493
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256342\">@bstrie</span> If that exists at all, it'd be \"format this into a bytestring\".</p>",
        "id": 232470565,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617127514
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256342\">@bstrie</span> Feel free to copy from <a href=\"https://github.com/rust-lang/rfcs/pull/3098\">https://github.com/rust-lang/rfcs/pull/3098</a>, if there's anything useful to you.</p>",
        "id": 232470729,
        "sender_full_name": "scottmcm",
        "timestamp": 1617127564
    },
    {
        "content": "<p>I intend to heavily :)</p>",
        "id": 232470779,
        "sender_full_name": "bstrie",
        "timestamp": 1617127584
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256342\">bstrie</span> <a href=\"#narrow/stream/213817-t-lang/topic/Available.20syntax/near/232469148\">said</a>:</p>\n<blockquote>\n<p>I'd be willing to write the RFC for reserving both <code>[a-z]+#</code> and <code>[a-z]+\"</code>, and I can probably have it done by today. I don't know enough about how macros eat tokens to make the reference-level explanation very detailed, but other than that it shouldn't take me long I think</p>\n</blockquote>\n<p>I wuld be happy if you did that <span class=\"user-mention\" data-user-id=\"256342\">@bstrie</span></p>",
        "id": 232470949,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617127667
    },
    {
        "content": "<p>I think we have pretty general consensus in favor of this</p>",
        "id": 232470964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617127676
    },
    {
        "content": "<p>you can pilfer a bit from <a href=\"https://github.com/rust-lang/rfcs/pull/3098\">https://github.com/rust-lang/rfcs/pull/3098</a> in terms of \"edition compatibility\"</p>",
        "id": 232471025,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617127687
    },
    {
        "content": "<p>but I also tend to think that's more of an implementation concern</p>",
        "id": 232471036,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617127692
    },
    {
        "content": "<p>(at least in this case)</p>",
        "id": 232471062,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617127699
    },
    {
        "content": "<p>Or something like <code>sr#\"a\"b\"#</code> that gives a <code>String</code> would be another possible future that needs two <code>\\w</code>s</p>",
        "id": 232471108,
        "sender_full_name": "scottmcm",
        "timestamp": 1617127719
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> Nit: regular expression syntaxes vary enough that it isn't always clear what something like <code>\\w</code> refers to. (Among other things, some regex syntaxes define it to include non-ASCII and some don't.)</p>",
        "id": 232471291,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617127800
    },
    {
        "content": "<p>I think the point was that this is a raw string</p>",
        "id": 232471382,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617127822
    },
    {
        "content": "<p>Any news on the reservation RFC, <span class=\"user-mention\" data-user-id=\"256342\">@bstrie</span>?  I'd be happy to make that one the edition-critical one, to allow more discussion time on 3098.</p>",
        "id": 232685482,
        "sender_full_name": "scottmcm",
        "timestamp": 1617236199
    },
    {
        "content": "<p>I've got my draft, finishing it up now</p>",
        "id": 232689600,
        "sender_full_name": "bstrie",
        "timestamp": 1617239427
    },
    {
        "content": "<p>@scottmcm and anyone else, I've got the RFC draft for reserving this syntax up here: <a href=\"https://gist.github.com/bstrie/ba6713e14406072cea5bdba342bc4b87\">https://gist.github.com/bstrie/ba6713e14406072cea5bdba342bc4b87</a> take a look and let me know what you think. if there are no pre-comments I'll formally submit it in the morning</p>",
        "id": 232702107,
        "sender_full_name": "bstrie",
        "timestamp": 1617251077
    },
    {
        "content": "<p>I like the reference to <code>__</code> lexical space in C++</p>",
        "id": 232702549,
        "sender_full_name": "scottmcm",
        "timestamp": 1617251508
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256342\">@bstrie</span> The non-ascii idents tracking issue is undergoing stabilization FCP right now, so you're definition of \"identifier\" is going to be out-dated mid-RFC.  <a href=\"https://github.com/rust-lang/rust/issues/55467#issuecomment-810433429\">https://github.com/rust-lang/rust/issues/55467#issuecomment-810433429</a></p>",
        "id": 232702648,
        "sender_full_name": "isHavvy",
        "timestamp": 1617251595
    },
    {
        "content": "<p>Hmm, <code>4#foo</code> is interesting.</p>",
        "id": 232702768,
        "sender_full_name": "scottmcm",
        "timestamp": 1617251709
    },
    {
        "content": "<p>Reminds me of things like <code>17#11 == 10#18</code>, which I first saw in <a href=\"https://sites.google.com/site/steveyegge2/numbers-minilanguage\">https://sites.google.com/site/steveyegge2/numbers-minilanguage</a></p>",
        "id": 232702907,
        "sender_full_name": "scottmcm",
        "timestamp": 1617251816
    },
    {
        "content": "<p>or <code>hex#1D2.E</code> for hex float literals...</p>",
        "id": 232703105,
        "sender_full_name": "scottmcm",
        "timestamp": 1617252004
    },
    {
        "content": "<p>I did mention the non-ascii thing in the unresolved questions; I'm pleasantly surprised to learn that non-ascii idents is no longer in feature limbo. it doesn't actually fundamentally change anything about the RFC if it includes Unicode idents or not</p>",
        "id": 232704236,
        "sender_full_name": "bstrie",
        "timestamp": 1617253027
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> , I was trying not to go wild with scope by extending this to numeric literals as well, but if you think there's a good use for it then I wouldn't mind expanding it to numeric literals. at the very least I'll include it in the alternatives</p>",
        "id": 232704371,
        "sender_full_name": "bstrie",
        "timestamp": 1617253136
    },
    {
        "content": "<p>Yeah, there's probably not an easy predefined lexical production to use for it, since <code>INTEGER_LITERAL</code> doesn't seem quite right.  Just sticking to <code>IDENTIFIER_OR_KEYWORD</code> is probably best.</p>",
        "id": 232704583,
        "sender_full_name": "scottmcm",
        "timestamp": 1617253306
    },
    {
        "content": "<p>So <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> to leaving <code>4#foo</code> and <code>foo#4</code> and <code>4#4</code> and <code>4_foo</code> to some future RFC to worry about when there's better motivation and scoping.</p>",
        "id": 232704898,
        "sender_full_name": "scottmcm",
        "timestamp": 1617253522
    },
    {
        "content": "<p>(I was thinking that <em>maybe</em> someone might want <code>0\"foo\"</code> for null terminated strings, but that was the only thing I could think of)</p>",
        "id": 232705104,
        "sender_full_name": "bstrie",
        "timestamp": 1617253686
    },
    {
        "content": "<p>I think we could get away fine with <code>c\"foo\"</code> or <code>z\"foo\"</code> or similar for that.</p>",
        "id": 232705814,
        "sender_full_name": "scottmcm",
        "timestamp": 1617254378
    },
    {
        "content": "<p>The identifier space sounds good to me too.</p>",
        "id": 232706174,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617254752
    },
    {
        "content": "<p>Honestly, we don't need single letters. Null-terminated strings could be <code>nul\"xyz\"</code> if we want.</p>",
        "id": 232706230,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617254791
    },
    {
        "content": "<p>Or <code>cstr\"xyz\"</code>.</p>",
        "id": 232706256,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617254828
    },
    {
        "content": "<p>I think it would depend on how things combine, like supporting <code>zbr#\"a\"b\"#</code>.  But we don't need to design this, since it's just a hypothetical anyway <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 232706375,
        "sender_full_name": "scottmcm",
        "timestamp": 1617254965
    },
    {
        "content": "<p>right, reserve the space now, leave the bikeshedding for the future :)</p>",
        "id": 232706607,
        "sender_full_name": "bstrie",
        "timestamp": 1617255138
    },
    {
        "content": "<p>RFC filed: <a href=\"https://github.com/rust-lang/rfcs/pull/3101\">https://github.com/rust-lang/rfcs/pull/3101</a> <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span></p>",
        "id": 232828117,
        "sender_full_name": "bstrie",
        "timestamp": 1617312727
    },
    {
        "content": "<p>Might be worth posting to the <a class=\"stream\" data-stream-id=\"268952\" href=\"/#narrow/stream/268952-edition-2021\">#edition 2021</a> stream too, since I expect they'll want to track it.</p>",
        "id": 232829255,
        "sender_full_name": "scottmcm",
        "timestamp": 1617313349
    }
]