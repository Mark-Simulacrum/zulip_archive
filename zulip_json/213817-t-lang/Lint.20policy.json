[
    {
        "content": "<p>I'd like to continue discussion of the lint policy here, continuing from the <a class=\"stream\" data-stream-id=\"268952\" href=\"/#narrow/stream/268952-edition-2021\">#edition 2021</a> topic <a href=\"#narrow/stream/268952-edition-2021/topic/lint.20promotions\">here</a>. We're getting close to solidifying the plans for Rust 2021, and I think it's worth discussing the lint policy here divorced from Rust 2021 particulars. <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> has created <a href=\"https://hackmd.io/i1Ob4XS6TwuUv-rOVEoM4A\">a document</a> outlining a proposed policy on linting and how this relates to semver and editions. The policy is reaching a point where we can potentially discuss it formally in a lang team meeting, but there are still some open questions we should get through.</p>",
        "id": 228753991,
        "sender_full_name": "rylev",
        "timestamp": 1614856613
    },
    {
        "content": "<p>One interesting one was brought up <a href=\"https://github.com/rust-lang/rust/issues/80165#issuecomment-789749153\">here</a>. While in an ideal world, future incompatibility warnings for bugs can be made into hard errors across all editions without technically breaking backwards compatibility promises, there are some bugs that would break so much of the eco system that we may not wish to actually go through with such a policy. It might then make more sense for the lint to be turned into an error on an edition boundary so that future code does not accidentally continue to write such \"buggy code\" and so that code bases can opt into the breakage more smoothly.</p>",
        "id": 228754428,
        "sender_full_name": "rylev",
        "timestamp": 1614856806
    },
    {
        "content": "<p>On a somewhat related note, I think we've often talked about future compatibility warnings as bug fixes, but I don't think everyone thinks of them strictly as such. For instance, <a href=\"https://github.com/rust-lang/rust/issues/82730\">https://github.com/rust-lang/rust/issues/82730</a> wants to move what is now a warning to a hard error in a future edition, and proposes to use a future compatibility warning to transition users. We should make sure that policies around transitioning warnings to errors in non-bug-fix cases, touches on the use of future compatibility warnings.</p>",
        "id": 228754692,
        "sender_full_name": "rylev",
        "timestamp": 1614856935
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224872\">rylev</span> <a href=\"#narrow/stream/213817-t-lang/topic/Lint.20policy/near/228754428\">said</a>:</p>\n<blockquote>\n<p>One interesting one was brought up <a href=\"https://github.com/rust-lang/rust/issues/80165#issuecomment-789749153\">here</a>. While in an ideal world, future incompatibility warnings for bugs can be made into hard errors across all editions without technically breaking backwards compatibility promises, there are some bugs that would break so much of the eco system that we may not wish to actually go through with such a policy. It might then make more sense for the lint to be turned into an error on an edition boundary so that future code does not accidentally continue to write such \"buggy code\" and so that code bases can opt into the breakage more smoothly.</p>\n</blockquote>\n<p>I personally think it should be <em>incredibly rare</em> that we end up breaking something in an older edition, or forcing a transition in an older edition. The only case where I'd really want to do that is a serious soundness issue.</p>",
        "id": 228825372,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614882571
    },
    {
        "content": "<p>I certainly wouldn't want to do it for something like <code>dyn Trait</code> (even though there's parsing value in removing it), or anything else where the old way is still <em>functional</em> and <em>correct</em>.</p>",
        "id": 228825578,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614882648
    }
]