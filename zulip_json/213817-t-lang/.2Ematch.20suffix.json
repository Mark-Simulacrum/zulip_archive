[
    {
        "content": "<p>I just experienced where one wants <code>.match</code> : when given an existing method chain like <code>x.foo()?.bar()?</code>, and you want to convert the <code>?</code> into some kind of more error handling that cannot be put into a closure (e.g. error processing that involves <code>continue</code> of a surrounding loop). The current “best” practice AFAICT is to first rewrite into something that let-binds the intermediate expressions, so that you can <code>match</code> on the names introduced by the lets.</p>",
        "id": 255229912,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632840830
    },
    {
        "content": "<p>We talked about suffix <code>.match</code> back when we were debating about the introduction of <code>.await</code>, but this is my first experience I can remember of thinking “suffix .match <em>is</em> the right thing here.\"</p>",
        "id": 255230081,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632840891
    },
    {
        "content": "<p>Is there any existing thread with serious discussion of whether to add <code>expr.match { … }</code> ?</p>",
        "id": 255231600,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632841397
    },
    {
        "content": "<p>Not that I'm aware of, but I'd love to see this.</p>",
        "id": 255232160,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1632841564
    },
    {
        "content": "<p>(I just also realized that another “solution” to my problem, though much much harder to implement, would be a way to <code>continue</code>/<code>break</code> out of closures.)</p>",
        "id": 255233040,
        "sender_full_name": "pnkfelix",
        "timestamp": 1632841859
    },
    {
        "content": "<p>I'd like to have that as well, and especially the ability to <code>?</code> in a closure to the containing context. I'm not sure what the best way to accomplish that is, and it needs some very careful syntax handling, but I'm interested in some solution for that problem too.</p>",
        "id": 255233481,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1632842013
    },
    {
        "content": "<p>yess, postfix <em>all the things</em>!</p>",
        "id": 255249176,
        "sender_full_name": "Mara",
        "timestamp": 1632847617
    },
    {
        "content": "<p>postfix inline const XD</p>",
        "id": 255249256,
        "sender_full_name": "oli",
        "timestamp": 1632847654
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/213817-t-lang/topic/.2Ematch.20suffix/near/255249256\">said</a>:</p>\n<blockquote>\n<p>postfix inline const XD</p>\n</blockquote>\n<p>nononono not that one</p>",
        "id": 255249378,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1632847689
    },
    {
        "content": "<p><span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 255249450,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1632847717
    },
    {
        "content": "<p>I'd be in favor of suffix <code>.match</code>, I believe</p>",
        "id": 255268855,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632852058
    },
    {
        "content": "<p><code>try { foo }.match { ... }</code>-- super duper :)</p>",
        "id": 255268876,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632852067
    },
    {
        "content": "<p>C# has postfix-<code>switch</code> now (<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/switch-expression\">https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/switch-expression</a>) which might help assuage some of the \"this is too weird\" feedback.</p>",
        "id": 257411628,
        "sender_full_name": "scottmcm",
        "timestamp": 1634148647
    },
    {
        "content": "<p>Oooh.</p>",
        "id": 257549736,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634223592
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> That's good precedent!</p>",
        "id": 257549800,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634223603
    },
    {
        "content": "<p>so they appear to have the statement <code>switch (value) { case X: ... break; default: ...}</code> that's C-ish, and now the expression <code>value switch { X =&gt; val, ... }</code> that's Rust-ish</p>",
        "id": 257563084,
        "sender_full_name": "cuviper",
        "timestamp": 1634228505
    },
    {
        "content": "<p>(whereas our <code>match value</code> is already an expression)</p>",
        "id": 257563168,
        "sender_full_name": "cuviper",
        "timestamp": 1634228523
    },
    {
        "content": "<p>so my \"this is too weird\" feedback is that they have two <em>very</em> different kinds of <code>switch</code></p>",
        "id": 257563357,
        "sender_full_name": "cuviper",
        "timestamp": 1634228602
    },
    {
        "content": "<p>I do like the idea of <code>.match</code>, but I'm not sure C# is a great model because of that</p>",
        "id": 257563552,
        "sender_full_name": "cuviper",
        "timestamp": 1634228675
    },
    {
        "content": "<p>Yeah, all the new <code>=&gt;</code> versions of everything is adding a ton of new syntax to C#.</p>",
        "id": 257594682,
        "sender_full_name": "scottmcm",
        "timestamp": 1634241105
    },
    {
        "content": "<p>Java did the same, but it's introduced the same was as the old switch.</p>",
        "id": 257607783,
        "sender_full_name": "Connor Horman",
        "timestamp": 1634246325
    },
    {
        "content": "<p>(It also separated the \"switch expression\" feature from the new syntax, though added both at the same time)</p>",
        "id": 257607926,
        "sender_full_name": "Connor Horman",
        "timestamp": 1634246366
    },
    {
        "content": "<p>I would agree that it was kinda weird, but, at least from that perspective, it is as weird as match in rust is.</p>",
        "id": 257608218,
        "sender_full_name": "Connor Horman",
        "timestamp": 1634246473
    },
    {
        "content": "<p>Let's do <code>.match</code>!</p>",
        "id": 257619149,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634252234
    },
    {
        "content": "<p>I feel like we've crossed the rubicon of weirdness with <code>.await</code> and we have plenty of evidence that \"it's not that weird\"</p>",
        "id": 257619189,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634252258
    },
    {
        "content": "<p>We could prototype postfix match with postfix macros as well, couldn't we?</p>",
        "id": 257620597,
        "sender_full_name": "Gary Guo",
        "timestamp": 1634253023
    },
    {
        "content": "<p>I <em>think</em> postfix <code>.match</code> is just a parsing change, still creating an <code>ExprKind::Match</code>, then the rest of the compiler doesn't need to care how it was written</p>",
        "id": 257622158,
        "sender_full_name": "cuviper",
        "timestamp": 1634253972
    },
    {
        "content": "<p>something like this (untested)<br>\n<a href=\"https://gist.github.com/cuviper/a02ecfb0ef068adbb4ae9d7da871f010\">https://gist.github.com/cuviper/a02ecfb0ef068adbb4ae9d7da871f010</a></p>",
        "id": 257622338,
        "sender_full_name": "cuviper",
        "timestamp": 1634254101
    },
    {
        "content": "<p>hey, it actually works!</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">).</span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Hello, world {}!\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">panic!</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 257622865,
        "sender_full_name": "cuviper",
        "timestamp": 1634254406
    },
    {
        "content": "<p>If we were to add this, we need to decide on some guidelines for which one to use. Otherwise there would be lots of cases where it would just be a choice, leading to increasingly divergent code styles.</p>",
        "id": 257649708,
        "sender_full_name": "Kestrer",
        "timestamp": 1634277270
    },
    {
        "content": "<p>Is it suggested that this would replace prefix match entirely? Or somehow supplement it</p>",
        "id": 257649759,
        "sender_full_name": "Kestrer",
        "timestamp": 1634277328
    },
    {
        "content": "<p>supplement please. i'd hate if <code>(&amp;self.0).match {}</code> is preferred over <code>match &amp;self.0 {}</code> <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 257666864,
        "sender_full_name": "kennytm",
        "timestamp": 1634288524
    },
    {
        "content": "<p>if we had postfix borrow you could write it as <code>self.0&amp;.match {}</code> which would be neat :P</p>",
        "id": 257667029,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1634288625
    },
    {
        "content": "<p>it is neat until it appears before a binary operator like <code>x&amp; - y</code> which is ambiguous 🥲<br>\n(same for postfix-star <code>x* - y</code>)</p>\n<p>i guess <code>x.*.*.&amp;</code> (<code>&amp;**x</code>) works though.</p>",
        "id": 257668623,
        "sender_full_name": "kennytm",
        "timestamp": 1634289464
    },
    {
        "content": "<p>I definitely wouldn't want it to be a complete replacement; I'm envisioning using it anytime you have a chain of operations, with match at the end.</p>",
        "id": 257672245,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634291445
    },
    {
        "content": "<p>Effectively, consider it a peephole optimization for let x = a.b().c()...; match x { ...</p>",
        "id": 257672305,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634291486
    },
    {
        "content": "<p>Or, perhaps slightly more controversially, an optimization for <code>match exceedingly.long.multiline.expression</code>.</p>",
        "id": 257690884,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634301627
    },
    {
        "content": "<p>I'd be happy to see any case of <code>match multiline.expression {</code> converted to <code>multiline.expression.match {</code>, because it'll break more nicely across lines.</p>",
        "id": 257690927,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634301656
    },
    {
        "content": "<p>It will add another layer of indentation though, which might be worse if the match is big (especially since <code>match</code> already has one too many levels of indentation, compared to <code>if let</code>)</p>",
        "id": 257692197,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634302259
    },
    {
        "content": "<p>Well that's why 2-space indentation is the best possible style</p>",
        "id": 257749105,
        "sender_full_name": "Lokathor",
        "timestamp": 1634325046
    },
    {
        "content": "<p>2-space indentation for matches, 4-space for everything else</p>",
        "id": 257760926,
        "sender_full_name": "Kestrer",
        "timestamp": 1634329979
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"360486\">Kestrer</span> <a href=\"#narrow/stream/213817-t-lang/topic/.2Ematch.20suffix/near/257649759\">said</a>:</p>\n<blockquote>\n<p>Is it suggested that this would replace prefix match entirely? Or somehow supplement it</p>\n</blockquote>\n<p>Definitely supplement, not replace.  I'd treat it like <code>for ... in</code> vs <code>.for_each(...)</code> for iterators -- the bigger the body the more I use the former, the bigger the iterator expression the more I use the latter.</p>",
        "id": 257793929,
        "sender_full_name": "scottmcm",
        "timestamp": 1634352211
    },
    {
        "content": "<p>Hmm, <code>rustfmt</code> has some \"simple\" heuristics already, right?  Though I suppose that only matters if we decide that <code>rustfmt</code> should pick instead of preserve -- I could see arguments either way.</p>",
        "id": 257794399,
        "sender_full_name": "scottmcm",
        "timestamp": 1634352684
    },
    {
        "content": "<p>I don't think I would want rustfmt to switch between the two.</p>",
        "id": 257805070,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634363703
    },
    {
        "content": "<p>I would just want it to format the one the user used.</p>",
        "id": 257805084,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634363725
    },
    {
        "content": "<p>yeah it absolutely shouldn't change the code</p>",
        "id": 257806610,
        "sender_full_name": "Lokathor",
        "timestamp": 1634365270
    },
    {
        "content": "<p>so my little parser diff is the easy part -- what actually needs to happen to make this a thing? MCP?</p>",
        "id": 258233893,
        "sender_full_name": "cuviper",
        "timestamp": 1634663139
    },
    {
        "content": "<p>Yes, this seems like an initiative to me</p>",
        "id": 258234027,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634663178
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 258251952,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634669494
    },
    {
        "content": "<p>A fairly small initiative, given that the implementation already exists...</p>",
        "id": 258251990,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634669508
    },
    {
        "content": "<p>The tests may end up being larger than the implementation.</p>",
        "id": 258252012,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634669517
    },
    {
        "content": "<p>I guess it will need some unstable boilerplate too</p>",
        "id": 258263997,
        "sender_full_name": "cuviper",
        "timestamp": 1634674337
    },
    {
        "content": "<p>True; it needs a feature flag.</p>",
        "id": 258267557,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634675820
    },
    {
        "content": "<p><code>#![feature(postfix_match)]</code> ?</p>",
        "id": 258267637,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634675852
    },
    {
        "content": "<p>Sure</p>",
        "id": 258267657,
        "sender_full_name": "cuviper",
        "timestamp": 1634675863
    },
    {
        "content": "<p>(IIRC unstable syntax also needs to collect and use \"gated spans\" to prevent accidental stabilization)</p>",
        "id": 258268900,
        "sender_full_name": "lqd",
        "timestamp": 1634676303
    },
    {
        "content": "<p>(Yeah, I don't know how it's implemented, but something to keep it from being parsed under <code>#[cfg(false)]</code>.)</p>",
        "id": 258315230,
        "sender_full_name": "scottmcm",
        "timestamp": 1634708405
    },
    {
        "content": "<p>it may have changed since then but here’s an example collecting gated spans from parsing const generic defaults <a href=\"https://github.com/rust-lang/rust/pull/80547/commits/942b7ce2c14b1c4fde5b9f27aa5bef39e0b990d5\">https://github.com/rust-lang/rust/pull/80547/commits/942b7ce2c14b1c4fde5b9f27aa5bef39e0b990d5</a></p>",
        "id": 258320076,
        "sender_full_name": "lqd",
        "timestamp": 1634712541
    },
    {
        "content": "<p>thanks for the example -- seems like it just needs to be gated in the parser and not a later AST pass</p>",
        "id": 258404994,
        "sender_full_name": "cuviper",
        "timestamp": 1634749550
    },
    {
        "content": "<p>Right, because in a later AST pass it should be indistinguishable.</p>",
        "id": 258405100,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634749587
    },
    {
        "content": "<p>well, yeah, in this case I'm giving it the same kind. other new syntax might have more possible gating points.</p>",
        "id": 258406276,
        "sender_full_name": "cuviper",
        "timestamp": 1634750030
    },
    {
        "content": "<blockquote>\n<p>in a later AST pass it should be indistinguishable</p>\n</blockquote>\n<p>Presumably you'd have to save which syntax was used so that you can e.g. pretty print correctly later on</p>",
        "id": 258407131,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1634750328
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/.2Ematch.20suffix/near/258251990\">said</a>:</p>\n<blockquote>\n<p>A fairly small initiative, given that the implementation already exists...</p>\n</blockquote>\n<p>well, there's an RFC to be written :)</p>",
        "id": 258441092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634762675
    },
    {
        "content": "<p>and some kind of guidelines to be given about when this makes sense</p>",
        "id": 258441142,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634762694
    },
    {
        "content": "<p>(I think we mostly hit upon them in this zulip discussion though)</p>",
        "id": 258441169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634762705
    }
]