[
    {
        "content": "<p>Is there any specific reason why _ isn't allowed in array types to infer the length?</p>",
        "id": 197222407,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1589243103
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">];</span><span class=\"w\"> </span><span class=\"c1\">// works</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"p\">[</span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">];</span><span class=\"w\"> </span><span class=\"c1\">// extremely surprised but this doesn&#39;t work</span>\n</code></pre></div>",
        "id": 197222429,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1589243140
    },
    {
        "content": "<p>today's compiler treats it as a separate inference context, iirc, but I believe lang recently discussed this as part of the _ for array-typed consts rfc and decided that at least for lets it's a 'definitely should work' -- but I may be misrepresenting, and definitely it wasn't full attendance from lang in that meeting</p>",
        "id": 197222594,
        "sender_full_name": "simulacrum",
        "timestamp": 1589243284
    },
    {
        "content": "<p>okay, so presumably this doesn't need an RFC and some sort of pushing for it to eventually be added to the lang, given that other people are already talking about it</p>",
        "id": 197222667,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1589243376
    },
    {
        "content": "<p>It does need some sort of push.</p>",
        "id": 197222740,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589243414
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rfcs/pull/2545\">https://github.com/rust-lang/rfcs/pull/2545</a></p>",
        "id": 197222749,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589243427
    },
    {
        "content": "<p>I think for lets though we felt that we could likely land with a PR?</p>",
        "id": 197222764,
        "sender_full_name": "simulacrum",
        "timestamp": 1589243436
    },
    {
        "content": "<p>Maybe I'm misremembering :) </p>\n<p>That's definitely <em>my</em> opinion -- I think const items are the harder question</p>",
        "id": 197222784,
        "sender_full_name": "simulacrum",
        "timestamp": 1589243458
    },
    {
        "content": "<p>ooh cool but the rfc is already done</p>",
        "id": 197222803,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1589243472
    },
    {
        "content": "<p>Oh, <code>let</code>.</p>",
        "id": 197222807,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589243475
    },
    {
        "content": "<p>Yeah, it's more obvious for <code>let</code>, since you can already infer the entire type.</p>",
        "id": 197222817,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589243486
    },
    {
        "content": "<p>I'm more eager to have it for <code>const</code>, where you <em>have</em> to specify the type.</p>",
        "id": 197222820,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589243495
    },
    {
        "content": "<p>Yes -- I think consts are not a \"no duh\" case due to potential interaction with \"global inference\" and it being perhaps somewhat tough to specify exactly to what extent we avoid that (though maybe not, not sure -- seems like it could be hard but may not be). But <code>let</code> seems to be, IMO there's it's more so \"just a bug\" in some sense</p>",
        "id": 197222923,
        "sender_full_name": "simulacrum",
        "timestamp": 1589243585
    },
    {
        "content": "<p>Also see <a href=\"https://github.com/rust-lang/rust/issues/70754\">https://github.com/rust-lang/rust/issues/70754</a> for the more general case with const generics.</p>",
        "id": 197242669,
        "sender_full_name": "lcnr",
        "timestamp": 1589269870
    },
    {
        "content": "<p>Last this came up in a meeting I think we said that for <code>let</code>s in particular, this (or something very similar) is expected to happen as part of the const generics work, but that we wouldn't push for specific situations of it before then.</p>\n<p>But thanks for the reminder, I forgot to do a follow-up from a previous design meeting about <code>const</code>s...</p>",
        "id": 197456534,
        "sender_full_name": "scottmcm",
        "timestamp": 1589394818
    }
]