[
    {
        "content": "<p>Hey hey,</p>\n<p>I finally found the time to write up a response to <a href=\"https://github.com/rust-lang/rust/issues/67984#issuecomment-661308680\">https://github.com/rust-lang/rust/issues/67984#issuecomment-661308680</a>:</p>\n<p><a href=\"https://hackmd.io/@kQlAmwdASwqEXB8JsIkvyw/H1V0MKFvw\">https://hackmd.io/@kQlAmwdASwqEXB8JsIkvyw/H1V0MKFvw</a></p>\n<p>This isn't an RFC yet, because it doesn't propose a clear solution, but only discusses a few possible ways forward.</p>\n<p>Might be good to discuss this in a lang (or libs?) meeting.</p>",
        "id": 213701297,
        "sender_full_name": "Mara",
        "timestamp": 1603018751
    },
    {
        "content": "<p>Thanks for the detailed writeup! This is great.</p>\n<blockquote>\n<p>The deprecation warning requires a builtin macro to check whether a deprecation warning should be issued.</p>\n</blockquote>\n<p>Can't we just a custom lint for this? We have plenty of lints warning about things for otherwise normal functions, so it is not clear to me why we cannot do the same for an otherwise normal macro.</p>",
        "id": 213703604,
        "sender_full_name": "RalfJ",
        "timestamp": 1603022791
    },
    {
        "content": "<blockquote>\n<p>After some months, we make the hard switch to the incompatible behaviour, hoping that everyone acted upon the deprecation warnings and moved away from relying on the behaviour we’re now breaking.</p>\n</blockquote>\n<p>FWIW, I doubt this will be possible. Too much old code will never be ported, and people understandably be very annoyed when they cannot build their old code any more. I think the \"wrong\" uses of the macro are far more wide-spread than other breaking things we did in the past -- but it'd take a crater run to know for sure.</p>",
        "id": 213703665,
        "sender_full_name": "RalfJ",
        "timestamp": 1603022906
    },
    {
        "content": "<blockquote>\n<p>Only one case of core::panic!(non_static_str): In Miri’s unit tests. </p>\n</blockquote>\n<p><span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span><br>\nyes I tried hard to cover all the cases after too many times that one case had a weird special case that Miri did not handle...</p>",
        "id": 213703680,
        "sender_full_name": "RalfJ",
        "timestamp": 1603022972
    },
    {
        "content": "<blockquote>\n<p>Can't we just a custom lint for this?</p>\n</blockquote>\n<p>Ah, good point. I was thinking of <code>#[deprecated]</code>. Yeah, a lint should be fine. I will update the document.</p>",
        "id": 213703796,
        "sender_full_name": "Mara",
        "timestamp": 1603023215
    },
    {
        "content": "<blockquote>\n<p>FWIW, I doubt this will be possible. Too much old code will never be ported</p>\n</blockquote>\n<p>Yeah, so I think option 3 is the best.</p>",
        "id": 213703847,
        "sender_full_name": "Mara",
        "timestamp": 1603023292
    },
    {
        "content": "<p>One thing I need to add is that while <a href=\"http://grep.app\">grep.app</a> is nice and great,<br>\nit doesn't scan all github repositories, it \"searches across a half million git repos\".<br>\nSo it couldn't prove that some bad patterns are rare or non-existing.<br>\nThe better options for that are:</p>\n<ul>\n<li>github advanced searching</li>\n<li>Crater run, which is expensive</li>\n</ul>",
        "id": 213707568,
        "sender_full_name": "lzutao",
        "timestamp": 1603029365
    },
    {
        "content": "<p>Sure, and there's lots of closed source code. I bet most uses of core::panic is in closed source embedded code. I'm just trying to get a bit of an idea of how widespread certain uses are.</p>",
        "id": 213707645,
        "sender_full_name": "Mara",
        "timestamp": 1603029509
    },
    {
        "content": "<p>and github's search functionality is really limited :(</p>",
        "id": 213707660,
        "sender_full_name": "Mara",
        "timestamp": 1603029565
    },
    {
        "content": "<blockquote>\n<p>Can't we just a custom lint for this?</p>\n</blockquote>\n<p>I have an implementation of this lint now. It suggests to insert <code>\"{}\", </code> for <code>panic!(\"something with a { or }\")</code>. (Doesn't do anything for <code>panic!(non-str-literal)</code> yet.)</p>",
        "id": 213719642,
        "sender_full_name": "Mara",
        "timestamp": 1603047033
    },
    {
        "content": "<p>Fun fact: <code>assert!(false, true);</code> compiles fine and runs <code>panic!(true);</code></p>",
        "id": 213719754,
        "sender_full_name": "Mara",
        "timestamp": 1603047206
    },
    {
        "content": "<p>hmm. <code>assert!({false})</code> produces a <code>panic!(\"assertion failed: {false}\")</code> which triggers my lint now. <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 213720114,
        "sender_full_name": "Mara",
        "timestamp": 1603047659
    },
    {
        "content": "<p>could you change assert to use <code>panic!(\"... {}\", stringify!($expr))</code>?</p>",
        "id": 213720232,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603047797
    },
    {
        "content": "<p>that would break const_panic for assert!() :(</p>",
        "id": 213720238,
        "sender_full_name": "Mara",
        "timestamp": 1603047813
    },
    {
        "content": "<p>assert!(expr) now calls $crate::panicking::panic() directly (the function, not the macro). that fixed it.</p>",
        "id": 213723342,
        "sender_full_name": "Mara",
        "timestamp": 1603051921
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/I4j9Qd3DQ4D-GcqSce989gP8/screenshot.png\">screenshot.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/I4j9Qd3DQ4D-GcqSce989gP8/screenshot.png\" title=\"screenshot.png\"><img src=\"/user_uploads/4715/I4j9Qd3DQ4D-GcqSce989gP8/screenshot.png\"></a></div>",
        "id": 213723392,
        "sender_full_name": "Mara",
        "timestamp": 1603051942
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/78088\">https://github.com/rust-lang/rust/pull/78088</a></p>",
        "id": 213727513,
        "sender_full_name": "Mara",
        "timestamp": 1603057225
    },
    {
        "content": "<p>What about <code>\"{{}}\"</code>?  Will that error suggesting to use <code>\"{}\", \"{}\"</code>? Will that be supported in the future?</p>",
        "id": 213727716,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1603057552
    },
    {
        "content": "<p>hm. <code>panic!(\"{{}}\")</code> right now panics with the message <code>\"{{}}\"</code>. not sure what the best suggestion is there. <code>\"{}\", \"{{}}\"</code> keeps the same behaviour. but maybe the user meant to use <code>\"{}\"</code> as a message.</p>",
        "id": 213727796,
        "sender_full_name": "Mara",
        "timestamp": 1603057659
    },
    {
        "content": "<p>Another fun fact: When used in a crate that has std, <code>core::panic!(\"hello\")</code> results in a <code>String</code> panic payload(), while <code>std::panic!(\"hello\")</code> results in a <code>&amp;'static str</code> panic payload().</p>",
        "id": 213835755,
        "sender_full_name": "Mara",
        "timestamp": 1603137010
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> very useful indeed, thank you</p>",
        "id": 213838353,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603138185
    },
    {
        "content": "<p>personally I think this should clearly happen over an edition boundary</p>",
        "id": 213838369,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603138194
    },
    {
        "content": "<p>I think \"route 3\" is kind of standard edition path</p>",
        "id": 213838433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603138206
    },
    {
        "content": "<p>Yeah, that definitely looks like the best option.</p>",
        "id": 213839083,
        "sender_full_name": "Mara",
        "timestamp": 1603138526
    },
    {
        "content": "<p>By writing that lint I realized assert!() makes things a bit annoying: <code>assert!({false})</code> generates a <code>panic!(\"assertion failed: {false}\")</code> which would not work after the edition change. but changing that to <code>panic!(\"{}\", \"...\")</code> would break const_panic, and changing it to <code>panic!(\"... {{false}}\")</code> would only work in rust 2021 (and only if the user didn't have their own panic!() macro in scope that assumed the current behaviour.)  i now changed it to call <code>core::panicking::panic(\"assertion failed: {false}\")</code> instead. I don't know if anyone relies on the ability to 'intercept' assert!()s panics by defining your own panic!() macro in scope, but that'd no longer work then. The documentation doesn't promise that works, so I guess it's fine.</p>\n<p>It's such a big pile of small surprising issues that are hard to discover and fix. Wonder what we'll find next ^^'</p>",
        "id": 213839284,
        "sender_full_name": "Mara",
        "timestamp": 1603138619
    },
    {
        "content": "<p>yeah the panic machinery is very full of surprises</p>",
        "id": 214343647,
        "sender_full_name": "RalfJ",
        "timestamp": 1603474955
    },
    {
        "content": "<p>I had to figure out many of them for Miri, which prompted me to write <a href=\"https://www.ralfj.de/blog/2019/11/25/how-to-panic-in-rust.html\">https://www.ralfj.de/blog/2019/11/25/how-to-panic-in-rust.html</a></p>",
        "id": 214343681,
        "sender_full_name": "RalfJ",
        "timestamp": 1603474977
    },
    {
        "content": "<p>but I am not sure how up-to-date that still is^^</p>",
        "id": 214343691,
        "sender_full_name": "RalfJ",
        "timestamp": 1603474983
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> for digging through all this and cleaning it up :-)</p>",
        "id": 214343721,
        "sender_full_name": "RalfJ",
        "timestamp": 1603474997
    },
    {
        "content": "<p>oh, nice blog post!</p>",
        "id": 214344028,
        "sender_full_name": "Mara",
        "timestamp": 1603475152
    },
    {
        "content": "<p>Update: This is now an RFC with a concrete plan: <a href=\"https://github.com/fusion-engineering-forks/rfcs/blob/panic/text/0000-panic-plan.md\">https://github.com/fusion-engineering-forks/rfcs/blob/panic/text/0000-panic-plan.md</a></p>",
        "id": 214495359,
        "sender_full_name": "Mara",
        "timestamp": 1603639975
    }
]