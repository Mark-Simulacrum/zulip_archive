[
    {
        "content": "<p>Is there a document anywhere describing what the \"guarantees\" of const are? It's difficult for me to determine what properties of const are merely artifacts of the current implementation and which are hard design requirements that are guaranteed to be upheld in the future. For example, <code>const fn</code>s must be deterministic at compile-time, right? Is that something that people will always be able to rely on? Similarly, is it guaranteed that <code>const fn</code>s must never be able to determine if the current execution environment is compile-time or runtime? Ideally the page in the reference would mention such things, although I don't trust what's currently written there, since it says \"Calling a const function at compile-time will always yield the same result as calling it at runtime, even when called multiple times.\", which I'm not sure will be true in the future given the prior discussion here about stabilizing const fn transmute</p>",
        "id": 247227473,
        "sender_full_name": "bstrie",
        "timestamp": 1627317315
    },
    {
        "content": "<blockquote>\n<p>Similarly, is it guaranteed that const fns must never be able to determine if the current execution environment is compile-time or runtime? </p>\n</blockquote>\n<p>I hope that wouldn't be the case. In many cases it can be useful to offer a naive const implementation so that CTFE works but implement an optimized one for runtime.</p>",
        "id": 247228141,
        "sender_full_name": "The 8472",
        "timestamp": 1627317619
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256342\">@bstrie</span> there is some of that at <a href=\"https://github.com/rust-lang/const-eval/\">https://github.com/rust-lang/const-eval/</a></p>",
        "id": 247230078,
        "sender_full_name": "RalfJ",
        "timestamp": 1627318534
    },
    {
        "content": "<blockquote>\n<p>Similarly, is it guaranteed that const fns must never be able to determine if the current execution environment is compile-time or runtime? I</p>\n</blockquote>\n<p>no, I dont think this is something we'll be able to uphold, at least in unsafe code -- and while we can try to declare this a bug, I dont think we should make it UB as there just is no good way to test for this, and un-testable UB is something Rust should not have IMO.</p>",
        "id": 247230250,
        "sender_full_name": "RalfJ",
        "timestamp": 1627318626
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/213817-t-lang/topic/the.20guarantees.20of.20const/near/247230250\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Similarly, is it guaranteed that const fns must never be able to determine if the current execution environment is compile-time or runtime? I</p>\n</blockquote>\n<p>no, I dont think this is something we'll be able to uphold, at least in unsafe code -- and while we can try to declare this a bug, I dont think we should make it UB as there just is no good way to test for this, and un-testable UB is something Rust should not have IMO.</p>\n</blockquote>\n<p>I'd also argue that it's a good idea to allow const functions to detect whether they are being evaluated at compile time or runtime. C++ added this, and it allows my cxmath library to not be painfully slow when evaluated at runtime (it evaluates 10+ terms of a taylor series for most functions).</p>",
        "id": 247233383,
        "sender_full_name": "Connor Horman",
        "timestamp": 1627320053
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"257758\">@Connor Horman</span> but the library still is expected to behave the same in both cases, it just provides more efficient implementations tailored to the context it is running in?</p>",
        "id": 247234695,
        "sender_full_name": "RalfJ",
        "timestamp": 1627320666
    },
    {
        "content": "<p>Thanks for the info, I forget which discussion it was where someone mentioned that being able to detect am-I-in-const was undesirable, but it seemed like it might be pretty hard to guarantee in practice. And the ability to detect am-I-in-const definitely means that the aforementioned line from the reference (\"Calling a const function at compile-time will always yield the same result as calling it at runtime, even when called multiple times.\") is definitely not going to be true</p>",
        "id": 247238962,
        "sender_full_name": "bstrie",
        "timestamp": 1627322553
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/213817-t-lang/topic/the.20guarantees.20of.20const/near/247234695\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"257758\">Connor Horman</span> but the library still is expected to behave the same in both cases, it just provides more efficient implementations tailored to the context it is running in?</p>\n</blockquote>\n<p>Yes, though the output may slightly differ due to the different implementation - ideally this is within 0.5 ULPs, though.</p>",
        "id": 247239125,
        "sender_full_name": "Connor Horman",
        "timestamp": 1627322625
    },
    {
        "content": "<p>ah yeah floats makes this even more \"fun\" -- but other than that, yes indeed this is the kind of thing for which we might also want a way to dispatch to different code between const and runtime in Rust</p>",
        "id": 247239625,
        "sender_full_name": "RalfJ",
        "timestamp": 1627322805
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256342\">@bstrie</span> that line will still be something we expect all public <code>const fn</code> to adhere to -- similar to how we expect all public <code>fn</code> to be UB-free when called from safe code in arbitrary ways</p>",
        "id": 247239738,
        "sender_full_name": "RalfJ",
        "timestamp": 1627322855
    },
    {
        "content": "<p>What is the severity of the \"expect\" in that statement? Is it UB for a function to produce different output at compile time than at runtime, or is it merely discouraged, in the same way that it's discouraged for a specialized function to produce a different result?</p>",
        "id": 247244174,
        "sender_full_name": "bstrie",
        "timestamp": 1627324839
    },
    {
        "content": "<p>Because if it's UB, then that means that every mechanism by which code detects am-I-in-const has to be <code>unsafe</code></p>",
        "id": 247244473,
        "sender_full_name": "bstrie",
        "timestamp": 1627325010
    },
    {
        "content": "<p>That would make using it to overload fp functions impossible, though.</p>",
        "id": 247244855,
        "sender_full_name": "Connor Horman",
        "timestamp": 1627325176
    },
    {
        "content": "<p>And, as I mentioned, the kinds of things you need to do to make fp functions work in <code>const</code> can be (and are) painfully slow when they end up at runtime).</p>",
        "id": 247244948,
        "sender_full_name": "Connor Horman",
        "timestamp": 1627325239
    },
    {
        "content": "<p>So then it merely has to be \"discouraged\", right? Which has consequences for type safety, yeah?</p>",
        "id": 247246553,
        "sender_full_name": "bstrie",
        "timestamp": 1627326054
    },
    {
        "content": "<p>Let's keep in mind that any outcome where <code>const fn</code> can cause UB without <code>unsafe</code> being used anywhere is a total non-starter and must be avoided at all costs. And if <em>any</em> <code>const fn</code> can exhibit UB by detecting am-I-in-const without <code>unsafe</code>, then <em>every</em> <code>const fn</code> has to be unsafe to call, always, which is also a non-starter</p>",
        "id": 247246981,
        "sender_full_name": "bstrie",
        "timestamp": 1627326240
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256342\">bstrie</span> <a href=\"#narrow/stream/213817-t-lang/topic/the.20guarantees.20of.20const/near/247246553\">said</a>:</p>\n<blockquote>\n<p>So then it merely has to be \"discouraged\", right? Which has consequences for type safety, yeah?</p>\n</blockquote>\n<p>Yeah. I'd have to assume so. One notable thing, though, that C++ has with it's detection mechanism <code>std::is_constant_evaluated()</code>, is that it doesn't actually detect whether it is evaluated at compile-time, rather it only detects cases it must be (required core-constant-expressions), and a few other cases that special-case core-constant expressions (such as static/tls initializers). The trivial example is that:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"kt\">int</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">is_constant_evaluated</span><span class=\"p\">()</span> <span class=\"o\">?</span> <span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"mi\">7</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>Produces x==7, whereas</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"k\">constexpr</span> <span class=\"kt\">int</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">is_constant_evaluated</span><span class=\"p\">()</span> <span class=\"o\">?</span> <span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"mi\">7</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>Produces x==5. <br>\nIf rust had the same property for it's <code>am-i-in-const</code>, then it would mitigate the issue, assuming the runtime version was still deterministic.</p>",
        "id": 247247446,
        "sender_full_name": "Connor Horman",
        "timestamp": 1627326453
    },
    {
        "content": "<p>I don't know if C++'s <code>is_constant_evaluated</code> makes sense for Rust. I think you'd really want something more like specialization, where it's possible to define both a <code>const fn foo</code> and a <code>fn foo</code>, and if you only define the former than that's what gets used for both compile-time and runtime, and if you define both then the first gets used at compile-time and the second at runtime</p>",
        "id": 247248703,
        "sender_full_name": "bstrie",
        "timestamp": 1627327107
    },
    {
        "content": "<p>Either way, my main point is that it may be beneficial to inherit the same property. So if the runtime version exists it is always called whenever the const version isn't required. The translation of the example would be:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">5</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">7</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">(){</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">X</span>: <span class=\"kt\">i32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// Always 5</span>\n<span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"kt\">i32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// Always 7</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 247248998,
        "sender_full_name": "Connor Horman",
        "timestamp": 1627327255
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256342\">bstrie</span> <a href=\"#narrow/stream/213817-t-lang/topic/the.20guarantees.20of.20const/near/247244174\">said</a>:</p>\n<blockquote>\n<p>What is the severity of the \"expect\" in that statement? Is it UB for a function to produce different output at compile time than at runtime, or is it merely discouraged, in the same way that it's discouraged for a specialized function to produce a different result?</p>\n</blockquote>\n<p>I dont think it should be UB, since I cant think of a way for Miri to detect this -- and I think all UB needs to be testable.</p>",
        "id": 247249930,
        "sender_full_name": "RalfJ",
        "timestamp": 1627327771
    },
    {
        "content": "<blockquote>\n<p>Yeah. I'd have to assume so. One notable thing, though, that C++ has with it's detection mechanism std::is_constant_evaluated(), is that it doesn't actually detect whether it is evaluated at compile-time, rather it only detects cases it must be (required core-constant-expressions), and a few other cases that special-case core-constant expressions (such as static/tls initializers). The trivial example is that:</p>\n</blockquote>\n<p>I think what you are saying here is that it tests <em>CTFE</em>, not <em>constant propagation</em>. And I think that is indeed the only sensible thing to do. <code>const</code> in Rust is  about CTFE. This entire discussion is about CTFE. constant propagation is an <em>optimization</em> and thus, by definition, has no observable effects (except for performance, and possibly a reduction in non-determinism).</p>",
        "id": 247250181,
        "sender_full_name": "RalfJ",
        "timestamp": 1627327887
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256342\">bstrie</span> <a href=\"#narrow/stream/213817-t-lang/topic/the.20guarantees.20of.20const/near/247248703\">said</a>:</p>\n<blockquote>\n<p>I don't know if C++'s <code>is_constant_evaluated</code> makes sense for Rust. I think you'd really want something more like specialization, where it's possible to define both a <code>const fn foo</code> and a <code>fn foo</code>, and if you only define the former than that's what gets used for both compile-time and runtime, and if you define both then the first gets used at compile-time and the second at runtime</p>\n</blockquote>\n<p>the API <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> was suggesting is something like <code>select_const(const_fn: const impl FnOnce(), runtime_fn: impl FnOnce())</code>. this would also let us only test the \"const\" 'branch' for const-validity.</p>",
        "id": 247250335,
        "sender_full_name": "RalfJ",
        "timestamp": 1627327952
    },
    {
        "content": "<p>so to be clear, there's no imaginable context where type safety would depend on a <code>const fn</code> having the same value at runtime that it does at compile-time, and while it remains true that a <code>const fn</code> called-at-compile-time must be deterministic, that same <code>const fn</code> called-at-runtime is allowed to be nondeterministic?</p>",
        "id": 247250474,
        "sender_full_name": "bstrie",
        "timestamp": 1627328011
    },
    {
        "content": "<blockquote>\n<p>Either way, my main point is that it may be beneficial to inherit the same property. So if the runtime version exists it is always called whenever the const version isn't required. The translation of the example would be:</p>\n</blockquote>\n<p>CTFE and constant propagation are two basically entirely orthogonal pieces that just both happen to have \"constant\" in their name. Sadly, many people seem confused by this and keep bringing up const-prop in CTFE discussions. But there really is not much of a connection.</p>\n<p>So, yes, this <code>select_const</code> would check for \"being evaluatied as part of a ´const<code> or </code>static` item, const generic, or array length\" -- IOW, CTFE.</p>",
        "id": 247250598,
        "sender_full_name": "RalfJ",
        "timestamp": 1627328061
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256342\">bstrie</span> <a href=\"#narrow/stream/213817-t-lang/topic/the.20guarantees.20of.20const/near/247250474\">said</a>:</p>\n<blockquote>\n<p>so to be clear, there's no imaginable context where type safety would depend on a <code>const fn</code> having the same value at runtime that it does at compile-time, and while it remains true that a <code>const fn</code> called-at-compile-time must be deterministic, that same <code>const fn</code> called-at-runtime is allowed to be nondeterministic?</p>\n</blockquote>\n<p>oh there are many imaginable contexts :)</p>",
        "id": 247250658,
        "sender_full_name": "RalfJ",
        "timestamp": 1627328091
    },
    {
        "content": "<p>there is this entire idea that a <code>const fn</code> <em>must behave like a pure function at runtime</em>.</p>",
        "id": 247250703,
        "sender_full_name": "RalfJ",
        "timestamp": 1627328114
    },
    {
        "content": "<p>this is currently true. and it could be useful for unsafe (runtime) code to exploit.</p>",
        "id": 247250729,
        "sender_full_name": "RalfJ",
        "timestamp": 1627328131
    },
    {
        "content": "<blockquote>\n<p>Sadly, many people seem confused by this and keep bringing up const-prop in CTFE discussions</p>\n</blockquote>\n<p>In the float context it comes up a lot, largely because they use the same machinery (both use LLVM APFloat, or a port of it). But yes, they're orthogonal aside from sharing some infrastructure in various places.</p>",
        "id": 247250737,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1627328134
    },
    {
        "content": "<p>Centril was a big fan of this and kept asking us to maintain this property. They are no longer around though and I don't know anyone else who has grand plans along these lines.</p>",
        "id": 247250942,
        "sender_full_name": "RalfJ",
        "timestamp": 1627328228
    },
    {
        "content": "<p>I personally don't really have a strong opinion either way, I just try to help the lang team notice when they cross this line :)</p>",
        "id": 247250966,
        "sender_full_name": "RalfJ",
        "timestamp": 1627328247
    },
    {
        "content": "<p>and indeed stabilizing <code>const_fn_transmute</code> is, basically, crossing that line... and there hasn't been that much discussion around this. which is surprising to me, and I am a bit worried not everyone realized the gravity of this decision.</p>",
        "id": 247251109,
        "sender_full_name": "RalfJ",
        "timestamp": 1627328326
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/213817-t-lang/topic/the.20guarantees.20of.20const/near/247250598\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Either way, my main point is that it may be beneficial to inherit the same property. So if the runtime version exists it is always called whenever the const version isn't required. The translation of the example would be:</p>\n</blockquote>\n<p>CTFE and constant propagation are two basically entirely orthogonal pieces that just both happen to have \"constant\" in their name. Sadly, many people seem confused by this and keep bringing up const-prop in CTFE discussions. But there really is not much of a connection.</p>\n</blockquote>\n<p>In C++, there is a intersection of a subset of viable cases of constant-propagation and what rust calls CTFE, which are known as <em>core constant expressions</em>, and these are expressions that the compiler is blessed by the standard to evaluating at compile time. The notable distinction of <code>std::is_constant_evaluated()</code> is that it doesn't test if the expression that evaluates it is a <em>core constant expressions</em> (in fact, were that the case, it would also return true, because the simple call itself is a <em>core constant expression</em>), but it tests whether the expression is <em>manifestly constant evaluated</em>. </p>\n<p><span class=\"user-mention silent\" data-user-id=\"256342\">bstrie</span> <a href=\"#narrow/stream/213817-t-lang/topic/the.20guarantees.20of.20const/near/247250474\">said</a>:</p>\n<blockquote>\n<p>so to be clear, there's no imaginable context where type safety would depend on a <code>const fn</code> having the same value at runtime that it does at compile-time, and while it remains true that a <code>const fn</code> called-at-compile-time must be deterministic, that same <code>const fn</code> called-at-runtime is allowed to be nondeterministic?</p>\n</blockquote>\n<p>I can write a trivial example right now:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// foo is a `const fn()-&gt;i32` or some other constant expression</span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">X</span>: <span class=\"kt\">i32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">!=</span><span class=\"n\">x</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"p\">{</span><span class=\"n\">core</span>::<span class=\"n\">hint</span>::<span class=\"n\">unreachable_unchecked</span><span class=\"p\">()}}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The question is whether there are any reasonable examples of such a context.</p>",
        "id": 247251310,
        "sender_full_name": "Connor Horman",
        "timestamp": 1627328412
    },
    {
        "content": "<p>Note that currently that code is sound <code>∀const fn foo()-&gt;i32</code>.</p>",
        "id": 247251398,
        "sender_full_name": "Connor Horman",
        "timestamp": 1627328456
    },
    {
        "content": "<blockquote>\n<p>and these are expressions that the compiler is blessed by the standard to evaluating at compile time</p>\n</blockquote>\n<p>why does the standard need to bless this? the as-if rule already blesses this...</p>",
        "id": 247251600,
        "sender_full_name": "RalfJ",
        "timestamp": 1627328572
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/213817-t-lang/topic/the.20guarantees.20of.20const/near/247251600\">said</a>:</p>\n<blockquote>\n<p>why does the standard need to bless this? the as-if rule already blesses this...</p>\n</blockquote>\n<p>There are a few cases that an expression being a <em>core constant expression</em> alters the observable behaviour. Notably, an object with static/thread storage duration that has an initializer consisting of only <em>core constant expressions</em> was required (merely permitted in C++11), to have constant-initialization, rather than zero-init followed by dynamic init (which is observable for trivially-copyable types by copying the bytes out in an earlier dynamic initializer). This case notably is also <em>manifestly-constant evaluated</em> (being one of the two special cases that don't require a constant expression). It's also easier to const-prop a core constant expression, because it doesn't involve doing things like calling a function defined in another translation unit.</p>",
        "id": 247252094,
        "sender_full_name": "Connor Horman",
        "timestamp": 1627328855
    },
    {
        "content": "<p>okay so that sounds like a lot of messy complications that Rust avoided :)</p>",
        "id": 247252603,
        "sender_full_name": "RalfJ",
        "timestamp": 1627329076
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/213817-t-lang/topic/the.20guarantees.20of.20const/near/247251109\">said</a>:</p>\n<blockquote>\n<p>and indeed stabilizing <code>const_fn_transmute</code> is, basically, crossing that line... and there hasn't been that much discussion around this. which is surprising to me, and I am a bit worried not everyone realized the gravity of this decision.</p>\n</blockquote>\n<p>I would be extremely worried were it not that you seem to have signed off on it. :P I figure if Ralf, the expert on the intersection of const and unsafety, thinks it's fine to allow this, then presumably nothing <em>too</em> bad can happen...</p>",
        "id": 247258269,
        "sender_full_name": "bstrie",
        "timestamp": 1627331800
    },
    {
        "content": "<p>There are other possible problems than UB, e.g. being mutually exclusive with some desirable future extension. Or specification complexity.</p>",
        "id": 247258723,
        "sender_full_name": "The 8472",
        "timestamp": 1627332029
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256342\">@bstrie</span> there's nothing fundamentally wrong with runtime-impure <code>const fn</code> -- I am pretty sure of that. A language can reasonably decide to go either way here.</p>",
        "id": 247260540,
        "sender_full_name": "RalfJ",
        "timestamp": 1627332903
    },
    {
        "content": "<p>I am not telling Rust to go one or the other side, I am just the lookout describing the design landscape. ;)</p>",
        "id": 247260607,
        "sender_full_name": "RalfJ",
        "timestamp": 1627332938
    },
    {
        "content": "<p>are you suggesting that we should have some sort of holistic const story before moving forward on any of these fronts? I agree that at least laying out the potential design tradeoffs WRT all the different decisions would be nice, but I don't know who has that sort of broader perspective on const these days</p>",
        "id": 247261064,
        "sender_full_name": "bstrie",
        "timestamp": 1627333178
    },
    {
        "content": "<p>well I think we should have a rough idea of the lay of the land and not just look at the immediate next step, yes</p>",
        "id": 247264259,
        "sender_full_name": "RalfJ",
        "timestamp": 1627334030
    },
    {
        "content": "<p>I'm trying to provide that perspective :D</p>",
        "id": 247264329,
        "sender_full_name": "RalfJ",
        "timestamp": 1627334047
    },
    {
        "content": "<p>Do you have a document with your own vision for the future of const? I see the const-eval repo, but that seems to just show me things that have already been decided</p>",
        "id": 247268686,
        "sender_full_name": "bstrie",
        "timestamp": 1627336360
    },
    {
        "content": "<p>no not really, sorry. I'd also not say I have a \"vision\" -- by \"perspective\" I more mean that I (think I) have an idea for the possible choices we could make and their consequences. I dont necessarily have strong opinions for which choices we should make.</p>",
        "id": 247299696,
        "sender_full_name": "RalfJ",
        "timestamp": 1627368689
    },
    {
        "content": "<p>whether or not <code>const fn</code> are runtime-deterministic is probably the biggest one here -- it touches on <code>const fn transmute</code>, const-fn-float, probably more</p>",
        "id": 247299713,
        "sender_full_name": "RalfJ",
        "timestamp": 1627368722
    },
    {
        "content": "<p>(to make things more complicated, <em>if</em> ptr-to-int transmutes <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/286\">truly are runtime UB</a>, then stabilizing <code>const_fn_transmute</code> does <em>not</em> allow one to write runtime-impure <code>const fn</code>... but allowing floats in <code>const fn</code> probably would... :/ )</p>",
        "id": 247299776,
        "sender_full_name": "RalfJ",
        "timestamp": 1627368771
    },
    {
        "content": "<p>other discussions:</p>\n<ul>\n<li>structural equality / const generics -- I hope we can follow <a href=\"https://hackmd.io/Qvrj_eOFTkCHZrhJ7f1ItA\">something like this sketch</a></li>\n<li>traits calls, fn ptrs, <code>dyn Trait</code>... I think we need <code>const Trait</code> bounds and <code>const fn()</code> and <code>&amp;dyn const Trait</code> types (i.e. I dont think <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> 's plan of making <code>Trait</code> bounds implicitly require <code>const</code> in const context will fly, since then trait bounds and types will be inconsistent).</li>\n<li>heap allocations: honestly this one I am least sure about. the principled approach would be to treat allocation during CTFE as a different allocator, but that would be reflected in the type of everything so it might be horribly unergonomic...</li>\n</ul>",
        "id": 247300126,
        "sender_full_name": "RalfJ",
        "timestamp": 1627369202
    },
    {
        "content": "<p>You're essentially correct on the last point.</p>",
        "id": 247300636,
        "sender_full_name": "Lokathor",
        "timestamp": 1627369671
    },
    {
        "content": "<ul>\n<li>The compile time allocator <em>really is</em> a separate allocator from the runtime global allocator, and should be represented as such.</li>\n<li>This means that we'd have a lot of ergonomics work to do because currently in rust having allocator-agnostic code is not really common.</li>\n</ul>\n<p>these are both true.</p>",
        "id": 247300721,
        "sender_full_name": "Lokathor",
        "timestamp": 1627369752
    },
    {
        "content": "<p>So, my takeaway from all these discussions we've had previously was \"we can either have unsafe code in const fn, or we can have runtime-determinism\". Since in my personal opinion we 100% want the former, the latter becomes irrelevant. For const-prop/optimization purposes, we can always have the compiler infer purity, no need to have this be a guaranteed thing.</p>",
        "id": 247317775,
        "sender_full_name": "oli",
        "timestamp": 1627383111
    },
    {
        "content": "<p>well we could put the burden on unsafe code to uphold runtime-determinism</p>",
        "id": 247317919,
        "sender_full_name": "RalfJ",
        "timestamp": 1627383225
    },
    {
        "content": "<p>but I am not sure how to do this in a principled way... like, making this precise requires some fancy binary logical relation machinery I think^^</p>",
        "id": 247317952,
        "sender_full_name": "RalfJ",
        "timestamp": 1627383244
    },
    {
        "content": "<p>one option we might have is to still require that <em>sound</em> public <code>const fn</code> must be pure. that would be enough to let people write unsafe code that relies on <code>const fn</code> purity.</p>",
        "id": 247319342,
        "sender_full_name": "RalfJ",
        "timestamp": 1627384164
    },
    {
        "content": "<p>so instead of making it UB, we extend the notion of soundness:</p>\n<ul>\n<li>a public <code>fn</code> is sound if, when called with arbitrary arguments that satisfy the safety invariant, it runs without causing UB and if it returns something, the result satisfies the safety argument</li>\n<li>moreover, a sound public <code>const fn</code> must be <em>pure</em>. &lt;insert definition of purity here&gt;</li>\n</ul>",
        "id": 247319489,
        "sender_full_name": "RalfJ",
        "timestamp": 1627384270
    },
    {
        "content": "<p>So... a <code>pub unsafe const fn</code> would not have to be pure?</p>",
        "id": 247319491,
        "sender_full_name": "oli",
        "timestamp": 1627384272
    },
    {
        "content": "<p>correct</p>",
        "id": 247319507,
        "sender_full_name": "RalfJ",
        "timestamp": 1627384296
    },
    {
        "content": "<p>but it needs to document in its SAFETY comment the requirements that ensure purity</p>",
        "id": 247319516,
        "sender_full_name": "RalfJ",
        "timestamp": 1627384306
    },
    {
        "content": "<p>I am not saying that I am in favor of this proposal -- it probably falls down with floating-point operations, which are not pure due to non-determinism</p>",
        "id": 247319588,
        "sender_full_name": "RalfJ",
        "timestamp": 1627384341
    },
    {
        "content": "<p>but I am saying that this would be a possible way forward</p>",
        "id": 247319596,
        "sender_full_name": "RalfJ",
        "timestamp": 1627384352
    },
    {
        "content": "<p>The big question imo is whether there are actually <em>practical</em> examples that need purity for soundness that can't also just rely on optimizations to get the same performance without manually relying on the purity</p>",
        "id": 247319745,
        "sender_full_name": "oli",
        "timestamp": 1627384474
    },
    {
        "content": "<p>the \"obvious\" example for exploiting purity is memoization</p>",
        "id": 247327481,
        "sender_full_name": "RalfJ",
        "timestamp": 1627389809
    },
    {
        "content": "<p>isn't memoization the wrong way around for this? If you get two different but indistinguishable return values for the same arguments, all that happens is that you are inefficient.</p>",
        "id": 247330156,
        "sender_full_name": "oli",
        "timestamp": 1627391212
    },
    {
        "content": "<p>if a function is impure, memoization changes behavior</p>",
        "id": 247330408,
        "sender_full_name": "RalfJ",
        "timestamp": 1627391347
    },
    {
        "content": "<p>so if <code>memoize f</code> is supposed to be equivalent to <code>f</code> (the usual correctness condition)I, then <code>f</code> must be pure -- well, some effects are okay (non-determinism, for example), but most are not</p>",
        "id": 247330521,
        "sender_full_name": "RalfJ",
        "timestamp": 1627391404
    },
    {
        "content": "<p>but hm since it can tolerate non-det then maybe it is indeed not a good example....</p>",
        "id": 247330799,
        "sender_full_name": "RalfJ",
        "timestamp": 1627391532
    },
    {
        "content": "<p>things like <code>DerefMove</code>, dont they require side-effect-free deterministic functions?</p>",
        "id": 247330840,
        "sender_full_name": "RalfJ",
        "timestamp": 1627391560
    },
    {
        "content": "<p>if a const allocator allocates 8 bytes twice in a row the two boxes returned are different. does that make the const allocator inherently impure?</p>",
        "id": 247345706,
        "sender_full_name": "Lokathor",
        "timestamp": 1627398251
    },
    {
        "content": "<p>depends on how you declare purity <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span> Like, without a definition of purity we can't really say anything here. From other discussions I got the impression that pure in haskell does not mean two arrays returned by an argumentless function have the same address, because the difference is not observable</p>",
        "id": 247346279,
        "sender_full_name": "oli",
        "timestamp": 1627398500
    },
    {
        "content": "<p>but here we can observe the difference, as writing to the one box will not write to the other box</p>",
        "id": 247346576,
        "sender_full_name": "oli",
        "timestamp": 1627398639
    },
    {
        "content": "<p>mutability is by itself rather problematic for pure functions afaict</p>",
        "id": 247346684,
        "sender_full_name": "oli",
        "timestamp": 1627398683
    },
    {
        "content": "<p>a pure <code>fn(&amp;mut T)</code> would be basically the same as a pure <code>fn(T) -&gt; T</code></p>",
        "id": 247390617,
        "sender_full_name": "RalfJ",
        "timestamp": 1627419635
    },
    {
        "content": "<p>but yeah defining \"pure\" precisely is possible with some suitably heavy PL machinery (\"logical relations\"), but I think it's waaaay beyond the complexity budget we can expect people to spend on unsafe const code.</p>",
        "id": 247390980,
        "sender_full_name": "RalfJ",
        "timestamp": 1627419705
    },
    {
        "content": "<p>to be fair, \"soundness\" is also a very complicated issue when you get deep into it, but lucky enough many people have very good intuition for it and that intuition typically does not lead astray</p>",
        "id": 247391141,
        "sender_full_name": "RalfJ",
        "timestamp": 1627419739
    }
]