[
    {
        "content": "<p>Draft RFC for return position impl trait in traits:</p>\n<p><a href=\"https://rust-lang.github.io/impl-trait-initiative/RFCs/rpit-in-traits.html\">https://rust-lang.github.io/impl-trait-initiative/RFCs/rpit-in-traits.html</a></p>\n<p>Feedback eagerly desired.</p>\n<p>(cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>, <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span>)</p>",
        "id": 257619342,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634252347
    },
    {
        "content": "<blockquote>\n<p>To start, traits that use <code>-&gt; impl Trait</code> will not be considered dyn safe, <em>even if the method has a <code>where Self: Sized</code> bound</em>. This is because dyn types currently require that all associated types are named, and the <code>$</code> type cannot be named.</p>\n</blockquote>\n<p>Sorry, if I'm missing some context, but can't we add a <code>where Self: Sized</code> to the hidden associated type too, if the method has it? This way we could potentially disable both the method and the associated type from appearing in the trait object.</p>\n<p>It seems like currently <code>type A where Self: Sized</code> does <strong>not</strong> remove the type from the trait object, but it could, right?</p>",
        "id": 257622598,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1634254254
    },
    {
        "content": "<p>I want to note that the assoc type desugaring is slightly different from what impl trait on inherent and free functions currently does. I once attempted to create such a desugaring, but it was not trivial at all. It may be easier with today's type alias impl trait, but on the implementation side it's likely a lot of work to untangle the current scheme</p>",
        "id": 257660224,
        "sender_full_name": "oli",
        "timestamp": 1634284910
    }
]