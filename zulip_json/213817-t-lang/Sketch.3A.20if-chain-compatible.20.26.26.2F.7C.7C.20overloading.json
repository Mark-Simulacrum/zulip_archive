[
    {
        "content": "<p>Since this came up in a lang meeting recently, I figured I'd write this out a bit.  The point is not to be a <em>proposal</em> right now, just that it's a possibility to demonstrate that we're not preventing the possibility of overloading <code>&amp;&amp;</code>/<code>||</code> by stabilizing chains.</p>\n<p>The core idea here is to think of <code>a &amp;&amp; b</code> not as <code>if a { b } else { false }</code>, but as <code>if let true = a { b } else { false }</code>.</p>\n<p>So we could allow overloading <code>&amp;&amp;</code> in future by having a trait that converts a single value to a two-branch enum, and desugaring the operator to control flow.  The existence of if-chains actually makes this easier, I think, since it's already doing that CFG in MIR.</p>\n<p>For example, maybe it does <code>a &amp;&amp; b</code> as</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">Whatever</span>::<span class=\"n\">it_is</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ControlFlow</span>::<span class=\"n\">Continue</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ControlFlow</span>::<span class=\"n\">Break</span><span class=\"p\">(</span><span class=\"n\">otherwise</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">otherwise</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Now, that emphasizes that there are a bunch of other choices to be made here, like if that first arm should be something more complex like maybe</p>\n<div class=\"codehilite\"><pre><span></span><code>ControlFlow::Continue(val) =&gt; Whatever::something_else(val, b),\n</code></pre></div>\n<p>But I think it shows that we have the option available to overload if we want to, in an if-chain world.</p>",
        "id": 268749937,
        "sender_full_name": "scottmcm",
        "timestamp": 1642709253
    },
    {
        "content": "<p>by \"overload\" you still mean via a method on a magical trait, yes? what does the lazily-evaluated <code>b</code> parameter look like, a closure?</p>",
        "id": 269097480,
        "sender_full_name": "bstrie",
        "timestamp": 1643027102
    },
    {
        "content": "<p>Yes, overload via a trait, like the other operators.</p>\n<p>The RHS might not need to look like anything special, since the expansion of <code>&amp;&amp;</code> and <code>||</code> would include control flow, and thus the RHS would only be evaluated if it didn't short-circuit.  (As pretty much has to happen, since <code>|| continue</code> and such work today.)</p>",
        "id": 269098217,
        "sender_full_name": "scottmcm",
        "timestamp": 1643027563
    },
    {
        "content": "<p>And, conveniently, that control flow rewrite for the expression is exactly what the if-chain feature is already doing for <code>&amp;&amp;</code> anyway.</p>",
        "id": 269098305,
        "sender_full_name": "scottmcm",
        "timestamp": 1643027639
    },
    {
        "content": "<p>it would be rather unprecedented for it to be possible to write <code>ShortCircuitAnd::and(foo, println!(\"hello\"))</code> that did not immediately print, unlike any other function call that it is possible to write</p>",
        "id": 269099664,
        "sender_full_name": "bstrie",
        "timestamp": 1643028421
    },
    {
        "content": "<p>maybe we need associated macros :)</p>",
        "id": 269099832,
        "sender_full_name": "bstrie",
        "timestamp": 1643028516
    },
    {
        "content": "<p>Note that the trait in the sketch only takes one parameter.  It'd be like how <code>?</code> has control flow implications, but calling <code>Try::branch</code> is just a normal trait function.</p>",
        "id": 269100742,
        "sender_full_name": "scottmcm",
        "timestamp": 1643028980
    }
]