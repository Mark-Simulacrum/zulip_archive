[
    {
        "content": "<p>We have implemented and hypothetical syntax for various const things. The current status is essentially</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo1</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Debug</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">t</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"c1\">// cannot use trait methods at all, but can call without a const impl</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo2</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"o\">~</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">Debug</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">t</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// can use trait methods, but must with a const impl if in a const context</span>\n<span class=\"w\">    </span><span class=\"c1\">//</span>\n<span class=\"w\">    </span><span class=\"c1\">// cannot use methods in a const context</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// hypothetical syntax</span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo3</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">const</span><span class=\"w\"> </span><span class=\"n\">Debug</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">t</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// can use trait methods in any context</span>\n<span class=\"w\">    </span><span class=\"c1\">//</span>\n<span class=\"w\">    </span><span class=\"c1\">// must always supply a const impl</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// hypothetical syntax</span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo4</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">const</span><span class=\"w\"> </span><span class=\"n\">Debug</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">t</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// same as foo4</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The question is whether we want \"awkward\" syntax for the common case (<code>foo2</code>), or whether we want a potentially confusing (no evidence, but the point has been brought up) syntax for <code>foo2</code> by using just plain <code>T: const Trait</code> bounds to mean \"const if const\" and have something like <code>T: const(always) Trait</code> for <code>foo3</code> and <code>foo4</code> or not even any syntax for that at all and require people to use associated consts or something else entirely</p>",
        "id": 265840826,
        "sender_full_name": "oli",
        "timestamp": 1640199994
    },
    {
        "content": "<p>I personally see three different sets of related questions here:<br>\n1) Should we use a simpler syntax for <code>foo2</code> than <code>foo3</code>/<code>foo4</code>? For instance, just <code>const</code>, and then <code>foo3</code> and <code>foo4</code> need a syntax for unconditional const?<br>\n2) What syntax should we actually use? If <code>foo2</code> gets the unusual syntax, we could use something like <code>?const</code>. But if <code>foo3</code> and <code>foo4</code> need a different \"unconditional const\" syntax, we could spell that something like <code>+const</code> or similar.<br>\n3) Do we need a more general mechanism for \"make something in the type system conditional on whether we're in a const context\"? The equivalent of <code>const ? T : U</code>?</p>",
        "id": 265841162,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1640200231
    },
    {
        "content": "<p>I like the idea of giving <code>foo2</code> a better syntax (<code>const</code> instead of <code>~const</code>), but I think eventually (via an edition or some other migration path) we're going to want const type parameters to  const contexts to be opt-out rather than opt-in</p>",
        "id": 265841177,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1640200250
    },
    {
        "content": "<p>I personally think we'll want a shorthand regardless, and I'd be in favor of spelling <code>foo2</code> with <code>T: const Trait</code> and <code>foo3</code>/<code>foo4</code> with <code>T: +const Trait</code>.</p>",
        "id": 265841214,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1640200274
    },
    {
        "content": "<p>The problem with spelling <code>foo2</code> with <code>const Trait</code> IMO is that if we ever wanted to drop the <code>const</code> before <code>const Trait</code> for the <code>foo2</code> case, we'd probably want to re-use the <code>const</code> syntax for the <code>const(always)</code> case, which would be an awkward transition</p>",
        "id": 265841345,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1640200344
    },
    {
        "content": "<p>(this is assuming that the opt-out is something like <code>?const Trait</code>)</p>",
        "id": 265841367,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1640200364
    },
    {
        "content": "<p>note that I do also think this should apply to trait impls and their generic parameters: for the \"i'm only using an associated constant\" case, both <code>const fn</code> and <code>const</code> trait impls would use <code>: ?const Trait</code> bounds</p>",
        "id": 265841422,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1640200409
    },
    {
        "content": "<p>yea, all syntax is shared between const fn and const trait impls</p>",
        "id": 265841630,
        "sender_full_name": "oli",
        "timestamp": 1640200530
    },
    {
        "content": "<p>in any case. Are there any objections to opening an FCP on allowing <code>T: Trait</code> on const fn to mean \"can't call methods, but use associated consts and types\"?</p>",
        "id": 265842213,
        "sender_full_name": "oli",
        "timestamp": 1640200865
    },
    {
        "content": "<p>Considering that <code>where (T,): Trait</code> already exists as a workaround for that</p>",
        "id": 265842239,
        "sender_full_name": "oli",
        "timestamp": 1640200885
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127859\">Taylor Cramer</span> <a href=\"#narrow/stream/213817-t-lang/topic/const-if-const.20syntax.20.28.60~const.60.29/near/265841177\">said</a>:</p>\n<blockquote>\n<p>we're going to want const type parameters to  const contexts to be opt-out rather than opt-in</p>\n</blockquote>\n<p>Might be interesting to pick syntaxes for both directions, so that we can require one for now, then pivot to the other direction in the next edition if we want a breaking change to fit the nicer default.</p>",
        "id": 267622376,
        "sender_full_name": "scottmcm",
        "timestamp": 1641924628
    },
    {
        "content": "<p>It looks like the \"<code>const</code> means const-if-const, and something else to mean always-const\" scheme has already been suggested (originally meant as a joke), <a href=\"https://internals.rust-lang.org/t/pre-rfc-revamped-const-trait-impl-aka-rfc-2632/15192/25?u=fee1-dead\">on internals</a>:</p>\n<blockquote>\n<p>In pure jest, I counterpropose that <code>T: const Trait</code> is only const when the defining item is used as const, and that a new syntax <code>T: const!!! Trait</code> is added for when T needs to always provide a const impl of <code>Trait</code>.</p>\n</blockquote>",
        "id": 267623565,
        "sender_full_name": "fee1-dead",
        "timestamp": 1641925165
    },
    {
        "content": "<p>Time to suggest the triple-exclamation-mark modifier for all keywords</p>",
        "id": 267624853,
        "sender_full_name": "oli",
        "timestamp": 1641925706
    },
    {
        "content": "<p><code>unsafe!!! { *0 }</code></p>",
        "id": 267624893,
        "sender_full_name": "oli",
        "timestamp": 1641925721
    },
    {
        "content": "<p>I think one question would be:<br>\nWhat would each of the syntaxes mean in a non-<code>const</code> fn? <br>\nIn particular, what is:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">const</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&gt;</span><span class=\"p\">(){}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>If we go with making <code>foo2</code> have the nice syntax, then I think there's a catch-22 that this will be confusing:<br>\n1) <code>foo&lt;T: const Foo&gt;()</code> does what <code>foo4</code> does: it always requires <code>const</code>, and you can call trait methods on <code>T</code> in a <code>const</code> context, then it's different behaviour between a <code>const fn</code> and a non-<code>const fn</code>.<br>\n2) If its the same, then the <code>T: const Foo</code> bound is useless (identical to <code>T: Foo</code>). <br>\nThis should likely be considered if <code>foo2&lt;T: const Foo&gt;()</code> and <code>foo3&lt;T: +const Foo&gt;</code> is the solution chosen. Not necessarily a huge issue, but definately something to think about</p>",
        "id": 267627192,
        "sender_full_name": "Connor Horman",
        "timestamp": 1641926717
    },
    {
        "content": "<p>The other thing is, IDK if this is the proper place, but imo the <code>~const Drop</code> syntax should be fixed.<br>\nIt's somewhat confusing (as, at least to me, it seems to imply that <code>T: Drop</code> but is satisfied for primitive types), and has already result in one (albeit now fixed) <a href=\"https://github.com/rust-lang/rust/issues/92111\">regression</a>.</p>",
        "id": 267627875,
        "sender_full_name": "Connor Horman",
        "timestamp": 1641927002
    },
    {
        "content": "<p><code>where fn: const → T: const</code></p>",
        "id": 267627896,
        "sender_full_name": "The 8472",
        "timestamp": 1641927002
    },
    {
        "content": "<p>I think we should not allow writing <code>const</code> bounds in non-const fn</p>",
        "id": 267628054,
        "sender_full_name": "oli",
        "timestamp": 1641927078
    },
    {
        "content": "<p>I think it's useful to have a way to use <code>const_trait_impl</code> in constants within a function.</p>",
        "id": 267628091,
        "sender_full_name": "Connor Horman",
        "timestamp": 1641927102
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/213817-t-lang/topic/const-if-const.20syntax.20.28.60~const.60.29/near/267627896\">said</a>:</p>\n<blockquote>\n<p><code>where fn: const → T: const</code></p>\n</blockquote>\n<p>I'd love to have a syntax for that.</p>",
        "id": 267629064,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1641927535
    },
    {
        "content": "<p>We've wanted, in the past, things like <code>where T: Send -&gt; U: Send</code>.</p>",
        "id": 267629095,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1641927551
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/213817-t-lang/topic/const-if-const.20syntax.20.28.60~const.60.29/near/267628054\">said</a>:</p>\n<blockquote>\n<p>I think we should not allow writing <code>const</code> bounds in non-const fn</p>\n</blockquote>\n<p>I disagree. With inline const I definitely see a always-const bound being potentially useful even on non-const fns.</p>",
        "id": 267630399,
        "sender_full_name": "Gary Guo",
        "timestamp": 1641928152
    },
    {
        "content": "<p>Oh, I mean const-if-const bounds</p>",
        "id": 267630438,
        "sender_full_name": "oli",
        "timestamp": 1641928176
    },
    {
        "content": "<p>Always const bounds are def useful</p>",
        "id": 267630459,
        "sender_full_name": "oli",
        "timestamp": 1641928185
    }
]