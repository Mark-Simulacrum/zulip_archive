[
    {
        "content": "<p>What it says on the tin. A warning to make target_arch generate a warning if you're checking for an arch that rustc doesn't know about? This could even be off by default, but i had some code lurking that was cfg'd for <code>x86_86</code> and the only test was a doctest which then also didn't get tested and it all went un-noticed because this crate has 1236 functions in it. I only noticed while converting the doctests into integration tests.</p>",
        "id": 240676134,
        "sender_full_name": "Lokathor",
        "timestamp": 1622251481
    },
    {
        "content": "<p>Reminds me of <a href=\"https://github.com/rust-lang/rfcs/pull/3013\">https://github.com/rust-lang/rfcs/pull/3013</a></p>\n<p>Oh, <code>target_arch</code> looks like it's even in there: <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/3013-conditional-compilation-checking.md#well-known-condition-names\">https://github.com/rust-lang/rfcs/blob/master/text/3013-conditional-compilation-checking.md#well-known-condition-names</a></p>",
        "id": 240676360,
        "sender_full_name": "scottmcm",
        "timestamp": 1622251825
    },
    {
        "content": "<blockquote>\n<p>i had some code lurking that was cfg'd for x86_86</p>\n</blockquote>\n<p>your code was forward thinking, and handling intel's future extension to 86-bit pointers</p>",
        "id": 240676474,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1622251999
    },
    {
        "content": "<blockquote>\n<p>One possible source of problems may come from build scripts (<a href=\"http://build.rs\">build.rs</a> files) that add --cfg options that Cargo is not aware of. For exaple, if a Cargo.toml file did not define a feature flag of foo, but the <a href=\"http://build.rs\">build.rs</a> file added a --cfg feature=\"foo\" option, then source code could use foo in a condition. My guess is that this is rare, and that a Crater run will expose this kind of problem.</p>\n</blockquote>\n<p>I have literally done this lifehack myself.</p>",
        "id": 240676890,
        "sender_full_name": "Lokathor",
        "timestamp": 1622252447
    },
    {
        "content": "<p>Anyway, i suppose it's neat that some sort of hyper general version of this is in the works. though, having it all be opt-in seems not great in the long term.</p>",
        "id": 240677040,
        "sender_full_name": "Lokathor",
        "timestamp": 1622252695
    },
    {
        "content": "<p>i always name the cfg something specific. even if i'm shimming stuff like <code>cfg(sanitize)</code>, which is trivially shimmable (<a href=\"https://github.com/rust-lang/rust/issues/39699#issuecomment-814134019\">https://github.com/rust-lang/rust/issues/39699#issuecomment-814134019</a>)</p>",
        "id": 240677152,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1622252881
    },
    {
        "content": "<p>There is a proposal to make <a href=\"http://build.rs\">build.rs</a> list all possible cfg values it might set.</p>",
        "id": 240678906,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622255965
    },
    {
        "content": "<p>If it includes key-value pairs, that could become annoying to exhausitvely enumerate set values. I've used cfg values with feature detection (side note: that is really fun in <a href=\"http://build.rs\">build.rs</a>, much nicer in cmake). For example, the <a href=\"http://build.rs\">build.rs</a> script for lccc's libstd (Current state: &lt;<a href=\"https://github.com/LightningCreations/lccc/blob/main/rust/libstd/build.rs\">https://github.com/LightningCreations/lccc/blob/main/rust/libstd/build.rs</a>&gt;) will likely end up setting more than a dozen different cfg values to well too many different values. Being required to print all possible pairs sounds like it could end up with a right-hand/left-hand problem I'd desparetly like to avoid (Where I add a new pair as I implement more stuff, or refine the checks, but forget to add it to the list).</p>",
        "id": 240679289,
        "sender_full_name": "Connor Horman",
        "timestamp": 1622256633
    },
    {
        "content": "<p>(There is also a decent chance I'll end up doing something similar in other projects, so it's not just something that could be solved with \"add an unstable option to deactivate it\")</p>",
        "id": 240679303,
        "sender_full_name": "Connor Horman",
        "timestamp": 1622256691
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"257758\">@Connor Horman</span> The feature as discussed was exclusively for feature flags; rust cfgs don't have key-value pairs yet.</p>",
        "id": 240681552,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622261195
    },
    {
        "content": "<p>Can't you set <code>key=\"value\"</code> in <a href=\"http://build.rs\">build.rs</a> with <code>cargo:rustc-cfg=</code>?</p>",
        "id": 240681637,
        "sender_full_name": "Connor Horman",
        "timestamp": 1622261319
    },
    {
        "content": "<p>yeah, you can</p>",
        "id": 240681646,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1622261368
    },
    {
        "content": "<p>(Which is what I mean by key-value pairs)</p>",
        "id": 240681651,
        "sender_full_name": "Connor Horman",
        "timestamp": 1622261387
    },
    {
        "content": "<p>This is true, but you can't actually do anything with the \"value\", so it still just amounts to a key with a complex name.</p>",
        "id": 240681715,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622261471
    },
    {
        "content": "<p>It acts effectively like a key named <code>key=value</code>; you can't actually do anything with the value except check it against a literal string.</p>",
        "id": 240681728,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622261505
    },
    {
        "content": "<p>Well, that's specifically what I need anyways.  If I had to exhausitvely list all of those keys, that could become a <em>fun</em>  problem.</p>",
        "id": 240681827,
        "sender_full_name": "Connor Horman",
        "timestamp": 1622261692
    },
    {
        "content": "<blockquote>\n<p>There is a proposal to make <a href=\"http://build.rs\">build.rs</a> list all possible cfg values it might set.</p>\n</blockquote>\n<p>target_arch isn't set in <a href=\"http://build.rs\">build.rs</a> though, it's just set by the compiler itself.</p>",
        "id": 240688454,
        "sender_full_name": "Lokathor",
        "timestamp": 1622272057
    }
]