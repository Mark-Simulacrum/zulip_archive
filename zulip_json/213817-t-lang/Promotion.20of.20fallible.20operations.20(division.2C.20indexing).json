[
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/80579\">https://github.com/rust-lang/rust/pull/80579</a> implements part of <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/3027-infallible-promotion.md\">RFC 3027</a> by no longer promoting division and indexing when it can fail. Can someone start rfcbot FCP for this?</p>\n<p>The one open question raised in the PR is whether we should avoid \"looking into\" the constants of other crates. Changing <code>const</code> to a different value is already a breaking change in various ways; this would add yet another one.</p>",
        "id": 222982674,
        "sender_full_name": "RalfJ",
        "timestamp": 1610805724
    },
    {
        "content": "<p>what's the reasoning for forbidding potentially failing divisions in promoteds instead of moving the check outside of it?</p>",
        "id": 222990449,
        "sender_full_name": "lcnr",
        "timestamp": 1610814305
    },
    {
        "content": "<p>we are already doing something similar for other fallible operations, e.g. <code>CheckedAdd</code></p>",
        "id": 222990470,
        "sender_full_name": "lcnr",
        "timestamp": 1610814333
    },
    {
        "content": "<p>and it will be surprising that changing code from <code>CONST/ 8</code> to <code>CONST / (1 &lt;&lt; 3)</code> causes a lifetime issue, even if this will very rarely happen</p>",
        "id": 222990544,
        "sender_full_name": "lcnr",
        "timestamp": 1610814427
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/213817-t-lang/topic/Promotion.20of.20fallible.20operations.20(division.2C.20indexing)/near/222990470\">said</a>:</p>\n<blockquote>\n<p>we are already doing something similar for other fallible operations, e.g. <code>CheckedAdd</code></p>\n</blockquote>\n<p>in MIR, Addition (and its failure on overflow) are very different from division and its failure on 0</p>",
        "id": 222990965,
        "sender_full_name": "RalfJ",
        "timestamp": 1610814880
    },
    {
        "content": "<p><code>Add</code> and <code>CheckedAdd</code> are both total (they never fail), one just returns a <code>bool</code> indicating whether an overflow happens</p>",
        "id": 222990985,
        "sender_full_name": "RalfJ",
        "timestamp": 1610814907
    },
    {
        "content": "<p>in contrast, <code>Div</code> is <em>UB</em> when the RHS is 0!</p>",
        "id": 222990993,
        "sender_full_name": "RalfJ",
        "timestamp": 1610814917
    },
    {
        "content": "<p>correspondingly, the MIR that's generated around them is also very different</p>",
        "id": 222991016,
        "sender_full_name": "RalfJ",
        "timestamp": 1610814958
    },
    {
        "content": "<p>all this reflects that div-by-0 and overflow are just very different kinds of \"failure\" -- the latter isn't a failure at all, as far as MIR is concerned, it's just \"linted against\" so to speak</p>",
        "id": 222991074,
        "sender_full_name": "RalfJ",
        "timestamp": 1610814995
    },
    {
        "content": "<p>this might be a reflection of the fact that LLVM does not have a safe division operation (LLVM division is UB on 0) - so to ease lowering of MIR to LLVM, there likewise is no safe division operation in MIR</p>",
        "id": 222991285,
        "sender_full_name": "RalfJ",
        "timestamp": 1610815211
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/213817-t-lang/topic/Promotion.20of.20fallible.20operations.20(division.2C.20indexing)/near/222990993\">said</a>:</p>\n<blockquote>\n<p>in contrast, <code>Div</code> is <em>UB</em> when the RHS is 0!</p>\n</blockquote>\n<p>this is just the current behavior though, there is nothing stopping us from adding <code>CheckedDiv</code>, is there?</p>",
        "id": 222994523,
        "sender_full_name": "lcnr",
        "timestamp": 1610818574
    },
    {
        "content": "<p>i don't mind transforming <code>CheckedDiv</code> back to <code>Div + assert</code> after promoting if that's better for llvm and optimizing</p>",
        "id": 222994553,
        "sender_full_name": "lcnr",
        "timestamp": 1610818605
    },
    {
        "content": "<blockquote>\n<p>this is just the current behavior though, there is nothing stopping us from adding CheckedDiv, is there?</p>\n</blockquote>\n<p>nothing in principle, no. it's just a bigger change -- if we want to go that route, I hope someone else can do the MIR changes required for this, as I don't have the time to write such big PRs currently.</p>",
        "id": 222994723,
        "sender_full_name": "RalfJ",
        "timestamp": 1610818771
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/213817-t-lang/topic/Promotion.20of.20fallible.20operations.20(division.2C.20indexing)/near/222994553\">said</a>:</p>\n<blockquote>\n<p>i don't mind transforming <code>CheckedDiv</code> back to <code>Div + assert</code> after promoting if that's better for llvm and optimizing</p>\n</blockquote>\n<p>that's the wrong transformation, <code>CheckedDiv</code> wouldn't assert. it would have to transform to something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">/</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 222994798,
        "sender_full_name": "RalfJ",
        "timestamp": 1610818817
    },
    {
        "content": "<p><em>change <code>CheckedDiv, assert</code> to <code>assert, Div</code></em></p>",
        "id": 222994909,
        "sender_full_name": "lcnr",
        "timestamp": 1610818929
    },
    {
        "content": "<blockquote>\n<p>as I don't have the time to write such big PRs currently.</p>\n</blockquote>\n<p>i would prefer us to do it this way and don't mind spending the time to implement this if so desired</p>",
        "id": 222994947,
        "sender_full_name": "lcnr",
        "timestamp": 1610818985
    },
    {
        "content": "<p>Fair. I am fine either way.</p>",
        "id": 222995097,
        "sender_full_name": "RalfJ",
        "timestamp": 1610819150
    },
    {
        "content": "<p>FWIW, that would stll leave indexing -- <code>[1,2,3][2]</code> would be promoted but <code>[1,2,3][1+1]</code> would not. it's strange but IMO worth it for the compiler cleanup. (once that PR lands, we can remove all the special casing for const-eval error reporting around promoteds, and we can ICE in codegen when encountering CTFE error instead of having to somehow continue codegen.)</p>",
        "id": 222995198,
        "sender_full_name": "RalfJ",
        "timestamp": 1610819251
    },
    {
        "content": "<p>indexing is harder to fix, uuuu</p>",
        "id": 222996714,
        "sender_full_name": "lcnr",
        "timestamp": 1610820803
    },
    {
        "content": "<p>well, considering that i don't know of a way to avoid this for indexing i am fine with you going ahead here. Can always relax the limitations later on afaik <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 222997146,
        "sender_full_name": "lcnr",
        "timestamp": 1610821319
    },
    {
        "content": "<p>we could, in theory, do the same for indexing as division, right? something like</p>\n<p><code>if index &lt; LENGTH { Some(arr[index]) } else { None }</code> and then an assert/unwrap</p>",
        "id": 222997831,
        "sender_full_name": "simulacrum",
        "timestamp": 1610822037
    },
    {
        "content": "<p>we essentially do that already</p>",
        "id": 222997916,
        "sender_full_name": "oli",
        "timestamp": 1610822095
    },
    {
        "content": "<p>but the primitive operation that gets promoted can still fail (the <code>arr[index]</code>)</p>",
        "id": 222997931,
        "sender_full_name": "oli",
        "timestamp": 1610822127
    },
    {
        "content": "<p>how so?</p>",
        "id": 222997940,
        "sender_full_name": "simulacrum",
        "timestamp": 1610822136
    },
    {
        "content": "<p>when promoting, we do not promote the check... oh I see what you are saying, we would have a literal branch for each index op?</p>",
        "id": 222998020,
        "sender_full_name": "oli",
        "timestamp": 1610822201
    },
    {
        "content": "<p>promotion currently can't handle branches, and I worry this would make codegen worse, but it's worth exploring</p>",
        "id": 222998063,
        "sender_full_name": "oli",
        "timestamp": 1610822249
    },
    {
        "content": "<p>well, then div as ralf suggested also would not work</p>",
        "id": 222998141,
        "sender_full_name": "simulacrum",
        "timestamp": 1610822307
    },
    {
        "content": "<p>so it seems like both are blocked on promotion handling branches, presumably</p>",
        "id": 222998158,
        "sender_full_name": "simulacrum",
        "timestamp": 1610822327
    },
    {
        "content": "<p>well... if we had a fallible primitive for div and indexing, then we'd have to only create a branch in llvm</p>",
        "id": 222998182,
        "sender_full_name": "oli",
        "timestamp": 1610822371
    },
    {
        "content": "<p>if we can get this to generate the same efficient machine code, then we could do it without promotion handling branches</p>",
        "id": 222998264,
        "sender_full_name": "oli",
        "timestamp": 1610822430
    },
    {
        "content": "<p>oh, you mean basically putting the primitive in rustc, rather than lowering to this? sure, that makes sense</p>",
        "id": 222998266,
        "sender_full_name": "simulacrum",
        "timestamp": 1610822433
    },
    {
        "content": "<p>yea</p>",
        "id": 222998271,
        "sender_full_name": "oli",
        "timestamp": 1610822448
    },
    {
        "content": "<p>We'd have to move indexing out of the projections, but wg-mir-opt planned to do that anyway</p>",
        "id": 222998285,
        "sender_full_name": "oli",
        "timestamp": 1610822463
    },
    {
        "content": "<p>I guess at that point indexing could be a binop <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 222998313,
        "sender_full_name": "oli",
        "timestamp": 1610822501
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/213817-t-lang/topic/Promotion.20of.20fallible.20operations.20(division.2C.20indexing)/near/222998141\">said</a>:</p>\n<blockquote>\n<p>well, then div as ralf suggested also would not work</p>\n</blockquote>\n<p>the Div would be a MIR primitive, so there'd be no branches</p>",
        "id": 222998763,
        "sender_full_name": "RalfJ",
        "timestamp": 1610822960
    },
    {
        "content": "<p>but yeah for indexing projections it's much less clear how to make that an infallibe operation plus an <em>after the fact</em> check (that's the key point here; overflow already has after-the-fact checks, but div and indexing currently <em>requires</em> upfront checks)</p>",
        "id": 222998857,
        "sender_full_name": "RalfJ",
        "timestamp": 1610823042
    }
]