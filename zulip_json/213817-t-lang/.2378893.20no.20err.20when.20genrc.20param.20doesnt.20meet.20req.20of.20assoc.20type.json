[
    {
        "content": "<p>creating topic</p>",
        "id": 216485082,
        "sender_full_name": "pnkfelix",
        "timestamp": 1605195812
    },
    {
        "content": "<p>one thing I remembered during the meeting: this might actually be similar to something I proposed last year, too, where <code>WF(&lt;T as Trait&gt;::Assoc)</code> shouldn't need to check more than <code>T: Trait</code>, and it was very inefficient because it checked all the bounds on the trait</p>",
        "id": 216485263,
        "sender_full_name": "eddyb",
        "timestamp": 1605195872
    },
    {
        "content": "<p>we ended up adding more caching instead <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 216485280,
        "sender_full_name": "eddyb",
        "timestamp": 1605195881
    },
    {
        "content": "<p>the point of weakness AFAICT be relying on it in an impl of <code>Trait</code> itself (if anyone remembers<code>trait Magic: Copy</code>, it used to be possible to assume any trait is implemented without any real impl, just a <code>impl&lt;T: Magic&gt; Magic for T</code> - I'm not sure how to find the issue, sadly)</p>",
        "id": 216485399,
        "sender_full_name": "eddyb",
        "timestamp": 1605195935
    },
    {
        "content": "<p>Oops, yea this more T-lang than T-compiler (where I opened the topic).</p>",
        "id": 216485549,
        "sender_full_name": "oli",
        "timestamp": 1605195989
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/78893\">#78893</a> accidentally introduced implied bounds in certain situations. This means you don't have to supply bounds for associated types if you aren't using them yourself.</p>\n<ul>\n<li><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=f0d89d2e8115707baf63c9a5fce86d1e\">shows that the additional <code>Send</code> bound is required outside</a></li>\n<li><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=8d7392b008874ac364e85a5fc939bb4e\">footgun where the bounds on <code>A::T</code> are not available outside of <code>A</code></a></li>\n<li><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=3a70634676805df4edad3668aa8cc164\">The sum of all bounds is required</a></li>\n</ul>",
        "id": 216485550,
        "sender_full_name": "oli",
        "timestamp": 1605195990
    },
    {
        "content": "<p>even if you had something with a contradictory bound like <code>T: AssocNeedsCopy&lt;Assoc = String&gt;</code>, it would never be possible to <em>actually</em> use that \"something\". this is presumably sound for something like a function, less confident in <code>impl</code>s (because of the <code>Magic</code> trick again)</p>",
        "id": 216485650,
        "sender_full_name": "eddyb",
        "timestamp": 1605196035
    },
    {
        "content": "<p>I should definitely cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> on this I suppose</p>",
        "id": 216485756,
        "sender_full_name": "eddyb",
        "timestamp": 1605196083
    },
    {
        "content": "<p>Does this introduce any differences between having bounds on assoc. types vs. on the trait itself?</p>",
        "id": 216485868,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1605196120
    },
    {
        "content": "<p>if we're sure we've plugged all the \"unfounded <code>impl</code> satisfying bounds out of thin air\" situations, we should be able to treat this new kind of \"implied bound (on assoc types)\", I think this remains only a matter of \"we should have an official decision\"</p>",
        "id": 216485920,
        "sender_full_name": "eddyb",
        "timestamp": 1605196145
    },
    {
        "content": "<p>but I suppose we're running out of time?</p>",
        "id": 216485934,
        "sender_full_name": "eddyb",
        "timestamp": 1605196154
    },
    {
        "content": "<p>it's \"only\" in beta tomorrow</p>",
        "id": 216486153,
        "sender_full_name": "oli",
        "timestamp": 1605196227
    },
    {
        "content": "<p>I'd err on the side of \"this is fine\", and also with all of <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span>'s other work depending on this (IIUC)</p>",
        "id": 216486319,
        "sender_full_name": "eddyb",
        "timestamp": 1605196297
    },
    {
        "content": "<p>but it's not clear we ever approved the user-facing semantic changes. I wonder if we could \"just\" make the compiler slower to get the older behavior <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 216486395,
        "sender_full_name": "eddyb",
        "timestamp": 1605196323
    },
    {
        "content": "<p>(that is, impose the now-gone restrictions, instead of reverting any PRs)</p>",
        "id": 216486473,
        "sender_full_name": "eddyb",
        "timestamp": 1605196342
    },
    {
        "content": "<p>This is also related to implied bounds</p>",
        "id": 216487878,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605196837
    },
    {
        "content": "<p>I'd <em>prefer</em> to not alter things -- but I'd definitely prefer not to <em>revert</em></p>",
        "id": 216487939,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605196859
    },
    {
        "content": "<p>Is it not possible to get the old behaviour by modifying the new implementation, rather than reverting entirely?</p>",
        "id": 216489301,
        "sender_full_name": "varkor",
        "timestamp": 1605197392
    },
    {
        "content": "<p>It should be.</p>",
        "id": 216489439,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1605197435
    },
    {
        "content": "<p>This feels similar in spirit to a monomorphisation-time error, i.e. there is a problem, but you're not going to know about it until you try to use it.</p>",
        "id": 216489520,
        "sender_full_name": "varkor",
        "timestamp": 1605197464
    },
    {
        "content": "<p>Which is to say that my initial reaction is that the old error was desirable.</p>",
        "id": 216489633,
        "sender_full_name": "varkor",
        "timestamp": 1605197512
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> I took a look at how we could modify the new implementation and <a href=\"https://github.com/rust-lang/rust/issues/78893#issuecomment-730646724\">left a few notes on github</a>. I'm curious about the <code>item_bounds</code> predicate, it'd be really nice (imo) if it returned something more like an <code>ExistentialPredicate</code>, so that we could readily apply the \"self type\" to other things. Is such a change plausible?</p>",
        "id": 217333366,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605821550
    },
    {
        "content": "<p>(cc <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>, as promised, working a bit through that issue <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span>)</p>",
        "id": 217333398,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605821565
    },
    {
        "content": "<p>Well, the <code>ExistentialPredicate</code> is too restrictive, since it can't represent <code>type A: PartialEq</code>, since PartialEq has a type parameter that defaults to <code>Self</code>. Using a bound variable as a placeholder would be possible, although there's not currently an easy way to substitute them.</p>",
        "id": 217389380,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1605871744
    },
    {
        "content": "<p>I'm not sure what existential types have to do with this, the example doesn't have any.</p>",
        "id": 217389429,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1605871788
    }
]