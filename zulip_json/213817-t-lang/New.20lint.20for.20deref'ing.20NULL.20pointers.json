[
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/83948\">https://github.com/rust-lang/rust/pull/83948</a> implements a new lint against deref'ing NULL pointers (because <a href=\"https://grep.app/search?q=!%20offset_%3Fof&amp;regexp=true&amp;filter[lang][0]=Rust\">it seems like people actually do that</a>). as far as I am concerned this is ready (r=me). Is any further process needed because this is a new lint?</p>",
        "id": 233938112,
        "sender_full_name": "RalfJ",
        "timestamp": 1618043191
    },
    {
        "content": "<p>(I first <a href=\"#narrow/stream/131828-t-compiler/topic/New.20lint.20for.20deref'ing.20a.20NULL.20pointer\">posted this in t-compiler</a> but was told lints are more lang team territory)</p>",
        "id": 233938133,
        "sender_full_name": "RalfJ",
        "timestamp": 1618043216
    },
    {
        "content": "<p>hey hey hey, don't put <code>bytemuck</code> in this dubious crowd! We demand an input instance from the invoker, no null pointer deref here.</p>",
        "id": 233999586,
        "sender_full_name": "Lokathor",
        "timestamp": 1618099051
    },
    {
        "content": "<p><code>offset_of</code> seems to be such a reoccurring problem that we should probably have it in core.</p>",
        "id": 234000069,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1618099466
    },
    {
        "content": "<p>or in the language...</p>",
        "id": 234003817,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618103494
    },
    {
        "content": "<p>It does seem a bit vindictive to be telling all these crates that they have UB while we still don't have a safe alternative. I don't think <code>addr_of!</code> is sufficient as long as <code>addr_of!((*NULL).field)</code> is considered UB</p>",
        "id": 234003914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618103608
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/213817-t-lang/topic/New.20lint.20for.20deref'ing.20NULL.20pointers/near/233999586\">said</a>:</p>\n<blockquote>\n<p>hey hey hey, don't put <code>bytemuck</code> in this dubious crowd! We demand an input instance from the invoker, no null pointer deref here.</p>\n</blockquote>\n<p>I didn't say <em>all</em> search results of that query were wrong. ;)</p>",
        "id": 234031571,
        "sender_full_name": "RalfJ",
        "timestamp": 1618134160
    },
    {
        "content": "<blockquote>\n<p>while we still don't have a safe alternative. </p>\n</blockquote>\n<p><a href=\"https://crates.io/crates/memoffset\">we do, though</a> -- or what do you mean?<br>\nUB doesn't typically have \"safe alternatives\"...</p>",
        "id": 234031593,
        "sender_full_name": "RalfJ",
        "timestamp": 1618134205
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span>  so how do we proceed here? does this need FCP or can I r+ the PR?</p>",
        "id": 234505526,
        "sender_full_name": "RalfJ",
        "timestamp": 1618409648
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/213817-t-lang/topic/New.20lint.20for.20deref'ing.20NULL.20pointers/near/234031593\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>while we still don't have a safe alternative. </p>\n</blockquote>\n<p><a href=\"https://crates.io/crates/memoffset\">we do, though</a> -- or what do you mean?<br>\nUB doesn't typically have \"safe alternatives\"...</p>\n</blockquote>\n<p>My understanding of the situation was that every existing implementation of <code>offset_of</code> is UB because we don't currently have the means to write it safely. Looking at the <code>memoffset</code> implementation, I think the version with <code>MaybeUninit</code> is safe, because it's actually measuring an allocated object, but I recall there are huge allocations and stack size limitations caused by this approach on debug mode.</p>",
        "id": 234507306,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618410325
    },
    {
        "content": "<blockquote>\n<p>I recall there are huge allocations and stack size limitations caused by this approach on debug mode.</p>\n</blockquote>\n<p>Yes, that is the major drawback of this approach.</p>",
        "id": 234519852,
        "sender_full_name": "RalfJ",
        "timestamp": 1618413867
    },
    {
        "content": "<blockquote>\n<p>Looking at the memoffset implementation, I think the version with MaybeUninit is safe</p>\n</blockquote>\n<p>FWIW I think we should call such code <a href=\"https://rust-lang.github.io/unsafe-code-guidelines/glossary.html#soundness-of-code--of-a-library\">\"sound\"</a>, not \"safe\", because it <em>does</em> use <code>unsafe</code> code internally so it is not \"safe\" in the sense of being implemented in safe code.</p>",
        "id": 234519947,
        "sender_full_name": "RalfJ",
        "timestamp": 1618413908
    },
    {
        "content": "<p>Sorry, Ralf, I expected us to talk about it in triage yesterday but the triage meeting got cancelled.</p>\n<p>The only thing that would come to mind here for me is whether this could happen in unreachable code frequently enough for it to be annoying.  (Perhaps in macros, but this seems like one of those lints that would happen often inside macros, so the usual \"just disable it in a macro\" is probably not the right choice here.)</p>\n<p>Personally, I think it should just go in because it's not a one-way door -- we can always tweak it (behaviour, severity, or even remove it entirely) later if needed, so I don't see a strict need for an FCP.  I'll motion that you can r+ it on my lang member \"seems reasonable\", the same way unstable library items can go in on a libs member \"seems reasonable\".</p>\n<p>cc <span class=\"user-group-mention\" data-user-group-id=\"1977\">@T-lang</span> in case there are dissenting opinions here.</p>",
        "id": 234522379,
        "sender_full_name": "scottmcm",
        "timestamp": 1618414743
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/213817-t-lang/topic/New.20lint.20for.20deref'ing.20NULL.20pointers/near/234519947\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Looking at the memoffset implementation, I think the version with MaybeUninit is safe</p>\n</blockquote>\n<p>FWIW I think we should call such code <a href=\"https://rust-lang.github.io/unsafe-code-guidelines/glossary.html#soundness-of-code--of-a-library\">\"sound\"</a>, not \"safe\", because it <em>does</em> use <code>unsafe</code> code internally so it is not \"safe\" in the sense of being implemented in safe code.</p>\n</blockquote>\n<p>What term do you use for \"this particular line on these inputs is not UB\" (i.e. the negation of UB) then? To me \"sound\" carries the connotation of being defined for all inputs, but UB is a term that applies to particular operations on particular inputs so they aren't appropriate as opposites, and \"defined\" is kind of ambiguous.</p>",
        "id": 234523627,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618415195
    },
    {
        "content": "<blockquote>\n<p>(Perhaps in macros, but this seems like one of those lints that would happen often inside macros, so the usual \"just disable it in a macro\" is probably not the right choice here.)</p>\n</blockquote>\n<p>I wondered about macros actually, we should potentially enable that \"report in external macro\" flag... but I think in many cases these will be <em>local</em> macros so I think for now we are good</p>",
        "id": 234523709,
        "sender_full_name": "RalfJ",
        "timestamp": 1618415218
    },
    {
        "content": "<blockquote>\n<p>What term do you use for \"this particular line on these inputs is not UB\" (i.e. the negation of UB) then? To me \"sound\" carries the connotation of being defined for all inputs, but UB is a term that applies to particular operations on particular inputs so they aren't appropriate as opposites, and \"defined\" is kind of ambiguous.</p>\n</blockquote>\n<p>Ah, since you were talking about the macro (and not the macro with some particular) I thought you meant \"for all inputs\".</p>",
        "id": 234524035,
        "sender_full_name": "RalfJ",
        "timestamp": 1618415317
    },
    {
        "content": "<p>for concrete executions, i.e. when inputs are known, I do indeed sometimes say \"safe\" though it is annoying that this is ambiguous with \"safe code\", so I also sometimes say \"UB-free\" or \"well-defined\". I wish we had a better positive term for this; then we could even use its negation for UB (which I think is a more helpful mindset when thinking about UB)</p>",
        "id": 234524170,
        "sender_full_name": "RalfJ",
        "timestamp": 1618415375
    },
    {
        "content": "<p>I find it hard to think about macros when talking about abstract inputs, although of course talking about fixed but arbitrary inputs is just linguistic smoke and mirrors for the same thing</p>",
        "id": 234524540,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618415502
    },
    {
        "content": "<p>So, if I'm understanding the proposed lint correctly, it <em>just</em> lints when it detects a dereference of a known-to-be-zero pointer?</p>",
        "id": 234526668,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1618416216
    },
    {
        "content": "<p>With my lang team hat on, that seems completely reasonable to me; I'd even support it being error-by-default rather than warn-by-default.</p>",
        "id": 234526723,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1618416240
    },
    {
        "content": "<p>It does need to be a lint that people can disable, because on some embedded architectures it may be legitimate to access memory at address 0. (Though I can imagine doing so may take some care to not trip the error paths in any helper functions.)</p>",
        "id": 234526868,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1618416287
    },
    {
        "content": "<p>actually under rust and llvm rules it's never legitimate to deref 0</p>",
        "id": 234528516,
        "sender_full_name": "Lokathor",
        "timestamp": 1618416875
    },
    {
        "content": "<p>even if 0 is an address on the device, you'd have to use inline asm to do it</p>",
        "id": 234528552,
        "sender_full_name": "Lokathor",
        "timestamp": 1618416895
    },
    {
        "content": "<p>(note: it is <em>possible</em> to make an address other than 0 be the null address in llvm, and then you could deref 0 in that case, but rustc does not do this, so you cannot deref 0)</p>",
        "id": 234528793,
        "sender_full_name": "Lokathor",
        "timestamp": 1618416983
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/New.20lint.20for.20deref'ing.20NULL.20pointers/near/234526668\">said</a>:</p>\n<blockquote>\n<p>So, if I'm understanding the proposed lint correctly, it <em>just</em> lints when it detects a dereference of a known-to-be-zero pointer?</p>\n</blockquote>\n<p>yes, but: \"dereference\" is defined to include <code>addr_of!(*NULL)</code></p>",
        "id": 234535279,
        "sender_full_name": "RalfJ",
        "timestamp": 1618419396
    },
    {
        "content": "<p>...that's unfortunate.</p>",
        "id": 234535306,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1618419411
    },
    {
        "content": "<p>that was part of the point, since our current UB rules also work that way</p>",
        "id": 234535352,
        "sender_full_name": "RalfJ",
        "timestamp": 1618419426
    },
    {
        "content": "<p>Is that because LLVM defines it as such, and we can't really work around that?</p>",
        "id": 234535361,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1618419429
    },
    {
        "content": "<p>Or is that because we use gep inbounds, and we'd need a new variant of gep to handle that efficiently?</p>",
        "id": 234535412,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1618419456
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/New.20lint.20for.20deref'ing.20NULL.20pointers/near/234526868\">said</a>:</p>\n<blockquote>\n<p>It does need to be a lint that people can disable, because on some embedded architectures it may be legitimate to access memory at address 0. (Though I can imagine doing so may take some care to not trip the error paths in any helper functions.)</p>\n</blockquote>\n<p>That is something that it'd be nice for Rust to support, but currently it doesn't (there are open issues about this somewhere... EDIT: <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/29\">https://github.com/rust-lang/unsafe-code-guidelines/issues/29</a>)</p>",
        "id": 234535426,
        "sender_full_name": "RalfJ",
        "timestamp": 1618419463
    },
    {
        "content": "<p>Is it legal to use <code>std::ptr::read</code> or <code>std::ptr::write</code> with a NULL?</p>",
        "id": 234535629,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1618419531
    },
    {
        "content": "<p>Or is that UB as well?</p>",
        "id": 234535637,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1618419537
    },
    {
        "content": "<p>(ditto the volatile variants)</p>",
        "id": 234535657,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1618419547
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/New.20lint.20for.20deref'ing.20NULL.20pointers/near/234535361\">said</a>:</p>\n<blockquote>\n<p>Is that because LLVM defines it as such, and we can't really work around that?</p>\n</blockquote>\n<p>FYI there was a long discussion about this <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/raw.20ref.20semantics\">here on Zulip</a> but it's a bit long to reread^^</p>",
        "id": 234535689,
        "sender_full_name": "RalfJ",
        "timestamp": 1618419557
    },
    {
        "content": "<p>(that was about <code>addr_of!(*NULL)</code>)</p>",
        "id": 234535750,
        "sender_full_name": "RalfJ",
        "timestamp": 1618419582
    },
    {
        "content": "<p>Long-term, I'd love for it to be legal to manipulate NULL pointers as long as the net effect is not a dereference at runtime.</p>",
        "id": 234535866,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1618419611
    },
    {
        "content": "<p>actually accessing NULL is a rather different topic, I propose not mixing it into this thread but reading <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/29\">https://github.com/rust-lang/unsafe-code-guidelines/issues/29</a> first</p>",
        "id": 234535877,
        "sender_full_name": "RalfJ",
        "timestamp": 1618419612
    },
    {
        "content": "<p>according to the docs in the stdlib, read/write/volatile_op all require a \"valid\" ptr, and null is never a valid ptr.</p>\n<p>and according to core internals, 0 is the null ptr</p>",
        "id": 234536067,
        "sender_full_name": "Lokathor",
        "timestamp": 1618419671
    },
    {
        "content": "<p>as for creating NULL places but not accessing them, like <code>addr_of!(*NULL)</code>, the issue is as follows: the LLVM IR that we generate for <code>addr_of!(*(NULL as *const Struct).field)</code> makes that UB (except when the field has offset 0). The LLVM IR for <code>addr_of!(*NULL)</code> does not. But still, to make the UB rules simpler and since it is easier to relax them than to tighten them, the UB rules currently say that creating a NULL place is UB, which rules out <code>*NULL</code> even in place expression context.</p>",
        "id": 234536102,
        "sender_full_name": "RalfJ",
        "timestamp": 1618419688
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/New.20lint.20for.20deref'ing.20NULL.20pointers/near/234535306\">said</a>:</p>\n<blockquote>\n<p>...that's unfortunate.</p>\n</blockquote>\n<p>what is most unfortunate is that \"dereference\" means different things to different people. :/<br>\n<a href=\"https://doc.rust-lang.org/nightly/reference/expressions/operator-expr.html#the-dereference-operator\">The Reference</a> is quite clear that <code>*ptr</code> is a \"dereference expression\", and this certainly includes its occurrence in <code>addr_of!(*ptr)</code>. But still many people seem to use \"dereference\" specifically for when memory is actually accessed.</p>",
        "id": 234536651,
        "sender_full_name": "RalfJ",
        "timestamp": 1618419880
    },
    {
        "content": "<p>Myself included, yes. :)</p>",
        "id": 234541696,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1618421763
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> what term would you use to refer to <code>*expr</code> expressions in general, disregarding whether they occur in place or value context?</p>",
        "id": 234640949,
        "sender_full_name": "RalfJ",
        "timestamp": 1618477454
    },
    {
        "content": "<p>prefix-star operator?</p>",
        "id": 234641866,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1618477942
    },
    {
        "content": "<p>Maybe it can be qualified either way? e.g. value-deref or place-deref</p>",
        "id": 234701422,
        "sender_full_name": "cuviper",
        "timestamp": 1618501509
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I would probably just call them something like \"star expressions\"; I don't know a good general term. If there's precedent from some other language semantics, following precedent is probably a good idea.</p>",
        "id": 234711466,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1618505034
    },
    {
        "content": "<p>But also, I tend to think of the difference between place or value context as only coming up at the end. I think of it always happening in place terms, and then at the end if you need a value you do any dereferences that remain and weren't cancelled out.</p>",
        "id": 234712040,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1618505226
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/New.20lint.20for.20deref'ing.20NULL.20pointers/near/234712040\">said</a>:</p>\n<blockquote>\n<p>But also, I tend to think of the difference between place or value context as only coming up at the end. I think of it always happening in place terms, and then at the end if you need a value you do any dereferences that remain and weren't cancelled out.</p>\n</blockquote>\n<p>yeah... in terms of formally defining a semantics or implementing it in Miri, \"cancelling out\" is not a good foundation</p>",
        "id": 234929258,
        "sender_full_name": "RalfJ",
        "timestamp": 1618611301
    },
    {
        "content": "<p>it's much easier when each operator (including <code>*</code> and <code>&amp;</code>) just does a single well-defined thing under all circumstances</p>",
        "id": 234929322,
        "sender_full_name": "RalfJ",
        "timestamp": 1618611330
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/New.20lint.20for.20deref'ing.20NULL.20pointers/near/234711466\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> I would probably just call them something like \"star expressions\"; I don't know a good general term. If there's precedent from some other language semantics, following precedent is probably a good idea.</p>\n</blockquote>\n<p>C says</p>\n<blockquote>\n<p>The unary <code>*</code> operator denotes indirection.</p>\n</blockquote>",
        "id": 234929686,
        "sender_full_name": "RalfJ",
        "timestamp": 1618611577
    },
    {
        "content": "<p>Indeed. And notably, in C/++, <code>int* i = NULL; (void)*i;</code> is UB even though *i is never read.</p>",
        "id": 234932475,
        "sender_full_name": "Connor Horman",
        "timestamp": 1618613403
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"257758\">Connor Horman</span> <a href=\"#narrow/stream/213817-t-lang/topic/New.20lint.20for.20deref'ing.20NULL.20pointers/near/234932475\">said</a>:</p>\n<blockquote>\n<p>Indeed. And notably, in C/++, <code>int* i = NULL; (void)*i;</code> is UB even though *i is never read.</p>\n</blockquote>\n<p>so, regarding that... I am very confused by the C standard. It explicitly says (in a non-normative footnote)</p>\n<blockquote>\n<p>&amp;*E  is equivalent to E (even if E is a null pointer)</p>\n</blockquote>\n<p>Which IMO quite explicitly says that <code>&amp;*NULL</code> is allowed. This can only be the case if creating a NULL place is allowed. I would thus expected that your example is also allowed (assuming no place-to-value coercion is introduced here, which is my interpretation of your \"<code>*i</code> is never read\").</p>\n<p>However, it also says, in normative text</p>\n<blockquote>\n<p>If an invalid value has been assigned to the pointer, the behavior of the unary * operator is undefined.</p>\n</blockquote>\n<p>and then in the same non-normative footnote as above</p>\n<blockquote>\n<p>Among the invalid values for dereferencing a pointer by the unary * operator are a null pointer,</p>\n</blockquote>\n<p>I don't know how to make sense of this.</p>",
        "id": 234972691,
        "sender_full_name": "RalfJ",
        "timestamp": 1618648876
    },
    {
        "content": "<p>My understanding of <code>(void)e;</code> is that it is explicitly reading (making an rvalue from) a place, like <code>let _x = *null();</code></p>",
        "id": 234974213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618650622
    },
    {
        "content": "<p>so you are saying what <span class=\"user-mention\" data-user-id=\"257758\">@Connor Horman</span> said is wrong and this <em>does</em> read <code>*i</code> (and that's why it is UB)?</p>",
        "id": 234974441,
        "sender_full_name": "RalfJ",
        "timestamp": 1618650904
    },
    {
        "content": "<p>but that still leaves the problem that the standard seems to contradict itself.^^</p>",
        "id": 234974449,
        "sender_full_name": "RalfJ",
        "timestamp": 1618650914
    },
    {
        "content": "<p><a href=\"https://timsong-cpp.github.io/cppwp/n4861/expr.static.cast#6\">https://timsong-cpp.github.io/cppwp/n4861/expr.static.cast#6</a></p>\n<blockquote>\n<p>Any expression can be explicitly converted to type cv void, in which case it becomes a discarded-value expression.</p>\n</blockquote>\n<p><a href=\"https://timsong-cpp.github.io/cppwp/n4861/expr.prop#expr.context-2\">https://timsong-cpp.github.io/cppwp/n4861/expr.prop#expr.context-2</a></p>\n<blockquote>\n<p>In some contexts, an expression only appears for its side effects. Such an expression is called a discarded-value expression. The array-to-pointer and function-to-pointer standard conversions are not applied. The lvalue-to-rvalue conversion is applied if and only if the expression is a glvalue of volatile-qualified type and it is one of the following:<br>\n...</p>\n<ul>\n<li>indirection,</li>\n</ul>\n</blockquote>",
        "id": 234974552,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618651004
    },
    {
        "content": "<p>So I think this means that lvalue-to-rvalue conversion <em>is</em> applied</p>",
        "id": 234974592,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618651063
    },
    {
        "content": "<p>hence <code>(void)*NULL;</code> is UB</p>",
        "id": 234974597,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618651073
    },
    {
        "content": "<p>oh wait, it has to be a \"glvalue of volatile-qualified type\"</p>",
        "id": 234974650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618651104
    },
    {
        "content": "<p>I have no idea if *NULL is one of those things</p>",
        "id": 234974661,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618651124
    },
    {
        "content": "<p>okay I think that means it's <code>*ptr</code> where <code>volatile int *ptr;</code> or such</p>",
        "id": 234974897,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618651388
    },
    {
        "content": "<p>so that clause doesn't apply</p>",
        "id": 234974906,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618651402
    },
    {
        "content": "<p>I can't find any evidence for <span class=\"user-mention\" data-user-id=\"257758\">@Connor Horman</span> 's claim by looking at the standard. It seems like there is no rvalue conversion, and the lvalue <code>*NULL</code> itself is not UB to form, or at least I think so based on related clauses</p>",
        "id": 234975142,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618651682
    },
    {
        "content": "<p>Oh goodie, this is an <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#232\">open issue</a></p>",
        "id": 234975182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618651695
    },
    {
        "content": "<p>(note that you are quoting from the C++ spec above, I was looking at C)</p>",
        "id": 234975334,
        "sender_full_name": "RalfJ",
        "timestamp": 1618651898
    },
    {
        "content": "<p>oh gosh, of course they are different</p>",
        "id": 234975391,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618651956
    },
    {
        "content": "<p>I took a look at the C standard where you say, and I also have no idea how to deduce \"Thus, &amp;*E is equivalent to E (even if E is a null pointer)\" from \"If an invalid value has been assigned to the pointer, the behavior of the unary * operator is undefined.\"</p>",
        "id": 234975736,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618652322
    },
    {
        "content": "<p>Also note that the standard uses the verb \"dereferencing\" here (\"Among the invalid values for dereferencing a pointer\") which does not appear in the normative paragraph it refers to; I am not sure if this is deliberate (and means something other than \"applying the indirection operator\") or not.</p>",
        "id": 234976461,
        "sender_full_name": "RalfJ",
        "timestamp": 1618653165
    },
    {
        "content": "<p>this is the <em>only</em> time the string \"dereferenc\" appears in the standard, except in the glossary where it says \"dereference, see indirection operator\", so I assume these are meant to be synonyms (Cc <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> for precedent for what this term means)</p>",
        "id": 234976481,
        "sender_full_name": "RalfJ",
        "timestamp": 1618653214
    },
    {
        "content": "<p>I think the previous clause 3 is applying:</p>\n<blockquote>\n<p>The unary <code>&amp;</code> operator yields the address of its operand. ... If the  operand  is  the  result  of  a  unary <code>*</code> operator, neither  that  operator  nor  the <code>&amp;</code> operator  is  evaluated  and  the  result  is  as  if  both  were omitted,  except  that  the  constraints  on  the  operators  still  apply  and  the  result  is  not  an lvalue.</p>\n</blockquote>\n<p>I think \"the constraints on the operators\" are the things mentioned in the previous 2 clauses:</p>\n<blockquote>\n<ul>\n<li>The operand of the unary <code>&amp;</code> operator shall be either a function designator, the result of a <code>[]</code> or unary <code>*</code> operator, or an lvalue...</li>\n<li>The operand of the unary <code>*</code> operator shall have pointer type.</li>\n</ul>\n</blockquote>",
        "id": 234977329,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618654097
    },
    {
        "content": "<p>That is, clause 3 says that <code>&amp;*NULL</code> doesn't evaluate <code>*NULL</code> as an lvalue (which would be UB) but instead directly returns <code>NULL</code>. But in <code>(void)*NULL;</code> clause 3 doesn't apply, so the result is UB</p>",
        "id": 234977410,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618654187
    },
    {
        "content": "<p>non-compositional semantics FTW</p>",
        "id": 234977421,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618654201
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/213817-t-lang/topic/New.20lint.20for.20deref'ing.20NULL.20pointers/near/234977421\">said</a>:</p>\n<blockquote>\n<p>non-compositional semantics FTW</p>\n</blockquote>\n<p>yeah :(</p>",
        "id": 234978331,
        "sender_full_name": "RalfJ",
        "timestamp": 1618655098
    }
]