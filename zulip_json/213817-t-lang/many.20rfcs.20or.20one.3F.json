[
    {
        "content": "<p>I have a set of changes I'd like to make around error handling that are somewhat separable and I'm wondering if anyone who has experience with the RFC process has a recommendation on if I should write this as one RFC or many.</p>\n<p>Specifically, the changes I want to make are:</p>\n<ul>\n<li>Add a generic member access function to the error trait that lets you access types by type_id and then downcast them</li>\n<li>Remove the <code>backtrace</code> fn from the error trait</li>\n<li>move the error trait to core</li>\n<li>add a track trait or something similar tied to the <code>Try</code> trait for types to know when they've been propogated so they can generate error return traces via <code>#[track_caller]</code> and reporters can use generic member access to extract this location data</li>\n</ul>",
        "id": 196217109,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588615218
    },
    {
        "content": "<p>so like, the return trace and move error trait to core both depend on the member access stuff</p>",
        "id": 196217460,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588615372
    },
    {
        "content": "<p>(\"An official way to do Error in <code>core</code>\" is highly desired, but I don't have any thoughts on the RFC implications.)</p>",
        "id": 196217526,
        "sender_full_name": "Lokathor",
        "timestamp": 1588615403
    },
    {
        "content": "<p>I'm unsure whether I should write this as 3 rfcs or 1</p>",
        "id": 196217538,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588615410
    },
    {
        "content": "<p>There are tradeoffs.</p>\n<ul>\n<li>On the one hand, a single RFC will absolutely get bikeshedded much more, and every objection to one individual piece will become an objection to the whole thing, making it difficult to resolve; it's often easier to get a hyper-focused RFC through than an omnibus one.</li>\n<li>On the other hand, separate RFCs will raise the question of \"but how do these interact with these other features\".</li>\n</ul>",
        "id": 196217657,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588615448
    },
    {
        "content": "<p>In my opinion, I'd say \"if the features can be entirely orthogonal, write separate RFCs, it'll make your life so much easier\".</p>",
        "id": 196217681,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588615468
    },
    {
        "content": "<p>also, I wrote the entire first bit already but used a simpler solution that I think we should actually use, is it okay to mark the proposed solution as a placeholder/backup and point to another solution as the preferred one assuming some research is put into it</p>",
        "id": 196217705,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588615481
    },
    {
        "content": "<p>okay, yea they're definitely orthogonal, cross referencing RFCs it is</p>",
        "id": 196217767,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588615520
    },
    {
        "content": "<p>But if the features <em>do</em> interact or depend on each other, I think it's preferable to either have one RFC, or at the very least if it's a fairly simple dependency just submit the first and wait before submitting the second.</p>",
        "id": 196217781,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588615532
    },
    {
        "content": "<p>well, the error return trace one is pretty independent its just implementing it without first doing the generic member access means you'd have to find a solution to the member access concern</p>",
        "id": 196217905,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588615577
    },
    {
        "content": "<p>the move the error trait to core i think entirely depends on the generic member access to be tenable</p>",
        "id": 196217939,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588615602
    },
    {
        "content": "<p>Also, first impression: <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> to removing <code>backtrace</code> (yay!), <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> to moving <code>Error</code> to <code>core</code> (depending on details).</p>",
        "id": 196217997,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588615638
    },
    {
        "content": "<p>k im gonna focus on the main one then, because that clears the way to everything else</p>",
        "id": 196218005,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588615643
    },
    {
        "content": "<p>Regarding error return traces, that one I feel interacts heavily with the concept of \"context\" as well.</p>",
        "id": 196218052,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588615667
    },
    {
        "content": "<p>I'll add that the first one paves the way to moving error to core, without writing an RFC about moving it to core yet</p>",
        "id": 196218060,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588615672
    },
    {
        "content": "<p>I would <em>love</em> to have a built-in concept of \"add context to an error\", somehow.</p>",
        "id": 196218131,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588615692
    },
    {
        "content": "<p>Or error chaining.</p>",
        "id": 196218144,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588615699
    },
    {
        "content": "<p>Something along those lines.</p>",
        "id": 196218153,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588615703
    },
    {
        "content": "<p>well this wouldn't be tied to that</p>",
        "id": 196218170,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588615711
    },
    {
        "content": "<p>this is kinda the flip side of that feature</p>",
        "id": 196218181,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588615716
    },
    {
        "content": "<p>Well, there's one interaction.</p>",
        "id": 196218186,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588615719
    },
    {
        "content": "<p>this is how to get context out of an error</p>",
        "id": 196218203,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588615728
    },
    {
        "content": "<p>i guess the <code>track</code> trait is in essence the flip side</p>",
        "id": 196218243,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588615743
    },
    {
        "content": "<p>Sometimes when people \"downcast\" an error they are actually looking for a previous error in the chain, not a trait of the error thing itself.</p>",
        "id": 196218253,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588615746
    },
    {
        "content": "<p>of adding generic context</p>",
        "id": 196218277,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588615762
    },
    {
        "content": "<p>yea</p>",
        "id": 196218325,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588615786
    },
    {
        "content": "<p>So, for instance, today, for the first time, I wrote code that uses <code>anyhow</code>'s <code>downcast</code> method, to get a <code>std::io::Error</code> out of an <code>anyhow::Error</code> iff it had one, so that I could get an errno for a protocol that needed errno values.</p>",
        "id": 196218383,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588615803
    },
    {
        "content": "<p>```    fn downcast_refchain&lt;T: Error + Sized + 'static&gt;(&amp;self) -&gt; Option&lt;&amp;T&gt;;</p>\n<div class=\"codehilite\"><pre><span></span><code>\n</code></pre></div>",
        "id": 196218410,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588615817
    },
    {
        "content": "<p>gdi</p>",
        "id": 196218416,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588615819
    },
    {
        "content": "<p>Personally I would like the core error trait to not have backtraces or other payloads because I like dead-simple error enums. I would specifically like to avoid \"contexts\" or other \"notes on what happened\" in the error because I would like the error construction to basically be an error code and nothing else.</p>",
        "id": 196218469,
        "sender_full_name": "Lokathor",
        "timestamp": 1588615849
    },
    {
        "content": "<p>is it just iterating through the sources and downcasting? <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span></p>",
        "id": 196218484,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588615856
    },
    {
        "content": "<p>Yes, I think so.</p>",
        "id": 196218505,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588615864
    },
    {
        "content": "<p>because if so I have the same thing in my errtools crate</p>",
        "id": 196218508,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588615866
    },
    {
        "content": "<p>which is what i failed pasting above</p>",
        "id": 196218534,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588615878
    },
    {
        "content": "<p>Effectively, \"if this <code>anyhow::Error</code> came from a <code>std::io::Error</code>, use that, otherwise, wrap this <code>anyhow::Error</code> in a <code>std::io::Error</code> with <code>ErrorKind</code> <code>Other</code>\".</p>",
        "id": 196218554,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588615887
    },
    {
        "content": "<p>(I think you need a newline after the three backticks)</p>",
        "id": 196218573,
        "sender_full_name": "Lokathor",
        "timestamp": 1588615897
    },
    {
        "content": "<p>yea, i just always forget</p>",
        "id": 196218602,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588615912
    },
    {
        "content": "<p>i feel like a generic \"add context to an error\" trait would be fraught though</p>",
        "id": 196218772,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588615982
    },
    {
        "content": "<p>because presumably you'd need a default impl to ignore that info</p>",
        "id": 196218796,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588615992
    },
    {
        "content": "<p>and it would be hard to know if the error you're adding context to can even handle it</p>",
        "id": 196218823,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588616008
    },
    {
        "content": "<p>i guess if it acknowledges that it handled it</p>",
        "id": 196218847,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588616017
    },
    {
        "content": "<p>eeh, ill worry about this later as part of the Track stuff</p>",
        "id": 196218863,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588616026
    },
    {
        "content": "<p>okay but <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> re earlier question that I think got missed</p>",
        "id": 196219069,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588616111
    },
    {
        "content": "<p>i have two possible implementations for my RFC</p>",
        "id": 196219087,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588616124
    },
    {
        "content": "<p>and theres one that i think is better because it supports DSTs but its definitely not nearly as clean looking</p>",
        "id": 196219115,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588616142
    },
    {
        "content": "<p>and i feel like it would distract from the RFC</p>",
        "id": 196219132,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588616153
    },
    {
        "content": "<p>do you think its cool to use the backup impl as the example throughout the RFC but then in the implementation point to the second solution as preferred assuming it is sound</p>",
        "id": 196219262,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588616197
    },
    {
        "content": "<p>I think that'll <em>heavily</em> confuse people.</p>",
        "id": 196219339,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588616241
    },
    {
        "content": "<p>:/</p>",
        "id": 196219350,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588616246
    },
    {
        "content": "<p>yeaaa</p>",
        "id": 196219351,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588616247
    },
    {
        "content": "<p>If you have a preferred solution, I would emphasize that, even if you have to say \"some details glossed over, see this section\".</p>",
        "id": 196219379,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588616265
    },
    {
        "content": "<p>Forward references for complicated bits are fine.</p>",
        "id": 196219385,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588616270
    },
    {
        "content": "<p>i just dont want to have to rewrite everything</p>",
        "id": 196219386,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588616271
    },
    {
        "content": "<p>ugh</p>",
        "id": 196219390,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588616273
    }
]