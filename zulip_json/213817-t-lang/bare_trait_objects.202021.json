[
    {
        "content": "<p>Can we change trait objects without <code>dyn</code> to either deny by default or even a hard error in the next edition?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"kp\">&amp;</span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<div class=\"codehilite\"><pre><span></span><code>warning: trait objects without an explicit `dyn` are deprecated\n --&gt; src/lib.rs:1:17\n  |\n1 | pub fn test(_: &amp;Iterator&lt;Item = u32&gt;) {}\n  |                 ^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn Iterator&lt;Item = u32&gt;`\n  |\n</code></pre></div>",
        "id": 211101435,
        "sender_full_name": "lcnr",
        "timestamp": 1600935621
    },
    {
        "content": "<p>changing it to a hard error allows us to more easily improve the error message for <code>T: Iterator&lt;Item=Result&lt;V, E&gt; + 'a&gt;</code></p>",
        "id": 211101509,
        "sender_full_name": "lcnr",
        "timestamp": 1600935682
    },
    {
        "content": "<p>I think we could move to deny-by-default in this edition and definitely to a hard error in the next one</p>",
        "id": 211101952,
        "sender_full_name": "oli",
        "timestamp": 1600935987
    },
    {
        "content": "<p>I think hard error in vNext is allowed since we're currently warning about it in vCurrent.  I'd personally be fine with it.</p>",
        "id": 211178408,
        "sender_full_name": "scottmcm",
        "timestamp": 1600975510
    },
    {
        "content": "<p>The warning just says it's deprecated, so IMO it's too aggressive to make that an error in the current edition.</p>",
        "id": 211179010,
        "sender_full_name": "cuviper",
        "timestamp": 1600975817
    },
    {
        "content": "<p>But I'm fine with changing that in 2021</p>",
        "id": 211179055,
        "sender_full_name": "cuviper",
        "timestamp": 1600975842
    },
    {
        "content": "<p>Yeah, I think we can go lint-warn -&gt; error in one edition, we don't need to go lint-warn -&gt; lint-deny -&gt; error over two editions.</p>",
        "id": 211182293,
        "sender_full_name": "scottmcm",
        "timestamp": 1600977548
    },
    {
        "content": "<p>The original edition RFC specifically said two steps from syntax allowed to syntax not allowed.</p>",
        "id": 211188976,
        "sender_full_name": "isHavvy",
        "timestamp": 1600981182
    },
    {
        "content": "<p>As I understand it that meant two edition steps, which would be the case here. Allowed in 2015, linted in 2018, forbidden in 2021</p>",
        "id": 211190606,
        "sender_full_name": "oli",
        "timestamp": 1600981945
    },
    {
        "content": "<p>is the lint warn by default now? it wasn't for a long time, so i'm not sure you can really say \"linted in 2018\" if it's \"a lint exists but it's allowed by default\".</p>\n<p>(that said i'm weakly in favor of the change)</p>",
        "id": 211405620,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1601195940
    },
    {
        "content": "<p>afaik we always had it on warn in edition 2018?</p>",
        "id": 211405635,
        "sender_full_name": "lcnr",
        "timestamp": 1601196000
    },
    {
        "content": "<p>or am I missing something here</p>",
        "id": 211405673,
        "sender_full_name": "lcnr",
        "timestamp": 1601196005
    },
    {
        "content": "<p>i know at the start of rust 2018 you had to use rust_2018_idioms to get it, but perhaps since then it changed to warn by default.</p>",
        "id": 211405756,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1601196181
    },
    {
        "content": "<p>it was changed to warn by default in 1.37 <a href=\"https://github.com/rust-lang/rust/pull/61203\">https://github.com/rust-lang/rust/pull/61203</a></p>",
        "id": 211405821,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1601196257
    },
    {
        "content": "<p>The 2021 RFC states that 2018 Idiom lints will become warn-by-default (before 2021) and then deny-by-default (&gt;= 2021)</p>",
        "id": 212426842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601990855
    },
    {
        "content": "<p>Just posting this as food for thought: <a href=\"https://github.com/rust-lang/rust/pull/77502#discussion_r499172677\">https://github.com/rust-lang/rust/pull/77502#discussion_r499172677</a><br>\nDiagnostics for const generics could be improved if we forbid <code>bare_trait_objects</code> altogether, because they're really awkward to disambiguate from expressions that have not been <code>{}</code>'d.</p>",
        "id": 214234117,
        "sender_full_name": "varkor",
        "timestamp": 1603393750
    },
    {
        "content": "<p>This would mean changing it from an idiom lint to forbidden syntax altogether, though.</p>",
        "id": 214234200,
        "sender_full_name": "varkor",
        "timestamp": 1603393797
    },
    {
        "content": "<p>I would personally be fine doing that in 2021 -- const generics definitely seem important enough.</p>",
        "id": 214234341,
        "sender_full_name": "simulacrum",
        "timestamp": 1603393858
    },
    {
        "content": "<p>This has been warn for long enough in 2018 that I have no problems with moving this to a hard error in 2021.  It makes good sense to me.</p>",
        "id": 214235136,
        "sender_full_name": "scottmcm",
        "timestamp": 1603394195
    },
    {
        "content": "<p>Hmm this reminds me that one of the things we plan to do for 2021 edition is making the idiom lints warn by default</p>",
        "id": 214240063,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603396483
    },
    {
        "content": "<p>we should probably...do that</p>",
        "id": 214240073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603396486
    },
    {
        "content": "<p>I too would be in favor  of removing bare trait objects in 2021</p>",
        "id": 214240091,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603396494
    },
    {
        "content": "<p>we need to get a bit more organized about some of these changes</p>",
        "id": 214240109,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603396501
    },
    {
        "content": "<p>I'm not sure if we need an RFC or what precisely for this sort of change, seems like maybe an RFC</p>",
        "id": 214240157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603396526
    },
    {
        "content": "<p>I can write an RFC to go through the formal process if everyone's generally in favour.</p>",
        "id": 214240397,
        "sender_full_name": "varkor",
        "timestamp": 1603396636
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> if you write up a quick proposal on lang-team repo we can discuss in a triage meeting perhaps, or maybe people will chime in here</p>",
        "id": 214242253,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603397499
    },
    {
        "content": "<p>Let's see if this thread gets any more comments; otherwise I'll make a proposal <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 214242333,
        "sender_full_name": "varkor",
        "timestamp": 1603397532
    },
    {
        "content": "<p>I'd be in favor of making this a hard error in 2021, yes.</p>",
        "id": 214260639,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603410147
    },
    {
        "content": "<p>As long as we don't make it a hard error in previous editions.</p>",
        "id": 214260643,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603410156
    },
    {
        "content": "<p>(which means the parsers for those still have to handle it.)</p>",
        "id": 214260649,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603410161
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/bare_trait_objects.202021/near/214260649\">said</a>:</p>\n<blockquote>\n<p>(which means the parsers for those still have to handle it.)</p>\n</blockquote>\n<p>The way I see it, IIUC, is that older edition may thus still be required to provide <code>{ ... }</code> to disambiguate const generic params, but from 2021 edition onwards that part can be skipped thanks to bare trait objects syntax being rejected altogether.</p>",
        "id": 214297171,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1603449400
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 214297197,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1603449423
    },
    {
        "content": "<p>That's not the problem. Const arguments will always require <code>{}</code>, but we can provide better recovery messages if bare trait objects are forbidden. This will mean we will get better diagnostics in 2021 edition, but the syntax for const generics itself won't change.</p>",
        "id": 214299325,
        "sender_full_name": "varkor",
        "timestamp": 1603451100
    },
    {
        "content": "<p>I've created a meeting proposal: <a href=\"https://github.com/rust-lang/lang-team/issues/65\">https://github.com/rust-lang/lang-team/issues/65</a></p>",
        "id": 214784304,
        "sender_full_name": "varkor",
        "timestamp": 1603846557
    }
]