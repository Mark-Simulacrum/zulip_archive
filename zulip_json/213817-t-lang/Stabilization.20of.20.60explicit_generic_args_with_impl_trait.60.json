[
    {
        "content": "<p>Hi! I want to propose stabilization of <a href=\"https://github.com/rust-lang/rust/issues/83701\"><code>#![feature(explicit_generic_args_with_impl_trait)]</code></a>. As a reminder it allows the <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=74a2888789d5b71cae31889b2147e7de\">following</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">collect</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">IntoIterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">().</span><span class=\"n\">collect</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// Currently, on stable turbofish is not allowed even for normal generic</span>\n<span class=\"c1\">// parameters if there is at least one APIT in the signature.</span>\n<span class=\"n\">collect</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u16</span><span class=\"o\">&gt;</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">]);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It removes an old problem with APIT, which probably made it so rare to see anywhere. Previously it was said to be too new for stabilization, but since then almost a year has passed, so I don't think it's a problem anymore.</p>\n<p>What would be the path towards stabilization? :)</p>",
        "id": 270916184,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1644187527
    },
    {
        "content": "<p>I think the big question for it is whether there should be a path for switching things from explicit generics to APIT and vice versa.  I know some people have wanted that.</p>\n<p>I do like the idea of not allowing specifying the types that realistically you don't ever turbofish anyway (I like <code>impl Fn</code> alot, for example), but then I want to do that for <code>core</code> stuff too where I can't because the generics are frozen as they are forever.</p>",
        "id": 270916350,
        "sender_full_name": "scottmcm",
        "timestamp": 1644187739
    },
    {
        "content": "<p>Regardless, we'd need to settle the ordering question (how to interleave them) presumably, right? My guess is that a good next step is for someone to summarize the various places and make choices that seem good to them (which could then get discussed).</p>",
        "id": 270916431,
        "sender_full_name": "simulacrum",
        "timestamp": 1644187843
    },
    {
        "content": "<p>One point why there shouldn't be an option to set APIT types via turbofish is as follows: when APIT is a type that you don't usually want to name (<code>Fn</code>, <code>Iterator</code>, etc) but the generic is a type that you may want to set explicitly, then not having to write an additional <code>_</code> is a good thing:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">run_with_default</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Default</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">f</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;</span>::<span class=\"n\">default</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// when you can't set `impl Trait` with turbofish, but can set the normal generics</span>\n<span class=\"n\">run_with_default</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u16</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"c1\">// when you can set `impl Trait`&amp; normal generics</span>\n<span class=\"n\">run_with_default</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 270916746,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1644188286
    },
    {
        "content": "<p>I think defining a fixed order (apit after declared) makes sense.</p>",
        "id": 270916748,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1644188303
    },
    {
        "content": "<p>I actually <em>like</em> that it's impossible to mention the APIT generics in turbofish, BTW.  It's really nice for semver.</p>",
        "id": 270916913,
        "sender_full_name": "scottmcm",
        "timestamp": 1644188517
    },
    {
        "content": "<p>Especially since it's impossible to add \"local variables\" in bounds without adding them to the generics list, which is really really unfortunate -- see changes like <a href=\"https://github.com/rust-lang/rust/pull/91286/files#r757758209\">https://github.com/rust-lang/rust/pull/91286/files#r757758209</a> that I could only do because it was unstable</p>",
        "id": 270916969,
        "sender_full_name": "scottmcm",
        "timestamp": 1644188583
    },
    {
        "content": "<p>Order of APITs is not really clear though. For example: what version should compile here (if we decide to also allow setting APITs)?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">Tuple</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nc\">Tuple</span><span class=\"o\">&lt;</span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// as reads in the impl</span>\n<span class=\"n\">f</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"kt\">str</span><span class=\"o\">&gt;</span><span class=\"p\">((</span><span class=\"s\">\"s\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"k\">u8</span><span class=\"p\">));</span><span class=\"w\"></span>\n\n<span class=\"c1\">// order in the type?</span>\n<span class=\"n\">f</span>::<span class=\"o\">&lt;&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"k\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"s\"</span><span class=\"p\">));</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Personally I think that allowing to set the types of APITs via turbofish would be just confusing and not really helpful.</p>",
        "id": 270917053,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1644188683
    },
    {
        "content": "<p>One way forward-compatible with Josh's possibility of specifying them all would be to allow <code>::&lt;u16, ..&gt;</code> for \"and there are zero or more additional generic arguments\"</p>",
        "id": 270917077,
        "sender_full_name": "scottmcm",
        "timestamp": 1644188718
    },
    {
        "content": "<p>That might be nice to have for normal generics too, though would certainly encourage putting important generics first, which I don't know that things are currently following.</p>",
        "id": 270917141,
        "sender_full_name": "scottmcm",
        "timestamp": 1644188793
    },
    {
        "content": "<p>Another option for going forward with the APIT turbo fish would be a way to have \"private\" generic parameters that aren't turbofish-able, and say that APIT desugars to those.</p>",
        "id": 270917164,
        "sender_full_name": "scottmcm",
        "timestamp": 1644188846
    },
    {
        "content": "<p>Which would be nice for the \"I want a local variable in my bounds\" use case too.</p>",
        "id": 270917177,
        "sender_full_name": "scottmcm",
        "timestamp": 1644188877
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/Stabilization.20of.20.60explicit_generic_args_with_impl_trait.60/near/270916748\">said</a>:</p>\n<blockquote>\n<p>I think defining a fixed order (apit after declared) makes sense.</p>\n</blockquote>\n<p>What about default type params? You presumably need to go before, but that seems a little awkward. Can't add defaults after the fact?</p>",
        "id": 270917689,
        "sender_full_name": "simulacrum",
        "timestamp": 1644189683
    },
    {
        "content": "<p>there arent any default type/const params on fn generics (atm, maybe one day who knows)</p>",
        "id": 270918194,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1644190520
    },
    {
        "content": "<p>I think they're unstable? Even so, we should consider the impact of eventually adding them.</p>",
        "id": 270918271,
        "sender_full_name": "simulacrum",
        "timestamp": 1644190641
    },
    {
        "content": "<p>const defaults are a hard error, type defaults are a deny by default lint (because they dont do anything, <a href=\"https://github.com/rust-lang/rust/issues/36887\">#36887</a>) and im not aware of any feature for making them do stuff <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span><br>\nregardless I think you're right about considering impact of eventually adding them ^^ I half-seriously suggest a \"double turbofish\"</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nc\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Into</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">foo</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span>::<span class=\"o\">&lt;&amp;'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"bar\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 270918435,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1644190899
    },
    {
        "content": "<p>I agree with <span class=\"user-mention\" data-user-id=\"273349\">@Waffle Lapkin</span>: </p>\n<ul>\n<li>most usages of apit are not intended to be turbofishable, and even having the option to do it could be confusing;</li>\n<li>while trailing <code>, ..</code> would be a way to tackle that, we'd effectively be hindering most of these use cases just to allow the rare case of somebody wanting to turbofish that parameter,</li>\n</ul>\n<p>And I'd add:</p>\n<ul>\n<li>if that parameter is expected to be turbofished a lot, then it shouldn't have been written with apit to begin with,</li>\n<li>And for the rare cases of people wanting to turbofish it, a helper function is always around as a fallback alternative.</li>\n</ul>\n<p>Note that the last point is <em>already the current situation</em>, but affecting the actual generic params.</p>\n<p>So, if ppl are that concerned about future-proofing, we could start with <code>, ..</code>, but I'd still expect it to be unnecessary in the mid term.</p>",
        "id": 270964112,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1644233132
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/213817-t-lang/topic/Stabilization.20of.20.60explicit_generic_args_with_impl_trait.60/near/270917164\">said</a>:</p>\n<blockquote>\n<p>Another option for going forward with the APIT turbo fish would be a way to have \"private\" generic parameters that aren't turbofish-able, and say that APIT desugars to those.</p>\n</blockquote>\n<p>We used to have rustc_synthetic, but that's removed in <a href=\"https://github.com/rust-lang/rust/issues/91002\">#91002</a>.</p>",
        "id": 270966569,
        "sender_full_name": "Gary Guo",
        "timestamp": 1644234716
    },
    {
        "content": "<p>For @scottmcm's use case it seems that <code>#[rustc_synthetic]</code> would actually be a good fit (with a better name of course)? Maybe we should just reintroduce it.</p>",
        "id": 270967403,
        "sender_full_name": "Gary Guo",
        "timestamp": 1644235197
    },
    {
        "content": "<p>It would be easier if turbofish worked with namable parameters. <code>::&lt;T=u16, 0=&amp;'static str&gt;</code></p>",
        "id": 270967444,
        "sender_full_name": "The 8472",
        "timestamp": 1644235203
    },
    {
        "content": "<p>You still need to assign a canonical order for APIT with namable params though.</p>",
        "id": 270967596,
        "sender_full_name": "Gary Guo",
        "timestamp": 1644235264
    },
    {
        "content": "<p>Maybe. Or the argument name could be abused for that purpose?</p>",
        "id": 270967673,
        "sender_full_name": "The 8472",
        "timestamp": 1644235321
    },
    {
        "content": "<p>Downside is that it would make them part of the API.</p>",
        "id": 270967758,
        "sender_full_name": "The 8472",
        "timestamp": 1644235358
    },
    {
        "content": "<p>I personally think any order assigned to APIT would be confusing, given that APIT can be nested, e.g. <code>impl Deref&lt;Target = impl AsRef&lt;str&gt;&gt;</code></p>",
        "id": 270967808,
        "sender_full_name": "Gary Guo",
        "timestamp": 1644235403
    },
    {
        "content": "<p>We can add <del>epicycles</del> nesting <code>::&lt;T=u16, 0=(Foo, Bar)&gt;</code></p>",
        "id": 270968087,
        "sender_full_name": "The 8472",
        "timestamp": 1644235585
    },
    {
        "content": "<p>Which one is which though? If the order follows source code order than it's <code>&lt;U: Deref&lt;Target = T&gt;, T: AsRef&lt;str&gt;&gt;</code>, but I suspect most people would write <code>&lt;T: AsRef&lt;str&gt;, U: Deref&lt;Target = T&gt;&gt;</code> without APIT.</p>",
        "id": 270968293,
        "sender_full_name": "Gary Guo",
        "timestamp": 1644235694
    },
    {
        "content": "<p>So it isn't really clear whether it shall be <code>(Foo, Bar)</code> or <code>(Bar, Foo)</code></p>",
        "id": 270968386,
        "sender_full_name": "Gary Guo",
        "timestamp": 1644235762
    },
    {
        "content": "<p>I wouldn't reason about how it desugars unless something forced me to</p>",
        "id": 270968618,
        "sender_full_name": "The 8472",
        "timestamp": 1644235907
    },
    {
        "content": "<p>So, source order</p>",
        "id": 270968643,
        "sender_full_name": "The 8472",
        "timestamp": 1644235921
    },
    {
        "content": "<p><code>::&lt;T=u16, 0=(Foo, &lt;Foo as Deref&gt;::Target=Bar)&gt;</code> but at that point it gets complicated enough that some way to split it out would be nice...</p>",
        "id": 270969127,
        "sender_full_name": "The 8472",
        "timestamp": 1644236164
    },
    {
        "content": "<p>Wait, doesn't a concrete type already constrain the associated type?</p>",
        "id": 270969338,
        "sender_full_name": "The 8472",
        "timestamp": 1644236305
    },
    {
        "content": "<p><code>::&lt;T=u16, 0=Foo&lt;_&gt;&gt;</code> should be sufficient, no nesting concerns within a parameter other than the type's own generics.</p>",
        "id": 270969828,
        "sender_full_name": "The 8472",
        "timestamp": 1644236605
    },
    {
        "content": "<p>This naming scheme seems like an unnecessary complication</p>",
        "id": 270972125,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1644237854
    },
    {
        "content": "<p>It helps with naming only some (of potentially many) generics. It also helps a little with forward compatibility. E.g. adding a new named generic wouldn't affect the APIT indexing.</p>",
        "id": 270979669,
        "sender_full_name": "The 8472",
        "timestamp": 1644241534
    },
    {
        "content": "<p>I'm resurrecting this thread because I want to stabilise the feature flag here. I would like to propose we do this without worrying too much about whether we will be able to turbofish APIT in the future, lets assume that if we do permit that (and there doesn't seem to be any urgency to do it) then we can do it backwards compatibly (i.e., the <code>, ..</code> proposal, but its implicit). Then we can stop bikeshedding the hypothetical and stabilise this useful feature which gets around a real papercut.</p>",
        "id": 278172284,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1649341843
    },
    {
        "content": "<p>I would be in favor of that as a first step.</p>",
        "id": 278191275,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1649349137
    },
    {
        "content": "<p>I think it's nice for library flexibility to be able to use APIT for \"look, you don't want to turbofish this one (often an <code>F</code>), but the others are reasonable\".</p>\n<p>So <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> to moving forward, but I'd still also like the \"APIT desugars to a 'private' parameter\" (or something) like I mentioned above in <a href=\"#narrow/stream/213817-t-lang/topic/Stabilization.20of.20.60explicit_generic_args_with_impl_trait.60/near/270917164\">https://rust-lang.zulipchat.com/#narrow/stream/213817-t-lang/topic/Stabilization.20of.20.60explicit_generic_args_with_impl_trait.60/near/270917164</a></p>",
        "id": 278198975,
        "sender_full_name": "scottmcm",
        "timestamp": 1649352599
    }
]