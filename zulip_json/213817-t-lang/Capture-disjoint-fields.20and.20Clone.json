[
    {
        "content": "<p>The conversation about <code>Default</code> closures had me thinking about <code>Clone</code> closures.</p>\n<p>Will <a href=\"https://github.com/rust-lang/rfcs/issues/2229\">RFC#2229</a> technically be a breaking change because of that?  It seems possible, if uncommon, for a <code>move</code> closure to currently be <code>Clone</code> because it captured the whole instance, but that capturing subfields could capture things that are not themselves <code>Clone</code>, and thus make the closure no longer <code>Clone</code>.  (Maybe one of the fields cannot be safely copied, but the captured things wraps it up into something that can always do so soundly.)</p>\n<p>(That can't be a problem with <code>Copy</code>, since all subfields have to be <code>Copy</code> anyway.  So it'll just make more closures <code>Copy</code> than used to be.)</p>",
        "id": 216698416,
        "sender_full_name": "scottmcm",
        "timestamp": 1605319188
    },
    {
        "content": "<p>I do think Clone for non-Copy closures, in hindsight, may have been a mistake given the new insights from the Default conversation.</p>",
        "id": 216700119,
        "sender_full_name": "simulacrum",
        "timestamp": 1605321506
    },
    {
        "content": "<p>Good point. The way I understand the trait selection code only cares about the types that are being captured, so yeah it might break. Though I'm _assuming_ such time would probably need custom drop too.</p>\n<p>2229 also breaks drop order, so the migration tool/lint that we will provide should be able to handle this as well.  Post-migration the closure will essentially be capturing the entire structure as it did before.</p>",
        "id": 216700527,
        "sender_full_name": "Aman Arora",
        "timestamp": 1605321901
    },
    {
        "content": "<p>Also <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  in acse you haven't seen this. You probably understand the implication here better than I do.</p>",
        "id": 216948078,
        "sender_full_name": "Aman Arora",
        "timestamp": 1605569702
    },
    {
        "content": "<p>Yeah, that's a good catch. We can work-around this if necessary.</p>",
        "id": 216948219,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605569808
    },
    {
        "content": "<p>But we should open an issue to track it.</p>",
        "id": 216948233,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605569821
    },
    {
        "content": "<p>(we could insert a <code>let a = a</code> statement if the thing being captured is not clone, but the original is)</p>",
        "id": 216948263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605569845
    },
    {
        "content": "<p>Yeah that's what I was thinking, not sure if we want to proactively do that or let the user apply the migration lint themselves</p>",
        "id": 216948345,
        "sender_full_name": "Aman Arora",
        "timestamp": 1605569885
    },
    {
        "content": "<p>This is something I've been deferring, but we're going to need the lint anyway, and I am imagining it's going to have some heuristics</p>",
        "id": 217027238,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605630858
    }
]