[
    {
        "content": "<p>(Continuing this discussion with <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> in a new thread to avoid cluttering the old one)</p>",
        "id": 218119794,
        "sender_full_name": "RalfJ",
        "timestamp": 1606502598
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/213817-t-lang/topic/mem.3A.3Asize_of.3A.20do.20not.20error.20if.20layout.20computations.20fail/near/217685843\">said</a>:</p>\n<blockquote>\n<p>it's a used one though :_</p>\n</blockquote>\n<p>I'd say that is evidence of it being helpful. :D</p>",
        "id": 218119830,
        "sender_full_name": "RalfJ",
        "timestamp": 1606502636
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/213817-t-lang/topic/mem.3A.3Asize_of.3A.20do.20not.20error.20if.20layout.20computations.20fail/near/217685768\">said</a>:</p>\n<blockquote>\n<p>yeah, and i think defining <code>n</code> such that <code>\\forall x: T, size_of_val(&amp;x) == n</code> to be the \"size\" of <code>T</code> is not a helpful notion <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>\n</blockquote>\n<p>so, then, how do you even define the constraints that are inherently put on the layout of types such as <code>struct</code>, where the fields must be spaced to avoid overlaps? I think this all <em>cries</em> for a notion of \"size of a type\", and I am clearly not alone in thinking so as this is something that AFAIK pretty much every single language has.^^</p>",
        "id": 218119947,
        "sender_full_name": "RalfJ",
        "timestamp": 1606502717
    },
    {
        "content": "<p>the size of values of type <code>T</code></p>",
        "id": 218121597,
        "sender_full_name": "lcnr",
        "timestamp": 1606504178
    },
    {
        "content": "<p>i currently think that always using \"size of values\" instead of plain \"size\" is preferable</p>",
        "id": 218121657,
        "sender_full_name": "lcnr",
        "timestamp": 1606504207
    },
    {
        "content": "<p>the reasoning behind this is fairly shallow though <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 218121818,
        "sender_full_name": "lcnr",
        "timestamp": 1606504342
    },
    {
        "content": "<p>i think that \"size\" of <code>T</code> quite strongly suggests that if <code>T</code> is <code>Sized</code>, <code>T</code> must have a valid size to be well formed</p>",
        "id": 218121988,
        "sender_full_name": "lcnr",
        "timestamp": 1606504463
    },
    {
        "content": "<p>which is not the case</p>",
        "id": 218121993,
        "sender_full_name": "lcnr",
        "timestamp": 1606504468
    },
    {
        "content": "<blockquote>\n<p>I'd say that is evidence of it being helpful. :D</p>\n</blockquote>\n<p>only because something is used doesn't mean it's helpful <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span></p>",
        "id": 218122440,
        "sender_full_name": "lcnr",
        "timestamp": 1606504848
    },
    {
        "content": "<p>or maybe \"size\" is actually fine</p>",
        "id": 218122991,
        "sender_full_name": "lcnr",
        "timestamp": 1606505325
    },
    {
        "content": "<p>the main reason why I wanted this change is that with types not having a size, I wouldn't have needed as long to figure out a reasoning for why we don't need wf bounds for <code>[u16; N]</code></p>",
        "id": 218123156,
        "sender_full_name": "lcnr",
        "timestamp": 1606505468
    },
    {
        "content": "<p>now that <span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> and I already spend the time thinking about this we hopefully won't have to do so again</p>",
        "id": 218123243,
        "sender_full_name": "lcnr",
        "timestamp": 1606505524
    },
    {
        "content": "<p>so it doesn't really matter too much anymore</p>",
        "id": 218123257,
        "sender_full_name": "lcnr",
        "timestamp": 1606505533
    },
    {
        "content": "<p>Is it potentially relevant that we may in the future have types for which the values are not all the same size, but for which the values do <em>have</em> a size? For instance, variable-length structures?</p>",
        "id": 218125531,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606507563
    },
    {
        "content": "<p>these would have to be <code>!Sized</code> afaict</p>",
        "id": 218125757,
        "sender_full_name": "lcnr",
        "timestamp": 1606507732
    },
    {
        "content": "<p>Right.</p>",
        "id": 218125943,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606507890
    },
    {
        "content": "<p>Which means the type doesn't have a size known at compile time. So at that point the <em>type</em> doesn't have a fixed size, but any particular value does.</p>",
        "id": 218126036,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606507958
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/213817-t-lang/topic/Do.20types.20have.20a.20size.3F/near/218121597\">said</a>:</p>\n<blockquote>\n<p>the size of values of type <code>T</code></p>\n</blockquote>\n<p>but then you need a condition that all values of type <code>T</code> have the same size</p>",
        "id": 218157559,
        "sender_full_name": "RalfJ",
        "timestamp": 1606558111
    },
    {
        "content": "<p>so there is still a specifically called-out size somewhere, which we might as well call the size of the type</p>",
        "id": 218157563,
        "sender_full_name": "RalfJ",
        "timestamp": 1606558127
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/213817-t-lang/topic/Do.20types.20have.20a.20size.3F/near/218122440\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>I'd say that is evidence of it being helpful. :D</p>\n</blockquote>\n<p>only because something is used doesn't mean it's helpful <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span></p>\n</blockquote>\n<p>it's not <em>proof</em>, but it's <em>evidence</em>. people are less likely to use it if it isn't helpful.<br>\nFWIW, I find it a very helpful notion, in fact I find it essential and I claim that it will always be present (in the condition that all values of the type have the same size) even if you refuse to name it.</p>",
        "id": 218157580,
        "sender_full_name": "RalfJ",
        "timestamp": 1606558201
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/Do.20types.20have.20a.20size.3F/near/218126036\">said</a>:</p>\n<blockquote>\n<p>Which means the type doesn't have a size known at compile time. So at that point the <em>type</em> doesn't have a fixed size, but any particular value does.</p>\n</blockquote>\n<p>that is already the case for <code>!Sized</code> types now. every trait object and slice has an underlying true size returned by <code>size_of_val</code>.</p>",
        "id": 218157639,
        "sender_full_name": "RalfJ",
        "timestamp": 1606558268
    },
    {
        "content": "<blockquote>\n<p>Since all values of a Sized type share the same size and alignment, we refer to those shared values as the size of the type and the alignment of the type respectively.</p>\n</blockquote>\n<p>-- <a href=\"https://doc.rust-lang.org/stable/reference/type-layout.html\">Rust Reference</a></p>",
        "id": 218196527,
        "sender_full_name": "isHavvy",
        "timestamp": 1606626293
    }
]