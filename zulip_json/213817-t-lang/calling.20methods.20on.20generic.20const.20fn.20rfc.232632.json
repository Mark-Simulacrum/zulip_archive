[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> and <span class=\"user-mention\" data-user-id=\"256759\">@boats</span> and maybe others -- in today's backlog bonanza we thought it would make sense to schedule a design meeting to discuss the design of <a href=\"https://github.com/rust-lang/rfcs/pull/2632\">https://github.com/rust-lang/rfcs/pull/2632</a> in detail and in particular to look at <span class=\"user-mention\" data-user-id=\"256759\">@boats</span>'s concerns. Maybe in the next few weeks?</p>",
        "id": 208860068,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599068135
    },
    {
        "content": "<p>I'd be interested in joining that meeting. My concerns are mainly around <code>?const</code> and making sure we can properly handle function pointers (and trait objects) in a consistent way in the future (also see <a href=\"https://github.com/rust-lang/const-eval/issues/56\">https://github.com/rust-lang/const-eval/issues/56</a>)</p>",
        "id": 208945530,
        "sender_full_name": "RalfJ",
        "timestamp": 1599127860
    },
    {
        "content": "<p>We should file a design meeting proposal</p>",
        "id": 209128604,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599245431
    },
    {
        "content": "<p>ideally someone would summarize the agenda a bit</p>",
        "id": 209128614,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599245440
    },
    {
        "content": "<p>(hint, hint)</p>",
        "id": 209128627,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599245449
    },
    {
        "content": "<p>Both Ralf's and boat's concerns are around <code>?const</code> are actually very related. Quick reminder: <code>T: ?const Trait</code> on a bound marks the bound as unusable (can't call <code>T::function</code>) within the function (except for static uses via <code>T::ASSOC_CONST</code> or <code>T::ASSOC_TY</code>). This is \"necessary\", because by default all <code>T: Trait</code> bounds on <code>const fn</code> require that there's an <code>impl const Trait</code> for <code>T</code>.</p>\n<p>The question raised by boats is whether we really need these bounds (or whether we need them <em>now</em>). They are not strictly necessary for most cases. If you have a bound you don't need, you can just remove it. Though this is not possible in case there are bounds on the struct/enum. Bounds on the type definition are necessary if the <code>Drop</code> impl requires said bounds. This is the case for the internals of e.g. <a href=\"https://github.com/rust-lang/rust/blob/ffd59bf9c62125813abae8ca52f0ac3a67459e8f/library/alloc/src/raw_vec.rs#L49\"><code>RawVec</code></a>.</p>\n<p>Ralf's question is how function pointers and trait objects work. So basically whether <code>&amp;dyn Trait</code> types automatically require that the runtime value given must implement <code>const Trait</code>. This is not a requirement in <code>const</code> items, so there would be a discrepancy between <code>const fn</code> and <code>const</code> items, which is not great at all. The same goes for function pointers.</p>\n<p>The alternative is to explicitly require users to write <code>T: const Trait</code> and <code>x: &amp;dyn const Trait</code> and <code>f: const fn()</code>, which works, but conflicts with the hypothetical future proposal of <code>T: const Trait</code> bounds on const functions, that allow you to use this <code>T</code> in array lengths, even if the function itself is used at runtime and thus does not actually force the <code>T</code> to have a <code>const Trait</code> impl (except for adding <code>const</code> everywhere being noisy, this is the only concern afaik). I believe there's a workaround, as you can always specify a const generic parameter instead and pass up the requirement to the caller (or use an associated const).</p>",
        "id": 209275266,
        "sender_full_name": "oli",
        "timestamp": 1599471119
    },
    {
        "content": "<p>TLDR: the consistent thing to do would be to add <code>const</code> everywhere and not have a <code>?const</code> concept at all</p>",
        "id": 209275353,
        "sender_full_name": "oli",
        "timestamp": 1599471145
    },
    {
        "content": "<p>I think a <code>?const</code> concept is still required for expressivity... unless the <code>const</code> you are proposing actually is <code>?const</code></p>",
        "id": 209276029,
        "sender_full_name": "RalfJ",
        "timestamp": 1599471577
    },
    {
        "content": "<p>when a <code>const fn foo&lt;T: const Trait&gt;(x: T)</code> is called in a runtime <code>fn</code>, does the <code>impl Trait for T</code> need to be <code>const</code>?</p>",
        "id": 209276104,
        "sender_full_name": "RalfJ",
        "timestamp": 1599471615
    }
]