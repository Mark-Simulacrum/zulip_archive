[
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/93678\">https://github.com/rust-lang/rust/pull/93678</a> changes the behaviour of the lint to suggest removing the outer-most <code>unsafe {}</code> block over the inner ones. There seems to be some motivation to do so that relates to implementation approach, but also in some way there's also some preference in play.</p>\n<p>My memory was that style guides generally suggested larger <code>unsafe {}</code> blocks that included the invariant checks, which would suggest that we ought to suggest removing inner <code>unsafe</code>s instead. However either way this seems like a decision that's out of scope for me as a reviewer to make. Does anybody from T-lang have any input on this?</p>",
        "id": 272328041,
        "sender_full_name": "nagisa",
        "timestamp": 1645134216
    },
    {
        "content": "<p>The current trajectory for unsafe nesting / unsafe blocks is roughly split between 'as small as possible' and large ones, in some sense based on <a href=\"https://github.com/rust-lang/rust/pull/79208\">https://github.com/rust-lang/rust/pull/79208</a> -- in general, I don't think <em>either</em> answer is right personally -- though I tend to lean towards smaller-ish blocks.</p>",
        "id": 272329097,
        "sender_full_name": "simulacrum",
        "timestamp": 1645134522
    },
    {
        "content": "<p>/me tends to lean towards smaller blocks as well, but understands the tradeoff between convenience and precision here.</p>",
        "id": 272329174,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645134565
    },
    {
        "content": "<p>One thing we haven't tried yet -- and maybe is worth exploring -- is diving into some kind of effect-like and/or trivial precondition/postcondition assertions system. I suspect that it might be the way to go if we really want to ergonomically and in a maintainable way evolve unsafe code over time</p>",
        "id": 272329361,
        "sender_full_name": "simulacrum",
        "timestamp": 1645134679
    },
    {
        "content": "<p>Depending on a whole bunch of things I suspect it's either impossibly verbose or perhaps reasonably ok</p>",
        "id": 272329403,
        "sender_full_name": "simulacrum",
        "timestamp": 1645134720
    },
    {
        "content": "<p>in any case, it's a vague rumbling of an idea at best :)</p>",
        "id": 272329458,
        "sender_full_name": "simulacrum",
        "timestamp": 1645134729
    },
    {
        "content": "<p>I would appreciate any ideas on how to reach a conclusion on the PR itself in a well defined process. RFC sounds excessive. Does this warrant a FCP? What team would make a call?</p>",
        "id": 272333580,
        "sender_full_name": "nagisa",
        "timestamp": 1645136857
    },
    {
        "content": "<p>So, the exact behavior of a lint isn't a stable guarantee, which means this is a reversible decision. And the nature of it shouldn't create \"flapping\" behavior where we lint against something that we previously linted <em>towards</em>.</p>",
        "id": 272333846,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645136995
    },
    {
        "content": "<p>Which means I think the process we'd want is \"some folks are favorable and nobody objects\".</p>",
        "id": 272333908,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645137015
    },
    {
        "content": "<p>Lints are usually T-lang. I'm not entirely confident this is entirely a T-lang matter, but again, it seems reversible in a way that makes it not too much of a problem to just proceed.</p>",
        "id": 272333996,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645137069
    },
    {
        "content": "<p>So I would suggest, informally, that it should suffice if more than one T-lang member thinks this is OK and nobody has a concern.</p>",
        "id": 272334013,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645137084
    },
    {
        "content": "<p>Based on the summary you gave above, <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span>, on the question of removing outer rather than inner, I'm in favor. (I'm basing this on your summary, not the implementation details of this specific change.)</p>",
        "id": 272334109,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645137130
    },
    {
        "content": "<p>I believe my summary to be broadly accurate. There are more extensive summaries on the PR itself written by the author, which I consider to be accurate as well.</p>",
        "id": 272334184,
        "sender_full_name": "nagisa",
        "timestamp": 1645137193
    },
    {
        "content": "<p>I am in favor of removing the outer block. I believe that the right place to put an unsafe is exactly where you can clearly document the conditions that are being asserted.</p>",
        "id": 272335018,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1645137718
    },
    {
        "content": "<p>Narrower blocks tend to allow you to be more specific about what is being asserted at each spot.</p>",
        "id": 272335067,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1645137729
    },
    {
        "content": "<p>Broader blocks seem to be more like \"this code in here is reasonable\" and don't encourage the same precision.</p>",
        "id": 272335088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1645137742
    },
    {
        "content": "<p>(That, at least, is my experience.)</p>",
        "id": 272335098,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1645137752
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/213817-t-lang/topic/.2393678.20unused_unsafe.20changes/near/272328041\">said</a>:</p>\n<blockquote>\n<p>There seems to be some motivation to do so that relates to implementation approach, <em>[...]</em></p>\n</blockquote>\n<p>For anyone who didn't look into the PR: The change in behavior simplifies solving the problem that cases like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">_foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">futures</span>::<span class=\"n\">pin_mut</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>currently don't produce any warning at all. (The macro expands to code containing an <code>unsafe</code> block; the compiler wants to warn that the inner (macro-generated) unsafe block is redundant, however <code>unused_unsafe</code> lint doesn't show up for code from external macros.)</p>\n<p>Also note that if an outer <code>unsafe</code> block does also directly contain at least one unsafe operations, of course the lint will still warn the inner block as being redundant.</p>",
        "id": 272336025,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1645138423
    },
    {
        "content": "<p>I agree that suggesting the removal of the outer one is reasonable.  The code's author can always make the decision to remove the inner one if they'd rather.</p>",
        "id": 272337879,
        "sender_full_name": "scottmcm",
        "timestamp": 1645139539
    },
    {
        "content": "<p>Given that there is still a lot of discussion ongoing on the topic, maybe there just shouldn't be a suggestion here?</p>",
        "id": 272382378,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1645178847
    },
    {
        "content": "<p>I feel that even if removing the outer unsafe is the right thing to do, then just doing so mechanically is sill going to be wrong - the programmer should probably replace it with a comment detailing the scope of invariants and how they are re-established, etc.</p>",
        "id": 272382532,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1645178919
    },
    {
        "content": "<p>I don't know where the line is, or really what separates a suggestion from a hint.  Maybe we make the suggestion but don't mark it <code>MachineApplicable</code>, or something.  I'm probably happy with whatever the diagnostics experts think is most consistent.</p>",
        "id": 272383341,
        "sender_full_name": "scottmcm",
        "timestamp": 1645179423
    },
    {
        "content": "<p>I think a lint can tell the user what is wrong without any suggestion for how to fix it, and that seems appropriate in this case</p>",
        "id": 272383671,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1645179604
    },
    {
        "content": "<p>My two cents about the outer <em>vs.</em> inner question:</p>\n<ul>\n<li>\n<p>From a practical/factual point of view, smaller <code>unsafe</code> blocks are better since less dangerous: less likely that an unrelated unknowingly <code>unsafe</code> function would be called as well. For reference, this point of view has been the main rationale for <code>unsafe_op_in_unsafe_fn</code>: in that case, the fact the caller had to uphold preconditions / narrow contract was kind of a blanket license to, ourselves (the callee), not care about our own <code>unsafe</code> calls.</p>\n</li>\n<li>\n<p>From a conceptual point of view, an <code>unsafe</code> that is too narrow can just be used to pin-point what the dangerous operation is, but will be lacking the necessary context that justifies the soundness of it all.</p>\n</li>\n</ul>\n<p>Regarding the latter point, however, even outer <code>unsafe</code> is insufficient: the safety boundaries are often at the privacy/module level, and you can't put such a gigantic <code>unsafe</code> block in there (<code>mod unsafe {</code>?), and, incidentally, even if that were possible, I think we can agree it would be an undesirable feature, thus serving as a strawman to reinforce the former point: the value of an <code>unsafe</code> block is inversely proportional to its size.</p>\n<h3>My rule of thumb solution</h3>\n<ol>\n<li>\n<p>Start with a <code>#![deny(unsafe_code)]</code> codebase;</p>\n</li>\n<li>\n<p>Use <code>#[allow(unsafe_code)]</code> at a safety boundary: to the whole enscoping module acting as a privacy boundary (<em>e.g.</em>, <code>vec</code>), or inside a function body, when applicable, like this:</p>\n</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[allow(unsafe_code)]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"c1\">// (Aside: I wish rustfmt allowed this style)</span>\n<span class=\"w\">    </span><span class=\"err\">…</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<ol start=\"3\">\n<li>So that maximally finer-grained <code>unsafe</code> scopes (or even, the theorized unary <code>unsafe</code> op modifiers) can be used.</li>\n</ol>\n<p>The \"held invariants\" would be listed at the <code>allow(unsafe_code)</code> level, and then the <code>// safety</code> of each <code>unsafe</code>, if non-trivial could actually refer to the invariants.</p>",
        "id": 272389896,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1645183500
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256841\">Nick Cameron</span> <a href=\"#narrow/stream/213817-t-lang/topic/.2393678.20unused_unsafe.20changes/near/272382378\">said</a>:</p>\n<blockquote>\n<p>Given that there is still a lot of discussion ongoing on the topic, maybe there just shouldn't be a suggestion here?</p>\n</blockquote>\n<p>Note that <strong><em>technically</em></strong> we aren’t even discussing any actual suggestions here. Rather the question is which <code>unsafe</code> blocks are reported as unnecessary and which aren’t. The basic principle I’m trying to follow in the PR is that the lint should always be of the form that</p>\n<ul>\n<li>removing all reported-unnecessary <code>unsafe</code> blocks <strong><em>at once</em></strong> results in working code without any new/remaining <code>unused_unsafe</code> warnings (“removing” means “turning into an ordinary block”)</li>\n<li>the resulting <code>unused_unsafe</code>-warning-free code doesn’t contain any additional <code>unsafe</code> blocks that <em>can</em> be removed without the code failing to compile (except for unsafe blocks that appeared in a place where <code>allow(unused_unsafe)</code> was active).</li>\n</ul>\n<p>this leaves multiple possibilities in certain scenarios, the one being discussed here is something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">unsf</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">unsf</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">unsf</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">unsf</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>On nightly, this produces</p>\n<div class=\"codehilite\"><pre><span></span><code>warning: unnecessary `unsafe` block\n --&gt; src/lib.rs:3:9\n  |\n2 |     unsafe {\n  |     ------ because it&#39;s nested under this `unsafe` block\n3 |         unsafe { unsf() }\n  |         ^^^^^^ unnecessary `unsafe` block\n  |\n  = note: `#[warn(unused_unsafe)]` on by default\n\nwarning: unnecessary `unsafe` block\n --&gt; src/lib.rs:4:9\n  |\n2 |     unsafe {\n  |     ------ because it&#39;s nested under this `unsafe` block\n3 |         unsafe { unsf() }\n4 |         unsafe { unsf() }\n  |         ^^^^^^ unnecessary `unsafe` block\n\nwarning: unnecessary `unsafe` block\n --&gt; src/lib.rs:5:9\n  |\n2 |     unsafe {\n  |     ------ because it&#39;s nested under this `unsafe` block\n...\n5 |         unsafe { unsf() }\n  |         ^^^^^^ unnecessary `unsafe` block\n</code></pre></div>\n<p>whereas with <a href=\"https://github.com/rust-lang/rust/issues/93678\">#93678</a>, this would instead produce</p>\n<div class=\"codehilite\"><pre><span></span><code>warning: unnecessary `unsafe` block\n --&gt; src/lib.rs:2:5\n  |\n2 |     unsafe {\n  |     ^^^^^^ unnecessary `unsafe` block\n  |\n  = note: `#[warn(unused_unsafe)]` on by default\n</code></pre></div>",
        "id": 272394441,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1645186711
    },
    {
        "content": "<p>I also like unsafe blocks to be small and targeted. Obviously there's lots of room for reasonable interpretation and nuance based on context, but at the end of the day any time you touch any code in a <strong>module</strong> that contains an <code>unsafe</code> you have to be wary. In that sense I agree with <span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span> : have a crate level #<code>![deny(unsafe_code)]</code> and selectively allow it at the module-level when needed. The granularity of unsafe blocks should be whichever makes it easiest for authors to document the invariants and for readers to pinpoint which operations are unsafe.</p>",
        "id": 272408748,
        "sender_full_name": "bstrie",
        "timestamp": 1645194920
    },
    {
        "content": "<p>One case where there's a need for a big unsafe block is if there's data behind a raw pointer you can't make a reference. Then it's just unsafe practically every line of the function, and having one little unsafe block per field access is just nothing but line noise.</p>\n<p>However, rust lacks the ability to specify the right kinds of data types here for this and so it must be kept in raw pointer form. This is one area that ergonomics could be improved greatly.</p>",
        "id": 272434272,
        "sender_full_name": "Lokathor",
        "timestamp": 1645206879
    },
    {
        "content": "<p>Or several lines of unsafe pointer arithmetic + final access to the pointer. They are best annotated with SAFETY comment as a block.</p>",
        "id": 272447698,
        "sender_full_name": "The 8472",
        "timestamp": 1645213357
    },
    {
        "content": "<p>I.e. the smallest unit of unsafe is not always a single call</p>",
        "id": 272447719,
        "sender_full_name": "The 8472",
        "timestamp": 1645213379
    },
    {
        "content": "<p>Heh, I find unchecked arithmetic to be, on the contrary, a good argument for smaller <code>unsafe</code> scopes, since it's easy to miss that some of the calls may carry extra invariants, <em>e.g.</em>, <code>pointer::offset_from</code> (not all <code>unsafe fn</code> have <code>unchecked</code> in their name, and even if they did, then <code>_unchecked</code> would just end up being <code>unsafe</code> in disguise). In other words, if the caller intends to perform unchecked pointer arithmetic on purpose, they better express so with <em>dedicated</em> <code>unsafe</code> blocks for them.</p>\n<p>The global SAFETY section could still be written atop it all, on the <code>#[allow(unsafe_code)] { … }</code> broader scope.</p>",
        "id": 272448851,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1645214007
    },
    {
        "content": "<p>Then make pointer access a unique kind of unsafe or something ;P</p>",
        "id": 272450043,
        "sender_full_name": "Lokathor",
        "timestamp": 1645214401
    },
    {
        "content": "<p>Something I'm unclear on from reading as a bystander: we aren't advocating for removing non-<code>unsafe</code>-requiring functions from an <code>unsafe</code> block, are we?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[warn(unsafe_op_in_unsafe_fn)]</span><span class=\"w\"></span>\n\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">example</span><span class=\"p\">(</span><span class=\"n\">ptr</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"p\">.</span><span class=\"n\">is_null</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;*</span><span class=\"n\">ptr</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">dbg!</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I am a fan of both putting as many preconditions as I can into the <code>unsafe</code> block <strong>and</strong> having narrowly-scoped <code>unsafe</code> blocks.</p>",
        "id": 272451124,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1645214864
    },
    {
        "content": "<p>I would indeed write that with just the unsafe-requiring part inside the block, and the <code>is_null</code> outside the block.</p>",
        "id": 272451778,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645215284
    },
    {
        "content": "<p>I don't feel a conceptual attachment to having the verification of preconditions happen inside the unsafe block, as though the unsafe block was some mutex being held where those preconditions could change if not checked inside.</p>",
        "id": 272451842,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645215336
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/.2393678.20unused_unsafe.20changes/near/272451842\">said</a>:</p>\n<blockquote>\n<p>as though the unsafe block was some mutex being held where those preconditions could change if not checked inside.</p>\n</blockquote>\n<p>Especially so when we don't have unsafe fields and such yet, and thus there's always plenty of important code outside that \"mutex\".</p>",
        "id": 272451968,
        "sender_full_name": "scottmcm",
        "timestamp": 1645215410
    },
    {
        "content": "<p>Though, on that note, I do want unsafe fields. The more I think about that, the more I think it would be a great idea.</p>",
        "id": 272452102,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645215484
    },
    {
        "content": "<p>Yeah, given that we even have gotten academic papers that talk about \"unneeded\" <code>unsafe fn</code> because they don't do anything unsafe in the body.</p>",
        "id": 272452356,
        "sender_full_name": "scottmcm",
        "timestamp": 1645215627
    },
    {
        "content": "<p>Another case I see often:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">safe_function</span><span class=\"p\">(</span><span class=\"n\">unsafe_argument</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">safe_argument</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Which I would rewrite as:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">safe_function</span><span class=\"p\">(</span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">unsafe_argument</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">safe_argument</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 272452588,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645215738
    },
    {
        "content": "<p>In part because I find it comforting to know that I can't accidentally do anything unsafe in <code>safe_argument</code> or <code>safe_function</code>.</p>",
        "id": 272452665,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645215784
    },
    {
        "content": "<p>I'd love to have an allow-by-default lint for \"safe operation in unsafe block\"; bonus if it could actually rustfix from the former of those to the latter.</p>",
        "id": 272452729,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645215833
    },
    {
        "content": "<p>I agree with that example (it fits into my \"narrowly-scoped <code>unsafe</code> blocks\") , but point out that it makes it hard to cleanly follow the usual suggestion of documenting your unsafe blocks.</p>",
        "id": 272452784,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1645215846
    },
    {
        "content": "<p>FWIW, this is why I personally want to at least experiment with some kind of effects system -- it's often the case that I can't feasibly get the unsafe block 'small enough', or that e.g. it's around a function, and then tracking that function's requirements over time is ~impossible in practice. (Obviously, for a pub function, you can't evolve, but internal refactors are common IME).</p>",
        "id": 272452819,
        "sender_full_name": "simulacrum",
        "timestamp": 1645215864
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">safe_function</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// SAFETY: ...</span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">unsafe_argument</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">safe_argument</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 272452849,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1645215877
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I agree, there are cases where you <em>can't</em> narrow unsafe far enough, in part because we don't have a way of separating an unsafe operation from a safe one syntactically.</p>",
        "id": 272452925,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645215921
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/.2393678.20unused_unsafe.20changes/near/272452729\">said</a>:</p>\n<blockquote>\n<p>I'd love to have an allow-by-default lint for \"safe operation in unsafe block\"</p>\n</blockquote>\n<p>So the moral opposite of <code>unsafe_op_in_unsafe_fn</code>?</p>",
        "id": 272452946,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1645215936
    },
    {
        "content": "<p>Then we should have a lint for <code>safe_op_in_safe_fn</code> <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 272453043,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1645215973
    },
    {
        "content": "<p>Kinda, yeah. \"unsafe is not at the most precise position it could be in the AST\".</p>",
        "id": 272453059,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645215982
    },
    {
        "content": "<p>I feel like that lint would have some annoying edge cases, but would have to see it in practice.</p>",
        "id": 272453136,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1645216035
    },
    {
        "content": "<p>Regarding documentation, I also think this is perfectly fine:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// SAFETY: ...</span>\n<span class=\"n\">safe_function</span><span class=\"p\">(</span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">unsafe_arg</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">safe_arg</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>As long as you only have the one unsafe in the statement.</p>",
        "id": 272453190,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645216076
    },
    {
        "content": "<p>And if you have more than one unsafe in the statement, I <em>do</em> think the style of writing it multi-line and putting the comment directly on the argument seems right.</p>",
        "id": 272453276,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645216108
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/213817-t-lang/topic/.2393678.20unused_unsafe.20changes/near/272452819\">said</a>:</p>\n<blockquote>\n<p>experiment with some kind of effects system</p>\n</blockquote>\n<p>I wonder if we could tally up all the times people have said \"if we had effects, this would be easier/better/more accurate, but lets do <em>X</em> instead \" and which places in the language would be improved by them <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 272453288,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1645216118
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/.2393678.20unused_unsafe.20changes/near/272453059\">said</a>:</p>\n<blockquote>\n<p>Kinda, yeah. \"unsafe is not at the most precise position it could be in the AST\".</p>\n</blockquote>\n<p>That feels painful.  I think that's more a request for \"I want to be able to <code>foo().trusted#unwrap_unchecked()</code>\" or something, and just disallow the block form.</p>",
        "id": 272453297,
        "sender_full_name": "scottmcm",
        "timestamp": 1645216124
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/.2393678.20unused_unsafe.20changes/near/272453190\">said</a>:</p>\n<blockquote>\n<p>Regarding documentation, I also think this is perfectly fine:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// SAFETY: ...</span>\n<span class=\"n\">safe_function</span><span class=\"p\">(</span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">unsafe_arg</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">safe_arg</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I wonder how well <a href=\"https://rust-lang.github.io/rust-clippy/master/index.html#undocumented_unsafe_blocks\">https://rust-lang.github.io/rust-clippy/master/index.html#undocumented_unsafe_blocks</a> handles that.</p>",
        "id": 272453381,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1645216184
    },
    {
        "content": "<blockquote>\n<p>\"unsafe is not at the most precise position it could be in the AST\"</p>\n</blockquote>\n<p>Regarding maximally precise <code>unsafe</code>, IMO new syntax is needed, because otherwise it’s hard/impossible to exclude the arguments, as in something like: <code>unsafe { unsafe_function(safe_arg) }</code> but disallowing any additional unsafety in the <code>safe_arg</code> expression. I’ve written up some idea in this thread on IRLO: <a href=\"https://internals.rust-lang.org/t/unsafe-categories/15334/2\">https://internals.rust-lang.org/t/unsafe-categories/15334/2</a></p>",
        "id": 272453649,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1645216268
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/213817-t-lang/topic/.2393678.20unused_unsafe.20changes/near/272453297\">said</a>:</p>\n<blockquote>\n<p><code>foo().trusted#unwrap_unchecked()</code></p>\n</blockquote>\n<p>Too bad we already used <code>!</code> for macros — would be appropriately alarming.</p>",
        "id": 272453681,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1645216288
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> <code>safething().unsafething()</code> is very much the case I'm thinking of for not being able to syntactically separate the two. That seems like \"another level\" of the warning, where you wouldn't want to get a warning if you have to pull out a let binding just to shrink the scope of <code>unsafe</code>.</p>",
        "id": 272453777,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645216331
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> Heh. The use of <code>!</code> for that purpose would remind me of the conventional meaning of <code>!</code> in fanfiction and similar. \"aspect!character\".</p>",
        "id": 272453859,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645216385
    },
    {
        "content": "<p>e.g. <code>evil!canonchar</code> or <code>machiavellian!canonchar</code>.</p>",
        "id": 272453893,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645216407
    },
    {
        "content": "<p><code>unsafe!function</code></p>",
        "id": 272453909,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645216417
    },
    {
        "content": "<p>Overall, I think that \"smallest <code>unsafe{}</code> scope\" is really an \"all I have is a hammer\" problem.</p>\n<p>The <em>real</em> goal is \"did I check all the preconditions\", which is only indirectly demonstrated by having small-scoped <code>unsafe{}</code>.  (Or <code>trustme!whatever()</code>.)</p>\n<p>Which gets into what <span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> was saying.  If we formalized the system of \"here are the preconditions\" from the <code>## Safety</code> section convention, and added some way to write out which ones you checked (like the <code>// SAFETY</code> comment convention) then having larger <code>trusted{}</code> blocks would be completely fine.</p>",
        "id": 272454047,
        "sender_full_name": "scottmcm",
        "timestamp": 1645216486
    },
    {
        "content": "<p>From a perspective of preconditions, yes. But I'm not sure that's my \"real goal\" when shrinking unsafe blocks.</p>",
        "id": 272454097,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645216530
    },
    {
        "content": "<p>Well, to me a huge part of the purpose is that if you add another unsafe call inside the existing one, you might forget to check something.  But that's only a problem if the preconditions are different.</p>\n<p>Spitball: <code>unsafe(4) { ... there must be exactly 4 unsafe things in here ... }</code>.</p>",
        "id": 272454357,
        "sender_full_name": "scottmcm",
        "timestamp": 1645216687
    },
    {
        "content": "<p>The preconditions <em>changing</em> is my largest worry, personally, in practice</p>",
        "id": 272454387,
        "sender_full_name": "simulacrum",
        "timestamp": 1645216707
    },
    {
        "content": "<p>(for an internal unsafe fn)</p>",
        "id": 272454419,
        "sender_full_name": "simulacrum",
        "timestamp": 1645216726
    },
    {
        "content": "<p>I think I do get the idea of \"if you had to demonstrate knowledge of all the preconditions, then you can't accidentally do something unsafe that you didn't mean to\".</p>",
        "id": 272454423,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645216730
    },
    {
        "content": "<p>But at the same time, I feel like \"do I have all the preconditions met\" is a necessary but not sufficient condition for me to <em>want</em> to call an unsafe function.</p>",
        "id": 272454456,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645216754
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/213817-t-lang/topic/.2393678.20unused_unsafe.20changes/near/272454357\">said</a>:</p>\n<blockquote>\n<p>Spitball: <code>unsafe(4) { ... there must be exactly 4 unsafe things in here ... }</code>.</p>\n</blockquote>\n<p>I think this would be unweildy in the face of <code>#[cfg(...)]</code>ed away code</p>",
        "id": 272454458,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1645216755
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209168\">@Thom Chiovoloni</span> That'd be a pretty complex unsafe block, to have cfg <em>inside</em> it, as opposed t pulling the cfg <em>outside</em> and having multiple unsafe blocks.</p>",
        "id": 272454494,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645216784
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/213817-t-lang/topic/.2393678.20unused_unsafe.20changes/near/272454387\">said</a>:</p>\n<blockquote>\n<p>The preconditions <em>changing</em> is my largest worry, personally, in practice</p>\n</blockquote>\n<p>Yeah, since anything about scoping doesn't fix that.</p>\n<p>But I could imagine a like <code>unsafe(even(x)) { foo(x) }</code> that would make more specific promises to guard against that.</p>",
        "id": 272454604,
        "sender_full_name": "scottmcm",
        "timestamp": 1645216844
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/.2393678.20unused_unsafe.20changes/near/272454456\">said</a>:</p>\n<blockquote>\n<p>But at the same time, I feel like \"do I have all the preconditions met\" is a necessary but not sufficient condition for me to <em>want</em> to call an unsafe function.</p>\n</blockquote>\n<p>I think this is good to call out -- but it seems like there is a separate thing at play here: there is the ub-free correctness (code is sound, i.e., preconditions met) and <em>separately</em> correctness/maintenance/etc of 'am I calling the right things' or something like that.</p>",
        "id": 272454620,
        "sender_full_name": "simulacrum",
        "timestamp": 1645216853
    },
    {
        "content": "<p>There's also \"is there a safe way to do this\".</p>",
        "id": 272454638,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645216867
    },
    {
        "content": "<p>I'm not sure I've dialed in on the second part</p>",
        "id": 272454644,
        "sender_full_name": "simulacrum",
        "timestamp": 1645216871
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/213817-t-lang/topic/.2393678.20unused_unsafe.20changes/near/272454047\">said</a>:</p>\n<blockquote>\n<p>If we formalized the system of \"here are the preconditions\" from the <code>## Safety</code> section convention, and added some way to write out which ones you checked (like the <code>// SAFETY</code> comment convention)</p>\n</blockquote>\n<p>Makes me think of something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[warn(unsafe_op_in_unsafe_fn)]</span><span class=\"w\"></span>\n\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">example</span><span class=\"p\">(</span><span class=\"n\">ptr</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// [^s1]</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"p\">.</span><span class=\"n\">is_null</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// SAFETY:</span>\n<span class=\"w\">    </span><span class=\"c1\">// - not null: [^s1]</span>\n<span class=\"w\">    </span><span class=\"c1\">// - aligned: because I said so</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;*</span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">dbg!</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 272454688,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1645216909
    },
    {
        "content": "<p>And even if it's not exactly \"changing\", it'd be handy to have a way to catch the \"I checked the ones I remember but forgot something else more subtle\" problem too.  Like <code>slice::from_raw_parts</code> people easily remember the non-nullness, but can easily forget to check the \"and at most isize::MAX bytes\" part.</p>",
        "id": 272454787,
        "sender_full_name": "scottmcm",
        "timestamp": 1645216952
    },
    {
        "content": "<p>For instance, hypothetically, suppose I have <code>safe_func(unsafe { unsafe_arg }, safe_arg)</code>. If I instead wrap the unsafe around the whole thing, I could accidentally call an unsafe function in <code>safe_arg</code> and not have that flagged. Hypothetically, the compiler could somehow know that the unsafe unction I'm calling in what I thought was <code>safe_arg</code> is something for which I have the prerequisites, and thus can actually call, but I still don't <em>want</em> that argument depending on those prerequisites, and I would rather express it in a way that doesn't depend on those prerequisites. (All that assuming it's even <em>possible</em> for the compiler to prove the prerequisites, which, insert skepticism here.)</p>",
        "id": 272454822,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645216983
    },
    {
        "content": "<p>I'm definitely not looking for compiler-assisted proofs (yet, at least) -- I just can't as a reviewer reliably track the 3-4 preconditions even something as 'simple' as ptr::read has</p>",
        "id": 272454894,
        "sender_full_name": "simulacrum",
        "timestamp": 1645217037
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 272454945,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645217049
    },
    {
        "content": "<p>I think part of my trepidation is that even with compiler assistance, I'm not looking to write programs right up at the boundary of my complexity-limit to be able to write.</p>",
        "id": 272454995,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645217084
    },
    {
        "content": "<p>just force all unsafe functions to be imported with <code>unsafe use</code>, so you can't call them by accident in an existing unsafe block :)</p>",
        "id": 272455009,
        "sender_full_name": "bstrie",
        "timestamp": 1645217090
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/.2393678.20unused_unsafe.20changes/near/272454822\">said</a>:</p>\n<blockquote>\n<p>(All that assuming it's even <em>possible</em> for the compiler to prove the prerequisites, which, insert skepticism here.)</p>\n</blockquote>\n<p>I agree on \"prove\".  I was thinking more \"well there were N precondition labels on the <code>unsafe fn</code>  you're calling, so unless you also put those labels, with justification, on the <code>trusted{}</code> block, then you get at least a warning\".</p>",
        "id": 272455023,
        "sender_full_name": "scottmcm",
        "timestamp": 1645217100
    },
    {
        "content": "<p>I'd like to stay far, far away from that complexity limit, and I appreciate the compiler helping me on that front by rejecting various things that might actually be valid programs. :)</p>",
        "id": 272455044,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645217118
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/213817-t-lang/topic/.2393678.20unused_unsafe.20changes/near/272455023\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/.2393678.20unused_unsafe.20changes/near/272454822\">said</a>:</p>\n<blockquote>\n<p>(All that assuming it's even <em>possible</em> for the compiler to prove the prerequisites, which, insert skepticism here.)</p>\n</blockquote>\n<p>I agree on \"prove\".  I was thinking more \"well there were N precondition labels on the <code>unsafe fn</code>  you're calling, so unless you also put those labels, with justification, on the <code>trusted{}</code> block, then you get at least a warning\".</p>\n</blockquote>\n<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 272455055,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645217125
    },
    {
        "content": "<p>I'm a big fan of the idea of \"please copy the terms-and-conditions for calling this unsafe function so that you have more chance of being aware of them and thinking about them\".</p>",
        "id": 272455093,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645217155
    },
    {
        "content": "<p>Absolutely, I think the reality is that at least IMO even pretty simple unsafe code quickly generates a lot of preconditions that are hard to keep track of manually, especially as you refactor code around -- this is basically the 'why it is hard to write C code' problem :)</p>",
        "id": 272455095,
        "sender_full_name": "simulacrum",
        "timestamp": 1645217158
    },
    {
        "content": "<p>and copying doesn't help if I don't have someone saying \"yes you copied right\" after someone changes that function :)</p>",
        "id": 272455160,
        "sender_full_name": "simulacrum",
        "timestamp": 1645217184
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/213817-t-lang/topic/.2393678.20unused_unsafe.20changes/near/272455023\">said</a>:</p>\n<blockquote>\n<p>well there were N precondition labels on the <code>unsafe fn</code>  you're calling, so unless you also put those labels, with justification, on the <code>trusted{}</code> block, then you get at least a warning</p>\n</blockquote>\n<p>@bors r+</p>",
        "id": 272455174,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1645217193
    },
    {
        "content": "<p>I think if I had something like <code>unsafe { (func1(), func2()) }</code>, and func1 and func2 had preconditions, and some of those preconditions are in common, I'd still want to actually have to say <code>SAFETY(func1, func2): common_precondition</code>.</p>",
        "id": 272455248,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645217239
    },
    {
        "content": "<p>Not just <code>SAFETY: common_precondition</code>.</p>",
        "id": 272455259,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645217251
    },
    {
        "content": "<p>\"Yes, I know this applies to both func1 and func2\".</p>",
        "id": 272455269,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645217262
    },
    {
        "content": "<p>Yes, absolutely</p>",
        "id": 272455282,
        "sender_full_name": "simulacrum",
        "timestamp": 1645217267
    },
    {
        "content": "<p>If we had <em>that</em>, and it was somehow <em>required</em> for all unsafe functions, then yeah, I'd be a little less concerned about the size of unsafe blocks.</p>",
        "id": 272455358,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645217305
    },
    {
        "content": "<p>If it was recommended but not required, then I'd continue to be concerned about the size of unsafe blocks.</p>",
        "id": 272455388,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645217325
    },
    {
        "content": "<p>(Note that the reference there <code>func1</code> is a 'really hard' question, and I think the primary driver in my mind for minimally sized unsafe blocks)</p>",
        "id": 272455403,
        "sender_full_name": "simulacrum",
        "timestamp": 1645217341
    },
    {
        "content": "<p>spitball:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"p\">(</span><span class=\"n\">valid_ptr</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">aligned_ptr</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">initialized_target</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">read</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"n\">trusted</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">valid_ptr</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"... stuff here\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">aligned_ptr</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"... stuff here\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">initialized_target</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"... stuff here\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ptr</span>::<span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 272455435,
        "sender_full_name": "scottmcm",
        "timestamp": 1645217359
    },
    {
        "content": "<p>Earlier someone proposed <code>mod unsafe</code>. I think this might have helped with spotting the issue in <a href=\"https://github.com/rust-lang/rust/issues/94115\">#94115</a> due to the contagiousness of the unsafe requirements. Narrow unsafe blocks can be fiction.</p>",
        "id": 272456066,
        "sender_full_name": "The 8472",
        "timestamp": 1645217746
    },
    {
        "content": "<p>Or <code>unsafe struct</code> perhaps.</p>",
        "id": 272456793,
        "sender_full_name": "The 8472",
        "timestamp": 1645218035
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/213817-t-lang/topic/.2393678.20unused_unsafe.20changes/near/272456793\">said</a>:</p>\n<blockquote>\n<p>Or <code>unsafe struct</code> perhaps.</p>\n</blockquote>\n<p>Any thoughts on how this would differ from unsafe fields?</p>\n<p>I guess I haven't thought through whether it would ever make sense to have a struct where only <em>some</em> of the fields are unsafe.  If realistically one would just make all the fields unsafe, then it might as well be at the struct level</p>",
        "id": 272457137,
        "sender_full_name": "scottmcm",
        "timestamp": 1645218238
    },
    {
        "content": "<p>I meant this more as a marker that a struct has <code>unsafe impl Trait for MyStruct</code> somewhere else so you need to think about invariants when touching anything related to that struct, its fields and even safe impls.</p>",
        "id": 272457516,
        "sender_full_name": "The 8472",
        "timestamp": 1645218426
    },
    {
        "content": "<p>But yeah, ok, I guess in this case having it on the field might have worked too. But there are others where it wouldn't. <code>adapters::Zip</code> for example is just all-unsafe.</p>",
        "id": 272457770,
        "sender_full_name": "The 8472",
        "timestamp": 1645218561
    },
    {
        "content": "<p>The real annoying part in that case is specialization. The default impl is harmless. Only when specialized everything becomes radioactive. This is hard to express with markers. Maybe if we had views then the view could be used to introduce conditional unsafety.</p>",
        "id": 272458070,
        "sender_full_name": "The 8472",
        "timestamp": 1645218738
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/213817-t-lang/topic/.2393678.20unused_unsafe.20changes/near/272457516\">said</a>:</p>\n<blockquote>\n<p>I meant this more as a marker that a struct has <code>unsafe impl Trait for MyStruct</code> somewhere else</p>\n</blockquote>\n<p>Hmm, I don't know that that necessarily means there are invariants, though.  Like <code>unsafe impl TrustedOrd for PairOfUsize{}</code> could be fine even if there's no invariants on the fields at all.</p>",
        "id": 272458131,
        "sender_full_name": "scottmcm",
        "timestamp": 1645218774
    },
    {
        "content": "<p>Using <code>derive(Ord)</code> would be part of it though. If someone comes in and adds a custom Ord impl and doesn't see the TrustedOrd they could break it.</p>",
        "id": 272458454,
        "sender_full_name": "The 8472",
        "timestamp": 1645218938
    },
    {
        "content": "<p>Perhaps in the same realm as <strong>simulacrum</strong>'s effect system , perhaps completely disjoint, I'd love for a way to avoid this comment:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// SAFETY: This is **not** actually safe. The user of `RawStr` must ensure that the safety contract</span>\n<span class=\"sd\">/// of [`Self::as_str`] is upheld to use this trait.</span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Hash</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">RawStr</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 272458787,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1645219115
    },
    {
        "content": "<p>(that <code>RawStr</code> type is not public, thankfully, so it's just on me to deal with that)</p>",
        "id": 272458857,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1645219158
    },
    {
        "content": "<p>That's why I like <code>impl const Default</code> instead of <code>const impl Default</code>, actually.</p>\n<p>Because I could imagine <code>impl unsafe Hash for RawStr</code> that makes all the methods unsafe to call, as something different from the <code>unsafe impl Hash for RawStr</code> that has a meaning today.</p>",
        "id": 272461394,
        "sender_full_name": "scottmcm",
        "timestamp": 1645220576
    },
    {
        "content": "<p>I'm not saying the semantic distinction might not be useful there, but I'll never remember which of those is which :P</p>",
        "id": 272463822,
        "sender_full_name": "bstrie",
        "timestamp": 1645221732
    },
    {
        "content": "<p>(While I don't disagree, at least <code>unsafe impl Hash</code> would be an error because <code>Hash</code> isn't an <code>unsafe Trait</code>, and <code>impl unsafe TrustedLen</code> would be an error because <code>TrustedLen</code> <em>is</em> an <code>unsafe Trait</code>.)</p>",
        "id": 272484456,
        "sender_full_name": "scottmcm",
        "timestamp": 1645236573
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/213817-t-lang/topic/.2393678.20unused_unsafe.20changes/near/272458787\">said</a>:</p>\n<blockquote>\n<p>Perhaps in the same realm as <strong>simulacrum</strong>'s effect system , perhaps completely disjoint, I'd love for a way to avoid this comment:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// SAFETY: This is **not** actually safe. The user of `RawStr` must ensure that the safety contract</span>\n<span class=\"sd\">/// of [`Self::as_str`] is upheld to use this trait.</span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Hash</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">RawStr</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Heh, this makes me wonder about a safety comment I just wrote today:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// Safety: This is actually unsafe, `foo()` requires that we don't call `bar()` on the result but we do anyway.</span>\n<span class=\"c1\">// This leads to a potential data race, but it's unlikely to occur in practice because &lt;reasons&gt;. FIXME</span>\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}.</span><span class=\"n\">bar</span><span class=\"p\">()</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 272506476,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645263114
    },
    {
        "content": "<p>I wonder where in the ecosystem of safety contracts we put \"things that are actually bugs and consciously written that way but are low priority for whatever reason\"</p>",
        "id": 272506640,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645263272
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> Is that comment meant to say “This is actually unsound” instead of “This is actually unsafe”?</p>",
        "id": 272519144,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1645278077
    },
    {
        "content": "<p>Yes, although I usually only use that terminology for libraries and this is application code (although that might just be irrational naming sense on my part)</p>",
        "id": 272519365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645278280
    }
]