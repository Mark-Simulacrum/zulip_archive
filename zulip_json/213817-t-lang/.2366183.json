[
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1977\">@T-lang</span>  So I'm hacking on <a href=\"https://github.com/rust-lang/rust/pull/66183\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/66183\">https://github.com/rust-lang/rust/pull/66183</a> at the moment and I was wondering how y'all feel about syntactically allowing <code>enum E { pub V, ... }</code> (note the visibility!) but rejecting it semantically (in <code>ast_validation.rs</code> to be more specific)</p>",
        "id": 180253176,
        "sender_full_name": "centril",
        "timestamp": 1573234749
    },
    {
        "content": "<p>Maybe I‚Äôm missing something: if it‚Äôs rejected either way, then isn‚Äôt the just an implementation Q (for T-compiler), not a Lang team Q?</p>",
        "id": 180253656,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573235084
    },
    {
        "content": "<p>I suppose there is fallout for macro_rules (some inputs will be parsed that would have been rejected before). Anything else?</p>",
        "id": 180253740,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573235155
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> right; it changes the formal grammar to accept them</p>",
        "id": 180253821,
        "sender_full_name": "centril",
        "timestamp": 1573235202
    },
    {
        "content": "<p>e.g. wg-grammar would include the visibility in the \"BNF\"</p>",
        "id": 180253846,
        "sender_full_name": "centril",
        "timestamp": 1573235227
    },
    {
        "content": "<p>I‚Äôm just trying to understand the consequences for ... well I don‚Äôt know about ‚Äúaverage developer‚Äù, but one not involved with wg-grammar, let‚Äôs say</p>",
        "id": 180253927,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573235284
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> you can write e.g.:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">macro_rules</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">mac</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$v</span>:<span class=\"nc\">vis</span><span class=\"w\"> </span><span class=\"cp\">$i</span>:<span class=\"nc\">ident</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">enum</span> <span class=\"nc\">E</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cp\">$v</span><span class=\"w\"> </span><span class=\"cp\">$i</span><span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">mac</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">Foo</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>(this isn't very interesting but I recon there might be some DSL some user might build atop of this)</p>",
        "id": 180254122,
        "sender_full_name": "centril",
        "timestamp": 1573235410
    },
    {
        "content": "<p>Something potentially useful someone might think to create:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[with_struct]</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">Baz</span><span class=\"p\">(</span><span class=\"kt\">u16</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// expands to:</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Bar</span><span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Baz</span><span class=\"p\">(</span><span class=\"kt\">u16</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Bar</span><span class=\"p\">(</span><span class=\"n\">Bar</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Baz</span><span class=\"p\">(</span><span class=\"n\">Baz</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 180254982,
        "sender_full_name": "centril",
        "timestamp": 1573236006
    },
    {
        "content": "<p>a proc macro can be aware of what it's doing and not put visibility on the enum part</p>",
        "id": 180255053,
        "sender_full_name": "Lokathor",
        "timestamp": 1573236064
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> how do you mean?</p>",
        "id": 180255095,
        "sender_full_name": "centril",
        "timestamp": 1573236100
    },
    {
        "content": "<p>( <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=6f2c6f48c2af39a8679b9dd0fba1cc39\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=6f2c6f48c2af39a8679b9dd0fba1cc39\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=6f2c6f48c2af39a8679b9dd0fba1cc39</a> )</p>",
        "id": 180255372,
        "sender_full_name": "centril",
        "timestamp": 1573236309
    },
    {
        "content": "<p>a macro_rules! is a \"stupid\" automatic system that follows an inflexible ruleset for expansion</p>\n<p>but a proc-macro is a much more crafted and bespoke system any time they're produced, and if you're going to make a proc-macro that can accept visibility tags and also emit custom enum definitions, then you should program the proc-macro to <em>not</em> put visibility on the enum tags, the same as your proc-macro shouldn't emit any other invalid data</p>",
        "id": 180255376,
        "sender_full_name": "Lokathor",
        "timestamp": 1573236313
    },
    {
        "content": "<p>(whoops fixed)</p>",
        "id": 180255475,
        "sender_full_name": "Lokathor",
        "timestamp": 1573236363
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> you cannot encode a procedural macro that accepts the <code>#[with_struct] enum Foo { pub Bar(u8), ... }</code> above.</p>",
        "id": 180255486,
        "sender_full_name": "centril",
        "timestamp": 1573236369
    },
    {
        "content": "<p>ah! my misunderstanding then!</p>\n<p>i have only ever used the \"function style\" proc-macros which accept any token tree at all.</p>",
        "id": 180255648,
        "sender_full_name": "Lokathor",
        "timestamp": 1573236486
    },
    {
        "content": "<p>ah <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span> yeah, bang macros do accept arbitrary tts but attributes require well-formed syntax (an <code>:item</code> specifically in this case)</p>",
        "id": 180255687,
        "sender_full_name": "centril",
        "timestamp": 1573236531
    },
    {
        "content": "<p>then it seems like a good change.</p>\n<p>also, private enum variants might even become a good idea some day once <code>non_exhaustive</code> has been stable for a while.</p>",
        "id": 180255986,
        "sender_full_name": "Lokathor",
        "timestamp": 1573236737
    },
    {
        "content": "<p>I think it would, but it probably takes more than the 30 minutes it would take for me to allow it syntactically ^^</p>",
        "id": 180256013,
        "sender_full_name": "centril",
        "timestamp": 1573236767
    },
    {
        "content": "<p>Ignoring macro_rules macros, and ignoring changes to diagnostics, it seems like there‚Äôs no observable difference here, right?</p>",
        "id": 180263663,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573241644
    },
    {
        "content": "<p>So the only thing I‚Äôll want to double-check is what the actual effect on macro_rules is</p>",
        "id": 180263964,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573241873
    },
    {
        "content": "<p>But I‚Äôm basically üëç for it</p>",
        "id": 180264014,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573241886
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>  two things are interesting in that respect: 1) <code>$item</code> can now accept <code>enum X { pub Y }</code>; for example, this would be valid:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">macro_rules</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">accept_item</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"cp\">$i</span>:<span class=\"nc\">item</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">accept_item</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"k\">enum</span> <span class=\"nc\">X</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"w\"> </span><span class=\"p\">});</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>2) when <code>$v:vis</code> is substituted for nothing, then <code>enum X { $v Y }</code> is both semantically and syntactically OK because you get <code>VisibilityKind::Inherited</code> (which has no new semantic effects).</p>",
        "id": 180264341,
        "sender_full_name": "centril",
        "timestamp": 1573242128
    },
    {
        "content": "<p>That is, ast_validation would reject anything but <code>VisibilityKind::Inherited</code></p>",
        "id": 180264375,
        "sender_full_name": "centril",
        "timestamp": 1573242162
    },
    {
        "content": "<p>Alright; the mood seems positive, so I'll go implement it and ping everyone again on the PR</p>",
        "id": 180264427,
        "sender_full_name": "centril",
        "timestamp": 1573242200
    },
    {
        "content": "<p>So those points both sound like pure increases in expressive power to me. The thing I wanted to double check was if there was any way a macro with multiple arms could change behavior due to this</p>",
        "id": 180264716,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573242399
    },
    {
        "content": "<p>If my memory is correct, our intent was that this should not be the case</p>",
        "id": 180264762,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573242426
    },
    {
        "content": "<p>But I‚Äôve definitely been wrong about the semantics of macros 1.0 in the past</p>",
        "id": 180264786,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573242452
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> are you thinking of follow-set troubles here?</p>",
        "id": 180266636,
        "sender_full_name": "centril",
        "timestamp": 1573243524
    },
    {
        "content": "<p>That‚Äôs an example of where I‚Äôve been wrong, yeah</p>",
        "id": 180269139,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573245320
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> I am in favor of this sort of change in general</p>",
        "id": 180272246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573247335
    },
    {
        "content": "<p>great <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 180272284,
        "sender_full_name": "centril",
        "timestamp": 1573247363
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> seems there won't be any follow-set problems: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">macro_rules</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">ai</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$i</span>:<span class=\"nc\">item</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">dbg</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"k\">enum</span> <span class=\"nc\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">dbg</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ai</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"k\">enum</span> <span class=\"nc\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ai</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"k\">enum</span> <span class=\"nc\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">//~ ERROR unnecessary visibility qualifier</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>We should be all good.</p>",
        "id": 180285160,
        "sender_full_name": "centril",
        "timestamp": 1573257778
    }
]