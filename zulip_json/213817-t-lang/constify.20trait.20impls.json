[
    {
        "content": "<p>Is there any way to constify some trait impls but not others? It seems like <code>const fn</code>s are not supported in traits yet, but once they are it would be nice to have some impls be const and some not be</p>",
        "id": 214258335,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603408114
    },
    {
        "content": "<p>I guess this is related to the thing where you can't have safe impls of unsafe traits</p>",
        "id": 214258359,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603408148
    },
    {
        "content": "<p>But it would be really nice to have things like <code>String::from</code> be const, but not require all <code>From</code> impls to be const - for one because of compatibility and also because some impls may not be const-able</p>",
        "id": 214258390,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603408190
    },
    {
        "content": "<p>It looks like there's some information <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0911-const-fn.md#alternatives\">in the RFC</a>, but are there any plans on how we can allow things like <code>String::from</code> to work in const contexts?</p>",
        "id": 214258507,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603408299
    },
    {
        "content": "<p>E.g. it would be nice to be able to concatenate strings in <code>const</code> blocks (this example is somewhat contrived):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"s\">\"hello, world\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"s\">\"hello\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"s\">\", world\"</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"cm\">/* matched */</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 214258583,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603408375
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Camelid</span> <a href=\"#narrow/stream/213817-t-lang/topic/constify.20trait.20impls/near/214258359\">said</a>:</p>\n<blockquote>\n<p>I guess this is related to the thing where you can't have safe impls of unsafe traits</p>\n</blockquote>\n<p>I realized I never discussed that in the internals thread on this topic <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span>,  but the reason that doesn't work  isn't because of technical stuff but because the word unsafe has a different meaning in both contexts :/</p>",
        "id": 214258894,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1603408661
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307537\">@Camelid</span> the general idea of \"impls should be able to be more general than the trait\" is discussed somewhat in <a href=\"https://github.com/rust-lang/rfcs/pull/2316\">https://github.com/rust-lang/rfcs/pull/2316</a></p>",
        "id": 214259992,
        "sender_full_name": "scottmcm",
        "timestamp": 1603409639
    },
    {
        "content": "<p>But I think for <code>const</code> the plan is to have something like <code>impl const Default for Foo</code> to make the impl usable in const context.</p>",
        "id": 214260064,
        "sender_full_name": "scottmcm",
        "timestamp": 1603409676
    },
    {
        "content": "<p>As opposed to <code>const impl</code>? <code>const impl</code> seems like it says more clearly that \"it's const only for this impl, not for the trait in general\"</p>",
        "id": 214260647,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603410160
    },
    {
        "content": "<p>There's been lots of discussion about that :P  I prefer the other order because <code>unsafe impl</code> is a different kind of thing than <code>const impl</code> would be.  Also because it would be consistent with a bound like <code>where T: const Default</code>.</p>\n<p>But it's still very much open what it will actually be.  Could well end up being <code>const impl Default for Foo</code>.</p>",
        "id": 214260783,
        "sender_full_name": "scottmcm",
        "timestamp": 1603410279
    },
    {
        "content": "<p>Bikeshed for the win! <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 214260915,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603410391
    },
    {
        "content": "<p>I also try to always thing about <code>const</code> and <code>unsafe</code> together, as they're both \"uncarried\" effects so usually the same features make sense for both.</p>",
        "id": 214260949,
        "sender_full_name": "scottmcm",
        "timestamp": 1603410465
    },
    {
        "content": "<p>For example, <code>unsafe impl Foo</code> means \"there are unchecked postconditions that the implementation must satisfy\", and there's not really an obvious <code>const</code> analogue to that.</p>",
        "id": 214261062,
        "sender_full_name": "scottmcm",
        "timestamp": 1603410578
    },
    {
        "content": "<p>Over my head <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 214261119,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603410605
    },
    {
        "content": "<p>whereas if there's <code>impl const Foo</code> meaning \"all the methods are const, even though they're possibly not-const\", then I could also imagine <code>impl unsafe Foo</code> meaning \"all the methods are <code>unsafe</code>, even though they're usually not\", which would be different from <code>unsafe impl Foo</code>.</p>",
        "id": 214261158,
        "sender_full_name": "scottmcm",
        "timestamp": 1603410651
    },
    {
        "content": "<p>(Not that I'm saying such a feature is necessarily a good thing, but that's what I'd expect it to do if it did exist.)</p>",
        "id": 214261185,
        "sender_full_name": "scottmcm",
        "timestamp": 1603410700
    },
    {
        "content": "<p>Relevant tracking issues for the current status of the impl around all this are <a href=\"https://github.com/rust-lang/rust/issues/67794\">https://github.com/rust-lang/rust/issues/67794</a> and <a href=\"https://github.com/rust-lang/rust/issues/67792\">https://github.com/rust-lang/rust/issues/67792</a></p>",
        "id": 214294991,
        "sender_full_name": "oli",
        "timestamp": 1603447859
    }
]