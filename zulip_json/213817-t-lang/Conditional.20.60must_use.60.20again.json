[
    {
        "content": "<p>A <a href=\"https://github.com/rust-lang/rust/pull/78182#discussion_r509431383\">conversation about <code>ControlFlow</code></a> made this thought jump to mind: <code>Result&lt;_, !&gt;</code> doesn't really need to be <code>must_use</code>.</p>\n<p>That's not at all risen to the level of a proposal, or even that I think it's necessarily a problem that needs solving, but it seemed interesting given previous conversations about whether wrapper types should inherit <code>must_use</code> from things.</p>",
        "id": 214132182,
        "sender_full_name": "scottmcm",
        "timestamp": 1603327252
    },
    {
        "content": "<p>(I'll remind folks that <em>types</em> shouldn't be <code>must_use</code>, <em>return values</em> should be <code>must_use</code>.</p>\n<p>Marking types as <code>must_use</code> is just a clumsy stand-in for blanket marking of certain return values as <code>must_use</code> by default.)</p>",
        "id": 214146733,
        "sender_full_name": "Lokathor",
        "timestamp": 1603346828
    },
    {
        "content": "<p>In most cases I agree, though if you have a type like Result or Future that'll always want to be marked as such, marking the type seems like a handy shortcut.</p>",
        "id": 214146838,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603346962
    },
    {
        "content": "<p>It seems plausible that not just return values - e.g. I would want a block that \"returns\" Result to get caught too. So more like expressions with must_use type.</p>",
        "id": 214183591,
        "sender_full_name": "simulacrum",
        "timestamp": 1603372092
    },
    {
        "content": "<p>I don't know that I agree, <span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span>, but also that doesn't really help with the problem. After all, <code>fn foo&lt;E&gt;(x: ...) -&gt; Result&lt;T, E&gt;</code> could be instantiated with <code>E = !</code>.</p>",
        "id": 214215443,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603385557
    }
]