[
    {
        "content": "<p>It looks like there's some renewed interest in postfix macros (cc <span class=\"user-mention\" data-user-id=\"120096\">@est31</span>). I just rewrote <a href=\"https://github.com/rust-lang/rfcs/pull/2442\">RFC 2442</a>, to account for changes in Rust (specifically, <code>await!(expr)</code> becoming <code>expr.await</code>).</p>",
        "id": 215980375,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604794656
    },
    {
        "content": "<p>I've carefully removed anything in RFC 2442 that was using await syntax as potential motivation, since we've now solved that problem.</p>",
        "id": 215980423,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604794689
    },
    {
        "content": "<p>Instead, I'm treating it as additional motivation for the desirability of postfix syntax.</p>",
        "id": 215980429,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604794706
    },
    {
        "content": "<p>Does the <code>$self</code> in that RFC conflict with the discussion about allowing <code>$self::foo::Bar</code> in paths?</p>",
        "id": 216024159,
        "sender_full_name": "scottmcm",
        "timestamp": 1604867795
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> Interesting point!</p>",
        "id": 216029147,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604875321
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> It hadn't occurred to me until just now that the syntax of <code>$crate</code> and the syntax of <code>$somevar</code> overlap.</p>",
        "id": 216029947,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604876491
    },
    {
        "content": "<p>But sure enough, you can't use <code>$crate</code> as the name of a macro argument.</p>",
        "id": 216030025,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604876609
    },
    {
        "content": "<p>And if we allow <code>$self</code> (and perhaps <code>$super</code>) by analogy with <code>$crate</code>, that <em>would</em> generate a conflict.</p>",
        "id": 216030034,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604876632
    },
    {
        "content": "<p>Interestingly, you <em>can</em> name a macro argument <code>$self</code> or <code>$super</code> today.</p>",
        "id": 216030097,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604876693
    },
    {
        "content": "<p>Which means introducing those as proposed by <a href=\"https://github.com/rust-lang/rfcs/pull/2968\">RFC 2968</a> would be a breaking change.</p>",
        "id": 216030116,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604876733
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> Writing up a summary for the postfix macros thread. Suggestions welcome.</p>",
        "id": 216030823,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604877696
    },
    {
        "content": "<p>Oh, interesting.  I'm surprised keywords aren't just blanket blocked in macro identifier names.</p>",
        "id": 216031059,
        "sender_full_name": "scottmcm",
        "timestamp": 1604877991
    },
    {
        "content": "<p>They don't seem to be.</p>",
        "id": 216031247,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604878269
    },
    {
        "content": "<p>On a different note, someone in the RFC thread made a good suggestion about syntax:</p>",
        "id": 216031270,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604878302
    },
    {
        "content": "<p>Rather than <code>($self:self, $other:tt, $arguments:expr) =&gt; ...</code>, with a comma that doesn't correspond to any actual syntax used at invocation, it would make sense to pull <code>$self</code> (or whatever we call it) out of the parens:</p>",
        "id": 216031333,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604878365
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">macro_rules</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">postfix</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">$self</span><span class=\"p\">.(</span><span class=\"cp\">$arg1</span>:<span class=\"nc\">tt</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$arg2</span>:<span class=\"nc\">expr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 216031366,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604878409
    },
    {
        "content": "<p>Does that seem like it'd cause any potential parsing issues, when parsing the macro definition itself?</p>",
        "id": 216031376,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604878417
    },
    {
        "content": "<p>If not, I think that's rather appealing.</p>",
        "id": 216031381,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604878431
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/213817-t-lang/topic/postfix.20macros/near/216031059\">said</a>:</p>\n<blockquote>\n<p>Oh, interesting.  I'm surprised keywords aren't just blanket blocked in macro identifier names.</p>\n</blockquote>\n<p>I just confirmed that you can name a macro argument <code>$for</code> or <code>$if</code> as well.</p>",
        "id": 216031469,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604878551
    },
    {
        "content": "<p>That's surprising and confusing...</p>",
        "id": 216031471,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604878555
    },
    {
        "content": "<p>I <em>also</em> just confirmed that you can use <code>$r#if</code> as a macro argument name, which suggests a path to fixing this...</p>",
        "id": 216031550,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604878629
    },
    {
        "content": "<p>I wonder how much it would break if, in an edition, we prohibited the use of keywords as macro argument names?</p>",
        "id": 216031552,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604878635
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> What are the chances I could talk you into writing (or collaborating on) an extremely simple lang MCP to that effect?</p>",
        "id": 216031623,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604878732
    },
    {
        "content": "<p>I think it would suffice to make it clear that we observed this by way of proposals like RFC 2968 and RFC 2442, but in general we would like room to expand macro syntax as well as avoid confusion.</p>",
        "id": 216031710,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604878865
    },
    {
        "content": "<p>Whether it's adding <code>$super</code>, or adding some kind of syntax-level iteration or conditionals (e.g. <code>$for token in $some_tt</code> or <code>$if something about a parameter</code>), or any number of other potential future proposals, I think it'd be a good idea.</p>",
        "id": 216031784,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604878993
    },
    {
        "content": "<p>I'd be happy to help write and support that proposal, I'd just like to have some additional support pitching it.</p>",
        "id": 216031930,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604879216
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/lang-team/issues/68\">https://github.com/rust-lang/lang-team/issues/68</a></p>",
        "id": 216032455,
        "sender_full_name": "scottmcm",
        "timestamp": 1604880019
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/postfix.20macros/near/216031552\">said</a>:</p>\n<blockquote>\n<p>I wonder how much it would break if, in an edition, we prohibited the use of keywords as macro argument names?</p>\n</blockquote>\n<p>I know I have used <code>$self</code> as a macro arg in the past/present</p>",
        "id": 216032475,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604880060
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> Would it be much of an imposition to need to change that in an edition, if there's a rustfix?</p>",
        "id": 216041500,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604893604
    },
    {
        "content": "<p>well I could do it certainly, but it's also nice to be able to do</p>",
        "id": 216041525,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604893646
    },
    {
        "content": "<p>specifically, I use it to pass in the <code>self</code> argument from a function when dealing with hygiene</p>",
        "id": 216041581,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604893698
    },
    {
        "content": "<p><code>$celf</code></p>",
        "id": 216041595,
        "sender_full_name": "isHavvy",
        "timestamp": 1604893723
    },
    {
        "content": "<p>there is always the tried and true <code>this</code> for \"not-<code>self</code>\"</p>",
        "id": 216041616,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604893741
    },
    {
        "content": "<p>And of course there's always <code>$r#self</code>, which I've tested and confirmed to work.</p>",
        "id": 216041682,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604893830
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/213817-t-lang/topic/postfix.20macros/near/216032475\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/postfix.20macros/near/216031552\">said</a>:</p>\n<blockquote>\n<p>I wonder how much it would break if, in an edition, we prohibited the use of keywords as macro argument names?</p>\n</blockquote>\n<p>I know I have used <code>$self</code> as a macro arg in the past/present</p>\n</blockquote>\n<p>I have also used that</p>",
        "id": 216043050,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604896029
    },
    {
        "content": "<p>it would be nice not to have to change it, I use it pretty frequently</p>",
        "id": 216043053,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604896040
    },
    {
        "content": "<p>I would probably change to <code>$this</code> instead which seems less clear</p>",
        "id": 216043056,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604896058
    },
    {
        "content": "<p>(side note - it really annoys me that I have to use <code>|this| this.x()</code> when in a function taking self - why can't I just shadow <code>self</code>?)</p>",
        "id": 216043104,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604896092
    },
    {
        "content": "<p>Relatedly, I wish <code>self</code> were less \"special\" among variable names. Couldn't it just be a contextual keyword in the first argument position of a function declaration?</p>",
        "id": 216055571,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604911377
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/postfix.20macros/near/216031366\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">macro_rules</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">postfix</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">$self</span><span class=\"p\">.(</span><span class=\"cp\">$arg1</span>:<span class=\"nc\">tt</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$arg2</span>:<span class=\"nc\">expr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n</blockquote>\n<p>This indeed looks like a very nice syntax. If we were to support that, then the question of how the \"receiver\" is named becomes a non-issue, since the syntax makes it obvious that we are talking of a receiver type. This way, there is no need to special-case a <em>name</em>. At worst, if there was no such syntax, then the <code>:self</code> capture type would already allow to disambiguate, so that people could call that receiver <code>$self</code>, but they could also call it <code>$result:self, …</code>, for instance, if dealing with <code>.unwrap_or!</code><br>\nTL,DR: Magic names are handy when there are no other disambiguators, but in this case, it turns out there is one!</p>",
        "id": 216122863,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1604945526
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 216123213,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604945689
    },
    {
        "content": "<p>Yeah, rewriting to just remove the special name seems easiest.</p>",
        "id": 216123231,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604945704
    },
    {
        "content": "<p>would it be a horribly bad idea to just allow all macros where the first item is an $expr to be used in either postfix or prefix notation?</p>",
        "id": 216128398,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1604948180
    },
    {
        "content": "<p>I wouldn't say \"horrible\", but I think there's value in opting in.</p>",
        "id": 216128470,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604948217
    },
    {
        "content": "<p>I don't think this is just a matter of style.</p>",
        "id": 216128514,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604948243
    },
    {
        "content": "<p>If you have a macro whose semantics makes sense to use postfix, you can trivially add a case for postfix.</p>",
        "id": 216128551,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604948269
    },
    {
        "content": "<p>And if you want to adapt someone else's macro, you can easily write a wrapper macro that allows postfix.</p>",
        "id": 216128622,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604948285
    },
    {
        "content": "<p>If the receiver is only evaluated once (which makes sense), I think this should require explicit opt-in from macros</p>",
        "id": 216131110,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1604949525
    },
    {
        "content": "<p>A macro might intentionally repeat a particular <code>expr</code> to evaluate  it multiple times, and I think changing that depending on how the macro si invoked could be very confusing</p>",
        "id": 216131190,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1604949575
    },
    {
        "content": "<p>I think allowing all macros to be automatically used postfix opens up a bunch of questions that I'd rather avoid, like whether you can do <code>struct Foo {}.bar!()</code>.  Forcing it to only work with the special form (whether that's syntax or a <code>self</code> matcher) so it's clearly the \"this can only take a value\" makes sense to me.  (Assuming that the overall \"postfix macros are valuable and only take values not <code>tt</code>s\" is desirable.)</p>",
        "id": 216131347,
        "sender_full_name": "scottmcm",
        "timestamp": 1604949651
    },
    {
        "content": "<p>I also think that postfix macros should receive their arguments unevaluated. Yes it's confusing for <code>foo.bar().baz!()</code> to have <code>baz!</code> possibly change the meaning of the preceding code, but that's just a macro \"best practices\" question, it should not be decided at the compiler level</p>",
        "id": 216149557,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604959919
    },
    {
        "content": "<p>We should <em>encourage</em> macro authors to evaluate their <code>$self</code> arguments, but it seems entirely out of place for this to be a language restriction, and it doesn't always even make sense; for some things like <code>typed!</code> you might want to alter the way in which the preceding code is type inferred, and you might also change scoping. More general expression manipulation seems more dubious to me (as in, you would be making spaghetti code if you used this), but I find the argument for consistency with other kinds of macros compelling.</p>",
        "id": 216150243,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604960368
    },
    {
        "content": "<p>Knowing how far back to go is the hard part there, to me.  It feels weird that it could go arbitrarily far backwards -- rust generally has a token at the beginning to warn the reader that the interpretation of this region is different, like <code>async</code> or even <code>loop</code>.</p>",
        "id": 216154589,
        "sender_full_name": "scottmcm",
        "timestamp": 1604963309
    },
    {
        "content": "<p>I think that any code where this becomes a serious concern is already abusing macros</p>",
        "id": 216161874,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604969732
    },
    {
        "content": "<p>Personally I'm a fan of UFCS syntax (what <span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span>  suggested). <code>struct Foo {}.bar!()</code> would be weird indeed, but this case can be avoided in the parser to only allow postfix macros if the code in front of the . is an expression. This is already done by my PR to add parsing support for postfix macros.</p>",
        "id": 216312583,
        "sender_full_name": "est31",
        "timestamp": 1605077156
    },
    {
        "content": "<p>The specific reason I defined the evaluation as part of the language was specifically to avoid the reinterpretation confusion. Postfix macros are a hard enough sell without the added complication of reinterpreting tokens that aren't wrapped inside a macro.</p>",
        "id": 216357921,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605107607
    },
    {
        "content": "<p>What do you mean by reinterpretation confusion? That people are confused that macros may evaluate the expression multiple times?</p>",
        "id": 216411937,
        "sender_full_name": "est31",
        "timestamp": 1605138705
    },
    {
        "content": "<p>No, that people may be confused that control of the evaluation of those tokens is up to the macro. It can evaluate the expression zero, 1, or N times, or it can reinterpret the tokens in an entirely different way. That's a desirable property for normal macros, and in an expression like <code>mac!(tokens here)</code> you <em>expect</em> the macro to control the interpretation of the tokens. But in <code>a().b().mac!(tokens here)</code>, while it's obvious that the macro controls the interpretation of <code>tokens here</code>, I don't think the macro should control the interpretation of <code>a().b()</code>.</p>",
        "id": 216412910,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605139577
    },
    {
        "content": "<p>In other words, <code>&lt;expr…&gt;.mac!(…)</code> would  have an unsugaring with the semantics of:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">expr</span><span class=\"err\">…</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">receiver_expr</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">mac</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">receiver_expr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>thus giving the macro receiver input semantics similar to those of a normal function, while keeping the ability, contrary to a function / closure / method, of emitting control-flow altering statements, which I think is indeed the main use-case / wanted feature of postfix macros. I personally find that suggestion quite elegant <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<ul>\n<li>The main drawback of using <em>exactly that implementation for the unsugaring</em> being that it would not be possible to stringify the input (so no <code>.stringify!()</code> or <code>.dbg!()</code>). That's a bit of a bummer (mainly the last one), so I wonder if <code>receiver_expr</code> could use a special fake identifier that gets stringified as <code>&lt;expr…&gt;</code> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></li>\n</ul>",
        "id": 216488681,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1605197147
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span> Is there an advantage of a <code>match</code> over a <code>let</code> for the desugaring? (I'd written the <code>let</code> desugaring in the RFC, but I'm not attached to that.)</p>",
        "id": 216490664,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605197863
    },
    {
        "content": "<p>And that's true, we <em>could</em> stringify it to be the preceding expression as a string, without allowing reinterpretation of the tokens.</p>",
        "id": 216490786,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605197902
    },
    {
        "content": "<p>there is <a href=\"https://internals.rust-lang.org/t/idea-postfix-let-as-basis-for-postfix-macros/12438\">https://internals.rust-lang.org/t/idea-postfix-let-as-basis-for-postfix-macros/12438</a> if you need the macro not able to touch the <code>a().b()</code> part at all (ignore the \"postfix let\" part, focus on the macro)</p>",
        "id": 216490883,
        "sender_full_name": "kennytm",
        "timestamp": 1605197947
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/postfix.20macros/near/216490664\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232018\">Daniel Henry-Mantilla</span> Is there an advantage of a <code>match</code> over a <code>let</code> for the desugaring? (I'd written the <code>let</code> desugaring in the RFC, but I'm not attached to that.)</p>\n</blockquote>\n<p>temporaries that <code>receiver_expr</code> may refer to are guaranteed to live until the end of the <code>match</code> block, thus preventing <code>receiver_expr</code> from being unusable: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=2e0516aa14e5d15c20994709b1b74010\">see the following error with <code>let</code></a></p>\n<ul>\n<li>(basically Rust does not have <code>let … in</code>, except when using <code>match</code>)</li>\n</ul>",
        "id": 216496933,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1605200437
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span> Interesting, thank you. I'll update the desugaring then.</p>",
        "id": 216509299,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605206115
    },
    {
        "content": "<p>I'm of two minds about postfix macros. I do think that I'd like -- someday -- to be able to add type-directed macros (e.g., macros in impl blocks). I also think it'd be a huge refactoring and we could get \"lexical method macros\" <em>much</em> faster, and I kind of think that one path precludes the other. I haven't read the RFC <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span>, but do you feel like there is a transition path down the line?</p>",
        "id": 216650678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605291402
    },
    {
        "content": "<p>I am wondering if there is some way to setup a simple version of type-directed macros that wouldn't be as much of an impl challenge</p>",
        "id": 216650721,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605291427
    },
    {
        "content": "<p>I really don't think that one path precludes the other.</p>",
        "id": 216650766,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605291448
    },
    {
        "content": "<p>Hmm, I feel like it'd be a lot of complexity to support <em>both</em></p>",
        "id": 216650822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605291475
    },
    {
        "content": "<p>I think we can have \"global\" postfix macros, and also (if we want and they're feasible) type-directed postfix macros.</p>",
        "id": 216650877,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605291488
    },
    {
        "content": "<p>The former would effectively be a blanket impl.</p>",
        "id": 216650892,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605291500
    },
    {
        "content": "<p>If we <em>want</em> a transition in the future, I think it would look like blanket impls containing the non-type-directed macros.</p>",
        "id": 216651036,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605291585
    },
    {
        "content": "<p>But I don't think we want or need that transition.</p>",
        "id": 216651074,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605291602
    }
]