[
    {
        "content": "<p>I took some time over the holidays to write up a potential direction for <code>Try</code>: <a href=\"https://github.com/scottmcm/rfcs/blob/do-or-do-not/text/0000-try-trait-v2.md\">https://github.com/scottmcm/rfcs/blob/do-or-do-not/text/0000-try-trait-v2.md</a></p>\n<p>There's also a proof-of-concept implementation here: <a href=\"https://github.com/scottmcm/rust/pull/2/files\">https://github.com/scottmcm/rust/pull/2/files</a>  (It appears to work well, though it's regressed a few of the error messages.)</p>\n<p>Let me know what you think, and which parts are unclear.</p>",
        "id": 222213048,
        "sender_full_name": "scottmcm",
        "timestamp": 1610268786
    },
    {
        "content": "<p>In the Guide-level explanation, the <code>impl Bubble for MyResult</code> uses <code>type Holder = &lt;Result&lt;(), U&gt; as Bubble&gt;::Holder;</code> and justifies using unit instead of <code>T</code> to make clear it does not depend on it. That actually made things confusing to me, in particular prompting the question of whether the choice of unit vs. never had any impact. I would have found clearer to use <code>T</code> to explicit the parallel between <code>MyResult</code> and <code>Result</code> and to separately point out that the definition does not depend on <code>T</code> because <code>&lt;Result&lt;T, U&gt; as Bubble&gt;::Holder = Result&lt;!, U&gt;</code>. That would also be in line with the <code>impl</code>s for <code>Poll</code> shown later in the Reference-level explanation.</p>",
        "id": 222216626,
        "sender_full_name": "Gwaihir Thorondorsen",
        "timestamp": 1610275634
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> Looks great so far, still reading and thinking...</p>",
        "id": 222233251,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610301950
    },
    {
        "content": "<p>One typo: \"definining\"</p>",
        "id": 222233293,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610301978
    },
    {
        "content": "<p>\"just as a graph traversal or visitor,\" -&gt; \"such as\"?</p>",
        "id": 222233792,
        "sender_full_name": "RalfJ",
        "timestamp": 1610302738
    },
    {
        "content": "<p>One request for the explanation: I found it very slightly harder to follow the MyResult example at first because it uses T and U as generic types but T is not the type for \"Terrible\". But I see the benefit of using the same T and U as the control type. Would you consider changing MyResult to use, for instance, \"Terrific\" and \"Unfortunate\", for purely didactic reasons? :)</p>",
        "id": 222233936,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610302955
    },
    {
        "content": "<p>This looks <em>great</em>. I love that the user has control over whether to use From.</p>",
        "id": 222234914,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610304318
    },
    {
        "content": "<p>As far as I can tell, this is flexible enough to allow the use of ? in the Linux kernel on a special \"errno or pointer, in one word\" type.</p>",
        "id": 222234998,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610304467
    },
    {
        "content": "<p>Another nit: since ControlFlow has the generic arguments in the order \"B, C\", could it have the enum values in the same order? Break then Continue?</p>",
        "id": 222236081,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610306013
    },
    {
        "content": "<p>In the implementation of from_holder for Option, is there any reason to use a match statement rather than just ignoring the argument and always returning None?</p>",
        "id": 222236082,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610306013
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> I'm really amused by \"mod sadness\", and I hope that ends up in the final implementation. :)</p>",
        "id": 222236083,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610306014
    },
    {
        "content": "<p>I won't comment on the specifics of yeet, since you requested avoiding that. I do appreciate that you observed the flexibility there, and I look forward to a <em>subsequent</em> RFC defining that.</p>",
        "id": 222236588,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610306103
    },
    {
        "content": "<p>I like the possibilities.</p>",
        "id": 222236690,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610306127
    },
    {
        "content": "<p>On sadness: Who needs custom error messages when you can have really long type names? <span aria-label=\"smirk\" class=\"emoji emoji-1f60f\" role=\"img\" title=\"smirk\">:smirk:</span></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0277</span><span class=\"p\">]</span>: <span class=\"nc\">the</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">bound</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"p\">()</span>: <span class=\"nb\">From</span><span class=\"o\">&lt;</span><span class=\"n\">result</span>::<span class=\"n\">sadness</span>::<span class=\"n\">PleaseCallTheOkOrMethodToUseQuestionMarkOnOptionsInAMethodThatReturnsResult</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">satisfied</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"cp\">$DIR</span><span class=\"o\">/</span><span class=\"n\">option</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">5</span>:<span class=\"mi\">5</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"n\">LL</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"n\">a</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"o\">^^</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">From</span><span class=\"o\">&lt;</span><span class=\"n\">result</span>::<span class=\"n\">sadness</span>::<span class=\"n\">PleaseCallTheOkOrMethodToUseQuestionMarkOnOptionsInAMethodThatReturnsResult</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">implemented</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">required</span><span class=\"w\"> </span><span class=\"n\">because</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">requirements</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">Try2021</span><span class=\"o\">&lt;</span><span class=\"nb\">Option</span><span class=\"o\">&lt;!&gt;&gt;</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">result</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">required</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">from_holder</span><span class=\"err\">`</span><span class=\"w\"></span>\n</code></pre></div>\n<p><a href=\"https://github.com/scottmcm/rust/blob/do-or-do-not/src/test/ui/option-to-result.stderr\">https://github.com/scottmcm/rust/blob/do-or-do-not/src/test/ui/option-to-result.stderr</a></p>",
        "id": 222236962,
        "sender_full_name": "scottmcm",
        "timestamp": 1610306233
    },
    {
        "content": "<p>Also, don't think I didn't notice the branch name. ;)</p>",
        "id": 222237017,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610306285
    },
    {
        "content": "<p>PR branch names are a fun form of meta-communication.</p>",
        "id": 222237032,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610306326
    },
    {
        "content": "<p>Yeah, I'd be happy to have the yeet conversation in another zulip thread.  I'm just writing it that way because I want to discourage it in the eventual RFC thread on github.</p>",
        "id": 222237053,
        "sender_full_name": "scottmcm",
        "timestamp": 1610306367
    },
    {
        "content": "<p>Complete support there.</p>",
        "id": 222237056,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610306382
    },
    {
        "content": "<p>I think there's value in making sure that we're forward compatible with things we're likely to want to do. And that part of the conversation is worth having, on zulip in advance. Let's see to what degree we can have that part of the conversation, and allow for possible designs, without having to get into specifics about which design we want.</p>",
        "id": 222237178,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610306442
    },
    {
        "content": "<p>Along similar lines, I've thought a few times about having an \"early success return\" for try blocks. That would have an obvious desugaring here.</p>",
        "id": 222237237,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610306523
    },
    {
        "content": "<p>Also, we should involve the error handling project in this thread.</p>",
        "id": 222237425,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610306848
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"369545\">@Gwaihir Thorondorsen</span> Good call.  I'll move all the details of the holder down to the subsection that talks about them specifically.</p>\n<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> / <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> Typos fixed; thank you.</p>\n<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> That's a great didactic trick.  Will do.  (I just copied it from an existing ui test without thinking too hard.)</p>",
        "id": 222237501,
        "sender_full_name": "scottmcm",
        "timestamp": 1610306965
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span></p>",
        "id": 222237609,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610307076
    },
    {
        "content": "<p>Yeah, and libs too probably.</p>",
        "id": 222237639,
        "sender_full_name": "scottmcm",
        "timestamp": 1610307110
    },
    {
        "content": "<p>I think the required impls to use <code>ControlFlow</code> directly with the question mark operator should probably be added, e.g. <code>ControlFlow::Break(5)?</code> should work.</p>",
        "id": 222237791,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1610307301
    },
    {
        "content": "<p>Why is it important to be able to use that type directly?</p>",
        "id": 222237856,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610307364
    },
    {
        "content": "<p>To write generic functions that want to do the generic equivalent of <code>Err(e)?</code> ?</p>",
        "id": 222237878,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610307415
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"229517\">@Jacob Lifshay</span> Oops, brain fart on my part.  <a href=\"https://github.com/scottmcm/rust/blob/5fa9b9d0a315d56637b30dac9df3af796ea3bec0/library/core/src/ops/control_flow.rs#L36-L71\">They're in the PoC</a>; I just forgot to copy them to the RFC.</p>",
        "id": 222237879,
        "sender_full_name": "scottmcm",
        "timestamp": 1610307417
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> See things like <a href=\"https://github.com/rust-lang/rust/pull/78182/files#diff-9c1fed38e37f6cd826cdbddb13ae1757bebb453b72485ba9cff200fb7b2dd78eL87\">https://github.com/rust-lang/rust/pull/78182/files#diff-9c1fed38e37f6cd826cdbddb13ae1757bebb453b72485ba9cff200fb7b2dd78eL87</a></p>\n<p>It's particularly handy when you want to use <code>try_for_each</code> and such for its short-circuiting behaviour.</p>",
        "id": 222237996,
        "sender_full_name": "scottmcm",
        "timestamp": 1610307598
    },
    {
        "content": "<p>I noticed that the control flow enum has a separate feature gate. Would you expect that we might stabilize the new try and bubble traits and the enum at different times?</p>",
        "id": 222238043,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610307619
    },
    {
        "content": "<p>The enum itself is pretty uncontroversial, I think.  I'd personally like to see it stable as soon as we have the new <code>Try</code> in nightly (so we don't stabilize any new interconversions by doing so).</p>",
        "id": 222238128,
        "sender_full_name": "scottmcm",
        "timestamp": 1610307737
    },
    {
        "content": "<p>Since it's stable to call <code>try_for_each</code>, it'd be nice to be able to use <code>return ControlFlow::Break(())</code> in the argument closure.  (It makes translating to/from a <code>for</code> loop with <code>break</code> much simpler.)</p>",
        "id": 222238232,
        "sender_full_name": "scottmcm",
        "timestamp": 1610307884
    },
    {
        "content": "<p>Otherwise one ends up using <code>Err</code> for \"success\" (<a href=\"https://github.com/rust-itertools/itertools/blob/573743a097c1701ef3bf8f82a8554a71bfbf0943/src/lib.rs#L2106-L2109\">example in itertools</a>) which works but causes mental dissonance when reading it.</p>",
        "id": 222238317,
        "sender_full_name": "scottmcm",
        "timestamp": 1610307986
    },
    {
        "content": "<p>Makes sense, and yeah, it would be simpler for that case.</p>",
        "id": 222238329,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610308016
    },
    {
        "content": "<p>For that matter, you could return Continue to translate a continue.</p>",
        "id": 222238337,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610308045
    },
    {
        "content": "<p>Yup!</p>",
        "id": 222238343,
        "sender_full_name": "scottmcm",
        "timestamp": 1610308053
    },
    {
        "content": "<p>I'm hoping this will also provide better idioms for other iterator operations.</p>",
        "id": 222238399,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610308115
    },
    {
        "content": "<p>And of course really the reason for the different feature gate is that <a href=\"https://github.com/rust-lang/rust/pull/76204\"><code>ControlFlow</code> was moved from internal to unstable back in September</a> for uses completely disconnected from the <code>?</code> desugar.</p>",
        "id": 222238423,
        "sender_full_name": "scottmcm",
        "timestamp": 1610308166
    },
    {
        "content": "<p>For example, itertools wants to deprecate <code>Itertools::fold_while</code>, but is holding off on doing so until an option more ergonomic than <code>Err</code>-as-success is available: <a href=\"https://github.com/rust-itertools/itertools/issues/469#issuecomment-677729589\">https://github.com/rust-itertools/itertools/issues/469#issuecomment-677729589</a></p>",
        "id": 222238487,
        "sender_full_name": "scottmcm",
        "timestamp": 1610308249
    },
    {
        "content": "<p>Makes sense!</p>",
        "id": 222238930,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610308882
    },
    {
        "content": "<p>Other than the things mentioned in this topic already, is there anything you want to change before you post this as an RFC thread?</p>",
        "id": 222238949,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610308905
    },
    {
        "content": "<p>Because I would love to talk about this in the next design meeting.</p>",
        "id": 222239012,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610308933
    },
    {
        "content": "<p>I posted this thread basically as soon as I finished typing, so I was somewhat expecting there were some glaring faults I'd need to fix <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 222240213,
        "sender_full_name": "scottmcm",
        "timestamp": 1610310195
    },
    {
        "content": "<p>I'll add a few more things from the discussion here and post an RFC PR.</p>",
        "id": 222240224,
        "sender_full_name": "scottmcm",
        "timestamp": 1610310214
    },
    {
        "content": "<p>Thanks for the feedback, all.  I've posted it as <a href=\"https://github.com/rust-lang/rfcs/pull/3058\">https://github.com/rust-lang/rfcs/pull/3058</a></p>",
        "id": 222242377,
        "sender_full_name": "scottmcm",
        "timestamp": 1610313167
    },
    {
        "content": "<p>I would suggest extending the note about bikesheds to also mention yeet and try blocks.</p>",
        "id": 222244351,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610315988
    },
    {
        "content": "<p>Just so people don't miss it.</p>",
        "id": 222244354,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610315994
    },
    {
        "content": "<p>I've only just started reading this but wow</p>",
        "id": 222373561,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610408206
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 222373601,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610408253
    },
    {
        "content": "<p>What is the \"accidental stablization\" that led to <code>mod sadness</code> etc.?</p>",
        "id": 222493169,
        "sender_full_name": "Tavian Barnes",
        "timestamp": 1610484964
    },
    {
        "content": "<p>Hm, seems like this enables <code>impl Try for bool</code> :D. I've always wanted to use<code>?</code> on bools :3</p>",
        "id": 222496680,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610486720
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306504\">@Tavian Barnes</span> the sadness is the fact that you can try an <code>Option</code> in a function returning <code>Result&lt;T, E&gt;</code>, if your <code>E</code> is abstract enough to convert from the unstable <code>NoneError</code> without naming it</p>",
        "id": 222505556,
        "sender_full_name": "cuviper",
        "timestamp": 1610490809
    },
    {
        "content": "<p>per <a href=\"https://github.com/scottmcm/rust/pull/2/files#diff-050b8356fd8c61c6156e6f2088a5d72ca330aec5c399bd781583088adea6be0f\"><code>src/test/ui/try-on-option-in-result-method.rs</code></a></p>",
        "id": 222505592,
        "sender_full_name": "cuviper",
        "timestamp": 1610490832
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245339\">Nadrieril</span> <a href=\"#narrow/stream/213817-t-lang/topic/First.20draft.3A.20A.20new.20.60Try.60.20RFC/near/222496680\">said</a>:</p>\n<blockquote>\n<p>Hm, seems like this enables <code>impl Try for bool</code> :D. I've always wanted to use<code>?</code> on bools :3</p>\n</blockquote>\n<p>While yes, it would enable it (though I think the previous one would too, if slightly less nicely in certain ways), note that libs is currently inclined <em>not</em> to <code>impl Try for bool</code>: <a href=\"https://github.com/rust-lang/rust/pull/76041#issuecomment-731164074\">https://github.com/rust-lang/rust/pull/76041#issuecomment-731164074</a></p>",
        "id": 222511795,
        "sender_full_name": "scottmcm",
        "timestamp": 1610494692
    },
    {
        "content": "<p>I hope libs does <em>not</em> do so, but I won't be surprised at all if a third-party crate does (using a newtype).</p>",
        "id": 222514052,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610496400
    },
    {
        "content": "<p>Yeah, I wouldn't have expected nor wanted official support, it sounds confusing ^^</p>",
        "id": 222519110,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610500294
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> in the RFC right above <a href=\"https://github.com/scottmcm/rfcs/blob/do-or-do-not/text/0000-try-trait-v2.md#enabling-result-like-error-conversion\">https://github.com/scottmcm/rfcs/blob/do-or-do-not/text/0000-try-trait-v2.md#enabling-result-like-error-conversion</a></p>",
        "id": 223581013,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611268605
    },
    {
        "content": "<p>the RFC mentions</p>",
        "id": 223581034,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611268620
    },
    {
        "content": "<blockquote>\n<p>As expected, the mixing in bar no longer compiles:</p>\n</blockquote>",
        "id": 223581036,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611268621
    },
    {
        "content": "<p>i think i understand what you meant</p>",
        "id": 223581083,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611268650
    },
    {
        "content": "<p>im guessing it's referring to this fn</p>",
        "id": 223581092,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611268659
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">MyResult</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"mf\">1.1</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">MyResult</span>::<span class=\"n\">Terrific</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 223581096,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611268663
    },
    {
        "content": "<p>it was a bit confusing though</p>",
        "id": 223581121,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611268681
    },
    {
        "content": "<p>because that is from the previous section</p>",
        "id": 223581160,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611268685
    },
    {
        "content": "<p>_ever so slowly continues reading RFC_</p>",
        "id": 223581191,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611268700
    },
    {
        "content": "<p>also, i can leave this as a review comment if you'd prefer (probably should have to start)</p>",
        "id": 223581227,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611268729
    },
    {
        "content": "<p>Yeah, those references are definitely confusing.  I need to do some major reworking of the guide especially (<a href=\"https://github.com/rust-lang/rfcs/pull/3058#issuecomment-760328259\">https://github.com/rust-lang/rfcs/pull/3058#issuecomment-760328259</a>).</p>\n<p>Feel free to leave feedback wherever is most convenient.</p>",
        "id": 223581752,
        "sender_full_name": "scottmcm",
        "timestamp": 1611269051
    },
    {
        "content": "<p>(And if you want to wait for the next version before digging in deeply, feel free to do that too.)</p>",
        "id": 223581855,
        "sender_full_name": "scottmcm",
        "timestamp": 1611269136
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/213817-t-lang/topic/First.20draft.3A.20A.20new.20.60Try.60.20RFC/near/223581855\">said</a>:</p>\n<blockquote>\n<p>(And if you want to wait for the next version before digging in deeply, feel free to do that too.)</p>\n</blockquote>\n<p>oh, okay</p>",
        "id": 223582231,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611269385
    },
    {
        "content": "<p>can you ping me when the next revision is ready for review?</p>",
        "id": 223582297,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1611269405
    },
    {
        "content": "<p>Wilco</p>",
        "id": 223587053,
        "sender_full_name": "scottmcm",
        "timestamp": 1611272749
    },
    {
        "content": "<p>I'm planning on this structure to the traits: <a href=\"https://github.com/scottmcm/rust/blob/68af673184871acb66fbfb12c76df204247cac56/library/core/src/ops/try.rs#L88-L145\">https://github.com/scottmcm/rust/blob/68af673184871acb66fbfb12c76df204247cac56/library/core/src/ops/try.rs#L88-L145</a></p>\n<p>Feel free to suggest better names.  Still working on the text updates.</p>",
        "id": 223839771,
        "sender_full_name": "scottmcm",
        "timestamp": 1611527654
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> for <code>GetCorrespondingTryType</code>, I think it reads well as a bound</p>",
        "id": 223844348,
        "sender_full_name": "Nadrieril",
        "timestamp": 1611533619
    },
    {
        "content": "<p>I shared my take on the <code>Residual</code> bikeshed <a href=\"#narrow/stream/213817-t-lang/topic/Design.20meeting.202021-01-13.3A.20try_trait_v2/near/222887954\">here</a>. My take is that I think it's clearer if we make the <code>Residual</code> type more central, as opposed to the <code>Self</code> type that implements <code>Try</code>, since it's the <code>Residual</code> that \"moves around\" and gets converted to other things. The only difference would be a more catchy name than <code>Residual</code>, and reflecting this emphasis in the docs. I proposed <code>ShortCircuit</code>. The rest of the naming LGTM.</p>",
        "id": 223844753,
        "sender_full_name": "Nadrieril",
        "timestamp": 1611534218
    },
    {
        "content": "<p>My .02 on naming: although it \"makes sense\" in a type-level-programming point of view, I think we should avoid having too many <code>Output</code>-named associated types. I, for instance, like the linked snippet better with <code>Ok</code> than with yet-another-output. In that regard, <span class=\"user-mention\" data-user-id=\"245339\">@Nadrieril</span>'s suggestions might very well come in handy <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<p>Also, in the realm of bikeshedding / ergonomics / stuff that is not urgent / important to get right right now, but just good to keep in mind, in order to alleviate a bit some notations, some type aliases can come in handy.</p>\n<p>So, for instance (and modulo naming!), I could imagine there being:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// The bound here is for documentation purposes.</span>\n<span class=\"k\">type</span> <span class=\"nc\">TryType</span><span class=\"o\">&lt;</span><span class=\"nb\">Ok</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Residual</span>: <span class=\"nc\">GetCorrespondingTryType</span><span class=\"o\">&lt;</span><span class=\"nb\">Ok</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">Residual</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">GetCorrespondingTryType</span><span class=\"o\">&lt;</span><span class=\"nb\">Ok</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">Output</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"c1\">// so that map signatures becomes:</span>\n<span class=\"k\">fn</span> <span class=\"nf\">map</span><span class=\"o\">&lt;</span><span class=\"n\">Ok2</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">(</span><span class=\"bp\">Self</span>::<span class=\"nb\">Ok</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Ok2</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">TryType</span><span class=\"o\">&lt;</span><span class=\"n\">Ok2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">Residual</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">Self</span>: <span class=\"nc\">Try2021</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">Self</span>::<span class=\"n\">Residual</span>: <span class=\"nc\">GetCorrespondingTryType</span><span class=\"o\">&lt;</span><span class=\"n\">Ok2</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">branch</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ControlFlow</span>::<span class=\"n\">Continue</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Try2021</span>::<span class=\"n\">from_ok</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ControlFlow</span>::<span class=\"n\">Break</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">FromTryResidual</span>::<span class=\"n\">from_residual</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Other than these nits, I like the direction this is going very much <span aria-label=\"ok\" class=\"emoji emoji-1f44c\" role=\"img\" title=\"ok\">:ok:</span></p>",
        "id": 223884924,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1611575017
    },
    {
        "content": "<p>Yeah, naming associated types is hard.  I decided to try <code>Try::Output</code> this time the same way it's <code>Add::Output</code> and not <code>Add::Sum</code>.</p>\n<p>But hopefully someone will come up with an \"oh that's perfect!\" name...</p>",
        "id": 223927217,
        "sender_full_name": "scottmcm",
        "timestamp": 1611593992
    },
    {
        "content": "<p>I honestly like <code>Output</code> for consistency, as it really is the output of the expression, just like <code>Add</code>/etc.</p>",
        "id": 223939671,
        "sender_full_name": "cuviper",
        "timestamp": 1611599287
    }
]