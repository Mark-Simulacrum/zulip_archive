[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/213817-t-lang/topic/Making.20new.20.60_.23.60.20prefixes.20not.20a.20breaking.20change/near/195893797\" title=\"#narrow/stream/213817-t-lang/topic/Making.20new.20.60_.23.60.20prefixes.20not.20a.20breaking.20change/near/195893797\">said</a>:<br>\nin this case literals that take the structure of <code>String</code> rather than <code>&amp;'static str</code></p>\n<p>i don't follow, <code>\"Hello\"s</code> currently produces a \"suffixes on a string literal are invalid\" error and there's so \"structure\" at parse time for the literal \"Hello\". i don't see a difference of playground-ness between <code>\"Hello\"s</code> and <code>s#\"Hello\"</code></p>",
        "id": 195894583,
        "sender_full_name": "kennytm",
        "timestamp": 1588277387
    },
    {
        "content": "<p>look, I'm just trying to infer what <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> might have meant when they were saying ''' <code>s\"Hello\"</code> for Strings ''', and I'm basing it on old conversations where people complains that they could not write a literal expression that evaluated to a <code>String</code> value</p>",
        "id": 195894891,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588277510
    },
    {
        "content": "<p>people in the past complained about having to do <code>\"foo\".into&lt;String&gt;()</code> or whatever</p>",
        "id": 195894958,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588277530
    },
    {
        "content": "<p>/me once again is faced with the reality that they in fact <em>cannot</em> read minds</p>",
        "id": 195895059,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588277585
    },
    {
        "content": "<p>I agree that <code>\"Hello\"s</code> breaks at lex time.  Here's the thing that doesn't;</p>\n<div class=\"codehilite\"><pre><span></span><code>macro_rules! demo {\n    ($i:ident # $e:literal ) =&gt; {\n        ()\n    }\n}\n\nfn main() {\n    demo!(s#&quot;hello&quot;);\n}\n</code></pre></div>\n\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f3fa43180f4b61d04a54df78faaaf1c8\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f3fa43180f4b61d04a54df78faaaf1c8\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f3fa43180f4b61d04a54df78faaaf1c8</a></p>",
        "id": 195898465,
        "sender_full_name": "scottmcm",
        "timestamp": 1588279324
    },
    {
        "content": "<p>You can do similar things with <code>b\"Hello\"</code> (one token) vs <code>g\"Hello\"</code> (two tokens)</p>",
        "id": 195898582,
        "sender_full_name": "scottmcm",
        "timestamp": 1588279400
    },
    {
        "content": "<p>So in order to have a prefix marker for <code>String</code> instead of <code>&amp;str</code> -- like we have for getting <code>[u8; N]</code> instead of <code>&amp;str</code> -- then it's a breaking change unless we reserve lexical space</p>",
        "id": 195898768,
        "sender_full_name": "scottmcm",
        "timestamp": 1588279493
    },
    {
        "content": "<p>Oh, <code>s\"Hello\": String</code> would be awesome! Can we do this over an edition?</p>",
        "id": 195898996,
        "sender_full_name": "mark-i-m",
        "timestamp": 1588279589
    },
    {
        "content": "<p>Yes, as far as I know, since it's frontend-only.</p>",
        "id": 195899085,
        "sender_full_name": "scottmcm",
        "timestamp": 1588279630
    },
    {
        "content": "<p>a prefix marker would conflict with raw strings though, unlike <code>r\"2 \\ge 1\"s</code>.</p>",
        "id": 195899187,
        "sender_full_name": "kennytm",
        "timestamp": 1588279679
    },
    {
        "content": "<p>(you could make it <code>sr\"2 \\ge 1\"</code> for sure)</p>",
        "id": 195899294,
        "sender_full_name": "kennytm",
        "timestamp": 1588279716
    },
    {
        "content": "<p>What does the <code>r</code> mean? is that already rust syntax?</p>",
        "id": 195899352,
        "sender_full_name": "mark-i-m",
        "timestamp": 1588279744
    },
    {
        "content": "<p>yes</p>",
        "id": 195899368,
        "sender_full_name": "kennytm",
        "timestamp": 1588279757
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">dbg</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">r&quot;2 \\ge 1&quot;</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// [src/main.rs:2] r&quot;2 \\ge 1&quot; = &quot;2 \\\\ge 1&quot;</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 195899418,
        "sender_full_name": "kennytm",
        "timestamp": 1588279795
    },
    {
        "content": "<p>lol, I already knew that <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 195899508,
        "sender_full_name": "mark-i-m",
        "timestamp": 1588279822
    },
    {
        "content": "<p>Part of what I've been confused about in this conversation is that the <code>s</code> suffix on <span class=\"user-mention\" data-user-id=\"125254\">@kennytm</span> 's examples is not a typo nor a plural; its the whole point they are making</p>",
        "id": 195899513,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588279825
    },
    {
        "content": "<p>I don't think a prefix marker conflicts if it's language syntax, since there's already <code>br##\"hello\"##</code></p>",
        "id": 195899527,
        "sender_full_name": "scottmcm",
        "timestamp": 1588279829
    },
    {
        "content": "<p>i.e. a suffix marker</p>",
        "id": 195899558,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588279840
    },
    {
        "content": "<p>So <code>sr#\"hello\"#</code> would also work</p>",
        "id": 195899572,
        "sender_full_name": "scottmcm",
        "timestamp": 1588279851
    },
    {
        "content": "<p>yes. (one disadvantage is that the plain prefix can't end with <code>r</code> <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span>)</p>",
        "id": 195899683,
        "sender_full_name": "kennytm",
        "timestamp": 1588279905
    },
    {
        "content": "<p>Now, if the idea was that suffixes would be a new extensability point -- like C++'s custom literals -- then something that's not a prefix might be better, i agree</p>",
        "id": 195899689,
        "sender_full_name": "scottmcm",
        "timestamp": 1588279909
    },
    {
        "content": "<p><code>s##\"hello to all the #as#es \"##</code> would work as well, right?</p>",
        "id": 195899705,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588279915
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"198054\">mark-i-m</span> <a href=\"#narrow/stream/213817-t-lang/topic/s.23.22Hello.22/near/195899352\" title=\"#narrow/stream/213817-t-lang/topic/s.23.22Hello.22/near/195899352\">said</a>:</p>\n<blockquote>\n<p>What does the <code>r</code> mean? is that already rust syntax?</p>\n</blockquote>\n<p>We started out with raw string syntax, for <code>r#\"foo\"#</code>, and then we introduced raw identifier syntax using <code>r#not_a_keyword</code> (which didn't conflict because it doesn't start with <code>r#\"</code>), and now we're thinking about using the same lexing space for \"raw language constructs, without surface syntax\", using <code>r#$something</code>, which again wouldn't conflict with anything that lexes today.</p>",
        "id": 195899769,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588279930
    },
    {
        "content": "<p>Ah, hmm. Yes, I see the point now.</p>",
        "id": 195899796,
        "sender_full_name": "mark-i-m",
        "timestamp": 1588279946
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> I don't know -- does <code>b##\"hello to all the #as#es \"##</code> work?  I thought it needed the <code>r</code></p>",
        "id": 195899805,
        "sender_full_name": "scottmcm",
        "timestamp": 1588279951
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/213817-t-lang/topic/s.23.22Hello.22/near/195899705\" title=\"#narrow/stream/213817-t-lang/topic/s.23.22Hello.22/near/195899705\">said</a>:</p>\n<blockquote>\n<p><code>s##\"hello to all the #as#es \"##</code> would work as well, right?</p>\n</blockquote>\n<p>(assuming we went with scott's suggestion that we should eagerly reserve <code>&lt;ident&gt;</code> <code>#</code> <code>&lt;stuff&gt;</code>)</p>",
        "id": 195899844,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588279982
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> hmm I guess I was just assuming that was \"simply a matter of engineering\"</p>",
        "id": 195899875,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588280003
    },
    {
        "content": "<p>/me is sad that they forgot to write their message as the more simply put <code>s##\"#ello\"##</code></p>",
        "id": 195899987,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588280048
    },
    {
        "content": "<p>Fair point.  I guess I'm mixing \"would it be reserved\" vs \"is that how we'd do it\", which are different questions.</p>\n<p>Agreed that that would be reserved.</p>",
        "id": 195900000,
        "sender_full_name": "scottmcm",
        "timestamp": 1588280054
    }
]