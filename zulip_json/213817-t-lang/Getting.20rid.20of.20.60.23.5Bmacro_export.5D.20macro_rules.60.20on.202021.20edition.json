[
    {
        "content": "<p>It can be replaced with <code>pub macro_rules! { ... }</code>.</p>",
        "id": 213850126,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1603143740
    },
    {
        "content": "<p>The implementation part is trivial, and <code>#[macro_export]</code> is a weird and obviously legacy mechanism.</p>",
        "id": 213850213,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1603143790
    },
    {
        "content": "<p>It will address IDE concerns - <a href=\"https://github.com/rust-lang/rfcs/issues/1355#issuecomment-500139982\">https://github.com/rust-lang/rfcs/issues/1355#issuecomment-500139982</a></p>",
        "id": 213850264,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1603143828
    },
    {
        "content": "<p>(Inspired by a PR reviewed today - <a href=\"https://github.com/rust-lang/rust/pull/77984#issuecomment-712445508\">https://github.com/rust-lang/rust/pull/77984#issuecomment-712445508</a>)</p>",
        "id": 213850423,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1603143926
    },
    {
        "content": "<p>In more detail: any visibility annotation (<code>pub</code> or <code>pub(...)</code>)  \"modularizes\" the macro item, so it starts using regular item rules instead of the legacy <code>macro_rules</code> scoping.</p>",
        "id": 213851027,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1603144310
    },
    {
        "content": "<p>I wouldn't be opposed</p>",
        "id": 213851732,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603144752
    },
    {
        "content": "<p>Does it require an edition, <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span>?</p>",
        "id": 213851746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603144762
    },
    {
        "content": "<p>Or could we just do it on all editions</p>",
        "id": 213851755,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603144770
    },
    {
        "content": "<p>I also think that using visibility modifiers for macros would be a nice change</p>",
        "id": 213851782,
        "sender_full_name": "lcnr",
        "timestamp": 1603144790
    },
    {
        "content": "<p>Oh, I guess we would want 2021 Edition in order to have <code>macro_rules! foo</code> be 'private', maybe?</p>",
        "id": 213851857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603144822
    },
    {
        "content": "<p>instead of \"legacy scoping\"</p>",
        "id": 213851861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603144827
    },
    {
        "content": "<p>An edition boundary or maybe using <code>pub(in self)</code> to opt into this new behavior would be required for private <code>macro_rules!</code></p>",
        "id": 213853629,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1603146004
    },
    {
        "content": "<p>Adding <code>pub</code> doesn't require an edition.<br>\nRemoving <code>#[macro_export]</code> does require an edition, of course, as a major breaking change.</p>\n<p>I didn't actually think about modularizing \"private\" <code>macro_rules</code> without visibility, it's a breaking change requiring an edition, yes.<br>\nWithout this change a private modularized macro can be created with <code>pub(self) macro_rules</code>.<br>\nEven now you can partially emulate it with</p>\n<div class=\"codehilite\"><pre><span></span><code>macro_rules! foo { ... }\nuse foo;\n</code></pre></div>",
        "id": 213882437,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1603178493
    },
    {
        "content": "<p>If \"private\" <code>macro_rules</code> are modularized, then we'll be able to remove <code>#[macro_use]</code> on modules as well.<br>\nAnd <code>#[macro_use] extern crate</code> is already redundant and can be removed, except that would be kind of a hit to ergonomics.</p>",
        "id": 213882736,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1603178718
    },
    {
        "content": "<p>Decl macro 2.0 already has this.</p>",
        "id": 213886799,
        "sender_full_name": "bjorn3",
        "timestamp": 1603181565
    },
    {
        "content": "<p>Yeah, if we do all of the changes mentioned above it will basically mean \"upgrade to macros 2.0 in everything that happens \"outside\" of the macros\".</p>",
        "id": 213888560,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1603182685
    },
    {
        "content": "<p>PR implementing <code>pub macro_rules</code> - <a href=\"https://github.com/rust-lang/rust/pull/78166\">https://github.com/rust-lang/rust/pull/78166</a></p>",
        "id": 213984703,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1603231077
    },
    {
        "content": "<p>Wow, it is indeed quite simple! I guess that's what happens when the logic is already there for macros 2.0 and \"all one has to do\" is removing artificial safeguards <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>\n<p>Given that the change is only adding usability, I like it a lot; but rustdoc would need to catch up (I am currently working on a PR for that: are <code>pub macro{,_rules!}</code> intended to remain in <code>Crate.exported_macros</code> instead of their defining module?)</p>",
        "id": 213991253,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1603236019
    }
]