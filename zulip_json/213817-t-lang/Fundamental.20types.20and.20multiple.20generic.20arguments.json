[
    {
        "content": "<p>An interesting snippets: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=b9e28b5591d37e57ffc773d82c795e21\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=b9e28b5591d37e57ffc773d82c795e21</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(allocator_api)]</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">alloc</span>::<span class=\"n\">Allocator</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">MyVec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Into</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">MyVec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">into</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">todo!</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">MyVec2</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span>: <span class=\"nc\">Allocator</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span>: <span class=\"nc\">Allocator</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Into</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">MyVec2</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">into</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">todo!</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The first part works while the second part doesn't. I assume this is related to Box being fundamental? A crate defining an allocator <code>MyAlloc</code> could impl Box&lt;[T], MyAlloc&gt;, I am not sure if it's intended?</p>",
        "id": 253322865,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631653071
    },
    {
        "content": "<p>looks like <code>#[fundamental]</code>, \"hiding\" <code>A</code> makes coherence happy (<a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=0ff0b7758e09078ed2c1bfbf1fd539ae\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=0ff0b7758e09078ed2c1bfbf1fd539ae</a>)</p>",
        "id": 253850153,
        "sender_full_name": "eddyb",
        "timestamp": 1631952667
    },
    {
        "content": "<p>same thing happens with <code>T</code>, the only difference in your snippet is that <code>[T]</code> hides <code>T</code> (which is a bit weird, I would've expected it to be considered <code>#[fundamental]</code>): <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=76db15051bbbb7f065e41b160bf790e1\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=76db15051bbbb7f065e41b160bf790e1</a></p>",
        "id": 253850239,
        "sender_full_name": "eddyb",
        "timestamp": 1631952764
    },
    {
        "content": "<p>perhaps the smart thing to do would be to augment <code>#[fundamental]</code> with a set of generic parameters that a type is fundamental \"over\", and make sure <code>Box</code> has the right semantics, before the feature is stabilized and we can't change this anymore</p>",
        "id": 253850331,
        "sender_full_name": "eddyb",
        "timestamp": 1631952891
    },
    {
        "content": "<p>Or maybe make fundamental an attribute of generic parameter instead?</p>",
        "id": 253888528,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631993277
    },
    {
        "content": "<p>fundamental is not meant to be used on traits with type parameters :)</p>",
        "id": 254575574,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632419204
    },
    {
        "content": "<p>iirc chalk asserts that it is not</p>",
        "id": 254575591,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632419209
    },
    {
        "content": "<p>Chalk does not</p>",
        "id": 254576917,
        "sender_full_name": "Jack Huey",
        "timestamp": 1632419727
    },
    {
        "content": "<p>At this point, we only assert that the length of generics on adts is &gt;= 1</p>",
        "id": 254577117,
        "sender_full_name": "Jack Huey",
        "timestamp": 1632419801
    },
    {
        "content": "<p>(fundamental adts, that is)</p>",
        "id": 254577148,
        "sender_full_name": "Jack Huey",
        "timestamp": 1632419814
    },
    {
        "content": "<p>I'll have to check. I remember hardcoding some similar assumption.</p>",
        "id": 254578110,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632420128
    },
    {
        "content": "<p>It might've been that</p>",
        "id": 254578115,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632420130
    },
    {
        "content": "<p>The check for adts used to be parameters == 1, but it was changed for <code>Box</code>/etc.</p>",
        "id": 254617642,
        "sender_full_name": "Jack Huey",
        "timestamp": 1632437351
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/Fundamental.20types.20and.20multiple.20generic.20arguments/near/254575574\">said</a>:</p>\n<blockquote>\n<p>fundamental is not meant to be used on traits with type parameters :)</p>\n</blockquote>\n<p>Sorry I didn't quite follow. Which usage is not intended?</p>",
        "id": 254618726,
        "sender_full_name": "Gary Guo",
        "timestamp": 1632437958
    },
    {
        "content": "<p>Had another look at this issue today, and reduced to this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(allocator_api)]</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">alloc</span>::<span class=\"n\">Allocator</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">MyType</span><span class=\"o\">&lt;</span><span class=\"n\">A</span>: <span class=\"nc\">Allocator</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"c1\">// Not allowed</span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">A</span>: <span class=\"nc\">Allocator</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Into</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">MyType</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">into</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">todo!</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// Allowed</span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">A</span>: <span class=\"nc\">Allocator</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Into</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">MyType</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">into</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">todo!</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Got rid of the <code>T</code> and <code>[T]</code> and hopefully this is clearer.</p>\n<p>The error says a downstream crate may implement <code>impl From&lt;Foreign&gt; for Box&lt;Foreign, Local&gt;</code> (which is indeed permitted today).</p>",
        "id": 257626139,
        "sender_full_name": "Gary Guo",
        "timestamp": 1634256318
    }
]