[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> has marked this topic as resolved.</p>",
        "id": 249118216,
        "sender_full_name": "Notification Bot",
        "timestamp": 1628693223
    },
    {
        "content": "<blockquote>\n<p>macros are not allowed in identifier position</p>\n</blockquote>",
        "id": 249125046,
        "sender_full_name": "oli",
        "timestamp": 1628696088
    },
    {
        "content": "<p>this made a lot of ppl very sad xD</p>",
        "id": 249125075,
        "sender_full_name": "oli",
        "timestamp": 1628696103
    },
    {
        "content": "<p>but makes sense due to the ambiguity in paths, since macros can now be named via paths</p>",
        "id": 249125262,
        "sender_full_name": "oli",
        "timestamp": 1628696182
    },
    {
        "content": "<p>Sure, and I (sadly) accept that. I just assumed that an associated type would be... a type.</p>",
        "id": 249134411,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1628700203
    },
    {
        "content": "<p>an associated type is a type. That identifier in that position is not a type, otherwise <code>Tr&lt;&amp;[u32] = Foo&gt;</code> would also be valid (at least syntactically)</p>",
        "id": 249137778,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1628701698
    },
    {
        "content": "<p>I think the easiest solution here and for other Rust code is to extend the grammar of <code>where</code> <em>clauses</em> to accept macro invocations (which, similar to item definitions and statements, could expand to <em>several</em> clauses.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">xs</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">_</span> <span class=\"p\">[</span><span class=\"n\">RefCell</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">])</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span><span class=\"w\"> </span>: <span class=\"nc\">Debug</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">my_complex_set_of_bounds</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"cm\">/* e.g. `for&lt;'any&gt; &amp;'any T : Add&lt;Output = T&gt;`</span>\n</code></pre></div>\n<p>With that, <span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> could easily emit:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Tr</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Ty</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">bound</span><span class=\"w\"> </span><span class=\"p\">{(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">$Lhs</span>:<span class=\"nc\">ident</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">$Assoc</span>:<span class=\"nc\">ty</span><span class=\"w\"> </span><span class=\"cp\">$(,</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">$Lhs</span><span class=\"w\"> </span>: <span class=\"nc\">Tr</span><span class=\"o\">&lt;</span><span class=\"n\">Ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"cp\">$Assoc</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"p\">)}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">x</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nc\">Tr</span><span class=\"o\">&lt;</span><span class=\"n\">Ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">!</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// OK</span>\n<span class=\"w\">    </span><span class=\"n\">bound</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">),</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 249218792,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1628764774
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/213817-t-lang/topic/.E2.9C.94.20Macros.20disallowed.20in.20the.20LHS.20of.20associated.20type.20equality/near/249134411\">said</a>:</p>\n<blockquote>\n<p>Sure, and I (sadly) accept that. I just assumed that an associated type would be... a type.</p>\n</blockquote>\n<p>you can think of it as: the <em>name</em> of an associated type is not a type</p>",
        "id": 249458996,
        "sender_full_name": "RalfJ",
        "timestamp": 1628946213
    }
]