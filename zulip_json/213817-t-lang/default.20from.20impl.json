[
    {
        "content": "<p>How impossible would it be to get <code>impl&lt;T&gt; From&lt;T&gt; for T</code> marked as <code>default</code>?</p>",
        "id": 195233102,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1587756028
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/0dlMk0gyJplu6AwJxoYFZR-f/Screenshot-from-2020-04-24-12-18-40.png\" title=\"Screenshot-from-2020-04-24-12-18-40.png\">Screenshot-from-2020-04-24-12-18-40.png</a> <a href=\"/user_uploads/4715/0PW2GkwbjmzW40IOxVuilDLK/Screenshot-from-2020-04-24-12-18-26.png\" title=\"Screenshot-from-2020-04-24-12-18-26.png\">Screenshot-from-2020-04-24-12-18-26.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/0dlMk0gyJplu6AwJxoYFZR-f/Screenshot-from-2020-04-24-12-18-40.png\" title=\"Screenshot-from-2020-04-24-12-18-40.png\"><img src=\"/user_uploads/4715/0dlMk0gyJplu6AwJxoYFZR-f/Screenshot-from-2020-04-24-12-18-40.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/4715/0PW2GkwbjmzW40IOxVuilDLK/Screenshot-from-2020-04-24-12-18-26.png\" title=\"Screenshot-from-2020-04-24-12-18-26.png\"><img src=\"/user_uploads/4715/0PW2GkwbjmzW40IOxVuilDLK/Screenshot-from-2020-04-24-12-18-26.png\"></a></div>",
        "id": 195233113,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1587756037
    },
    {
        "content": "<p>Huh.</p>",
        "id": 195233330,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587756143
    },
    {
        "content": "<p>So, two things...</p>",
        "id": 195233335,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587756146
    },
    {
        "content": "<p>For the actual question, I think the folks who worked on min_specialization might be good folks to ask, as might <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>.</p>",
        "id": 195233409,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587756181
    },
    {
        "content": "<p>For the use case, though: it seems <em>really</em> unusual to me to have an <code>impl From&lt;T&gt; for T</code> instance that isn't an identity.</p>",
        "id": 195233427,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587756198
    },
    {
        "content": "<p>Calling <code>.into()</code> on a <code>ReturnTrace</code> would add the current location to the trace?</p>",
        "id": 195233454,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587756218
    },
    {
        "content": "<p>yea, the idea is that when you do <code>?</code> on an error that does the same thing as this type (was meant as a proof of concept) you'd get a backtrace of the return points</p>",
        "id": 195233520,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1587756243
    },
    {
        "content": "<p><em>Ah</em>, I see.</p>",
        "id": 195233553,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587756262
    },
    {
        "content": "<p>this is probably not the right approach</p>",
        "id": 195233559,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1587756266
    },
    {
        "content": "<p>That makes more sense. And yeah, I don't think you want to change the <code>From</code> impl. I think you'd want to look at the <code>Try</code> impl, perhaps?</p>",
        "id": 195233597,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587756281
    },
    {
        "content": "<p>like we'd probably want a trait to be the hook for types that want to gather the locations</p>",
        "id": 195233606,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1587756285
    },
    {
        "content": "<p>This also seems like a use case that ought to get fed into discussions of how <code>Try</code> should look. :)</p>",
        "id": 195233659,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587756318
    },
    {
        "content": "<p>yea, that was my plan for the RFC i intend to write for this</p>",
        "id": 195233666,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1587756326
    },
    {
        "content": "<p>i've already talked to centril about this before</p>",
        "id": 195233679,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1587756337
    },
    {
        "content": "<p>a little</p>",
        "id": 195233684,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1587756341
    },
    {
        "content": "<p>FWIW, the <code>From</code> trick above is impressive, especially in how rapidly it produced a \"yeet\" reaction in me. ;)</p>",
        "id": 195233771,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587756368
    },
    {
        "content": "<p>I was just hoping I could abuse specialization and track caller to prototype this</p>",
        "id": 195233776,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1587756371
    },
    {
        "content": "<p>ty ^_^</p>",
        "id": 195233789,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1587756383
    },
    {
        "content": "<p>I think using track_caller is a completely sensible approach.</p>",
        "id": 195233819,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587756401
    },
    {
        "content": "<p>And what you're trying to do makes perfect sense.</p>",
        "id": 195233824,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587756407
    },
    {
        "content": "<p>but yea i agree it doesnt really make sense for From&lt;T&gt; -&gt; T to like, modify the type</p>",
        "id": 195233831,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1587756412
    },
    {
        "content": "<p>At a minimum, you could prototype this with a <code>.trackme()</code> function.</p>",
        "id": 195233869,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587756432
    },
    {
        "content": "<p>yea but then it wouldnt work with <code>?</code> which is the whole point</p>",
        "id": 195233897,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1587756442
    },
    {
        "content": "<p>Prototype. ;)</p>",
        "id": 195233918,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587756452
    },
    {
        "content": "<p>lol</p>",
        "id": 195233925,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1587756455
    },
    {
        "content": "<p>But yes, it makes sense to try to hook it into the <code>?</code> desugar.</p>",
        "id": 195233945,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587756469
    },
    {
        "content": "<p>As another possibility, also using specialization, you could specialize <code>Try</code> for <code>Result&lt;T, YourErrorType&gt;</code>.</p>",
        "id": 195234080,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587756527
    },
    {
        "content": "<p>oh shit</p>",
        "id": 195234114,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1587756539
    },
    {
        "content": "<p>To augment <code>YourErrorType</code> with the caller's location.</p>",
        "id": 195234129,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587756543
    },
    {
        "content": "<p>no wait you cant do that with min_specialization</p>",
        "id": 195234136,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1587756548
    },
    {
        "content": "<p>Ill just make a unit type</p>",
        "id": 195234180,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1587756561
    },
    {
        "content": "<p>this is a good idea</p>",
        "id": 195234185,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1587756565
    },
    {
        "content": "<p>naw, still not coherent</p>",
        "id": 195234315,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1587756620
    },
    {
        "content": "<p>damnit</p>",
        "id": 195234317,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1587756621
    },
    {
        "content": "<p>oh but duh</p>",
        "id": 195234347,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1587756638
    },
    {
        "content": "<p>Another possibility would be <code>MyResult&lt;T&gt;</code> which is a \"smart wrapper\" around <code>Result&lt;T, MyError&gt;</code> (not just an alias).</p>",
        "id": 195234349,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587756639
    },
    {
        "content": "<p>custom result</p>",
        "id": 195234352,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1587756640
    },
    {
        "content": "<p>yea</p>",
        "id": 195234354,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1587756641
    },
    {
        "content": "<p>smart wrapper?</p>",
        "id": 195234376,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1587756653
    },
    {
        "content": "<p>That's starting to get into more difficult to use territory, but it would work.</p>",
        "id": 195234388,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587756660
    },
    {
        "content": "<p>(Right, because it's a Result but with some additional logic.)</p>",
        "id": 195234406,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587756669
    },
    {
        "content": "<p>I dont think i need to implement all of the logic of result for the proof of concept</p>",
        "id": 195234678,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1587756793
    },
    {
        "content": "<p>gonna just implement the skeleton of the changes that I would need to make to implement this upstream</p>",
        "id": 195234713,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1587756814
    },
    {
        "content": "<p>BOOM</p>",
        "id": 195235816,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1587757366
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">error</span><span class=\"o\">-</span><span class=\"k\">return</span><span class=\"o\">-</span><span class=\"n\">trace</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"err\">📦</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">.</span><span class=\"mf\">1.0</span><span class=\"w\"> </span><span class=\"n\">via</span><span class=\"w\"> </span><span class=\"err\">🦀</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">.</span><span class=\"mf\">44.0</span><span class=\"o\">-</span><span class=\"n\">nightly</span><span class=\"w\"> </span><span class=\"n\">took</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"n\">m14s</span><span class=\"w\"></span>\n<span class=\"err\">❯</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">example</span><span class=\"w\"> </span><span class=\"n\">usage</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">Compiling</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"o\">-</span><span class=\"k\">return</span><span class=\"o\">-</span><span class=\"n\">trace</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">.</span><span class=\"mf\">1.0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">jlusby</span><span class=\"o\">/</span><span class=\"n\">git</span><span class=\"o\">/</span><span class=\"n\">rust</span><span class=\"o\">/</span><span class=\"n\">error</span><span class=\"o\">-</span><span class=\"k\">return</span><span class=\"o\">-</span><span class=\"n\">trace</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Finished</span><span class=\"w\"> </span><span class=\"n\">dev</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">unoptimized</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">debuginfo</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mf\">0.34</span><span class=\"n\">s</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">Running</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">examples</span><span class=\"o\">/</span><span class=\"n\">usage</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"n\">ReturnTrace</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">frames</span>: <span class=\"p\">[</span><span class=\"n\">Location</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">file</span>: <span class=\"s\">&quot;examples/usage.rs&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">line</span>: <span class=\"mi\">18</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">col</span>: <span class=\"mi\">42</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">Location</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">file</span>: <span class=\"s\">&quot;examples/usage.rs&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">line</span>: <span class=\"mi\">14</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">col</span>: <span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"p\">}]</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 195235826,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1587757369
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/42327#issuecomment-619218371\" title=\"https://github.com/rust-lang/rust/issues/42327#issuecomment-619218371\">https://github.com/rust-lang/rust/issues/42327#issuecomment-619218371</a></p>",
        "id": 195239326,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1587759346
    },
    {
        "content": "<p>I think that with the current <code>Try</code> trait one could make this work  for a <code>MyResult</code> by looking up the caller location in <code>Try::into_result</code>.</p>\n<p>But getting it on the wishlist for try trait v4 (or whatever we're on now) is probably the right thing for now.</p>",
        "id": 195258324,
        "sender_full_name": "scottmcm",
        "timestamp": 1587773408
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> I trust yall to remember this when designing the v4 Try trait and beyond</p>",
        "id": 195263632,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1587781972
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> You can also join the design meeting in a week and a bit, if you're interested: <a href=\"https://github.com/rust-lang/lang-team/#meeting-calendar\" title=\"https://github.com/rust-lang/lang-team/#meeting-calendar\">https://github.com/rust-lang/lang-team/#meeting-calendar</a></p>",
        "id": 195265727,
        "sender_full_name": "scottmcm",
        "timestamp": 1587785735
    },
    {
        "content": "<p>Actually, since I'm apparently the one preparing for that meeting (<span aria-label=\"fear\" class=\"emoji emoji-1f628\" role=\"img\" title=\"fear\">:fear:</span>) do you have any thoughts on exactly which places you wanted to track the frames?  On <code>return Err(foo);</code>? On <code>yeet foo;</code>?  On a bubbling <code>?</code>?  When the propagation stops at a <code>try{}</code> block?  Etc.</p>",
        "id": 195270714,
        "sender_full_name": "scottmcm",
        "timestamp": 1587795671
    },
    {
        "content": "<p>Preferably as much as possible</p>",
        "id": 195290517,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1587830046
    },
    {
        "content": "<p>Yeet and ? Should both do it for sure</p>",
        "id": 195290525,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1587830059
    },
    {
        "content": "<p>I'd really want every function boundary to do it but I don't think that's possible so this is going to have to be one of those best practice things</p>",
        "id": 195290535,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1587830085
    },
    {
        "content": "<p>It kinda sucks that you can lose frames by not explicitly proprogating the errors tho</p>",
        "id": 195290561,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1587830121
    },
    {
        "content": "<p>And I'm also worried about how you'd grab the last frame from where you catch it before reporting</p>",
        "id": 195290582,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1587830154
    },
    {
        "content": "<p>But if you return to main that's a non issue</p>",
        "id": 195290607,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1587830163
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/213817-t-lang/topic/default.20from.20impl/near/195290561\" title=\"#narrow/stream/213817-t-lang/topic/default.20from.20impl/near/195290561\">said</a>:</p>\n<blockquote>\n<p>It kinda sucks that you can lose frames by not explicitly proprogating the errors tho</p>\n</blockquote>\n<p>this, I might add, is an argument of sorts for using some sort of fn-level sugar -- i.e., if you use Fehler and do</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[throws]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">bar</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">dyn</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>you get an error, you have to call with <code>bar()?</code> (and thus you get the propagation).</p>",
        "id": 195428963,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587999309
    },
    {
        "content": "<p>the other version of this is that it is confusing when the error types don't match, sometimes requiring <code>Ok(bar()?)</code> -- i.e., I tend to write code like that precisely to ensure more uniform handling of errors regardless</p>",
        "id": 195429173,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587999393
    }
]