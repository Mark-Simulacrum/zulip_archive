[
    {
        "content": "<p>Now that we have good const evaluation, what would it take to reintroduce a static assertion mechanism?</p>",
        "id": 194715119,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587407601
    },
    {
        "content": "<p>We have things like <code>compile_error!</code>, but as far as I can tell that's unconditional.</p>",
        "id": 194715144,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587407619
    },
    {
        "content": "<p>I'd like to be able to write things like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">static_assert</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u64</span><span class=\"o\">&gt;</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"n\">static_assert</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">X_SIZE</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Y_SIZE</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Z_SIZE</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">BLOCK_SIZE</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 194715252,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587407657
    },
    {
        "content": "<p>There's already a library providing this: <a href=\"https://docs.rs/static_assertions/1.1.0/static_assertions/\" title=\"https://docs.rs/static_assertions/1.1.0/static_assertions/\">https://docs.rs/static_assertions/1.1.0/static_assertions/</a> fwiw</p>",
        "id": 194717542,
        "sender_full_name": "simulacrum",
        "timestamp": 1587408669
    },
    {
        "content": "<p>but I'd also love to see it in std</p>",
        "id": 194718190,
        "sender_full_name": "simulacrum",
        "timestamp": 1587409012
    },
    {
        "content": "<p>Right. That would, among other things, provide much better error messages.</p>",
        "id": 194719229,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587409523
    },
    {
        "content": "<p>That crate uses the \"constant array with negative size\" trick.</p>",
        "id": 194719356,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587409580
    },
    {
        "content": "<p>Which feels like a C style of solution, would it be possible to provide a minimal subset of assertions and then leave higher order items to crates?</p>",
        "id": 194720064,
        "sender_full_name": "Sebastian Malton",
        "timestamp": 1587409945
    },
    {
        "content": "<p>I think any initial solution would likely be just the single static_assert macro (and maybe _eq, I guess).</p>",
        "id": 194720477,
        "sender_full_name": "simulacrum",
        "timestamp": 1587410169
    },
    {
        "content": "<p>Stabilizing <a href=\"https://github.com/rust-lang/rust/issues/49146\" title=\"https://github.com/rust-lang/rust/issues/49146\">#49146</a> and <a href=\"https://github.com/rust-lang/rust/issues/51999\" title=\"https://github.com/rust-lang/rust/issues/51999\">#51999</a> is the path forward here. If you also guarantee that <code>const</code> items outside of an impl block will be evaluated, even if they are unused, <code>static_assert</code> is just a macro that expands to <code>const _: () = assert!($expr);</code>. <code>static_assertions</code> already depends on that last part.</p>",
        "id": 194721430,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1587410766
    },
    {
        "content": "<p>I'm not looking for a way to clean up the <code>const _: ()</code> trick. I'd like to have a conditional version of <code>compile_error!</code>, as a top-level construct.</p>",
        "id": 194733238,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587416709
    },
    {
        "content": "<p>What would the difference be between the following and what you're looking for?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">macro_rules</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">static_assert</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$expr</span>:<span class=\"nc\">expr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$msg</span>:<span class=\"nc\">lit</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">assert</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"cp\">$expr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$msg</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>If <a href=\"https://github.com/rust-lang/rust/issues/51999\" title=\"https://github.com/rust-lang/rust/issues/51999\">#51999</a> were stabilized, we would no longer have to rely on triggering an index out-of-bounds error, and you would get the same message at compile-time as if the <code>assert</code> had triggered at runtime.</p>",
        "id": 194743847,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1587423663
    },
    {
        "content": "<p>At that point, the output of <code>static_assert</code> and <code>compile_error</code> should be the same, except that errors from <code>compile_error</code> show up during macro expansion, while those from <code>static_assert</code> won't be shown until const-eval happens.</p>",
        "id": 194744564,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1587424350
    },
    {
        "content": "<p>The primary difference would be that I'd like to not have the availability and timeline of static assertions depend on a mechanism to ensure that such constants get computed and not optimized out.</p>",
        "id": 194744704,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587424479
    },
    {
        "content": "<p><code>compile_error</code> exists today. The equivalent of <code>compile_error_if</code> seems extremely straightforward to implement.</p>",
        "id": 194744738,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587424530
    },
    {
        "content": "<p>And in the future, if we implement and stabilize the multiple issues needed to make <code>const _: () = assert!(...);</code> work, we can always change the definition of <code>static_assert</code>.</p>",
        "id": 194744815,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587424589
    },
    {
        "content": "<p>It's not like doing so locks us in; we could move it from the language to the library easily enough if we want to do so.</p>",
        "id": 194744829,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587424609
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/static.20assertions.3F/near/194744738\" title=\"#narrow/stream/213817-t-lang/topic/static.20assertions.3F/near/194744738\">said</a>:</p>\n<blockquote>\n<p><code>compile_error</code> exists today. The equivalent of <code>compile_error_if</code> seems extremely straightforward to implement.</p>\n</blockquote>\n<p>I'm not convinced that this part is true, which is why I'm more bullish on a <code>#![feature(const_panic)]</code> based approach I think. Have you looked at implementing <code>compile_error_if</code>? If it is easy to do, then I would be quite happy to have it ASAP, since like you say we can change the implementation later.</p>",
        "id": 194745077,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1587424863
    },
    {
        "content": "<p>For the record, I <em>would</em> like panic/assert in const to work too, once that's ready. :)</p>",
        "id": 194745164,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587424943
    },
    {
        "content": "<p>And to answer your question: superficially, yes.</p>",
        "id": 194745232,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587425029
    },
    {
        "content": "<p>Something I would very much like is clear error messages --</p>",
        "id": 194830314,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587487697
    },
    {
        "content": "<p>you won't get this through the static-assert library</p>",
        "id": 194830336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587487710
    },
    {
        "content": "<p>but maybe an <code>assert!</code> based solution would be able to do so</p>",
        "id": 194830347,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587487717
    },
    {
        "content": "<p>in any case I think we should totally aim for seamless integration</p>",
        "id": 194830411,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587487740
    },
    {
        "content": "<p>it's worth pointing out that the static assert library lets you guarantee all manner of things, only some of which would be suitable for a <code>static_assert!</code></p>",
        "id": 194830448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587487757
    },
    {
        "content": "<p>it's got some pretty clever hacks in there</p>",
        "id": 194830452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587487761
    },
    {
        "content": "<p>I personally wonder if, since <code>assert!</code> is already pretty embedded in the compiler, we could make <em>it</em> just work in item context, instead of needing a separate macro. But that might be confusing too if it's not a real macro afterwards</p>",
        "id": 194831807,
        "sender_full_name": "simulacrum",
        "timestamp": 1587488385
    },
    {
        "content": "<p>I think we need very little in the language itself, just the ability to do a compile-time static assert on a condition and provide a message. The rest can go in some combination of the standard library and other crates.</p>",
        "id": 194832496,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587488678
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I think I'd rather not have <code>assert!</code> do too much DWIM based on context.</p>",
        "id": 194832589,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587488725
    },
    {
        "content": "<p>Yeah -- though I wonder if a more general \"const expressions are items\" could be an interesting idea. But probably not much benefit, I agree.</p>",
        "id": 194833936,
        "sender_full_name": "simulacrum",
        "timestamp": 1587489367
    },
    {
        "content": "<p>well</p>",
        "id": 194837029,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587490779
    },
    {
        "content": "<p>keep in mind that</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>works</p>",
        "id": 194837044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587490788
    },
    {
        "content": "<p>I think that's one of those design decisions I would reverse if we could</p>",
        "id": 194837055,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587490799
    },
    {
        "content": "<p>but regardless, it makes <code>fn foo() { assert!(...); }</code> kind of \"ambiguous\"</p>",
        "id": 194837118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587490812
    },
    {
        "content": "<p>I do use items-in-functions occasionally, and would want that to still work.</p>",
        "id": 194837155,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587490829
    },
    {
        "content": "<p>That's a good point. I don't mind so much having a separate macro</p>",
        "id": 194837276,
        "sender_full_name": "simulacrum",
        "timestamp": 1587490893
    },
    {
        "content": "<p>That said, I did put something in the 2021 ideas list that talked about improving the handling of <code>const</code> inside a block.</p>",
        "id": 194837280,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587490895
    },
    {
        "content": "<p>I'd like to have order actually matter. I don't think it should work to forward-reference a constant declared later in a code block.</p>",
        "id": 194837374,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587490930
    },
    {
        "content": "<p>well so</p>",
        "id": 194837421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587490959
    },
    {
        "content": "<p>ok, let's not discuss nested items for the time being</p>",
        "id": 194837458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587490984
    },
    {
        "content": "<p><em>but</em> it might make sense to deprecate some subset because \"IDE friendly\"</p>",
        "id": 194837481,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587490995
    },
    {
        "content": "<p>my understanding (though only through talking/hearing <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>) is that IDEs care far more about our \"macros produce arbitrary items\" problem :)</p>",
        "id": 194837678,
        "sender_full_name": "simulacrum",
        "timestamp": 1587491081
    },
    {
        "content": "<p>but yeah</p>",
        "id": 194837710,
        "sender_full_name": "simulacrum",
        "timestamp": 1587491103
    },
    {
        "content": "<p>well, both are bad</p>",
        "id": 194841571,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587492959
    },
    {
        "content": "<p>but one is easy to fix :P</p>",
        "id": 194841624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587492970
    },
    {
        "content": "<p>Author of <code>static_assertions</code> crate here. I'm planning to turn <code>const_assert!</code> into <code>const _: () = assert!(condition, message);</code> when that becomes stable.</p>",
        "id": 196239440,
        "sender_full_name": "Nikolai Vazquez",
        "timestamp": 1588625999
    }
]