[
    {
        "content": "<p>I recently went into a problem where I wanted to inline a function, but only at a callsite. The <code>#[inline]</code> attribute is currently somewhat limited.</p>\n<p>Is it possible to allow <code>#[inline]</code> on call expressions to hint that the function call should be inlined? Another idea: can we add <code>#[inline(recursive)]</code> which hints the body of the function including transitive calls should be inlined?</p>",
        "id": 264185158,
        "sender_full_name": "fee1-dead",
        "timestamp": 1638982673
    },
    {
        "content": "<p><code>#[inline]</code> does more than just hint that the function should be inlined. That hint doesn't really do anything anyways.<br>\nIt also causes ir for the function to be generated, rather than machine code, which allows the function to be inlined across codegen units w/o LTO. However, this impacts link time, so it shouldn't be the default without the attribute or LTO enabled. <br>\nAbsent this IR, you can't ask to inline a particular call site if it's in a different codegen unit because there's simply no information with which to perform the inlining.</p>",
        "id": 264186046,
        "sender_full_name": "Connor Horman",
        "timestamp": 1638982964
    },
    {
        "content": "<p>So maybe an <code>#[inlineable]</code> could make sense, to <em>also</em> generate the ir (but have no effect on inline hints on its own), and then have some annotation on call-sites which wish to hint at desiring an inlined call rather than the default linker behavior? (I'm not fond of it also being called <code>#[inline]</code>, it could generate some confusion; maybe something like <code>#[inlined]</code>)</p>",
        "id": 264191346,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1638985099
    },
    {
        "content": "<p>Actually, does <code>#[inline]</code> even do anything other than generate the IR?</p>",
        "id": 264206097,
        "sender_full_name": "Connor Horman",
        "timestamp": 1638991141
    },
    {
        "content": "<p>I'm pretty sure llvm at least says \"Thank you for the suggestion, I will now proceed to ignore it\".</p>",
        "id": 264206175,
        "sender_full_name": "Connor Horman",
        "timestamp": 1638991181
    },
    {
        "content": "<p>It just makes sure it has the info it needs to inline it in downstream crates if it so chooses.</p>",
        "id": 264206291,
        "sender_full_name": "Connor Horman",
        "timestamp": 1638991220
    },
    {
        "content": "<p>If that's the case, then the attribute is already just <code>#[inline]</code>.</p>",
        "id": 264206452,
        "sender_full_name": "Connor Horman",
        "timestamp": 1638991312
    },
    {
        "content": "<p>It does make a difference. The IR is already generated for generic methods (so downstream crates can instantiate them) and yet there are perf differences in such methods being annotated inline or not.</p>",
        "id": 264206585,
        "sender_full_name": "The 8472",
        "timestamp": 1638991357
    },
    {
        "content": "<p><code>#[inline]</code> also makes inline threshold bigger. For example here: <a href=\"https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler/rustc_mir_transform/src/inline.rs#L337-L341\">https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler/rustc_mir_transform/src/inline.rs#L337-L341</a></p>",
        "id": 264211099,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1638993348
    },
    {
        "content": "<p>Note that the mir inliner is <a href=\"https://github.com/rust-lang/rust/blob/4459e720bee5a741b962cfcd6f0593b32dc19009/compiler/rustc_mir_transform/src/inline.rs#L41-L47\">currently off</a>, IIUC, so that code isn't actually impacting anything right now.</p>",
        "id": 264212400,
        "sender_full_name": "scottmcm",
        "timestamp": 1638993861
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> (aside: is there any sort of issue to subscribe to for when mir inline will be turned on?)</p>",
        "id": 264224557,
        "sender_full_name": "Lokathor",
        "timestamp": 1638999525
    },
    {
        "content": "<p>I don't know of any particular issue, <span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span>.  Could always follow <a class=\"stream\" data-stream-id=\"189540\" href=\"/#narrow/stream/189540-t-compiler.2Fwg-mir-opt\">#t-compiler/wg-mir-opt</a></p>",
        "id": 264269659,
        "sender_full_name": "scottmcm",
        "timestamp": 1639038886
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/81567\">https://github.com/rust-lang/rust/issues/81567</a></p>",
        "id": 264365008,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1639083409
    }
]