[
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/24162\">#24162</a> introduced a warning for this code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span>: <span class=\"nc\">loop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">break</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span>: <span class=\"nc\">loop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">break</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Citing \"labeling arbitrary blocks and using those labels in borrow expressions\" as a future possibility that we want to reserve syntax for. Is there an actual plan to make use of this? The only unstable feature I could find in this direction <a href=\"https://github.com/rust-lang/rust/issues/48594\">#48594</a> , which does not actually need this warning. The diagnostic for this reads:</p>\n<div class=\"codehilite\"><pre><span></span><code>warning: label name `&#39;a` shadows a label name that is already in scope\n</code></pre></div>\n<p>which is imo definitely confusing, but before I file an issue/pr to fix that I wanted to check if this check could be removed entirely (obviously genuinely nested labels will still warn/error/whatever they do now)</p>",
        "id": 263281889,
        "sender_full_name": "Jake",
        "timestamp": 1638361796
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 263291429,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1638366236
    },
    {
        "content": "<p>theer’s no current initiative or concrete plan. To my memory, I’m not sure there’s even a notion that the ability to write <code>&amp;’a &lt;expr&gt;</code> would provide value to practitioners (unless it let them start being able to express borrows that were otherwise not encodable, but AFAIK that was not expected). The main anticipated value I think was for <em>pedagogy</em>: helping people debug their own mental model of how borrow-checking worked when they were learning Rust.</p>",
        "id": 263449391,
        "sender_full_name": "pnkfelix",
        "timestamp": 1638457225
    },
    {
        "content": "<p>So, I guess I would prefer to consult with educators or people doing usability studies (to determine if such a feature <em>could</em> provide pedagogocial value) before removing the check.</p>",
        "id": 263449606,
        "sender_full_name": "pnkfelix",
        "timestamp": 1638457297
    },
    {
        "content": "<p>Cc <span class=\"user-mention\" data-user-id=\"219211\">@Jack Wrenn</span> ^</p>",
        "id": 263449617,
        "sender_full_name": "pnkfelix",
        "timestamp": 1638457302
    },
    {
        "content": "<p>I would strongly prefer if this warning went away, or at least if it got a lot smarter before saying anything.</p>",
        "id": 264056769,
        "sender_full_name": "Lokathor",
        "timestamp": 1638904599
    },
    {
        "content": "<p>I'd love the ability to write <code>&amp;'a &lt;expr&gt;</code>, especially because it's something I often <em>accidentally</em> write. But:</p>\n<ul>\n<li>I'm not clear on why having that ability would block duplicate labels. Most (all?) of the time that <code>&amp;'foo &lt;expr&gt;</code> is referencing a label <code>'foo</code> introduced by a block, I'd expect <code>&amp;'foo &lt;expr&gt;</code> to appear <em>inside</em> the <code>'foo</code> block. Are there exceptions to this?</li>\n<li>I'd expect we'd be able to come up with some sort of sane semantics for lifetime/label shadowing.</li>\n<li>Introducing <code>&amp;'foo &lt;expr&gt;</code> feels pretty far-out. Even if having that ability would conflict with duplicate labels on blocks, that seems like something we could just resolve with an edition.</li>\n</ul>",
        "id": 264058225,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1638905216
    },
    {
        "content": "<p>The problem to me is that currently this triggers in cases with labels where it don't even make sense to claim that they're \"shadowing\" each other:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">compression</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">BmpCompression</span>::<span class=\"n\">RLE8</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// setup stuff</span>\n<span class=\"w\">    </span><span class=\"o\">'</span><span class=\"na\">iter_pull</span>: <span class=\"nc\">while</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">whatever</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">BmpCompression</span>::<span class=\"n\">RLE4</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// different setup stuff</span>\n<span class=\"w\">    </span><span class=\"o\">'</span><span class=\"na\">iter_pull</span>: <span class=\"nc\">while</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">whatever</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">todo!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This will warn that <code>'iter_pull</code> in one match arm is shadowing the same-named label in a totally different match arm.</p>",
        "id": 264059320,
        "sender_full_name": "Lokathor",
        "timestamp": 1638905710
    },
    {
        "content": "<p>Someone came into the Rust community discord today and had the following error message:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n   --&gt; src\\rt.rs:201:30\n    |\n201 |                 let anchor = frozen.anchor;\n    |                              ^^^^^^^^^^^^^\n    |\nnote: first, the lifetime cannot outlive the anonymous lifetime #3 defined here...\n   --&gt; src\\rt.rs:200:22\n    |\n200 |               gc.no_gc(|frozen| {\n    |  ______________________^\n201 | |                 let anchor = frozen.anchor;\n202 | |                 let anchor = &amp;anchor;\n203 | |\n...   |\n214 | |                 }\n215 | |             });\n    | |_____________^\nnote: ...so that the expression is assignable\n   --&gt; src\\rt.rs:201:30\n    |\n201 |                 let anchor = frozen.anchor;\n    |                              ^^^^^^^^^^^^^\n    = note: expected `NoGcLifetime&lt;&#39;_&gt;`\n               found `NoGcLifetime&lt;&#39;_&gt;`\nnote: but, the lifetime must be valid for the anonymous lifetime #2 defined here...\n   --&gt; src\\rt.rs:200:22\n    |\n200 |               gc.no_gc(|frozen| {\n    |  ______________________^\n201 | |                 let anchor = frozen.anchor;\n202 | |                 let anchor = &amp;anchor;\n203 | |\n...   |\n214 | |                 }\n215 | |             });\n    | |_____________^\nnote: ...so that the types are compatible\n   --&gt; src\\rt.rs:207:55\n    |\n207 |                     let (old_data, new_data) = frozen.as_two_slice_mut(&amp;old_data.unroot(anchor), &amp;new_data);\n    |                                                       ^^^^^^^^^^^^^^^^\n    = note: expected `&lt;FrozenGcContext&lt;&#39;_, &#39;_&gt; as GcHeap&lt;&#39;_&gt;&gt;`\n               found `&lt;FrozenGcContext&lt;&#39;_, &#39;_&gt; as GcHeap&lt;&#39;_&gt;&gt;`\n</code></pre></div>\n<p>Their question was how to change their code to get a more useful error message. I recommended that they extract the body of the closure out into a function so that they can name some of the anonymous lifetimes, but was reminded of this discussion and wanted to post here as well. I don't have a suggestion or anything, but possibly ideas along the line of being able to name more lifetimes could have use for this kind of situation too</p>",
        "id": 265960365,
        "sender_full_name": "Jake",
        "timestamp": 1640299723
    }
]