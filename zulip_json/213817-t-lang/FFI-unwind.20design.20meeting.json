[
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1977\">@T-lang</span> The project-FFI-unwind group has decided that we need to delay the design meeting that was scheduled for Monday, because we want to give the broader community at least a week or so of advance notice (so people can plan to attend if they're interested) and so that you and anyone interested in attending will have time to consider the proposals we're surfacing prior to the discussion.</p>\n<p>Towards that end, we've prepared a blog post that will be ready to post as soon as we have settled on a date; please feel free to read it and start providing feedback/thoughts. <a href=\"https://github.com/rust-lang/project-ffi-unwind/blob/master/blogposts/inside-rust/01-announcement.md\" target=\"_blank\" title=\"https://github.com/rust-lang/project-ffi-unwind/blob/master/blogposts/inside-rust/01-announcement.md\">https://github.com/rust-lang/project-ffi-unwind/blob/master/blogposts/inside-rust/01-announcement.md</a></p>",
        "id": 188826086,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582393049
    },
    {
        "content": "<p>For scheduling the meeting, I would like to make sure we pick a date when <span class=\"user-mention\" data-user-id=\"237472\">@acfoltzer</span>, <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>, <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> , and I are all available, and preferably <span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> , <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> , <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> , and <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> as well.</p>",
        "id": 188826298,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582393367
    },
    {
        "content": "<p>Question: why is unwinding through a frame without running destructors undefined behavior?</p>",
        "id": 188871230,
        "sender_full_name": "boats",
        "timestamp": 1582468398
    },
    {
        "content": "<p>it's not UB but it's unsound (so probably this is just imprecise terminology)</p>",
        "id": 188875716,
        "sender_full_name": "RalfJ",
        "timestamp": 1582477030
    },
    {
        "content": "<p>the reason it's unsound is e.g. that it can be used to violate the pin-drop guarantee</p>",
        "id": 188875719,
        "sender_full_name": "RalfJ",
        "timestamp": 1582477044
    },
    {
        "content": "<p>as for the meeting, better schedule without me as I am fairly busy -- I dont have high stakes in this (the only reason I am involved at all is that I think the current situation [unwinding being UB but us not inserting abort-on-panic shims] is bad and we should do literally anything else^^). once you found a time, if it works out I may join, but if it doesn't that's okay too.</p>",
        "id": 188875774,
        "sender_full_name": "RalfJ",
        "timestamp": 1582477144
    },
    {
        "content": "<p>This can happen when we emit LLVM <code>nounwind</code> attributes, which can cause destructors to be optimized away as dead code since LLVM assumes they are unreachable. Since this behavior depends on the optimization level, you will end up with a program that behaves differently depending on optimization, which is a clear sign of undefined behavior.</p>",
        "id": 188876829,
        "sender_full_name": "Amanieu",
        "timestamp": 1582479182
    },
    {
        "content": "<blockquote>\n<p>Since this behavior depends on the optimization level, you will end up with a program that behaves differently depending on optimization, which is a clear sign of undefined behavior.</p>\n</blockquote>\n<p>Hm, I'm not sure that's UB, exactly. It does not appear to imply \"literally anything can happen.\"</p>",
        "id": 188880349,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582485283
    },
    {
        "content": "<p>unwinding through nounwind is UB and anything can bappen.</p>",
        "id": 188881561,
        "sender_full_name": "nagisa",
        "timestamp": 1582487005
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> Ah, right, yes; we discussed whether LLVM's spec might be overly-scrupulous in this regard, but in fact that is what it says.</p>",
        "id": 188884323,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1582491676
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> Is there an exception to this rule if there are no destructors in the frame you are unwinding? I strongly expect so, otherwise <code>longjmp</code> on Windows (which uses unwinding) would be UB.</p>",
        "id": 188885804,
        "sender_full_name": "Amanieu",
        "timestamp": 1582494447
    },
    {
        "content": "<p>(obviously you need <code>uwtable</code> for this to work, which is enabled by default on Windows)</p>",
        "id": 188885820,
        "sender_full_name": "Amanieu",
        "timestamp": 1582494482
    },
    {
        "content": "<p>LLVM docs donâ€™t mention any, but I imagine that there might be some platform-specific definedness. Everything on windows is unwinding after all. Including aborting etc. too</p>",
        "id": 188885861,
        "sender_full_name": "nagisa",
        "timestamp": 1582494529
    },
    {
        "content": "<p>Or it could be the case that frontends are expected to just never attach nounwind to anything when generating Windows code.</p>",
        "id": 188885876,
        "sender_full_name": "nagisa",
        "timestamp": 1582494595
    },
    {
        "content": "<p>not too sure which way it is.</p>",
        "id": 188885917,
        "sender_full_name": "nagisa",
        "timestamp": 1582494616
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> that sounds like UB caused by incorrect <code>nounwind</code>, which is not the same as the original question</p>",
        "id": 188920114,
        "sender_full_name": "RalfJ",
        "timestamp": 1582546512
    },
    {
        "content": "<p>I think I saw statements by <span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> that SJLJ \"unwinding\" on Windows is not considered \"unwinding\" for LLLVM <code>nounwind</code>... but I might misremember</p>",
        "id": 188920191,
        "sender_full_name": "RalfJ",
        "timestamp": 1582546602
    },
    {
        "content": "<p>OK, so,  we're going to cancel the ffi-unwind design meeting today? I'll update the calendar, and here is a doodle for folks to try and schedule a follow-up: <a href=\"https://doodle.com/poll/d9xevh43spf6rx8n\" target=\"_blank\" title=\"https://doodle.com/poll/d9xevh43spf6rx8n\">https://doodle.com/poll/d9xevh43spf6rx8n</a></p>\n<p>(cc <span class=\"user-mention\" data-user-id=\"237472\">@acfoltzer</span> <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> <span class=\"user-mention\" data-user-id=\"120076\">@Kyle Strand</span> <span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> on the doodle above.)</p>",
        "id": 188930724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582554748
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> is the meeting today cancelled then?</p>",
        "id": 188935410,
        "sender_full_name": "centril",
        "timestamp": 1582557753
    },
    {
        "content": "<p>I think so, let me update the calendar</p>",
        "id": 188935741,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582557969
    },
    {
        "content": "<p>cheers</p>",
        "id": 188935893,
        "sender_full_name": "centril",
        "timestamp": 1582558092
    },
    {
        "content": "<p>Thanks for the heads up!</p>",
        "id": 188938824,
        "sender_full_name": "acfoltzer",
        "timestamp": 1582560076
    },
    {
        "content": "<p>Thanks for clarifying about what the UB comment was referring to.</p>",
        "id": 188941260,
        "sender_full_name": "boats",
        "timestamp": 1582561561
    },
    {
        "content": "<p>I agree with Kyle Strand about the comment on optimization level implying UB - that just implies that its implementation defined behavior. Not disputing anything else said.</p>",
        "id": 188941381,
        "sender_full_name": "boats",
        "timestamp": 1582561636
    },
    {
        "content": "<p>Ralf's comment raises the generally interesting note that thanks to Pin (specifically <code>pin_mut!</code>) we now have to uphold at the language level certain guarantees about destructors running for objects on the stack</p>",
        "id": 188941608,
        "sender_full_name": "boats",
        "timestamp": 1582561779
    },
    {
        "content": "<p>Our current consensus in the ffi-unwind group is that skipping destructors in any way is considered UB. This means that when using <code>longjmp</code> the user must ensure that they do not skip over frames with destructors.</p>",
        "id": 188942766,
        "sender_full_name": "Amanieu",
        "timestamp": 1582562473
    },
    {
        "content": "<p>I think it could be useful to clarify what \"UB\" refers to exactly -- I would say it is \"Rust-level UB\". In short, something that you must not do, because safe code (like rayon, etc) could be relying on destructors to run, and we wish to ensure that it is valid for unsafe code to do that. But <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> mentioned the term \"unsound\", I feel like perhaps there is a slight difference in how folks are using terminology here.</p>",
        "id": 188946915,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582565239
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> There's also the fact that we emit <code>nounwind</code> attributes and LLVM says it's UB to unwind through those. I believe we should specify it as language-level UB, we can always relax it later if we want.</p>",
        "id": 188947219,
        "sender_full_name": "Amanieu",
        "timestamp": 1582565411
    },
    {
        "content": "<p>I believe by \"sound\" we mean \"for all inputs and machine states [derived from safe Rust], calling this [safe] function, or [safe] operations reachable from it, cannot cause an error condition in the Rust Abstract Machine (R-AM)\"</p>",
        "id": 188947287,
        "sender_full_name": "centril",
        "timestamp": 1582565489
    },
    {
        "content": "<p>Probably throwing in \"forall possible configurations of the abstract machine as allowed by unspecified behavior\"</p>",
        "id": 188947427,
        "sender_full_name": "centril",
        "timestamp": 1582565594
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256759\">boats</span> <a href=\"#narrow/stream/213817-t-lang/topic/FFI-unwind.20design.20meeting/near/188941608\" title=\"#narrow/stream/213817-t-lang/topic/FFI-unwind.20design.20meeting/near/188941608\">said</a>:</p>\n<blockquote>\n<p>Ralf's comment raises the generally interesting note that thanks to Pin (specifically <code>pin_mut!</code>) we now have to uphold at the language level certain guarantees about destructors running for objects on the stack</p>\n</blockquote>\n<p>note that this is not new with pinning</p>",
        "id": 188947525,
        "sender_full_name": "RalfJ",
        "timestamp": 1582565662
    },
    {
        "content": "<p><code>rayon::join</code> and other scoped thread impls already rely on destructors running for objects on the stack</p>",
        "id": 188947535,
        "sender_full_name": "RalfJ",
        "timestamp": 1582565676
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/FFI-unwind.20design.20meeting/near/188946915\" title=\"#narrow/stream/213817-t-lang/topic/FFI-unwind.20design.20meeting/near/188946915\">said</a>:</p>\n<blockquote>\n<p>I think it could be useful to clarify what \"UB\" refers to exactly -- I would say it is \"Rust-level UB\". In short, something that you must not do, because safe code (like rayon, etc) could be relying on destructors to run, and we wish to ensure that it is valid for unsafe code to do that. But <span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> mentioned the term \"unsound\", I feel like perhaps there is a slight difference in how folks are using terminology here.</p>\n</blockquote>\n<p>language-level UB is something that Miri would check for, something that is directly engraved in the definition of the Abstract Machine. I dont see any good reason to do that here.</p>",
        "id": 188947580,
        "sender_full_name": "RalfJ",
        "timestamp": 1582565730
    },
    {
        "content": "<p>maybe its \"library-level UB\", but then, unwinding and the stack are not a library. no idea what you mean by \"Rust-level\".</p>",
        "id": 188947617,
        "sender_full_name": "RalfJ",
        "timestamp": 1582565762
    },
    {
        "content": "<p>but also we are having two parallel discussions here -- one about <code>nouwnind</code> being UB, and one about popping stack frames without running destructors. those questions are not directly related, as far as I can see.</p>",
        "id": 188947721,
        "sender_full_name": "RalfJ",
        "timestamp": 1582565814
    },
    {
        "content": "<p>there's probably some distinction to draw here, in terms of ensuring that this is stated as a Safety property rather than a Liveness property. I.e. something like \"you cannot evaluate colder frames on the control stack without first evaluating destructors on the warmer frames.\" (cold/warm terminology is to avoid top-down/bottom-up stack presentation issues.)</p>",
        "id": 188947741,
        "sender_full_name": "pnkfelix",
        "timestamp": 1582565830
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"126931\">centril</span> <a href=\"#narrow/stream/213817-t-lang/topic/FFI-unwind.20design.20meeting/near/188947287\" title=\"#narrow/stream/213817-t-lang/topic/FFI-unwind.20design.20meeting/near/188947287\">said</a>:</p>\n<blockquote>\n<p>I believe by \"sound\" we mean \"for all inputs and machine states [derived from safe Rust], calling this [safe] function, or [safe] operations reachable from it, cannot cause an error condition in the Rust Abstract Machine (R-AM)\"</p>\n</blockquote>\n<p>yeah, we have <a href=\"https://rust-lang.github.io/unsafe-code-guidelines/glossary.html#soundness-of-code--of-a-library\" target=\"_blank\" title=\"https://rust-lang.github.io/unsafe-code-guidelines/glossary.html#soundness-of-code--of-a-library\">defined something like this in the UCG</a></p>",
        "id": 188947853,
        "sender_full_name": "RalfJ",
        "timestamp": 1582565888
    },
    {
        "content": "<p>the \"destructors of stack frame\" case is one where conceivably there could be a variant of Rust (with the same compiler as \"normal\" Rust!) where not running them is safely possible, that just makes rayon and stack pinning and some other things unsound. it's a bit like mempocalypse -- two patterns that could be sound separately, but are not sound in combination.</p>",
        "id": 188948105,
        "sender_full_name": "RalfJ",
        "timestamp": 1582565974
    },
    {
        "content": "<p>The main question that we are dealing with is actually \"What happens if an FFI exception unwinds into Rust code\". I don't think this is something that could be checked with Miri since it involves FFI.</p>",
        "id": 188948760,
        "sender_full_name": "Amanieu",
        "timestamp": 1582566426
    },
    {
        "content": "<p>Also popping stack frames without running destructors is what happens if you unwind through <code>nounwind</code> since LLVM optimized your destructors away.</p>",
        "id": 188948909,
        "sender_full_name": "Amanieu",
        "timestamp": 1582566533
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/213817-t-lang/topic/FFI-unwind.20design.20meeting/near/188948760\" title=\"#narrow/stream/213817-t-lang/topic/FFI-unwind.20design.20meeting/near/188948760\">said</a>:</p>\n<blockquote>\n<p>The main question that we are dealing with is actually \"What happens if an FFI exception unwinds into Rust code\". I don't think this is something that could be checked with Miri since it involves FFI.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"256759\">@boats</span> specifically asked \"why is unwinding through a frame without running destructors undefined behavior?\", as far I was concerned that is the main question we have been talking about here</p>",
        "id": 189100576,
        "sender_full_name": "RalfJ",
        "timestamp": 1582711801
    },
    {
        "content": "<p>but there seemed to be a parallel discussion where some folks discussed a different question</p>",
        "id": 189100631,
        "sender_full_name": "RalfJ",
        "timestamp": 1582711814
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/213817-t-lang/topic/FFI-unwind.20design.20meeting/near/188948909\" title=\"#narrow/stream/213817-t-lang/topic/FFI-unwind.20design.20meeting/near/188948909\">said</a>:</p>\n<blockquote>\n<p>Also popping stack frames without running destructors is what happens if you unwind through <code>nounwind</code> since LLVM optimized your destructors away.</p>\n</blockquote>\n<p>that's IMO not a great way to look at this -- it's like saying \"dereferencing a NULL ptr triggers a segfault\". indeed that will often happen, but not always -- what actually happens is we have UB. and then the way the binary accidentally happens to behave is that it skips destructors, but of course anything else might happen.</p>",
        "id": 189102116,
        "sender_full_name": "RalfJ",
        "timestamp": 1582713102
    },
    {
        "content": "<p>IOW, this is my usual statements that it is meaningless to look at the behavior of the compiled program unless we know there is no UB. <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> I keep giving responses like that to you, so I am wondering if you disagree with me about that view of UB?</p>",
        "id": 189102200,
        "sender_full_name": "RalfJ",
        "timestamp": 1582713155
    },
    {
        "content": "<p>Sorry, I guess I worded this poorly. Let me try to rephrase: there are 2 ways that I know of which can (in compiled programs) result in unwinding a frame without running its destructors, and both are UB. The first is longjmp, which is specified (in C++) to be UB if jumping of frames with destructors. The other is the LLVM <code>nounwind</code> attribute which says that any unwinding through this frame is UB.</p>",
        "id": 189102551,
        "sender_full_name": "Amanieu",
        "timestamp": 1582713422
    },
    {
        "content": "<p>So basically, there exists no well defined way of unwinding a frame without running its destructors.</p>",
        "id": 189102583,
        "sender_full_name": "Amanieu",
        "timestamp": 1582713457
    },
    {
        "content": "<p>I see, thanks.</p>",
        "id": 189102705,
        "sender_full_name": "RalfJ",
        "timestamp": 1582713549
    },
    {
        "content": "<p>I am not sure if \"longjmp-across-frame-with-destructors is UB in C++\" implies that it is UB in Rust -- in fact, I think that is part of the discussion</p>",
        "id": 189102715,
        "sender_full_name": "RalfJ",
        "timestamp": 1582713570
    },
    {
        "content": "<p>and also, there are other operations that do this, like <code>pthread_cancel</code></p>",
        "id": 189102730,
        "sender_full_name": "RalfJ",
        "timestamp": 1582713584
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/213817-t-lang/topic/FFI-unwind.20design.20meeting/near/189102715\" title=\"#narrow/stream/213817-t-lang/topic/FFI-unwind.20design.20meeting/near/189102715\">said</a>:</p>\n<blockquote>\n<p>I am not sure if \"longjmp-across-frame-with-destructors is UB in C++\" implies that it is UB in Rust -- in fact, I think that is part of the discussion</p>\n</blockquote>\n<p>on this point, I wonder why it is UB, actually -- is that something compilers exploit for optimizations, or is it just that they didnt want to specify what happens? in the Abstract Machine, it doesnt seem too hard to say \"it just removes the stack frame and its allocations, but doesnt run any destructors\"</p>",
        "id": 189102845,
        "sender_full_name": "RalfJ",
        "timestamp": 1582713665
    },
    {
        "content": "<p>Because longjmp may or may not run destructors, depending on the target, optimization level, etc.</p>",
        "id": 189103023,
        "sender_full_name": "Amanieu",
        "timestamp": 1582713812
    },
    {
        "content": "<p>On windows it runs destructors, unless you use certain compiler options to say that <code>extern \"C\"</code> doesn't unwind, in which cases it optimizes the destructors away. On all other platforms longjmp doesn't run destructors.</p>",
        "id": 189103101,
        "sender_full_name": "Amanieu",
        "timestamp": 1582713868
    },
    {
        "content": "<p>^ This applies to Rust as well, but only on windows-msvc, not windows-gnu.</p>",
        "id": 189103125,
        "sender_full_name": "Amanieu",
        "timestamp": 1582713897
    },
    {
        "content": "<p>So basically it is a non-portable mess and the C++ guys just decided to make it UB.</p>",
        "id": 189103144,
        "sender_full_name": "Amanieu",
        "timestamp": 1582713917
    },
    {
        "content": "<p><code>pthread_cancel</code> is a bit more magic: it tries to unwind at first, then if it finds a frame without unwind info it falls back to a longjmp.</p>",
        "id": 189103218,
        "sender_full_name": "Amanieu",
        "timestamp": 1582713966
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/213817-t-lang/topic/FFI-unwind.20design.20meeting/near/189103144\" title=\"#narrow/stream/213817-t-lang/topic/FFI-unwind.20design.20meeting/near/189103144\">said</a>:</p>\n<blockquote>\n<p>So basically it is a non-portable mess and the C++ guys just decided to make it UB.</p>\n</blockquote>\n<p>Ah, Windows making things messy, what a surprise. ;) Makes sense though.</p>",
        "id": 189151320,
        "sender_full_name": "RalfJ",
        "timestamp": 1582746326
    },
    {
        "content": "<p>My main take here is that I think we do want to make a statement that things like rayon which rely on destructors executing are valid bits of unsafe code. The term \"sound\" doesn't quite cover this, as it pertains specifically to what <em>safe</em> code can do, but (as we stated) this is more a matter of \"unsafe composability\". I don't know the right way for us to talk about this, but at minimum I think we can agree that Rust would want to have some kind of \"default set\" of rules regarding what unsafe code can and cannot do, and those those rules would permit rayon (and hence exclude unwinding a frame without executing destructors). I do think it'd be useful to be precise about these sorts of assumptions (i.e., what are the things we assume unsafe code can and cannot do) so that at some later date we might find a way for unsafe code to declare this and to allow distinct, incompatible sets.</p>",
        "id": 189242874,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582828995
    },
    {
        "content": "<p>So I was using terminology like \"it is UB\" to indicate \"unsafe code should not do this\" -- but I'm happy to have a different way to say it, I do feel that term is quite overloaded</p>",
        "id": 189242908,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582829025
    },
    {
        "content": "<p>I personally feel like soundness is a pretty good way to express this -- indeed soundness is about safe code, but the entire composability story is about safe code! the hard part is making sure that any way safe code could compose things is fine.</p>",
        "id": 189294879,
        "sender_full_name": "RalfJ",
        "timestamp": 1582882096
    },
    {
        "content": "<p>unsafe code composing things is not  a useful thing to look at as that code can make mistake -- if there is UB then, was it the fault of the pieces or did unsafe code compose them wrong?<br>\nbut if its safe code doing the composition, then we know for sure it must be the fault of one of the pieces.</p>",
        "id": 189294907,
        "sender_full_name": "RalfJ",
        "timestamp": 1582882146
    },
    {
        "content": "<p>so I think what we should do is explicitly bless some of these unsafely-implemented-safely-exposed patterns as sound (that would in some sense, be a normative decision), and have examples for what this makes unsound (but that would just be useful notes, does not have to be normative)</p>",
        "id": 189294997,
        "sender_full_name": "RalfJ",
        "timestamp": 1582882222
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> <span class=\"user-mention\" data-user-id=\"237472\">@acfoltzer</span> Zoom? Amanieu and I are at <a href=\"https://mozilla.zoom.us/j/768231760\" target=\"_blank\" title=\"https://mozilla.zoom.us/j/768231760\">https://mozilla.zoom.us/j/768231760</a></p>",
        "id": 189511640,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1583168645
    },
    {
        "content": "<p>ping <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> <span class=\"user-mention\" data-user-id=\"237472\">@acfoltzer</span></p>",
        "id": 189514832,
        "sender_full_name": "Amanieu",
        "timestamp": 1583170408
    },
    {
        "content": "<p>Meeting started 30 minutes ago (and for some reason has disappeared from the lang team calendar)</p>",
        "id": 189514930,
        "sender_full_name": "Amanieu",
        "timestamp": 1583170454
    },
    {
        "content": "<p><a href=\"https://hackmd.io/@co99gvfFSISYrFm9r3Psgg/rykL_65EU\" target=\"_blank\" title=\"https://hackmd.io/@co99gvfFSISYrFm9r3Psgg/rykL_65EU\">https://hackmd.io/@co99gvfFSISYrFm9r3Psgg/rykL_65EU</a></p>",
        "id": 189516913,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1583171673
    },
    {
        "content": "<p>hi, sorry about that. I never got a calendar invite so I was out running errands :(</p>",
        "id": 189519820,
        "sender_full_name": "acfoltzer",
        "timestamp": 1583173362
    },
    {
        "content": "<p>I assume I missed it all?</p>",
        "id": 189519898,
        "sender_full_name": "acfoltzer",
        "timestamp": 1583173427
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"237472\">@acfoltzer</span> We're still in the meeting, join up.</p>",
        "id": 189521865,
        "sender_full_name": "Amanieu",
        "timestamp": 1583174575
    },
    {
        "content": "<p>(Actually kyle had to leave to we just ended the meeting)</p>",
        "id": 189522143,
        "sender_full_name": "Amanieu",
        "timestamp": 1583174750
    },
    {
        "content": "<p>Gah, sorry. Next time I'll preemptively block out the times I answer yes on the Doodle</p>",
        "id": 189523190,
        "sender_full_name": "acfoltzer",
        "timestamp": 1583175323
    },
    {
        "content": "<p>I'm not sure what happened. Only me and Kyle attended the meeting.</p>",
        "id": 189523556,
        "sender_full_name": "Amanieu",
        "timestamp": 1583175496
    },
    {
        "content": "<p>There was an event for it on the lang team calendar, but it got removed before the meeting?</p>",
        "id": 189523598,
        "sender_full_name": "Amanieu",
        "timestamp": 1583175528
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  has/had a event for this standing meeting , and removed it 5 hours ago or so because niko forgot that the previous ffi-unwind meeting had been postponed.</p>",
        "id": 189532516,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583180742
    },
    {
        "content": "<p>Hmm I didn't think we had selected a time for this meeting :)</p>",
        "id": 189532647,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583180822
    },
    {
        "content": "<p>I deleted the event for this week because lang team design meetings are usually chosen/announced with some notice</p>",
        "id": 189532662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583180834
    },
    {
        "content": "<p>though I realize that I think we need to adopt the compiler-team like structure of an \"off week\"</p>",
        "id": 189532676,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583180843
    },
    {
        "content": "<p>because it's really hard to keep up the work needed to schedule things</p>",
        "id": 189532687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583180850
    },
    {
        "content": "<p>but maybe I missed some messages or something, if so, sorry</p>",
        "id": 189532701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583180859
    },
    {
        "content": "<p>my inference from my email notices is that this meeting <em>was</em> originally scheduled for Feb 24th ?</p>",
        "id": 189532794,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583180919
    },
    {
        "content": "<p>and then that was cancelled (for whatever reason)</p>",
        "id": 189532804,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583180932
    },
    {
        "content": "<p>and I'm guessing that the people present inferred that it was impliclty rescheduled to this week? THough I don't quite see how that inference actually works out, since in the general case this slot would be filled...</p>",
        "id": 189532846,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583180968
    },
    {
        "content": "<p>so, yeah,  I was wrong to say \"niko forgot ...\"</p>",
        "id": 189532875,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583180999
    },
    {
        "content": "<p>(unless there was indeed some explicit rescheduling that I overlooked.)</p>",
        "id": 189532937,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583181020
    },
    {
        "content": "<p>We did announce the date of the meeting in the blog post.</p>",
        "id": 189533024,
        "sender_full_name": "Amanieu",
        "timestamp": 1583181103
    },
    {
        "content": "<p>okay yes, I can see that was a result of the <a href=\"#narrow/stream/210922-project-ffi-unwind/topic/Blog.20post/near/189141256\" title=\"#narrow/stream/210922-project-ffi-unwind/topic/Blog.20post/near/189141256\">conversation over here</a></p>",
        "id": 189533280,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583181259
    },
    {
        "content": "<p>this seems like a clear indication that we need a centralized process to schedule lang team meetings =)</p>",
        "id": 189534305,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583181929
    },
    {
        "content": "<p>e.g., I haven't caught up on that conversation yet</p>",
        "id": 189534446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583181978
    },
    {
        "content": "<p>Hey all, we have the FFI-unwind design meeting today in ~2 hours -- I'm not sure yet if I will make it. I'm feeling kind of under the weather today. I'm going to rest up a bit more in any case.</p>",
        "id": 190724945,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584367026
    },
    {
        "content": "<p>Hey <span class=\"user-group-mention\" data-user-group-id=\"1977\">@T-lang</span> -- Been resting and I think I'm feeling better -- I'll be there but prob 5 minutes late.</p>",
        "id": 190742733,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584374399
    },
    {
        "content": "<p><a href=\"https://blog.rust-lang.org/inside-rust/2020/02/27/ffi-unwind-design-meeting.html\" target=\"_blank\" title=\"https://blog.rust-lang.org/inside-rust/2020/02/27/ffi-unwind-design-meeting.html\">https://blog.rust-lang.org/inside-rust/2020/02/27/ffi-unwind-design-meeting.html</a></p>",
        "id": 190743060,
        "sender_full_name": "centril",
        "timestamp": 1584374525
    },
    {
        "content": "<p><a href=\"https://hackmd.io/rG_5ksyCTuKsjks5cHONZQ\" target=\"_blank\" title=\"https://hackmd.io/rG_5ksyCTuKsjks5cHONZQ\">https://hackmd.io/rG_5ksyCTuKsjks5cHONZQ</a></p>",
        "id": 190743360,
        "sender_full_name": "Amanieu",
        "timestamp": 1584374674
    },
    {
        "content": "<p><a href=\"https://paper.dropbox.com/doc/ffi-unwind-design-meeting--AwTXTaBKAfAeJSG9IMPu0AawAg-Utb2e8ehhS42CYfDSj9h4\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/ffi-unwind-design-meeting--AwTXTaBKAfAeJSG9IMPu0AawAg-Utb2e8ehhS42CYfDSj9h4\">https://paper.dropbox.com/doc/ffi-unwind-design-meeting--AwTXTaBKAfAeJSG9IMPu0AawAg-Utb2e8ehhS42CYfDSj9h4</a></p>",
        "id": 190744376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584375130
    },
    {
        "content": "<p>Sorry my attention's so divided; I've got a couple things going on here</p>",
        "id": 190747637,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1584376521
    },
    {
        "content": "<p><a href=\"https://paper.dropbox.com/doc/ffi-unwind-2020-01-13--AwQLyPBsf9hfZRTS4tbXcI0MAg-agituL322N0qRsCbcnn7D\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/ffi-unwind-2020-01-13--AwQLyPBsf9hfZRTS4tbXcI0MAg-agituL322N0qRsCbcnn7D\">https://paper.dropbox.com/doc/ffi-unwind-2020-01-13--AwQLyPBsf9hfZRTS4tbXcI0MAg-agituL322N0qRsCbcnn7D</a></p>",
        "id": 190748259,
        "sender_full_name": "Amanieu",
        "timestamp": 1584376851
    },
    {
        "content": "<p>Here are some relevant issues (there are probably more):</p>\n<p><a href=\"https://github.com/rust-lang/rust/issues/52652\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52652\">https://github.com/rust-lang/rust/issues/52652</a></p>\n<p><a href=\"https://github.com/rust-lang/rust/issues/47932\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/47932\">https://github.com/rust-lang/rust/issues/47932</a></p>\n<p>It is probably better to just open a new one as a \"top level\" FFI unwind tracker.</p>",
        "id": 190752405,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1584378587
    },
    {
        "content": "<p>(let's not do a straw poll on a GH issue though <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span> )</p>",
        "id": 190753221,
        "sender_full_name": "centril",
        "timestamp": 1584378900
    },
    {
        "content": "<p>\"rocket ship if you like proposal 2, confused face if you like proposal 3\" &lt; this was a joke!</p>",
        "id": 190754693,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1584379555
    },
    {
        "content": "<p>IIRC the governance wg had a Loomio instance set up, didn't they? I haven't used it; does it provide polls?</p>",
        "id": 190754863,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1584379608
    },
    {
        "content": "<p>/me is generally not a fan of conducting design decisions by polls <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 190755151,
        "sender_full_name": "centril",
        "timestamp": 1584379739
    },
    {
        "content": "<p>We've been stuck on this issue for a month with no progress. Both proposals have advantages and downsides, there's no clear winner. We have to make a decision somehow.</p>",
        "id": 190756627,
        "sender_full_name": "Amanieu",
        "timestamp": 1584380295
    },
    {
        "content": "<p>I don't think the poll should be binding. I think it may be helpful to see which way, generally, people lean.</p>",
        "id": 190759016,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1584381476
    },
    {
        "content": "<p>How people lean is heavily dependent on who shows up to these sorts of polls; and at any rate, \"we have to make a decision somehow\" doesn't mean it's done by poll, but the lang team has to reach consensus somehow, yes.</p>",
        "id": 190786367,
        "sender_full_name": "centril",
        "timestamp": 1584396623
    },
    {
        "content": "<p>As for what proposal to go with, from my perspective, 1/2 are highly preferable as:</p>\n<ul>\n<li>It means we have more latitude to change the panic implementation for Rust as we would have to add shims for fewer functions, which is a key reason why unwinding to FFI was UB in the first place.</li>\n<li>It seems quite problematic that <code>-C panic=abort</code> can make programs suddenly have UB.</li>\n<li>Reasoning about higher order functions via function pointers is no longer possible.</li>\n<li>It is a smaller change from the status quo.</li>\n</ul>",
        "id": 190787012,
        "sender_full_name": "centril",
        "timestamp": 1584397056
    },
    {
        "content": "<p>I'm not sure it's a smaller change. Introducing a new semantic element to the language is a fairly large change.</p>",
        "id": 190799964,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1584408464
    },
    {
        "content": "<p>The function pointer concern can, of course, be addressed eventually, though not immediately, with function pointer annotations + a <code>nounwind</code> annotation</p>",
        "id": 190800025,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1584408514
    },
    {
        "content": "<p>For proposal 2, it's still the case that UB can be introduced by adopting <code>panic=abort</code>.</p>",
        "id": 190800147,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1584408636
    },
    {
        "content": "<p>I think I agree with the point about it being easier to change the mechanism in the future, but I'm not sure. Certainly I don't think proposal 3 would make it infeasible to make such a switch.</p>",
        "id": 190800346,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1584408914
    },
    {
        "content": "<p>It's a smaller change to <em>how people write code today;</em> certainly <code>\"C nounwind\"</code> as a new ABI is a larger change to the spec, but that's something else entirely. (Although since this is a modification of an existing ABI, it doesn't imply that much additional spec complexity really.) However, recovering the function pointer thing makes changed defaults into something <em>more</em> complicated, as we now have to route the annotations to the type system, rather than use the existing ABI syntax which the type system and the rest already work with. As for being able to introduce UB via <code>panic=abort</code>, that seems like a discussion re. 1 vs. 2, but the cases are fewer (I assume you refer to \"Forced unwind with destructors\" with Proposal 2, \"C unwind\" boundary, panic=abort  ==&gt; UB)</p>",
        "id": 190800445,
        "sender_full_name": "centril",
        "timestamp": 1584409057
    },
    {
        "content": "<p>I still don't follow: making the existing ABI spec \"just work\" certainly seems to me to be the smaller change to \"how people write code\".</p>",
        "id": 190801089,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1584409816
    },
    {
        "content": "<p>It invalidates less of people's existing knowledge; what you knew about <code>extern \"C\"</code> remains true, and there's this new thing <code>extern \"C unwind\"</code>. Making the existing ABI spec \"just work\" would suggest that \"how people write code\" today is to write code with lots of UB.</p>",
        "id": 190801263,
        "sender_full_name": "centril",
        "timestamp": 1584410094
    },
    {
        "content": "<p>You're assuming people start out with detailed knowledge of the semantics of Rust, as opposed to a working knowledge of what produces working code in practice.</p>",
        "id": 190806946,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1584418537
    },
    {
        "content": "<p>Not really. Working with unsafe code and FFI certainly requires some knowledge, but it's not very detailed. One merely has to consult <a href=\"https://doc.rust-lang.org/nightly/nomicon/ffi.html#ffi-and-panics\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nomicon/ffi.html#ffi-and-panics\">https://doc.rust-lang.org/nightly/nomicon/ffi.html#ffi-and-panics</a> to find out that its UB to find out that panicing across FFI boundaries is UB. I think that's a reasonable amount of required reading. Also, given that we have emitted nounwind since \"always\", it seems strange to say that this is \"working code in practice\" (and there's not a lot of evidence to suggest that people did accidentally cause UB).</p>",
        "id": 190810421,
        "sender_full_name": "centril",
        "timestamp": 1584424246
    },
    {
        "content": "<p>When code works, people don't necessarily consult the spec to find out if it's supposed to work.</p>",
        "id": 190810484,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1584424328
    },
    {
        "content": "<p>Also, it's not really \"just work\"; perhaps when you write it, but then later you want to use <code>panic=abort</code>, and then it doesn't work; that's not particularly helpful towards maintainable software</p>",
        "id": 190810488,
        "sender_full_name": "centril",
        "timestamp": 1584424335
    },
    {
        "content": "<p>The status quo is \"it works\". There's value in not breaking that status quo.</p>",
        "id": 190810499,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1584424384
    },
    {
        "content": "<p>(Also, we've had this conversation before, and repeating it seems unlikely to be productive. Suffice it to say that I value existing code even if it contains spec-UB.)</p>",
        "id": 190810549,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1584424454
    },
    {
        "content": "<p>Writing unsafe code with \"when code works\" in mind is going to become a problem fast -- it's not a good idea to reason about Rust via e.g. what the generated assembly is</p>",
        "id": 190810570,
        "sender_full_name": "centril",
        "timestamp": 1584424515
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"126931\">centril</span> <a href=\"#narrow/stream/213817-t-lang/topic/FFI-unwind.20design.20meeting/near/190810421\" title=\"#narrow/stream/213817-t-lang/topic/FFI-unwind.20design.20meeting/near/190810421\">said</a>:</p>\n<blockquote>\n<p>Also, given that we have emitted nounwind since \"always\", it seems strange to say that this is \"working code in practice\" (and there's not a lot of evidence to suggest that people did accidentally cause UB).</p>\n</blockquote>\n<p>This feels like a return to the conversations we've had in the past about what the actual use cases \"in the wild\" are. I may be misremembering, but I thought we had _not_ always emitted <code>nounwind</code>. Also, we have discussed serveral examples of projects using cross-language unwinding, which is in fact accidental UB.</p>",
        "id": 190894936,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1584471250
    },
    {
        "content": "<p>...well, I suppose \"accidental\" may not be accurate, except in the case of mozjpeg, where it does appear that the author expected unwinding to be well-behaved.</p>",
        "id": 190895004,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1584471287
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120076\">@BatmanAoD (Kyle Strand)</span>  There are <em>a few</em> examples of accidental UB, and there are <em>a few</em> cases of intentionally ignoring UB. <em>A few</em> cases is not a statistically significant \"this would do widespread ecosystem damage\".<br>\nAs for whether we've really always emitted nounwind, we have done so for a long time, which makes the difference moot for me.</p>",
        "id": 190965995,
        "sender_full_name": "centril",
        "timestamp": 1584530084
    },
    {
        "content": "<p>I'm happy with either proposal, but have a very slight preference for proposal 2.</p>",
        "id": 191013415,
        "sender_full_name": "Amanieu",
        "timestamp": 1584552061
    }
]