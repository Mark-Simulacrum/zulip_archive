[
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1977\">@T-lang</span>, I would appreciate some attention to addressing an issue with the new arbitrary enum discriminant feature which is going into beta todayish. There is an edge case where I think the feature introduces some confusion and complexity. There is a PR open at <a href=\"https://github.com/rust-lang/rust/issues/88203\">#88203</a> to address this, and I think it would be good to fix this before release.</p>\n<p>In summary, this feature creates three kinds of enums:</p>\n<p>Kind 1: Unit-only variants:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// Does not require repr</span>\n<span class=\"k\">enum</span> <span class=\"nc\">Kind1</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Baz</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// Can be cast to its discriminant:</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Kind1</span>::<span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Kind 2: Tuple or struct variants without fields:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[repr(u8)]</span><span class=\"w\">   </span><span class=\"c1\">// Required repr</span>\n<span class=\"k\">enum</span> <span class=\"nc\">Kind2</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Bar</span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Baz</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// Can be cast to its discriminant:</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Kind2</span>::<span class=\"n\">Foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Kind 3: Tuple or struct variants with fields:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[repr(u8)]</span><span class=\"w\">   </span><span class=\"c1\">// Required repr</span>\n<span class=\"k\">enum</span> <span class=\"nc\">Kind3</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Bar</span><span class=\"p\">{</span><span class=\"n\">f</span>: <span class=\"kt\">i32</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// ERROR: Does not allow casting.</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Kind3</span>::<span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>PR <a href=\"https://github.com/rust-lang/rust/issues/88203\">#88203</a> changes it so that Kind2 does not require a repr, making it the same as Kind1.  I don't have a strong opinion if that's the right direction to go (it could also move in the other direction and not allow casting like Kind3), but I would appreciate a decision on this.  I think adding a third kind of enum makes the language more complicated and it would be nice to avoid that.</p>",
        "id": 251899236,
        "sender_full_name": "Eric Huss",
        "timestamp": 1630683331
    },
    {
        "content": "<p>It's surprising to me that Kind2 casting is allowed.</p>",
        "id": 251899865,
        "sender_full_name": "Gary Guo",
        "timestamp": 1630683555
    },
    {
        "content": "<p>Is there any good use case for that? Can we instead add a forward-compatibility lint and disallow such casting?</p>",
        "id": 251900037,
        "sender_full_name": "Gary Guo",
        "timestamp": 1630683616
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> I don't think we should treat Kind2 like Kind1, and certainly not on short notice.</p>",
        "id": 251901557,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630684246
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> Can you comment on <a href=\"https://github.com/rust-lang/rust/issues/88203\">#88203</a> to that effect?  And do you think it should be treated as Kind3 (that is, do not allow casting)?</p>",
        "id": 251903353,
        "sender_full_name": "Eric Huss",
        "timestamp": 1630684939
    },
    {
        "content": "<p>I also find it surprising that we allow casting Kind1 to its discriminant without an explicit size, but I guess that's established behavior. Hopefully <a href=\"https://github.com/rust-lang/rust/pull/81642\">https://github.com/rust-lang/rust/pull/81642</a> will help provide a better replacement for <code>as</code>.</p>",
        "id": 251903508,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630685007
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120518\">Eric Huss</span> <a href=\"#narrow/stream/213817-t-lang/topic/arbitrary.20enum.20discriminants/near/251903353\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> Can you comment on <a href=\"https://github.com/rust-lang/rust/issues/88203\">#88203</a> to that effect?  And do you think it should be treated as Kind3 (that is, do not allow casting)?</p>\n</blockquote>\n<p>Sure. And yes, but not if that breaks backwards compatibility.</p>",
        "id": 251903544,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630685021
    },
    {
        "content": "<p>I personally would love to see even <code>Kind1</code> require the repr, if you want to get the discriminant out. But again, that's a backwards compatibility issue.</p>",
        "id": 251903707,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630685080
    },
    {
        "content": "<p>It seems like we should file an issue to track this and backport a de-stabilization perhaps</p>",
        "id": 251903726,
        "sender_full_name": "simulacrum",
        "timestamp": 1630685087
    },
    {
        "content": "<p>Sure I can do that.</p>",
        "id": 251904228,
        "sender_full_name": "Eric Huss",
        "timestamp": 1630685277
    },
    {
        "content": "<p>For reference, this is stablised in <a href=\"https://github.com/rust-lang/rust/issues/86860\">#86860</a>, which hasn't made its way to beta yet.</p>",
        "id": 251904274,
        "sender_full_name": "Gary Guo",
        "timestamp": 1630685284
    },
    {
        "content": "<p>De-stabilize so that we can fix this behavior and re-stabilize?</p>",
        "id": 251904359,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630685316
    },
    {
        "content": "<p>I mean beta as it branches today or tomorrow.</p>",
        "id": 251904368,
        "sender_full_name": "Eric Huss",
        "timestamp": 1630685318
    },
    {
        "content": "<p>That seems reasonable, to avoid rushing a fix.</p>",
        "id": 251904381,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630685324
    },
    {
        "content": "<p>Oh but casting is already allowed</p>",
        "id": 251904407,
        "sender_full_name": "Gary Guo",
        "timestamp": 1630685331
    },
    {
        "content": "<p>It's just that discriminant can't be specified</p>",
        "id": 251904435,
        "sender_full_name": "Gary Guo",
        "timestamp": 1630685344
    },
    {
        "content": "<p>There is an argument for making Kind1 and Kind2 consistent because it can just be surprising. Especially in documentation we should avoid \"c-like\" (Kind1) and use \"fieldless\" (Kind1 and Kind2).</p>",
        "id": 251904460,
        "sender_full_name": "fee1-dead",
        "timestamp": 1630685353
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361356\">fee1-dead</span> <a href=\"#narrow/stream/213817-t-lang/topic/arbitrary.20enum.20discriminants/near/251904460\">said</a>:</p>\n<blockquote>\n<p>There is an argument for making Kind1 and Kind2 consistent because it can just be surprising. Especially in documentation we should avoid \"c-like\" (Kind1) and use \"fieldless\" (Kind1 and Kind2).</p>\n</blockquote>\n<p>My inclination would be to keep using \"c-like\", to intentionally mean only Kind1.</p>",
        "id": 251904581,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630685401
    },
    {
        "content": "<p>As I understand it, the original intent was to change the documentation to say \"fieldless\" but with the intention of it being a synonym for \"c-like\" and still mean Kind1.</p>",
        "id": 251904701,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630685433
    },
    {
        "content": "<p>But \"fieldless\" <em>is</em> somewhat ambiguous, and could mean Kind2, so we either need a different term that unambiguously means Kind1 or we need to stick with \"c-like\".</p>",
        "id": 251904766,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630685464
    },
    {
        "content": "<p>Apparently the casting is already allowed in Rust 1.15 <a href=\"https://godbolt.org/z/98K3cGhaf\">https://godbolt.org/z/98K3cGhaf</a></p>",
        "id": 251904831,
        "sender_full_name": "Gary Guo",
        "timestamp": 1630685492
    },
    {
        "content": "<p>Yea, this started by trying to determine what \"fieldless\" means, and it came to light (to me) that the phrase is confusing.</p>",
        "id": 251904888,
        "sender_full_name": "Eric Huss",
        "timestamp": 1630685520
    },
    {
        "content": "<p>The original PR to rust-lang/reference did have some confusion around \"fieldless\", but I think the PR author intended to mean both Kind1 and Kind2.</p>",
        "id": 251904904,
        "sender_full_name": "fee1-dead",
        "timestamp": 1630685523
    },
    {
        "content": "<p>The term \"c-like\" could be hard to understand for newcomers who don't know about C enumerations at all.</p>",
        "id": 251905063,
        "sender_full_name": "fee1-dead",
        "timestamp": 1630685589
    },
    {
        "content": "<p>Posted <a href=\"https://github.com/rust-lang/rust/issues/88621\">#88621</a> to track making a decision.  I'm not sure what labels to put on it, though.</p>",
        "id": 251906559,
        "sender_full_name": "Eric Huss",
        "timestamp": 1630686215
    },
    {
        "content": "<p>(Thanks all for taking a look, I know I'm being a little pedantic.  I just feel that rust is already pretty complex, and I think it helps to avoid weird edge cases.)</p>",
        "id": 251906870,
        "sender_full_name": "Eric Huss",
        "timestamp": 1630686341
    },
    {
        "content": "<p>I think I would separate Kind-2 from Kind-1 as well</p>",
        "id": 251920525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630692329
    },
    {
        "content": "<p>To add some extra fun to this:</p>\n<div class=\"codehilite\"><pre><span></span><code>#[repr(u8)]\nenum Kind2 {\n    Foo() = 1,\n    Bar{} = 2,\n    Baz = 3,\n}\n\nKind2::Foo as u8\nKind2::Foo() as u8\n</code></pre></div>\n<p>These casts are _both_ allowed and do _very_ different things.</p>",
        "id": 251953822,
        "sender_full_name": "Daniel Wagner-Hall",
        "timestamp": 1630710931
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> I'm also very much hoping <a href=\"https://github.com/rust-lang/rust/pull/81642\">https://github.com/rust-lang/rust/pull/81642</a> can help us clean this up, ideally eventually deprecating <code>as</code> conversions for enums (in the long, long future!) - is there anything I can do to help get some eyes on it?</p>\n<p>For instance, would it help to separate out the top commit (auto-implementing the trait for all enums via weird expansion-time hacks) from the rest of it (adding a hopefully uncontroversial derive macro)?</p>",
        "id": 251953957,
        "sender_full_name": "Daniel Wagner-Hall",
        "timestamp": 1630711051
    },
    {
        "content": "<p>I don't think it needs separating, it just needs reviewing. I can provide review from a language perspective; I'm not qualified to review the compiler changes though.</p>",
        "id": 251955545,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630712392
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> that's kind of why I was suggesting maybe separating - it feels like \"add a derive macro\" is a libs thing, and \"auto-derive it\" is a lang thing, so maybe separating makes it easier to pick up and gather consensus on? But I'm new to this world, so defer to you!</p>",
        "id": 251996734,
        "sender_full_name": "Daniel Wagner-Hall",
        "timestamp": 1630757953
    },
    {
        "content": "<p>I don't know for sure, but I just provided signoff from a lang and libs perspective and asked for a compiler reviewer to look at the implementation.</p>",
        "id": 252007907,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630769237
    },
    {
        "content": "<p>Fantastic, thanks! <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span>️</p>",
        "id": 252011052,
        "sender_full_name": "Daniel Wagner-Hall",
        "timestamp": 1630772538
    },
    {
        "content": "<p>I filed PR <a href=\"https://github.com/rust-lang/rust/issues/89234\">#89234</a> to disallow Kind2 from being casted to integer (if arbitrary enum discriminant is used)</p>",
        "id": 254772157,
        "sender_full_name": "Gary Guo",
        "timestamp": 1632517399
    }
]