[
    {
        "content": "<p>So the docs on Index state that it's Output associated type can be either ?Sized. IndexMut uses this type, and even provides an assignment desugaring *container.index_mut(index). However, this doesn't compile Link: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=90c59b57404d100e807dd3fb2b8c06cd\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=90c59b57404d100e807dd3fb2b8c06cd</a> without explicit Sized bounds, which means there's likely compiler magic at play. Is there a a way I can do what I'm trying to do in lines 10-12?</p>",
        "id": 203673266,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1594608452
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"303115\">@Quy Nguyen</span> you can't assign unsized values, because they might not of the same static type</p>",
        "id": 203674199,
        "sender_full_name": "eddyb",
        "timestamp": 1594609991
    },
    {
        "content": "<p>e.g. two <code>dyn Debug</code> might be <code>i32</code> vs <code>String</code></p>",
        "id": 203674204,
        "sender_full_name": "eddyb",
        "timestamp": 1594610004
    },
    {
        "content": "<p>what you want is have <em>the default</em> be bounded by <code>Self::Output</code> being <code>Sized</code></p>",
        "id": 203674205,
        "sender_full_name": "eddyb",
        "timestamp": 1594610029
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"303115\">@Quy Nguyen</span> this is the only way I know to make it work <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=a7d56db24a2be5fbd751f537e7ea0314\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=a7d56db24a2be5fbd751f537e7ea0314</a></p>",
        "id": 203674278,
        "sender_full_name": "eddyb",
        "timestamp": 1594610158
    },
    {
        "content": "<p>this would allow an <code>impl</code> of <code>IndexMut</code> to support <code>Output</code> being e.g. a slice, and asserting that the lengths are equal (or even overwrite the minimum number of elements between <code>self[index]</code> and <code>value</code> etc.)</p>",
        "id": 203674353,
        "sender_full_name": "eddyb",
        "timestamp": 1594610255
    },
    {
        "content": "<p>(for <code>dyn Trait</code> in general it's impossible to do assignment, because it's impossible to check for type equality at runtime soundly, only e.g. <code>dyn Any</code> and similar can)</p>",
        "id": 203674397,
        "sender_full_name": "eddyb",
        "timestamp": 1594610293
    },
    {
        "content": "<p>(through the combination of <code>'static</code> bounds and <code>TypeId</code>)</p>",
        "id": 203674400,
        "sender_full_name": "eddyb",
        "timestamp": 1594610303
    },
    {
        "content": "<p>I see. Relying on specialization is a bummer, and it doesn't look like <code>min_specialization</code> has the default impl stuff.</p>",
        "id": 203674413,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1594610353
    },
    {
        "content": "<p>Any idea for why the IndexGet impl wouldn't work?</p>",
        "id": 203674428,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1594610372
    },
    {
        "content": "<p>Intuitively it just forwards the Index impl so it should work, but I'm not sure how to convince the compiler of that</p>",
        "id": 203674432,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1594610391
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"303115\">@Quy Nguyen</span> last I checked GATs are not implemented</p>",
        "id": 203674489,
        "sender_full_name": "eddyb",
        "timestamp": 1594610474
    },
    {
        "content": "<p>it's not like they couldn't have been, but some problems were punted on, I think?</p>",
        "id": 203674499,
        "sender_full_name": "eddyb",
        "timestamp": 1594610487
    },
    {
        "content": "<p>(instead of doing the hacky thing to make them work)</p>",
        "id": 203674502,
        "sender_full_name": "eddyb",
        "timestamp": 1594610495
    },
    {
        "content": "<p>Not implemented as in for this case?</p>",
        "id": 203674544,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1594610524
    },
    {
        "content": "<p>not implemented beyond syntax, I guess?</p>",
        "id": 203674547,
        "sender_full_name": "eddyb",
        "timestamp": 1594610541
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> maybe I'm just entirely wrong and behind the times</p>",
        "id": 203674555,
        "sender_full_name": "eddyb",
        "timestamp": 1594610576
    },
    {
        "content": "<p>oh wait the error is just a normal lifetime error, you're missing a bound</p>",
        "id": 203674582,
        "sender_full_name": "eddyb",
        "timestamp": 1594610625
    },
    {
        "content": "<p>The problem is I can't place the bound anywhere</p>",
        "id": 203674625,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1594610649
    },
    {
        "content": "<p>yeah I have no idea how this is supposed to work</p>",
        "id": 203674630,
        "sender_full_name": "eddyb",
        "timestamp": 1594610673
    },
    {
        "content": "<p>ftr you don't need GATs to do this kind of trait</p>",
        "id": 203674635,
        "sender_full_name": "eddyb",
        "timestamp": 1594610682
    },
    {
        "content": "<p>Because GATs don't support where clauses and I nothing I did with HRTBs worked</p>",
        "id": 203674637,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1594610682
    },
    {
        "content": "<p>GATs just make it palatable</p>",
        "id": 203674646,
        "sender_full_name": "eddyb",
        "timestamp": 1594610699
    },
    {
        "content": "<p>You're referring to putting the lifetime in the generics?</p>",
        "id": 203674664,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1594610734
    },
    {
        "content": "<p>I didn't want to do that because that just seems like a workaround</p>",
        "id": 203674718,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1594610764
    },
    {
        "content": "<p>And it would hurt the normal by-value case</p>",
        "id": 203674725,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1594610770
    },
    {
        "content": "<p>yes but GATs are pretty far out AFAIK</p>",
        "id": 203674736,
        "sender_full_name": "eddyb",
        "timestamp": 1594610791
    },
    {
        "content": "<p>so yeah it definitely works when not using GATs <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=d91cbab369f65716776e56939583269c\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=d91cbab369f65716776e56939583269c</a></p>",
        "id": 203674824,
        "sender_full_name": "eddyb",
        "timestamp": 1594610914
    },
    {
        "content": "<p>Ye that kind of sucks. Last time someone proposed a trait similar to yours on Internals it got punted to HKTs :/</p>",
        "id": 203675150,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1594611480
    },
    {
        "content": "<p>Might just RFC the IndexSet stuff, which seems achievable in today's Rust</p>",
        "id": 203675200,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1594611501
    },
    {
        "content": "<p>And would unlock <code>map[key]=value</code> syntax while being open</p>",
        "id": 203675202,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1594611526
    },
    {
        "content": "<p>I'm also guessing GATs are completely nontrivial to contribute to?</p>",
        "id": 203675256,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1594611606
    },
    {
        "content": "<p>see <a class=\"stream\" data-stream-id=\"144729\" href=\"/#narrow/stream/144729-wg-traits\">#wg-traits</a>, I don't really know, never got involved with it</p>",
        "id": 203677038,
        "sender_full_name": "eddyb",
        "timestamp": 1594614782
    },
    {
        "content": "<p>presumably blocked on Chalk</p>",
        "id": 203677041,
        "sender_full_name": "eddyb",
        "timestamp": 1594614787
    },
    {
        "content": "<p>Do we currently allow <code>container[key]=value</code> anywhere when <code>Index::Output</code> is <code>!Sized</code>? Default impls are still solely in the land of specialization, but restricting the set method to <code>Sized</code> might restrict future DST work.</p>",
        "id": 203725104,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1594652145
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"303115\">@Quy Nguyen</span> no, because assignment can't work with <code>!Sized</code> values, like I previously explained</p>",
        "id": 203779702,
        "sender_full_name": "eddyb",
        "timestamp": 1594679614
    },
    {
        "content": "<p>for the same reason your code wouldn't compile</p>",
        "id": 203779711,
        "sender_full_name": "eddyb",
        "timestamp": 1594679627
    },
    {
        "content": "<p>Sorry, meant to ask would/should. I'm not up to date on all the unsized proposals.</p>",
        "id": 203784139,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1594683463
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"303115\">@Quy Nguyen</span> no, it's fundamentally impossible</p>",
        "id": 203788730,
        "sender_full_name": "eddyb",
        "timestamp": 1594687948
    },
    {
        "content": "<p>at most maybe for slices but then you still have to deal with the length being potentially different</p>",
        "id": 203788749,
        "sender_full_name": "eddyb",
        "timestamp": 1594687969
    }
]