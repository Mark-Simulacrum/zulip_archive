[
    {
        "content": "<p>I've repeatedly found, when using <code>anyhow</code> in a large project, that I really want the <em>same</em> generated context across various uses of <code>?</code>, and I found it painful to repeatedly write things like <code>.with_context(|| format!(\"thing {} detail {}\", thing, detail))?</code>.  To the point that in some cases I found myself writing <code>let context = || format!(\"thing {} detail {}\", thing, detail);</code> at the top of a function and repeatedly using <code>.with_context(context)?</code>, which then led me to forget what was in the context and almost use the wrong context for an error. I also find myself only using it on errors that \"need\" context to make sense, when I really want it on most errors.</p>",
        "id": 192730713,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585863767
    },
    {
        "content": "<p>I know that some error-handling libraries have experimented with having function-level contexts.</p>",
        "id": 192730730,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585863783
    },
    {
        "content": "<p>I find myself wishing for a kind of \"context block\", or some kind of similar information, that lets me say \"all errors in this block are related to X\", and \"all errors in this inner block are also related to Y\", and have that automatically result in <code>.with_context</code> calls or similar, ideally with no overhead when <em>not</em> generating an error.</p>",
        "id": 192730876,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585863857
    },
    {
        "content": "<p>I don't know what the language construct would look like to support that. I'm <em>tempted</em> to say that a combination of <code>try</code> and a macro might get part of the way there.</p>",
        "id": 192731325,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585864109
    },
    {
        "content": "<p>I could, for instance, imagine something like <code>error_context!(|| format!(\"thing {} detail {}\", thing, detail)) { ... }</code></p>",
        "id": 192731398,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585864158
    },
    {
        "content": "<p>But I also, slightly, wonder if it'd be a <em>terrible</em> idea to support some kind of \"please wrap the remainder of my current block in this macro without making me nest braces around it\" mechanism.</p>",
        "id": 192731494,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585864210
    },
    {
        "content": "<p>(That would also likely produce better results with <code>rustfmt</code>.)</p>",
        "id": 192731517,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585864227
    },
    {
        "content": "<p>I also feel like \"context\" and \"backtrace\" are a little conflated. What I'm providing isn't another error, it's context for the error that's already happening.</p>",
        "id": 192731970,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585864516
    },
    {
        "content": "<p>I think there's a semantic difference between \"Error X happened while I was doing Y\" and \"Error Y happened, the underlying error is X but you may not care about that\".</p>",
        "id": 192732024,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585864552
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span></p>",
        "id": 192733912,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585865592
    },
    {
        "content": "<blockquote>\n<p>I also feel like \"context\" and \"backtrace\" are a little conflated</p>\n</blockquote>",
        "id": 192734306,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585865837
    },
    {
        "content": "<p>you're speaking my language</p>",
        "id": 192734320,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585865851
    },
    {
        "content": "<p>disclaimer, in <code>eyre</code> which is a fork of <code>anyhow</code> I renamed the <code>context</code> fn to <code>wrap_err</code></p>",
        "id": 192734348,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585865875
    },
    {
        "content": "<p>can I ask what kind of context you're trying to provide? if its just runtime info I would argue that the right solution is tracing_error::SpanTrace</p>",
        "id": 192734463,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585865936
    },
    {
        "content": "<p>or something similar</p>",
        "id": 192734517,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585865968
    },
    {
        "content": "<p>but the idea is you wrap a scope with a span that has <code>thing</code> and <code>detail</code> as fields</p>",
        "id": 192734549,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585865987
    },
    {
        "content": "<p>and then any errors that are created in that scope that also capture a SpanTrace will get those fields in the spantrace at the end</p>",
        "id": 192734631,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585866009
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>   0: custom_error::do_another_thing\n        with answer=42 will_succeed=false\n          at examples/examples/custom_error.rs:42\n   1: custom_error::do_something\n        with foo=&quot;hello world&quot;\n          at examples/examples/custom_error.rs:37\n</pre></div>",
        "id": 192734663,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585866024
    },
    {
        "content": "<p>because it sounds like you're inserting members that you want to include with an error that don't themselves represent a new error and you're doing it by creating a new error to wrap the existing one with the <code>context</code> fn</p>",
        "id": 192734752,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585866082
    },
    {
        "content": "<p>lmk if this is accurate or not <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span></p>",
        "id": 192734801,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585866103
    },
    {
        "content": "<p>(One moment, interruption, will answer later with examples. Something came up.)</p>",
        "id": 192735271,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585866326
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> Not sure what you mean by \"runtime info\".</p>",
        "id": 192736980,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585867424
    },
    {
        "content": "<p>like, local members that you want to see the values of at the time the error was created</p>",
        "id": 192737029,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585867445
    },
    {
        "content": "<p>but not necessarily stuff that is part of the error message</p>",
        "id": 192737036,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585867456
    },
    {
        "content": "<p>So, a couple of things...</p>",
        "id": 192737049,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585867469
    },
    {
        "content": "<p>First, this isn't meant as pure \"debugging information\"; this is information that may be useful to the end-user, not just me as the developer.</p>",
        "id": 192737059,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585867485
    },
    {
        "content": "<p>I want this error to be vaguely useful to my users.</p>",
        "id": 192737077,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585867499
    },
    {
        "content": "<p>As an example, I might have an error like \"this git blob {hash} doesn't exist in the repository\", and the context is <code>        let context = || format!(\"Processing tree {}\", tree.id());</code></p>",
        "id": 192737198,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585867563
    },
    {
        "content": "<p>Because it's not very useful to say \"hash {} didn't exist\" without saying that it was the name N in the tree T (and \"name N\" would be nice to include too here).</p>",
        "id": 192737251,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585867613
    },
    {
        "content": "<p>okay</p>",
        "id": 192737294,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585867648
    },
    {
        "content": "<p>Just wanted to note that I have this frustration <em>every single time</em> I try to have nice errors in Rust. I've not found good solutions yet.</p>\n<p>I usually have found that what I sort of want is to be able to say \"here's some context\" and then everything that happens after that (before that context goes out of scope, maybe?) would include it, sort of like how I think tracing's scopes work</p>",
        "id": 192737322,
        "sender_full_name": "simulacrum",
        "timestamp": 1585867673
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> Yes please!</p>",
        "id": 192737379,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585867689
    },
    {
        "content": "<p>so the <code>this git blob {hash} doesnt exist in the repository</code> is the error message</p>",
        "id": 192737389,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585867697
    },
    {
        "content": "<p>and <code>Processing tree {}</code> is context</p>",
        "id": 192737402,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585867707
    },
    {
        "content": "<p>so, maybe a better example, is that I usually actually want sort of \"{hash} doesn't exist\" -&gt; \"in tree {}\" -&gt; \"in repository {}\" etc</p>",
        "id": 192737436,
        "sender_full_name": "simulacrum",
        "timestamp": 1585867737
    },
    {
        "content": "<p>and usually these are in different functions sort of spread apart quite widely, in my experience</p>",
        "id": 192737449,
        "sender_full_name": "simulacrum",
        "timestamp": 1585867751
    },
    {
        "content": "<p>yea I'm still leaning towards tracing being a good fit but the debug_context! stuff would also work</p>",
        "id": 192737474,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585867769
    },
    {
        "content": "<p>though I dont thikn it would work well with <code>anyhow</code></p>",
        "id": 192737480,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585867775
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> Right. I'm currently using <code>anyhow</code>, and <code>.with_context(context)?</code>.</p>",
        "id": 192737481,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585867777
    },
    {
        "content": "<p>because anyhow doesnt allow for adding context that isnt itself an error in your chain of errors</p>",
        "id": 192737487,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585867788
    },
    {
        "content": "<p>which you could just do, but I think its bad personally</p>",
        "id": 192737500,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585867799
    },
    {
        "content": "<p>this is the single reason why I forked anyhow</p>",
        "id": 192737554,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585867814
    },
    {
        "content": "<p>hm, well, actually, I don't usually care  - in almost all cases where I do this it's just going to get printed at the end, I don't have any downcasting etc</p>",
        "id": 192737568,
        "sender_full_name": "simulacrum",
        "timestamp": 1585867823
    },
    {
        "content": "<p><a href=\"https://docs.rs/eyre/0.3.5/src/eyre/lib.rs.html#466-471\" title=\"https://docs.rs/eyre/0.3.5/src/eyre/lib.rs.html#466-471\">https://docs.rs/eyre/0.3.5/src/eyre/lib.rs.html#466-471</a></p>",
        "id": 192737603,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585867849
    },
    {
        "content": "<p>(indeed whenever I start wanting to downcast I usually try to drop the opaque <code>Error</code> structs and go for some enum or something</p>",
        "id": 192737607,
        "sender_full_name": "simulacrum",
        "timestamp": 1585867851
    },
    {
        "content": "<p>note, eyre adds a context type parameter</p>",
        "id": 192737634,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585867865
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> Likewise. If I'm using <code>anyhow</code> it's because the only thing that'll ever happen with an error is reporting it and exiting gracefully.</p>",
        "id": 192737649,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585867881
    },
    {
        "content": "<p>so you could in theory have debug_context expose he fields in a threadlocal, and then have <code>wrap_err</code> grab that context and add it to the set of contexts in the ErrReport</p>",
        "id": 192737705,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585867917
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> That doesn't sound especially zero-overhead.</p>",
        "id": 192737775,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585867934
    },
    {
        "content": "<p>(Small note: I think in general given that there's a lot of \"mode du jour\" and shifting sands wrt. error handling utility libraries, that makes me pretty skeptical of anything approaching language level changes.)</p>",
        "id": 192737797,
        "sender_full_name": "centril",
        "timestamp": 1585867943
    },
    {
        "content": "<p>(Like... <code>anyhow</code> is a <em>very</em> new library)</p>",
        "id": 192737821,
        "sender_full_name": "centril",
        "timestamp": 1585867959
    },
    {
        "content": "<p>^</p>",
        "id": 192737846,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585867974
    },
    {
        "content": "<p>big agree on that</p>",
        "id": 192737847,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585867976
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> We're not at that phase now, we're at the brainstorming phase of \"what does the thing we want look like\".</p>",
        "id": 192737852,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585867981
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> yeah hence parenthetical <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 192737879,
        "sender_full_name": "centril",
        "timestamp": 1585867995
    },
    {
        "content": "<p>okay so you want a context</p>",
        "id": 192737884,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585868000
    },
    {
        "content": "<p>thats available locally</p>",
        "id": 192737885,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585868002
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> So, I'm not excited about the idea of switching error-handling libraries. I'm honestly hopeful that the <em>next</em> time that I switch will be when I switch to <code>std</code>.</p>",
        "id": 192737895,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585868006
    },
    {
        "content": "<p>okay</p>",
        "id": 192737908,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585868016
    },
    {
        "content": "<p>I think the hard part for me is figuring out how to actually associate the context</p>",
        "id": 192737911,
        "sender_full_name": "simulacrum",
        "timestamp": 1585868018
    },
    {
        "content": "<p>so that leaves you with inserting the context into the error chain</p>",
        "id": 192737973,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585868042
    },
    {
        "content": "<p>I'm not saying that I'm completely unwilling to switch at this point, but it would need to be for a reason stronger than \"it doesn't feel right for it to be part of the chain of errors\". :)</p>",
        "id": 192737990,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585868045
    },
    {
        "content": "<p>thats fair</p>",
        "id": 192738007,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585868061
    },
    {
        "content": "<p>I also hope that <code>anyhow</code> might be amenable to introducing a way to do this.</p>",
        "id": 192738017,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585868071
    },
    {
        "content": "<p>anyway, need to run, but will catch up later</p>",
        "id": 192738030,
        "sender_full_name": "simulacrum",
        "timestamp": 1585868078
    },
    {
        "content": "<p>maybe write up something more long form...</p>",
        "id": 192738041,
        "sender_full_name": "simulacrum",
        "timestamp": 1585868088
    },
    {
        "content": "<p>okay well, lets still see if we cant figure out what we would need to have added to anyhow</p>",
        "id": 192738136,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585868153
    },
    {
        "content": "<p>so you want to specify the context once</p>",
        "id": 192738174,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585868163
    },
    {
        "content": "<p>Well, once per new information to the context.</p>",
        "id": 192738199,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585868170
    },
    {
        "content": "<p>and then have any call within that scope use that context implicitly</p>",
        "id": 192738203,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585868173
    },
    {
        "content": "<p>Right. Minimum would be \"open a scope within which every error gets this context\". Bonus if I can also augment the current context without opening a new nested block.</p>",
        "id": 192738244,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585868207
    },
    {
        "content": "<p>(The difference mostly being indentation, frankly.)</p>",
        "id": 192738252,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585868214
    },
    {
        "content": "<p>mhmm</p>",
        "id": 192738267,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585868223
    },
    {
        "content": "<p>and tracing is off the table?</p>",
        "id": 192738276,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585868230
    },
    {
        "content": "<p>I know very little about tracing.</p>",
        "id": 192738288,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585868240
    },
    {
        "content": "<p>because this is exactly what tracing-error + tracing is designed to do</p>",
        "id": 192738291,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585868242
    },
    {
        "content": "<p>so with your specific example</p>",
        "id": 192738301,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585868253
    },
    {
        "content": "<p>it would look like this vaguely</p>",
        "id": 192738304,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585868258
    },
    {
        "content": "<p>One piece of information: I'm writing performance-sensitive code, where my inner loops run enough times that a tiny change to them can cost a substantial fraction of my runtime, so it's important that error handling add zero overhead if not erroring.</p>",
        "id": 192738407,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585868322
    },
    {
        "content": "<p>I don't know enough about tracing or how it works to know if it has that property.</p>",
        "id": 192738421,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585868337
    },
    {
        "content": "<p>tracing is pretty low overhead but it writes eagerly, tho it does so without allocating most of the time</p>",
        "id": 192738438,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585868347
    },
    {
        "content": "<p>so each time you encounter a span it has to copy the display data into the registry</p>",
        "id": 192738462,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585868364
    },
    {
        "content": "<p>Then that's very likely to be too much overhead, unfortunately.</p>",
        "id": 192738487,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585868377
    },
    {
        "content": "<p>okay so no tracing</p>",
        "id": 192738494,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585868383
    },
    {
        "content": "<p>At least not unless there's a variant of tracing that doesn't have that property, yeah. Sorry; from the descriptions of it it does sound quite nice.</p>",
        "id": 192738513,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585868400
    },
    {
        "content": "<p>not that I know of but eliza is more of an expert</p>",
        "id": 192738591,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585868414
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198819\">@David Barsky</span> has more experience using tracing in perf critical code than me</p>",
        "id": 192738618,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585868425
    },
    {
        "content": "<p>he can probably also chime in</p>",
        "id": 192738628,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585868433
    },
    {
        "content": "<p>so I dont know how you would pass it implicitly</p>",
        "id": 192738664,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585868466
    },
    {
        "content": "<p>without using thread locals</p>",
        "id": 192738680,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585868475
    },
    {
        "content": "<p>As a random example, I was curious how much difference <code>.with_context(|| format!(...))</code> versus <code>.context(format!(...))</code> made, and the answer turned out to be \"3-4% of my total runtime\".</p>",
        "id": 192738681,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585868477
    },
    {
        "content": "<p>nicee</p>",
        "id": 192738701,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585868488
    },
    {
        "content": "<p>but tracing will probably be a lot less than that</p>",
        "id": 192738726,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585868502
    },
    {
        "content": "<p>because format involves allocations that tracing wont</p>",
        "id": 192738734,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585868507
    },
    {
        "content": "<p>it might be easy enough to benchmark</p>",
        "id": 192738741,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585868513
    },
    {
        "content": "<p>Fair.</p>",
        "id": 192738743,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585868514
    },
    {
        "content": "<p>Quite possibly worth the experiment.</p>",
        "id": 192738800,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585868531
    },
    {
        "content": "<p>you can just setup a subscriber, throw  aspan there, capture a spantrace and immediately discard it and see what the perf impact is</p>",
        "id": 192738808,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585868535
    },
    {
        "content": "<p>well you probably wouldnt want to capture the spantrace</p>",
        "id": 192738848,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585868561
    },
    {
        "content": "<p>or only capture it and discard it inside of one of the closures that only happen on the error path</p>",
        "id": 192738881,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585868587
    },
    {
        "content": "<p>anyways</p>",
        "id": 192738883,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585868588
    },
    {
        "content": "<p>i feel like you can get pretty close to what you want with <code>format_args!</code> and <code>context</code> maybe</p>",
        "id": 192738917,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585868619
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/213817-t-lang/topic/Error.20context.2C.20with_context.2C.20and.20common.20contexts/near/192738664\" title=\"#narrow/stream/213817-t-lang/topic/Error.20context.2C.20with_context.2C.20and.20common.20contexts/near/192738664\">said</a>:</p>\n<blockquote>\n<p>so I dont know how you would pass it implicitly</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/213817-t-lang/topic/Error.20context.2C.20with_context.2C.20and.20common.20contexts/near/192738680\" title=\"#narrow/stream/213817-t-lang/topic/Error.20context.2C.20with_context.2C.20and.20common.20contexts/near/192738680\">said</a>:</p>\n<blockquote>\n<p>without using thread locals</p>\n</blockquote>\n<p>Assume for the moment that we had <code>try</code> blocks. Then I would hope for something that's effectively <code>try { ... }.with_context(|| ...)?</code> wrapped in a macro.</p>",
        "id": 192738918,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585868621
    },
    {
        "content": "<p>aah yea that would work</p>",
        "id": 192738940,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585868639
    },
    {
        "content": "<p>With the context first rather than last.</p>",
        "id": 192738986,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585868651
    },
    {
        "content": "<p>format_args is evaluated lazily right?</p>",
        "id": 192739010,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585868667
    },
    {
        "content": "<p>does it impl display</p>",
        "id": 192739025,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585868676
    },
    {
        "content": "<p>I don't know the internals of the format machinery.</p>",
        "id": 192739037,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585868681
    },
    {
        "content": "<p>it does impl display</p>",
        "id": 192739067,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585868700
    },
    {
        "content": "<p>oh but you cant use it as context</p>",
        "id": 192739100,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585868719
    },
    {
        "content": "<p>because its not 'static</p>",
        "id": 192739108,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585868722
    },
    {
        "content": "<p>And <code>context</code> versus <code>with_context</code> isn't the primary source of my verbosity. It's changing the one character <code>?</code> into <code>.with_context(context)?</code>.</p>",
        "id": 192739116,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585868725
    },
    {
        "content": "<p>The only other language-level thing that would help would be the ability to say \"the rest of this block is wrapped in this macro\", which would help with formatting and indentation, but is by no means required.</p>",
        "id": 192739138,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585868750
    },
    {
        "content": "<p>(And could technically be done by a proc macro attached to the function, though, ow.)</p>",
        "id": 192739205,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585868779
    },
    {
        "content": "<p>yea, i think you should experiment with tracing personally</p>",
        "id": 192739215,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585868784
    },
    {
        "content": "<p>because if that works its everything you want</p>",
        "id": 192739223,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585868792
    },
    {
        "content": "<p>you just enter the span and it uses RAII to drop the context when it goes out of scope</p>",
        "id": 192739233,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585868804
    },
    {
        "content": "<p>I'll keep that in mind; it does sound nice.</p>",
        "id": 192739243,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585868816
    },
    {
        "content": "<p>and then you just have to get anyhow (or eyre which already can do this) to capture the SpanTrace when its constructed</p>",
        "id": 192739244,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585868816
    },
    {
        "content": "<p>beyond that I don't have any ready solutions for you other than a macro that creates a nice context object given some fields which can then be passed into <code>.with_context()</code></p>",
        "id": 192739293,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585868859
    },
    {
        "content": "<p>I appreciate you taking the time to ponder this problem.</p>",
        "id": 192739313,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585868878
    },
    {
        "content": "<p>my pleasure</p>",
        "id": 192739359,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585868891
    },
    {
        "content": "<p>And I do hope that we get something satisfying into the standard library. I appreciate you helping to drive error-handling forward.</p>",
        "id": 192739373,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585868900
    },
    {
        "content": "<p>any excuse to get familiar with more error handling use cases</p>",
        "id": 192739377,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585868902
    },
    {
        "content": "<p>ty ^_^</p>",
        "id": 192739386,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585868906
    },
    {
        "content": "<p>yea i think the error reporting part (something like <code>anyhow</code>) will probably be the last thing to get into std</p>",
        "id": 192739406,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585868925
    },
    {
        "content": "<p>also im surprised you're using anyhow at all in a perf critical piece of code</p>",
        "id": 192739416,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585868939
    },
    {
        "content": "<p>but i might have bad intuition about the cost of allocations</p>",
        "id": 192739438,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585868960
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> The non-error path is performance critical, but it doesn't allocate.</p>",
        "id": 192739450,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585868970
    },
    {
        "content": "<p>aaaaah</p>",
        "id": 192739456,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585868977
    },
    {
        "content": "<p>that makes sense</p>",
        "id": 192739462,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585868981
    },
    {
        "content": "<p>The error path is emphatically <em>not</em> performance-critical.</p>",
        "id": 192739463,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585868981
    },
    {
        "content": "<p>i should internalize that better</p>",
        "id": 192739483,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585868997
    },
    {
        "content": "<p>that should be obvious</p>",
        "id": 192739487,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585868999
    },
    {
        "content": "<p>Yeah, it took me a <em>long</em> time.</p>",
        "id": 192739538,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585869004
    },
    {
        "content": "<p>I was allergic to anything even close to <code>Box&lt;dyn Error&gt;</code> for the longest time.</p>",
        "id": 192739553,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585869021
    },
    {
        "content": "<p>Then I finally started realizing how much overhead an enum error type had.</p>",
        "id": 192739577,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585869054
    },
    {
        "content": "<p>is it more?</p>",
        "id": 192739585,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585869062
    },
    {
        "content": "<p>In size, very much so.</p>",
        "id": 192739598,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585869071
    },
    {
        "content": "<p>or just not much less</p>",
        "id": 192739601,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585869073
    },
    {
        "content": "<p>ah yes</p>",
        "id": 192739604,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585869075
    },
    {
        "content": "<p>especially if they get deep</p>",
        "id": 192739609,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585869081
    },
    {
        "content": "<p>and that would impact the hot path too</p>",
        "id": 192739645,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585869114
    },
    {
        "content": "<p>Deep or embedding lots of useful error context that itself includes allocations anyway (like a string).</p>",
        "id": 192739647,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585869115
    },
    {
        "content": "<p>And exactly.</p>",
        "id": 192739688,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585869123
    },
    {
        "content": "<p>where as anyhow is 1 ptr wide on the stack</p>",
        "id": 192739695,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585869129
    },
    {
        "content": "<p>makes sense</p>",
        "id": 192739704,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585869139
    },
    {
        "content": "<p><em>That</em> was the realization that got me to like <code>anyhow</code> very much: that I don't care about the performance of the error path, I care about the performance of the non-error path, and I was hurting it by using custom error types.</p>",
        "id": 192739712,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585869151
    },
    {
        "content": "<p>And in particular that <code>Result&lt;T, MyCarefullyConstructedError&gt;</code> was going to be much much bigger than T for almost any T I had.</p>",
        "id": 192739763,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585869183
    },
    {
        "content": "<p>yea</p>",
        "id": 192739793,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585869213
    },
    {
        "content": "<p>anyways</p>",
        "id": 192739809,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585869232
    },
    {
        "content": "<p>try out tracing error, <a href=\"https://github.com/tokio-rs/tracing/blob/master/examples/examples/custom_error.rs\" title=\"https://github.com/tokio-rs/tracing/blob/master/examples/examples/custom_error.rs\">https://github.com/tokio-rs/tracing/blob/master/examples/examples/custom_error.rs</a> this should be a good example to use to get the necessary pieces</p>",
        "id": 192739859,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585869246
    },
    {
        "content": "<p>(The other allergy I had to <code>dyn Error</code> and <code>anyhow</code> was this ingrained systems-programming concept of \"you can't allocate on the error path! What happens if something goes wrong with allocation!\".)</p>",
        "id": 192739869,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585869258
    },
    {
        "content": "<p>though that uses <code>#[instrument]</code> instead of ever invoking the span macros directly</p>",
        "id": 192739872,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585869259
    },
    {
        "content": "<p>ha yea, one of my friends has to do zero allocation in the error path for that exact reason</p>",
        "id": 192739906,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585869294
    },
    {
        "content": "<p>tho hes doing os work</p>",
        "id": 192739912,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585869299
    },
    {
        "content": "<p>(To which I have to keep reminding myself that I'm not writing an operating system or a memory allocator (at the moment), and if allocation fails I have much worse problems.)</p>",
        "id": 192739915,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585869301
    },
    {
        "content": "<p>lol</p>",
        "id": 192739952,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585869328
    },
    {
        "content": "<p>ill think more about the context stuff incase tracing doesnt work out and ill let you know if I think of anything</p>",
        "id": 192740124,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585869462
    },
    {
        "content": "<p>if we just had postfix macros...</p>",
        "id": 192740204,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585869526
    },
    {
        "content": "<p>How might postfix macros help here? Note that I want to write <code>?</code>, not <code>.c!()?</code> or similar.</p>",
        "id": 192740669,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585869908
    },
    {
        "content": "<p>(I want postfix macros too, but I'm wondering how you see them being used in this context.)</p>",
        "id": 192740697,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585869933
    },
    {
        "content": "<p>oh i was thinking if you could define a postfix macro that replaced <code>context</code> and called it internally and also inserted your context that it would accomplish your needs</p>",
        "id": 192740713,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585869950
    },
    {
        "content": "<p>so there would be one macro call that basically defines the scope and maybe also defines the context macro and creates the closure to format in the members</p>",
        "id": 192740816,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585870006
    },
    {
        "content": "<p>Honestly, it isn't just verbosity that prompted me to want this. It's \"oops, I almost forgot what was in my <code>let context = || ...;</code> and used the wrong context for that error, this needs to be more automatic and scoped\".</p>",
        "id": 192740854,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585870037
    },
    {
        "content": "<p>hmmm</p>",
        "id": 192740981,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585870107
    },
    {
        "content": "<p>so the thing you're afraid of is this</p>",
        "id": 192741006,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585870140
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">blah</span><span class=\"p\">(</span><span class=\"n\">local</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">local2</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">error_context</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">fallible_fn</span><span class=\"p\">().</span><span class=\"n\">context</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;the error message&quot;</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// error_context!(local2); OOPS forgot to add</span>\n\n<span class=\"w\">    </span><span class=\"n\">fallible_fn2</span><span class=\"p\">().</span><span class=\"n\">context</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;the error message2&quot;</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 192741044,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585870175
    },
    {
        "content": "<p>In terms of <code>error_context!</code> yes.</p>",
        "id": 192741057,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585870197
    },
    {
        "content": "<p>but you dont want to add blocks with indentation</p>",
        "id": 192741147,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585870240
    },
    {
        "content": "<p>or is it specifically closures that you dont want</p>",
        "id": 192741161,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585870254
    },
    {
        "content": "<p>I don't mind adding blocks with indentation, though I'd love to not have to.</p>",
        "id": 192741179,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585870273
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">blah</span><span class=\"p\">(</span><span class=\"n\">local</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">local2</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">error_context</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">fallible_fn</span><span class=\"p\">().</span><span class=\"n\">context</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;the error message&quot;</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// error_context!(local2); OOPS forgot to add</span>\n\n<span class=\"w\">    </span><span class=\"n\">fallible_fn2</span><span class=\"p\">().</span><span class=\"n\">context</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;the error message2&quot;</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// OOPS compiler error, context! not defined, yay!</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 192741185,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585870278
    },
    {
        "content": "<p>What almost happened was this:</p>",
        "id": 192741195,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585870286
    },
    {
        "content": "<p>In this case, it was:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">walk_tree</span><span class=\"p\">(</span><span class=\"n\">tree</span>: <span class=\"nc\">Tree</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">...)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">context</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">format</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;Processing tree {}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tree</span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">...</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">entry</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">tree</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">...</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">mode</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">...</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">FileMode</span>::<span class=\"n\">Tree</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">...</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">some_call</span><span class=\"p\">().</span><span class=\"n\">with_context</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// OOPS this context is the tree I&#39;m walking not the subtree I&#39;m about to recurse into</span>\n</pre></div>",
        "id": 192741334,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585870395
    },
    {
        "content": "<p>because you had some other error in the top level that could throw before the entry iteration</p>",
        "id": 192741385,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585870434
    },
    {
        "content": "<p>Right.</p>",
        "id": 192741394,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585870441
    },
    {
        "content": "<p>This is a long function that has calls with <code>?</code> on every other line.</p>",
        "id": 192741446,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585870462
    },
    {
        "content": "<p>Most of which will produce inscrutable errors without some idea of \"this happened while I was processing a tree\".</p>",
        "id": 192741465,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585870481
    },
    {
        "content": "<p>yea, even with tracing error if you forget to add the span for the entry then you'll only get the context for the tree, the difference is it grabs all active spans when it gets the span trace</p>",
        "id": 192741474,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585870488
    },
    {
        "content": "<p>so if you have the context at the top level and the context for the entry you'll get them each as different frames essentially</p>",
        "id": 192741497,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585870508
    },
    {
        "content": "<p>to borrow backtrace parlance</p>",
        "id": 192741502,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585870516
    },
    {
        "content": "<p>and unless the top level context is never used after the for loop you're gonna have trouble scoping that</p>",
        "id": 192741603,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585870599
    },
    {
        "content": "<p>or in any situation where the scope for one context completely contains the scope of another</p>",
        "id": 192741613,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585870611
    },
    {
        "content": "<p>im not sure if that problem is solvable</p>",
        "id": 192741630,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585870630
    },
    {
        "content": "<p>:/</p>",
        "id": 192741632,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585870632
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/Error.20context.2C.20with_context.2C.20and.20common.20contexts/near/192739763\" title=\"#narrow/stream/213817-t-lang/topic/Error.20context.2C.20with_context.2C.20and.20common.20contexts/near/192739763\">said</a>:</p>\n<blockquote>\n<p>And in particular that <code>Result&lt;T, MyCarefullyConstructedError&gt;</code> was going to be much much bigger than T for almost any T I had.</p>\n</blockquote>\n<p>Oh yeah; in the compiler we basically do <code>pub struct DiagnosticBuilder&lt;'a&gt;(Box&lt;DiagnosticBuilderInner&lt;'a&gt;&gt;);</code> and <code>type PResult&lt;'a, T&gt; = Result&lt;T, DiagnosticBuilder&lt;'a&gt;&gt;;</code> where <code>PResult&lt;'a, T&gt;</code> is the error type used all over the place.</p>",
        "id": 192742141,
        "sender_full_name": "centril",
        "timestamp": 1585871021
    },
    {
        "content": "<p>boxing that up had some nice perf wins</p>",
        "id": 192742151,
        "sender_full_name": "centril",
        "timestamp": 1585871031
    },
    {
        "content": "<p>(<code>DiagnosticBuilderInner</code> is a pretty large type, <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_errors/diagnostic_builder/struct.DiagnosticBuilderInner.html\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_errors/diagnostic_builder/struct.DiagnosticBuilderInner.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_errors/diagnostic_builder/struct.DiagnosticBuilderInner.html</a>)</p>",
        "id": 192742224,
        "sender_full_name": "centril",
        "timestamp": 1585871073
    },
    {
        "content": "<blockquote>\n<p>In theory, return value optimization (RVO) should avoid unnecessary copying. In practice, it does not (at the time of writing).</p>\n</blockquote>",
        "id": 192742278,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585871125
    },
    {
        "content": "<p>is this still the case? :(</p>",
        "id": 192742283,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585871129
    },
    {
        "content": "<p>~</p>",
        "id": 192742571,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585871355
    },
    {
        "content": "<p>Hi! Few notes on tracing:</p>\n<ul>\n<li>tracing should be pretty cheap/no cost at all, depending on how you set it up. Cheaper and more performant than log, I’d guess </li>\n<li>tracing supports, at the lowest bounds, no_std + alloc.</li>\n<li>in the next few days, we’ll start pooling all our allocations in <code>tracing</code>, which should be a nice win.</li>\n</ul>",
        "id": 192745222,
        "sender_full_name": "David Barsky",
        "timestamp": 1585873468
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> Did you send a message that @-ed me, and then edit it? I had a notification and now can't find the corresponding message.</p>",
        "id": 192745716,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585873895
    },
    {
        "content": "<p>yea,</p>",
        "id": 192745822,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585874001
    },
    {
        "content": "<p>eliza was asking if you're using log currently but I didnt think it was relevant after interrogating her about why she wanted to know</p>",
        "id": 192745836,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585874021
    },
    {
        "content": "<p>so i did my best to delete it :&lt;</p>",
        "id": 192745861,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585874029
    },
    {
        "content": "<p>thats the <code>~</code> msg</p>",
        "id": 192745868,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585874033
    },
    {
        "content": "<p>Ah, makes sense.</p>",
        "id": 192852500,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585941799
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 192852544,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585941832
    },
    {
        "content": "<p>I didn't read this topic</p>",
        "id": 194209513,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586976118
    },
    {
        "content": "<p>Did I miss anything? :)</p>",
        "id": 194209519,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586976120
    },
    {
        "content": "<p>You might be interested to read it. It was partly inspired by your comments about trying out fehler and thinking about error-handling patterns.</p>",
        "id": 194209630,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1586976175
    },
    {
        "content": "<p>tl;dr: in the course of writing code with error-handling, I ran into a case that feels like it could use some language-level help, namely providing context for errors to clarify an error that would otherwise get propagated with <code>?</code> without enough explanation to make sense of it.</p>",
        "id": 194209896,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1586976277
    },
    {
        "content": "<p>Ah. On a related note I would very much like some procedural macros to automatically give context from functions. <span class=\"user-mention\" data-user-id=\"211722\">@Yoshua Wuyts</span> had some interesting libraries here.</p>",
        "id": 194210022,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586976335
    },
    {
        "content": "<p>I do think that's a good idea. But that's also often not sufficient for human-readable errors.</p>",
        "id": 194210302,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1586976474
    },
    {
        "content": "<p>For instance, I might need to do a bit of computation to give a more helpful  error message, and I can't do that computation until a little bit into the function, so failures <em>after</em> that point should include that information.</p>",
        "id": 194210411,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1586976507
    },
    {
        "content": "<p>I think this also has interesting parallels to my desire for some sort of context aware Debug and such, too, along with potentially moving things like async executors out of TLS ergonomically. Generally \"context\" that you want to thread through your program without passing explicitly, and likely through things like iterator adapters where it's not even possible much of the time</p>",
        "id": 194224068,
        "sender_full_name": "simulacrum",
        "timestamp": 1586983065
    },
    {
        "content": "<p>Yeah. I feel like I do actually want something like <code>try { ... }.with_context(|| compute and provide more context)?</code> , added \"on the way out\" of a scope. The one addition is that I'd like to be able to \"wrap the rest of the function\" in that, rather than it being a purely nesting block.</p>",
        "id": 194224393,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1586983251
    },
    {
        "content": "<p>The former is writable with no language additions other than <code>try</code>. The latter would need a language change, or a proc macro.</p>",
        "id": 194224485,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1586983309
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> Have you tried <code>snafu</code>? It has some proc macro magic to let you easily pass and format context into your errors. <a href=\"https://docs.rs/snafu\" title=\"https://docs.rs/snafu\">https://docs.rs/snafu</a></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[derive(Debug, Snafu)]</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">Error</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[snafu(display(</span><span class=\"s\">&quot;Could not open config from {}: {}&quot;</span><span class=\"cp\">, filename.display(), source))]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">OpenConfig</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">filename</span>: <span class=\"nc\">PathBuf</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">source</span>: <span class=\"nc\">std</span>::<span class=\"n\">io</span>::<span class=\"n\">Error</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[snafu(display(</span><span class=\"s\">&quot;Could not save config to {}: {}&quot;</span><span class=\"cp\">, filename.display(), source))]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">SaveConfig</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">filename</span>: <span class=\"nc\">PathBuf</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">source</span>: <span class=\"nc\">std</span>::<span class=\"n\">io</span>::<span class=\"n\">Error</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[snafu(display(</span><span class=\"s\">&quot;The user id {} is invalid&quot;</span><span class=\"cp\">, user_id))]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">UserIdInvalid</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">user_id</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>: <span class=\"nc\">Backtrace</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">type</span> <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">result</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">log_in_user</span><span class=\"o\">&lt;</span><span class=\"n\">P</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">config_root</span>: <span class=\"nc\">P</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">user_id</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">P</span>: <span class=\"nb\">AsRef</span><span class=\"o\">&lt;</span><span class=\"n\">Path</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">config_root</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">config_root</span><span class=\"p\">.</span><span class=\"n\">as_ref</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">filename</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">config_root</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"s\">&quot;config.toml&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fs</span>::<span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">).</span><span class=\"n\">context</span><span class=\"p\">(</span><span class=\"n\">OpenConfig</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">filename</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Perform updates to config</span>\n<span class=\"w\">    </span><span class=\"n\">fs</span>::<span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"p\">).</span><span class=\"n\">context</span><span class=\"p\">(</span><span class=\"n\">SaveConfig</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">filename</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">ensure</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">UserIdInvalid</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">user_id</span><span class=\"w\"> </span><span class=\"p\">});</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 194237243,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1586990293
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219696\">@XAMPPRocky</span> I'm not sure what I'm supposed to be seeing there. Most of that looks very similar to <code>thiserror</code>. And that doesn't seem to solve the context problem at all. It just provides context functions; they still need calling before every <code>?</code>.</p>",
        "id": 194262197,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587019057
    },
    {
        "content": "<p>Ah, I only saw the context discussion. Not the “provide context without calling context”.</p>",
        "id": 194278310,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1587029761
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/213817-t-lang/topic/Error.20context.2C.20with_context.2C.20and.20common.20contexts/near/192734463\">said</a>:</p>\n<blockquote>\n<p>can I ask what kind of context you're trying to provide? if its just runtime info I would argue that the right solution is tracing_error::SpanTrace</p>\n</blockquote>\n<p>Hi do you have any experience with using thiserror and tracing_error? if not do you have any idea how can I use them together?</p>",
        "id": 222137532,
        "sender_full_name": "Hossein Mayboudi",
        "timestamp": 1610147170
    },
    {
        "content": "<p>Yes</p>",
        "id": 222174296,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610204393
    },
    {
        "content": "<p>What problems are you running into <span class=\"user-mention\" data-user-id=\"378207\">@Hossein Mayboudi</span>?</p>",
        "id": 222174341,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610204443
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> I see your video \"RustConf 2020 - Error handling Isn't All About Errors by Jane Lusby\" and it is awesome. I have a lot of extra code regarding error handling. So I use anyhow for those that are not important like bootstrap the services, thiserror for important ones and based on error sending a message to user plus log with opentelemetry and tracing.</p>\n<p>I have a lot of duplicated code <code>rust .await.map_err(|err| { tracing::error!(\"{:?}\", err); err })?;</code></p>\n<p>I am thinking I may reduce it with tracing-error. I find these examples and I couldn't find a correct way to use them with thiserror.<br>\n<a href=\"https://github.com/tokio-rs/tracing/blob/master/examples/examples/custom-error.rs\">https://github.com/tokio-rs/tracing/blob/master/examples/examples/custom-error.rs</a><br>\n<a href=\"https://github.com/tokio-rs/tracing/blob/master/examples/examples/instrumented-error.rs\">https://github.com/tokio-rs/tracing/blob/master/examples/examples/instrumented-error.rs</a><br>\n<a href=\"https://github.com/tokio-rs/tracing/blob/master/examples/examples/map-traced-error.rs\">https://github.com/tokio-rs/tracing/blob/master/examples/examples/map-traced-error.rs</a></p>\n<p>1st do you think I am on the right path and I should remove map_error?<br>\n2nd tracing-error is a right solution for mine?</p>\n<p>I post this question on discord/tokio/tracing as well so other people can use your guidance.</p>",
        "id": 222222944,
        "sender_full_name": "Hossein Mayboudi",
        "timestamp": 1610286310
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> What is wrong with this code which it need err.into() instead of returning err?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">fip_common</span>::<span class=\"n\">common_error</span>::<span class=\"n\">CommonError</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">tonic</span>::<span class=\"n\">Request</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Sub</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">sub</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">request</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Request</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">CommonError</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">request</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">metadata</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">\"sub\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">to_str</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">err</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">tracing</span>::<span class=\"n\">error</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">err</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Debug, thiserror::Error)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[non_exhaustive]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">CommonError</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[error(transparent)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">TonicMetadataToStrError</span><span class=\"p\">(</span><span class=\"cp\">#[from]</span><span class=\"w\"> </span><span class=\"n\">tonic</span>::<span class=\"n\">metadata</span>::<span class=\"n\">errors</span>::<span class=\"n\">ToStrError</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">From</span><span class=\"o\">&lt;</span><span class=\"n\">CommonError</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">tonic</span>::<span class=\"n\">Status</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">from</span><span class=\"p\">(</span><span class=\"n\">common_error</span>: <span class=\"nc\">CommonError</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">tonic</span>::<span class=\"n\">Status</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">common_error</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">CommonError</span>::<span class=\"n\">TonicMetadataToStrError</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">tonic</span>::<span class=\"n\">Status</span>::<span class=\"n\">unavailable</span><span class=\"p\">(</span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 222224643,
        "sender_full_name": "Hossein Mayboudi",
        "timestamp": 1610288994
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"378207\">@Hossein Mayboudi</span> happy to help, first, are you using <a href=\"https://docs.rs/tracing-error/0.1.2/tracing_error/struct.TracedError.html\">https://docs.rs/tracing-error/0.1.2/tracing_error/struct.TracedError.html</a> rn?</p>",
        "id": 222374032,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610408624
    },
    {
        "content": "<p>or are you just using <code>SpanTrace</code></p>",
        "id": 222374051,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610408634
    },
    {
        "content": "<p>the <code>Into</code> there is necessary because you didn't use <code>?</code></p>",
        "id": 222374195,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610408724
    },
    {
        "content": "<p>which would call <code>Into</code> for you</p>",
        "id": 222374199,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610408732
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> Since I want to use stable instead of night build of rust I have to use SpanTrace.</p>",
        "id": 222417233,
        "sender_full_name": "Hossein Mayboudi",
        "timestamp": 1610449907
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">fip_common</span>::<span class=\"n\">common_error</span>::<span class=\"n\">CommonError</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">tonic</span>::<span class=\"n\">Request</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Sub</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">sub</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">request</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Request</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">CommonError</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">request</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">metadata</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">\"sub\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">to_str</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">err</span><span class=\"o\">|</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">CommonError</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">tracing</span>::<span class=\"n\">error</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">err</span><span class=\"w\"> </span><span class=\"c1\">// ERROR HERE</span>\n<span class=\"w\">            </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I get error [ERROR HERE],</p>\n<div class=\"codehilite\"><pre><span></span><code>mismatched types\n\nexpected enum `fip_common::common_error::CommonError`, found struct `tonic::metadata::errors::ToStrError`\n\nhelp: try using a variant of the expected enum: `fip_common::common_error::CommonError::TonicMetadataToStrError(err)`rustc(E0308)\nsub.rs(13, 17): expected enum `fip_common::common_error::CommonError`, found struct `tonic::metadata::errors::ToStrError`\n</code></pre></div>",
        "id": 222417478,
        "sender_full_name": "Hossein Mayboudi",
        "timestamp": 1610450073
    },
    {
        "content": "<p>if I use <code>?</code> how should I capture an error <code>tracing::error!(\"{:?}\", err);</code>?</p>",
        "id": 222417680,
        "sender_full_name": "Hossein Mayboudi",
        "timestamp": 1610450207
    },
    {
        "content": "<p>More importantly, how can I remove all map_err in my code by just using <code>?</code>, with respect to if an error happens, tracing log it on the pipeline so everything which connects to the pipeline act accordingly.</p>\n<p>I think if I have to use tracing-error/SpanTrace, my above statement is not possible since in map_err I have to call SpanTrace::capture().</p>",
        "id": 222418683,
        "sender_full_name": "Hossein Mayboudi",
        "timestamp": 1610450900
    },
    {
        "content": "<p>I solve it:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Debug)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[non_exhaustive]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">CommonError</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">common_error_kind</span>: <span class=\"nc\">CommonErrorKind</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">span_trace</span>: <span class=\"nc\">tracing_error</span>::<span class=\"n\">SpanTrace</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[derive(Debug, thiserror::Error)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[non_exhaustive]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">CommonErrorKind</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[error(transparent)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">TonicMetadataToStrError</span><span class=\"p\">(</span><span class=\"cp\">#[from]</span><span class=\"w\"> </span><span class=\"n\">tonic</span>::<span class=\"n\">metadata</span>::<span class=\"n\">errors</span>::<span class=\"n\">ToStrError</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">From</span><span class=\"o\">&lt;</span><span class=\"n\">CommonError</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">tonic</span>::<span class=\"n\">Status</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">from</span><span class=\"p\">(</span><span class=\"n\">common_error</span>: <span class=\"nc\">CommonError</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">tonic</span>::<span class=\"n\">Status</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">common_error</span><span class=\"p\">.</span><span class=\"n\">common_error_kind</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">CommonErrorKind</span>::<span class=\"n\">TonicMetadataToStrError</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">tonic</span>::<span class=\"n\">Status</span>::<span class=\"n\">unavailable</span><span class=\"p\">(</span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">From</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">CommonError</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">CommonErrorKind</span>: <span class=\"nb\">From</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">from</span><span class=\"p\">(</span><span class=\"n\">source</span>: <span class=\"nc\">E</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">common_error_kind</span>: <span class=\"nc\">CommonErrorKind</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"p\">).</span><span class=\"n\">into</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">span_trace</span>: <span class=\"nc\">tracing_error</span>::<span class=\"n\">SpanTrace</span>::<span class=\"n\">capture</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Display</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">CommonError</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">fmt</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Formatter</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">std</span>::<span class=\"n\">fmt</span>::<span class=\"nb\">Result</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">write!</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"({:?} =&gt; {:?})\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">span_trace</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">common_error_kind</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 222453769,
        "sender_full_name": "Hossein Mayboudi",
        "timestamp": 1610468005
    },
    {
        "content": "<p>.</p>",
        "id": 222457472,
        "sender_full_name": "Hossein Mayboudi",
        "timestamp": 1610469369
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"378207\">Hossein Mayboudi</span> <a href=\"#narrow/stream/213817-t-lang/topic/Error.20context.2C.20with_context.2C.20and.20common.20contexts/near/222417680\">said</a>:</p>\n<blockquote>\n<p>if I use <code>?</code> how should I capture an error <code>tracing::error!(\"{:?}\", err);</code>?</p>\n</blockquote>\n<p>well, first of all, <code>tracing::error!</code> is a tracing error event, and is part of a logging system. That's not something that comes from <code>tracing-error</code>, it's part of <code>tracing</code> itself.</p>",
        "id": 222480356,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610478882
    },
    {
        "content": "<p>so you cannot capture one of those</p>",
        "id": 222480362,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610478888
    },
    {
        "content": "<p>that just emits a log event to your logger</p>",
        "id": 222480369,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610478893
    },
    {
        "content": "<p>also that solution looks perfect</p>",
        "id": 222480559,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610478960
    },
    {
        "content": "<p>presumably you then use that with <code>?</code> to avoid the explicit into call like this</p>",
        "id": 222480654,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610479006
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Sub</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">sub</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">request</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Request</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">CommonError</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">sub</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">request</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">metadata</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">\"sub\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">to_str</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">sub</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 222480696,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610479027
    },
    {
        "content": "<p>though you might still want to add some extra logic to still invoke <code>tracing::error!</code> if logging errors before you propagate them is important to you</p>",
        "id": 222480870,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610479104
    },
    {
        "content": "<p>though I generally find myself doing one or the other, but not both</p>",
        "id": 222480882,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610479116
    },
    {
        "content": "<p>as in, you either propagate, react to, or report an error</p>",
        "id": 222480901,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1610479126
    }
]