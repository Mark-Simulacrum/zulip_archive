[
    {
        "content": "<p>I want to take people's temperature on something. </p>\n<p>I would like to eventually support impl Trait in return position in traits. I don't want to argue (right now) about <em>whether</em> to do this. Let's just take it as a given that we want to for the moment. I want to brainstorm <em>how</em>.</p>\n<p>The idea is that we would accept syntax like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">SomeType</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>this is basically equivalent to a (potentially generic) associated type:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Foo</span>: <span class=\"nc\">Trait</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">SomeType</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>But we need to describe exactly how this works. How...</p>\n<ul>\n<li>can users name the return type of <code>foo</code>?</li>\n<li>can users bound the return type of <code>foo</code> in where clauses?</li>\n</ul>\n<p>This topic is a brainstorming topic, I just want to get pointers to the range of ideas that are out there.</p>",
        "id": 231698925,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616615893
    },
    {
        "content": "<p>So, I do think in general that we should have ways of referencing the argument types and and return types of functions.</p>",
        "id": 231699106,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616615989
    },
    {
        "content": "<p>(Beyond just <code>where</code> constraints.)</p>",
        "id": 231699135,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616616001
    },
    {
        "content": "<p>But in particular, we <em>already</em> have the ability to write a <code>where</code> bound on a function return type, and we shouldn't lose the ability to do that just because it's an <code>impl Trait</code>.</p>",
        "id": 231699270,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616616030
    },
    {
        "content": "<p>Here is one option: make it a literal desugaring. </p>\n<p>So if we see <code>fn foo() -&gt; impl Trait</code> in a trait, we convert the method name into <code>CamelCase</code> and make an associated type. If there already is one, it's an error.</p>\n<p>We pair this with a simple inference scheme for impls where if you have <code>fn foo() -&gt; Self::Foo</code> in the trait definition and <code>fn foo() -&gt; X</code> in the impl (and you don't specify <code>type Foo = ...</code>), we can take the value of <code>Foo</code> from the function.</p>",
        "id": 231699333,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616616056
    },
    {
        "content": "<p>It should be possible to pass <code>Foo::foo</code> to something accepting a generic <code>Fn</code>, right?</p>",
        "id": 231699357,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616616065
    },
    {
        "content": "<p>I don't think we need the desugaring to make the type directly nameable, though.</p>",
        "id": 231699569,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616616150
    },
    {
        "content": "<p>Rather than having name transformation rules and issues with name conflicts, we could just generate an unnamed associated type.</p>",
        "id": 231699759,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616616238
    },
    {
        "content": "<p>(Or, if we <em>did</em> want to name it, I think the name should be something like <code>Foo::foo::Self</code> or similar.</p>",
        "id": 231699867,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616616278
    },
    {
        "content": "<p>I'm going to move something to a separate thread to avoid derailing this one.</p>",
        "id": 231702864,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616617599
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/Brainstorming.20impl.20Trait.20in.20trait.20functions/near/231699867\">said</a>:</p>\n<blockquote>\n<p>(Or, if we <em>did</em> want to name it, I think the name should be something like <code>Foo::foo::Self</code> or similar.</p>\n</blockquote>\n<p><code>Foo::foo::return</code> is easily available, although I suppose it ought to be <code>Foo::foo::Return</code> for consistency</p>",
        "id": 231707668,
        "sender_full_name": "bstrie",
        "timestamp": 1616619682
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/Brainstorming.20impl.20Trait.20in.20trait.20functions/near/231699357\">said</a>:</p>\n<blockquote>\n<p>It should be possible to pass <code>Foo::foo</code> to something accepting a generic <code>Fn</code>, right?</p>\n</blockquote>\n<p>I don't know what this means :)</p>",
        "id": 231707835,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616619745
    },
    {
        "content": "<p>let me start a hackmd to collect the options</p>",
        "id": 231707865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616619763
    },
    {
        "content": "<p><a href=\"https://hackmd.io/IISsYc0fTGSSm2MiMqby4A\">https://hackmd.io/IISsYc0fTGSSm2MiMqby4A</a> &lt;-- take a look there</p>",
        "id": 231708194,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616619887
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> i feel like you've put a lot of thought into this too</p>",
        "id": 231708597,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616620060
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/Brainstorming.20impl.20Trait.20in.20trait.20functions/near/231707835\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/Brainstorming.20impl.20Trait.20in.20trait.20functions/near/231699357\">said</a>:</p>\n<blockquote>\n<p>It should be possible to pass <code>Foo::foo</code> to something accepting a generic <code>Fn</code>, right?</p>\n</blockquote>\n<p>I don't know what this means :)</p>\n</blockquote>\n<p>Sorry, I should rephrase that. It should be possible to pass <code>SomeImplOfFoo::foo</code> to something accepting a generic <code>Fn</code>.</p>",
        "id": 231708770,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616620118
    },
    {
        "content": "<p>We'd also need something like <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1598-generic_associated_types.md#associated-type-constructors-of-type-arguments\">https://github.com/rust-lang/rfcs/blob/master/text/1598-generic_associated_types.md#associated-type-constructors-of-type-arguments</a>, right?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Example</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span>: <span class=\"nc\">Display</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">it</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Display</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"cm\">/*</span>\n<span class=\"cm\">    type Foo&lt;T : Display&gt; : Display; // */</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 231738343,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1616638440
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> I still don't 100% know what that means -- are you saying that <code>u32::foo</code> ought to be the <em>function type</em> of the method? If so, that's interesting; I think there is a namespace clash, though, as you can currently have associated types and methods with the same names. </p>\n<p>That said, this is precisely how I planned for chalk to manage questions like \"which code will run when I call this method on this type\". Currently in rustc this is kind of a special question, but I wanted chalk to handle it as associated type normalization.</p>",
        "id": 231767559,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616663531
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span> yes, I should go ahead and make the example include generics just so that is more clear.</p>",
        "id": 231767578,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616663546
    },
    {
        "content": "<p>I updated the doc some to use better names than <code>Foo</code> and <code>foo</code> and to include GATs</p>",
        "id": 231768100,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616663871
    },
    {
        "content": "<p>Heh, writing the examples here I'm wanting things to implement <code>Default</code></p>",
        "id": 231771435,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616665611
    },
    {
        "content": "<p>Regarding extraction of the argument types and return type of a function, I think it should be possible to do most of it in the type system already, by using impls like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Arg1Of</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">Arg1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span>: <span class=\"nb\">Fn</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,)</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">Arg1Of</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">Arg1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span>: <span class=\"nb\">Fn</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">)</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">Arg1Of</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">Arg1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Arg2Of</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">Arg2</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span>: <span class=\"nb\">Fn</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">)</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">Arg2Of</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">Arg2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The only missing piece is a means of getting the type of the whole function (i.e. the <code>fn(A) -&gt; B {T::foo}</code> type). Maybe it's possible to do this with an associated type notation like <code>{T::foo}::type</code>?</p>",
        "id": 231784724,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616672115
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> yes I think would be going down the path suggested <a href=\"https://hackmd.io/IISsYc0fTGSSm2MiMqby4A#Introduce-an-associated-type-for-the-function-type\">here</a> in the brainstorming doc, right? Or do I misunderstand?</p>",
        "id": 231802297,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616679889
    },
    {
        "content": "<blockquote>\n<p>But we need to describe exactly how this works. How...</p>\n<ul>\n<li>can users name the return type of foo?</li>\n<li>can users bound the return type of foo in where clauses?</li>\n</ul>\n<p>This topic is a brainstorming topic, I just want to get pointers to the range of ideas that are out there.</p>\n</blockquote>\n<p>I feel like I am missing something; how is this specific to impl Trait in trait functions? Don't the exact same questions come up for inherent or free-standing functions?</p>",
        "id": 231814993,
        "sender_full_name": "RalfJ",
        "timestamp": 1616683981
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> <code>impl Trait</code> functions are special in that the return type is generally unnameable</p>",
        "id": 231830194,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1616688720
    },
    {
        "content": "<p>gonna drop the RFC that I wrote ages ago in here, which handled this by allowing associated types to be inferred from function signatures: <br>\n<a href=\"https://github.com/cramertj/impl-trait-goals/blob/impl-trait-in-traits/0000-impl-trait-in-traits.md\">https://github.com/cramertj/impl-trait-goals/blob/impl-trait-in-traits/0000-impl-trait-in-traits.md</a></p>",
        "id": 231830411,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1616688840
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> 's favorite solution to this used to be \"just add <code>typeof</code>\"</p>",
        "id": 231830816,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1616688984
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127859\">Taylor Cramer</span> <a href=\"#narrow/stream/213817-t-lang/topic/Brainstorming.20impl.20Trait.20in.20trait.20functions/near/231830194\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <code>impl Trait</code> functions are special in that the return type is generally unnameable</p>\n</blockquote>\n<p>yes but this thread here makes it sounds like <code>impl Trait</code> functions <em>in traits</em> are somehow even more special.<br>\nThey certainly are in terms of requiring Generic Associated Types, but I see no connection to the questions I quoted.</p>",
        "id": 231830888,
        "sender_full_name": "RalfJ",
        "timestamp": 1616689016
    },
    {
        "content": "<blockquote>\n<p>\"just add typeof\"</p>\n</blockquote>\n<p>That doesn't feel right to me, I would expect <code>typeof(MyTrait::my_fn)</code> to be something like <code>fn(foo)-&gt;bar</code>, not <code>bar</code>.</p>",
        "id": 231832494,
        "sender_full_name": "bstrie",
        "timestamp": 1616689620
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> outside of traits, you can use <code>type X = impl Trait;</code> if you need a nameable thing (at least, you will once it's stable)</p>",
        "id": 231836132,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1616690944
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256342\">@bstrie</span> right, it would be <code>typeof(MyTrait::my_fn)::Output</code></p>",
        "id": 231836205,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1616690967
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127859\">Taylor Cramer</span> <a href=\"#narrow/stream/213817-t-lang/topic/Brainstorming.20impl.20Trait.20in.20trait.20functions/near/231836132\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> outside of traits, you can use <code>type X = impl Trait;</code> if you need a nameable thing (at least, you will once it's stable)</p>\n</blockquote>\n<p>ah okay, yes taking unstable features into account this makes more sense</p>",
        "id": 231836374,
        "sender_full_name": "RalfJ",
        "timestamp": 1616691010
    },
    {
        "content": "<p>is there no good way to use a similar approach even inside traits?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">type</span> <span class=\"nc\">T</span>: <span class=\"nc\">Trait</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">type</span> <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 231836588,
        "sender_full_name": "RalfJ",
        "timestamp": 1616691094
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127859\">Taylor Cramer</span> <a href=\"#narrow/stream/213817-t-lang/topic/Brainstorming.20impl.20Trait.20in.20trait.20functions/near/231830816\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> 's favorite solution to this used to be \"just add <code>typeof</code>\"</p>\n</blockquote>\n<p>I don't consider this a real solution</p>",
        "id": 231836597,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616691101
    },
    {
        "content": "<p>but I should elaborate why :)</p>",
        "id": 231836610,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616691105
    },
    {
        "content": "<p>also, I shouldn't talk like that :P</p>",
        "id": 231836623,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616691111
    },
    {
        "content": "<p>let me rephrase: I see a lot of challenges with that approach</p>",
        "id": 231836637,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616691118
    },
    {
        "content": "<p>among other things, you have to do <code>typeof</code> with <em>some expression</em>, which means it needs arguments etc</p>",
        "id": 231836736,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616691143
    },
    {
        "content": "<p>I also don't know how this can express higher-ranked things</p>",
        "id": 231836771,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616691157
    },
    {
        "content": "<p>Yes, it's also not my preferred approach, but I thought it was worth voicing.</p>",
        "id": 231836882,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1616691206
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/213817-t-lang/topic/Brainstorming.20impl.20Trait.20in.20trait.20functions/near/231836588\">said</a>:</p>\n<blockquote>\n<p>is there no good way to use a similar approach even inside traits?</p>\n</blockquote>\n<p>this is what I aim to stabilize first, but I want an ergonomic way. More generally, I want to get as close to \"impl Trait everywhere\" and \"async fn everywhere\" as we can -- perhaps that's misleading -- but I mean that impl Trait should be usable where it make sense to use it. I think it makes sense in traits.</p>",
        "id": 231836904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616691218
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 231836923,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616691225
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127859\">Taylor Cramer</span> <a href=\"#narrow/stream/213817-t-lang/topic/Brainstorming.20impl.20Trait.20in.20trait.20functions/near/231836882\">said</a>:</p>\n<blockquote>\n<p>Yes, it's also not my preferred approach, but I thought it was worth voicing.</p>\n</blockquote>\n<p>agreed,I should add it to the doc</p>",
        "id": 231836962,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616691238
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127859\">Taylor Cramer</span> <a href=\"#narrow/stream/213817-t-lang/topic/Brainstorming.20impl.20Trait.20in.20trait.20functions/near/231830411\">said</a>:</p>\n<blockquote>\n<p>gonna drop the RFC that I wrote ages ago in here, which handled this by allowing associated types to be inferred from function signatures: <br>\n<a href=\"https://github.com/cramertj/impl-trait-goals/blob/impl-trait-in-traits/0000-impl-trait-in-traits.md\">https://github.com/cramertj/impl-trait-goals/blob/impl-trait-in-traits/0000-impl-trait-in-traits.md</a></p>\n</blockquote>\n<p>so...</p>",
        "id": 231837077,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616691266
    },
    {
        "content": "<p>I suppose that a \"middle ground\" would be not to have a way to name the associated type in the trait</p>",
        "id": 231837117,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616691277
    },
    {
        "content": "<p>but just guarantee that one could refactor to use a named type if desired</p>",
        "id": 231837138,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616691285
    },
    {
        "content": "<p>but I think that's going to be problematic when you extend to <code>async fn</code></p>",
        "id": 231837180,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616691306
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127859\">Taylor Cramer</span> <a href=\"#narrow/stream/213817-t-lang/topic/Brainstorming.20impl.20Trait.20in.20trait.20functions/near/231836205\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"256342\">bstrie</span> right, it would be <code>typeof(MyTrait::my_fn)::Output</code></p>\n</blockquote>\n<p>is the idea that <code>typeof</code> would be more generally useful in other contexts? because that already seems fairly magical, and if there's magic involved then it seems like you could just support <code>MyTrait::my_fn::Output</code> outright</p>",
        "id": 231837298,
        "sender_full_name": "bstrie",
        "timestamp": 1616691345
    },
    {
        "content": "<p>am I right <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> that this is the conclusion of the draft RFC? I didn't actually read it :P</p>",
        "id": 231837307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616691350
    },
    {
        "content": "<p>I added <code>type_of</code></p>",
        "id": 231837862,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616691533
    },
    {
        "content": "<p>I also expanded the argument in the doc, <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>, to lay out my case for why this is important and how it fits in :)</p>",
        "id": 231838745,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616691824
    },
    {
        "content": "<p>reading your RFC, <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span>, I was confused by one thing</p>",
        "id": 231839427,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616692032
    },
    {
        "content": "<p>you wrote:</p>",
        "id": 231839431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616692033
    },
    {
        "content": "<p>oh, i get it</p>",
        "id": 231839480,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616692054
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">MyType</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"kt\">str</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"s\">\"foo!\"</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 231839502,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616692063
    },
    {
        "content": "<p>users can write that even with <code>fn foo() -&gt; impl Debug</code> in the trait definition, is your point</p>",
        "id": 231839528,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616692075
    },
    {
        "content": "<p>ok, I integrated the RFC more into my hackmd</p>",
        "id": 231840214,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616692317
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> personally, I actually think <code>async fn</code> probably deserves it's \"own thing\" for this</p>",
        "id": 231842567,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1616693184
    },
    {
        "content": "<p>along with <code>gen fn</code> and <code>async gen fn</code></p>",
        "id": 231842587,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1616693193
    },
    {
        "content": "<p>I think the principles that apply generally to \"<code>impl Trait</code> in traits\" weight differently in my mind WRT <code>async fn</code></p>",
        "id": 231842714,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1616693241
    },
    {
        "content": "<p>well, keep in mind that <code>async fn</code> is maximal in the sense of its capture, and afaik the recommended workaround is to use <code>impl Trait</code></p>",
        "id": 231842989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693346
    },
    {
        "content": "<p>I don't really see them as all that different</p>",
        "id": 231842999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693352
    },
    {
        "content": "<p>but also, if we have something for <code>async fn</code>, wouldn't it likely also be applicable to <code>impl Trait</code>?</p>",
        "id": 231843031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693364
    },
    {
        "content": "<p>like, is there a <em>downside</em> to limiting it?</p>",
        "id": 231843056,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693375
    },
    {
        "content": "<p>one other factor is wanting to apply <code>Send</code> to many associated types at once</p>",
        "id": 231843081,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693384
    },
    {
        "content": "<p>you probably want <em>all</em> or <em>none</em> of the associated types to be <code>Send</code></p>",
        "id": 231843098,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693394
    },
    {
        "content": "<p>Right, and for the same trait, it would be useful in some places to have it be <code>Send</code>, and in others for it to be non-<code>Send</code></p>",
        "id": 231843347,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1616693474
    },
    {
        "content": "<p>(not for the same end-consumer binary, typically, but for multiple users of a library, some using singlethreaded and some using multithreaded computations)</p>",
        "id": 231843402,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1616693499
    },
    {
        "content": "<p>And then you quickly want the ability to write bounds like <code>A: SendIfSend&lt;B&gt;</code></p>",
        "id": 231843531,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1616693536
    },
    {
        "content": "<p>which we glossed over before by allowing <code>impl Trait</code> to leak auto traits</p>",
        "id": 231843650,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1616693575
    },
    {
        "content": "<p>The reason I think <code>async fn</code> is special is that, when everything you're doing is <code>async</code>/<code>await</code>, the resulting value doesn't \"feel\" like a future</p>",
        "id": 231843957,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1616693679
    },
    {
        "content": "<p>Right. I guess the question is if you are likely to want that applied <em>only</em> to the results from <code>async fn</code> (and not other <code>impl Trait</code>), etc. Maybe!</p>",
        "id": 231843975,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693696
    },
    {
        "content": "<p>But I'm not sure how much to push on that post-rigorous understanding</p>",
        "id": 231843987,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1616693701
    },
    {
        "content": "<p>I think that may be an argument for some other way to reduce the amount of \"capture\" from an <code>async fn</code></p>",
        "id": 231844032,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693719
    },
    {
        "content": "<p>other than writing an async block inside of a function that returns an <code>impl Future</code>, you mean?</p>",
        "id": 231844099,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1616693748
    },
    {
        "content": "<p>Right, because if we're treating <code>async fn</code> specially, you then lose that specialness when you do that rewrite.</p>",
        "id": 231844164,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693764
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Makes sense. To disagree with my earlier self, I also tend to think that <code>async fn</code> as \"just a fn, but async\" leads to a lot of unnecessary confusion</p>",
        "id": 231844871,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1616694058
    },
    {
        "content": "<p>That is, the post-rigorous understanding quite often falls apart</p>",
        "id": 231844928,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1616694080
    },
    {
        "content": "<p>I guess I feel like I'd <em>like</em> to be able to name the returns of <code>impl Trait</code>, at least</p>",
        "id": 231844951,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616694090
    },
    {
        "content": "<p>I'd also like to understand that better, <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span></p>",
        "id": 231844976,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616694102
    },
    {
        "content": "<p>I want status quo user stories about this :)</p>",
        "id": 231845002,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616694113
    },
    {
        "content": "<p>Agreed, and specifically for <code>async fn</code> you'd like to not have to introduce a new name in the trait definition explicitly, right?</p>",
        "id": 231845004,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1616694113
    },
    {
        "content": "<p>what are the edges</p>",
        "id": 231845011,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616694116
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127859\">Taylor Cramer</span> <a href=\"#narrow/stream/213817-t-lang/topic/Brainstorming.20impl.20Trait.20in.20trait.20functions/near/231845004\">said</a>:</p>\n<blockquote>\n<p>Agreed, and specifically for <code>async fn</code> you'd like to not have to introduce a new name in the trait definition explicitly, right?</p>\n</blockquote>\n<p>right-- it's true that for other impl Trait htat might be good enough, esp. if it can be done backwards compatibly</p>",
        "id": 231845087,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616694134
    },
    {
        "content": "<p>Right, I think for other <code>impl Trait</code>-in-traits I tend to think that it either doesn't need to be named, or you can be bothered to give it a decent name :)</p>",
        "id": 231845201,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1616694175
    },
    {
        "content": "<p>but I understand why in the <code>async fn</code> case that can be really quite annoying</p>",
        "id": 231845268,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1616694209
    },
    {
        "content": "<p>though I think I do actually believe that if you're doing tricksy things like limiting the amount of captures available to a returned <code>-&gt; impl Future</code>, perhaps we could require you  to write out the associated type definition in that case.</p>",
        "id": 231845403,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1616694257
    },
    {
        "content": "<p>Which would mean the special case really is <code>async fn</code></p>",
        "id": 231845472,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1616694290
    },
    {
        "content": "<p>I don't know-- I certainly haven't convinced myself of any particular path :)</p>",
        "id": 231845537,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1616694315
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/Brainstorming.20impl.20Trait.20in.20trait.20functions/near/231767559\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> I still don't 100% know what that means -- are you saying that <code>u32::foo</code> ought to be the <em>function type</em> of the method?</p>\n</blockquote>\n<p>No, that wasn't what I was asking about. Let me write out a complete example...</p>",
        "id": 231855314,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616697921
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">SomeType</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">call_func</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Trait</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span>: <span class=\"nb\">FnOnce</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">func</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">func</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">call_func</span><span class=\"p\">(</span><span class=\"n\">SomeType</span>::<span class=\"n\">foo</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 231855787,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616698110
    },
    {
        "content": "<p>Assuming you can do <code>-&gt; impl Trait</code> in a trait, the above code should be valid.</p>",
        "id": 231855896,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616698159
    },
    {
        "content": "<p>And once you can write <em>that</em>, you can name the return type as <code>T</code> within <code>call_func</code>. You can also further constrain the return type, via bounds on <code>T</code>.</p>",
        "id": 231855965,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616698191
    },
    {
        "content": "<p>I think it'd be reasonable to add syntactic sugar to go from the trait to the function's type in type space, not just in value space.</p>",
        "id": 231856540,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616698421
    },
    {
        "content": "<p>I was suggesting, if it'd be feasible, that we could allow access to the type namespace through a value of the type (so, if <code>x</code> is a <code>u32</code>, allow <code>x::MAX</code>). That would then make <code>SomeType::foo::Output</code> work.</p>",
        "id": 231857597,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616698788
    },
    {
        "content": "<p>Or, for that matter, once you have <code>T: Foo</code>, you could write <code>T::foo::Output</code>.</p>",
        "id": 231857722,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616698819
    },
    {
        "content": "<p>I wrote up various proposals along those lines</p>",
        "id": 232004754,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616780072
    },
    {
        "content": "<p>I think they have downsides</p>",
        "id": 232004763,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616780075
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/Brainstorming.20impl.20Trait.20in.20trait.20functions/near/231699333\">said</a>:</p>\n<blockquote>\n<p>We pair this with a simple inference scheme for impls where if you have <code>fn foo() -&gt; Self::Foo</code> in the trait definition and <code>fn foo() -&gt; X</code> in the impl (and you don't specify <code>type Foo = ...</code>), we can take the value of <code>Foo</code> from the function.</p>\n</blockquote>\n<p>This would be really nice <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> -- it'd make common things like <code>impl Add for Blah</code> so much simpler too.</p>",
        "id": 232478499,
        "sender_full_name": "scottmcm",
        "timestamp": 1617130684
    }
]