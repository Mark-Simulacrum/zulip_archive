[
    {
        "content": "<p>Which team owns the nomicon currently? I have a number of questions, particularly around the \"implementing Vec\" chapter.</p>",
        "id": 230849571,
        "sender_full_name": "Florian Gilcher",
        "timestamp": 1616068174
    },
    {
        "content": "<p>One of the current ones I have is that the first part of the tutorial says that we need to be variant over T: <a href=\"https://doc.rust-lang.org/nomicon/vec-layout.html\">https://doc.rust-lang.org/nomicon/vec-layout.html</a></p>",
        "id": 230849716,
        "sender_full_name": "Florian Gilcher",
        "timestamp": 1616068237
    },
    {
        "content": "<p>But looking at NonNull, it says that it is covariant over T, and: \"Usually this won't be necessary; covariance is correct for most safe abstractions, such as Box, Rc, Arc, Vec, and LinkedList.\" <a href=\"https://doc.rust-lang.org/std/ptr/struct.NonNull.html\">https://doc.rust-lang.org/std/ptr/struct.NonNull.html</a></p>",
        "id": 230849802,
        "sender_full_name": "Florian Gilcher",
        "timestamp": 1616068310
    },
    {
        "content": "<p>Which one is correct? Because using NonNull would allow us to implement Unique easily on safe Rust.</p>",
        "id": 230849903,
        "sender_full_name": "Florian Gilcher",
        "timestamp": 1616068364
    },
    {
        "content": "<p>I also can't replicate the behavior described in the chapter</p>\n<blockquote>\n<p>So a &amp;Vec&lt;&amp;'static str&gt; couldn't be used where an &amp;Vec&lt;&amp;'a str&gt; was expected.</p>\n</blockquote>\n<p>Is this something that went away in modern Rust editions?</p>",
        "id": 230850988,
        "sender_full_name": "Florian Gilcher",
        "timestamp": 1616068974
    },
    {
        "content": "<p>From what I'm reading in the first link, the issue is an artifact of the navie implementation of <code>(*mut T,usize,usize)</code>, as <code>*mut T</code> is invariant over <code>T</code>.  This sentance before the behaviour described supports this, stating the naive implementation is incorrect because of the (in)variance.</p>\n<blockquote>\n<p>And indeed this would compile. Unfortunately, it would be incorrect. First, the compiler will give us too strict variance</p>\n</blockquote>\n<p>NonNull may still be better to discuss directly using <code>*const T</code>, as it expresses the non-null invariant, and gives a null pointer optimization. It may also be a good idea to <em>not</em> suggest using Unique, which is an implementation-detail AFAIK (rather than just being unstable pending stablization).</p>",
        "id": 230852510,
        "sender_full_name": "Connor Horman",
        "timestamp": 1616069795
    },
    {
        "content": "<p>Well, i gathered as much, but further down, the chapter gives 4 requirements, and one of that is \"We are variant over T\". But NonNull says it is covariant, but also that it is fitting for Vec. So, is \"variant\" really a requirement or just a behaviour of Unique?</p>",
        "id": 230853060,
        "sender_full_name": "Florian Gilcher",
        "timestamp": 1616070119
    },
    {
        "content": "<p>So, yes, moving the chapter to NonNull would probably tighten it up a lot, but i'm struggling with the question whether I need deal with the variance issue or if that can be dropped along  the way.</p>",
        "id": 230853392,
        "sender_full_name": "Florian Gilcher",
        "timestamp": 1616070254
    },
    {
        "content": "<p>Ah.<br>\nI wonder if that's outdated terminology. I would presume it should be <code>covariant</code>, but it seems to mean the same. (Rather than <code>variant</code> meaning <code>invariant</code>).</p>",
        "id": 230853491,
        "sender_full_name": "Connor Horman",
        "timestamp": 1616070319
    },
    {
        "content": "<p>ah!</p>",
        "id": 230853630,
        "sender_full_name": "Florian Gilcher",
        "timestamp": 1616070373
    },
    {
        "content": "<p>In this case, dropping down to <code>NonNull</code> from <code>Unique</code> would be just feasible.</p>",
        "id": 230853668,
        "sender_full_name": "Florian Gilcher",
        "timestamp": 1616070396
    },
    {
        "content": "<p>The definition of <code>Unique&lt;T&gt;</code> it provides is definately covariant, <code>*const T</code> is covariant (and even indicates that it is using <code>*const</code> \"for variance\"), and <code>PhantomData&lt;T&gt;</code> is variant, because it's just <code>T</code>.</p>",
        "id": 230853680,
        "sender_full_name": "Connor Horman",
        "timestamp": 1616070406
    },
    {
        "content": "<p>Because the rest of the chapter is also weird around Unique, e.g. making a case for why <code>new</code> is okay to be safe, but that would break with very easy API extensions that rely on the uniquenes...</p>",
        "id": 230853743,
        "sender_full_name": "Florian Gilcher",
        "timestamp": 1616070436
    },
    {
        "content": "<p>Well, it would still need the other implications of <code>Unique</code> (such as being the Unique Owner of a <code>T</code>).</p>",
        "id": 230853755,
        "sender_full_name": "Connor Horman",
        "timestamp": 1616070448
    },
    {
        "content": "<p>From the perspective of the goal of the chapter, this is an invariant of <code>Vec</code> though, and that completely encapsulates that behaviour.</p>",
        "id": 230853883,
        "sender_full_name": "Florian Gilcher",
        "timestamp": 1616070503
    },
    {
        "content": "<p>I think where the nomicon says \"variant\" it really means \"covariant\", yeah</p>",
        "id": 230856651,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1616071806
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"215333\">@Florian Gilcher</span> the main distinction between <code>Unique</code> and <code>NonNull</code> is regarding <code>dropck</code> if one were to use, say</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"cp\">#[may_dangle]</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Drop</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Wrapper</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>In that case, if the only usage of <code>T</code> within <code>Wrapper&lt;T&gt;</code> definition is <code>NonNull&lt;T&gt;</code> (or <code>*const|mut T</code>), then that drop impl will be unsound (if it happens to drop instances of type <code>T</code>). On the other hand, if <code>PhantomData&lt;T&gt;</code> were to be used, (such as inside <code>Unique</code>'s definition), then such an impl would be correct. See <a href=\"https://users.rust-lang.org/t/phantomdata-and-dropck-confusion/26624/2\">this lengthy post of mine about it</a>.</p>\n<hr>\n<p>Also, fwiw, I've always found:</p>\n<blockquote>\n<p>Usually this won't be necessary; covariance is correct for most safe abstractions, such as Box, Rc, Arc, Vec, and LinkedList</p>\n</blockquote>\n<p>to be incredibly <em>opaque</em> for something that has to do with safety.</p>\n<p>For those really wanting a one-liner TL,DR, the key idea is: covariance is fine if you have immutable access to the <code>T</code>, or if you <em>uniquely own</em>  the <code>T</code>; otherwise covariance is likely to be unsound and you should conservatively be invariant.</p>\n<ul>\n<li>You can notice the enumeration lists cases of the latter, but for <code>Rc/Arc</code> potential multiple owners, but then we are back to immutability (which is broken if the pointee is wrapped in a shared mutability wrapper, which is why those are the exception that needs to be invariant).</li>\n</ul>\n<p>Since <code>Unique</code> is precisely the wrapper for unique <em>ownership</em> (it's sad that the own part is not in the name: using <code>Unique&lt;T&gt;</code> to mimic <code>&amp;'short-lived mut T</code> semantics is, for instance, wrong).</p>",
        "id": 230871492,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1616077380
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"215333\">Florian Gilcher</span> <a href=\"#narrow/stream/213817-t-lang/topic/Nomicon/near/230849571\">said</a>:</p>\n<blockquote>\n<p>Which team owns the nomicon currently? I have a number of questions, particularly around the \"implementing Vec\" chapter.</p>\n</blockquote>\n<p>That'd be the lang-team-docs team of which specific members are specifically for the nomicon. The #t-lang/doc channel is the \"correct\" channel for questions w.r.t. the nomicon.</p>",
        "id": 230979558,
        "sender_full_name": "isHavvy",
        "timestamp": 1616132873
    }
]