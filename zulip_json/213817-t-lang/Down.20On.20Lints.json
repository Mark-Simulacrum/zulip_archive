[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> you said this in <a href=\"https://github.com/rust-lang/rust/issues/67264#issuecomment-718164970\">https://github.com/rust-lang/rust/issues/67264#issuecomment-718164970</a>, I'm curious why. I like lints personally</p>",
        "id": 214887963,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603914278
    },
    {
        "content": "<p>lol. So like... I was an editor by trade first and I like lints in a very Generic Sense, but that means I have Strong Opinions about them, same with autoformatters. Specifically, I dislike what feel like \"fake\" formatting concerns that I find creep into tools like rustfmt, and I dislike what feel like \"fake\" lints in things like clippy. And I'm OK with clippy being clippy and rustfmt being rustfmt in a sense? But I wish there were alternatives tbqh. I am afraid of Clippy going the way of ESLint</p>",
        "id": 214888925,
        "sender_full_name": "Jubilee",
        "timestamp": 1603914787
    },
    {
        "content": "<p>I definitely feel that lints should have ~0 false positives.</p>",
        "id": 214889198,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603914917
    },
    {
        "content": "<p>Lints that people learn to ignore lose their value.</p>",
        "id": 214889228,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603914931
    },
    {
        "content": "<p>you have basically <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> 's view of clippy then <a href=\"https://github.com/rust-lang/rust-clippy/issues/5537\">https://github.com/rust-lang/rust-clippy/issues/5537</a></p>",
        "id": 214889256,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603914945
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/Down.20On.20Lints/near/214889228\">said</a>:</p>\n<blockquote>\n<p>Lints that people learn to ignore lose their value.</p>\n</blockquote>\n<p>ooh don't get me started on this, rustc itself has a ton of these</p>",
        "id": 214889324,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603914965
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/64762\">https://github.com/rust-lang/rust/issues/64762</a></p>",
        "id": 214889330,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603914970
    },
    {
        "content": "<p>I am OK with %N false positives where N is low when the correctness concerns are strong enough.</p>",
        "id": 214889340,
        "sender_full_name": "Jubilee",
        "timestamp": 1603914973
    },
    {
        "content": "<p>\"I don't ECMAScript what is so bad about ESLint?\" So... ESLint (and React ESLint) eventually acquired some absolutely <em>inane</em> lints which frankly should not even be options to be set, not even on anything like a clippy::pedantic mode. Because they were so destructive to the community. They basically are there to drive you insane, like \"only one React component per file\" which doesn't work at all in more compositionally-inclined projects.</p>",
        "id": 214889415,
        "sender_full_name": "Jubilee",
        "timestamp": 1603915027
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/213817-t-lang/topic/Down.20On.20Lints/near/214889340\">said</a>:</p>\n<blockquote>\n<p>I am OK with %N false positives where N is low when the correctness concerns are strong enough.</p>\n</blockquote>\n<p>I'm alright with a very low false positive rate, as long as it still feels like it's \"99% of the time this is wrong, and 1% of the time it's technically correct but still sketchy and people won't be too surprised having it flagged\".</p>",
        "id": 214889576,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603915090
    },
    {
        "content": "<p>As opposed to \"and 1% of the time it's completely correct and the compiler is completely wrong\".</p>",
        "id": 214889623,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603915112
    },
    {
        "content": "<p>/me glances at <a href=\"https://github.com/rust-lang/rust/pull/75671#issuecomment-684898786\">https://github.com/rust-lang/rust/pull/75671#issuecomment-684898786</a></p>",
        "id": 214889758,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603915186
    },
    {
        "content": "<p>I think a bunch of this also comes from CLI issues.  In C# with Resharper, it has a <em>bazillion</em> little random things it can tell you about.  But most of them are just displayed with a very subtle ellipsis under it that you can click on if you like, but that doesn't make the code non-green.</p>\n<p>That way it can have things like a \"you could write this as an iterator\" quickfix that I sometimes try but usually undo for being too complicated, without me getting annoyed at it.</p>",
        "id": 214890015,
        "sender_full_name": "scottmcm",
        "timestamp": 1603915277
    },
    {
        "content": "<p>So I kinda want a \"nudge\" lint level that's only shown in the editor integration paths by default, not in <code>cargo check</code> or even <code>cargo clippy</code>.</p>",
        "id": 214890203,
        "sender_full_name": "scottmcm",
        "timestamp": 1603915327
    },
    {
        "content": "<p>I have <em>no</em> problem with such things being allow-by-default lints that people can turn on.</p>",
        "id": 214890218,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603915332
    },
    {
        "content": "<p>I think the problem is that I wouldn't even want to turn on a bunch of these, if I have to see them in the CLI output, because I so often don't want to apply them.</p>",
        "id": 214890299,
        "sender_full_name": "scottmcm",
        "timestamp": 1603915370
    },
    {
        "content": "<p>In my opinion: Anything that's warn-by-default or more should have an exceptionally low false-positive rate and the false positives should still be unambiguously improved by changing them. But allow-by-default lints can absolutely be matters of taste.</p>",
        "id": 214890305,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603915374
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/213817-t-lang/topic/Down.20On.20Lints/near/214890299\">said</a>:</p>\n<blockquote>\n<p>I think the problem is that I wouldn't even want to turn on a bunch of these, if I have to see them in the CLI output, because I so often don't want to apply them.</p>\n</blockquote>\n<p>An allow-by-default lint with a rustfix could potentially be presented by rust-analyzer as an optional \"hey maybe\" nudge.</p>",
        "id": 214890361,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603915401
    },
    {
        "content": "<p>You could even have a list of \"nudges I don't mind receiving\".</p>",
        "id": 214890379,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603915410
    },
    {
        "content": "<p>UX is hard. :)</p>",
        "id": 214890405,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603915427
    },
    {
        "content": "<p>If you write React for even like... two weeks? You will eventually write a React component that consists of two logical components that should be used in combination. That is just how React works. It is meant to be used with such compositional reasoning about the framework, and there are some very basic patterns that get taught to everyone that have two, not one, components in a file.</p>\n<p>So it makes writing basic React feel painful, for the sake of a false \"correctness\", and yet such a lint exists in ESLint. And it's not about something that's potentially a correctness concern or even a <em>pleasant</em> style nit to deal with, it's just pure raw opinion slathered over my face, and programs should not assist with that, especially when it's not resolved by an autoformatter (at least those get out of the way!), especially on a community resource.</p>",
        "id": 214890436,
        "sender_full_name": "Jubilee",
        "timestamp": 1603915442
    },
    {
        "content": "<p>\"So you just have PTSD from having to deal with JS FOSS linters?\" MAYBE.</p>",
        "id": 214890597,
        "sender_full_name": "Jubilee",
        "timestamp": 1603915505
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span>  Yeah, Resharper has local-to-the-machine configuration, local-to-the-solution-but-not-shared, and solution-and-checked-into-source-control configuration for all of the things, and a UI to change the lint level for the thing directly from where you see it.</p>",
        "id": 214890618,
        "sender_full_name": "scottmcm",
        "timestamp": 1603915512
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/213817-t-lang/topic/Down.20On.20Lints/near/214890618\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span>  Yeah, Resharper has local-to-the-machine configuration, local-to-the-solution-but-not-shared, and solution-and-checked-into-source-control configuration for all of the things, and a UI to change the lint level for the thing directly from where you see it.</p>\n</blockquote>\n<p>that sounds so nice</p>",
        "id": 214890653,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603915530
    },
    {
        "content": "<p>I need to use a proper IDE at some point <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> instead of just using RA for syntax highlighting and ignoring the hints</p>",
        "id": 214890698,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603915547
    },
    {
        "content": "<p>Yeah honestly some errs/lints just don't make sense if they appear in a cmdline and some don't make sense if they appear in an IDE.</p>",
        "id": 214890861,
        "sender_full_name": "Jubilee",
        "timestamp": 1603915623
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/7YQ-xdgGQMrO4qFTqT4vC8SI/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/7YQ-xdgGQMrO4qFTqT4vC8SI/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/7YQ-xdgGQMrO4qFTqT4vC8SI/image.png\"></a></div>",
        "id": 214890887,
        "sender_full_name": "scottmcm",
        "timestamp": 1603915632
    },
    {
        "content": "<p>ooh I <em>love</em> 'why is my IDE suggesting this'</p>",
        "id": 214890967,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603915676
    },
    {
        "content": "<p>I'm big on discoverability :P</p>",
        "id": 214891022,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603915688
    },
    {
        "content": "<p>I have noticed a few times in the #beginners channels that we had to say \"my crab, stop listening to the IDE and just run <code>cargo check</code>\" so they could see the full error that they were mystified by.</p>",
        "id": 214891335,
        "sender_full_name": "Jubilee",
        "timestamp": 1603915834
    },
    {
        "content": "<p>that seems like it could be fixed by better tooling though</p>",
        "id": 214891648,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603915985
    },
    {
        "content": "<p>where the IDE highlights your source code instead of rustc trying to make ascii art</p>",
        "id": 214891677,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603915996
    },
    {
        "content": "<p>I can imagine doing that with JSON output or something</p>",
        "id": 214891710,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603916011
    },
    {
        "content": "<p>Yes.</p>",
        "id": 214891846,
        "sender_full_name": "Jubilee",
        "timestamp": 1603916072
    },
    {
        "content": "<p>I do wonder why RA (in VS Code in my case) doesn't show the full and proper error</p>",
        "id": 214903918,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1603923050
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"226095\">@Dirkjan Ochtman</span> if I recall correctly it's partly because RA uses a different parser than rustc (for now), and partly because VS Code's \"problem\" formatting is limited and can't even do basic things like display text in bold -- there's an open issue for it on the VS Code repo <a href=\"https://github.com/microsoft/vscode/issues/54272\">https://github.com/microsoft/vscode/issues/54272</a></p>",
        "id": 215027922,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1604005574
    },
    {
        "content": "<p>Re: lints -- I remember a while back there being talk about moving some of Clippy's lints to the compiler proper — has there been any movement on that? (I'm vague on the details -- not recall in which capacity this was discussed)</p>",
        "id": 215028883,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1604006016
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211722\">Yoshua Wuyts</span> <a href=\"#narrow/stream/213817-t-lang/topic/Down.20On.20Lints/near/215028883\">said</a>:</p>\n<blockquote>\n<p>Re: lints -- I remember a while back there being talk about moving some of Clippy's lints to the compiler proper — has there been any movement on that? (I'm vague on the details -- not recall in which capacity this was discussed)</p>\n</blockquote>\n<p>individual lints have been moved, but it seems the policy is that there won't be a 'mass-migration'</p>",
        "id": 215029042,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604006087
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/53224\">https://github.com/rust-lang/rust/issues/53224</a></p>",
        "id": 215029149,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604006152
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> thank you!</p>",
        "id": 215161431,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1604099885
    }
]