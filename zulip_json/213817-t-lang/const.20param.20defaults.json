[
    {
        "content": "<p>the <code>const_generics_defaults</code> feature is basically working impl wise- it lets you write <code>struct Foo&lt;const N: usize = 2, const M: usize = N&gt;</code> or <code>struct Foo&lt;const N: usize = { usize::MAX - 1 }&gt;</code> or <code>struct Foo&lt;T = u32, const N: usize = 12&gt;</code> etc. It would be nice to stabilize this but it seems like there hasn't been any lang team input on it yet (no accepted RFC) Is writing up an RFC and getting it accepted the right way to proceed here?</p>",
        "id": 246280463,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626469912
    },
    {
        "content": "<p>does this resolve the syntactic concerns WRT ordering type parameters and const parameters? or does this feature just pass on the issue of allowing type parameter defaults to coexist with const parameters</p>",
        "id": 246282474,
        "sender_full_name": "bstrie",
        "timestamp": 1626470868
    },
    {
        "content": "<p>the current implementation removes the orderign restriction on consts and types allowign them to be intermixed so it's <br>\n&lt;lifetimes, consts and types, const and type defaults&gt;</p>",
        "id": 246283319,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626471363
    },
    {
        "content": "<p>(still not sure how to proceed here :) )</p>",
        "id": 246517679,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626729970
    },
    {
        "content": "<p>how big would the RFC be? would it just be discussing the syntactic ordering restrictions? otherwise the design seems pretty straightforwardly self-evident</p>",
        "id": 246517790,
        "sender_full_name": "bstrie",
        "timestamp": 1626730061
    },
    {
        "content": "<p>i think it would have to cover the ordering restrictions + future compat implications of not allowing generic constants for defaults</p>",
        "id": 246518711,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626730584
    },
    {
        "content": "<p>I guess it would be a pretty short RFC</p>",
        "id": 246518765,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626730631
    },
    {
        "content": "<p>but also, are there any alternatives, other than \"just don't support this\"? I don't recall what the original objection to allowing intermixed const and type parameters was in whatever RFC first outlined them, but I can't think of any reason not to allow them to intermix other than that we don't allow lifetime parameters to intermix, but that's not an especially strong reason</p>",
        "id": 246519727,
        "sender_full_name": "bstrie",
        "timestamp": 1626731266
    },
    {
        "content": "<p>im not sure why the restriction was there originally either</p>",
        "id": 246520144,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626731545
    },
    {
        "content": "<p>i suppose an alternative would be <code>&lt;Lifetimes, Types, Consts, TypeDefaults, ConstDefaults&gt;</code></p>",
        "id": 246520160,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626731563
    },
    {
        "content": "<p>but then you couldnt have a type default which includes a defaulted const param</p>",
        "id": 246520171,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626731576
    },
    {
        "content": "<p>yeah looking at the original RFC comments I don't see any objections raised, especially not once the interaction with default arguments was broached. I'm not on the lang team but maybe just... open a stabilization PR and see what they think? <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 246520571,
        "sender_full_name": "bstrie",
        "timestamp": 1626731887
    },
    {
        "content": "<p>xd</p>",
        "id": 246520781,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626732020
    },
    {
        "content": "<p>just yolo a stabilisation PR no problem okay xD</p>",
        "id": 246520821,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626732038
    },
    {
        "content": "<p>I guess that is a pretty good way of figuring out whether they want to stabilise it lol <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 246520847,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626732061
    },
    {
        "content": "<p>I think this at least warrants a stabilization report that covers everything that was said here and in the original RFC thread</p>",
        "id": 246524009,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1626734252
    },
    {
        "content": "<p>but a full-blown RFC might not be needed</p>",
        "id": 246524016,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1626734261
    },
    {
        "content": "<p>I'm not sure what you're referring to with \"original RFC thread\"</p>",
        "id": 246525670,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626735489
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rfcs/pull/2000\">https://github.com/rust-lang/rfcs/pull/2000</a></p>",
        "id": 246526662,
        "sender_full_name": "bstrie",
        "timestamp": 1626736242
    },
    {
        "content": "<p>One thing that comes to mind here is that type parameter defaults often don't do what people think they would -- see all the problems with the state parameter on <code>HashMap</code>.</p>\n<p>Are all those confusions going to happen with const parameter defaults too?</p>",
        "id": 246631692,
        "sender_full_name": "scottmcm",
        "timestamp": 1626806328
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/213817-t-lang/topic/const.20param.20defaults/near/246631692\">said</a>:</p>\n<blockquote>\n<p>One thing that comes to mind here is that type parameter defaults often don't do what people think they would -- see all the problems with the state parameter on <code>HashMap</code>.</p>\n<p>Are all those confusions going to happen with const parameter defaults too?</p>\n</blockquote>\n<p>what are the problems with the state parameter you're thinking of?</p>",
        "id": 246648663,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626814694
    },
    {
        "content": "<p>possibly it's referring to how type inference currently doesn't consider default parameters at all. Consider the following two lines, where the first is an error and the second isn't:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">HashMap</span>::<span class=\"n\">from_iter</span><span class=\"p\">([(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)]);</span><span class=\"w\"> </span><span class=\"c1\">// fail</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">foo</span>: <span class=\"nc\">HashMap</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">HashMap</span>::<span class=\"n\">from_iter</span><span class=\"p\">([(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)]);</span><span class=\"w\"> </span><span class=\"c1\">// ok</span>\n</code></pre></div>\n<p>The error message is \"cannot infer type for type parameter <code>S</code> declared on the struct <code>HashMap</code>\". Since it knows that it has a hashmap, you'd think it would be capable of simply substituting the default parameter for <code>S</code>, but it doesn't. I'm not sure why default parameters are this way, but it would be nice to see it fixed eventually.</p>",
        "id": 246656949,
        "sender_full_name": "bstrie",
        "timestamp": 1626818626
    },
    {
        "content": "<p>ah yeah i think that's probably disallowed for the same reason <code>fn foo&lt;T = u32&gt;</code> is disallowed</p>",
        "id": 246658402,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626819756
    },
    {
        "content": "<p>is there an RFC or tracking issue for making this possible? (default types in functions)</p>",
        "id": 246658854,
        "sender_full_name": "bstrie",
        "timestamp": 1626820149
    },
    {
        "content": "<p>forgot to hit enter...:</p>\n<p>cg defaults do have the same inference error for <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=df7d9421f50b6a48bcfc699024dbb3f6\">this kind of code</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">arg</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">Self</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">//use std::iter::FromIterator;</span>\n<span class=\"w\">    </span><span class=\"c1\">//let foo = std::collections::HashMap::from_iter([(1, 2)]);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">foo</span>: <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Foo</span>::<span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// fine</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Foo</span>::<span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// type annotations needed</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 246659076,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626820324
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256342\">bstrie</span> <a href=\"#narrow/stream/213817-t-lang/topic/const.20param.20defaults/near/246658854\">said</a>:</p>\n<blockquote>\n<p>is there an RFC or tracking issue for making this possible? (default types in functions)</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/issues/36887\">#36887</a></p>",
        "id": 246659103,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626820360
    },
    {
        "content": "<p>more of a tracking issue for the future incompat lint</p>",
        "id": 246659116,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626820370
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"326176\">Boxy [she/her]</span> <a href=\"#narrow/stream/213817-t-lang/topic/const.20param.20defaults/near/246648663\">said</a>:</p>\n<blockquote>\n<p>what are the problems with the state parameter you're thinking of?</p>\n</blockquote>\n<p>The ones <span class=\"user-mention\" data-user-id=\"256342\">@bstrie</span> mentioned.  <code>HashSet::from_iter(&amp;vec)</code> doesn't work but <code>HashSet::&lt;_&gt;::from_iter(&amp;vec)</code> does, to use an example I saw asked earlier today on a different forum.</p>\n<p>I could easily imagine that something like <code>SmallVec&lt;T, const N: usize = 10&gt;</code> would hit <em>exactly</em> that problem.</p>",
        "id": 246659163,
        "sender_full_name": "scottmcm",
        "timestamp": 1626820414
    },
    {
        "content": "<p>Yeah it probably would</p>",
        "id": 246659179,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626820428
    },
    {
        "content": "<p>I think it would be a bit weird for cg defaults to work differnt here than type defaults though so i'm not sure if this is something easily fixable</p>",
        "id": 246659266,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626820478
    },
    {
        "content": "<p>I definitely think we should have these work as similarly as possible, yeah.</p>\n<p>Especially given the conversation in some other thread about potentially treating <code>const N: usize</code> like <code>T: WithConst&lt;usize&gt;</code> internally to let every \"be\" a type.</p>",
        "id": 246659802,
        "sender_full_name": "scottmcm",
        "timestamp": 1626820952
    }
]