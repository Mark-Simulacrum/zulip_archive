[
    {
        "content": "<p>Today's stream meeting is making me think that it might be cool to allow <code>trait Iterator { ... }</code> to turn into <code>trait Iterator: LendingIterator { ... }</code> somehow, rather than using blanket impls, if it could be done so that all the existing <code>impl Iterator for ... {</code>s that already exist continue to work.  That way all the existing combinators that are fine on lending iterators could just move down, and we wouldn't need another one for the same thing.</p>\n<p>That would presumably mean letting overrides apply to more than just the specific mentioned trait, if there's a supertrait (subtrait?  I never remember what the direction here is).  We could talk about extra crate-based or privacy-based restrictions on that to avoid \"fragile base class\"-style problems...</p>\n<p>(And a more \"out there\" proposal: we could even change <code>Option&lt;Self::Item&gt;</code> to be an associated type that defaults to that, which would let people make it <code>Result&lt;Self::Item, Error&gt;</code> if they wanted -- then the combinators would just work on <code>impl Try</code> instead of <code>Option</code> explicitly...)</p>",
        "id": 208124116,
        "sender_full_name": "scottmcm",
        "timestamp": 1598463861
    }
]