[
    {
        "content": "<p>If you have <code>deny(unsafe_code)</code> on a module, but you want to have a single unmangled function within it, then <code>no_mangle</code> on that function requires also <code>allow(unsafe_code)</code> on that function. However, because the allow lint applies to the <em>entire</em> function contents, not just the one usage of the attribute, you're now allowing in potentially quite a bit more unsafe code than you intended.</p>\n<p>I don't really have a suggested fix here, I just encountered this for the first time right now and thought it was something worth pondering.</p>",
        "id": 263106464,
        "sender_full_name": "Lokathor",
        "timestamp": 1638254096
    },
    {
        "content": "<p>I can see two possible paths towards a solution there.</p>",
        "id": 263106680,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1638254392
    },
    {
        "content": "<p>1) Support more narrowly scoping<code>allow</code> around an attribute without the thing the attribute is attached to.</p>",
        "id": 263106729,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1638254424
    },
    {
        "content": "<p>2) Support separating the attribute, such as <code>#[no_mangle] pub use name_that_will_be_mangled as unmangled_name;</code></p>",
        "id": 263106740,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1638254460
    },
    {
        "content": "<p>3) <code>#[unsafe_no_mangle]</code> which works within <code>deny(unsafe_code)</code> but not <code>forbid(unsafe_code)</code></p>",
        "id": 263107119,
        "sender_full_name": "Lokathor",
        "timestamp": 1638254915
    },
    {
        "content": "<p>4) write the unmangled function to be just a single call to a mangled function without an allow attribute</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[no_mangle]</span><span class=\"w\"></span>\n<span class=\"cp\">#[allow(unsafe_code)]</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">main_</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main_</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"c1\">// actual program here</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 263107135,
        "sender_full_name": "Lokathor",
        "timestamp": 1638254973
    },
    {
        "content": "<p>For (4) I think you might want <code>#[inline(always)]</code> but sure, that seems reasonable.</p>",
        "id": 263107264,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1638255139
    },
    {
        "content": "<p>For (3) I don't think we want a way to bust out of <code>deny(unsafe_code)</code> without writing <code>allow(unsafe_code)</code>.</p>",
        "id": 263107274,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1638255169
    },
    {
        "content": "<p>yeah, my thought was that by putting the word \"unsafe\" still in the attribute name it'd still be visible to people, and greppable</p>",
        "id": 263107457,
        "sender_full_name": "Lokathor",
        "timestamp": 1638255428
    },
    {
        "content": "<p>6) Consider <code>#[allow(unsafe_code(no_mangle))]</code> being an allowed form (bikeshed the exact way you write it down)</p>",
        "id": 263107621,
        "sender_full_name": "Lokathor",
        "timestamp": 1638255613
    },
    {
        "content": "<p>Your (6) is roughly my (1).</p>",
        "id": 263107837,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1638255886
    },
    {
        "content": "<p>(I think I'd spell it roughly <code>#[bikeshed(allow(unsafe_code), no_mangle)]</code>, where <code>bikeshed</code> evokes \"scope\" and \"attr\".)</p>",
        "id": 263107914,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1638255971
    },
    {
        "content": "<p>(In a spirit vaguely similar to <code>cfg_attr</code>.)</p>",
        "id": 263107922,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1638255985
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[allow_attr(unsafe_code, no_mangle)]</span><span class=\"w\"></span>\n</code></pre></div>\n<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> </p>\n<p>There is always the option of writing:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[allow(unsafe_code)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[no_mangle]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[deny(unsafe_code)]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// …</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<ul>\n<li>(But I'll admit that the rightward drift ain't nice, and that a macro may be a bit overkill for this. But FWIW, <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=7123bc9e5a2b2edc6dff66ef7663c067\">here is a macro</a> one could use with <a href=\"https://docs.rs/macro_rules_attribute\"><code>#[apply(allowed_unsafe_no_mangle!)]</code></a>).</li>\n</ul>\n<p>Which now makes me think of:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[allow(unsafe_code)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[no_mangle]</span><span class=\"w\"></span>\n<span class=\"cp\">#[deny(unsafe_code)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// …</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>That one seems like it would be the nicer way to achieve this, although I could imagine it being hard to implement in practice?</p>",
        "id": 263137572,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1638275789
    }
]