[
    {
        "content": "<p>are inclusive range patterns intended to be stable? I ask because exclusive range patterns are unstable, and inclusive range patterns, while accepted on the stable compiler, don't actually seem to work:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"o\">..=</span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"o\">..=</span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"test\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\">// does not print</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 229964062,
        "sender_full_name": "bstrie",
        "timestamp": 1615515538
    },
    {
        "content": "<p>replacing <code>0..=4</code> with <code>..</code> works as expected, and replacing it with <code>0..5</code> gives a compiler error about the stability of exclusive range patterns</p>",
        "id": 229964159,
        "sender_full_name": "bstrie",
        "timestamp": 1615515604
    },
    {
        "content": "<p>using <code>0..5</code> and enabling the feature flag causes the code to compile but not reach the print statement, which suggests to me that this is an accidental exposure of an unimplemented feature</p>",
        "id": 229964392,
        "sender_full_name": "bstrie",
        "timestamp": 1615515779
    },
    {
        "content": "<p>The pattern <code>[0..=4]</code> matches a single-element slice with a value of 0 to 4.  A pattern of <code>[..]</code> matches a slice of any length.  The two are quite different.</p>",
        "id": 229966792,
        "sender_full_name": "Eric Huss",
        "timestamp": 1615517667
    },
    {
        "content": "<p>ah, curious. I suppose that suggests that something like <code>if let [a @ ..2, b @ 2..]</code> will never be supported as a way of splitting a slice?</p>",
        "id": 229999069,
        "sender_full_name": "bstrie",
        "timestamp": 1615541369
    },
    {
        "content": "<p>Yea, I don't think patterns can be used to implement <code>split_at</code>.  I don't recall any discussion about that.</p>\n<p>You can do something like <code>[first, second, rest @ ..]</code>, if you want just the first two elements instead of a slice, but that isn't quite the same.</p>",
        "id": 230047786,
        "sender_full_name": "Eric Huss",
        "timestamp": 1615563042
    }
]