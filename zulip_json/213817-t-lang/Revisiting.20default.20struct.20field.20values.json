[
    {
        "content": "<p>I've been against this in the past, but threads like <a href=\"https://internals.rust-lang.org/t/pre-pre-rfc-syntactic-sugar-for-default-default/13234?u=scottmcm\">https://internals.rust-lang.org/t/pre-pre-rfc-syntactic-sugar-for-default-default/13234?u=scottmcm</a> have been changing my opinions about it.</p>\n<p>Looks like there was some potential interest in the past, but the RFC was postponed for the 2017 impl period: <a href=\"https://github.com/rust-lang/rfcs/pull/1806#issuecomment-327922562\">https://github.com/rust-lang/rfcs/pull/1806#issuecomment-327922562</a></p>\n<p>How are people's temperature about that kind of change these days?  I feel like all the <code>const</code> improvements we've had since then help answer some of the things that were previously unknowns.</p>",
        "id": 214240254,
        "sender_full_name": "scottmcm",
        "timestamp": 1603396565
    },
    {
        "content": "<p>I'm not opposed but the <code>..*</code> syntax etc seems unnecessary to me</p>",
        "id": 214240453,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603396660
    },
    {
        "content": "<p>Can you elaborate on the <code>*</code> there, <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>?  Do you mean \"<code>..</code> is sufficient\" or \"<code>Foo { a, b }</code> should always do this\" or something else?</p>",
        "id": 214240976,
        "sender_full_name": "scottmcm",
        "timestamp": 1603396888
    },
    {
        "content": "<p>I meant that I would expect to just write <code>Foo { a, b }</code></p>",
        "id": 214242193,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603397464
    },
    {
        "content": "<p>I like having the <code>..</code> as a mirror to the pattern syntax</p>",
        "id": 214242750,
        "sender_full_name": "cuviper",
        "timestamp": 1603397779
    },
    {
        "content": "<p>having _nothing_ seems like bad style, at least, akin to <code>elided-lifetimes-in-paths</code></p>",
        "id": 214242946,
        "sender_full_name": "cuviper",
        "timestamp": 1603397924
    },
    {
        "content": "<p>I think of it more like default items in traits</p>",
        "id": 214244394,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603398753
    },
    {
        "content": "<p>elided lifetimes in paths feels different, my motivation there was always that seeing <code>-&gt; Foo&lt;'_&gt;</code> (and similarly in other places) tells me that this is a value that is tied to the stack frame</p>",
        "id": 214244689,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603398911
    },
    {
        "content": "<p>it seems important to me to indicate that the size of the thing I created is more than just <code>a</code>+<code>b</code></p>",
        "id": 214245063,
        "sender_full_name": "cuviper",
        "timestamp": 1603399100
    },
    {
        "content": "<p>I'm not sure if \"size\" is what I care about, but I agree it seems important to indicate there's \"more to it\" -- at least, in general. It would seem pretty surprising to me that e.g. <code>Foo { }</code> can create a struct with fields</p>",
        "id": 214248912,
        "sender_full_name": "simulacrum",
        "timestamp": 1603401169
    },
    {
        "content": "<p>Another note is that presumably even the sugar would still require all fields to be public/visible which would be even more confusing diagnostic wise if we can't even point at something that is standing in place of those fields, I imagine</p>",
        "id": 214249118,
        "sender_full_name": "simulacrum",
        "timestamp": 1603401311
    },
    {
        "content": "<p>I imagine we would point at the struct name and say \"struct has private fields\" or something</p>",
        "id": 214250971,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603402384
    },
    {
        "content": "<p>I guess it'd be good to discuss the use cases, I was imagining it was avoiding verbosity and (maybe) some amount of forward compatible evolution -- I guess it doesn't achieve that because of pattern destructuring</p>",
        "id": 214251006,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603402416
    },
    {
        "content": "<p>Yeah, I think the pattern precedent controls here.  If the difference of <code>Foo { a, b }</code> vs <code>Foo { a, b, .. }</code> is valuable in a pattern, then it implies to me that it's valuable in an expression too.</p>\n<p>(And ideally this would work like patterns already do for <code>non_exhaustive</code> structs: inside the crate you can omit the <code>..</code> when creating it, but if it's an external crate you need to have the <code>..</code> for forward compatibility with field additions.  Though that does need some sort of <code>non_exhaustive(new-fields-will-always-have-defaults)</code> opt-in.)</p>",
        "id": 214260348,
        "sender_full_name": "scottmcm",
        "timestamp": 1603409885
    },
    {
        "content": "<p>i would love a shorthand here but i also wouldn't want to lose the breaking change i get if i add a field to a struct thats typically instantiated in full. really helpful when refactoring. e.g. <code>Foo { a, b, .. }</code> <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>, but <code>Foo { a, b }</code> <span aria-label=\"-1\" class=\"emoji emoji-1f44e\" role=\"img\" title=\"-1\">:-1:</span> (if foo has more than 2 fields).</p>",
        "id": 214263126,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1603413115
    },
    {
        "content": "<p>That makes me think of writing wrappers for things with default parameters in C#, actually.  It's really easy to forget to pass one (or more) of the parameters that I was intending to.  I guess in that case the opt-in to getting the defaults would be suboptimal in many cases where it's actually used, but that's pretty different from how <code>struct</code>s are used, I think.</p>\n<p>But I suppose we could also talk about moving to an opt-out model for it.  <code>Foo { a, b, üö≤üè† }</code>, or whatever.</p>",
        "id": 214269533,
        "sender_full_name": "scottmcm",
        "timestamp": 1603422771
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/213817-t-lang/topic/Revisiting.20default.20struct.20field.20values/near/214269533\">said</a>:</p>\n<blockquote>\n<p><code>Foo { a, b, üö≤üè† }</code></p>\n</blockquote>\n<p><span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 214269909,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603423384
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/Revisiting.20default.20struct.20field.20values/near/214242193\">said</a>:</p>\n<blockquote>\n<p>I meant that I would expect to just write <code>Foo { a, b }</code></p>\n</blockquote>\n<p>In addition to the comment that this would not match the requirement for patterns, I'd also say that it's important to me to have to update anywhere that said \"only initialize a and b\" if there are more fields than just a and b. I should have to acknowledge \"and other things that I don't care about\".</p>",
        "id": 214270569,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603424456
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"209168\">Thom Chiovoloni</span> <a href=\"#narrow/stream/213817-t-lang/topic/Revisiting.20default.20struct.20field.20values/near/214263126\">said</a>:</p>\n<blockquote>\n<p>i would love a shorthand here but i also wouldn't want to lose the breaking change i get if i add a field to a struct thats typically instantiated in full. really helpful when refactoring. e.g. <code>Foo { a, b, .. }</code> <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>, but <code>Foo { a, b }</code> <span aria-label=\"-1\" class=\"emoji emoji-1f44e\" role=\"img\" title=\"-1\">:-1:</span> (if foo has more than 2 fields).</p>\n</blockquote>\n<p>This, precisely. Add a field, let the compiler tell you everywhere that's broken.</p>",
        "id": 214270589,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603424487
    }
]