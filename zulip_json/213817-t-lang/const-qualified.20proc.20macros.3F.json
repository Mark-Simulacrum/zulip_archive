[
    {
        "content": "<p>Has anybody done any thinking on eventually allowing <code>const</code> on the procedural macro functions as a way of telling the compiler that it doesn't need to re-run the macro on every compilation if the input of the macro hasn't changed?</p>",
        "id": 197243042,
        "sender_full_name": "isHavvy",
        "timestamp": 1589270148
    },
    {
        "content": "<p>I was <em>told</em> that if the tokens passed to an invocation match the previous tokens passed it already skips re-running the proc-macro.</p>",
        "id": 197243967,
        "sender_full_name": "Lokathor",
        "timestamp": 1589270659
    },
    {
        "content": "<p>If that's true, that should definitely be stated clearly in documentation. It could also be useful in the sense that a const-qualified proc macro is guaranteed not to talk to the Internet, but that's a minor benefit.</p>",
        "id": 197244760,
        "sender_full_name": "isHavvy",
        "timestamp": 1589271183
    },
    {
        "content": "<blockquote>\n<p>I was told that if the tokens passed to an invocation match the previous tokens passed it already skips re-running the proc-macro.</p>\n</blockquote>",
        "id": 197256944,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1589279394
    },
    {
        "content": "<p>Maybe that's true for rust-analyzer or something like that, but certainly not for rustc.</p>",
        "id": 197257011,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1589279417
    },
    {
        "content": "<p>That I would say is probably \"the goal we're shooting for\" more than the status quo :)</p>",
        "id": 197340496,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589318112
    },
    {
        "content": "<p>but I don't see any reason it wouldn't work with the query system, once we push it back far enough</p>",
        "id": 197340539,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589318122
    }
]