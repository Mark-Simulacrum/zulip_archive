[
    {
        "content": "<p>A <code>const</code> is <em>absolutely required</em> to have been evaluated at compile time. A <code>let</code> might or might not be.</p>\n<p>I once asked on github \"can we get some way to have an assurance that <code>let</code> with a const fn and const args will be compile time evaluated?\" and the answer (i forget who from) was \"No, just use a const if you want that\".</p>\n<p>So if you want to ensure compile time evaluation, you need to use <code>const</code></p>",
        "id": 195784915,
        "sender_full_name": "Lokathor",
        "timestamp": 1588204513
    },
    {
        "content": "<p>Why not use both in tandem?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">X</span>: <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 195837528,
        "sender_full_name": "Sebastian Malton",
        "timestamp": 1588253031
    },
    {
        "content": "<p>I think const generics will eventually provide something here. For example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">ConstVal</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">V</span>: <span class=\"nc\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">PhantomData</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">V</span>:<span class=\"nc\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">ConstVal</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">V</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">VALUE</span>: <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>Then you can just <code>ConstVal&lt;i32, {E}&gt;::VALUE</code> to get a const value of E.</p>",
        "id": 195840866,
        "sender_full_name": "Charles Lew",
        "timestamp": 1588254521
    },
    {
        "content": "<p>There's occasional talk of a <code>const { &lt;expr&gt; }</code> syntax, e.g. as an alternative to expanding the scope of promotion. If introduced, that would be both more convenient to use and easier to fully implement and stabilize than using const generics.</p>",
        "id": 195848628,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1588257640
    },
    {
        "content": "<p>(Note that the topic was written in the context of the edition meeting earlier this week that was posted on youtube where this was pondered by several of the lang team.)</p>\n<p>Sebastian, if you have a const you often don't need to also bind as a let. You can just pass the const to a function, or whatever it was you were going to do.</p>\n<p>Personally, I don't think it's a big deal, i've come to terms with just writing consts into function bodies all the time when i need to ensure that they're consts. It's like 1% annoying to learn about and then you get over it.</p>",
        "id": 195874279,
        "sender_full_name": "Lokathor",
        "timestamp": 1588268029
    },
    {
        "content": "<p>I have (very-occasionally) wanted to be able to make an arm that's <code>0..const{N-1}</code> where having to make a new <code>const</code> item is a pain, especially if <code>N</code> is based on a generic argument somehow</p>",
        "id": 195874558,
        "sender_full_name": "scottmcm",
        "timestamp": 1588268170
    },
    {
        "content": "<p>Hmm, I think you can do a horrible hack to force a let to be compile-time, or error if not:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">macro_rules</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">must_be_const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$e</span>:<span class=\"nc\">expr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"cp\">$e</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">must_be_const</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// must_be_const!(4_i32.leading_zeros()); // FAILS</span>\n<span class=\"w\">    </span><span class=\"n\">must_be_const</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=99083194dcf153af535d359ce823f47a\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=99083194dcf153af535d359ce823f47a\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=99083194dcf153af535d359ce823f47a</a></p>",
        "id": 195875137,
        "sender_full_name": "scottmcm",
        "timestamp": 1588268422
    },
    {
        "content": "<p>That's absolutely an abuse of RSP, though, and I'm kinda sad that it works...</p>",
        "id": 195875230,
        "sender_full_name": "scottmcm",
        "timestamp": 1588268470
    },
    {
        "content": "<p>This forces the expression to be promotable, which is a small subset of const. In particular it excludes all const fn calls except a few magic ones that were white listed for backwards compatibility</p>",
        "id": 195875326,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1588268509
    },
    {
        "content": "<p>(what's a promotable const? i hear it a lot and i don't know what it means)</p>",
        "id": 195875494,
        "sender_full_name": "Lokathor",
        "timestamp": 1588268577
    },
    {
        "content": "<p>The only decent write up I know of is <a href=\"https://github.com/rust-lang/const-eval/blob/master/promotion.md\" title=\"https://github.com/rust-lang/const-eval/blob/master/promotion.md\">https://github.com/rust-lang/const-eval/blob/master/promotion.md</a></p>",
        "id": 195876525,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1588269071
    },
    {
        "content": "<p>Oh, okay.</p>\n<p>Also i'd say that the only pain point to having to write <code>const x = expr</code> compared to <code>let x = expr</code> is that you have to give a type to all consts. I don't know how crazy it would be to just not require an explicit type on private consts.</p>",
        "id": 195876973,
        "sender_full_name": "Lokathor",
        "timestamp": 1588269288
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/213817-t-lang/topic/.22Why.20use.20.60const.60.20over.20.60let.60.3F.22/near/195874279\" title=\"#narrow/stream/213817-t-lang/topic/.22Why.20use.20.60const.60.20over.20.60let.60.3F.22/near/195874279\">said</a>:</p>\n<blockquote>\n<p>Sebastian, if you have a const you often don't need to also bind as a let. You can just pass the const to a function, or whatever it was you were going to do.</p>\n</blockquote>\n<p>Ah I didn't know it came from the lang meeting. I thought you wanted a global let, that was guaranteed to be evaluated at compile time.</p>",
        "id": 195884719,
        "sender_full_name": "Sebastian Malton",
        "timestamp": 1588272628
    },
    {
        "content": "<p>I think that there's certainly a possibility of removing explicit type annotations on some set of private/inner/etc items.  I've wanted it for random things like local _functions_ sometimes too.  So my not-thoroughly-considered inclination here is that it shouldn't just be for consts, but should be a tweak to the general item rule or some opt-in to make things more structural or macro-like or something.</p>\n<p>Like we could have <code>☃ const N = 100;</code> or <code>☃ fn foo(a, b) { (a + b).sqrt() }</code> that works more like a macro than generics or type inference.</p>\n<p>(Using <code>☃</code> for obvious strawman syntax -- a real one could be something like <code>macro</code>, but I'll avoid that for now)</p>",
        "id": 195887304,
        "sender_full_name": "scottmcm",
        "timestamp": 1588273840
    },
    {
        "content": "<p>I favor <code>const { expr }</code> fwiw</p>",
        "id": 195893805,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588276969
    },
    {
        "content": "<p><code>let x = const { 100 };</code> seems ok?</p>",
        "id": 195893842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588276994
    },
    {
        "content": "<p>anyway I didn't really read through this thread in full so I'll be quiet now :)</p>",
        "id": 195893979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588277066
    },
    {
        "content": "<p>That seems like a nice way to simplify the promotable rules as well, if we wanted to in future -- <code>&amp;const { ... }</code> would always be promotable.</p>",
        "id": 195898894,
        "sender_full_name": "scottmcm",
        "timestamp": 1588279558
    },
    {
        "content": "<p>so about once a month <code>const { ... }</code> comes up, and more and more people say they like the idea</p>",
        "id": 195904250,
        "sender_full_name": "RalfJ",
        "timestamp": 1588282195
    },
    {
        "content": "<p>anyone volunteering for writing an RFC? :D</p>",
        "id": 195904304,
        "sender_full_name": "RalfJ",
        "timestamp": 1588282206
    },
    {
        "content": "<p>(IIRC <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> once said they had that planned, not sure how far that got)</p>",
        "id": 195904325,
        "sender_full_name": "RalfJ",
        "timestamp": 1588282219
    },
    {
        "content": "<p>I would be happy to do it if <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> is too busy.</p>",
        "id": 195905330,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1588282764
    },
    {
        "content": "<p>I was thinking the same, <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> :D</p>\n<p>I'd be happy to participate, <span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span>.  Apparently we're nearing 2 years since <a href=\"https://internals.rust-lang.org/t/quick-thought-const-blocks/7803?u=scottmcm\" title=\"https://internals.rust-lang.org/t/quick-thought-const-blocks/7803?u=scottmcm\">my post about it</a>.  (Not to say that was the first mention.  I'm sure others thought of it earlier.)</p>",
        "id": 195913203,
        "sender_full_name": "scottmcm",
        "timestamp": 1588287844
    },
    {
        "content": "<p>Ah! I was wondering who first proposed this. Though like you say, this has probably been invented independently several times</p>",
        "id": 195913743,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1588288261
    },
    {
        "content": "<p>I envision <code>const { ... }</code> as an expression is equivalent to <code>{ const PRIVATE: InferredType = { ... }; PRIVATE }</code>. I think it is worthwhile to extend the grammar to make it valid in patterns as you mention. I would need to look at the pattern grammar again to say more.</p>",
        "id": 195914144,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1588288553
    },
    {
        "content": "<p>I would also allow <code>const {}</code> in all const contexts out of the box since we <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=b9ffa0d8552768190eff06ac80b6ad1d\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=b9ffa0d8552768190eff06ac80b6ad1d\">currently allow</a> <code>const</code> declarations in them.</p>",
        "id": 195914357,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1588288701
    },
    {
        "content": "<p>(this is centril's question number 2)</p>",
        "id": 195914379,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1588288726
    },
    {
        "content": "<p>Otherwise this is pretty much what I had in mind.</p>",
        "id": 195914705,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1588289019
    },
    {
        "content": "<p>Oh, and I would call these anonymous consts or anonymous const expressions to emphasize that they have the same semantics as <code>{ const X = expr; X }</code></p>",
        "id": 195914875,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1588289155
    },
    {
        "content": "<p>Though I think \"constant expression\" might already be in use?</p>",
        "id": 195914951,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1588289200
    },
    {
        "content": "<p><del>Or, equivalently, <code>const fn private() -&gt; Inferredtype { ... } private()</code>, yeah.</del>  EDIT: Not quite; see 3 posts down.</p>\n<p>Might be good enough just to say that the inside of said blocks is a \"const context\" following the same rules as other such places (like array lengths).  Since I don't think we'd want to actually implement this as a desugar to an item.</p>\n<p>While I <em>want</em> it in patterns, I might actually leave that for a different PR, since the expression form is a completely separable concern for the pattern form.  And now that we have both <code>const fn</code> and <code>async fn</code>, but only <code>async{}</code> and not <code>const{}</code>, it feels like the <code>const{}</code> is a much more obviously-correct extension.</p>",
        "id": 195914960,
        "sender_full_name": "scottmcm",
        "timestamp": 1588289206
    },
    {
        "content": "<p>In any case, we will need it in <code>const fn</code>, since those don't always run at compile time.</p>",
        "id": 195915134,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1588289322
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">ecstatic-morse</span> <a href=\"#narrow/stream/213817-t-lang/topic/.22Why.20use.20.60const.60.20over.20.60let.60.3F.22/near/195914357\" title=\"#narrow/stream/213817-t-lang/topic/.22Why.20use.20.60const.60.20over.20.60let.60.3F.22/near/195914357\">said</a>:</p>\n<blockquote>\n<p>I would also allow <code>const {}</code> in all const contexts out of the box since we <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=b9ffa0d8552768190eff06ac80b6ad1d\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=b9ffa0d8552768190eff06ac80b6ad1d\">currently allow</a> <code>const</code> declarations in them.</p>\n</blockquote>\n<p>Probably allowed syntactically, but warn-by-default-linted, so <code>const { const { foo() } }</code> is linted, same as <code>unsafe { unsafe { foo() } }</code>.</p>",
        "id": 195915145,
        "sender_full_name": "scottmcm",
        "timestamp": 1588289333
    },
    {
        "content": "<p>The <code>const fn</code> desugaring isn't quite equivalent though, since it would make an anonymous const ineligible for promotion.</p>",
        "id": 195915282,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1588289445
    },
    {
        "content": "<p>That actually might be worth discussing. Do we want people to write <code>&amp;const { u32::max_value() }</code> or <code>const { &amp;u32::max_value() }</code> to get a <code>&amp;'static u32</code>? I suspect we want the latter?</p>",
        "id": 195915439,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1588289576
    },
    {
        "content": "<p>Oh, thank you past-self for putting a nice example use for the const pattern in <a href=\"https://internals.rust-lang.org/t/quick-thought-const-blocks/7803/10?u=scottmcm\" title=\"https://internals.rust-lang.org/t/quick-thought-const-blocks/7803/10?u=scottmcm\">that thread</a>: <code>match x { const{'z' as i32} =&gt; ...</code></p>",
        "id": 195915442,
        "sender_full_name": "scottmcm",
        "timestamp": 1588289579
    },
    {
        "content": "<p>But it seems like part of the motivation for <code>const {}</code> is to make things eligible for promotion in contexts besides rvalue static promotion (e.g. array initalizers), so I think <code>const {}</code> should be eligible for promotion.</p>",
        "id": 195915605,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1588289698
    },
    {
        "content": "<p>The latter would error under current rules, right?</p>",
        "id": 195915621,
        "sender_full_name": "scottmcm",
        "timestamp": 1588289710
    },
    {
        "content": "<p>I think I'd just say that const blocks (themselves) are always eligible for promotion, yeah, not that their bodies get any special rules different from the current ones in a const context</p>",
        "id": 195915686,
        "sender_full_name": "scottmcm",
        "timestamp": 1588289763
    },
    {
        "content": "<p>No. <code>const X: &amp;u32 = &amp;u32::max_value();</code> is legal today.</p>",
        "id": 195915697,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1588289770
    },
    {
        "content": "<p>Is that because it's in the white-list, or is everything in const context always promotable?</p>",
        "id": 195915985,
        "sender_full_name": "scottmcm",
        "timestamp": 1588290030
    },
    {
        "content": "<p>Because aesthetically I don't like <code>&amp;const { }</code> at all, since it looks way too much like <code>&amp;mut</code></p>",
        "id": 195916022,
        "sender_full_name": "scottmcm",
        "timestamp": 1588290068
    },
    {
        "content": "<p>That actually doesn't rely on promotion at all. Everything at the \"top-level\" of a const initializer has the static lifetime.</p>",
        "id": 195916027,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1588290077
    },
    {
        "content": "<p>Oh, of course.  That makes sense, same as how all elided lifetimes in <code>const</code>s are <code>'static</code> because of course they are</p>",
        "id": 195916113,
        "sender_full_name": "scottmcm",
        "timestamp": 1588290131
    },
    {
        "content": "<p><del>So great, sounds like <code>const{}</code> doesn't need to ever be promotable, since they can just \"move the <code>&amp;</code> inside\".</del></p>\n<p>Well, actually, what does <code>&amp;(1 + const{ i32::min_value() })</code> do?  Is it promotable?</p>",
        "id": 195916222,
        "sender_full_name": "scottmcm",
        "timestamp": 1588290237
    },
    {
        "content": "<p>It does. One of the motivations is to allow <code>[const { Vec::new() }; 42]</code>.</p>",
        "id": 195916304,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1588290282
    },
    {
        "content": "<p>So I guess the RFC _would_ add the \"<code>const{...}</code> is always promotable\" rule, but there'd be a non-normative note that clippy might want to lint against <code>&amp;const{...}</code>?</p>",
        "id": 195916418,
        "sender_full_name": "scottmcm",
        "timestamp": 1588290390
    },
    {
        "content": "<p>I think that's exactly right.</p>",
        "id": 195916442,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1588290410
    },
    {
        "content": "<p>Promotion appears to work for <code>&amp;(1+1)</code>, which is somewhat unexpected?</p>",
        "id": 195916479,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1588290450
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">ecstatic-morse</span> <a href=\"#narrow/stream/213817-t-lang/topic/.22Why.20use.20.60const.60.20over.20.60let.60.3F.22/near/195916304\" title=\"#narrow/stream/213817-t-lang/topic/.22Why.20use.20.60const.60.20over.20.60let.60.3F.22/near/195916304\">said</a>:</p>\n<blockquote>\n<p><code>[const { Vec::new() }; 42]</code></p>\n</blockquote>\n<p>Talk me through what you're thinking between <code>[const { Vec::new() }; 42]</code> and <code>const { [Vec::new(); 42] }</code>, please.  I'm not sure what rule you're invisioning in that post.</p>",
        "id": 195916536,
        "sender_full_name": "scottmcm",
        "timestamp": 1588290487
    },
    {
        "content": "<p>I don't have a clue what the rules for promotion are <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 195916565,
        "sender_full_name": "scottmcm",
        "timestamp": 1588290522
    },
    {
        "content": "<p>As an aside, the original rvalue static promotion RFC/implementation was overbroad IMO, we ended up promoting a lot of stuff that was not explicitly mentioned. <code>wg-const-eval</code> (especially <span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span>) has been trying to limit the use of promotion for this reason.</p>",
        "id": 195916616,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1588290585
    },
    {
        "content": "<p>Lemme find some links</p>",
        "id": 195916696,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1588290623
    },
    {
        "content": "<p>I do think this would let us move towards a potentially simpler rvalue-static-promotion rule over an edition boundary.  Like saying that only literals and <code>const{}</code>s are promoted.</p>",
        "id": 195916699,
        "sender_full_name": "scottmcm",
        "timestamp": 1588290625
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/const-eval/blob/master/promotion.md\" title=\"https://github.com/rust-lang/const-eval/blob/master/promotion.md\">Promotability rules</a></p>",
        "id": 195916703,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1588290633
    },
    {
        "content": "<p>And that the future-change lint could have a cargo-fix that changes complicated promotion situations to <code>const{}</code> blocks so the migration is easy</p>",
        "id": 195916818,
        "sender_full_name": "scottmcm",
        "timestamp": 1588290773
    },
    {
        "content": "<blockquote>\n<p>Talk me through what you're thinking between <code>[const { Vec::new() }; 42]</code> and <code>const { [Vec::new(); 42] }</code>, please.  I'm not sure what rule you're invisioning in that post.</p>\n</blockquote>\n<p>Ah, I hadn't thought of putting the braces outside. Because the part to the right of the semicolon is already a const context, I believe these two are functionally equivalent? It's just a matter of style.</p>",
        "id": 195916853,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1588290810
    },
    {
        "content": "<p>That's because we promote function calls inside a constant. This is <a href=\"https://github.com/rust-lang/const-eval/blob/master/promotion.md#promotion-contexts-inside-const-and-static\" title=\"https://github.com/rust-lang/const-eval/blob/master/promotion.md#promotion-contexts-inside-const-and-static\">the relevant section</a>.</p>",
        "id": 195916955,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1588290890
    },
    {
        "content": "<p>Ah, the extra 2203 rules mentioned in your earlier link clear that up</p>",
        "id": 195916982,
        "sender_full_name": "scottmcm",
        "timestamp": 1588290912
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/213817-t-lang/topic/.22Why.20use.20.60const.60.20over.20.60let.60.3F.22/near/195916699\" title=\"#narrow/stream/213817-t-lang/topic/.22Why.20use.20.60const.60.20over.20.60let.60.3F.22/near/195916699\">said</a>:</p>\n<blockquote>\n<p>I do think this would let us move towards a potentially simpler rvalue-static-promotion rule over an edition boundary.  Like saying that only literals and <code>const{}</code>s are promoted.</p>\n</blockquote>\n<p>Very much in agreement with this BTW.</p>",
        "id": 195916990,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1588290931
    },
    {
        "content": "<p>That's a great document.  I thought I wanted to simplify things before, but having skimmed through it now I <em>know</em> i do <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 195917094,
        "sender_full_name": "scottmcm",
        "timestamp": 1588291023
    },
    {
        "content": "<p>Yeah, promotion is really hard to reason about. <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=3d4b2a0825edc53ade0e2f0a91c56144\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=3d4b2a0825edc53ade0e2f0a91c56144\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=3d4b2a0825edc53ade0e2f0a91c56144</a></p>",
        "id": 195917204,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1588291130
    },
    {
        "content": "<p>That's actually called out specifically as okay by the promotion rules, although I think they were partly trying to document behavior that had accidentally been stabilized. As long as it doesn't happen in release mode it's fine.</p>",
        "id": 195917362,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1588291236
    },
    {
        "content": "<p>You can see I am rediscovering the edge cases as I go, and I wrote a not-insignificant portion of that document XD</p>",
        "id": 195917397,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1588291267
    },
    {
        "content": "<p>Probably too scope-creepy to include in the RFC, but it came to mind so I figured I'd say it:</p>\n<p>What about <code>static</code> blocks?  That'd let it produce a <em>place</em> instead of a <em>value</em>.</p>",
        "id": 195917681,
        "sender_full_name": "scottmcm",
        "timestamp": 1588291522
    },
    {
        "content": "<p>Hmm, probably the linking monomorphization questions about that would be too scary to want to consider.</p>",
        "id": 195917788,
        "sender_full_name": "scottmcm",
        "timestamp": 1588291599
    },
    {
        "content": "<p>I've never needed an anonymous compile-time value that is also guaranteed to reside at a fixed address in memory.</p>",
        "id": 195917961,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1588291765
    },
    {
        "content": "<p>Although it's technically possible I think? I'm just not terribly interested in speccing it out.</p>",
        "id": 195918019,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1588291812
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">per_type_counter</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span>-&gt;<span class=\"kt\">usize</span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">static</span><span class=\"p\">{</span><span class=\"n\">AtomicUsize</span>::<span class=\"n\">new</span><span class=\"p\">()}.</span><span class=\"n\">increment</span><span class=\"p\">(</span><span class=\"k\">enum</span>::<span class=\"n\">SeqCst</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 195918083,
        "sender_full_name": "scottmcm",
        "timestamp": 1588291891
    },
    {
        "content": "<p>But yeah, let's not bother.</p>",
        "id": 195918162,
        "sender_full_name": "scottmcm",
        "timestamp": 1588291936
    },
    {
        "content": "<p>Way too many scary corners for its minimal-at-best value</p>",
        "id": 195918206,
        "sender_full_name": "scottmcm",
        "timestamp": 1588291975
    },
    {
        "content": "<p>Okay, so to summarize, what are things you feel are settled? These are mine:</p>\n<ul>\n<li><code>const {}</code> is a new \"const context\" for purposes of <a href=\"https://doc.rust-lang.org/reference/const_eval.html#const-context\" title=\"https://doc.rust-lang.org/reference/const_eval.html#const-context\">the reference</a></li>\n<li><code>const {}</code> is valid wherever an expression would be. However, if we use it inside a <code>const</code>, <code>static</code>, enum discriminant initializer, or array/repeat expression length we will lint (level TBD) since an extra level of constness should never matter.</li>\n<li><code>const {}</code> behaves the same as <code>{ const X: _ = ...; X };</code>for the purposes of const-checking and promotion. (Explaining the consequences of that last choice will be important, since it also affects const qualification)</li>\n</ul>",
        "id": 195918560,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1588292296
    },
    {
        "content": "<ul>\n<li><code>const { &amp;func() }</code> is preferred to <code>&amp;const { func() }</code>, although that's probably a clippy lint, not a builtin</li>\n</ul>",
        "id": 195918759,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1588292498
    },
    {
        "content": "<p>Unsettled for me are:</p>\n<ul>\n<li>name (I vote for anonymous consts)</li>\n<li><code>const { [ func(); 42 ] }</code> vs <code>[const { func() }; 42]</code>. Are these equivalent? which is preferable?</li>\n<li>Do we also handle patterns in the same RFC or defer (I vote same RFC, they're useful and there's not really any additional concerns)</li>\n</ul>",
        "id": 195918858,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1588292572
    },
    {
        "content": "<p>I think the second form has to be the form.</p>",
        "id": 195918984,
        "sender_full_name": "Lokathor",
        "timestamp": 1588292696
    },
    {
        "content": "<p>You force func() in a const context and get a value, then duplicate that 42 times.</p>",
        "id": 195918995,
        "sender_full_name": "Lokathor",
        "timestamp": 1588292714
    },
    {
        "content": "<p>wait isn't an array init already a const context you said?</p>",
        "id": 195919076,
        "sender_full_name": "Lokathor",
        "timestamp": 1588292767
    },
    {
        "content": "<p>array length is. Array initializers are a \"promotion context\"</p>",
        "id": 195919089,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1588292787
    },
    {
        "content": "<p>(on nightly with the feature flag that is)</p>",
        "id": 195919110,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1588292819
    },
    {
        "content": "<p>ah, then it should be the inner form, yeah. Expressions should always make sense when evaluated innermost to outer (as much as possible), so you need to make it a const context to init the array</p>",
        "id": 195919200,
        "sender_full_name": "Lokathor",
        "timestamp": 1588292900
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=144dcc98d6467d99e647dfe3810f9298\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=144dcc98d6467d99e647dfe3810f9298\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=144dcc98d6467d99e647dfe3810f9298</a></p>",
        "id": 195919230,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1588292932
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> both forms would be valid with the current promotion rules.</p>",
        "id": 195919343,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1588293005
    },
    {
        "content": "<p>oh, hmm.</p>",
        "id": 195919373,
        "sender_full_name": "Lokathor",
        "timestamp": 1588293026
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/213817-t-lang/topic/.22Why.20use.20.60const.60.20over.20.60let.60.3F.22/near/195919200\" title=\"#narrow/stream/213817-t-lang/topic/.22Why.20use.20.60const.60.20over.20.60let.60.3F.22/near/195919200\">said</a>:</p>\n<blockquote>\n<p>ah, then it should be the inner form, yeah. Expressions should always make sense when evaluated innermost to outer (as much as possible), so you need to make it a const context to init the array</p>\n</blockquote>\n<p>I don't think that's necessarily true for effect contexts.  If you replace <code>const</code> with <code>unsafe</code> they're both fine, and it's a style-not-language-definition question which to use</p>",
        "id": 195919974,
        "sender_full_name": "scottmcm",
        "timestamp": 1588293521
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">ecstatic-morse</span> <a href=\"#narrow/stream/213817-t-lang/topic/.22Why.20use.20.60const.60.20over.20.60let.60.3F.22/near/195918858\" title=\"#narrow/stream/213817-t-lang/topic/.22Why.20use.20.60const.60.20over.20.60let.60.3F.22/near/195918858\">said</a>:</p>\n<blockquote>\n<ul>\n<li>name (I vote for anonymous consts)</li>\n</ul>\n</blockquote>\n<p><code>async{}</code> was called \"async blocks\" (<a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2394-async_await.md#async-blocks\" title=\"https://github.com/rust-lang/rfcs/blob/master/text/2394-async_await.md#async-blocks\">https://github.com/rust-lang/rfcs/blob/master/text/2394-async_await.md#async-blocks</a>), so maybe just \"const blocks\".</p>\n<p>\"anonymous consts\" makes me think of that <code>const _: usize = ...;</code> feature.</p>",
        "id": 195920281,
        "sender_full_name": "scottmcm",
        "timestamp": 1588293816
    },
    {
        "content": "<p>Those are called \"unnamed\" constants in the reference, but point taken.</p>",
        "id": 195920407,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1588293934
    },
    {
        "content": "<p>I'll just refer to it as <code>const {}</code> for now and we can have a final bikeshedding vote (either org members or just lang-team members is fine) at some point in the future.</p>",
        "id": 195920633,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1588294147
    },
    {
        "content": "<p>I don't remember if I said I was working on an RFC, but I was working on a prototype PR, which showed many many impl problems with it, which I've started to solve because the problems exist for array lengths, too</p>",
        "id": 195942288,
        "sender_full_name": "oli",
        "timestamp": 1588323322
    },
    {
        "content": "<p>but that shouldn't block an RFC</p>",
        "id": 195942299,
        "sender_full_name": "oli",
        "timestamp": 1588323333
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">ecstatic-morse</span> <a href=\"#narrow/stream/213817-t-lang/topic/.22Why.20use.20.60const.60.20over.20.60let.60.3F.22/near/195916616\" title=\"#narrow/stream/213817-t-lang/topic/.22Why.20use.20.60const.60.20over.20.60let.60.3F.22/near/195916616\">said</a>:</p>\n<blockquote>\n<p>As an aside, the original rvalue static promotion RFC/implementation was overbroad IMO, we ended up promoting a lot of stuff that was not explicitly mentioned. <code>wg-const-eval</code> (especially <span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span>) has been trying to limit the use of promotion for this reason.</p>\n</blockquote>\n<p>another link: <a href=\"https://github.com/rust-lang/const-eval/issues/19\" title=\"https://github.com/rust-lang/const-eval/issues/19\">https://github.com/rust-lang/const-eval/issues/19</a></p>",
        "id": 195945736,
        "sender_full_name": "RalfJ",
        "timestamp": 1588326593
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> also see <a href=\"https://github.com/rust-lang/const-eval/blob/master/promotion.md#implicit-and-explicit-contexts\" title=\"https://github.com/rust-lang/const-eval/blob/master/promotion.md#implicit-and-explicit-contexts\">https://github.com/rust-lang/const-eval/blob/master/promotion.md#implicit-and-explicit-contexts</a> for the difference in promotion rules (anonymous) consts and normal run-time code.</p>",
        "id": 195945966,
        "sender_full_name": "RalfJ",
        "timestamp": 1588326745
    },
    {
        "content": "<p>another open question for the RFC:<br>\nshould we work towards not promoting <em>any</em> <code>fn</code> calls outside explicit promotion contexts? i.e., currently this works:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"kt\">i32</span>::<span class=\"n\">max_value</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>should we require <code>const { &amp;i32::max_value() }</code> instead?<br>\n(well in this specific case, <code>&amp;i32::MAX</code> will also work without explicit <code>const</code>, but you get the idea)</p>",
        "id": 195946007,
        "sender_full_name": "RalfJ",
        "timestamp": 1588326812
    },
    {
        "content": "<p>that would basically amount to try to remove <code>rustc_promotable</code> from as many functions as we can get away with, and maybe deprecating the ability for functions where just removing it causes too much breakage</p>",
        "id": 195946118,
        "sender_full_name": "RalfJ",
        "timestamp": 1588326895
    },
    {
        "content": "<p>I do like the idea of eliminating the \"these functions are special\" list.  I don't know if it'd be worth trying to roll them back or just saying that we'll never add any more because you can get it by a user-opt-in instead of the library-opt-in</p>",
        "id": 195987218,
        "sender_full_name": "scottmcm",
        "timestamp": 1588354620
    },
    {
        "content": "<p>Ah, I didn't know <code>max_value</code> was <code>#[rustc_promotable]</code></p>",
        "id": 195987325,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1588354668
    },
    {
        "content": "<p>re: removing <code>#[rustc_promotable]</code> when possible, I'm not super eager to break back compat, even with a crater run since coverage is not 100%. The following functions are  currently marked<br>\n<code>#[rustc_promotable]</code>.</p>\n<ul>\n<li><code>i32::min_value</code>, <code>i32::max_value</code></li>\n<li><code>std::mem::size_of</code>, <code>std::mem::align_of</code></li>\n<li><code>RangeInclusive::new</code>/ <code>3..=5</code></li>\n<li><code>std::ptr::null</code>, <code>std::ptr::null_mut</code></li>\n<li><code>RawWaker::new</code>, <code>RawWakerVTable::new</code> ???</li>\n<li><code>Duration::from_secs</code></li>\n</ul>",
        "id": 195988480,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1588355254
    },
    {
        "content": "<p>Except for the <code>RawWaker</code> ones, I don't think any of these could plausibly have observable side-effects (lemme know if you disagree). Perhaps making <code>#[rustc_promotable]</code> no longer work would be a good candidate for the next edition?</p>",
        "id": 195988905,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1588355501
    },
    {
        "content": "<p>With <code>const {}</code> as the suggested replacement.</p>",
        "id": 195989007,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1588355540
    },
    {
        "content": "<p>While that list doesn't make me happy (<code>..=</code> but not <code>..</code> seems weird, for example), it looks small enough to not be a pervasive problem.  And a few of those I wish were just real consts anyway (like <code>size_of</code>), so behaving like them doesn't seem crazy.</p>\n<p>Maybe instead we could just warn about non-literals being promoted and suggest adding a <code>const{}</code> to be clear about what's going on.  That's a prerequisite to a potential edition change anyway, and we can defer any decision about actually blocking it over an edition boundary.</p>",
        "id": 195989835,
        "sender_full_name": "scottmcm",
        "timestamp": 1588355970
    },
    {
        "content": "<p>Warning about all non-literals seems good to me (although I don't think it will be trivial to implement).</p>",
        "id": 195991365,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1588356753
    },
    {
        "content": "<p>Also, I believe <code>..</code> is desugared to a struct literal (<code>Range { .. }</code>), so it will also get promoted. Presumably we added <code>#[rustc_promotable]</code> to <code>RangeInclusive</code> to make it behave the same.</p>",
        "id": 195991491,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1588356835
    },
    {
        "content": "<p>of these, I'd say <code>Duration::from_secs</code> stands out.<br>\nalso I assume it's <code>min/max_value</code> for all int types, not just <code>i32</code>?</p>",
        "id": 196042301,
        "sender_full_name": "RalfJ",
        "timestamp": 1588410862
    },
    {
        "content": "<p>I got away with de-promoting some <code>Duration</code> methods in <a href=\"https://github.com/rust-lang/rust/pull/67531\" title=\"https://github.com/rust-lang/rust/pull/67531\">https://github.com/rust-lang/rust/pull/67531</a>. might be worth doing that for <code>from_secs</code> as well?</p>",
        "id": 196042315,
        "sender_full_name": "RalfJ",
        "timestamp": 1588410906
    },
    {
        "content": "<p>the <code>RawWaker</code> ones are actually fairly recent, but AFAIK they are also just constructor wrapper, which was a requirement for making them promotable</p>",
        "id": 196042334,
        "sender_full_name": "RalfJ",
        "timestamp": 1588410958
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/213817-t-lang/topic/.22Why.20use.20.60const.60.20over.20.60let.60.3F.22/near/196042315\" title=\"#narrow/stream/213817-t-lang/topic/.22Why.20use.20.60const.60.20over.20.60let.60.3F.22/near/196042315\">said</a>:</p>\n<blockquote>\n<p>I got away with de-promoting some <code>Duration</code> methods in <a href=\"https://github.com/rust-lang/rust/pull/67531\" title=\"https://github.com/rust-lang/rust/pull/67531\">https://github.com/rust-lang/rust/pull/67531</a>. might be worth doing that for <code>from_secs</code> as well?</p>\n</blockquote>\n<p>I am proposing that in <a href=\"https://github.com/rust-lang/rust/pull/71796\" title=\"https://github.com/rust-lang/rust/pull/71796\">https://github.com/rust-lang/rust/pull/71796</a></p>",
        "id": 196044953,
        "sender_full_name": "RalfJ",
        "timestamp": 1588414845
    },
    {
        "content": "<p>Opened <a href=\"https://github.com/rust-lang/rfcs/pull/2920\" title=\"https://github.com/rust-lang/rfcs/pull/2920\">https://github.com/rust-lang/rfcs/pull/2920</a></p>",
        "id": 196224308,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1588618393
    }
]