[
    {
        "content": "<p>a while back I opened <a href=\"https://github.com/rust-lang/rust/issues/81686\">https://github.com/rust-lang/rust/issues/81686</a> with the idea to make it a warning to use <code>as</code> to cast a function item to any integer other than usize, with the implicit hope that it could be made into an error someday. the example given is a pretty good motivator, IMO :P Does anybody from the lang team agree with this idea? there's already a patch to implement the warning, and there's still time to make it into an edition change, if desired</p>",
        "id": 232471573,
        "sender_full_name": "bstrie",
        "timestamp": 1617127907
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256342\">@bstrie</span> We actually just discussed that today.</p>",
        "id": 232471686,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617127946
    },
    {
        "content": "<p>To remove the time-sensitivity: this doesn't need to be an edition change, we can introduce lints without waiting for an edition.</p>",
        "id": 232471711,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617127964
    },
    {
        "content": "<p>There's some back-and-forth about which semantics we want. I'm in favor of the PR as written, and I would additionally be in favor of a lint that requires explicitly turning a function into a pointer before turning it into an integer (even if the integer type is usize or u64).</p>",
        "id": 232471814,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617128011
    },
    {
        "content": "<p>I don't understand the value in requiring that you cast it to a pointer of some whatever type before you can cast it to usize</p>",
        "id": 232522264,
        "sender_full_name": "Lokathor",
        "timestamp": 1617153866
    },
    {
        "content": "<p><code>std::mem::size_of::&lt;i32&gt; as u64</code> I believe is a reason.</p>",
        "id": 232523042,
        "sender_full_name": "Connor Horman",
        "timestamp": 1617154519
    },
    {
        "content": "<p>well, the current proposal to restrict only to usize (and u64?) prevents accidental <code>i8::max as u32</code>, but not <code>i8::max as usize</code>. requiring the user to first cast to a pointer would completely eliminate the risk of accidentally casting a function to any int, though it would be more disruptive to existing code</p>",
        "id": 232523515,
        "sender_full_name": "bstrie",
        "timestamp": 1617154861
    },
    {
        "content": "<p><strong>very</strong> disruptive to both current and future code</p>",
        "id": 232524147,
        "sender_full_name": "Lokathor",
        "timestamp": 1617155393
    },
    {
        "content": "<p>we don't allow casting a reference directly to an integer, this feels very similar to me. I'm very much in the boat of we should require casts to pointers first</p>",
        "id": 232554148,
        "sender_full_name": "oli",
        "timestamp": 1617179623
    },
    {
        "content": "<p>I'd definitely like a more agressive lint for casting <em>function items</em> than for casting general pointers.  <code>u8::max as usize</code> should probably lint, but I agree casting a <code>*const i32</code> to <code>u64</code> probably shouldn't.</p>",
        "id": 232554931,
        "sender_full_name": "scottmcm",
        "timestamp": 1617180070
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/213817-t-lang/topic/warn.20on.20casting.20fn.20to.20non-usize.20integer.20.28edition.20change.3F.29/near/232554148\">said</a>:</p>\n<blockquote>\n<p>we don't allow casting a reference directly to an integer, this feels very similar to me. I'm very much in the boat of we should require casts to pointers first</p>\n</blockquote>\n<p>we dont have \"raw function pointers\" though so the analogy doesn't really hold</p>",
        "id": 232562684,
        "sender_full_name": "RalfJ",
        "timestamp": 1617183915
    },
    {
        "content": "<p>I thought the issue is not with casting function pointers, it is with casting \"function item zsts\". If you go through a function pointer cast first, then it is obvious you are trying to cast the function pointer and not something else</p>",
        "id": 232567626,
        "sender_full_name": "oli",
        "timestamp": 1617186440
    },
    {
        "content": "<p>Isn't this kind of verbose though? It would be great if this could be written <code>foo as fn(_) -&gt; _ as usize</code> but I don't think that syntax works</p>",
        "id": 232607665,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617203246
    },
    {
        "content": "<p>I assume <code>foo as *const _ as usize</code> doesn't work because I have no idea what the <code>_</code> would get inferred to</p>",
        "id": 232607825,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617203300
    },
    {
        "content": "<p>In particular, if there isn't a way to do this with underscores then it may make it impossible (or at least very difficult) to write macros that convert a function with a random signature to a <code>usize</code>, since you would have to first render the signature as an <code>fn</code> type</p>",
        "id": 232608187,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617203424
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/213817-t-lang/topic/warn.20on.20casting.20fn.20to.20non-usize.20integer.20.28edition.20change.3F.29/near/232607825\">said</a>:</p>\n<blockquote>\n<p>I assume <code>foo as *const _ as usize</code> doesn't work because I have no idea what the <code>_</code> would get inferred to</p>\n</blockquote>\n<p>You can give it an arbitrary <code>Sized</code> pointee: <code>foo as *const () as usize</code>, or even some custom <code>code</code> type: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=794ee23d87d5a94f102479990a4a9620\">Playground</a></p>",
        "id": 232623024,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1617208520
    }
]