[
    {
        "content": "<p>In response to an <a href=\"http://www.sheshbabu.com/posts/rust-module-system/\">article that came out recently explaining the module system</a>, there's been some renewed interest in implicit <code>mod</code>, for the common case where modules have the same structure as the filesystem. Now that we're not making other changes at the same time, I think it might be feasible to make such a change for a future edition. I would be interested in seeing that happen, as long as there's still a way to ask for explicit-modules-only for more complex module organizational cases.</p>",
        "id": 204465714,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595273525
    },
    {
        "content": "<p>I think it would make sense to handle that through the MCP process, and charter a project group for it.</p>",
        "id": 204465744,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595273546
    },
    {
        "content": "<p>I'm wondering if there would be objections at the conceptual level (in which case those need addressing before chartering a group), or if objections would be to the details (in which case the project group process could resolve them).</p>",
        "id": 204465827,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595273592
    },
    {
        "content": "<p>I remember that when we were doing the 2018 module system, we dropped implicit <code>mod</code> not because we didn't want it to happen, but because we felt it would be doing too much at once and would prevent us from getting the rest through.</p>",
        "id": 204466551,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595273993
    },
    {
        "content": "<p>I'm hoping that it could be smoother as a separate step.</p>",
        "id": 204466602,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595274005
    },
    {
        "content": "<p>When you say \"conceptual level,\" can you elaborate what you mean by that? Opposition to the idea itself rather than a concrete implementation?</p>",
        "id": 204467321,
        "sender_full_name": "simulacrum",
        "timestamp": 1595274378
    },
    {
        "content": "<p>Right, exactly.</p>",
        "id": 204467542,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595274486
    },
    {
        "content": "<p>Objections on the conceptual level would be if someone doesn't <em>ever</em> want modules to depend on the filesystem.</p>",
        "id": 204467564,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595274505
    },
    {
        "content": "<p>I personally have some concerns about this, especially because I am not completely sure about the target audience which are probably newish users here. I am fairly concerned that there is already so much code and tutorials out there which reference the current state of the module system that this change would end up causing more confusion instead</p>",
        "id": 204467589,
        "sender_full_name": "lcnr",
        "timestamp": 1595274523
    },
    {
        "content": "<p>Objections to the details might be \"can we make the compiler do that efficiently, including for incremental compilation\", or \"how easily can existing projects avoid this if they want to have .rs files laying around that shouldn't be used\".</p>",
        "id": 204467668,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595274577
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/213817-t-lang/topic/MCP.20for.20implicit.20mod.3F/near/204467589\">said</a>:</p>\n<blockquote>\n<p>I personally have some concerns about this, especially because I am not completely sure about the target audience which are probably newish users here. I am fairly concerned that there is already so much code and tutorials out there which reference the current state of the module system that this change would end up causing more confusion instead</p>\n</blockquote>\n<p>The goal would definitely be to make it more usable for new users. I'm <em>hoping</em> that this would be like the 2018 edition, where almost all code Just Works unless there's ambiguity.</p>",
        "id": 204467768,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595274621
    },
    {
        "content": "<p>So I think that we would have to enable this for a whole crate at once</p>",
        "id": 204467819,
        "sender_full_name": "lcnr",
        "timestamp": 1595274654
    },
    {
        "content": "<p>Right.</p>",
        "id": 204467828,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595274662
    },
    {
        "content": "<p>aah, nm I was concerned with conditional modules</p>",
        "id": 204467863,
        "sender_full_name": "lcnr",
        "timestamp": 1595274686
    },
    {
        "content": "<p>and that they would require an update of the complete crate when introduced</p>",
        "id": 204467893,
        "sender_full_name": "lcnr",
        "timestamp": 1595274702
    },
    {
        "content": "<p>but we can do the following inside of the module instead, so this should be fine</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#![cfg(windows)]</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204467967,
        "sender_full_name": "lcnr",
        "timestamp": 1595274727
    },
    {
        "content": "<p>Ah, that's another good example of something that will depend on the details.</p>",
        "id": 204467973,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595274731
    },
    {
        "content": "<p>1) Can we do that as efficiently, or would there be a performance hit from doing so?</p>",
        "id": 204468004,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595274753
    },
    {
        "content": "<p>(One interesting side-effect, is that if we can get rid of <code>mod foo;</code> completely, it side-steps the question of what proc macros should do when annotating <code>mod foo;</code>)</p>",
        "id": 204468063,
        "sender_full_name": "simulacrum",
        "timestamp": 1595274802
    },
    {
        "content": "<p>2) <em>Could</em> we add a mechanism for conditional use of implicit modules, without having to move the conditionals inside the module?</p>",
        "id": 204468079,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595274810
    },
    {
        "content": "<p>Another consideration is rust-analyzer- a) how would implicit <code>mod</code> impact its ability to work lazily/incrementally? and b) from the other side, is there anything it could do that would solve the usability problem without changing the language?</p>",
        "id": 204468205,
        "sender_full_name": "rpjohnst",
        "timestamp": 1595274865
    },
    {
        "content": "<p>It might, for instance, be possible to have something like <code>#[cfg(...)] pub use windows::foo as foo</code> and <code>#[cfg(...)] pub use linux::foo as foo</code> and have that work naturally.</p>",
        "id": 204468259,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595274896
    },
    {
        "content": "<p>there are definitely various details</p>",
        "id": 204468561,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595275055
    },
    {
        "content": "<p>for example, right now <code>#[cfg(foo)] mod bar</code> means that <code>bar.rs</code> is never even <em>parsed</em></p>",
        "id": 204468592,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595275068
    },
    {
        "content": "<p>and hence it may contain unstable or invalid syntax</p>",
        "id": 204468601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595275073
    },
    {
        "content": "<p>Right. That seems like a critical requirement to me.</p>",
        "id": 204468716,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595275117
    },
    {
        "content": "<p>I'm in favor of the general idea but I do think there's a lot of details to work out; it's probably not where I personally would choose to invest my energy</p>",
        "id": 204468728,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595275121
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/MCP.20for.20implicit.20mod.3F/near/204468592\">said</a>:</p>\n<blockquote>\n<p>for example, right now <code>#[cfg(foo)] mod bar</code> means that <code>bar.rs</code> is never even <em>parsed</em></p>\n</blockquote>\n<p>to be clear, we've discussed before that this doesn't meet many users' expectations</p>",
        "id": 204468763,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595275143
    },
    {
        "content": "<p>and that it would be better if we could do that at finer granularity</p>",
        "id": 204468774,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595275151
    },
    {
        "content": "<p>e.g., being able to tag a function that used unstable syntax within</p>",
        "id": 204468789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595275161
    },
    {
        "content": "<p>(but there are impl challenges to be overcome)</p>",
        "id": 204468801,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595275170
    },
    {
        "content": "<p>I find myself wondering if we <em>could</em> guarantee that if there's a module-level <code>#![cfg(...)]</code> that isn't matched, Rust will never parse the rest of the file.</p>",
        "id": 204468805,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595275173
    },
    {
        "content": "<p>(Leaving aside the question of whether that's what we want.)</p>",
        "id": 204468819,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595275184
    },
    {
        "content": "<p>Probably</p>",
        "id": 204468830,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595275189
    },
    {
        "content": "<p>One thing I will say: I don't believe this feature is \"just\" for newbie users</p>",
        "id": 204468847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595275200
    },
    {
        "content": "<p>I can definitely attest to being \"not a noob\" and still confused/surprised by our behavior</p>",
        "id": 204468912,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595275213
    },
    {
        "content": "<p>I've certainly wanted it; I <em>regularly</em> forget to write <code>mod foo;</code> after adding <code>foo.rs</code>.</p>",
        "id": 204468937,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595275225
    },
    {
        "content": "<p>Sometimes it's just \"oh, I have to add a <code>mod</code>\", but often it's like this:</p>",
        "id": 204468938,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595275226
    },
    {
        "content": "<p>I write a <code>test.rs</code> file with tests</p>",
        "id": 204468949,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595275232
    },
    {
        "content": "<p>I run <code>cargo test</code>, everything seems green</p>",
        "id": 204468954,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595275236
    },
    {
        "content": "<p>I don't realize the tests never even <em>ran</em> :)</p>",
        "id": 204468961,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595275242
    },
    {
        "content": "<p>(or <em>compiled</em>) :)</p>",
        "id": 204468977,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595275252
    },
    {
        "content": "<p>Yup, that seems like a good use case for motivation.</p>",
        "id": 204469046,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595275287
    },
    {
        "content": "<p>We could also have rules like \"we don't look at module files whose basenames aren't valid Rust module names\", which would address things like <code>.something.rs</code> or <code>foo.MERGED.rs</code> or <code>foo.OURS.rs</code>.</p>",
        "id": 204469177,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595275364
    },
    {
        "content": "<p>I would personally suspect that we could get 90% of the benefit with a lint that says \"hey you have an unused file, go add a mod foo for it\"</p>",
        "id": 204469215,
        "sender_full_name": "simulacrum",
        "timestamp": 1595275396
    },
    {
        "content": "<blockquote>\n<p>I don't believe this feature is \"just\" for newbie users</p>\n</blockquote>\n<p>My concern is not that this feature only helps newbies, I am afraid that this feature may end up hurting newbies (regardless of if it helps more advanced users)</p>",
        "id": 204469273,
        "sender_full_name": "lcnr",
        "timestamp": 1595275439
    },
    {
        "content": "<p>(see e.g. <a href=\"https://github.com/rust-lang/rust/issues/28711\">https://github.com/rust-lang/rust/issues/28711</a>)</p>",
        "id": 204469332,
        "sender_full_name": "simulacrum",
        "timestamp": 1595275452
    },
    {
        "content": "<p>There were widespread and strongly felt objections to this concept during the ergonomics initiative and it would be very controversial to pursue it. I also think we cannot make major changes to the module system any time in the near future, because we made such a huge overhaul in 2018. I would have prefered if Rust had not required explicit mod statements, but I think pursuing this now would be a big mistake.</p>",
        "id": 204469712,
        "sender_full_name": "boats",
        "timestamp": 1595275676
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256759\">@boats</span> Do you feel similarly about the more limited \"just linting\" proposal?</p>",
        "id": 204469889,
        "sender_full_name": "simulacrum",
        "timestamp": 1595275766
    },
    {
        "content": "<p>No I think linting would not be very controversial</p>",
        "id": 204470005,
        "sender_full_name": "boats",
        "timestamp": 1595275808
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/MCP.20for.20implicit.20mod.3F/near/204468601\">said</a>:</p>\n<blockquote>\n<p>and hence it may contain unstable or invalid syntax</p>\n</blockquote>\n<p>This is a trick that I use when targeting my crate to support Rust version $OLD but with some opt-in code for version $NEW, so I'd be really sad to see it go.</p>",
        "id": 204473063,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595277413
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/213817-t-lang/topic/MCP.20for.20implicit.20mod.3F/near/204469215\">said</a>:</p>\n<blockquote>\n<p>I would personally suspect that we could get 90% of the benefit with a lint that says \"hey you have an unused file, go add a mod foo for it\"</p>\n</blockquote>\n<p>I like the lint idea, but how would you turn it off for a specific file?</p>",
        "id": 204473144,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595277476
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> easiest option is something like <code>#[cfg(false)] mod the_orphan_file;</code> - my guess is the primary challenge with any such lint is going to be the fundamentally \"shared namespace\" problem of Cargo projects with src/lib.rs, src/main.rs, src/foo.rs -- when compiling <a href=\"http://lib.rs\">lib.rs</a> or <a href=\"http://main.rs\">main.rs</a> you don't know if <a href=\"http://foo.rs\">foo.rs</a> is 'intentionally' orphan.</p>\n<p>I think that challenge is pervasive in any sort of project like this, in some sense.</p>",
        "id": 204473479,
        "sender_full_name": "simulacrum",
        "timestamp": 1595277670
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256759\">boats</span> <a href=\"#narrow/stream/213817-t-lang/topic/MCP.20for.20implicit.20mod.3F/near/204469712\">said</a>:</p>\n<blockquote>\n<p>There were widespread and strongly felt objections to this concept during the ergonomics initiative and it would be very controversial to pursue it. I also think we cannot make major changes to the module system any time in the near future, because we made such a huge overhaul in 2018. I would have prefered if Rust had not required explicit mod statements, but I think pursuing this now would be a big mistake.</p>\n</blockquote>\n<p>I remember there being two major families of objections at the time.</p>\n<p>One set were the overall objections to an overhaul of the module system that would require a lot of migration work in every crate; we ended up with a module system that didn't require nearly as much migration because it was <em>mostly</em> backwards-compatible, and if we were to change something again in the future, I'd similarly want something mostly backwards-compatible.</p>\n<p>The other set were the use cases that specifically wanted to be able to have <code>.rs</code> files in a directory without Rust looking at those. I feel like those were treated as complete showstoppers, and I'm wondering to what degree those problems are actually fixable in a backwards-compatible way (e.g. \"if you have mod statements default to explicit-mod-statements-required\", or some other system that ensures current crates mostly Just Work while new crates could avoid explicit mod, the same way <code>extern crate</code> still works).</p>",
        "id": 204473528,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595277717
    },
    {
        "content": "<p>All that said, I can completely understand if it feels like we shouldn't spend energy on this right now.</p>",
        "id": 204473601,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595277750
    },
    {
        "content": "<p>But I'd love to see us eventually figure out if there <em>could</em> be a viable path to a solution.</p>",
        "id": 204473656,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595277794
    },
    {
        "content": "<p>In any case, a lint for \"you forgot to add a mod statement\" seems like a good start.</p>",
        "id": 204473717,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595277842
    },
    {
        "content": "<p>And the work needed to one day make that a deny-by-default lint would be much of the same work of figuring out how to address use cases.</p>",
        "id": 204473771,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595277872
    },
    {
        "content": "<p>I'd be quite happy to see a change proposal for such a lint.</p>",
        "id": 204473826,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595277911
    },
    {
        "content": "<p>Another lint in this area could be for <code>my_module::my_module</code>, where people wrap their entire file <code>foo.rs</code> with <code>mod foo { /* ... */ }</code>. It's not _wrong_, but not usually what you want.</p>",
        "id": 204474495,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595278313
    },
    {
        "content": "<p>I do tend to agree with <span class=\"user-mention\" data-user-id=\"256759\">@boats</span> that we \"took our shot\" at modules.</p>",
        "id": 204474755,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595278454
    },
    {
        "content": "<p>Yea, for me this is the big issue. I think some users will take it as a reversal to re-open this question for the 2021 edition &amp; I think in general it will contribute majorly to a perception problem of being churny</p>",
        "id": 204474834,
        "sender_full_name": "boats",
        "timestamp": 1595278524
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256759\">@boats</span> I would absolutely support just saying \"we're not going to do this for 2021\", just to avoid the perception of churn, and giving it some consideration for 2024. A lint might potentially pave the way towards doing so.</p>",
        "id": 204475092,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595278683
    },
    {
        "content": "<p>+1 for the lint, -1 for implicit modules. Something I do a lot for testing rustdoc changes is making a temporary rust file in the current directory so I can run rustdoc on it. With this change I'd have to clean that up before even running x.py check (or I'd get the warnings and errors from that file).</p>",
        "id": 204475833,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595279045
    },
    {
        "content": "<p>When you say \"in the current directory\", do you mean in some subdirectory of the repo, or at the top level of the repo?</p>",
        "id": 204476605,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595279423
    },
    {
        "content": "<p>various places, but usually a subdirectory</p>",
        "id": 204477227,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595279739
    },
    {
        "content": "<p>I have an alias <code>xpy</code> that runs x.py from the top-level directory, which lets me cd around without having to use awful things like <code>../../x.py</code></p>",
        "id": 204477316,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595279772
    },
    {
        "content": "<p>and outside of that I'd be worried about compilation times if you have a vendored dependency you forgot to get rid of or something - <a href=\"http://docs.rs\">docs.rs</a> ran into something similar with <a href=\"https://github.com/Gilnaa/globwalk/issues/29\">https://github.com/Gilnaa/globwalk/issues/29</a></p>",
        "id": 204477503,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595279894
    },
    {
        "content": "<p>something that might work better is to only load the module if you refer to it somewhere else in the code</p>",
        "id": 204477855,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595280089
    },
    {
        "content": "<p>so if you have <code>use crate::x;</code> but there's no <code>mod x;</code> declaration, rustc would automatically look for <code>x.rs</code>. I'd be ok with that.</p>",
        "id": 204477897,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595280114
    },
    {
        "content": "<p>I guess that wouldn't help with the 'unit tests being forgotten' use case though :/</p>",
        "id": 204477966,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595280136
    },
    {
        "content": "<p>I remember thinking that the lint was a good starting point the last time we talked about this</p>",
        "id": 204478458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595280461
    },
    {
        "content": "<p>would force us to solve all the usual issues</p>",
        "id": 204478464,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595280466
    },
    {
        "content": "<p>but takes away the controversial part of it, let's us focus more on the implementation details</p>",
        "id": 204478526,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595280485
    },
    {
        "content": "<p>As long as inline modules never go away I'll be fine.</p>",
        "id": 204490883,
        "sender_full_name": "Lokathor",
        "timestamp": 1595283636
    },
    {
        "content": "<p>I think the lint for unused source files is a great idea which we should definitely do, unlike implicit modules.</p>",
        "id": 204519313,
        "sender_full_name": "Peter Rabbit",
        "timestamp": 1595317235
    },
    {
        "content": "<p>I think implementing a lint for unused source files in a Cargo-based project will have the same problems as detecting unused dependencies.  I think it will be even worse, since modules sometimes use <code>#[cfg]</code>, in which case rustc won't even see that there are potentially used modules.  est31 has been doing some work on the unused dependencies front, but it is quite complex, and doesn't fit with rustc's lint system, which means there would need to be separate controls for allow/deny, which is quite unfortunate.</p>",
        "id": 204540551,
        "sender_full_name": "Eric Huss",
        "timestamp": 1595334424
    },
    {
        "content": "<p>yeah that's my thought as well, but I think the lint is the right first step, if we do it. But I think we don't have the resources <em>now</em> to dedicate to this personally.</p>",
        "id": 204542818,
        "sender_full_name": "simulacrum",
        "timestamp": 1595335863
    },
    {
        "content": "<p>As a late reply to this, I just wanted automatic / implicit modules.</p>\n<p>I want to reorganize a bunch of integration tests from <code>/tests/foo-{a,b}.rs</code> to <code>/tests/foo/{a,b}.rs</code>. That's not supported by Cargo's test discovery, so I need to now have <code>mod a</code> and <code>mod b</code>. If I forget that line, then my test file won't be run. </p>\n<p>I wouldn't usually want this, however, so opting in with something something like <code>mod *</code> would be fine.</p>",
        "id": 208433978,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598707668
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/213817-t-lang/topic/MCP.20for.20implicit.20mod.3F/near/204474495\">said</a>:</p>\n<blockquote>\n<p>Another lint in this area could be for <code>my_module::my_module</code>, where people wrap their entire file <code>foo.rs</code> with <code>mod foo { /* ... */ }</code>. It's not _wrong_, but not usually what you want.</p>\n</blockquote>\n<p>Another late reply, but I actually find myself doing this a lot due to generally starting out writing <code>mod foo { /* ... */ }</code> in <em>lib.rs</em> then only eventually perhaps moving it to <em>foo.rs</em> and adding <code>pub use foo::*</code> at the top of <em>foo.rs</em>.  At least that is the only way i've found to keep everything rustfmt and compiling while allowing git aware of the code movement.</p>",
        "id": 208448841,
        "sender_full_name": "matt rice",
        "timestamp": 1598727827
    },
    {
        "content": "<p>There's <a href=\"https://github.com/dtolnay/automod\">this crate</a> by the way.</p>",
        "id": 208492099,
        "sender_full_name": "Charles Lew",
        "timestamp": 1598804443
    },
    {
        "content": "<p>I would rather have this as a crate then part of the language I think</p>",
        "id": 208492224,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598804589
    },
    {
        "content": "<blockquote>\n<p>Suppose that we would like to keep a directory of regression tests for individual numbered issues:</p>\n</blockquote>\n<p>LOL, what a nice example use case :-)</p>",
        "id": 208683039,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598965214
    },
    {
        "content": "<p>I really should just get into the habit of assuming that dtolnay has fixed most of my problems before I have them.</p>",
        "id": 208683242,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598965318
    }
]