[
    {
        "content": "<p>Would it be possible for Rust to generate a list of names provided by a crate, and provide such a list as a compile-time constant (either as a const <code>&amp;[&amp;'static str]</code> that could be used by a proc macro or build script, or perhaps as a list usable by a macro)?</p>",
        "id": 230770541,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616016741
    },
    {
        "content": "<p>For instance, \"give me the list of all of libc's <code>pub</code> names\"?</p>",
        "id": 230770604,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616016768
    },
    {
        "content": "<p>From a crate that depends on <code>libc</code>, I mean.</p>",
        "id": 230770656,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616016788
    },
    {
        "content": "<p>Is that something that'd be 1) feasible for the compiler to do, and 2) a vaguely reasonable thing to ask for?</p>",
        "id": 230770720,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616016819
    },
    {
        "content": "<p>I'm thinking about it for the purposes of writing certain kinds of comprehensive tests. For instance, \"give me all the <code>SIGFOO</code> signals defined in <code>libc</code> for this target\".</p>",
        "id": 230770824,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616016860
    },
    {
        "content": "<p>It'd be nice to be able to get that information from the compiler, rather than having to create and export such a list from the crate in question.</p>",
        "id": 230770873,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616016880
    },
    {
        "content": "<p>a macro that extracts the list of symbols from the rlib of a dependency seems no more inherently unreasonable than <code>include_str!</code> is</p>",
        "id": 230772122,
        "sender_full_name": "bstrie",
        "timestamp": 1616017497
    },
    {
        "content": "<p><code>include_symbols!(some_direct_dependency_crate_name)</code> ?</p>",
        "id": 230775480,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616018654
    },
    {
        "content": "<p>My question would be, what form do the names take, and also what names would be exported? Just functions and statics? Functions, statics, and types? Are generics included?</p>",
        "id": 230793994,
        "sender_full_name": "Connor Horman",
        "timestamp": 1616029174
    },
    {
        "content": "<p>that almost sounds like a reflection API</p>",
        "id": 230806854,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616036163
    },
    {
        "content": "<p>Very <em>very</em> carefully not suggesting reflection here, because this is not a runtime feature, it's a compile-time feature.</p>",
        "id": 230807268,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616036559
    },
    {
        "content": "<p>And: pub functions, pub constants, pub types, anything you could name via <code>cratename::NAME</code>.</p>",
        "id": 230807278,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616036583
    },
    {
        "content": "<p>Could part of this be the conversation about a json output from rustdoc?  It seems like just a list of strings isn't enough to do something particularly interesting.</p>",
        "id": 230808930,
        "sender_full_name": "scottmcm",
        "timestamp": 1616038223
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/Getting.20a.20compile-time.20list.20of.20names.20from.20a.20crate/near/230807268\">said</a>:</p>\n<blockquote>\n<p>Very <em>very</em> carefully not suggesting reflection here, because this is not a runtime feature, it's a compile-time feature.</p>\n</blockquote>\n<p>I was thinking more like the <a href=\"https://www.youtube.com/watch?v=ARxj3dfF_h0\">C++ nemesis</a> library, which is static reflection. Probably to do anything really fancy though it would be better to do this in a <a href=\"http://build.rs\">build.rs</a> script</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"ARxj3dfF_h0\" href=\"https://www.youtube.com/watch?v=ARxj3dfF_h0\"><img src=\"https://i.ytimg.com/vi/ARxj3dfF_h0/default.jpg\"></a></div>",
        "id": 230813112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616042444
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> It's enough for various kinds of tests, including checking symbol availability and writing exhaustive tests checking all symbols with certain name patterns.</p>",
        "id": 230818490,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616048468
    }
]