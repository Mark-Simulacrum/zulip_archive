[
    {
        "content": "<p>Hey <span class=\"user-group-mention\" data-user-group-id=\"1977\">@T-lang</span> -- so it's been hard for me to keep the calendar up-to-date, but we had discussed the idea of talking about our roadmap/yearly plans today</p>",
        "id": 198902589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590591088
    },
    {
        "content": "<p>(In ~2 hours)</p>",
        "id": 198902641,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590591107
    },
    {
        "content": "<p>This is the <a href=\"https://hackmd.io/Czx3MwkpQeiC2_e9XI8OIw\">hackmd</a> that we had before</p>",
        "id": 198902664,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590591115
    },
    {
        "content": "<p>I think what I had hoped is that we could try to be a bit \"realistic\" about who might actually do what, as well as amending the list</p>",
        "id": 198903269,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590591308
    },
    {
        "content": "<p>But I think the other thing to do would be preparing a list of what edition changes we ought to be preparing for and trying to move those discussions forward</p>",
        "id": 198903467,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590591368
    },
    {
        "content": "<p>I guess I'm not entirely sure if we have enough prep to make a productive meeting, but <span class=\"user-mention\" data-user-id=\"116011\">@Steve Klabnik</span> and I were talking about trying to prepare an RFC for a 2021 Edition and I'd like to think about what the lang team can contribute to that. I feel like the list of work that is in that hackmd is somehow \"reasonable\" and a helpful way for us to organize, but at the same time there is that <a href=\"https://github.com/rust-lang/rust/issues?page=2&amp;q=is%3Aopen+is%3Aissue+label%3AC-tracking-issue+label%3AT-lang\">very long list</a> of unstable tracking issues, and I feel like it there is some need to wrangle those into a kind of order -- for example, maybe broken by categories, and with some notion of their importance.</p>",
        "id": 198907706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590592857
    },
    {
        "content": "<p>That seems clearly like work we cannot do in a  meeting. It's also clear that there are tons of minor improvements and things in there.</p>",
        "id": 198907740,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590592875
    },
    {
        "content": "<p>Mixed in with a bunch of random stuff that seems pretty minor and stalled</p>",
        "id": 198907790,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590592894
    },
    {
        "content": "<p>Is the plan to still, as much as possible, make all language changes available to all editions? Some of those items, at least near the top of the list such as <code>cfg(accessable(?))</code>, seem suitable for all editions.</p>\n<p>With 2018, a lot of the \"marketing materials\" conflated \"things added since 1.0 that are available in all editions\" and \"things you literally need to change your crate to 2018 edition to take advantage of\". I think this was well intentioned but ultimately a bad move.</p>\n<p>I hope that the 2021 edition marketing/messaging can focus on exactly and only the difference between edition=2018 and edition=2021, and not try to also say something like \"now we have const <code>if</code>\" or anything like that.</p>",
        "id": 198921211,
        "sender_full_name": "Lokathor",
        "timestamp": 1590598884
    },
    {
        "content": "<p>Hey <span class=\"user-group-mention\" data-user-group-id=\"1977\">@T-lang</span> -- meeting starts now</p>",
        "id": 198921280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590598916
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> I'm conflating them :) in particular, I'm looking at the 2021 horizon as a planning unit to help us prioritize (\"what can we get done in what time frame\"), but I have also separated out \"adaptations you need to opt into Rust 2021\", which is the narrower concept you are thinking of</p>",
        "id": 198921568,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590599038
    },
    {
        "content": "<p>that's fair as a planning timeline, yeah.</p>",
        "id": 198921942,
        "sender_full_name": "Lokathor",
        "timestamp": 1590599165
    },
    {
        "content": "<p>(sadly can't make the meeting but I'll watch the vid later)</p>",
        "id": 198921989,
        "sender_full_name": "Lokathor",
        "timestamp": 1590599186
    },
    {
        "content": "<p>Oh hey the example I was talking about for trait aliases was this one:</p>\n<div class=\"codehilite\"><pre><span></span><code>trait Future { type Output; }\n\ntrait TryFtuure: Future&lt;Output = Result&lt;Self::Ok, Self::Err&gt;&gt; {\n    type Ok;\n    type Err;\n}\n</code></pre></div>",
        "id": 198926810,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1590601582
    },
    {
        "content": "<p>this throws a \"cycle detected when computing the supertraits of <code>TryFuture</code>\" error</p>",
        "id": 198926841,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1590601596
    },
    {
        "content": "<p>Ah, yeah</p>",
        "id": 198928362,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590602362
    },
    {
        "content": "<p>I can't make the meeting today because I realized I have a scheduling conflict, but <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> should be able to kick off the cloud recording, and I hope to watch it afterwards.</p>",
        "id": 201871129,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593016280
    },
    {
        "content": "<p>Can someone send me the invite link?</p>",
        "id": 201872800,
        "sender_full_name": "oli",
        "timestamp": 1593017173
    },
    {
        "content": "<p>i will in a sec</p>",
        "id": 201874792,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593018090
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/lang-team/issues/18\">https://github.com/rust-lang/lang-team/issues/18</a></p>",
        "id": 201875261,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593018284
    },
    {
        "content": "<p>Skill tree: <a href=\"https://static.turbo.fish/const-eval-skill-tree/skill-tree.html\">https://static.turbo.fish/const-eval-skill-tree/skill-tree.html</a></p>",
        "id": 201875309,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1593018312
    },
    {
        "content": "<p>i'll be taking notes on <a href=\"https://hackmd.io/7BPJmbPuTRKLzNZ5cEQ5MQ\">this hackmd</a></p>",
        "id": 201875512,
        "sender_full_name": "pnkfelix",
        "timestamp": 1593018409
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/51909#issuecomment-647643036\">https://github.com/rust-lang/rust/issues/51909#issuecomment-647643036</a></p>",
        "id": 201879368,
        "sender_full_name": "RalfJ",
        "timestamp": 1593020254
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">evil</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 201880343,
        "sender_full_name": "RalfJ",
        "timestamp": 1593020746
    },
    {
        "content": "<p>to continue the analogy of \"safety and const\", you might imagine wanting to do a wrapper</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">never_bad</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">sometimes_bad</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">sometimes_bad</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kt\">bool</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// unsafe because not known to be const-safe</span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mh\">0xFF</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 201881436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593021280
    },
    {
        "content": "<p>or</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">never_bad</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">unconst</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">sometimes_bad</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">unconst</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">sometimes_bad</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kt\">bool</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// unsafe because not known to be const-safe</span>\n<span class=\"w\">        </span><span class=\"n\">unconst</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mh\">0xFF</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 201881718,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593021417
    },
    {
        "content": "<p>Some comments on the skill tree:</p>",
        "id": 201883328,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593022220
    },
    {
        "content": "<p>What is the use case for \"write to files from constants\"?</p>",
        "id": 201883364,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593022241
    },
    {
        "content": "<p>I would actually love to have \"read from files in a constant\", if we could arrange for the compiler to automatically recompile if the file changes.</p>",
        "id": 201883409,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593022267
    },
    {
        "content": "<p>But what's the use case for writing to a file from a constant?</p>",
        "id": 201883419,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593022279
    },
    {
        "content": "<p>FWIW I am very skeptical of any kind of host OS interaction during const-eval^^ that will be really hard to make sound (aka deterministic)</p>",
        "id": 201883649,
        "sender_full_name": "RalfJ",
        "timestamp": 1593022416
    },
    {
        "content": "<p>I don't think it's <em>less</em> deterministic than <code>include!</code> / <code>include_bytes!</code> / <code>include_str!</code></p>",
        "id": 201884196,
        "sender_full_name": "Lokathor",
        "timestamp": 1593022703
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/213817-t-lang/topic/design.20meeting.20today/near/201884196\">said</a>:</p>\n<blockquote>\n<p>I don't think it's <em>less</em> deterministic than <code>include!</code> / <code>include_bytes!</code> / <code>include_str!</code></p>\n</blockquote>\n<p>those cannot flow into the type system though</p>",
        "id": 201884299,
        "sender_full_name": "RalfJ",
        "timestamp": 1593022768
    },
    {
        "content": "<p>const generics rely in determinism of soundness</p>",
        "id": 201884309,
        "sender_full_name": "RalfJ",
        "timestamp": 1593022776
    },
    {
        "content": "<p>this is not \"just\" about reproducible builds</p>",
        "id": 201884316,
        "sender_full_name": "RalfJ",
        "timestamp": 1593022782
    },
    {
        "content": "<p>I don't think it'll be an issue for reproducible builds at all, as long as we detect changes and rebuild.</p>",
        "id": 201884378,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593022803
    },
    {
        "content": "<p>But could you explain what you mean by that flowing into the type system?</p>",
        "id": 201884395,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593022813
    },
    {
        "content": "<p>Could you give an example of \"flow into the type system\"</p>",
        "id": 201884396,
        "sender_full_name": "Lokathor",
        "timestamp": 1593022813
    },
    {
        "content": "<p>:)</p>",
        "id": 201884405,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593022817
    },
    {
        "content": "<p>Concretely: suppose I have a file containing 8 bytes, and I want to read that into a <code>const u64</code>.</p>",
        "id": 201884473,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593022861
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">FOO</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">read</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">Type</span><span class=\"o\">&lt;</span><span class=\"n\">FOO</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 201884511,
        "sender_full_name": "RalfJ",
        "timestamp": 1593022882
    },
    {
        "content": "<p>now we better make sure caller and callee agree on the value of FOO</p>",
        "id": 201884535,
        "sender_full_name": "RalfJ",
        "timestamp": 1593022894
    },
    {
        "content": "<p>Ah, const generics?</p>",
        "id": 201884548,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593022901
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/213817-t-lang/topic/design.20meeting.20today/near/201884309\">said</a>:</p>\n<blockquote>\n<p>const generics rely in determinism of soundness</p>\n</blockquote>\n<p>yes const generics :)</p>",
        "id": 201884572,
        "sender_full_name": "RalfJ",
        "timestamp": 1593022910
    },
    {
        "content": "<p>Got it. Why is that a problem, though, as long as we evaluate the read once?</p>",
        "id": 201884640,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593022931
    },
    {
        "content": "<p>(or array sizes, really^^)</p>",
        "id": 201884642,
        "sender_full_name": "RalfJ",
        "timestamp": 1593022931
    },
    {
        "content": "<p>isn't slice.len already const? so don't we already have this problem</p>",
        "id": 201884651,
        "sender_full_name": "Lokathor",
        "timestamp": 1593022935
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/design.20meeting.20today/near/201884640\">said</a>:</p>\n<blockquote>\n<p>Got it. Why is that a problem, though, as long as we evaluate the read once?</p>\n</blockquote>\n<p>we have to guarantee it is really just evaluated once. currently we can just recompute the constant any time and we know we get the same result.</p>",
        "id": 201884714,
        "sender_full_name": "RalfJ",
        "timestamp": 1593022975
    },
    {
        "content": "<p>It seems like this will have a hard requirement that you <em>have</em> to read in the data exactly once, and not re-read it assuming it'll be the same.</p>",
        "id": 201884725,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593022981
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/213817-t-lang/topic/design.20meeting.20today/near/201884714\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/design.20meeting.20today/near/201884640\">said</a>:</p>\n<blockquote>\n<p>Got it. Why is that a problem, though, as long as we evaluate the read once?</p>\n</blockquote>\n<p>we have to guarantee it is really just evaluated once. currently we can just recompute the constant any time and we know we get the same result.</p>\n</blockquote>\n<p>That makes sense. So, \"read from file in constant\" would have, as a prerequisite, the ability to ensure that a constant (or some portion of a constant) is computed only once and never recomputed.</p>",
        "id": 201884776,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593023017
    },
    {
        "content": "<p>yes. and that throughout the entire crate graph.</p>",
        "id": 201884801,
        "sender_full_name": "RalfJ",
        "timestamp": 1593023038
    },
    {
        "content": "<p>Right.</p>",
        "id": 201884909,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593023085
    },
    {
        "content": "<p>maybe our query system gets us that for free, but I dont know and I dont know if this constraints is something the people working on that system are aware of.</p>",
        "id": 201884930,
        "sender_full_name": "RalfJ",
        "timestamp": 1593023094
    },
    {
        "content": "<p>/me nods</p>",
        "id": 201885129,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593023182
    },
    {
        "content": "<p>ah <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> did we forget to bring up <code>guaranteed_eq</code> or is that not a separate concern?</p>",
        "id": 201885134,
        "sender_full_name": "RalfJ",
        "timestamp": 1593023189
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> slice::len is const on Stable right now, and <code>include_bytes!</code> makes a slice, so we already have the issue with being able to read a file and then make a <code>usize</code> out of it.</p>",
        "id": 201885220,
        "sender_full_name": "Lokathor",
        "timestamp": 1593023237
    },
    {
        "content": "<p>hm... that feels different as this read happens way before CTFE even starts</p>",
        "id": 201885355,
        "sender_full_name": "RalfJ",
        "timestamp": 1593023301
    },
    {
        "content": "<p>Well if you had more power to const compute on file content it's probably sufficient to just have the current set of <code>include</code> macros to build up compile time disk access with</p>",
        "id": 201885443,
        "sender_full_name": "Lokathor",
        "timestamp": 1593023360
    },
    {
        "content": "<p>good point</p>",
        "id": 201885469,
        "sender_full_name": "RalfJ",
        "timestamp": 1593023380
    },
    {
        "content": "<p>Yeah, I would generally expect a compile-time file read to be approximately equivalent to slurping in the whole file via <code>include_bytes!</code> and then reading from the resulting const slice.</p>",
        "id": 201885630,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593023455
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/213817-t-lang/topic/design.20meeting.20today/near/201885443\">said</a>:</p>\n<blockquote>\n<p>Well if you had more power to const compute on file content it's probably sufficient to just have the current set of <code>include</code> macros to build up compile time disk access with</p>\n</blockquote>\n<p>that would also avoid having to do const heap allocations to hold that data</p>",
        "id": 201885687,
        "sender_full_name": "RalfJ",
        "timestamp": 1593023489
    },
    {
        "content": "<p>We might <em>theoretically</em> be able to optimize that to only depend on the bytes actually read, and only need recompiling if <em>those</em> bytes change, but that's an optimization, not a requirement.</p>",
        "id": 201885714,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593023510
    },
    {
        "content": "<p>Does that implementation (making all file reads effectively do <code>include_bytes!</code> underneath) seem like one that could go on the roadmap?</p>",
        "id": 201885853,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593023578
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> would there be a problem with literally using <code>include_bytes!</code> and then \"just\" making all the necessary slice methods const?</p>",
        "id": 201886015,
        "sender_full_name": "RalfJ",
        "timestamp": 1593023648
    },
    {
        "content": "<p>btw this was a great meeting, I had several new insights and ideas just from having to structurally present the problem space :)</p>",
        "id": 201886132,
        "sender_full_name": "RalfJ",
        "timestamp": 1593023698
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> It'd be really nice to be able to write <code>std::fs::File::open(...)</code> and use functions that were written to operate on a <code>File</code>.</p>",
        "id": 201886162,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593023715
    },
    {
        "content": "<p>i think we should improve slices if they're not up to the task</p>",
        "id": 201886218,
        "sender_full_name": "Lokathor",
        "timestamp": 1593023744
    },
    {
        "content": "<p>More the latter than the former, I suppose; it's more about being able to use the same operations at compile-time and runtime.</p>",
        "id": 201886239,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593023761
    },
    {
        "content": "<p>As an example, run-time code may be written to not slurp in the whole file at once, so it reads a chunk at a time.</p>",
        "id": 201886318,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593023792
    },
    {
        "content": "<p>I always write code as operations on slices in memory but i also totally get that past a point it's unreasonable to pull the full file into memory at once</p>",
        "id": 201886382,
        "sender_full_name": "Lokathor",
        "timestamp": 1593023823
    },
    {
        "content": "<p>/me is eagerly awaiting some of the current work to make <code>Read</code> more efficient by not requiring an initialized buffer.</p>",
        "id": 201886425,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593023847
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/design.20meeting.20today/near/201886239\">said</a>:</p>\n<blockquote>\n<p>More the latter than the former, I suppose; it's more about being able to use the same operations at compile-time and runtime.</p>\n</blockquote>\n<p>Slices implement <code>Read</code>, right? or there's an adapter for that?</p>",
        "id": 201886465,
        "sender_full_name": "RalfJ",
        "timestamp": 1593023867
    },
    {
        "content": "<p>/me not even using the Read trait because it's not in core ;_;</p>",
        "id": 201886484,
        "sender_full_name": "Lokathor",
        "timestamp": 1593023878
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> It's certainly possible to rewrite code to use traits that will work at compile time. I'm just suggesting that it'd be nice to be able to take code written to expect <code>File</code> and just run it.</p>",
        "id": 201886626,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593023928
    },
    {
        "content": "<p>But yes, <code>include_bytes!</code> plus const evaluation helps.</p>",
        "id": 201886690,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593023964
    },
    {
        "content": "<p>On a <em>completely</em> different note...</p>",
        "id": 201886706,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593023971
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/design.20meeting.20today/near/201886626\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> It's certainly possible to rewrite code to use traits that will work at compile time. I'm just suggesting that it'd be nice to be able to take code written to expect <code>File</code> and just run it.</p>\n</blockquote>\n<p>yeah... but OTOH much of that API does not make a lot of sense during CTFE I think (unless we also want to allow writes). and I dont think we want to implement this miri-style by hooking C FFI functions... but if we dont we end up with different MIR for const and runtime.</p>",
        "id": 201886760,
        "sender_full_name": "RalfJ",
        "timestamp": 1593023997
    },
    {
        "content": "<p>so basically, using literally <code>File</code> is <em>hard</em>. it is more likely we end up with <code>ConstFile</code>.</p>",
        "id": 201886915,
        "sender_full_name": "RalfJ",
        "timestamp": 1593024053
    },
    {
        "content": "<p>operations that behave differently at compiletime and runtime is another thing we didnt get to today^^</p>",
        "id": 201886990,
        "sender_full_name": "RalfJ",
        "timestamp": 1593024083
    },
    {
        "content": "<p>what if you make ConstFile just be \"token compatible\" with some portion of File</p>",
        "id": 201887004,
        "sender_full_name": "Lokathor",
        "timestamp": 1593024088
    },
    {
        "content": "<p>anyway, I got to go... I'll catch up later</p>",
        "id": 201887022,
        "sender_full_name": "RalfJ",
        "timestamp": 1593024097
    },
    {
        "content": "<p>Hooking C FFI functions doesn't seem right, no. Is there any way to tag the requisite low-level File methods so that MIR could easily implement them differently?</p>",
        "id": 201887023,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593024097
    },
    {
        "content": "<p>(As in, \"I'm calling the OS read method here, but this is the point at which CTFE should hook in and replace this operation\", in a manner comparable to a lang-item?)</p>",
        "id": 201887147,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593024136
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> Thank you for all the work and explanations.</p>",
        "id": 201887178,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593024154
    },
    {
        "content": "<p>We can build a higher level API making certain file methods lang items, we're doing something like that for panicking. The question is mostly whether that's worth it. Sure you can now create a list of files and iterate over it, reading as you go, but since you can't check the file system for listing files in a directory i don't see many gains over a macro based solution which is very well defined already</p>",
        "id": 201895831,
        "sender_full_name": "oli",
        "timestamp": 1593028651
    },
    {
        "content": "<p>In theory, we could allow directory listings too, as long as the compiler treated them the same way: read the whole directory listing, and if it ever changes recompile.</p>",
        "id": 201895939,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593028704
    },
    {
        "content": "<p>I'm not sure how the query system could handle such an input</p>",
        "id": 201896022,
        "sender_full_name": "oli",
        "timestamp": 1593028745
    },
    {
        "content": "<p>Ah, no it can, nevermind</p>",
        "id": 201896070,
        "sender_full_name": "oli",
        "timestamp": 1593028787
    },
    {
        "content": "<p>Instead of <code>include_bytes!</code>, it would be something like <code>include_dir_listing!</code>. :)</p>",
        "id": 201896072,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593028788
    },
    {
        "content": "<p>Or <code>include_file_glob_list!</code>.</p>",
        "id": 201896142,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593028807
    },
    {
        "content": "<p>And you'd get back a <code>&amp;[Path]</code> or similar.</p>",
        "id": 201896161,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593028818
    },
    {
        "content": "<p>Oh i think we could use the libstd methods</p>",
        "id": 201896173,
        "sender_full_name": "oli",
        "timestamp": 1593028830
    },
    {
        "content": "<p>I have ideas now</p>",
        "id": 201896185,
        "sender_full_name": "oli",
        "timestamp": 1593028836
    },
    {
        "content": "<p>:)</p>",
        "id": 201896191,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593028839
    },
    {
        "content": "<p>/me would <em>love</em> to see this, with the compiler handling the \"when does this need rebuilding\" details.</p>",
        "id": 201896227,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593028859
    },
    {
        "content": "<p>I can just see mountains of <code>build.rs</code> scripts evaporating as we speak. ;)</p>",
        "id": 201896251,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593028869
    },
    {
        "content": "<p>But you can only read files in the crate root's dir or subdirs</p>",
        "id": 201896261,
        "sender_full_name": "oli",
        "timestamp": 1593028873
    },
    {
        "content": "<p>Reasonable.</p>",
        "id": 201896280,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593028883
    },
    {
        "content": "<p>(Or files that have been built, I hope. But those details can come later.)</p>",
        "id": 201896297,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593028897
    },
    {
        "content": "<p>Can you open an issue on the const eval repo? (i'm still on mobile). I'll post my ideas there yomorrow</p>",
        "id": 201896426,
        "sender_full_name": "oli",
        "timestamp": 1593028954
    },
    {
        "content": "<p>Sure, I can do that.</p>",
        "id": 201898277,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593029860
    },
    {
        "content": "<p>Should I open one for file read and another for directories, or one for both?</p>",
        "id": 201898307,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593029876
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/const-eval/issues/44\">https://github.com/rust-lang/const-eval/issues/44</a><br>\n<a href=\"https://github.com/rust-lang/const-eval/issues/45\">https://github.com/rust-lang/const-eval/issues/45</a></p>",
        "id": 201907932,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593035232
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> Thank you!</p>",
        "id": 201907942,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593035238
    },
    {
        "content": "<p>Speaking of const stuff, <a href=\"https://github.com/rust-lang/rust/pull/72920\">https://github.com/rust-lang/rust/pull/72920</a> is just waiting for a few T-lang checkboxes to be ticked ;)<br>\nCc <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span></p>",
        "id": 201937936,
        "sender_full_name": "RalfJ",
        "timestamp": 1593068765
    },
    {
        "content": "<p>I edited <a href=\"https://hackmd.io/7BPJmbPuTRKLzNZ5cEQ5MQ\">https://hackmd.io/7BPJmbPuTRKLzNZ5cEQ5MQ</a> a bit</p>",
        "id": 201951978,
        "sender_full_name": "RalfJ",
        "timestamp": 1593080405
    },
    {
        "content": "<p>should this be linked from somewhere so it does not get lost?</p>",
        "id": 201951986,
        "sender_full_name": "RalfJ",
        "timestamp": 1593080420
    },
    {
        "content": "<p>The hackmd should probably either end up in the lang team repo or the const eval repo.</p>",
        "id": 201994198,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593103547
    },
    {
        "content": "<p>I will post it into the lang team repo as minutes</p>",
        "id": 202027477,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593120515
    },
    {
        "content": "<p>I'm about to upload the video</p>",
        "id": 202027481,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593120520
    },
    {
        "content": "<p><a href=\"https://youtu.be/b3p2vX8wZ_c\">video uploading here</a> -- if someone wants to open a PR against lang-team repo to that video, would be great, else I'll try to do it lat now)</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"b3p2vX8wZ_c\" href=\"https://youtu.be/b3p2vX8wZ_c\"><img src=\"https://i.ytimg.com/vi/b3p2vX8wZ_c/default.jpg\"></a></div>",
        "id": 202034489,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593124934
    },
    {
        "content": "<p>Another PR that was mentioned in the design meeting that is waiting for T-lang checkboxes is <a href=\"https://github.com/rust-lang/rust/pull/72920#issuecomment-640694243\">https://github.com/rust-lang/rust/pull/72920#issuecomment-640694243</a> (<code>transmute</code> in constants, but not const fn). There's no reason not to do this, as we already allow unions, so transmute will just give users a more direct way of doing the same thing. Missing checkboxes: <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> <span class=\"user-mention\" data-user-id=\"256759\">@boats</span></p>",
        "id": 202175745,
        "sender_full_name": "oli",
        "timestamp": 1593247830
    },
    {
        "content": "<p>opened a PR with <a href=\"https://github.com/rust-lang/lang-team/pull/30\">minutes taken from the hackmd document</a></p>",
        "id": 202353696,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593457180
    }
]