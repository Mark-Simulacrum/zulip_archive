[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"198054\">@mark-i-m</span> -- I want to circle up on 'or patterns\" for the 2021 Edition</p>",
        "id": 229387253,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615242257
    },
    {
        "content": "<p>Have you thought at all about migration?</p>",
        "id": 229387270,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615242264
    },
    {
        "content": "<p>Have we done crater runs?</p>",
        "id": 229387281,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615242269
    },
    {
        "content": "<p>Hey! I haven't really thought about migration yet, but my initial thoughts are that we would only need migration for macros, right? And there, the main recommendation would be that if it doesn't compile use :pat2018 instead of :pat, I think.</p>",
        "id": 229419758,
        "sender_full_name": "mark-i-m",
        "timestamp": 1615263707
    },
    {
        "content": "<p>I don't think there is any breakage, but the migration hasn't been implemented, so there haven't been any crater runs yet, I think</p>",
        "id": 229419826,
        "sender_full_name": "mark-i-m",
        "timestamp": 1615263762
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198054\">@mark-i-m</span> that sounds right to me. It would be good, I think, for us to do a crater run with what happens if we change the default to <code>pat2021</code>. it may be that we don't need any automated migration and we can get away with some \"compatibility notes\" in the edition migration guide</p>",
        "id": 229479042,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615297800
    },
    {
        "content": "<p>That is my suspicion, in fact.</p>",
        "id": 229479119,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615297818
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> I believe you felt similarly?</p>",
        "id": 229479128,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615297823
    },
    {
        "content": "<p>But i'd feel better if we did a crater run to verify that</p>",
        "id": 229479157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615297831
    },
    {
        "content": "<p>I thought we did do a crater run, originally, and that's what motivated us to add the separate pattern types.</p>",
        "id": 229518028,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615311243
    },
    {
        "content": "<p>Changing the default did break.</p>",
        "id": 229518087,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615311253
    },
    {
        "content": "<p>But yes, I do think that we don't need a complicated migration here. It works in so many cases that for the most part what people will want is to just migrate to the new edition's version of pat.</p>",
        "id": 229518253,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615311308
    },
    {
        "content": "<p>The crater run turned up a small but non-zero number of crates broken by changing the default. Too many to consider changing it without an edition boundary, but not so many that a migration seems critical.</p>",
        "id": 229518490,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615311385
    },
    {
        "content": "<p>Yep, that's correct. We ran a couple of crater runs early on: <a href=\"https://github.com/rust-lang/rust/pull/78935#issuecomment-735050394\">https://github.com/rust-lang/rust/pull/78935#issuecomment-735050394</a> and <a href=\"https://github.com/rust-lang/rust/pull/78935#issuecomment-740696077\">https://github.com/rust-lang/rust/pull/78935#issuecomment-740696077</a></p>",
        "id": 229535967,
        "sender_full_name": "mark-i-m",
        "timestamp": 1615317472
    },
    {
        "content": "<p>The first one just changed :pat to include or-patterns while the second tried to use a fallback plan. In both cases, there was too much complex breakage -- not just syntax errors, but also type errors, borrow check errors, etc... That's why we implemented the :pat2018/21 scheme.</p>",
        "id": 229536244,
        "sender_full_name": "mark-i-m",
        "timestamp": 1615317567
    },
    {
        "content": "<p>(Sorry, I thought you meant crater runs of a migration scheme)</p>",
        "id": 229536303,
        "sender_full_name": "mark-i-m",
        "timestamp": 1615317595
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/or.20patterns/near/229518490\">said</a>:</p>\n<blockquote>\n<p>The crater run turned up a small but non-zero number of crates broken by changing the default. Too many to consider changing it without an edition boundary, but not so many that a migration seems critical.</p>\n</blockquote>\n<p>what is that number? :) I guess I can extract for myself</p>",
        "id": 229578686,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615334360
    },
    {
        "content": "<p>Looks like something in the vinicity of tens of root regressions.</p>",
        "id": 229583128,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615337174
    },
    {
        "content": "<p>Additionally, the breakage was non-trivial: there errors didn't just manifest as syntax errors but also as type mismatches and borrow checker errors sometimes.</p>",
        "id": 231069506,
        "sender_full_name": "mark-i-m",
        "timestamp": 1616178651
    },
    {
        "content": "<p>We discussed this in the 2021 edition meeting and we had two conclusions:</p>\n<ul>\n<li>First, <span class=\"user-mention\" data-user-id=\"198054\">@mark-i-m</span>, can we rename the pattern matcher to <code>pat2015</code> and not <code>pat2018</code>? The convention we've settled on is to name things after the edition where they were <em>first introduced</em>.</li>\n<li>Second, given that, we can go ahead and include <code>pat2015</code> matcher (and the change to <code>pat2021</code> matcher in Rust 2021) in the stabilization. (Before we were concerned because  if we named it <code>pat2018</code> and then it slipped to not have the switch until after Rust 2021, that would be unfortunate, but that's no longer a concern.) This could be a separate PR or added to the existing one. Sorry for the confusion.</li>\n<li>Third, we'd like to try and do a useful migration, I filed <a href=\"https://github.com/rust-lang/rust/issues/83318\">#83318</a> about it and I plan to add some quick mentoring instructions.</li>\n</ul>",
        "id": 231133873,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616231328
    },
    {
        "content": "<p>It's ok <span class=\"user-mention\" data-user-id=\"198054\">@mark-i-m</span> if you don't want to work on <a href=\"https://github.com/rust-lang/rust/issues/83318\">#83318</a>, though if you do that's awesome. Otherwise I think we'll do a call for contribution.</p>",
        "id": 231133886,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616231353
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  Sure I can open a PR to rename :pat2018 -&gt; 2015 and another PR to stabilize it. One question: are we stabilizing only :pat2015 (i.e. not :pat2021 yet)? I suppose that would make the most sense since the edition is not stabilized yet.</p>\n<p>I don't think I will have time to work on a lint, but I'm happy to help review a PR from someone else (and it looks like someone else has already claimed the issue too!)</p>",
        "id": 231351757,
        "sender_full_name": "mark-i-m",
        "timestamp": 1616434215
    },
    {
        "content": "<p>Created <a href=\"https://github.com/rust-lang/rust/pull/83384\">https://github.com/rust-lang/rust/pull/83384</a> to do the renaming</p>",
        "id": 231353752,
        "sender_full_name": "mark-i-m",
        "timestamp": 1616434983
    },
    {
        "content": "<p>Also opened <a href=\"https://github.com/rust-lang/rust/pull/83386\">https://github.com/rust-lang/rust/pull/83386</a></p>",
        "id": 231365055,
        "sender_full_name": "mark-i-m",
        "timestamp": 1616439411
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> was asking why we chose <code>pat2015</code> and <code>pat2021</code> as the names -- as opposed to, say, <code>pat_atom</code> or <code>pat_no_or</code> for <code>pat2015</code> (and no name for <code>pat2021</code>)</p>",
        "id": 231370505,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616441322
    },
    {
        "content": "<p>I don't know if we ever wrote up the bikeshed and reasons behind it?</p>",
        "id": 231370666,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616441342
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"198054\">@mark-i-m</span> !</p>",
        "id": 231370714,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616441356
    },
    {
        "content": "<p>I don't think we ever wrote up the rationale, no. I think the primary rationale was that most people will never need to use either of those, and will instead use :pat. The other matchers will primarily come into play when dealing with edition compatibility issues, in which case it's helpful to have a clear reminder of which one goes with which side of the edition.</p>",
        "id": 231371184,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616441492
    },
    {
        "content": "<p>In particular, people expressed the concern of trying to remember which one :pat translated to.</p>",
        "id": 231371232,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616441518
    },
    {
        "content": "<p>btw, i just noticed that <code>($x:pat | ..)</code> is currently accepted in --edition=2021. it should probably give an error like <code>| not allowed after pat fragments</code>, just like we do for <code>($x:expr + 1)</code></p>",
        "id": 231371935,
        "sender_full_name": "Mara",
        "timestamp": 1616441816
    },
    {
        "content": "<p>that actually might be easy to do as part of implementing the migration</p>",
        "id": 231372587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616442077
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/or.20patterns/near/231371184\">said</a>:</p>\n<blockquote>\n<p>I don't think we ever wrote up the rationale, no. I think the primary rationale was that most people will never need to use either of those, and will instead use :pat. The other matchers will primarily come into play when dealing with edition compatibility issues, in which case it's helpful to have a clear reminder of which one goes with which side of the edition.</p>\n</blockquote>\n<p>I'm not sure if this is 100% true</p>",
        "id": 231372606,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616442087
    },
    {
        "content": "<p>e.g., if you were writing a macro to accept closure syntax, you might do <code>| $x:pat_atom |</code></p>",
        "id": 231372660,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616442109
    },
    {
        "content": "<p>(and many of the regressions had this shape)</p>",
        "id": 231372732,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616442124
    },
    {
        "content": "<p>playing around now with that error/lint for a <code>|</code> after <code>:pat</code>. and i'm wondering if we could just make the behaviour of <code>:pat</code> depend on whether there's a <code>|</code> afterwards or not</p>",
        "id": 231387181,
        "sender_full_name": "Mara",
        "timestamp": 1616448226
    },
    {
        "content": "<p>such that<code>| $x:pat |</code> will not match <code>|</code>s in the pattern, but <code>$x:pat =</code> will.</p>",
        "id": 231387185,
        "sender_full_name": "Mara",
        "timestamp": 1616448228
    },
    {
        "content": "<p>then we don't need any edition change/lint/migration. I wonder if there's anything that would still break</p>",
        "id": 231387435,
        "sender_full_name": "Mara",
        "timestamp": 1616448347
    },
    {
        "content": "<p>That seems really fiddly to me. Especially if there are other macros and other matchers involved.</p>",
        "id": 231389073,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616449205
    },
    {
        "content": "<p>is it? the result is pretty simple: if you write a <code>|</code> after your <code>pat</code>, parsing the <code>pat</code> effectively just stops at <code>|</code>, exactly like you wrote/expect. otherwise it does not.</p>",
        "id": 231389590,
        "sender_full_name": "Mara",
        "timestamp": 1616449506
    },
    {
        "content": "<p><code>$x:pat =</code>: \"give me the <code>pat</code> before the <code>=</code>\"</p>\n<p><code>$x:pat |</code>: \"give me the <code>pat</code> before the <code>|</code>\"</p>",
        "id": 231389726,
        "sender_full_name": "Mara",
        "timestamp": 1616449563
    },
    {
        "content": "<p>It would have to handle repetition too, like <code>$( $x:pat )|+</code> or <code>$x:pat $( | )?</code></p>",
        "id": 231390509,
        "sender_full_name": "cuviper",
        "timestamp": 1616449939
    },
    {
        "content": "<p>which might be fine, but more complicated</p>",
        "id": 231390561,
        "sender_full_name": "cuviper",
        "timestamp": 1616449967
    },
    {
        "content": "<p>yeah, but we already handle that anyway for the 'may not be followed by' lint.</p>",
        "id": 231390825,
        "sender_full_name": "Mara",
        "timestamp": 1616450119
    },
    {
        "content": "<p>For the example of <code>| $x:pat_atom |</code> for closure syntax, what about the case where you want a pattern not containing a <code>|</code>, but nested patterns can contain <code>|</code> (for example <code>(pat1 | pat2,)</code>)? I would assume from the name that <code>:pat2015</code> does not permit <code>|</code> anywhere in the term</p>",
        "id": 231393508,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616451540
    },
    {
        "content": "<p>(actually it looks like <span class=\"user-mention silent\" data-user-id=\"310399\">Mara</span> 's proposal solves that issue, with just <code>$x:pat</code>)</p>",
        "id": 231393612,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616451625
    },
    {
        "content": "<p>I suspect it <em>could</em> be made to work; I'm not doubtful that it could be done.</p>",
        "id": 231395022,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616452482
    },
    {
        "content": "<p>My bigger concern is that this kind of \"context-dependent\" matcher seems more error-prone to work with.</p>",
        "id": 231395118,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616452542
    },
    {
        "content": "<p>its contextdependendness is pretty much just an implementation detail then. effectively it just means <code>:pat</code> is no longer greedy w.r.t. to <code>|</code>, which seems like a straight forward concept</p>",
        "id": 231395762,
        "sender_full_name": "Mara",
        "timestamp": 1616452957
    },
    {
        "content": "<p>does that non-greediness also fall through on macro rules?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">is_pat</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$x</span>:<span class=\"nc\">pat</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$($x</span>:<span class=\"nc\">tt</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 231396585,
        "sender_full_name": "cuviper",
        "timestamp": 1616453417
    },
    {
        "content": "<p>I'm not sure that that is an example of greedy matching; it would have to match all <code>|</code> in that example but there's not much else it could do</p>",
        "id": 231396794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616453530
    },
    {
        "content": "<p><code>is_pat!(0 | 1)</code> is currently <code>false</code></p>",
        "id": 231396849,
        "sender_full_name": "cuviper",
        "timestamp": 1616453564
    },
    {
        "content": "<p>oh I see, you want something that has that exact behavior</p>",
        "id": 231396896,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616453597
    },
    {
        "content": "<p>I don't necessarily want to make that, per se, but it's an example that might be affected by the proposal</p>",
        "id": 231396964,
        "sender_full_name": "cuviper",
        "timestamp": 1616453641
    },
    {
        "content": "<p>ah yes. that would be different. interesting</p>",
        "id": 231397031,
        "sender_full_name": "Mara",
        "timestamp": 1616453663
    },
    {
        "content": "<p>I mean, we would have to have some alternative for the edition migration</p>",
        "id": 231397036,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616453665
    },
    {
        "content": "<p>I think it makes sense to have a separate syntax class for <code>pat_atom</code> since it is actually a separate nonterminal in the CFG</p>",
        "id": 231397143,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616453754
    },
    {
        "content": "<p>although having <code>$x:pat |</code> automatically act like <code>$x:pat_atom |</code> (possibly even as a desugaring) also sounds convenient</p>",
        "id": 231397249,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616453806
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> <a href=\"#narrow/stream/213817-t-lang/topic/or.20patterns/near/231396964\">said</a>:</p>\n<blockquote>\n<p>I don't necessarily want to make that, per se, but it's an example that might be affected by the proposal</p>\n</blockquote>\n<p>It's also a good example of why we cannot have a <em>full</em> migration via rustfix, because we can't in general know if people's code depends on <code>:pat</code> not matching <code>|</code> patterns.</p>",
        "id": 231397479,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616453948
    },
    {
        "content": "<p>Any migration we do via rustfix will always be best-effort.</p>",
        "id": 231397497,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616453959
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/213817-t-lang/topic/or.20patterns/near/231397249\">said</a>:</p>\n<blockquote>\n<p>although having <code>$x:pat |</code> automatically act like <code>$x:pat_atom |</code> (possibly even as a desugaring) also sounds convenient</p>\n</blockquote>\n<p>We could provide an error with rustfix for that. \"You're trying to match a pattern followed by a <code>|</code>, but patterns can match <code>|</code>; try using <code>pat2015</code>\".</p>",
        "id": 231397606,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616454016
    },
    {
        "content": "<p>If the <code>pat_atom</code> matcher exists this can be mostly handled, although assuming that <code>((x | y),)</code> matches <code>pat_atom</code> in 2021 then that would cause an incompatibility anyway</p>",
        "id": 231397699,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616454053
    },
    {
        "content": "<p>But I don't think this level of compatibility is worth it for macros in the 2021 edition; surely we want people to just accept that <code>|</code> is a part of pattern syntax rather than carving out a subset that omits <code>|</code> even inside parentheses</p>",
        "id": 231398137,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616454280
    },
    {
        "content": "<p>If someone really needs this they can still write the macro in a crate in 2018 edition</p>",
        "id": 231398182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616454315
    },
    {
        "content": "<p>(or can they? Do 2018 macros use 2021 macro matchers when used on 2021 code?)</p>",
        "id": 231398245,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616454353
    },
    {
        "content": "<p>it should use 2018 matchers if it was defined in a 2021 crate, even when used in a 2021 crate. but i'm not sure if we actually have a test for that.</p>",
        "id": 231398954,
        "sender_full_name": "Mara",
        "timestamp": 1616454819
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310399\">Mara</span> <a href=\"#narrow/stream/213817-t-lang/topic/or.20patterns/near/231398954\">said</a>:</p>\n<blockquote>\n<p>it should use 2018 matchers if it was defined in a 2021 crate,</p>\n</blockquote>\n<p>is that a typo? the matcher corresponds to the definition crate, right?</p>",
        "id": 231400038,
        "sender_full_name": "cuviper",
        "timestamp": 1616455482
    },
    {
        "content": "<p>That seems like it could be problematic in general, for example it would be weird for a 2015 macro <code>id!($x:expr) = $x</code> to reject something like <code>id!({ let x = y?; z })</code> in a 2018 crate since the inner code is still considered as 2018 code, right?</p>",
        "id": 231401186,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616456264
    },
    {
        "content": "<p>that is, if we interpret the matcher as <code>expr2015</code> then we would have to reject all productions not present in 2015, such as postfix <code>?</code></p>",
        "id": 231401325,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616456370
    },
    {
        "content": "<p>how deep do you take that? right now it seems  <em>nested</em> or-patterns are accepted in the old edition, e.g. <code>is_pat!(Some(0 | 1))</code> is <code>true</code>, or even just <code>is_pat!((0 | 1))</code></p>",
        "id": 231401642,
        "sender_full_name": "cuviper",
        "timestamp": 1616456567
    },
    {
        "content": "<p>Personally, I think that there should be <code>pat</code> and <code>pat_atom</code> (modulo bikeshedding), and both should accept or-patterns inside parentheses; <code>pat</code> in 2018 macros should match <code>pat_atom</code> in 2021 crates</p>",
        "id": 231405140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616459006
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> oh yeah, that's a typo. should be \"if it was defined in a 2018 crate, even when used in a 2021 crate\"</p>",
        "id": 231437125,
        "sender_full_name": "Mara",
        "timestamp": 1616488746
    },
    {
        "content": "<p>I'd rather not create a new kind of context dependent matcher</p>",
        "id": 231496239,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616515461
    },
    {
        "content": "<p>I think that adding <code>pat_atom</code> is a better idea</p>",
        "id": 231496258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616515468
    },
    {
        "content": "<p>and making it an error for <code>|</code> to be in the follow set of <code>pat</code></p>",
        "id": 231496306,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616515486
    },
    {
        "content": "<p>I would prefer (as a user) to be explicit about this</p>",
        "id": 231496374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616515508
    },
    {
        "content": "<p>also I think it's the opposite direction of how fragments ought to go</p>",
        "id": 231496434,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616515526
    },
    {
        "content": "<p>which is probably to be more blindly greedy so they are more future proof :)</p>",
        "id": 231496453,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616515532
    },
    {
        "content": "<p>sounds good</p>",
        "id": 231512768,
        "sender_full_name": "Mara",
        "timestamp": 1616521516
    },
    {
        "content": "<p>We tried to implement a context dependent <code>pat</code> matcher in <a href=\"https://github.com/rust-lang/rust/pull/78935\">https://github.com/rust-lang/rust/pull/78935</a>, it didn't work out.<br>\nI thought those experiments were the reason why <code>pat_(2015,2021)</code> were introduced in the first place, so I'm not sure why it's discussed again now.</p>",
        "id": 231518565,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1616523696
    },
    {
        "content": "<p>Although it is unfortunate that all the heuristics for the context dependent <code>pat</code> will end up in the compiler anyway due to the proposed migration lint.</p>",
        "id": 231518836,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1616523833
    },
    {
        "content": "<p>the compiler already checks what follows a fragment anyway, so that doesn't even require new code. it just needs to produce the migration lint there.</p>",
        "id": 231519439,
        "sender_full_name": "Mara",
        "timestamp": 1616524072
    },
    {
        "content": "<p>I created a draft PR: <a href=\"https://github.com/rust-lang/rust/pull/83468\">https://github.com/rust-lang/rust/pull/83468</a>, but it seems we need to add pat_atom instead of adding lint?</p>",
        "id": 231975033,
        "sender_full_name": "hi-rustin",
        "timestamp": 1616769419
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 231976089,
        "sender_full_name": "hi-rustin",
        "timestamp": 1616769745
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"296292\">@Rustin Liu</span> let me take a look -- I think it's kind of orthogonal</p>",
        "id": 232004809,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616780097
    },
    {
        "content": "<p>I don't know why <a href=\"https://github.com/rust-lang/rust/pull/83468#issuecomment-808651817\">https://github.com/rust-lang/rust/pull/83468#issuecomment-808651817</a> is failing, can anyone help? Why does the allowed lint come up too?</p>",
        "id": 232063984,
        "sender_full_name": "hi-rustin",
        "timestamp": 1616820978
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296292\">Rustin Liu</span> <a href=\"#narrow/stream/213817-t-lang/topic/or.20patterns/near/232063984\">said</a>:</p>\n<blockquote>\n<p>I don't know why <a href=\"https://github.com/rust-lang/rust/pull/83468#issuecomment-808651817\">https://github.com/rust-lang/rust/pull/83468#issuecomment-808651817</a> is failing, can anyone help? Why does the allowed lint come up too?</p>\n</blockquote>\n<p>Fixed.</p>",
        "id": 232073450,
        "sender_full_name": "hi-rustin",
        "timestamp": 1616832207
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"296292\">@Rustin Liu</span> the error is because the test is marked as \"run-fail\", and yet it does not panic at runtime</p>",
        "id": 232076352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616835734
    },
    {
        "content": "<p>I would suggest you add a <code>#![deny(or_patterns_back_compat)]</code> and then make the test <code>compile-fail</code></p>",
        "id": 232076366,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616835757
    },
    {
        "content": "<p>(and run <code>--bless</code>)</p>",
        "id": 232076369,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616835760
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/or.20patterns/near/232076352\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"296292\">Rustin Liu</span> the error is because the test is marked as \"run-fail\", and yet it does not panic at runtime</p>\n</blockquote>\n<p>Are you talking about the new error reporting? I'm talking about the old error.</p>",
        "id": 232076521,
        "sender_full_name": "hi-rustin",
        "timestamp": 1616835950
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/83468\">https://github.com/rust-lang/rust/pull/83468</a> Ready for review. Could you please take a look? Also I would like to ask if I can request a code review at zulip? Will it bother you?</p>",
        "id": 232080869,
        "sender_full_name": "hi-rustin",
        "timestamp": 1616841214
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296292\">Rustin Liu</span> <a href=\"#narrow/stream/213817-t-lang/topic/or.20patterns/near/232080869\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/pull/83468\">https://github.com/rust-lang/rust/pull/83468</a> Ready for review. Could you please take a look? Also I would like to ask if I can request a code review at zulip? Will it bother you?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  Could you please take a look?</p>",
        "id": 232270404,
        "sender_full_name": "hi-rustin",
        "timestamp": 1617025671
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"296292\">@Rustin Liu</span> I have no objection to being pinged on zulip :)</p>",
        "id": 232282784,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617030193
    },
    {
        "content": "<p>will take a look!</p>",
        "id": 232282798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617030194
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'm adding the corresponding auto-suggestion as you requested, but I don't know how to get only the span of the pattern in $pat:pat in that place, do you have any suggestions? Also is it appropriate to use <code>pat</code> for our span in this place? Because I think this is a problem only when <code>pat</code> and <code>|</code> come together.</p>",
        "id": 232410192,
        "sender_full_name": "hi-rustin",
        "timestamp": 1617103926
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"296292\">@Rustin Liu</span> let me take a look :)</p>",
        "id": 232453447,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617120985
    },
    {
        "content": "<p>I guess if you have <code>$foo:pat</code>, then span is the entire <code>$foo:pat</code>, right?</p>",
        "id": 232453591,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617121050
    },
    {
        "content": "<p>one easy thing would be to construct a replacement using the name etc</p>",
        "id": 232453862,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617121167
    },
    {
        "content": "<p>e.g., instead of replacing with \"pat2015\", replace with <code>$foo:pat2015</code></p>",
        "id": 232453908,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617121182
    },
    {
        "content": "<p>there might be a \"pretty print\" option where you could construct a <code>TokenTree::MetaVarDecl(spa, ident, Some(Pat2015))</code> and pretty print it, but I can't figure out what that is based on some quick rip-grep'ing...</p>",
        "id": 232456390,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617122097
    },
    {
        "content": "<p>there is <a href=\"https://github.com/rust-lang/rust/blob/9d7126b6def686536f77164356e1ed23cc94de24/compiler/rustc_expand/src/mbe/macro_rules.rs#L1160-L1172\">this function</a></p>",
        "id": 232456586,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617122165
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/or.20patterns/near/232453908\">said</a>:</p>\n<blockquote>\n<p>e.g., instead of replacing with \"pat2015\", replace with <code>$foo:pat2015</code></p>\n</blockquote>\n<p>I have solved the problem with your suggestion. Thanks for your reply. Also I have added more test cases.</p>",
        "id": 232537257,
        "sender_full_name": "hi-rustin",
        "timestamp": 1617167155
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"296292\">@Rustin Liu</span> great!</p>",
        "id": 232627153,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617209971
    },
    {
        "content": "<p>I want to kick off bikeshedding about what to call <code>pat2015</code> -- <a href=\"https://github.com/rust-lang/rust/pull/83386#issuecomment-812200554\">see my write-up here</a>, <span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> was arguing against <code>pat2015</code>/<code>pat2021</code> and I found the argument reasonably compelling (tl;dr, there is still a valid reason to use <code>pat2015</code>, shouldn't we give it a non-edition-based name, I think?)</p>",
        "id": 232832904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617315475
    },
    {
        "content": "<p>I just posted a comment there. I would propose that we keep the name <code>pat2015</code> for the purposes of edition migration, and if it turns out people also want it in current editions for other purposes, we can introduce an alias.</p>",
        "id": 232834225,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617316276
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"296292\">@Rustin Liu</span> -- I was curious if you would like to fix <a href=\"https://github.com/rust-lang/rust/issues/84138\">https://github.com/rust-lang/rust/issues/84138</a> as follow-up to your PR</p>",
        "id": 234213086,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618254396
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/or.20patterns/near/234213086\">said</a>:</p>\n<blockquote>\n<p>Hey <span class=\"user-mention silent\" data-user-id=\"296292\">Rustin Liu</span> -- I was curious if you would like to fix <a href=\"https://github.com/rust-lang/rust/issues/84138\">https://github.com/rust-lang/rust/issues/84138</a> as follow-up to your PR</p>\n</blockquote>\n<p>I will fix it.</p>",
        "id": 234258736,
        "sender_full_name": "hi-rustin",
        "timestamp": 1618280698
    }
]