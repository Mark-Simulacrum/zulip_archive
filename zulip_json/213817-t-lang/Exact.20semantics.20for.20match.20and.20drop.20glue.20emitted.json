[
    {
        "content": "<p>This is originated from <code>~const Drop</code>, but is applicable to non-const functions as well. The problem is best seen as the MIR output for two implementations of <code>Result::ok</code> with a minor change: (<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=a208ee8b303c7a3cf2685ad9f259c8f8\">play</a>)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">wildcard</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bind_to_variable</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">_x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I won't post the whole MIR output here, but let me illustrate this issue with a handwritten control flow graph:</p>\n<div class=\"codehilite\"><pre><span></span><code>           wildcard\n              |\nswitch on discriminant for `x` ------------ `Ok`\n              |                              |\n            `Err`          Move `x` into return value as `Some(x)`\n              |                              |\nSet return value as `None`                   /\n              |------------------------------\n              |\nswitch on discriminant for `x` ------------ `Ok`\n              |                              |\n            `Err`                            |\n              |                              |\n    `drop(x: Result&lt;T, E&gt;)`                  /\n              |------------------------------\n              |\n            return\n\n\n\n       bind_to_variable\n              |\nswitch on discriminant for `x` ------------- `Ok`\n              |                               |\n            `Err`          Move `x` into return value as `Some(x)`\n              |                               |\n   Move value in `Err` to `_x`                |\n              |                               |\n        `drop(_x: E)`                         |\n              |                               |\n    Set return value as `None`                /\n              |-------------------------------\n              |\n            return\n</code></pre></div>\n<p><code>wildcard</code> is unexpectedly more complex and performs <code>switchInt</code> on <code>x</code> for two times instead of one. Are there are previous discussions/documentation for this behavior? It could be a breaking change but wouldn't it be better if we just generated code as the second graph instead?</p>",
        "id": 266517903,
        "sender_full_name": "fee1-dead",
        "timestamp": 1640976026
    },
    {
        "content": "<p>This does not look like a breaking change to me</p>",
        "id": 266518221,
        "sender_full_name": "Jake",
        "timestamp": 1640976598
    },
    {
        "content": "<p>Any type that takes the place of <code>Result</code> in this sort of thing can't be <code>Drop</code>, because it's being destructured, so dropping <code>Err(e)</code> is exactly equivalent to dropping <code>e</code></p>",
        "id": 266518294,
        "sender_full_name": "Jake",
        "timestamp": 1640976673
    }
]