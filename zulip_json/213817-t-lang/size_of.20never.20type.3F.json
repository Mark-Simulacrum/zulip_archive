[
    {
        "content": "<p>Is it weird that <code>size_of::&lt;!&gt;()</code> is 0? It just occurs to me that size_of normally can't be called on types that aren't Sized, and I think(?) that <code>!</code> isn't Sized, and yet as the bottom type I'm not sure if it makes sense to exclude it from anything? I can't think of any concrete risk, I'm just being wary.</p>",
        "id": 245624420,
        "sender_full_name": "bstrie",
        "timestamp": 1626034468
    },
    {
        "content": "<p><code>!: Sized</code> is satisfied.</p>",
        "id": 245624566,
        "sender_full_name": "bjorn3",
        "timestamp": 1626034696
    },
    {
        "content": "<p>An empty type can even have a non-zero size I think. Eg <code>struct Foo([u8; 16], !)</code> is 16 bytes I think.</p>",
        "id": 245624581,
        "sender_full_name": "bjorn3",
        "timestamp": 1626034750
    },
    {
        "content": "<p>Ah, good point. Is <code>!: Sized</code> because it actually implements Sized, or is it because as the bottom type it implicitly satisfies everything? I don't see the usual blanket impls that I would expect on Sized types, e.g. the docs don't show the <code>impl&lt;T: ?Sized&gt; Borrow&lt;T&gt; for T</code>. But I guess I also don't understand why <code>!</code> has to have explicit implementations for <code>Clone</code>, <code>Display</code>, etc</p>",
        "id": 245624859,
        "sender_full_name": "bstrie",
        "timestamp": 1626035171
    },
    {
        "content": "<p>Sized is an auto trait, so <code>!</code> doesn't need to explicitly implement it.</p>",
        "id": 245625441,
        "sender_full_name": "bjorn3",
        "timestamp": 1626036058
    },
    {
        "content": "<p>There were proposals to make size_of::&lt;!&gt; a negative infinity, represented in whatever way, at some point.</p>",
        "id": 245625448,
        "sender_full_name": "nagisa",
        "timestamp": 1626036094
    },
    {
        "content": "<p>that'd be a good april fools day RFC, change size_of to return a float :)</p>",
        "id": 245625504,
        "sender_full_name": "bstrie",
        "timestamp": 1626036142
    },
    {
        "content": "<p>the thing is, whether ! is Sized or not doesn't really matter all that much</p>",
        "id": 245625569,
        "sender_full_name": "nagisa",
        "timestamp": 1626036255
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/213817-t-lang/topic/size_of.20never.20type.3F/near/245625441\">said</a>:</p>\n<blockquote>\n<p>Sized is an auto trait, so <code>!</code> doesn't need to explicitly implement it.</p>\n</blockquote>\n<p>I think it's something even more magical than an auto trait, Unpin is defined as <code>pub auto trait Unpin</code> but Sized is just <code>pub trait Sized</code></p>",
        "id": 245625595,
        "sender_full_name": "bstrie",
        "timestamp": 1626036302
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/213817-t-lang/topic/size_of.20never.20type.3F/near/245625569\">said</a>:</p>\n<blockquote>\n<p>the thing is, whether ! is Sized or not doesn't really matter all that much</p>\n</blockquote>\n<p>Wouldn't it matter for things like <code>Result&lt;u32, !&gt;</code>? If it wasn't sized the enum here wouldn't be sized either which means you couldn't pass it by value right?</p>",
        "id": 245625619,
        "sender_full_name": "Lukas Wirth",
        "timestamp": 1626036345
    },
    {
        "content": "<p><code>!</code> works on a different layer than sizes: an uninhabited type can have a size but all bit patterns of that size are invalid for that type.</p>",
        "id": 245625670,
        "sender_full_name": "Amanieu",
        "timestamp": 1626036400
    },
    {
        "content": "<p>On one hand yeah, on the other you could argue that since the variants with <code>!</code> aren't constructible, they shouldn't be considered for the purposes of determining the containers' sizedness.</p>",
        "id": 245625677,
        "sender_full_name": "nagisa",
        "timestamp": 1626036414
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300586\">@Lukas Wirth</span> Enums with unsized fields aren't even allowed at all.</p>",
        "id": 245625692,
        "sender_full_name": "bjorn3",
        "timestamp": 1626036441
    },
    {
        "content": "<p>but all things considered <code>!: Sized</code> makes things overall significantly less hacky, probably?</p>",
        "id": 245625693,
        "sender_full_name": "nagisa",
        "timestamp": 1626036442
    },
    {
        "content": "<p><code>!</code>  should be as unsurprising as possible: it should be identical to <code>()</code> in every way except that it has no valid values instead of just one.</p>",
        "id": 245625742,
        "sender_full_name": "Amanieu",
        "timestamp": 1626036491
    },
    {
        "content": "<p>So <code>!</code> would be <code>Sized</code> and <code>Copy</code>, and it wouldn't matter since you'd never get around to creating a value to copy.</p>",
        "id": 245625751,
        "sender_full_name": "Amanieu",
        "timestamp": 1626036523
    },
    {
        "content": "<p><code>MaybeUninit&lt;!&gt;</code> exists and has size 0 (It can store a single value, <code>MaybeUninit::uninit()</code>, though you could argue that <code>MaybeUnini::zeroed()</code> is distinct). Because <code>MaybeUninit&lt;T&gt;</code> has the same size and alignment as <code>T</code>, then <code>!</code> must also have size 0.</p>",
        "id": 245629847,
        "sender_full_name": "Connor Horman",
        "timestamp": 1626041526
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/213817-t-lang/topic/size_of.20never.20type.3F/near/245624581\">said</a>:</p>\n<blockquote>\n<p>An empty type can even have a non-zero size I think. Eg <code>struct Foo([u8; 16], !)</code> is 16 bytes I think.</p>\n</blockquote>\n<p>See also <a href=\"https://github.com/rust-lang/rust/issues/54987\">https://github.com/rust-lang/rust/issues/54987</a> for why it really needs to be nonzero size. The <code>!</code> type really needs to be a regular ZST, not a magic negative infinity size type that ZSTs anything it is tupled with, because of partial initialization. It's not a slam dunk argument because this is not allowed today and I don't know whether it will become safe in the future:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"p\">([</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">x</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"k\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>But especially for generic code, one really would like this to work:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(never_type)]</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[repr(C)]</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">([</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">MaybeUninit</span>::<span class=\"o\">&lt;</span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">uninit</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">field</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ptr</span>::<span class=\"n\">addr_of_mut</span><span class=\"o\">!</span><span class=\"p\">((</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">as_mut_ptr</span><span class=\"p\">()).</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">field</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"k\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">field</span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">foo</span>::<span class=\"o\">&lt;!&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 245646157,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626066911
    },
    {
        "content": "<p>It seems reasonable enough to me (a bystander) that something which can't be represented in actuality has a size of 0.</p>",
        "id": 245720271,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1626111457
    }
]