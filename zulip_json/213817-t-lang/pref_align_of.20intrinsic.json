[
    {
        "content": "<p>Is there any reason that the pref_align_of intrinsic still exists? It has never been stably exposed and I am not aware of any road to stabilization. It also <a href=\"https://github.com/rust-lang/rust/pull/88839#discussion_r706793496\">occasionally causes confusion</a>.<br>\nCc <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span></p>",
        "id": 253662741,
        "sender_full_name": "RalfJ",
        "timestamp": 1631832563
    },
    {
        "content": "<p>we should be using preferred alignment for stuff like globals and whatnot, AFAIK.</p>",
        "id": 253668139,
        "sender_full_name": "nagisa",
        "timestamp": 1631836090
    },
    {
        "content": "<p>though that's an entirely a codegen concern.</p>",
        "id": 253668156,
        "sender_full_name": "nagisa",
        "timestamp": 1631836107
    },
    {
        "content": "<p>yeah I have not checked about the use of <code>align.pref</code> inside rustc itself. this is solely about whether it is worth exposing it to the Rust application.</p>",
        "id": 253671295,
        "sender_full_name": "RalfJ",
        "timestamp": 1631838429
    },
    {
        "content": "<p>or whether it is time to deprecate and remove this ancient intrinsic with no clear path or proposal for stabilization</p>",
        "id": 253671318,
        "sender_full_name": "RalfJ",
        "timestamp": 1631838457
    },
    {
        "content": "<p>I can't really think of much code that would need it beyond code doing platform specific optimizations (in which case, you probably know and or could figure out the abi-preffered alignment).</p>",
        "id": 253671525,
        "sender_full_name": "Connor Horman",
        "timestamp": 1631838603
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/213817-t-lang/topic/pref_align_of.20intrinsic/near/253671295\">said</a>:</p>\n<blockquote>\n<p>yeah I have not checked about the use of <code>align.pref</code> inside rustc itself. this is solely about whether it is worth exposing it to the Rust application.</p>\n</blockquote>\n<p>Currently it's only used by cg_clif for globals (explicitly).</p>",
        "id": 253673225,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631839987
    },
    {
        "content": "<p>I suppose we could use it to guide field placement, e.g. place fields with larger preferred alignment first (if the abi alignment is the same)</p>",
        "id": 253673567,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631840262
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I've always assumed <em>memory allocators</em> would use that, but in practice it doesn't seem to be the case (maybe it would be wasteful?)</p>",
        "id": 253827961,
        "sender_full_name": "eddyb",
        "timestamp": 1631928431
    },
    {
        "content": "<p>Allocators only get the abi alignment though, unless we want to augment <code>Layout</code> to add that (which I don't think we want).</p>",
        "id": 253838714,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631940336
    },
    {
        "content": "<p>For reference, gcc/clang has a non-standard <code>__alignof__/__alignof</code> that returns the preferred alignment and the standard <code>alignof</code> that returns the ABI alignment, and the <code>operator new</code> only receive size and the ABI alignment.</p>",
        "id": 253838896,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631940558
    },
    {
        "content": "<p>Ah, one more thing worth mentioning. Since memory returned by <code>malloc</code> has an alignment that suits all primitives, and user couldn't specify preferred alignment separately from the ABI alignment, these means that memory returned by the system allocator would actually be aligned to the preferred alignment as well.</p>",
        "id": 253839423,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631941110
    },
    {
        "content": "<p>So pretty much this is only useful for globals or stack variables.</p>",
        "id": 253839442,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631941147
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303710\">Gary Guo</span> <a href=\"#narrow/stream/213817-t-lang/topic/pref_align_of.20intrinsic/near/253838714\">said</a>:</p>\n<blockquote>\n<p>Allocators only get the abi alignment though, unless we want to augment <code>Layout</code> to add that (which I don't think we want).</p>\n</blockquote>\n<p>Wouldn't that merely be a <code>Layout::preferred::&lt;T&gt;()</code> constructor?</p>",
        "id": 253839861,
        "sender_full_name": "Connor Horman",
        "timestamp": 1631941545
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"257758\">Connor Horman</span> <a href=\"#narrow/stream/213817-t-lang/topic/pref_align_of.20intrinsic/near/253839861\">said</a>:</p>\n<blockquote>\n<p>Wouldn't that merely be a <code>Layout::preferred::&lt;T&gt;()</code> constructor?</p>\n</blockquote>\n<p>Could be, but then you will have to use the same layout for deallocation as well, so it wouldn't fit existing pointers like <code>Box</code> or dynamically sized types (well, unless we add preferred alignment to vtable).</p>",
        "id": 253840174,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631941908
    },
    {
        "content": "<p>But then as I pointed out doing this for system allocator is not very useful. Could be useful for other Rust-specific allocators that don't want to provide <code>malloc</code>, but I suppose those allocators could simply max the alignment with the max preferred alignment of primitives.</p>",
        "id": 253840285,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631942025
    },
    {
        "content": "<p>So I'd support removing the intrinsic (but keep it in the compiler for codegen)</p>",
        "id": 253840447,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631942177
    },
    {
        "content": "<p>alright, that sounds good to me</p>",
        "id": 253849577,
        "sender_full_name": "eddyb",
        "timestamp": 1631952086
    },
    {
        "content": "<p>unless there's maybe some tricky FFI situation that would be hard/impossible to solve in the general case, without that information (cc <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span>)</p>",
        "id": 253849661,
        "sender_full_name": "eddyb",
        "timestamp": 1631952170
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303710\">Gary Guo</span> <a href=\"#narrow/stream/213817-t-lang/topic/pref_align_of.20intrinsic/near/253840447\">said</a>:</p>\n<blockquote>\n<p>So I'd support removing the intrinsic (but keep it in the compiler for codegen)</p>\n</blockquote>\n<p>\"it\" here being the align.pref information, not the codegen part of the intrinsic, correct?</p>",
        "id": 253875016,
        "sender_full_name": "RalfJ",
        "timestamp": 1631978290
    },
    {
        "content": "<p>yep</p>",
        "id": 253888295,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631992978
    },
    {
        "content": "<p>FYI: c2rust transpiler uses pref_align_of intrinsic</p>",
        "id": 253929739,
        "sender_full_name": "tm",
        "timestamp": 1632041290
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"352985\">tm</span> <a href=\"#narrow/stream/213817-t-lang/topic/pref_align_of.20intrinsic/near/253929739\">said</a>:</p>\n<blockquote>\n<p>FYI: c2rust transpiler uses pref_align_of intrinsic</p>\n</blockquote>\n<p>Not sure what your GH handle is, so let me point you to <a href=\"https://github.com/rust-lang/rust/pull/90877\">https://github.com/rust-lang/rust/pull/90877</a> this way -- I am proposing to remove that intrinsic, since it does not seem to have any path to stabilization.</p>",
        "id": 261381027,
        "sender_full_name": "RalfJ",
        "timestamp": 1636839203
    }
]