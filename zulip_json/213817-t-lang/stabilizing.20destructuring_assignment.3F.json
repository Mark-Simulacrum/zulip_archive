[
    {
        "content": "<p>aside from documentation, is there anything left prior to stabilization of destructuring_assignment? <a href=\"https://github.com/rust-lang/rust/issues/71126\">https://github.com/rust-lang/rust/issues/71126</a></p>",
        "id": 235252720,
        "sender_full_name": "bstrie",
        "timestamp": 1618867560
    },
    {
        "content": "<p>I'm looking, and I don't see a stabilization report.</p>",
        "id": 235254149,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1618868271
    },
    {
        "content": "<p>ah, I thought that was something that happened coterminously with the fcp</p>",
        "id": 235254948,
        "sender_full_name": "bstrie",
        "timestamp": 1618868721
    },
    {
        "content": "<p>Normally we want the stabilization report before starting the FCP.</p>",
        "id": 235266065,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1618875395
    },
    {
        "content": "<p>I'm curious how this interacts with <code>let $pat = $expr else { ... }</code>. Would we want to support this with destructuring assignments as well?</p>",
        "id": 235318711,
        "sender_full_name": "Amanieu",
        "timestamp": 1618913404
    },
    {
        "content": "<p>I personally believe that the generalization to \"branched\" assignments would be to feature <code>in</code> patterns.<br>\nGranted, it would allow writing <code>let in x = …;</code> for the same semantics as <code>x = …;</code>, but that's already the case with <code>ref</code> (<code>let ref x = …;</code> <em>vs.</em> <code>let x = &amp;…;</code>), and it would require a keyword, albeit a very intuitive one.<br>\nIt would, however, avoid having to write that ugly <code>Pat(binding_) =&gt; { binding = binding_; … }</code>.</p>",
        "id": 235324889,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1618916964
    }
]