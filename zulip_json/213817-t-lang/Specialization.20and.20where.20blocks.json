[
    {
        "content": "<p>Currently specialization is defined at item+associated item/instance level, and is mainly used for performance optimization.</p>\n<p>I'm curious though, i think the same effect can be achieved easier with in the function body, with a fictional \"where block\" expression syntax that looks a little like <code>if</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Clone</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span>: <span class=\"nc\">Allocator</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">SpecCloneFrom</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cm\">/*default */</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">clone_from</span><span class=\"p\">(</span><span class=\"n\">this</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">other</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nb\">Copy</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                     </span><span class=\"c1\">// code that benefits from T: Copy</span>\n<span class=\"w\">           </span><span class=\"p\">}</span><span class=\"w\">  </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                     </span><span class=\"c1\">// normal implementation</span>\n<span class=\"w\">           </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I'm not sure whether anyone has raised this approach before. Is there obvious cons with this approach?</p>",
        "id": 261395598,
        "sender_full_name": "Charles Lew",
        "timestamp": 1636860674
    },
    {
        "content": "<p>Downstream crate couldn't specialize with this approach</p>",
        "id": 261397252,
        "sender_full_name": "Gary Guo",
        "timestamp": 1636863026
    },
    {
        "content": "<p>Yes, indeed!</p>",
        "id": 261397556,
        "sender_full_name": "Charles Lew",
        "timestamp": 1636863510
    }
]