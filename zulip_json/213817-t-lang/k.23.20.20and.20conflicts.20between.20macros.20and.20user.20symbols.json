[
    {
        "content": "<p>I'm wondering if this has some additional potential. For example, a few months back, I raised an issue on IRL (&lt;<a href=\"https://internals.rust-lang.org/t/reserved-names-for-no-mangle-and-link-name/13737\">https://internals.rust-lang.org/t/reserved-names-for-no-mangle-and-link-name/13737</a>&gt;), and part of it included the fact that standard library macros for implementations may need to define special names, but technically cannot without the potential to conflict with user-defined names in the same scope (and, unless those names are specified, limiting implementation, this would include portability issues). <br>\nIf part of this indicated that the Rust language would never reverse and use keywords of certain forms (say, ones that start with two underscores, or an underscore, followed by a capital letter), then implementations could (unstably) overload the <code>k#</code> syntax in special cases with those forms. It could also be used (hopefully, along with feature gates), to enable vendor-specific extensions. Just an idea, though.</p>",
        "id": 232501295,
        "sender_full_name": "Connor Horman",
        "timestamp": 1617139856
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"257758\">@Connor Horman</span> Part of the point of the <code>k#</code> syntax would be to <em>never</em> conflict with anything user-defined.</p>",
        "id": 232506386,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617142547
    },
    {
        "content": "<p>That's less of an issue with standard library names, because if you define your own, it can shadow.</p>",
        "id": 232506409,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617142558
    },
    {
        "content": "<p>(We'd need to make sure that was actually the case, and all such names are shadowable.)</p>",
        "id": 232506495,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617142588
    },
    {
        "content": "<p>Also, \"this could enable vendor-specific extensions\" is not a selling point for a feature. :)</p>",
        "id": 232506560,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617142634
    },
    {
        "content": "<p>I don't think it'd be necessary to specify that Rust would never reserve keywords of particular forms, because any such keywords would use the <code>k#</code> system to avoid conflict with existing code.</p>",
        "id": 232506973,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617142886
    },
    {
        "content": "<p>And I think the generalized solution for the macro issue would be hygiene; we need a <code>gensym</code> mechanism for temporary names.</p>",
        "id": 232507107,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617142966
    },
    {
        "content": "<p>(That's separate from the linked issue above, which is about symbol namespacing in the final binary. That's a different problem.)</p>",
        "id": 232507632,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617143295
    },
    {
        "content": "<p>Or a macros 2.0 \"this is in a distinct hygiene context distinct from anything else, so can only be used when it's this token passed around\" kind of thing somehow.  (Which is basically a gensym, but without exactly ever generating a name.)</p>",
        "id": 232507668,
        "sender_full_name": "scottmcm",
        "timestamp": 1617143332
    },
    {
        "content": "<p>Sure; either a generated name or a unique namespace works.</p>",
        "id": 232508625,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617143886
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/k.23.20.2C.20r.23.24.20.2C.20editions/near/232506560\">said</a>:</p>\n<blockquote>\n<p>Also, \"this could enable vendor-specific extensions\" is not a selling point for a feature. :)</p>\n</blockquote>\n<p>I know, that was just an additional benefit (at least to me, as it makes macros like <code>asm!</code> a lot less magical, and 50% less headache, because I can be expand the macro to something instead of attaching the macro expander to the ir generator). </p>\n<blockquote>\n<p>I don't think it'd be necessary to specify that Rust would never reserve keywords of particular forms, because any such keywords would use the <code>k#</code> system to avoid conflict with existing code.</p>\n</blockquote>\n<p>It's more of a set of keywords that implementations can use (in conjunction with the <code>k#</code> syntax) for various purposes and never run into problems, and they can rely on it never conflicting with a keyword defined in the future.</p>",
        "id": 232508638,
        "sender_full_name": "Connor Horman",
        "timestamp": 1617143894
    },
    {
        "content": "<p>I think the right way to not conflict with Rust is to have a discussion with upstream Rust.</p>",
        "id": 232508725,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617143967
    },
    {
        "content": "<p>I don't think we should reserve a namespace of \"portions of the design/syntax space we won't touch\".</p>",
        "id": 232508757,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617143990
    },
    {
        "content": "<p>In any case, I think this is drifting off topic.</p>",
        "id": 232508832,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617144021
    },
    {
        "content": "<p>Mind if I move this branch of the discussion to a different topic?</p>",
        "id": 232508920,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617144089
    },
    {
        "content": "<p>Nope.</p>",
        "id": 232509335,
        "sender_full_name": "Connor Horman",
        "timestamp": 1617144300
    },
    {
        "content": "<p>Done.</p>",
        "id": 232510215,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617144788
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"257758\">Connor Horman</span> <a href=\"#narrow/stream/213817-t-lang/topic/k.23.20.20and.20conflicts.20between.20macros.20and.20user.20symbols/near/232508638\">said</a>:</p>\n<blockquote>\n<p>at least to me, as it makes macros like <code>asm!</code> a lot less magical, and 50% less headache, because I can be expand the macro to something instead of attaching the macro expander to the ir generator</p>\n</blockquote>\n<p>This definitely does open the possibility of having <code>asm!(foo)</code> expand to <code>k#asm { foo }</code> or similar.  I don't know enough about the implementation strategy in the compiler to know for sure whether that'd be a valuable change, though.</p>",
        "id": 232512202,
        "sender_full_name": "scottmcm",
        "timestamp": 1617146020
    },
    {
        "content": "<p>It wouldn't necessarily need to be a requirement, but rather an implementation-detail.</p>",
        "id": 232513937,
        "sender_full_name": "Connor Horman",
        "timestamp": 1617147291
    }
]