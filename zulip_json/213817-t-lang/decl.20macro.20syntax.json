[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> I don’t understand <a href=\"https://github.com/rust-lang/rust/pull/70817#issuecomment-613020732\" title=\"https://github.com/rust-lang/rust/pull/70817#issuecomment-613020732\">https://github.com/rust-lang/rust/pull/70817#issuecomment-613020732</a> re how to use <code>macro</code> with multiple token-matching arms. <code>macro_rules</code> has another nesting level of <code>{…}</code></p>",
        "id": 193805459,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1586803497
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219747\">@Simon Sapin</span> you write <code>macro</code> instead of <code>macro_rules!</code> (and use <code>,</code> between the arms instead of <code>;</code>)</p>",
        "id": 193805888,
        "sender_full_name": "eddyb",
        "timestamp": 1586803698
    },
    {
        "content": "<p>the shorthand syntax is <em>optional</em></p>",
        "id": 193805900,
        "sender_full_name": "eddyb",
        "timestamp": 1586803703
    },
    {
        "content": "<p>as a nicety</p>",
        "id": 193805906,
        "sender_full_name": "eddyb",
        "timestamp": 1586803706
    },
    {
        "content": "<p><code>macro</code> is rebranded <code>macro_rules!</code>, it's not a different MBE system</p>",
        "id": 193806008,
        "sender_full_name": "eddyb",
        "timestamp": 1586803765
    },
    {
        "content": "<p>MBE?</p>",
        "id": 193806744,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1586804088
    },
    {
        "content": "<p>Ok, the part I was missing is that there’s a shorthand for single-arm when the macro name is followed by <code>(</code> instead of <code>{</code></p>",
        "id": 193806858,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1586804147
    },
    {
        "content": "<p>The shorthand is the only form I’d seen in any example</p>",
        "id": 193806924,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1586804163
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219747\">Simon Sapin</span> <a href=\"#narrow/stream/213817-t-lang/topic/decl.20macro.20syntax/near/193806744\" title=\"#narrow/stream/213817-t-lang/topic/decl.20macro.20syntax/near/193806744\">said</a>:</p>\n<blockquote>\n<p>MBE?</p>\n</blockquote>\n<p>Macros By Example (I guess)</p>",
        "id": 193831334,
        "sender_full_name": "RalfJ",
        "timestamp": 1586818151
    },
    {
        "content": "<p>yeah that's what the initialism stands for</p>",
        "id": 193832267,
        "sender_full_name": "centril",
        "timestamp": 1586818846
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219747\">@Simon Sapin</span> yeah, that doesn't help. everyone loves using that form when there's only one arm just because it looks pretty :P</p>",
        "id": 193835244,
        "sender_full_name": "eddyb",
        "timestamp": 1586820939
    },
    {
        "content": "<p>I remember being confused by the <code>,</code> vs <code>;</code> thing, a few years ago, and thinking <code>macro</code> doesn't support multiple arms</p>",
        "id": 193835303,
        "sender_full_name": "eddyb",
        "timestamp": 1586820979
    },
    {
        "content": "<p>might be good to replace all <code>macro_rules!</code> in the standard library with <code>macro</code>s with the attribute <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> mentioned</p>",
        "id": 193835316,
        "sender_full_name": "eddyb",
        "timestamp": 1586820999
    },
    {
        "content": "<p>and we can remove the attribute if/when we're sure it doesn't matter</p>",
        "id": 193835329,
        "sender_full_name": "eddyb",
        "timestamp": 1586821013
    },
    {
        "content": "<p>if nothing else we could try it as a test</p>",
        "id": 193835340,
        "sender_full_name": "eddyb",
        "timestamp": 1586821034
    },
    {
        "content": "<p>We ought to document <code>macro</code> better... also, I still think it needs a real RFC</p>",
        "id": 194321814,
        "sender_full_name": "mark-i-m",
        "timestamp": 1587050781
    },
    {
        "content": "<p>Yeah. <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> pointed to the docs they wrote up on hygiene, and I was thinking it'd be great to dive into those and maybe have a design meeting or something where we try to really hash it out</p>",
        "id": 194346631,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587061279
    },
    {
        "content": "<p><code>macro</code> items have multiple components to figure out before stabilizing, syntactic and semantic:<br>\n    - <code>Span::def_site</code>, pretty far away, requires implementing cross-crate hygiene <em>at least</em>, and then formalizing stuff in <code>hygiene.rs</code> more carefully, in application to type-relative paths in particular.<br>\n    - Syntax of the macro's left side (macro \"parameters\"), requires major design work to figure out future-compatibility (currently done with FIRST and FOLLOW sets) and figuring out how to match or not match all arms at the same time.<br>\n    - Syntax of the macro's right side (macro body), requires a syntax for hygiene opt-out perhaps, maybe simplifying the use of repetitions (<a href=\"https://github.com/rust-lang/rust/issues/61053#issuecomment-506950747\" title=\"https://github.com/rust-lang/rust/issues/61053#issuecomment-506950747\">https://github.com/rust-lang/rust/issues/61053#issuecomment-506950747</a>), but otherwise seems ok, it's just an arbitrary token stream.<br>\n    - Surface syntax of the macro. The last year I almost wrote and RFC to set the top-level syntax <code>macro single_arm() {}</code> + <code>macro multiple_arms { (lhs1) {rhs1} (lhs2) {rhs2} }</code> in stone, but them recalled that people wanted the macros want to control what delimiters they are invoked with (e.g. restrict <code>vec![]</code> to only use square brackets), and that added more questions to the surface syntax, and I didn't write anything.</p>",
        "id": 194354354,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1587064751
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> thanks for the update! It's probably worth reposting your comment on the tracking issue...</p>",
        "id": 194460378,
        "sender_full_name": "mark-i-m",
        "timestamp": 1587138362
    },
    {
        "content": "<p>we should move it to the header, even</p>",
        "id": 194538470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587207336
    }
]