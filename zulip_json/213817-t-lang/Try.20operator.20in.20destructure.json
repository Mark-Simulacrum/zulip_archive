[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"319552\">Jeremiah Senkpiel</span> <a href=\"#narrow/stream/257204-project-error-handling/topic/Try.20operator.20in.20destructure/near/231564508\">said</a>:</p>\n<blockquote>\n<p>Has there been any talk about allowing the Try (<code>?</code>) operator in a destructure position like this?</p>\n<div class=\"codehilite\"><pre><span></span><code>iter.inspect(|(_, thing)?|  { ... })\n</code></pre></div>\n<p>This could be quite handy when working with result-yielding iterators.</p>\n</blockquote>\n<p>_(Moved from <a class=\"stream\" data-stream-id=\"257204\" href=\"/#narrow/stream/257204-project-error-handling\">#project-error-handling</a> )_</p>",
        "id": 231564774,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1616545641
    },
    {
        "content": "<p>there's some reluctance in allowing pattern matching to execute arbitrary user code like that. it also doesn't really match how patterns represent the \"reverse\" of an operation, e.g. how a <code>&amp;foo</code> pattern dereferences rather than references</p>",
        "id": 231571962,
        "sender_full_name": "bstrie",
        "timestamp": 1616551576
    },
    {
        "content": "<blockquote>\n<p>reverse</p>\n</blockquote>\n<p><code>|¿(_, thing)| ..</code> ^^</p>",
        "id": 231576462,
        "sender_full_name": "Mara",
        "timestamp": 1616555411
    },
    {
        "content": "<p>Ah yes the “Result-ify” operator</p>\n<p>I suppose you could say this is the responsibility of the caller but with Iterator I’m not really sure how workable that is (I have no idea where discussions is at regarding some vague concept of falliable iterators beyond <code>collect&lt;Result&lt;&gt;&gt;</code>)</p>",
        "id": 231587347,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1616565315
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> Would that make <code>&amp;</code> the <code>fer</code> operator, and <code>&amp;mut</code> the <code>tumfer</code> operator?</p>",
        "id": 231587357,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616565326
    },
    {
        "content": "<p>I’m not sure this counts as symmetry (and I don’t know that I care too much for symmetry), but <code>Try</code> is functionally similar to <code>TryFrom</code>, which seems to often(?) be the way to “undo” an enum wrapper without multiple branches</p>",
        "id": 231587564,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1616565583
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> string reversal? what is this, C? in Rust we have proper unicode support: ɟǝɹ / ʇnɯɟǝɹ</p>",
        "id": 231591280,
        "sender_full_name": "Mara",
        "timestamp": 1616569435
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"319552\">@Jeremiah Senkpiel</span> i'm not sure i understand what you mean. how are try and tryfrom similar?</p>",
        "id": 231591521,
        "sender_full_name": "Mara",
        "timestamp": 1616569619
    },
    {
        "content": "<p>I definitely want <em>something</em> like this</p>",
        "id": 231650135,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616598506
    },
    {
        "content": "<p><code>?</code> is similar to a conversion, is what I meant.</p>",
        "id": 231705908,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1616618937
    },
    {
        "content": "<p>Does the lack of symmetry to creating a structure from this proposed “try destructure” syntax present an impasse?</p>",
        "id": 231721346,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1616625860
    },
    {
        "content": "<p>I think it would be a sticking point, and I also think that you'd hit resistance about running user-provided code within patterns; this latter topic is something that the deref patterns proposal is working around (<a href=\"#narrow/stream/281601-project-deref-patterns\">https://rust-lang.zulipchat.com/#narrow/stream/281601-project-deref-patterns</a>) and in your case would be enabled by the forthcoming Try trait reform (<a href=\"#narrow/stream/213817-t-lang/topic/try_trait_v2.3A.202nd.20attempt\">https://rust-lang.zulipchat.com/#narrow/stream/213817-t-lang/topic/try_trait_v2.3A.202nd.20attempt</a>)</p>",
        "id": 231724953,
        "sender_full_name": "bstrie",
        "timestamp": 1616628092
    },
    {
        "content": "<p>the way the deref patterns proposal is working around it is to only allow the pattern for Deref types that are defined in the stdlib, so for minimal resistance you'd probably also want to limit yourself to only working on Try types defined in the stdlib. the syntax symmetry problem doesn't seem to have a clean workaround but if you had a slightly more concrete proposal with full code mockups then maybe something would present itself</p>",
        "id": 231725146,
        "sender_full_name": "bstrie",
        "timestamp": 1616628238
    },
    {
        "content": "<p>hmm</p>",
        "id": 231797608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616678039
    },
    {
        "content": "<p>conceptually what's happening in the deref case is that we're imagining a \"pure\" deref trait</p>",
        "id": 231797669,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616678050
    },
    {
        "content": "<p>that we are not defining right now (but it'd be good to be accumulating the constraints that deref patterns require)</p>",
        "id": 231797729,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616678075
    },
    {
        "content": "<p>this <em>probably</em> means said trait has to be unsafe</p>",
        "id": 231797752,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616678083
    },
    {
        "content": "<p>I guess one could imagine a pure try trait but .. hmm.</p>",
        "id": 231797785,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616678097
    },
    {
        "content": "<p>makes me wonder about making that trait unsafe</p>",
        "id": 231797793,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616678101
    },
    {
        "content": "<p>I'm not super thrilled about that</p>",
        "id": 231797800,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616678105
    },
    {
        "content": "<p>another option might be to limit where the <code>?</code> operator can be used</p>",
        "id": 231797819,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616678112
    },
    {
        "content": "<p>that is, applying the <code>?</code> in the \"depths\" of pattern matching is probably less common, right?</p>",
        "id": 231797876,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616678138
    },
    {
        "content": "<p>the most common place I've seen this come up is iterators that yield results</p>",
        "id": 231797922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616678155
    },
    {
        "content": "<p>instead of </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 231797994,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616678172
    },
    {
        "content": "<p>one could imagine writing</p>",
        "id": 231798002,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616678175
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">for</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 231798022,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616678180
    },
    {
        "content": "<p>anyway I think <span class=\"user-mention\" data-user-id=\"319552\">@Jeremiah Senkpiel</span> it'd be good to dig a bit into the real use cases -- what is the <em>actual code</em> you expect to write? -- that might suggest the full range of options</p>",
        "id": 231798077,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616678208
    },
    {
        "content": "<p>maybe create a hackmd?</p>",
        "id": 231798080,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616678211
    },
    {
        "content": "<p>The <code>inspect</code> code I posted was something I tried to do in a real project.</p>\n<p>Funny, I would have expected the loop to be:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 231822012,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1616685979
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"319552\">@Jeremiah Senkpiel</span> yes, I think your notation is probably more correct, I was just pondering the idea of attaching the desugar not to the <em>pattern</em> but to the loop</p>",
        "id": 231840520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616692424
    },
    {
        "content": "<p>you could also say that it is limited to the outermost pattern</p>",
        "id": 231840540,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616692431
    },
    {
        "content": "<p>my goal here is to say that you don't have to execute the Try operations <em>during pattern matching</em> but more as a kind of \"prefix\"</p>",
        "id": 231840608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616692446
    },
    {
        "content": "<p>\"before pattern matching begins, we apply the <code>?</code> operator to the value to be matched\"</p>",
        "id": 231840647,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616692457
    },
    {
        "content": "<p>I imagine in a <code>match</code> context it would just be illegal -- only allowed in irrefutable pattern contexts</p>",
        "id": 231840694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616692477
    },
    {
        "content": "<p>and only at the outermost level</p>",
        "id": 231840720,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616692486
    },
    {
        "content": "<p>I think that would be quite unintuitive, having it on the loop rather than attached to the value</p>",
        "id": 231840727,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1616692488
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/Try.20operator.20in.20destructure/near/231840540\">said</a>:</p>\n<blockquote>\n<p>you could also say that it is limited to the outermost pattern</p>\n</blockquote>\n<p>agreed, hence this <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 231840777,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616692506
    },
    {
        "content": "<p>what I don't want is</p>",
        "id": 231840789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616692510
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">?</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">?</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 231840807,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616692517
    },
    {
        "content": "<p><em>although</em></p>",
        "id": 231840819,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616692520
    },
    {
        "content": "<p>in an irrefutable context, none of these problems apply</p>",
        "id": 231840841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616692525
    },
    {
        "content": "<p>so maybe the answer is -- introduce <code>?</code> patterns, but allow them only in a limited range of cases</p>",
        "id": 231840871,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616692540
    },
    {
        "content": "<p>have to think about what exactly that range is, but we could start with irrefutable</p>",
        "id": 231840888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616692548
    },
    {
        "content": "<p>meaning: <code>for</code> loop, closure arguments, <code>let</code> patterns</p>",
        "id": 231840903,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616692555
    },
    {
        "content": "<p>but not: <code>if let</code>, <code>match</code> arms</p>",
        "id": 231840913,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616692561
    },
    {
        "content": "<p>the latter are places where we are choosing between more than one option</p>",
        "id": 231840949,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616692568
    },
    {
        "content": "<p>or, in those contexts, maybe they only apply at the outermost level for now</p>",
        "id": 231840978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616692577
    },
    {
        "content": "<p>is what I'm saying making any sense, <span class=\"user-mention\" data-user-id=\"319552\">@Jeremiah Senkpiel</span> ? I'm trying to avoid having the <code>?</code> operator be evaluated in the midst of doing pattern matching, because that makes the order more observable</p>",
        "id": 231841036,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616692601
    },
    {
        "content": "<p>and introduces the possibility of weird side effects that we have to be careful about</p>",
        "id": 231841056,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616692610
    },
    {
        "content": "<p>consider like</p>",
        "id": 231841141,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616692649
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"mi\">22</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"mi\">23</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 231841198,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616692677
    },
    {
        "content": "<p>actually</p>",
        "id": 231841251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616692686
    },
    {
        "content": "<p>could we just limit to <em>bindings</em></p>",
        "id": 231841258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616692689
    },
    {
        "content": "<p>nah, that's too limiting</p>",
        "id": 231841289,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616692705
    },
    {
        "content": "<p>anyway, the point is, we could permit the operator and just be restritive to avoid problematic cases, that's the high order bit. I'd be in favor of a project proposal along these lines myself.</p>",
        "id": 231841325,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616692723
    },
    {
        "content": "<p>/me stops typing</p>",
        "id": 231841353,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616692742
    },
    {
        "content": "<p>While I think that <code>(x?, y?)</code> is the natural progression from it but I think that's less valuable than <code>(_, y)?</code>. Consider the following:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">.</span><span class=\"n\">inspect</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">v</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Just for example, want to propagate try first</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">EnumType</span>::<span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">})</span><span class=\"w\"></span>\n</code></pre></div>\n<p>vs inners</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">.</span><span class=\"n\">inspect</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Just for example, want to propagate try first</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">EnumType</span>::<span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">})</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 231841533,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1616692814
    },
    {
        "content": "<p>I think we could support both without any problem</p>",
        "id": 231841580,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616692835
    },
    {
        "content": "<p>but I agree that <code>(_, y)?</code> is more important</p>",
        "id": 231841594,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616692840
    },
    {
        "content": "<p>The inners example is already, frankly, very straightforward with current syntax</p>",
        "id": 231841616,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1616692852
    },
    {
        "content": "<p>The outers example isn't _bad_ but it could be better, especially with more complex types</p>",
        "id": 231841718,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1616692884
    },
    {
        "content": "<p>do you know what I mean by \"irrefutable context\"?</p>",
        "id": 231841763,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616692904
    },
    {
        "content": "<p>Do you mean only one possible variant of what <code>?</code> would have to operate on?</p>",
        "id": 231841959,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1616692973
    },
    {
        "content": "<p>\"irrefutable\" means a pattern that cannot fail to match</p>",
        "id": 231842010,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616692995
    },
    {
        "content": "<p>(fail to match = \"refute\")</p>",
        "id": 231842032,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693002
    },
    {
        "content": "<p>Ohhh I get it, yeah</p>",
        "id": 231842040,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1616693007
    },
    {
        "content": "<p>this applies to <code>for pattern in ...</code>, closure arguments, <code>let pattern = ...</code></p>",
        "id": 231842066,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693018
    },
    {
        "content": "<p>so what I'm saying is: there is no problem with <code>?</code> in those contexts</p>",
        "id": 231842091,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693027
    },
    {
        "content": "<p>Because inside if a Try fails we're bailing out of a match in a weird way which could cause problems with destructure nesting</p>",
        "id": 231842118,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1616693037
    },
    {
        "content": "<p>it would also apply to <code>match foo { pattern =&gt; }</code> (one arm)</p>",
        "id": 231842125,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693040
    },
    {
        "content": "<p>right -- if there are multiple arms, it becomes a bit ambiguous sort of, at least in some positions --</p>",
        "id": 231842243,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693071
    },
    {
        "content": "<p>I would be happy to start with irrefutable patterns</p>",
        "id": 231842285,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693087
    },
    {
        "content": "<p>I think there are other places we could support in the future</p>",
        "id": 231842314,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693097
    },
    {
        "content": "<p>Ideally it would be disallowed in <code>let pattern = ...</code>, because you can just put it at the end?</p>",
        "id": 231842357,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1616693110
    },
    {
        "content": "<p>but irrefutable is by far the most common case where I have wanted this</p>",
        "id": 231842361,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693112
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"319552\">Jeremiah Senkpiel</span> <a href=\"#narrow/stream/213817-t-lang/topic/Try.20operator.20in.20destructure/near/231842357\">said</a>:</p>\n<blockquote>\n<p>Ideally it would be disallowed in <code>let pattern = ...</code>, because you can just put it at the end?</p>\n</blockquote>\n<p>well, that depends</p>",
        "id": 231842405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693129
    },
    {
        "content": "<p>I might prefer for it to be allowed, perhaps we lint</p>",
        "id": 231842415,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693135
    },
    {
        "content": "<p>but keep in mind that if we permit it anywhere in an irrefutable patern</p>",
        "id": 231842436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693144
    },
    {
        "content": "<p>you could do things like</p>",
        "id": 231842441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693146
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">?</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"o\">?</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 231842462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693155
    },
    {
        "content": "<p>and that can't trivially be done otherwise</p>",
        "id": 231842476,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693161
    },
    {
        "content": "<p>admittedly I don't think I ever wanted to do it :)</p>",
        "id": 231842530,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693169
    },
    {
        "content": "<p>but why not</p>",
        "id": 231842534,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693171
    },
    {
        "content": "<p>I'd probably permit <code>let x? = foo</code> and if we are worried about TMWTDI, then lint for it and give a suggestion</p>",
        "id": 231842601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693197
    },
    {
        "content": "<p>just because I like things to work in a uniform way</p>",
        "id": 231842632,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693211
    },
    {
        "content": "<p>Wait I thought that was refutable - is it only this which would be refutable?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">?</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 231842640,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1616693214
    },
    {
        "content": "<p>neither of those are refutable</p>",
        "id": 231842660,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693222
    },
    {
        "content": "<p>a refutable pattern is like <code>Some(x)</code></p>",
        "id": 231842687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693232
    },
    {
        "content": "<p>because the <code>Option</code> may in fact be <code>None</code></p>",
        "id": 231842704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693238
    },
    {
        "content": "<p>I guess .. hmm .. so I'm stretching it here :)</p>",
        "id": 231842746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693252
    },
    {
        "content": "<p>admittedly when you put <code>?</code> inside the \"irrefutable\" pattern it becomes \"refuable\" in the sense that Try might fail</p>",
        "id": 231842774,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693265
    },
    {
        "content": "<p>but there is no other source of dynamic testing</p>",
        "id": 231842791,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693272
    },
    {
        "content": "<p>so we could just say \"we test them left to right\" in some defined order</p>",
        "id": 231842805,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693279
    },
    {
        "content": "<p>and there is no real ambiguity or confusion about what happens</p>",
        "id": 231842847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693285
    },
    {
        "content": "<p>we should find a better name :)</p>",
        "id": 231842876,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693296
    },
    {
        "content": "<p>let's call it \"single arm\" patterns</p>",
        "id": 231842882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693299
    },
    {
        "content": "<p>Does that exclude this?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 231843007,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1616693355
    },
    {
        "content": "<p>Or rather</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">|</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">?|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 231843069,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1616693380
    },
    {
        "content": "<p>yes but those things are already illegal</p>",
        "id": 231843130,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693402
    },
    {
        "content": "<p>(Option is a bad example here because of <code>transpose()</code>)</p>",
        "id": 231843183,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1616693414
    },
    {
        "content": "<p>specifically because:</p>",
        "id": 231843204,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693423
    },
    {
        "content": "<p>what do you do if the option is <code>None</code>?</p>",
        "id": 231843219,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693427
    },
    {
        "content": "<p>(I'm ignoring <code>!</code> type here)</p>",
        "id": 231843226,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693430
    },
    {
        "content": "<p><code>?</code> operator gives you an answer for that, so it's ok</p>",
        "id": 231843251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693439
    },
    {
        "content": "<p>Propagate <code>None</code> implicitly (Ok yes I know that's only possible with specifically <code>Option</code>)</p>",
        "id": 231843333,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1616693469
    },
    {
        "content": "<p>well</p>",
        "id": 231843359,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693479
    },
    {
        "content": "<p>if it's only at the topmost level, would it be possible to have this behavior be provided by new iterator combinators instead?</p>",
        "id": 231843374,
        "sender_full_name": "bstrie",
        "timestamp": 1616693487
    },
    {
        "content": "<p>what type is <code>foo</code> here?</p>",
        "id": 231843382,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693490
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256342\">bstrie</span> <a href=\"#narrow/stream/213817-t-lang/topic/Try.20operator.20in.20destructure/near/231843374\">said</a>:</p>\n<blockquote>\n<p>if it's only at the topmost level, would it be possible to have this behavior be provided by new iterator combinators instead?</p>\n</blockquote>\n<p>no</p>",
        "id": 231843396,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693496
    },
    {
        "content": "<p>well, sort of, but not in all positions</p>",
        "id": 231843430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693513
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"319552\">Jeremiah Senkpiel</span> <a href=\"#narrow/stream/213817-t-lang/topic/Try.20operator.20in.20destructure/near/231587347\">said</a>:</p>\n<blockquote>\n<p>...</p>\n<p>I suppose you could say this is the responsibility of the caller but with Iterator I’m not really sure how workable that is (I have no idea where discussions is at regarding some vague concept of falliable iterators beyond <code>collect&lt;Result&lt;&gt;&gt;</code>)</p>\n</blockquote>\n<p>Maybe? But also, what I mentioned here above</p>",
        "id": 231843452,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1616693518
    },
    {
        "content": "<p>also, it's counterintuitive</p>",
        "id": 231843458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693520
    },
    {
        "content": "<p>(in my view)</p>",
        "id": 231843553,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693542
    },
    {
        "content": "<p>let's hold off on the \"Do we want this\" for a bit</p>",
        "id": 231843594,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693560
    },
    {
        "content": "<p>I'd prefer to focus on the \"how could we do it\" for a bit</p>",
        "id": 231843614,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693567
    },
    {
        "content": "<p>and then we can come back to \"do we want it\" :)</p>",
        "id": 231843636,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693571
    },
    {
        "content": "<p>note though that I am not limiting it to top-level</p>",
        "id": 231843656,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693578
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"319552\">Jeremiah Senkpiel</span> <a href=\"#narrow/stream/213817-t-lang/topic/Try.20operator.20in.20destructure/near/231843333\">said</a>:</p>\n<blockquote>\n<p>Propagate <code>None</code> implicitly (Ok yes I know that's only possible with specifically <code>Option</code>)</p>\n</blockquote>\n<p>so I feel like you are talking about <code>?</code> applied to <code>Option</code></p>",
        "id": 231843700,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693589
    },
    {
        "content": "<p>but that is not what I am talking about</p>",
        "id": 231843730,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693595
    },
    {
        "content": "<p>e.g., imagine that the type of <code>foo</code> is <code>Result&lt;Option&lt;T&gt;, E&gt;</code></p>",
        "id": 231843748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693606
    },
    {
        "content": "<p>then you could imagine <code>let Some(x)? = foo</code> but it wouldn't work because \"what if the option is <code>None</code>\"</p>",
        "id": 231843798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693627
    },
    {
        "content": "<p>but you could also do <code>let x?? = foo</code> and that <em>would</em> work</p>",
        "id": 231843802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693633
    },
    {
        "content": "<p>at least, presuming that you can <code>?</code> from both an option and a result in the same fn...</p>",
        "id": 231843859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693644
    },
    {
        "content": "<p>maybe <code>foo: Option&lt;Option&lt;T&gt;&gt;</code> is a better example, same principles apply</p>",
        "id": 231843912,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693657
    },
    {
        "content": "<p>I have yet to encounter a <code>??</code> and hope I don't have to, there's just compounding levels of confusion there, also, that becomes no longer irefutable, i think?</p>",
        "id": 231844194,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1616693779
    },
    {
        "content": "<p>The point is not really about refutable vs irrefutable</p>",
        "id": 231844246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693802
    },
    {
        "content": "<p>Let's put that term aside</p>",
        "id": 231844263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693809
    },
    {
        "content": "<p>The point is more like \"what happens if it doesn't match\"</p>",
        "id": 231844308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693827
    },
    {
        "content": "<p>(Regarding that - I really hope <code>result.flatten()</code> is able to happen)</p>",
        "id": 231844322,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1616693829
    },
    {
        "content": "<p>in the case of a <code>?</code> pattern, the answer is that it branches out to the enclosing scope, propagating the error</p>",
        "id": 231844343,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693839
    },
    {
        "content": "<p>in the case of a <code>Some</code> pattern, it goes to the next arm</p>",
        "id": 231844371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693854
    },
    {
        "content": "<p>my point is that these are different in an important way :)</p>",
        "id": 231844389,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693863
    },
    {
        "content": "<p>and that it means that we can accept <code>?</code> in positions that used to be only \"truly irrefutable\" patterns</p>",
        "id": 231844407,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693876
    },
    {
        "content": "<p>so, it's not that you are likely to want to write <code>let x?? = foo</code></p>",
        "id": 231844495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693901
    },
    {
        "content": "<p>but more that the code has a single clear semantics</p>",
        "id": 231844507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693908
    },
    {
        "content": "<p>the compiler unwraps two options, propoagating any <code>None</code>, and otherwise you get the wrapped up value</p>",
        "id": 231844573,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693933
    },
    {
        "content": "<p>there's nothing else it <em>could</em> do</p>",
        "id": 231844577,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693936
    },
    {
        "content": "<p>but <code>let Some(Some(x)) = foo</code> is different</p>",
        "id": 231844595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693945
    },
    {
        "content": "<p>it's not clear what it should do if either option is <code>None</code></p>",
        "id": 231844619,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616693954
    },
    {
        "content": "<p>so in short I am arguing:</p>\n<ul>\n<li>In any context where there is a single variant in a match (for patterns, let bindings, matches, closure arguments) we can accept <code>?</code> patterns without any kind of hazard from observable side-effects and so forth.</li>\n<li>In contexts with mutiple arms, we can put it off for now, but there are times we could accept it as well.</li>\n</ul>",
        "id": 231844756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616694009
    },
    {
        "content": "<p>I am not (yet) arguing for the desirability or lack thereof of such a feature :)</p>",
        "id": 231844858,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616694049
    },
    {
        "content": "<p>I stepped away for a minute and I think I agree that <code>??</code> could actually be reasonable in this context</p>",
        "id": 231845487,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1616694295
    },
    {
        "content": "<p>Would <code>|(t)??| {}</code> work in a context of say, <code>Result&lt;Option&lt;T&gt;&gt;</code>?</p>",
        "id": 231845633,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1616694352
    },
    {
        "content": "<p>Just to be clear, in your example, this would work today, yeah?:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"o\">??</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 231846116,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1616694519
    },
    {
        "content": "<p>I suppose it's more likely that anyone writing it in that position would write <code>let x = foo.flatten()?</code>, but in the case of destructure, that is of course not possible.</p>",
        "id": 231846247,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1616694584
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"319552\">Jeremiah Senkpiel</span> <a href=\"#narrow/stream/213817-t-lang/topic/Try.20operator.20in.20destructure/near/231845633\">said</a>:</p>\n<blockquote>\n<p>Would <code>|(t)??| {}</code> work in a context of say, <code>Result&lt;Option&lt;T&gt;&gt;</code>?</p>\n</blockquote>\n<p>yes, so e.g. <code>|t??| t</code> would be like <code>Option&lt;Option&lt;T&gt;&gt; -&gt; Option&lt;T&gt;</code></p>",
        "id": 231847629,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616695073
    },
    {
        "content": "<p>Are only enum matches refutable, or are there also other cases?</p>",
        "id": 231848883,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1616695494
    },
    {
        "content": "<p>constants</p>",
        "id": 231849011,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616695540
    },
    {
        "content": "<p>e.g., <code>(x, 22)</code></p>",
        "id": 231849020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616695544
    },
    {
        "content": "<p>That's... new to me, where is that usable? Only in <code>match</code>-like things, right? Not in e.g. closure arguments surely?</p>",
        "id": 231856455,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1616698383
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"319552\">@Jeremiah Senkpiel</span> Right, closure arguments must use irrefutable patterns. The only time you can use that in closure arguments is if there's only one value, so you <em>can</em> write <code>|(x, ())| x</code> for instance.</p>",
        "id": 231862748,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616700617
    },
    {
        "content": "<p>Tiny bikeshed: could the question mark go before the binding? I find the syntax quite confusing when it goes after it (it looks too much like a value op):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fallible</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">flatten</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|??</span><span class=\"n\">t</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It makes it clearer the binding happens after the try check passes</p>",
        "id": 231864881,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1616701526
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span>  Isn't that same thing as <code>|(x, _)| x</code>? That would only work with unit, right?</p>",
        "id": 231864994,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1616701562
    },
    {
        "content": "<p>I suspect that people, like me, would try to put it afterward naturally because that's how it is used elsewhere</p>",
        "id": 231865104,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1616701605
    },
    {
        "content": "<p>But perhaps that's a miss-assumption, not sure.</p>",
        "id": 231865218,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1616701648
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"319552\">Jeremiah Senkpiel</span> <a href=\"#narrow/stream/213817-t-lang/topic/Try.20operator.20in.20destructure/near/231865104\">said</a>:</p>\n<blockquote>\n<p>I suspect that people, like me, would try to put it afterward naturally because that's how it is used elsewhere</p>\n</blockquote>\n<p>Yeah, that could happen, but it's already the case with, for instance, <code>&amp;</code> in pattern <em>vs.</em> <code>&amp;</code> in an expression: part of learning Rust is realizing there is this duality in between expressions and patterns.<br>\nOn the other hand, fixing that \"beginner's assumption\" would be quite trivial for the compiler: it should just say that it is not a valid pattern, right before suggesting: <code>help: to use '?' in a pattern, put it before the variable name</code> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 231865760,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1616701868
    },
    {
        "content": "<p>I could certainly live with <code>|?(x, _)| { x }</code>. I note that it is close to <code>tracing</code>'s <code>info!(?debug_print)</code> thing, but that probably doesn't matter much.</p>",
        "id": 231866733,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1616702318
    },
    {
        "content": "<p>I too would expect it to go afterwards</p>",
        "id": 232454226,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617121302
    },
    {
        "content": "<p>I'm accustomed to patterns looking like expressions, I guess, although the analogy isn't exact here, since <code>x?</code> is not how you <em>construct</em> anything</p>",
        "id": 232454306,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617121323
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"319552\">@Jeremiah Senkpiel</span> are you interested in pursuing this design in particular? it seems to me that we reached a potentially useful pont -- if nothing else, I'd like to write-up a kind of design note on this</p>",
        "id": 232454353,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617121342
    },
    {
        "content": "<p>What would be the next steps? Write a pre-rfc? I don't really have enough opinion to say whether the <code>?</code> should come before or after either, and I'm not sure how to elaborate at all on \"how we'd teach this\"</p>\n<p>(This isn't the top feature request of mine so I'm a little hesitant to dedicate extra time to it before <code>let Some(x) = y else { }</code> patterns (whatever those are tentatively called? I forget), although this may be easier than that I guess?)</p>",
        "id": 232456675,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1617122207
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"319552\">@Jeremiah Senkpiel</span> I think the next step would be a combination of two things: a project proposal if we want to move forward, and a revisiting of the \"why\" question that covers not just how this could be done but why this needs to have syntax rather than using the next best non-language-based alternative solution. The earlier discussion on this deferred the question of \"why\" in favor of \"how\", which was perfectly reasonable, but I think the \"why\" needs to be covered before moving forward.</p>",
        "id": 232457096,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617122398
    },
    {
        "content": "<p>(To be clear, I'm not suggesting that it should or shouldn't move forward, but rather, any next step would need to include such justification, because it'll be needed when evaluating the project proposal.)</p>",
        "id": 232457276,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617122453
    },
    {
        "content": "<p>Yeah, I wouldn't try to write a pre-RFC, I think a project proposal would be the next step. I could potentially help you to draft that. Maybe even draft it myself. I guess what I'm wondering is how much interest you have in \"seeing this through\". I don't have time to do it all myself but I have some potential interest, have to think about it.</p>",
        "id": 232458551,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617122965
    },
    {
        "content": "<p>FWIW, I <em>personally</em> think there'd be value in having a mechanism like this. I'd certainly use it.</p>",
        "id": 232459018,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617123126
    },
    {
        "content": "<p>I also think the most likely thing for this to get hung up on is the syntax bikeshed: postfix <code>?</code>, prefix <code>?</code>, keyword, postfix something on the iterator expression, etc.</p>",
        "id": 232459584,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617123328
    },
    {
        "content": "<p>I also have a vague feeling that there may be generalizations we might want. If we had the ability for closures to return from their containing functions, that'd solve many problems (and potentially create new ones, but still).</p>",
        "id": 232460142,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617123498
    },
    {
        "content": "<p>ooh, adding a try operator to patterns allows using:<code>for i? in result_returning_iter { ... }</code><br>\nmaybe we should also add <code>.await</code> to patterns!</p>",
        "id": 232520956,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1617152590
    },
    {
        "content": "<p>Hmmm, bringing up await here is a good point, I was assuming that would look more like JavaScript honestly, e.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"k\">await</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">async_iter</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Or</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">async_iter</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>But maybe it would be more idiomatic if it were like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"k\">await</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">async_iter</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>For what it’s worth, if that and “try” are desirable, I think they should adopt similar syntax.</p>",
        "id": 232528525,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1617159095
    },
    {
        "content": "<p>More musing:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"k\">await</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">async_result_iter</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>vs</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"k\">await</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">async_result_iter</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I think I generally like how rust has put \"await\" in a chaining position, but I think before reads much better in loop unrolls</p>",
        "id": 232624173,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1617208906
    },
    {
        "content": "<p>I assume making the syntax like the following example is ruled out, because the <code>try</code> word has a different meaning (e.g. try blocks):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"k\">await</span><span class=\"w\"> </span><span class=\"kr\">try</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">async_result_iter</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 232624597,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1617209059
    },
    {
        "content": "<p>The try block meaning might actually make that a <em>good</em> idea, IMO- I wrote about that idea a couple years ago: <a href=\"https://internals.rust-lang.org/t/for-await-loops/9819/7?u=rpjohnst\">https://internals.rust-lang.org/t/for-await-loops/9819/7?u=rpjohnst</a></p>",
        "id": 232633560,
        "sender_full_name": "rpjohnst",
        "timestamp": 1617212254
    },
    {
        "content": "<p>the idea there being that in an expression, <code>?</code> and <code>.await</code> are \"eliminators\" of <code>Try</code> and <code>Future</code> types respectively, while <code>async {}</code> and <code>try {}</code> blocks are \"constructors\"- and the pattern/expression duality suggests using constructors in patterns to extract a value</p>",
        "id": 232633943,
        "sender_full_name": "rpjohnst",
        "timestamp": 1617212398
    },
    {
        "content": "<p>That's a reasonably compelling argument. I don't know about using <code>async</code> and <code>try</code> specifically, but I <em>do</em> feel like the problem with using <code>?</code> is that patterns should look like they're de-structuring the structure that's there, and <code>?</code> doesn't look like that. (Along the same lines, <code>&amp;</code> corresponds to <code>ref</code>. As a syllogism, I've been wondering \"<code>&amp;</code> is to <code>ref</code> as <code>?</code> is to ...what\".)</p>",
        "id": 232647010,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617217504
    },
    {
        "content": "<p>FWIW, in some sense <code>for</code> is a destructuring mechanism as well; <code>for</code> destructures iterators into a loop.</p>",
        "id": 232647107,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617217551
    },
    {
        "content": "<p>FWIW, <a href=\"https://github.com/rust-lang/C/issues/8\">C#8</a> added <code>await foreach</code> (<a href=\"https://docs.microsoft.com/en-us/archive/msdn-magazine/2019/november/csharp-iterating-with-async-enumerables-in-csharp-8\">https://docs.microsoft.com/en-us/archive/msdn-magazine/2019/november/csharp-iterating-with-async-enumerables-in-csharp-8</a>) and <code>await using</code> (<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/await#asynchronous-streams-and-disposables\">https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/await#asynchronous-streams-and-disposables</a>), so it apparently chose to use the <em>elimination</em> operator for them.</p>",
        "id": 232648165,
        "sender_full_name": "scottmcm",
        "timestamp": 1617217984
    },
    {
        "content": "<p>I don't know how to weigh the duality argument against the \"you scan for <code>?</code> to find places that can propagate errors\" argument.</p>",
        "id": 232648270,
        "sender_full_name": "scottmcm",
        "timestamp": 1617218041
    },
    {
        "content": "<blockquote>\n<p>you scan for <code>?</code> to find places that can propagate errors</p>\n</blockquote>\n<p>...and <code>return Err</code></p>",
        "id": 232648714,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617218179
    },
    {
        "content": "<p>or <code>yeet</code> I suppose</p>",
        "id": 232648755,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617218193
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/Try.20operator.20in.20destructure/near/232647107\">said</a>:</p>\n<blockquote>\n<p>FWIW, in some sense <code>for</code> is a destructuring mechanism as well; <code>for</code> destructures iterators into a loop.</p>\n</blockquote>\n<p>ye, i explored that a bit in the linked post as well</p>",
        "id": 232654524,
        "sender_full_name": "rpjohnst",
        "timestamp": 1617220345
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/Try.20operator.20in.20destructure/near/232460142\">said</a>:</p>\n<blockquote>\n<p>I also have a vague feeling that there may be generalizations we might want. If we had the ability for closures to return from their containing functions, that'd solve many problems (and potentially create new ones, but still).</p>\n</blockquote>\n<p>this feels like an unrelated problem?</p>",
        "id": 232832446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617315164
    },
    {
        "content": "<p>Hmm, <code>for try { x }</code> doesn't feel very compelling to me as a syntax, although I agree with the analogy. I think it's better to think of the <code>?</code> pattern as \"transforming\" the value being matched, though, and not so much as \"destructuring it\"</p>",
        "id": 232832613,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617315283
    },
    {
        "content": "<p>this is why it can only appear in some locations</p>",
        "id": 232832620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617315292
    },
    {
        "content": "<p>put another way, the argument of \"scan for <code>?</code> to find error propagation\" feels really, really strong to me</p>",
        "id": 232832649,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617315304
    },
    {
        "content": "<p>I would perhaps be ok with <code>for? x</code> and <code>for.await? x</code> though ; but in the pattern feels better</p>",
        "id": 232832694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617315332
    },
    {
        "content": "<p>I think <code>.await</code> and <code>?</code> are actually both the same kind of \"transformation pattern\"</p>",
        "id": 232832707,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617315344
    },
    {
        "content": "<p>that you can only apply in irrefutable contexts</p>",
        "id": 232832769,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617315373
    },
    {
        "content": "<p>I have to admit that <code>for x.await?</code>.. hmm ... is kind of weird :)</p>",
        "id": 232832808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617315399
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/Try.20operator.20in.20destructure/near/232832446\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/Try.20operator.20in.20destructure/near/232460142\">said</a>:</p>\n<blockquote>\n<p>I also have a vague feeling that there may be generalizations we might want. If we had the ability for closures to return from their containing functions, that'd solve many problems (and potentially create new ones, but still).</p>\n</blockquote>\n<p>this feels like an unrelated problem?</p>\n</blockquote>\n<p>Not exactly. If we have the ability for closures to return from containing functions (call it <code>^?</code> for the sake of bikeshedding), then it's easy to write something like <code>.map(|x| x^?)</code>.</p>",
        "id": 232833885,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617316080
    },
    {
        "content": "<p>Which I find more self-explanatory than <code>for?</code> or <code>for x? in</code>.</p>",
        "id": 232833966,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617316122
    },
    {
        "content": "<p>I see.</p>",
        "id": 233409415,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617753501
    }
]