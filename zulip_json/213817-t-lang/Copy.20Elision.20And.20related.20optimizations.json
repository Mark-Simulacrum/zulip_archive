[
    {
        "content": "<p>C++ permits the implementation to remove calls to copy and move constructors in certain situtations (and even requires some, as of C++17). <br>\nThis is important because copy and move construction can be non-trivial, however in rust, all moves and copies are trivial.<br>\nHowever, certain optimizations may cause other issues, for example, Return Value Optimization, and likewise Named Return Value Optimization. These respectively permits (requires in C++17) that rvalue returns be constructed directly into the object initialized by the return value, and permits the same when the return value is the name of a local variable that isn't a parameter.  This can alter the number and type of parameters, as it requires passing an invisible parameter of type <code>*mut R</code> for all functions of type <code>unsafe? extern\"ABI\"? fn(Args...)-&gt;R</code> (where <code>Args...</code> is the list of parameters). </p>\n<p>The main questions are if RVO and NRVO would in fact be permitted by Rust, and whether or not there are any  limitations I am unaware of that would block such.</p>",
        "id": 216007923,
        "sender_full_name": "Connor Horman",
        "timestamp": 1604843142
    },
    {
        "content": "<p>RVO (or is it NRVO?) can already be performed when mir optimizations are enabled. A return parameter is already used as part of both the Rust and (in case of the SystemV abi) the C abi when the return value doesn't fit in registers.</p>",
        "id": 216008167,
        "sender_full_name": "bjorn3",
        "timestamp": 1604843582
    },
    {
        "content": "<p>One thing that should make RVO easier in Rust is that all types can be trivially moved. (Compared to C++ where a type may rely on its own address)</p>",
        "id": 216008175,
        "sender_full_name": "Diggsey",
        "timestamp": 1604843637
    },
    {
        "content": "<p>IIRC the problem in Rust is more about whether those optimizations can be always guaranteeded or not for some users (so, for instance, you can ensure that a value can be built in the destination without intermediate allocation).</p>",
        "id": 216009544,
        "sender_full_name": "pachi",
        "timestamp": 1604845935
    },
    {
        "content": "<p>The Rust call ABI is not defined, so we can add such invisible parameters as we see fit</p>",
        "id": 216014241,
        "sender_full_name": "RalfJ",
        "timestamp": 1604853484
    },
    {
        "content": "<p>I'd say that that C++ being able to remove copy constructors is more like Rust getting the ability to remove <code>Clone::clone</code> calls.  (Which seems plausible to me -- turning it into a move if it's known to be the last use after some MIR optimizations or what have you.)</p>",
        "id": 216021807,
        "sender_full_name": "scottmcm",
        "timestamp": 1604864346
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/213817-t-lang/topic/Copy.20Elision.20And.20related.20optimizations/near/216021807\">said</a>:</p>\n<blockquote>\n<p>I'd say that that C++ being able to remove copy constructors is more like Rust getting the ability to remove <code>Clone::clone</code> calls.  (Which seems plausible to me -- turning it into a move if it's known to be the last use after some MIR optimizations or what have you.)</p>\n</blockquote>\n<p>I think that's impossible in general without some unsafe marker traits, the <code>clone</code> could have observable side-effects</p>",
        "id": 216022081,
        "sender_full_name": "RalfJ",
        "timestamp": 1604864761
    },
    {
        "content": "<p>I'm not a big fan of adding some weasly language to the spec which says that those calls may be omitted under some conditions... letting the compiler remove effectful function calls is really dubious (in particular in a safe language), and the need is much less pressing than in C++ since Rust does not have nearly as much <code>clone</code> as C++ has implicit copy constructor calls</p>",
        "id": 216022141,
        "sender_full_name": "RalfJ",
        "timestamp": 1604864826
    },
    {
        "content": "<p>note that the conditions under which <code>clone</code> can be removed would have to be spelled out entirely in terms of the surface language (like C++ does), not in terms of however the MIR looks after a bunch of optimizations -- it needs to be crystal clear to the programmer when we are allowed to remove function calls that they explicitly wrote down should happen</p>",
        "id": 216022205,
        "sender_full_name": "RalfJ",
        "timestamp": 1604864908
    },
    {
        "content": "<p>Ah, interesting.  Being syntactic definitely makes this less useful, since that makes it a place where the existing \"you don't need <code>.clone()</code> here\" lints work.</p>",
        "id": 216022281,
        "sender_full_name": "scottmcm",
        "timestamp": 1604865005
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/213817-t-lang/topic/Copy.20Elision.20And.20related.20optimizations/near/216022205\">said</a>:</p>\n<blockquote>\n<p>note that the conditions under which <code>clone</code> can be removed would have to be spelled out entirely in terms of the surface language (like C++ does), not in terms of however the MIR looks after a bunch of optimizations -- it needs to be crystal clear to the programmer when we are allowed to remove function calls that they explicitly wrote down should happen</p>\n</blockquote>\n<p>Aren't the current plans for rust specification directed at the MIR? Or do you mean that this is an additional design constraint on the spec</p>",
        "id": 216022298,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604865048
    },
    {
        "content": "<blockquote>\n<p>Aren't the current plans for rust specification directed at the MIR? Or do you mean that this is an additional design constraint on the spec</p>\n</blockquote>\n<p>my plan was to do the spec in terms of some \"miniRust\" MIR-like language -- for languages with large surface syntax, it is usually best to first translate them to a \"core language\" and then give precise semantics to the core language</p>",
        "id": 216024078,
        "sender_full_name": "RalfJ",
        "timestamp": 1604867652
    },
    {
        "content": "<p>but of course the translation from surface Rust to \"miniRust\" also needs to be made precise, that is part of the spec then</p>",
        "id": 216024082,
        "sender_full_name": "RalfJ",
        "timestamp": 1604867673
    },
    {
        "content": "<p>Right. And MIR isn't eligible as \"miniRust\" because it is still too big?</p>",
        "id": 216024094,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604867715
    },
    {
        "content": "<p>so okay the conditions for <code>clone</code> removal could be given in terms of \"miniRust\", but certainly not in terms of any optimizations</p>",
        "id": 216024096,
        "sender_full_name": "RalfJ",
        "timestamp": 1604867719
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/213817-t-lang/topic/Copy.20Elision.20And.20related.20optimizations/near/216024094\">said</a>:</p>\n<blockquote>\n<p>Right. And MIR isn't eligible as \"miniRust\" because it is still too big?</p>\n</blockquote>\n<p>well mostly it has a bunch of unnecessary stuff in it to accomodate a range of compiler passes</p>",
        "id": 216024150,
        "sender_full_name": "RalfJ",
        "timestamp": 1604867764
    },
    {
        "content": "<p>adding another language to the pipeline seems like a major change, to say the least</p>",
        "id": 216024156,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604867777
    },
    {
        "content": "<p>would miri work on miniRust instead of MIR?</p>",
        "id": 216024160,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604867798
    },
    {
        "content": "<p>and it has some unnecsesary syntactic restrictions for places/values that do not help for a spec, they just help for implementation concerns</p>",
        "id": 216024164,
        "sender_full_name": "RalfJ",
        "timestamp": 1604867812
    },
    {
        "content": "<p>oh I should clarify, I did not expect miniRust to be added to any pipeline</p>",
        "id": 216024170,
        "sender_full_name": "RalfJ",
        "timestamp": 1604867826
    },
    {
        "content": "<p>it is a spec language</p>",
        "id": 216024173,
        "sender_full_name": "RalfJ",
        "timestamp": 1604867828
    },
    {
        "content": "<p>though actually implementing it might be a fun exercise ;)</p>",
        "id": 216024175,
        "sender_full_name": "RalfJ",
        "timestamp": 1604867842
    },
    {
        "content": "<p>yes, but if miri is to be a UB catcher it has to stay somewhat close to the spec</p>",
        "id": 216024176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604867845
    },
    {
        "content": "<p>sure</p>",
        "id": 216024189,
        "sender_full_name": "RalfJ",
        "timestamp": 1604867875
    },
    {
        "content": "<p>as long as miniRust can be easily translated to MIR, that should be fine</p>",
        "id": 216024234,
        "sender_full_name": "RalfJ",
        "timestamp": 1604867911
    },
    {
        "content": "<p>so conceivably we could have an alternate \"spec compiler\" that takes Rust -&gt; miniRust -&gt; MIR</p>",
        "id": 216024250,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604867961
    },
    {
        "content": "<p>and hopefully is small and easily documentable</p>",
        "id": 216024254,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604867977
    },
    {
        "content": "<p>a spec compiler would stop at miniRust I think</p>",
        "id": 216024256,
        "sender_full_name": "RalfJ",
        "timestamp": 1604867980
    },
    {
        "content": "<p>MIR is an internal implementation detail of rustc</p>",
        "id": 216024263,
        "sender_full_name": "RalfJ",
        "timestamp": 1604867986
    },
    {
        "content": "<p>ok so Rust -&gt; miniRust and then an interpreter on miniRust?</p>",
        "id": 216024309,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604868009
    },
    {
        "content": "<p>miniRust is more like... if you look at the JS spec, they often specify surface-level operations as a sequence of small and precise steps. written in English. I am imagining something like that, except the steps are written in a programming language (with a formal spec in Coq if I can help it :D )</p>",
        "id": 216024333,
        "sender_full_name": "RalfJ",
        "timestamp": 1604868064
    },
    {
        "content": "<p>that all sounds good, but it would be nice to have miniRust actually be executable (i.e. you have a computational interpretation in the Coq version, although that probably doesn't work as is because of termination. I don't know, stick some fuel argument in or something)</p>",
        "id": 216024407,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604868173
    },
    {
        "content": "<p>sure, there are many things one could imagine longer-term</p>",
        "id": 216024415,
        "sender_full_name": "RalfJ",
        "timestamp": 1604868190
    },
    {
        "content": "<p>but that's ways off at this point ;)</p>",
        "id": 216024417,
        "sender_full_name": "RalfJ",
        "timestamp": 1604868210
    },
    {
        "content": "<p>I would think that a miniRust interpreter is not much different from a MIR interpreter in terms of difficulty, and we have the latter</p>",
        "id": 216024469,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604868256
    },
    {
        "content": "<p>and miniRust -&gt; MIR would be an easy way to leverage miri for that purpose</p>",
        "id": 216024489,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604868306
    },
    {
        "content": "<p>and then there would be the concrete (hopefully formally provable) correctness question of that miniRust -&gt; MIR map</p>",
        "id": 216024512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604868361
    },
    {
        "content": "<blockquote>\n<p>I'd say that that C++ being able to remove copy constructors is more like Rust getting the ability to remove <code>Clone::clone</code> calls.  (Which seems plausible to me -- turning it into a move if it's known to be the last use after some MIR optimizations or what have you.)I'd say that that C++ being able to remove copy constructors is more like Rust getting the ability to remove <code>Clone::clone</code> calls.  (Which seems plausible to me -- turning it into a move if it's known to be the last use after some MIR optimizations or what have you.)</p>\n</blockquote>\n<p>That a separate thing I wanted, but it would require an RFC definitely. Ideally, x.clone() should be allowed to copy or move x if x is an lvalue and the program would not be ill-formed, and simply x if x is an rvalue (and thus elide the clone call in the case of it being an rvalue or something that can be copied/moved). This would be an elision, an explicitly permitted optimization that can alter observable behaviour.</p>\n<blockquote>\n<blockquote>\n<p>Aren't the current plans for rust specification directed at the MIR? Or do you mean that this is an additional design constraint on the spec</p>\n</blockquote>\n<p>my plan was to do the spec in terms of some \"miniRust\" MIR-like language -- for languages with large surface syntax, it is usually best to first translate them to a \"core language\" and then give precise semantics to the core language</p>\n</blockquote>\n<p>Speaking as a compiler writer, I would rather it be in terms of rust. I don't want to be tied to a particular intermediate representation that I would diverge from anyways. Having it in terms of an intermediate representation would require either doing a multistage translation before even hitting the compilers actual IR (which is not what I would particularly like) or require working backwords to assign the meaning to the actual rust concepts and constructs (equally unappealing).<br>\nI would also prefer it to be primarily or at least majorly written in prose, but I understand that may raise some issues. (I find it easier to both read and write prose specifications and standards).</p>",
        "id": 216027587,
        "sender_full_name": "Connor Horman",
        "timestamp": 1604872951
    },
    {
        "content": "<blockquote>\n<p>I don't want to be tied to a particular intermediate representation that I would diverge from anyways.</p>\n</blockquote>\n<p>it's not an intermediate representation, it's a core calculus. that is something very different, at least conceptually.<br>\nevery single precise formal spec of a complex language that I know of uses this pattern of translating the huge amount of complexity in the surface language to a smaller core that can actually be understood, formalized, and explained. something where the syntax fits on half a page or less. usually that smaller core is not described as a language in its own right, but I do not think there is a good reason for that.<br>\nthis is not an IR that <em>any</em> compiler would use, but a crucial factoring step. we can either make our lives insanely difficult and try to work on a precise spec for full Rust directly, or we use established design techniques for how to split that unwieldy task into multiple manageable tasks. the former is like trying to build a compiler without an IR or any kind of abstraction barrier -- it's possible, but not a good idea.</p>",
        "id": 216031865,
        "sender_full_name": "RalfJ",
        "timestamp": 1604879135
    },
    {
        "content": "<p>just like software engineering has developed techniques to make large software manageable through layers of abstraction, the same is true for language design. all I propose is that we build on top of decades of research on this subject instead of ignoring it.</p>",
        "id": 216031999,
        "sender_full_name": "RalfJ",
        "timestamp": 1604879333
    },
    {
        "content": "<blockquote>\n<p>I would also prefer it to be primarily or at least majorly written in prose, but I understand that may raise some issues. (I find it easier to both read and write prose specifications and standards).</p>\n</blockquote>\n<p>I'd be happy for someone to translate the formal spec to prose, but experience shows that making prose unambiguous and exhaustive is way harder than doing the same for math. so the normative spec should IMO be in a formal language, with prose explaining the less readable parts where necessary.<br>\nthe prose specs that I saw and actually liked (wasm, JS -- I only read snippets of either though) are basically just verbose notation for math, so that might be a reasonable middle ground. both of these are such that translating to math is straight-forward. (that's unlike e.g. C/C++ where translating even parts of the standard to math is something you can still write papers and even PhD theses about.)<br>\nbut anyway, any such spec is ways off currently, so it's not very helpful to discuss how exactly the spec should be presented.^^ either approach (prose/formal) can lead to a sufficiently precise spec, what is more important IMO is getting the overall structure right. and that's where I claim a core calculus is key. (wasm doesn't need one as it is tiny, and JS basically has one, they just do not call it a language.)</p>",
        "id": 216032072,
        "sender_full_name": "RalfJ",
        "timestamp": 1604879421
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>I would also prefer it to be primarily or at least majorly written in prose, but I understand that may raise some issues. (I find it easier to both read and write prose specifications and standards).</p>\n</blockquote>\n<p>I'd be happy for someone to translate the formal spec to prose, but experience shows that making prose unambiguous and exhaustive is way harder than doing the same for math. so the normative spec should IMO be in a formal language, with prose explaining the less readable parts where necessary.</p>\n</blockquote>\n<p>Having both in the same document may actually be good. I happen to think the C++ standard is readable and reasonably understandable, but I can see your point, considering there are people who spend time trying to figure out what it actually says. The main reason I like prose is two-fold, it's easier to read and easier to cite (at least imo). I don't have to constantly refer to the base mathematical model in order to understand a particular section, and I have cited particular clauses of the C++ standard.</p>",
        "id": 216034096,
        "sender_full_name": "Connor Horman",
        "timestamp": 1604882434
    },
    {
        "content": "<p>Having something verifiable through Coq (are there even other theorem provers used ?) sounds very nice but for people like me that have neither the time nor the skills to understand it all, having prose as a way to just read and cite some parts seems very important</p>",
        "id": 216036628,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1604886400
    },
    {
        "content": "<p>Actually my hope was that the precise version would look less like math and more like an idealized subset of safe Rust. :D It would be rather unconventional to use pseudo-Rust programs to specify the behavior of Rust (or miniRust), but I think it would actually work out very well and also help with the \"formal math is very hard to read\" problem.</p>",
        "id": 216055812,
        "sender_full_name": "RalfJ",
        "timestamp": 1604911511
    },
    {
        "content": "<p>But to see if that really works, I should take some subset of miniRust and specify it that way; then we can gather feedback for how well people think this approach works. I just have no idea when I'll finally have the time to write up such things... there are always more discussions coming up elsewhere that prevent me form working on such lower priority tasks.^^</p>",
        "id": 216055984,
        "sender_full_name": "RalfJ",
        "timestamp": 1604911578
    },
    {
        "content": "<p>Adding onto this, a couple of other reasonable optimizations I just came up, and I presume they are equally fine:</p>\n<ul>\n<li>copy-promotion, IE. promoting a copy to a move when the copied-from lvalue is a name, and that name is <em>definately-unused</em></li>\n<li>In-place conversion, when a moved value is converted via a bitwise no-op, and the result is borrowed.</li>\n</ul>\n<p>One other question I had, could those be pseudo-applied to dereferenced pointers/lvalues? IE. if x is &amp;i8, could the compiler optimize &amp;(*x as u8) into a no-op, and just treat x as an &amp;u8? Or could that run into something with printing pointers?</p>",
        "id": 216540358,
        "sender_full_name": "Connor Horman",
        "timestamp": 1605221054
    },
    {
        "content": "<p>What does \"promoting a copy to a move\" mean when they are both effectively <code>memcpy</code>?</p>",
        "id": 216549529,
        "sender_full_name": "cuviper",
        "timestamp": 1605227263
    },
    {
        "content": "<p>In this case, it would allow the compiler to optimize based on the fact it's the last use, and in some cases, keep it in place.</p>",
        "id": 216554234,
        "sender_full_name": "Connor Horman",
        "timestamp": 1605230939
    },
    {
        "content": "<p>I expect LLVM already does that, but do you mean at the MIR level, perhaps?</p>",
        "id": 216642213,
        "sender_full_name": "cuviper",
        "timestamp": 1605287586
    },
    {
        "content": "<p>I am referring generally to any level of compilation employed by whatever compiler may be in use.</p>",
        "id": 216663579,
        "sender_full_name": "Connor Horman",
        "timestamp": 1605296837
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> <a href=\"#narrow/stream/213817-t-lang/topic/Copy.20Elision.20And.20related.20optimizations/near/216549529\">said</a>:</p>\n<blockquote>\n<p>What does \"promoting a copy to a move\" mean when they are both effectively <code>memcpy</code>?</p>\n</blockquote>\n<p>MIR has different <code>Copy</code> and <code>Move</code> operands, so I can imagine turning a copy into a move would help other optimizations.</p>\n<p>For example, doing that (<a href=\"https://github.com/rust-lang/rust/pull/46869\">https://github.com/rust-lang/rust/pull/46869</a>) could allow a peephole <code>_2 = move _1; _3 = move _2</code> =&gt; <code>_3 = move _1</code> pass to be more effective (<a href=\"https://github.com/rust-lang/rust/pull/46440\">https://github.com/rust-lang/rust/pull/46440</a>)</p>",
        "id": 216671883,
        "sender_full_name": "scottmcm",
        "timestamp": 1605300998
    },
    {
        "content": "<p>OK, I didn't know MIR still distinguished that</p>",
        "id": 216687796,
        "sender_full_name": "cuviper",
        "timestamp": 1605309864
    },
    {
        "content": "<p>Looks like it still does: <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/enum.Operand.html#variants\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/enum.Operand.html#variants</a></p>\n<p>(There was a time when it didn't have it, though, IIRC.)</p>",
        "id": 216697798,
        "sender_full_name": "scottmcm",
        "timestamp": 1605318562
    },
    {
        "content": "<p>I meant \"still\" as in the progression of lowering code, not the history of MIR. But I guess if IR is going to distinguish this at all, it would have to be after type resolution...</p>",
        "id": 216701921,
        "sender_full_name": "cuviper",
        "timestamp": 1605323592
    }
]