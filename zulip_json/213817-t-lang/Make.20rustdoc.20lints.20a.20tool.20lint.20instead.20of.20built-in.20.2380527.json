[
    {
        "content": "<p>Speaking of which, <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> do you have a second to look at <a href=\"https://github.com/rust-lang/rust/pull/80527#issuecomment-761934254\">https://github.com/rust-lang/rust/pull/80527#issuecomment-761934254</a> ?</p>",
        "id": 223770564,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611431025
    },
    {
        "content": "<p>And sure, one moment...</p>",
        "id": 223770710,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611431106
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> Would it be worth simplifying the change by dropping lines like <code> #![cfg_attr(bootstrap, deny(...))]</code> ? Technically the bootstrap compile doesn't <em>have</em> to have that deny.</p>",
        "id": 223772709,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611432459
    },
    {
        "content": "<p>Likewise the <code>             cmd.arg(\"-Winvalid_codeblock_attributes\");</code> case.</p>",
        "id": 223772769,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611432492
    },
    {
        "content": "<p>On a different note...</p>",
        "id": 223772799,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611432560
    },
    {
        "content": "<p>Why did this change?</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">-  = note: `#[warn(invalid_html_tags)]` on by default</span>\n<span class=\"gi\">+  note: the lint level is defined here</span>\n<span class=\"gi\">+ --&gt; foo.rs:1:9</span>\n<span class=\"gi\">+  |</span>\n<span class=\"gi\">+1 | #![warn(rustdoc::invalid_html_tags)]</span>\n<span class=\"gi\">+  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^</span>\n</code></pre></div>",
        "id": 223772815,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611432594
    },
    {
        "content": "<p>Is <code>rustdoc::invalid_html_tags</code> not on by default?</p>",
        "id": 223772863,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611432612
    },
    {
        "content": "<p>Some of the other tool lints still say things like <code>   = note: `#[warn(rustdoc::non_autolinks)]` on by default</code></p>",
        "id": 223772887,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611432672
    },
    {
        "content": "<p>oh shoot I forgot to rebase this over <a href=\"https://github.com/rust-lang/rust/pull/81135\">https://github.com/rust-lang/rust/pull/81135</a></p>",
        "id": 223772972,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611432798
    },
    {
        "content": "<p>let me do that real quick so the diff is smaller</p>",
        "id": 223772974,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611432803
    },
    {
        "content": "<p>Ah, makes sense. I'm assuming that isn't related to the two items I just mentioned though?</p>",
        "id": 223773038,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611432861
    },
    {
        "content": "<p>no, just a courtesy thing <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 223773068,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611432921
    },
    {
        "content": "<p>I appreciate it. :)</p>",
        "id": 223773077,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611432946
    },
    {
        "content": "<p>OK, just finished reviewing.</p>",
        "id": 223773137,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611433006
    },
    {
        "content": "<p>The suggestion about bootstrap is <em>entirely</em> optional and I have no preference.</p>",
        "id": 223773149,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611433018
    },
    {
        "content": "<p>The other question still stands, though.</p>",
        "id": 223773157,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611433027
    },
    {
        "content": "<p>About \"on by default\" changing.</p>",
        "id": 223773168,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611433038
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/Make.20rustdoc.20lints.20a.20tool.20lint.20instead.20of.20built-in.20.23.2080527/near/223772709\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> Would it be worth simplifying the change by dropping lines like <code> #![cfg_attr(bootstrap, deny(...))]</code> ? Technically the bootstrap compile doesn't <em>have</em> to have that deny.</p>\n</blockquote>\n<p>I can if you like; I kind of like keeping the same behavior though.</p>\n<blockquote>\n<p>Is rustdoc::invalid_html_tags not on by default?</p>\n</blockquote>\n<p>It is not, I've been to turn it on but never got around to it. <a href=\"https://github.com/rust-lang/rust/issues/67799\">https://github.com/rust-lang/rust/issues/67799</a></p>",
        "id": 223773179,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611433059
    },
    {
        "content": "<p>Shouldn't the behavior of that tool lint match the existing lint?</p>",
        "id": 223773234,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611433094
    },
    {
        "content": "<p>I don't know why the output changed. It was allowed by default before too: <a href=\"https://github.com/rust-lang/rust/pull/80527/files#diff-f479f8f1d2ed5f848531b050c5df0df73129fc002048c7090b152dc66f58aa10L1909\">https://github.com/rust-lang/rust/pull/80527/files#diff-f479f8f1d2ed5f848531b050c5df0df73129fc002048c7090b152dc66f58aa10L1909</a></p>",
        "id": 223773298,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611433203
    },
    {
        "content": "<p>the previous setup was pretty convoluted and I wouldn't be surprised if there was a bug somewhere that caused the lint system to think it was enabled even though it wasn't</p>",
        "id": 223773337,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611433242
    },
    {
        "content": "<p>Huh! That's very strange.</p>",
        "id": 223773346,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611433250
    },
    {
        "content": "<p>So despite the output saying \"on by default\", it isn't actually on by default, and it was only being checked because it was turned on, but the \"the lint level is defined here\" logic wasn't working?</p>",
        "id": 223773370,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611433311
    },
    {
        "content": "<p>I think so? I'm not exactly sure</p>",
        "id": 223773422,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611433350
    },
    {
        "content": "<p>rustdoc does very strange things with the lint machinery</p>",
        "id": 223773435,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611433380
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustdoc/core/fn.init_lints.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustdoc/core/fn.init_lints.html</a></p>",
        "id": 223773444,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611433388
    },
    {
        "content": "<p>I think it would be worth looking into why it gave the wrong output. I realize that this change has the side effect of fixing that, but I'd find it much more comforting to know <em>why</em> this change is fixing that, and whether the previous bug might apply to anything else in rustc.</p>",
        "id": 223773448,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611433408
    },
    {
        "content": "<p>I'm not going to call that a blocker for merging this change, but I'd really appreciate it if you'd take a look.</p>",
        "id": 223773460,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611433431
    },
    {
        "content": "<p>(I'm much less worried about \"why was it broken before\"; I'm primarily concerned about \"is there any chance it's still broken and this is just masking something, or the bug still applies to some other lint, or some other weird issue that may not be as evident in the future as it is at the moment\".)</p>",
        "id": 223773526,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611433499
    },
    {
        "content": "<p>so this is even more strange, I can't replicate the output:</p>\n<div class=\"codehilite\"><pre><span></span><code>&gt; rustdoc +nightly lint.rs\nwarning: no documentation found for this crate&#39;s top-level module\n  |\nnote: the lint level is defined here\n --&gt; lint.rs:2:9\n  |\n2 | #![warn(missing_crate_level_docs)]\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^\n  = help: The following guide may be of use:\n          https://doc.rust-lang.org/nightly/rustdoc/how-to-write-documentation.html\n\nwarning: unclosed HTML tag `xyz`\n --&gt; lint.rs:4:5\n  |\n4 | /// &lt;xyz&gt;\n  |     ^^^^^\n  |\nnote: the lint level is defined here\n --&gt; lint.rs:1:9\n  |\n1 | #![warn(invalid_html_tags)]\n  |         ^^^^^^^^^^^^^^^^^\n</code></pre></div>",
        "id": 223773547,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611433548
    },
    {
        "content": "<p>Does that mean the test was failing?</p>",
        "id": 223773600,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611433577
    },
    {
        "content": "<p>it can't have been, it's been there for ages</p>",
        "id": 223773603,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611433592
    },
    {
        "content": "<p>and rustdoc is tested on CI</p>",
        "id": 223773606,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611433598
    },
    {
        "content": "<p>oh! It's not a test</p>",
        "id": 223773612,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611433625
    },
    {
        "content": "<p>it's in lints.md</p>",
        "id": 223773614,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611433628
    },
    {
        "content": "<p>I don't think any of those are tested</p>",
        "id": 223773617,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611433636
    },
    {
        "content": "<p>I bet <span class=\"user-mention silent\" data-user-id=\"210316\">GuillaumeGomez</span> just forgot to update the docs when he first added the lint</p>",
        "id": 223773627,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611433661
    },
    {
        "content": "<p>Ah.</p>",
        "id": 223773685,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611433711
    },
    {
        "content": "<p>In that case, is there any chance you could arrange to make <code>lints.md</code> have its docs run as doctests?</p>",
        "id": 223773703,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611433746
    },
    {
        "content": "<p>(Also not a blocker, but would be nice.)</p>",
        "id": 223773724,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611433798
    },
    {
        "content": "<p>I would prefer not to do that here</p>",
        "id": 223773772,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611433807
    },
    {
        "content": "<p>can you open an issue?</p>",
        "id": 223773776,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611433810
    },
    {
        "content": "<p>I wasn't expecting you to do so in the same PR. :)</p>",
        "id": 223773783,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611433837
    },
    {
        "content": "<p>And sure.</p>",
        "id": 223773785,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611433839
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/81305\">https://github.com/rust-lang/rust/issues/81305</a></p>",
        "id": 223773927,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611434015
    },
    {
        "content": "<p>Also linked from a comment on your PR.</p>",
        "id": 223773934,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611434021
    },
    {
        "content": "<p>thank you!</p>",
        "id": 223773984,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611434047
    },
    {
        "content": "<p>/me snrks at you finding my freshly opened PR faster than I could finish writing a comment about it.</p>",
        "id": 223773986,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611434054
    },
    {
        "content": "<p>well you did ping me on it lol</p>",
        "id": 223774009,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611434111
    },
    {
        "content": "<p>(Have I mentioned how much I appreciate rust checking doctests by default, by the way?)</p>",
        "id": 223774081,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611434187
    },
    {
        "content": "<p>I <em>love</em> that sample code in the documentation can never go stale.</p>",
        "id": 223774088,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611434198
    },
    {
        "content": "<p>Also amused by the combination of the path to lints.md and the path I keep rustc in: <code>~/src/rust/src/doc/rustdoc/src/</code></p>",
        "id": 223774253,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611434438
    },
    {
        "content": "<p>\"And coming into the last dirname it's <code>src</code>, <code>rust</code>, and <code>doc</code> in a three-way tie...and <code>src</code> pulls ahead for the win!\"</p>",
        "id": 223774282,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611434498
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> so this gets even stranger: there <em>are</em> tests for that directory:</p>\n<div class=\"codehilite\"><pre><span></span><code>&gt; xpy test src/doc/rustdoc\nUpdating only changed submodules\nSubmodules updated in 0.01 seconds\n    Finished dev [unoptimized + debuginfo] target(s) in 0.09s\ndoc tests for: /home/joshua/rustc/src/doc/rustdoc/src/advanced-features.md\nBuilding rustdoc for stage1 (x86_64-unknown-linux-gnu)\n   Compiling rustdoc v0.0.0 (/home/joshua/rustc/src/librustdoc)\n   Compiling rustdoc-tool v0.0.0 (/home/joshua/rustc/src/tools/rustdoc)\n    Finished release [optimized + debuginfo] target(s) in 8.34s\ndoc tests for: /home/joshua/rustc/src/doc/rustdoc/src/command-line-arguments.md\ndoc tests for: /home/joshua/rustc/src/doc/rustdoc/src/documentation-tests.md\ndoc tests for: /home/joshua/rustc/src/doc/rustdoc/src/how-to-write-documentation.md\ndoc tests for: /home/joshua/rustc/src/doc/rustdoc/src/linking-to-items-by-name.md\ndoc tests for: /home/joshua/rustc/src/doc/rustdoc/src/lints.md\ndoc tests for: /home/joshua/rustc/src/doc/rustdoc/src/passes.md\ndoc tests for: /home/joshua/rustc/src/doc/rustdoc/src/the-doc-attribute.md\ndoc tests for: /home/joshua/rustc/src/doc/rustdoc/src/unstable-features.md\ndoc tests for: /home/joshua/rustc/src/doc/rustdoc/src/what-is-rustdoc.md\ndoc tests for: /home/joshua/rustc/src/doc/rustdoc/src/what-to-include.md\n    finished in 12.748 seconds\nBuild completed successfully in 0:00:13\n</code></pre></div>",
        "id": 223775537,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611435397
    },
    {
        "content": "<p>this is with the broken output</p>",
        "id": 223775543,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611435402
    },
    {
        "content": "<p>Ok I see the issue - this is not actually a doctest, this is showing the <em>output</em> from compiling the code</p>",
        "id": 223775598,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611435438
    },
    {
        "content": "<p>so it has to be <code>text</code>, not <code>rust</code></p>",
        "id": 223775602,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611435442
    },
    {
        "content": "<p>and therefore rustdoc doesn't test it</p>",
        "id": 223775619,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611435450
    },
    {
        "content": "<p>what we really want is for the output to be <em>generated</em> by rustdoc, which I don't think there's a way to do currently</p>",
        "id": 223775638,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611435479
    },
    {
        "content": "<p>I don't actually think that's what we want.</p>",
        "id": 223775682,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611435497
    },
    {
        "content": "<p>Generating the output would mean that it isn't checked.</p>",
        "id": 223775691,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611435504
    },
    {
        "content": "<p>I can imagine having something like <code>include_str!(\"src/test/rustdoc/invalid_html_tags.stderr)\"</code>, except that this is markdown</p>",
        "id": 223775707,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611435527
    },
    {
        "content": "<p>I think we want the ability for doctests to have \"expected output\" specified in another block.</p>",
        "id": 223775711,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611435529
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/Make.20rustdoc.20lints.20a.20tool.20lint.20instead.20of.20built-in.20.23.2080527/near/223775691\">said</a>:</p>\n<blockquote>\n<p>Generating the output would mean that it isn't checked.</p>\n</blockquote>\n<p>if it were a UI test, it would be checked - it would just be tested separately from doctests</p>",
        "id": 223775728,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611435554
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/Make.20rustdoc.20lints.20a.20tool.20lint.20instead.20of.20built-in.20.23.2080527/near/223775711\">said</a>:</p>\n<blockquote>\n<p>I think we want the ability for doctests to have \"expected output\" specified in another block.</p>\n</blockquote>\n<p>yeah this would be nice as a general rustdoc feature too</p>",
        "id": 223775743,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611435595
    },
    {
        "content": "<p>but if we can't even stabilize error codes I don't know about testing the entire output :/</p>",
        "id": 223775790,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611435620
    },
    {
        "content": "<p>What about something like this? (Let's see if I can get this into Zulip unmangled.)</p>\n<div class=\"codehilite\" data-code-language=\"markdown\"><pre><span></span><code><span class=\"sb\">```rust</span>\n<span class=\"k\">fn</span> <span class=\"nf\">rust</span><span class=\"p\">(</span><span class=\"n\">code</span>: <span class=\"nc\">Goes</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Here</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"sb\">```</span>\n```text,test-stderr\nstandard error output for the previous <span class=\"sb\">`rust`</span> block goes here\n```\n</code></pre></div>",
        "id": 223775798,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611435631
    },
    {
        "content": "<p>seems fragile for anyone other than the compiler itself anyway, output isn't stable</p>",
        "id": 223775800,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611435636
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> that would need something like <a href=\"https://github.com/rust-lang/rfcs/pull/2894\">https://github.com/rust-lang/rfcs/pull/2894</a> to tie the code blocks together</p>",
        "id": 223775819,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611435679
    },
    {
        "content": "<p>which is a much larger undertaking</p>",
        "id": 223775821,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611435685
    },
    {
        "content": "<p>They don't have to be <em>merged</em>; doctest running just needs to know they're connected.</p>",
        "id": 223775835,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611435717
    },
    {
        "content": "<p>merging is the easy part of that RFC though</p>",
        "id": 223775877,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611435730
    },
    {
        "content": "<p>If it makes things easier, they could even have something like <code>id=foo</code>.</p>",
        "id": 223775879,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611435733
    },
    {
        "content": "<p>Oh?</p>",
        "id": 223775880,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611435738
    },
    {
        "content": "<p>there was a lot of discussion over 'pause' and 'resume' and things like that</p>",
        "id": 223775890,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611435772
    },
    {
        "content": "<p>I can definitely imagine that that's endlessly bikesheddable.</p>",
        "id": 223775900,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611435787
    },
    {
        "content": "<p>In any case, I realize that rustc output is not stable, and thus testing it elsewhere would be problematic. (Testing stdout of some test code would be reasonable, but that's not the issue here.)</p>",
        "id": 223775932,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611435836
    },
    {
        "content": "<p>So, if it'd be easier to solve this problem with something like a <code>.stderr</code> file that gets doctested, that seems fine.</p>",
        "id": 223775979,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611435869
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/Make.20rustdoc.20lints.20a.20tool.20lint.20instead.20of.20built-in.20.2380527/near/223775979\">said</a>:</p>\n<blockquote>\n<p>So, if it'd be easier to solve this problem with something like a <code>.stderr</code> file that gets doctested, that seems fine.</p>\n</blockquote>\n<p>well the issue is keeping it in sync with the markdown somehow</p>",
        "id": 223775985,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611435890
    },
    {
        "content": "<p>I don't think there's a way to include arbitrary other files from markdown</p>",
        "id": 223775994,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611435902
    },
    {
        "content": "<p>True. Not without generating the markdown file at build time.</p>",
        "id": 223776116,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611436060
    },
    {
        "content": "<p>(Or turning the markdown file into a test module from which rustdoc generates documentation, or something.)</p>",
        "id": 223776186,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611436133
    },
    {
        "content": "<p>Sigh.</p>",
        "id": 223776193,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611436146
    },
    {
        "content": "<p>inb4 using the JSON output to write a markdown backend</p>",
        "id": 223776208,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611436173
    },
    {
        "content": "<p><em>markdown generating markdown</em></p>",
        "id": 223776209,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611436177
    },
    {
        "content": "<p>I <em>do</em> think that there's value in testing this, somehow.</p>",
        "id": 223776211,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611436182
    },
    {
        "content": "<p>I think it's useful, I just don't know if it's worth introducing major new features</p>",
        "id": 223776260,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611436215
    },
    {
        "content": "<p>the output very rarely changes in this case</p>",
        "id": 223776266,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611436225
    },
    {
        "content": "<p>this also touches on another issue I run into quite a bit, which is that feature gates are not very useful for rustdoc because <a href=\"http://docs.rs\">docs.rs</a> uses nightly :(</p>",
        "id": 223776378,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611436390
    },
    {
        "content": "<p>part of the issue is rustdoc just doesn't use feature gates as much as it should</p>",
        "id": 223776384,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611436403
    },
    {
        "content": "<p>like <code>--output-format json</code> should <em>absolutely</em> need <code>-Z unstable-options</code>, <code>E0XXX</code> on doctests should have its own feature gate</p>",
        "id": 223776446,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611436455
    },
    {
        "content": "<p>but people just don't add them</p>",
        "id": 223776448,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611436458
    },
    {
        "content": "<p>There's infrastructure in the compiler's lint documentation for generating code blocks of output, I believe, from tests. But those aren't intended for testing; we test error codes via the usual UI test infra.</p>",
        "id": 223778126,
        "sender_full_name": "simulacrum",
        "timestamp": 1611437835
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> the issue is that I want to include the error output in the documentation itself</p>",
        "id": 223778215,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611437998
    },
    {
        "content": "<p>so putting something in src/test/ui doesn't let me include the same output in src/doc/rustdoc</p>",
        "id": 223778263,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611438011
    },
    {
        "content": "<p>It would be reasonable to generate (rather than check) the compiler output in the rustdoc documentation, if we also made sure there were separate corresponding tests for that output.</p>",
        "id": 223778281,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611438047
    },
    {
        "content": "<p>There should be <em>one</em> place where that output gets tested, but that doesn't have to be these docs; these docs could just generate the output, if that's easier.</p>",
        "id": 223778294,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611438071
    },
    {
        "content": "<p>Yes, the error output <em>is</em> generated and placed into documentation.</p>",
        "id": 223778400,
        "sender_full_name": "simulacrum",
        "timestamp": 1611438242
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/4d0dd02ee07bddad9136f95c9f7846ebf3eb3fc5/compiler/rustc_lint_defs/src/lib.rs#L371-L375\">https://github.com/rust-lang/rust/blob/4d0dd02ee07bddad9136f95c9f7846ebf3eb3fc5/compiler/rustc_lint_defs/src/lib.rs#L371-L375</a></p>",
        "id": 223778513,
        "sender_full_name": "simulacrum",
        "timestamp": 1611438368
    },
    {
        "content": "<p>which goes to e.g. <a href=\"https://doc.rust-lang.org/rustc/lints/listing/warn-by-default.html#const-evaluatable-unchecked\">https://doc.rust-lang.org/rustc/lints/listing/warn-by-default.html#const-evaluatable-unchecked</a></p>",
        "id": 223778539,
        "sender_full_name": "simulacrum",
        "timestamp": 1611438438
    },
    {
        "content": "<p>It looks like that's for documentation in <code>.rs</code> files, not for <code>.md</code> files.</p>",
        "id": 223779410,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611439294
    },
    {
        "content": "<p>Sure, but ultimately the tooling would be similar - IIRC, those code blocks are extracted by some external tool, it's not a proc macro or anything.</p>",
        "id": 223781117,
        "sender_full_name": "simulacrum",
        "timestamp": 1611440240
    }
]