[
    {
        "content": "<p>Hey <span class=\"user-group-mention\" data-user-group-id=\"1977\">@T-lang</span> and <span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span>! There will be a design meeting to discuss, but held on Zulip! <a href=\"https://rust-lang.github.io/dyn-upcasting-coercion-initiative/design-discussions/upcast-safety.html\">This is the document</a>, but  I am trying to improve it because I'm finding it doesn't give as much context as I wanted. I'm running slower than I'd like. Can we start the meeting in 10 minutes?</p>\n<p><a href=\"https://hackmd.io/uoG_F8P8S1OC348VbHo7mQ\">Here is the hackmd I am working on.</a></p>",
        "id": 258403842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634749171
    },
    {
        "content": "<p>Sure</p>",
        "id": 258403865,
        "sender_full_name": "Charles Lew",
        "timestamp": 1634749180
    },
    {
        "content": "<p>/me waves</p>",
        "id": 258404090,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634749230
    },
    {
        "content": "<p>(The null pointer note makes me wish that <code>*const</code> and friends were non-nullable too, and we just allowed <code>*</code> on <code>Option&lt;non-null raw pointer&gt;</code>.)</p>",
        "id": 258404802,
        "sender_full_name": "scottmcm",
        "timestamp": 1634749474
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> <a href=\"https://zulip-archive.rust-lang.org/stream/144729-wg-traits/topic/object.20upcasting.html#250617911\">https://zulip-archive.rust-lang.org/stream/144729-wg-traits/topic/object.20upcasting.html#250617911</a></p>",
        "id": 258405636,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634749794
    },
    {
        "content": "<p>Would another option be to put the vtable pointer before the object, and use that for a single-pointer \"fat pointer\"?</p>",
        "id": 258405790,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634749836
    },
    {
        "content": "<p>(I'm thinking in particular of the object layout that Haskell uses here.)</p>",
        "id": 258405818,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634749847
    },
    {
        "content": "<blockquote>\n<p>Make raw pointer unsizing unsafe</p>\n</blockquote>\n<p>I think there's another option: make raw pointer <em>upcasting</em> unsafe.<br>\nIsn't that the place where the issue actually occurs?</p>",
        "id": 258405848,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1634749860
    },
    {
        "content": "<p>OK, <span class=\"user-group-mention\" data-user-group-id=\"1977\">@T-lang</span> the doc is ready! Let's start reading: <a href=\"https://hackmd.io/uoG_F8P8S1OC348VbHo7mQ\">https://hackmd.io/uoG_F8P8S1OC348VbHo7mQ</a></p>",
        "id": 258405857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634749863
    },
    {
        "content": "<p>I'll send out a ping in 10 minutes</p>",
        "id": 258405870,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634749869
    },
    {
        "content": "<p>feel free to add questions to the end of the doc please, as normal</p>",
        "id": 258405975,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634749913
    },
    {
        "content": "<p>I can transcribe Josh and Taylor's questions I guess</p>",
        "id": 258405987,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634749918
    },
    {
        "content": "<p>(I don't know if my question directly addresses the issue of upcasting, so feel free to deprioritize it.)</p>",
        "id": 258406110,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634749958
    },
    {
        "content": "<p>oh I was just writing out my own</p>",
        "id": 258406175,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1634749983
    },
    {
        "content": "<p>that's fine, feel free to edit; main thing is to create a <code>###</code> section for easier linking etc later :)</p>",
        "id": 258406307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634750038
    },
    {
        "content": "<p>Sigh, I should have added a few more options that were rejected and why -- but I'll refrain from editing the doc :)</p>",
        "id": 258406782,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634750204
    },
    {
        "content": "<p>(I decided to drop my question about Haskell layout because the exact layout is entirely unrelated and doesn't help.)</p>",
        "id": 258407030,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634750288
    },
    {
        "content": "<p>I am wondering now what layout haskell uses!</p>",
        "id": 258407112,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634750318
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> IIRC, there's a vtable of function pointers for each object, and an object in memory has metadata before it that includes that vtable.</p>",
        "id": 258407236,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634750371
    },
    {
        "content": "<p>I would guess they just allocate a pair</p>",
        "id": 258407299,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634750392
    },
    {
        "content": "<p>OK, <span class=\"user-group-mention\" data-user-group-id=\"1977\">@T-lang</span> (we maybe need a meeting alias)... 10 minutes. Folks still reading?</p>",
        "id": 258407421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634750423
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"261224\">@triagebot</span> end-topic reading</p>",
        "id": 258407474,
        "sender_full_name": "simulacrum",
        "timestamp": 1634750440
    },
    {
        "content": "<p>Does anyone have something to add on the current topic?<br>\nReact with <span aria-label=\"working on it\" class=\"emoji emoji-1f6e0\" role=\"img\" title=\"working on it\">:working_on_it:</span> if you have something to say.<br>\nReact with <span aria-label=\"all good\" class=\"emoji emoji-2705\" role=\"img\" title=\"all good\">:all_good:</span> if not.</p>",
        "id": 258407480,
        "sender_full_name": "triagebot",
        "timestamp": 1634750441
    },
    {
        "content": "<p>( <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> if done)</p>",
        "id": 258407505,
        "sender_full_name": "simulacrum",
        "timestamp": 1634750449
    },
    {
        "content": "<p>Okie dokie</p>",
        "id": 258407583,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634750471
    },
    {
        "content": "<p>I guess let's start by reviewing comments on the doc itself</p>",
        "id": 258407607,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634750483
    },
    {
        "content": "<p>Felix asks: The expression in <code>/* garbage */ either has an </code>unsafe<code> in it, or uses a value for Metadata that was constructed via </code>unsafe` code, right?</p>",
        "id": 258407654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634750501
    },
    {
        "content": "<p>And indeed, that is correct, I realize that the doc was written a bit confusingly on this point</p>",
        "id": 258407687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634750514
    },
    {
        "content": "<p>I wrote that \"It is unsafe to create a *const dyn Foo. \"</p>",
        "id": 258407764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634750525
    },
    {
        "content": "<p>but I think that is ... not quite right, it depends on how it is constructed</p>",
        "id": 258407790,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634750533
    },
    {
        "content": "<p>e.g. <code>from_raw_parts</code> is safe because it takes a <code>T::Metadata</code></p>",
        "id": 258407830,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634750544
    },
    {
        "content": "<p>and coercing from <code>&amp;dyn Foo</code> to <code>*const dyn Foo</code> ought to be safe (as <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> asked later on)</p>",
        "id": 258407870,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634750556
    },
    {
        "content": "<p>it would just be that this is an extra safety condition one must prove when transmuting to <code>*const dyn Foo</code> types</p>",
        "id": 258407904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634750569
    },
    {
        "content": "<p>Yeah, generally speaking I'd expect a raw pointer to be safe to create in the most common way and just unsafe to <em>use</em>.</p>",
        "id": 258407919,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634750574
    },
    {
        "content": "<p>\"extra\" :)</p>",
        "id": 258407922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634750575
    },
    {
        "content": "<p>well, it's not <em>safe</em> to create</p>",
        "id": 258407957,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634750585
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/design.20meeting.202021-10-20/near/258407957\">said</a>:</p>\n<blockquote>\n<p>well, it's not <em>safe</em> to create</p>\n</blockquote>\n<p>From a reference, at least.</p>",
        "id": 258407989,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634750600
    },
    {
        "content": "<p>ah, ok</p>",
        "id": 258407996,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634750604
    },
    {
        "content": "<p>Becasue there’s an invariant that you can never combine a correctly constructed <code>T::Metadata</code> with any <code>*const T</code> and get something invalid out?</p>",
        "id": 258408025,
        "sender_full_name": "pnkfelix",
        "timestamp": 1634750613
    },
    {
        "content": "<p>it's more that the routes we have for creation are relatively limited and channel you towards valid metadata</p>",
        "id": 258408038,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634750617
    },
    {
        "content": "<p>something doesn’t sit right with me there</p>",
        "id": 258408052,
        "sender_full_name": "pnkfelix",
        "timestamp": 1634750621
    },
    {
        "content": "<p>its not unsafe to cast <code>*const T as *const U</code> , right</p>",
        "id": 258408080,
        "sender_full_name": "pnkfelix",
        "timestamp": 1634750632
    },
    {
        "content": "<p>?</p>",
        "id": 258408085,
        "sender_full_name": "pnkfelix",
        "timestamp": 1634750633
    },
    {
        "content": "<p>I.e. I don’t know how one enforces the correspondence required at teh type level here</p>",
        "id": 258408170,
        "sender_full_name": "pnkfelix",
        "timestamp": 1634750651
    },
    {
        "content": "<p>I don't think, <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>, that there's an assumption that the data pointer is valid</p>",
        "id": 258408171,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634750651
    },
    {
        "content": "<p>But that does imply that the data pointer is not \"used\" in upcasts</p>",
        "id": 258408200,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634750659
    },
    {
        "content": "<p>This could plausibly be relevant for custom dst for example</p>",
        "id": 258408236,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634750674
    },
    {
        "content": "<p>Okay. I guess we’ll dig into this during the Q’s.</p>",
        "id": 258408256,
        "sender_full_name": "pnkfelix",
        "timestamp": 1634750681
    },
    {
        "content": "<p>which I guess is what <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> meant when they said:</p>\n<blockquote>\n<p>Also might imply that size_of_val_raw could be safe (though unlike the Dyn parts, this one also has consequences for potential future user-defined DST)</p>\n</blockquote>",
        "id": 258408309,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634750698
    },
    {
        "content": "<p>(next comment in the doc :)</p>",
        "id": 258408317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634750701
    },
    {
        "content": "<p>i.e., I think the idea is that the DST API for size-of could require a valid data pointer</p>",
        "id": 258408396,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634750726
    },
    {
        "content": "<p>even if for dyn types one can compute sizeof without using the data pointer</p>",
        "id": 258408423,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634750736
    },
    {
        "content": "<p>(right?)</p>",
        "id": 258408444,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634750743
    },
    {
        "content": "<p>ok, moving on to other doc comments...</p>",
        "id": 258408448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634750745
    },
    {
        "content": "<p>where I wrote</p>\n<blockquote>\n<p>It is also a rather special rule, since ordinarily upcasts are managed by the CoerceUnsized trait, and we don’t have a mechanism to make trait matching unsafe depending on which impls are used (i.e., this impl would be unsafe to use, which is not a concept the trait system has right now).</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> comments:</p>\n<blockquote>\n<p>The way I think of it, we'd basically have <code>CoerceUnsizedUnsafe</code> for these unsafe casts. The existing trait would be for casts that are always safe (on the given type).</p>\n</blockquote>",
        "id": 258408542,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634750765
    },
    {
        "content": "<p>The problem I see there is that the existing trait is already implemented for <code>*const</code></p>",
        "id": 258408593,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634750781
    },
    {
        "content": "<p>but perhaps it's ok because it's unstable?</p>",
        "id": 258408603,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634750785
    },
    {
        "content": "<p>(i.e., we could remove those impls and add a new trait without breaking back compat)</p>",
        "id": 258408667,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634750812
    },
    {
        "content": "<p>I'm assuming <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> that's what you meant then</p>",
        "id": 258408755,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634750843
    },
    {
        "content": "<p>The impls are picked up by coercion rules, so there'll be breakage on existing code in a certain range.</p>",
        "id": 258408795,
        "sender_full_name": "Charles Lew",
        "timestamp": 1634750857
    },
    {
        "content": "<p>Example?</p>",
        "id": 258408839,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634750873
    },
    {
        "content": "<p>Ah wait</p>",
        "id": 258408853,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634750879
    },
    {
        "content": "<p>well, nm</p>",
        "id": 258408925,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634750891
    },
    {
        "content": "<p>The <code>Unsize</code> trait is the one that is really baked into the compiler</p>",
        "id": 258408964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634750903
    },
    {
        "content": "<p>i.e., where all impls are synthetically generated</p>",
        "id": 258408984,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634750910
    },
    {
        "content": "<p>not the <code>CoerceUnsized</code>, is that right?</p>",
        "id": 258409003,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634750915
    },
    {
        "content": "<p>Both those two traits are used. <code>CoerceUnsized</code> is for non-builtin wrapper types. <code>Unsize</code> is for the outcome, everything included.</p>",
        "id": 258409142,
        "sender_full_name": "Charles Lew",
        "timestamp": 1634750959
    },
    {
        "content": "<p>If I'm not mistaken, <code>T: CoerceUnsized&lt;U&gt;</code> means \"the pointer could be coerced\" and the impl is something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">CoerceUnsized</span><span class=\"o\">&lt;*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nc\">Unsize</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 258409370,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634751023
    },
    {
        "content": "<p>anyway I think this is a minor point</p>",
        "id": 258409434,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634751045
    },
    {
        "content": "<p>Next question:</p>\n<h1><a href=\"https://hackmd.io/uoG_F8P8S1OC348VbHo7mQ?view#Just-have-unsafe-upcast\">Just have unsafe upcast?</a></h1>",
        "id": 258409454,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634751053
    },
    {
        "content": "<blockquote>\n<p>cramertj: I think there’s another option: make raw pointer upcasting unsafe. Isn’t that the place where the issue actually occurs?</p>\n</blockquote>",
        "id": 258409490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634751065
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> that is tricky because there can be generic code where we don't know the specific kind of coercion taking place</p>",
        "id": 258409547,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634751083
    },
    {
        "content": "<p>Example:</p>",
        "id": 258409569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634751090
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(unsize)]</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">marker</span>::<span class=\"n\">Unsize</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">unsize</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">v</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">B</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">A</span>: <span class=\"nc\">Unsize</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 258409572,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634751092
    },
    {
        "content": "<p>depending on A, B, that can be legal or illegal</p>",
        "id": 258409596,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634751103
    },
    {
        "content": "<p>I guess this intersects the point of whether we can introduce an \"unsafe upcast\" rule</p>",
        "id": 258409618,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634751111
    },
    {
        "content": "<p>It seems hard to me because <code>dyn Foo: Unsize&lt;dyn Bar&gt;</code> wants to be true</p>",
        "id": 258409691,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634751126
    },
    {
        "content": "<p>so that <code>&amp;dyn Foo: CoerceUnsized&lt;&amp;dyn Bar&gt;</code></p>",
        "id": 258409737,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634751148
    },
    {
        "content": "<p>but in the cast of <code>*const</code> or <code>*mut</code> it wants to be false...?</p>",
        "id": 258409767,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634751161
    },
    {
        "content": "<p>I guess we could add an additional trait like <code>Unsize</code> and more impls of <code>CoerceUnsized</code> (making it a marker trait...)</p>",
        "id": 258409809,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634751178
    },
    {
        "content": "<p>or something like that</p>",
        "id": 258409814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634751179
    },
    {
        "content": "<p>but I guess the real question is whether we want the <em>act of upcasting</em> to be unsafe or whether we want to generally know we have valid metadata</p>",
        "id": 258409918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634751221
    },
    {
        "content": "<p>I can't tell if people just agree or what :)</p>",
        "id": 258410106,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634751278
    },
    {
        "content": "<p>I guess:</p>",
        "id": 258410115,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634751281
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"261224\">@triagebot</span> end-topic this question</p>",
        "id": 258410117,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634751284
    },
    {
        "content": "<p>Does anyone have something to add on the current topic?<br>\nReact with <span aria-label=\"working on it\" class=\"emoji emoji-1f6e0\" role=\"img\" title=\"working on it\">:working_on_it:</span> if you have something to say.<br>\nReact with <span aria-label=\"all good\" class=\"emoji emoji-2705\" role=\"img\" title=\"all good\">:all_good:</span> if not.</p>",
        "id": 258410121,
        "sender_full_name": "triagebot",
        "timestamp": 1634751284
    },
    {
        "content": "<p>(FWIW, I think most of the questions are hitting this \"real question\")</p>",
        "id": 258410150,
        "sender_full_name": "simulacrum",
        "timestamp": 1634751295
    },
    {
        "content": "<p>I have a potentially more basic question</p>",
        "id": 258410181,
        "sender_full_name": "pnkfelix",
        "timestamp": 1634751311
    },
    {
        "content": "<p>about an assertion in the doc</p>",
        "id": 258410187,
        "sender_full_name": "pnkfelix",
        "timestamp": 1634751315
    },
    {
        "content": "<p>K</p>",
        "id": 258410209,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634751321
    },
    {
        "content": "<p>\"Without a data pointer, you don’t know what its metadata should be”</p>",
        "id": 258410230,
        "sender_full_name": "pnkfelix",
        "timestamp": 1634751327
    },
    {
        "content": "<p>are you speaking there about … how the compiler itself would infer what metadata to inject?</p>",
        "id": 258410274,
        "sender_full_name": "pnkfelix",
        "timestamp": 1634751342
    },
    {
        "content": "<p>becasue when it comes to <code>from_raw_parts</code></p>",
        "id": 258410300,
        "sender_full_name": "pnkfelix",
        "timestamp": 1634751351
    },
    {
        "content": "<p>its not hard for me to imagine a user being able to write a vtable</p>",
        "id": 258410321,
        "sender_full_name": "pnkfelix",
        "timestamp": 1634751361
    },
    {
        "content": "<p>that still <em>works</em> even if the data pointer is null</p>",
        "id": 258410379,
        "sender_full_name": "pnkfelix",
        "timestamp": 1634751370
    },
    {
        "content": "<p>(right? Or is there some detail of dispatch I’m missing here?)</p>",
        "id": 258410420,
        "sender_full_name": "pnkfelix",
        "timestamp": 1634751382
    },
    {
        "content": "<p>I think you are correct at least in some cases;</p>",
        "id": 258410446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634751392
    },
    {
        "content": "<p>we discussed in a side note the idea of generating a \"sentinel\" table like this</p>",
        "id": 258410467,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634751403
    },
    {
        "content": "<p>perhaps one that just aborts when methods are called?</p>",
        "id": 258410476,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634751408
    },
    {
        "content": "<p>(I think <span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span> compared  to C++, which does something like that if you manage to call a pure virtual function)</p>",
        "id": 258410524,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634751426
    },
    {
        "content": "<p>Yes, it would be our job to specify what the rules are for the vtable structure</p>",
        "id": 258410527,
        "sender_full_name": "pnkfelix",
        "timestamp": 1634751427
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/design.20meeting.202021-10-20/near/258408593\">said</a>:</p>\n<blockquote>\n<p>The problem I see there is that the existing trait is already implemented for <code>*const</code></p>\n</blockquote>\n<p>my thinking was, this allows 'safe' coercions to still be performed below raw ptrs (i.e., the existing ones), but 'unsafe' cercions (dyn upcasts) would query a different trait that is not implemented for raw ptrs... I guess 'unsafe' is a bad term here. 'CoerceUnsizedRequiresValidMetada', or so.^^</p>",
        "id": 258410594,
        "sender_full_name": "RalfJ",
        "timestamp": 1634751448
    },
    {
        "content": "<p>I just wanted clarity about why you’d need null pointers for every method?</p>",
        "id": 258410608,
        "sender_full_name": "pnkfelix",
        "timestamp": 1634751454
    },
    {
        "content": "<p>Again, is that just about a compiler-generated vtable?</p>",
        "id": 258410640,
        "sender_full_name": "pnkfelix",
        "timestamp": 1634751464
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/213817-t-lang/topic/design.20meeting.202021-10-20/near/258410608\">said</a>:</p>\n<blockquote>\n<p>I just wanted clarity about why you’d need null pointers for every method?</p>\n</blockquote>\n<p>I guess it's more like \"we need to define the minimum properties a vtable must hold\"</p>",
        "id": 258410771,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634751497
    },
    {
        "content": "<p>probably that means:</p>",
        "id": 258410809,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634751510
    },
    {
        "content": "<p>it must have valid pointers to the \"parent\" vtables</p>",
        "id": 258410831,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634751520
    },
    {
        "content": "<p>(since everything else is unsafe?)</p>",
        "id": 258410873,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634751536
    },
    {
        "content": "<p>we'd probably want to say at some point when it's legal to cast from <code>*const dyn Foo</code> to <code>&amp;dyn Foo</code> or whatever, but that's bascially \"and all the methods etc are valid too\"</p>",
        "id": 258410916,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634751558
    },
    {
        "content": "<p>okay I’m satisifed with that answer</p>",
        "id": 258410972,
        "sender_full_name": "pnkfelix",
        "timestamp": 1634751589
    },
    {
        "content": "<p>Next question:</p>\n<h1><a href=\"https://hackmd.io/uoG_F8P8S1OC348VbHo7mQ?view#Why-is-it-unsafe-to-create-const-dyn-Foo-if-it-requires-valid-metadata\">Why is it unsafe to create *const dyn Foo if it requires valid metadata?</a></h1>\n<p>I think we answered this already -- it's not <em>unsafe</em> always, depends on the route you use</p>",
        "id": 258411065,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634751610
    },
    {
        "content": "<p>Next question:</p>\n<h1><a href=\"https://hackmd.io/uoG_F8P8S1OC348VbHo7mQ?view#Q-Why-is-fn-from_raw_parts-not-an-unsafe-fn\">Why is fn from_raw_parts not an unsafe fn?</a></h1>",
        "id": 258411114,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634751629
    },
    {
        "content": "<p>Did we skip over the question about NULL?</p>",
        "id": 258411149,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634751641
    },
    {
        "content": "<p>We kind of answered this too? I guess the idea is that the metadata is known to be valid when it is called</p>",
        "id": 258411156,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634751642
    },
    {
        "content": "<p>Oh, my bad, yes</p>",
        "id": 258411168,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634751647
    },
    {
        "content": "<p>(I'm fine with handling it later if you prefer.)</p>",
        "id": 258411186,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634751653
    },
    {
        "content": "<p>And that in general we don't assume data pointer is valid</p>",
        "id": 258411224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634751667
    },
    {
        "content": "<p>(I remain unconvinced that its a good idea to rely on the metadata construction being a proof that this call to from_raw_parts is sound)</p>",
        "id": 258411261,
        "sender_full_name": "pnkfelix",
        "timestamp": 1634751681
    },
    {
        "content": "<p>that said, <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>, I believe the API is unstable, so we can totally make it unsafe</p>",
        "id": 258411265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634751682
    },
    {
        "content": "<p>I feel like I'd prefer to have more progress and agreement on the ... validity properties of values before we stabilize, ina ny case</p>",
        "id": 258411394,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634751723
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> what was the name for that invariant? :)</p>",
        "id": 258411411,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634751729
    },
    {
        "content": "<p>validity invariant?</p>",
        "id": 258411438,
        "sender_full_name": "RalfJ",
        "timestamp": 1634751741
    },
    {
        "content": "<p>ok :)</p>",
        "id": 258411460,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634751751
    },
    {
        "content": "<p>I did remember correct I guess</p>",
        "id": 258411466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634751753
    },
    {
        "content": "<p>Next question:</p>\n<h1><a href=\"https://hackmd.io/uoG_F8P8S1OC348VbHo7mQ?view#Special-case-NULL\">Special-case NULL?</a></h1>",
        "id": 258411471,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634751756
    },
    {
        "content": "<p>(or \"language invariant\" or \"initialization invariant\"... we never finalized that naming discussion...)</p>",
        "id": 258411497,
        "sender_full_name": "RalfJ",
        "timestamp": 1634751767
    },
    {
        "content": "<blockquote>\n<p>Josh Triplett: I don’t know if this would be an excessive performance hit, but could we special-case the NULL pointer, return another NULL pointer in that case, and otherwise look at the metadata? This would effectively treat NULL as None for a raw pointer, and the upcast operation as a .map.</p>\n</blockquote>",
        "id": 258411498,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634751767
    },
    {
        "content": "<p>We certainly <em>could</em> do that</p>",
        "id": 258411524,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634751780
    },
    {
        "content": "<p>I think we just didn't want upcasting to have a branch</p>",
        "id": 258411545,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634751786
    },
    {
        "content": "<p>At least I didn't want that :)</p>",
        "id": 258411564,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634751793
    },
    {
        "content": "<p>wait, does that even resolve the issue?</p>",
        "id": 258411572,
        "sender_full_name": "pnkfelix",
        "timestamp": 1634751795
    },
    {
        "content": "<p>Not really</p>",
        "id": 258411593,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634751803
    },
    {
        "content": "<p>that maps the null data pointer to another null data pointer</p>",
        "id": 258411601,
        "sender_full_name": "pnkfelix",
        "timestamp": 1634751807
    },
    {
        "content": "<p>It just gives you a sentinel value to use for \"null\"</p>",
        "id": 258411608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634751809
    },
    {
        "content": "<p>I think if we were going to go that way, I'd rather we create the \"structurally valid but nonsense contents\" vtable</p>",
        "id": 258411644,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634751825
    },
    {
        "content": "<p>but you still need to adjust the metadata part, to point to the parent, right?</p>",
        "id": 258411647,
        "sender_full_name": "pnkfelix",
        "timestamp": 1634751825
    },
    {
        "content": "<p>this goes back to whether it could be valid to construct metadata that still <em>works</em> with a null data pointer</p>",
        "id": 258411706,
        "sender_full_name": "pnkfelix",
        "timestamp": 1634751844
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/213817-t-lang/topic/design.20meeting.202021-10-20/near/258411647\">said</a>:</p>\n<blockquote>\n<p>but you still need to adjust the metadata part, to point to the parent, right?</p>\n</blockquote>\n<p>So, I'm wondering if we <em>need</em> to support \"NULL raw pointer with valid metadata\".</p>",
        "id": 258411709,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634751844
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/213817-t-lang/topic/design.20meeting.202021-10-20/near/258411706\">said</a>:</p>\n<blockquote>\n<p>this goes back to whether it could be valid to construct metadata that still <em>works</em> with a null data pointer</p>\n</blockquote>\n<p>What would go wrong if we said that <em>wasn't</em> valid?</p>",
        "id": 258411743,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634751860
    },
    {
        "content": "<p>And if we declared that invalid, then propagating NULL-&gt;NULL in an upcast should suffice.</p>",
        "id": 258411781,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634751877
    },
    {
        "content": "<p>I feel like the two are somewhat independent, but maybe I'm missing something</p>",
        "id": 258411832,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634751892
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/design.20meeting.202021-10-20/near/258411832\">said</a>:</p>\n<blockquote>\n<p>I feel like the two are somewhat independent, but maybe I'm missing something</p>\n</blockquote>\n<p>Much of the issue here seems like \"what happens if you try to upcast an invalid pointer\".</p>",
        "id": 258411883,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634751912
    },
    {
        "content": "<p>I want to keep us moving because I'd like to have at least some time to discuss the \"real question\" :)</p>",
        "id": 258411913,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634751920
    },
    {
        "content": "<p>And I feel like one legitimate answer would be \"if you upcast a NULL you get NULL, if you upcast an invalid non-NULL pointer you get a crash\".</p>",
        "id": 258411942,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634751930
    },
    {
        "content": "<p>ehhh</p>",
        "id": 258411964,
        "sender_full_name": "pnkfelix",
        "timestamp": 1634751939
    },
    {
        "content": "<p>/me would be fine moving on, but would like us to consider this option further.</p>",
        "id": 258412005,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634751960
    },
    {
        "content": "<p>Next question:</p>\n<h1><a href=\"https://hackmd.io/uoG_F8P8S1OC348VbHo7mQ?view#Q-Do-we-need-raw-pointer-upcasting\">Do we need raw pointer upcasting?</a></h1>\n<blockquote>\n<p>Mark: Can we get away with just supporting upcasting for non-raw pointers, and then we “skip” this question? This is similar to Taylor’s unsafe upcast, but is in some sense even simpler (and maybe in practice equivalent, presuming that the guarantees on upcast are equivalent to “needs to be safe to convert into &amp;/&amp;mut dyn temporarily”?).</p>\n</blockquote>",
        "id": 258412072,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634751972
    },
    {
        "content": "<p>(my gut feeling is that we should either support NULL properly, ot not)</p>",
        "id": 258412079,
        "sender_full_name": "pnkfelix",
        "timestamp": 1634751975
    },
    {
        "content": "<p>To be honest, I hadn't considered that</p>",
        "id": 258412115,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634751989
    },
    {
        "content": "<p>It's not obvious how to rule it out exactly, I guess this comes back to how we arrange the traits</p>",
        "id": 258412140,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752000
    },
    {
        "content": "<p>I was also just now wondering if one could feature gate it</p>",
        "id": 258412167,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752011
    },
    {
        "content": "<p>That's a really interesting idea. It seems like this is proposing that people should instead \"convert to reference, upcast, convert back to raw pointer\", and the requirements of that would solve the problem for us. :)</p>",
        "id": 258412177,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634752014
    },
    {
        "content": "<p>but I think the presence of generic code might make that hard</p>",
        "id": 258412200,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752021
    },
    {
        "content": "<p>not impossible, we could add some hacky code into rustc</p>",
        "id": 258412220,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752029
    },
    {
        "content": "<p>so wait, is the expectation in this case that if you <em>do</em> need to upcast a <code>*const dyn Child</code> to <code>*const dyn Parent</code>, that you’d need to cast to <code>&amp;dyn _</code> in the middle?`</p>",
        "id": 258412240,
        "sender_full_name": "pnkfelix",
        "timestamp": 1634752036
    },
    {
        "content": "<p>I guess I don't lik the idea of throwing more hurdles into the way of people writing unsafe code</p>",
        "id": 258412253,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752042
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/design.20meeting.202021-10-20/near/258412253\">said</a>:</p>\n<blockquote>\n<p>I guess I don't lik the idea of throwing more hurdles into the way of people writing unsafe code</p>\n</blockquote>\n<p>So, this is about what's built into the compiler.</p>",
        "id": 258412287,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634752062
    },
    {
        "content": "<p>that intermediate cast reminds me of what people have to do today for <code>*AtomicX</code></p>",
        "id": 258412300,
        "sender_full_name": "pnkfelix",
        "timestamp": 1634752067
    },
    {
        "content": "<p>I'd prefer us to make progress on this question</p>",
        "id": 258412314,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752073
    },
    {
        "content": "<p>Suppose we didn't build it into the compiler, and we required the intermediate cast.</p>",
        "id": 258412317,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634752074
    },
    {
        "content": "<p>We could still provide a method on raw pointers, which does the intermediate cast and has the precondition of validity.</p>",
        "id": 258412385,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634752087
    },
    {
        "content": "<p>Can I ask a different thing:</p>",
        "id": 258412420,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752105
    },
    {
        "content": "<p>What makes people <em>nervous</em> about \"just\" requiring that metadata is valid</p>",
        "id": 258412445,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752118
    },
    {
        "content": "<p>Because I'm thinking about how to address or validate further concerns</p>",
        "id": 258412479,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752132
    },
    {
        "content": "<p>I feel a touch nervous, like I'm not sure I know what problems it might cause</p>",
        "id": 258412501,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752142
    },
    {
        "content": "<p>Are there currently any requirements on casts of raw pointers? I think my naive assumption is that there are not (i.e., raw pointers are in some sense 'just usize', modulo having an associated object for .add and such)</p>",
        "id": 258412561,
        "sender_full_name": "simulacrum",
        "timestamp": 1634752168
    },
    {
        "content": "<p>my worry is that adding requirements complicates that story a lot</p>",
        "id": 258412599,
        "sender_full_name": "simulacrum",
        "timestamp": 1634752184
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> raised a good point that it maybe feels different from thin pointers, whwere we don't assume much, but I'm not sure that's entirely true -- if you think of \"thin pointers\" as \"pointers with metadata of <code>()</code>\", then the validity invariant is just trivially satisfied there.</p>",
        "id": 258412600,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752185
    },
    {
        "content": "<p>Well, they're not <em>just</em> usize, in that they can carry metadata</p>",
        "id": 258412695,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752210
    },
    {
        "content": "<p>One thing I was wondering is:</p>",
        "id": 258412757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752232
    },
    {
        "content": "<p>My feeling is that I could improve the write-up a lot based on the contents here</p>",
        "id": 258412773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752238
    },
    {
        "content": "<p>and maybe it'd be nice to write up an inside rust blog post or something and look for feedback from people</p>",
        "id": 258412797,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752246
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/design.20meeting.202021-10-20/near/258412445\">said</a>:</p>\n<blockquote>\n<p>What makes people <em>nervous</em> about \"just\" requiring that metadata is valid</p>\n</blockquote>\n<p>To clarify: requiring that metadata is valid in order to upcast?</p>",
        "id": 258412822,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634752259
    },
    {
        "content": "<p>I <em>feel</em> like <span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> had a strong opinion about this in the past, for example!</p>",
        "id": 258412826,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752260
    },
    {
        "content": "<p>though my memory is it was all about the \"null pointer\" question</p>",
        "id": 258412847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752267
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/design.20meeting.202021-10-20/near/258412822\">said</a>:</p>\n<blockquote>\n<p>To clarify: requiring that metadata is valid in order to upcast?</p>\n</blockquote>\n<p>No, requiring that metadata is \"valid\" always -- or \"valid enough\"</p>",
        "id": 258412888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752288
    },
    {
        "content": "<p>I have to admit I don't like the \"unsafe to upcast direction\", but maybe I should clarify why</p>",
        "id": 258412924,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752307
    },
    {
        "content": "<p>Ah. Even for NULL? (Does that just mean \"detectably invalid\"?)</p>",
        "id": 258412936,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634752311
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/design.20meeting.202021-10-20/near/258412695\">said</a>:</p>\n<blockquote>\n<p>Well, they're not <em>just</em> usize, in that they can carry metadata</p>\n</blockquote>\n<p>in particular, we tell LLVM that the vtable ptr is nonnull. so wide raw ptrs are already definitely not just 2 usize.</p>",
        "id": 258412944,
        "sender_full_name": "RalfJ",
        "timestamp": 1634752315
    },
    {
        "content": "<p>that's a good point, thanks</p>",
        "id": 258413008,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752330
    },
    {
        "content": "<p>I forgot about that</p>",
        "id": 258413020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752334
    },
    {
        "content": "<p>FWIW, I would personally be uncomfortable having any kind of raw pointer that \"can't\" be NULL.</p>",
        "id": 258413040,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634752341
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/design.20meeting.202021-10-20/near/258412888\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/design.20meeting.202021-10-20/near/258412822\">said</a>:</p>\n<blockquote>\n<p>To clarify: requiring that metadata is valid in order to upcast?</p>\n</blockquote>\n<p>No, requiring that metadata is \"valid\" always -- or \"valid enough\"</p>\n</blockquote>\n<p>I can understand “valid with respect to a given concrete data pointer.” I am nervous about valid with respect to all possible data pointers.</p>",
        "id": 258413074,
        "sender_full_name": "pnkfelix",
        "timestamp": 1634752355
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/design.20meeting.202021-10-20/near/258412936\">said</a>:</p>\n<blockquote>\n<p>Ah. Even for NULL? (Does that just mean \"detectably invalid\"?)</p>\n</blockquote>\n<p>for everything. We can define what \"valid enough\" means, of course. Detectably invalid might be good enough, or perhaps \"must at least have the data upcasts need\" :)</p>",
        "id": 258413083,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752357
    },
    {
        "content": "<p>I'm thinking that what we are <em>really</em> defining is</p>",
        "id": 258413129,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752370
    },
    {
        "content": "<p>For dyn Foo types, what are the validity invariants imposed on the data/metadata</p>",
        "id": 258413157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752383
    },
    {
        "content": "<p>This doesn't necessarily extend to all DST</p>",
        "id": 258413173,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752389
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/design.20meeting.202021-10-20/near/258413040\">said</a>:</p>\n<blockquote>\n<p>FWIW, I would personally be uncomfortable having any kind of raw pointer that \"can't\" be NULL.</p>\n</blockquote>\n<p>you can have NULL data ptr together with some correct vtable ptr.<br>\nI dont know what NULL means for 2-word-sized ptrs... do you means transmuting 0u128 to a wide raw ptr should be allowed?</p>",
        "id": 258413194,
        "sender_full_name": "RalfJ",
        "timestamp": 1634752401
    },
    {
        "content": "<p>(For that reason, I tend to agree with <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> that <code>from_raw_parts</code> ought to be unsafe, and the safety invariant ought to depend on the type being synthesized)</p>",
        "id": 258413242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752420
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> what <span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> for example wanted was: Sometimes I have to create some pointers I know will never be used. What can I put in them?</p>",
        "id": 258413338,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752445
    },
    {
        "content": "<p>I know they won't be used beacuse they are going to get overwritten later</p>",
        "id": 258413376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752457
    },
    {
        "content": "<p>one answer would be: use <code>Option</code> :)</p>",
        "id": 258413391,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752463
    },
    {
        "content": "<p>another would be: \"we have a fn that gives you dummy metadata that is good enough\"</p>",
        "id": 258413431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752480
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/213817-t-lang/topic/design.20meeting.202021-10-20/near/258413194\">said</a>:</p>\n<blockquote>\n<p>I dont know what NULL means for 2-word-sized ptrs... do you means transmuting 0u128 to a wide raw ptr should be allowed?</p>\n</blockquote>\n<p>(my own interpretation of it would be: you can still have a vtable, but the concrete methods it points to must not actually ever derefence the data pointer)</p>",
        "id": 258413439,
        "sender_full_name": "pnkfelix",
        "timestamp": 1634752483
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/design.20meeting.202021-10-20/near/258413242\">said</a>:</p>\n<blockquote>\n<p>(For that reason, I tend to agree with <span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> that <code>from_raw_parts</code> ought to be unsafe, and the safety invariant ought to depend on the type being synthesized)</p>\n</blockquote>\n<p>But it seems like the validity requirement for the dyn metadata is coming from the metadata argument? Maybe it's worth digging in here more, perhaps, because I find this a little confusing</p>",
        "id": 258413459,
        "sender_full_name": "simulacrum",
        "timestamp": 1634752492
    },
    {
        "content": "<p>So let's look at <code>from_raw_parts</code>:</p>",
        "id": 258413474,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752506
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">from_raw_parts</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">data_address</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">metadata</span>: <span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Pointee</span><span class=\"o\">&gt;</span>::<span class=\"n\">Metadata</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"p\">,</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 258413507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752520
    },
    {
        "content": "<p>We're discussing:</p>\n<ul>\n<li>What is the validity invariant of <code>*const T</code></li>\n</ul>",
        "id": 258413547,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752533
    },
    {
        "content": "<p>In other words, what can the compiler/language assume is true of <code>*const T</code> <em>always</em></p>",
        "id": 258413562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752540
    },
    {
        "content": "<p>What I'm saying is nothing more than \"this depends on T\"</p>",
        "id": 258413613,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752559
    },
    {
        "content": "<p>as in, the set of assumpions depend on what T is?</p>",
        "id": 258413707,
        "sender_full_name": "pnkfelix",
        "timestamp": 1634752583
    },
    {
        "content": "<p>for <code>dyn</code> types, it is <em>currently</em> \"the metadata is not null\"</p>",
        "id": 258413725,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752587
    },
    {
        "content": "<p>right, like it should be:</p>",
        "id": 258413752,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752597
    },
    {
        "content": "<p>I guess I would prefer the answer to be \"this depends on <code>&lt;T as Pointee&gt;::Metadata</code>\"</p>",
        "id": 258413762,
        "sender_full_name": "simulacrum",
        "timestamp": 1634752602
    },
    {
        "content": "<p>FWIW, another possible point in the design space is to just make the validity part of the <em>safety</em> invariant... so you can have bad metadata in raw ptrs but you cannot give them to unknown safe code, as it can lead to UB in dyn upcasts.<br>\nhowever, having validity != safety for raw ptrs doesnt seem great either.</p>",
        "id": 258413769,
        "sender_full_name": "RalfJ",
        "timestamp": 1634752605
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// Unsafety condition:</span>\n<span class=\"c1\">//</span>\n<span class=\"c1\">// You cannot call this unless the invariants of T are met for `data_address` and `metadata`</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">from_raw_parts</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">data_address</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">metadata</span>: <span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Pointee</span><span class=\"o\">&gt;</span>::<span class=\"n\">Metadata</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"p\">,</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 258413805,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752621
    },
    {
        "content": "<p>I think safe <code>from_raw_parts</code> is fine since <code>&lt;T as Pointee&gt;::Metadata</code> already takes care of these validity invariants -- basically, I agree with <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span></p>",
        "id": 258413918,
        "sender_full_name": "RalfJ",
        "timestamp": 1634752663
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/213817-t-lang/topic/design.20meeting.202021-10-20/near/258413762\">said</a>:</p>\n<blockquote>\n<p>I guess I would prefer the answer to be \"this depends on <code>&lt;T as Pointee&gt;::Metadata</code>\"</p>\n</blockquote>\n<p>I'm not sure how different this is, really</p>",
        "id": 258413920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752665
    },
    {
        "content": "<p>mmmmm that implies that one can ... never have a metadata whose validity depends on the data pointer?</p>",
        "id": 258414011,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752688
    },
    {
        "content": "<p>Every single <code>from_raw_parts</code> that's stable today is <code>unsafe</code>, right?</p>\n<p>Part of me just sortof expects that this one would be too.</p>",
        "id": 258414025,
        "sender_full_name": "scottmcm",
        "timestamp": 1634752694
    },
    {
        "content": "<p>is that an assumption we <em>want</em>?</p>",
        "id": 258414061,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752708
    },
    {
        "content": "<p>(if so, why)</p>",
        "id": 258414123,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752732
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/213817-t-lang/topic/design.20meeting.202021-10-20/near/258414025\">said</a>:</p>\n<blockquote>\n<p>Every single <code>from_raw_parts</code> that's stable today is <code>unsafe</code>, right?</p>\n</blockquote>\n<p>no, <a href=\"https://doc.rust-lang.org/nightly/std/ptr/fn.slice_from_raw_parts.html\">slice_from_raw_parts</a> is safe</p>",
        "id": 258414137,
        "sender_full_name": "RalfJ",
        "timestamp": 1634752736
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/design.20meeting.202021-10-20/near/258414011\">said</a>:</p>\n<blockquote>\n<p>mmmmm that implies that one can ... never have a metadata whose validity depends on the data pointer?</p>\n</blockquote>\n<p>and thus all metadata must “work\" with all possible data pointers? I don’t understand why that is desirable.</p>",
        "id": 258414256,
        "sender_full_name": "pnkfelix",
        "timestamp": 1634752778
    },
    {
        "content": "<p>Regardless, the distinction isn't particularly important for <em>this specific question</em></p>",
        "id": 258414257,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752778
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/design.20meeting.202021-10-20/near/258414011\">said</a>:</p>\n<blockquote>\n<p>mmmmm that implies that one can ... never have a metadata whose validity depends on the data pointer?</p>\n</blockquote>\n<p>I don't think that's a desirable property. One of the things I think people <em>want</em> to do is to have in-band metadata.</p>",
        "id": 258414261,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1634752779
    },
    {
        "content": "<p>(since, for dyn, the data pointer isn't needed to perform upcasting)</p>",
        "id": 258414444,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752820
    },
    {
        "content": "<p>its possible I am confusing the validity conditions with the safety ones here. I am not sure.</p>",
        "id": 258414498,
        "sender_full_name": "pnkfelix",
        "timestamp": 1634752832
    },
    {
        "content": "<p>but I too would like to know the answer of why that is desirable :)</p>",
        "id": 258414507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752833
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/design.20meeting.202021-10-20/near/258414261\">said</a>:</p>\n<blockquote>\n<p>I don't think that's a desirable property. One of the things I think people <em>want</em> to do is to have in-band metadata.</p>\n</blockquote>\n<p>that basically means metadata is (). in-band metadata is a different thing from what we are discussing here.</p>",
        "id": 258414508,
        "sender_full_name": "RalfJ",
        "timestamp": 1634752834
    },
    {
        "content": "<p>This doesn't prevent in-band metadata, though, right? All this means is that the construction of that metadata must have a safety requirement that's e.g. \"must be used only with particular data pointers\")</p>",
        "id": 258414509,
        "sender_full_name": "simulacrum",
        "timestamp": 1634752834
    },
    {
        "content": "<p>I guess that's true; but it seems sort of \"roundabout\"</p>",
        "id": 258414601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752864
    },
    {
        "content": "<p>like, if the two are exactly equivalent, then why not make the fn unsafe? I guess just because \"a lot of the time\" the data pointer won't be important?</p>",
        "id": 258414662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752886
    },
    {
        "content": "<p>Well, it moves the requirement away from compiler (i.e., validity) to safety, right? That seems important</p>",
        "id": 258414676,
        "sender_full_name": "simulacrum",
        "timestamp": 1634752890
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/213817-t-lang/topic/design.20meeting.202021-10-20/near/258414509\">said</a>:</p>\n<blockquote>\n<p>This doesn't prevent in-band metadata, though, right? All this means is that the construction of that metadata must have a safety requirement that's e.g. \"must be used only with particular data pointers\")</p>\n</blockquote>\n<p>doesn’t that move the safety condition outside of the <code>unsafe</code> block at that point?</p>",
        "id": 258414693,
        "sender_full_name": "pnkfelix",
        "timestamp": 1634752896
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/213817-t-lang/topic/design.20meeting.202021-10-20/near/258414676\">said</a>:</p>\n<blockquote>\n<p>Well, it moves the requirement away from compiler (i.e., validity) to safety, right? That seems important</p>\n</blockquote>\n<p>I don't think I'm being very precise on this distinction.</p>",
        "id": 258414859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752937
    },
    {
        "content": "<p>Maybe we should review :)</p>",
        "id": 258414870,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752942
    },
    {
        "content": "<p>But also, we're at time for this meeting</p>",
        "id": 258414882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752945
    },
    {
        "content": "<p>I think I want to do another round of this doc</p>",
        "id": 258414931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752961
    },
    {
        "content": "<p>I'm going to work on that as a follow-up item</p>",
        "id": 258414959,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1634752969
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/213817-t-lang/topic/design.20meeting.202021-10-20/near/258414509\">said</a>:</p>\n<blockquote>\n<p>This doesn't prevent in-band metadata, though, right? All this means is that the construction of that metadata must have a safety requirement that's e.g. \"must be used only with particular data pointers\")</p>\n</blockquote>\n<p>that is somewhat awkward to reason about... you have to somehow hand down this requirement of how the value must be used through all parties that have access to the value</p>",
        "id": 258414968,
        "sender_full_name": "RalfJ",
        "timestamp": 1634752970
    },
    {
        "content": "<p>Yeah, I agree it's awkward</p>",
        "id": 258415053,
        "sender_full_name": "simulacrum",
        "timestamp": 1634753004
    },
    {
        "content": "<p>(but it is similar to other recent proposals where unsafety occurs once upfront with a promise about the future, rather than ocurring at use sites -- e.g., the recent discussion around safety for extern statics. I am worried about those proposals for the same reason.)</p>",
        "id": 258415097,
        "sender_full_name": "RalfJ",
        "timestamp": 1634753026
    }
]