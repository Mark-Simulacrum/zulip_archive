[
    {
        "content": "<p>is there any reason why this couldn't be a feature:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">report</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">fmt</span>::<span class=\"n\">Display</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">_</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">Self</span>: <span class=\"nb\">Sized</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"fm\">todo!</span><span class=\"p\">(</span><span class=\"s\">\"provide a default impl for printing error and its sources via error trait\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 236599130,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1619654735
    },
    {
        "content": "<p>right now I get \"<code>impl Trait</code> not allowed outside of function and inherent method return types\"</p>",
        "id": 236599151,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1619654758
    },
    {
        "content": "<p>basically, treat methods on traits that have a <code>Self: Sized</code> bound like inherent methods, since they don't go into the vtable</p>",
        "id": 236599298,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1619654855
    },
    {
        "content": "<p>I think that will become a feature soon? To allow async fns in traits</p>",
        "id": 236600596,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1619655838
    },
    {
        "content": "<p>I think that's enabled by <a href=\"https://rust-lang.github.io/rfcs/2515-type_alias_impl_trait.html\">RFC 2515</a> / <a href=\"https://github.com/rust-lang/rust/issues/63063\">#63063</a></p>",
        "id": 236604457,
        "sender_full_name": "cuviper",
        "timestamp": 1619658891
    },
    {
        "content": "<p>Yeah, an explicit type alias is a good starting point since it is otherwise unclear whether each implementation uses its own existential type or if the existential is the same for all implementations (obviously the former would be a nice default should the sugar end up added). As to featuring an otherwise object-safe trait, that would still require <code>where Self : Sized</code>-guarded associated types:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Report</span><span class=\"o\">&lt;'</span><span class=\"nb\">__</span><span class=\"o\">&gt;</span><span class=\"w\"> </span>: <span class=\"nc\">Display</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">Self</span><span class=\"w\"> </span>: <span class=\"nb\">Sized</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">report</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"bp\">self</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">_</span> <span class=\"nc\">Self</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">      </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Report</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">Self</span><span class=\"w\"> </span>: <span class=\"nb\">Sized</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Fwiw, for the specific case of <code>impl Display</code>, you can return an <code>ImplDisplay&lt;'_, Self&gt;</code> wrapper that implements <code>Display</code> thanks to a <code>report_fmt</code> method</p>",
        "id": 236650485,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1619691951
    },
    {
        "content": "<p>That would require associated type defaults to be introduced backwards compatibility, right?</p>",
        "id": 236680095,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1619705832
    },
    {
        "content": "<p>yeah, seems like it</p>",
        "id": 236692492,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1619709410
    },
    {
        "content": "<p>oof, here's hoping those are available soon</p>",
        "id": 236712881,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1619717162
    }
]