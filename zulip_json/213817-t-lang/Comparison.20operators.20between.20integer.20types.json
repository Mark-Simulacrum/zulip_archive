[
    {
        "content": "<p>This arose in the discussion about indexing with non-<code>usize</code> integer types; splitting this into a separate topic.</p>",
        "id": 195481370,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588025373
    },
    {
        "content": "<p>I'm a lot less uncomfortable with the idea of mixing <em>sizes</em>; that seems unlikely to do the wrong thing, generally.</p>",
        "id": 195481555,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588025495
    },
    {
        "content": "<p>My strongest feeling there has been that writing the correct-numerically version of the [ed: mixed-signedness] comparison is <em>incredibly</em> annoying, so the usual result of the error is doing it wrong by <code>as</code>-casting one side.</p>\n<p>And <code>my_u8 &lt; 300</code> is currently a deny-lint because it causes wrapping, not a type error; I think it being a \"that's silly\" warning-lint (like <code>my_u8 &gt;= 0</code> already is) would be an improvement.</p>",
        "id": 195481566,
        "sender_full_name": "scottmcm",
        "timestamp": 1588025507
    },
    {
        "content": "<p>Comparing <code>u8</code> and <code>u64</code> doesn't seem unreasonable to me. That's going to give a sensible answer even if the u64 is out of range (false).</p>",
        "id": 195481654,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588025563
    },
    {
        "content": "<p>Unfortunately mixing sizes without mixing signedness is the same inference-breaking problem as allowing only unsigned for indexing</p>",
        "id": 195481679,
        "sender_full_name": "scottmcm",
        "timestamp": 1588025589
    },
    {
        "content": "<p>My concern lies primarily with signed types, where sometimes you might want the numeric answer, and sometimes you're just dealing with an interface that's sloppy about signed vs unsigned and you <em>actually</em> want <code>some_i32 as u32 == some_u32</code>.</p>",
        "id": 195481705,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588025618
    },
    {
        "content": "<p>(meaning, turn negative values into the equivalent twos-complement positive)</p>",
        "id": 195481726,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588025634
    },
    {
        "content": "<p>Hmm, good example.</p>",
        "id": 195481790,
        "sender_full_name": "scottmcm",
        "timestamp": 1588025655
    },
    {
        "content": "<p>That's pretty much <em>the</em> example for me, that makes me want Rust's careful help to think about which behavior I want any time I accidentally mix the two.</p>",
        "id": 195481833,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588025693
    },
    {
        "content": "<p>(I'm coming from a world where <code>-1</code> is considered a perfectly reasonable way to spell <code>~0</code>.)</p>",
        "id": 195481898,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588025730
    },
    {
        "content": "<p>Oh, that reminds me...</p>",
        "id": 195481941,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588025759
    },
    {
        "content": "<p><code>&lt;</code>/<code>&gt;</code>/etc stay as operators down to MIR, right?  So if we needed an inference hack it could plausibly be syntax-restricted?</p>",
        "id": 195481947,
        "sender_full_name": "scottmcm",
        "timestamp": 1588025761
    },
    {
        "content": "<p>IMO, we should add a library function for this first.</p>",
        "id": 195549056,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1588072821
    },
    {
        "content": "<p>And see how often it's used and in what circumstances.</p>",
        "id": 195549076,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1588072835
    },
    {
        "content": "<p>The lack of implicit cross-type operations is an important <em>feature</em>, used for nudging user into the direction of using a coherent set of types in APIs instead of randomly piling up <code>short</code>s, <code>int</code>s, <code>long</code>s and whatever like it's usually happens in C/C++.</p>",
        "id": 195549302,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1588073012
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> I agree, and I think there's a balance here between \"help the user correctly compare different types\" and \"help the user not mix types\".</p>",
        "id": 195585824,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588089707
    },
    {
        "content": "<p>Sadly, when working closely to ffi the fact that the C programmers didn't care about their types and that Rust cares \"too much\" makes it needlessly painful.</p>\n<p>However, I would say that the pain is less around <code>&lt;</code>/<code>&gt;</code>/<code>==</code>/indexing specifically,  and more around constants, which can't be simply declared to have \"an integer type\".</p>\n<p>If you could declare that a const is just an integer and Rust would fill in usages of it as whatever size integer is needed then that'd solve a lot of the trouble. (As long as the literal wouldn't overflow, eg no 0xABCD as an automatic u8, but it could be a u16, i32, u32, etc).</p>",
        "id": 195589290,
        "sender_full_name": "Lokathor",
        "timestamp": 1588091090
    },
    {
        "content": "<p>The <em>other</em> const generics: generic consts.</p>",
        "id": 195590185,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588091510
    },
    {
        "content": "<p>It does <em>sound</em> silly, but for example the GL spec is written with the \"wrong\" signed/unsigned tags on a few of the functions, and C doesn't care, but it makes Rust folks grumpy. They file bugs against the GL bindings people, who ask the GL bindings generators people what's up, who tell them \"yeah the spec is really written that way\". <br>\n<a href=\"https://github.com/brendanzab/gl-rs/issues/515\" title=\"https://github.com/brendanzab/gl-rs/issues/515\">https://github.com/brendanzab/gl-rs/issues/515</a></p>",
        "id": 195591311,
        "sender_full_name": "Lokathor",
        "timestamp": 1588091930
    }
]