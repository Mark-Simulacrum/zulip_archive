[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> Sorry to ping you but I couldn't find information about this anywhere and I had to resort to this. I am wondering if <code>$crate</code> keyword is adaptable. Let me show you what I mean.</p>\n<p><code>diesel</code> currently has a few macros like <code>table! {}</code> etc.. which use <code>$crate</code> inside them to refer to the diesel lib.</p>\n<p>I am building another crate called <code>model</code> which re-exports <code>diesel</code>. And if someone were to use my <code>model</code> as a dependency and call <code>model::diesel::table! {}</code>, it looks like the <code>$crate</code> inside <code>diesel</code> is expanding to <code>::diesel</code>.</p>\n<p>So, my question is whether there is a way to expand that <code>$crate</code> into <code>::model::diesel</code> instead of <code>::diesel</code>. Basically, an intelligent <code>$crate</code>.</p>",
        "id": 217368791,
        "sender_full_name": "pksunkara",
        "timestamp": 1605856631
    },
    {
        "content": "<p>Do you mean right now, or hypothetically after adding some new language features?</p>",
        "id": 217375978,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1605863026
    },
    {
        "content": "<p>Right now <code>$crate</code> always resolves to a crate root, with the crate being determined from the <code>$crate</code>'s span.</p>",
        "id": 217376053,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1605863061
    },
    {
        "content": "<p>Hypothetically, it's technically possible to add some new crate-level attribute like <code>#![resolve_dollar_crate_from_to(diesel, ::model::diesel)]</code>, but its cost/benefit ratio is the question.</p>",
        "id": 217376265,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1605863258
    },
    {
        "content": "<p>I was looking for right now and also if there were any discussions for future. I think there is definitely benefit because Rust API Guidelines has a rule that libraries should prefer exporting dependencies such that the end user don't have to specify them in their crate.</p>",
        "id": 217379799,
        "sender_full_name": "pksunkara",
        "timestamp": 1605865749
    },
    {
        "content": "<p>You can always ask <code>::diesel</code> to include an optional<code>#![crate = &lt;path&gt;]</code> optional input to all their macros, <a href=\"https://github.com/jam1garner/inventory/blob/95049e1fbe52a0599a7ea1ebfe59e829262dfb24/impl/src/lib.rs#L20\">like <code>::inventory</code> does (for proc-macro reasons)</a> and then have your own macros call theirs with <code>#![crate = $crate::diesel]</code>.</p>",
        "id": 217427957,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1605891138
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 217433830,
        "sender_full_name": "pksunkara",
        "timestamp": 1605893725
    },
    {
        "content": "<p>I don't understand the problem, shouldn't the diesel macros <em>just work</em> even if reexported, because of <code>$crate</code>?</p>",
        "id": 217449439,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1605901282
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> No they don't. Because <code>$crate</code> always resolves to the <code>::diesel</code> in this scenario. <code>diesel</code> here is not in <code>Cargo.toml</code> but <code>model</code> is. I had tested this pretty extensively. Is there something I don't know?</p>",
        "id": 218033782,
        "sender_full_name": "pksunkara",
        "timestamp": 1606419924
    },
    {
        "content": "<p>is the source of your crate public? I've tried reproducing this, but I must be doing something differently</p>",
        "id": 218036298,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1606422698
    },
    {
        "content": "<p>Just talked with Florian in private messages. It does look like <code>$crate</code> resolves with re-exports. The issue was that <code>diesel</code> was using some derive macros</p>",
        "id": 218039245,
        "sender_full_name": "pksunkara",
        "timestamp": 1606425607
    },
    {
        "content": "<p>Hence the:</p>\n<blockquote>\n<p>You can always ask ::diesel to include an optional <code>#![crate = &lt;path&gt;]</code> optional input to all their macros, <a href=\"https://github.com/jam1garner/inventory/blob/95049e1fbe52a0599a7ea1ebfe59e829262dfb24/impl/src/lib.rs#L20\">like ::inventory does (for proc-macro reasons)</a></p>\n</blockquote>",
        "id": 218083693,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1606478085
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span> But isn't that going to be cumbersome for the end users? They will always have to define this attribute whenever they use a proc-macro. I was thinking more along the lines of Rust allowing <code>$crate</code> in proc macros</p>",
        "id": 218092725,
        "sender_full_name": "pksunkara",
        "timestamp": 1606484254
    },
    {
        "content": "<blockquote>\n<p>then have your own macros call theirs with <code>#![crate = $crate::diesel]</code></p>\n</blockquote>\n<p>I don't call their macros. I just re-export diesel directly</p>",
        "id": 218092885,
        "sender_full_name": "pksunkara",
        "timestamp": 1606484327
    },
    {
        "content": "<p>How would you propose to support <code>$crate</code> in proc macros. When building the proc-macro there is no way to reference which crate <code>$crate</code> should expand to, as that crate hasn't been compiled yet.</p>",
        "id": 218093185,
        "sender_full_name": "bjorn3",
        "timestamp": 1606484501
    },
    {
        "content": "<p>That is what I am trying to figure out and lack knowledge of and looking for ideas on how to solve this issue</p>",
        "id": 218093346,
        "sender_full_name": "pksunkara",
        "timestamp": 1606484587
    },
    {
        "content": "<p>You are not the first one to bring up this problem, but so far no solution has been found.</p>",
        "id": 218093416,
        "sender_full_name": "bjorn3",
        "timestamp": 1606484640
    },
    {
        "content": "<p>The pattern in derives generally is to write <code>::diesel</code>, but what about having <code>diesel</code> only? That would be a workaround for this re-exporting issue and the only thing users would need to do is to make sure <code>diesel</code> is in scope.</p>",
        "id": 218094170,
        "sender_full_name": "pksunkara",
        "timestamp": 1606485079
    },
    {
        "content": "<p>Are there any specific reasons for people preferring <code>::</code>?</p>",
        "id": 218094815,
        "sender_full_name": "pksunkara",
        "timestamp": 1606485429
    },
    {
        "content": "<p>Would it be possible for a proc macro crate to depend on the crate it needs, and then reference that crate by way of $crate?</p>",
        "id": 218126215,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606508126
    },
    {
        "content": "<ol>\n<li>proc macros are compiled once for the host target, even when compiling for multiple targets. 2. in most cases, the crate that should be referenced by $crate re-exports the proc-macro.</li>\n</ol>",
        "id": 218127253,
        "sender_full_name": "bjorn3",
        "timestamp": 1606509136
    },
    {
        "content": "<p>In the latter case, it could pass $crate in via a wrapper macro.</p>",
        "id": 218131717,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606514015
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254853\">pksunkara</span> <a href=\"#narrow/stream/213817-t-lang/topic/.24crate/near/218092725\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232018\">Daniel Henry-Mantilla</span> But isn't that going to be cumbersome for the end users? They will always have to define this attribute whenever they use a proc-macro. I was thinking more along the lines of Rust allowing <code>$crate</code> in proc macros</p>\n</blockquote>\n<p>Not if that parameter is <em>optional</em>, like inventory does</p>",
        "id": 218207890,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1606647955
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/.24crate/near/218131717\">said</a>:</p>\n<blockquote>\n<p>In the latter case, it could pass $crate in via a wrapper macro.</p>\n</blockquote>\n<p>I would like to know a bit more on that. <br>\nTo elaborate a bit on the problem described by <span class=\"user-mention\" data-user-id=\"254853\">@pksunkara</span> above:<br>\nDiesel has some proc macros that internally need to refer to some trait/type in diesel. We want to be able to use such proc macros in the following situations:</p>\n<ul>\n<li>Inside of diesel itself</li>\n<li>In third party crates reexported through diesel</li>\n<li>In third party crates, that depend on another third party crate, which reexports the macros from diesel</li>\n</ul>\n<p>Our current implementation works only for the first two use cases, by expecting some module/crate named <code>diesel</code> to be available at the crate root, containing all identifiers we want to be able to refer to. For the usage inside of diesel this means we just have a hidden module named <code>diesel</code> inside our crate root reexporting basically the crate itself. For the usage of in a third party crate depending directly on diesel, this requires that the user does not rename the crate on import. (In practice I haven't heard any complains about that yet, so that seems to be OK as restriction). The third use case is currently only \"supported\" by requiring the users of that crate that reexports diesel macros to have an <code>use third_party_crate::diesel</code> in their crate root. While I'm not the author of such crates I can see that this is probably not a great requirement. Additionally as interesting side effect this makes changing a macro from a <code>marco_rules!</code> macro to a proc macro a breaking change, as users using this third use-case would need to add an additional import. Now do we want to keep the actual implementation of an macro (if it's a <code>macro_rule!</code> macro or a <code>proc macro</code>) as implementation detail as we probably want to switch some of the <code>macro_rule!</code> ones to proc macros in the future for complexity reasons. Having that requirement would mean such a change is a breaking change, which is just not great.</p>",
        "id": 218284453,
        "sender_full_name": "weiznich",
        "timestamp": 1606742206
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"215423\">@weiznich</span> You <em>should</em> be able to have a crate using a normal macro, which passes $crate to a proc macro. That would give you access to what you need without having to require the caller to use any particular name.</p>",
        "id": 218333670,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606764497
    },
    {
        "content": "<p>I do not see how that would solve our problem. Let's assume I have two crates, my-super-crate and my-super-crate-proc-macro, where my-super-crate depends on my-super-crate-proc-macro and reexports the proc macros for improved usability. If I understand your proposal correctly I could have some macro like this in my-super-crate that then can be used in my-super-crate-proc-macro for all imports.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">macro_rules</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">refer_to_crate</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cp\">$crate</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Now is the problem: How would I refer inside of the code generated by my-super-crate-proc-macro refer to <code>refer_to_crate!</code>. I would need to import that macro just like any other item I want to use as part of my generated code. So this brings us back to the underlying item: How do we import items from the parent crate into the generated scope of a proc macro?</p>",
        "id": 218388791,
        "sender_full_name": "weiznich",
        "timestamp": 1606808999
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"215423\">weiznich</span> <a href=\"#narrow/stream/213817-t-lang/topic/.24crate/near/218388791\">said</a>:</p>\n<blockquote>\n<p>How do we import items from the parent crate into the generated scope of a proc macro?</p>\n</blockquote>\n<p>You probably need to do something like <a href=\"https://github.com/rust-lang/futures-rs/pull/2124\">https://github.com/rust-lang/futures-rs/pull/2124</a>.</p>",
        "id": 218391878,
        "sender_full_name": "Taiki Endo",
        "timestamp": 1606811395
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"213313\">@Taiki Endo</span> We are already doing <a href=\"https://github.com/diesel-rs/diesel/blob/daf1d331f941f759f8bf50ed807cce0b512c39a5/diesel/src/lib.rs#L365\">something like this</a> in diesel. That works well as long as you don't want to reexport a derive macro or a proc macro attribute as you cannot wrap those into a macro_rules! wrapper.</p>",
        "id": 218401825,
        "sender_full_name": "weiznich",
        "timestamp": 1606817578
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"215423\">@weiznich</span> Oh, sorry, I thought you were talking about re-export support in function-like proc-macros.</p>",
        "id": 218422035,
        "sender_full_name": "Taiki Endo",
        "timestamp": 1606829782
    }
]