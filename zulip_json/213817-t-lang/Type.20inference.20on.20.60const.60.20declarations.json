[
    {
        "content": "<p>Is there an actual strong reason that a <code>const</code> can't just infer its type? Or ar least to try an inference and then compile error if it can't do it?</p>",
        "id": 211805123,
        "sender_full_name": "Lokathor",
        "timestamp": 1601492416
    },
    {
        "content": "<p>If it's just like a grammar issue, could the type be given as <code>_</code> and then that would trigger the inference?</p>",
        "id": 211805200,
        "sender_full_name": "Lokathor",
        "timestamp": 1601492454
    },
    {
        "content": "<p>Is it perhaps related to the deliberate non-type-inference of function declarations?</p>",
        "id": 211811955,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601495881
    },
    {
        "content": "<p>If it is a top level item, perhaps it makes for good documentation</p>",
        "id": 211812044,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601495908
    },
    {
        "content": "<p>Documentation + a fixed place to have concrete errors point.</p>",
        "id": 211817820,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1601498690
    },
    {
        "content": "<p>Yes, AFAIK it's the general principle that items fully specify their types.</p>",
        "id": 211861263,
        "sender_full_name": "scottmcm",
        "timestamp": 1601517307
    },
    {
        "content": "<p>A type-inferred const is called a macro <span aria-label=\"smirk\" class=\"emoji emoji-1f60f\" role=\"img\" title=\"smirk\">:smirk:</span>                       /s</p>",
        "id": 211861279,
        "sender_full_name": "scottmcm",
        "timestamp": 1601517343
    },
    {
        "content": "<p>Well, for example, I have a lot of constants like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">SDL_WINDOW_MAXIMIZED</span>: <span class=\"nc\">SDL_WindowFlags</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">SDL_WindowFlags</span><span class=\"p\">(</span><span class=\"mh\">0x00000080</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>And since the type of the expression on the right is fully declared, it seems silly to have to <em>extra</em> declare it on the left too.</p>",
        "id": 211862447,
        "sender_full_name": "Lokathor",
        "timestamp": 1601518643
    },
    {
        "content": "<p><code>pub const SDL_WINDOW_MAXIMIZED: SDL_WindowFlags = default! { 0: 0x00000080 };</code> <a href=\"https://internals.rust-lang.org/t/short-enum-variant-syntax-in-some-cases/13113/9?u=scottmcm\">with this</a></p>\n<p>I think the more serious answer, though, is that the extra noise of the type is negligible compared to the noise of the doc comment, so it doesn't much matter.</p>",
        "id": 211863550,
        "sender_full_name": "scottmcm",
        "timestamp": 1601520108
    },
    {
        "content": "<p>Especially for a \"real\" newtype like that.  It annoys me way more in <code>pub const ONE: NonZeroU32 = NonZeroU32::try_from(1).unwrap();</code>, but hopefully we'll get enough const-in-trait to do custom literals nicely one day so it'll just be <code>pub const ONE: NonZeroU32 = 1;</code></p>",
        "id": 211863637,
        "sender_full_name": "scottmcm",
        "timestamp": 1601520207
    },
    {
        "content": "<p>I would also be happy with <code>pub const SDL_WINDOW_MAXIMIZED: SDL_WindowFlags = _(0x00000080);</code></p>",
        "id": 211864382,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601521161
    },
    {
        "content": "<p>I don't really care whether the left or right hand side learns inference, as long as one of them does. :)</p>",
        "id": 211864394,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601521184
    },
    {
        "content": "<p>There have been a lot of proposals for syntax like <code>_::Variant(...)</code> in places where you know an enum type.</p>",
        "id": 211864460,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601521234
    },
    {
        "content": "<p>Or <code>_ { foo: bar }</code> in places where you know a struct type.</p>",
        "id": 211864469,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601521250
    },
    {
        "content": "<p>This seems like one of those places.</p>",
        "id": 211864473,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601521259
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> How would you feel about that approach?</p>",
        "id": 211864485,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601521276
    },
    {
        "content": "<p>I'm not sure I can explain why, but for some reason <code>_(3)</code> feels bad in a way that <code>_ { x: 3 }</code> doesn't.</p>",
        "id": 211864552,
        "sender_full_name": "scottmcm",
        "timestamp": 1601521352
    },
    {
        "content": "<p><code>_(3)</code> reminds me of mir haha</p>",
        "id": 211864566,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601521384
    },
    {
        "content": "<p>But <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>  to the general \"I want a way to use the type from the context\" feeling, <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span></p>",
        "id": 211864568,
        "sender_full_name": "scottmcm",
        "timestamp": 1601521388
    },
    {
        "content": "<p><code>_3  = _2</code></p>",
        "id": 211864569,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601521389
    },
    {
        "content": "<p>Agreed, as well as older memories of <a href=\"https://www.boost.org/libs/lambda\">https://www.boost.org/libs/lambda</a> (<code>_1 &lt; _2</code>)</p>",
        "id": 211864585,
        "sender_full_name": "scottmcm",
        "timestamp": 1601521442
    },
    {
        "content": "<p>Hmm, I suppose one version of this once we have <code>impl const From</code> (or whatever) is just<br>\n<code>pub const SDL_WINDOW_MAXIMIZED: SDL_WindowFlags = 0x00000080.into();</code></p>",
        "id": 211864645,
        "sender_full_name": "scottmcm",
        "timestamp": 1601521509
    },
    {
        "content": "<p>Good point. :)</p>",
        "id": 211864651,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601521517
    },
    {
        "content": "<p>(assuming you <em>want</em> to have a From impl)</p>",
        "id": 211864658,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601521532
    },
    {
        "content": "<p>(True, though for newtypes it's very common to have either <code>From</code> or <code>TryFrom</code>, and if it's more than just a one-field thing I feel like the <code>_</code> forms would look less weird to me.)</p>",
        "id": 211864749,
        "sender_full_name": "scottmcm",
        "timestamp": 1601521646
    },
    {
        "content": "<p>A thought that jumped to mind, though it has many problems of its own:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">SDL_WINDOW_MAXIMIZED</span>: <span class=\"nc\">SDL_WindowFlags</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"p\">(</span><span class=\"mh\">0x00000080</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 211864760,
        "sender_full_name": "scottmcm",
        "timestamp": 1601521672
    },
    {
        "content": "<p>It's an interesting thought, but I feel like overloading <code>Self</code> for that would be confusing.</p>",
        "id": 211864910,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601521836
    },
    {
        "content": "<p>what's wrong with <code>pub const SDL_WINDOW_MAXIMIZED = SDL_WindowFlags(0x00000080);</code>?</p>",
        "id": 211864921,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601521873
    },
    {
        "content": "<p>with the understanding that the type can't be affected by the use, only by the initialization</p>",
        "id": 211864932,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601521906
    },
    {
        "content": "<p>I guess if it is <code>pub const FOO = function_somewhere();</code> you might be confused about the type of <code>FOO</code> by looking at the source</p>",
        "id": 211865155,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601522171
    },
    {
        "content": "<p>that just seems like normal type inferrence though? <code>function_somewhere()</code> must always have a fully specified type</p>",
        "id": 211865162,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601522198
    },
    {
        "content": "<p>Hm, what if <code>function_somewhere() -&gt; impl Trait</code>?</p>",
        "id": 211865166,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601522207
    },
    {
        "content": "<p>that isn't allowed in constants currently I thought</p>",
        "id": 211865179,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601522228
    },
    {
        "content": "<p>since you have to know the exact type</p>",
        "id": 211865182,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601522233
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=046af52b946a0ee4bb1b3d30c2b4de40\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=046af52b946a0ee4bb1b3d30c2b4de40</a></p>",
        "id": 211865196,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601522274
    },
    {
        "content": "<p>well this whole feature is hypothetical</p>",
        "id": 211865197,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601522277
    },
    {
        "content": "<p>right, I'm saying continue to disallow it</p>",
        "id": 211865262,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601522344
    },
    {
        "content": "<p>and instead of 'these two features interact to make it not possible', 'remove one of the features and make the other explicitly forbidden'</p>",
        "id": 211865275,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601522372
    },
    {
        "content": "<p>I think the sense in which this is not normal type inference is that you can get cross crate inference</p>",
        "id": 211865333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601522438
    },
    {
        "content": "<p>although I think all this came up already for async fns</p>",
        "id": 211865341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601522457
    },
    {
        "content": "<p>Yeah, Josh, and goes particularly poorly for associated consts anyway.</p>",
        "id": 211865670,
        "sender_full_name": "scottmcm",
        "timestamp": 1601522964
    },
    {
        "content": "<p>Another common case is more like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">DISPCNT_VAL</span>: <span class=\"nc\">DisplayControlSetting</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">DisplayControlSetting</span>::<span class=\"n\">new</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">.</span><span class=\"n\">with_video_mode</span><span class=\"p\">(</span><span class=\"n\">VideoMode</span>::<span class=\"n\">_3</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">.</span><span class=\"n\">with_display_bg2</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>And you can have any sort of more complex expression, a block, a const fn, etc.</p>\n<p>Essentially as const eval gets better, this particular little case will nag more and more i expect.</p>",
        "id": 211867077,
        "sender_full_name": "Lokathor",
        "timestamp": 1601524926
    },
    {
        "content": "<p>I think with more complex RHSs like that omitting the type would be worse.</p>",
        "id": 211867247,
        "sender_full_name": "scottmcm",
        "timestamp": 1601525175
    },
    {
        "content": "<p>Change it to using a builder and it would look almost the same but the type wouldn't be named anywhere any more...</p>",
        "id": 211867277,
        "sender_full_name": "scottmcm",
        "timestamp": 1601525269
    },
    {
        "content": "<p>Especially if you might accidentally end up with <code>&amp;mut Foo</code> instead of <code>Foo</code>.</p>",
        "id": 211867279,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601525271
    },
    {
        "content": "<p>And I think I saw someone starting on <code>const{}</code> blocks, so <code>let foo = const { isplayControlSetting::new().with_video_mode(VideoMode::_3);</code> will start to be available for the non-item uses soon hopefully.</p>",
        "id": 211867340,
        "sender_full_name": "scottmcm",
        "timestamp": 1601525346
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> well specifically <code>&amp;mut T</code> you'd never get at least, but i suppose there is the potential concern of alternative types of other forms.</p>",
        "id": 211868011,
        "sender_full_name": "Lokathor",
        "timestamp": 1601526258
    },
    {
        "content": "<blockquote>\n<p>well specifically <code>&amp;mut T</code> you'd never get at least</p>\n</blockquote>\n<p>Why not?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Builder</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Builder</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">alpha</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">beta</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">build</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">DEMO</span><span class=\"w\">  </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Builder</span><span class=\"p\">.</span><span class=\"n\">alpha</span><span class=\"p\">().</span><span class=\"n\">beta</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// Oops forgot to call `.build()`</span>\n</code></pre></div>",
        "id": 211900286,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1601554593
    },
    {
        "content": "<p>That seems like a problem anywhere though, the solution I use is to put must_use on the builder.</p>",
        "id": 211901766,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601555471
    },
    {
        "content": "<p>Doesn't seem like a good idea for that style of builder, which is usually optimized for conditional calls:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Builder</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">something</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">alpha</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">beta</span><span class=\"p\">().</span><span class=\"n\">build</span><span class=\"p\">()</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 211902639,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1601555923
    },
    {
        "content": "<p>that wouldn't warn I don't think</p>",
        "id": 211902967,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601556104
    },
    {
        "content": "<p>ah hmm this doesn't work anyway because it returns &amp;mut instead of self <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=2570fb434658e8cf857237352f662080\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=2570fb434658e8cf857237352f662080</a></p>",
        "id": 211903349,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601556282
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> an intermediate value in the chain could be &amp;mut but the final value cannot be</p>",
        "id": 211913552,
        "sender_full_name": "Lokathor",
        "timestamp": 1601560576
    },
    {
        "content": "<p>That is: a const declaration can't be &amp;mut T, ever</p>",
        "id": 211914552,
        "sender_full_name": "Lokathor",
        "timestamp": 1601560961
    },
    {
        "content": "<p><code>&amp;mut Zst</code> could be const, but that's philosophical I guess (note that I think <code>&amp;mut []</code> is const under certain circumstances)</p>",
        "id": 211915016,
        "sender_full_name": "oli",
        "timestamp": 1601561124
    },
    {
        "content": "<p>Ah, looks like the current <code>&amp;ZstLiteral</code> =&gt; <code>&amp;*(alignof(T) as *const _)</code> is in codegen, not mir-time, <a href=\"https://github.com/rust-lang/rust/pull/63635\">https://github.com/rust-lang/rust/pull/63635</a></p>",
        "id": 212008651,
        "sender_full_name": "scottmcm",
        "timestamp": 1601619176
    },
    {
        "content": "<p>yes, there were concerns about that not being actually legal to do in case of <code>let x = ZstLiteral; let y = &amp;x;</code> and I was unable to figure out whether I can guarantee that not to accidentally also get optimized</p>",
        "id": 212039408,
        "sender_full_name": "oli",
        "timestamp": 1601622648
    },
    {
        "content": "<p>Is the desire to add type inference to const because it's a pain to write, for readability, or both?</p>\n<p>If it's just for writing purposes I wonder to which degree Rust-Analyzer /rustfix could help</p>",
        "id": 212220358,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1601813276
    },
    {
        "content": "<p>I think some of it is array lengths changing but actually being irrelevant beyond having them statically and not as a slice</p>",
        "id": 212222984,
        "sender_full_name": "oli",
        "timestamp": 1601817433
    },
    {
        "content": "<p><code>const BLA: _ = &lt;something&gt;;</code> already tells you the right type in the error message, but it doesn't seem to be an automatically applicable suggestion</p>",
        "id": 212224343,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1601819716
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> See my comment about <code>impl usize</code> (strawman syntax) over in <a href=\"https://github.com/rust-lang/rfcs/pull/2545#issuecomment-661305546\">https://github.com/rust-lang/rfcs/pull/2545#issuecomment-661305546</a> for that problem.</p>",
        "id": 212237338,
        "sender_full_name": "scottmcm",
        "timestamp": 1601839133
    },
    {
        "content": "<p>ooh that is a very neat way to solve this</p>",
        "id": 212267894,
        "sender_full_name": "oli",
        "timestamp": 1601884089
    },
    {
        "content": "<p>this would be a great topic to add as a \"design summary\" to the lang team website btw &lt;3</p>",
        "id": 212426769,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601990821
    }
]