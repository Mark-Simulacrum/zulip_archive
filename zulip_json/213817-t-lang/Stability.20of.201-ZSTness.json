[
    {
        "content": "<p>The confluence of conversations about <code>Freeze</code>, about <code>NeglectStability</code>, about the trait split for safe-transmute, and about the <code>repr(transparent)</code> relaxation made me think:</p>\n<p><strong><code>#[repr(transparent)]</code> means that it's now a breaking change to change a <code>struct Foo(());</code> to a <code>struct Foo(i32);</code>, even in just <code>repr(rust)</code>.</strong></p>\n<p>I wonder if the rule should change from \"<code>T</code> is a 1-ZST\" to \"<code>for&lt;'a&gt; &amp;'a T: TransmuteFrom&lt;&amp;'a ()&gt;</code>\"...</p>",
        "id": 215120408,
        "sender_full_name": "scottmcm",
        "timestamp": 1604076263
    },
    {
        "content": "<p>If you don't add <code>#[repr(transparent)]</code> to <code>Foo</code> then it shouldn't be a breaking change, right? <code>#[repr(rust)]</code> means that rustc can represent it the same as <code>i32</code> even when it is a ZST.</p>",
        "id": 215124305,
        "sender_full_name": "bjorn3",
        "timestamp": 1604078138
    },
    {
        "content": "<p>The problem is that if I do <code>pub struct Foo(());</code>, <em>someone in another crate</em> can do <code>#[repr(transparent)] struct Bar(i32, Foo);</code>.</p>",
        "id": 215156490,
        "sender_full_name": "scottmcm",
        "timestamp": 1604095702
    },
    {
        "content": "<p>And that's not a promise I affirmatively opted-in to making -- arguably by using a private field I was explicitly trying <em>not</em> to make a promise here.</p>",
        "id": 215156568,
        "sender_full_name": "scottmcm",
        "timestamp": 1604095766
    },
    {
        "content": "<p>Hmm, actually, if I make <code>Foo</code> be <code>#[non_exhaustive]</code> then this seems like it's definitely undesirable.  Filed that part as a bug, <a href=\"https://github.com/rust-lang/rust/issues/78586\">https://github.com/rust-lang/rust/issues/78586</a></p>\n<p>(Maybe with Safe Transmute we'd be able to expand that further to require the explicit opt-in even without <code>non_exhaustive</code>, but for now the narrower bug is more obviously a mistake.)</p>",
        "id": 215159713,
        "sender_full_name": "scottmcm",
        "timestamp": 1604098311
    },
    {
        "content": "<p>This is a neat issue, so I wrote a blog post cataloguing the sorts of changes that can alter 1-ZSTness: <a href=\"https://jack.wrenn.fyi/blog/semver-snares-transparent/\">https://jack.wrenn.fyi/blog/semver-snares-transparent/</a></p>",
        "id": 222228742,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1610294949
    }
]