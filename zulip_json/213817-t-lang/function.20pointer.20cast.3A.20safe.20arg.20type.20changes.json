[
    {
        "content": "<p>I was just looking at a situation where I would've liked to be able to do</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nc\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>I believe if that coercion would be legal, it would not be a breaking change if a public function in an API went from a mutable reference to an immutable one. I think there are other function pointer casts that could be legal. A function taking a raw pointer could be used as a function pointer with a reference argument. Basically whenever you could transmute the function pointer argument to the real function's argument without any change in ABI, such casts could be ok. Of course we don't want to lock ourselves into platform defined behaviour, but at least for references and raw pointers there should be no difference ever from an ABI perspective, right?</p>",
        "id": 195673102,
        "sender_full_name": "oli",
        "timestamp": 1588147078
    },
    {
        "content": "<p>Almost. Raw pointers can have mutable aliases, references cannot without UB, so there are circumstances where that isn't safe.</p>",
        "id": 195674312,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588147746
    },
    {
        "content": "<p>But many type conversions would be fine. I think they'd need an \"into\" or \"as\" or something though.</p>",
        "id": 195674361,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588147792
    },
    {
        "content": "<p>ah interesting. converting function pointers between each other via <code>into</code> would indeed be neat</p>",
        "id": 195675399,
        "sender_full_name": "oli",
        "timestamp": 1588148548
    },
    {
        "content": "<p>I feel like I'm missing something; can <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> or <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> spell out the scenario that Josh is describing? (Where are you anticipating the alias of a raw pointer arising? Is it from an invocation of the function pointer <code>x</code> on a <code>*const i32</code> input?)</p>",
        "id": 195729291,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588175021
    },
    {
        "content": "<p>Or wait, maybe <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> was talking about the generalizations that <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> listed, such as \"a function taking a raw pointer could be used as a function pointer with a reference argument ...\"</p>",
        "id": 195729826,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588175144
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span>  in any case, even looking at your original example... I'm not so sure you can make even the original coercion that you described. At least, not based on the type signatures alone</p>",
        "id": 195729946,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588175183
    },
    {
        "content": "<p>hmm.. why not? Is there an ABI problem?</p>",
        "id": 195730084,
        "sender_full_name": "oli",
        "timestamp": 1588175234
    },
    {
        "content": "<p>Consider e.g. <code>fn baz&lt;'a&gt;(p: &amp;'a i32, q: &amp;mut &amp;'a i32) { *q = p; }</code></p>",
        "id": 195730094,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588175241
    },
    {
        "content": "<p>You cannot just turn the <code>&amp;'a i32</code> into a <code>&amp;'a mut i32</code> blindly</p>",
        "id": 195730160,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588175262
    },
    {
        "content": "<p>the soundness of the body of <code>baz</code>relies on it being sharable</p>",
        "id": 195730327,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588175313
    },
    {
        "content": "<p>the function still needs to compile</p>",
        "id": 195730354,
        "sender_full_name": "oli",
        "timestamp": 1588175321
    },
    {
        "content": "<p>oh</p>",
        "id": 195730392,
        "sender_full_name": "oli",
        "timestamp": 1588175342
    },
    {
        "content": "<p>hmm</p>",
        "id": 195730398,
        "sender_full_name": "oli",
        "timestamp": 1588175343
    },
    {
        "content": "<p>maybe I misunderstand the coercion you desire</p>",
        "id": 195730403,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588175346
    },
    {
        "content": "<p>but if you want <code>let x: fn(&amp;mut i32) = baz;</code> to compile without knowing the body of <code>baz</code>, then you cannot blindly replace <code>&amp;T</code> with <code>&amp;mut T</code></p>",
        "id": 195730492,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588175387
    },
    {
        "content": "<p>basically I want to convert <code>baz</code> to a function pointer <code>for&lt;'a&gt; baz(p: &amp;'a mut i32, q: &amp;mut &amp;'a i32)</code></p>",
        "id": 195730515,
        "sender_full_name": "oli",
        "timestamp": 1588175396
    },
    {
        "content": "<p>right, but you can see where that goes wrong, right?</p>",
        "id": 195730601,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588175420
    },
    {
        "content": "<p>but I see now that there are implications I didn't think about</p>",
        "id": 195730605,
        "sender_full_name": "oli",
        "timestamp": 1588175421
    },
    {
        "content": "<p>clearly we need a richer hierarchy here. :)</p>",
        "id": 195730640,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588175433
    },
    {
        "content": "<p>I would have thought a wrapper function <code>fn foo&lt;'a&gt;(p: &amp;'a mut i32, q: &amp;mut &amp;'a i32) { baz(p, q) }</code> can exist without any problems and it bascially has no code</p>",
        "id": 195730927,
        "sender_full_name": "oli",
        "timestamp": 1588175534
    },
    {
        "content": "<p>hmm yes that compiles, so I'm again unsure why this specific example is a counterexample to my idea, but I see that there could be something in this space and will play a bit now to see if I can come up with problematic examples</p>",
        "id": 195731158,
        "sender_full_name": "oli",
        "timestamp": 1588175614
    },
    {
        "content": "<p>let me double-check whether I am misunderstanding my own exmaple</p>",
        "id": 195731193,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588175631
    },
    {
        "content": "<p>Oh, right</p>",
        "id": 195731320,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588175679
    },
    {
        "content": "<p>its okay that it gets aliased, since its being aliased as a <code>&amp;T</code></p>",
        "id": 195731347,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588175692
    },
    {
        "content": "<p>not as a <code>&amp;mut T</code></p>",
        "id": 195731355,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588175696
    },
    {
        "content": "<p>so never mind me</p>",
        "id": 195731360,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588175698
    },
    {
        "content": "<p>but it would definitely be bad to convert <code>&amp;mut &amp;'a i32</code> to <code>&amp;mut &amp;'a mut i32</code></p>",
        "id": 195731550,
        "sender_full_name": "oli",
        "timestamp": 1588175769
    },
    {
        "content": "<p>right. Its probably something where you would need to apply our variance rules to determine legality</p>",
        "id": 195731640,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588175807
    },
    {
        "content": "<p>Note that if you change the function ptr type, that's effectively a <em>transmute</em> of the argument from caller type to callee type</p>",
        "id": 195803529,
        "sender_full_name": "RalfJ",
        "timestamp": 1588229582
    },
    {
        "content": "<p>transmuting a mutable ref to a shared ref is not the same as the normal coercion, in terms of Stacked Borrows</p>",
        "id": 195803550,
        "sender_full_name": "RalfJ",
        "timestamp": 1588229603
    },
    {
        "content": "<p>but I think Stacked Borrows 2 is fine with such transmutes, and the reborrow-on-fn-entry will anyway ensure that the callee has the kind of tag/permission it expects</p>",
        "id": 195803574,
        "sender_full_name": "RalfJ",
        "timestamp": 1588229637
    },
    {
        "content": "<p>this is something to keep in mind though in general -- we'd be introducing transmutes here, not casts. (ptr-int-casts are another example of casts that are not equivalent to transmutes.)</p>",
        "id": 195803630,
        "sender_full_name": "RalfJ",
        "timestamp": 1588229670
    }
]