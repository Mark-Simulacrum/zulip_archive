[
    {
        "content": "<p>Related to the \"Down On Lints\" discussion: What's the process for getting lints that are unambiguous correctness problems into rustc from clippy?</p>\n<p>For example, I recently beefed up <a href=\"https://rust-lang.github.io/rust-clippy/master/index.html#invalid_atomic_ordering\">https://rust-lang.github.io/rust-clippy/master/index.html#invalid_atomic_ordering</a> and think that it makes more sense in rustc than in clippy</p>",
        "id": 214891680,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1603915998
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209168\">@Thom Chiovoloni</span> you make an MCP on <a href=\"https://github.com/rust-lang/compiler-team/issues/\">https://github.com/rust-lang/compiler-team/issues/</a>, which 99% of the time is accepted without comment, then make a PR uplifting the lint</p>",
        "id": 214891748,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603916036
    },
    {
        "content": "<p>example PR: <a href=\"https://github.com/rust-lang/rust/pull/75671\">https://github.com/rust-lang/rust/pull/75671</a></p>",
        "id": 214891804,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603916047
    },
    {
        "content": "<p>hmmm, okay, noted. Maybe I'll try next week or so</p>",
        "id": 214891826,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1603916058
    },
    {
        "content": "<p>luv 2 start discussions :^)</p>",
        "id": 214893681,
        "sender_full_name": "Jubilee",
        "timestamp": 1603917113
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209168\">@Thom Chiovoloni</span> My recollection of the last conversation about lint uplift was that lang didn't want to decide it all in one huge RFC for everything (because that mixed too many conversations to make progress) but that individual lints getting added was great because usually people pick ones where everyone just sortof goes \"yeah, sounds good\".  (One day we'll get far enough along that we start seeing sketchier ones, and guidance might change, but I don't think we're there yet.)</p>",
        "id": 214902668,
        "sender_full_name": "scottmcm",
        "timestamp": 1603922197
    },
    {
        "content": "<p>That said, personally I'd like to see more progress be made on more-generic lints so that they can be put as attributes in the library instead of needing a new lint every time.  Like imagine <code>#[always_panics_when(step == 0)]</code> on <code>Iterator::step_by</code> instead of that needing to be its own special lint.  (Plenty of design questions and bikeshedding to resolve, so maybe not explicitly that, but that's the idea.  I could also imagine something that expands to that plus an <code>assert!</code> in the body to reduce duplication, kinda like the discussion in <a href=\"https://internals.rust-lang.org/t/idea-make-assert-a-keyword-rejected/13066/8?u=scottmcm\">https://internals.rust-lang.org/t/idea-make-assert-a-keyword-rejected/13066/8?u=scottmcm</a>, for example.)</p>",
        "id": 214902835,
        "sender_full_name": "scottmcm",
        "timestamp": 1603922315
    },
    {
        "content": "<p>I think that makes sense but probably not for the atomics, which for some of them gets rather complex (e.g. the requirement for the success/fail args in compare_exchange</p>",
        "id": 214903912,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1603923044
    },
    {
        "content": "<p>Yeah, for cmpxcg I agree.  I was just looking at the first example in the clippy for for it, and <code>load</code> just has \"Panics if <code>order</code> is [<code>Release</code>] or [<code>AcqRel</code>].\" in its doccomment, which would translate quite well.  (Could even generate the doc comment section in a proc macro :P)</p>",
        "id": 214905857,
        "sender_full_name": "scottmcm",
        "timestamp": 1603924361
    },
    {
        "content": "<p>Yeah, and in general that kind of thing being easy could ease the number of wrapper types APIs need to have. I think my main hesitation is honestly having it expand to the assert, since there are a lot of ways you might want to write that with different tradeoffs for error messages, and it could force additional checking where you dont want it.</p>",
        "id": 214909961,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1603927491
    },
    {
        "content": "<p>that said we're getting off topic.</p>",
        "id": 214909969,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1603927498
    },
    {
        "content": "<p>(Agreed, I'd definitely start with just the lint version, and the expansion to a version that adds the <code>assert!</code> or the doc comment or whatever can happen later.)</p>",
        "id": 214920355,
        "sender_full_name": "scottmcm",
        "timestamp": 1603938931
    }
]