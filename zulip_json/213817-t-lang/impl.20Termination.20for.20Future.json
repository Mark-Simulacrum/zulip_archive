[
    {
        "content": "<p>Would negative impls allow expressing <code>impl !Future for () {}</code> (guarantee Future will never be implemented for unit)?</p>\n<p>I have an almost working implementation of <code>impl Termination for Future</code> that is failing because I can't guarantee that Future will never be implemented for unit. I believe this is because Termination is defined in std, while Future is defined in core, which causes coherence issues.</p>",
        "id": 203249453,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1594202319
    },
    {
        "content": "<p>Mostly interested in identifying which feature(s) would be required to enable this impl, and so far I think it's negative impls? But not sure, so figured I'd ask.</p>",
        "id": 203249581,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1594202410
    },
    {
        "content": "<p>could we move <code>Termination</code> to core?</p>",
        "id": 203249825,
        "sender_full_name": "oli",
        "timestamp": 1594202606
    },
    {
        "content": "<p>Termination depends on \"ExitCode\" which is std-only iirc</p>",
        "id": 203249913,
        "sender_full_name": "kennytm",
        "timestamp": 1594202667
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> maybe? -- I'm using <code>std::thread</code> inside of my impl though, which I think means this issue would still persist</p>",
        "id": 203249923,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1594202676
    },
    {
        "content": "<p>For reference; this is the code I'm trying to get to work: <a href=\"https://github.com/rust-lang/rust/compare/master...yoshuawuyts:future-termination\">https://github.com/rust-lang/rust/compare/master...yoshuawuyts:future-termination</a></p>",
        "id": 203250009,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1594202761
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125254\">kennytm</span> <a href=\"#narrow/stream/213817-t-lang/topic/negative.20impls/near/203249913\">said</a>:</p>\n<blockquote>\n<p>Termination depends on \"ExitCode\" which is std-only iirc</p>\n</blockquote>\n<p>it is implemented for <code>ExitCode</code>, so that's not the issue</p>",
        "id": 203250210,
        "sender_full_name": "oli",
        "timestamp": 1594202916
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211722\">Yoshua Wuyts</span> <a href=\"#narrow/stream/213817-t-lang/topic/negative.20impls/near/203249923\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> maybe? -- I'm using <code>std::thread</code> inside of my impl though, which I think means this issue would still persist</p>\n</blockquote>\n<p>ah yes, that won't work</p>",
        "id": 203250216,
        "sender_full_name": "oli",
        "timestamp": 1594202923
    },
    {
        "content": "<p>So... maybe we can use specialization here? as any concrete impl will be stronger than the generic impl</p>",
        "id": 203250239,
        "sender_full_name": "oli",
        "timestamp": 1594202943
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> :O</p>",
        "id": 203250455,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1594203112
    },
    {
        "content": "<p>I am never able to recall specialization syntax. Try slapping a <code>default</code> on the generic trait impl..</p>",
        "id": 203250545,
        "sender_full_name": "oli",
        "timestamp": 1594203177
    },
    {
        "content": "<p>are there any examples of how to do that? Never used specializations before so not sure where to start</p>",
        "id": 203250553,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1594203182
    },
    {
        "content": "<p>Oh cool; will try!</p>",
        "id": 203250566,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1594203190
    },
    {
        "content": "<p>oh, apparently you don't even need the <code>default</code></p>",
        "id": 203250698,
        "sender_full_name": "oli",
        "timestamp": 1594203286
    },
    {
        "content": "<p>just <code>#![feature(specialization)]</code> on the crate and it will magically work</p>",
        "id": 203250718,
        "sender_full_name": "oli",
        "timestamp": 1594203302
    },
    {
        "content": "<p>that's scary</p>",
        "id": 203250728,
        "sender_full_name": "oli",
        "timestamp": 1594203304
    },
    {
        "content": "<p>ah, use <code>#![feature(min_specialization)]</code> for less scaryness</p>",
        "id": 203250782,
        "sender_full_name": "oli",
        "timestamp": 1594203338
    },
    {
        "content": "<p>(though still no <code>default</code> keyword needed)</p>",
        "id": 203250796,
        "sender_full_name": "oli",
        "timestamp": 1594203351
    },
    {
        "content": "<p>hmm, <code>std</code> already has <code>min_specialization</code> enabled, and with that the error I'm getting still appears</p>",
        "id": 203250858,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1594203373
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0119]: conflicting implementations of trait `process::Termination` for type `()`:\n    --&gt; src\\libstd\\process.rs:1704:1\n     |\n1670 |   impl Termination for () {\n     |   ----------------------- first implementation here\n...\n1704 | / default impl&lt;T, F&gt; Termination for F\n1705 | | where\n1706 | |     T: Termination,\n1707 | |     F: Future&lt;Output = T&gt;,\n...    |\n1753 | |     }\n1754 | | }\n     | |_^ conflicting implementation for `()`\n     |\n     = note: upstream crates may add a new impl of trait `core::future::Future` for type `()` in future versions\n</code></pre></div>",
        "id": 203250937,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1594203453
    },
    {
        "content": "<p>hmm I was trying <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=97f7f0834f9607bb7249c4506967f662\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=97f7f0834f9607bb7249c4506967f662</a> but I realize now that this wasn't representing your setup</p>",
        "id": 203251069,
        "sender_full_name": "oli",
        "timestamp": 1594203522
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=394482e2d6b0320fdfafa55bf9df583c\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=394482e2d6b0320fdfafa55bf9df583c</a> is the correct version...</p>",
        "id": 203251115,
        "sender_full_name": "oli",
        "timestamp": 1594203558
    },
    {
        "content": "<p>both are the same link?</p>",
        "id": 203251148,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1594203583
    },
    {
        "content": "<p>oops, updated</p>",
        "id": 203251217,
        "sender_full_name": "oli",
        "timestamp": 1594203606
    },
    {
        "content": "<p>I find it very odd that we can specialize if the upstream crate <em>has</em> an impl, but not if it <em>hasn't</em></p>",
        "id": 203251242,
        "sender_full_name": "oli",
        "timestamp": 1594203629
    },
    {
        "content": "<p><em>nods</em></p>",
        "id": 203251326,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1594203721
    },
    {
        "content": "<p>I mean... the reasoning in the error is that adding a new impl will cause conflicts, so we already bail out without an impl. But the whole point about specialization is that the new impl does not conflict</p>",
        "id": 203251376,
        "sender_full_name": "oli",
        "timestamp": 1594203736
    },
    {
        "content": "<p>so either we're missing a very subtle point in trait resolution, or this is just a bug^TM</p>",
        "id": 203251405,
        "sender_full_name": "oli",
        "timestamp": 1594203770
    },
    {
        "content": "<p>Fingers crossed it's just a bug heh. Should we file an issue for this?</p>",
        "id": 203251553,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1594203891
    },
    {
        "content": "<p>looking right now for pre-existing issues</p>",
        "id": 203251565,
        "sender_full_name": "oli",
        "timestamp": 1594203907
    },
    {
        "content": "<p>hah; way ahead of me :P</p>",
        "id": 203251579,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1594203921
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/213817-t-lang/topic/impl.20Termination.20for.20Future/near/203250210\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"125254\">kennytm</span> <a href=\"#narrow/stream/213817-t-lang/topic/negative.20impls/near/203249913\">said</a>:</p>\n<blockquote>\n<p>Termination depends on \"ExitCode\" which is std-only iirc</p>\n</blockquote>\n<p>it is implemented for <code>ExitCode</code>, so that's not the issue</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/issues/43301#issuecomment-354303128\">https://github.com/rust-lang/rust/issues/43301#issuecomment-354303128</a> ok the actual reason is the <code>eprintln!</code> inside the impl for <code>Result&lt;!, E&gt;</code>.</p>",
        "id": 203251582,
        "sender_full_name": "kennytm",
        "timestamp": 1594203922
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/45542\">https://github.com/rust-lang/rust/issues/45542</a></p>",
        "id": 203251691,
        "sender_full_name": "oli",
        "timestamp": 1594204029
    },
    {
        "content": "<p>Interesting; it sounds like there's good reason for this restriction?</p>",
        "id": 203251830,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1594204148
    },
    {
        "content": "<p>sounds to me like we just need the correct impl work</p>",
        "id": 203252377,
        "sender_full_name": "oli",
        "timestamp": 1594204529
    },
    {
        "content": "<blockquote>\n<p>we should be able to make this work by reasoning through \"potential specialization\" along the same lines that we have an understanding of \"potential overlap\" today (potential overlap being what triggers an overlap error in the first place).</p>\n</blockquote>",
        "id": 203252409,
        "sender_full_name": "oli",
        "timestamp": 1594204562
    },
    {
        "content": "<p>So, if you wanted to make a \"specializable\" impl, it would written like so:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Termination</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">F</span>: <span class=\"nc\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">default</span> <span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">report</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* default goes on the fn! */</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>This indicates that some other impl may swap in a more specialized <code>report</code> function.</p>",
        "id": 203265831,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594214436
    },
    {
        "content": "<p><code>default impl</code> is something else, for better or worse</p>",
        "id": 203265847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594214445
    },
    {
        "content": "<p>However, this is indeed a complex case in specialization -- where <code>()</code> doesn't <em>today</em> specialize that base impl -- but conceivably it could in the <em>future</em> -- but only sometimes -- anyway suffices to say it would take some careful thought to decide when/if it's ok, though I think it ought to be.</p>",
        "id": 203266045,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594214547
    },
    {
        "content": "<p>That said, something impl <code>impl !Future for ()</code> could conceivably help. I do have a desire to permit that and to integrate it into coherence so that coherence would just know that these two impls are not overlapping.</p>",
        "id": 203266103,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594214582
    }
]