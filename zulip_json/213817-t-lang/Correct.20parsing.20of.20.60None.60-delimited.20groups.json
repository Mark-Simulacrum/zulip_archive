[
    {
        "content": "<p>Currently, the parser completely ignores <code>None</code>-delimited groups (see <a href=\"https://github.com/rust-lang/rust/issues/67062\">https://github.com/rust-lang/rust/issues/67062</a>). I'd like to start working towards deciding what the correct parsing behavior should be, as this is causing issues with macro invocations.</p>\n<p>Some background:<br>\nA <code>TokenStream</code> has the concept of a <code>None</code>-delimited group - this is <code>DelimToken::None</code> in <code>rustc_ast</code>, and <code>Delimiter::None</code> in the public <code>proc_macro</code> API. These are mainly created during <code>macro_rules!</code> expansion, to wrap interpolated tokens. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">expand</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cp\">$e</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">expand</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>will result in <code>&lt;2&gt; + 1</code>, where <code>&lt;&gt;</code> represents a <code>None</code>-delimited group. What makes this tricky is the fact that we do not actually create a <code>None</code>-delimited group immediately. Instead, we create a <code>token::Interpolated</code>, which is only converted to a <code>None</code>-delimited group if a proc-macro re-collects the <code>TokenStream</code> (e.g. <code>token_stream.into_iter().collect()</code>). This means that we <em>appear</em> to handle <code>None</code>-delimited groups correctly in many places, but that's only because we're still dealing with a <code>token::Interpolated</code></p>\n<p>However,  proc-macros are able to manually insert <code>None</code>-delimited groups themselves, using the proc-macro API. While I'm not personally aware of any crates that do this, it's possible for a crate today to emit something like:<br>\n<code>&lt;&lt;fn&gt; foo &lt;()&gt; (&lt;&lt;&lt;val&gt;: u8&gt;&gt;) { }&gt;</code>, where <code>&lt;&gt;</code> is a <code>None</code>-delimited group. This will be accepted by the parser, since all of the <code>None</code>-delimited groups will be ignored.</p>\n<p>Unfortunately, simply ignoring <code>None</code>-delimited groups is not a viable strategy. Consider the following macro:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">call_it</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$e</span>:<span class=\"nc\">expr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">#[my_proc_macro]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Result: {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$e</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">call_it</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>If <code>my_proc_macro</code> does <em>not</em> recollect its input (e.g. it returns the <code>TokenStream</code> unchanged), then the <code>token::Interpolated</code> will be left as-is. We will parse this as '(1 +1) * 2<code>, causing us to print </code>4.`</p>\n<p>If <code>my_proc_macro</code> <em>does</em><code> recollect its input, we will end up parsing </code>&lt;1 + 1&gt; * 2<code>. Since we ignore </code>None<code>-delimited groups, this will be parsed as </code>1 + (1 * 2)<code>, causing us to print </code>3.`</p>\n<p>This means that our decisions about parsing <code>None</code>-delimited groups can result in <em>runtime behavior changes</em>, not just compile errors.</p>\n<p>I see several different options for how to proceed:</p>\n<ul>\n<li>Do nothing, and always ignore <code>None</code>-delimited groups. I think this is a very bad option - it means that a proc-macro's decision to recollect the <code>TokenStream</code> can result in runtime behavior changes, and effectively makes <code>None</code>-delimited groups useless.</li>\n<li>Treat <code>None</code>-delimited groups in expression position like parenthesis, and otherwise ignore them. This means that a token stream like <code>&lt;fn&gt; &lt;&lt;foo&gt;(val: u8)&gt;</code> will have its behavior unchanged. This option would give consistent behavior for the <code>1 + 2 * 2</code> case. In nno-expressions positions, there aren't obvious 'parsing priorities' (what would it mean for <code>fn</code> to have a higher 'precedence' than <code>foo</code>).</li>\n<li>Ban <code>None</code>-delimited groups from certain positions (probably most non-expression positions), and adjust <code>macro_rules!</code> insertion to not insert <code>None</code>-delimited groups in some places. This would mean that we don't silently accept <code>None</code>-delimiters in 'weird' places, but it would require us to be much smarter about where we <em>do</em> insert <code>None</code>-delimited groups.</li>\n</ul>\n<p>Assuming we choose to change our parsing of <code>None</code>-delimited groups in some way, we'll need to think about backwards-compatibility. When dealing with <code>None</code>-delimited groups, we are by definition dealing with macros, which means that it can be tricky to figure out who to 'blame' for the presence of a <code>None</code>-delimited group.</p>\n<p>cc <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span></p>",
        "id": 237688163,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620318291
    },
    {
        "content": "<p>I'd expect explicitly expecting <code>None</code> delimiters in the same places in the parser where interpolated tokens are expected.</p>",
        "id": 237697199,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1620321959
    },
    {
        "content": "<p>(That means none of the options listed above - <code>None</code> delimiters are never ignored, never banned and always inserted by <code>macro_rules</code>.)</p>",
        "id": 237697372,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1620322023
    },
    {
        "content": "<p>That means in contexts supporting parentheses (expr, ty, pat) <code>None</code> delimiters would behave exactly like parentheses, that's the simplest case.</p>",
        "id": 237697585,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1620322102
    },
    {
        "content": "<p>Also, for some context: <a href=\"https://github.com/danielhenrymantilla/rust-defile\">https://github.com/danielhenrymantilla/rust-defile</a>, mainly the Caveats section at the bottom</p>",
        "id": 237697687,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1620322167
    },
    {
        "content": "<p>In other contexts we would modify the parser to parse <code>⟪ struct S; ⟫</code> as an item in contexts where we are expecting an item, in the same way as <code>struct S;</code>.</p>",
        "id": 237697699,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1620322174
    },
    {
        "content": "<p>And <code>NtIdent</code> is the tricky case, it's still likely that it shouldn't be wrapped into a <code>None</code>-delimited group at all, the question is how to do this better in the compiler without losing spans for diagnostics.</p>",
        "id": 237697913,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1620322255
    },
    {
        "content": "<blockquote>\n<p>as an item in contexts where we are expecting an item</p>\n</blockquote>\n<p>In other words, we are extending the item grammar with production</p>\n<div class=\"codehilite\"><pre><span></span><code>ITEM = &quot;⟪&quot; ITEM &quot;⟫&quot;\n</code></pre></div>\n<p>and other nodes too</p>\n<div class=\"codehilite\"><pre><span></span><code>BLOCK = &quot;⟪&quot; BLOCK &quot;⟫&quot;\nSTMT = &quot;⟪&quot; STMT &quot;⟫&quot;\nATTR_ITEM = &quot;⟪&quot; ATTR_ITEM &quot;⟫&quot;\nPATH = &quot;⟪&quot; PATH &quot;⟫&quot;\nVIS = &quot;⟪&quot; VIS &quot;⟫&quot;\n</code></pre></div>",
        "id": 237698172,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1620322359
    },
    {
        "content": "<p>There may be some issues with lookahead, but the solution is unlikely to be something worse than <a href=\"https://github.com/rust-lang/rust/pull/84130\">https://github.com/rust-lang/rust/pull/84130</a>.</p>",
        "id": 237699097,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1620322709
    },
    {
        "content": "<p>What happens for None-delimited groups that can't be produced by macro_rules expansions?</p>",
        "id": 237958906,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620483102
    },
    {
        "content": "<p>E g. A proc-macro creating <code>&lt;pub fn&gt; foo() {}</code></p>",
        "id": 237958972,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620483137
    },
    {
        "content": "<p>There's no nonterminal for 'pub fn' (other than a sequence of token trees, which is expanded without None delimiters</p>",
        "id": 237959011,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620483195
    },
    {
        "content": "<p>You get a visibility parsing error then because <code>pub fn</code> is not a visibility?</p>",
        "id": 237982341,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1620505557
    },
    {
        "content": "<p>(With <code>macro_rules</code> this kind of arbitrary fragments can only be passed with <code>tt</code> matchers which don't get wrapped into <code>None</code> delimiters.)</p>",
        "id": 237982438,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1620505665
    },
    {
        "content": "<p>That's what I meant by 'ban None-delimited groups in certain positions' - sorry if that was unclear</p>",
        "id": 237984053,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620507403
    },
    {
        "content": "<p>I guess the banning is implicit in the fact that we only allow them in certain positions</p>",
        "id": 237984062,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620507415
    },
    {
        "content": "<p>I think your suggestion makes the most sense</p>",
        "id": 237984077,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620507448
    },
    {
        "content": "<p>Hopefully, there aren't any proc-macros that would be broken by this</p>",
        "id": 237984081,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620507462
    },
    {
        "content": "<p>from my previous token-handling PRs, it seemed like most proc-macros were oblivious to <code>None</code>-delimited groups</p>",
        "id": 237984132,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620507496
    },
    {
        "content": "<p>so hopefully no one has decided to do something weird and pointless like inserting <code>None</code>-delimited groups in weird places</p>",
        "id": 237984144,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620507514
    }
]