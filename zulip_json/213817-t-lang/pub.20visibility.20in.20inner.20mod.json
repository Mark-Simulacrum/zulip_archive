[
    {
        "content": "<p>Is there a good reason the following is rejected?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">mod</span> <span class=\"nn\">X</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">t</span>: <span class=\"nc\">crate</span>::<span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"c1\">// error: private type `T` in public interface</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p><code>crate::T</code> is public, but only to <code>X</code>, which itself has the same privacy as the outer crate and thus <code>T</code> itself. Couldn't this be accepted?</p>",
        "id": 221364829,
        "sender_full_name": "varkor",
        "timestamp": 1609528866
    },
    {
        "content": "<p>I’ve asked about this before, and I believe the answer was that you can still say <code>pub use X::foo;</code> which would be valid and so you’re still leaking a private type. The module’s visibility has no effect on the inner items.</p>",
        "id": 221365678,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1609530273
    },
    {
        "content": "<p>I would have thought <code>pub use X::foo</code> would be the same as <code>pub fn foo(t: T)</code> in the outer crate, which would emit an error because <code>T</code> is not <code>pub</code>.</p>",
        "id": 221365849,
        "sender_full_name": "varkor",
        "timestamp": 1609530540
    },
    {
        "content": "<p>The problem if I understand it correctly is locality of errors. Since <code>create::X::foo</code> is marked <code>pub</code>, you can at root level expose <code>pub use crate::X::foo</code>, at which point you do have a private type in an exported interface. Erroring at the definition of <code>foo</code> is nicer and more local than an error at the reexport of <code>foo</code>.</p>\n<p>The standard solution is that <code>foo</code> should be <code>pub(crate)</code> instead of <code>pub</code> to the world.</p>",
        "id": 221373097,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1609541629
    },
    {
        "content": "<p>I personally think giving an error if you try to <code>pub use crate::X::foo</code> would be less surprising, but if others disagree then this is certainly more conservative.</p>",
        "id": 221373525,
        "sender_full_name": "varkor",
        "timestamp": 1609542328
    },
    {
        "content": "<p>I definitely agree it is confusing, and I have been caught by it when you have a public type in your interface such as a function, but it isn't actually reachable for end users, and even worse it's not documented aside from at the function site. I think it might be nice to have a clippy lint for it.</p>",
        "id": 221637026,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1609846864
    },
    {
        "content": "<p>Like this? <a href=\"https://doc.rust-lang.org/rustc/lints/listing/allowed-by-default.html#unreachable-pub\">https://doc.rust-lang.org/rustc/lints/listing/allowed-by-default.html#unreachable-pub</a></p>",
        "id": 221666610,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1609863711
    },
    {
        "content": "<p>And isn't allowing pub items inside private ones a problem for safe transmute? <span class=\"user-mention\" data-user-id=\"219211\">@Jack Wrenn</span> maybe just for types...</p>",
        "id": 221677596,
        "sender_full_name": "pachi",
        "timestamp": 1609868644
    },
    {
        "content": "<p>@pachi The connection between the pub-and-priv trick and transmutation is this: Transmutation-like operations allow you to directly muck with fields. Directly mucking with a field you don't have visibility on is unsound. So, any complete analysis of the safety of such an operation needs to account for visibility. The pub-in-priv trick complicates visibility analysis. Without it, you can assess the visibility of a field just by looking at the visibility modifier on that field, and the type that it's apart of. With the pub-in-priv trick, you also need to account for module visibility.</p>",
        "id": 221679131,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1609869373
    },
    {
        "content": "<p>Thanks! I thought this could be relevant to your (impressive) work on safe transmute.</p>",
        "id": 221679828,
        "sender_full_name": "pachi",
        "timestamp": 1609869680
    },
    {
        "content": "<p>IIRC, type privacy basically has two aspects to it:</p>\n<ul>\n<li>(incomplete) lints that nudge you away from declaring unreachable types</li>\n<li>a complete reachability-based analysis that stops you from using private types</li>\n</ul>\n<p>At one time, the hope was that it featuring public types in private interfaces could be made an error, but this broke way too much code on <a href=\"http://crates.io\">crates.io</a>. (To this day, unreachable types continues to be the only way to achieve 'sealed' traits, for instance.) The fallout was this:</p>\n<ul>\n<li>a few cases which now get no warning whatsoever (namely, the pub-in-priv trick)</li>\n<li>a few cases that remain warnings but can be replaced with the pub-in-priv trick, and thus might be made hard errors in the future</li>\n<li>a few hard errors</li>\n</ul>\n<p>I think <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span>'s example is an instance of that last category.</p>\n<p>In principle, all of these lints for priv-in-pub are unnecessary for soundness, because of the reachability-based <a href=\"https://github.com/rust-lang/rfcs/pull/2145\">type privacy</a> analysis by <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span>. This analysis targets the use-sites of private types.</p>",
        "id": 221680527,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1609869980
    },
    {
        "content": "<p>Type privacy <em>is</em> essential to the soundness of the latest iteration of the safe transmute proposal, and I think to some other things already in Rust, too.</p>",
        "id": 221680784,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1609870101
    }
]