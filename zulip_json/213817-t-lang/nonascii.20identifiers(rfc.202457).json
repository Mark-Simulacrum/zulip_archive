[
    {
        "content": "<p>Hello, let me create a topic to discuss and confirm on the details of RFC 2457.</p>",
        "id": 197135409,
        "sender_full_name": "Charles Lew",
        "timestamp": 1589198816
    },
    {
        "content": "<p>The RFC text is at <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2457-non-ascii-idents.md\">https://github.com/rust-lang/rfcs/blob/master/text/2457-non-ascii-idents.md</a></p>",
        "id": 197135445,
        "sender_full_name": "Charles Lew",
        "timestamp": 1589198842
    },
    {
        "content": "<p>The RFC basically contains 6 major things.</p>\n<ol>\n<li>Tweak to the language parser: identifier grammar, nfc normalization (implemented, feature gated)</li>\n<li>Concerns about <code>#[no_mangle]</code> and <code>#[path]</code> (not yet implemented)</li>\n<li><code>confusable_idents</code> lint, detects similarity between identifiers (implemented, discussing adjusting its behavior)</li>\n<li><code>uncommon_codepoints</code> lint, detects code points not usually occurred (implemented)</li>\n<li><code>nonstandard_style</code> lint tweaks, basically nothing to do. (need confirmation)</li>\n<li><code>mixed_script_confusables</code> lint, detects scripts that occurred in the crate but all occurrences are considered confusable. (not yet implemented)</li>\n</ol>",
        "id": 197136152,
        "sender_full_name": "Charles Lew",
        "timestamp": 1589199284
    },
    {
        "content": "<p>In rationale section, there're two alternative <code>mixed_script_detection</code> lints that are NOT currently selected by this RFC.<br>\na. single identifier mixed script detection.<br>\nb. a statistics approach of mixed script detection.</p>",
        "id": 197136522,
        "sender_full_name": "Charles Lew",
        "timestamp": 1589199530
    },
    {
        "content": "<p>Just create this summary to make sure we're on the same page =)</p>",
        "id": 197136644,
        "sender_full_name": "Charles Lew",
        "timestamp": 1589199629
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span></p>",
        "id": 197136668,
        "sender_full_name": "Charles Lew",
        "timestamp": 1589199654
    },
    {
        "content": "<p>.</p>",
        "id": 197155354,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1589208305
    },
    {
        "content": "<p>So yeah I think your assessment is correct. We can instead have the confusable_idents lint only focus on mixed script confusables, and mixed_script_confusables continues to do a global analysis.</p>",
        "id": 197155742,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1589208473
    },
    {
        "content": "<p>either way, the list of mixed script confusable characters is much smaller, so you don't actually need the skeleton code for this.</p>",
        "id": 197155861,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1589208510
    },
    {
        "content": "<p>Actually this could probably be a single mixed_script_confsables lint, without the percentage check</p>",
        "id": 197155942,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1589208545
    },
    {
        "content": "<p>Removing the skeleton code means the compiler no longer warns about two otherwise identical idents with different diacritics, right?<br>\nThere are quite a few diacritics and they are not all that easy to see and tell apart: <a href=\"https://en.wikipedia.org/wiki/Combining_Diacritical_Marks\">https://en.wikipedia.org/wiki/Combining_Diacritical_Marks</a></p>",
        "id": 197157645,
        "sender_full_name": "Pyfisch",
        "timestamp": 1589209192
    },
    {
        "content": "<p>Well, the hardest thing about confusables.txt is that it's not one-to-one. The list itself doesn't really talk about one code point and another code point are confusable, instead it is mapping code points into intermediate forms.</p>",
        "id": 197172086,
        "sender_full_name": "Charles Lew",
        "timestamp": 1589215067
    },
    {
        "content": "<p><a href=\"https://github.com/unicode-rs/unicode-security/pull/13\">https://github.com/unicode-rs/unicode-security/pull/13</a><br>\nThis newly written table generation code consist of all the one-to-one cases, and found out the directly mentioned one-to-many cases, but doesn't handle the A+B confusable to C+D case, which is really tricky to implement and use...</p>",
        "id": 197172666,
        "sender_full_name": "Charles Lew",
        "timestamp": 1589215322
    },
    {
        "content": "<p>If we really want to find the confusable identifiers pairs that are mixed script, i think the only feasible way to still use the skeleton code to find out the confusables, and then filter the mixed script pairs out. If this plan is acceptable, i might give the implementation a try.</p>",
        "id": 197173078,
        "sender_full_name": "Charles Lew",
        "timestamp": 1589215500
    },
    {
        "content": "<p>That or preprocess the confusables data.</p>",
        "id": 197174201,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589216101
    },
    {
        "content": "<p>To make it easier to figure that out.</p>",
        "id": 197174211,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589216108
    },
    {
        "content": "<p>For instance, a character that's only confusable with others in the same script isn't something we need flagged.</p>",
        "id": 197174247,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589216133
    },
    {
        "content": "<p>This is basically \"reverse apply\"-ing the confusables data. The original table is reductive, it maps random data into a normalized form to check for equivalence. To reverse apply it, the data will become generative.</p>",
        "id": 197176268,
        "sender_full_name": "Charles Lew",
        "timestamp": 1589217121
    },
    {
        "content": "<p>let me take a random example, here are two lines from the table</p>\n<div class=\"codehilite\"><pre><span></span><code>00F8 ;  006F 0338 ; MA  # ( √∏ ‚Üí oÃ∏ ) LATIN SMALL LETTER O WITH STROKE ‚Üí LATIN SMALL LETTER O, COMBINING LONG SOLIDUS OVERLAY    # ‚ÜíoÃ∑‚Üí\n1D428 ; 006F ;  MA  # ( ùê® ‚Üí o ) MATHEMATICAL BOLD SMALL O ‚Üí LATIN SMALL LETTER O    #\n</code></pre></div>",
        "id": 197176371,
        "sender_full_name": "Charles Lew",
        "timestamp": 1589217172
    },
    {
        "content": "<p>From these two lines, we know that:<br>\n00F8 and  1D428 0338 are confusable.</p>",
        "id": 197176566,
        "sender_full_name": "Charles Lew",
        "timestamp": 1589217278
    },
    {
        "content": "<p>By first applying the second-line substitution, then applying the first-line substitution, they both fold into <code>006F 0338</code> form.</p>",
        "id": 197176711,
        "sender_full_name": "Charles Lew",
        "timestamp": 1589217344
    },
    {
        "content": "<p>There're even chaining cases, i believe. So... it's much more complex to prepare this data. I'm not sure we should dive into this approach...</p>",
        "id": 197177112,
        "sender_full_name": "Charles Lew",
        "timestamp": 1589217516
    },
    {
        "content": "<p>Instead, when we've got 00F8 identifier and 1D428 0338 identifier at hand, and we know they're confusable using skeleton approach, we just need some simple rules to tell whether they're same script confusable or not, this will be much easier.</p>",
        "id": 197178103,
        "sender_full_name": "Charles Lew",
        "timestamp": 1589217986
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300894\">@Pyfisch</span> I'm not sure i understand the \"script group\" concept from the <code>mixed_script_confusable</code> lint part of the RFC.</p>",
        "id": 197312463,
        "sender_full_name": "Charles Lew",
        "timestamp": 1589305672
    },
    {
        "content": "<p>The second paragraph \"We identify lists of code points which are Allowed by UTS 39 section 3.1 (i.e., code points not already linted by less_used_codepoints) and are \"exact\" confusables between code points from other Allowed scripts.\" I think this means that this is pure-preprocessing and does not depend on the actual codebase. I have created such a list.</p>",
        "id": 197314897,
        "sender_full_name": "Charles Lew",
        "timestamp": 1589306629
    },
    {
        "content": "<p>In the fourth paragraph \"In a code base, if the only code points from a given script group (aside from Latin, Common, and Inherited) are such exact confusables\", is this the <code>Script</code> property of the UCD, or should i take <code>Script_Extensions</code> property into account, or should i use the TR39 augmented script set concept?</p>",
        "id": 197315444,
        "sender_full_name": "Charles Lew",
        "timestamp": 1589306868
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span> it's the augmented script set</p>",
        "id": 197316322,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1589307270
    },
    {
        "content": "<p>Thanks, so, each code point corresponds to a augmented script set, and we need to check how many kinds of augmented script set occurred in this code base. And for each of them, whether its \"source\" code points  only consists of confusable code points.</p>",
        "id": 197317031,
        "sender_full_name": "Charles Lew",
        "timestamp": 1589307613
    },
    {
        "content": "<p>Is this correct?</p>",
        "id": 197317064,
        "sender_full_name": "Charles Lew",
        "timestamp": 1589307629
    },
    {
        "content": "<p>I still don't understand why you only want to warn about confusable idents from different scripts. To me it does not matter whether two identifiers I confuse are written in the same or in different scripts. Since only warning about some confusable identifiers is harder to implement there must be some advantage to this that I am missing.</p>",
        "id": 197391604,
        "sender_full_name": "Pyfisch",
        "timestamp": 1589364557
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span> In general \"script groups\" are scripts that are commonly used together. For example Japanese is written in a mixture of Kanji + Hiragana + Katakana. I think the term was invented in the RFC and is not otherwise used. In the section \"Alternative mixed script lints\", subsection \"Mixed script detection\" lint is described. It restricts identifiers to characters from the same script or set of scripts as described in <a href=\"https://www.unicode.org/reports/tr39/#Restriction_Level_Detection\">https://www.unicode.org/reports/tr39/#Restriction_Level_Detection</a> But this lint is not part of the accepted RFC.</p>\n<p>The <code>mixed_script_confusable</code> lint part was written by <span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> and you better ask him how he defines \"script groups\".</p>",
        "id": 197393286,
        "sender_full_name": "Pyfisch",
        "timestamp": 1589365570
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300894\">@Pyfisch</span> so firstly the mixed_script_confusables lint already has all the implementation work necessary to warn about cross-script confusables. This isn't additional work.</p>\n<p>The idea is that users of a script will typically not have a problem with this, and it will be solved with fonts or whatever. Now, it is true that some scripts like the perso-arabic script have confusables from different languages that both exist in the same script, and that might be tricky. But I'd rather wait for feedback on that before writing that lint.</p>",
        "id": 197423066,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1589381235
    },
    {
        "content": "<p>Yes, by script groups I'm talking about the augmented script sets</p>",
        "id": 197423097,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1589381255
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span> each code point may correspond to multiple augmented script sets</p>",
        "id": 197423135,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1589381273
    },
    {
        "content": "<p>actually no sorry</p>",
        "id": 197423238,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1589381320
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span> it's just <a href=\"https://github.com/unicode-rs/unicode-security/blob/master/src/mixed_script.rs#L9\">https://github.com/unicode-rs/unicode-security/blob/master/src/mixed_script.rs#L9</a></p>",
        "id": 197423520,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1589381452
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> okay, I understand. Would you mind updating the RFC?</p>",
        "id": 197449354,
        "sender_full_name": "Pyfisch",
        "timestamp": 1589391650
    },
    {
        "content": "<p>From my understanding augmented script set is  <code>script extension</code> property extended to capture CJK languages which uses more than one scripts together. However from the RFC text, the usage is a little, um, strange. </p>\n<p>Let me create an example, assume there's somehow a piece of <code>lib.rs</code> that is written solely using Hiragana and Katakana, both are script that are related to the Japanese language.  So their corresponding augmented script sets are (1) Hiragana + Jpan  (2) Katakana + Jpan , and ... there're two kinds of augmented script sets? So imagine if all texts are Hiragana, only one Katakana codepoint, and if the Katakana codepoint is confusable to, say, a Hiragana codepoint, then it's reported as mixed_script_confusable. Is this correct?</p>",
        "id": 197550337,
        "sender_full_name": "Charles Lew",
        "timestamp": 1589461850
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300894\">@Pyfisch</span> i'm really swamped right now, i can review any changs y'all make</p>",
        "id": 197699036,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1589552858
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span> no, we should use augmented script sets there, katakana should not be reported as confusable with hiragana</p>",
        "id": 197699155,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1589552893
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> Sorry, it wan't clear to me how that works. Yes i'm thinking with augmented script set. While i think i do understand the intention, i can't really figure out the exactly rules for implementation, it seems not very straight forward to me, but maybe i'm just missing something obvious.  Would you mind explaining it more? Either a brief description of rule or an example works for me. I think then i can work out the details.</p>",
        "id": 197714493,
        "sender_full_name": "Charles Lew",
        "timestamp": 1589559005
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span> you are correct in your understanding of augmented script sets, _however_ the point of script sets is to intersect them. A+B and A+C are not considered incompatible, because they have the nonzero intersection of A</p>",
        "id": 198218868,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1589990107
    },
    {
        "content": "<p>-</p>",
        "id": 198219359,
        "sender_full_name": "Charles Lew",
        "timestamp": 1589990296
    },
    {
        "content": "<p>Yeah, that's my understanding too.</p>",
        "id": 198219458,
        "sender_full_name": "Charles Lew",
        "timestamp": 1589990335
    },
    {
        "content": "<p>So i think we need to invent some rules for the mixed script lint here. Actually we first collect all code points in a crate.</p>",
        "id": 198219553,
        "sender_full_name": "Charles Lew",
        "timestamp": 1589990381
    },
    {
        "content": "<p>And find its corresponding augmented scripted set for each of the code point.</p>",
        "id": 198219692,
        "sender_full_name": "Charles Lew",
        "timestamp": 1589990435
    },
    {
        "content": "<p>And then, maybe we want to intersect each pair of the augmented script set to see if the intersection is empty?</p>",
        "id": 198219789,
        "sender_full_name": "Charles Lew",
        "timestamp": 1589990484
    },
    {
        "content": "<p>No, i think it sounds that this will need to operate on the identifier level. To check if there's an intersection which means the identifier itself is single script.</p>",
        "id": 198219946,
        "sender_full_name": "Charles Lew",
        "timestamp": 1589990548
    },
    {
        "content": "<p>Is there a good way to allow operators such as unicode nabla in identifiers? With <code>#[feature(non_ascii_idents)]</code>, I get</p>\n<div class=\"codehilite\"><pre><span></span><code>error: unknown start of token: \\u{2207}\n  --&gt; src/main.rs:12:9\n   |\n12 |     let ‚àáu = 3;\n   |         ^\n</code></pre></div>\n\n\n<p>yet this would be popular notation for scientific computing and numerical solvers. Julia is significantly <a href=\"https://docs.julialang.org/en/v1/manual/variables/#Allowed-Variable-Names\">more inclusive</a> than what I understand of the <a href=\"https://github.com/rust-lang/rust/issues/55467\">proposal</a> for Rust.</p>",
        "id": 211417507,
        "sender_full_name": "Jed",
        "timestamp": 1601214601
    },
    {
        "content": "<p>Rust uses the <code>XID_Start</code> unicode group which is specifically made for identifier starts: <a href=\"https://github.com/rust-lang/rust/blob/b8363295d555494bbaa119eba8b16a3057e6728c/compiler/rustc_lexer/src/lib.rs#L266\">https://github.com/rust-lang/rust/blob/b8363295d555494bbaa119eba8b16a3057e6728c/compiler/rustc_lexer/src/lib.rs#L266</a></p>",
        "id": 211418183,
        "sender_full_name": "bjorn3",
        "timestamp": 1601215581
    },
    {
        "content": "<p>If you want to change it you will have to change <code>is_id_start</code> and <code>is_id_continue</code>.</p>",
        "id": 211418202,
        "sender_full_name": "bjorn3",
        "timestamp": 1601215631
    },
    {
        "content": "<p>Unfortunately, nabla is in the Sm category alongside (mostly) binary operators. <a href=\"http://www.fileformat.info/info/unicode/category/Sm/list.htm\">http://www.fileformat.info/info/unicode/category/Sm/list.htm</a><br>\nThere are a handful of useful identifier symbols in that category, but I think it would involve explicitly allowing them like Rust does for <code>_</code> and Julia does for a longer list:<br>\n<a href=\"https://github.com/JuliaLang/julia/blob/master/src/flisp/julia_extensions.c#L67-L122\">https://github.com/JuliaLang/julia/blob/master/src/flisp/julia_extensions.c#L67-L122</a><br>\nIs this sort of extension something in-scope for this RFC, and if so, would it be more effective to start with a PR or try to build consensus in discussion first? (I don't know this community well enough to anticipate objections.)</p>",
        "id": 211420901,
        "sender_full_name": "Jed",
        "timestamp": 1601220102
    },
    {
        "content": "<p>as a workaround you could use characters from the Canadian Aboriginal Syllabics block <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> <code>let ·êÅu = 3;</code></p>",
        "id": 211423160,
        "sender_full_name": "kennytm",
        "timestamp": 1601223476
    },
    {
        "content": "<p>potayto potahto</p>",
        "id": 211423373,
        "sender_full_name": "cuviper",
        "timestamp": 1601223770
    },
    {
        "content": "<p>that will be warned with <code>uncommon_codepoints</code> lint though.</p>",
        "id": 211423394,
        "sender_full_name": "Charles Lew",
        "timestamp": 1601223819
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"322310\">@Jed</span> The original proposal was very much aiming for allowing words in other languages, rather than arbitrary symbols/emoji/etc.</p>\n<p>One (of several) potential issues with allowing a broader set of symbols would be whether such symbols should be lexed as part of identifiers, or whether we might ever want to allow them as operators or some other part of syntax instead.</p>",
        "id": 211423603,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601224104
    },
    {
        "content": "<p>Once something is lexed as an identifier, we can't change that.</p>",
        "id": 211423608,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601224125
    },
    {
        "content": "<p>The primary motivating use case for non-ASCII identifiers was supporting other (human) languages, allowing people to code in their language of choice.</p>",
        "id": 211423760,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601224411
    },
    {
        "content": "<p>maybe there could be a proc-macro that transforms<br>\n<code>let sym!(\"‚àáu\") = 3;</code><br>\ninto <br>\n<code>let nabla_u = 3;</code></p>",
        "id": 211423763,
        "sender_full_name": "Charles Lew",
        "timestamp": 1601224425
    },
    {
        "content": "<p>yeah, mainly allowing designing apis using their language of choice.</p>",
        "id": 211423815,
        "sender_full_name": "Charles Lew",
        "timestamp": 1601224475
    },
    {
        "content": "<p>That all makes sense. New binary operators are great for literate math, but often much less so for data structure reuse in optimized libraries. There are plausible use cases for <code>‚àá</code> as unary operator, though I'd personally prefer <code>‚àá(u)</code> in such a circumstance (and there are Julia libraries that use this syntax). My motivation here would be to encourage implementing numerical/math libraries in Rust as a sort of intermediate between the classic C/Fortran languages and more domain-specific (Julia) that have a heavier runtime and are harder to bind and package/distribute for use from other languages.</p>\n<p>I think being conservative with identifiers is warranted, but there is a strong case for <code>‚àá</code> and a few others.</p>",
        "id": 211424627,
        "sender_full_name": "Jed",
        "timestamp": 1601225825
    },
    {
        "content": "<p>if we're going to allow custom operators, we should allow people to just glom together ascii symbols like a <em>proper</em> language does.</p>",
        "id": 211424711,
        "sender_full_name": "Lokathor",
        "timestamp": 1601225968
    },
    {
        "content": "<p>That would prevent people from writing the equivalent of x+y without spaces.</p>",
        "id": 211425144,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601226535
    },
    {
        "content": "<p>Do you mean like Haskell <code>a &gt;&gt;= b</code>? I don't particularly care on this front. Custom infix operators are nice for embedded DSLs, but aren't something I would use much in library implementation. But I think <code>a ‚äó b</code> is more clear than some sequence of ASCII symbols <code>a &lt;*&gt; b</code> or some such.</p>",
        "id": 211425161,
        "sender_full_name": "Jed",
        "timestamp": 1601226598
    },
    {
        "content": "<p><em>that's</em> what <code>&lt;*&gt;</code> means</p>",
        "id": 211425333,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601226812
    },
    {
        "content": "<p>wow you've just cleared up a lot of haskell for me <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 211425336,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601226820
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> I don't understand how that follows.</p>",
        "id": 211425753,
        "sender_full_name": "Lokathor",
        "timestamp": 1601227420
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> The lexer needs to know where one token stops and the next begins.</p>",
        "id": 211426005,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601227729
    },
    {
        "content": "<p>So it needs to know which symbols can be part of identifiers, and which symbols cannot.</p>",
        "id": 211426028,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601227761
    },
    {
        "content": "<p>If the same symbols can be part of both, there's ambiguity.</p>",
        "id": 211426039,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601227782
    },
    {
        "content": "<p>Sorry, right, my mistake. When I said \"symbol\" i meant the <del>Haskell</del> <em>proper</em> language usage of the word, where it's limited to non-alphanumeric characters. So, <code>x+y</code> is unambiguiously <code>x</code> (alphanum) then <code>+</code> (non-alphanum) then <code>y</code> (alphanum)</p>",
        "id": 211426110,
        "sender_full_name": "Lokathor",
        "timestamp": 1601227859
    },
    {
        "content": "<p>Related: should the <code>mixed_script_confusables</code> lint be so strict as to prevent use of Greek letters in otherwise-Latin code? Seems like<code>œÜ</code> as an identifier isn't \"confusable\" so much as imposing a style guide. (I find Julia's use of Greek and math symbols somewhat gratuitous, but there is definitely a set of users who like their code to look as close as possible to the mathematical methods paper.)</p>",
        "id": 211431588,
        "sender_full_name": "Jed",
        "timestamp": 1601236297
    },
    {
        "content": "<p>I don't think that should trigger the lint; if it is, there's a problem. It's meant to flag cases where the only identifiers used from a given script have identical letterforms to other scripts.</p>",
        "id": 211432340,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601237321
    },
    {
        "content": "<p><code>œÜ</code> shouldn't trigger that; it doesn't have an identical letterform.</p>",
        "id": 211432344,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601237342
    },
    {
        "content": "<p>There are a few Greek letters that might, such as omicron (which looks identical to <code>o</code>/<code>O</code>); if those were the <em>only</em> such Greek letters you used, you might get that lint, and in that case it'd be working as intended.</p>",
        "id": 211432422,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601237433
    },
    {
        "content": "<p>I think that list would include:<br>\npossibly capital beta, capital epsilon, capital zeta, capital eta, capital iota, capital kappa, capital mu, capital nu, capital and lowercase omicron, capital phi, capital tau, capital upsilon, and capital chi.</p>",
        "id": 211432519,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601237607
    },
    {
        "content": "<p>Anything else shouldn't be on the list of confusables.</p>",
        "id": 211432528,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601237630
    },
    {
        "content": "<p>If you have a test case where something like <code>œÜ</code> is triggering the lint, please do report it. Feel free to use any of what I wrote above in doing so, if that helps.</p>",
        "id": 211432598,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601237696
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> I believe unicode treats greek and latin as confusable as in <code>…∏</code> and <code>œÜ</code>.</p>",
        "id": 211432632,
        "sender_full_name": "Eric Huss",
        "timestamp": 1601237755
    },
    {
        "content": "<p>Which depending on the font look identical.</p>",
        "id": 211432674,
        "sender_full_name": "Eric Huss",
        "timestamp": 1601237765
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>$ cargo +nightly build\nwarning: The usage of Script Group `Greek` in this crate consists solely of mixed script confusables\n  --&gt; src/main.rs:12:9\n   |\n12 |     let œÜ = 3;\n   |         ^\n   |\n   = note: `#[warn(mixed_script_confusables)]` on by default\n   = note: The usage includes &#39;œÜ&#39; (U+03C6).\n   = note: Please recheck to make sure their usages are indeed what you want.\n</code></pre></div>\n\n\n<p>Same with other letters I've tried, such as <code>Œ≤</code>.</p>",
        "id": 211432688,
        "sender_full_name": "Jed",
        "timestamp": 1601237802
    },
    {
        "content": "<p>Latin …∏:</p>\n<div class=\"codehilite\"><pre><span></span><code>warning: identifier contains uncommon Unicode codepoints\n  --&gt; src/main.rs:12:9\n   |\n12 |     let …∏ = 3;\n   |         ^\n   |\n   = note: `#[warn(uncommon_codepoints)]` on by default\n</code></pre></div>",
        "id": 211432760,
        "sender_full_name": "Jed",
        "timestamp": 1601237923
    },
    {
        "content": "<p>I had no idea that there were duplicate copies of that codepoint. :(</p>",
        "id": 211432840,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601238058
    },
    {
        "content": "<p>Sigh.</p>",
        "id": 211432851,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601238081
    },
    {
        "content": "<p>Ideally, you'd only get a warning about those symbols if you're actually using multiple variants of it.</p>",
        "id": 211432927,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601238222
    },
    {
        "content": "<p>That's a challenge to check, though.</p>",
        "id": 211432930,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601238230
    },
    {
        "content": "<p>FWIW, they look quite different in DejaVu Sans Mono. Anyway, the <code>mixed_script_confusables</code> also fires on <code>Œ∏</code> (Greek small theta), for which there is no Latin counterpart.</p>",
        "id": 211432973,
        "sender_full_name": "Jed",
        "timestamp": 1601238274
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"322310\">@Jed</span> That can be confused with <code>OÃµ</code> which is an uppercase O with a horizontal stroke (u0335).  The lint should probably tell you what the other confusable characters are.</p>",
        "id": 211433482,
        "sender_full_name": "Eric Huss",
        "timestamp": 1601239028
    },
    {
        "content": "<p>Those look very different as well.</p>",
        "id": 211433616,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601239239
    },
    {
        "content": "<p>It should definitely tell you the other characters it could be confused with, and also, in cases like that it <em>really</em> shouldn't lint unless you're actually using the other confusable characters.</p>",
        "id": 211433625,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601239260
    },
    {
        "content": "<p>Ah, I found one that doesn't trigger the lint: <code>Œª</code>. Perhaps this is fraught in that these all look alike in some fonts, though <code>Il1</code> look alike in many popular fonts.</p>",
        "id": 211433634,
        "sender_full_name": "Jed",
        "timestamp": 1601239273
    },
    {
        "content": "<p>A lot depends on the font. I use Monaco and they look nearly identical: <a href=\"/user_uploads/4715/vwTfbSHdyOQYLOxQ6Op3ytZb/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/vwTfbSHdyOQYLOxQ6Op3ytZb/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/vwTfbSHdyOQYLOxQ6Op3ytZb/image.png\"></a></div><p>There's already a separate lint if you use both characters (<code>confusable_idents</code>).</p>",
        "id": 211435592,
        "sender_full_name": "Eric Huss",
        "timestamp": 1601242543
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"322310\">Jed</span> <a href=\"#narrow/stream/213817-t-lang/topic/nonascii.20identifiers(rfc.202457)/near/211432973\">said</a>:</p>\n<blockquote>\n<p>FWIW, they look quite different in DejaVu Sans Mono. Anyway, the <code>mixed_script_confusables</code> also fires on <code>Œ∏</code> (Greek small theta), for which there is no Latin counterpart.</p>\n</blockquote>\n<p>Basically <code>mixed_script_confusables</code> lint is just telling you that there're some uses of the <code>Greek</code> script, but not enough coverage within that script for the compiler to be sure that you intend to create an API surface with the corresponding natural language.</p>",
        "id": 211444291,
        "sender_full_name": "Charles Lew",
        "timestamp": 1601256563
    },
    {
        "content": "<p>i think if you intent to mathematical usages you can use the ones in Mathematical Alphanumeric Symbols block. <br>\nùõâùõùùúÉùúóùúΩùùëùù∑ùûãùû±ùüÖùöØùöπùõ©ùõ≥ùú£ùú≠ùùùùùßùûóùû°<br>\nThese won't trigger <code>mixed_script_confusables</code> but you'll need to allow <code>uncommon_codepoints</code> instead.</p>",
        "id": 211444571,
        "sender_full_name": "Charles Lew",
        "timestamp": 1601256984
    },
    {
        "content": "<p>re: output associated confusable code points: <br>\nIt's best if we could output the corresponding unicode character names. I even wrote a crate for this: <a href=\"https://github.com/unicode-rs/unicode-charname\">https://github.com/unicode-rs/unicode-charname</a> . however we previously discussed and decided the dataset is a bit too heavy to embed in rustc here...<br>\nIt's not useful to just output the corresponding code points in literal form, since it would be hard for user to distinguish or look up these. Outputting hex digits of code points is viable but still a little too unfriendly for user to look up these themselves.</p>",
        "id": 211445043,
        "sender_full_name": "Charles Lew",
        "timestamp": 1601257787
    },
    {
        "content": "<p>Would outputting a link to an online database of unicode characters that includes data on what rustc considers to be lookalikes be an option?</p>",
        "id": 211479388,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1601292386
    },
    {
        "content": "<p>Here's the actual link: <a href=\"https://www.unicode.org/Public/security/latest/confusables.txt\">https://www.unicode.org/Public/security/latest/confusables.txt</a></p>",
        "id": 211479561,
        "sender_full_name": "Charles Lew",
        "timestamp": 1601292518
    },
    {
        "content": "<p>I meant as an option for rustc to output as part of the lint, but that would require a unique URL per character and a more friendly presentation</p>",
        "id": 211484960,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1601296031
    }
]