[
    {
        "content": "<p>I some wrote code <em>as recently as today</em> that involved doing <code>Ok(self.val = new_val)</code> as the last line of a function to trim away having <code>Ok(())</code> as its own line, examples: <a href=\"https://gist.github.com/rust-play/9c506790bbce761c59c8b7419fd293be\" title=\"https://gist.github.com/rust-play/9c506790bbce761c59c8b7419fd293be\">https://gist.github.com/rust-play/9c506790bbce761c59c8b7419fd293be</a></p>\n<p>So please don't invalidate that.</p>",
        "id": 194746155,
        "sender_full_name": "Lokathor",
        "timestamp": 1587425933
    },
    {
        "content": "<p>That seems rather inscrutable.</p>",
        "id": 194759088,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587441839
    },
    {
        "content": "<p>Also, you should be getting a warning about \"otherwise\" being unused.</p>",
        "id": 194759152,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587441933
    },
    {
        "content": "<p>Yes, otherwise is unused at the moment. If this becomes the final form of the function and i don't end up braking apart the error conditions more then i'll put an underscore on the name. Until then about half the project just has <code>allow(unused)</code> on it.</p>",
        "id": 194759776,
        "sender_full_name": "Lokathor",
        "timestamp": 1587443139
    },
    {
        "content": "<p>Also, the code seems fairly clear to me. Though I am the author so naturally I'd end up being more comfortable with it.</p>\n<p>I'd say that in general I like code that's visually compact, so I end up making things a little different from normal.</p>\n<p>For example, in other parts of the same project I write <code>try_from</code> instances like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">TryFrom</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">PngColorType</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">type</span> <span class=\"nc\">Error</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">PngError</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"cp\">#[must_use]</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"cp\">#[inline(always)]</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">try_from</span><span class=\"p\">(</span><span class=\"n\">color</span>: <span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">PngError</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">color</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">PngColorType</span>::<span class=\"n\">Greyscale</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">PngColorType</span>::<span class=\"n\">Truecolor</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">PngColorType</span>::<span class=\"n\">Indexed</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">PngColorType</span>::<span class=\"n\">GreyscaleAlpha</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">PngColorType</span>::<span class=\"n\">TruecolorAlpha</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">PngError</span>::<span class=\"n\">IllegalColorType</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">color</span><span class=\"w\"> </span><span class=\"p\">}),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>and it all feels quite natural to me.</p>",
        "id": 194759962,
        "sender_full_name": "Lokathor",
        "timestamp": 1587443489
    },
    {
        "content": "<p>if we follow RFC 2443 you should still be able to use <code>Ok((self.val = new_val))</code> or <code>Ok({ self.val = new_val })</code>. and <code>Ok(self.val = new_val)</code> is already warned by <code>clippy::unit_arg</code>.</p>",
        "id": 194761228,
        "sender_full_name": "kennytm",
        "timestamp": 1587445572
    },
    {
        "content": "<p>I'd use clippy more but rust-analyzer doesn't really seem to support it, and i generally want RA support more than clippy support</p>",
        "id": 194773329,
        "sender_full_name": "Lokathor",
        "timestamp": 1587457759
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/213817-t-lang/topic/Removing.20assignment.20as.20a.20way.20to.20get.20().20values/near/194746155\" title=\"#narrow/stream/213817-t-lang/topic/Removing.20assignment.20as.20a.20way.20to.20get.20().20values/near/194746155\">said</a>:</p>\n<blockquote>\n<p>So please don't invalidate that.</p>\n</blockquote>\n<p>I feel like that's arguably a feature request for Ok-wrapping :)</p>",
        "id": 194830683,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587487867
    },
    {
        "content": "<p>Yes, you could read it like that. If there was a better way to have Ok-wrapping happen then I also wouldn't mind a change.</p>",
        "id": 194853863,
        "sender_full_name": "Lokathor",
        "timestamp": 1587499315
    },
    {
        "content": "<p>I feel there's some correspondence between \"keyword arguments\" and \"field initializers\", it would be nice if they can use same symbols.</p>",
        "id": 194918861,
        "sender_full_name": "Charles Lew",
        "timestamp": 1587556496
    },
    {
        "content": "<p>Aside from \"=\", maybe \":=\" is a nice choice too :)</p>",
        "id": 194919007,
        "sender_full_name": "Charles Lew",
        "timestamp": 1587556587
    },
    {
        "content": "<p>I recall that <span class=\"user-mention silent\" data-user-id=\"256841\">Nick Cameron</span> felt that <code>Foo { x = y }</code> would have been a better choice of syntax.</p>",
        "id": 194985019,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587586162
    },
    {
        "content": "<p>Bit late for that.</p>",
        "id": 194985026,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587586164
    },
    {
        "content": "<p>It is, though I do wonder if it might be possible to introduce one day. :)</p>",
        "id": 194985061,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587586187
    },
    {
        "content": "<p>So, so much better :)</p>",
        "id": 194985120,
        "sender_full_name": "varkor",
        "timestamp": 1587586206
    },
    {
        "content": "<p><code>:</code> for field assignments conflicts with several other syntax proposals IIRC.</p>",
        "id": 194985153,
        "sender_full_name": "varkor",
        "timestamp": 1587586226
    },
    {
        "content": "<p>Alas.</p>",
        "id": 194985163,
        "sender_full_name": "varkor",
        "timestamp": 1587586232
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span> We currently (conceptually) have \"tuple struct literals\" sharing syntax with \"positional-argument function calls\"; I've been pondering whether we could just have \"named struct literal\" syntax also be used for \"named-argument function calls\"...</p>",
        "id": 194998531,
        "sender_full_name": "scottmcm",
        "timestamp": 1587594195
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> We _could_ introduce it whenever we want, right?  I don't think <code>ident { ident =</code> in expression position is a conflict, since the preceding ident distinguishes it from a block with an assignment.  (Weighing the churn being a completely different conversation, of course.)</p>",
        "id": 194998805,
        "sender_full_name": "scottmcm",
        "timestamp": 1587594375
    },
    {
        "content": "<p>Right. It could be a stylistic choice, if we wanted it to be and felt it wouldn't be confusing.</p>",
        "id": 195000114,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587595332
    },
    {
        "content": "<p>There's very little benefit in having it be a stylistic choice: the primary reason to switch is to eliminate the ambiguity with things like type ascription.</p>",
        "id": 195000189,
        "sender_full_name": "varkor",
        "timestamp": 1587595422
    },
    {
        "content": "<p>Phasing it out slowly would not be ideal; you would probably want to switch on an edition change and rustfix it.</p>",
        "id": 195000279,
        "sender_full_name": "varkor",
        "timestamp": 1587595475
    },
    {
        "content": "<p>(It could be an interesting experiment to take a large codebase, and see what it looked like with <code>=</code> instead of <code>:</code>.)</p>",
        "id": 195000346,
        "sender_full_name": "varkor",
        "timestamp": 1587595551
    },
    {
        "content": "<p>Seems like it is <em>probably</em> a fairly straightforward change to make in the parser, so at least in theory we could land that and then rustfix rust-lang/rust or so.</p>",
        "id": 195008134,
        "sender_full_name": "simulacrum",
        "timestamp": 1587602436
    }
]