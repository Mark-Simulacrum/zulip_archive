[
    {
        "content": "<p>It seems like most of the worries about type ascription in the other thread are about its use in expressions.</p>\n<p>How might people feel about it on non-top-level bindings in <em>patterns</em>?</p>\n<p>Something like this seems rather nice, to me:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">parse</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">y</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>For now I'm explicitly talking about putting this only on bindings, not on arbitrary sub-patterns, though that of course could be done too.</p>\n<p>(boats also made a comment in this direction in the other thread, that probably helped raise this in my head.)</p>",
        "id": 213985025,
        "sender_full_name": "scottmcm",
        "timestamp": 1603231239
    },
    {
        "content": "<p>Ascriptions in patterns feel like a natural thing to have. On top of the added readability (c.f. IDEs) I talked about in the other thread, it would also make <code>let</code> bindings be less special <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 213991474,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1603236202
    },
    {
        "content": "<p>For back-compat I think let still needs to be more than just <code>let $pat</code>, since </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">Wrapping</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>: <span class=\"nc\">Wrapping</span><span class=\"o\">&lt;</span><span class=\"kt\">u64</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Wrapping</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>works today.  Getting to \"let is just a pattern\" needs the full &lt;<a href=\"https://github.com/Centril/rfcs/blob/rfc/generalized-type-ascription/text/0000-generalized-type-ascription.md#type-ascription-in-patterns\">https://github.com/Centril/rfcs/blob/rfc/generalized-type-ascription/text/0000-generalized-type-ascription.md#type-ascription-in-patterns</a>&gt;.  (Or I suppose removing the <code>$pat: $type</code> in an edition, which arguably could make things easier to parse without accidentally allowing <code>let x:u64:u64 = 4;</code>.)</p>",
        "id": 213998130,
        "sender_full_name": "scottmcm",
        "timestamp": 1603242477
    },
    {
        "content": "<p>What? I thought this was already stable</p>",
        "id": 214004068,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603249756
    },
    {
        "content": "<p>I don't think <code>let x:u64:u64 = 4;</code> should be prevented either, if it is a natural consequence of the grammar</p>",
        "id": 214004123,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603249843
    },
    {
        "content": "<p>oops, I see you are only talking about ascriptions on binders, not patterns. I want type ascriptions everywhere they can reasonably be placed, notwithstanding issues in expression syntax (in particular because this is not something where alternate syntax to do the same thing exists). There are named args objections to type ascriptions in a struct or enum pattern, but this could be solved by preferring named args over type ascription, and requiring parentheses to get the latter. What are thoughts on using parentheses like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">x</span>: <span class=\"kt\">u32</span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">bla</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{(</span><span class=\"n\">x</span>: <span class=\"kt\">u32</span><span class=\"p\">)}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">x</span>: <span class=\"mi\">0</span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 214004438,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603250333
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> I think I favor it in bindings. The precedence there is indeed quite strong.</p>",
        "id": 214078306,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603298374
    }
]