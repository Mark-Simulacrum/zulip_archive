[
    {
        "content": "<p>It appears that doubly-indirect recievers (like <code>self: &amp;Arc&lt;Self&gt;</code>) are stable, but are not object safe. I've tried to trace the history and tbh I'm quite confused how we got into this state. The stabilization report originally added doubly indirect pointers, then removed them, then there was discussion of adding them again but it never really concluded. The stabilization report suggests that they would have been object safe as well. <a href=\"https://github.com/rust-lang/rust/issues/55786\">https://github.com/rust-lang/rust/issues/55786</a></p>",
        "id": 212419175,
        "sender_full_name": "boats",
        "timestamp": 1601987037
    },
    {
        "content": "<p>Does anyone know why doubly-indirect recievers are not object safe?</p>",
        "id": 212419232,
        "sender_full_name": "boats",
        "timestamp": 1601987057
    },
    {
        "content": "<p>I found the more recent issue: <a href=\"https://github.com/rust-lang/rust/issues/55786\">https://github.com/rust-lang/rust/issues/55786</a></p>",
        "id": 212419551,
        "sender_full_name": "boats",
        "timestamp": 1601987237
    },
    {
        "content": "<p>there's no discussion of why they are not object safe or whether they ever can be, that's what I'd like to know</p>",
        "id": 212419685,
        "sender_full_name": "boats",
        "timestamp": 1601987316
    },
    {
        "content": "<p>and an issue in which Ralf and I had the same question, with no answer: <a href=\"https://github.com/rust-lang/rust/issues/64351\">https://github.com/rust-lang/rust/issues/64351</a></p>",
        "id": 212420132,
        "sender_full_name": "boats",
        "timestamp": 1601987557
    },
    {
        "content": "<p>The way I see it, a doubly indirect receiver can be implemented when hand-rolling your own VTable and own <code>ArcDynObj</code> wrapper (can submit a playground with it if anyone is interested). So I personally fail to see why the compiler shouldn't be able to achieve this with its own auto-implemented stuff.</p>",
        "id": 212420392,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1601987680
    },
    {
        "content": "<p>(i'd be interested in seeing this playground, but not because it's hard to believe or anything, just because i remember implementing something similar in the past and getting lost on a couple points)</p>",
        "id": 212420683,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1601987843
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span> Exactly; it's how we convert <code>Arc&lt;dyn Wake&gt;</code> to <code>Waker</code>.</p>",
        "id": 212420838,
        "sender_full_name": "boats",
        "timestamp": 1601987907
    },
    {
        "content": "<p>I thought of the waker (it looks like one of the ugly / <code>unsafe</code> things in the std library public API, because of this very reason), but I think that in that instance we may be \"cheating\" by flattening the indirection through <code>Arc::{from,into}_raw</code>. I do think we wouldn't even need to \"cheat\" (so as to be more general _w.r.t._ the kind of smart pointer being used)</p>",
        "id": 212421102,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1601988056
    },
    {
        "content": "<p>ah right, the function in the vtable isn't even passed a double pointer for <code>wake_by_ref</code></p>",
        "id": 212421448,
        "sender_full_name": "boats",
        "timestamp": 1601988234
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209168\">@Thom Chiovoloni</span> <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=f50860c473c5806691b49c091790ff6b\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=f50860c473c5806691b49c091790ff6b</a><br>\nThe most notable thing, however, is that I have had to rely on the layout of <code>TraitObject</code>; that is, that the first field of the struct is the slim pointer. So in that regard it isn't as trivial as I had anticipated, since, AFAIK, that is not a guarantee that Rust wants to make yet, and it feels to me that this cannot be done otherwise</p>",
        "id": 212426496,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1601990698
    },
    {
        "content": "<p>okay, i think that was the same thing i hit in the past. thanks. (i do agree that the issue is irrelevant for this context)</p>",
        "id": 212426556,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1601990724
    },
    {
        "content": "<p>Also, I realize too that this makes so that the non-doubly indirect method calls need to rely on layout and offsetting the <code>*const ArcInner&lt;ty::Erased&gt;</code> pointer to get back a <code>*const ty::Erased</code> it can feed to such methods. I don't know if that is how this is implemented as of today</p>",
        "id": 212427055,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1601990940
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256759\">@boats</span> I'm not sure of any reason off the top of my head</p>",
        "id": 212603207,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602096973
    }
]