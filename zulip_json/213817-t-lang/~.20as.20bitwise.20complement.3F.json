[
    {
        "content": "<p>Now (Rust 1.0 and later) that <code>~</code> is no longer a sigil for a pointer type, does it seem potentially feasible to make <code>~</code> a bitwise complement operator?</p>",
        "id": 195482044,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588025829
    },
    {
        "content": "<p>So that <code>~0</code> and <code>!0</code> would mean the same thing, rather than forcing users to spell bitwise complement using the latter?</p>",
        "id": 195482071,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588025851
    },
    {
        "content": "<p>It's not obvious to me that having both here is worth it</p>",
        "id": 195482170,
        "sender_full_name": "scottmcm",
        "timestamp": 1588025898
    },
    {
        "content": "<p>It's certainly a minor but non-zero \"surface area\" increase. On the flipside, <code>!</code> as bitwise complement spends some of Rust's \"weirdness budget\".</p>",
        "id": 195482225,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588025945
    },
    {
        "content": "<p>This is one of those places where we have the structural-fix on the error and you just apply it and done</p>",
        "id": 195482228,
        "sender_full_name": "scottmcm",
        "timestamp": 1588025947
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/213817-t-lang/topic/~.20as.20bitwise.20complement.3F/near/195482228\" title=\"#narrow/stream/213817-t-lang/topic/~.20as.20bitwise.20complement.3F/near/195482228\">said</a>:</p>\n<blockquote>\n<p>This is one of those places where we have the structural-fix on the error and you just apply it and done</p>\n</blockquote>\n<p>I'm thinking more about reading code.</p>",
        "id": 195482270,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588025994
    },
    {
        "content": "<p>When I'm reading low-level code, <code>!</code> makes me double-take.</p>",
        "id": 195482342,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588026018
    },
    {
        "content": "<p>Yeah, this is one of those \"given a time machine sure\" things</p>",
        "id": 195482424,
        "sender_full_name": "scottmcm",
        "timestamp": 1588026120
    },
    {
        "content": "<p>Oh, certainly. I'm more wondering if it would be sufficiently non-disruptive to be worth doing now.</p>",
        "id": 195482487,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588026144
    },
    {
        "content": "<p>Cost: both operators exist and mean the same thing on numbers, so there's a slight surface-area increase. Some churn as people who prefer <code>~</code> convert their code.</p>",
        "id": 195482513,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588026175
    },
    {
        "content": "<p>Benefit: less confused developers from other languages, easier to read code.</p>",
        "id": 195482529,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588026187
    },
    {
        "content": "<p>It's a papercut, but a notable one.</p>",
        "id": 195482533,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588026194
    },
    {
        "content": "<p>Feels like it could be a lose-lose as \"if it's non-disruptive enough to be feasible it's not valuable enough to do\"</p>",
        "id": 195482547,
        "sender_full_name": "scottmcm",
        "timestamp": 1588026215
    },
    {
        "content": "<p>I'm not sure I know what you mean by that.</p>",
        "id": 195482609,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588026245
    },
    {
        "content": "<p>I'm not suggesting a deprecation (at most, an opt-in lint with a rustfix).</p>",
        "id": 195482629,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588026264
    },
    {
        "content": "<p>I guess I'm weakly not a fan if it's just there's two ways to do the same thing.  I might be more interested if there were a migration plan, or a new <code>ops</code> trait that enabled new scenarios, or something like that.</p>\n<p>I also feel like having the distinction opens the door for people asking for <code>!a</code> to be able to write <code>a != 0</code> (after an edition change) since <code>!a</code> would no longer be necessary on integers</p>",
        "id": 195483441,
        "sender_full_name": "scottmcm",
        "timestamp": 1588026927
    },
    {
        "content": "<p>I see. Yeah, I'm <em>not</em> suggesting that we repurpose <code>!</code> on integers, or break it.</p>",
        "id": 195483531,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588026985
    },
    {
        "content": "<p>I get what you mean, though. If we just make it an alias, then <code>~</code> will also accept <code>bool</code> types.</p>",
        "id": 195483593,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588027050
    },
    {
        "content": "<p>And if we make it a distinct operator, then it'll be a little surprising that <code>Not</code> and <code>Complement</code> on integers both return bitwise complement.</p>",
        "id": 195483615,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588027075
    },
    {
        "content": "<p>I think the ship has sailed at this point. People have been writing Rust for 5 years and know what <code>!a</code> means, it would be pointless churn to add a new way of doing the same thing.</p>",
        "id": 195485053,
        "sender_full_name": "Amanieu",
        "timestamp": 1588028231
    },
    {
        "content": "<p>Current users have been writing Rust for 5 years. New users encounter Rust every day.</p>",
        "id": 195485496,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588028554
    },
    {
        "content": "<p>The latter would have one less unusual thing to discover and trip over.</p>",
        "id": 195485515,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588028571
    },
    {
        "content": "<p>but making !a into ~a means that !true is now written as ~true, which is a poor side effect</p>",
        "id": 195495891,
        "sender_full_name": "Lokathor",
        "timestamp": 1588040506
    },
    {
        "content": "<p>and preferring ~a as \"normal\" supposes that people have a C background that many Rust users don't even have.</p>",
        "id": 195495941,
        "sender_full_name": "Lokathor",
        "timestamp": 1588040571
    },
    {
        "content": "<p>in terms of weirdness budget, just wanna note that Go uses <code>^1234</code> as the bitwise-NOT operator</p>",
        "id": 195527029,
        "sender_full_name": "kennytm",
        "timestamp": 1588058629
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/213817-t-lang/topic/~.20as.20bitwise.20complement.3F/near/195495891\" title=\"#narrow/stream/213817-t-lang/topic/~.20as.20bitwise.20complement.3F/near/195495891\">said</a>:</p>\n<blockquote>\n<p>but making !a into ~a means that !true is now written as ~true, which is a poor side effect</p>\n</blockquote>\n<p>That wasn't what I was proposing. I was proposing to keep <code>!</code> and continue using it for bool.</p>",
        "id": 195528512,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588059659
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/213817-t-lang/topic/~.20as.20bitwise.20complement.3F/near/195495941\" title=\"#narrow/stream/213817-t-lang/topic/~.20as.20bitwise.20complement.3F/near/195495941\">said</a>:</p>\n<blockquote>\n<p>and preferring ~a as \"normal\" supposes that people have a C background that many Rust users don't even have.</p>\n</blockquote>\n<p>I just did a quick language survey. C, Python, JavaScript, Java, Ruby, C#, Swift, POSIX shell, Julia, PHP, SQL.</p>",
        "id": 195529492,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588060408
    },
    {
        "content": "<p>All of those use ~ as bitwise complement.</p>",
        "id": 195529501,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588060421
    },
    {
        "content": "<p>Well, even if that's the case, <code>!a</code> for \"logical negation\" and separately <code>~a</code> for \"bitwise compliment\" seems like it's burning two operator characters for not much gain, because the logical negation <em>is</em> the bitwise compliment of a 1 bit value, as we all obviously know since we've all used rust for years.</p>",
        "id": 195588790,
        "sender_full_name": "Lokathor",
        "timestamp": 1588090847
    },
    {
        "content": "<p>I don't really buy that, I think separating the two operations is fine.</p>",
        "id": 195595976,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588093812
    },
    {
        "content": "<p>But I tend to agree it's disruption without much value.</p>",
        "id": 195595990,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588093818
    },
    {
        "content": "<p>On the other hand, it's a pretty minor issue.</p>",
        "id": 195596004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588093828
    },
    {
        "content": "<p>We get a very small number of characters to make operators with. That's a factually true aspect of the ascii character set, which is what people type rust with.</p>\n<p>So we have to be careful with how we assign them meaning simply because we don't get too many meanings before turning into Haskell (which many people don't want, but I guess I don't personally mind).</p>",
        "id": 195631210,
        "sender_full_name": "Lokathor",
        "timestamp": 1588110281
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/~.20as.20bitwise.20complement.3F/near/195595976\" title=\"#narrow/stream/213817-t-lang/topic/~.20as.20bitwise.20complement.3F/near/195595976\">said</a>:</p>\n<blockquote>\n<p>I don't really buy that, I think separating the two operations is fine.</p>\n</blockquote>\n<p>Just to elaborate on this: in C already you have <code>!x</code> as distinct from <code>~x</code>, and the same is true in Java and numerous other languages. I don't think there would be much expectation that <code>~x</code> applies to boolean values.</p>",
        "id": 195633177,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588111227
    },
    {
        "content": "<p>I think I was responding, in particular, to <a href=\"#narrow/stream/213817-t-lang/topic/~.20as.20bitwise.20complement.3F/near/195495891\" title=\"#narrow/stream/213817-t-lang/topic/~.20as.20bitwise.20complement.3F/near/195495891\">this statement</a></p>",
        "id": 195633291,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588111295
    },
    {
        "content": "<p>Now that I've been reminded of it, I do vaguely remember the syntax from Java, though I don't think I ever used it myself.</p>\n<p>I mean it's certainly possible to just make both expressions mean the same thing, I guess my point is that you gain <em>nearly</em> nothing at all (new people get used to using <code>!</code> for bit-negate fairly quickly) and it eats a potential operator that we could use on something in the future.</p>\n<p>Such as, just to name one random idea based on the other recent zulip topics: having an operator for numbers that just means \"losslessly convert this from the type it is to the type i need right now and don't make a big deal about it, or compile error if you can't\".</p>",
        "id": 195644496,
        "sender_full_name": "Lokathor",
        "timestamp": 1588118589
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> So, an operator that means <code>.into()</code>?</p>",
        "id": 195653987,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588128446
    },
    {
        "content": "<p>Sure, just one idea that was at hand, i bet a lot of people would like operators depending on what they do.</p>",
        "id": 195654786,
        "sender_full_name": "Lokathor",
        "timestamp": 1588129271
    },
    {
        "content": "<p>I'm on the fence here. I definitely had a very hard time figuring out that <code>!</code> was both logical and bitwise NOT when I first started. Perhaps the documentation is better these days, but I wouldn't mind make the change over an edition boundary, personally.</p>",
        "id": 195793444,
        "sender_full_name": "mark-i-m",
        "timestamp": 1588214678
    },
    {
        "content": "<p>I thought this was cute when I first came across it, but I don't remember how I did. Certainly now there's a diagnostic if you try to use <code>~</code> suggesting <code>!</code>, but that doesn't help people reading who are more familiar with <code>~</code>. Adding an extra operator just for bitwise complement seems a little excessive, though.</p>",
        "id": 195831000,
        "sender_full_name": "varkor",
        "timestamp": 1588249327
    }
]