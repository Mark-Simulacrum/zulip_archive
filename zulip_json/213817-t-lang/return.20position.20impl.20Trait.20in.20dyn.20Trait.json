[
    {
        "content": "<p>just, I don't want to be rude, but on the subject of \"making Rust easier to use\"<br>\nnot gonna get there without considering that.<br>\nyes I realize I am the point of contact for the project that is literally a module that is an acronym. \"vec\" was taken. <span aria-label=\"pensive\" class=\"emoji emoji-1f614\" role=\"img\" title=\"pensive\">:pensive:</span></p>",
        "id": 276539609,
        "sender_full_name": "Jubilee",
        "timestamp": 1648156061
    },
    {
        "content": "<p>\"return position <code>impl Trait</code> in <code>dyn Trait</code>\" :)</p>",
        "id": 276539976,
        "sender_full_name": "bstrie",
        "timestamp": 1648156240
    },
    {
        "content": "<p>... so can we edit the name? I too have just learned what this entire thing is about</p>",
        "id": 276541549,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1648157121
    },
    {
        "content": "<p>\"in\" what exactly</p>",
        "id": 276541552,
        "sender_full_name": "Jubilee",
        "timestamp": 1648157124
    },
    {
        "content": "<p>ugh I can't move the entire thread history.</p>",
        "id": 276541697,
        "sender_full_name": "Jubilee",
        "timestamp": 1648157203
    },
    {
        "content": "<p>There, left a pointer. also see:<br>\n<a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT\">https://rust-lang.zulipchat.com/#narrow/stream/213817-t-lang/topic/RPITIDT</a></p>",
        "id": 276541769,
        "sender_full_name": "Jubilee",
        "timestamp": 1648157244
    },
    {
        "content": "<p>I think I managed to move the full history.</p>",
        "id": 276545112,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648159285
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/return.20position.20impl.20Trait.20in.20dyn.20Trait/near/276545112\">said</a>:</p>\n<blockquote>\n<p>I think I managed to move the full history.</p>\n</blockquote>\n<p>Not quite, no <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276379870\">https://rust-lang.zulipchat.com/#narrow/stream/213817-t-lang/topic/RPITIDT/near/276379870</a></p>",
        "id": 276545312,
        "sender_full_name": "Jules Bertholet",
        "timestamp": 1648159402
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"421518\">@Jules Bertholet</span> How about now?</p>",
        "id": 276545536,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648159505
    },
    {
        "content": "<p>nice.</p>",
        "id": 276557301,
        "sender_full_name": "Jubilee",
        "timestamp": 1648168038
    },
    {
        "content": "<p>By the way, another alternative but which would be orthogonal to the <code>async fn</code> specific case (you'll see why), would be to fully embrace the Continuation-Passing-Style / callback-style / <code>with</code>-scopes styles that <a href=\"https://docs.rs/with_locals\">https://docs.rs/with_locals</a> is a prototype of.</p>\n<p>Basically the gist would be that, when you have:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">method</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Display</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>you could also or instead define:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// dyn-safe!</span>\n<span class=\"w\">    </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">method</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">fn</span> <span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"n\">Display</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">method</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>this would basically stand for:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// dyn-safe!</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">with_method</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">return_</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">own</span><span class=\"w\"> </span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">scope</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;'</span><span class=\"na\">scope</span><span class=\"w\"> </span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Display</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">return_</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">method</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<ul>\n<li>\n<p>where <code>&amp;own</code> is the syntax for \"owning references\", whereby borrowing the backing storage for the value (since it will often be borrowing local/stack storage), and yet offering owned access to the pointee, thence acting as an owning pointer much like <code>Box</code>, with move semantics (it's just that the whole pointer would be lifetime-bounded by the lifetime of that borrow(-of-backing-storage), much like <code>Box&lt;dyn Something + 'lt&gt;</code> is an owned and yet non-<code>'static</code> pointer).<br>\nIt's basically the unsugared and with explicit semantics (with all the advantages that come from that) version of the <code>unsized_fn_params</code> feature.</p>\n</li>\n<li>\n<p>the callback isn't generic in the return type to be <code>dyn</code>-friendly, but this could be an implementation detail. It's easy to see how one could use the state capture by the closure to smuggle any kind of return value out of it, and thus nonetheless offer a <code>&lt;R&gt; â€¦ -&gt; R</code> generic continuation.</p>\n</li>\n</ul>\n<p>At that point the required language feature would be to make calls of such APIs more ergonomic. That is, rather than having to write:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">example</span><span class=\"p\">(</span><span class=\"n\">xs</span>: <span class=\"p\">[</span><span class=\"o\">&amp;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">xs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">with_method</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">own</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">a</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">xs</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">with_method</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">own</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">b</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">xs</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">].</span><span class=\"n\">with_method</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">own</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">c</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"err\">â€¦</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>we'd be able to instead write:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">example</span><span class=\"p\">(</span><span class=\"n\">xs</span>: <span class=\"p\">[</span><span class=\"o\">&amp;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">method</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">method</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">xs</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">].</span><span class=\"n\">method</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>with the restriction that <code>with</code> binding would be lifetime-bound (the <code>'fn</code> lifetime above) to the very scope where they occur, similar to the output of the <code>::core::pin::pin!</code> macro. For those needing longer-lived values, that's when they'd be able to opt-into boxing.</p>\n<p>The other restriction, the one that is saddening but I don't really see a way around it, is that since, AFAIK, there is no way to feature non-generic <code>async</code> continuations (that borrow their inputs) without <code>Box</code>ing, is that we'd still be back to boxing should we need to <code>.await</code> within a <code>with</code> scope.</p>\n<p>That's why I think <code>async fn</code> would still be better served using the <code>VirtualPtr</code> â€”this is what you people have been confusingly naming <code>dynx</code>, even though it features indirection <em>w.r.t.</em> <code>dyn</code>â€” approach with <code>Box</code>es; but at least for simple cases such as a <code>trait</code> with an arbitrary <code>-&gt; impl Trait</code> return type, my suggestion offers a nice way to be:</p>\n<ul>\n<li><code>dyn</code>-friendly</li>\n<li>without heap / <code>Box</code> allocations</li>\n<li>without low-level <code>alloca</code> shenanigans.</li>\n</ul>",
        "id": 276667776,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1648236526
    },
    {
        "content": "<p>On the subject of <code>dyn</code> adapters:  could the <a href=\"https://internals.rust-lang.org/t/is-custom-allocators-the-right-abstraction/13460\"><code>Storage</code> trait proposal</a> be relevant? Maybe you could have just one adapter type, parameterized by storage?</p>",
        "id": 276695054,
        "sender_full_name": "Jules Bertholet",
        "timestamp": 1648254637
    }
]