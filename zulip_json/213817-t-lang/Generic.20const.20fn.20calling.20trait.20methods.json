[
    {
        "content": "<p>Has there been discussion of what calling trait methods in <code>const fn</code> could look like? When reading <a href=\"https://www.reddit.com/r/rust/comments/p2w3xu/sorting_slices_at_compile_time/\">https://www.reddit.com/r/rust/comments/p2w3xu/sorting_slices_at_compile_time/</a> I looked at why <code>[T]::sort_unstable</code> is not const. It’s because sorting needs to call <code>&lt;T as Ord&gt;::cmp</code>. If we want to eventually lift that restriction eventually we’d need some way to annotate a particular <code>impl</code> as <code>const</code> (or maybe each trait method in a given impl can be individually <code>const</code> or not?) but also annotate <code>sort_unstable</code> as <code>const</code> <em>if and only if</em> this particular impl of <code>cmp</code> is <code>const</code>.</p>",
        "id": 249227679,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1628771278
    },
    {
        "content": "<p>I suspect there’s quite a bit of design work there and I understand it might not be the current focus of the lang team, I’m just idly wondering if some ideas are already around</p>",
        "id": 249227820,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1628771350
    },
    {
        "content": "<p>That's <a href=\"https://github.com/rust-lang/rust/issues/67792\">https://github.com/rust-lang/rust/issues/67792</a></p>",
        "id": 249244078,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1628779545
    }
]