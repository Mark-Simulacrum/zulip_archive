[
    {
        "content": "<p>Hi everyone, I work in the Chrome security team. Like everyone else, we have <a href=\"https://www.chromium.org/Home/chromium-security/memory-safety\">a lot of memory safety bugs</a>. As you might imagine we are very keen on Rust and would love to see it used in Chrome. But as you might also imagine, there are concerns about the added complexity of a dual-language codebase in such a huge project, and we have not yet met the bar to get Rust approved. Among other things we've been asked to demonstrate that C++/Rust interop can be almost seamless. Sergey Davydov suggested you might like to hear a bit more about where we're at, so I <a href=\"https://www.chromium.org/Home/chromium-security/memory-safety/rust-and-c-interoperability\">wrote some notes here</a>. At the moment, we don't think we need any language changes, but we might be wrong, because there's still a ton we need to learn. And even though we don't <em>need</em> language changes, it is fair to say that a way of representing <code>std::string</code> (with its occasionally self-referential pointer) would make our lives much easier. Any comments are much appreciated. Meanwhile thanks for all that you do in moving the state of software forward!</p>",
        "id": 207417301,
        "sender_full_name": "Adrian Taylor",
        "timestamp": 1597848517
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"330788\">@Adrian Taylor</span> thanks for this! will read</p>",
        "id": 207418953,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597849254
    },
    {
        "content": "<p>Also, <span class=\"user-mention\" data-user-id=\"215333\">@Florian Gilcher</span> mentioned to me that there was a <a href=\"https://www.youtube.com/watch?v=Ct7jveV7j8g\">talk on C++ interop at RustFest</a>. Mozilla also did quite a bit of work here by improving the bindgen tool and with some other tooling. I'm not sure how much is publicly documented. <span class=\"user-mention\" data-user-id=\"224872\">@Ryan Levick</span>, we also discussed this, do you recall if there are good links?</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"Ct7jveV7j8g\" href=\"https://www.youtube.com/watch?v=Ct7jveV7j8g\"><img src=\"https://i.ytimg.com/vi/Ct7jveV7j8g/default.jpg\"></a></div>",
        "id": 207425467,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597852196
    },
    {
        "content": "<p>Outside of bindgen and CXX which I believe the chromium team is already looking into, I don't know of good tools around this. It's hard to interop between C++ and C++ (i.e., between two different compiler versions). At Microsoft our solution has been historically COM and more recently WinRT (which builds on COM). We're most likely going to pursue a route of interop with C++ through C-style APIs and WinRT. If direct C++ interop is super important, I think investing in the CXX crate would be the current best thing to do.</p>",
        "id": 207426892,
        "sender_full_name": "rylev",
        "timestamp": 1597852876
    },
    {
        "content": "<p>Ah, I hadn't seen that talk. I will take a look. Thanks!</p>",
        "id": 207430176,
        "sender_full_name": "Adrian Taylor",
        "timestamp": 1597854503
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"330788\">@Adrian Taylor</span> Is interaction with Chrome's GC(s) not also an issue? [Disclaimer: we're looking at GC for rust, and one of my PhD students is currently doing GC intern work in V8]</p>",
        "id": 207432659,
        "sender_full_name": "Laurence Tratt",
        "timestamp": 1597855870
    },
    {
        "content": "<p>Yes, though that would be something sufficiently far down the road we haven't thought it through properly yet. We'd love to hear the results of your researches! We don't anticipate using Rust in the renderer process very imminently. The three places where we would _really_ like to use Rust are: (a) parsers where we currently have to spin up a new process for safety; (b) new bits of network stack in the network process; (c) privileged browser-process backends for powerful JavaScript APIs, reached across our Mojo IPC system from the renderer process.</p>",
        "id": 207434944,
        "sender_full_name": "Adrian Taylor",
        "timestamp": 1597856909
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"330788\">@Adrian Taylor</span> happy to talk more about these things -- drop me a mail at <a href=\"mailto:laurie@tratt.net\">laurie@tratt.net</a> perhaps so i don't clog up the channel :)</p>",
        "id": 207439415,
        "sender_full_name": "Laurence Tratt",
        "timestamp": 1597859215
    },
    {
        "content": "<p>(Servo also has GC integration with Firefox’s Spidermonkey)</p>",
        "id": 207439906,
        "sender_full_name": "lqd",
        "timestamp": 1597859433
    },
    {
        "content": "<p>Servo uses a lint implemented using the deprecated rustc plugin interface. This lint is also not completely precise. (<a href=\"https://github.com/servo/servo/issues/12474\">https://github.com/servo/servo/issues/12474</a>) There is <a href=\"https://github.com/withoutboats/shifgrethor\">https://github.com/withoutboats/shifgrethor</a> which is safe. Unfortunately it is unmaintained. Shifgrethor is a complete GC, but I think it would be possible to create a similar interface for another GC.</p>",
        "id": 207440607,
        "sender_full_name": "bjorn3",
        "timestamp": 1597859810
    },
    {
        "content": "<p>ajeffrey’s josephine was an integration attempt that went deeper and tried to use the typesystem to have more guarantees (but fell short on its ergonomics goals because of Drop IIRC) stephen dolan’s caml-oxide bindings also tried to be safe wrt OCaml’s GC IIRC (I’m not sure it was successful in doing so, or whether it was finished)</p>",
        "id": 207444138,
        "sender_full_name": "lqd",
        "timestamp": 1597861714
    },
    {
        "content": "<p>I assume the use of <code>Pin</code> for representing <code>std::string</code> has already been investigated?</p>",
        "id": 207446532,
        "sender_full_name": "Shnatsel",
        "timestamp": 1597862929
    },
    {
        "content": "<p>I'd say 'considered' rather than 'investigated'. So long as we can only represent <code>std::string</code> on the heap, then cxx's <code>UniquePtr</code> or <code>CxxString</code> is perfectly good. In some contexts we'd like to go further, e.g. passing <code>std::string</code> by value between Rust and C++, but I don't believe <code>Pin</code> can help there - Rust types fundamentally have to be movable if we want to represent them by value. We have not properly thought through how we represent <code>std::string</code> inside some other C++ struct, and it's conceivable there could be a role for <code>Pin</code> there, though again I think our only realistic option is to hold that struct by a <code>UniquePtr</code> (which is fine except that it means we have to autogenerate accessors for field access. Probably. It all gets a bit hazy here.)</p>",
        "id": 207452563,
        "sender_full_name": "Adrian Taylor",
        "timestamp": 1597865979
    },
    {
        "content": "<p>I feel for you for all the... <em>fun</em>... <a href=\"https://news.ycombinator.com/item?id=24211691\">comments on Hacker News</a>.</p>",
        "id": 207456391,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1597868014
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/213817-t-lang/topic/Chromium.2C.20C.2B.2B.20and.20Rust/near/207456391\">said</a>:</p>\n<blockquote>\n<p>I feel for you for all the... <em>fun</em>... <a href=\"https://news.ycombinator.com/item?id=24211691\">comments on Hacker News</a>.</p>\n</blockquote>\n<p>And even The Register has an article about it. I had said to our PR person, \"I'm posting this, but don't worry, it's very technical, nobody in the media will care\"...! Oops <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 207469631,
        "sender_full_name": "Adrian Taylor",
        "timestamp": 1597876715
    },
    {
        "content": "<p>Everyone loves Rust <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>",
        "id": 207479142,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1597885156
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"330788\">@Adrian Taylor</span> well, at least it has <a href=\"https://www.theregister.com/2020/08/18/rust_new_foundation/\">a more readable title than other the register articles</a> <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 207498830,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1597911365
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330788\">Adrian Taylor</span> <a href=\"#narrow/stream/213817-t-lang/topic/Chromium.2C.20C.2B.2B.20and.20Rust/near/207452563\">said</a>:</p>\n<blockquote>\n<p>I'd say 'considered' rather than 'investigated'. So long as we can only represent <code>std::string</code> on the heap, then cxx's <code>UniquePtr</code> or <code>CxxString</code> is perfectly good. In some contexts we'd like to go further, e.g. passing <code>std::string</code> by value between Rust and C++, but I don't believe <code>Pin</code> can help there - Rust types fundamentally have to be movable if we want to represent them by value. We have not properly thought through how we represent <code>std::string</code> inside some other C++ struct, and it's conceivable there could be a role for <code>Pin</code> there, though again I think our only realistic option is to hold that struct by a <code>UniquePtr</code> (which is fine except that it means we have to autogenerate accessors for field access. Probably. It all gets a bit hazy here.)</p>\n</blockquote>\n<p>this makes me wonder, how does C++ handle passing self-referential std::string by value?</p>",
        "id": 207721579,
        "sender_full_name": "RalfJ",
        "timestamp": 1598098169
    },
    {
        "content": "<p>is \"the std::string\" problem written up somewhere? this is the first time I hear it is self-referential</p>",
        "id": 207721588,
        "sender_full_name": "RalfJ",
        "timestamp": 1598098189
    },
    {
        "content": "<p>In C++ self-referential types are handled by the copy/move-constructor patching the internal references I think. This doesn't work in Rust, as move==memcpy.</p>",
        "id": 207724706,
        "sender_full_name": "bjorn3",
        "timestamp": 1598103108
    },
    {
        "content": "<p>oh right I forgot about copy constructors... <em>oops</em></p>",
        "id": 207726208,
        "sender_full_name": "RalfJ",
        "timestamp": 1598105538
    },
    {
        "content": "<p>I guess this means the conversion would have to happen as the first thing in the FFI layer, in a place where we know Rust will not induce any further moves (and this does require some language guarantees I think, to guarantee absence of moves)</p>",
        "id": 207726282,
        "sender_full_name": "RalfJ",
        "timestamp": 1598105673
    }
]