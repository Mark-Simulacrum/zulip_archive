[
    {
        "content": "<p>In the 12-22 meeting, we discussed whether <code>~const</code> could just be reduced to <code>const</code> without the tilde to make it easier to write.</p>\n<p>AFAIK, there might be some problems: it makes it harder to write \"always const\" bounds. Some use case for \"always\" const bounds (could be useful):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">do_something_with_hashable_thing</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">const</span><span class=\"w\"> </span><span class=\"nb\">Default</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">Hash</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">thing</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">default_hash</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">const</span><span class=\"w\"> </span><span class=\"nb\">Default</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">Hash</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u64</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* ... */</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">default_hash</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">default_hash</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cm\">/* do something */</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I think we could make <code>const Trait</code> mean \"const-if-const\" and figure out how to allow \"always const\" bounds later. But it could interfere with future extensions: if <code>const fn</code> pointers become a thing, it is natural to denote them as <code>const fn(ARGS) -&gt; RET</code>, if we decided that <code>const Trait</code> means \"const-if-const\" then <code>const fn</code> pointers would be inconsistent with this.</p>",
        "id": 266498740,
        "sender_full_name": "fee1-dead",
        "timestamp": 1640950775
    },
    {
        "content": "<p>I think const fn pointers should behave like const trait bounds, so const-if-const. Any syntax we come up with should definitely be in sync between the two</p>",
        "id": 266507980,
        "sender_full_name": "oli",
        "timestamp": 1640963006
    },
    {
        "content": "<p>I think const-if-const fn pointers are the only ones that really make sense, unless we have some sort of purity concept that runtime could rely on. You can't move a const(always) fn pointer from runtime to compile-time anyway</p>",
        "id": 266508059,
        "sender_full_name": "oli",
        "timestamp": 1640963090
    },
    {
        "content": "<p>Always const trait bounds can be useful for non-const fns as well. Hypothetically we could have:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">const</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"nb\">Default</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/*do something*/</span><span class=\"w\"> </span><span class=\"n\">T</span>::<span class=\"n\">default</span><span class=\"p\">().</span><span class=\"n\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>when const block is allowed to refer to params non-trivially.</p>",
        "id": 267271565,
        "sender_full_name": "Gary Guo",
        "timestamp": 1641611855
    },
    {
        "content": "<p>Yea, that's the main use case, the question is, is it frequent enough to warrant making the syntax for const-if-const something more complicated?</p>",
        "id": 267306652,
        "sender_full_name": "oli",
        "timestamp": 1641663695
    }
]