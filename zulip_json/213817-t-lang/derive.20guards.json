[
    {
        "content": "<p>I have to admit, <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span>, that the more I think about your <code>impl</code> syntax idea, the more I kind of like it</p>",
        "id": 213467856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602786480
    },
    {
        "content": "<p>And this does feel like an \"pretty frequent irritant\" for me</p>",
        "id": 213467936,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602786498
    },
    {
        "content": "<p>not sure how representative my own experience is :) but I'm guessing others encounter it too</p>",
        "id": 213468039,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602786545
    },
    {
        "content": "<p>I am personally a big fan of <code>#[derive] impl Foo for Bar {}</code> and that can modify the impl and gets passed the tokens for Bar. It might not be feasible to implement though.</p>",
        "id": 213470141,
        "sender_full_name": "simulacrum",
        "timestamp": 1602787541
    },
    {
        "content": "<p>I am not feeling enthusiastic about the impl headers inside the derive() parens, feels sort of ugly. I guess maybe it won't be too common?</p>",
        "id": 213470233,
        "sender_full_name": "simulacrum",
        "timestamp": 1602787580
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I don't have the context here; what was the <code>impl</code> syntax idea?</p>",
        "id": 213470273,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602787600
    },
    {
        "content": "<p><code>#[derive(impl&lt;T&gt; Clone)] struct Bar&lt;T&gt; { .. }</code></p>",
        "id": 213470329,
        "sender_full_name": "simulacrum",
        "timestamp": 1602787627
    },
    {
        "content": "<p>avoiding the <code>T: Clone</code> bound that would normally get inserted</p>",
        "id": 213470362,
        "sender_full_name": "simulacrum",
        "timestamp": 1602787639
    },
    {
        "content": "<p>(potentially w/o the impl piece of that, syntax is of course bikeshed friendly)</p>",
        "id": 213470381,
        "sender_full_name": "simulacrum",
        "timestamp": 1602787654
    },
    {
        "content": "<p>Ah, I see.</p>",
        "id": 213470425,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602787677
    },
    {
        "content": "<p><a href=\"https://paper.dropbox.com/doc/Backlog-bonanza--A9gb1xQC11ttShtM8qeWdV9fAg-2IcACiM0KX1up1thIeiWh\">https://paper.dropbox.com/doc/Backlog-bonanza--A9gb1xQC11ttShtM8qeWdV9fAg-2IcACiM0KX1up1thIeiWh</a></p>",
        "id": 213470492,
        "sender_full_name": "simulacrum",
        "timestamp": 1602787694
    },
    {
        "content": "<p>there was some discussion as part of bonanza yesterday; <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> I believe was proposing perhaps merging that RFC or at least letting experimentation proceed. I think we didn't end up with a consensus point though</p>",
        "id": 213470558,
        "sender_full_name": "simulacrum",
        "timestamp": 1602787733
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I don't know, the <code>#[derive]</code> sugar feels like a \"lot more typing\" --</p>",
        "id": 213472480,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602788496
    },
    {
        "content": "<p>otoh packing a ton of info into that <code>#[derive]</code> might be a lot</p>",
        "id": 213472501,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602788507
    },
    {
        "content": "<p>right, yes, that's my worry</p>",
        "id": 213472522,
        "sender_full_name": "simulacrum",
        "timestamp": 1602788519
    },
    {
        "content": "<p>sometimes when there are a lot of <code>#[.]</code> attributes I feel kind of overwhelmed</p>",
        "id": 213472527,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602788520
    },
    {
        "content": "<p>I guess I stand by my conclusion from backlog bonanza anyway</p>",
        "id": 213472583,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602788528
    },
    {
        "content": "<p>that \"I'd like to see this problem pursued but it takes somebody dedicated\"</p>",
        "id": 213472606,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602788538
    },
    {
        "content": "<p>The idea of <code>#[derive] impl X for Y</code> blocks seems interesting; it has the advantage of not hanging an ever-increasing number of things off the struct definition.</p>",
        "id": 213472667,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602788565
    },
    {
        "content": "<p>I think that if there's a derive that's not doing \"the totally normal thing\" it's fair to write a little more than a little less</p>",
        "id": 213472698,
        "sender_full_name": "Lokathor",
        "timestamp": 1602788574
    },
    {
        "content": "<p>yes. it just requires a non-trivial extension to procedural macros</p>",
        "id": 213472708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602788578
    },
    {
        "content": "<p>I'm a fan of the idea of declarations that don't have to be read \"from the middle\".</p>",
        "id": 213472709,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602788578
    },
    {
        "content": "<p>When you write <code>#[derive(...)] #[repr(...)] #[etc] struct Foo { ... </code>, that's a lot of preface before you know what struct you're talking about.</p>",
        "id": 213472784,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602788611
    },
    {
        "content": "<p>We've talked before about \"standalone\" deriving declarations.</p>",
        "id": 213472818,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602788622
    },
    {
        "content": "<p>I'm interested in that approach but (a) it feels like a significant verbosity cliff compared with <code>derive(Clone)</code> and (b) I don't really have a good feel for if/how we can implement the procedural macro expansion required. Probably that's another good signal that this needs a project group to plan out, preferably one which includes someone familiar with the implementation details of the procedural macro engine.</p>",
        "id": 213474056,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1602789218
    },
    {
        "content": "<p>to (a), <code>derive(Clone)</code> literally can't produce the correct result in these cases.</p>",
        "id": 213474174,
        "sender_full_name": "Lokathor",
        "timestamp": 1602789268
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> sorry, to clarify I'm referring to there being a large \"cliff\" in ergonomics if the alternative to <code>derive(Clone)</code> is <code>#[derive] impl&lt;....&gt; Clone for ... { ... }</code>, as compared with <code>derive(impl&lt;...&gt; Clone)</code> which is comparatively closer to the original</p>",
        "id": 213474316,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1602789340
    },
    {
        "content": "<p>I wonder if it'd be an ergonomic improvement to allow something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">derive</span><span class=\"p\">(</span><span class=\"nb\">Clone</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.)</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 213476795,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602790507
    },
    {
        "content": "<p>So that the <code>struct Foo</code> can come <em>first</em> and give the sentence a noun. ;)</p>",
        "id": 213476849,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602790534
    },
    {
        "content": "<p>(Endlessly bikesheddable, of course.)</p>",
        "id": 213476983,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602790592
    },
    {
        "content": "<p>I'd love to have a way to do a bunch of this in \"real\" syntax rather than attributes and making people write proc macros.</p>\n<p>I have no idea how it should actually work, but can see a blurry variadic-generic map reduce kind of thing...</p>",
        "id": 213496101,
        "sender_full_name": "scottmcm",
        "timestamp": 1602801040
    },
    {
        "content": "<p>Looking closer to practicality, I wonder if a survey of where the default bounds are inappropriate could find a narrower change.</p>\n<p>To me, what I tend to think of is things like where I'm holding <code>Arc&lt;T&gt;</code> so don't need <code>T: Clone</code> for <code>Self: Clone</code>, or holding a <code>Vec&lt;T&gt;</code> so don't need <code>T: Default</code> for <code>Self: Default</code>.  Is that kind of thing the usual or rare?  If it's particularly common, is there a simpler change that could happen to improve it, without giving up the semver stability that's why we didn't look at the field types to begin with?</p>",
        "id": 213496493,
        "sender_full_name": "scottmcm",
        "timestamp": 1602801361
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 213559281,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1602854757
    },
    {
        "content": "<p>For what is worth, although it would not cover all the use-cases, having a smarter expansion of <code>#[derive()]</code>s would be another neat thing to do</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Clone, Copy)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Ptr</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">inner</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Clone</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Ptr</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span>: <span class=\"nb\">Clone</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Copy</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Ptr</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span>: <span class=\"nb\">Copy</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>Of course, that'd require <code>trivial_bounds</code> to be usable, but imho that's just the more reason to enable <code>trivial_bounds</code> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<hr>\n<p>Also, that's currently the only way to get <code>structural_eq</code> for such cases:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(PartialEq, Eq, Clone, Copy)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">__Ptr</span><span class=\"o\">&lt;</span><span class=\"n\">Inner</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">inner</span>: <span class=\"nc\">Inner</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">Ptr</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">__Ptr</span><span class=\"o\">&lt;*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>(cc <span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span>'s aside in <a href=\"https://rust-tutorials.github.io/learn-gba/volatile.html#abstracting-volatile\">https://rust-tutorials.github.io/learn-gba/volatile.html#abstracting-volatile</a>)</p>",
        "id": 213559343,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1602854768
    },
    {
        "content": "<p>Doesn't that break encapsulation though? You would need to know private types in order to determine if something is cloneable (even from a user perspective). I think my favorite solution would be a smarter proc macro that you can put on an impl block or had access to some type info, if that's even possible.</p>",
        "id": 213590215,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1602869509
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span> That comes up periodically -- such as <a href=\"https://users.rust-lang.org/t/cannot-call-default-default-on-map-of-non-default-value-type/50050/6?u=scottmcm\">https://users.rust-lang.org/t/cannot-call-default-default-on-map-of-non-default-value-type/50050/6?u=scottmcm</a> a few days ago.  It's hard to weigh the semver consequences.</p>",
        "id": 213593145,
        "sender_full_name": "scottmcm",
        "timestamp": 1602870928
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127859\">Taylor Cramer</span> <a href=\"#narrow/stream/213817-t-lang/topic/derive.20guards/near/213474056\">said</a>:</p>\n<blockquote>\n<p>Probably that's another good signal that this needs a project group to plan out, preferably one which includes someone familiar with the implementation details of the procedural macro engine.</p>\n</blockquote>\n<p>Yeah I guess that's right. I also agree with you though, <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span>, that I feel like if the \"step up\" from <code>#[derive(Clone)]</code> is that I have to go make an impl, I'll be annoyed.</p>",
        "id": 213612181,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602881237
    },
    {
        "content": "<p><code>#[derive(impl&lt;T&gt; Clone)]</code> would annoy me less</p>",
        "id": 213612208,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602881260
    },
    {
        "content": "<p>I still like <code>#[derive&lt;T&gt;(Clone)]</code>, which also extend well to multiple traits at once</p>",
        "id": 213622024,
        "sender_full_name": "cuviper",
        "timestamp": 1602888328
    },
    {
        "content": "<p>Although I think when I mentioned that before, the idea was to list the parameters that <em>should</em> have matching <code>T: Trait</code> constraints, so <code>#[derive&lt;&gt;(Clone)]</code> would be the way to have no constraints</p>",
        "id": 213622157,
        "sender_full_name": "cuviper",
        "timestamp": 1602888440
    },
    {
        "content": "<p><code>#[derive&lt;_&gt;(Clone)]</code> maybe?</p>",
        "id": 213622278,
        "sender_full_name": "Jubilee",
        "timestamp": 1602888554
    },
    {
        "content": "<p>Sortof-related: where are we standing on implied bounds work these days?  This seems like another of the things that currently encourages putting bounds on impls instead of types.  (It's not clear to me that we actually want to change that convention, but it came to mind.)</p>",
        "id": 213625087,
        "sender_full_name": "scottmcm",
        "timestamp": 1602891981
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> I think the only implementation is still the one in chalk</p>",
        "id": 213631501,
        "sender_full_name": "tmandry",
        "timestamp": 1602902053
    },
    {
        "content": "<p>Ah, thanks.  Postponed waiting on the new implementation sounds reasonable.</p>",
        "id": 213631580,
        "sender_full_name": "scottmcm",
        "timestamp": 1602902272
    },
    {
        "content": "<p>Idea: <code>with</code> clause to put things that normally preface an item after it. e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">derive</span><span class=\"p\">(</span><span class=\"nb\">Clone</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 213638180,
        "sender_full_name": "isHavvy",
        "timestamp": 1602916305
    },
    {
        "content": "<p>Just throwing this out: Haskell has a <code>deriving</code> clause roughly like this:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kr\">data</span> <span class=\"kt\">Foo</span> <span class=\"ow\">=</span> <span class=\"kt\">Foo</span> <span class=\"kt\">Int</span>\n    <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Eq</span><span class=\"p\">,</span> <span class=\"kt\">Ord</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 213664077,
        "sender_full_name": "Noah Lev",
        "timestamp": 1602958874
    },
    {
        "content": "<p>So we <em>could</em> have:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">val</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"n\">derive</span><span class=\"p\">(</span><span class=\"nb\">Clone</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>Although I actually prefer the current derive syntax <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 213664156,
        "sender_full_name": "Noah Lev",
        "timestamp": 1602958964
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> <a href=\"#narrow/stream/213817-t-lang/topic/derive.20guards/near/213622024\">said</a>:</p>\n<blockquote>\n<p>I still like <code>#[derive&lt;T&gt;(Clone)]</code>, which also extend well to multiple traits at once</p>\n</blockquote>\n<p>interesting</p>",
        "id": 213839587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603138768
    }
]