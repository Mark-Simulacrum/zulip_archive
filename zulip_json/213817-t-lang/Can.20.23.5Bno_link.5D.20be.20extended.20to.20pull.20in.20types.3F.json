[
    {
        "content": "<p>There's a <code>#[no_link]</code> attribute that you can put on an <code>extern crate foo;</code> statement to declare that you don't want to link against an extern crate.</p>\n<p>This is, according to the notes in the reference, intended so that you can use macros from that crate. However, I wonder if we can expand the attribute so that it also pulls in types from that crate? They're just aliases after all, you're not linking in any actual code by using them.</p>\n<p>Playground example of the desired possible usage: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=bc74ec6092c6ab838922555a773044d9\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=bc74ec6092c6ab838922555a773044d9\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=bc74ec6092c6ab838922555a773044d9</a></p>",
        "id": 186023121,
        "sender_full_name": "Lokathor",
        "timestamp": 1579404307
    },
    {
        "content": "<p>(Out of interest, is there a reason this is an attribute, and not default behavior?)</p>",
        "id": 186023407,
        "sender_full_name": "simulacrum",
        "timestamp": 1579404912
    },
    {
        "content": "<p>other than backward compatibility, you mean? for example, linking a crate can pull in #[no_mangle] symbols or native libraries that other parts of the application need, without that connection being apparent to rustc</p>",
        "id": 186033423,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1579426443
    },
    {
        "content": "<p>Hm, I guess it does depend, sometimes you want linkage and sometimes you don't.</p>",
        "id": 186039445,
        "sender_full_name": "simulacrum",
        "timestamp": 1579438535
    },
    {
        "content": "<p>Yeah. Arguably the default should have been different but, you know, backwards compatibility</p>",
        "id": 186043169,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1579445686
    },
    {
        "content": "<p>Notice that <code>extern crate foo;</code> does not link anything</p>",
        "id": 186098301,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579524297
    },
    {
        "content": "<p>You have to actually go and use something from the <code>foo</code> crate</p>",
        "id": 186098312,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579524307
    },
    {
        "content": "<p>since otherwise the crate is marked as \"unused\" and it will be removed early on</p>",
        "id": 186098344,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579524339
    },
    {
        "content": "<p>(e.g. <code>extern crate jemallocator_global;</code> does not override the <code>#[global_allocator]</code> for this reason)</p>",
        "id": 186098409,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579524364
    },
    {
        "content": "<p>(that crate only contains a <code>#[global_allocator]</code> declaration)</p>",
        "id": 186098421,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579524377
    },
    {
        "content": "<p>Hm, I guess it does depend, sometimes you want linkage and sometimes you don't.</p>",
        "id": 186147922,
        "sender_full_name": "simulacrum",
        "timestamp": 1579574230
    },
    {
        "content": "<p>usually, when the crate you have as a dependency contains something \"global\", like builtins, <code>#[global_allocator]</code>, <code>panic</code>-related functionality, etc. you want it linked</p>",
        "id": 186269978,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579686229
    }
]