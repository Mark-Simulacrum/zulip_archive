[
    {
        "content": "<p>This might potentially be too invasive for an edition, but: how feasible might it be to make <code>,*</code> and <code>,+</code> and similar allow an optional trailing comma automatically, in a new edition?</p>",
        "id": 222132301,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610143469
    },
    {
        "content": "<p>How much breakage does that seem likely to produce?</p>",
        "id": 222132311,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610143480
    },
    {
        "content": "<p>what's the alternative for when a macro author wants the original behavior?</p>",
        "id": 222132487,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610143573
    },
    {
        "content": "<p>Does <code>,*,?</code> work? Because that seems like the easiest place to start</p>",
        "id": 222132560,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610143631
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> No, it doesn't. If you want to allow an optional trailing comma, you need something like <code>$(...what you have...),* $(,)?</code></p>",
        "id": 222133203,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610144117
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/213817-t-lang/topic/Editions.20and.20trailing.20commas.20in.20macros.3F/near/222132487\">said</a>:</p>\n<blockquote>\n<p>what's the alternative for when a macro author wants the original behavior?</p>\n</blockquote>\n<p>You could get that by writing <code>$(, $foo:expr)*</code> instead, but under what circumstances would you <em>want</em> that?</p>",
        "id": 222133539,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610144238
    },
    {
        "content": "<p>Purely anecdata, but I’ve never not wanted trailing commas, however the addition of <code>?</code> has made this easy to implement, and just recently I wanted to enforce having a trailing semi-colons to emulate let statements E.g. <code>($(let $name:ident = $exp:expr);+ ;)</code> Im not sure how you’d do that with that new behaviour without also allowing <code>;;</code> at the end.</p>",
        "id": 222133654,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1610144306
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219696\">@XAMPPRocky</span> Enforcing trailing semicolons would be easy: <code>$(let $name: ident = $exp:expr;)+</code></p>",
        "id": 222133709,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610144365
    },
    {
        "content": "<p>Just move the <code>;</code> inside the repetition parentheses.</p>",
        "id": 222133723,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610144373
    },
    {
        "content": "<p>Ah true</p>",
        "id": 222133732,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1610144380
    },
    {
        "content": "<p>It'd be harder to have a syntax for \"enforce <em>absence</em> of trailing separator\".</p>",
        "id": 222133748,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610144393
    },
    {
        "content": "<p>But I don't mind that being harder. :)</p>",
        "id": 222133760,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610144401
    },
    {
        "content": "<p>Feels unfortunate that doing this would immediately allow an <em>extra</em> comma in all the macros that support it explicitly, and there'd be no semver way to remove that support.</p>",
        "id": 222153887,
        "sender_full_name": "scottmcm",
        "timestamp": 1610167916
    },
    {
        "content": "<p>Maybe better as something for the \"macros 2.0\" list, like that previous conversation about keywords.</p>",
        "id": 222153927,
        "sender_full_name": "scottmcm",
        "timestamp": 1610167951
    },
    {
        "content": "<p>I think there is good reason to have direct support for separator characters with no option for trailing separator, for example I probably don't want <code>a + b + c +</code> to work. Compared to the mandatory trailing separator case which is fairly easy to get, you have to go through some messy encoding to get the effect of <code>$(e),*</code> if it wasn't built in</p>",
        "id": 222154283,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610168563
    },
    {
        "content": "<p>Also, if it's not the last thing in the parse, too many <code>,?</code> may result in a lot of backtracking during the parse</p>",
        "id": 222154364,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610168671
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> Ah, very good point. <code>+</code> is a convincing case for why trailing separators should not always be allowed.</p>",
        "id": 222179350,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610212739
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> That doesn’t work though right? I just checked and you can’t seem to be able to write <code>$(foo)++</code> and have it work like that.</p>",
        "id": 222195371,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1610235722
    },
    {
        "content": "<p>that's possible. Ideally the separator should be another pattern instead of just a token</p>",
        "id": 222195400,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610235785
    },
    {
        "content": "<p>Right but to allow that, that would probably require a new syntax, and if that’s the case you could have it account for “allow this pattern to be trailing or not”</p>",
        "id": 222195518,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1610236015
    },
    {
        "content": "<p>that works for me, as long as all options are available (mandatory / optional / prohibited final separator)</p>",
        "id": 222195597,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610236192
    },
    {
        "content": "<p>how about writing <code>$($var,)*</code> for mandatory trailing separator, <code>$($var)[,]*</code> for optional trailing separator (<code>[...]</code> like in <a href=\"https://en.wikipedia.org/wiki/Augmented_Backus%E2%80%93Naur_form#Optional_sequence\">ABNF</a>), and <code>$($var),*</code> for no trailing separator?</p>\n<p>This would allow later extension to having multiple tokens/token-trees as separators:</p>\n<p><code>$($var)[@@]*</code> would have <code>@@</code> as the separator with an optional trailing separator.</p>\n<p><code>$($var)(@@)*</code> would have <code>@@</code> as the separator with no trailing separator. <code>$($var),*</code> would be syntax sugar for <code>$($var)(,)*</code>.</p>\n<p><code>$($var @@)*</code> would have <code>@@</code> as the separator with a required trailing separator.</p>",
        "id": 222203828,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1610250142
    },
    {
        "content": "<p>that would make it work in all of the 2015, 2018, and 2021 editions without changing between them</p>",
        "id": 222203893,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1610250272
    }
]