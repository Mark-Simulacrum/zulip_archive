[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256759\">@boats</span> Feel free to redirect to the RFC thread, but I feel like I must be missing something obvious. Is there a reason we prefer to simultaneously poll all the fields instead of starting with one, waiting for it to return ready, then doing the next one?</p>\n<p>My intuition says that it's \"faster\" to do what the RFC proposes, but I don't see discussion of this alternative in it.</p>",
        "id": 204199028,
        "sender_full_name": "simulacrum",
        "timestamp": 1594988545
    },
    {
        "content": "<p>can't do the alternative statelessly</p>",
        "id": 204199082,
        "sender_full_name": "boats",
        "timestamp": 1594988585
    },
    {
        "content": "<p>Ah, right. I guess it would just add N states to the async context, but wouldn't be generally as easy (or possible?) in manual impls.</p>",
        "id": 204199460,
        "sender_full_name": "simulacrum",
        "timestamp": 1594988822
    },
    {
        "content": "<p>the state cant be stored in the async context because we need to virtually dispatch poll_drop_ready for trait objects</p>",
        "id": 204199589,
        "sender_full_name": "boats",
        "timestamp": 1594988889
    },
    {
        "content": "<p>Hm, yes. This RFC would also expand all vtables by a word, right?</p>",
        "id": 204199818,
        "sender_full_name": "simulacrum",
        "timestamp": 1594989035
    },
    {
        "content": "<p>And do we want a needs_async_drop for vec and others so we can avoid 2x as many calls to dtors pre-optimization (and  potentially post, for trait objects)? I guess we can zero the word in the vtable if the impl is a no-op to avoid call overhead or something like that.</p>",
        "id": 204200214,
        "sender_full_name": "simulacrum",
        "timestamp": 1594989308
    },
    {
        "content": "<p>yea that would make sense</p>",
        "id": 204200569,
        "sender_full_name": "boats",
        "timestamp": 1594989550
    },
    {
        "content": "<p>Oh, actually, I guess it's not as big a cost as I was thinking since Vec and friends would only do this from <em>their</em> async drop methods, we'd not add anything to the \"common case\" of normal Drop being called, right?</p>",
        "id": 204200943,
        "sender_full_name": "simulacrum",
        "timestamp": 1594989776
    },
    {
        "content": "<p>im not sure what you mean</p>",
        "id": 204201752,
        "sender_full_name": "boats",
        "timestamp": 1594990366
    },
    {
        "content": "<p>when you drop a vec under this RFC, it would first call poll_drop_ready on the vec until it returns ready, and then call drop on the vec</p>",
        "id": 204201802,
        "sender_full_name": "boats",
        "timestamp": 1594990397
    },
    {
        "content": "<p>maybe theres a way to combine these into a single function</p>",
        "id": 204201825,
        "sender_full_name": "boats",
        "timestamp": 1594990414
    },
    {
        "content": "<p>I mean that dropping in a non-async context doesn't change at all</p>",
        "id": 204202077,
        "sender_full_name": "simulacrum",
        "timestamp": 1594990541
    },
    {
        "content": "<p>I don't think you gain anything from combining if it's in a \"known type\", though with a trait object you might -- something like drop_async that will internally know the type it is dropping (and so avoid dynamic dispatch) but I don't know that it's all that much of a win</p>",
        "id": 204202230,
        "sender_full_name": "simulacrum",
        "timestamp": 1594990635
    },
    {
        "content": "<p>i think it would just mean 1 less virtual call by calling drop from inside drop_async</p>",
        "id": 204202993,
        "sender_full_name": "boats",
        "timestamp": 1594991043
    },
    {
        "content": "<p>true. Though -- in theory -- we could also look at replacing the existing drop in vtables with a <code>maybe_async_drop(is_async_context: bool) -&gt; Poll&lt;()&gt;</code></p>",
        "id": 204204066,
        "sender_full_name": "simulacrum",
        "timestamp": 1594991715
    },
    {
        "content": "<p>to avoid growing vtables etc</p>",
        "id": 204204079,
        "sender_full_name": "simulacrum",
        "timestamp": 1594991734
    },
    {
        "content": "<p>Are we expecting RawWakerVtable to optionally gain an async drop field?</p>",
        "id": 204204168,
        "sender_full_name": "simulacrum",
        "timestamp": 1594991770
    },
    {
        "content": "<p>One question that I have about \"async drop\" is the interaction with <a href=\"https://docs.rs/async-task/3.0.0/async_task/struct.JoinHandle.html#method.cancel\"><code>async_task::JoinHandle::cancel</code></a> -- currently cancellation is implemented as \"stop polling the task on the executor\". But would there be a way to ensure async drop is called on cancel?</p>",
        "id": 204214765,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1594997310
    },
    {
        "content": "<p>Hmm, perhaps what I'm wondering is if there's an async equivalent to <code>drop(my_type)</code> to force the async Drop destructor to run? I think we'd need something like that to ensure async drop is run on task cancellation?</p>",
        "id": 204215080,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1594997479
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211722\">@Yoshua Wuyts</span> I think the answer is yes and is in the RFC? You'd have <code>async fn async_drop(v: T) {  }</code> which would ensure the async drop glue runs for T</p>",
        "id": 204215211,
        "sender_full_name": "simulacrum",
        "timestamp": 1594997534
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> ahh, yeah that would be this section right? <a href=\"https://github.com/withoutboats/rfcs/blob/poll-drop-ready/text/0000-poll-drop-ready.md#guarantees-about-when-poll_drop_ready-is-called\">https://github.com/withoutboats/rfcs/blob/poll-drop-ready/text/0000-poll-drop-ready.md#guarantees-about-when-poll_drop_ready-is-called</a></p>",
        "id": 204215296,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1594997583
    },
    {
        "content": "<p>that too, but I meant the first code example in the guide section <a href=\"https://github.com/withoutboats/rfcs/blob/poll-drop-ready/text/0000-poll-drop-ready.md#guide-level-explanation\">https://github.com/withoutboats/rfcs/blob/poll-drop-ready/text/0000-poll-drop-ready.md#guide-level-explanation</a></p>",
        "id": 204215393,
        "sender_full_name": "simulacrum",
        "timestamp": 1594997631
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> ah I missed that -- that's perfect; thanks!</p>",
        "id": 204215549,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1594997704
    }
]