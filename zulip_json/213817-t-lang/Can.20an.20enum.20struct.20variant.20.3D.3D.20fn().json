[
    {
        "content": "<p>Would it be possible for struct variants to also be treated as function pointers <code>fn() -&gt; the enum</code> when used without filling in the items of the variant?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Bar</span><span class=\"p\">(</span><span class=\"kt\">usize</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Baz</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">a</span>: <span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kt\">u8</span> <span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">bar</span>: <span class=\"nc\">fn</span><span class=\"p\">(</span><span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Foo</span>::<span class=\"n\">Bar</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// Ok</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">baz</span>: <span class=\"nc\">fn</span><span class=\"p\">(</span><span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Foo</span>::<span class=\"n\">Baz</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// not Ok</span>\n</code></pre></div>",
        "id": 267298279,
        "sender_full_name": "DevinR528",
        "timestamp": 1641651857
    },
    {
        "content": "<p>I'd imagine not, because   what order would the fields appear as parameters in the function? Struct fields are not order sensitive, like tuple fields are.</p>",
        "id": 267298363,
        "sender_full_name": "Connor Horman",
        "timestamp": 1641652043
    },
    {
        "content": "<p>Oh right so they can be reordered, that makes sense <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> dang</p>",
        "id": 267298372,
        "sender_full_name": "DevinR528",
        "timestamp": 1641652078
    },
    {
        "content": "<p>(Not only that, but the upstream crate is free to reorder them at will, possibly even in a patch version).</p>",
        "id": 267298420,
        "sender_full_name": "Connor Horman",
        "timestamp": 1641652115
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 267298496,
        "sender_full_name": "DevinR528",
        "timestamp": 1641652242
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243877\">@DevinR528</span> If we ever add anonymous named-field structs, like <code>{ name: value }</code>, we could make struct variants accept those for initialization.</p>",
        "id": 267317507,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1641678172
    },
    {
        "content": "<p>Is there a proposal for that <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span>, this would fix it because they just wouldn't be allowed to reorder?</p>",
        "id": 267317562,
        "sender_full_name": "DevinR528",
        "timestamp": 1641678248
    },
    {
        "content": "<p>could a macro derive that extra constructor function? (with parameters in declaration order)</p>",
        "id": 267318483,
        "sender_full_name": "cuviper",
        "timestamp": 1641679454
    },
    {
        "content": "<p><a href=\"https://crates.io/crates/derive-new\">https://crates.io/crates/derive-new</a> is pretty close, if you could just avoid the forced snake-casing</p>",
        "id": 267318653,
        "sender_full_name": "cuviper",
        "timestamp": 1641679582
    },
    {
        "content": "<p>I wanted it for returning the <code>fn() -&gt; enum</code> for parsing iloc, it would be something like <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=1501fd0fb1fde7503433a84c475506e1\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=1501fd0fb1fde7503433a84c475506e1</a></p>\n<p>But the derive new crate does look cool</p>",
        "id": 267318821,
        "sender_full_name": "DevinR528",
        "timestamp": 1641679800
    },
    {
        "content": "<p>that works with a closure, at least:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"s\">\"add\"</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">NumOperands</span>::<span class=\"n\">Two</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Instruction</span>::<span class=\"n\">Add</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"p\">}),</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 267318951,
        "sender_full_name": "cuviper",
        "timestamp": 1641679907
    },
    {
        "content": "<p>Ohh right, at least that a good way to make them behave in a uniform way.</p>",
        "id": 267319003,
        "sender_full_name": "DevinR528",
        "timestamp": 1641679949
    }
]