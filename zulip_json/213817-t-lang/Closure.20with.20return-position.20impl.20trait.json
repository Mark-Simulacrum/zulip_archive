[
    {
        "content": "<p>Trying to write <code>|| -&gt; impl Trait { ... }</code> currently errors with:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0562]: `impl Trait` not allowed outside of function and method return types\n --&gt; src/main.rs:2:21\n  |\n2 |     let val = || -&gt; impl Sized {\n  |                     ^^^^^^^^^^\n</code></pre></div>\n<p>Is there anything preventing us from lifting this restriction? Being able to write <code>impl Future + 'a</code> would allow users to fix some lifetime issues around <code>|| async move { .. }</code> closures, especially when combined with <code>for&lt;&gt;</code> closures.</p>\n<p>cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span></p>",
        "id": 267250413,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1641594044
    },
    {
        "content": "<p>The one ambiguity I can think of would be whether or not the enclosing function can see through the return-position opaque type - I think the answer should be 'no', since RPITs are always opaque to all callers</p>",
        "id": 267250800,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1641594256
    },
    {
        "content": "<p>I think we should at least add a feature gate for it to be able to work on it, since there may be some oddities that I can't think of rn</p>",
        "id": 267251464,
        "sender_full_name": "oli",
        "timestamp": 1641594661
    },
    {
        "content": "<p>Supporting argument-position impl trait might be a little odd, since you can't explicitly declare generic parameters on closures</p>",
        "id": 267251695,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1641594794
    },
    {
        "content": "<p>While working on AST-based lifetime resolution, I came under the impression that we may.  In HIR, we can keep a list of generic parameters for the closure, including lifetimes or APIT.  This would not exist in the AST, but may help bridge a gap between functions and closures.</p>",
        "id": 267251969,
        "sender_full_name": "cjgillot",
        "timestamp": 1641594962
    },
    {
        "content": "<p>This may even create a stepping stone to <code>for&lt;.&gt;</code> bounds on closures.</p>",
        "id": 267252041,
        "sender_full_name": "cjgillot",
        "timestamp": 1641594989
    },
    {
        "content": "<p>+1 to making it work under a feature gate and seeing what comes up.  Seems quite natural to me.</p>",
        "id": 267628612,
        "sender_full_name": "scottmcm",
        "timestamp": 1641927325
    }
]