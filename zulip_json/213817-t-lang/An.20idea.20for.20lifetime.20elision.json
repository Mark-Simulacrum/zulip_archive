[
    {
        "content": "<p>I was scrolling through <a href=\"https://github.com/rust-lang/rust/issues/91931\">#91931</a> looking at the diffs for removing in-band.  This one jumped out to me</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">-fn llvm_asm_scalar_type(cx: &amp;CodegenCx&lt;'ll, 'tcx&gt;, scalar: Scalar) -&gt; &amp;'ll Type {</span>\n<span class=\"gi\">+fn llvm_asm_scalar_type&lt;'ll&gt;(cx: &amp;CodegenCx&lt;'ll, '_&gt;, scalar: Scalar) -&gt; &amp;'ll Type {</span>\n</code></pre></div>\n<p>It made me think that perhaps what we need most of the time is to say which one is the lifetime of the return value, as the elision error says, so maybe we could do something more specifically targeted for that case?</p>\n<p>I haven't thought this through yet, but what do people think of</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">llvm_asm_scalar_type</span><span class=\"p\">(</span><span class=\"n\">cx</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">CodegenCx</span><span class=\"o\">&lt;'</span><span class=\"na\">return</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">scalar</span>: <span class=\"nc\">Scalar</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">Type</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Non-breaking, since keywords (like <code>return</code>) can't be used as lifetime names today.  And it's not short, but that's almost good to help it (along with syntax highlighting) stand out as \"this is the one\".  But it's not as long as <code>&lt;'ll&gt; 'll 'll</code> either.</p>",
        "id": 264917734,
        "sender_full_name": "scottmcm",
        "timestamp": 1639512406
    },
    {
        "content": "<p>I like the concept.</p>",
        "id": 264921175,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1639514065
    },
    {
        "content": "<p>Though I think from an understandability point of view, it seems unusual to derive a lifetime name from return, when the borrow goes in the other direction, from the argument to the return value.</p>",
        "id": 264921250,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1639514112
    },
    {
        "content": "<p>would <code>'return</code> fill <em>all</em> inferred lifetimes in the return type, or just references?<br>\ne.g. what about something <code>-&gt; Iter&lt;'_, T&gt;</code>?</p>",
        "id": 264921465,
        "sender_full_name": "cuviper",
        "timestamp": 1639514166
    },
    {
        "content": "<p>I was thinking all of them, <span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span>.  My mental model is that <code>&amp;Foo</code> always behaves exactly the same as if it were <code>::std::typealiases::Reference&lt;'_, Foo&gt;</code>.  (No that modules doesn't exist.)</p>",
        "id": 264924892,
        "sender_full_name": "scottmcm",
        "timestamp": 1639515743
    },
    {
        "content": "<p>I wonder sometimes if it should. :)</p>",
        "id": 264924941,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1639515772
    },
    {
        "content": "<p>when does it not?</p>",
        "id": 264929128,
        "sender_full_name": "Lokathor",
        "timestamp": 1639517829
    },
    {
        "content": "<p>I would prefer <code>'ret</code> &lt;/asmbrain&gt; but I grok the reasoning, and we could have <code>'return</code> now and maybe <code>'ret</code> later.</p>",
        "id": 264931355,
        "sender_full_name": "Jubilee",
        "timestamp": 1639518692
    },
    {
        "content": "<p>I think the advantage of using <code>'return</code> is probably that it's consistent with the rest of the language and IIRC keyword lifetimes currently cause an error.</p>",
        "id": 264931542,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639518799
    },
    {
        "content": "<p>Yeah, that's why it would be trivial to impl <code>'return</code> now.</p>",
        "id": 264931798,
        "sender_full_name": "Jubilee",
        "timestamp": 1639518925
    },
    {
        "content": "<p>on the other hand, <code>'return</code> is long enough that i'd just write <code>&lt;'a&gt;</code> on the function's declaration and use 'a</p>",
        "id": 264931909,
        "sender_full_name": "Lokathor",
        "timestamp": 1639518970
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/213817-t-lang/topic/An.20idea.20for.20lifetime.20elision/near/264931355\">said</a>:</p>\n<blockquote>\n<p>I would prefer <code>'ret</code> &lt;/asmbrain&gt; but I grok the reasoning, and we could have <code>'return</code> now and maybe <code>'ret</code> later.</p>\n</blockquote>\n<p>Rust used to have <code>ret</code> as the keyword because it had a \"no keywords more than 3 characters\" guideline, IIRC.  That was well before my time here, though <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 264935527,
        "sender_full_name": "scottmcm",
        "timestamp": 1639520727
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/213817-t-lang/topic/An.20idea.20for.20lifetime.20elision/near/264931909\">said</a>:</p>\n<blockquote>\n<p>on the other hand, <code>'return</code> is long enough that i'd just write <code>&lt;'a&gt;</code> on the function's declaration and use 'a</p>\n</blockquote>\n<p>Yeah this is why I think reserving <code>'ret</code> in Rust Next would be a good idea: because while <code>'return</code> is easy to do right now, if we want to add a magic lifetime for the purpose of <strong>syntax sugar</strong>, then it helps if it actually is sweet.</p>",
        "id": 264945088,
        "sender_full_name": "Jubilee",
        "timestamp": 1639525189
    },
    {
        "content": "<p>There does seem to be existing usage of <code>'ret</code> \"in the wild\": <a href=\"https://grep.app/search?q=%27ret%5B%2C%3E%5D&amp;regexp=true&amp;filter[lang][0]=Rust\">https://grep.app/search?q=%27ret%5B%2C%3E%5D&amp;regexp=true&amp;filter[lang][0]=Rust</a></p>",
        "id": 264945229,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639525286
    },
    {
        "content": "<p>Is it by any chance consistently in alignment with this convention?</p>",
        "id": 264945359,
        "sender_full_name": "Jubilee",
        "timestamp": 1639525377
    },
    {
        "content": "<p>I don't think so, but I'm not sure.</p>",
        "id": 264945390,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639525401
    },
    {
        "content": "<p>It seems to usually be, except for this odd one:</p>\n<blockquote>\n<p>impl&lt;'ret, 'cache: 'ret&gt; Resolver&lt;'ret, 'cache&gt; {</p>\n</blockquote>",
        "id": 264945403,
        "sender_full_name": "Jubilee",
        "timestamp": 1639525416
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/213817-t-lang/topic/An.20idea.20for.20lifetime.20elision/near/264931909\">said</a>:</p>\n<blockquote>\n<p>on the other hand, <code>'return</code> is long enough that i'd just write <code>&lt;'a&gt;</code> on the function's declaration and use 'a</p>\n</blockquote>\n<p>Well, <code>'return</code> is still technically shorter than the full <code>&lt;'a&gt;'a'a</code> dance to declare it, mention it in the parameter, and mention it in the return type.</p>\n<p>(<em>Usefully</em> shorter?  That's a different question.  But it's fewer characters and in one place instead of three, so I think it could still be easier.)</p>",
        "id": 264947877,
        "sender_full_name": "scottmcm",
        "timestamp": 1639527078
    },
    {
        "content": "<p>Given the small difference between 'return and &lt;'a&gt;'a'a, I feel like this is adding significant complexity for little benefit (having to explain these special case lifetimes feels like its adding a fair amount)</p>",
        "id": 264986929,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1639562782
    },
    {
        "content": "<p>I've been trying to come up with a good way of articulating this difference: rust lifetimes are not \"prescriptive\" (what I mean by this is that you can't say this thing has this lifetime and it magically lives that long) all you can do is mark the relationships. <code>'static</code> is a bit different but also not since your just marking it in relation to the whole program.</p>\n<p>That said I feel like the <code>'return</code> lifetime may blur the line? The not being able to prescribe a lifetime to an object was one of my mental hurdle to understanding lifetimes.</p>",
        "id": 265063491,
        "sender_full_name": "DevinR528",
        "timestamp": 1639597145
    },
    {
        "content": "<p>In some sense, lifetimes are not prescriptive in the same way that ordinary types are not prescriptive; you can't say <code>42</code> has the type <code>String</code>.</p>\n<p>But I think I know what you mean. My recollection is it confused me when I was learning the language too.</p>",
        "id": 265063851,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639597272
    },
    {
        "content": "<p>That's a good point, that they are just like types, which is exactly how they are treated in the compiler (and what they are). <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 265070950,
        "sender_full_name": "DevinR528",
        "timestamp": 1639600179
    },
    {
        "content": "<p>So <code>'_</code> is (sortof) <code>impl Lifetime</code> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 265083696,
        "sender_full_name": "scottmcm",
        "timestamp": 1639606390
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/213817-t-lang/topic/An.20idea.20for.20lifetime.20elision/near/264917734\">said</a>:</p>\n<blockquote>\n<p>I was scrolling through <a href=\"https://github.com/rust-lang/rust/issues/91931\">#91931</a> looking at the diffs for removing in-band.  This one jumped out to me</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">-fn llvm_asm_scalar_type(cx: &amp;CodegenCx&lt;'ll, 'tcx&gt;, scalar: Scalar) -&gt; &amp;'ll Type {</span>\n<span class=\"gi\">+fn llvm_asm_scalar_type&lt;'ll&gt;(cx: &amp;CodegenCx&lt;'ll, '_&gt;, scalar: Scalar) -&gt; &amp;'ll Type {</span>\n</code></pre></div>\n<p>It made me think that perhaps what we need most of the time is to say which one is the lifetime of the return value, as the elision error says, so maybe we could do something more specifically targeted for that case?</p>\n<p>I haven't thought this through yet, but what do people think of</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">llvm_asm_scalar_type</span><span class=\"p\">(</span><span class=\"n\">cx</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">CodegenCx</span><span class=\"o\">&lt;'</span><span class=\"na\">return</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">scalar</span>: <span class=\"nc\">Scalar</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">Type</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Non-breaking, since keywords (like <code>return</code>) can't be used as lifetime names today.  And it's not short, but that's almost good to help it (along with syntax highlighting) stand out as \"this is the one\".  But it's not as long as <code>&lt;'ll&gt; 'll 'll</code> either.</p>\n</blockquote>\n<p>Personally, I don't think that that example is verbose enough to warrant further elision</p>",
        "id": 265499490,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1639947153
    },
    {
        "content": "<p>When I'm reading over a signature, I think it's very useful to be able to look for occurrences of the same lifetime, instead of needing to mentally match up something like <code>'return</code> with an elided lifetime</p>",
        "id": 265499513,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1639947202
    }
]