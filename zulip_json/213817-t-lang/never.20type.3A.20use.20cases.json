[
    {
        "content": "<p>Starting a Zulip thread so we can try to collect use cases / motivations for never type / infallible, with a goal of identifying how we can meet those</p>",
        "id": 272996101,
        "sender_full_name": "simulacrum",
        "timestamp": 1645642947
    },
    {
        "content": "<p>Use case: <code>fn func() -&gt; Result&lt;!, E&gt;</code>, the compiler should know that <code>func()?</code> diverges and code after it is unreachable, just like <code>panic!()</code>.</p>",
        "id": 272996173,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645642983
    },
    {
        "content": "<p>Copying some discussion from elsewhere:<br>\nThis also means that <code>let Some(x) = y() else { func()? }</code> should work, and <code>let x = if cond { y() } else { func()? }</code> should work.</p>",
        "id": 272999520,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645644550
    },
    {
        "content": "<p>Both of those work if you use <code>panic!()</code>, as far as I know, and should work just as well if you use <code>func()?</code>.</p>",
        "id": 272999566,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645644574
    },
    {
        "content": "<p>most use of never type ive seen has basically been to simulate a pattern based refinement typing thing i.e. <code>Option&lt;T&gt; is None</code> for a <code>Option</code> that's matches the <code>None</code> pattern</p>",
        "id": 273000213,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1645644858
    },
    {
        "content": "<p>Which is an argument that we may want to consider enum variant types as an alternative.</p>",
        "id": 273000282,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645644898
    },
    {
        "content": "<p>enum variant types as proposed in the RFC are not exactly enough because they do not let you express</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">MyEnum</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">B</span><span class=\"p\">(</span><span class=\"n\">U</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">c</span><span class=\"p\">(</span><span class=\"n\">V</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">MyEnum</span><span class=\"o\">&lt;!</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>for an <code>MyEnum</code> thats never <code>A</code></p>",
        "id": 273000506,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1645645013
    },
    {
        "content": "<p>(that feature in the closed RFC also fails for enums inside of other types i.e. I cant have a <code>struct Foo(Option&lt;u8&gt;, u8)</code> that i know has a <code>Some</code> inside because i matched on it)</p>",
        "id": 273000733,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1645645126
    },
    {
        "content": "<p>True.</p>",
        "id": 273001221,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645645376
    },
    {
        "content": "<p>That case also doesn't work with <code>!</code> either.</p>",
        "id": 273001238,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645645386
    },
    {
        "content": "<p>But I think we could get value without a <em>full</em> refinement-types system that's that capable.</p>",
        "id": 273001264,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645645401
    },
    {
        "content": "<p>What <em>other</em> use cases exist for <code>!</code> besides use in generic type arguments and in type signatures?</p>",
        "id": 273001489,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645645511
    },
    {
        "content": "<p>Not sure if it's ever been used like this but you could take an argument <code>[!; N]</code> to assert <code>N = 0</code></p>",
        "id": 273001631,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645645568
    },
    {
        "content": "<p>Although, it's hard to come up with a way to use <em>any</em> type that isn't \"in generic type arguments and in type signatures\"</p>",
        "id": 273001885,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645645688
    },
    {
        "content": "<p>It seems like <code>pub struct Foo(!);</code> is analogous to the <code>pub struct Bar(());</code> pattern for creating a struct that can't be instantiated externally; the difference being that <code>Foo</code> is actually uninhabited from the library's POV, can be used in <code>match foo {}</code> and so on. You wouldn't want <code>pub enum Foo {}</code> because the uninhabitedness is externally visible and you might want to make it inhabited later.</p>",
        "id": 273002452,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645645965
    },
    {
        "content": "<p><code>Foo</code> and <code>Bar</code> are different. <code>Foo</code> is not only \"can't be instantiated externally\", it is \"can't be instantiated\" period.</p>",
        "id": 273002741,
        "sender_full_name": "Gary Guo",
        "timestamp": 1645646095
    },
    {
        "content": "<p>right, that's my point</p>",
        "id": 273002968,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645646195
    },
    {
        "content": "<p><code>Foo</code> and <code>Bar</code> both present the same external interface, a type that can't be instantiated except maybe through the library API</p>",
        "id": 273003043,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645646232
    },
    {
        "content": "<p>but inside the library these types are different, <code>Foo</code> is uninhabited (but it would be non-breaking to make it inhabited later) while <code>Bar</code> is inhabited</p>",
        "id": 273003142,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645646280
    },
    {
        "content": "<p>You don't strictly need <code>!</code> for this, you could use any uninhabited type, but it is nice to use the canonical one if it becomes available because the specific empty enum used here is not conveying any information</p>",
        "id": 273003373,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645646369
    },
    {
        "content": "<p>An <code>Option&lt;!&gt;</code> is a nice return type for functions where you return nothing but would like to use <code>?</code> like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">maybe_print_item</span><span class=\"p\">(</span><span class=\"n\">map</span>: <span class=\"nc\">HashMap</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">key</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;!&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">map</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">key</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">item</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">item</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">None</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 273007542,
        "sender_full_name": "mejrs",
        "timestamp": 1645648344
    },
    {
        "content": "<p>I have seen at least one case of \"The return type is <code>!</code> because I am implementing the OS, which never returns to the OS, because where would it go?\"</p>",
        "id": 273008732,
        "sender_full_name": "Jubilee",
        "timestamp": 1645649013
    },
    {
        "content": "<p>Also, the FerrisFsck emoji uses it <a href=\"/user_uploads/4715/7cPftOXSzaccGdxKs6mzw0lG/afbeelding.png\">afbeelding.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/7cPftOXSzaccGdxKs6mzw0lG/afbeelding.png\" title=\"afbeelding.png\"><img src=\"/user_uploads/4715/7cPftOXSzaccGdxKs6mzw0lG/afbeelding.png\"></a></div>",
        "id": 273009180,
        "sender_full_name": "mejrs",
        "timestamp": 1645649223
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"433532\">mejrs</span> <a href=\"#narrow/stream/213817-t-lang/topic/never.20type.3A.20use.20cases/near/273007542\">said</a>:</p>\n<blockquote>\n<p>An <code>Option&lt;!&gt;</code> is a nice return type for functions where you return nothing but would like to use <code>?</code> like</p>\n</blockquote>\n<p>I think this is a use for <code>try</code> blocks, not something that should be exposed to the caller.</p>",
        "id": 273010103,
        "sender_full_name": "scottmcm",
        "timestamp": 1645649685
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310518\">Jake</span> brought up this example in <a href=\"#narrow/stream/213817-t-lang/topic/When.20is.20inference.20fallback.20important.3F/near/272998677\">https://rust-lang.zulipchat.com/#narrow/stream/213817-t-lang/topic/When.20is.20inference.20fallback.20important.3F/near/272998677</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kt\">bool</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"fm\">panic!</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I actually have no idea how that works today, since no matter what type unconstrained type inference variable does from the <code>panic!</code> expression, I don't know how it \"gets past the <code>;</code>\" to make that block have a type other than <code>()</code>-because-block-with-no-trailing-expression.</p>\n<p>There's definitely some shenanigans going on, since this <em>doesn't</em> work:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kt\">bool</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"fm\">panic!</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 273062700,
        "sender_full_name": "scottmcm",
        "timestamp": 1645693528
    },
    {
        "content": "<p>it's here: <a href=\"https://github.com/rust-lang/rust/blob/1204400ab8da9830f6f77a5e40e7ad3ea459676a/compiler/rustc_typeck/src/check/fn_ctxt/checks.rs#L791-L797\">https://github.com/rust-lang/rust/blob/1204400ab8da9830f6f77a5e40e7ad3ea459676a/compiler/rustc_typeck/src/check/fn_ctxt/checks.rs#L791-L797</a><br>\nbasically, rustc sees that the block diverges and doesn't add the implicit <code>()</code> at the end, which results in <code>!</code> if there are no other exits from the block</p>",
        "id": 273067585,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1645696378
    },
    {
        "content": "<p>I use <code>!</code> in 2 places in my code base:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">create_thread</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">interrupt_flag</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">InterruptFlag</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">clone_flags</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ptid</span>: <span class=\"nc\">UserPtr</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ctid</span>: <span class=\"nc\">UserPtr</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">f</span>: <span class=\"nc\">F</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">InterruptibleSyscallResult</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">F</span>: <span class=\"nb\">FnOnce</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"o\">!</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">F</span>: <span class=\"nb\">Send</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"p\">,</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">exit_thread</span><span class=\"o\">&lt;</span><span class=\"n\">F</span>: <span class=\"nb\">FnOnce</span><span class=\"p\">(</span><span class=\"kt\">bool</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">interrupt_flag</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">InterruptFlag</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">status</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">callback</span>: <span class=\"nc\">F</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Interruptible</span><span class=\"o\">&lt;!&gt;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 273079022,
        "sender_full_name": "Amanieu",
        "timestamp": 1645703602
    },
    {
        "content": "<p>I've wanted a <code>Channel&lt;!&gt;</code> to mark a channel for which the only valid operation is to close it.</p>",
        "id": 273081241,
        "sender_full_name": "NeoRaider",
        "timestamp": 1645705088
    },
    {
        "content": "<p>I'm not sure it's valid, but I've wanted to do this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">OK</span>: <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"o\">!&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(());</span><span class=\"w\"></span>\n\n<span class=\"c1\">// ...</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foobar</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">MyError</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">OK</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 273113905,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1645720491
    },
    {
        "content": "<p>That's not going to work I think as they have a different layout.</p>",
        "id": 273117164,
        "sender_full_name": "bjorn3",
        "timestamp": 1645721719
    },
    {
        "content": "<p>Well, it's not impossible that it could coerce, but given this conversation started from coercion complications, I suspect we don't want to do that.</p>\n<p>I'd predict that is there was a language change to do something like that, it'd be something like \"generic constants\".  Maybe</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">OK</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"o\">&gt;</span>: <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(());</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 273130880,
        "sender_full_name": "scottmcm",
        "timestamp": 1645727652
    },
    {
        "content": "<p>I have a use case for this in stacker/psm where I would like to ensure a callback never returns as an optimization for stack switch.</p>",
        "id": 273499874,
        "sender_full_name": "nagisa",
        "timestamp": 1646059811
    },
    {
        "content": "<p>a never returning function can still unwind.</p>",
        "id": 273502229,
        "sender_full_name": "bjorn3",
        "timestamp": 1646060707
    },
    {
        "content": "<p>Sure. And it can still be a #safety invariant or caught-to-abort.</p>",
        "id": 273510574,
        "sender_full_name": "nagisa",
        "timestamp": 1646063804
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/stacker/blob/547807f03246783ada94b956a575b9ce257dc2ca/psm/src/lib.rs#L250-L270\">https://github.com/rust-lang/stacker/blob/547807f03246783ada94b956a575b9ce257dc2ca/psm/src/lib.rs#L250-L270</a> is the relevant code in psm.</p>",
        "id": 273571557,
        "sender_full_name": "nagisa",
        "timestamp": 1646092353
    },
    {
        "content": "<p>Oh, I'm surprised this isn't allowed. <code>fn() -&gt; !</code> works but not <code>FnOnce() -&gt; !</code></p>",
        "id": 273571757,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646092535
    }
]