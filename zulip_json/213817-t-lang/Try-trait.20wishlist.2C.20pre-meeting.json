[
    {
        "content": "<p>I wanted to start collecting goals and similar talking before next week's design meeting.  Here's a quick brainstorm:</p>\n<p>Wishes:</p>\n<ul>\n<li><code>x?</code>'s type is predictable from <code>x</code>'s type; it's not context dependent.  (This is important for things like <code>x?.foo()</code> or <code>dbg!(x?);</code> that don't provide type guides.</li>\n<li>Similar to the previous, the success value expected as the result of the inside of a <code>try{}</code> should be predictable from the resulting type, so things like <code>let x:Option&lt;usize&gt; = try { Default::default() };</code> don't give inference failures</li>\n<li>The combination of <code>?</code> and <code>try</code> remembers its \"resultness\" or \"optionness\", so that the type of the try block doesn't need to be specified so often. (I think this is a change in goal from the RFC thread, so comments appreciated.)</li>\n<li><code>try{}</code> blocks should be able to absorb many kinds of errors, if they want</li>\n<li>Keeps the door open for some form of <code>yeet error</code> syntax in future -- should maybe decide whether this should have error-conversion support</li>\n<li>Blocks using <code>option?</code> in a result-returning function and blocks using <code>result?</code> in an option-returning function.</li>\n<li>Compatible with an elegant way to have extra context on errors.</li>\n</ul>\n<p>Non-wishes:</p>\n<ul>\n<li>Free intermixing of <code>Try</code> types with compatible errors (I think this is a change in goal from the RFC thread, so comments appreciated.)</li>\n<li>Consistent <code>From</code> behaviour for all types as part of the <code>?</code> desugar (I think this is a change in goal from the RFC thread, so comments appreciated.)</li>\n<li>Keep the vocabulary specifically about errors (I think this is a change in goal from the RFC thread, so comments appreciated.)</li>\n</ul>\n<p>Please reply with other things you come up with.  Let's try to keep to scoping and avoid solutioning in this topic for now, though.</p>",
        "id": 196016428,
        "sender_full_name": "scottmcm",
        "timestamp": 1588371476
    },
    {
        "content": "<p>I'm in complete agreement with everything you've said in both lists.</p>",
        "id": 196018192,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588373108
    },
    {
        "content": "<p>I definitely want to be able to write things like <code>let x = try { ... }.with_context(|| ...)?</code> without any extra type annotations.</p>",
        "id": 196018220,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588373147
    },
    {
        "content": "<p>Or <code>let x = try { ... }; do_something(); x?</code></p>",
        "id": 196018271,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588373173
    },
    {
        "content": "<p>More-difficult goals:</p>\n<ul>\n<li>Have <code>map</code> be a provided method on the trait, with the expected <code>x.map(f)</code> -&gt; <code>try{f(x?)}</code> implementation.  (This would, I think, require ATCs.)</li>\n<li>Have at most negligible compile- and run-time overhead compared to hand-coding the <code>match</code>.</li>\n<li>Support better-than-<code>From</code> error conversion without being blocked on specialization.</li>\n</ul>",
        "id": 196024051,
        "sender_full_name": "scottmcm",
        "timestamp": 1588379364
    },
    {
        "content": "<p>Future extensability:</p>\n<ul>\n<li>Be able to accomadate a potential future \"none-/error-coalescing operator\", like <code>x ☃ compute_fallback()</code>, which would help people naturally avoid the <a href=\"https://rust-lang.github.io/rust-clippy/master/#or_fun_call\" title=\"https://rust-lang.github.io/rust-clippy/master/#or_fun_call\">https://rust-lang.github.io/rust-clippy/master/#or_fun_call</a> gotcha (prior art: <code>??</code> in C#, and similar)</li>\n</ul>",
        "id": 196024218,
        "sender_full_name": "scottmcm",
        "timestamp": 1588379643
    },
    {
        "content": "<p>I've been using <code>Err(x)?</code> in my code to return an error and it works pretty well. If we do decide to add <code>yeet e</code> in the future, should it just be a shorthand for <code>Err(x)?</code> with the same error conversion semantics? I personally feel that adding new syntax for this is unnecessary since <code>Err(e)?</code> works just fine.</p>",
        "id": 196025019,
        "sender_full_name": "Amanieu",
        "timestamp": 1588380729
    },
    {
        "content": "<p>That's one possible desugar. But that desugar would potentially necessitate a lot of type annotations.</p>",
        "id": 196025053,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588380834
    },
    {
        "content": "<p>You wouldn't be able to capture the output of <code>try</code> and then use <code>?</code> on it again later, because inference wouldn't know what type to make the intermediate.</p>",
        "id": 196025117,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588380872
    },
    {
        "content": "<p>I think it also only would work with <code>Result</code>.  I'm not sure what the correct syntax/semantics would be (assuming for now that it's needed) to return an error in code that's generic over the actual error carrier type</p>",
        "id": 196025134,
        "sender_full_name": "scottmcm",
        "timestamp": 1588380913
    },
    {
        "content": "<p>In the simple case, <code>Err(e)?</code> is <code>return Err(From::from(e));</code>, and it's not obvious to me whether the <code>from</code> should be there if we added syntax.  It seems like one might rather than <code>yeet e;</code> is just <code>return Err(e);</code>, since you can always write <code>yeet e.into();</code> if you want.</p>",
        "id": 196025210,
        "sender_full_name": "scottmcm",
        "timestamp": 1588381069
    },
    {
        "content": "<p>Oh, that reminds me:</p>\n<p>Possible goal:</p>\n<ul>\n<li>Do <strong>not</strong> do error conversion in non-annotated <code>try</code> blocks, so that I don't have to redundantly specify the error type.</li>\n</ul>",
        "id": 196025325,
        "sender_full_name": "scottmcm",
        "timestamp": 1588381258
    },
    {
        "content": "<p>Note that <code>yeet e;</code> is not equivalent to anything involving <code>return</code>, because return bypasses a <code>try</code> block, but <code>yeet</code> doesn't.</p>",
        "id": 196025343,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588381322
    },
    {
        "content": "<p>Yes, that's why I put \"in the simple case\".  <code>break 'nearest_try Err(e);</code>, if you prefer.</p>",
        "id": 196025404,
        "sender_full_name": "scottmcm",
        "timestamp": 1588381372
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/213817-t-lang/topic/Try-trait.20wishlist.2C.20pre-meeting/near/196024218\" title=\"#narrow/stream/213817-t-lang/topic/Try-trait.20wishlist.2C.20pre-meeting/near/196024218\">said</a>:</p>\n<blockquote>\n<p>Future extensability:</p>\n<ul>\n<li>Be able to accomadate a potential future \"none-/error-coalescing operator\", like <code>x ☃ compute_fallback()</code>, which would help people naturally avoid the <a href=\"https://rust-lang.github.io/rust-clippy/master/#or_fun_call\" title=\"https://rust-lang.github.io/rust-clippy/master/#or_fun_call\">https://rust-lang.github.io/rust-clippy/master/#or_fun_call</a> gotcha (prior art: <code>??</code> in C#, and similar)</li>\n</ul>\n</blockquote>\n<p>For some context, the original RFC included <code>try { x? } catch e { compute_fallback() }</code> with exactly those semantics- the Ok-wrapping <code>try {}</code> version was originally specified as sugar for pass-through catches like <code>catch e { Err(e) }</code></p>",
        "id": 196052416,
        "sender_full_name": "rpjohnst",
        "timestamp": 1588427267
    },
    {
        "content": "<blockquote>\n<ul>\n<li>Consistent <code>From</code> behaviour for all types as part of the <code>?</code> desugar (I think this is a change in goal from the RFC thread, so comments appreciated.)</li>\n</ul>\n</blockquote>\n<p><del>How would this interact with theoretical return traces? It seems like removing implicit from altogether in try blocks would basically torpedo that feature.</del></p>",
        "id": 196059661,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588437440
    },
    {
        "content": "<p>Oh wait no, it's the try trait that matters, not the from, this is fine</p>",
        "id": 196061593,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588440259
    },
    {
        "content": "<p>Do we really want:</p>\n<blockquote>\n<ul>\n<li>Blocks using <code>option?</code> in a result-returning function and blocks using <code>result?</code> in an option-returning function.</li>\n</ul>\n</blockquote>\n<p>Wouldn't it be better to not allow this? Since <code>NoneError</code> (as we have currently) seems very cludgey and not very useful since it doesn't really point to where the non was.</p>",
        "id": 196178754,
        "sender_full_name": "Sebastian Malton",
        "timestamp": 1588598479
    },
    {
        "content": "<p>AFAIK this is possible on stable already... unfortunately.</p>",
        "id": 196182958,
        "sender_full_name": "RalfJ",
        "timestamp": 1588600681
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=a15c8ee2e8d9334aa95035d4b23e3c0a\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=a15c8ee2e8d9334aa95035d4b23e3c0a\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=a15c8ee2e8d9334aa95035d4b23e3c0a</a></p>\n<p>This produces the error: <code>use of unstable library feature 'try_trait'</code>. So not actually on stable</p>",
        "id": 196185438,
        "sender_full_name": "Sebastian Malton",
        "timestamp": 1588601693
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"247082\">Sebastian Malton</span> <a href=\"#narrow/stream/213817-t-lang/topic/Try-trait.20wishlist.2C.20pre-meeting/near/196178754\" title=\"#narrow/stream/213817-t-lang/topic/Try-trait.20wishlist.2C.20pre-meeting/near/196178754\">said</a>:</p>\n<blockquote>\n<p>Do we really want:</p>\n<blockquote>\n<ul>\n<li>Blocks using <code>option?</code> in a result-returning function and blocks using <code>result?</code> in an option-returning function.</li>\n</ul>\n</blockquote>\n<p>Wouldn't it be better to not allow this? Since <code>NoneError</code> (as we have currently) seems very cludgey and not very useful since it doesn't really point to where the non was.</p>\n</blockquote>\n<p>Oops, bad ambiguity on my part.  I meant \"blocks\" as a verb, not as a noun there.  I should have written \"Prevent using ...\"</p>",
        "id": 196201674,
        "sender_full_name": "scottmcm",
        "timestamp": 1588608102
    },
    {
        "content": "<p>see <a class=\"stream-topic\" data-stream-id=\"213817\" href=\"/#narrow/stream/213817-t-lang/topic/Design.20meeting.3A.20try.2C.20oh.20my.21\">#t-lang &gt; Design meeting: try, oh my!</a></p>",
        "id": 196202355,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588608400
    },
    {
        "content": "<p><code>option?</code> to <code>Result</code> can be used on stable without naming <code>NoneError</code>:<br>\n<a href=\"https://github.com/rust-lang/rust/issues/42327#issuecomment-469359526\" title=\"https://github.com/rust-lang/rust/issues/42327#issuecomment-469359526\">https://github.com/rust-lang/rust/issues/42327#issuecomment-469359526</a><br>\n<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=bf6ef506f2e26fc9a77f7bad76eee8d2\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=bf6ef506f2e26fc9a77f7bad76eee8d2\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=bf6ef506f2e26fc9a77f7bad76eee8d2</a></p>",
        "id": 196202406,
        "sender_full_name": "cuviper",
        "timestamp": 1588608428
    },
    {
        "content": "<p>Yes but that isn't using <code>NoneError</code> it is using a debug trait object.</p>",
        "id": 196203008,
        "sender_full_name": "Sebastian Malton",
        "timestamp": 1588608686
    },
    {
        "content": "<p>Ah I see, well then we are in agreement</p>",
        "id": 196203044,
        "sender_full_name": "Sebastian Malton",
        "timestamp": 1588608706
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> ah, thanks for the example. I'm sort of relieved to know that it's not just my <code>Poll</code> impls that cause this issue.</p>",
        "id": 196210955,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1588612103
    },
    {
        "content": "<p>I don't know if anyone does that in practice though, but I think it's plausible</p>",
        "id": 196211097,
        "sender_full_name": "cuviper",
        "timestamp": 1588612201
    },
    {
        "content": "<p>Based on that, I'd expect <code>let x: Result&lt;&amp;str, Error&gt; = try { Some(5)?; \"foo\" };</code> to work</p>",
        "id": 196211103,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1588612202
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> ^</p>",
        "id": 196211169,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1588612221
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127859\">Taylor Cramer</span> <a href=\"#narrow/stream/213817-t-lang/topic/Try-trait.20wishlist.2C.20pre-meeting/near/196211103\" title=\"#narrow/stream/213817-t-lang/topic/Try-trait.20wishlist.2C.20pre-meeting/near/196211103\">said</a>:</p>\n<blockquote>\n<p>Based on that, I'd expect <code>let x: Result&lt;&amp;str, Error&gt; = try { Some(5)?; \"foo\" };</code> to work</p>\n</blockquote>\n<p>yep: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=e7f100dca6cb0bf4d1adf0968cb5a96f\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=e7f100dca6cb0bf4d1adf0968cb5a96f\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=e7f100dca6cb0bf4d1adf0968cb5a96f</a></p>",
        "id": 196211323,
        "sender_full_name": "cuviper",
        "timestamp": 1588612295
    },
    {
        "content": "<p>Hmm, that isn't what I expected by 'returning option? in function returning Result' - I have a lot of Option&lt;Result&gt; in my code and it would be great to have a way for the <code>Some</code> to get there automatically on error</p>",
        "id": 198071501,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1589897581
    },
    {
        "content": "<p>It seems to me that our ability to tweak the existing <code>Try</code> trait is just very limited</p>",
        "id": 198095105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589907184
    },
    {
        "content": "<p>I'm not sure how I feel about it but I guess I can live with it</p>",
        "id": 198095129,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589907195
    },
    {
        "content": "<p>It's nice that it narrows the range of options at least :)</p>",
        "id": 198095306,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589907252
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> What limits that? The <code>Try</code> trait itself (and thus any third-party impls) are not standard, right?</p>",
        "id": 198097209,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589907989
    },
    {
        "content": "<p>We have to provide compatibility with the observable behavior of <code>?</code>; are there any other limitations?</p>",
        "id": 198097249,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589908008
    },
    {
        "content": "<p>We also have to support the behavior of stable interfaces that use <code>Try</code>, namely <code>try_fold</code>, which means for example something like <code>Try::from_ok</code> is needed</p>",
        "id": 198098331,
        "sender_full_name": "cuviper",
        "timestamp": 1589908480
    },
    {
        "content": "<p>(but it doesn't have to be called that exactly)</p>",
        "id": 198098383,
        "sender_full_name": "cuviper",
        "timestamp": 1589908506
    },
    {
        "content": "<p>Ah, true.</p>",
        "id": 198098699,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589908653
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> I mostly meant the observable behavior of <code>?</code></p>",
        "id": 198133915,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589926503
    },
    {
        "content": "<p>but also e.g. the impls that <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> pointed out</p>",
        "id": 198133942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589926522
    }
]