[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/capture.20clauses/near/230154387\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/213817-t-lang/topic/capture.20clauses/near/230143911\">said</a>:</p>\n<blockquote>\n<p>I think it would be much better to just stabilize <code>FnOnce&lt;T&gt;</code> so that people can write callable objects rather than adding so much sugar on closure types</p>\n</blockquote>\n<p>Can you elaborate a bit more? I don't know exactly what you mean. However, I also think this is unlikely to be something we could fully design and ship in time to be used with the RFC 2229 plans.</p>\n</blockquote>\n<p>It's a little off topic for this thread, as it doesn't interact directly with closure capture syntax, but for a long time I've been frustrated by the inability to hand-write closures (in case I want to avoid voldemort types, for example), because a necessary component is writing e.g. <code>impl FnOnce&lt;(u64,)&gt; for MyClosure</code> which doesn't compile because... we aren't comfortable with this syntax for <code>FnOnce</code>? Which is bizarre to me, it works fine and has been in use (unstably) since the beginning. I don't think this should be blocked on some future variadic generics RFC (which looks a lot more shaky to me).</p>",
        "id": 230216034,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615701567
    },
    {
        "content": "<p>I won't speak to what the timing of this should be (I don't think it has to fall on an edition boundary but others might correct me), but I don't think there is much design needed besides making the existing trait accessible with the same syntax as all other traits</p>",
        "id": 230216168,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615701708
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> I think it's less that we aren't comfortable with the trait syntax, and more that we aren't comfortable with the method and its signature and calling convention.</p>",
        "id": 230216683,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615702377
    },
    {
        "content": "<p>Huh? Isn't there exactly one legal way to write it? The only choice I can see is in the name of the function</p>",
        "id": 230216695,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615702436
    },
    {
        "content": "<p><code>extern \"rust-call\" </code></p>",
        "id": 230216862,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615702628
    },
    {
        "content": "<p>For the calling convention, I guess that means you would like it to have the same calling convention as an n-ary function even though it only takes one argument. I suppose that can be solved by giving it <code>extern \"rust-fnonce-call\"</code> calling convention to give you enough leeway to define the calling convention differently from regular functions later</p>",
        "id": 230216908,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615702691
    },
    {
        "content": "<blockquote>\n<p>I guess that means you would like it to have the same calling convention as an n-ary function even though it only takes one argument.</p>\n</blockquote>\n<p>that's exactly what <code>\"rust-call\"</code> does</p>",
        "id": 230228578,
        "sender_full_name": "RalfJ",
        "timestamp": 1615717008
    },
    {
        "content": "<p>Answering to <span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span>'s aside (mods: feel free to hoist these comments into their own thread): I also believe some trait or wrapper could be offered in the meantime, for instance:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">mod</span> <span class=\"nn\">v1</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// Coherence wrapper</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Closure</span><span class=\"o\">&lt;</span><span class=\"n\">Fields</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">Fields</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"cp\">#[stable...]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"cm\">/* the current definition, but without extern \"rust-call\" */</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[unstable]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"w\"> </span>: <span class=\"nc\">v1</span>::<span class=\"nb\">FnOnce</span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">v1</span>::<span class=\"n\">Closure</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This a bit ugly and maybe suboptimal (<em>w.r.t.</em> ABIs) but at least it's something usable in stable Rust, and should we take this path, I'm pretty sure the design could be improved (<em>e.g.</em>, is the coherence wrapper really necessary?)</p>\n<p>The obvious drawback is the maintenance effort of this <code>v1</code> module staying around forever (potentially deprecated), but we are talking of a dummy newtype wrapper, a trait and a blanket impl tying it to the real trait (if that last part is problematic, we could even envision hard-coding / upper-bounding the arities (up to, say, 6 params), so as to make the blanket impls even easier to write). While long-term Rust is the main priority, present Rust could get some love is all I'm saying <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 230245628,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1615736088
    },
    {
        "content": "<p>What's wrong with exposing <code>extern \"rust-call\"</code>? I was previously confusing the \"rust-call\" abi with \"Rust\", but now I see it solves exactly the problem of directly having polymorphic varargs functions, so why not stabilize it?</p>",
        "id": 230246622,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615737212
    },
    {
        "content": "<p>It is kind of an ad-hoc thing that doesn't really mesh with the rest of the type system in an orthogonal/reusable way- for instance it might be preferable to add variadic generics first and then express the Fn traits with that.</p>",
        "id": 230260706,
        "sender_full_name": "rpjohnst",
        "timestamp": 1615748224
    },
    {
        "content": "<p>what about just changing the <code>extern \"Rust\"</code> ABI for tuples passed by value to always pass them the same as how <code>extern \"rust-call\"</code> does now? That would allow all <code>Fn*</code> types to have their <code>call</code> methods be stabilized with the Rust ABI.</p>",
        "id": 230285077,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1615772456
    },
    {
        "content": "<p>How does that work for pass-by-reference <code>rust-call</code>?</p>",
        "id": 230285167,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615772578
    },
    {
        "content": "<p>(I agree that it seems like it would always be a win to splat out tupled arguments passed by value)</p>",
        "id": 230285260,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615772720
    },
    {
        "content": "<p>I'd expect pass-by-reference (where the argument type is <code>&amp;T</code> or <code>&amp;mut T</code>) to not currently differ between <code>\"Rust\"</code> and <code>\"rust-call\"</code>, since afaict the whole point of <code>\"rust-call\"</code> is to be used by the <code>Fn*</code> traits where the tuple argument is always passed by value.</p>",
        "id": 230298199,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1615787511
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/213817-t-lang/topic/capture.20clauses/near/230285260\">said</a>:</p>\n<blockquote>\n<p>(I agree that it seems like it would always be a win to splat out tupled arguments passed by value)</p>\n</blockquote>\n<p>Nope, it very likely won't. It greatly increases the pressure on argument taking registers, meaning that it is more likely that arguments will be passed on the stack, which requires a move on the caller side in all cases and a move on the callee side if a tuple gets split between registers and the stack. In addition it prevents passing small tuples in one or two registers, even when it would fit. The <code>\"Rust\"</code> abi tries to pack small types in one or two registers to reduce stack usage during argument passing. The System-V abi for x86_64  does the same.</p>",
        "id": 230310132,
        "sender_full_name": "bjorn3",
        "timestamp": 1615797416
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"229517\">Jacob Lifshay</span> <a href=\"#narrow/stream/213817-t-lang/topic/capture.20clauses/near/230298199\">said</a>:</p>\n<blockquote>\n<p>I'd expect pass-by-reference (where the argument type is <code>&amp;T</code> or <code>&amp;mut T</code>) to not currently differ between <code>\"Rust\"</code> and <code>\"rust-call\"</code>, since afaict the whole point of <code>\"rust-call\"</code> is to be used by the <code>Fn*</code> traits where the tuple argument is always passed by value.</p>\n</blockquote>\n<p>The <code>\"rust-call\"</code> abi requires the last argument to be a tuple. All arguments before the last are treated the same as they would for the <code>\"Rust\"</code> abi.</p>",
        "id": 230310228,
        "sender_full_name": "bjorn3",
        "timestamp": 1615797492
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/213817-t-lang/topic/capture.20clauses/near/230310132\">said</a>:</p>\n<blockquote>\n<p>In addition it prevents passing small tuples in one or two registers, even when it would fit.</p>\n</blockquote>\n<p>Isn't it the opposite? The hypothetical ABI I'm talking about would eagerly promote tupled arguments into multiple arguments, meaning that small tuples would be more likely to be passed in registers than if they were viewed as a struct and passed in memory. This is then weighed against the register pressure cost of lots of arguments, and even the usual x86_64 ABI will put additional arguments on the stack if there are too many. So considering that this happens anyway, such an untupling ABI would just give a bit more flexibility about how to group things when putting values in memory vs in registers.</p>",
        "id": 230375821,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615825220
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"229517\">Jacob Lifshay</span> <a href=\"#narrow/stream/213817-t-lang/topic/capture.20clauses/near/230298199\">said</a>:</p>\n<blockquote>\n<p>I'd expect pass-by-reference (where the argument type is <code>&amp;T</code> or <code>&amp;mut T</code>) to not currently differ between <code>\"Rust\"</code> and <code>\"rust-call\"</code>, since afaict the whole point of <code>\"rust-call\"</code> is to be used by the <code>Fn*</code> traits where the tuple argument is always passed by value.</p>\n</blockquote>\n<p>Oh, I confused myself there; the arguments in the tuple are always passed by value, it's just <code>self</code> that has different borrowing modes.</p>",
        "id": 230376534,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615825368
    },
    {
        "content": "<p>I think the point was whether something like <code>(u32, u32)</code> is passed as a single 64-bit aggregate register or split into two separate registers</p>",
        "id": 230376662,
        "sender_full_name": "cuviper",
        "timestamp": 1615825415
    },
    {
        "content": "<p>That and the fact that if the tuple is big enough the loads and stores necessary to pass it in registers would hurt performance.</p>",
        "id": 230376857,
        "sender_full_name": "bjorn3",
        "timestamp": 1615825495
    },
    {
        "content": "<p>I halfway want to just say \"do the optimal thing in the given scenario\", which should be fine for an unspecified ABI like <code>\"Rust\"</code>. Is there a reason it needs to be pinned down like the System V ABI?</p>",
        "id": 230376916,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615825519
    },
    {
        "content": "<p>it seems like there are a lot of factors that can come up, many of which are only available post-monomorphization</p>",
        "id": 230377059,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615825567
    },
    {
        "content": "<p>We aren't pinned down to the native C abi. In fact the promotion of values &lt;= 2 registers in size to registers is rust specific. The System V abi only does this in some cases.</p>",
        "id": 230377092,
        "sender_full_name": "bjorn3",
        "timestamp": 1615825581
    },
    {
        "content": "<p>[I think the <em>Musings about the stabilization of Fn traits</em> subthread ought to be split off the current one (although I don't know whom to ping for that)]</p>",
        "id": 230541463,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1615910949
    },
    {
        "content": "<p>Everyone can split topics. If you click on the three dots next to a message there is an option \"View source / Edit topic\". Only moving topics between streams requires admin permission.</p>",
        "id": 230544439,
        "sender_full_name": "bjorn3",
        "timestamp": 1615911661
    }
]