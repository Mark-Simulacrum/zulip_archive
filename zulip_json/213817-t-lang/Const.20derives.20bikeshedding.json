[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"257758\">Connor Horman</span> <a href=\"#narrow/stream/213817-t-lang/topic/Pre-RFC.3A.20User-provided.20default.20field.20values/near/266383861\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/Pre-RFC.3A.20User-provided.20default.20field.20values/near/266383571\">said</a>:</p>\n<blockquote>\n<p>I think I would spell that <code>derive(const Default)</code>, but <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> .</p>\n</blockquote>\n<p>How would this work in general for Derive macros?</p>\n</blockquote>\n<p>Some obvious ideas:</p>\n<ul>\n<li>A <code>#[proc_macro_const_derive]</code> builtin.</li>\n<li>An additional argument to <code>#[proc_macro_derive]</code>.</li>\n</ul>",
        "id": 266922637,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1641381120
    },
    {
        "content": "<p><code>proc_macro_const_derive</code> might induce some code duplication, but 90% of a derive macro's code is usually factored out of the annotated function anyway, so it's not a big change.</p>",
        "id": 266922723,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1641381177
    },
    {
        "content": "<p>At some point I'll be writing an RFC for providing an arbitrary token stream as a parameter to derives. This would permit <code>#[derive(Default(const))]</code> among many other things. I'm 99% sure it's workable.</p>",
        "id": 266948292,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1641396238
    },
    {
        "content": "<p>Arbitrary tokens because then the derive author can do whatever they want with it.</p>",
        "id": 266948385,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1641396273
    }
]