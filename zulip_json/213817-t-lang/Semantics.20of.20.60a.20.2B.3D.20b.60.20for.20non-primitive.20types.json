[
    {
        "content": "<p>Has there been an official decision on the semantics for <code>a += b</code> where neither <code>a</code> nor <code>b</code> are primitives?</p>\n<p>Is it just desugar to <code>AddAssign&lt;A&gt;::add_assign(&amp;mut a, b)</code>?</p>",
        "id": 217833108,
        "sender_full_name": "isHavvy",
        "timestamp": 1606265128
    },
    {
        "content": "<p>it better, because that's what it says here <a href=\"https://doc.rust-lang.org/core/ops/trait.AddAssign.html\">https://doc.rust-lang.org/core/ops/trait.AddAssign.html</a></p>",
        "id": 217833171,
        "sender_full_name": "Lokathor",
        "timestamp": 1606265187
    },
    {
        "content": "<p>What it says there isn't entirely true since primitive types don't actually desugar to the function call (and that should probably be stated such on the trait docs).</p>",
        "id": 217833431,
        "sender_full_name": "isHavvy",
        "timestamp": 1606265479
    },
    {
        "content": "<p>And it's actually observable in practice because evaluation order changes.</p>",
        "id": 217833491,
        "sender_full_name": "isHavvy",
        "timestamp": 1606265530
    },
    {
        "content": "<p>an observable optimization? in MY rust!?</p>",
        "id": 217833504,
        "sender_full_name": "Lokathor",
        "timestamp": 1606265554
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/expr/compound-assignment/eval-order.rs\">https://github.com/rust-lang/rust/blob/master/src/test/ui/expr/compound-assignment/eval-order.rs</a> for those curious</p>",
        "id": 217833535,
        "sender_full_name": "isHavvy",
        "timestamp": 1606265605
    },
    {
        "content": "<p>oh so, if i follow, <code>primA += primB</code> is eval(primB) then eval(primA), whereas <code>compoundA += compoundB</code> would be eval(compoundA) then eval(compoundB)?</p>",
        "id": 217833756,
        "sender_full_name": "Lokathor",
        "timestamp": 1606265769
    },
    {
        "content": "<p>Yes.</p>",
        "id": 217833797,
        "sender_full_name": "isHavvy",
        "timestamp": 1606265821
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/213817-t-lang/topic/Semantics.20of.20.60a.20.2B.3D.20b.60.20for.20non-primitive.20types/near/217833504\">said</a>:</p>\n<blockquote>\n<p>an observable optimization? in MY rust!?</p>\n</blockquote>\n<p>worse, not an optimization... just an observable difference in things that should behave the same...</p>",
        "id": 218119684,
        "sender_full_name": "RalfJ",
        "timestamp": 1606502510
    },
    {
        "content": "<p>a reason for rust 2.0 <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 218121336,
        "sender_full_name": "lcnr",
        "timestamp": 1606503932
    },
    {
        "content": "<p>I opened an issue for a Clippy lint for the problematic case, but never got around to implementing it: <a href=\"https://github.com/rust-lang/rust-clippy/issues/4756\">https://github.com/rust-lang/rust-clippy/issues/4756</a></p>",
        "id": 218122546,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1606504934
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/213817-t-lang/topic/Semantics.20of.20.60a.20.2B.3D.20b.60.20for.20non-primitive.20types/near/218121336\">said</a>:</p>\n<blockquote>\n<p>a reason for rust 2.0 <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>\n</blockquote>\n<p>was there an attempt to consolidate this, or is changing evaluation order now considered to be too risky?</p>",
        "id": 218156808,
        "sender_full_name": "RalfJ",
        "timestamp": 1606556740
    },
    {
        "content": "<p>not sure, I would love to fix this in this version</p>",
        "id": 218159525,
        "sender_full_name": "lcnr",
        "timestamp": 1606561713
    },
    {
        "content": "<p>but I kind of fear that there is code which depends on the current order for both cases</p>",
        "id": 218159529,
        "sender_full_name": "lcnr",
        "timestamp": 1606561732
    },
    {
        "content": "<p>Is this the kind of thing that could be changed at an edition boundary?</p>",
        "id": 218179001,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1606594123
    },
    {
        "content": "<p>Only extremely carefully since we're not changing what people write. We'd have to make the current behavior error when it has an actual side effect and a suggestion on how to rewrite it that doesn't error. Probably not worth the churn TBH.</p>",
        "id": 218179460,
        "sender_full_name": "isHavvy",
        "timestamp": 1606594970
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296643\">isHavvy</span> <a href=\"#narrow/stream/213817-t-lang/topic/Semantics.20of.20.60a.20.2B.3D.20b.60.20for.20non-primitive.20types/near/218179460\">said</a>:</p>\n<blockquote>\n<p>We'd have to make the current behavior error when it has an actual side effect and a suggestion on how to rewrite it that doesn't error.</p>\n</blockquote>\n<p>I think this is the hard part, yeah.  We'd need to be able to write a tolerably-noisy warning that the semantics would change next edition to put in the preceding edition.</p>",
        "id": 218183445,
        "sender_full_name": "scottmcm",
        "timestamp": 1606601232
    },
    {
        "content": "<p>Anyways, my main question remains unanswered. And it's blocking me on the reference PR for evaluation order.</p>",
        "id": 218196592,
        "sender_full_name": "isHavvy",
        "timestamp": 1606626406
    },
    {
        "content": "<p>I feel like doing this on an edition boundary would be worse than doing it everywhere... it'd mean the order depends on the Cargo.toml file!</p>",
        "id": 218214501,
        "sender_full_name": "RalfJ",
        "timestamp": 1606659107
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296643\">isHavvy</span> <a href=\"#narrow/stream/213817-t-lang/topic/Semantics.20of.20.60a.20.2B.3D.20b.60.20for.20non-primitive.20types/near/218196592\">said</a>:</p>\n<blockquote>\n<p>Anyways, my main question remains unanswered. And it's blocking me on the reference PR for evaluation order.</p>\n</blockquote>\n<p>I thought <a href=\"#narrow/stream/213817-t-lang/topic/Semantics.20of.20.60a.20.2B.3D.20b.60.20for.20non-primitive.20types/near/217833756\">this is the answer</a>? We should probably add tests to confirm this.</p>",
        "id": 218214547,
        "sender_full_name": "RalfJ",
        "timestamp": 1606659145
    },
    {
        "content": "<p>While I think the inconsistency is terrible, is it clear to everyone which order is better? It seems like there are arguments for both choices</p>",
        "id": 218214815,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606659669
    },
    {
        "content": "<p>i think <code>b</code> then <code>a</code> makes more sense but i personally believe it really doesn't matter as long as we are consistent</p>",
        "id": 218215793,
        "sender_full_name": "lcnr",
        "timestamp": 1606661403
    },
    {
        "content": "<p>Doesn't that mean that <code>T::add_assign(&amp;mut a, b)</code> is not the same as <code>a += b</code>?</p>",
        "id": 218217297,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606663982
    },
    {
        "content": "<p>It should probably be <code>a</code> then <code>b</code> to match most other language constructs and the method call desugaring</p>",
        "id": 218217567,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606664414
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 218218025,
        "sender_full_name": "lcnr",
        "timestamp": 1606665263
    },
    {
        "content": "<p>I imagine the main place where users would notice a difference is something like <code>self.foo += self.foo</code> where the <code>a</code> then <code>b</code> order will cause a double borrow in the same way as often happens with <code>self.foo(self.bar())</code> where both <code>foo</code> and <code>bar</code> take <code>&amp;mut self</code></p>",
        "id": 218220851,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606670066
    },
    {
        "content": "<p>I often wish that there were some special rule to make <code>self.foo(self.bar())</code> work, but if the receiver got evaluated last this would make method chains really weird</p>",
        "id": 218220938,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606670264
    },
    {
        "content": "<p>I don't know how common <code>*self.foo() += 1</code> is but I guess that would hit this evaluation order issue</p>",
        "id": 218220995,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606670330
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/213817-t-lang/topic/Semantics.20of.20.60a.20.2B.3D.20b.60.20for.20non-primitive.20types/near/218217567\">said</a>:</p>\n<blockquote>\n<p>It should probably be <code>a</code> then <code>b</code> to match most other language constructs and the method call desugaring</p>\n</blockquote>\n<p><code>=</code> is right-to-left, so I'd think <code>+=</code> should also be right-to-left. the desugaring can be changed.</p>",
        "id": 218221481,
        "sender_full_name": "RalfJ",
        "timestamp": 1606671171
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/213817-t-lang/topic/Semantics.20of.20.60a.20.2B.3D.20b.60.20for.20non-primitive.20types/near/218214547\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"296643\">isHavvy</span> <a href=\"#narrow/stream/213817-t-lang/topic/Semantics.20of.20.60a.20.2B.3D.20b.60.20for.20non-primitive.20types/near/218196592\">said</a>:</p>\n<blockquote>\n<p>Anyways, my main question remains unanswered. And it's blocking me on the reference PR for evaluation order.</p>\n</blockquote>\n<p>I thought <a href=\"#narrow/stream/213817-t-lang/topic/Semantics.20of.20.60a.20.2B.3D.20b.60.20for.20non-primitive.20types/near/217833756\">this is the answer</a>? We should probably add tests to confirm this.</p>\n</blockquote>\n<p>It's not an answer in that while it's the observed behavior for evaluation order, it's not a definition of what <code>a += b</code>. Specifically, I want to know if, where it's not primitive compound assignment, is it defined as a desugaring to <code>%OP%Assign::(&amp;mut a, b)</code> or if the semantics have more nuance?</p>",
        "id": 218243602,
        "sender_full_name": "isHavvy",
        "timestamp": 1606704501
    },
    {
        "content": "<p>I linked to a test for the current behavior <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/expr/compound-assignment/eval-order.rs\">earlier</a>. So the current behavior is at least tested.</p>",
        "id": 218243689,
        "sender_full_name": "isHavvy",
        "timestamp": 1606704639
    }
]