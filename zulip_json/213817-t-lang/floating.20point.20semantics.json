[
    {
        "content": "<p>I'm working on writing up the (long) comment summarizing the state of the floating point to integer casts, and I'm having trouble nailing down exactly how to interpret what C++ does.</p>",
        "id": 194504960,
        "sender_full_name": "simulacrum",
        "timestamp": 1587160396
    },
    {
        "content": "<p>I believe <a href=\"https://en.cppreference.com/w/c/language/conversion#Real_floating-integer_conversions\" title=\"https://en.cppreference.com/w/c/language/conversion#Real_floating-integer_conversions\">https://en.cppreference.com/w/c/language/conversion#Real_floating-integer_conversions</a> is a reasonable reference, and AFAICT given Rust's lack of support for rounding modes, we basically can boil that down to C++ rounding to nearest for imprecisely representable values and otherwise being undefined</p>",
        "id": 194505087,
        "sender_full_name": "simulacrum",
        "timestamp": 1587160455
    },
    {
        "content": "<p>(AFAICT, this differs from the behavior given by LLVM's fptoui which rounds to zero; as well as the behavior Rust currently has regardless of -Zsaturating-float-casts)</p>",
        "id": 194505169,
        "sender_full_name": "simulacrum",
        "timestamp": 1587160510
    },
    {
        "content": "<p>Also, does Rust require IEEE arithmetic to be supported? I somehow feel that the answer is yes... but maybe that's not true</p>",
        "id": 194505390,
        "sender_full_name": "simulacrum",
        "timestamp": 1587160672
    },
    {
        "content": "<p>pretty sure Rust is iEEE-only</p>",
        "id": 194510379,
        "sender_full_name": "eddyb",
        "timestamp": 1587164603
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"124289\">@Hanna Kruppe</span></p>",
        "id": 194510382,
        "sender_full_name": "eddyb",
        "timestamp": 1587164607
    },
    {
        "content": "<p>I would love to have options to <em>not</em> be, but yes, at the moment it is.</p>",
        "id": 194511661,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587165760
    },
    {
        "content": "<p>(<em>cough</em> FMA <em>cough</em>)</p>",
        "id": 194511672,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587165770
    },
    {
        "content": "<p>FWIW, I wouldn't say contraction (license to form FMAs from fadds and fmuls) is \"not IEEE\". The standard mostly describes a set of operations, how program source code in various languages maps to these operations is not really within its jurisdiction. When it does talk about language implementations, it is almost entirely non-binding (lots of \"should\" and \"may\"). In particular, ยง10.3 (2019 version) discusses \"value-changing optimizations\", even listing contraction as one example of such optimization (and the list  there is explicitly not exhaustive).</p>",
        "id": 194534120,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1587200109
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> First of all, I'm confused by the rounding mode stuff: Rust does not have support for users selecting non-default rounding modes, but certainly we can and should define certain operations to have a (fixed) rounding mode different from RNE.</p>",
        "id": 194534260,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1587200339
    },
    {
        "content": "<p>As for \"does Rust require IEEE arithmetic to be supported\" ... it's complicated. The reference has long said our <code>f32</code> and <code>f64</code> types map to IEEE 754 (version unspecified) binary32 and binary64 formats, but that's technically a statement about storage layout, not how arithmetic is performed. On most targets, each Rust-source-level operation takes the results in the obvious format and rounds the result to the same format. But on a few targets (e.g. x86 w/o SSE2), multiple operation can and are performed in an intermediate format and rounded at the end, which can give different results. Some other hardware we support flushes denormal results to zero or otherwise is fuzzy around denormals (typically configurable, but we don't fiddle with it).</p>\n<p>We don't have an official policy on these things one way or another, but they're certainly not what the average programmer will expect when told \"Rust floats are IEEE 754, end of story\".</p>",
        "id": 194534707,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1587201107
    },
    {
        "content": "<p>Yeah, when I said lack of support I meant that there's no way to switch in std, and I seem to recall an issue saying that there was some undefined behavior involved</p>",
        "id": 194538442,
        "sender_full_name": "simulacrum",
        "timestamp": 1587207243
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@Hanna Kruppe</span> I agree that contraction should be perfectly fine, but the last time that came up, there was huge pushback against the idea on the grounds that it'd be somehow standards-violating.</p>",
        "id": 194559081,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587236695
    },
    {
        "content": "<p>Not only on those grounds, to be clear. But if this particular argument comes up in future discussions and I have the time to participate, I'll probably end up writing a very pedantic standards lawyering rebuttal. (Not that I expect it'll really change anyone's mind.)</p>",
        "id": 194559276,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1587236992
    },
    {
        "content": "<p>I would appreciate that, thank you.</p>",
        "id": 194559703,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587237686
    },
    {
        "content": "<p>(And yes, I'm aware that there was pushback on other grounds as well.)</p>",
        "id": 194559708,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587237704
    },
    {
        "content": "<p>contraction is just one example of a \"fast-math\"-style optimization, right? I'd also be quite concerned if we did those by default, mostly because so far we barely know how to <em>specify</em> them formally in the context of a whole programming language, let alone argue that a compiler is following the spec. all I know of is a single work-in-progress unpublished proposal (by colleagues at MPI-SWS :D ), but the design space is big.<br>\nso as far as I am concerned, the issue isnt that it violates some standards, the issue is that <em>there is no standard</em> and we dont even really know how to write one (with a level of mathematical precision that I would find satisfying).</p>",
        "id": 194584801,
        "sender_full_name": "RalfJ",
        "timestamp": 1587282800
    },
    {
        "content": "<p>in terms of the user-visible side of this, I saw some proposals for controlling these optimizations based on the types of the operands, and got to say I quite liked those :D</p>",
        "id": 194584805,
        "sender_full_name": "RalfJ",
        "timestamp": 1587282822
    },
    {
        "content": "<p>type-based toggles seem much more suited for this than global flags like C compilers use them</p>",
        "id": 194584807,
        "sender_full_name": "RalfJ",
        "timestamp": 1587282839
    },
    {
        "content": "<p>I should also mention that these aforementioned colleagues expressed interest in exploring their style of fast-math semantics for rust, and asked me how to best proceed with that. I told them to maybe start with a post on IRLO, maybe join here on zulip and start a discussion. not sure how their timetable for that looks.</p>",
        "id": 194584919,
        "sender_full_name": "RalfJ",
        "timestamp": 1587283041
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> In general, I'd suggest completely avoiding the term \"fast-math\", because it encompasses everything from optimizations that make math more precise (like contraction) to those that lose precision.</p>",
        "id": 194600346,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587306518
    },
    {
        "content": "<p>I have other qualms with the \"fast-math\" term (it suggests a performance advantage that is often barely there and does not convey the risks, incentivizing programmers to over-use it and get bitten by it later), but I do think it's justified to have a term that encompasses all of these optimizations. They have substantial overlap -- challenges for reproducibility and standardization, primarily enabled for performance reasons -- even if they differ on other axes and some subsets of them also deserve names.</p>\n<p>As for better terms to replace \"fast-math\", I like the phrases \"value-changing optimization\" and \"(changing/preserving) the literal meaning of the source code\" used in IEEE 754-2019.</p>",
        "id": 194600882,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1587307275
    },
    {
        "content": "<p>yeah, I used the term for lack of a better one</p>",
        "id": 194601061,
        "sender_full_name": "RalfJ",
        "timestamp": 1587307479
    },
    {
        "content": "<p>I think it's worth distinguishing between optimizations that add precision and those that lose precision, as well.</p>",
        "id": 194601076,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587307491
    },
    {
        "content": "<p>FWIW, I'd include using x87 float instructions in there, even though we already do that</p>",
        "id": 194601087,
        "sender_full_name": "RalfJ",
        "timestamp": 1587307496
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/floating.20point.20semantics/near/194601076\" title=\"#narrow/stream/213817-t-lang/topic/floating.20point.20semantics/near/194601076\">said</a>:</p>\n<blockquote>\n<p>I think it's worth distinguishing between optimizations that add precision and those that lose precision, as well.</p>\n</blockquote>\n<p>in terms of user interface (compiler flags etc), definitely. in terms of <em>specification</em>, I am less sure. it is already really hard to specify the envelope of permissible program behavior under such transformations; also requiring that \"precision has to increase\" (whatever that even means, in general) is yet another can of worms...</p>",
        "id": 194601187,
        "sender_full_name": "RalfJ",
        "timestamp": 1587307580
    },
    {
        "content": "<p>I could totally imagine situations where contraction locally increases precision but globally decreases it</p>",
        "id": 194601230,
        "sender_full_name": "RalfJ",
        "timestamp": 1587307659
    },
    {
        "content": "<p>If you define precision in terms of how close you are to the true value, I don't see how that would work. I would love to see a sequence of operations that had that result.</p>",
        "id": 194601425,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587307916
    },
    {
        "content": "<p>Here's a really contrived example: take <code>f1</code> and <code>f2</code> to be twice the same function. Consider <code>f1(x) - f2(x)</code>. If we now optimize <code>f1</code> with contraction but leave <code>f2</code> unchanged, the precision of the overall expression will decrease.</p>",
        "id": 194601679,
        "sender_full_name": "RalfJ",
        "timestamp": 1587308216
    },
    {
        "content": "<p>Another example of this (strongly related but not quite an instance of Ralf's template) is xยฒ-yยฒ when x = y, which is brought up every time the topic comes up. I'm starting to worry about how often this happens around FP things (not just contraction, also other FMF and anything related to fp environment access), discussions flaming up again once in a while and re-treading the same facts that were already discovered last time.</p>",
        "id": 194601895,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1587308550
    },
    {
        "content": "<p>And so much of it is buried deep in chat archives where they're unlikely to be found again.</p>",
        "id": 194601914,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1587308589
    },
    {
        "content": "<p>what's \"FMF\"?</p>",
        "id": 194602191,
        "sender_full_name": "RalfJ",
        "timestamp": 1587308934
    },
    {
        "content": "<p>fast-math flags, shortened primarily to avoid the evil \"fast-math\" substring</p>",
        "id": 194602214,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1587309000
    },
    {
        "content": "<p>^^</p>",
        "id": 194602254,
        "sender_full_name": "RalfJ",
        "timestamp": 1587309013
    },
    {
        "content": "<p>it's not just chat archives luckily, there are a bunch of unresolved discussion threads in <a href=\"https://github.com/rust-lang/rfcs/pull/2686\" title=\"https://github.com/rust-lang/rfcs/pull/2686\">https://github.com/rust-lang/rfcs/pull/2686</a> that also pertain to this</p>",
        "id": 194602264,
        "sender_full_name": "RalfJ",
        "timestamp": 1587309031
    },
    {
        "content": "<p>would be good to get them incorporated in the RFC at some point</p>",
        "id": 194602267,
        "sender_full_name": "RalfJ",
        "timestamp": 1587309041
    },
    {
        "content": "<p>(Not really, the acronym is widely used by people who have no such qualms, but that's my personal reason to prefer it :D)</p>",
        "id": 194602269,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1587309046
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> That's assuming correlation between the imprecision. And in any case, what about if you compile the entire program with contraction enabled?</p>",
        "id": 194603438,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587310667
    },
    {
        "content": "<p>Oh, but that reminds me: in that thread we discussed how some flags like \"no NaNs\" can produce undef-like behavior and thus could lead to UB, but I've since realized (and hastily jotted down here: <a href=\"https://github.com/rust-lang/rust/issues/21690#issuecomment-610459562\" title=\"https://github.com/rust-lang/rust/issues/21690#issuecomment-610459562\">https://github.com/rust-lang/rust/issues/21690#issuecomment-610459562</a>) that the same concern applies to basically all value-changing optimizations. That is, <code>%x = &lt;some fp computations&gt;</code> with two uses (e.g. a bounds check and an array indexing) could get duplicated such that one of the uses gets one copy of the computation and the other use gets the other copy, and then the two copies can get optimized differently and result in the same fun effects you get from \"every use of <code>undef</code> independently observes a non-det value\".</p>\n<p>The obvious solution if we're concerned with compiler correctness is \"well don't duplicate instructions whose value might be non-deterministic\" but given that such duplication is common in various optimizations (and <code>undef</code>/<code>poison</code> are specifically engineered to make them valid in the absence of <code>freeze</code>), this seems hard to swallow. So perhaps the conclusion is that <em>all</em> \"fast-math\" optimizations are unsafe? And it's not the kind of unsafe where a careful programmer can avoid UB.</p>",
        "id": 194603526,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1587310788
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/floating.20point.20semantics/near/194603438\" title=\"#narrow/stream/213817-t-lang/topic/floating.20point.20semantics/near/194603438\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> That's assuming correlation between the imprecision. And in any case, what about if you compile the entire program with contraction enabled?</p>\n</blockquote>\n<p>I think we definitely have to assume correlation between the imprecision. Assuming they are uncorrelated sounds like a big stretch to me.</p>\n<p>sure this particular contrived example is easy to fix. but it demonstrates the principle. precision (in the presence of uncorrelated imprecision) is fundamentally not a monotone or otherwise compositional property, so there is just no way to reason about how the precision of the final computation will change based on local precision changes.</p>",
        "id": 194605921,
        "sender_full_name": "RalfJ",
        "timestamp": 1587313508
    },
    {
        "content": "<p>One idea I had was to allow <code>undef</code> in the FP domain and <code>freeze</code> values when we convert them to integers. The idea is that we only directly rely on integers for memory safety. However I'm a bit uncertain of how that would work with implicit and explicit transmutes.</p>",
        "id": 194606026,
        "sender_full_name": "Amanieu",
        "timestamp": 1587313594
    },
    {
        "content": "<blockquote>\n<p>So perhaps the conclusion is that all \"fast-math\" optimizations are unsafe? And it's not the kind of unsafe where a careful programmer can avoid UB.</p>\n</blockquote>\n<p>Agreed. the only formal model of fast-math I know is indeed using non-determinism as you also allude to, and to avoid UB the programmer needs some way to mark where the non-determinism has to \"end\" -- something like <code>freeze</code>. (As <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> says they could be implicit in a cast, too.)</p>",
        "id": 194606037,
        "sender_full_name": "RalfJ",
        "timestamp": 1587313616
    },
    {
        "content": "<p>This is an interesting direction, but since branch/select conditions are also safety relevant and need to be frozen (artificial example: <code>if x &gt; y { free(ptr); } if x &lt;= y { ptr.write(1); }</code>), this seems to introduce a concerning number of freeze operations. If there's too many, their chilling effect on some optimizations might make \"fast math\" a net pessimization for a lot of code. Even if the freezes are programmer-controlled rather than automatic, the cognitive burden to figure out where it can and can't be omitted seems too great for people to use this ability correctly and precisely.</p>",
        "id": 194607071,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1587314775
    },
    {
        "content": "<p>That example is actually pretty bad but <em>waves hands</em></p>",
        "id": 194607589,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1587315420
    },
    {
        "content": "<p>Hmmm, but some value-changing optimizations are licensed by default, specifically those that change the bits of NaN results (sign, signaling/quiet, payload). Wouldn't those technically be subject to the same problem? Only a few niche operations can transport those differences to the integer domain (variations of transmutes, <code>is_sign_positive</code>, and  <code>copySign</code>) but hypothetically there should be soundness issues involving those lurking in current Rust.</p>",
        "id": 194655103,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1587377306
    },
    {
        "content": "<p>NaN changes are easy, we can just say that typed copies of floats do not preserve NaN bits</p>",
        "id": 194705065,
        "sender_full_name": "RalfJ",
        "timestamp": 1587402380
    },
    {
        "content": "<p>so that's a lot like padding</p>",
        "id": 194705083,
        "sender_full_name": "RalfJ",
        "timestamp": 1587402387
    },
    {
        "content": "<p>People could get upset with you there. Some people use those NaN bits. Also, <em>actually</em> doing that in practice is more costly than just unconditionally copying all four bytes, so if you're never going to do it anyway, don't claim that it might happen.</p>",
        "id": 194715540,
        "sender_full_name": "Lokathor",
        "timestamp": 1587407782
    },
    {
        "content": "<p>but we do it sometimes. LLVM will clobber the NaN bits under some circumstances.</p>",
        "id": 194740300,
        "sender_full_name": "RalfJ",
        "timestamp": 1587420976
    },
    {
        "content": "<p>pretending this does not happen is just going to make people sad</p>",
        "id": 194740314,
        "sender_full_name": "RalfJ",
        "timestamp": 1587420985
    },
    {
        "content": "<p>so I'd rather make people defensively use <code>u32</code>  instead of <code>f32</code> for moving their stuff around</p>",
        "id": 194740341,
        "sender_full_name": "RalfJ",
        "timestamp": 1587421010
    },
    {
        "content": "<p>see for example <a href=\"https://github.com/rust-lang/rust/issues/55131\" title=\"https://github.com/rust-lang/rust/issues/55131\">https://github.com/rust-lang/rust/issues/55131</a></p>",
        "id": 194740399,
        "sender_full_name": "RalfJ",
        "timestamp": 1587421050
    },
    {
        "content": "<p>so there's a high chance that those people that use these NaN bits just have broken code that happens to work with some luck.</p>",
        "id": 194740422,
        "sender_full_name": "RalfJ",
        "timestamp": 1587421077
    },
    {
        "content": "<p>LLVM will happily eliminate bitcasts and roundtrips through memory, so idk if focusing on typed copies will work. Like, <code>let bits = f.to_bits(); ptr::write(p1, bits); ptr::write(p2, bits);</code> should result in essentially the same IR as <code>ptr::write(p1.cast(), f); ptr::write(p2.cast(), f);</code> after a few cleanup passes.</p>",
        "id": 194786318,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1587466610
    },
    {
        "content": "<p>LLVM will happily eliminate int-ptr-casts and it is <a href=\"https://bugs.llvm.org/show_bug.cgi?id=34548\" title=\"https://bugs.llvm.org/show_bug.cgi?id=34548\">wrong in doing so</a>. maybe this is similar?</p>",
        "id": 194793865,
        "sender_full_name": "RalfJ",
        "timestamp": 1587471857
    },
    {
        "content": "<p>I mean we could just say that the NaN result of a division (or any other NaN-producing operation) has non-det sign and payload, but is that sufficient to explain all behavior?</p>",
        "id": 194793989,
        "sender_full_name": "RalfJ",
        "timestamp": 1587471929
    },
    {
        "content": "<p>It's not specifically divisions, it can happen with essentially any FP computation that results in NaN</p>",
        "id": 194794082,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1587471977
    },
    {
        "content": "<p>While you could argue for a semantics where int-&gt;float bitcasts can't be removed because they have implications for per-use nondeterministism, realistically this is leading to far fewer actual miscompiles than int-ptr-casts, so I am not hopeful that this perspective will appeal to LLVM.</p>",
        "id": 194794400,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1587472175
    },
    {
        "content": "<p>So...I skipped this thread. <span class=\"user-mention\" data-user-id=\"124289\">@Hanna Kruppe</span> does this in any way represent a kind of \"blocking objection\" on your part to <a href=\"https://github.com/rust-lang/rust/issues/71269\" title=\"https://github.com/rust-lang/rust/issues/71269\">#71269</a>?</p>",
        "id": 194831433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587488197
    },
    {
        "content": "<p>Not at all. The thread started with a question related to that PR, but that was settled quickly and everything since then has been unrelated to saturating int-&gt;float casts.</p>",
        "id": 194831643,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1587488288
    }
]