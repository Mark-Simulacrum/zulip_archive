[
    {
        "content": "<p>Over the last few days, I've been thinking quite a bit about Rust's syntax for how \"bounds\" in general are written, that is the syntax in all the different places where we can express bounds; this includes trait/type/function definitions, TAIT definitions, trait aliases, (possibly generic) associated type definitions, GAT implementations, etc. (side-note: What is the accepted name for the location at which the value of a GAT is set in an <code>impl Type for Trait</code> block? In other words the counterpart of \"GAT definition\")</p>\n<p>One thing that stands out to me is that GAT definitions are currently the only place in the language where an <code>ItemBeingDefined: Trait</code> bound is not equivalent to a <code>where</code> clause. Now I understand how we got here; there were no <code>where</code> clauses for non-generic associated types because we did not need them, so writing the bounds as <code>: Trait</code> was convenient, not ambiguous or confusing, and did not create new syntax. These reasons don't all apply to GATs anymore, although some new ones definitely do. Consequently, I have some questions here:</p>\n<ol>\n<li>Has this been discussed in the past? I did not find anything in the GAT RFC or tracking issue, but possibly I missed it and/or the conversation was had elsewhere.</li>\n<li>Has this been tested on beginners? I figure most people currently learning GATs are those who already understand non-generic ATs, so this syntax is probably un-surprising to them, but I do not really expect for people to learn non-generic and then generic associated types in strict succession in the future. This seems particularly risky if we one day add ensures clauses, where beginners will then need to learn that <code>Item: Trait</code> means \"ensures\" in ATs and \"where\" everywhere else (at least until we add new features).</li>\n<li>There seem to be a number of conversations about syntax in this kind of domain at the moment. At the very least RPIT in traits and trait/bound/constraint alias syntax come to mind. Do we risk duplicating any such inconsistency there, or in other features we may want in the future?</li>\n</ol>\n<p>To be clear, I'm not actually that worried about any this, and honestly don't think it would be too bad even if we end up seeing that whatever we chose is a mistake. At the very least all of this is definitely very edition-fixable. That being said, we have a lot of ways to write bounds, and I think that focusing on achieving some global consistency among the relationship between syntax and meaning is a worthwhile goal.</p>",
        "id": 261996332,
        "sender_full_name": "Jake",
        "timestamp": 1637272345
    },
    {
        "content": "<p>So the actual separation of bounds and where clauses was done in <a href=\"https://github.com/rust-lang/rust/issues/73905\">#73905</a>, although I can't find the motivation documented. The fact that bounds can be used to prove things in trait selection predates this however, and is necessary because there isn't any other way to express these another way.</p>",
        "id": 261998957,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1637273539
    },
    {
        "content": "<p>Oh I'm not arguing that these things shouldn't be separate; clearly they must be, not just because this is necessary for the implementation but also because the semantics are different in the language. I'm pointing out that the current syntax does not reflect that</p>",
        "id": 262006915,
        "sender_full_name": "Jake",
        "timestamp": 1637277969
    },
    {
        "content": "<p>Also, thinking more about this, if we do ever get ensures clauses, there's a good argument to be made that RPIT and TAIT \"should\" be written as <code>{-&gt;,=} ensures Trait</code> instead of <code>{-&gt;,=} impl Trait</code>, reserving the latter for anonymous generics. I don't think changing that would actually gets us much so I'm not suggesting that at all, but putting it down as an example of how this kind of situation can be imperfect (especially cause this one in particular is definitely an issue for beginners)</p>",
        "id": 262026053,
        "sender_full_name": "Jake",
        "timestamp": 1637296411
    }
]