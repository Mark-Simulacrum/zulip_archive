[
    {
        "content": "<p>Hey <span class=\"user-group-mention\" data-user-group-id=\"1977\">@T-lang</span> I'd appreciate feedback on <a href=\"https://internals.rust-lang.org/t/explicit-negative-impls-to-fix-pin-soundness-hole/11587\" target=\"_blank\" title=\"https://internals.rust-lang.org/t/explicit-negative-impls-to-fix-pin-soundness-hole/11587\">this internals thread</a>, specifically on this question I raised there:</p>\n<blockquote>\n<p>I guess I don't want this thread to necessarily go too far down the design specifics -- at least not yet -- but I'd like to answer the question of \"how much of this design we feel we need to do and when\".</p>\n<p>My inclination, I think, is that we should immediately prototype a way to bar the \"evil\" DerefMut impl with minimal implications for stable code. Then we can assess how far down the rest of the design path to go -- we don't necessarily have to do it now, though it'd be good to start sketching out what a coherent overall design looks like around traits. (I'd like to be doing that in the wg-traits repository, probably, though till now the focus there has been on implementation questions primarily.)<br>\nliked this</p>\n</blockquote>",
        "id": 185063252,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578437234
    },
    {
        "content": "<p>Haven't read the internals thread yet -- from the meeting I didn't know if I favored the negative impl or unsafe trait approach, so I'll need to do more reading before I can answer</p>",
        "id": 185063342,
        "sender_full_name": "centril",
        "timestamp": 1578437317
    },
    {
        "content": "<p><em>prototyping</em> seems sensible though</p>",
        "id": 185063373,
        "sender_full_name": "centril",
        "timestamp": 1578437344
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> had a good post <a href=\"https://internals.rust-lang.org/t/unsoundness-in-pin/11311/113?u=nikomatsakis\" target=\"_blank\" title=\"https://internals.rust-lang.org/t/unsoundness-in-pin/11311/113?u=nikomatsakis\">summarizing a lot of what they said in the meeting</a></p>",
        "id": 185063486,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578437428
    },
    {
        "content": "<p>which also I think does a decent job of sketching what you wanted -- which is, what is the \"proof obligation\" of someone who invokes <code>new_unchecked</code></p>",
        "id": 185063539,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578437473
    },
    {
        "content": "<p>cool <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 185063557,
        "sender_full_name": "centril",
        "timestamp": 1578437488
    },
    {
        "content": "<p>anyway, I'll take a look at prototyping</p>",
        "id": 185063579,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578437518
    },
    {
        "content": "<p>yes, that post was also specifically a response to <span class=\"user-mention\" data-user-id=\"126931\">@centril</span>'s request for a writeup during the meeting ;)</p>",
        "id": 185090930,
        "sender_full_name": "RalfJ",
        "timestamp": 1578474279
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/68004\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/68004\">PR with preliminary support for negative impls</a> is posted.</p>",
        "id": 185114827,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578493042
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Integer</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Float</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">I32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">F32</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Integer</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">I32</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Float</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">F32</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Integer</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Float</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// Can I fix the overlapping error with negative impls?</span>\n<span class=\"c1\">// impl&lt;T: Integer&gt; !Float for T {}</span>\n<span class=\"c1\">// impl&gt;T: Float&gt; !Integer for T {}</span>\n</pre></div>",
        "id": 185203768,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578569993
    },
    {
        "content": "<p>Notice that right now, since there can be a <code>T: Integer + Float</code>, the two blanket impls for <code>T: Integer</code> and <code>T: Float</code> overlap.</p>",
        "id": 185203849,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578570050
    },
    {
        "content": "<p>However, if I was able to express that if a <code>T: Integer</code> is always <code>!Float</code> and that a <code>T: Float</code> is always <code>!Integer</code>, then these two blanket impls do not overlap.</p>",
        "id": 185203878,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578570079
    },
    {
        "content": "<p>Can I express that with the negative impls feature?</p>",
        "id": 185204025,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578570234
    },
    {
        "content": "<p>No.</p>",
        "id": 185249497,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578600047
    },
    {
        "content": "<p>Not as implemented, anyway.</p>",
        "id": 185249512,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578600056
    },
    {
        "content": "<p>Thanks, that clarifies the scope of the feature for me</p>",
        "id": 185291674,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578646024
    },
    {
        "content": "<p>Another observation in support of this: right now the <a href=\"https://doc.rust-lang.org/rustc/lints/listing/allowed-by-default.html#missing-copy-implementations\" title=\"https://doc.rust-lang.org/rustc/lints/listing/allowed-by-default.html#missing-copy-implementations\">https://doc.rust-lang.org/rustc/lints/listing/allowed-by-default.html#missing-copy-implementations</a> lint isn't all that useful, because it's fairly often on purpose.  Being able to have <code>impl !Copy for Foo</code> to explicitly decide against ever offering copy would be a nice improvement.</p>",
        "id": 194499383,
        "sender_full_name": "scottmcm",
        "timestamp": 1587157318
    }
]