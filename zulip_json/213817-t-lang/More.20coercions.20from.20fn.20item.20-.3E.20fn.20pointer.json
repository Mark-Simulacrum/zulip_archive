[
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hi lang team. I just got bitten by the fact that generic parameters won't coerce function items to function pointers. This is described pretty fully in this issue: <a href=\"https://github.com/rust-lang/rust/issues/62385\">https://github.com/rust-lang/rust/issues/62385</a>. </p>\n<p>The discussion there is mostly about improving the diagnostic, but it seems to me like a better fix would be to actually provide this coercion. I'd be happy to try to write up an RFC for that if that seems like a reasonable thing to do?</p>",
        "id": 199913775,
        "sender_full_name": "Nikhil Benesch",
        "timestamp": 1591380496
    },
    {
        "content": "<p>The problem is more of an implementation challenge</p>",
        "id": 199921865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591384548
    },
    {
        "content": "<p>It's connected to the system we use for coercions</p>",
        "id": 199921888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591384555
    },
    {
        "content": "<p>and it would not be all that easy to fix</p>",
        "id": 199921908,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591384561
    },
    {
        "content": "<p>so I don't think an RFC is really the required step</p>",
        "id": 199921990,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591384576
    },
    {
        "content": "<p>I don't really see any short-term fix to be honest, though I have some longer term thoughts</p>",
        "id": 199922015,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591384597
    },
    {
        "content": "<p>Glad I asked. I'm going to forward that sentiment to a comment on the issue unless you'd like to do so yourself <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>?</p>",
        "id": 199924290,
        "sender_full_name": "Nikhil Benesch",
        "timestamp": 1591385886
    },
    {
        "content": "<p>nope feel free ;)</p>",
        "id": 199926721,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591387123
    },
    {
        "content": "<p>Is there more up to date status on <a href=\"https://github.com/rust-lang/rust/issues/62530\">https://github.com/rust-lang/rust/issues/62530</a> anywhere? (It seems like that is the underlying issue at least?)</p>",
        "id": 199942353,
        "sender_full_name": "Nikhil Benesch",
        "timestamp": 1591397331
    },
    {
        "content": "<p>I am also getting bitten by this, as I'm working on a kernel mostly in rust, and I'm using a type erased array to store pointers to syscall functions.<br>\nNaturally, of course, I can't typecheck these functions for sanity without spending half the source file on macros to force an fn-item -&gt; fn-pointer coercions (I don't want to have to repeat the signature rust should know all about anyways).</p>",
        "id": 203814532,
        "sender_full_name": "Connor Horman",
        "timestamp": 1594719466
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"257758\">@Connor Horman</span> but you don't need to specify the signature, just <code>as fn(_, _) -&gt; _</code> should be enough</p>",
        "id": 203888489,
        "sender_full_name": "eddyb",
        "timestamp": 1594760880
    },
    {
        "content": "<p>also, what does \"type-erased\" look like in this case?</p>",
        "id": 203889257,
        "sender_full_name": "eddyb",
        "timestamp": 1594761272
    },
    {
        "content": "<p>there may be an easy way to make it all fit (also, most macros should be tiny for stuff like this I'd expect)</p>",
        "id": 203889319,
        "sender_full_name": "eddyb",
        "timestamp": 1594761309
    },
    {
        "content": "<p>fn(_, _)-&gt; _ would work for 2 parameter syscalls</p>",
        "id": 203912454,
        "sender_full_name": "Connor Horman",
        "timestamp": 1594782267
    },
    {
        "content": "<p>I'm erasing 0 to 6 parameter unsafe extern\"C\" functions with only specific types down to a Sync wrapper arround a *const ()</p>",
        "id": 203912476,
        "sender_full_name": "Connor Horman",
        "timestamp": 1594782308
    },
    {
        "content": "<p>what I meant is that you only need to account for arity, not the actual types</p>",
        "id": 203913202,
        "sender_full_name": "eddyb",
        "timestamp": 1594783510
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"257758\">@Connor Horman</span> wait doesn't <code>as *const ()</code> \"just work\"?</p>",
        "id": 203913207,
        "sender_full_name": "eddyb",
        "timestamp": 1594783536
    },
    {
        "content": "<p>or maybe <code>as usize</code></p>",
        "id": 203913212,
        "sender_full_name": "eddyb",
        "timestamp": 1594783541
    },
    {
        "content": "<p><code>as usize</code> should work for any fn type, yeah</p>",
        "id": 203913508,
        "sender_full_name": "Lokathor",
        "timestamp": 1594784000
    },
    {
        "content": "<p>The arity is the hard part. <code>as *const ()</code> would certainly work, however I want to typecheck the signature to make sure:</p>\n<ul>\n<li>Its extern\"C\"</li>\n<li>Its unsafe (doesn't necessarily need to check this, but I can live with adding unsafe to all my syscall functions</li>\n<li>Each parameter is either a primitive Integer, a special transparent wrapper arround a primitive integer, or a pointer in the calling process' paged memory. </li>\n<li>Each return type is also one of those.</li>\n</ul>",
        "id": 203946685,
        "sender_full_name": "Connor Horman",
        "timestamp": 1594815070
    },
    {
        "content": "<p>hmm</p>",
        "id": 203946707,
        "sender_full_name": "eddyb",
        "timestamp": 1594815094
    },
    {
        "content": "<p>how do you practically enforce that?</p>",
        "id": 203946738,
        "sender_full_name": "eddyb",
        "timestamp": 1594815118
    },
    {
        "content": "<p>trait implemented for valid <code>fn</code> pointers?</p>",
        "id": 203946791,
        "sender_full_name": "eddyb",
        "timestamp": 1594815131
    },
    {
        "content": "<p>oh and you can't have a <code>const fn</code> method to do the actual cast, I see :(</p>",
        "id": 203946837,
        "sender_full_name": "eddyb",
        "timestamp": 1594815164
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"257758\">@Connor Horman</span> so close <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=c5336a6215a47b1258011677bbead054\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=c5336a6215a47b1258011677bbead054</a></p>",
        "id": 203948743,
        "sender_full_name": "eddyb",
        "timestamp": 1594816337
    },
    {
        "content": "<p>this is the good 'ol \"create a ZST out of thin air\" trick</p>",
        "id": 203948772,
        "sender_full_name": "eddyb",
        "timestamp": 1594816359
    },
    {
        "content": "<p>AFAIK without a <code>const fn</code> with a trait bound, or <code>typeof(function_name)</code> (which we don't have), there's no way to access an associated <code>const</code> on a function definition type</p>",
        "id": 203948841,
        "sender_full_name": "eddyb",
        "timestamp": 1594816415
    },
    {
        "content": "<p>the upshot of this approach is that you can use closures and it will still work correctly lol</p>",
        "id": 203948918,
        "sender_full_name": "eddyb",
        "timestamp": 1594816450
    },
    {
        "content": "<p>I have a working version, but it is at best, a hack. I need to carry arround the number of parameters.</p>",
        "id": 203948939,
        "sender_full_name": "Connor Horman",
        "timestamp": 1594816465
    },
    {
        "content": "<p>as the <code>extern \"C\" fn wrapper</code> handles all of the ABI</p>",
        "id": 203948947,
        "sender_full_name": "eddyb",
        "timestamp": 1594816472
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"257758\">@Connor Horman</span> \"carry around\" like in a macro?</p>",
        "id": 203948960,
        "sender_full_name": "eddyb",
        "timestamp": 1594816482
    },
    {
        "content": "<p>Yeah</p>",
        "id": 203948967,
        "sender_full_name": "Connor Horman",
        "timestamp": 1594816489
    },
    {
        "content": "<p>that sounds like it avoids most of the complexity with my approach, yeah</p>",
        "id": 203948994,
        "sender_full_name": "eddyb",
        "timestamp": 1594816505
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"257758\">@Connor Horman</span> wait, is your equivalent of my <code>ErasedFn</code> created at compile-time, or runtime?</p>",
        "id": 203949141,
        "sender_full_name": "eddyb",
        "timestamp": 1594816564
    },
    {
        "content": "<p>for some reason I thought you'd have a static array but maybe I was imagining that</p>",
        "id": 203949161,
        "sender_full_name": "eddyb",
        "timestamp": 1594816578
    },
    {
        "content": "<p>Which is incredibly annoying, and materializing a fn type from the parameter count is even more dirty hacks.<br>\nAlso, its compile-time, in an array w/ no_mangle</p>",
        "id": 203949203,
        "sender_full_name": "Connor Horman",
        "timestamp": 1594816607
    },
    {
        "content": "<p>ah so you do hit the restrictions I assumed</p>",
        "id": 203949225,
        "sender_full_name": "eddyb",
        "timestamp": 1594816620
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"257758\">@Connor Horman</span> would it be enough if we had <code>as fn(..) -&gt; _</code> which inferred the arity?</p>",
        "id": 203949291,
        "sender_full_name": "eddyb",
        "timestamp": 1594816666
    },
    {
        "content": "<p>although that's a bit too close to <code>fn(...)</code> for comfort, which is a C variadic  :P</p>",
        "id": 203949350,
        "sender_full_name": "eddyb",
        "timestamp": 1594816687
    },
    {
        "content": "<p>Possibly, though these coercions would be nicer, as its honestly an ergonomics problem that I can't use the name of a function as a generic parameter with a trait bound implemented on the corresponding fn-pointer type</p>",
        "id": 203949470,
        "sender_full_name": "Connor Horman",
        "timestamp": 1594816779
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/213817-t-lang/topic/More.20coercions.20from.20fn.20item.20-.3E.20fn.20pointer/near/203949291\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"257758\">Connor Horman</span> would it be enough if we had <code>as fn(..) -&gt; _</code> which inferred the arity?</p>\n</blockquote>\n<p>Something similar for closures is proposed in <a href=\"https://github.com/rust-lang/rfcs/pull/2956\">https://github.com/rust-lang/rfcs/pull/2956</a></p>",
        "id": 203949601,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594816840
    },
    {
        "content": "<p>Variadic Generics would also solve the problem, though I'd expect its further off than anything to do with this.</p>",
        "id": 203949639,
        "sender_full_name": "Connor Horman",
        "timestamp": 1594816865
    },
    {
        "content": "<p><a href=\"https://github.com/LightningCreations/lcnix/blob/master/kernel/common/src/syscall.rs\">https://github.com/LightningCreations/lcnix/blob/master/kernel/common/src/syscall.rs</a> is the specific use case.</p>",
        "id": 203949750,
        "sender_full_name": "Connor Horman",
        "timestamp": 1594816927
    },
    {
        "content": "<p>yeah I'm specifically talking about avoiding a dependency on VG</p>",
        "id": 203950185,
        "sender_full_name": "eddyb",
        "timestamp": 1594817236
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> that one is easier, assuming it doesn't do inference and just relies on the same thing that deduces <code>for&lt;...&gt;</code> lifetime parameterization for closures</p>",
        "id": 203950246,
        "sender_full_name": "eddyb",
        "timestamp": 1594817277
    },
    {
        "content": "<p>heh I found the relevant part in the RFC text, nice</p>",
        "id": 203950352,
        "sender_full_name": "eddyb",
        "timestamp": 1594817339
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> I've no useful input on easiness or implementation or any of that. My main distaste with that RFC is that you can't do something similar with functions, but your proposal combined with the RFC at least makes the two the smallest bit more similar.</p>",
        "id": 203950489,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594817404
    },
    {
        "content": "<p>you can already not do <em>many</em> things with functions like you can with closures</p>",
        "id": 203950517,
        "sender_full_name": "eddyb",
        "timestamp": 1594817426
    },
    {
        "content": "<p>I am aware.</p>",
        "id": 203950523,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594817432
    },
    {
        "content": "<p>this is just one more thing that would require a much heavier extension (VG) at the function level</p>",
        "id": 203950537,
        "sender_full_name": "eddyb",
        "timestamp": 1594817443
    },
    {
        "content": "<p>I apologize for interrupting your discussion. I will endeavor to do it less in the future.</p>",
        "id": 203950563,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594817468
    },
    {
        "content": "<p>lol no this is great</p>",
        "id": 203950581,
        "sender_full_name": "eddyb",
        "timestamp": 1594817481
    },
    {
        "content": "<p>I'm leaving a comment on the RFC showing my support for it</p>",
        "id": 203950597,
        "sender_full_name": "eddyb",
        "timestamp": 1594817490
    },
    {
        "content": "<p>it's just sadly less easy to do the <code>as fn(..) -&gt; _</code> thing because unlike closures, it has to be represented in the typesystem</p>",
        "id": 203950628,
        "sender_full_name": "eddyb",
        "timestamp": 1594817512
    },
    {
        "content": "<p>(or we can cheat, which is closer to closures)</p>",
        "id": 203950677,
        "sender_full_name": "eddyb",
        "timestamp": 1594817524
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> <a href=\"https://github.com/rust-lang/rfcs/pull/2956#discussion_r455028565\">https://github.com/rust-lang/rfcs/pull/2956#discussion_r455028565</a></p>",
        "id": 203951091,
        "sender_full_name": "eddyb",
        "timestamp": 1594817772
    }
]