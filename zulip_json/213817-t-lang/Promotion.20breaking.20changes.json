[
    {
        "content": "<p>Over the years, we kept having trouble with promotion again and again. The first I saw is <a href=\"https://github.com/rust-lang/rust/issues/50814\">this soundness issue</a> and since then we kept accumulating special cases in various parts of the compiler. Also see <a href=\"https://github.com/rust-lang/const-eval/issues/19\">why we cannot promote arbitrary <code>const fn</code> calls</a>, and <a href=\"https://github.com/rust-lang/const-eval/issues/53\">this \"meta issue\"</a>.<br>\nI long wanted to restrict promotion to hopefully stop those issues. <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  suggested to only promote expressions that would also be permitted as patterns, but I think that was just based on \"these seem like simple expressions\". This week I think I finally understood what the underlying property is that makes promotion so problematic: evaluating a promoted can fail, but then we still have to go on with compilation! That's rather nasty as it means every consumer needs to figure out a way to deal with CTFE failure, and go on even though there's no data to go on with. But this means that <code>&amp;(SOME_CONST+15)</code> is fine (it's infallible) even though it is not a pattern, making it more realistic that we could actually achieve this for all editions. It also gives us a clear condition for which functions would be fine to mark with <code>#[rustc_promotable]</code>.</p>\n<p>So I think we should work towards making all CTFE failures hard errors, and I started <a href=\"https://hackmd.io/7DekSpq3R-KgizegdAWO3Q\">putting down some notes for that</a>. However, this will require some breaking changes around promotion:</p>\n<ul>\n<li>We should no longer promote things like <code>&amp;(1/0)</code> or <code>&amp; [2][12]</code>. When promoting fallible operations like division, modulo, and indexing (and I <em>think</em> those are all the fallible operations we promote, but I might have missed something), then we have to make sure that this concrete promoted will not fail -- we need to check for div-by-0 and do the bounds check before accepting an expression for promotion. If that is too breaking, a backup plan might be to somehow treat this more like <code>CheckedAdd</code>, where we promote the addition but not the assertion, which does ensure that the promoted never fails to evaluate even on overflow. (But I think that only works for divison/modulo, where we could return a \"dummy value\"; it doesn't work for indexing in general.)</li>\n<li>We have to <a href=\"https://github.com/rust-lang/rust/issues/75586\">treat <code>const fn</code> like <code>fn</code> for promotion</a>, but I think we have to do that anyway. The fact that we don't is a bug that happened because we never spelled out a design for any of this, so the only way to notice such problems was to look at the code, which not many people did (I did not).</li>\n</ul>\n<p>In both of these cases, if the user really needs a <code>static</code> lifetime, the fix is to use <a href=\"https://github.com/rust-lang/rfcs/pull/2920\">a const block</a>.</p>\n<p>And then there's an orthogonal breaking change that we need to <a href=\"https://github.com/rust-lang/rust/issues/75556\">fix mutable refs in <code>static mut</code></a>.</p>\n<p>So, we have three separate breaking changes around promotion, 2 of which are bugfixes that I think we should do anyway. What do you think is the best way to stage this, and what is the right process (RFC or MCP or whatever)?<br>\nCc <span class=\"user-group-mention\" data-user-group-id=\"1916\">@WG-const-eval</span></p>",
        "id": 207063973,
        "sender_full_name": "RalfJ",
        "timestamp": 1597571224
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I am supportive of this effort.  We shouldn't get <em>too</em> hung up on procedure, though I think there is an interesting question. If you want to convert the above text into an MCP, that'd be good, and I think we could go forward from there. The real question in my mind is whether you + maybe others are prepared to try and \"see it through\", presuming you had lang-team support? i.e., do the experiments to define promotion, figure out the impact, author the RFC, and land the change? I think it's about the right size of work that I'd like to see the lang team tracking (similar, to my mind, to things like ffi-unwind and other projects).</p>\n<p>It seems like conceptually this also fits into \"const evaluation\", but partly that's because the const evaluation group is not really tied to a specific project but a bit \"higher level\".</p>",
        "id": 207397483,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597837733
    },
    {
        "content": "<p>Also it seems clear that this cannot be done across an edition boundary</p>",
        "id": 207397502,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597837743
    },
    {
        "content": "<p>Yes I'd be willing to help see this through. I am a bit confused that you first mention an MCP and then an RFC, but either way works for me. ;)</p>\n<blockquote>\n<p>It seems like conceptually this also fits into \"const evaluation\"</p>\n</blockquote>\n<p>Yes I think it does, that's how I am involved in the first place.^^ The main goal of this is to clean up our const evaluation technical debt in the compiler. That's also why editions don't help -- if we have to keep the old code around, not much is won.</p>",
        "id": 207397757,
        "sender_full_name": "RalfJ",
        "timestamp": 1597837922
    },
    {
        "content": "<p>Oh, well, MCP is just a mechanism to agree that we want an RFC, essentially</p>",
        "id": 207397803,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597837962
    },
    {
        "content": "<p>(in lang team, anyway)</p>",
        "id": 207397814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597837970
    },
    {
        "content": "<p>oh. different from t-compiler MCP then I guess.</p>",
        "id": 207397818,
        "sender_full_name": "RalfJ",
        "timestamp": 1597837975
    },
    {
        "content": "<p>yeah I've been wanting to change the terminology</p>",
        "id": 207397824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597837984
    },
    {
        "content": "<p>it's evident that my attempt to unify was a mistake</p>",
        "id": 207397827,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597837989
    },
    {
        "content": "<p>\"project proposal\"</p>",
        "id": 207397828,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597837995
    },
    {
        "content": "<p>(technically, depending on the proposal, it may not require an RFC)</p>",
        "id": 207397841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597838010
    },
    {
        "content": "<p>I just think this does require an RFC</p>",
        "id": 207397847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597838016
    },
    {
        "content": "<p>both because it's a breaking change and because we should force ourselves to write up the rules/logic</p>",
        "id": 207397856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597838028
    },
    {
        "content": "<p>we don't necessarily <em>need</em> an MCP, but it'd be good to file one because then it gets on the lang-team agenda to discuss etc</p>",
        "id": 207397909,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597838046
    },
    {
        "content": "<p>(but I meant it literally when I said the above text would suffice)</p>",
        "id": 207397941,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597838073
    },
    {
        "content": "<p>okay, fair. I expected this would take a while. part of me wants to rush this to avoid accumulating further incompatible code out there, but that's not really appropriate either. (I don't think there is a good way to do future-incompat warnings here.)</p>",
        "id": 207397948,
        "sender_full_name": "RalfJ",
        "timestamp": 1597838082
    },
    {
        "content": "<p>I can put turning the above text into an MCP onto my list. It would help to have an MCP template or examples or so.</p>",
        "id": 207398010,
        "sender_full_name": "RalfJ",
        "timestamp": 1597838135
    },
    {
        "content": "<p>one other thing is</p>",
        "id": 207398140,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597838223
    },
    {
        "content": "<p>there is a template</p>",
        "id": 207398152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597838229
    },
    {
        "content": "<p>one sec</p>",
        "id": 207398157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597838236
    },
    {
        "content": "<p>actually I already renamed the templaet</p>",
        "id": 207398176,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597838258
    },
    {
        "content": "<p>to project proposal :)</p>",
        "id": 207398178,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597838260
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/lang-team/issues/new?assignees=&amp;labels=major-change%2C+T-lang&amp;template=project_proposal.md&amp;title=%28My+project+proposal%29\">https://github.com/rust-lang/lang-team/issues/new?assignees=&amp;labels=major-change%2C+T-lang&amp;template=project_proposal.md&amp;title=%28My+project+proposal%29</a></p>",
        "id": 207398179,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597838261
    },
    {
        "content": "<p>what I was going to say was:</p>",
        "id": 207398184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597838266
    },
    {
        "content": "<p>we could move this straight to a charter even, since I would be happy to serve as liaison</p>",
        "id": 207398234,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597838284
    },
    {
        "content": "<p>but also that once we set it up, we can start landing code, so we could start warnings etc</p>",
        "id": 207398246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597838302
    },
    {
        "content": "<p>we'll probably need them anyway I imagine?</p>",
        "id": 207398254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597838314
    },
    {
        "content": "<p>how much work do you think the impl is?</p>",
        "id": 207398263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597838319
    },
    {
        "content": "<p>I should re-read what you wrote above :)</p>",
        "id": 207398286,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597838340
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/Promotion.20breaking.20changes/near/207398246\">said</a>:</p>\n<blockquote>\n<p>but also that once we set it up, we can start landing code, so we could start warnings etc</p>\n</blockquote>\n<p>as I said I don't think there's a good way to do future-incompat warnings here... <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> might have some ideas</p>",
        "id": 207398435,
        "sender_full_name": "RalfJ",
        "timestamp": 1597838447
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/Promotion.20breaking.20changes/near/207398263\">said</a>:</p>\n<blockquote>\n<p>how much work do you think the impl is?</p>\n</blockquote>\n<p>except for whatever we could maybe do for future-compat, the things I have in mind are not much work. what is unclear is if those things are good enough to keep the amount of regressions small.</p>",
        "id": 207398505,
        "sender_full_name": "RalfJ",
        "timestamp": 1597838498
    },
    {
        "content": "<p>I see</p>",
        "id": 207398589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597838545
    },
    {
        "content": "<p>that will take a few crater runs, and with the size of the crater queue right now I was going to wait before preparing those</p>",
        "id": 207398592,
        "sender_full_name": "RalfJ",
        "timestamp": 1597838547
    },
    {
        "content": "<p>ok, I have to run right now -- I think getting a PR ready for a crater run would be good, I do think an RFC makes sense, and I think I'd prefer to just try and use the new procedure because if it's too ponderous...we should fix that</p>",
        "id": 207398664,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597838599
    },
    {
        "content": "<p>but basically I'm trying to get to the point where we have a \"project\" for the various things that we're doing, and that we file \"project proposals\" so people can watch when new ideas come up, and we process those proposals fairly quickly (within a week or two in the triage meeting, at worst)</p>",
        "id": 207398763,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597838653
    },
    {
        "content": "<p>see also <a href=\"https://lang-team.rust-lang.org/project_groups.html\">this page</a></p>",
        "id": 207398791,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597838684
    },
    {
        "content": "<p>sure we can test-run the procedure^^ I was going to wait for <a href=\"https://github.com/rust-lang/rust/pull/75502\">https://github.com/rust-lang/rust/pull/75502</a> to get results before preparing the next experiment</p>",
        "id": 207398796,
        "sender_full_name": "RalfJ",
        "timestamp": 1597838687
    },
    {
        "content": "<p>I'll also be out for now, will come back after my PhD defense</p>",
        "id": 207398982,
        "sender_full_name": "RalfJ",
        "timestamp": 1597838833
    },
    {
        "content": "<p>I believe that creating future incompat warnings is not easy at all. Since promotion happens before borrowck when we don't know yet whether we want to promote, reducing the scope of what we promote will immediately cause breaking changes (things not having the <code>'static</code> lifetime anymore). Now what we could do is to not remove the runtime code that we promoted and instead store the local that an <code>Operand::Constant</code> would have read in case it would not have gotten promoted in the <code>mir::Constant</code>. I'm not sure how we teach borrowck to run both possibilities (promotion/no promotion) at each promotion site, but if we can figure that out, we can make the <code>no promotion</code> emit a future incompat warning as we desire). A straight forward solution would be to run borrowck twice, similar to nll compare mode, and have the first run be the regular run, and if there were no errors, run it again, but this time by treating all of those promotion constants as if they were <code>Operand::Copy</code> or <code>Operand::Move</code>.</p>",
        "id": 207403438,
        "sender_full_name": "oli",
        "timestamp": 1597841791
    },
    {
        "content": "<p>What would be an example of code which compiles both with and without promotion?</p>",
        "id": 207403718,
        "sender_full_name": "lcnr",
        "timestamp": 1597841925
    },
    {
        "content": "<p>Because I would be interested in the impact of always emitting a lint when we do a deprecated promotion</p>",
        "id": 207404434,
        "sender_full_name": "lcnr",
        "timestamp": 1597842302
    },
    {
        "content": "<p><code>let x = &amp;(1 + 2);</code> works just fine, but <code>let x: &amp;'static i32 = &amp;(1 + 2);</code> doesn't if you don't promote</p>",
        "id": 207405407,
        "sender_full_name": "oli",
        "timestamp": 1597842852
    },
    {
        "content": "<p>now this <code>'static</code> lifetime may be written somewhere completely different depending on how much inference can manage to propagate things</p>",
        "id": 207405454,
        "sender_full_name": "oli",
        "timestamp": 1597842885
    },
    {
        "content": "<p>yeah <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> makes sense, so running borrowck twice is probably required. Thanks</p>",
        "id": 207405524,
        "sender_full_name": "lcnr",
        "timestamp": 1597842930
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> hmm so the connection to <code>const { }</code> expressions is obvious but I had forgotten about it.</p>",
        "id": 207418907,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597849229
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/Promotion.20breaking.20changes/near/207418907\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> hmm so the connection to <code>const { }</code> expressions is obvious but I had forgotten about it.</p>\n</blockquote>\n<p>yes, that's why I was hoping to get that RFC merged and implemented ASAP so we have something to tell affected crate authors ;)</p>",
        "id": 207721180,
        "sender_full_name": "RalfJ",
        "timestamp": 1598097558
    },
    {
        "content": "<p>(I still plan to write that MCP proposal, but have been busy with other stuff, sorry.)</p>",
        "id": 208682981,
        "sender_full_name": "RalfJ",
        "timestamp": 1598965200
    },
    {
        "content": "<p>Crater results came back for <a href=\"https://github.com/rust-lang/rust/pull/75502\">https://github.com/rust-lang/rust/pull/75502</a> and they are looking good, so I propose we go ahead and merge this. Can some start the FCP process? :)</p>",
        "id": 208683074,
        "sender_full_name": "RalfJ",
        "timestamp": 1598965230
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> done</p>",
        "id": 208880961,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599077586
    },
    {
        "content": "<p>Crater results for <a href=\"https://github.com/rust-lang/rust/pull/75585\">https://github.com/rust-lang/rust/pull/75585</a> came back without a single true regression. :)<br>\nWhat's next for that PR -- does it require FCP or can it just land?</p>",
        "id": 209265544,
        "sender_full_name": "RalfJ",
        "timestamp": 1599464099
    },
    {
        "content": "<p>I submitted a project proposal: <a href=\"https://github.com/rust-lang/lang-team/issues/58\">https://github.com/rust-lang/lang-team/issues/58</a></p>",
        "id": 212224857,
        "sender_full_name": "RalfJ",
        "timestamp": 1601820543
    },
    {
        "content": "<p>the next PR in the series -- removing some special case that nobody can really explain why it was added, that's rather hard to understand what it does (and why the code appears twice), that has been ported over each refactor for a few years... and that according to crater nobody even needs: <a href=\"https://github.com/rust-lang/rust/pull/78363\">https://github.com/rust-lang/rust/pull/78363</a><br>\nwould be good to get FCP started. :) I am currently rebasing it to make the test suite green.</p>",
        "id": 216791156,
        "sender_full_name": "RalfJ",
        "timestamp": 1605444921
    },
    {
        "content": "<p>Done.</p>",
        "id": 216808638,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605467601
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 216809590,
        "sender_full_name": "RalfJ",
        "timestamp": 1605468941
    }
]