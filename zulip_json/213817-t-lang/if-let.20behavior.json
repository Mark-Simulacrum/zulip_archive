[
    {
        "content": "<p>When I used <code>if let</code> with locks I ran into a surprise as this is a deadlock:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">RwLock</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">RwLock</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"nb\">None</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"X={x}\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">*</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Value {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I know it is transformed into a <code>match</code> statement, but from my opinion it's still not expected.<br>\nWould it be possible to fix that, or is this too much effort?</p>",
        "id": 278460652,
        "sender_full_name": "Peter Sonntag",
        "timestamp": 1649586723
    },
    {
        "content": "<p>It will be a breaking change for people relying on the temporaries to survive (though I'm not sure if this has a real use case).</p>",
        "id": 278460827,
        "sender_full_name": "Chayim Refael Friedman",
        "timestamp": 1649586970
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">PrintOnDrop</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(()))</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"inside `if`\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"inside `else`\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Now prints (<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=2816b3f8dd70ddde223ef0dd2ab86e45\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=2816b3f8dd70ddde223ef0dd2ab86e45</a>):</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>inside `else`\nPrintOnDrop\n</code></pre></div>\n<p>With this change will print:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>PrintOnDrop\ninside `else`\n</code></pre></div>",
        "id": 278460952,
        "sender_full_name": "Chayim Refael Friedman",
        "timestamp": 1649587152
    },
    {
        "content": "<p>Dropping temporaries at the end of the <code>if</code> block will change drop order. This is a visible change, and thus breaking change.</p>",
        "id": 278461161,
        "sender_full_name": "Chayim Refael Friedman",
        "timestamp": 1649587527
    },
    {
        "content": "<p>But beside of the breaking change, what would be the least surprise behavior?</p>",
        "id": 278461239,
        "sender_full_name": "Peter Sonntag",
        "timestamp": 1649587641
    },
    {
        "content": "<p>One way to avoid such issues is to always explicitly <code>drop(a)</code> any locks to make it explicit when they are unlocked</p>",
        "id": 278461240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649587642
    },
    {
        "content": "<blockquote>\n<p>But beside of the breaking change, what would be the least surprise behavior?</p>\n</blockquote>\n<p>I'm not saying yours is not better, but being a breaking change, this is pretty much impossible. Maybe in edition 2024, like we did with captures in closures.</p>",
        "id": 278461295,
        "sender_full_name": "Chayim Refael Friedman",
        "timestamp": 1649587699
    },
    {
        "content": "<p>Do you know if there is a ticket for that? If not, would it make sense to create one?</p>",
        "id": 278461310,
        "sender_full_name": "Peter Sonntag",
        "timestamp": 1649587744
    },
    {
        "content": "<p>there was a discussion about this not too long ago</p>",
        "id": 278461320,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649587767
    },
    {
        "content": "<p>If you make the algorithm more clever, it will be even harder to guess what it will do</p>",
        "id": 278461328,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649587789
    },
    {
        "content": "<p><a href=\"#narrow/stream/243200-t-lang.2Fmajor-changes/topic/MCP.3A.20Allowing.20the.20compiler.20to.20eagerly.20drop.20val.E2.80.A6.20lang-team.2386\">https://rust-lang.zulipchat.com/#narrow/stream/243200-t-lang.2Fmajor-changes/topic/MCP.3A.20Allowing.20the.20compiler.20to.20eagerly.20drop.20val.E2.80.A6.20lang-team.2386</a></p>",
        "id": 278461465,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649587944
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> : I see, thanks.</p>",
        "id": 278461731,
        "sender_full_name": "Peter Sonntag",
        "timestamp": 1649588392
    },
    {
        "content": "<p>But this is about allowing the compiler to drop at any point, while <span class=\"user-mention\" data-user-id=\"247323\">@Peter Sonntag</span> only wants to drop at the end of the <code>if let</code> block instead of the <code>else</code>, am I wrong?</p>",
        "id": 278461867,
        "sender_full_name": "Chayim Refael Friedman",
        "timestamp": 1649588489
    },
    {
        "content": "<p>that's still not lexical scoped drops, you are dropping the guard when it stops being live</p>",
        "id": 278461954,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649588588
    },
    {
        "content": "<p>because there is no way you can write that such that the guard is not in scope at the point you want it to be dropped</p>",
        "id": 278461959,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649588613
    },
    {
        "content": "<p>using <code>drop(guard)</code> sidesteps all these issues and is what I would want to see if I was in code review</p>",
        "id": 278462006,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649588666
    },
    {
        "content": "<p>How would a <code>drop(guard)</code> work in my example?</p>",
        "id": 278462381,
        "sender_full_name": "Peter Sonntag",
        "timestamp": 1649589212
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">RwLock</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">RwLock</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"nb\">None</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">guard</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">guard</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"X={x}\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"n\">guard</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">*</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Value {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 278463004,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649590188
    },
    {
        "content": "<p>Ah, thanks a lot.</p>",
        "id": 278463065,
        "sender_full_name": "Peter Sonntag",
        "timestamp": 1649590250
    },
    {
        "content": "<p>Note that the guard is not dropped in the <code>if</code> case, so you still have an outstanding read guard on the last <code>println!</code>  line</p>",
        "id": 278463067,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649590256
    },
    {
        "content": "<p>which is fine for RwLock but you can <code>drop(guard)</code> in the <code>if</code> case as well to avoid this</p>",
        "id": 278463082,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649590283
    },
    {
        "content": "<p>or even hold on to the old read guard like this</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">RwLock</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">RwLock</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"nb\">None</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">guard</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">guard</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"X={x}\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"n\">guard</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">*</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">guard</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Value {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">guard</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 278463130,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649590323
    },
    {
        "content": "<p>That's not holding onto the old read guard, that's dropping the guard and acquiring a new one, which means the lock is briefly not held. That would be semantically important if the lock were shared.</p>",
        "id": 278479224,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1649611037
    },
    {
        "content": "<p>I mean in the <code>if</code> case the guard is held. In the <code>else</code> case we have to drop the guard so we can write to it; you could avoid the possible race while the lock is not held if there was a way to convert a write guard directly into a read guard, but I don't know if that exists</p>",
        "id": 278479658,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649611474
    },
    {
        "content": "<p>parkinglot has an upgradable read guard, but std doesn't</p>",
        "id": 278485329,
        "sender_full_name": "Christopher Durham (CAD97)",
        "timestamp": 1649618798
    },
    {
        "content": "<p>TL;DR an upgradable read: acquires a read lock, puts a block on <em>new</em> read locks being acquired. When upgraded, blocks until all outstanding read locks are released.</p>",
        "id": 278485373,
        "sender_full_name": "Christopher Durham (CAD97)",
        "timestamp": 1649618869
    },
    {
        "content": "<p>Basically an optimization of the (read lock) (check) (drop lock) (write lock) (check) (write) to not require waiting for read locks to all drop for the second lock just for the check to skip the write</p>",
        "id": 278485431,
        "sender_full_name": "Christopher Durham (CAD97)",
        "timestamp": 1649618943
    },
    {
        "content": "<p>Wow how did I not know that</p>",
        "id": 278486417,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1649620181
    },
    {
        "content": "<p>The lock APIs should really have been scoped:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">read_locked</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">it</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"X = {x}\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kc\">false</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kc\">true</span><span class=\"w\"></span>\n<span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">write_locked</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">it</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>That way it would be way clearer when the lock is dropped each time (at the end of the <code>})</code> scope).</p>\n<hr>\n<p>But FWIW, in this instance the very pattern is prone to TOCTOU: you ought to start with a <code>.write()</code> or upgradable-to-<code>write</code> lock to begin with, so as not to release it in between the check and and the overwrite.</p>\n<ul>\n<li>But I guess for the <code>RefCell</code> equivalent this counter-argument would not hold, so the question still deserves some attention</li>\n</ul>",
        "id": 278535622,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1649674004
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/213817-t-lang/topic/if-let.20behavior/near/278461465\">said</a>:</p>\n<blockquote>\n<p><a href=\"#narrow/stream/243200-t-lang.2Fmajor-changes/topic/MCP.3A.20Allowing.20the.20compiler.20to.20eagerly.20drop.20val.E2.80.A6.20lang-team.2386\">https://rust-lang.zulipchat.com/#narrow/stream/243200-t-lang.2Fmajor-changes/topic/MCP.3A.20Allowing.20the.20compiler.20to.20eagerly.20drop.20val.E2.80.A6.20lang-team.2386</a></p>\n</blockquote>\n<p>I don't think the arguments against that MCP apply here.</p>\n<p>The argument against the MCP was that making drop placement depend on lifetime analysis is non-obvious and introduces spooky action at a distance.</p>",
        "id": 278535812,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1649674177
    },
    {
        "content": "<p>In this case, the rules could be a lot more straightforward: \"If a match arm binds to the match expression, drop the expression at the beginning of the block, else drop at the end of the block\".</p>",
        "id": 278535955,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1649674290
    },
    {
        "content": "<p>So:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">get_foobar</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">FooBar</span>::<span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"c1\">// early drop</span>\n<span class=\"w\">    </span><span class=\"n\">FooBar</span>::<span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"n\">var</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"c1\">// late drop</span>\n<span class=\"w\">    </span><span class=\"n\">var</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"w\"> </span><span class=\"n\">FooBar</span>::<span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"c1\">// late drop</span>\n<span class=\"w\">    </span><span class=\"n\">FooBar</span>::<span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"c1\">// early drop</span>\n<span class=\"w\">    </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"c1\">// early drop</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 278536446,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1649674648
    },
    {
        "content": "<p>Thus <code>*a.read().unwrap()</code> is automatically dropped before the else in the initial example.</p>",
        "id": 278536537,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1649674711
    },
    {
        "content": "<p>The lock APIs aren't scoped due to the question how the API should look like vis-a-vis lock poisoning</p>",
        "id": 278539403,
        "sender_full_name": "The 8472",
        "timestamp": 1649676483
    }
]