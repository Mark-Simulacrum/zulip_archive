[
    {
        "content": "<p>I don't know whether this would be a good idea -- it might be another <code>?Trait</code>, which we've said we don't want -- but I wanted to explore it anyway to see where it goes.</p>\n<p>What might it look like to have it so that</p>\n<ul>\n<li><code>Drop</code> impls get the \"panic becomes abort\" behaviour by default, but they can opt out of it.  (<code>Drop</code> is already quite magic, so an attribute or something could feasibly do this, I think.)</li>\n<li>There's some sort of marker trait so that <code>dyn SomeTrait + DropCannotPanic</code> or <code>trait MyTrait : DropCannotPanic {}</code> could work.</li>\n<li>Containers and such that don't want to support panic-in-drop can state that explicitly, such that there's no toolchain/strategy-flag hazard</li>\n</ul>\n<p>I could argue either way for the default -- since <em>safe</em> code can always handle this fine (assuming any unsafe they use is correct), in some sense it would be fine for <code>&lt;T&gt;</code> to include can-panic types.  But in order to not break existing generic code using <code>Vec&lt;T&gt;</code> the opposite would be better, where <code>T</code> defaults to no-panic-on-drop and you'd have to opt-in to code which <em>can</em> panic.  But that's a <code>?DropCannotPanic</code>, which is bad too...</p>",
        "id": 262630566,
        "sender_full_name": "scottmcm",
        "timestamp": 1637781639
    },
    {
        "content": "<p>I stand by my point that most people won't even notice the change in panic-in-drop. I don't think this justifies adding an auto-trait and all the baggage that comes with it.</p>",
        "id": 262631609,
        "sender_full_name": "Amanieu",
        "timestamp": 1637782324
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> I agree. We have declined to add <code>?Trait</code>s for much more important things people <em>actually</em> want to do.</p>",
        "id": 262633506,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637783519
    },
    {
        "content": "<p>I do think that's one potential shape for a completely non-breaking change. But I think we don't have to make this change completely non-breaking if nobody will actually be broken.</p>",
        "id": 262633592,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637783557
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/213817-t-lang/topic/Exploring.3A.20trait-guarded.20no-panic-in-drop.3F/near/262631609\">said</a>:</p>\n<blockquote>\n<p>I don't think this justifies adding [...]</p>\n</blockquote>\n<p>TBH, I probably agree.  I still want to explore what those various possible solutions might look like, though, to be better able to weigh the different points on the spectrum.</p>",
        "id": 262636271,
        "sender_full_name": "scottmcm",
        "timestamp": 1637785272
    },
    {
        "content": "<p>And while I acknowledge these aren't all that comparable, it does feel a bit odd to be moving away from abort for memory allocation failures yet towards abort for panics in drop.  I could easily imagine that unsafe code that's not handling panicking drop correctly is also not prepared to handle panicking allocations.</p>",
        "id": 262637051,
        "sender_full_name": "scottmcm",
        "timestamp": 1637785735
    }
]