[
    {
        "content": "<p>There's something special on the <code>Box</code> type in the standard library: </p>\n<p>for a variable <code>boxed</code> with type <code>Box&lt;T&gt;</code>,<br>\nwith <code>let val = *boxed;</code> this will always compile, but what it does depends on whether <code>T</code> is a non-<code>Copy</code> type.</p>\n<p>If it is a <code>Copy</code> type, this uses <code>Deref</code> to create a &amp;T and copies the value.</p>\n<p><strong>If it is not, this triggers something special: it moves the value out and de-allocates the box allocation. This behavior is currently stable and not seen on other types.</strong></p>\n<p>I feel this behavior is rather ad-hoc, hard to use correctly, hard-to-find for beginners and doesn't scale well to other types. Maybe it is a good idea to eventually deprecate this behavior? I'm curious what others think of this. Thanks!</p>",
        "id": 221277990,
        "sender_full_name": "Charles Lew",
        "timestamp": 1609404995
    },
    {
        "content": "<p>Removing this would make it impossible to call <code>Box&lt;dyn FnOnce()&gt;</code> as that relies on moving the closure out of the box.</p>",
        "id": 221278059,
        "sender_full_name": "bjorn3",
        "timestamp": 1609405111
    },
    {
        "content": "<p>In addition I have used this behavior on multiple occasions to move out of a <code>Box&lt;dyn Any&gt;</code> after downcasting.</p>",
        "id": 221278068,
        "sender_full_name": "bjorn3",
        "timestamp": 1609405158
    },
    {
        "content": "<p>That's using unsized rvalues unstable feature, right?</p>",
        "id": 221278072,
        "sender_full_name": "Charles Lew",
        "timestamp": 1609405187
    },
    {
        "content": "<p><code>impl FnOnce() for Box&lt;dyn FnOnce()&gt;</code> internally uses the unsized rvalue feature, but the impl is usable on stable.</p>",
        "id": 221278146,
        "sender_full_name": "bjorn3",
        "timestamp": 1609405270
    },
    {
        "content": "<p>yes, i feel it could use some special handling, since it's an implementation detail.</p>",
        "id": 221278201,
        "sender_full_name": "Charles Lew",
        "timestamp": 1609405330
    },
    {
        "content": "<p>So you want to remove special handling in one very useful case and add special handling in another much less general case?</p>",
        "id": 221278227,
        "sender_full_name": "bjorn3",
        "timestamp": 1609405386
    },
    {
        "content": "<p>Not really, i just want to deprecate directly using it from the users.</p>",
        "id": 221278334,
        "sender_full_name": "Charles Lew",
        "timestamp": 1609405519
    },
    {
        "content": "<p>I also want to add a <code>Box::into_inner</code> function for general (sized) use.</p>",
        "id": 221278388,
        "sender_full_name": "Charles Lew",
        "timestamp": 1609405567
    },
    {
        "content": "<p>the <a href=\"https://github.com/rust-lang/rust/pull/80438\">implementation</a> is here, i'm not totally sure how to make this function support unsized rvalues <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 221278586,
        "sender_full_name": "Charles Lew",
        "timestamp": 1609405912
    },
    {
        "content": "<p>What about starting with the latter? Adding <code>Box::into_inner()</code>, for discoverability, with something saying that <code>Box</code> is special and that <code>into_inner</code> is idiomatically replaced with <code>*</code></p>",
        "id": 221278625,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1609405924
    },
    {
        "content": "<p>yes, i like the idea of starting with the function.</p>",
        "id": 221278888,
        "sender_full_name": "Charles Lew",
        "timestamp": 1609406393
    },
    {
        "content": "<blockquote>\n<p>If it is not, this triggers something special: it moves the value out and de-allocates the box allocation. This behavior is currently stable and not seen on other types.</p>\n</blockquote>\n<p>It doesn't deallocate immediately, deallocation still happens when the original <code>Box</code> goes out of scope. That lets you do things like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">apply</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">*</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">b</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// replace contents in-place</span>\n<span class=\"w\">  </span><span class=\"n\">b</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 221285430,
        "sender_full_name": "RalfJ",
        "timestamp": 1609415531
    },
    {
        "content": "<p>it's not really ad-hoc; this behavior is a reflection of the fact that the borrow and move checkers \"understand\" <code>Box</code> and basically treat <code>Box&lt;T&gt;</code> and <code>T</code> the same. That is quite useful indeed.</p>",
        "id": 221285445,
        "sender_full_name": "RalfJ",
        "timestamp": 1609415573
    },
    {
        "content": "<p>IMO the fix is not to strip <code>Box</code> of this useful functionality, but to make this functionality available to other types as well. This is the (in)famous <code>DerefMove</code> that has been talked about for years.</p>",
        "id": 221285461,
        "sender_full_name": "RalfJ",
        "timestamp": 1609415602
    },
    {
        "content": "<blockquote>\n<p>It doesn't deallocate immediately, deallocation still happens when the original <code>Box</code> goes out of scope. That lets you do things like</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">apply</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">*</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">b</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// replace contents in-place</span>\n<span class=\"w\">  </span><span class=\"n\">b</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Oh. I did not know that. That seems really annoying to implement sans magic.</p>",
        "id": 221285736,
        "sender_full_name": "Connor Horman",
        "timestamp": 1609415924
    },
    {
        "content": "<p>It's the same \"magic\" as a local variable:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nc\">SomeNonCopyType</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.;</span><span class=\"w\"></span>\n<span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// replace contents in-place</span>\n</code></pre></div>",
        "id": 221285839,
        "sender_full_name": "RalfJ",
        "timestamp": 1609416077
    },
    {
        "content": "<p>However, that doesn't go through a trait method. A non-magic impl of that behaviour would have to (and in the lccc impl <a href=\"https://github.com/LightningCreations/lccc/blob/50c08a4619c021ea51e53c8c7c412981a1dcd217/rust/liballoc/src/boxed.rs#L35\">does</a>)</p>",
        "id": 221285958,
        "sender_full_name": "Connor Horman",
        "timestamp": 1609416222
    },
    {
        "content": "<p>I don't think there's a way this can be done for A=Global portably.</p>",
        "id": 221286013,
        "sender_full_name": "Connor Horman",
        "timestamp": 1609416288
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"257758\">Connor Horman</span> <a href=\"#narrow/stream/213817-t-lang/topic/Deprecating.20.60*Box.60.20special.20behavior.2E/near/221286013\">said</a>:</p>\n<blockquote>\n<p>I don't think there's a way this can be done for A=Global portably.</p>\n</blockquote>\n<p>not sure what you mean; I think this should work regardless of the allocator?</p>",
        "id": 221286184,
        "sender_full_name": "RalfJ",
        "timestamp": 1609416575
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"257758\">Connor Horman</span> <a href=\"#narrow/stream/213817-t-lang/topic/Deprecating.20.60*Box.60.20special.20behavior.2E/near/221285958\">said</a>:</p>\n<blockquote>\n<p>However, that doesn't go through a trait method. A non-magic impl of that behaviour would have to (and in the lccc impl <a href=\"https://github.com/LightningCreations/lccc/blob/50c08a4619c021ea51e53c8c7c412981a1dcd217/rust/liballoc/src/boxed.rs#L35\">does</a>)</p>\n</blockquote>\n<p>none of these examples go through a trait method. <code>*b</code> where <code>b: Box</code> is not a trait method call, it is a primitive <code>Deref</code> place projection (similar to <code>*</code> on <code>&amp;</code>/<code>&amp;mut</code>).</p>",
        "id": 221286228,
        "sender_full_name": "RalfJ",
        "timestamp": 1609416608
    },
    {
        "content": "<p>In my case, the goal is to implement Box w/o magic (if you don't count the spam of <code>#[__lccc::*]</code> attributes as \"magic\"). This necessarily would use a trait method call to implement the moving behaviour. The problem is: how do I track boxes that have been moved out of without altering the layout of <code>Box&lt;T,Global&gt;</code>.</p>",
        "id": 221286520,
        "sender_full_name": "Connor Horman",
        "timestamp": 1609417094
    },
    {
        "content": "<p>Though if the behaviour was generalized in rust itself, it would run into the same issue (though it's easier to solve in other cases, you can simply use a small field for tracking the drop state)</p>",
        "id": 221286612,
        "sender_full_name": "Connor Horman",
        "timestamp": 1609417233
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"257758\">Connor Horman</span> <a href=\"#narrow/stream/213817-t-lang/topic/Deprecating.20.60*Box.60.20special.20behavior.2E/near/221286520\">said</a>:</p>\n<blockquote>\n<p>In my case, the goal is to implement Box w/o magic (if you don't count the spam of <code>#[__lccc::*]</code> attributes as \"magic\"). This necessarily would use a trait method call to implement the moving behaviour. The problem is: how do I track boxes that have been moved out of without altering the layout of <code>Box&lt;T,Global&gt;</code>.</p>\n</blockquote>\n<p>Rustc just keeps the <code>Box&lt;T, Global&gt;</code> but in the drop elaboration mir pass, the <code>Drop</code> terminator is replaced with a call to <code>box_free</code>. You have the same problem for regular variables which you can move out of too. In which case you have to remove the <code>Drop</code> terminator. Only in this case you also have to add a <code>box_free</code> call. The drop elaboration pass is necessary in any case as it handles the case where a variable is only sometimes initialized. For example only when an if is not taken.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"nb\">String</span>::<span class=\"n\">new</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_0</span>: <span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_1</span>: <span class=\"nc\">std</span>::<span class=\"n\">boxed</span>::<span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">std</span>::<span class=\"n\">string</span>::<span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_2</span>: <span class=\"nc\">std</span>::<span class=\"n\">string</span>::<span class=\"nb\">String</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">scope</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">debug</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">_1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">bb0</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">StorageLive</span><span class=\"p\">(</span><span class=\"n\">_1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">StorageLive</span><span class=\"p\">(</span><span class=\"n\">_2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">new</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">bb1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">bb1</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"n\">_2</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">bb2</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">bb2</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">StorageDead</span><span class=\"p\">(</span><span class=\"n\">_2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"n\">_1</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">bb3</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">bb3</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">StorageDead</span><span class=\"p\">(</span><span class=\"n\">_1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>vs</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"nb\">String</span>::<span class=\"n\">new</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"n\">a</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_0</span>: <span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_1</span>: <span class=\"nc\">std</span>::<span class=\"n\">boxed</span>::<span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">std</span>::<span class=\"n\">string</span>::<span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_2</span>: <span class=\"nc\">std</span>::<span class=\"n\">string</span>::<span class=\"nb\">String</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_3</span>: <span class=\"nc\">std</span>::<span class=\"n\">string</span>::<span class=\"nb\">String</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_4</span>: <span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_5</span>: <span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">scope</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">debug</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">_1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">bb0</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">StorageLive</span><span class=\"p\">(</span><span class=\"n\">_1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">StorageLive</span><span class=\"p\">(</span><span class=\"n\">_2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">new</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">bb2</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">bb1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">cleanup</span><span class=\"p\">)</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">resume</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">bb2</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"n\">_2</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">bb3</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">bb3</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">StorageDead</span><span class=\"p\">(</span><span class=\"n\">_2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">StorageLive</span><span class=\"p\">(</span><span class=\"n\">_3</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">_1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"n\">_3</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"k\">return</span>: <span class=\"nc\">bb4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">unwind</span>: <span class=\"nc\">bb6</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">bb4</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">StorageDead</span><span class=\"p\">(</span><span class=\"n\">_3</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">alloc</span>::<span class=\"n\">alloc</span>::<span class=\"n\">box_free</span>::<span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">_1</span><span class=\"p\">.</span><span class=\"mi\">0</span>: <span class=\"nc\">std</span>::<span class=\"n\">ptr</span>::<span class=\"n\">Unique</span><span class=\"o\">&lt;</span><span class=\"n\">std</span>::<span class=\"n\">string</span>::<span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"p\">))</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">bb5</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">bb5</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">StorageDead</span><span class=\"p\">(</span><span class=\"n\">_1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">bb6</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">cleanup</span><span class=\"p\">)</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">alloc</span>::<span class=\"n\">alloc</span>::<span class=\"n\">box_free</span>::<span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">_1</span><span class=\"p\">.</span><span class=\"mi\">0</span>: <span class=\"nc\">std</span>::<span class=\"n\">ptr</span>::<span class=\"n\">Unique</span><span class=\"o\">&lt;</span><span class=\"n\">std</span>::<span class=\"n\">string</span>::<span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"p\">))</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">bb1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 221287018,
        "sender_full_name": "bjorn3",
        "timestamp": 1609417848
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"257758\">@Connor Horman</span> well, <code>Box</code> fundamentally <em>is</em> magic in Rust since it is the only type with <code>DerefMove</code> behavior. This is not a new insight, though maybe not a widely-known one either.</p>",
        "id": 221287946,
        "sender_full_name": "RalfJ",
        "timestamp": 1609418924
    },
    {
        "content": "<p>I don't see a way for other Rust implementations to avoid this, if they want to remain compatible.</p>",
        "id": 221287952,
        "sender_full_name": "RalfJ",
        "timestamp": 1609418939
    },
    {
        "content": "<p>and as I said above, IMO the fix is to have <code>DerefMove</code> for real -- then <code>Box</code> isn't special any more for being the only type that \"implements\" this</p>",
        "id": 221287976,
        "sender_full_name": "RalfJ",
        "timestamp": 1609418979
    },
    {
        "content": "<p>Indeed. My point was, given the above behaviour, <code>Box</code> would remain magic with <code>DerefMove</code> (as shown, lccc has an (unstable) <code>DerefMove</code> trait which handles the moving deref).</p>",
        "id": 221288085,
        "sender_full_name": "Connor Horman",
        "timestamp": 1609419094
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"257758\">Connor Horman</span> <a href=\"#narrow/stream/213817-t-lang/topic/Deprecating.20.60*Box.60.20special.20behavior.2E/near/221288085\">said</a>:</p>\n<blockquote>\n<p>Indeed. My point was, given the above behaviour, <code>Box</code> would remain magic with <code>DerefMove</code> (as shown, lccc has an (unstable) <code>DerefMove</code> trait which handles the moving deref).</p>\n</blockquote>\n<p>Doesn't this just mean that the \"real\" <code>DerefMove</code> is more complicated than what your unstable trait provides?</p>",
        "id": 221288165,
        "sender_full_name": "RalfJ",
        "timestamp": 1609419173
    },
    {
        "content": "<p><code>DerefMove</code> has to be able to model the idea of moving out of something and leaving behind a \"skeleton\" (something similar to <code>Box&lt;MaybeUninit&lt;T&gt;&gt;</code>) that can be \"reinitialized\"</p>",
        "id": 221288190,
        "sender_full_name": "RalfJ",
        "timestamp": 1609419218
    },
    {
        "content": "<p>doesn't <code>Box</code> also support partial moves , like moving out only the first field of a <code>Box&lt;(Vec&lt;T&gt;, Vec&lt;T&gt;)&gt;</code>?</p>",
        "id": 221288258,
        "sender_full_name": "RalfJ",
        "timestamp": 1609419253
    },
    {
        "content": "<p>Well, the primary thing would be<br>\n1) The proposal for DerefMove is (self)-&gt;Self::Target, IIRC.<br>\n2) There isn't a way, on Box, to store drop glue information, since the layout of <code>Box&lt;T,Global&gt;</code> is fixed (unless it's possible to store a \"control block\" in the allocation)<br>\n3) The above shown by <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> still requires special information about Box, since it would not be generally applicable to all DerefMove types (in particular, that would not work for <code>Box&lt;T,System&gt;</code>.</p>",
        "id": 221288424,
        "sender_full_name": "Connor Horman",
        "timestamp": 1609419432
    },
    {
        "content": "<blockquote>\n<p>(in particular, that would not work for Box&lt;T,System&gt;.</p>\n</blockquote>\n<p>you mean because it calls <code>box_free</code>?</p>",
        "id": 221288647,
        "sender_full_name": "RalfJ",
        "timestamp": 1609419629
    },
    {
        "content": "<p>but if <code>DerefMove</code> is <code>(self) -&gt; (Self::Target, Self::Skeleton)</code> then dropping the skeleton could do the right thing without storing \"drop glue information\"</p>",
        "id": 221288675,
        "sender_full_name": "RalfJ",
        "timestamp": 1609419661
    },
    {
        "content": "<p>IOW, the information could be stored in the type</p>",
        "id": 221288693,
        "sender_full_name": "RalfJ",
        "timestamp": 1609419670
    },
    {
        "content": "<p>modelling partial moves would likely require GATs/ATCs though</p>",
        "id": 221288714,
        "sender_full_name": "RalfJ",
        "timestamp": 1609419696
    },
    {
        "content": "<p>not sure what <code>ATC</code>s are, but <code>&amp;owned</code> references could also solve partial moves. <code>Skeleton</code> could in that case also have a lifetime on it that ensures it is not dropped while the <code>&amp;owned</code> in <code>Self::Target</code> is still accessible.</p>",
        "id": 221288842,
        "sender_full_name": "oli",
        "timestamp": 1609419838
    },
    {
        "content": "<p>ah no, that won' t work, ignore me. The problem is multiple calls to <code>deref_move</code></p>",
        "id": 221288893,
        "sender_full_name": "oli",
        "timestamp": 1609419891
    },
    {
        "content": "<p>If we make <code>DerefMove</code> a lang item, we could proabably make it work by having a MIR transform that rewrites the MIR to have the drop and similar at the appropriate sites</p>",
        "id": 221288984,
        "sender_full_name": "oli",
        "timestamp": 1609419987
    },
    {
        "content": "<p>ATC = Associated Type Constructor / GAT = Generic Associated Types</p>",
        "id": 221289001,
        "sender_full_name": "RalfJ",
        "timestamp": 1609420021
    },
    {
        "content": "<p>Given that we already have <code>Box::init</code>, what about:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">take</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"bp\">self</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">MaybeUninit</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>?<br>\nObviously partial moves are very hard to express within a trait unless we go into frunk-level of generic clauses + a combinatorial explosion of same-repr siblings of the original struct but where each possible subset of fields is replaced with <code>MaybeUninit</code> equivalents. I think a simple <code>map_inner</code> with leak-on-unwind behavior could be quite good at handling most use cases with a very simple API</p>",
        "id": 221289622,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1609420726
    },
    {
        "content": "<blockquote>\n<p>unless we go into frunk-level of generic clauses + a combinatorial explosion of same-repr siblings of the original struct </p>\n</blockquote>\n<p>or we use associated type cosntructors and compiler magic, turning <code>Constructor&lt;(T, U)&gt;</code> into <code>Constructor&lt;(MaybeUninit&lt;T&gt;, U)&gt;</code></p>",
        "id": 221289837,
        "sender_full_name": "RalfJ",
        "timestamp": 1609420999
    },
    {
        "content": "<blockquote>\n<p>Given that we already have Box::init, what about:</p>\n</blockquote>\n<p>you mean <code>Box::new_uninit</code>?</p>",
        "id": 221289853,
        "sender_full_name": "RalfJ",
        "timestamp": 1609421038
    },
    {
        "content": "<p>What about</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">DerefMove</span>: <span class=\"nc\">DerefMut</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">move_out</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Target</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">drop_skeleton</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>where <code>DerefMove::drop_skeleton</code> is used instead of <code>drop_in_place</code> when the value is moved out.</p>",
        "id": 221300401,
        "sender_full_name": "bjorn3",
        "timestamp": 1609432125
    },
    {
        "content": "<p>@RalfJ Ummm, i see what you mean. And i agree it's state of art. But isn't this a little too complicated for ordinary users...<br>\nYour example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">apply</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">*</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">b</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// replace contents in-place</span>\n<span class=\"w\">  </span><span class=\"n\">b</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Is just language-level shorthand for:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">apply</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">take_mut</span>::<span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">as_mut</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// replace contents in-place</span>\n<span class=\"w\">  </span><span class=\"n\">b</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>which also applies to other types well. I feel the <code>DerefMove</code> trait doesn't really pay off since it would be so rarely used...</p>",
        "id": 221310436,
        "sender_full_name": "Charles Lew",
        "timestamp": 1609442183
    },
    {
        "content": "<p><code>take_mut::take</code> has to abort on panic to prevent unsafety, while <code>*b = f(*b)</code> simply deallocates the memory backing the <code>Box</code> and then continues unwinding.</p>",
        "id": 221310489,
        "sender_full_name": "bjorn3",
        "timestamp": 1609442264
    },
    {
        "content": "<p>yes, indeed.</p>",
        "id": 221310567,
        "sender_full_name": "Charles Lew",
        "timestamp": 1609442327
    },
    {
        "content": "<p>yeah, this is way simpler than <code>take_mut</code> because things are fully owned, not borrowed</p>",
        "id": 221354052,
        "sender_full_name": "RalfJ",
        "timestamp": 1609511615
    }
]