[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Ms</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">ms</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"bp\">Self</span>:<span class=\"nb\">Sized</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Ms</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">ms</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">panic</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;1&quot;</span><span class=\"p\">)}}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Ms</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">ms</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">panic</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;2&quot;</span><span class=\"p\">)}}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">1.</span><span class=\"n\">ms</span><span class=\"p\">();</span><span class=\"w\">  </span><span class=\"c1\">// this compiles, defaults to i32.</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">1.</span><span class=\"n\">abs</span><span class=\"p\">();</span><span class=\"w\">  </span><span class=\"c1\">// this doesn&#39;t</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>I wonder if this difference is because of the implementation difference between early-bound and late-bound? I'm also curious if this difference is a compiler implementation detail or is a language rule.</p>",
        "id": 206024096,
        "sender_full_name": "Charles Lew",
        "timestamp": 1596635496
    },
    {
        "content": "<p>I'm....a bit surprised by that result</p>",
        "id": 206024300,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596635600
    },
    {
        "content": "<p>oh, I guess I'm not</p>",
        "id": 206024324,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596635615
    },
    {
        "content": "<p>what's happening is that, in the first case, we are able to resolve to <code>&lt;_ as Ms&gt;::ms(1)</code></p>",
        "id": 206024343,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596635628
    },
    {
        "content": "<p>i.e., we don't have to know which <em>self type</em> it is to know <em>which trait</em> it is</p>",
        "id": 206024355,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596635637
    },
    {
        "content": "<p>then later the type falls back to <code>i32</code></p>",
        "id": 206024360,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596635642
    },
    {
        "content": "<p>in the second case, I imagine <code>abs</code> is an inherent method</p>",
        "id": 206024402,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596635648
    },
    {
        "content": "<p>so we would have to resolve to <code>i32::abs</code> or <code>i64::abs</code> and that's ambiguous</p>",
        "id": 206024416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596635660
    },
    {
        "content": "<p>this is on that borderline between 'language spec' and 'compiler impl' -- we haven't totally specified our method reoslution algorithm (or much anything else)</p>",
        "id": 206024459,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596635679
    },
    {
        "content": "<p>I can certainly imagine implementing a smarter resolution algorithm in the future</p>",
        "id": 206024473,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596635687
    },
    {
        "content": "<p>(I've toyed with designs for such a thing, a type checker that is able to \"defer and reorder\" larger amounts of its work, but I think it's a bit on the back-burner as we pursue chalk first)</p>",
        "id": 206024510,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596635712
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 206024536,
        "sender_full_name": "Charles Lew",
        "timestamp": 1596635733
    }
]