[
    {
        "content": "<p>I have a branch that implements the <code>Pointee</code> trait as a special case in the compiler similar to <code>DiscriminantKind</code>. So at this point I think what’s left to do for <a href=\"https://github.com/rust-lang/rfcs/pull/2580\">RFC 2580</a> is mostly some design polish and a lang team decision</p>",
        "id": 213845783,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1603141494
    },
    {
        "content": "<p>Hi lang team. Friendly ping for <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> to mark a concern as resolved and <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> <span class=\"user-mention\" data-user-id=\"256759\">@boats</span> for checkboxes in <a href=\"https://github.com/rust-lang/rfcs/pull/2580#issuecomment-722398370\">https://github.com/rust-lang/rfcs/pull/2580#issuecomment-722398370</a></p>",
        "id": 222506786,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1610491506
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219747\">@Simon Sapin</span> done -- although we should definitely note the soundness point that was raised...somewhere...</p>",
        "id": 222520975,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1610501744
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rfcs/pull/2580#issuecomment-722645176\">this point</a>, in particular</p>",
        "id": 222521030,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1610501769
    },
    {
        "content": "<p>I can copy-paste this comment in a new issue but I don’t really understand it so I don’t know how to summarize in the title</p>",
        "id": 222546759,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1610525241
    },
    {
        "content": "<p>Is this only a problem with specialization?</p>",
        "id": 222546768,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1610525250
    },
    {
        "content": "<p>I _think_ it’s a problem with covariance in general, where <code>&amp;'a T</code> and <code>*const T</code> are covariant over <code>T</code>, so the type you get from <code>T::Metadata</code> could change as <code>T</code> does, but there’s an invariant that the metadata must remain valid between coerced values that needs to be uphold somehow? There’s actually no specialization needed to add impls for the example using <code>for&lt;'a&gt; fn(&amp;'a Type)</code> and <code>fn(&amp;'static Type)</code>, because they’re distinct concrete types</p>",
        "id": 222554793,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1610530351
    },
    {
        "content": "<p>It's not related to specialization</p>",
        "id": 222598721,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1610552232
    },
    {
        "content": "<p>I can add it somewhere, I imagine it belongs in the tracking issue for custom DST</p>",
        "id": 222598778,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1610552257
    },
    {
        "content": "<p>we need to make a \"lang team notes\" section on that I think</p>",
        "id": 222598798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1610552263
    },
    {
        "content": "<p>Hello again. FCP has completed: <a href=\"https://github.com/rust-lang/rfcs/pull/2580#issuecomment-765812361\">https://github.com/rust-lang/rfcs/pull/2580#issuecomment-765812361</a></p>",
        "id": 224295342,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1611821744
    }
]