[
    {
        "content": "<p>Opening a stream to chat with @scottmcm.</p>",
        "id": 230731345,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1616001557
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span></p>",
        "id": 230731358,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1616001563
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 230731395,
        "sender_full_name": "scottmcm",
        "timestamp": 1616001580
    },
    {
        "content": "<p>RE: whether or not callers should be allowed to omit <code>unsafe</code>, I'd be curious to hear more about your thoughts</p>",
        "id": 230731526,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1616001618
    },
    {
        "content": "<p>Semantically I think it makes complete sense.  Mostly I'm just pondering semver implications.  (Whereas for <code>const</code> those don't exist because it's semver-ok to add the <code>const</code> later.)</p>\n<p>But that also opens some questions about using things.  Like if we'll have <code>impl const Default</code>, then does it make sense to have <code>impl Default for Foo { const fn default() -&gt; Self { ... } }</code>?  Would we want something like that for <code>unsafe</code>?</p>",
        "id": 230732834,
        "sender_full_name": "scottmcm",
        "timestamp": 1616002118
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> I actually thought that was already plan-of-record for <code>const fn</code>, but I guess it has now been relegated to an \"alternative\" in <a href=\"https://github.com/oli-obk/rfcs/blob/const_generic_const_fn_bounds/text/0000-const-generic-const-fn-bounds.md#fine-grained-const-annotations\">https://github.com/oli-obk/rfcs/blob/const_generic_const_fn_bounds/text/0000-const-generic-const-fn-bounds.md#fine-grained-const-annotations</a></p>",
        "id": 230761787,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1616013305
    },
    {
        "content": "<p>That is, I had assumed that, yes, it would be possible to mark individual methods in a trait impl as <code>const</code></p>",
        "id": 230761858,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1616013330
    },
    {
        "content": "<p>we just don't have a syntax for expressing a generic bound on such a thing, similar to how we don't have syntax for expressing the equivalent <code>unsafe</code>-ness bound</p>",
        "id": 230761928,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1616013359
    },
    {
        "content": "<p>I think it's still a useful feature in both cases even if it's limited to non-generic methods</p>",
        "id": 230762000,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1616013380
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> trying to bring this to a conclusion so we can give a response on the RFC thread: do you currently feel opposed to the idea of merging the RFC as-is? Do you feel like there is missing information that would help you make that decision?</p>",
        "id": 230952457,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1616109909
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> checking if you had a chance to think this over more</p>",
        "id": 231861280,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1616700147
    },
    {
        "content": "<p>Would we expect the RFC to include allowing specifying <code>const</code> even if it's not an <code>impl const Foo</code>?  With the same kind of rules?  (so I can <code>impl Default for Foo { const fn default() -&gt; Self { ... } }</code> and use <code>Foo::default()</code> in const context.)</p>",
        "id": 232534844,
        "sender_full_name": "scottmcm",
        "timestamp": 1617164978
    },
    {
        "content": "<p>Having slept on it I think I'm good with the \"well, adding <code>unsafe</code> is always a breaking change, so it's fine if it is here too\" argument.</p>",
        "id": 232534935,
        "sender_full_name": "scottmcm",
        "timestamp": 1617165028
    }
]