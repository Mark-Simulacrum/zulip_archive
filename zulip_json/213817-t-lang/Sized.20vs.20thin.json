[
    {
        "content": "<p>Does <code>T: Sized</code> necessarily imply that <code>*const T</code> is a thin pointer? This is the case in today’s Rust, but do we want to \"promise\" or document that it will always be?</p>",
        "id": 188964684,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1582577543
    },
    {
        "content": "<p><code>std::mem::transmute::&lt;*const T, usize&gt;</code> is allowed, so it looks like it's guaranteed (at least on current targets).</p>",
        "id": 188967185,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1582579218
    },
    {
        "content": "<p>I believe this is something we could not change, yes</p>",
        "id": 188973748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582583788
    },
    {
        "content": "<p>Good point, that transmute is allowed even in generic contexts for a type parameter without <code>?Sized</code></p>",
        "id": 188996573,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1582615063
    },
    {
        "content": "<p>It’ll just operate on the data pointer I believe?</p>",
        "id": 189019561,
        "sender_full_name": "nagisa",
        "timestamp": 1582637805
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> argued in the past that the vtable pointer is actually the part of <code>T</code> not <code>*const</code>.</p>",
        "id": 189019611,
        "sender_full_name": "nagisa",
        "timestamp": 1582637844
    },
    {
        "content": "<p>something along those lines.</p>",
        "id": 189019635,
        "sender_full_name": "nagisa",
        "timestamp": 1582637863
    },
    {
        "content": "<p>And so it is your responsibility to reconstruct the right vtable pointer if you want to convert <code>usize</code> to a fat pointer.</p>",
        "id": 189019697,
        "sender_full_name": "nagisa",
        "timestamp": 1582637900
    },
    {
        "content": "<p>Yes you can cast a fat pointer with <code>as</code> and get the data part only, but <code>transmute</code> checks that <code>size_of::&lt;*const T&gt;() == size_of::&lt;usize&gt;()</code></p>",
        "id": 189042461,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1582652828
    }
]