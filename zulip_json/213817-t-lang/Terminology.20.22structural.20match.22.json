[
    {
        "content": "<p>I keep being confused by the term \"structural match\". AFAIK it expresses a property of <code>PartialEq</code> and is very relevant not just to <code>match</code> but also to const generics (because they care about equality of values), so I am rather surprised that the name does not mention equality at all. Is there some deeper connection to matching that I am missing? is this term and its formal definition documented somewhere? (I checked the dev-guide and the reference, didn't find it.)<br>\nCc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span></p>",
        "id": 197384448,
        "sender_full_name": "RalfJ",
        "timestamp": 1589360402
    },
    {
        "content": "<p>(I am putting this in the t-lang stream because this seems to not just be a rustc implementation detail, but indeed part of the language spec)</p>",
        "id": 197384520,
        "sender_full_name": "RalfJ",
        "timestamp": 1589360434
    },
    {
        "content": "<p>it's even weirder when someone talks about \"implementing strcutural match\", like <a href=\"https://github.com/rust-lang/rust/issues/72156\">here</a>. that makes it sound like a trait, which maybe it is / should be? but then the text of the issue says \"passes the structural match check\" which does not sound like a trait at all.</p>",
        "id": 197384730,
        "sender_full_name": "RalfJ",
        "timestamp": 1589360553
    },
    {
        "content": "<blockquote>\n<p>it's even weirder when someone talks about \"implementing strcutural match\", like here.</p>\n</blockquote>\n<p>That's my bad <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> I tend to think of this in terms of <code>StructuralEq</code> and <code>StructuralPartialEq</code>, which are actual traits.</p>",
        "id": 197384910,
        "sender_full_name": "lcnr",
        "timestamp": 1589360651
    },
    {
        "content": "<p>indeed there are traits, and even two of them</p>\n<div class=\"codehilite\"><pre><span></span><code>/// This implements the traversal over the structure of a given type to try to\n/// find instances of ADTs (specifically structs or enums) that do not implement\n/// the structural-match traits (`StructuralPartialEq` and `StructuralEq`).\n</code></pre></div>",
        "id": 197385237,
        "sender_full_name": "RalfJ",
        "timestamp": 1589360852
    },
    {
        "content": "<p>the traits are called \"structural equality\" though, not \"structural match\"</p>",
        "id": 197385253,
        "sender_full_name": "RalfJ",
        "timestamp": 1589360865
    },
    {
        "content": "<p>and also, why does this not use the machinery that <code>Send</code>/<code>Sync</code>/<code>Freeze</code> etc use?</p>",
        "id": 197385312,
        "sender_full_name": "RalfJ",
        "timestamp": 1589360887
    },
    {
        "content": "<p>Unfortunately <a href=\"https://doc.rust-lang.org/nightly/core/marker/trait.StructuralPartialEq.html\">the docs</a> talk about when the trait is implemented but not about what the trait guarantees. and indeed it is a safe trait so it cannot actually guarantee anything?? now I am even more confused.^^</p>",
        "id": 197385465,
        "sender_full_name": "RalfJ",
        "timestamp": 1589360978
    },
    {
        "content": "<p>My mental model of <code>StructuralPartialEq</code> trait is that it provides a guarantee about the <code>PartialEq</code> impl. But then (a) it should be <code>unsafe</code>, (b) it should \"inherit\" from <code>PartialEq</code>, and (c) <code>StructuralEq</code> is useless as I can't think of extra guarantees that it would introduce...</p>",
        "id": 197385955,
        "sender_full_name": "RalfJ",
        "timestamp": 1589361247
    },
    {
        "content": "<p>what exactly that guarantee is (in terms of the <em>behavior</em> of <code>PartialEq::eq</code>) I am not sure and the docs don't say :/ I'll try to read through <a href=\"https://github.com/rust-lang/rust/issues/31434\">the tracking issue and associated RFC</a> when I have some time</p>",
        "id": 197386032,
        "sender_full_name": "RalfJ",
        "timestamp": 1589361302
    },
    {
        "content": "<p>or maybe since the trait is safe there actually isn't a guarantee and this is all basically just a lint?</p>",
        "id": 197386497,
        "sender_full_name": "RalfJ",
        "timestamp": 1589361579
    },
    {
        "content": "<p>Ok, I looked into this a bit more and am still not completely sure my understanding is correct here.</p>\n<p><code>StructuralEq</code> means \"I am okay with comparing <code>self</code> using bitwise comparision\". The reason that this is not unsafe is that while this may be surprising, it should not be able to cause any UB.</p>\n<p>So both <code>StructuralEq</code> and <code>StructuralPartialEq</code> do not guarantee anything, they are more similar to <code>UnwindSafe</code> I guess <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 197387674,
        "sender_full_name": "lcnr",
        "timestamp": 1589362251
    },
    {
        "content": "<blockquote>\n<p>and also, why does this not use the machinery that Send/Sync/Freeze etc use?</p>\n</blockquote>\n<p>These traits should be implemented for types implementing <code>PartialEq</code>/<code>Eq</code> only if they use <code>derive</code>. which means that we have to allow some manual (inside of <code>derive</code>) implementations. I currently don't know of a good way to check this inside of the compiler.</p>",
        "id": 197388183,
        "sender_full_name": "lcnr",
        "timestamp": 1589362548
    },
    {
        "content": "<p><code>structural_match</code> was <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1445-restrict-constants-in-patterns.md\">originally introduced</a> for pattern-matching on constants, hence \"structural match\". It has since been expanded to also cover equality for const generics, though in the future const generics may use more sophisticated equality testing.</p>",
        "id": 197407560,
        "sender_full_name": "varkor",
        "timestamp": 1589374479
    },
    {
        "content": "<p>It does not guarantee anything about how objects may be compared: just that they may be compared in certain contexts (pattern matching and const generics). In particular, it does not guarantee we can test for equality through bitwise equality.</p>",
        "id": 197407650,
        "sender_full_name": "varkor",
        "timestamp": 1589374536
    },
    {
        "content": "<p><code>structural_match</code> used to be an attribute, but is now implemented using two traits, <code>StructuralPartialEq</code> and <code>StructuralEq</code>: that's why there's some confusion, because the name changed without going via an RFC.</p>",
        "id": 197407738,
        "sender_full_name": "varkor",
        "timestamp": 1589374568
    },
    {
        "content": "<p>They are not <code>unsafe</code>, as I understand it, simply because they were never intended to be stabilised, though perhaps it would be pertinent to make them <code>unsafe</code> even for internal use.</p>",
        "id": 197407834,
        "sender_full_name": "varkor",
        "timestamp": 1589374610
    },
    {
        "content": "<p>They're both marker traits.</p>",
        "id": 197407900,
        "sender_full_name": "varkor",
        "timestamp": 1589374661
    },
    {
        "content": "<p>I don't think their current semantics is actually described in an RFC, as they have evolved organically: <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> and <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> are probably most up-to-date on the precise meaning, but I think even this is still subject to change.</p>",
        "id": 197408010,
        "sender_full_name": "varkor",
        "timestamp": 1589374705
    },
    {
        "content": "<p>They are auto-implemented for anything that derives <code>PartialEq</code> and <code>Eq</code>, because then the compiler has full control over equality, and so it should be safe to use in pattern matching or const generics.</p>",
        "id": 197408044,
        "sender_full_name": "varkor",
        "timestamp": 1589374729
    },
    {
        "content": "<p>I don't think we would need to make the traits <code>unsafe</code>. The reason we have this restriction in place is not a safety concern (AFAIK), at least when it comes to its use in <em>match</em></p>",
        "id": 197414619,
        "sender_full_name": "pnkfelix",
        "timestamp": 1589377632
    },
    {
        "content": "<p>Its more that we didn't want to commit to a particular choice of semantics (which I think is explained in the RFC). Niko and I have spoken recently about wanting to untie this gordian knot</p>",
        "id": 197414705,
        "sender_full_name": "pnkfelix",
        "timestamp": 1589377672
    },
    {
        "content": "<p>I think there could be safety concerns with const generics.</p>",
        "id": 197419068,
        "sender_full_name": "varkor",
        "timestamp": 1589379513
    },
    {
        "content": "<p>yes, I do believe that may be true</p>",
        "id": 197419196,
        "sender_full_name": "pnkfelix",
        "timestamp": 1589379566
    },
    {
        "content": "<p>or at least ... well I'm not sure</p>",
        "id": 197419232,
        "sender_full_name": "pnkfelix",
        "timestamp": 1589379590
    },
    {
        "content": "<p>it certainly is <em>scary</em> to start having your type-equivalence relation depend upon user-defined code</p>",
        "id": 197419373,
        "sender_full_name": "pnkfelix",
        "timestamp": 1589379630
    },
    {
        "content": "<p>I would expect const generics to always use bitwise(structural) equivalence. So <code>StructuralEq</code> would mostly be an acknowledgement that this is the case.</p>",
        "id": 197419622,
        "sender_full_name": "lcnr",
        "timestamp": 1589379738
    },
    {
        "content": "<p>Which should prevent most safety concerns here.</p>",
        "id": 197419802,
        "sender_full_name": "lcnr",
        "timestamp": 1589379820
    },
    {
        "content": "<p>yes, but if bitwise equality simply <strong>is</strong> the right thing, then we could just use it directly</p>",
        "id": 197419944,
        "sender_full_name": "pnkfelix",
        "timestamp": 1589379873
    },
    {
        "content": "<p>which is an example of one way to untie the gordian knot</p>",
        "id": 197419986,
        "sender_full_name": "pnkfelix",
        "timestamp": 1589379886
    },
    {
        "content": "<p>Bitwise equality is not the same as structural equality, particularly when it comes to unifying const expressions.</p>",
        "id": 197477973,
        "sender_full_name": "varkor",
        "timestamp": 1589404132
    },
    {
        "content": "<p>hmm, looking at the following I don't yet get the difference here.</p>\n<blockquote>\n<p>Structural equality basically says \"two things are structurally equal if their fields are structurally equal\".</p>\n</blockquote>\n<p>and </p>\n<blockquote>\n<p>Primitive types like u32 are structurally equal if they represent the same value (but see below for discussion about floating point types like f32 and f64).<br>\nThat is, two values that are semantically unequal could be structurally equal (an example where this might occur is the floating point value NaN).</p>\n</blockquote>\n<p>Can you elaborate the differences between structural and bitwise equality?</p>",
        "id": 197479536,
        "sender_full_name": "lcnr",
        "timestamp": 1589404942
    },
    {
        "content": "<p>I'll admit I was mainly thinking of expressions involving generic parameters, that we could unify without knowing their concrete values. Arguably this is still \"structurally matching\", albeit in a looser sense of the term, but is more sophisticated than checking directly for bitwise equality.</p>",
        "id": 197489322,
        "sender_full_name": "varkor",
        "timestamp": 1589411831
    },
    {
        "content": "<p>But I think <code>&amp;str</code> is structural match, but uses equality of strings rather than bitwise pointer equality.</p>",
        "id": 197489454,
        "sender_full_name": "varkor",
        "timestamp": 1589411919
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121053\">varkor</span> <a href=\"#narrow/stream/213817-t-lang/topic/Terminology.20.22structural.20match.22/near/197489454\">said</a>:</p>\n<blockquote>\n<p>But I think <code>&amp;str</code> is structural match, but uses equality of strings rather than bitwise pointer equality.</p>\n</blockquote>\n<p>This case does involve soundness: <a href=\"https://github.com/rust-lang/const-eval/issues/42\">https://github.com/rust-lang/const-eval/issues/42</a></p>",
        "id": 197492985,
        "sender_full_name": "rpjohnst",
        "timestamp": 1589414633
    },
    {
        "content": "<p>Does structural match need to be defined in the reference currently? If so, can somebody give me a definition?</p>",
        "id": 197519400,
        "sender_full_name": "isHavvy",
        "timestamp": 1589442145
    },
    {
        "content": "<p>It's not stable and is still undergoing design discussions, so probably better to wait.</p>",
        "id": 197537500,
        "sender_full_name": "varkor",
        "timestamp": 1589454121
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/213817-t-lang/topic/Terminology.20.22structural.20match.22/near/197387674\">said</a>:</p>\n<blockquote>\n<p><code>StructuralEq</code> means \"I am okay with comparing <code>self</code> using bitwise comparision\". The reason that this is not unsafe is that while this may be surprising, it should not be able to cause any UB.</p>\n</blockquote>\n<p>that can't be true. the following type is not okay with bitwise comparison due to padding: <code>(u8, u16)</code>.</p>\n<blockquote>\n<p>They are not unsafe, as I understand it, simply because they were never intended to be stabilised, though perhaps it would be pertinent to make them unsafe even for internal use.</p>\n</blockquote>\n<p>Safety and stability are orthogonal concerns.. or IOW, if libstd can cause UB without unsafe code that's still a soundess bug.<br>\nso if there are any semantic guarantees attached to this trait, it should be made unsafe IMO.</p>",
        "id": 197595217,
        "sender_full_name": "RalfJ",
        "timestamp": 1589479724
    },
    {
        "content": "<p>so bitwise equality is <em>not</em> what we want. at best we want \"bitwise padding-aware equality\".</p>",
        "id": 197595269,
        "sender_full_name": "RalfJ",
        "timestamp": 1589479746
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121053\">varkor</span> <a href=\"#narrow/stream/213817-t-lang/topic/Terminology.20.22structural.20match.22/near/197489454\">said</a>:</p>\n<blockquote>\n<p>But I think <code>&amp;str</code> is structural match, but uses equality of strings rather than bitwise pointer equality.</p>\n</blockquote>\n<p>(\"bitwise pointer equality\" was not what I meant by \"bitwise equality\", FWIW)</p>",
        "id": 197595429,
        "sender_full_name": "pnkfelix",
        "timestamp": 1589479816
    },
    {
        "content": "<p>(also see <a href=\"https://github.com/rust-lang/rust/issues/70889\">https://github.com/rust-lang/rust/issues/70889</a> )</p>",
        "id": 197595442,
        "sender_full_name": "RalfJ",
        "timestamp": 1589479823
    },
    {
        "content": "<p>for const generics we probably want \"it's the same as equality of @eddyb's 'value tree'\"</p>",
        "id": 197595537,
        "sender_full_name": "RalfJ",
        "timestamp": 1589479866
    },
    {
        "content": "<p>which indeed is a property that is <em>preserved</em> by <code>derive(PartialEq)</code> so the setup makes sense for that -- except that <code>Eq</code> is entirely irrelevant so there would be no soundness reason to have <code>StructuralEq</code></p>",
        "id": 197595598,
        "sender_full_name": "RalfJ",
        "timestamp": 1589479904
    },
    {
        "content": "<p><code>Eq</code> is relevant for \"does not contain floats\"</p>",
        "id": 197598233,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1589481038
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span>  floats just shouldn't implement <code>StructuralPartialEq</code> if their equality test doesnt satisfy whatever guarantees we need?</p>",
        "id": 197785294,
        "sender_full_name": "RalfJ",
        "timestamp": 1589619427
    },
    {
        "content": "<p>Cc <a href=\"https://github.com/rust-lang/rust/issues/73448\">https://github.com/rust-lang/rust/issues/73448</a> (mostly leaving a note for myself)</p>",
        "id": 201582843,
        "sender_full_name": "RalfJ",
        "timestamp": 1592817363
    },
    {
        "content": "<p>I wrote something up: <a href=\"https://github.com/rust-lang/rust/issues/74446\">https://github.com/rust-lang/rust/issues/74446</a></p>",
        "id": 204229519,
        "sender_full_name": "RalfJ",
        "timestamp": 1595004103
    },
    {
        "content": "<p>feedback welcome :)<br>\n(but I'm in the train towards a 1-week vacation; I'll see what happens when I come back. :D )</p>",
        "id": 204229671,
        "sender_full_name": "RalfJ",
        "timestamp": 1595004193
    },
    {
        "content": "<p>(more like <span aria-label=\"mountain\" class=\"emoji emoji-26f0\" role=\"img\" title=\"mountain\">:mountain:</span> for me but thanks :D )</p>",
        "id": 204787855,
        "sender_full_name": "RalfJ",
        "timestamp": 1595506169
    }
]