[
    {
        "content": "<p>These are two associated functions:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">X</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">X</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>When passing <code>Self</code> as the first argument (in various specific shapes), we call that a \"method\". Is there a term that unambiguously refers to only the associated functions that are not methods? If not, could we... make one?</p>",
        "id": 259156447,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1635280097
    },
    {
        "content": "<p>I thought that \"associated function\" always meant non-method.</p>",
        "id": 259156557,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1635280165
    },
    {
        "content": "<p>That's not my experience, but if it's true, then what's the term that encompasses both <code>new</code> and <code>foo</code>?</p>",
        "id": 259156914,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1635280348
    },
    {
        "content": "<p>I think we call both \"associated functions\"</p>",
        "id": 259156930,
        "sender_full_name": "Gary Guo",
        "timestamp": 1635280355
    },
    {
        "content": "<p>I know these as \"static methods\" from java</p>",
        "id": 259157419,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635280622
    },
    {
        "content": "<p>but that's probably a misuse of the word \"static\"</p>",
        "id": 259157453,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635280646
    },
    {
        "content": "<p>Yes, and people I train know it by that term as well. I am dissatisfied with not being able to give them an appropriate replacement term.</p>",
        "id": 259157558,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1635280696
    },
    {
        "content": "<p>I actually opened this thread because of <a href=\"https://github.com/tmandry/rfcs/blob/static-async-fn-in-trait/text/3185-static-async-fn-in-trait.md\">Draft RFC: Static async fn in traits</a>, where I at first thought <em>that</em> usage of \"static\" meant \"associated function that isn't a method\" (I don't think that's the case now).</p>",
        "id": 259157672,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1635280770
    },
    {
        "content": "<p>Maybe just call them \"non-method associated function\"</p>",
        "id": 259158844,
        "sender_full_name": "Gary Guo",
        "timestamp": 1635281406
    },
    {
        "content": "<p>That is indeed what I call them now￼, but it’s a mouthful.</p>",
        "id": 259159011,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1635281498
    },
    {
        "content": "<p>heh, yeah, I don't have a good name for that</p>",
        "id": 259258260,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635348817
    },
    {
        "content": "<p>\"selfless\" methods :)</p>",
        "id": 259258272,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635348820
    },
    {
        "content": "<p>everybody calls them static methods in practice</p>",
        "id": 259258314,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635348834
    },
    {
        "content": "<p>I might just start using \"selfless\"</p>",
        "id": 259280107,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1635357556
    },
    {
        "content": "<p>is it \"selfless\" if it uses <code>Self</code> but not <code>self</code> like <code>Box::into_raw</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">into_raw</span><span class=\"p\">(</span><span class=\"n\">b</span>: <span class=\"nc\">Self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 259282998,
        "sender_full_name": "kennytm",
        "timestamp": 1635358621
    },
    {
        "content": "<p>It's selfless but not Selfless ;)</p>",
        "id": 259283690,
        "sender_full_name": "Gary Guo",
        "timestamp": 1635358863
    },
    {
        "content": "<p>Very late, but \"receiverless\" skips the ambiguity. I think it's technically correct too, though I could well be wrong.</p>",
        "id": 261580652,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1637021868
    },
    {
        "content": "<p>The disadvantage is that it's confusing to anyone who doesn't know that one specific definition of receiver.</p>",
        "id": 261580770,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1637021926
    },
    {
        "content": "<p>Tbf, since any method can be used as an assoc function, the distinction doesn't make that much sense to make, so the \"mouthful\" phrasing is, in a way, the more suited one: \"assoc function which just doesn't happen to also be a method\", for the rare cases where you really don't wont the assoc functions, well, to be methods <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> (smart pointers are the only case actual case that come to mind), and \"assoc functions\" for all the other cases.</p>\n<p>Iow, being <code>Self</code>-less (assoc function can be called without an instance around) is often a more meaningful distinction than being <code>self</code>-less (assoc function doesn't feature dot-sugar), when talking about associated functions.</p>",
        "id": 261628941,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1637062903
    }
]