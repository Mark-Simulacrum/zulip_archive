[
    {
        "content": "<p>Happening now...</p>",
        "id": 196201911,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588608214
    },
    {
        "content": "<p><a href=\"https://paper.dropbox.com/doc/Try-oh-my--AzWHHy50~p4DUrxHGZYxmIw8Ag-yRDursGetP5YcDdOTSebo\" title=\"https://paper.dropbox.com/doc/Try-oh-my--AzWHHy50~p4DUrxHGZYxmIw8Ag-yRDursGetP5YcDdOTSebo\">paper document</a></p>",
        "id": 196202017,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588608245
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 196202283,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588608367
    },
    {
        "content": "<p>It seems to be a different Zoom link from the triage meeting Zoom link.</p>",
        "id": 196203262,
        "sender_full_name": "Lokathor",
        "timestamp": 1588608776
    },
    {
        "content": "<p>I've added a couple comments, but I'm not on the call -- sorry if that's distracting</p>",
        "id": 196209149,
        "sender_full_name": "cuviper",
        "timestamp": 1588611303
    },
    {
        "content": "<p>I appreciate folks adding comments, I like to read them over later</p>",
        "id": 196210174,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588611768
    },
    {
        "content": "<p>so I wasn't able to follow every conversation because (perhaps ironically) I was trying to continue taking notes at the top</p>",
        "id": 196210181,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588611770
    },
    {
        "content": "<p>heh :)</p>",
        "id": 196210198,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588611775
    },
    {
        "content": "<p>but I did have one Question</p>",
        "id": 196210199,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588611776
    },
    {
        "content": "<p>I was wondering how you fared with that...</p>",
        "id": 196210207,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588611780
    },
    {
        "content": "<p>did josh respond to niko's statement that this isn't all that dissimilar from exceptions?</p>",
        "id": 196210235,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588611795
    },
    {
        "content": "<p>I would like to better understand that. I <em>do</em> understand the notion that we want to avoid association with the <em>expensive</em> exceptions as implemented elsewhere (namely those that capture stack trace)</p>",
        "id": 196210330,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588611843
    },
    {
        "content": "<p>and if that's the heart of josh's concern, then I grok that</p>",
        "id": 196210362,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588611857
    },
    {
        "content": "<p>\"manually propagated exceptions\"</p>",
        "id": 196210391,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588611870
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/213817-t-lang/topic/Design.20meeting.3A.20try.2C.20oh.20my!/near/196210235\" title=\"#narrow/stream/213817-t-lang/topic/Design.20meeting.3A.20try.2C.20oh.20my!/near/196210235\">said</a>:</p>\n<blockquote>\n<p>did josh respond to niko's statement that this isn't all that dissimilar from exceptions?</p>\n</blockquote>\n<p>I didn't respond to that in the meeting. We were short on time, and I didn't want to continue poking at what seemed like the primary point of dispute rather than trying to determine where there was common ground.</p>",
        "id": 196210395,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588611872
    },
    {
        "content": "<p>I had a meta question on this topic I wanted to raise</p>",
        "id": 196210420,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588611884
    },
    {
        "content": "<p>which is .. what do we see as the most fruitful way to resolve this :)</p>",
        "id": 196210437,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588611892
    },
    {
        "content": "<p>I can see a few options</p>",
        "id": 196210463,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588611902
    },
    {
        "content": "<p>there's aways the option of just long and detailed conversation, of course,</p>",
        "id": 196210487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588611914
    },
    {
        "content": "<p>but I'm also wondering about things like:</p>",
        "id": 196210502,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588611921
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I think there's value in having some discussions, and then doing some writing in shared documents attempting to jointly understand each others' values and work towards them.</p>",
        "id": 196210534,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588611938
    },
    {
        "content": "<ul>\n<li>writing some sample challenge to be developed with (e.g.) Fehler or perhaps with some forked variant that uses distinct keywords</li>\n</ul>",
        "id": 196210543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588611942
    },
    {
        "content": "<ul>\n<li>trying to write out a coherent, complete coverage of Rust's error handling story, based on the different keywords</li>\n</ul>",
        "id": 196210639,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588611962
    },
    {
        "content": "<p>But maybe indeed spending some time drilling more into the motivation of around avoiding connotations (or embracing them) is the obvious first step.</p>",
        "id": 196210830,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588612052
    },
    {
        "content": "<p>(I'm going to be in other meetings for a couple of hours, so I'm not going to be able to participate at high bandwidth during that time.)</p>",
        "id": 196210854,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588612064
    },
    {
        "content": "<p>my other meta comment is</p>\n<ul>\n<li>if we're going to pursue this, I think we need to elect who are the folks who are going to drive it to completion, which should probably take part as part of a follow-up meeting on bandwidth and goals</li>\n</ul>",
        "id": 196210960,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588612107
    },
    {
        "content": "<p>(i'll just mention that the main reason I suggested <code>signal</code> as the keyword was because that as CLU's keyword for exceptions, and CLU, if i recall correctly, had very cheap exceptions.)</p>",
        "id": 196210987,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588612123
    },
    {
        "content": "<p>and I guess my last meta point</p>\n<ul>\n<li>somebody should try to write-up the takeaways from that meeting, I might try to do so</li>\n</ul>",
        "id": 196210993,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588612126
    },
    {
        "content": "<p>At the end of the call there was a question of: \"Which use cases would we like to enable?\" -- I wrote a quick overview for how I would see <code>try</code> / Ok-wrapping interact with Tide: <a href=\"https://gist.github.com/yoshuawuyts/3a1639767862704541d166c0de476eaf\" title=\"https://gist.github.com/yoshuawuyts/3a1639767862704541d166c0de476eaf\">https://gist.github.com/yoshuawuyts/3a1639767862704541d166c0de476eaf</a></p>",
        "id": 196211203,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1588612240
    },
    {
        "content": "<p>(hope this is the kind of example the lang team was looking for)</p>",
        "id": 196211675,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1588612473
    },
    {
        "content": "<p>ooh, thanks</p>",
        "id": 196212260,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588612748
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> btw, I think the argument about exceptions is not so much about their perceived <em>runtime cost</em> (although that is no doubt a facet for many people) but also that there is a kind of \"zeitgeist\" against them. <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> wrote up something quite similar in the comments in the dropbox. So just having exception-like <em>keywords</em> in the language may mislead those who are not well informed on the details. A clear story like \"Rust does not have exceptions\" is maybe a better selling point for such folks than a muddy story like \"Rust has exceptions done right\".</p>",
        "id": 196212445,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588612846
    },
    {
        "content": "<p>(That said, I personally still favor the exception related terminology, or at least I don't feel I've seen a convincing set of alternative terminology. I think that \"X done right\" is basically Rust's whole story, in any case.)</p>",
        "id": 196212507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588612884
    },
    {
        "content": "<p>I guess I'll have to review how the \"Rust has no GC\" vs \"Rust has a static GC\" selling points were handled.</p>",
        "id": 196212555,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588612918
    },
    {
        "content": "<p>yeah, it had a similar ring</p>",
        "id": 196212625,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588612951
    },
    {
        "content": "<p>I mean I think if we'd ever successfully adding tracing support etc</p>",
        "id": 196212639,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588612961
    },
    {
        "content": "<p>we'd be facing similar questions</p>",
        "id": 196212646,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588612964
    },
    {
        "content": "<p>certainly the concerns were raised</p>",
        "id": 196212653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588612967
    },
    {
        "content": "<p>right. And I want to better understand which works better fo which communities</p>",
        "id": 196212655,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588612968
    },
    {
        "content": "<p>right now there are some communities that say they won't adopt Rust <em>because</em> it has no GC</p>",
        "id": 196212678,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588612986
    },
    {
        "content": "<p>but I don't know if that's a PR issue</p>",
        "id": 196212694,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588612993
    },
    {
        "content": "<p>Or a true \"lack of expressiveness\" one</p>",
        "id": 196212715,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588613011
    },
    {
        "content": "<p>maybe I should say \"individuals\" rather than \"communities\"</p>",
        "id": 196212743,
        "sender_full_name": "pnkfelix",
        "timestamp": 1588613029
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211722\">Yoshua Wuyts</span> <a href=\"#narrow/stream/213817-t-lang/topic/Design.20meeting.3A.20try.2C.20oh.20my!/near/196211203\" title=\"#narrow/stream/213817-t-lang/topic/Design.20meeting.3A.20try.2C.20oh.20my!/near/196211203\">said</a>:</p>\n<blockquote>\n<p>At the end of the call there was a question of: \"Which use cases would we like to enable?\" -- I wrote a quick overview for how I would see <code>try</code> / Ok-wrapping interact with Tide: <a href=\"https://gist.github.com/yoshuawuyts/3a1639767862704541d166c0de476eaf\" title=\"https://gist.github.com/yoshuawuyts/3a1639767862704541d166c0de476eaf\">https://gist.github.com/yoshuawuyts/3a1639767862704541d166c0de476eaf</a></p>\n</blockquote>\n<p>This is nice, <span class=\"user-mention\" data-user-id=\"211722\">@Yoshua Wuyts</span>, thanks. I'm pondering this example <code>async |_| try { .. }</code>. One of the things I've wondered is if we want to support something like <code>try fn foo()</code> or, perhaps instead,</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;..</span><span class=\"p\">.</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>I was struck by some of the parallels there.</p>\n<p>I'm curious though about the <code>get</code> signature on <code>app.at().get()</code> -- how constrained is it? In particular, will it hit type inference limitations?</p>",
        "id": 196214008,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588613651
    },
    {
        "content": "<p>So I summarized <a href=\"https://paper.dropbox.com/doc/Try-oh-my--AzWHHy50~p4DUrxHGZYxmIw8Ag-yRDursGetP5YcDdOTSebo\" title=\"https://paper.dropbox.com/doc/Try-oh-my--AzWHHy50~p4DUrxHGZYxmIw8Ag-yRDursGetP5YcDdOTSebo\">my main takeaways from the meeting</a> -- I'd be curious if anyone sees anything to add there?</p>",
        "id": 196214635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588613988
    },
    {
        "content": "<p>One thing I'm particularly curious about is whether it would make sense to \"just stabilize <code>Try</code> trait as is\". I'm not the world's biggest fan, but given that we're at least <em>somewhat</em> locked in here... I guess <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> I'd like to get your thoughts on that at some point. (And/or review a proposed alternative design.)</p>",
        "id": 196215039,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588614197
    },
    {
        "content": "<p>Can the Try trait be stabilized as is separately from try-blocks and ok-wrapping mechancis?</p>",
        "id": 196215264,
        "sender_full_name": "Lokathor",
        "timestamp": 1588614303
    },
    {
        "content": "<p>If stabilizing the trait as-is means we would always have to write annotations on <code>try</code>, I'd want to try to find alternatives first that would make that not always required.</p>",
        "id": 196215390,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588614372
    },
    {
        "content": "<p>awe lame, i missed the meeting</p>",
        "id": 196215478,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588614434
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> I would have loved to have had your input, personally.</p>",
        "id": 196215526,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588614461
    },
    {
        "content": "<p><span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span></p>",
        "id": 196215532,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588614468
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/Design.20meeting.3A.20try.2C.20oh.20my!/near/196215390\" title=\"#narrow/stream/213817-t-lang/topic/Design.20meeting.3A.20try.2C.20oh.20my!/near/196215390\">said</a>:</p>\n<blockquote>\n<p>If stabilizing the trait as-is means we would always have to write annotations on <code>try</code>, I'd want to try to find alternatives first that would make that not always required.</p>\n</blockquote>\n<p>I think it's not that simple, but there is some connection. To some extent it's \"too late\", as we already have a non-unique relationship where <code>Result</code> can be converted to non-Result things.</p>",
        "id": 196215603,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588614486
    },
    {
        "content": "<p>well, ill check out the recording once its available and write down my thoughts</p>",
        "id": 196215605,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588614487
    },
    {
        "content": "<p>This is true; that does constrain our possible solutions.</p>",
        "id": 196215635,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588614502
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/Design.20meeting.3A.20try.2C.20oh.20my!/near/196214635\" title=\"#narrow/stream/213817-t-lang/topic/Design.20meeting.3A.20try.2C.20oh.20my!/near/196214635\">said</a>:</p>\n<blockquote>\n<p>So I summarized <a href=\"https://paper.dropbox.com/doc/Try-oh-my--AzWHHy50~p4DUrxHGZYxmIw8Ag-yRDursGetP5YcDdOTSebo\" title=\"https://paper.dropbox.com/doc/Try-oh-my--AzWHHy50~p4DUrxHGZYxmIw8Ag-yRDursGetP5YcDdOTSebo\">my main takeaways from the meeting</a> -- I'd be curious if anyone sees anything to add there?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> see also <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> :)</p>",
        "id": 196215636,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588614504
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I think there's enough value in avoiding annotations that I'd be interested in the family of solutions involving changing the desugar in an edition, if that means that code in a new edition doesn't need as many annotations.</p>",
        "id": 196215787,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588614594
    },
    {
        "content": "<p>I do think that shouldn't be done lightly though.</p>",
        "id": 196215849,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588614613
    },
    {
        "content": "<p>I guess I don't think it's the most reliable sol'n to that problem</p>",
        "id": 196215976,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588614714
    },
    {
        "content": "<p>/me thinks about use cases for which omitting the annotation seems likely to be relevant.</p>",
        "id": 196216669,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588615017
    },
    {
        "content": "<p>Personally I'd push for solutions which make writing the type annotation something that is easy and elegant and is nearly always done</p>",
        "id": 196217883,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1588615567
    },
    {
        "content": "<p>or always done</p>",
        "id": 196217896,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1588615574
    },
    {
        "content": "<p>since otherwise there will be a cliff in user experiences when you fall of the \"happy path\" where inference used to work</p>",
        "id": 196217925,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1588615591
    },
    {
        "content": "<p>(of course, you could use that to argue against inference in general, but I think the tradeoffs balance differently here)</p>",
        "id": 196217973,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1588615622
    },
    {
        "content": "<p>One common use case where I'd like inference to work:<br>\n<code>try { ... }.with_context(|| common_context())?;</code></p>",
        "id": 196219625,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588616355
    },
    {
        "content": "<p>It'd be nice to not have to tell rustc what type the <code>try</code> is.</p>",
        "id": 196219654,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588616369
    },
    {
        "content": "<p>I absolutely understand that'll be hard.</p>",
        "id": 196219671,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588616377
    },
    {
        "content": "<p>Another use case (which might be better handled other ways, but it's nonetheless not uncommon):<br>\n<code>let result = try { ... }; cleanup(); let value = result?; ...</code></p>",
        "id": 196219813,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588616428
    },
    {
        "content": "<p><code>try Result&lt;_, Error&gt; { ... }.with_context(|| common_context())?;</code> seems pretty close</p>",
        "id": 196219824,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1588616434
    },
    {
        "content": "<p>(That might be better handled by having some type whose <code>Drop</code> calls <code>cleanup()</code>, but still...)</p>",
        "id": 196219860,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588616451
    },
    {
        "content": "<p><code>try { ... }:Result&lt;_, Error&gt;.with_context(|| common_context())?;</code></p>",
        "id": 196219867,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1588616457
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127859\">Taylor Cramer</span> <a href=\"#narrow/stream/213817-t-lang/topic/Design.20meeting.3A.20try.2C.20oh.20my!/near/196219824\" title=\"#narrow/stream/213817-t-lang/topic/Design.20meeting.3A.20try.2C.20oh.20my!/near/196219824\">said</a>:</p>\n<blockquote>\n<p><code>try Result&lt;_, Error&gt; { ... }.with_context(|| common_context())?;</code> seems pretty close</p>\n</blockquote>\n<p>For values of \"pretty close\" that still feel really painfully verbose.</p>",
        "id": 196219890,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588616469
    },
    {
        "content": "<p>also works and aligns with the rest of our type ascription story (well, what we have of one anyways)</p>",
        "id": 196219898,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1588616473
    },
    {
        "content": "<p>At that point, I'd probably try to write some helper function that forces the type just so I don't have to repeat the type ascription everywhere.</p>",
        "id": 196219926,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588616489
    },
    {
        "content": "<p>Or a wrapper around <code>try</code>.</p>",
        "id": 196219960,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588616506
    },
    {
        "content": "<p><code>try_anyhow!{ ... }</code>, translating to <code>try : anyhow::Result&lt;_&gt; { ... }</code> or similar.</p>",
        "id": 196220060,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588616542
    },
    {
        "content": "<p>I'd like to not have to immediately wrap <code>try</code> in a macro to make it feel usable without repeating myself everywhere.</p>",
        "id": 196220086,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588616559
    },
    {
        "content": "<p>yeah, that seems plausible and I'd imagine things like that would exist in much the same way that <code>type Result&lt;T&gt; = Result&lt;T, MyError&gt;;</code> is common</p>",
        "id": 196220118,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1588616577
    },
    {
        "content": "<p>(though I personally dislike that pattern of reusing the name <code>Result</code>)</p>",
        "id": 196220138,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1588616589
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/Design.20meeting.3A.20try.2C.20oh.20my!/near/196214008\" title=\"#narrow/stream/213817-t-lang/topic/Design.20meeting.3A.20try.2C.20oh.20my!/near/196214008\">said</a>:</p>\n<blockquote>\n<p>I'm curious though about the <code>get</code> signature on <code>app.at().get()</code> -- how constrained is it? In particular, will it hit type inference limitations?</p>\n</blockquote>\n<p>Good question! I don't know enough about the implementation to gauge whether it will hit limitations, but from a usability perspective I'd argue that it should be a design goal to enable inference to work here.</p>\n<p><strong>edit:</strong> Understandably it might not work on the first iteration; but having inference break because the <em>design</em> of <code>try</code> doesn't support it would create a reason not to use <code>try</code>, which seems bad imo.</p>",
        "id": 196220147,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1588616593
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127859\">Taylor Cramer</span> <a href=\"#narrow/stream/213817-t-lang/topic/Design.20meeting.3A.20try.2C.20oh.20my!/near/196220138\" title=\"#narrow/stream/213817-t-lang/topic/Design.20meeting.3A.20try.2C.20oh.20my!/near/196220138\">said</a>:</p>\n<blockquote>\n<p>(though I personally dislike that pattern of reusing the name <code>Result</code>)</p>\n</blockquote>\n<p>I find <code>anyhow::Result</code> an exception to the usual reasons to dislike that pattern, because it's <em>just</em> a type alias that adds a default for the second type parameter, but you can still write the second type parameter. So if you <code>use anyhow::Result</code> nothing goes wrong with code that used <code>Result&lt;T, E&gt;</code>.</p>",
        "id": 196220231,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588616639
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 196220281,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1588616650
    },
    {
        "content": "<p>Though I still tend to write <code>anyhow::Result</code> without importing it.</p>",
        "id": 196220290,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588616655
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/Design.20meeting.3A.20try.2C.20oh.20my!/near/196214008\" title=\"#narrow/stream/213817-t-lang/topic/Design.20meeting.3A.20try.2C.20oh.20my!/near/196214008\">said</a>:</p>\n<blockquote>\n<p>This is nice, <span class=\"user-mention silent\" data-user-id=\"211722\">Yoshua Wuyts</span>, thanks. I'm pondering this example <code>async |_| try { .. }</code>. One of the things I've wondered is if we want to support something like <code>try fn foo()</code> or, perhaps instead,</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;..</span><span class=\"p\">.</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>Ah yes definitely! I wasn't sure if that'd be off-topic here since the meeting didn't quite touch on it -- but it seems to me that stabilizing <code>try</code> would also create some obvious tension with proposals for<code>throws</code> (<code>fn foo() -&gt; throws io::Error {}</code>). I believe towards the end of the meeting it was brought up we should probably consider how all of these pieces could end up working together, which seems like a good idea.</p>",
        "id": 196221793,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1588617357
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211722\">@Yoshua Wuyts</span> As far as I know, I don't <em>think</em> <code>try fn</code>/<code>throws</code> would be directly affected, positively or negatively, by stabilizing <code>try</code>, except insofar as doing so allows alternatives like <code>= try {}</code>.</p>",
        "id": 196221933,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588617430
    },
    {
        "content": "<p>I was pondering how much alignment is required to move forward with try. There is something .. strange to me about having an \"ok-wrapping\" form through <code>try</code>, but nothing at the \"fn level\".</p>",
        "id": 196222178,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588617559
    },
    {
        "content": "<p>I guess it's that I think of the idea of <code>?</code> as being aligned to fn scope, and try as being a way to narrow that scope, so it's sort of surprising to me that it has secondary effects.</p>",
        "id": 196222389,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588617634
    },
    {
        "content": "<p>I do think there's value in having a function-level Ok-wrapping <code>try</code>, yes.</p>",
        "id": 196222412,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588617647
    },
    {
        "content": "<p>As far as I can tell, the primary point of dispute is \"what does the type signature look like\". :)</p>",
        "id": 196222440,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588617665
    },
    {
        "content": "<p>I guess there is also an interaction, and perhaps this was what <span class=\"user-mention\" data-user-id=\"211722\">@Yoshua Wuyts</span> was getting at, between </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">try</span>: <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>notation and something like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>In other words, if we have built-in type annotation on <code>try</code>, and we added <code>try fn</code>, I would expect them to work analogously.</p>",
        "id": 196222487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588617692
    },
    {
        "content": "<p>/me thinks</p>",
        "id": 196222532,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588617714
    },
    {
        "content": "<p>...that's a really interesting argument.</p>",
        "id": 196222545,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588617718
    },
    {
        "content": "<p>/me thinks as well.</p>",
        "id": 196222550,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588617720
    },
    {
        "content": "<p>heh, yeah that's what I was trying to get at (:</p>",
        "id": 196222621,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1588617736
    },
    {
        "content": "<p>/me tries to reconcile his \"I don't want to write the type annotations on <code>try</code>\" with \"I very much want to see <code>Result</code> on <code>fn</code>\".</p>",
        "id": 196222632,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588617740
    },
    {
        "content": "<p>I feel like that's a consistent position, but it's worth thinking about.</p>",
        "id": 196222659,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588617753
    },
    {
        "content": "<p>It's generally consistent with \"I want type annotations at the function level, but I don't mind inference within functions\".</p>",
        "id": 196222697,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588617773
    },
    {
        "content": "<p>I think there is another point to consider</p>",
        "id": 196222759,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588617805
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>made the precedent (for strong reasons) that the return type is the \"inner type\" that the fn body sees</p>",
        "id": 196222801,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588617825
    },
    {
        "content": "<p>and the \"outer type\" that the outside world sees</p>",
        "id": 196222811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588617830
    },
    {
        "content": "<p>/me would actually like to better understand those \"strong reasons\".</p>",
        "id": 196222882,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588617844
    },
    {
        "content": "<p>(this is contrast to e.g. C#, which iirc writes</p>\n<div class=\"codehilite\"><pre><span></span><code>async void foo() -&gt; Task&lt;u32&gt;\n</code></pre></div>",
        "id": 196222886,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588617847
    },
    {
        "content": "<p>There are a bunch of reasons, but one very strong one is that the actual type you want is very complex to type in the case of async fn :) -- because of the rules around lifetime capture and <code>impl Future</code> types.</p>",
        "id": 196222995,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588617897
    },
    {
        "content": "<p>As in, substantially more complex than <code>impl Future&lt;u32&gt;</code>?</p>",
        "id": 196223072,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588617913
    },
    {
        "content": "<p>(Leaving aside the whole <code>Output=</code> problem, which seems like a quirk of how Future is designed.)</p>",
        "id": 196223147,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588617934
    },
    {
        "content": "<p>Something that I haven't seen brought up in discussions much, but still think is worth discussing is the option of making <code>fn foo() throws {}</code> use <code>Result&lt;(), Box&lt;dyn std::error::Error + Send + Sync + 'static&gt;&gt;</code> as its return type</p>",
        "id": 196223504,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1588618054
    },
    {
        "content": "<p>Which leans in even further into the error type not being explicit, but would be more comparable erasing <code>Future</code> in the return signature</p>",
        "id": 196223676,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1588618118
    },
    {
        "content": "<p>(the rule being: if an error type is not specified we fall back to a generic \"dyn Box Error type\", whichever shape that might be)</p>",
        "id": 196223974,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1588618232
    },
    {
        "content": "<p>seems like using a catch all error type thats default recommended is a hazard</p>",
        "id": 196224314,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588618398
    },
    {
        "content": "<p>with specialization it should be able to start impling Error itself I assume</p>",
        "id": 196224334,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588618409
    },
    {
        "content": "<p>but for right now <code>Box&lt;dyn Error&gt;</code> doesn't impl error and cant be conveniently wrapped by other types that impl <code>From&lt;E: Error&gt;</code></p>",
        "id": 196224378,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588618434
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/Design.20meeting.3A.20try.2C.20oh.20my!/near/196222487\" title=\"#narrow/stream/213817-t-lang/topic/Design.20meeting.3A.20try.2C.20oh.20my!/near/196222487\">said</a>:</p>\n<blockquote>\n<p>I guess there is also an interaction, and perhaps this was what <span class=\"user-mention silent\" data-user-id=\"211722\">Yoshua Wuyts</span> was getting at, between </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">try</span>: <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>notation and something like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>In other words, if we have built-in type annotation on <code>try</code>, and we added <code>try fn</code>, I would expect them to work analogously.</p>\n</blockquote>\n<p>I feel like the type annotations on <code>try</code> blocks here have a lot in common with the theoretical syntax for <code>try fns</code></p>",
        "id": 196224613,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588618546
    },
    {
        "content": "<p>in that it could be ```rust</p>",
        "id": 196224633,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588618557
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">try</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"nc\">throws</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 196224745,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588618594
    },
    {
        "content": "<p>you start running into similar issues about \"resultness\"</p>",
        "id": 196224760,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588618604
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> not sure I follow that last example? is that both <code>try</code> and <code>throws</code> on the same function?</p>",
        "id": 196224812,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1588618632
    },
    {
        "content": "<p>or wait, on the same block?</p>",
        "id": 196224836,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1588618648
    },
    {
        "content": "<p>yea</p>",
        "id": 196224842,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588618652
    },
    {
        "content": "<p>in that you have a desire to annotate different levels of the type with try blocks and try fns</p>",
        "id": 196224862,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588618666
    },
    {
        "content": "<p>like what kind of Try type would you use with a try level fn and where does it go</p>",
        "id": 196224894,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588618682
    },
    {
        "content": "<p>I'm not sure what \"level\" refers to in this context</p>",
        "id": 196224946,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1588618694
    },
    {
        "content": "<p>and i feel like if you're going to have a special syntax for type ascription on try blocks you'd want it to mirror the syntax on try functions</p>",
        "id": 196224958,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588618700
    },
    {
        "content": "<p>im not proposing that syntax</p>",
        "id": 196224972,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588618709
    },
    {
        "content": "<p>as in</p>",
        "id": 196224984,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588618719
    },
    {
        "content": "<p>specifying the Error type within the Try type</p>",
        "id": 196225000,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588618728
    },
    {
        "content": "<p>and specifying the try type itself</p>",
        "id": 196225007,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588618732
    },
    {
        "content": "<p>so the proposals you've mentioned in the past like <code>fn foo() -&gt; u32 throws Bar {</code> presumably defaults to a Result</p>",
        "id": 196225053,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588618766
    },
    {
        "content": "<p>but how do you set it to something other than a Result?</p>",
        "id": 196225073,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588618773
    },
    {
        "content": "<p>ah okay, think I'm following now (:</p>",
        "id": 196225124,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1588618792
    },
    {
        "content": "<p>and if theres a clean solution there I feel like theres value in applying that same syntax to try blocks</p>",
        "id": 196225207,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588618816
    },
    {
        "content": "<p>in that you can only specify the Error type for <code>From</code> type inference</p>",
        "id": 196225230,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588618830
    },
    {
        "content": "<p>via <code>throws</code> or <code>yeets</code> or w/e</p>",
        "id": 196225243,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588618837
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211722\">Yoshua Wuyts</span> <a href=\"#narrow/stream/213817-t-lang/topic/Design.20meeting.3A.20try.2C.20oh.20my!/near/196223974\" title=\"#narrow/stream/213817-t-lang/topic/Design.20meeting.3A.20try.2C.20oh.20my!/near/196223974\">said</a>:</p>\n<blockquote>\n<p>(the rule being: if an error type is not specified we fall back to a generic \"dyn Box Error type\", whichever shape that might be)</p>\n</blockquote>\n<p>That would be privileging a specific generic error type.</p>",
        "id": 196225277,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588618861
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> yes it would, and I think there's a case to be made for that -- but that's a separate but related conversation</p>",
        "id": 196225400,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1588618917
    },
    {
        "content": "<p>I guess my overarching point is that a lot of error handling seems strongly connected, and I see value in approaching this from a place where we ask which end-user experience we want to provide -- and then working backward to how we can provide that</p>",
        "id": 196225665,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1588619033
    },
    {
        "content": "<p>I definitely agree with that philosophy.</p>",
        "id": 196225768,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588619078
    },
    {
        "content": "<p>I have thoughts on what the end-user experience should look and feel like (both to write and to read), but I absolutely agree that experience should come first.</p>",
        "id": 196225830,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588619106
    },
    {
        "content": "<p>Might very well be that <code>throws</code> is not the best outcome for Rust, but I'd love that to be a conscious decision where we have decided it doesn't fit well in the larger picture for error handling rather than as an accident because we happened to go in a different direction.</p>",
        "id": 196225869,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1588619130
    },
    {
        "content": "<p>I'm not convinced that defaulting to box&lt;dyn error&gt; achieves this objective</p>",
        "id": 196225894,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588619144
    },
    {
        "content": "<p>Yeah, to the extent <code>throws</code> seems plausible at all, \"less magic\" seems more likely to succeed. :)</p>",
        "id": 196226065,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588619231
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> heh, yeah didn't necessarily want to advocate that it does here and now -- but wanted to bring it up as an example of something that's been brought up before, and at least seems worth talking about in earnest</p>",
        "id": 196226206,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1588619294
    },
    {
        "content": "<p>I definitely think rust needs to improve its story around \"open set errors\"</p>",
        "id": 196226241,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588619317
    },
    {
        "content": "<p>(it's past working hours for me here; going to log off again -- ttyl!)</p>",
        "id": 196226254,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1588619327
    },
    {
        "content": "<p>more specifically handlable ones</p>",
        "id": 196226259,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588619328
    },
    {
        "content": "<p>o/</p>",
        "id": 196226362,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1588619381
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211722\">Yoshua Wuyts</span> <a href=\"#narrow/stream/213817-t-lang/topic/Design.20meeting.3A.20try.2C.20oh.20my!/near/196223504\" title=\"#narrow/stream/213817-t-lang/topic/Design.20meeting.3A.20try.2C.20oh.20my!/near/196223504\">said</a>:</p>\n<blockquote>\n<p>Something that I haven't seen brought up in discussions much, but still think is worth discussing is the option of making <code>fn foo() throws {}</code> use <code>Result&lt;(), Box&lt;dyn std::error::Error + Send + Sync + 'static&gt;&gt;</code> as its return type</p>\n</blockquote>\n<p>This would be a sad outcome for <code>core</code>, though I'm not sure how sad.</p>",
        "id": 196231574,
        "sender_full_name": "Lokathor",
        "timestamp": 1588621902
    },
    {
        "content": "<p>I think, <span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span>, you were saying the same thing I was trying to say. That I would want to consider any type annotation syntax that one would use at fn level and mirror at the block level.</p>",
        "id": 196242661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588627956
    },
    {
        "content": "<p>I also think that a default that is 'the dyn Error type' feels very useful; tbh, I found working with Fehler quite nice in this way. Being able to just annotate functions with <code>#[throws]</code> felt good. I actually even <em>prefer</em> that syntax to <code>-&gt; u32 throws {</code>, which.. reads kind of strangely to me, though I might get used to it.</p>",
        "id": 196242699,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588627990
    },
    {
        "content": "<p>I was initially concerned about the need to accommodate functions that return <code>Option</code> and the like, but I'm less concerned about that now, it seems like a less common case, and requiring a bit of extra annotation might be ok</p>",
        "id": 196242739,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588628031
    },
    {
        "content": "<p>In any case, I very much agree that it's a good idea to start from a place of sketching out the end-user experience we're looking for.</p>",
        "id": 196242822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588628061
    },
    {
        "content": "<p>This btw is precisely the sort of case I was thinking about when suggesting that we can use procedural macros (and perhaps \"core features\" that we export in an intentionally odd-ball way) to help drive user-space experimentation and for all of us to gain a better feel of what it's like to use features in practice, versus arguing from theory. (In my ideal world, we'd even run some limited experiments of teaching folks to use different systems...)</p>",
        "id": 196242923,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588628140
    },
    {
        "content": "<p>In this case, we may not need much beyond what Fehler already provides, I suppose, though I think that plausibly a \"core version\" of try blocks might help -- maybe just the ability to break-with-value</p>",
        "id": 196243010,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588628183
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/Design.20meeting.3A.20try.2C.20oh.20my!/near/196242661\" title=\"#narrow/stream/213817-t-lang/topic/Design.20meeting.3A.20try.2C.20oh.20my!/near/196242661\">said</a>:</p>\n<blockquote>\n<p>I think, <span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span>, you were saying the same thing I was trying to say. That I would want to consider any type annotation syntax that one would use at fn level and mirror at the block level.</p>\n</blockquote>\n<p>This line of thinking suggests to me that there might be some useful parallels with closures- those also default to no annotation but allow you to specify a return type with <code>-&gt;</code>, which is also the same as the one you use at fn level. Maybe there are some common patterns people have found for using <code>?</code> in closures?</p>",
        "id": 196381233,
        "sender_full_name": "rpjohnst",
        "timestamp": 1588721562
    },
    {
        "content": "<p>(Closures would also presumably inherit any sort of fn decl syntax for <code>throws</code>/<code>try</code>/whatever else?)</p>",
        "id": 196381278,
        "sender_full_name": "rpjohnst",
        "timestamp": 1588721616
    },
    {
        "content": "<p>I very rarely get to use <code>?</code> in closures because the majority of closures I write don't get to return result - e.g. in iterator adapters. Most of the time that means rewriting as a for loop or so.</p>",
        "id": 196622795,
        "sender_full_name": "simulacrum",
        "timestamp": 1588766156
    },
    {
        "content": "<p>sigh, so true</p>",
        "id": 196640191,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588774392
    },
    {
        "content": "<p>Yeah, same problem here. I wanted to be able to use <code>.unwrap_or_else</code> on an Option, but the closure needed to use <code>?</code>, so I had to write an explicit match.</p>",
        "id": 196657356,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588781242
    },
    {
        "content": "<p>So, I'd like to post the meeting video and some notes -- I'm wondering if folks agree with my <a href=\"https://paper.dropbox.com/doc/Try-oh-my--AzWHHy50~p4DUrxHGZYxmIw8Ag-yRDursGetP5YcDdOTSebo\" title=\"https://paper.dropbox.com/doc/Try-oh-my--AzWHHy50~p4DUrxHGZYxmIw8Ag-yRDursGetP5YcDdOTSebo\">takeaways</a> -- I guess I'll reskim the comments here, but I don't feel like they had any missing notes.</p>",
        "id": 196778633,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588861834
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/Design.20meeting.3A.20try.2C.20oh.20my!/near/196657356\" title=\"#narrow/stream/213817-t-lang/topic/Design.20meeting.3A.20try.2C.20oh.20my!/near/196657356\">said</a>:</p>\n<blockquote>\n<p>Yeah, same problem here. I wanted to be able to use <code>.unwrap_or_else</code> on an Option, but the closure needed to use <code>?</code>, so I had to write an explicit match.</p>\n</blockquote>\n<p>I really wish we just had <code>opt ☃ \"hello\".to_string()</code> instead of <code>opt.unwrap_or_else(|| \"hello\".to_string())</code>.  Then it wouldn't have all the closure barriers, so it could <code>?</code>, <code>return</code>, <code>yeet</code>, ...</p>",
        "id": 197008235,
        "sender_full_name": "scottmcm",
        "timestamp": 1589052492
    },
    {
        "content": "<p>I was just writing a table that was similar to this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">async</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">try</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>So the closure made me think about <code>try -&gt; TypeHere { 4 }</code> as ascription syntax for <code>try</code>.  Dunno if that's a good idea, or a terrible one because of the return-type-sugar conversations.</p>",
        "id": 197008432,
        "sender_full_name": "scottmcm",
        "timestamp": 1589052680
    },
    {
        "content": "<p>I'm personally a fan (of the <code>-&gt; Ty</code> syntax)</p>",
        "id": 197207755,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1589233022
    },
    {
        "content": "<p>but I also vaguely want it to match the type ascription syntax</p>",
        "id": 197207869,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1589233086
    },
    {
        "content": "<p>(which could also be <code>-&gt;</code>, but I know there has been controversy over this)</p>",
        "id": 197207900,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1589233120
    },
    {
        "content": "<p>I would say that <code>-&gt;</code> is not a bad idea, but I would expect that if we permitted</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>and</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">try</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>that the meaning of those <code>T</code> types ought to match, right?</p>",
        "id": 197208250,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589233350
    },
    {
        "content": "<p>Agreed, niko.  That's what worried me about it, because it implies solving <code>try -&gt; u64 throws io::Error</code> or similar as part of the try block itself, which would be nice to avoid, since the ok type isn't the interesting part of the ascription for the block.</p>",
        "id": 197457459,
        "sender_full_name": "scottmcm",
        "timestamp": 1589395161
    },
    {
        "content": "<p>So (assuming for this post that we want that sugar) I'd probably end up writing something more like <code>try -&gt; _ throws anyhow::Error</code> most often, which seems a bit odd to me for some reason.</p>",
        "id": 197457797,
        "sender_full_name": "scottmcm",
        "timestamp": 1589395310
    },
    {
        "content": "<p>Unbaked musing: maybe a syntax that doesn't require mentioning the ok type at all, since that's better specified in the body or via context anyway?  Strawman <code>try ☃ std::io::Result { ... }</code>, where you pass a generic type with one parameter?  (<code>☃</code> could be <code>in</code> or something, but that's not important.)</p>",
        "id": 197458107,
        "sender_full_name": "scottmcm",
        "timestamp": 1589395453
    },
    {
        "content": "<p>I think that it would also be nice if in the simple case, where all the <code>Err</code> types in a <code>try { ... }</code> are exactly the same, such a decl would not be needed</p>",
        "id": 197460186,
        "sender_full_name": "Sebastian Malton",
        "timestamp": 1589396411
    },
    {
        "content": "<p>Agreed, <span class=\"user-mention\" data-user-id=\"247082\">@Sebastian Malton</span> -- that was one of the things on the wishlist for discussion in the meeting.  </p>\n<p>It's challenging because the <code>From::from</code> is currently part of the <code>?</code>.  The simplest fix I could think of would be to have <code>try { (a?, b?) } </code> be different from <code>try ☃ SomeType { (a?, b?) }</code> (so that the former wouldn't do error- or carrier-conversion), but that implies that <code>try ☃ _ { ... }</code> and <code>try { ... }</code> would be different, which also seems suboptimal.</p>",
        "id": 197484885,
        "sender_full_name": "scottmcm",
        "timestamp": 1589408685
    },
    {
        "content": "<p>Maybe, though I don't think that suboptimal. Especially since we are talking about type ascription in the first place, leaving it as <code>_</code> in <code>try ☃ _</code> seems like it would never work anyway.</p>",
        "id": 197485609,
        "sender_full_name": "Sebastian Malton",
        "timestamp": 1589409137
    },
    {
        "content": "<p>Hmm, that's an interesting observation <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 197485717,
        "sender_full_name": "scottmcm",
        "timestamp": 1589409212
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/213817-t-lang/topic/Design.20meeting.3A.20try.2C.20oh.20my!/near/197457797\">said</a>:</p>\n<blockquote>\n<p>So (assuming for this post that we want that sugar) I'd probably end up writing something more like <code>try -&gt; _ throws anyhow::Error</code> most often, which seems a bit odd to me for some reason.</p>\n</blockquote>\n<p>imo what this argues for is</p>\n<ol>\n<li>anyhow should move into libstd, let's say as <code>std::error::Any</code></li>\n<li><code>throws std::error::Any</code> (or whatever) would be the default</li>\n</ol>",
        "id": 197713718,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589558677
    },
    {
        "content": "<p>I would also say that <em>even if</em> we don't use <code>-&gt;</code> notation, it would seem best for <code>try fn</code> (should it exist) and type ascription on <code>try</code> to line up</p>",
        "id": 197713838,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589558724
    },
    {
        "content": "<p>I feel like we need to go over this thread and do a write-up with key points etc</p>",
        "id": 197713865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589558734
    },
    {
        "content": "<p>What does <code>core</code> do though?</p>",
        "id": 197715135,
        "sender_full_name": "Lokathor",
        "timestamp": 1589559351
    },
    {
        "content": "<p>idk we have to figure it out :)</p>",
        "id": 197715229,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589559380
    },
    {
        "content": "<p>maybe if you opt out from libstd you have to specify your error type yourself</p>",
        "id": 197715275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589559406
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 197717809,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1589560444
    },
    {
        "content": "<p>Not to bikeshed, but we shouldn't call it <code>Any</code>, because we have something by that name already.</p>",
        "id": 197724202,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589563315
    },
    {
        "content": "<p>(did that stop us with <code>io::Result</code> ... <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> )</p>",
        "id": 197726540,
        "sender_full_name": "pnkfelix",
        "timestamp": 1589564416
    },
    {
        "content": "<p>I am going to do the bit where I say I think we should call it Report</p>",
        "id": 197727754,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1589564960
    },
    {
        "content": "<p>indeed we can't call it any, I know</p>",
        "id": 197754699,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589578135
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> I've experienced a great deal of pain caused by <code>std::fmt::Write</code> and <code>std::io::Write</code>.</p>",
        "id": 197755039,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589578367
    },
    {
        "content": "<p>gotta write the right Write, right?</p>",
        "id": 197755358,
        "sender_full_name": "cuviper",
        "timestamp": 1589578584
    },
    {
        "content": "<p>I think that the best thing for the long term health of Rust is for code to be as <code>no_std</code> as possible as often as possible \"by default\".</p>\n<p>So any solution which is, uh, \"inclined\" (to pick as neutral a term as possible) against giving a smooth <code>no_std</code> experience is a bad path for the language to take.</p>",
        "id": 197756708,
        "sender_full_name": "Lokathor",
        "timestamp": 1589579589
    },
    {
        "content": "<p>Hate to ask, but i'd looked and didn't see this meeting posted, I guess at least there is the notes!</p>",
        "id": 207981538,
        "sender_full_name": "matt rice",
        "timestamp": 1598371051
    },
    {
        "content": "<p>I think it was recorded. <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ?</p>",
        "id": 208022280,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598388943
    },
    {
        "content": "<p>Hmm, I think so, I can look back through recordings</p>",
        "id": 208114004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598458819
    }
]