[
    {
        "content": "<p>So, processing the annual survey, there are a lot of people eager for GATs to be stabilised. Unfortunately there is not much context there (people literally talk about \"GATs\", not what they want to use them for). I would like to understand why some people are so excited for the feature. The motivations I know about are lending iterators (which I think is a strong motivation, but which I did not expect to be so well known), usage implementing impl Trait and async functions in traits (but this is an implementation detail and I would expect people excited about these things to mention them explicitly), and resolving some difficult and subtle lifetime issues in library design (again not what I would expect to be broad appeal). What are other reasons GATs are desired?</p>",
        "id": 269113751,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1643034908
    },
    {
        "content": "<p>The <code>Rebind</code> pattern may be useful for some collections/smart pointers (or even dumb pointers), and needs GATs.<br>\nI can imagine the f ollowing trait being useful, including in the definition of DerefMove (which could be in terms of this for some sentinel type).</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">RebindPointer</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>: <span class=\"nc\">Deref</span><span class=\"o\">&lt;</span><span class=\"n\">Target</span><span class=\"o\">=</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"k\">type</span> <span class=\"nc\">Rebind</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span>: <span class=\"nc\">RebindPointer</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">RebindPointer</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">T</span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Rebind</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">U</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"c1\">// etc.</span>\n</code></pre></div>",
        "id": 269114446,
        "sender_full_name": "Connor Horman",
        "timestamp": 1643035215
    },
    {
        "content": "<p>Since, at the end of the day, GATs are mainly <code>for&lt;…&gt;</code> quantifications in disguise, I find it useful to also distinguish LGATs from TGATs (lifetime-generic <em>vs.</em> type-generic (and, FWIW, in the latter <code>const</code>-generic would be included as well)).</p>\n<ul>\n<li>\n<p>The former can already be perfectly polyfilled in stable Rust, AFAIK, since we already have <code>for&lt;'lt&gt; …</code> quantifications (I even started wondering about writing a proc-macro for that <code>#[autogatic]</code>, in charge of making the necessary conversions to feature GAT sugar but implementing it with stable non-GAT semantics — the \"GATs will be featured soon\" completely stopped me in those tracks, since properly implementing such a proc-macro was gonna require a non-negligible amount of code, and the thus few months of usefulness were not gonna make up for it).</p>\n</li>\n<li>\n<p>The latter, on the other hand, is technically enabling <code>for&lt;T&gt;</code> (and <code>for&lt;const …&gt;</code>) quantifications, that is, the ability to polyfill HKTs, which is otherwise not possible (<em>c.f.</em> the <code>RebindPointer</code> example of <span class=\"user-mention\" data-user-id=\"257758\">@Connor Horman</span>).</p>\n</li>\n</ul>\n<p>So, in a way, <span class=\"user-mention\" data-user-id=\"256841\">@Nick Cameron</span>, your question becomes: what are the motivations behind HTKs, and there can be a few; as well as not needing a <code>#[autogatic]</code> proc-macro for <code>for&lt;'_&gt;</code> lifetime quantifications (<em>e.g.</em>, for <code>LendingIterator</code>).</p>\n<p>Regarding <code>LendingIterator</code>, btw, I'll rehearse my skepticism towards actually implementing it, with proper GATs or some <code>#[autogatic]</code> equivalence, without Polonius: one currently cannot write adapters such as <code>.filter()</code> without Polonius</p>",
        "id": 269116316,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1643036017
    },
    {
        "content": "<p>I'm not familiar with Polonius so forgive me if this is a dumb question, aiui Polonius is a re-implementation of the borrow checker, so you mean some feature/improved flexiblity enabled by Polonius rather than the project itself?</p>",
        "id": 269118049,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1643036662
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"257758\">@Connor Horman</span> I'm not familiar with the Rebind pattern, could you explain what is going on here please?</p>",
        "id": 269118161,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1643036709
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256841\">Nick Cameron</span> <a href=\"#narrow/stream/213817-t-lang/topic/Understanding.20the.20motivations.20for.20GATs/near/269118161\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"257758\">Connor Horman</span> I'm not familiar with the Rebind pattern, could you explain what is going on here please?</p>\n</blockquote>\n<p>The rebind pattern is a pattern (used significantly in the C++ standard library, but I can imagine some uses in rust, <code>DerefMove</code> being one) which allows you to take a concrete instantiation of a generic type and \"rebind it\" to a similar type but for a different instantiation. For example, the above <code>RebindPointer</code> allows you to take a smart (or dumb) pointer that implements the trait, and rebind the pointer type to a new pointee without changing the kind of pointer. There could then be some mechanism for converting between the two, and that mechanism could be generic.</p>",
        "id": 269118765,
        "sender_full_name": "Connor Horman",
        "timestamp": 1643036916
    },
    {
        "content": "<p>In C++, it's used for the allocator api, and the pointer api together. The default definition of <code>std::allocator_traits&lt;A&gt;::void_pointer</code> is <code>std::pointer_traits&lt;std::allocator_traits&lt;A&gt;::pointer&gt;::rebind&lt;void&gt;</code> (use of <code>typename</code> elided for readability), which would be analogous to <code>&lt;&lt;A as AllocatorTraits&gt;::Pointer as RebindPointer&gt;::Rebind&lt;()&gt;</code> in rust (using the above definition).</p>",
        "id": 269119336,
        "sender_full_name": "Connor Horman",
        "timestamp": 1643037139
    },
    {
        "content": "<p>So it is a utility type for making it easier to abstract over the concept of a pointer to a thing?</p>",
        "id": 269122744,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1643038452
    },
    {
        "content": "<p>Sorry, that was vague. I mean that it helps you write code for P&lt;T&gt; -&gt; P&lt;U&gt; and constrain P to 'pointer's</p>",
        "id": 269124120,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1643039004
    },
    {
        "content": "<p>I'd like to give another view of this (not very t-lang related): <br>\nOne cause is this: Many Rust textbooks mentioned GAT as high priority Rust unfinished feature, and there's misunderstanding around readers that Rust is kind of \"incomplete\" without GAT. So when some people talk about GATs, they're really talking about making Rust \"language design finished\".<br>\nAnother cause is this: I think a few major framework-style projects have expressed their opinion that, if GATs is there, they can have nicer APIs. So people believe the completion of GAT will improve their ergonomics. So they want to wait for this feature to land before seriously investigating into Rust.</p>",
        "id": 269124499,
        "sender_full_name": "Charles Lew",
        "timestamp": 1643039165
    },
    {
        "content": "<p>I've also heard this about libraries/frameworks, but I've not seen it myself. Do you know where library authors have said this (I'm keen to see what APIs they have in mind)</p>",
        "id": 269125220,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1643039491
    },
    {
        "content": "<p>I've definitely heard a lot about \"Q:Why do i need <code>async_trait</code> crate here? A: Because GAT is missing :).\" style talk at random places (Yes, We know that other things are needed here too). I'll try to collect some from the Internet with some seaerch.</p>",
        "id": 269126771,
        "sender_full_name": "Charles Lew",
        "timestamp": 1643040047
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 269126829,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1643040077
    },
    {
        "content": "<p>I guess that is an indirect way for people to become excited about GATs as an implementation mechanism for async in traits!</p>",
        "id": 269126920,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1643040109
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256841\">@Nick Cameron</span> Here's an example: <a href=\"https://github.com/rust-ndarray/ndarray/issues/519\">https://github.com/rust-ndarray/ndarray/issues/519</a></p>",
        "id": 269127700,
        "sender_full_name": "pachi",
        "timestamp": 1643040407
    },
    {
        "content": "<p>And another one: <a href=\"https://docs.rs/ndarray/0.15.2/ndarray/trait.MultiSliceArg.html\">https://docs.rs/ndarray/0.15.2/ndarray/trait.MultiSliceArg.html</a></p>",
        "id": 269127935,
        "sender_full_name": "pachi",
        "timestamp": 1643040491
    },
    {
        "content": "<p>IIRC it was also useful for generic number types  as they could have the identity values: Zero and One, as associated values, though I'm not sure whether associated items (consts) are enough.</p>",
        "id": 269128566,
        "sender_full_name": "pachi",
        "timestamp": 1643040732
    },
    {
        "content": "<p>In my case, as I'm interested in numerical computing, as far as I know, GATS, const generics and specialization are needed for much more ergonomic libraries.</p>",
        "id": 269128746,
        "sender_full_name": "pachi",
        "timestamp": 1643040807
    },
    {
        "content": "<p>A few from the web area:<br>\n<a href=\"https://github.com/launchbadge/sqlx/issues/419#issue-641044125\">https://github.com/launchbadge/sqlx/issues/419#issue-641044125</a><br>\n<a href=\"https://github.com/diesel-rs/diesel/issues/2922\">https://github.com/diesel-rs/diesel/issues/2922</a><br>\n<a href=\"https://docs.rs/galemu/latest/galemu/\">https://docs.rs/galemu/latest/galemu/</a>   (this crate itself is not that popular but the documentation is representative)<br>\n<a href=\"https://github.com/hyperium/hyper/issues/2144#issuecomment-592758059\">https://github.com/hyperium/hyper/issues/2144#issuecomment-592758059</a><br>\n<a href=\"https://github.com/actix/actix/issues/438#issuecomment-711109357\">https://github.com/actix/actix/issues/438#issuecomment-711109357</a></p>\n<p>And a few random blogs.</p>\n<p><a href=\"https://smallcultfollowing.com/babysteps/blog/2019/10/26/async-fn-in-traits-are-hard/\">https://smallcultfollowing.com/babysteps/blog/2019/10/26/async-fn-in-traits-are-hard/</a>  (this is linked from async-trait 's crate-level documentation)<br>\n<a href=\"https://boats.gitlab.io/blog/post/async-methods-i\">https://boats.gitlab.io/blog/post/async-methods-i</a><br>\n<a href=\"https://varkor.github.io/blog/2019/03/28/idiomatic-monads-in-rust.html\">https://varkor.github.io/blog/2019/03/28/idiomatic-monads-in-rust.html</a><br>\n<a href=\"https://stackoverflow.com/questions/58092746/is-there-an-intrinsic-reason-explaining-why-rust-does-not-have-higher-kinded-typ\">https://stackoverflow.com/questions/58092746/is-there-an-intrinsic-reason-explaining-why-rust-does-not-have-higher-kinded-typ</a></p>",
        "id": 269131091,
        "sender_full_name": "Charles Lew",
        "timestamp": 1643041710
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256841\">Nick Cameron</span> <a href=\"#narrow/stream/213817-t-lang/topic/Understanding.20the.20motivations.20for.20GATs/near/269118049\">said</a>:</p>\n<blockquote>\n<p>I'm not familiar with Polonius so forgive me if this is a dumb question, aiui Polonius is a re-implementation of the borrow checker, so you mean some feature/improved flexiblity enabled by Polonius rather than the project itself?</p>\n</blockquote>\n<p>yes, here is the post I was implicitly alluding to: <a href=\"#narrow/stream/219381-t-libs/topic/APIs.20with.20GATs/near/268182714\">https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/APIs.20with.20GATs/near/268182714</a></p>",
        "id": 269140093,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1643045342
    },
    {
        "content": "<p>Love this thread, but don't have time right now to read through it. Will take a look later!</p>",
        "id": 269141747,
        "sender_full_name": "Jack Huey",
        "timestamp": 1643046094
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256841\">Nick Cameron</span> <a href=\"#narrow/stream/213817-t-lang/topic/Understanding.20the.20motivations.20for.20GATs/near/269124120\">said</a>:</p>\n<blockquote>\n<p>Sorry, that was vague. I mean that it helps you write code for P&lt;T&gt; -&gt; P&lt;U&gt; and constrain P to 'pointer's</p>\n</blockquote>\n<p>Yeah, I'd say so. A real-life example is the following crate, and especially the linked to section: <a href=\"https://docs.rs/archery/0.4.0/archery/index.html#alternative-approaches\">https://docs.rs/archery/0.4.0/archery/index.html#alternative-approaches</a>, which, in turn, mentions this short blog post: <a href=\"https://joshlf.com/post/2018/10/18/rust-higher-kinded-types-already\">https://joshlf.com/post/2018/10/18/rust-higher-kinded-types-already</a>.</p>\n<p>Right now there are <code>ArcK</code> and <code>RcK</code> \"pointer families\", with methods that are all generic over a type parameter, and the whole thing relies on <code>unsafe</code> type-erasure to avoid the cumbersome aspect of otherwise having to say</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Ptr_</span><span class=\"w\"> </span>: <span class=\"nc\">GenericPointer</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">GenericPointer</span><span class=\"o\">&lt;</span><span class=\"kt\">u16</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">GenericPointer</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>which often end up bubbling all the way up and exposing implementation details, with all the APi stability concerns that leads to.</p>\n<p>If we could write:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Ptr_</span><span class=\"w\"> </span>: <span class=\"nc\">for</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">GenericPointer</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"c1\">// or even better:</span>\n<span class=\"n\">Ptr_</span><span class=\"w\"> </span>: <span class=\"nc\">GenericPointer</span><span class=\"w\"> </span><span class=\"c1\">// with a GAT assoc ty</span>\n</code></pre></div>\n<p>then that would be quite convenient, and could thus greatly reduce the <code>unsafe</code> of crates such as <code>::archery</code></p>",
        "id": 269144316,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1643047209
    },
    {
        "content": "<p>Btw, is there any more clarity <em>w.r.t</em> the timeline of GAT's stabilization? I'd be willing to do tackle this <code>#[autogatic]</code> polyfill idea, especially if it could relieve a bit the pressure on the real language feature, much like <code>#[async_trait]</code> has been doing all this time</p>",
        "id": 269150039,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1643049600
    },
    {
        "content": "<p>Stabilization: <em>soon™</em></p>",
        "id": 269153575,
        "sender_full_name": "Jack Huey",
        "timestamp": 1643050880
    },
    {
        "content": "<p>In all honesty, I'd love to see more experimentation <em>with</em> GATs than <em>workarounds</em></p>",
        "id": 269153722,
        "sender_full_name": "Jack Huey",
        "timestamp": 1643050925
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/213817-t-lang/topic/Understanding.20the.20motivations.20for.20GATs/near/269153575\">said</a>:</p>\n<blockquote>\n<p>Stabilization: <em>soon™</em></p>\n</blockquote>\n<p>The only remaining blocker is <code>where</code> syntax, right?</p>",
        "id": 269164322,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1643054288
    },
    {
        "content": "<p>That's \"resolved\" - just need to update the PR for implementation.</p>",
        "id": 269164522,
        "sender_full_name": "Jack Huey",
        "timestamp": 1643054396
    },
    {
        "content": "<p>Would like to get the few PRs I have open for GATs landed.</p>",
        "id": 269164612,
        "sender_full_name": "Jack Huey",
        "timestamp": 1643054413
    },
    {
        "content": "<p>Need to go through issues that aren't triaged.</p>",
        "id": 269164671,
        "sender_full_name": "Jack Huey",
        "timestamp": 1643054428
    },
    {
        "content": "<p>And want to think through a little bit about GATs in std and what that will look like.</p>",
        "id": 269164715,
        "sender_full_name": "Jack Huey",
        "timestamp": 1643054452
    },
    {
        "content": "<p>Then stabilization report</p>",
        "id": 269164744,
        "sender_full_name": "Jack Huey",
        "timestamp": 1643054463
    },
    {
        "content": "<p>The only two PRs that <em>must</em> land before stabilization are <a href=\"https://github.com/rust-lang/rust/issues/92917\">#92917</a> and <a href=\"https://github.com/rust-lang/rust/issues/90076\">#90076</a> though.</p>",
        "id": 269164963,
        "sender_full_name": "Jack Huey",
        "timestamp": 1643054560
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> did you decide what to do about the self bounds on lifetimes ?</p>",
        "id": 269165180,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1643054664
    },
    {
        "content": "<p>What do you mean? You mean <code>Self: 'a</code> bounds?</p>",
        "id": 269165228,
        "sender_full_name": "Jack Huey",
        "timestamp": 1643054691
    },
    {
        "content": "<p>Yes, that's the one!</p>",
        "id": 269165258,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1643054709
    },
    {
        "content": "<p>Yeah, that's resolved. We now error if it's missing when it \"should\" be there</p>",
        "id": 269165301,
        "sender_full_name": "Jack Huey",
        "timestamp": 1643054737
    },
    {
        "content": "<p><a href=\"https://rust-lang.github.io/generic-associated-types-initiative/explainer/required_bounds.html#required-bounds\">https://rust-lang.github.io/generic-associated-types-initiative/explainer/required_bounds.html#required-bounds</a></p>",
        "id": 269165346,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1643054759
    },
    {
        "content": "<p>i.e., if you can prove that bound to hold for all instances where the GAT is created in the trait</p>",
        "id": 269165399,
        "sender_full_name": "Jack Huey",
        "timestamp": 1643054766
    },
    {
        "content": "<p>Err, actually. There is one bit that is unresolved.</p>",
        "id": 269165548,
        "sender_full_name": "Jack Huey",
        "timestamp": 1643054841
    },
    {
        "content": "<p>So you decided not to make the bounds there by default?</p>",
        "id": 269165671,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1643054889
    },
    {
        "content": "<p>Or that still might happen later?</p>",
        "id": 269165709,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1643054912
    },
    {
        "content": "<p>This should error: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=5dfa889a16a936338aa5d346ced567d5\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=5dfa889a16a936338aa5d346ced567d5</a></p>",
        "id": 269165770,
        "sender_full_name": "Jack Huey",
        "timestamp": 1643054944
    },
    {
        "content": "<p>There are no implicit bounds; you are in fact <em>required</em> to write them.</p>",
        "id": 269165813,
        "sender_full_name": "Jack Huey",
        "timestamp": 1643054969
    },
    {
        "content": "<p>This test should be updated with a FIXME so it doesn't get missed: <a href=\"https://github.com/rust-lang/rust/blob/51126be1b260216b41143469086e6e6ee567647e/src/test/ui/generic-associated-types/self-outlives-lint.rs#L141\">https://github.com/rust-lang/rust/blob/51126be1b260216b41143469086e6e6ee567647e/src/test/ui/generic-associated-types/self-outlives-lint.rs#L141</a></p>",
        "id": 269165984,
        "sender_full_name": "Jack Huey",
        "timestamp": 1643055040
    },
    {
        "content": "<blockquote>\n<p>lending iterators (which I think is a strong motivation, but which I did not expect to be so well known)</p>\n</blockquote>\n<p>I think it's relatively common when you try to do some parsing things, which feels like a common area for people to use Rust for.</p>\n<p>Concretely: I have a local buffer that I write into for scratch space. I want to give out references to that and then reuse the buffer on the next call.</p>\n<p>I have an XML parser that does exactly this and I have to rewrite it as an iterator that returns <code>usizes</code> and then have an \"exchange\" function to get the string slices back. Quite annoying. I agree with the concerns about Polonius though (see my thread at <a class=\"stream-topic\" data-stream-id=\"144729\" href=\"/#narrow/stream/144729-wg-traits/topic/GAT.20.C3.97.20Polonius\">#wg-traits &gt; GAT × Polonius</a>)</p>",
        "id": 269167620,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1643055873
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256841\">Nick Cameron</span> <a href=\"#narrow/stream/213817-t-lang/topic/Understanding.20the.20motivations.20for.20GATs/near/269165709\">said</a>:</p>\n<blockquote>\n<p>Or that still might happen later?</p>\n</blockquote>\n<p>My understanding is that by requiring that they be present, we're still allowing for the possibility of relaxing that in the future, once we have practical experience about what does and doesn't require it and if there are exceptions.</p>",
        "id": 269168197,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643056180
    },
    {
        "content": "<p>When last we discussed that issue in the lang team, I remember us saying roughly that, that we might change the default in the future if that seemed like the right answer, and that we should be able to do so compatibly.</p>",
        "id": 269168311,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643056215
    },
    {
        "content": "<p>Yes, exactly</p>",
        "id": 269173309,
        "sender_full_name": "Jack Huey",
        "timestamp": 1643058634
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/213817-t-lang/topic/Understanding.20the.20motivations.20for.20GATs/near/269153722\">said</a>:</p>\n<blockquote>\n<p>In all honesty, I'd love to see more experimentation <em>with</em> GATs than <em>workarounds</em></p>\n</blockquote>\n<p>Yeah, this, a lot :-) Not that I get a vote on stabilisation, but for me personally I think the biggest blocker to stabilising GATs is actually having folk using them and proving them be both useful, and workable in the details. People seem to be holding off on using GATs as if they weren't real yet, but they are on nightly now and I would want  to see real life usage to justify stabilisation, rather than considering stabilisation as a blocker to real life usage</p>",
        "id": 269261602,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1643119862
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/213817-t-lang/topic/Understanding.20the.20motivations.20for.20GATs/near/269153722\">said</a>:</p>\n<blockquote>\n<p>In all honesty, I'd love to see more experimentation <em>with</em> GATs than <em>workarounds</em></p>\n</blockquote>\n<p>Having workarounds is one of the main ways to get experimentation going, though.</p>\n<p>Making <code>nightly</code>-only libraries can sometimes be nice, but it's way less rewarding than being able to feature support for stable Rust.</p>\n<p>So, <em>imho</em>, if GATs are waiting for more experimentation before getting stabilized, then it seems to make sense to write a tool that would very ergonomically tackle the to-workarounds-translation, precisely to let people not be encumbered with that, and directly experiment on stable with a feel of what is to come.</p>\n<p>To illustrate: it would be possible to implement the following on stable rust, I believe.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[autogatic]</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">LendingIterator</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"o\">&lt;'</span><span class=\"na\">next</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"w\"> </span>: <span class=\"o\">'</span><span class=\"na\">next</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">Item</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[autogatic]</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">LendingIterator</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">WindowsMut</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"o\">&lt;'</span><span class=\"na\">next</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"w\"> </span>: <span class=\"o\">'</span><span class=\"na\">next</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">next</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">];</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">next</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 269293332,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1643132192
    },
    {
        "content": "<p>How would that work on stable?</p>",
        "id": 269293459,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1643132271
    },
    {
        "content": "<p>I haven't looked into all the details, especially <em>w.r.t</em> <code>dyn</code> safety, but it would be something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">LendingIterator_</span><span class=\"o\">&lt;'</span><span class=\"na\">next</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_where_Self_outlives_next</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">next</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">LendingIterator_</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">Self</span><span class=\"w\"> </span>: <span class=\"nc\">LendingIterator</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">LendingIterator</span><span class=\"w\"> </span>: <span class=\"nc\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">gat</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">LendingIterator</span><span class=\"o\">&lt;'</span><span class=\"na\">gat</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">LendingIterator</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">Self</span><span class=\"w\"> </span>: <span class=\"nc\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">gat</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">LendingIterator</span><span class=\"o\">&lt;'</span><span class=\"na\">gat</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>for the trait def, and:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">next</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">LendingIterator_</span><span class=\"o\">&lt;'</span><span class=\"na\">next</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">WindowsMut</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">next</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">];</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"err\">…</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>for the impl; something along those lines.</p>",
        "id": 269297460,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1643133756
    },
    {
        "content": "<p>That way, when GATs become stable, <em>ideally</em>, users would just have to remove the <code>#[gat_attr]</code>s and the <code>gat!( … )</code> macros.</p>",
        "id": 269300478,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1643134972
    },
    {
        "content": "<p>I was told it could be worthwile to drop my usecase for GATs in here, so here goes:<br>\nI would use it to remove code duplication for value types of an interpreted programming language. Specifically the following:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">MaybeValue</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">WithValue</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">WithoutValue</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">MaybeValue</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">WithValue</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">MaybeValue</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">WithoutValue</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">ValueOrType</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">MaybeValue</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Bool</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">MaybeValue</span><span class=\"o\">&gt;</span>::<span class=\"n\">Output</span><span class=\"o\">&lt;</span><span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"c1\">// ...</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 269361223,
        "sender_full_name": "T0mstone",
        "timestamp": 1643170842
    },
    {
        "content": "<p>In rusqlite I'd like to use it to change the FromSql trait to allow returning borrowed values (I'd also like it for lending iterators). I haven't mocked this up yet, but will try to play around with it next week when I have more time.</p>\n<p>I think this might qualify as \"resolving some difficult and subtle lifetime issues in library design\" though.</p>",
        "id": 269362625,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1643171771
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/213817-t-lang/topic/Understanding.20the.20motivations.20for.20GATs/near/269293459\">said</a>:</p>\n<blockquote>\n<p>How would that work on stable?</p>\n</blockquote>\n<p>Heh, I've actually just stumbled with a situation where the workaround yields smarter code than the GAT version (that is, the GAT version doesn't compile since it requires that for a <code>for&lt;'next&gt; LendingIterator&lt;Item = &amp;'next mut F&gt;</code>, <code>F</code> be <code>: 'static</code>, even when <code>F</code> is part of <code>Self</code>, whereas with my workaround it doesn't:</p>\n<ul>\n<li>The GAT version: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=997e8eab76b4781579ac1ae00fb403c4\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=997e8eab76b4781579ac1ae00fb403c4</a></li>\n<li>The \"autogatic\" stable-workaround version: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=f8ba65e13b2fad1166a9b68d3c2ace88\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=f8ba65e13b2fad1166a9b68d3c2ace88</a></li>\n<li>The motivation for this situation (making an iterator out of an middle-layer iterator of a <code>FnMut</code> closure: <a href=\"https://discord.com/channels/273534239310479360/936478838177796178/936957952512888852\">https://discord.com/channels/273534239310479360/936478838177796178/936957952512888852</a></li>\n</ul>",
        "id": 269863728,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1643462244
    },
    {
        "content": "<p>A friend pointed me here while discussing stable rust GAT workarounds. One use case I have for GATs is a type that can store an owned StableDeref combined with an owned value that borrows from that value (i.e. something like ouroboros/rental/owning_ref/...) that is sound, doesn't generate unsafe-using code from macros, and has fewer limitations with respect to the supported types than the existing implementations I found. The idea roughly is to use a lifetime GAT to specify the type of the borrowing value, substituting the self lifetime for the parameter on all accessor functions. This should allow writing the required unsafe parts once as generic code, making it easier to spot potential soundness issues.</p>",
        "id": 269877065,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1643477250
    },
    {
        "content": "<p>I also came up with <a href=\"https://gist.github.com/jix/42d0e4a36ace4c618a59f0ba03be5bf5\">this technique for emulating lifetime GATs on stable rust (gist link)</a>, which I haven't seen before, but to me it seems to avoid some downsides of other workarounds I've seen.</p>",
        "id": 269877227,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1643477459
    },
    {
        "content": "<p>It might even be the case that this technique has some advantages over actual GATs for me here. It allows to specify a lifetime generic type as type parameter, which gives some potentially useful API design options for this specific use case, but I haven't fully worked that out yet.</p>",
        "id": 269877402,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1643477694
    },
    {
        "content": "<p>That <code>for dyn</code> hack is a nice find, I even suspect you can get rid of <code>?Sized</code> by using <code>fn()</code> pointers and a helper trait to extract the return type. And it even generalizes better to arbitrary lifetime arities:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">Context</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"o\">&lt;'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"o\">&lt;'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">  </span>-&gt; <span class=\"o\">&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">Context</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">MyFnOnce</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"o\">&lt;'</span><span class=\"na\">b</span><span class=\"o\">&gt;&gt;&gt;</span>::<span class=\"n\">Output</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 269888370,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1643489993
    },
    {
        "content": "<p>Right the <code>?Sized</code> on the helper associated type isn't needed for the second variant in that gist that uses <code>fn</code> pointers, but if the emulated generic associated type is <code>?Sized</code>, with the first variant you can add <code>?Sized</code> to the helper trait's associated type, while the return type of <code>fn</code> pointers is always sized, so that wouldn't work. To work around that you can always wrap the <code>fn</code> return type in a <code>PhantomData</code>and adjust the helper trait impl accordingly though. I don't think one of these variations is strictly better than any other of them, though. They mostly shift around the places that need a bit more boilerplate.</p>",
        "id": 269889947,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1643491635
    },
    {
        "content": "<p>I haven't looked at higher lifetime arities though. I couldn't come up with use case for those on the spot and for this kind of thing I find it hard to make sure it's actually working and usable without realistic usage examples to test against.</p>",
        "id": 269890158,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1643491918
    },
    {
        "content": "<p>Motivated by seeing this discussion and some frustrations as I realized the edge cases we have been hitting in std::simd, I discovered an interesting use-case where GATs allow expressing const generic associated type constructors which may greatly simplify the library's implementation.</p>",
        "id": 273017289,
        "sender_full_name": "Jubilee",
        "timestamp": 1645653706
    },
    {
        "content": "<p>please share :)</p>",
        "id": 273033933,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645664108
    },
    {
        "content": "<p>... no information sharing for you <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 273361246,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1645907355
    },
    {
        "content": "<p><span aria-label=\"exhausted\" class=\"emoji emoji-1f625\" role=\"img\" title=\"exhausted\">:exhausted:</span></p>",
        "id": 273371689,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645921307
    },
    {
        "content": "<p>sorryyyyy! I had been still experimenting with it so I didn't want to provide thoughts prematurely.</p>",
        "id": 273372926,
        "sender_full_name": "Jubilee",
        "timestamp": 1645923056
    },
    {
        "content": "<p>So I would like to be able to write a trait that can do something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Splat</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Vector</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">L</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">blah</span><span class=\"w\"> </span><span class=\"n\">blah</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">splat</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Vector</span><span class=\"o\">&lt;</span><span class=\"n\">L</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Splat</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Vector</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">L</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">blah</span><span class=\"w\"> </span><span class=\"n\">blah</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Simd</span><span class=\"o\">&lt;</span><span class=\"kt\">f32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">L</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">splat</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Vector</span><span class=\"o\">&lt;</span><span class=\"n\">L</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Simd</span>::<span class=\"n\">from_array</span><span class=\"p\">([</span><span class=\"bp\">self</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">L</span><span class=\"p\">])</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 273373483,
        "sender_full_name": "Jubilee",
        "timestamp": 1645923738
    },
    {
        "content": "<p>possibly with a few more annotations.</p>\n<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> however, I find that while I can get that very simple example to compile, for anything else higher than that, rustc has not been informed that this could actually work. Most notably, if Splat::Vector requires some bounds, it seems I have to repeat all the other bounds.</p>",
        "id": 273373759,
        "sender_full_name": "Jubilee",
        "timestamp": 1645924222
    },
    {
        "content": "<p>Any way I can convince you to write an experience report <a href=\"https://github.com/rust-lang/generic-associated-types-initiative/issues/new/choose\">here</a>, specifically covering things that are less than ideal?</p>",
        "id": 273373819,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645924325
    },
    {
        "content": "<p>mm. that's kind of it.</p>\n<p>everything else was essentially due to the fact that the way GATs work they apparently aren't actually considered as constraining const generics even if they would, so while I hoped they would just naturally emergently interact with each other, rustc doesn't handle them correctly.</p>",
        "id": 273374331,
        "sender_full_name": "Jubilee",
        "timestamp": 1645925336
    },
    {
        "content": "<p>I unfortunately somewhat foolishly tapped out my brain trying to puzzle out all the different ways I could attack it and try to make it work syntactically so I don't have the energy to write an experience report and by the time I recover that I will have forgotten most things.</p>",
        "id": 273374506,
        "sender_full_name": "Jubilee",
        "timestamp": 1645925487
    },
    {
        "content": "<p>oh okay</p>",
        "id": 273374558,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645925584
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/213817-t-lang/topic/Understanding.20the.20motivations.20for.20GATs/near/273374331\">said</a>:</p>\n<blockquote>\n<p>while I hoped they would just naturally emergently interact with each other, rustc doesn't handle them correctly.</p>\n</blockquote>\n<p>this is what I'm curious about: is this just a bug or some missing design</p>",
        "id": 273374568,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645925623
    },
    {
        "content": "<p>when you say constrain im assuming you mean in an impl block?</p>",
        "id": 273374614,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1645925660
    },
    {
        "content": "<p>yeah</p>",
        "id": 273374658,
        "sender_full_name": "Jubilee",
        "timestamp": 1645925762
    },
    {
        "content": "<p>I think thats not specific to const generics then</p>",
        "id": 273374699,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1645925777
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(generic_associated_types)]</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Assoc1</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Assoc2</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Assoc1</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Assoc2</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[();</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait2</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// both of these impls error</span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Trait2</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&gt;</span>::<span class=\"n\">Assoc2</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Trait2</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&gt;</span>::<span class=\"n\">Assoc1</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 273374702,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1645925787
    },
    {
        "content": "<p>hmmmm</p>",
        "id": 273374715,
        "sender_full_name": "Jubilee",
        "timestamp": 1645925830
    },
    {
        "content": "<p>seems consistent with how assoc types normally work since this errors too:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Assoc</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Assoc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait2</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Trait2</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">Assoc</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 273374764,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1645925893
    },
    {
        "content": "<p>I don't think that's correct since the variable should have been multiply constrained by being on both sides of an impl block.</p>",
        "id": 273374790,
        "sender_full_name": "Jubilee",
        "timestamp": 1645925988
    },
    {
        "content": "<p>or at least, \"I don't care if that's correct, it <strong>should</strong> work the way I was trying to use it, damnit.\"</p>",
        "id": 273374834,
        "sender_full_name": "Jubilee",
        "timestamp": 1645926021
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"326176\">Boxy [she/her]</span> <a href=\"#narrow/stream/213817-t-lang/topic/Understanding.20the.20motivations.20for.20GATs/near/273374764\">said</a>:</p>\n<blockquote>\n<p>seems consistent with how assoc types normally work since this errors too:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// stuff</span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Trait2</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">Assoc</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>specifically, I wasn't trying to do <code>impl&lt;T&gt; Trait2 for &lt;() as Trait&lt;T&gt;&gt;::Assoc {}</code><br>\nI was trying to use an associated type to constrain and thus permit a blanket impl over a binary type relationship.<br>\nthere were... several predicates that should have served as sufficient constraint.</p>",
        "id": 273376075,
        "sender_full_name": "Jubilee",
        "timestamp": 1645928017
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> <span class=\"user-mention\" data-user-id=\"137587\">@Gankra</span> mentioned an interesting use case for GATs here <a href=\"https://twitter.com/Gankra_/status/1508204419019587587?t=iBRDFXUlsFV1lkCyNn6F4g&amp;s=19\">https://twitter.com/Gankra_/status/1508204419019587587?t=iBRDFXUlsFV1lkCyNn6F4g&amp;s=19</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/Gankra_/status/1508204419019587587?t=iBRDFXUlsFV1lkCyNn6F4g&amp;s=19\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/37663fd2872232bfa24553d81b8b079cdd79fc11/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f313233373135353532323631343336363230382f6c68686b554158395f6e6f726d616c2e6a7067\"></a><p>oh my god i just remembered \"internal iterators\" were a thing pre-1.0 and that for a while i *REALLY* wanted to add them back to std because they did *something* better and i just found the post where i pitched it and took infinite psychic damage <a href=\"https://t.co/goMYmGTk4R\">https://internals.rust-lang.org/t/traversable-traits/258</a> <a href=\"https://t.co/7xZDzoWn8Z\">https://twitter.com/Gankra_/status/1508204419019587587/photo/1</a></p><span>- Aria the Cat (@Gankra_)</span><div class=\"twitter-image\"><a href=\"https://t.co/7xZDzoWn8Z\"><img src=\"https://uploads.zulipusercontent.net/67d7f50ecc6fd23b71cd29db7a57ec6844df81d6/68747470733a2f2f7062732e7477696d672e636f6d2f6d656469612f464f343364517157594155314676682e6a70673a7468756d62\"></a></div></div></div>",
        "id": 276905860,
        "sender_full_name": "pachi",
        "timestamp": 1648488189
    },
    {
        "content": "<p>IntoIterator exists? This was literally a post from 2014 from before <em>ANY</em> associated types.</p>",
        "id": 276906045,
        "sender_full_name": "Gankra",
        "timestamp": 1648488273
    },
    {
        "content": "<p>They're having a look to interesting use cases for GATs in this topic, and you probably have great uses for them! Just saw the tweet and thought it could be relevant here.</p>",
        "id": 276917971,
        "sender_full_name": "pachi",
        "timestamp": 1648494502
    }
]