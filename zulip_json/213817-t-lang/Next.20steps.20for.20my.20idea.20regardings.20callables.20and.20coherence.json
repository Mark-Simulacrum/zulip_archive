[
    {
        "content": "<p>Hi there! Some time ago, I had this idea: <a href=\"https://internals.rust-lang.org/t/solving-coherence-problems-with-trait-impls-for-closures-provide-a-closure-wrapper-in-libcore-and-make-closure-expressions-evaluate-to-that-type/11174\">https://internals.rust-lang.org/t/solving-coherence-problems-with-trait-impls-for-closures-provide-a-closure-wrapper-in-libcore-and-make-closure-expressions-evaluate-to-that-type/11174</a></p>\n<p>It would help with implementing traits for callables (e.g. closures) <em>without</em> having a blanket impl and getting problems with overlapping impls and coherence. All problems that have been brought up can be resolved and some people liked the idea.</p>\n<p>So how to proceed from here? I don't know a lot about compiler internals. I'm not even sure if t-lang is the most fitting team for this. Should I just open a pre-RFC thread? Or an RFC immediately? I don't feel I have enough knowledge to write an RFC about this. Is someone interested in this and would like to work on that together with me?</p>",
        "id": 247866017,
        "sender_full_name": "Lukas Kalbertodt",
        "timestamp": 1627834852
    },
    {
        "content": "<p>The example you mentioned in that thread already compiles (after minor changes) since <code>Fn</code> is <code>#[fundamental]</code></p>",
        "id": 247945123,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1627924880
    },
    {
        "content": "<p>Hrm, would this also allow specializing on the distinction between <code>Fn</code> vs <code>FnMut</code> closures?</p>",
        "id": 247977658,
        "sender_full_name": "The 8472",
        "timestamp": 1627942106
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink  [he/him]</span> <a href=\"#narrow/stream/213817-t-lang/topic/Next.20steps.20for.20my.20idea.20regardings.20callables.20and.20coherence/near/247945123\">said</a>:</p>\n<blockquote>\n<p>The example you mentioned in that thread already compiles (after minor changes) since <code>Fn</code> is <code>#[fundamental]</code></p>\n</blockquote>\n<p>I believe the issue was not <em>w.r.t.</em> <code>T : Fn…</code> <em>vs.</em>, say, <code>HashMap</code>, but, rather, with the extra <code>&amp;T where T : Trait</code> transitivity. Since <code>Fn</code> is also <code>&amp;</code>-transitive, that leads to a conflicting impl.</p>\n<p>In order to avoid that, the OP wants a way to have some kind of marker on \"primitive\" closures, and they suggested having those be contained within a wrapper type for that. Another option (not saying it's better, just mentioning it for the sake of completeness) would be to have another set of <code>#[fundamental]</code> traits which would only be implemented for <code>$(move)? |…| …</code> closures, meaning it would not be <code>&amp;</code> /<code>&amp;mut</code> / <code>Box</code>-transitive, thus allowing that kind of impls.</p>\n<ul>\n<li>Note that whatever it may be, I think it would be a bit weird for users of the API to observe that <code>dyn Fn…</code> would not work. Because of this observation, I believe specialization could be the right tool for this, albeit, granted, not a near future one. Moreover, it involves the currently unsupported challenge of the diamond problem (<code>&amp;(impl Fn + ?Sized)</code> is a subset of <code>&amp;impl ?Sized</code> and of <code>impl Fn</code>, and the latter two sets are not contained within either), about which I've talked in URLO: <a href=\"https://users.rust-lang.org/t/help-with-min-specialization/56224/3?u=yandros\">https://users.rust-lang.org/t/help-with-min-specialization/56224/3?u=yandros</a></li>\n</ul>",
        "id": 248199211,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1627982668
    }
]