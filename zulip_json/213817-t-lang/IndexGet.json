[
    {
        "content": "<p>I keep hitting cases where something like <code>IndexGet</code> (which doesn't always return a <code>&amp;T</code>) would be useful. I wonder if GATs changes the nature of the game here, actually, as we could offer a generalization of Index and IndexGet?</p>",
        "id": 261298174,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1636744642
    },
    {
        "content": "<p>(What's <code>IndexGet</code>?)</p>",
        "id": 261299351,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1636745208
    },
    {
        "content": "<p>I did some similar thinking experiments before.  The most important use cases can be covered with a <code>DerefTake</code> and a <code>IndexTake</code> trait, without GAT actually needed. something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">IndexTake</span><span class=\"o\">&lt;</span><span class=\"n\">Idx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">index_take</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">idx</span>: <span class=\"nc\">Idx</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Output</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">IndexTake</span><span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"k\">fn</span> <span class=\"nf\">index_take</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">idx</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                 </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 261300556,
        "sender_full_name": "Charles Lew",
        "timestamp": 1636745849
    },
    {
        "content": "<p>We'll need to arrange this to take priority over <code>Index</code> during lookup though.</p>",
        "id": 261300795,
        "sender_full_name": "Charles Lew",
        "timestamp": 1636745949
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219211\">@Jack Wrenn</span> IndexGet is a theoretical trait for when you do <code>obj[index]</code> and get a by-value thing returned to you (T instead of a &amp;T or &amp;mut T)</p>",
        "id": 261306065,
        "sender_full_name": "Lokathor",
        "timestamp": 1636748569
    },
    {
        "content": "<p>don't forget the discussions in rust-lang/rfcs:</p>\n<ul>\n<li><a href=\"https://github.com/rust-lang/rfcs/issues/997\">https://github.com/rust-lang/rfcs/issues/997</a></li>\n<li><a href=\"https://github.com/rust-lang/rfcs/pull/2953\">https://github.com/rust-lang/rfcs/pull/2953</a></li>\n<li>and more...</li>\n</ul>",
        "id": 261306122,
        "sender_full_name": "cuviper",
        "timestamp": 1636748616
    },
    {
        "content": "<p>it might also return a different borrowed type, like <code>Ref&lt;'a, T&gt;</code></p>",
        "id": 261306340,
        "sender_full_name": "cuviper",
        "timestamp": 1636748728
    },
    {
        "content": "<p>I would like both Deref and Index to allow by-value returns</p>",
        "id": 261306515,
        "sender_full_name": "Lokathor",
        "timestamp": 1636748839
    },
    {
        "content": "<p>Hmm, how would this overload the <code>&amp;</code> and <code>&amp;mut</code> versions?  With <code>[]</code> syntax giving back a place, returning something not a borrow is a bit awkward to merge in.</p>",
        "id": 261321033,
        "sender_full_name": "scottmcm",
        "timestamp": 1636757071
    },
    {
        "content": "<p>A GAT version of <code>Borrow</code> would also be useful, for e.g. borrowed forms of enums:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">BorrowGat</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">borrow</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Output</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">enum</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Bar</span><span class=\"p\">(</span><span class=\"nb\">String</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">Baz</span><span class=\"p\">(</span><span class=\"kt\">usize</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">enum</span> <span class=\"nc\">FooBorrowed</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Bar</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">Baz</span><span class=\"p\">(</span><span class=\"kt\">usize</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">BorrowGat</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FooBorrowed</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">borrow</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Output</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 261335620,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1636772721
    },
    {
        "content": "<p>We would<br>\n<strong>really</strong><br>\nlike that over here.</p>",
        "id": 261377975,
        "sender_full_name": "Jubilee",
        "timestamp": 1636834617
    },
    {
        "content": "<p>Having worked with this and dropping it solely due to a lack of (perceived or maybe real) interest, I was wondering what use cases there are for this?</p>\n<p>The SIMD case would want a by-value IndexMove, rather than a by-ref IndexGet copy right? Or is that one of those things that the by-ref one is fine as long as it can be optimized?</p>",
        "id": 261390128,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1636851966
    },
    {
        "content": "<p>Uhhh... all the names feel arbitrary to me and nomenclature gets confusing so I am just gonna explain my use case.</p>\n<p>Our <code>Simd</code> type is functionally a Copy array that contains Copy values, but indexing into <code>Simd</code> returns references to the values in the SIMD type, when we should be able to return copies. This is actually somewhat Bad as we would like there to only rarely be a reference to these values, as ideally the values should live essentially entirely in registers and never <strong>have</strong> to touch the stack.</p>",
        "id": 261579771,
        "sender_full_name": "Jubilee",
        "timestamp": 1637021233
    },
    {
        "content": "<p>Our length is also statically known as a const generic parameter, and we would like to never have to incur bounds checks on valid indexing. That may be too wishlisty but there are a bunch of cases where the proof for the index check would be trivial.</p>",
        "id": 261579928,
        "sender_full_name": "Jubilee",
        "timestamp": 1637021354
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/213817-t-lang/topic/IndexGet/near/261579771\">said</a>:</p>\n<blockquote>\n<p>Our <code>Simd</code> type is functionally a Copy array that contains Copy values, but indexing into <code>Simd</code> returns references to the values in the SIMD type, when we should be able to return copies. </p>\n</blockquote>\n<p>I'm guessing right now, you don't have the <code>Index</code> trait implemented for your <code>Simd</code> type? The signature for <code>IndexGet</code> would be something like <code>fn index_get(&amp;self, index: Idx) -&gt; Self::Output;</code>, which would still take a reference (but I assume we could mir-opt or compiler magic that out)?</p>",
        "id": 262256826,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1637523846
    }
]