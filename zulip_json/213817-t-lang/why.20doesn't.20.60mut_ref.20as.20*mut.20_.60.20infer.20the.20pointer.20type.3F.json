[
    {
        "content": "<p>Is there some sort of language space being reserved here or could the compiler just infer that if you've got <code>mutable_reference as *mut _</code> that it naturally must mean a pointer of the same target type?</p>",
        "id": 268222659,
        "sender_full_name": "Lokathor",
        "timestamp": 1642388290
    },
    {
        "content": "<p>Hmm, can you elaborate?</p>\n<p>It looks like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>both work &lt;<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=67e070760081c65fac8aa8ae0010739d\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=67e070760081c65fac8aa8ae0010739d</a>&gt;</p>",
        "id": 268224311,
        "sender_full_name": "scottmcm",
        "timestamp": 1642390572
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=41effce5cfb5b24cd20f434eef6bcc56\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=41effce5cfb5b24cd20f434eef6bcc56</a><br>\nwas more like what i wanted. actually it was casting to c_void, but same idea. Basically trying to call the <code>cast</code> method on the output of the as-cast before binding it causes the compiler to get confused.</p>\n<p>but maybe that's just a bug somewhere?</p>",
        "id": 268277648,
        "sender_full_name": "Lokathor",
        "timestamp": 1642429863
    },
    {
        "content": "<p>That seems potentially <em>fun</em>.</p>",
        "id": 268285246,
        "sender_full_name": "Connor Horman",
        "timestamp": 1642433453
    },
    {
        "content": "<p>The method layer of indirection may cause type inference to fail.<br>\nFWIW, I personally use <code>&lt;*mut _&gt;::cast(&amp;mut x)</code> instead, which works just fine</p>",
        "id": 268303168,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1642444586
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> That looks like it might just be the usual \"if the LHS still has inference variables around you can't call inherent methods\" bit of how method resolution works.</p>\n<p>That said, this definitely seems like one of those places where it might be nice to have a function instead of the <code>as</code>.  Can't really be a method, because it'd be on everything, but maybe <code>ptr::from_mut(x).cast()</code> or something might make sense.</p>",
        "id": 268303605,
        "sender_full_name": "scottmcm",
        "timestamp": 1642444900
    },
    {
        "content": "<p>sure but, since there's only one possible actual selection why are there still inference variables, is i guess what seems silly to me as a user.</p>\n<p>I'm mostly just trying to save some characters on what's otherwise a long line. But sure i can make a <code>to_cvoid</code> if i really gotta</p>",
        "id": 268304085,
        "sender_full_name": "Lokathor",
        "timestamp": 1642445275
    }
]