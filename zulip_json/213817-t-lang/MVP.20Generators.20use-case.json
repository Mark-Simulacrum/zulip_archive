[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> ! I know we're planning to talk about generators at a lang design team meeting soon. As I understand it, the primary motivation here is for use with <code>async gen fn</code> or <code>async gen</code> blocks. I'm curious to understand the specific use-case we're trying to unblock better. If you have a chance, I'd love to chat with you here (on zulip) or pre-read anything you've had a chance to write so far! I have a feeling that I will have weeds-y followup questions that wouldn't necessarily be a good use of folks time during the synchronous lang design meeting, and would prefer to cover them ahead of time if possible. Thanks in advance for any additional info you're able to provide :)</p>\n<p>cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 237532966,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1620235130
    },
    {
        "content": "<p>I think there are a few key questions -- do we want to target iterators specifically or more than iterators?</p>",
        "id": 237538879,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620237487
    },
    {
        "content": "<p>(streams being \"async interators\")</p>",
        "id": 237538903,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620237497
    },
    {
        "content": "<p>I think that is a good focus.</p>",
        "id": 237539002,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620237545
    },
    {
        "content": "<p>I'd like to have a few good examples to drive the conversation with though</p>",
        "id": 237539038,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620237561
    },
    {
        "content": "<p>I think even \"iterators or more than iterators\" is perhaps a step too close for my question. I'd really like a more holistic understanding of the kinds of problems we'd like people to be able to solve, and whether language-native generators are the right tool to introduce to solve those problems.</p>",
        "id": 237551884,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1620242706
    },
    {
        "content": "<p>As a motivating example then.. avoiding having to write <a href=\"https://rust-lang.github.io/wg-async-foundations/vision/status_quo/alan_hates_writing_a_stream.html\">manual stream impls</a> with state machines</p>",
        "id": 237599451,
        "sender_full_name": "tmandry",
        "timestamp": 1620271318
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> did you have a write-up prepared?</p>",
        "id": 238336172,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620749716
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> do you mind if I post the hackmd you just shared with me so that we can discuss it here? (cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> )</p>",
        "id": 238387669,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1620770065
    },
    {
        "content": "<p>Of course, <br>\n<a href=\"https://hackmd.io/9v81TQSgQcaAiqvHQtzN8w?both\">https://hackmd.io/9v81TQSgQcaAiqvHQtzN8w?both</a></p>",
        "id": 238387761,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1620770127
    },
    {
        "content": "<p>Okay-- after reading this i still think I don't understand the urgency behind this feature. It's already possible to write Streams (even more easily than iterators) using this syntax today, provided that you're (a) comfortable with the cost of a single allocation and (b) comfortable with having the resulting Stream being a voldemort type.</p>",
        "id": 238388092,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1620770333
    },
    {
        "content": "<p>I think (b) is orthogonal to this proposal. The solution to that is type-alias <code>impl Trait</code>, which is a separate feature.</p>",
        "id": 238388335,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1620770446
    },
    {
        "content": "<p>I think that a number of the library examples provided would likely still continue writing a manual stream given that they're incredibly common and size optimization and nameability are critical. I think that we're primarily worried about improving end-user (binary author or high-level library author) ergonomics, not the ergonomics of folks writing things like <code>futures-util</code>.</p>",
        "id": 238388711,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1620770639
    },
    {
        "content": "<p>In practice, I think that audience (high-level libraries and binary authors) is mostly unconcerned with a single allocation per stream</p>",
        "id": 238388986,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1620770768
    },
    {
        "content": "<p>Wait, I feel like I'm lost on which parts you're commenting on</p>",
        "id": 238389120,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1620770863
    },
    {
        "content": "<p>I'm primarily responding to the \"Why?\" section:</p>\n<div class=\"codehilite\"><pre><span></span><code>The main impetus for this is that these kind of algorithms are common enough in both library and end user code, writing it by hand can be verbose to express, writing a `Stream` requires interaction with `Pin`, and transforming an `Iterator` implementation into a `Stream` is non-trivial. The desire is to reduce the pain of implementing new async iterators, but if the feature is introduced it makes sense to also support sync iterators.\n</code></pre></div>",
        "id": 238389244,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1620770924
    },
    {
        "content": "<p>Re: end-user vs lib writer: I agree that lib writers would 1) delay using this even if available to support older rustc versions and 2) have a higher tolerance for \"pain\"</p>",
        "id": 238389381,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1620771001
    },
    {
        "content": "<p>but I posit that depending on what you call an \"end-user\", they are already needing them</p>",
        "id": 238389456,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1620771027
    },
    {
        "content": "<p>for example, miniredis uses async_stream to write combinators</p>",
        "id": 238389510,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1620771049
    },
    {
        "content": "<p>there are verticals where dealing with streams <em>is</em> the main function of the application</p>",
        "id": 238389539,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1620771076
    },
    {
        "content": "<blockquote>\n<p>miniredis uses async_stream to write combinators</p>\n</blockquote>\n<p>Is that a problem?</p>",
        "id": 238389570,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1620771102
    },
    {
        "content": "<p>not a problem, per se, a signal that there's a need being currently covered by a few different crates that in my eyes is a core concern of some users</p>",
        "id": 238389690,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1620771174
    },
    {
        "content": "<p>Are the users concerned that they have to reach for a crate in order to get that functionality, or are we concerned that the functionality isn't discoverable enough?</p>",
        "id": 238389725,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1620771206
    },
    {
        "content": "<p>Or something else?</p>",
        "id": 238389750,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1620771221
    },
    {
        "content": "<p>just \"use a crate\" <em>is</em> a valid position, but there are implications not only on the learnability and UX (thinking of diagnostics, as usual), but also on future direction for something like <code>for await x in foo { //&lt;- foo gets pin_mut!ed</code></p>",
        "id": 238389837,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1620771251
    },
    {
        "content": "<p>users are concerned about crates, that's definitely a common theme on every medium we've used to collect peoples thoughts</p>",
        "id": 238389896,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1620771302
    },
    {
        "content": "<p>(FWIW I actively do not want <code>for await x in foo</code>, since I think it is usually a mistake to process stream elements serially)</p>",
        "id": 238389914,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1620771315
    },
    {
        "content": "<p>but discoverability is as big an issue, and how the desugared code of these crates interacts with invalid code can be honestly inescrutable</p>",
        "id": 238389981,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1620771352
    },
    {
        "content": "<p>FWIW you don't need a macro to provide this functionality at all</p>",
        "id": 238390037,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1620771370
    },
    {
        "content": "<p>You can do it by passing an argument into the future that you <code>.await</code> to yield a result</p>",
        "id": 238390062,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1620771396
    },
    {
        "content": "<p>In the draft RFC you are saying you \"reject the implementation of generalized coroutines\" but I was wondering where do you draw the distinction between generators and generalized coroutines. When going back to the coroutine being able to pass a value back to it or not?</p>",
        "id": 238390158,
        "sender_full_name": "Vincent Isambart",
        "timestamp": 1620771475
    },
    {
        "content": "<p>being able to return values through a yield point and non-<code>()</code> return types</p>",
        "id": 238390246,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1620771518
    },
    {
        "content": "<p>both of which have implications on the API surface for the generator itself</p>",
        "id": 238390262,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1620771536
    },
    {
        "content": "<p>but if providing <em>only</em> something that people can iterate over to build combinators, those two things aren't necessary</p>",
        "id": 238390305,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1620771568
    },
    {
        "content": "<p>but if the final syntax is thoughtful, then it could be added in the future</p>",
        "id": 238390324,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1620771590
    },
    {
        "content": "<p>but passing back a value through a yield also raises questions about how you would interact with the generators: you wouldn't be able to do <code>for</code> or <code>while let</code> on them, not directly</p>",
        "id": 238390442,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1620771649
    },
    {
        "content": "<p>if you look at <a href=\"https://hackmd.io/9v81TQSgQcaAiqvHQtzN8w?both#Status-quo-featuregenerators\">https://hackmd.io/9v81TQSgQcaAiqvHQtzN8w?both#Status-quo-featuregenerators</a> you can see what the api is today that would need to be extended slightly to potentially let you interact with it</p>",
        "id": 238390530,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1620771717
    },
    {
        "content": "<p>Makes sense, thanks.</p>",
        "id": 238390653,
        "sender_full_name": "Vincent Isambart",
        "timestamp": 1620771786
    },
    {
        "content": "<p>Another consideration that I fail to cover thoroughly is an appeal to \"error proness\": <a href=\"https://nikomatsakis.github.io/wg-async-foundations/vision/status_quo/aws_engineer/missed_waker_leads_to_lost_performance.html\">people make mistakes when implementing Stream by hand</a> and even when possible, <a href=\"https://nikomatsakis.github.io/wg-async-foundations/vision/status_quo/alan_hates_writing_a_stream.html\">it is not a nice overall experience</a></p>",
        "id": 238391073,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1620772032
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=879d9f4f8e6e86f978fb3115db1531a9\">A playground example of one way you can avoid manually writing streams by hand, today, without macros</a></p>",
        "id": 238392076,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1620772661
    },
    {
        "content": "<p>The stream created there can reference non-static data, and the only allocation required is for the channel. You could probably optimize that one out as well if you were willing to be a bit more crafty about constructing the <code>fut</code> element in-place with a pointer to the other field.</p>",
        "id": 238392196,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1620772726
    },
    {
        "content": "<p>The only library being used there is <code>futures</code>, and the only \"interesting\" thing being pulled in is the channel implementation</p>",
        "id": 238392258,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1620772788
    },
    {
        "content": "<p>( I used <code>pin_project</code> to make it easier, too, but you could get rid of that in exchange for two lines of unsafe code)</p>",
        "id": 238392338,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1620772816
    },
    {
        "content": "<p>In practice I'd want a version that required a future which returned <code>Result&lt;(), E&gt;</code> as well so that users could use <code>?</code> in the implementation, but that's a pretty simple modification.</p>",
        "id": 238392535,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1620772961
    },
    {
        "content": "<p>All this isn't to say that I don't want Rust to provide some kind of syntax for natively expressing these kinds of things, but that I think it is a relatively low priority despite being a huge and controversial design space.</p>",
        "id": 238392764,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1620773091
    },
    {
        "content": "<p>I've only skimmed the document, but I have a passing question. I've been writing a parser recently that effectively is an iterator backed by a giant state machine (notably it's <strong>not</strong> <code>Iterator</code> because of the lack of GATs). I'm writing that state machine <em>by hand</em>, which is tedious. I haven't yet played with trying to write it in today's version of generators, but the analogies feel apparent to me.</p>\n<p>I know that was handwavy, but does it seem like the proposed MVP generators would be able to come to bear in my situation?</p>",
        "id": 238537793,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1620850747
    },
    {
        "content": "<p>No, the proposed MVP does not support yielding references into the generator state</p>",
        "id": 238539199,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1620851321
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span></p>",
        "id": 238539207,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1620851328
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> the proposal tries to leave the door open on being able to pass data back into the generator and having a separate return value, but tries to stay away from it</p>",
        "id": 238539209,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1620851330
    },
    {
        "content": "<p>it would let you implement a lexer, but not a parser</p>",
        "id": 238539236,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1620851338
    },
    {
        "content": "<p>Shame. Thank you!</p>",
        "id": 238539454,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1620851422
    },
    {
        "content": "<p>Seeing the chatter about the ability to add methods (e.g. <code>size_hint</code>) / have a named implementation, that's something that I think would be <em>huge</em>. That's a reason I offer for people to avoid using <code>impl trait</code> in public APIs.</p>",
        "id": 238541036,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1620852101
    },
    {
        "content": "<p>(It also reminded me a conversation we had once -- I forget when -- about an explicit capture syntax for closures potentially being able to expose those captures as fields on the voldemort type.  Maybe annotating <code>let</code>s could do that for generators, too?  Scares me about the borrow-checking safety implications, though...)</p>",
        "id": 238546769,
        "sender_full_name": "scottmcm",
        "timestamp": 1620854544
    },
    {
        "content": "<p>Something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">captured</span><span class=\"p\">.</span><span class=\"n\">field</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">closure</span><span class=\"p\">.</span><span class=\"n\">foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>?</p>",
        "id": 238547337,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1620854881
    },
    {
        "content": "<p>Well, at the time we were talking about <code>let closure = move[&amp;mut x] || { *x += 1 }; closure.x</code>, but yeah, <code>#[magic_☃_annotation] let foo</code> (perhaps <code>pub</code>) would make more sense for generators and would work for closures too.</p>",
        "id": 238547743,
        "sender_full_name": "scottmcm",
        "timestamp": 1620855099
    },
    {
        "content": "<p>This reminds me that I want to resurrect an explicit capture syntax</p>",
        "id": 238564999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620866322
    },
    {
        "content": "<p>i liked the idea of <code>pub let</code>, but then I realized that it...kind of makes no sense, since the closure may not have excuted.</p>",
        "id": 238565036,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620866351
    },
    {
        "content": "<p>Another idea that has been kicked around in this space from Ye Olde Days was having <code>impl Trait { .. }</code> expressions, analogous to java nested objects</p>",
        "id": 238565063,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620866386
    },
    {
        "content": "<p>However, it does not directly address the problem of making generators easier to use</p>",
        "id": 238565118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620866411
    },
    {
        "content": "<p>BTW, I was talking to <span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> and I suggested that he could try to extract and summarize the major points from the meeting into a blog post</p>",
        "id": 238565141,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620866426
    },
    {
        "content": "<p>I think it's generally a nice practice, but one that would be particularly useful in this case</p>",
        "id": 238565154,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620866437
    },
    {
        "content": "<p>I'll have it tomorrow, and will run it by the t-lang team. What should be the \"intended audience\"? How much context should I add at the beginning?</p>",
        "id": 238565893,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1620867044
    },
    {
        "content": "<p>I'd expect it'd go on the inside rust blog and would be targeted at roughly \"people interested in this area\" - so not too much context, mostly more like a digested form of meeting minutes. But maybe Niko or other's have different opinions here.</p>",
        "id": 238566521,
        "sender_full_name": "simulacrum",
        "timestamp": 1620867620
    },
    {
        "content": "<p>That is what I had in mind too</p>",
        "id": 239179919,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621297785
    },
    {
        "content": "<p>I'm not entirely sure if this is possible with the MVP, but I actually had a case that I think would be a lot simpler with generators that doesn't involve async.</p>\n<p>I'm writing an codec framework for ASN.1 and one of the more annoying types is <code>SET</code>, which for some (not all) formats requires that the components are serialized in ascending order of their \"tag\". I was thinking that a nice way to prevent people from making this logic bug, would be to have it accept a generator that would yield the results of each field being encoded.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// This struct could be encoded as `b, a` or `a, b`.</span>\n<span class=\"k\">struct</span> <span class=\"nc\">Set</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[rasn(tag(1))]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[rasn(tag(0))]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">b</span>: <span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// Set encode impl</span>\n<span class=\"k\">fn</span> <span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"n\">value</span>: <span class=\"nc\">Set</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">enc</span>: <span class=\"nc\">Encoder</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">enc</span><span class=\"p\">.</span><span class=\"n\">encode_set</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">set_encoder</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kr\">yield</span><span class=\"w\"> </span><span class=\"n\">set_encoder</span><span class=\"p\">.</span><span class=\"n\">encode_integer</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">a</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kr\">yield</span><span class=\"w\"> </span><span class=\"n\">set_encoder</span><span class=\"p\">.</span><span class=\"n\">encode_string</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">b</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// `b, a` encode_set impl</span>\n<span class=\"k\">fn</span> <span class=\"nf\">encode_set</span><span class=\"p\">(</span><span class=\"n\">enc</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Encoder</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fields</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Stream</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">Tag</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">BTreeMap</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">tag</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">field</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"kr\">yield</span><span class=\"w\"> </span><span class=\"n\">fields</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">map</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">tag</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">field</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">   </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">map</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">collect</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// `a, b` encode_set impl</span>\n<span class=\"k\">fn</span> <span class=\"nf\">encode_set</span><span class=\"p\">(</span><span class=\"n\">enc</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Encoder</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fields</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Stream</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">Tag</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">field</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"kr\">yield</span><span class=\"w\"> </span><span class=\"n\">fields</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">vec</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">   </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 239551775,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1621498378
    }
]