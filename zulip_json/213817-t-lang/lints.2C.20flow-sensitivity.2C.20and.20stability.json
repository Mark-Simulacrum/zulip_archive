[
    {
        "content": "<p>Hey y'all. <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> recently raised a question on a PR and then brought it to me as well, and I couldn't quickly find precedent one way or another for the answer I gave to Wesley, so I'm hoping to get attention over here on it.</p>",
        "id": 271596442,
        "sender_full_name": "pnkfelix",
        "timestamp": 1644595087
    },
    {
        "content": "<p>the heart of the question is: Are lints allowed to change their behavior based on flow-sensitive information?</p>",
        "id": 271596494,
        "sender_full_name": "pnkfelix",
        "timestamp": 1644595121
    },
    {
        "content": "<p>or is that considered a stability hazard (in terms of code breaking between Rust versions)</p>",
        "id": 271596538,
        "sender_full_name": "pnkfelix",
        "timestamp": 1644595143
    },
    {
        "content": "<p>My current answer is that some language features, like unsafety-checking, are deliberately not meant to be control-flow sensitive, at least in principle.</p>",
        "id": 271596616,
        "sender_full_name": "pnkfelix",
        "timestamp": 1644595180
    },
    {
        "content": "<p>but that lints do not fall into that category</p>",
        "id": 271596627,
        "sender_full_name": "pnkfelix",
        "timestamp": 1644595187
    },
    {
        "content": "<p>Introducing a new lint is not a breaking change. Thus I think making a lint smarter isn't one either. But what if people are relying on a lint telling them about a serious problem and due to internal control flow changes we stop reporting in situations in which we reported before?</p>",
        "id": 271597208,
        "sender_full_name": "oli",
        "timestamp": 1644595366
    },
    {
        "content": "<p>The specific issue in this case is this: <a href=\"https://github.com/rust-lang/rust/pull/93313#discussion_r802135975\">https://github.com/rust-lang/rust/pull/93313#discussion_r802135975</a></p>",
        "id": 271597288,
        "sender_full_name": "pnkfelix",
        "timestamp": 1644595396
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> is your point that maybe the answer to the question should depend on the lint itself? In terms of the kinds of bugs that it catches?</p>",
        "id": 271597404,
        "sender_full_name": "pnkfelix",
        "timestamp": 1644595442
    },
    {
        "content": "<p>Well, only if it changes in ways that it misses things to report on which it reported on before</p>",
        "id": 271597558,
        "sender_full_name": "oli",
        "timestamp": 1644595498
    },
    {
        "content": "<p>Being louder is always fine imo</p>",
        "id": 271597582,
        "sender_full_name": "oli",
        "timestamp": 1644595509
    },
    {
        "content": "<p>(Assuming the new messages are correct, we should fix bugs of course)</p>",
        "id": 271597631,
        "sender_full_name": "oli",
        "timestamp": 1644595529
    },
    {
        "content": "<p>Specifically, one of the things the PR does is resolve this FIXME: <a href=\"https://github.com/rust-lang/rust/blob/e273fca380c5d28bc32b25ac1a885c61d4c5e75e/compiler/rustc_mir_build/src/build/expr/into.rs#L258-L260\">https://github.com/rust-lang/rust/blob/e273fca380c5d28bc32b25ac1a885c61d4c5e75e/compiler/rustc_mir_build/src/build/expr/into.rs#L258-L260</a>. </p>\n<p>However, that has the effect of causing this current UI test:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">Never</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">never</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Never</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">panic!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">includes_never</span><span class=\"p\">(</span><span class=\"n\">crash</span>: <span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">}.</span><span class=\"k\">await</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">crash</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[allow(unused)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">bad</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">never</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">*=</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">}.</span><span class=\"k\">await</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"n\">bad</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">result</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>to generate a new \"unnecessary mut\" lint.</p>",
        "id": 271597758,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1644595573
    },
    {
        "content": "<p>In sciency terms: more false negatives are bad, more false positives are bad, fewer false positives are good, fewer false negatives are good</p>",
        "id": 271597786,
        "sender_full_name": "oli",
        "timestamp": 1644595589
    },
    {
        "content": "<p>This seems like the correct thing to do to me but I want to make sure of the compatibility implications before merging.</p>",
        "id": 271597878,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1644595633
    },
    {
        "content": "<p>Yea, I read the comment on the PR after my first comment here, and it is fine in the design I described. But that design is not ratified anywhere</p>",
        "id": 271597895,
        "sender_full_name": "oli",
        "timestamp": 1644595642
    },
    {
        "content": "<p>Well, again: considering new deny lints are not a breaking change, I think an existing lint triggering on code it didn't before is fine, too</p>",
        "id": 271598043,
        "sender_full_name": "oli",
        "timestamp": 1644595692
    },
    {
        "content": "<p>The main worry in this case is that if we stop being that good about flow-sensitivity, we would have a breaking change here, right?</p>\n<p>IOW, this is not necessarily just about the lint -- previously, the <code>mut</code> was presumably required, so reverting this PR would be a breaking change, since the mut would once more be required</p>",
        "id": 271598176,
        "sender_full_name": "simulacrum",
        "timestamp": 1644595748
    },
    {
        "content": "<p>So I think the focus on the <em>lint</em> is maybe the wrong thing.</p>",
        "id": 271598247,
        "sender_full_name": "simulacrum",
        "timestamp": 1644595789
    },
    {
        "content": "<p>Yea, that makes sense to me</p>",
        "id": 271598335,
        "sender_full_name": "oli",
        "timestamp": 1644595816
    },
    {
        "content": "<p>(the example seems tangentially related to \"missing <code>mut</code>\" being a hard error <em>vs.</em> being a lint)</p>",
        "id": 271603663,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1644598186
    },
    {
        "content": "<p>But known-to-be-divergent control flows already allow certain code to pass that would otherwise trigger a hard error, mostly related to borrow-checking and drop-checking</p>",
        "id": 271603819,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1644598236
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/213817-t-lang/topic/lints.2C.20flow-sensitivity.2C.20and.20stability/near/271598247\">said</a>:</p>\n<blockquote>\n<p>So I think the focus on the <em>lint</em> is maybe the wrong thing.</p>\n</blockquote>\n<p>+1 to this.  Lints are allowed to change however they want, subject only to practical restrictions like \"maybe it if in practice lints on everything everywhere now we shouldn't\".</p>\n<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/213817-t-lang/topic/lints.2C.20flow-sensitivity.2C.20and.20stability/near/271598176\">said</a>:</p>\n<blockquote>\n<p>so reverting this PR would be a breaking change, since the mut would once more be required</p>\n</blockquote>\n<p>This is the essential part.  It needs an FCP if reverting it would be a breaking change.</p>",
        "id": 271607755,
        "sender_full_name": "scottmcm",
        "timestamp": 1644599851
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/213817-t-lang/topic/lints.2C.20flow-sensitivity.2C.20and.20stability/near/271597786\">said</a>:</p>\n<blockquote>\n<p>In sciency terms: more false negatives are bad, more false positives are bad, fewer false positives are good, fewer false negatives are good</p>\n</blockquote>\n<p>side note, I strongly recommend the terms \"false warning\" over \"false positive\". It's always kind of unclear to me what a positive means. :)</p>",
        "id": 273861909,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1646248658
    }
]