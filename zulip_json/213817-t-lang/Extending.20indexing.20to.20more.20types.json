[
    {
        "content": "<p>AFAIK there's appetite to do this, so I wanted to start a conversation to try to find a way.</p>\n<p>Here's a stab at requirements:</p>\n<ul>\n<li><code>a[1]</code> continues to compile (it doesn't give an inference failure)</li>\n<li>off-by-one errors continue to fail (whether panic or <code>None</code>), not to silently return the other end</li>\n<li>not edition-tied, because we would want things like <code>impl Index for Vec</code> to be updates as well, which cannot be edition-tied</li>\n<li>supports <code>.get()</code> and friends, not just <code>[]</code>, with the usual panic implications (so <code>.get()</code> shouldn't ever panic, even if the index is \"way too big\")</li>\n</ul>\n<p>Non-goals:</p>\n<ul>\n<li>supporting python-style <code>a[-1]</code>, as it contradicts a requirement above (Should we want to do this we could do it with an opt-in of some sort, strawmen <code>a[Wrapping(-1)]</code> or <code>a[Reverse(0)]</code> or <code>a[^0]</code> -- <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8#indices-and-ranges\" title=\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8#indices-and-ranges\">taken from C#</a> -- or <code>a[$-1]</code> -- <a href=\"https://dlang.org/articles/d-array-article.html#introducing-slices\" title=\"https://dlang.org/articles/d-array-article.html#introducing-slices\">taken from D</a>.)</li>\n<li>customizing index types for arrays or slices, such as requiring <code>u8</code> to index into a <code>[i16; 256]</code>.  (I think this would necessarily be a breaking change, and can be handled acceptably with newtypes.)</li>\n</ul>\n<p>Precedents:</p>\n<ul>\n<li>Bitwise shift operations support any type, even though they never need a value above 128.  (<code>1 &lt;&lt; u128::MAX</code> and <code>1 &lt;&lt; i128::MIN</code> are legal rust code, though we do warn about them.)</li>\n<li><code>usize</code> is already bigger than necessary for _every_ slice (that doesn't contain ZSTs).  And much, much larger than needed by the vast majority of arrays and slices. (<code>[1][usize::MAX]</code> is legal rust code, though we do warn about it.)</li>\n</ul>\n<p>Known issues:</p>\n<ul>\n<li>Just enabling the unsigned types for indexing gives inference failures on literals<ul>\n<li>Easiest fix: allow indexing by signed types too.</li>\n<li>Possible fix: some kind of different inference fallback, or defaulting.  This is historically hard; might it be any easier when it's just for <code>{integer}</code>?</li>\n</ul>\n</li>\n</ul>",
        "id": 195472403,
        "sender_full_name": "scottmcm",
        "timestamp": 1588020104
    },
    {
        "content": "<p>I don't really think a different inference fallback is very viable</p>",
        "id": 195474085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588021021
    },
    {
        "content": "<p>Or at least the barrier to arguing for that solution  seems pretty high to me</p>",
        "id": 195474119,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588021038
    },
    {
        "content": "<p>Especially because I feel like <code>i32</code> indicates aren't totally impossible to imagine anyway</p>",
        "id": 195474151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588021060
    },
    {
        "content": "<p>you can imagine some computation that yields a valid index but where intermediate values may become negative easily enough</p>",
        "id": 195474175,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588021076
    },
    {
        "content": "<p>Yeah, I prefer the \"just allow signed\" solution.  Because, to me, <code>a[i-1]</code> wrapping to <code>usize::MAX</code> is actually worse than <code>a[i-1]</code> giving a panic message mentioning <code>-1</code>.</p>",
        "id": 195479850,
        "sender_full_name": "scottmcm",
        "timestamp": 1588024295
    },
    {
        "content": "<p>(Which is also what contributes to me putting the \"off-by-one needs to fail\" requirement in the OP.)</p>",
        "id": 195479957,
        "sender_full_name": "scottmcm",
        "timestamp": 1588024354
    },
    {
        "content": "<p>I'd like to throw in a requirement that the inference (or whatever) doesn't interact poorly with the desire for implicit promotion (e.g. <code>u8 -&gt; usize</code>), even if I think it's not 100% that we want that yet</p>",
        "id": 195480027,
        "sender_full_name": "simulacrum",
        "timestamp": 1588024411
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/Extending.20indexing.20to.20more.20types/near/195474151\" title=\"#narrow/stream/213817-t-lang/topic/Extending.20indexing.20to.20more.20types/near/195474151\">said</a>:</p>\n<blockquote>\n<p>Especially because I feel like <code>i32</code> indicates aren't totally impossible to imagine anyway</p>\n</blockquote>\n<p>How incredibly disruptive would it be to question the default <code>i32</code> inference for integers?</p>",
        "id": 195480654,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588024823
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/Extending.20indexing.20to.20more.20types/near/195474085\" title=\"#narrow/stream/213817-t-lang/topic/Extending.20indexing.20to.20more.20types/near/195474085\">said</a>:</p>\n<blockquote>\n<p>I don't really think a different inference fallback is very viable</p>\n</blockquote>\n<p>Even just \"default to <code>usize</code> if used in indexing and no other constraints\"?</p>",
        "id": 195480712,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588024882
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span>  Hmm, if we support _every_ integral type then there'd never be implicit promotion opportunities, right?  (I'm also not sure what kind of promotion you're thinking about.  Maybe start another topic about it?  Personally the last it came up on IRLO I ended up convinced that we should never do even implicit widening.)</p>",
        "id": 195480834,
        "sender_full_name": "scottmcm",
        "timestamp": 1588024975
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> I think that it would need to work for things like <code>.get(1)</code> as well -- not just <code>[1]</code> -- for consistency, which might make it harder to focus.</p>",
        "id": 195480877,
        "sender_full_name": "scottmcm",
        "timestamp": 1588025022
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> Yeah, implicit widening is not something I'd want to see. That's separate from \"let's make operations smarter\".</p>",
        "id": 195480879,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588025023
    },
    {
        "content": "<p>Right; I also want to allow comparison operators between all pairs of integral types.</p>",
        "id": 195480965,
        "sender_full_name": "scottmcm",
        "timestamp": 1588025073
    },
    {
        "content": "<p>I will freely admit being a little uncomfortable with that, especially between signed and unsigned types.</p>",
        "id": 195481028,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588025118
    },
    {
        "content": "<p>I do appreciate that Rust could do the right thing, numerically.</p>",
        "id": 195481034,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588025127
    },
    {
        "content": "<p>But \"numerically\" is <em>not</em> always the right thing.</p>",
        "id": 195481042,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588025139
    },
    {
        "content": "<p>I appreciate that Rust helps me not mix integer types without thought, and I'm currently writing code that would be much harder to write if Rust didn't help me in that way.</p>",
        "id": 195481139,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588025193
    },
    {
        "content": "<p>(Perhaps we should split this into a separate topic about comparison operators, to avoid derailing indexing?)</p>",
        "id": 195481303,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588025314
    },
    {
        "content": "<p>So, I just dug into the status of default type parameter fallback. That led me to <a href=\"https://github.com/rust-lang/rust/issues/27336\" title=\"https://github.com/rust-lang/rust/issues/27336\">https://github.com/rust-lang/rust/issues/27336</a> , which led to <a href=\"https://internals.rust-lang.org/t/interaction-of-user-defined-and-integral-fallbacks-with-inference/2496/1\" title=\"https://internals.rust-lang.org/t/interaction-of-user-defined-and-integral-fallbacks-with-inference/2496/1\">https://internals.rust-lang.org/t/interaction-of-user-defined-and-integral-fallbacks-with-inference/2496/1</a> .</p>",
        "id": 195482785,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588026399
    },
    {
        "content": "<p>It looks like that got stalled on, effectively, the case of integer default versus user default.</p>",
        "id": 195482870,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588026472
    },
    {
        "content": "<p>If we made a call on that (e.g. \"always use the user default if there is one, error if that conflicts with the integer default\"), would that be enough to unblock that, which would then unblock indexing, comparison operators, and so on?</p>",
        "id": 195482936,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588026506
    },
    {
        "content": "<p>That would be enough to say, for instance, that an operator between T and <code>u64</code> should default to <code>u64</code>, but would allow another type.</p>",
        "id": 195483063,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588026606
    },
    {
        "content": "<p>That would also make it easier to make API improvements (e.g. switching from a concrete type to a generic type defaulting to that same concrete type) without breaking API compatibility, which seems like an overall win for the ecosystem.</p>",
        "id": 195483271,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588026804
    },
    {
        "content": "<p>It would be very nice if indexing be customizable for new types (like making a cyclic-vec that indexes with <code>WrappingIndex</code>). I could see something like this happening, but it would require the indexing trait to know about the \"size\" of the container.</p>",
        "id": 195496165,
        "sender_full_name": "Sebastian Malton",
        "timestamp": 1588040895
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/Extending.20indexing.20to.20more.20types/near/195480654\" title=\"#narrow/stream/213817-t-lang/topic/Extending.20indexing.20to.20more.20types/near/195480654\">said</a>:</p>\n<blockquote>\n<p>How incredibly disruptive would it be to question the default <code>i32</code> inference for integers?</p>\n</blockquote>\n<p>Past experiences shows that the fallback is \"limited\" in real code but <em>very</em> common in test code. Probably \"limited\" by now means effectively \"everywhere\" anyway. (We actually did the work to remove fallback entirely at one point, and then added it back because of the impact on test code.)</p>",
        "id": 195594791,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588093328
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/Extending.20indexing.20to.20more.20types/near/195482870\" title=\"#narrow/stream/213817-t-lang/topic/Extending.20indexing.20to.20more.20types/near/195482870\">said</a>:</p>\n<blockquote>\n<p>It looks like that got stalled on, effectively, the case of integer default versus user default.</p>\n</blockquote>\n<p>I think that's not the only case where you can have conflicting defaults. Consider:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">z</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// now both the fallback for A and B apply to `z`</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 195595143,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588093469
    },
    {
        "content": "<p>I feel like it'd be reasonable to just error out in that case.</p>",
        "id": 195610078,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588100079
    },
    {
        "content": "<p>Conflict between type parameter default and integer default: type parameter default wins.<br>\nConflict between multiple type parameter defaults that aren't the same type: error.</p>",
        "id": 195610152,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588100130
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/Extending.20indexing.20to.20more.20types/near/195610078\" title=\"#narrow/stream/213817-t-lang/topic/Extending.20indexing.20to.20more.20types/near/195610078\">said</a>:</p>\n<blockquote>\n<p>I feel like it'd be reasonable to just error out in that case.</p>\n</blockquote>\n<p>one downside is that it means that adding defaults is not backwards compatible</p>",
        "id": 195611254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588100708
    },
    {
        "content": "<p>because it may conflict with some other user-provided default</p>",
        "id": 195611271,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588100721
    },
    {
        "content": "<p>this is what led to the interest in a \"minimal\" set of defaults that cannot cause conflicts by construction</p>",
        "id": 195611296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588100737
    },
    {
        "content": "<p>Good point.</p>",
        "id": 195613985,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588102118
    },
    {
        "content": "<p>in particular, the <em>main motivator</em> for these defaults (or one of them) is to enable people to migrate from a specific type to a more general type parameter, and it's \"not completely met\" by this design, since it may still cause conflicts</p>",
        "id": 195615009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588102626
    },
    {
        "content": "<p>+1 to not really needing defaults in \"real code\", but them being essential for peripheral code like <code>println!(\"{}\", 1);</code> in demos and such</p>",
        "id": 195637758,
        "sender_full_name": "scottmcm",
        "timestamp": 1588113759
    }
]