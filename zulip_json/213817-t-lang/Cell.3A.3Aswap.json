[
    {
        "content": "<p>TIL about <a href=\"https://doc.rust-lang.org/nightly/std/cell/struct.Cell.html#method.swap\"><code>Cell::swap</code></a>. This function is fascinating, because it adds some assumptions to how <code>Cell</code> works that I was not aware of before... it <code>Cell::swap</code> assumes that two <code>Cell</code> either return the same <code>as_ptr</code> or they are disjoint. Consequently, it makes the following function unsound:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">cell</span>::<span class=\"n\">Cell</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">transmute</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">cell_idx</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Cell</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">Cell</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">Cell</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">transmute</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">transmute</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Here's how to cause UB: (<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=510c96acdec5f7dcad6ce109cd2e2002\">Run it in Miri</a>)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Cell</span>::<span class=\"n\">new</span><span class=\"p\">([</span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]]);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cell_idx</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x1</span><span class=\"p\">.</span><span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"n\">x2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Kudos to <span class=\"user-mention\" data-user-id=\"198039\">@Konrad Borowski</span> for finding the double-free issue.</p>",
        "id": 221803215,
        "sender_full_name": "RalfJ",
        "timestamp": 1609957516
    },
    {
        "content": "<p>I am not sure if this was a deliberate part of stabilizing <code>Cell::swap</code>, but I feel either <code>Cell::swap</code> needs to panic on such overlaps, it needs to do something sensible, or this assumption needs to be documented somewhere (not sure where, though)</p>",
        "id": 221803353,
        "sender_full_name": "RalfJ",
        "timestamp": 1609957567
    },
    {
        "content": "<p>Curious that it's checking <code>ptr::eq</code> and then using <code>ptr::swap</code>, because <code>ptr::swap</code> allows the values to overlap.</p>",
        "id": 221805452,
        "sender_full_name": "scottmcm",
        "timestamp": 1609958556
    },
    {
        "content": "<p>yeah... maybe that's mean to be an optimization? It would be glaringly unsound without the <code>eq</code> test though since that would just duplicate one <code>Cell</code> into the other.</p>",
        "id": 221805909,
        "sender_full_name": "RalfJ",
        "timestamp": 1609958813
    },
    {
        "content": "<p>Sorry, don't follow why it'd be unsound without the eq test -- isn't <code>ptr::swap(p, p);</code> always a nop?</p>",
        "id": 221806168,
        "sender_full_name": "scottmcm",
        "timestamp": 1609958983
    },
    {
        "content": "<p>ah you're right</p>",
        "id": 221806241,
        "sender_full_name": "RalfJ",
        "timestamp": 1609959004
    },
    {
        "content": "<p>I shouldn't be doing soundness analyses when my brain isn't functioning^^</p>",
        "id": 221806280,
        "sender_full_name": "RalfJ",
        "timestamp": 1609959025
    },
    {
        "content": "<p>this got stabilized in <a href=\"https://github.com/rust-lang/rust/commit/33a56659886a2afc3207de39000a9d74f3dddadc\">https://github.com/rust-lang/rust/commit/33a56659886a2afc3207de39000a9d74f3dddadc</a> as part of <a href=\"https://github.com/rust-lang/rust/pull/40538\">https://github.com/rust-lang/rust/pull/40538</a></p>",
        "id": 221806300,
        "sender_full_name": "RalfJ",
        "timestamp": 1609959036
    },
    {
        "content": "<p>that commit references <a href=\"https://github.com/rust-lang/rust/issues/39264\">https://github.com/rust-lang/rust/issues/39264</a> and an RFC, but <code>swap</code> is not mentioned in either of them</p>",
        "id": 221806346,
        "sender_full_name": "RalfJ",
        "timestamp": 1609959054
    },
    {
        "content": "<p><code>swap</code> was added in <a href=\"https://github.com/rust-lang/rust/pull/39716\">https://github.com/rust-lang/rust/pull/39716</a></p>",
        "id": 221806464,
        "sender_full_name": "RalfJ",
        "timestamp": 1609959118
    },
    {
        "content": "<p>no discussion seems to have happened of the \"overlapping <code>Cell</code>\" case</p>",
        "id": 221806602,
        "sender_full_name": "RalfJ",
        "timestamp": 1609959176
    },
    {
        "content": "<p>that means adding the inverse ofr <code>as_slice_of_cells</code> would be unsound?</p>",
        "id": 221814047,
        "sender_full_name": "lcnr",
        "timestamp": 1609962817
    },
    {
        "content": "<p>that's unfortunate and kinda dangerous imo</p>",
        "id": 221814127,
        "sender_full_name": "lcnr",
        "timestamp": 1609962844
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/213817-t-lang/topic/Cell.3A.3Aswap/near/221814047\">said</a>:</p>\n<blockquote>\n<p>that means adding the inverse ofr <code>as_slice_of_cells</code> would be unsound?</p>\n</blockquote>\n<p>well, slices are unsized, so not directly. but if you couple that with a way to go from <code>&amp;Cell&lt;[T]&gt;</code> to <code>&amp;Cell&lt;[T; N]&gt;</code> then yes</p>",
        "id": 221814191,
        "sender_full_name": "RalfJ",
        "timestamp": 1609962886
    },
    {
        "content": "<p>swap is only implemented for <code>T: Sized</code> <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 221814473,
        "sender_full_name": "lcnr",
        "timestamp": 1609963018
    },
    {
        "content": "<p>weird stuff</p>",
        "id": 221814498,
        "sender_full_name": "lcnr",
        "timestamp": 1609963030
    },
    {
        "content": "<p>right but if we have a const generic <code>TryFrom</code> instance for <code>&amp;Cell</code> slices to arrays, and an inverse of <code>as_slice_of_cells</code>, then we can implement my <code>cell_idx</code> in safe code so we have unsoundness</p>",
        "id": 221814860,
        "sender_full_name": "RalfJ",
        "timestamp": 1609963178
    },
    {
        "content": "<p>To be clear (it wasn't immediately obvious to me), the example is UB even though <code>ptr::swap</code> allows overlapping pointers, because</p>\n<blockquote>\n<p>The two pointed-to values may overlap. If the values do overlap, then the overlapping region of memory from <code>x</code> [lhs] will be used.</p>\n</blockquote>\n<p>Snooping in <a href=\"https://github.com/rust-lang/rust/pull/39716\">rust-lang#39716</a> suggests that the user who <a href=\"https://github.com/rust-lang/rust/pull/39716#discussion_r100517996\">suggested <code>ptr::swap</code></a> thought it handled the partially overlapping case, as the original implementation used a stack temporary. (The other possibility is that they meant <code>swap_nonoverlapping</code>, as they do mention keeping the ptr eq check.) Unfortunatly, they're ghost now, so even if they were around and remembered, there's no finding them.</p>\n<p>TBH, I'm +½ that the correct resolution here is making <code>Cell::swap</code> work properly on overlapping <code>Cell</code>s. The alternative seems to be switching the impl to drop the eq check or to use <code>swap_nonoverlapping</code>, and to document somewhere that the inability to create partially overlapping <code>Cell</code>s is a safety invariant (which is scarily nonlocal).</p>\n<p>Plus, I think I've seen people using partially overlapping cells before (though <a href=\"https://github.com/bitvecto-rs/bitvec/blob/9e3f80fb96f01ff7fe0a2f85ed678256d76d76ed/README.md#alias-conditions\">the one I can think of</a> entirely encapsulates this and doesn't use <code>Cell::swap</code> IIRC).</p>",
        "id": 221830437,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1609971022
    },
    {
        "content": "<p>What would it mean for <code>Cell::swap</code> to work properly for overlapping memory? I don't think using a temporary resolves the issue.</p>",
        "id": 221832248,
        "sender_full_name": "tm",
        "timestamp": 1609972116
    },
    {
        "content": "<p>Hmm, I guess<code>ptr::swap</code> could be a bit more explicit about its usage on non-<code>Copy</code> data and overlapping ranges: after such a swap, values may be leaked while others may others <em>may be duplicated</em>.<br>\nFrom this, <code>Cell::swap</code> is not unsound for <code>Copy</code> data.<br>\nI agree with <span class=\"user-mention\" data-user-id=\"132829\">@Christopher Durham</span> that <code>Cell::swap</code> ought to support overlapping ranges, since having a non-<code>unsafe</code> swap only for <code>Copy</code> data would be a bit sad, on top of a breaking error. The one loser here will be performance, but for that we can offer an <code>unsafe</code> <code>Cell::swap_nonoverlapping()</code> alternative (<del>and with specialization, use that implementation on <code>Cell::swap</code> for <code>Copy</code> types</del>)</p>",
        "id": 221832473,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1609972281
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232018\">Daniel Henry-Mantilla</span> <a href=\"#narrow/stream/213817-t-lang/topic/Cell.3A.3Aswap/near/221832473\">said</a>:</p>\n<blockquote>\n<p>(and with specialization, use that implementation on <code>Cell::swap</code> for <code>Copy</code> types)</p>\n</blockquote>\n<p>That would change behavior, though.</p>",
        "id": 221832784,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1609972492
    },
    {
        "content": "<p>True, we can scratch that then <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> but I still think we should offer a non-<code>unsafe</code> swap with the current implementation for <code>Copy</code> types, maybe as another method.</p>",
        "id": 221832993,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1609972652
    },
    {
        "content": "<blockquote>\n<p>Unfortunatly, they're ghost now, so even if they were around and remembered, there's no finding them.</p>\n</blockquote>\n<p>Is there no way to figure out the original username? That seems quite problematic from an archiving / accountability standpoint...</p>",
        "id": 221926208,
        "sender_full_name": "RalfJ",
        "timestamp": 1610015538
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span> <span class=\"user-mention\" data-user-id=\"132829\">@Christopher Durham</span> the question is, what <em>is</em> the correct behavior for partially overlapping <code>swap</code>? As <span class=\"user-mention\" data-user-id=\"352985\">@tm</span> noted, that is far from clear.</p>",
        "id": 221926290,
        "sender_full_name": "RalfJ",
        "timestamp": 1610015602
    },
    {
        "content": "<p>if we have one cell pointing to <code>[A, B]</code> and another pointing to <code>[B, C]</code> where the <code>B</code> is the overlapping part  -- what should the situation be after swapping? Naively one might think <code>[B, C]</code> and <code>[A, B]</code>, but that is impossible (<code>C</code> and <code>A</code> cannot both be in the overlap) and it would duplicate <code>B</code>.</p>",
        "id": 221926414,
        "sender_full_name": "RalfJ",
        "timestamp": 1610015692
    },
    {
        "content": "<p>the only options I see is to either panic, or to swap the non-overlapping parts -- i.e., in my example, just swap <code>A</code> and <code>C</code>.</p>",
        "id": 221926471,
        "sender_full_name": "RalfJ",
        "timestamp": 1610015746
    },
    {
        "content": "<p>I thought I had an idea of an implementation, based on your latter idea, Ralf, but it seems to require pointer comparisons of potentially unrelated pointers <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 221927237,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1610016286
    },
    {
        "content": "<p>that's a safe operation in Rust, though... for better or worse^^</p>",
        "id": 221927266,
        "sender_full_name": "RalfJ",
        "timestamp": 1610016325
    },
    {
        "content": "<p>but it seems utterly unexpected</p>",
        "id": 221927293,
        "sender_full_name": "RalfJ",
        "timestamp": 1610016347
    },
    {
        "content": "<p>As someone pointed out on GH, this function is <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=47d18c1b6cd516a1a8a962a25c984318\">enough to cause UB</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">as_cell_of_array</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">c</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Cell</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">Cell</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">transmute</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 221927982,
        "sender_full_name": "RalfJ",
        "timestamp": 1610016858
    },
    {
        "content": "<p>opened <a href=\"https://github.com/rust-lang/rust/issues/80778\">https://github.com/rust-lang/rust/issues/80778</a></p>",
        "id": 221928555,
        "sender_full_name": "RalfJ",
        "timestamp": 1610017282
    },
    {
        "content": "<p>Re: history of the method, there is this comment <a href=\"https://github.com/rust-lang/rust/pull/39716#issuecomment-281783743\">https://github.com/rust-lang/rust/pull/39716#issuecomment-281783743</a></p>",
        "id": 221967484,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1610038351
    },
    {
        "content": "<p>that referred to <a href=\"https://github.com/rust-lang/rust/pull/39793\">https://github.com/rust-lang/rust/pull/39793</a></p>",
        "id": 221969040,
        "sender_full_name": "RalfJ",
        "timestamp": 1610038903
    }
]