[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> mentioned that there had been some discussion about adding a language feature to simplify code like this that combines control flow with destructuring:</p>\n<div class=\"codehilite\"><pre><span></span><code>fn fo() {\n    let x = match bar {\n        Some(v) =&gt; v,\n        None =&gt; ... return\n    };\n}\n</code></pre></div>\n\n\n<p>Neither of us could find an open RFC on the topic, though. Does anyone remember such a discussion and know where it might be found?</p>",
        "id": 198453846,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1590160774
    },
    {
        "content": "<p>not an <em>open</em> RFC, but: <a href=\"https://github.com/rust-lang/rfcs/pull/1303\">https://github.com/rust-lang/rfcs/pull/1303</a></p>",
        "id": 198459706,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1590163575
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120076\">@BatmanAoD (Kyle Strand)</span> We are currently considering reopening that discussion.</p>",
        "id": 198467576,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590167224
    },
    {
        "content": "<p>There's renewed interest among the lang team in a <code>let</code>...<code>else</code> construct.</p>",
        "id": 198467696,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590167284
    },
    {
        "content": "<p>Great! I had some thoughts on the subject yesterday, but want to read through what's already been proposed/discussed.</p>",
        "id": 198470262,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1590168544
    },
    {
        "content": "<p>Wow, that was long. I've added my two cents, though I'm not sure the end of that thread is really the best place for it. <a href=\"https://github.com/rust-lang/rfcs/pull/1303#issuecomment-632866111\">https://github.com/rust-lang/rfcs/pull/1303#issuecomment-632866111</a></p>",
        "id": 198482950,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1590174903
    },
    {
        "content": "<p>lol</p>",
        "id": 198483169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590175016
    },
    {
        "content": "<p>you see why I brought this up as a place where</p>",
        "id": 198483178,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590175021
    },
    {
        "content": "<p>I would prefer for that iteration to be taking place in a <em>project group</em></p>",
        "id": 198483193,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590175028
    },
    {
        "content": "<p>indeed!</p>",
        "id": 198483206,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1590175038
    },
    {
        "content": "<p>and hopefully with the first aim of \"discovering the space of solutions\"</p>",
        "id": 198483207,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590175038
    },
    {
        "content": "<p>to some extent that's already been done</p>",
        "id": 198483237,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590175049
    },
    {
        "content": "<p>so maybe it's \"documenting\" now</p>",
        "id": 198483242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590175053
    },
    {
        "content": "<p>I believe my suggestion is actually novel, at least within that thread!</p>",
        "id": 198483273,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1590175070
    },
    {
        "content": "<p>but I think it's an interesting case also of: </p>\n<ul>\n<li>we know the <em>problem</em></li>\n<li>we have a few thoughts as to the solutions</li>\n</ul>",
        "id": 198483275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590175071
    },
    {
        "content": "<p>(Which is not to say that's necessarily a good thing)</p>",
        "id": 198483289,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1590175079
    },
    {
        "content": "<p>It's certainly a novel solution. I'm not sure if it'd be preferable to <code>let pattern = expr else {}</code>, though.</p>",
        "id": 198489258,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590178162
    },
    {
        "content": "<p>That would work for any pattern match, not just <code>Option</code> or <code>Result</code>.</p>",
        "id": 198489352,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590178210
    },
    {
        "content": "<p>I guess I didn't make this explicit in my post, but with both <code>?{...}</code> and <code>expect</code>, <code>let pattern = expr else {...}</code> would be expressed as <code>let x = expr expect pattern ? {...}</code>.</p>",
        "id": 198493416,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1590180627
    },
    {
        "content": "<p>Yeah, that seemed clear from your post.</p>",
        "id": 198521352,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590215300
    },
    {
        "content": "<p>At that point, though, it's not far off from just writing <code>let x = if let pattern = expr { x } else { return }</code>.</p>",
        "id": 198521359,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590215358
    },
    {
        "content": "<p>The advantage I see is that <code>expect</code> and <code>?{}</code> could be implemented, stabilized, and used independently of each other. Though someone pointed out on the thread that <code>?{}</code> is already legal syntax.</p>",
        "id": 198547992,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1590261357
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120076\">@BatmanAoD (Kyle Strand)</span> There's also been discussion of it on IRLO in the form of <code>let x = v ☃ return;</code>, along with things like <code>let x = v ☃ 0;</code>, such as <a href=\"https://internals.rust-lang.org/t/something-for-coalescing-aka-generalized-improved-or-else/9295?u=scottmcm\">https://internals.rust-lang.org/t/something-for-coalescing-aka-generalized-improved-or-else/9295?u=scottmcm</a></p>",
        "id": 199415350,
        "sender_full_name": "scottmcm",
        "timestamp": 1591041557
    }
]