[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I remember that \"if the const fn evaluates successfully at compile-time for some given arguments, it must evaluate the same at runtime for the same arguments\" was a possible rule stated previously. Making it UB for that to be violated was \"unprovable UB\", right? That would break with all other UB we have, or am I misremembering?</p>",
        "id": 247317594,
        "sender_full_name": "oli",
        "timestamp": 1627382915
    },
    {
        "content": "<p>if we <em>dont</em> have a \"const select\" mechanism (different code for CTFE and runtime), then a similar property is guaranteed: \"if the const fn evaluates successfully at compile-time for some arguments, then it must <em>be possible</em> for this function to evaluate to the same result at runtime\". This takes into account non-determinism, i.e. the runtime function might have multiple different results and compiletime picked one.</p>",
        "id": 247318963,
        "sender_full_name": "RalfJ",
        "timestamp": 1627383903
    },
    {
        "content": "<p>that is just stating that the CTFE engine is correctly evaluating code according to the same semantics that we use at runtime</p>",
        "id": 247318994,
        "sender_full_name": "RalfJ",
        "timestamp": 1627383925
    },
    {
        "content": "<p>with a \"const select\" mechanism, of course we cannot guarantee this any more. we could say it is UB to violate that property but I think UB is the wrong tool for this job... the condition is just too complicated for UB to be a good solution IMO -- this is \"untestable UB\". (it is not \"unprovable\", proofs can do [almost] anything.)</p>",
        "id": 247319161,
        "sender_full_name": "RalfJ",
        "timestamp": 1627384028
    },
    {
        "content": "<p>but we can still make this condition part of what it means for a public <code>const fn</code> to be <em>sound</em></p>",
        "id": 247319194,
        "sender_full_name": "RalfJ",
        "timestamp": 1627384059
    },
    {
        "content": "<p>soundness is not testable already anyway^^</p>",
        "id": 247319204,
        "sender_full_name": "RalfJ",
        "timestamp": 1627384065
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/213817-t-lang/topic/the.20guarantees.20of.20const.20-.20half-measures/near/247319161\">said</a>:</p>\n<blockquote>\n<p>with a \"const select\" mechanism, of course we cannot guarantee this any more. we could say it is UB to violate that property but I think UB is the wrong tool for this job... the condition is just too complicated for UB to be a good solution IMO -- this is \"untestable UB\". (it is not \"unprovable\", proofs can do [almost] anything.)</p>\n</blockquote>\n<p>Well, it could be tested by trial evaluation. Miri could, when calling a const function that uses <code>const_select</code>, evaluate both branches, the <code>const</code> branch in CTFE mode and the non-<code>const</code> branch not.  If the <code>const</code> branch resolves, but the runtime branch explicitly diverges (exits, aborts, or uncaught panic), then the function has undefined behaviour and miri could signal an error.  I do not know how viable this is, but this would be a way to detect it.</p>",
        "id": 247319677,
        "sender_full_name": "Connor Horman",
        "timestamp": 1627384439
    },
    {
        "content": "<p>bu what if both return, but with different results? due to non-determinism that could still be correct...</p>",
        "id": 247327633,
        "sender_full_name": "RalfJ",
        "timestamp": 1627389889
    },
    {
        "content": "<p>also this breaks down for higher-order functions, where equality is no longer decidable</p>",
        "id": 247327671,
        "sender_full_name": "RalfJ",
        "timestamp": 1627389917
    },
    {
        "content": "<p>like calling a <code>const fn</code> that returns a <code>impl FnOnce</code></p>",
        "id": 247327714,
        "sender_full_name": "RalfJ",
        "timestamp": 1627389945
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/213817-t-lang/topic/the.20guarantees.20of.20const.20-.20half-measures/near/247327633\">said</a>:</p>\n<blockquote>\n<p>bu what if both return, but with different results? due to non-determinism that could still be correct...</p>\n</blockquote>\n<p>If both return then the runtime version is the correct version according to the behaviour of <br>\n(the fictional) <code>const_select</code>. I don't think that having different results itself should be UB (otherwise, you can't optimize float functions, as I mentioned). This only provides a method for checking the property of if the <code>const</code> path does not error or have undefined behaviour, then the non-<code>const</code> path will converge (and also notably does not check if the non-<code>const</code> path enters an infinite loop, which cannot be detected).</p>",
        "id": 247328103,
        "sender_full_name": "Connor Horman",
        "timestamp": 1627390157
    },
    {
        "content": "<p>if both are allowed to return different results, then I dont see how this helps at all wrt the condition we are talking about</p>",
        "id": 247329998,
        "sender_full_name": "RalfJ",
        "timestamp": 1627391136
    },
    {
        "content": "<p>which is \"if the const fn evaluates successfully at compile-time for some arguments, then it must be possible for this function to evaluate to the same result at runtime\"</p>",
        "id": 247330041,
        "sender_full_name": "RalfJ",
        "timestamp": 1627391155
    }
]