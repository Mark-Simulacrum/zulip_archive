[
    {
        "content": "<p>The crater experiment in <a href=\"https://github.com/rust-lang/rust/pull/80243\">https://github.com/rust-lang/rust/pull/80243</a> showed <a href=\"https://github.com/rust-lang/rust/pull/80243#issuecomment-751885520\">2 crates</a> relying on promotion of <code>const fn</code> calls in non-trivial ways. I think a sufficiently powerful inline <code>const {}</code> with support for using generic parameters available in the context would solve both of these, but until then we have no adequate replacement. and of course even then there's the question of whether this is an acceptable breaking change.</p>\n<p>There is an alternative though: we could continue promoting <code>const fn</code> calls in <code>const</code>/<code>static</code> initializers <em>only if the initializers are straight-line code</em>. This avoids situations like the following</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">C</span>: <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">failing_const_fn</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"c1\">// If we promote this and then evaluate the promoted, we made computing `C` fail even though it should succeed.</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I admit that this is a horrible hack, but it would maintain full compatibility with all code that was written before control flow was available in CTFE (and indeed, the lack of considering control flow in CTFE might have contributed to this situation arising in the first place). We could stop doing this hack in an edition; however, warning about code that would break is really hard.</p>\n<p>What do y'all think?</p>\n<p>(For some context on promotion, see <a href=\"https://github.com/rust-lang/rfcs/pull/3027\">this RFC</a>)</p>",
        "id": 221361952,
        "sender_full_name": "RalfJ",
        "timestamp": 1609524431
    },
    {
        "content": "<p>Is it possible to promote the constant, try to evaluate it and if it fails, store the result as a \"const <code>poison</code>\" which causes the actual build to fail only if it is accessed during evaluation of a user-level const like <code>C</code></p>",
        "id": 221362218,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609524854
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/213817-t-lang/topic/Promotion.20of.20const.20fn.20calls.20in.20const.2Fstatic.20initializers/near/221362218\">said</a>:</p>\n<blockquote>\n<p>Is it possible to promote the constant, try to evaluate it and if it fails, store the result as a \"const <code>poison</code>\" which causes the actual build to fail only if it is accessed during evaluation of a user-level const like <code>C</code></p>\n</blockquote>\n<p>possible, yes. it's pretty close to what we are doing now and extremely painful.</p>",
        "id": 221362307,
        "sender_full_name": "RalfJ",
        "timestamp": 1609525005
    },
    {
        "content": "<p>many things in the compiler become a lot simpler if \"failure to evaluate const (user-defined or promoted)\" can be reported as a hard error</p>",
        "id": 221362316,
        "sender_full_name": "RalfJ",
        "timestamp": 1609525022
    },
    {
        "content": "<p>see <a href=\"https://github.com/rust-lang/rfcs/pull/3027\">https://github.com/rust-lang/rfcs/pull/3027</a> for details</p>",
        "id": 221362320,
        "sender_full_name": "RalfJ",
        "timestamp": 1609525031
    },
    {
        "content": "<p>as far as I am concerned, if the above option(s) all do not work, the fallback plan is \"be careful to never evaluate promoteds that appear in dead code in another const\"</p>",
        "id": 221362400,
        "sender_full_name": "RalfJ",
        "timestamp": 1609525165
    },
    {
        "content": "<p>I think that's currently the case, actually, but it is more fragile than I'd like.</p>",
        "id": 221362403,
        "sender_full_name": "RalfJ",
        "timestamp": 1609525178
    },
    {
        "content": "<p>(the crater run in <a href=\"https://github.com/rust-lang/rust/pull/80579\">https://github.com/rust-lang/rust/pull/80579</a> will show if that fallback plan is feasible)</p>",
        "id": 221362454,
        "sender_full_name": "RalfJ",
        "timestamp": 1609525207
    },
    {
        "content": "<p>I see <span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> mentions in <a href=\"https://github.com/rust-lang/const-eval/issues/19\">https://github.com/rust-lang/const-eval/issues/19</a> (referring to promotion of <code>let x = &amp;foo()</code> where <code>foo</code> is a failing const fn) that</p>\n<blockquote>\n<p>While we can demote such compile-time errors to panics by compiling them to a call to the panic machinery with the original message, this would break the backtrace and would generally require some rather complex code to support this pretty useless case.</p>\n</blockquote>\n<p>How important is backtrace preservation here? Are we allowed to say that this is implementation-defined?</p>",
        "id": 221362686,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609525602
    },
    {
        "content": "<p>I worry that restricting the scope of const fn to just infallible ops is just going to cause delays in the rollout of const-everywhere for a use case that most people don't care about</p>",
        "id": 221362774,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609525773
    },
    {
        "content": "<blockquote>\n<p>How important is backtrace preservation here? Are we allowed to say that this is implementation-defined?</p>\n</blockquote>\n<p>Note that we are only talking about <code>const fn</code> calls <em>in const/static initializers now</em></p>",
        "id": 221362843,
        "sender_full_name": "RalfJ",
        "timestamp": 1609525915
    },
    {
        "content": "<p>so there are no backtraces, there are just rustc diagnostics being emitted</p>",
        "id": 221362880,
        "sender_full_name": "RalfJ",
        "timestamp": 1609525925
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/213817-t-lang/topic/Promotion.20of.20const.20fn.20calls.20in.20const.2Fstatic.20initializers/near/221362774\">said</a>:</p>\n<blockquote>\n<p>I worry that restricting the scope of const fn to just infallible ops is just going to cause delays in the rollout of const-everywhere for a use case that most people don't care about</p>\n</blockquote>\n<p>please re-read the above. :) nobody is proposing to perform such a restriction.</p>",
        "id": 221362885,
        "sender_full_name": "RalfJ",
        "timestamp": 1609525941
    },
    {
        "content": "<p>the <code>&amp;</code> in my example is crucial -- it triggers promotion to static lifetime</p>",
        "id": 221362888,
        "sender_full_name": "RalfJ",
        "timestamp": 1609525954
    },
    {
        "content": "<p>and the discussion is about not promoting any more -- my example would still compile, but the reference would not have <code>'static</code> lifetime any more</p>",
        "id": 221362893,
        "sender_full_name": "RalfJ",
        "timestamp": 1609525980
    },
    {
        "content": "<p>probably I assumed too much context here^^ sorry for that</p>",
        "id": 221362911,
        "sender_full_name": "RalfJ",
        "timestamp": 1609526004
    },
    {
        "content": "<p>Oh I see, I was going off your statements in the linked issues</p>",
        "id": 221362912,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609526006
    },
    {
        "content": "<p>yeah those are all in the contxt of promotion</p>",
        "id": 221362915,
        "sender_full_name": "RalfJ",
        "timestamp": 1609526016
    },
    {
        "content": "<p>so here's a self-contained example that currently builds but that I'd like to not build (and I doubt that breaks anything since control flow is still rather new):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">C</span>: <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"nc\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">failing_const_fn</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 221362966,
        "sender_full_name": "RalfJ",
        "timestamp": 1609526053
    },
    {
        "content": "<p>if you haven't already, it's worth reading <a href=\"https://github.com/rust-lang/rfcs/pull/3027\">https://github.com/rust-lang/rfcs/pull/3027</a> to get some context on promotion</p>",
        "id": 221362983,
        "sender_full_name": "RalfJ",
        "timestamp": 1609526104
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/213817-t-lang/topic/Promotion.20of.20const.20fn.20calls.20in.20const.2Fstatic.20initializers/near/221362400\">said</a>:</p>\n<blockquote>\n<p>as far as I am concerned, if the above option(s) all do not work, the fallback plan is \"be careful to never evaluate promoteds that appear in dead code in another const\"</p>\n</blockquote>\n<p>Actually, I think there is a way to make this isomorphic to my proposal: promoted constants are evaluated lazily, to ensure the property that if they are evaluated this means that they are directly needed for a user level constant and so it's safe to report a hard error</p>",
        "id": 221362997,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609526143
    },
    {
        "content": "<p>right, but that's annoying because for MIR optimizations, MIR printing, and maybe more purposes, it is really useful to be able to just evaluate all consts that we see</p>",
        "id": 221363048,
        "sender_full_name": "RalfJ",
        "timestamp": 1609526178
    },
    {
        "content": "<p>so basically I see these options:</p>\n<ul>\n<li>live with the fact that promoteds in const/static initializers can fail even if they are not required for said initializer. this will require care in MIR optimizations, MIR printing, maybe more.</li>\n<li>make sure that all potentally-failing promoteds in const/static initializers are required to compute the value of the const. this can happen through different means:<ul>\n<li>never promote anything that might fail -- this breaks some code though (no idea how much, it's only 2 crates in crater)</li>\n<li>only promote things that fail if they are in parts of the CFG that will definitely be evaluated -- that will however be rather surprising behavior, so maybe we want to do this only for old editions</li>\n</ul>\n</li>\n</ul>",
        "id": 221363311,
        "sender_full_name": "RalfJ",
        "timestamp": 1609526559
    },
    {
        "content": "<p>I don't know too much about the details of the implementation so this is probably already being done and I don't have a good sense of the code complexity cost, but it seems like you could just store a <code>Result</code> from the result of evaluating a const and propagate the error like you would a poisoned mutex when you need the value, and print it directly in the case of MIR printing (i.e. show <code>const promoted = &lt;fail&gt;</code>). It's true that \"getting the value of a const\" is thus fallible, but this doesn't seem particularly surprising since const evaluation is fallible in general.</p>",
        "id": 221363614,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609527053
    },
    {
        "content": "<p>Side note (I haven't yet read this thread in full): We (<span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span>  and I), think we may need a way to inform the <code>const_eval</code> query whether it should report a hard error and whether not, because that is needed for some situations around <code>const</code> <code>where</code> bounds. Similarly to how we do not report an error in <code>Reveal::UserFacing</code> when the error is due to layout or \"too generic\" errors. I was considering doing that via the <code>ParamEnv</code>, but I haven't actually come up with an actionable (and written down) plan yet.</p>",
        "id": 221363776,
        "sender_full_name": "oli",
        "timestamp": 1609527258
    },
    {
        "content": "<blockquote>\n<p>only promote things that fail if they are in parts of the CFG that will definitely be evaluated -- that will however be rather surprising behavior, so maybe we want to do this only for old editions</p>\n</blockquote>\n<p>I don't think it's more suprising to users than the fact that the trailing expression of a constant also has this behaviour (and more)</p>",
        "id": 221364025,
        "sender_full_name": "oli",
        "timestamp": 1609527608
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/213817-t-lang/topic/Promotion.20of.20const.20fn.20calls.20in.20const.2Fstatic.20initializers/near/221363614\">said</a>:</p>\n<blockquote>\n<p>I don't know too much about the details of the implementation so this is probably already being done and I don't have a good sense of the code complexity cost, but it seems like you could just store a <code>Result</code> from the result of evaluating a const and propagate the error like you would a poisoned mutex when you need the value, and print it directly in the case of MIR printing (i.e. show <code>const promoted = &lt;fail&gt;</code>). It's true that \"getting the value of a const\" is thus fallible, but this doesn't seem particularly surprising since const evaluation is fallible in general.</p>\n</blockquote>\n<p>yeah this is kind of what we are doing and it leads to a lot of code complexity and bad diagnostics. the RFC has some further links.</p>\n<p>const evaluation failing is not the issue. the issue is having to continue compilation \"as if nothing happened\" after const evaluation failed.</p>",
        "id": 221364760,
        "sender_full_name": "RalfJ",
        "timestamp": 1609528741
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/213817-t-lang/topic/Promotion.20of.20const.20fn.20calls.20in.20const.2Fstatic.20initializers/near/221363776\">said</a>:</p>\n<blockquote>\n<p>Side note (I haven't yet read this thread in full): We (<span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span>  and I), think we may need a way to inform the <code>const_eval</code> query whether it should report a hard error and whether not, because that is needed for some situations around <code>const</code> <code>where</code> bounds. Similarly to how we do not report an error in <code>Reveal::UserFacing</code> when the error is due to layout or \"too generic\" errors. I was considering doing that via the <code>ParamEnv</code>, but I haven't actually come up with an actionable (and written down) plan yet.</p>\n</blockquote>\n<p>if it truly is a query parameter (so the query will be re-evaluated when errors should be shown), that seems much less painful than what we have currently.</p>",
        "id": 221364781,
        "sender_full_name": "RalfJ",
        "timestamp": 1609528795
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/213817-t-lang/topic/Promotion.20of.20const.20fn.20calls.20in.20const.2Fstatic.20initializers/near/221364025\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>only promote things that fail if they are in parts of the CFG that will definitely be evaluated -- that will however be rather surprising behavior, so maybe we want to do this only for old editions</p>\n</blockquote>\n<p>I don't think it's more suprising to users than the fact that the trailing expression of a constant also has this behaviour (and more)</p>\n</blockquote>\n<p>fair... but I think the behavior here is \"even stranger\". in particular if we dont want to use an expensive analysis to determine which part of the CFG will be definitely evaluated, but just check if there is any branching control-flow anywhere.</p>",
        "id": 221364831,
        "sender_full_name": "RalfJ",
        "timestamp": 1609528887
    },
    {
        "content": "<p>The query parameter approach need not even evaluate the constant twice, if the \"get constant or hard error\" query delegates to \"pure evaluate constant to Result\" and turns the stored error value into a hard error</p>",
        "id": 221364945,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609529067
    },
    {
        "content": "<p>the \"error\" is a lot of information, at least so far we've avoided putting that into the query cache. in particular, it contains the full CTFE backtrace.</p>",
        "id": 221365306,
        "sender_full_name": "RalfJ",
        "timestamp": 1609529662
    },
    {
        "content": "<p>also, I think getting diagnostics right and non-duplicated will be rather hard with such a scheme.</p>",
        "id": 221365319,
        "sender_full_name": "RalfJ",
        "timestamp": 1609529689
    },
    {
        "content": "<p>but also, this is not at all the discussion I wanted to have.^^ my question was whether making this code work</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">C</span>: <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"nc\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">failing_const_fn</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>but this code fail</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">C</span>: <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"nc\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">failing_const_fn</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>is acceptable to achieve <a href=\"https://github.com/rust-lang/rfcs/pull/3027\">\"infallible promotion\"</a> or not. Now we're talking about whether we should even strive for infallible promotion. That's an interesting discussion, but a different one -- and also we have an accepted RFC saying that we should strive for infallibe promotion.</p>",
        "id": 221365432,
        "sender_full_name": "RalfJ",
        "timestamp": 1609529882
    },
    {
        "content": "<p>At least insofar as const eval is currently \"half baked\" and being slowly more baked as more bits are stabilized, I don't think having a \"weird\" Intermediate point is necessarily a problem as long as the visible fallout from crater is not large. I don't think programmers are expecting this to have nice rules, at least if they read the discussions on const-eval :)</p>",
        "id": 221365628,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609530212
    },
    {
        "content": "<p>Tangentially related, I think that allowing type inference on private <code>const</code>ants would become necessary in order not to lose expressive power if this promotion is removed. From my exterior and thus ignorant point of view, this seems like something not that hard to implement (this inference is currently just denied for the sake of API stability, which does not matter for non-<code>pub</code> <code>const</code>ants), and is potentially something very useful for those having to deal with this breakage (is rodrimatti on Zulip? If so, can someone ping them?). With that, a macro to have <code>const</code> blocks (thus not needing a syntax extension) would be quite trivial to write (<code>{ const IT: _ = $expr; IT }</code>)</p>",
        "id": 221365938,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1609530716
    },
    {
        "content": "<blockquote>\n<p>a macro to have const blocks (thus not needing a syntax extension)</p>\n</blockquote>\n<p>these const blocks would not support using generic parameters of the surrounding context, so they are too weak</p>",
        "id": 221366000,
        "sender_full_name": "RalfJ",
        "timestamp": 1609530773
    },
    {
        "content": "<p>Ah, true, damn</p>",
        "id": 221366974,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1609532172
    },
    {
        "content": "<blockquote>\n<p>fair... but I think the behavior here is \"even stranger\". in particular if we dont want to use an expensive analysis to determine which part of the CFG will be definitely evaluated, but just check if there is any branching control-flow anywhere.</p>\n</blockquote>\n<p>Right, that is a bit annoying. I was just also thinking about closure arguments to functions which may not get called, so even if it's in the unconditional path, we can't promote it: <code>foo(|| &amp;(1/0))</code>. Though we can probably just have custom rules for closures in const context that make sure we have the good rules in there, since there is no regression issue</p>",
        "id": 221372009,
        "sender_full_name": "oli",
        "timestamp": 1609539945
    },
    {
        "content": "<p>So... the current possibilities that I am aware of are:</p>\n<ol>\n<li>keep the current status, bad because then we have fallible promotion even in dead code paths, causing errors where there are none</li>\n<li>make a breaking change</li>\n<li>make a small breaking change, causing inserted assertions to suddenly change what we permit in promotion </li>\n<li>revert to <code>StorageDead</code>-erasing promotion instead of actually creating a separate MIR for promoteds in constants, thus always only \"evaluating the promoted\" when encountering it during evaluation of the constant</li>\n<li>do not eagerly evaluate promoteds of constant items (what was the problem with that again except for it being inconsistent in the compiler impl)?</li>\n</ol>",
        "id": 221372470,
        "sender_full_name": "oli",
        "timestamp": 1609540662
    },
    {
        "content": "<blockquote>\n<p>Right, that is a bit annoying. I was just also thinking about closure arguments to functions which may not get called, so even if it's in the unconditional path, we can't promote it: foo(|| &amp;(1/0)). Though we can probably just have custom rules for closures in const context that make sure we have the good rules in there, since there is no regression issue</p>\n</blockquote>\n<p>let's make this <code>foo(|| &amp;some_fn())</code> so fit the topic. ;)<br>\nthat promotion candidate is not even within the const/static body any more... so I don't think we would currently promote anything here? do you have an example like this that works on stable?</p>",
        "id": 221398343,
        "sender_full_name": "RalfJ",
        "timestamp": 1609591183
    },
    {
        "content": "<blockquote>\n<ol>\n<li>keep the current status, bad because then we have fallible promotion even in dead code paths, causing errors where there are none</li>\n</ol>\n</blockquote>\n<p>note, the conclusion is wrong -- see <a href=\"#narrow/stream/213817-t-lang/topic/Promotion.20of.20const.20fn.20calls.20in.20const.2Fstatic.20initializers/near/221363311\">my summary above</a>.</p>",
        "id": 221398396,
        "sender_full_name": "RalfJ",
        "timestamp": 1609591217
    },
    {
        "content": "<blockquote>\n<ol start=\"4\">\n<li>revert to StorageDead-erasing promotion instead of actually creating a separate MIR for promoteds in constants, thus always only \"evaluating the promoted\" when encountering it during evaluation of the constant</li>\n</ol>\n</blockquote>\n<p>that's incompatible with loops, isn't it?</p>",
        "id": 221398404,
        "sender_full_name": "RalfJ",
        "timestamp": 1609591244
    },
    {
        "content": "<p>I don't understand your option 3, and for 2 I am not sure which of the possibilities you mean ;)</p>",
        "id": 221398415,
        "sender_full_name": "RalfJ",
        "timestamp": 1609591286
    },
    {
        "content": "<p>for 5, see <a href=\"#narrow/stream/213817-t-lang/topic/Promotion.20of.20const.20fn.20calls.20in.20const.2Fstatic.20initializers/near/221363311\">my previous summary</a></p>",
        "id": 221398421,
        "sender_full_name": "RalfJ",
        "timestamp": 1609591297
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/213817-t-lang/topic/Promotion.20of.20const.20fn.20calls.20in.20const.2Fstatic.20initializers/near/221398396\">said</a>:</p>\n<blockquote>\n<blockquote>\n<ol>\n<li>keep the current status, bad because then we have fallible promotion even in dead code paths, causing errors where there are none</li>\n</ol>\n</blockquote>\n<p>note, the conclusion is wrong -- see <a href=\"#narrow/stream/213817-t-lang/topic/Promotion.20of.20const.20fn.20calls.20in.20const.2Fstatic.20initializers/near/221363311\">my summary above</a>.</p>\n</blockquote>\n<p>My conclusion is mis-communicated, but tried to say the same thing. we emit errors for promoteds, even if said promoteds are not explicitly requested to get promoted by the user. Without promotion, the const initializer would have succeeded to evaluate, because the erroneous promoted would have never gotten visited.</p>",
        "id": 221399830,
        "sender_full_name": "oli",
        "timestamp": 1609593611
    },
    {
        "content": "<ol start=\"2\">\n<li>is \"forbid all <code>const fn</code> in promoteds\"</li>\n<li>is \"forbid <code>const fn</code> in promoteds that are only reached conditionally\"</li>\n</ol>",
        "id": 221399922,
        "sender_full_name": "oli",
        "timestamp": 1609593817
    },
    {
        "content": "<blockquote>\n<p>Without promotion, the const initializer would have succeeded to evaluate, because the erroneous promoted would have never gotten visited.</p>\n</blockquote>\n<p>this assumes we'll visit that promoted, which we can avoid (and we currently do, at least for a normal build -- not sure about <code>--emit mir</code>)</p>",
        "id": 221399966,
        "sender_full_name": "RalfJ",
        "timestamp": 1609593845
    }
]