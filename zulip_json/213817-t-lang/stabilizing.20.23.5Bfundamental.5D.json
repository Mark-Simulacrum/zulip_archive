[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"213696\">@Armin Ronacher</span> The lang team discussed that not too long ago, and came to the conclusion that it'd be potentially risky to use outside the standard library. We didn't rule out stabilizing it, but we were hesitant.</p>",
        "id": 270427340,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643823855
    },
    {
        "content": "<p>Which <code>#[fundamental]</code> btw? The one for traits, or for generic types?</p>",
        "id": 270427438,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1643823882
    },
    {
        "content": "<p>The one for generic types was the one we discussed recently.</p>",
        "id": 270427529,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643823907
    },
    {
        "content": "<p>The former <em>may</em> be kind of covered by \"negative traits integrated into coherence\", whereas the latter seems indeed quite special / subtle</p>",
        "id": 270427558,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1643823919
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"213696\">@Armin Ronacher</span> so</p>",
        "id": 270427869,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1643824019
    },
    {
        "content": "<p>I would like to remove <code>#[fundamental]</code></p>",
        "id": 270427893,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1643824032
    },
    {
        "content": "<p>and replace it with explicit negative impls</p>",
        "id": 270427913,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1643824039
    },
    {
        "content": "<p>I don't know if this is truly possible</p>",
        "id": 270427921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1643824043
    },
    {
        "content": "<p>but it'd be good to get a bit more of an idea of what you want to do with it</p>",
        "id": 270427969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1643824058
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://github.com/rust-lang/rust/issues/29635#issuecomment-1028178273\">https://github.com/rust-lang/rust/issues/29635#issuecomment-1028178273</a></p>",
        "id": 270428182,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643824128
    },
    {
        "content": "<p>If nothing else, we'll definitely be able to remove a bunch of its uses (like &lt;<a href=\"https://doc.rust-lang.org/1.52.0/src/core/ops/function.rs.html#65\">https://doc.rust-lang.org/1.52.0/src/core/ops/function.rs.html#65</a>&gt;) with negative impls.  Whether we could remove it forever is harder, given things like <code>Box&lt;T&gt;</code> being <code>fundamental</code>.</p>",
        "id": 270428215,
        "sender_full_name": "scottmcm",
        "timestamp": 1643824140
    },
    {
        "content": "<p>So for the context of what I'm doing it's part of an experimental serialization system. It follows the design from miniserde largely where the deserialization interface is by putting values into slots. So this is the API I wanted to enable:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">deser</span>::<span class=\"n\">de</span>::<span class=\"p\">{</span><span class=\"n\">Sink</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Slot</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">DeserializerState</span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">deser</span>::<span class=\"n\">Error</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">MyBool</span><span class=\"p\">(</span><span class=\"kt\">bool</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Sink</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Slot</span><span class=\"o\">&lt;</span><span class=\"n\">MyBool</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">bool</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">value</span>: <span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_state</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">DeserializerState</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">place</span><span class=\"p\">(</span><span class=\"n\">MyBool</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 270428695,
        "sender_full_name": "Armin Ronacher",
        "timestamp": 1643824315
    },
    {
        "content": "<p>It's not possible to implement this at the moment because the user does not control either <code>Sink</code> or <code>Slot</code> (different crates). <code>#[fundamental]</code> is a nice workaround for this.</p>",
        "id": 270428812,
        "sender_full_name": "Armin Ronacher",
        "timestamp": 1643824347
    },
    {
        "content": "<p>Miniserde itself offers a macro to allow users to have access to <code>Slot</code> in a local-to-the-caller's-crate kind of way: <a href=\"https://docs.rs/miniserde/0.1.19/miniserde/de/index.html#deserializing-a-primitive\">https://docs.rs/miniserde/0.1.19/miniserde/de/index.html#deserializing-a-primitive</a></p>",
        "id": 270429001,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1643824403
    },
    {
        "content": "<p>Yeah. But unfortunately that comes with a lot of restrictions that make using this quite unwieldy. miniserde also uses unsafe internally to transmute between <code>&amp;mut Option&lt;T&gt;</code> and <code>&amp;mut TheirPlace&lt;T&gt;</code> which I was trying to avoid.</p>",
        "id": 270429242,
        "sender_full_name": "Armin Ronacher",
        "timestamp": 1643824484
    },
    {
        "content": "<p>Hmm, ok, this is interesting</p>",
        "id": 270429938,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1643824716
    },
    {
        "content": "<p>This is indeed what <code>#[fundamental]</code>on types is sort of meant for</p>",
        "id": 270429978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1643824728
    },
    {
        "content": "<p>I guess earlier I should've said that I would like to remove <code>#[fundamental]</code> <em>on traits</em></p>",
        "id": 270430042,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1643824750
    },
    {
        "content": "<p>I think that explicit negative impls are just better</p>",
        "id": 270430058,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1643824756
    },
    {
        "content": "<p>I'm not sure about types</p>",
        "id": 270430101,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1643824768
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Do you know where we took notes from the team discussion about <code>#[fundamental]</code>?</p>",
        "id": 270430103,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643824769
    },
    {
        "content": "<p>I don't remember this</p>",
        "id": 270430171,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1643824799
    },
    {
        "content": "<p>Backlog bonanza doc, presumably?</p>",
        "id": 270430686,
        "sender_full_name": "simulacrum",
        "timestamp": 1643824938
    },
    {
        "content": "<p>I don't think enough about <code>#[fundamental]</code> on traits but on types with at least one generic type parameter it seems quite useful. Maybe it could be restricted to that</p>",
        "id": 270431273,
        "sender_full_name": "Armin Ronacher",
        "timestamp": 1643825134
    },
    {
        "content": "<p>What's preventing just allowing <code>impl ExternalTrait for ExternalType&lt;MyType&gt; { ... }</code>?</p>",
        "id": 270431310,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1643825149
    },
    {
        "content": "<p>I think it depends on the rules for blanket impls.  Those are already a bit fundamental-like in that IIRC there are some restrictions on adding them already...</p>",
        "id": 270431982,
        "sender_full_name": "scottmcm",
        "timestamp": 1643825397
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"363998\">@Ibraheem Ahmed</span> what if in a new version the owner of <code>ExternalType</code> were to write <code>impl&lt;T : ?Sized&gt; ExternalTrait of ExternalType&lt;T&gt; {}</code> or other similar blanket impls?</p>\n<p>I imagine that <code>#[fundamental]</code> on <code>ExternalType</code> may thus works by asserting to the coherence system that no new blanket impls (of existing traits) shall be added to that type (constructor)</p>",
        "id": 270431997,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1643825401
    },
    {
        "content": "<p>So a <code>#[fundamental]</code> type is not allowed to add new blanket trait impls?</p>",
        "id": 270432163,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1643825468
    },
    {
        "content": "<p>Doing so for an existing trait would be breaking, since a downstream user would have been allowed to write an impl such as the one you suggested</p>",
        "id": 270432251,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1643825512
    },
    {
        "content": "<p>(But for a new trait I'd imagine it to be fine)</p>",
        "id": 270432414,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1643825575
    },
    {
        "content": "<p>I see.</p>",
        "id": 270432477,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1643825605
    },
    {
        "content": "<p><a href=\"https://rust-lang.github.io/rfcs/1023-rebalancing-coherence.html#errors-from-cargo-and-the-fundamental-attribute\">https://rust-lang.github.io/rfcs/1023-rebalancing-coherence.html#errors-from-cargo-and-the-fundamental-attribute</a></p>\n<blockquote>\n<p>A #[fundamental] type Foo is one where implementing a blanket impl over Foo is a breaking change. As described, &amp; and &amp;mut are fundamental. This attribute would be applied to Box, making Box behave the same as &amp; and &amp;mut with respect to coherence.</p>\n</blockquote>",
        "id": 270432766,
        "sender_full_name": "cuviper",
        "timestamp": 1643825707
    },
    {
        "content": "<p>I guess that in <span class=\"user-mention\" data-user-id=\"213696\">@Armin Ronacher</span>'s case, maybe negative traits could be enough? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Sink</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Slot</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">Sink</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Slot</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>EDIT: nope nope nope</p>",
        "id": 270432835,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1643825739
    },
    {
        "content": "<p>Could this maybe be replaced with <code>impl&lt;T&gt; !_ for Box&lt;T&gt; {}</code>?</p>",
        "id": 270433008,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1643825797
    },
    {
        "content": "<p>Where <code>_</code> is saying, \"I'm commiting to not implementing any trait I haven't already\"</p>",
        "id": 270433042,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1643825814
    },
    {
        "content": "<p>And then adding a new impl would be a breaking change, because it breaks that guarantee</p>",
        "id": 270433100,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1643825843
    },
    {
        "content": "<p>I don't think that works, because negative impls are a promise that can be relied upon -- so others can't implement it either.</p>",
        "id": 270433110,
        "sender_full_name": "scottmcm",
        "timestamp": 1643825848
    },
    {
        "content": "<p>I suppose <code>!_</code> would be special in that regard</p>",
        "id": 270433281,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1643825921
    },
    {
        "content": "<p>e.g. unsafe code can rely on <code>unsafe&lt;T&gt; impl !Sync for Box&lt;T&gt;</code> because it's explicit, but it can't rely on traits <em>implied</em> by <code>_</code></p>",
        "id": 270433365,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1643825966
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> yeah I realize that now</p>",
        "id": 270433394,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1643825978
    },
    {
        "content": "<p>That's pretty line-noisy, I'd rather just have an attribute than new syntax for an obscure feature</p>",
        "id": 270433396,
        "sender_full_name": "bstrie",
        "timestamp": 1643825979
    },
    {
        "content": "<p>if it's going to be \"special\", it doesn't seem better than the truly different <code>#[fundamental]</code></p>",
        "id": 270433415,
        "sender_full_name": "cuviper",
        "timestamp": 1643825987
    },
    {
        "content": "<p><code>#[fundamental]</code> just feels like an internal hack for a missing language feature, to me</p>",
        "id": 270433617,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1643826057
    },
    {
        "content": "<p>But that could just be the name <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 270433664,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1643826083
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/213817-t-lang/topic/stabilizing.20.23.5Bfundamental.5D/near/270430686\">said</a>:</p>\n<blockquote>\n<p>Backlog bonanza doc, presumably?</p>\n</blockquote>\n<p>I thought so but didn't find it. Is it in one of the backlog bonanza docs that didn't end up in the lang team hackmd area?</p>",
        "id": 270433802,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643826140
    },
    {
        "content": "<p>Yeah I find that <code>fundamental</code> for traits and generic types are too different to be named the same (this problem also occurs for <code>default fn</code> and <code>default impl</code>, btw, the latter ought to be <code>partial impl</code>, and ppl could add <code>default fn</code> to the items of a <code>partial impl</code>, which would thus otherwise be final).</p>",
        "id": 270433846,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1643826160
    },
    {
        "content": "<p><code>#[incoherent]</code></p>",
        "id": 270433964,
        "sender_full_name": "cuviper",
        "timestamp": 1643826213
    },
    {
        "content": "<p>What if say, <span class=\"user-mention\" data-user-id=\"213696\">@Armin Ronacher</span> wanted to allow <code>impl Serialize for Slot&lt;Foo&gt;</code>, but nothing else?</p>",
        "id": 270434150,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1643826279
    },
    {
        "content": "<p><code>#[fundamental]</code> isn't specific enough then</p>",
        "id": 270434175,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1643826289
    },
    {
        "content": "<p>so basically what the feature is looking for is a way to promise that the base crate never implements a specific trait, right?</p>",
        "id": 270434261,
        "sender_full_name": "Armin Ronacher",
        "timestamp": 1643826322
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"363998\">@Ibraheem Ahmed</span> If it was only one specific trait, it might be possible to <code>impl&lt;T: MyTrait&gt; Serialize for Slot&lt;T&gt;</code> and then tell people to implement <code>MyTrait</code> if they want Serialize.</p>",
        "id": 270434265,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1643826324
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">- impl&lt;T&gt; !Serialize for Slot&lt;T&gt; {}</span><span class=\"w\"></span>\n<span class=\"gi\">+ ! impl&lt;T&gt; Serialize for Slot&lt;T&gt; {}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 270434341,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1643826356
    },
    {
        "content": "<p><code>extern impl&lt;T&gt; Serialize for Slot&lt;T&gt;</code> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 270434456,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1643826394
    },
    {
        "content": "<p>Doesn't specialization cover this?</p>",
        "id": 270434545,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1643826440
    },
    {
        "content": "<p>Can I have a <code>default impl&lt;T&gt; Serialize for Slot&lt;T&gt; { ... }</code> and allow users to override that for a more specific type?</p>",
        "id": 270434604,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1643826468
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232018\">Daniel Henry-Mantilla</span> <a href=\"#narrow/stream/213817-t-lang/topic/stabilizing.20.23.5Bfundamental.5D/near/270434341\">said</a>:<br>\ndoesn't negative impl say that nobody can implement this?</p>",
        "id": 270434616,
        "sender_full_name": "Armin Ronacher",
        "timestamp": 1643826474
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"363998\">Ibraheem Ahmed</span> <a href=\"#narrow/stream/213817-t-lang/topic/stabilizing.20.23.5Bfundamental.5D/near/270434456\">said</a>:</p>\n<blockquote>\n<p><code>extern impl&lt;T&gt; Serialize for Slot&lt;T&gt;</code> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>\n</blockquote>\n<p>That looks like a nice idea, but despite tempting, we shouldn't be using a linkage / abi term here:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[downstream_may]</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Serialize</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Slot</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 270434784,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1643826541
    },
    {
        "content": "<p>i will say that this conveys the idea much better than <code>#[fundamental]</code> at the very least.</p>",
        "id": 270435024,
        "sender_full_name": "Armin Ronacher",
        "timestamp": 1643826634
    },
    {
        "content": "<p>Or</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"cp\">#[downstream]</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Serialize</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Slot</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 270435118,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1643826680
    },
    {
        "content": "<p>the challenge now though is that this is a very specific type of API promise that I'm not sure will address the issues people have with building their own <code>Box&lt;T&gt;</code> types</p>",
        "id": 270435120,
        "sender_full_name": "Armin Ronacher",
        "timestamp": 1643826681
    },
    {
        "content": "<p>is that transitive? is downstream allowed to blanket <code>impl&lt;T&gt; Serialize for Slot&lt;Local&lt;T&gt;&gt;</code>?</p>",
        "id": 270435121,
        "sender_full_name": "cuviper",
        "timestamp": 1643826681
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"213696\">Armin Ronacher</span> <a href=\"#narrow/stream/213817-t-lang/topic/stabilizing.20.23.5Bfundamental.5D/near/270435120\">said</a>:</p>\n<blockquote>\n<p>the challenge now though is that this is a very specific type of API promise that I'm not sure will address the issues people have with building their own <code>Box&lt;T&gt;</code> types</p>\n</blockquote>\n<p>Which is where <code>impl&lt;#[downstream] T&gt; _ for Box&lt;T&gt;</code> comes in <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 270435170,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1643826707
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> <a href=\"#narrow/stream/213817-t-lang/topic/stabilizing.20.23.5Bfundamental.5D/near/270435121\">said</a>:</p>\n<blockquote>\n<p>is that transitive? is downstream allowed to blanket <code>impl&lt;T&gt; Serialize for Slot&lt;Local&lt;T&gt;&gt;</code>?</p>\n</blockquote>\n<p>Presumably yes</p>",
        "id": 270435332,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1643826762
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> I'd say so, yes, because they own <code>Local</code>. As, in, imagining a middle dependent having a <code>Middle&lt;T&gt;</code> type,<br>\nthen a downstream crate wouldn't be able to <code>impl&lt;T&gt; Serialize for Slot&lt;Middle&lt;Local&gt;&gt;</code> unless the middle-layer had \"forwarded it\" with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"cp\">#[downstream]</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Serialize</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Slot</span><span class=\"o\">&lt;</span><span class=\"n\">Middle</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 270435425,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1643826811
    },
    {
        "content": "<p>What I like about this approach is that it would show coherence errors for the crates exposing this, so it would be way less of a semver hazard than <code>#[fundamental]</code>-on-generic-type</p>",
        "id": 270435603,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1643826874
    },
    {
        "content": "<p>As in:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"cp\">#[downstream]</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Serialize</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Slot</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Serialize</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Slot</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* items */</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and the following one, albeit subtle, should also be denied:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"cp\">#[downstream]</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Serialize</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Slot</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span>: <span class=\"nb\">ToString</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Serialize</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Slot</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* items */</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 270436394,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1643827190
    },
    {
        "content": "<p>This feels a lot like specialization</p>",
        "id": 270436698,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1643827314
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"cp\">#[downstream]</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Serialize</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Slot</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">default</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span>: <span class=\"nb\">ToString</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Serialize</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Slot</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* items */</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Could be effectively:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"cp\">#[downstream]</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"o\">!</span><span class=\"nb\">ToString</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Serialize</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Slot</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">default</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">ToString</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Serialize</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Slot</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* items */</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 270436805,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1643827351
    },
    {
        "content": "<p>I’m not sure if this really relates to specializations. It’s “just” a restriction in the orphan check. There are no overlapping implementations</p>",
        "id": 270437108,
        "sender_full_name": "Armin Ronacher",
        "timestamp": 1643827495
    },
    {
        "content": "<p>Anyhow, I don't think we'd need to handle \"complementary set\" reasonings to start with (I know they can easily become problematic), but I think that both</p>\n<ul>\n<li>\n<p>the <em>specificity</em>, as <span class=\"user-mention\" data-user-id=\"363998\">@Ibraheem Ahmed</span> put it, of providing the trait over which a generic type would be fundamental,</p>\n</li>\n<li>\n<p>as well as the readability of the statement in and of itself, which potentially includes better coherence-related error messages,</p>\n</li>\n</ul>\n<p>does make me think there is a nice venue worth pursuing, here, even if the initial release weren't able to handle partial overlaps of blanket impls.</p>",
        "id": 270437197,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1643827547
    },
    {
        "content": "<p>I think that feature would also be rather nice to \"discover\" from a user via the error message. I ran into this having built an API that basically can't be implemented by a third party, but it worked in the crate itself. So if someone else also goes down that path, they could dig themselves out via the error message they get, with an example of how to whitelist their own trait.</p>",
        "id": 270437922,
        "sender_full_name": "Armin Ronacher",
        "timestamp": 1643827878
    },
    {
        "content": "<p>right now it's a bit of a shitty experience discovering that such a designed API cannot work for anyone other than the original crate itself.</p>",
        "id": 270437965,
        "sender_full_name": "Armin Ronacher",
        "timestamp": 1643827903
    },
    {
        "content": "<p>My point is basically that it doesn't make the language significantly more complex as one mostly only runs into this that way.</p>",
        "id": 270438433,
        "sender_full_name": "Armin Ronacher",
        "timestamp": 1643828099
    },
    {
        "content": "<p>For <code>impl !Trait</code>, this would still work, right:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 270450735,
        "sender_full_name": "Connor Horman",
        "timestamp": 1643833018
    },
    {
        "content": "<p>I would guess so, <code>T</code> is implicitly bound by <code>Sized</code> and <code>[T]</code> doesn't implement <code>Sized</code>.</p>",
        "id": 270450803,
        "sender_full_name": "bjorn3",
        "timestamp": 1643833060
    },
    {
        "content": "<p>(Although what I really want is a way to negative impl for non-trait objects).</p>\n<p>I guess even without <code>#[fundamental]</code>, the compiler can make that work by automagically implementing <code>!Sized</code> everywhere that it doesn't implement <code>Sized</code>.</p>",
        "id": 270451573,
        "sender_full_name": "Connor Horman",
        "timestamp": 1643833440
    },
    {
        "content": "<p>\"auto magic impl <code>!Trait</code> for everything that doesnt implement <code>Trait</code>\" is exactly how ive been understanding fundamental traits</p>",
        "id": 270451713,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1643833490
    },
    {
        "content": "<p>I do have a trait I'd want to put <code>#[fundamental]</code> on, as part of the shim I need to do to soundly allow <code>DynRef&lt;Trait&gt;</code>/<code>DynMut&lt;Trait&gt;</code> to be used to call methods on <code>Trait</code>.</p>",
        "id": 270451781,
        "sender_full_name": "Connor Horman",
        "timestamp": 1643833527
    },
    {
        "content": "<p>Just for my understanding: is the main concern with <code>#[fundamental]</code> on traits today the semver hazard or something else as well?</p>",
        "id": 270452300,
        "sender_full_name": "Armin Ronacher",
        "timestamp": 1643833774
    }
]