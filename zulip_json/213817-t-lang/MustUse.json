[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> and <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span>  -- could I maybe ask you all a question about <code>MustUse</code></p>",
        "id": 197197804,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589227632
    },
    {
        "content": "<p>We've had a lot of conversation about it lately, and a few PRs:</p>\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust/pull/71816\">https://github.com/rust-lang/rust/pull/71816</a> -- <span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span>'s addition of a <code>MustUse</code> trait</li>\n<li><a href=\"https://github.com/rust-lang/rust/pull/62262\">https://github.com/rust-lang/rust/pull/62262</a> -- <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span>'s earlier PR to extend <code>#[must_use]</code> to nested structures (e.g., if any field type is must use)</li>\n</ul>",
        "id": 197197954,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589227711
    },
    {
        "content": "<p>The latter had some <a href=\"https://github.com/rust-lang/rust/pull/62262#issuecomment-544647401\">crater run results</a>, and I think the results were a bit mixed. i.e., it caught some bugs, but also some amount of \"false positives\".</p>",
        "id": 197198058,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589227765
    },
    {
        "content": "<p>At the same time, particularly around async, this is a helpful lint to catch missing <code>await</code>, with at least a few use cases:</p>\n<ul>\n<li><code>Pin&lt;MustUseType&gt;</code></li>\n<li>`Option&lt;MustUseType&gt;</li>\n<li><code>tokio::JoinHandle&lt;MustUseType&gt;</code></li>\n</ul>\n<p>have been raised.</p>",
        "id": 197198176,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589227810
    },
    {
        "content": "<p>I feel like it'd be nice to get a bit more data -- for example, I'm curious about a proposal similar to <a href=\"https://github.com/rust-lang/rust/issues/62262\">#62262</a> except that we say that a type <code>SomeType&lt;T0..Tn&gt;</code> is must use if </p>\n<ul>\n<li><code>SomeType</code>  is tagged <code>#[must_use]</code></li>\n<li>any of the types <code>T0..Tn</code> are <code>#[must_use]</code></li>\n</ul>\n<p>(but we don't look at the fields of <code>SomeType</code>, as <a href=\"https://github.com/rust-lang/rust/issues/62262\">#62262</a> did)</p>\n<p>Did we ever try that?</p>",
        "id": 197198327,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589227893
    },
    {
        "content": "<p>Anyway I was wondering whether either of you was motivated to try and pursue a change here. I think it would probably involve an RFC, although it depends on the magnitude of the change we land on.</p>",
        "id": 197198374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589227919
    },
    {
        "content": "<p>So I think that being able to have types be Must Use mostly applies to closures and places where you can't mark the code's output as being must_use? I mean like Felix said in the meeting today, Must Use is really a property of code, not of data? Or, I guess \"it should be\", even if that's not true in Rust today. It seems like having Must Use on data types is just a shortcut to having Must Use on every function that returns that particular type of data. And then all this difficulty over having it be a trait or recursive or anything else is basically being caused by the fact that Must Use \"isn't supposed\" to be on data types in the first place?</p>\n<p>I guess i'm not trying to favor any particular proposal at all, just asking for clarification on how you see things.</p>",
        "id": 197201236,
        "sender_full_name": "Lokathor",
        "timestamp": 1589229299
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> It's not just \"you can't\", it's also \"you don't want to go to every function and mark it\".</p>",
        "id": 197202149,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589229759
    },
    {
        "content": "<p>For instance, <code>Result</code> being <code>must_use</code> is <em>useful</em>.</p>",
        "id": 197202162,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589229768
    },
    {
        "content": "<p>I would even go so far as to say that if Result was <em>not</em> must_use, we would be in a significantly worse place wrt to \"Rust ensures you check errors\" today -- it's more than just useful.</p>",
        "id": 197202400,
        "sender_full_name": "simulacrum",
        "timestamp": 1589229915
    },
    {
        "content": "<p>I am in this case ignoring the grunt work of marking each function as must_use individually, yes.</p>",
        "id": 197202585,
        "sender_full_name": "Lokathor",
        "timestamp": 1589230002
    },
    {
        "content": "<p>But that's exactly my point really, making Result <code>must_use</code> as a type is just a shortcut for the <em>actual practical effect</em> that people want, which is that code that returns Result values should generally be <code>must_use</code></p>",
        "id": 197202773,
        "sender_full_name": "Lokathor",
        "timestamp": 1589230117
    },
    {
        "content": "<p>Yes, that's largely true I think.</p>",
        "id": 197202821,
        "sender_full_name": "simulacrum",
        "timestamp": 1589230151
    },
    {
        "content": "<p>Well if we take that as the point of <code>must_use</code> being on a type, having a <code>must_use</code> field make your own type automatically become <code>must_use</code> by default and then adding a field attribute that you can place on a field for \"this counts as used, stay quiet about it\" if you need to opt out seems like the simplest system to understand as a user.</p>",
        "id": 197203180,
        "sender_full_name": "Lokathor",
        "timestamp": 1589230336
    },
    {
        "content": "<p>I don't really think I have the time to pursue an RFC for this (I didn't realize one would be necessary, as I just intended to slightly improve diagnostics without any plans for stabilizing <code>MustUse</code>)</p>",
        "id": 197205580,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1589231614
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/MustUse/near/197198327\">said</a>:</p>\n<blockquote>\n<p>I feel like it'd be nice to get a bit more data -- for example, I'm curious about a proposal similar to <a href=\"https://github.com/rust-lang/rust/issues/62262\">#62262</a> except that we say that a type <code>SomeType&lt;T0..Tn&gt;</code> is must use if </p>\n<ul>\n<li><code>SomeType</code>  is tagged <code>#[must_use]</code></li>\n<li>any of the types <code>T0..Tn</code> are <code>#[must_use]</code></li>\n</ul>\n<p>(but we don't look at the fields of <code>SomeType</code>, as <a href=\"https://github.com/rust-lang/rust/issues/62262\">#62262</a> did)</p>\n<p>Did we ever try that?</p>\n</blockquote>\n<p>We didn't try that, but this seems quite ad hoc to me. Why should the behaviour of <code>SomeType&lt;Foo&gt;</code> be different to the same type declaration with <code>Foo</code> inlined?</p>",
        "id": 197205765,
        "sender_full_name": "varkor",
        "timestamp": 1589231730
    },
    {
        "content": "<p>I appreciate it's pragmatically motivated, but this seems special-cased enough that it's sure to be too limited.</p>",
        "id": 197205857,
        "sender_full_name": "varkor",
        "timestamp": 1589231775
    },
    {
        "content": "<p>A trait to me seems like the best approach, though there are tricky design decisions. Maybe we could write up something detailing the issues with the various approaches?</p>",
        "id": 197205903,
        "sender_full_name": "varkor",
        "timestamp": 1589231811
    },
    {
        "content": "<p>If we decide to use a trait (which I'm not 100% sold on), then perhaps the way that #[must_use] on functions work is by wrapping the result in a type <code>MustUse&lt;T&gt;</code> that impls MustUse and Deref&lt;T&gt;</p>",
        "id": 197206982,
        "sender_full_name": "Asa Zeren",
        "timestamp": 1589232504
    },
    {
        "content": "<p>I can't seem to see an RFC where <code>must_use</code> was added for types, just the one where it was added for functions.</p>\n<p>Particularly, I'd like to see if there was long ago discussion about types other than Result being <code>must_use</code>. And more particularly, a quick ripgrep of just the files i have on this machine shows i've put <code>must_use</code> on at least 675 functions in my own projects, though I don't have all of my projects cloned on to this machine all at once, so it's probably higher than that.</p>",
        "id": 197207071,
        "sender_full_name": "Lokathor",
        "timestamp": 1589232563
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121053\">varkor</span> <a href=\"#narrow/stream/213817-t-lang/topic/MustUse/near/197205857\">said</a>:</p>\n<blockquote>\n<p>I appreciate it's pragmatically motivated, but this seems special-cased enough that it's sure to be too limited.</p>\n</blockquote>\n<p>A few thoughts:</p>\n<ul>\n<li>I see a meaningful difference between a <code>Foo&lt;Result&gt;</code> and a <code>Bar</code> that embeds a <code>Result</code>. The latter is incorporating the result and encapsulating it, the former is, via generics, purposefully agnostic about what sort of data it is ferrying about. There is of course also the pragmatic difference that <code>Bar</code> can readily be tagged <code>#[must_use]</code>, if that makes sense, but <code>Foo</code> cannot.</li>\n<li>That said, what I'm most interested in here is somebody taking the time to organize some of the patterns and examples and gather a bit more data. e.g., if it's too limited, what are some persuasive examples of code where it would fail to trigger in the wild? Similarly, what are some examples where the lint would trigger but arguably shouldn't? Bonus points if they're generic. </li>\n</ul>\n<p>I guess that your crater run likely contains all the relevant data, since I think it is a superset of what I proposed, right?</p>",
        "id": 197208134,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589233291
    },
    {
        "content": "<blockquote>\n<p>I guess that your crater run likely contains all the relevant data, since I think it is a superset of what I proposed, right?</p>\n</blockquote>\n<p>Yes, that's true.</p>",
        "id": 197214293,
        "sender_full_name": "varkor",
        "timestamp": 1589236919
    },
    {
        "content": "<p>Though maybe it was long ago enough that it won't have picked up so many of the async-related cases.</p>",
        "id": 197214396,
        "sender_full_name": "varkor",
        "timestamp": 1589236971
    },
    {
        "content": "<p>I don't know if the parallel is useful here, but there's also been discussion of \"automatic\" <code>[must_use]</code> for functions.  The idea being that a heuristic could catch the vast majority of places where it's be helpful (perhaps using a <code>Freeze</code>-like auto trait).  If functions can sometimes be must-use based on their arguments, it seems plausible that types could also be must-use based on their arguments (if in a rather different way).</p>\n<p>(Especially if there was an opt-out form of must_use so said heuristic could have some, though certainly very very few, false positives.)</p>",
        "id": 197485529,
        "sender_full_name": "scottmcm",
        "timestamp": 1589409109
    },
    {
        "content": "<p>Side note that, early on in Rust, there was a debate about whether we should make <strong>all</strong> values \"must use\", so that any unused result not of type <code>()</code> would be warned</p>",
        "id": 197575678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589471506
    },
    {
        "content": "<p>We settled on the <code>#[must_use]</code> lint, for better or worse...</p>",
        "id": 197575701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589471515
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> is the idea basically to catch things that don't appear to have side-effects and consider them \"must use\"? Sounds tricky to me, but maybe.</p>",
        "id": 197575833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589471558
    },
    {
        "content": "<p>yeah, in particular basically we've recently been applying must_use to \"all\" functions that are something like <code>fn(T, ...) -&gt; T</code> in std, particularly the integer and float inherent methods</p>",
        "id": 197576156,
        "sender_full_name": "simulacrum",
        "timestamp": 1589471690
    },
    {
        "content": "<p>One obvious flag for side effect free functions are <code>const fn</code> without <code>&amp;mut</code> or <code>UnsafeCell</code> arguments</p>",
        "id": 197576519,
        "sender_full_name": "oli",
        "timestamp": 1589471828
    },
    {
        "content": "<p>yeah, something like that</p>",
        "id": 197576735,
        "sender_full_name": "simulacrum",
        "timestamp": 1589471913
    },
    {
        "content": "<p>it's unclear to me that we gain much from avoiding the must_use annotations, though otoh it's kinda similar to Result</p>",
        "id": 197576773,
        "sender_full_name": "simulacrum",
        "timestamp": 1589471929
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/213817-t-lang/topic/MustUse/near/197576519\">said</a>:</p>\n<blockquote>\n<p>One obvious flag for side effect free functions are <code>const fn</code> without <code>&amp;mut</code> or <code>UnsafeCell</code> arguments</p>\n</blockquote>\n<p>However, this isn't 100% fool-proof, since const fns can panic. For example, <code>Result::unwrap</code> should be const once that feature is stable, and it's sometimes called primarily to panic on errors even if the <code>Ok</code> payload isn't relevant.</p>",
        "id": 197578302,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1589472529
    },
    {
        "content": "<p>yeah you get into \"pure\" functions I guess :)</p>",
        "id": 197578745,
        "sender_full_name": "simulacrum",
        "timestamp": 1589472717
    },
    {
        "content": "<p>ugh</p>",
        "id": 197578757,
        "sender_full_name": "oli",
        "timestamp": 1589472720
    },
    {
        "content": "<p>yea, I keep forgetting panicking counts as a side effect</p>",
        "id": 197578915,
        "sender_full_name": "oli",
        "timestamp": 1589472773
    },
    {
        "content": "<p>On <code>unwrap</code>: one could argue that <code>assert_matches!(x, Ok(_));</code> is better as a statement than <code>x.unwrap();</code>, or similar.  (Or that it's weird to care that it's ok without looking at the non-<code>()</code> value anyway.)</p>\n<p>It's not unusual for must_use functions to possibly be able to panic.  For example, <code>split_off</code> can panic but is still <code>must_use</code>.</p>",
        "id": 197588988,
        "sender_full_name": "scottmcm",
        "timestamp": 1589476968
    },
    {
        "content": "<p>I just wanted to point out that this approach to inferring must_use has false positives, I'm not taking any position about how important those are.</p>",
        "id": 197589682,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1589477271
    },
    {
        "content": "<p>(But indeed, <code>split_off</code> and many other functions are different from <code>unwrap</code> in that I've never seen a program call <code>split_off</code> etc. just to get its panic behavior.)</p>",
        "id": 197590256,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1589477513
    },
    {
        "content": "<p>FWIW <a href=\"https://github.com/rust-lang/rfcs/pull/2450\">https://github.com/rust-lang/rfcs/pull/2450</a></p>",
        "id": 197590840,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1589477764
    },
    {
        "content": "<p>(truly, there is nothing new under the sun)</p>",
        "id": 197590853,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1589477775
    }
]