[
    {
        "content": "<p>Are there any situations currently where Rust is sensitive to having whitespace between two tokens, apart from with keywords (e.g. <code>dyn Trait</code>)?</p>",
        "id": 212930494,
        "sender_full_name": "varkor",
        "timestamp": 1602357164
    },
    {
        "content": "<p>There's <code>1&lt;-2</code> vs <code>1&lt; -2</code></p>",
        "id": 212930573,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1602357257
    },
    {
        "content": "<p>That is a good example, but placement syntax is deprecated now. I'm wondering if there are any that aren't.</p>",
        "id": 212930616,
        "sender_full_name": "varkor",
        "timestamp": 1602357354
    },
    {
        "content": "<p><code>r# \"string\"#</code> is invalid, though I'm not sure if that's precisely what I'm looking for.</p>",
        "id": 212930690,
        "sender_full_name": "varkor",
        "timestamp": 1602357440
    },
    {
        "content": "<p><code>1. .g();</code> vs. <code>1..g();</code> ? (where <code>g</code> is both a free function and a method on <code>f64</code>)</p>",
        "id": 212930772,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1602357575
    },
    {
        "content": "<p>That's a neat example, thanks.</p>",
        "id": 212930890,
        "sender_full_name": "varkor",
        "timestamp": 1602357728
    },
    {
        "content": "<p>Wouldn't the increment and decrement operators also be an example?</p>",
        "id": 212932513,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1602360400
    },
    {
        "content": "<p>Rust doesn't have increment and decrement operators.</p>",
        "id": 212932690,
        "sender_full_name": "varkor",
        "timestamp": 1602360710
    },
    {
        "content": "<p>Derp :p I guess the arrow in a function return also counts.</p>",
        "id": 212932822,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1602360920
    },
    {
        "content": "<p>I don't think that works either, because there's no postfix <code>-</code> operator.</p>",
        "id": 212932880,
        "sender_full_name": "varkor",
        "timestamp": 1602360989
    },
    {
        "content": "<p>i suppose you probably already thought of <code>&amp;&amp;</code> vs <code>&amp; &amp;</code>, and <code>||</code> vs <code>| |</code></p>",
        "id": 212932885,
        "sender_full_name": "Lokathor",
        "timestamp": 1602361005
    },
    {
        "content": "<p>Can you think of an example where removing the space leads to a different (valid) interpretation? I did try, but didn't come up with one.</p>",
        "id": 212933222,
        "sender_full_name": "varkor",
        "timestamp": 1602361577
    },
    {
        "content": "<p>Technically <code>true &amp;&amp; true</code> is different to <code>true &amp; &amp;true</code>, but they evaluate to the same value, so it's not as convincing.</p>",
        "id": 212933229,
        "sender_full_name": "varkor",
        "timestamp": 1602361603
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> You can overload <code>&amp;</code>, though you can't currently overload <code>&amp;&amp;</code>.</p>",
        "id": 212939602,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602372374
    },
    {
        "content": "<p>I don't think it'd come up in practice.</p>",
        "id": 212939615,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602372410
    },
    {
        "content": "<p>I think the example with floats vs range syntax seems most likely.</p>",
        "id": 212939670,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602372501
    },
    {
        "content": "<p>Doesn't actually work, though, because <code>1.</code> is an ambiguous float type so you can't call a method on it without disambiguating first.</p>",
        "id": 212939733,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602372613
    },
    {
        "content": "<p>Oh, hey. Yes, I can absolutely write an expression that has a different meaning depending on spacing. :)</p>",
        "id": 212939853,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602372851
    },
    {
        "content": "<p>Awww. Turns out that Rust doesn't like doc comments in the middle of expressions. Otherwise, this would work:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"sd\">///</span>\n<span class=\"w\">        </span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"c1\">//</span>\n<span class=\"w\">        </span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 212939912,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602372984
    },
    {
        "content": "<p>OK, this one I'm not sure why it doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"c1\">//**/</span>\n<span class=\"w\">        </span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"cm\">/**/</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>rustc says:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>error: expected expression, found `+`\n --&gt; src/main.rs:5:9\n  |\n5 |         +2;\n  |         ^ expected expression\n</code></pre></div>",
        "id": 212939929,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602373078
    },
    {
        "content": "<p>There, got one:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"c1\">//**/</span>\n<span class=\"w\">        </span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"cm\">/**/</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"{} {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 212939972,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602373130
    },
    {
        "content": "<p>Output: <code>0 -1</code></p>",
        "id": 212939976,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602373140
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/whitespace.20sensitivity.20with.20symbols/near/212939733\">said</a>:</p>\n<blockquote>\n<p>Doesn't actually work, though, because <code>1.</code> is an ambiguous float type so you can't call a method on it without disambiguating first.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">g</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">g</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">g</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">9</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">1.</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">g</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"n\">g</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 212940997,
        "sender_full_name": "varkor",
        "timestamp": 1602375182
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/whitespace.20sensitivity.20with.20symbols/near/212939972\">said</a>:</p>\n<blockquote>\n<p>There, got one:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"c1\">//**/</span>\n<span class=\"w\">        </span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"cm\">/**/</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"{} {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n</blockquote>\n<p>That's another fun one!</p>",
        "id": 212941055,
        "sender_full_name": "varkor",
        "timestamp": 1602375249
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/whitespace.20sensitivity.20with.20symbols/near/212939602\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"121053\">varkor</span> You can overload <code>&amp;</code>, though you can't currently overload <code>&amp;&amp;</code>.</p>\n</blockquote>\n<p>Yeah. I think it may be possible to create an ambiguity with <code>&amp;&amp;</code> overloading too.</p>",
        "id": 212941078,
        "sender_full_name": "varkor",
        "timestamp": 1602375326
    },
    {
        "content": "<p>I've run into <code>x.0.0</code> vs <code>x.0 .0</code> before, although the former is unfortunately parsed as <code>x. 0.0</code> which I think isn't ever valid because a float literal can't be a field name</p>",
        "id": 212954227,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602402804
    },
    {
        "content": "<p>And the elephant in the room, macros</p>",
        "id": 212960520,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1602413603
    },
    {
        "content": "<p>Chained tuple index expressions are no longer treated as floats as of 1.46.</p>",
        "id": 212967654,
        "sender_full_name": "Eric Huss",
        "timestamp": 1602426769
    }
]