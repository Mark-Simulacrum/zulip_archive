[
    {
        "content": "<p>I think right now this is straddling a line between two things, and it would be better if we decided specifically which we wanted:</p>\n<ol>\n<li>The complement to <code>r#ident</code>, where when we reserve-and-stabilize <code>yeet</code> in Rust 1337, you can use that feature via <code>r#$yeet</code> on any(*) edition, for which most of the questions are about a tolerable syntax.</li>\n<li>An exploratory option for having some things on stable that in some ways \"aren't done yet\", for which most of the questions are about stability guarantees.</li>\n</ol>\n<p>But I don't think that conversation would go well on github, so I wanted to start a topic here.</p>",
        "id": 195924937,
        "sender_full_name": "scottmcm",
        "timestamp": 1588298908
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> of course</p>",
        "id": 195924943,
        "sender_full_name": "scottmcm",
        "timestamp": 1588298924
    },
    {
        "content": "<p>I have spoken to approximately one additional person about the RFC outside of the people who were at today's meeting and spoke on zulip and they were, I would describe it as \"violently positive\" about the idea of being able to get features into usage without worrying about syntax details.</p>",
        "id": 195925125,
        "sender_full_name": "Lokathor",
        "timestamp": 1588299155
    },
    {
        "content": "<p>I would agree with them and say that \"get features into usage earlier\" is my main vote, and then \"use new stuff even in previous editions in some ugly way\" is just an accidental side benefit.</p>",
        "id": 195925146,
        "sender_full_name": "Lokathor",
        "timestamp": 1588299207
    },
    {
        "content": "<p>The thing I worry about is that syntax choices being hard is a lang team process social problem, and needn't actually be the long pole for most things.  Getting the semantics into a form that we're willing to commit to <em>forever</em> is, in many ways, far scarier to me.  For example, <code>r#$default</code> doesn't solve any of the problems that currently exist with specialization, and it would be easy for us to have stabilized <code>r#$catch</code> <a href=\"https://github.com/rust-lang/rust/issues/41414\" title=\"https://github.com/rust-lang/rust/issues/41414\">without success-wrapping back in 2017</a>, and it would have been rather suboptimal to be stuck with that forever <a href=\"https://github.com/rust-lang/rust/issues/70941\" title=\"https://github.com/rust-lang/rust/issues/70941\">when the team now thinks that's wrong</a>.</p>",
        "id": 195925905,
        "sender_full_name": "scottmcm",
        "timestamp": 1588300070
    },
    {
        "content": "<p>So it's not obvious to me that allowing not-done things on stable is any better of an idea now than it was when the decision was made way back when that feature flags are nightly-only.</p>",
        "id": 195926003,
        "sender_full_name": "scottmcm",
        "timestamp": 1588300173
    },
    {
        "content": "<p>(well gosh, now he tells me :P )<br>\nBut yeah, that's why I tried to be clear that stabilizing a feature via experimental keyword is _possible_ on a case by case basis.</p>\n<p>Heck, plenty of people don't even want the syntax arguments to hold up things getting into nightly.</p>",
        "id": 195926078,
        "sender_full_name": "Lokathor",
        "timestamp": 1588300251
    },
    {
        "content": "<p>Hmm, that response makes me notice that I did a bad job in the OP for this topic, I think.  I'm totally good with <code>(1)</code> also being \"and this is used in nightly for placeholder keywords that aren't yet stable keywords in any edition, and may never be stable\", or a 3rd option that also hits that kind of hybrid.</p>",
        "id": 195926215,
        "sender_full_name": "scottmcm",
        "timestamp": 1588300413
    },
    {
        "content": "<p>(As a less-hacky option than <code>do catch</code> and friends)</p>",
        "id": 195926242,
        "sender_full_name": "scottmcm",
        "timestamp": 1588300440
    },
    {
        "content": "<p>It's clearly true that syntax discussions are currently _painful_.  But having non-final syntax doesn't get us out of those holes; we still need to find a way to have them to decide the final syntax without burning out valuable team members.  And as burnout-enducing as await was, it was nowhere close to the long pole in the work to stabilize the feature, near as I could tell.</p>",
        "id": 195926466,
        "sender_full_name": "scottmcm",
        "timestamp": 1588300687
    },
    {
        "content": "<p>I wholeheartedly agree with not letting syntax arguments block getting things in nightly.</p>",
        "id": 195926491,
        "sender_full_name": "scottmcm",
        "timestamp": 1588300782
    },
    {
        "content": "<p>It's also worth mentioning that if we had stabilized <code>r#$catch</code> without Ok-wrapping, we could have put surface syntax over that with Ok-wrapping.</p>",
        "id": 195927042,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588301569
    },
    {
        "content": "<p>I agree; there's nothing that would have stopped us from <em>also</em> having <code>r#$try</code> that does have it.</p>\n<p>It just seems sad to have both versions stable forever.</p>",
        "id": 195927229,
        "sender_full_name": "scottmcm",
        "timestamp": 1588301846
    },
    {
        "content": "<p>(Or really surprising if <code>r#$try</code> doesn't ok-wrap but <code>try</code> does.)</p>",
        "id": 195927297,
        "sender_full_name": "scottmcm",
        "timestamp": 1588301935
    },
    {
        "content": "<p>Yeah, not going to argue with that.</p>",
        "id": 195928379,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588303354
    },
    {
        "content": "<p>I left the meeting on the fence. I really like the idea of trying to change our process so that we can separate out the idea of syntax, but I'd like to talk throw in more detail some examples of how we expect it to play out.</p>",
        "id": 195944225,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588325191
    },
    {
        "content": "<p>I mentioned that Ember has a similar process -- I want to verify that =) and maybe share some details from how it works there.</p>",
        "id": 195944243,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588325230
    },
    {
        "content": "<p>I think maybe I was wrong to try and link this with <code>&amp;raw</code>, in the sense  that this discussion is perhaps bound to be longer and more thoughtful, and we might want to move on <code>&amp;raw</code> faster and just consider the possibility that this syntax will get deprecated.</p>",
        "id": 195944320,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588325288
    },
    {
        "content": "<p>Or at least I think we shuldn't \"deploy\" a \"preview keyword\" without some guidance and sense of what we expect the surface syntax to ultimately look like.</p>",
        "id": 195944364,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588325354
    },
    {
        "content": "<p>I think btw that <code>preview::raw_borrow</code> captures better the spirit than <code>experiment::raw_borrow</code> =)</p>",
        "id": 195944376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588325369
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> seems to me like with <code>try</code>, there were still open question about <em>semantics</em> even back then, so it basically would not have been eligible for this process</p>",
        "id": 195946560,
        "sender_full_name": "RalfJ",
        "timestamp": 1588327240
    },
    {
        "content": "<p>in contrast, with <code>&amp;raw</code> pretty much the only open question is syntax. that's what this new process is for.</p>",
        "id": 195946573,
        "sender_full_name": "RalfJ",
        "timestamp": 1588327256
    },
    {
        "content": "<p>but maybe that's just not common enough to warrant a process?</p>",
        "id": 195946584,
        "sender_full_name": "RalfJ",
        "timestamp": 1588327264
    },
    {
        "content": "<p>I expect it to be common.</p>",
        "id": 195982354,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588352317
    },
    {
        "content": "<p>The \"return an error\" keyword is in the same boat.</p>",
        "id": 195982391,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588352342
    },
    {
        "content": "<p>(or, it will be, as soon as we finish working on the Try trait)</p>",
        "id": 195982484,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588352388
    },
    {
        "content": "<p>To me, \"return an error\" is the \"we picked something and want a way to use it before an edition lets us reserve it\", though.</p>\n<p>Anything we can do takes 6-12 weeks to get to stable.  If we really wanted to, as lang we could just make a decision in a few weeks and be <em>done</em>.  Then we say \"look, it's <code>fhqwhgads error;</code>\", and that's it.  To me, if all the hard parts about <code>Try</code> are done -- which I suspect will be more than a few weeks to prove out -- and we're <em>de facto</em> stabilizing it, we should just stabilize it <em>de jure</em>.</p>\n<p>I think that if lang can't make a decision on something that, while not unimportant, <strong>is</strong> just a bikeshed in 6 weeks, we should fix the lang process, not add a new kinda-not-stable-but-still-stable feature channel.  We have things where we're deadlocked on much harder questions about whether something is needed, but keyword choices really doesn't feel like one of those fundamental conflicts.</p>\n<p>(Unless there's some material facts of which I'm unaware that have changed since the decision was made that experimentation happens in nightly.  And none of what I say here is meant to imply that we couldn't have both <code>r#$yeet</code> and <code>r#$fhqwhgads</code> on nightly for people to try both, if people decided that would be valuable.)</p>",
        "id": 195989360,
        "sender_full_name": "scottmcm",
        "timestamp": 1588355754
    },
    {
        "content": "<p>dunno, I feel like picking good syntax is actually genuinely hard, so I dont think \"it took us 3 months to find good syntax\" is necessarily a process failure</p>",
        "id": 196042584,
        "sender_full_name": "RalfJ",
        "timestamp": 1588411310
    }
]