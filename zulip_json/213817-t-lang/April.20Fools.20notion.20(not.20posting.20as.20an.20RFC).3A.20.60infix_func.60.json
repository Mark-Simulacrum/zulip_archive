[
    {
        "content": "<p>After the thread on lexical spaces available for future language extensions, which observed that the backquote is unused, I briefly entertained the idea of an April Fools RFC, proposing the syntax <code> expr `two_argument_function` expr </code> for bespoke infix operators, in the style of Haskell.</p>",
        "id": 232837449,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617318364
    },
    {
        "content": "<p>I decided not to post it, for two reasons:</p>\n<ul>\n<li>People might actually like the proposal, and might be disappointed that it wasn't serious.</li>\n<li>Haskell actually uses that syntax, and I didn't want to come across as poking fun at another language. (I actually think that's a cool feature of Haskell, but that might not come across in an RFC context.)</li>\n</ul>",
        "id": 232837541,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617318408
    },
    {
        "content": "<p>Seemed worth mentioning, though, both for amusement value and as an example of \"major features from other languages that we don't have and probably won't\".</p>",
        "id": 232837623,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617318467
    },
    {
        "content": "<p>I recall this being floated around as a requested feature by maths people.</p>",
        "id": 232838430,
        "sender_full_name": "nagisa",
        "timestamp": 1617318963
    },
    {
        "content": "<p>both as this exact proposal as well as some other form of custom operators.</p>",
        "id": 232838468,
        "sender_full_name": "nagisa",
        "timestamp": 1617318985
    },
    {
        "content": "<p>yeah i would like this lol. but, i also get that it would probably be less than ideal in a lot of cases</p>",
        "id": 232838651,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617319148
    },
    {
        "content": "<p>Yeah, I can see this being really nice for things like <code>a `dot` b</code>.</p>",
        "id": 232840478,
        "sender_full_name": "scottmcm",
        "timestamp": 1617320440
    },
    {
        "content": "<p>I think the big difference between Rust and Haskell for it is that we can already do <code>a.dot(b)</code>, which might be close enough to make an additional way less helpful.</p>",
        "id": 232840512,
        "sender_full_name": "scottmcm",
        "timestamp": 1617320489
    },
    {
        "content": "<p>Scala allows omitting the dot and the parentheses for 0-ary and 1-ary method calls, so <code>a dot b</code> would be equivalent to <code>a.dot(b)</code>: <a href=\"https://docs.scala-lang.org/style/method-invocation.html#symbolic-methodsoperators\">https://docs.scala-lang.org/style/method-invocation.html#symbolic-methodsoperators</a></p>\n<p>It is only recommended for pure operator-like operations though because the syntax can easily lead to confusion otherwise...</p>",
        "id": 232874811,
        "sender_full_name": "NeoRaider",
        "timestamp": 1617352327
    },
    {
        "content": "<p>With the prefix reservation project we could also experiment with <code>a op#function_name b</code></p>",
        "id": 232876965,
        "sender_full_name": "oli",
        "timestamp": 1617354039
    },
    {
        "content": "<p>Huh, that's fascinating.</p>",
        "id": 232877048,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617354084
    },
    {
        "content": "<p>Yeah, that would work.</p>",
        "id": 232877053,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617354090
    },
    {
        "content": "<p>Oh no. Scope creep.</p>",
        "id": 232878301,
        "sender_full_name": "isHavvy",
        "timestamp": 1617355062
    },
    {
        "content": "<p>Who needs <code>k#keyword</code> when you have <code>keyword#</code></p>",
        "id": 232878391,
        "sender_full_name": "isHavvy",
        "timestamp": 1617355113
    },
    {
        "content": "<p>perhaps it should be <code>a op# function_name b</code> then?</p>",
        "id": 232878632,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617355299
    },
    {
        "content": "<p><code>a op#(function_name) b</code> using <code>pub(crate)</code> as precedence. <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 232878773,
        "sender_full_name": "isHavvy",
        "timestamp": 1617355430
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296643\">isHavvy</span> <a href=\"#narrow/stream/213817-t-lang/topic/April.20Fools.20notion.20.28not.20posting.20as.20an.20RFC.29.3A.20.60infix_func.60/near/232878391\">said</a>:</p>\n<blockquote>\n<p>Who needs <code>k#keyword</code> when you have <code>keyword#</code></p>\n</blockquote>\n<p>Reminds me a little of <a href=\"https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/magic_hash.html\">https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/magic_hash.html</a> .</p>",
        "id": 232878924,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1617355538
    },
    {
        "content": "<p>This currently compiles on nightly:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(fn_traits)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(unboxed_closures)]</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Apply</span>: <span class=\"nb\">Sized</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">apply</span><span class=\"o\">&lt;</span><span class=\"n\">F</span>: <span class=\"nb\">FnOnce</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">call_once</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Apply</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ops</span>::<span class=\"n\">Add</span>::<span class=\"n\">add</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">).</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"n\">add</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">dbg!</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 232985935,
        "sender_full_name": "Charles Lew",
        "timestamp": 1617431868
    },
    {
        "content": "<p>oh yeah, rewrite all your arithmetic in RPN with this one weird trick</p>",
        "id": 232989303,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617435981
    }
]