[
    {
        "content": "<p>I was looking at <a href=\"https://github.com/rust-lang/rust/issues/86027\">https://github.com/rust-lang/rust/issues/86027</a> and in particular <a href=\"https://github.com/rust-lang/rust/blob/master/library/std/src/rt.rs#L22-L53\">these functions</a>. Now, the thing is that these functions must satisfy certain constraints to be sound (e.g. not panic), but this is not at all reflected anyway with <code>unsafe</code>, which surprised me somewhat.</p>\n<p>I then realised that we don't really have a way in the language to signal this â€“ do we? <code>unsafe fn</code> only signals that the caller must maintain some sort of invariants imposed by the callee; And here we kind of want the reverse.</p>\n<p>cc <span class=\"user-mention\" data-user-id=\"310399\">@Mara</span></p>",
        "id": 241645697,
        "sender_full_name": "nagisa",
        "timestamp": 1622912324
    },
    {
        "content": "<p>In theory, they could be declared as an impl of some unsafe trait.</p>",
        "id": 241645817,
        "sender_full_name": "simulacrum",
        "timestamp": 1622912481
    },
    {
        "content": "<p>This somewhat reminds me of the desire to declare that certain attributes are \"unsafe\" (like <code>no_mangle</code>) (been trying to find the issue for this for a while)</p>",
        "id": 241645822,
        "sender_full_name": "nagisa",
        "timestamp": 1622912491
    },
    {
        "content": "<p>yeah we have <code>unsafe impl</code> for that i guess</p>",
        "id": 241645844,
        "sender_full_name": "Mara",
        "timestamp": 1622912520
    },
    {
        "content": "<p>but things get a bit weird when we get to functions at the edge of rust/std, like <code>lang = start</code> etc.</p>",
        "id": 241645889,
        "sender_full_name": "Mara",
        "timestamp": 1622912541
    },
    {
        "content": "<p>but practically, a dependence on safe code having some particular implementation is not uncommon</p>",
        "id": 241645895,
        "sender_full_name": "simulacrum",
        "timestamp": 1622912554
    },
    {
        "content": "<p><code>lang</code> items are pretty much just 'trait impl's, in that they are already defined (incl. requirements) and only fill in the implementation of something.</p>",
        "id": 241646221,
        "sender_full_name": "Mara",
        "timestamp": 1622912946
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> how's this different from unsafe code using a safely implemented data structure and relying on its functional correctness?<br>\nwe dont expact that data structure to have any special marker either, do we?</p>",
        "id": 241646628,
        "sender_full_name": "RalfJ",
        "timestamp": 1622913542
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/213817-t-lang/topic/Function.20implementations.20that.20.20need.20to.20satisfy.20invariants/near/241645822\">said</a>:</p>\n<blockquote>\n<p>This somewhat reminds me of the desire to declare that certain attributes are \"unsafe\" (like <code>no_mangle</code>) (been trying to find the issue for this for a while)</p>\n</blockquote>\n<p>I dont see the relationship; <code>no_mangle</code> is unsafe in the sense that it can cause UB...<br>\nyour functions are \"super-safe\" in that they guarantee more than the bare minimum \"will not cause UB and return well-formed results from well-formed inputs\"</p>",
        "id": 241646641,
        "sender_full_name": "RalfJ",
        "timestamp": 1622913582
    },
    {
        "content": "<p><code>#[lang]</code> in this instance imposes requirements on the function that's annotated with the attribute, but this fact is not signaled in any way. I'm not sure what you're trying to say with the datastructure analogy.</p>",
        "id": 241646796,
        "sender_full_name": "nagisa",
        "timestamp": 1622913744
    },
    {
        "content": "<p>Oh, sorry, I might have mixed this up with another very similar recent discussion</p>",
        "id": 241647066,
        "sender_full_name": "RalfJ",
        "timestamp": 1622914118
    },
    {
        "content": "<blockquote>\n<p>lang items are pretty much just 'trait impl's, in that they are already defined (incl. requirements) and only fill in the implementation of something.</p>\n</blockquote>\n<p>could perhaps replace the start lang item with <code>unsafe impl Rust { fn start() -&gt; isize { ...</code>, equivalently magic but expresses the existence of an implementor-upheld safety invariant?</p>",
        "id": 241647210,
        "sender_full_name": "bstrie",
        "timestamp": 1622914333
    },
    {
        "content": "<p>I've had to have this for interrupt handlers on the GBA: the function pointer must point to an <code>a32</code> coded function, but rust doesn't have a way to enforce that in the type system.</p>",
        "id": 241660503,
        "sender_full_name": "Lokathor",
        "timestamp": 1622934638
    }
]