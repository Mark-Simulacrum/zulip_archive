[
    {
        "content": "<p>What do you think of extending <code>integer as *const T</code> and <code>integer as *mut T</code> casts to <code>T: ?Sized + Thin</code>? Currently they’re only allowed for <code>T: Sized</code>, which excludes <code>extern</code> types.</p>",
        "id": 271735277,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1644741527
    },
    {
        "content": "<p>Should this proposal get its own RFC?</p>",
        "id": 271735284,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1644741535
    },
    {
        "content": "<p>This is mostly in support <a href=\"https://github.com/rust-lang/rust/issues/93959\">https://github.com/rust-lang/rust/issues/93959</a>, where a similar change for <code>ptr::null</code> and friends is in an accepted RFC but not implemented yet</p>",
        "id": 271735290,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1644741548
    },
    {
        "content": "<p>Hmm, the alternative to enabling <code>integer as *const T</code> would be to use <code>&lt;*const T&gt;::from_raw_parts(integer as _, ())</code>, I guess?</p>",
        "id": 271735652,
        "sender_full_name": "scottmcm",
        "timestamp": 1644742135
    },
    {
        "content": "<p>On one hand it feels totally reasonable to allow the <code>as</code>, but on the other I don't like <code>as</code> and would prefer more things went via functions.</p>",
        "id": 271735796,
        "sender_full_name": "scottmcm",
        "timestamp": 1644742410
    },
    {
        "content": "<p>Maybe instead of the <code>as</code> we change <a href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.from_bits\"><code>from_bits</code></a> to have <code>where T: Thin</code> instead of <code>where T: Sized</code>?</p>\n<p>Then it's be <code>&lt;*const T&gt;::from_bits(integer)</code>, assuming <code>integer</code> is <code>usize</code> already.  (But I'm perfectly happy to require people to give us a <code>usize</code> instead of silently allowing to cast an <code>i128</code> or something.  And it just takes an <code>as _</code> if they don't care.)</p>",
        "id": 271735902,
        "sender_full_name": "scottmcm",
        "timestamp": 1644742577
    },
    {
        "content": "<p>Oh I didn’t think of <code>&lt;*const T&gt;::from_raw_parts(int, ())</code>, that’s a good idea! It should be enough for <code>null</code>, <code>null_mut</code>, and <code>dangling</code></p>",
        "id": 271758722,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1644777055
    },
    {
        "content": "<p>I think it makes sense for <code>from_bits</code> too. <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> Do you want me to extend it in the same PR?</p>",
        "id": 271758740,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1644777121
    },
    {
        "content": "<p>Might as well, I guess?  It's unstable, after all.  And then <code>null</code> is just <code>Self::from_bits(0)</code> and <code>dangling</code> is <code>Self::from_bits(align_of::&lt;T&gt;())</code>.</p>\n<p>(Hmm, I guess I never added to/from bits for NonNull.  I'll go do that.)</p>",
        "id": 271760423,
        "sender_full_name": "scottmcm",
        "timestamp": 1644779454
    },
    {
        "content": "<p><code>NonNull::from_bits</code> needs to return <code>Option</code>, unless you make it take <code>NonZeroUsize</code>?</p>",
        "id": 271761338,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1644780827
    },
    {
        "content": "<p><code>dangling</code> is tricky. Let’s not get into <code>align_of</code> for extern types: <a href=\"https://github.com/rust-lang/rust/issues/93959#issuecomment-1038348610\">https://github.com/rust-lang/rust/issues/93959#issuecomment-1038348610</a></p>",
        "id": 271761386,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1644780857
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219747\">Simon Sapin</span> <a href=\"#narrow/stream/213817-t-lang/topic/.600.20as.20*const.20Extern.60/near/271761338\">said</a>:</p>\n<blockquote>\n<p><code>NonNull::from_bits</code> needs to return <code>Option</code>, unless you make it take <code>NonZeroUsize</code>?</p>\n</blockquote>\n<p>I was thinking <code>NonZeroUsize</code>, yeah.  <code>to_bits</code> might as well return one -- otherwise it's losing information at the type level -- and thus <code>from_bits</code> should probably take one too.</p>",
        "id": 271761716,
        "sender_full_name": "scottmcm",
        "timestamp": 1644781330
    },
    {
        "content": "<p>Very good point about <code>dangling</code>.</p>",
        "id": 271761789,
        "sender_full_name": "scottmcm",
        "timestamp": 1644781445
    },
    {
        "content": "<p>More implementation trickiness with <code>Sized: Thin</code> <a href=\"#narrow/stream/131828-t-compiler/topic/.60T.3A.20Sized.60.20doesn.E2.80.99t.20imply.20.60T.3A.20Pointee.3CMetadata.20.3D.20.28.29.3E.60/near/271761557\">https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/.60T.3A.20Sized.60.20doesn.E2.80.99t.20imply.20.60T.3A.20Pointee.3CMetadata.20.3D.20.28.29.3E.60/near/271761557</a></p>",
        "id": 271761814,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1644781539
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby [she/her]</span> has marked this topic as unresolved.</p>",
        "id": 271883569,
        "sender_full_name": "Notification Bot",
        "timestamp": 1644870413
    },
    {
        "content": "<p>oops, misclick</p>",
        "id": 271883589,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1644870423
    }
]