[
    {
        "content": "<p>followup to today's design meeting on Lint Policy</p>",
        "id": 277184100,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648663414
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> and <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> both said that we'd probably benefit from further brainstorming (both async and sync). That's what this topic is for</p>",
        "id": 277184193,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648663448
    },
    {
        "content": "<p>also thanks <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> for preparing that doc, it was really good :)</p>",
        "id": 277184284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648663495
    },
    {
        "content": "<p>\"thought provoking\"</p>",
        "id": 277184321,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648663513
    },
    {
        "content": "<p>I guess the first question posed is: What are the goals of lang team activity here? (The doc tried to lay out what the goals are for Rust's lint system itself, but I'm now realizing that is slightly distinct from what <em>our team's goals</em> are in having this discussion.</p>",
        "id": 277184349,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648663530
    },
    {
        "content": "<p>interesting question</p>",
        "id": 277184389,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648663553
    },
    {
        "content": "<p>I was going to say that I wanted to start a hackmd to categories goals of lints</p>",
        "id": 277184405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648663561
    },
    {
        "content": "<p>but I think your question is good</p>",
        "id": 277184452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648663566
    },
    {
        "content": "<p>My doc was written with a goal of \"lets reduce lang team burden here.\"</p>",
        "id": 277184488,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648663585
    },
    {
        "content": "<p>and I think most people were <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> on that. :)</p>",
        "id": 277184512,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648663593
    },
    {
        "content": "<p>my overriding goal is to have clearer standards for approving lints and deciding how to handle the various kinds of situations that arise</p>",
        "id": 277184531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648663603
    },
    {
        "content": "<p>(but then there was push back on how to get there. <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> )</p>",
        "id": 277184550,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648663612
    },
    {
        "content": "<p>I was very frustrated around the edition with \"every lint is its own special snowflake\"</p>",
        "id": 277184559,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648663618
    },
    {
        "content": "<p>I think it would be good for us to have fewer \"progressions\" for things and a more standard idea for \"when should this be deny-by-default\" (for example) vs \"hard error\"</p>",
        "id": 277184630,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648663661
    },
    {
        "content": "<p>this in turn I think leads to lower team burden</p>",
        "id": 277184658,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648663673
    },
    {
        "content": "<p>I find it interesting that people noted that Clippy doesn't have sufficient reach. I know <em>I</em> don't have clippy turned on by default, but I've always assumed that I was an <em>exception</em> on that front.</p>",
        "id": 277184662,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648663675
    },
    {
        "content": "<p>It occurs to me that the rust survey may help answer that more definitively</p>",
        "id": 277184741,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648663695
    },
    {
        "content": "<p>(and the fact that I saw myself as an exception there is probably reflective of bias in whom I hang out with.)</p>",
        "id": 277184745,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648663696
    },
    {
        "content": "<p>but my take on clippy is not so much about <em>Reach</em> as it is-- if I were designing this system from scratch, is clippy what I would do?</p>",
        "id": 277184766,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648663714
    },
    {
        "content": "<p>(I don't think so)</p>",
        "id": 277184770,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648663716
    },
    {
        "content": "<p>that is, I don't think I would have a separate <code>cargo clippy</code> command instead of having categories in rustc</p>",
        "id": 277184789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648663727
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/lint.20brainstorming/near/277184630\">said</a>:</p>\n<blockquote>\n<p>I think it would be good for us to have fewer \"progressions\" for things and a more standard idea for \"when should this be deny-by-default\" (for example) vs \"hard error\"</p>\n</blockquote>\n<p>what do you mean by \"fewer progressions\" ? like, fewer states, in terms of the arc of shifting from \"warn-by-default\" to \"deny-by-default\" etc?</p>",
        "id": 277184807,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648663736
    },
    {
        "content": "<p>I <em>do</em> think having a separate repo and set of people who focuson lints is great</p>",
        "id": 277184823,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648663743
    },
    {
        "content": "<p>and that the work that has gone into clippy is very important</p>",
        "id": 277184833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648663751
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/213817-t-lang/topic/lint.20brainstorming/near/277184807\">said</a>:</p>\n<blockquote>\n<p>what do you mean by \"fewer progressions\" ? like, fewer states, in terms of the arc of shifting from \"warn-by-default\" to \"deny-by-default\" etc?</p>\n</blockquote>\n<p>what I mean is that it always felt like we were starting from a \"blank slate\" in deciding how to handle each case</p>",
        "id": 277185031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648663833
    },
    {
        "content": "<p>versus picking from a fixed menu</p>",
        "id": 277185038,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648663837
    },
    {
        "content": "<p>ah okay</p>",
        "id": 277185056,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648663846
    },
    {
        "content": "<p>FWIW, I also never run clippy myself.  It's possible it's gotten better since last I tried it, though -- it's been quite a while.</p>",
        "id": 277185072,
        "sender_full_name": "scottmcm",
        "timestamp": 1648663852
    },
    {
        "content": "<p>historically I have been annoyed about things like the \"unnecessary parens\" lint (uh, hello, I think I know where parens are required, I chose to put that there...) but I've been trying to get over myself lately ;)</p>",
        "id": 277185144,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648663888
    },
    {
        "content": "<p>and running clippy on some projects (in CI/CD no less)</p>",
        "id": 277185171,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648663906
    },
    {
        "content": "<p>yes. Like I said, the whole doc was a trojan horse</p>",
        "id": 277185180,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648663909
    },
    {
        "content": "<p>but you all left my present outside the castle walls.</p>",
        "id": 277185197,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648663917
    },
    {
        "content": "<p>it's been quite nice</p>",
        "id": 277185202,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648663919
    },
    {
        "content": "<p>(or catapulted it back at me)</p>",
        "id": 277185210,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648663923
    },
    {
        "content": "<p><a href=\"https://hackmd.io/eSo424-6SW-iXXfGZ2yVDQ\">https://hackmd.io/eSo424-6SW-iXXfGZ2yVDQ</a></p>",
        "id": 277185343,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648663982
    },
    {
        "content": "<p>FWIW I'd be happy to see some lints delegated to the style team, once we charter the style team.</p>",
        "id": 277185421,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648664030
    },
    {
        "content": "<p>e.g. any new lints in the family of \"how to name/capitalize things\".</p>",
        "id": 277185479,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648664044
    },
    {
        "content": "<p>I <em>absolutely</em> type <code>if (foo) {</code> regularly.  But I think it's overall worth telling people to just fix that -- especially since there's a nice structured suggestion that's always right.  I also regularly type <code>struct Foo { x: i32 };</code>, which even blocks my unit test run, but I don't mind that one either -- it's also a trivial fix, and doing it now is fine.</p>",
        "id": 277185488,
        "sender_full_name": "scottmcm",
        "timestamp": 1648664048
    },
    {
        "content": "<p>what I (used to) type a lot would be</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">if</span><span class=\"p\">.(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">SomethingComplex</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">SomethingElseComplex</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">SomethingElse</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 277185578,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648664102
    },
    {
        "content": "<p>I've kind of given up on it</p>",
        "id": 277185586,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648664106
    },
    {
        "content": "<p>Out of curiosity, was the motivation because your editor wasn't indenting \"properly\" otherwise, and adding the parens tricked the editor into lining things up?</p>",
        "id": 277185635,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648664145
    },
    {
        "content": "<p>A big part of this is turnaround time, I think.</p>\n<p>If it comes back in under, say, 2 seconds saying \"hey, you forgot this\", it's fine to just have people fix it right away.  And it's often even faster than that, for stuff that doesn't need type information and thus the editor can typically prompt for it even without something as complex as R-A.</p>",
        "id": 277185733,
        "sender_full_name": "scottmcm",
        "timestamp": 1648664179
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/213817-t-lang/topic/lint.20brainstorming/near/277185635\">said</a>:</p>\n<blockquote>\n<p>Out of curiosity, was the motivation because your editor wasn't indenting \"properly\" otherwise, and adding the parens tricked the editor into lining things up??</p>\n</blockquote>\n<p>I don't remember</p>",
        "id": 277185748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648664189
    },
    {
        "content": "<p>I just like things broken out onto lines</p>",
        "id": 277185754,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648664194
    },
    {
        "content": "<p>and it looks funny to me to not end a line in a paren, I think</p>",
        "id": 277185760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648664200
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/lint.20brainstorming/near/277185343\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://hackmd.io/eSo424-6SW-iXXfGZ2yVDQ\">https://hackmd.io/eSo424-6SW-iXXfGZ2yVDQ</a></p>\n</blockquote>\n<p>I'm brainstorming on goals here</p>",
        "id": 277185821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648664232
    },
    {
        "content": "<p>I dropped a note like this in the doc, but on <code>-Dwarnings</code>, I think part of the problem is that we do have occasional places where real problems are still warnings.</p>\n<p>I'd like there to be <em>more</em> deny-by-default lints for suspicious cases, even if convention-based.</p>\n<p>As one possible example, any unreachable match arm <em>that creates a binding that doesn't start with <code>_</code></em>, or a match with <em>multiple catch-all arms</em>, or something like that.  An unreachable <code>_ =&gt; ...</code> arm is often fine.  But an unreachable <code>Wrapping(val) =&gt;</code> is really sketchy, but not a deny today.</p>",
        "id": 277186830,
        "sender_full_name": "scottmcm",
        "timestamp": 1648664677
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust-clippy\">https://github.com/rust-lang/rust-clippy</a></p>",
        "id": 277186848,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648664687
    },
    {
        "content": "<p>gotta remember to compare against that</p>",
        "id": 277186861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648664692
    },
    {
        "content": "<blockquote>\n<p>I don't think I would have a separate <code>cargo clippy</code> command</p>\n</blockquote>\n<p>I always assumed that clippy came into being because the process of adding lints to rustc was too onerous. In my mind, it's the same as how <code>cargo dylint</code> came around — too onerous / impossible to create crate-specific lints.</p>",
        "id": 277197721,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1648670368
    },
    {
        "content": "<p>A recent trainee asked \"why does the compiler warn about unidiomatic capitalization instead of Clippy\" and I didn't have a <em>great</em> answer. I handwaved it with \"rustc lints should have low false positive, clippy lints may be a bit looser\"</p>",
        "id": 277197904,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1648670445
    },
    {
        "content": "<blockquote>\n<p>what I (used to) type a lot would be</p>\n</blockquote>\n<p>I cannot <em>stand</em> multiline conditionals for <code>if</code> and friends. I'll break them out into a variable/closure/function 90% of the time. <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 277198060,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1648670535
    },
    {
        "content": "<p>Multiline conditionals are the one place I dislike K&amp;R braces, yeah.</p>",
        "id": 277200949,
        "sender_full_name": "scottmcm",
        "timestamp": 1648672494
    },
    {
        "content": "<p>A random reflection after today’s meeting: one point I was trying to make was that Rust sometimes uses lints for pedagogical purposes: to teach someone about some feature they might not know about, but isn’t <em>necessarily</em> correlated with an error. (Consider e.g. the <code>while true { … }</code> thing). <em>But</em>, reflecting on Josh’s comment about issued lints representing technical debt: I am now actively wondering whether it might be simply <em>wrong</em> to equate “pedagogical opportunity” with “technical debt”</p>",
        "id": 277223538,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648690928
    },
    {
        "content": "<p>To be clear; some things flagged by lints <em>do</em> represent tech debt. But I strongly suspect some things they flag are simply <em>not</em>. (Like our old friend “unused parens”)</p>",
        "id": 277223573,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648691015
    },
    {
        "content": "<p>So I could imagine such a feature also being used to teach users about things that are not even actionable in the source code - for example, getting people who write an unsafe block to run miri and read the rustonomicon. Right now, there's no way for the compiler to tell users about those things</p>",
        "id": 277224041,
        "sender_full_name": "Jak{e,ob} Degen",
        "timestamp": 1648691626
    },
    {
        "content": "<p>Part of what I then wondered was: “For pedagogy: is the lint model simply wrong? Should it take on a model more like the “Tip of the Day”, where the first time each day you run <code>rustc</code> on a project, it selects <em>one random instance</em> of all the pedagogical lints that fired for that build. A kind of “did you know that you could be writing <code>if x &gt; y { … }</code> instead of <code>if (x &gt; y) { … }</code>; but then on subsequent builds for the rest of the day, it <em>stops trying to provide that kind of help</em> (unless someone asks for the helper to come back and give more tutorials)</p>",
        "id": 277224474,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648692112
    },
    {
        "content": "<p>I bet video games get this right.</p>",
        "id": 277224477,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648692121
    },
    {
        "content": "<p>(This of course conflicts with the “promote norms” that josh was stressing in the meeting.)</p>",
        "id": 277224539,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648692187
    },
    {
        "content": "<p>My favorite Clippy lint is the “it looks like you are writing <code>slice::swap</code>” one</p>",
        "id": 277224540,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1648692190
    },
    {
        "content": "<p>And I’d be really annoyed if the compiler (which is the same as Clippy to a large chunk of users) knew I was writing something sub optimal and <em>chose to not tell me</em> until X random days had passed. After I had copy pasta it all through my code.</p>",
        "id": 277224654,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1648692351
    },
    {
        "content": "<p>If you were doing that, I’d want it the first time it sees you write the suboptimal code. Closer to Rust analyzer.</p>",
        "id": 277224728,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1648692417
    },
    {
        "content": "<p>So this might be the kind of thing that integrating IDEs might help resolve. The compiler sometimes tells you about stuff on the command line, but always makes this information available to the IDE which can display a little info bubble</p>",
        "id": 277224738,
        "sender_full_name": "Jak{e,ob} Degen",
        "timestamp": 1648692426
    },
    {
        "content": "<p>Think of working with a pair programmer that waits until you are done with your thought then says “that’s good, but check out this function”</p>\n<p>It’d be even better if you could say “I want to do X” and the compiler says to check out Y and Z.</p>",
        "id": 277224844,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1648692517
    },
    {
        "content": "<p>Have you used GitHub Copilot? I haven’t, but friends have and share some pretty amazing things it suggests.</p>",
        "id": 277224887,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1648692585
    },
    {
        "content": "<p>Yeah, if we could get something like this working, I would be a massive fan. I also don't run clippy right now, and do wonder how much I miss out on because of it</p>",
        "id": 277225239,
        "sender_full_name": "Jak{e,ob} Degen",
        "timestamp": 1648693006
    },
    {
        "content": "<p>I think the core problem is that for any lint that's not \"hey, you should just update this right now\", spitting a bunch of things onto the console is the wrong way to do it.  (Overstatement for emphasis: and thus clippy shouldn't exist.)</p>\n<p>I've mentioned this <a href=\"https://internals.rust-lang.org/t/linter-pushing-it-too-far-return-self-not-must-use/16008/11?u=scottmcm\">before</a>, but I think Resharper does a great job of this for C#.  </p>\n<p>For everything it can tell you, right where it's showing it it gives a \"configure severity\" menu easily accessible &lt;<a href=\"https://www.jetbrains.com/help/resharper/Code_Analysis__Configuring_Warnings.html#change_severity\">https://www.jetbrains.com/help/resharper/Code_Analysis__Configuring_Warnings.html#change_severity</a>&gt;<br>\n<a href=\"/user_uploads/4715/F3ptnBjTgV_ZQuXDvsoC__FE/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/F3ptnBjTgV_ZQuXDvsoC__FE/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/F3ptnBjTgV_ZQuXDvsoC__FE/image.png\"></a></div><p>And only warnings and errors give the <span aria-label=\"x\" class=\"emoji emoji-274e\" role=\"img\" title=\"x\">:x:</span> on the file.  There can still be hints and suggestions, but with those the <em>file</em> shows as <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span>.  That level configuration being so easily accessible also encourages tuning things to what you want, with a configuration you can check in without needing to <code>#![</code> anything.</p>\n<p>For an example, it has a nice \"you could write this <code>foreach</code> loop as an iterator\" transform.  But I leave that at \"hint\" -- that way it's there as a very subtle … under the keywords, and I can click to apply it if I'd like.  Which I do occasionally, but usually I then Ctrl-Z that because the chain ends up being more complicated than I'm happy with.</p>\n<p>I really like that example because it's the kind of thing I'd <em>never</em> want to see from <code>cargo clippy</code>, even though it's a great feature in the IDE.</p>\n<p>So I guess one answer to this could be \"we should move everything from clippy to r-a, and then remove clippy entirely\".  (And maybe add a console way to do a similar thing with r-a, if it doesn't already have one.)</p>",
        "id": 277234215,
        "sender_full_name": "scottmcm",
        "timestamp": 1648703660
    },
    {
        "content": "<p>VS Code has an \"info\" lint level, JetBrains has \"weak warning\".  We could add a corresponding lint level to Rust, that wouldn't print anything to the console by default but would output for <code>--json-output</code> so tooling could read it</p>",
        "id": 277235502,
        "sender_full_name": "Jules Bertholet",
        "timestamp": 1648705437
    },
    {
        "content": "<p>Would be great if rustc's unused item/variable lints could then be downgraded to weak warnings.  At least to me they're nothing but frustrating noise while I'm actively writing code or debugging. Almost always I only want to care about them when it's the time to clean up code for commit/push.</p>",
        "id": 277340546,
        "sender_full_name": "Johannes Dahlström",
        "timestamp": 1648760930
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"277826\">Johannes Dahlström</span> <a href=\"#narrow/stream/213817-t-lang/topic/lint.20brainstorming/near/277340546\">said</a>:</p>\n<blockquote>\n<p>Would be great if rustc's unused item/variable lints could then be downgraded to weak warnings.  At least to me they're nothing but frustrating noise while I'm actively writing code or debugging. Almost always I only want to care about them when it's the time to clean up code for commit/push.</p>\n</blockquote>\n<p>You can set <code>deny-warnings = false</code> in config.toml for rustc.</p>",
        "id": 277340955,
        "sender_full_name": "cjgillot",
        "timestamp": 1648761167
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"248906\">cjgillot</span> <a href=\"#narrow/stream/213817-t-lang/topic/lint.20brainstorming/near/277340955\">said</a>:</p>\n<blockquote>\n<p>You can set <code>deny-warnings = false</code> in config.toml for rustc.</p>\n</blockquote>\n<p>Hmm what's that? I don't find any documentation for that. But anyway what I can do is <code>RUSTFLAGS='-A warnings' cargo xyz</code> for iterating and <code>RUSTFLAGS='-D warnings'</code> in a push hook/CI, but that's awkward. What I'd actually like to have is <code>[profile.dev]  rustflags=[\"-A warnings\"]</code> in Cargo but for whatever reason rustflags is not something that can be set per profile :(</p>",
        "id": 277343643,
        "sender_full_name": "Johannes Dahlström",
        "timestamp": 1648762748
    },
    {
        "content": "<p>Sorry, I mean for working on rustc.  I probably misunderstood you and wrote too fast.</p>",
        "id": 277343968,
        "sender_full_name": "cjgillot",
        "timestamp": 1648762991
    },
    {
        "content": "<p>Ah, no problem. I figured that might be the case (to be clear, I'm talking about run-of-the mill <em>using</em> rustc/Cargo rather than developing it)</p>",
        "id": 277344012,
        "sender_full_name": "Johannes Dahlström",
        "timestamp": 1648763037
    },
    {
        "content": "<p>What I can also do, I guess, is <code>export RUSTFLAGS=</code> in the shell and/or tweak the run config of my IDE</p>",
        "id": 277344101,
        "sender_full_name": "Johannes Dahlström",
        "timestamp": 1648763089
    },
    {
        "content": "<p>+1 for \"info\" lints. I think it would be a nice addition to clippy for example linting for code pushing into an Vec in a for loop where it could be rewritten as map and collect</p>",
        "id": 277872009,
        "sender_full_name": "fee1-dead",
        "timestamp": 1649162763
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/213817-t-lang/topic/lint.20brainstorming/near/277234215\">said</a>:</p>\n<blockquote>\n<p>I think the core problem is that for any lint that's not \"hey, you should just update this right now\", spitting a bunch of things onto the console is the wrong way to do it.  (Overstatement for emphasis: and thus clippy shouldn't exist.)</p>\n</blockquote>\n<p>this seems like an important insight that i've somehow managed to miss for years. (Although maybe it conflicts with Josh's point that forcing people to change their code is important for establishing communal norms....?</p>",
        "id": 277911963,
        "sender_full_name": "pnkfelix",
        "timestamp": 1649178517
    },
    {
        "content": "<p>I don't really think it conflicts. There always is the option not to use clippy. If you want people to use it it should not be as obnoxious as the original.</p>",
        "id": 277914025,
        "sender_full_name": "The 8472",
        "timestamp": 1649179363
    },
    {
        "content": "<p>There already is the pedantic category after all.</p>",
        "id": 277914162,
        "sender_full_name": "The 8472",
        "timestamp": 1649179416
    },
    {
        "content": "<p>So having something between ignoring it and making it a warning makes sense.</p>",
        "id": 277914215,
        "sender_full_name": "The 8472",
        "timestamp": 1649179437
    },
    {
        "content": "<p>Most people I know don't use clippy, except perhaps as an afterthought. That's kinda an RA issue I guess though.</p>",
        "id": 277925119,
        "sender_full_name": "Lokathor",
        "timestamp": 1649183860
    },
    {
        "content": "<p>clippy is checked in CI in a mostly-default configuration in almost all the projects (open source and proprietary) I contribute to</p>",
        "id": 277986289,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1649231196
    },
    {
        "content": "<p>I don't use it in VS Code checking by default because I feel it's too slow for that</p>",
        "id": 277986352,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1649231256
    },
    {
        "content": "<p>I do agree with the feeling that warnings are a bit of a pain in active development, I guess I would like a <code>cargo check</code> option to enable all the warning spew and info lints and clippy, something that I could run before pushing</p>",
        "id": 277986496,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1649231353
    }
]