[
    {
        "content": "<p>I just ran into a situation where I would love to have <code>try</code>. And while I would like to avoid writing a type signature, I could live with doing so.</p>",
        "id": 213092056,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602541411
    },
    {
        "content": "<p>It would still be more convenient than \"wrap in closure and call\".</p>",
        "id": 213092067,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602541428
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/try.20and.20type.20disambiguation/near/213092067\">said</a>:</p>\n<blockquote>\n<p>It would still be more convenient than \"wrap in closure and call\".</p>\n</blockquote>\n<p>look at this beauty <span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span> cooked up <a href=\"https://github.com/rust-lang/rust/pull/77862/files#diff-4b76d999d0f2e74f6df3724a36a6b96302b16968a2f7af48d2b4c08048f8f871R80\">https://github.com/rust-lang/rust/pull/77862/files#diff-4b76d999d0f2e74f6df3724a36a6b96302b16968a2f7af48d2b4c08048f8f871R80</a></p>",
        "id": 213092126,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602541461
    },
    {
        "content": "<p>I feel like, as long as we leave the door open for better inference in the future, it'd be fine if the common case needs a type signature.</p>",
        "id": 213092129,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602541467
    },
    {
        "content": "<p>for some definition of beauty ;)</p>",
        "id": 213092135,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602541470
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1977\">@T-lang</span> Other than type inference, what are the blockers for try at the moment?</p>",
        "id": 213092166,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602541511
    },
    {
        "content": "<p>personally (and I'm sure the door closed on this a while ago) I would rather have <code>try_block!</code> and <code>try_some!</code> in std than as a language feature</p>",
        "id": 213092173,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602541522
    },
    {
        "content": "<p>I think the open questions are still where error conversion can happen in them.  And we probably can't just say \"only when there's no conversion\", because loosening that later would probably end up being inference breaks.</p>",
        "id": 213094097,
        "sender_full_name": "scottmcm",
        "timestamp": 1602543245
    },
    {
        "content": "<p>(Sorry, I still haven't done that write-up <span aria-label=\"slight frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"slight frown\">:slight_frown:</span>)</p>",
        "id": 213094107,
        "sender_full_name": "scottmcm",
        "timestamp": 1602543262
    },
    {
        "content": "<p>Interestingly, a stable <code>try{}</code> would allow us to stabilize <code>Try</code> in <code>FnOnce</code>/<code>SliceIndex</code> \"mention but not implement or use methods\" style: <a href=\"https://github.com/rust-lang/rust/pull/77877/files#diff-63d6b948e93db9ae17b8a9a43cfbf6736d653692cd71a5cd777078c91e882354R1663\">https://github.com/rust-lang/rust/pull/77877/files#diff-63d6b948e93db9ae17b8a9a43cfbf6736d653692cd71a5cd777078c91e882354R1663</a></p>\n<p>Though it's not obvious to me that we're sure enough about the future that that would actually be a <em>good</em> idea.</p>",
        "id": 213096244,
        "sender_full_name": "scottmcm",
        "timestamp": 1602545535
    },
    {
        "content": "<p>something <span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span> brought up:</p>\n<blockquote>\n<p>I did hesitate between try blocks and this hand-rolled try_some! macro a lot, and the thing is, I wanted to have that is_macro_rules early escape branch, by early returning None. And try blocks have no mechanism to early return other than ?, which means that with a try block the code becomes:</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">def</span><span class=\"p\">.</span><span class=\"n\">ast</span><span class=\"p\">.</span><span class=\"n\">macro_rules</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">None</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>Which can be made to \"look\" better by being more hacky: <code>return None?;</code>, abusing the fact the return is actually unreachable.</p>\n<p>None of these options pleased me, which is the main reason for this being at a draft stage.</p>",
        "id": 213151212,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602594644
    },
    {
        "content": "<p>I really want <code>break 'a</code> to a block for this stuff</p>",
        "id": 213152192,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602595103
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> That would be something like this, right?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">def</span><span class=\"p\">.</span><span class=\"n\">ast</span><span class=\"p\">.</span><span class=\"n\">macro_rules</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">yeet</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 213162484,
        "sender_full_name": "scottmcm",
        "timestamp": 1602599278
    },
    {
        "content": "<p>basically, yes</p>",
        "id": 213162548,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602599292
    },
    {
        "content": "<p>petition to make <code>yeet</code> a keyword <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 213162591,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602599302
    },
    {
        "content": "<p>I would love to see the yeet (fail/throw/etc) proposal revived as well.</p>",
        "id": 213165128,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1602600156
    },
    {
        "content": "<p>I'm still a pretty big fan of try</p>",
        "id": 213188987,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602609848
    },
    {
        "content": "<p>I would love that writeup, <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span></p>",
        "id": 213188998,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602609853
    },
    {
        "content": "<p>yeet that RFC straight into the master branch</p>",
        "id": 213208304,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1602618659
    },
    {
        "content": "<p>Can <code>yeet</code> be an optional keyword replacement of whatever is actually chosen? \\s</p>",
        "id": 213218752,
        "sender_full_name": "Sebastian Malton",
        "timestamp": 1602624217
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247082\">@Sebastian Malton</span> I'll get right on that after I finish <a href=\"https://users.rust-lang.org/t/rename-vec-to-arr/49698/9?u=scottmcm\"><code>Arr&lt;T&gt;</code></a>   /s</p>",
        "id": 213223091,
        "sender_full_name": "scottmcm",
        "timestamp": 1602626910
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/213817-t-lang/topic/try.20and.20type.20disambiguation/near/213223091\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"247082\">Sebastian Malton</span> I'll get right on that after I finish <a href=\"https://users.rust-lang.org/t/rename-vec-to-arr/49698/9?u=scottmcm\"><code>Arr&lt;T&gt;</code></a>   /s</p>\n</blockquote>\n<p>didn't you hear? It's called <code>Buffer</code> now!</p>",
        "id": 213223554,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602627199
    }
]