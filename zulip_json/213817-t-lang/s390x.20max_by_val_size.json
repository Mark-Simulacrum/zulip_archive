[
    {
        "content": "<p>(I still want to add a target spec for that -- s390x re-spills such &gt;usize args back to memory, which also triggered an LLVM bug)</p>",
        "id": 230377306,
        "sender_full_name": "cuviper",
        "timestamp": 1615825669
    },
    {
        "content": "<p>The abi adjustment code for s390x should be adapted for this then.</p>",
        "id": 230377439,
        "sender_full_name": "bjorn3",
        "timestamp": 1615825718
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/7a7bbdb3abfa72ca717ef54ffc4f307d0d44de67/compiler/rustc_target/src/abi/call/s390x.rs\">https://github.com/rust-lang/rust/blob/7a7bbdb3abfa72ca717ef54ffc4f307d0d44de67/compiler/rustc_target/src/abi/call/s390x.rs</a></p>",
        "id": 230377482,
        "sender_full_name": "bjorn3",
        "timestamp": 1615825743
    },
    {
        "content": "<p>What is the exact problem <span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span>?</p>",
        "id": 230377697,
        "sender_full_name": "bjorn3",
        "timestamp": 1615825816
    },
    {
        "content": "<p>that was <a href=\"https://github.com/rust-lang/rust/issues/80810\">#80810</a></p>",
        "id": 230377763,
        "sender_full_name": "cuviper",
        "timestamp": 1615825839
    },
    {
        "content": "<p>fixed in LLVM now, but I'd like to avoid the useless spill back to memory</p>",
        "id": 230377845,
        "sender_full_name": "cuviper",
        "timestamp": 1615825879
    },
    {
        "content": "<p>Rustc already seems to force any type &gt;8 bytes to be passed indirectly on s390x: <a href=\"https://github.com/rust-lang/rust/blob/7a7bbdb3abfa72ca717ef54ffc4f307d0d44de67/compiler/rustc_target/src/abi/call/s390x.rs#L59\">https://github.com/rust-lang/rust/blob/7a7bbdb3abfa72ca717ef54ffc4f307d0d44de67/compiler/rustc_target/src/abi/call/s390x.rs#L59</a> Thus undoing the promotion to registers as it didn't happen.</p>",
        "id": 230378149,
        "sender_full_name": "bjorn3",
        "timestamp": 1615826009
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> does that source file apply to \"Rust\" abi too? because the problem I saw had <code>i96</code> args in LLVM IR</p>",
        "id": 230378283,
        "sender_full_name": "cuviper",
        "timestamp": 1615826056
    },
    {
        "content": "<p>It runs after the adjustments for the \"Rust\" abi.</p>",
        "id": 230378351,
        "sender_full_name": "bjorn3",
        "timestamp": 1615826093
    },
    {
        "content": "<p>then I need to untangle why that apparently didn't happen</p>",
        "id": 230378404,
        "sender_full_name": "cuviper",
        "timestamp": 1615826120
    },
    {
        "content": "<p>Is it possible that an LLVM pass promoted it to be passed directly? Does the same thing happen with <code>-Cno-prepopulate-passes</code>?</p>",
        "id": 230378589,
        "sender_full_name": "bjorn3",
        "timestamp": 1615826198
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"p\">[</span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>rustc +nightly --crate-type lib --emit=llvm-ir -Cno-prepopulate-passes foo.rs --target s390x-unknown-linux-gnu\n\n define void @_ZN3foo3foo17he5ff0c6f00da1358E(i96 %0) unnamed_addr #0 {\n</code></pre></div>",
        "id": 230378846,
        "sender_full_name": "cuviper",
        "timestamp": 1615826306
    },
    {
        "content": "<p>Oh, it seems that <code>adjust_for_cabi</code> doesn't get called after all for the <code>\"Rust\"</code> abi: <a href=\"https://github.com/rust-lang/rust/blob/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/compiler/rustc_middle/src/ty/layout.rs#L2922\">https://github.com/rust-lang/rust/blob/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2/compiler/rustc_middle/src/ty/layout.rs#L2922</a></p>",
        "id": 230380005,
        "sender_full_name": "bjorn3",
        "timestamp": 1615826794
    },
    {
        "content": "<p>it looks like this goes <code>adjust_for_cabi</code> -&gt; <code>s390x::compute_abi_info</code> -&gt; <code>classify_arg</code></p>",
        "id": 230380007,
        "sender_full_name": "cuviper",
        "timestamp": 1615826795
    },
    {
        "content": "<p>right</p>",
        "id": 230380012,
        "sender_full_name": "cuviper",
        "timestamp": 1615826797
    },
    {
        "content": "<p>so my thought was that <code>max_by_val_size</code> should be in the target spec for Rust abi</p>",
        "id": 230380260,
        "sender_full_name": "cuviper",
        "timestamp": 1615826884
    },
    {
        "content": "<p>we should probably split this tangent to a new thread, but I don't know how...</p>",
        "id": 230380422,
        "sender_full_name": "cuviper",
        "timestamp": 1615826949
    },
    {
        "content": "<p>I asked before here: <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Arch-specific.20ABI.20changes/near/227648202\">https://rust-lang.zulipchat.com/#narrow/stream/182449-t-compiler.2Fhelp/topic/Arch-specific.20ABI.20changes/near/227648202</a></p>",
        "id": 230380566,
        "sender_full_name": "cuviper",
        "timestamp": 1615827005
    },
    {
        "content": "<p>Changed the topic. (If you click on edit for the first message that needs to be changed, you can change the topic too)</p>",
        "id": 230380712,
        "sender_full_name": "bjorn3",
        "timestamp": 1615827058
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> do you think the target spec is the right place? or should it be hard-coded somewhere like we do for cabi?</p>",
        "id": 230381119,
        "sender_full_name": "cuviper",
        "timestamp": 1615827203
    },
    {
        "content": "<p>The target spec is the right place I guess.</p>",
        "id": 230381441,
        "sender_full_name": "bjorn3",
        "timestamp": 1615827307
    },
    {
        "content": "<p>I'll give it a shot</p>",
        "id": 230383205,
        "sender_full_name": "cuviper",
        "timestamp": 1615827934
    }
]