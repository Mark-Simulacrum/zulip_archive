[
    {
        "content": "<p>Given that <a href=\"https://github.com/rust-lang/rust/pull/77688\">https://github.com/rust-lang/rust/pull/77688</a> is likely to close, and I want/need something like it, what is the path forward for something like it? I'm interested in removing unneeded unsafe from the wrapper function case.</p>",
        "id": 218330035,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1606762875
    },
    {
        "content": "<p>I am personally quite interested by it too. IIUC, the main reason an auto-<code>Default</code> on closures was not deemed desirable was that being able to operate on <em>values</em> of some type, <em>e.g.</em>, forging them, out of the access to its type only, especially for <em>ad-hoc</em> closures, was deemed quite dangerous, adding <code>unsafe</code> pitfalls (which, may I add, is due to the lack of <code>UnsafeFn…</code> traits and thus unsafe closures, which leads to there being many incorrectly non-<code>unsafe</code> closures (<a href=\"https://grep.app/search?q=%5C%7C%5Cs%2Aunsafe%20%7B&amp;regexp=true&amp;case=true&amp;filter[lang][0]=Rust\">https://grep.app/search?q=%5C%7C%5Cs%2Aunsafe%20%7B&amp;regexp=true&amp;case=true&amp;filter[lang][0]=Rust</a>):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">unwrap_or_default_and_call</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"w\"> </span>: <span class=\"nb\">Default</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">f_opt</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">f_opt</span><span class=\"p\">.</span><span class=\"n\">unwrap_or_default</span><span class=\"p\">()()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// (My personal stance is that this should be an `unsafe || { … }`)</span>\n<span class=\"w\">        </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span>::<span class=\"n\">std</span>::<span class=\"n\">hint</span>::<span class=\"n\">unreachable_unchecked</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"c1\">// capture-less closure ≃ fn item; Default?</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">None</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">unwrap_or_default_and_call</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// Should not compile!</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<hr>\n<p>So, the alternative to all this that looked the most promising was to use <code>const</code> generics:</p>\n<ul>\n<li>\n<p>it would be a way to pass values as if within the type-system / statically dispatched (⇒ thunk usage);</p>\n</li>\n<li>\n<p>the fact that an actual <em>value</em> would be written would help convey the idea that the callee would have access to the value.</p>\n</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">make_extern_c</span><span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"w\"> </span>: <span class=\"nb\">Fn</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">R</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">F</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">  </span>-&gt; <span class=\"nc\">R</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">f</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">make_extern_c</span>::<span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 218444461,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1606839423
    },
    {
        "content": "<p>That looks a lot more reasonable to me. I don't see anything wrong with that.</p>",
        "id": 218449971,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606841588
    },
    {
        "content": "<p>You're actually passing a <em>value</em>, not passing a <em>type</em> and synthesizing a value.</p>",
        "id": 218450019,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606841605
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/Function.20wrappers.20and.20thunks/near/218449971\">said</a>:</p>\n<blockquote>\n<p>That looks a lot more reasonable to me. I don't see anything wrong with that.</p>\n</blockquote>\n<p>I don't either, provided we can get it sooner rather than later <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 218561414,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1606918684
    }
]