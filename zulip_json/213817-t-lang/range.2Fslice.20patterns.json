[
    {
        "content": "<p>I think there's some miscommunication regarding my comments in the \"Stabilizing RangeFrom\" PR in <a href=\"https://github.com/rust-lang/rust/pull/83918\">https://github.com/rust-lang/rust/pull/83918</a> and I figured I'd open a thread here to help clarify.</p>",
        "id": 239487207,
        "sender_full_name": "bstrie",
        "timestamp": 1621454474
    },
    {
        "content": "<p>From the meeting minutes it seems as though the lang team has the impression that I was proposing that <code>match [1] { [0..] =&gt;</code> should be an error merely to prevent confusion with slice patterns, for which they recommend that it should just be a lint instead. However, what I was proposing was that this construction should be an error because it I believe it ought to actually have the semantics of slice patterns, which will be much more difficult (requiring an edition change at the minimum) if the current semantics are stabilized.</p>",
        "id": 239487227,
        "sender_full_name": "bstrie",
        "timestamp": 1621454480
    },
    {
        "content": "<p>In particular I am proposing that the following should be made to work:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"n\">head</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tail</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">assert_eq!</span><span class=\"p\">([</span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">head</span><span class=\"p\">),</span><span class=\"w\"></span>\n</code></pre></div>\n<p>...which will be a backwards-incompatible change if <code>0..</code> in slice pattern position is taken to mean a range pattern rather than a slice pattern</p>",
        "id": 239487915,
        "sender_full_name": "bstrie",
        "timestamp": 1621454756
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> does that clear things up?</p>",
        "id": 239488028,
        "sender_full_name": "bstrie",
        "timestamp": 1621454791
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256342\">@bstrie</span>  I think if we did that, that would not be compatible with our current handling of range patterns outside of slices.</p>",
        "id": 239488100,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621454829
    },
    {
        "content": "<p>note that by \"should be made to work\" and I am not implying that this PR should do it</p>",
        "id": 239488120,
        "sender_full_name": "bstrie",
        "timestamp": 1621454836
    },
    {
        "content": "<p>That said, I also wouldn't object to prohibiting range patterns entirely inside slice patterns.</p>",
        "id": 239488161,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1621454859
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/range.2Fslice.20patterns/near/239488100\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"256342\">bstrie</span>  I think if we did that, that would not be compatible with our current handling of range patterns outside of slices.</p>\n</blockquote>\n<p>I'm not sure what you mean by this, here's code that works today:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">100</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">50</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">50</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"p\">];</span><span class=\"w\"></span>\n\n<span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"o\">..</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">100</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">50</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">50</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"o\">..</span><span class=\"mi\">2</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">100</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">50</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"o\">..</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"mi\">50</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"mi\">3</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">50</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">50</span><span class=\"p\">]);</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>it seems natural to extend this behavior to pattern position as well</p>",
        "id": 239488272,
        "sender_full_name": "bstrie",
        "timestamp": 1621454898
    },
    {
        "content": "<p>IMO, it is more important that \"<code>..</code> syntax inside of slices\" should be consistent with itself, rather than \"<code>..</code> syntax outside of slices should be consistent with <code>..</code> syntax inside of slices\". we already have both, so we're forced to choose either way</p>",
        "id": 239488501,
        "sender_full_name": "bstrie",
        "timestamp": 1621455008
    },
    {
        "content": "<p>(there is of course the problematic case of <code>[x..=y]</code> which is already stable, but I believe that was a simple oversight and that the effect on slice patterns was never raised)</p>",
        "id": 239488646,
        "sender_full_name": "bstrie",
        "timestamp": 1621455094
    },
    {
        "content": "<p>I'd be willing to write an RFC to propose this if people would like, I'd just like to gauge interest from the lang team first</p>",
        "id": 239488682,
        "sender_full_name": "bstrie",
        "timestamp": 1621455118
    },
    {
        "content": "<p>Pondering interactions: I wonder if we ever get splatting in the future, if that would extend to more-general \"splatting patterns\" that would remove the <code>..</code> ambiguity.</p>",
        "id": 239489977,
        "sender_full_name": "scottmcm",
        "timestamp": 1621455746
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/213817-t-lang/topic/range.2Fslice.20patterns/near/239489977\">said</a>:</p>\n<blockquote>\n<p>Pondering interactions: I wonder if we ever get splatting in the future, if that would extend to more-general \"splatting patterns\" that would remove the <code>..</code> ambiguity.</p>\n</blockquote>\n<p>Possibly, though (as I envision it) it would be more restrictive than what I'm proposing here. During the original slice patterns RFC I proposed <code>..foo..</code> as a syntax for slice patterns that would desugar to <code>foo @ ..</code> and could then be used in expression context akin to python's <code>*foo</code>. That gives you nice syntax for things that already compile today with slice patterns, e.g. <code>[..head.., tail]</code>, <code>[head, ..tail..]</code>, <code>[head, ..middle.., tail]</code>. But I don't think there's an intuitive/nice syntax for e.g. splitting a <code>[T; 4]</code> in half with <code>[first @ ..2, last @ 2..]</code>, or getting only the middle of a slice with <code>[middle @ 1..3]</code>, etc; anything that requires 1) more than one splat, or 2) specifying indexes won't really be possible if the syntactic space is used to mean a range pattern rather than a slice pattern.</p>",
        "id": 239906668,
        "sender_full_name": "bstrie",
        "timestamp": 1621724581
    },
    {
        "content": "<p>Hmm, that examples makes me wish that <code>[first @ ..k, last @ k..]</code> could work as a general way to <code>split_at_mut</code>, but of course runtime values can't get into patterns like that, so it'd be pretty sketchy at best.</p>",
        "id": 239907263,
        "sender_full_name": "scottmcm",
        "timestamp": 1621725228
    },
    {
        "content": "<p>I guess I was thinking, with splatting, of something like <code>[...first:[_; 2], rest @ ..]</code> as the potential alternative to <code>2..</code>.</p>",
        "id": 239907343,
        "sender_full_name": "scottmcm",
        "timestamp": 1621725315
    },
    {
        "content": "<p>you could be <em>extremely</em> hacky and say that the presence of a binding is what creates a slice pattern, e.g. <code>[1..2]</code> is a range pattern and <code>[a @ 1..2]</code> is a slice pattern. You could also use <code>[]</code> to force a slice pattern as in <code>[middle @ [1..3]]</code> (but of course we're back to the same syntactic problem...). In any case, ultimately I don't think that the desire to use a range pattern inside of an array is anywhere as common as the desire to use a more sophisticated slice pattern, but I only have my own desires to base this on.</p>",
        "id": 239908243,
        "sender_full_name": "bstrie",
        "timestamp": 1621726390
    },
    {
        "content": "<p>I am not convinced of that last point</p>",
        "id": 240080365,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621875952
    },
    {
        "content": "<p>I'd like to see some examples of where patterns like these are useful in practice</p>",
        "id": 240080493,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621876004
    },
    {
        "content": "<p>To be honest, both \"range patterns in slices\" and \"extended slice patterns\" seem like increasingly narrow use cases to me</p>",
        "id": 240080557,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621876030
    },
    {
        "content": "<p>I'm somewhat inclined to learn towards consistency of patterns overall for that reason</p>",
        "id": 240080580,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621876042
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/range.2Fslice.20patterns/near/240080580\">said</a>:</p>\n<blockquote>\n<p>I'm somewhat inclined to learn towards consistency of patterns overall for that reason</p>\n</blockquote>\n<p>Consistency is the root of my argument here; In pattern contexts I would like <code>[..]</code> to be consistent with <code>[0..]</code>, as it meshes with my mental model of <code>..</code> as just \"a range with the endpoints filled in automatically\". It's likewise consistent with <code>foo[0..]</code> in expression contexts.</p>",
        "id": 240082876,
        "sender_full_name": "bstrie",
        "timestamp": 1621877079
    },
    {
        "content": "<p>imo, I agree with bstrie that there is an inherent desirability in making SliceIndexing and slice patterns \"line up\". I often want to destructure slices in ways akin to this, and I have seen others have similar desires... it's especially a bear to have to, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rest</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">byteslice</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">num</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u64</span>::<span class=\"n\">from_le_bytes</span><span class=\"p\">([</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"p\">]);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>when it could be</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">octobyte</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rest</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">byteslice</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">num</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u64</span>::<span class=\"n\">from_le_bytes</span><span class=\"p\">(</span><span class=\"n\">octobyte</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 241573828,
        "sender_full_name": "Jubilee",
        "timestamp": 1622830432
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> Hi! I'm okay with continuing from here.</p>\n<p>Also I keep seeing remarks like \"I wish SliceIndex let me produce an array when slicing known values\" and similar things. ^^;</p>",
        "id": 243576287,
        "sender_full_name": "Jubilee",
        "timestamp": 1624394606
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> Would you mind elaborating a bit more on how you might imagine making this forwards-compatible in the direction of what bstrie suggested?</p>",
        "id": 243599179,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624412869
    },
    {
        "content": "<p>bstrie's idea re: compatibility migration seemed fine? I legit do not understand why this is blocked at this point.</p>",
        "id": 243681735,
        "sender_full_name": "Jubilee",
        "timestamp": 1624467779
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> Judging by the conversation in the last lang meeting, I think the issue is that we're a bit lost as to what change is being proposed. :)</p>",
        "id": 243682043,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624467909
    },
    {
        "content": "<p>There's been quite a lot of discussion.</p>",
        "id": 243682069,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624467915
    },
    {
        "content": "<p>Could we get a pointer to a specific proposal for how this could be changed for compatibility?</p>",
        "id": 243682123,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624467935
    },
    {
        "content": "<p>There has been only <strong>one</strong> material change to the PR:<br>\nRange patterns within slice patterns <strong>remain unstable</strong> behind the feature gate.<br>\nThe goal being that bstrie has a plan for that, and it being unstable would allow future action on it.</p>",
        "id": 243682386,
        "sender_full_name": "Jubilee",
        "timestamp": 1624468033
    },
    {
        "content": "<p>Ah, I see. I think that may have gotten a bit buried under some of the discussions for what that future action might be. :)</p>",
        "id": 243682460,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624468069
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> for making such nesting remain unstable and evaluating future possibilities there.</p>",
        "id": 243682536,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624468090
    },
    {
        "content": "<p>Nothing else is of concern to T-lang's decision here, and I made only the most minimal change <strong>precisely</strong> to remove having to make a decision as to the final shape of future plans for that.</p>",
        "id": 243682539,
        "sender_full_name": "Jubilee",
        "timestamp": 1624468091
    },
    {
        "content": "<p>I think that's exactly the nature of the confusion that we had when this came up in the lang meeting yesterday. I appreciate you clarifying that!</p>",
        "id": 243682796,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624468217
    },
    {
        "content": "<p>/me re-reads the PR history...</p>",
        "id": 243682832,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624468236
    },
    {
        "content": "<p>Ah, I see; <a href=\"https://github.com/rust-lang/rust/pull/83918/commits/43bad44ff01dd5035b961b366e65f705241b428d\">https://github.com/rust-lang/rust/pull/83918/commits/43bad44ff01dd5035b961b366e65f705241b428d</a> was the commit that re-gated range patterns within slice patterns.</p>",
        "id": 243682914,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624468279
    },
    {
        "content": "<p>Yes.<br>\nMy understanding was that Niko included an objection (in <a href=\"https://github.com/rust-lang/rust/pull/83918#issuecomment-855162216\">https://github.com/rust-lang/rust/pull/83918#issuecomment-855162216</a>) against the range pattern in certain cases being \"held back\" as unstable. But I genuinely had not given these special cases of patterns deep thought, which is why I was amenable to this.</p>",
        "id": 243683241,
        "sender_full_name": "Jubilee",
        "timestamp": 1624468436
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/83918#issuecomment-867016780\">https://github.com/rust-lang/rust/pull/83918#issuecomment-867016780</a></p>",
        "id": 243683421,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624468513
    },
    {
        "content": "<p>I'm a big fan of doing this incrementally. Thanks for taking the time to clarify exactly how this PR interacted with that future possibility.</p>",
        "id": 243683510,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624468559
    },
    {
        "content": "<p>huzzah! And thank you for taking the time to review. ^^;</p>",
        "id": 243683742,
        "sender_full_name": "Jubilee",
        "timestamp": 1624468652
    }
]