[
    {
        "content": "<p>So I've been kicking around a small-ish idea for a while. I finally sat down and <a href=\"https://hackmd.io/lse14c98S4mgkne1IGiIBQ?view\">wrote up a proposal</a> that I wanted to float around:</p>\n<h1>Summary</h1>\n<p>Create a <code>FunctionPointer</code> trait that is \"fundamental\" (in the coherence sense) and built-in to the compiler. It is automatically implemented for all <code>fn</code> types, regardless of any other details (ABI, argument types, and so forth).</p>",
        "id": 197270528,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589288120
    },
    {
        "content": "<blockquote>\n<p>Will function pointers always be representable by a usize?</p>\n</blockquote>\n<p>If a function pointer requires more data then you can represent them as a pointer to a static \"function descriptor\". This is what Itanium does.</p>",
        "id": 197271860,
        "sender_full_name": "Amanieu",
        "timestamp": 1589288711
    },
    {
        "content": "<p>I would also like to have a <code>from_usize</code> unsafe function. At the moment converting <code>usize</code> to <code>fn()</code> is not very ergonomic since we have to transmute.</p>",
        "id": 197272041,
        "sender_full_name": "Amanieu",
        "timestamp": 1589288794
    },
    {
        "content": "<p>can we make <code>fn(foo, bar) -&gt; boo</code> the magic sugar syntax for <code>FunctionPointer</code> trait bounds? :D</p>",
        "id": 197273051,
        "sender_full_name": "oli",
        "timestamp": 1589289255
    },
    {
        "content": "<p>I've wanted this forever</p>",
        "id": 197273054,
        "sender_full_name": "oli",
        "timestamp": 1589289259
    },
    {
        "content": "<p>oh there's a proposal</p>",
        "id": 197273075,
        "sender_full_name": "oli",
        "timestamp": 1589289271
    },
    {
        "content": "<p>/me reads</p>",
        "id": 197273078,
        "sender_full_name": "oli",
        "timestamp": 1589289275
    },
    {
        "content": "<p>will this trait also be implemented for the zst function types? Since they are trivially convertable to function pointers, their impl could be doing the to-function-pointer conversion in all methods</p>",
        "id": 197273384,
        "sender_full_name": "oli",
        "timestamp": 1589289413
    },
    {
        "content": "<p>That would prevent us from adding <code>from_usize</code> though.</p>",
        "id": 197273486,
        "sender_full_name": "Amanieu",
        "timestamp": 1589289464
    },
    {
        "content": "<p>oh hehe, right</p>",
        "id": 197273610,
        "sender_full_name": "oli",
        "timestamp": 1589289506
    },
    {
        "content": "<p>in general, the portability issue could be solved by exposing a <code>fn_ptr_size</code> type in libstd that should be used instead of <code>usize</code> and which on all current platforms is simply a newtype wrapper around <code>usize</code></p>",
        "id": 197273928,
        "sender_full_name": "oli",
        "timestamp": 1589289671
    },
    {
        "content": "<p>hm, how so? seems like you can definitely synthesize a zst with from_usize? (I presume from_usize requires specifying all arguments, right?)</p>",
        "id": 197273939,
        "sender_full_name": "simulacrum",
        "timestamp": 1589289676
    },
    {
        "content": "<p>right, but the given <code>usize</code> could be anything else, and we can't even assert that it's a good pointer</p>",
        "id": 197273994,
        "sender_full_name": "oli",
        "timestamp": 1589289713
    },
    {
        "content": "<p>then again, that function is unsafe...</p>",
        "id": 197274081,
        "sender_full_name": "oli",
        "timestamp": 1589289736
    },
    {
        "content": "<p>I don't see how that's different from a normal function</p>",
        "id": 197274117,
        "sender_full_name": "simulacrum",
        "timestamp": 1589289755
    },
    {
        "content": "<p>i.e. any other function pointer</p>",
        "id": 197274135,
        "sender_full_name": "simulacrum",
        "timestamp": 1589289765
    },
    {
        "content": "<p>yea, makes sense</p>",
        "id": 197274160,
        "sender_full_name": "oli",
        "timestamp": 1589289778
    },
    {
        "content": "<p>so for zst fn types, <code>from_usize</code> is a nop</p>",
        "id": 197274201,
        "sender_full_name": "oli",
        "timestamp": 1589289790
    },
    {
        "content": "<p>That's what I would expect, I think, though one could imagine that we create tiny shims which we can call which assert the type id in debug mode or whatever</p>",
        "id": 197274309,
        "sender_full_name": "simulacrum",
        "timestamp": 1589289831
    },
    {
        "content": "<p>seems not worth the trouble though</p>",
        "id": 197274320,
        "sender_full_name": "simulacrum",
        "timestamp": 1589289836
    },
    {
        "content": "<p>I think this mostly won't get used for those zsts, I'd have expected the <code>as_usize</code> to be more commonly used on generic parameters</p>",
        "id": 197274326,
        "sender_full_name": "oli",
        "timestamp": 1589289840
    },
    {
        "content": "<p>also: miri can check that you use <code>from_usize</code> correctly :D</p>",
        "id": 197274436,
        "sender_full_name": "oli",
        "timestamp": 1589289869
    },
    {
        "content": "<p>So if I read the proposal correctly, it does not seem like it is callable form of function pointers. Namely, there doesn't seem to be a well defined type of the function that the pointer points to.</p>",
        "id": 197278885,
        "sender_full_name": "Sebastian Malton",
        "timestamp": 1589291649
    },
    {
        "content": "<p>It is not callable, that would be very challenging =)</p>",
        "id": 197279911,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589292029
    },
    {
        "content": "<p>I'd be open <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> to extending to <code>FnDef</code> types -- that probably makes a lot of sense, actually</p>",
        "id": 197279974,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589292053
    },
    {
        "content": "<p>It argues for extending the interface to more than just <code>as_usize</code></p>",
        "id": 197280005,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589292067
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> why would we need to extend beyond as_usize? AFAICT, this proposal is mainly intended to solve two goals, I guess:</p>\n<ul>\n<li>Abstracting over all function pointers (e.g., with a trait), likely in this case you do want to provide some facility for calling them (a downcast operation I guess)? Not sure what the use cases are. Must be unsafe, most likely.</li>\n<li>Stashing a function pointer into usize fields (Atomics being the common case?).</li>\n</ul>\n<p>I think the first isn't really helped much by the as_usize/from_usize conversions; the latter is, though is arguably not much better than just transmuting</p>",
        "id": 197285225,
        "sender_full_name": "simulacrum",
        "timestamp": 1589294264
    },
    {
        "content": "<p>well, actually, no, this provides a marked improvement over transmutes -- you can't do those with generic parameters</p>",
        "id": 197285462,
        "sender_full_name": "simulacrum",
        "timestamp": 1589294347
    },
    {
        "content": "<p>technically we could provide just the trait in libstd, just like we provide <code>Future</code> and have all the extra functionality be created in user crates. You can still use <code>transmute_copy</code> so <code>as_usize</code> can be implemented in userspace</p>",
        "id": 197286220,
        "sender_full_name": "oli",
        "timestamp": 1589294672
    },
    {
        "content": "<p>ah, yeah, I forgot about transmute_copy -- I would personally I think lean towards provoding as/from_usize though, seems like the \"clear use case\" and better to push people away from using transmute if possible</p>",
        "id": 197286369,
        "sender_full_name": "simulacrum",
        "timestamp": 1589294740
    },
    {
        "content": "<p>I agree with that, I just meant that if we want to not bind ourselves to <code>usize</code> as mentioned in the proposal</p>",
        "id": 197287093,
        "sender_full_name": "oli",
        "timestamp": 1589295004
    },
    {
        "content": "<p>Sure. I would be on board with returning <code>*const OpaqueFnPointer</code> too, which could be cast to usize by the user</p>",
        "id": 197287434,
        "sender_full_name": "simulacrum",
        "timestamp": 1589295150
    },
    {
        "content": "<p>My motivations for including <code>as_usize</code> were</p>\n<ul>\n<li>safe alternative to transmute</li>\n<li>lets you implement everything else in terms of one compiler primitive</li>\n</ul>",
        "id": 197291853,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589296782
    },
    {
        "content": "<p>as far as calls, I guess some kind of downcast sounds pretty plausible</p>",
        "id": 197291881,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589296793
    },
    {
        "content": "<p>could probably be implemented with <code>type_id</code> intrinsics in \"user space\"</p>",
        "id": 197291956,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589296808
    },
    {
        "content": "<p>FYI any architecture that targets Linux will have <code>usize</code>-sized function pointers because that is what <code>dlsym</code> returns. I think it is safe to rely on this always being true (the same way we assume bytes are always 8 bits)</p>",
        "id": 197300764,
        "sender_full_name": "Amanieu",
        "timestamp": 1589300355
    },
    {
        "content": "<p>The only architecture I've worked with where this is kinda-not-true is AVR, but there the linker just uses trampolines for functions beyond 64K, so it's a non-issue in practice (at least this is what GCC does, not sure how the LLVM backend works here)</p>",
        "id": 197306709,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1589303147
    },
    {
        "content": "<p>I'm a little curious - why a trait here. Why not just.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#[derive(Copy, Clone, PartialEq, PartialOrd, ...)</span>\n<span class=\"cp\">struct FnPtr&lt;A, B&gt; where A: IsTuple (usize, PhantomData&lt;A&gt;, PhantomData&lt;B&gt;);</span>\n\n<span class=\"cp\">impl&lt;A: IsTuple, B&gt; FnPtr&lt;A, B&gt; {</span>\n<span class=\"cp\">      fn as_usize(self) -&gt; usize { self.0 }</span>\n<span class=\"cp\">}</span>\n</code></pre></div>",
        "id": 197307000,
        "sender_full_name": "Charles Lew",
        "timestamp": 1589303270
    },
    {
        "content": "<p>That doesn't allow abstracting over ABIs</p>",
        "id": 197307457,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1589303435
    },
    {
        "content": "<p>A third generic argument will suffice?</p>",
        "id": 197308458,
        "sender_full_name": "Charles Lew",
        "timestamp": 1589303887
    },
    {
        "content": "<p>Seems more complicated than the original proposal</p>",
        "id": 197310949,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1589304946
    },
    {
        "content": "<p>More importantly is doesn't allow abstracting over bound and free lifetimes.</p>",
        "id": 197311872,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1589305377
    },
    {
        "content": "<p>Would this be generic over parameter types and return types? If so, I could definately use this in my os kernel, where I had a lot of pain from the type checker related to fn items and fn pointers being distinct types (trying to typecheck functions used as syscall targets, before shoving them into \"heterogenous\" no_mangle array to be called from assembly)</p>",
        "id": 197313128,
        "sender_full_name": "Connor Horman",
        "timestamp": 1589305840
    },
    {
        "content": "<p>Yes, i always can't remember <code>for&lt;'a&gt; fn (...)</code> is a thing... Thanks for pointing this out.</p>",
        "id": 197313231,
        "sender_full_name": "Charles Lew",
        "timestamp": 1589305894
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/213817-t-lang/topic/FnPointer.20trait/near/197307457\">said</a>:</p>\n<blockquote>\n<p>That doesn't allow abstracting over ABIs</p>\n</blockquote>\n<p>As far as I know, our function types and traits <em>today</em> don't support abstracting over ABIs either.</p>",
        "id": 197321079,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589309492
    },
    {
        "content": "<p>Indeed, but the proposed <code>FunctionPointer</code> trait would</p>",
        "id": 197324077,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1589310750
    },
    {
        "content": "<p>That would have to be done via magic</p>",
        "id": 197324779,
        "sender_full_name": "Connor Horman",
        "timestamp": 1589311036
    },
    {
        "content": "<p>That's what's proposed, yes. The compiler provides all impls of the trait automatically.</p>",
        "id": 197325756,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1589311477
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"257758\">Connor Horman</span> <a href=\"#narrow/stream/213817-t-lang/topic/FnPointer.20trait/near/197313128\">said</a>:</p>\n<blockquote>\n<p>Would this be generic over parameter types and return types? If so, I could definately use this in my os kernel, where I had a lot of pain from the type checker related to fn items and fn pointers being distinct types (trying to typecheck functions used as syscall targets, before shoving them into \"heterogenous\" no_mangle array to be called from assembly)</p>\n</blockquote>\n<p>this might help with that, I'm not sure I fully understand the problem you were hitting</p>",
        "id": 197340242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589318012
    },
    {
        "content": "<p>I was typechecking the function against a \"is_syscall&lt;S: Syscall&gt;\" function. The problem was that the function item type doesn't impl Syscall, but rather the function pointer type does.</p>",
        "id": 197340799,
        "sender_full_name": "Connor Horman",
        "timestamp": 1589318241
    },
    {
        "content": "<p>Ah. That is indeed a good argument for making <code>FnDef</code> implement this trait.</p>",
        "id": 197341665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589318643
    },
    {
        "content": "<p>And it's also a nice argument for why <code>as_usize</code> is useful</p>",
        "id": 197341685,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589318652
    },
    {
        "content": "<p>(because you couldn't use transmute there, since sometimes it would be zero-size, and sometimes not)</p>",
        "id": 197341709,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589318665
    },
    {
        "content": "<p>it does make me kind of want a different name</p>",
        "id": 197341781,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589318713
    },
    {
        "content": "<p>as_usize really wouldn't work, as I do need this statically (cast to usize isn't const).</p>",
        "id": 197342261,
        "sender_full_name": "Connor Horman",
        "timestamp": 1589318984
    },
    {
        "content": "<p>it...could be a const fn</p>",
        "id": 197342448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589319054
    },
    {
        "content": "<p>or to put another way we could provide const impls</p>",
        "id": 197342496,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589319079
    },
    {
        "content": "<p>but that's a good thing to do add to the doc too</p>",
        "id": 197342505,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589319088
    },
    {
        "content": "<p>I don't believe it could be const. The address of a function isn't known at compile time, its known at link-time.</p>",
        "id": 197343622,
        "sender_full_name": "Connor Horman",
        "timestamp": 1589319694
    },
    {
        "content": "<p>Hmm. That's true :)</p>",
        "id": 197348351,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589322543
    },
    {
        "content": "<p>but I'm not sure that's a problem</p>",
        "id": 197348355,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589322548
    },
    {
        "content": "<p>it wouldn't yield an integer whose value is known, of course</p>",
        "id": 197348392,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589322573
    },
    {
        "content": "<p>but we already have integers that are pointers to things at link time etc</p>",
        "id": 197348413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589322592
    },
    {
        "content": "<p>anyway if you're able to do it at const time now, we can probably find some sol'n</p>",
        "id": 197348465,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589322604
    },
    {
        "content": "<p>Possibly. A \"to *const ()\" would probably be easier to implement, and more useful in my case. Both could probably exist, but I can't see to_usize as being const-ifiable.</p>",
        "id": 197361402,
        "sender_full_name": "Connor Horman",
        "timestamp": 1589334817
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/213817-t-lang/topic/FnPointer.20trait/near/197274201\">said</a>:</p>\n<blockquote>\n<p>so for zst fn types, <code>from_usize</code> is a nop</p>\n</blockquote>\n<p>and throws away the input? that seems suspicious?^^ (EDIT: oh, it's <code>as_usize</code> in the hackmd, that makes more sense)</p>",
        "id": 197386684,
        "sender_full_name": "RalfJ",
        "timestamp": 1589361672
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 197387197,
        "sender_full_name": "RalfJ",
        "timestamp": 1589361976
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/FnPointer.20trait/near/197270528\">said</a>:</p>\n<blockquote>\n<p>So I've been kicking around a small-ish idea for a while. I finally sat down and <a href=\"https://hackmd.io/lse14c98S4mgkne1IGiIBQ?view\">wrote up a proposal</a> that I wanted to float around:</p>\n<h1>Summary</h1>\n<p>Create a <code>FunctionPointer</code> trait that is \"fundamental\" (in the coherence sense) and built-in to the compiler. It is automatically implemented for all <code>fn</code> types, regardless of any other details (ABI, argument types, and so forth).</p>\n</blockquote>\n<p>the links at \" remove the leak-check in the compiler\" and \"introduced a warning about potential overlap between impls\" are the same... what would be the right place to find more details about those warnings/overlapping impls? (specifically I am wondering why that is not a huge soundness hole...)</p>",
        "id": 197387241,
        "sender_full_name": "RalfJ",
        "timestamp": 1589362007
    },
    {
        "content": "<p>Undirected Pondering:</p>\n<ul>\n<li>what if <code>extern \"A\" fn(B, C) -&gt; D</code> were sugar for some kind of <code>FnRef&lt;A, (B,C), D&gt;</code> lang item type in core?  Then people could make the trait themselves, or abstract over different <code>A</code> (including just <code>abi::Rust</code>) as they desired.  (Presumably there'd be some internal or sealed trait bound for that parameter, so we could add more later but users could not.)</li>\n<li>\"Things that can be representable in a usize\" safe transmutes feels more general than just function pointers.  I've wanted the same for pointers and references and boxes and ... in the past as well.  So this part, to me, feels more like a <code>SafeTransmute&lt;T&gt;</code> marker trait, so we can have things like <code>i32: SafeTransmute&lt;[u8; 4]&gt;</code> or <code>isize: SafeTransmute&lt;usize&gt;</code> too.</li>\n</ul>",
        "id": 197487379,
        "sender_full_name": "scottmcm",
        "timestamp": 1589410470
    },
    {
        "content": "<p>This has the same issue I brought up, that you still can't impl something a fn-ptr type, <em>and</em> all fn-item types which have the same signature</p>",
        "id": 197561821,
        "sender_full_name": "Connor Horman",
        "timestamp": 1589465913
    }
]