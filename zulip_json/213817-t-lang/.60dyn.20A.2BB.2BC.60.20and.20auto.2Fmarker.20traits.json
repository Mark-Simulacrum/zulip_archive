[
    {
        "content": "<p>(Brought to mind because <a href=\"https://github.com/rust-lang/rfcs/issues/2035#issuecomment-668373925\">https://github.com/rust-lang/rfcs/issues/2035#issuecomment-668373925</a>)</p>\n<p>I assume it's the case that <code>dyn Trait + Send</code> works because <code>Send</code> is an <del>OBIT</del><code>auto trait</code>?</p>\n<p>If so, I was wondering if that behaviour should (also or instead) be applied for <code>#[marker]</code> traits.  And perhaps all <code>auto trait</code>s should be <code>#[marker]</code> traits?  (Either automatically or because we put that on them in the standard library.)</p>",
        "id": 205966672,
        "sender_full_name": "scottmcm",
        "timestamp": 1596578695
    },
    {
        "content": "<p>I think the relevant part is that <code>Send</code> has no methods. It doesn't matter that it's <code>auto</code>.</p>",
        "id": 206042284,
        "sender_full_name": "RalfJ",
        "timestamp": 1596643844
    },
    {
        "content": "<p>Also, <code>Unpin</code> is <code>auto</code> but for soundness reasons we can <em>not</em> make it <code>#[marker]</code>. So \"no\" to the last question in your post, we cannot make all auto traits into marker traits.</p>",
        "id": 206042361,
        "sender_full_name": "RalfJ",
        "timestamp": 1596643887
    },
    {
        "content": "<p><code>dyn Trait + Send</code> works because it's <code>auto</code></p>",
        "id": 206042511,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596643945
    },
    {
        "content": "<p>You can't do that we traits that have no methods that aren't <code>auto</code></p>",
        "id": 206042558,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596643967
    },
    {
        "content": "<p>but that's just an implementation constraint I presume?</p>",
        "id": 206042597,
        "sender_full_name": "RalfJ",
        "timestamp": 1596643984
    },
    {
        "content": "<p>(Theoretically you could, but that's not how trait resolution is done now)</p>",
        "id": 206042611,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596643992
    },
    {
        "content": "<p>Yes!</p>",
        "id": 206042613,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596643994
    },
    {
        "content": "<p>I dont see anything stopping us from doing this for non-auto marker traits</p>",
        "id": 206042614,
        "sender_full_name": "RalfJ",
        "timestamp": 1596643995
    },
    {
        "content": "<p>okay :D</p>",
        "id": 206042619,
        "sender_full_name": "RalfJ",
        "timestamp": 1596643997
    },
    {
        "content": "<p>I would have to think about how that works with unsizing. I guess the trait with methods is the \"main\" trait</p>",
        "id": 206042749,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596644056
    },
    {
        "content": "<p>yes</p>",
        "id": 206043330,
        "sender_full_name": "RalfJ",
        "timestamp": 1596644286
    },
    {
        "content": "<p>doesn't it need to come first?</p>",
        "id": 206043339,
        "sender_full_name": "RalfJ",
        "timestamp": 1596644291
    },
    {
        "content": "<p>or is <code>dyn Send+Trait</code> a thing?</p>",
        "id": 206043353,
        "sender_full_name": "RalfJ",
        "timestamp": 1596644298
    },
    {
        "content": "<p>Nope, order doesn't matter</p>",
        "id": 206044148,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596644727
    },
    {
        "content": "<p>I suppose the non-method trait also couldn't have any supertraits with methods?</p>",
        "id": 206064842,
        "sender_full_name": "cuviper",
        "timestamp": 1596654318
    },
    {
        "content": "<p>I'm trying to think of examples, like <code>trait Eq: PartialEq</code> and <code>Copy: Clone</code>, but those aren't object safe anyway</p>",
        "id": 206065001,
        "sender_full_name": "cuviper",
        "timestamp": 1596654397
    },
    {
        "content": "<p>I guess you could invent one anyway, <code>trait Iter32: Iterator&lt;Item = i32&gt; {}</code></p>",
        "id": 206065545,
        "sender_full_name": "cuviper",
        "timestamp": 1596654721
    },
    {
        "content": "<p>Ah, that's an interesting point.  I guess auto traits can't have subtraits, so that doesn't come up for them?</p>",
        "id": 206096921,
        "sender_full_name": "scottmcm",
        "timestamp": 1596678100
    },
    {
        "content": "<p>right, there's an error for auto traits: <a href=\"https://doc.rust-lang.org/nightly/error-index.html#E0568\">https://doc.rust-lang.org/nightly/error-index.html#E0568</a></p>",
        "id": 206109789,
        "sender_full_name": "cuviper",
        "timestamp": 1596696785
    }
]