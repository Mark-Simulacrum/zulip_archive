[
    {
        "content": "<p>I was surprised to find out today that this doesn't parse:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"o\">..=</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>(Filed &lt;<a href=\"https://github.com/rust-lang/rust/issues/84528\">https://github.com/rust-lang/rust/issues/84528</a>&gt; about the error message.)</p>\n<p>What's the current state of parens in patterns?  Is this something that we could just consider allowing in the grammar?</p>\n<p>Spotted in &lt;<a href=\"https://github.com/rust-lang/rust/pull/83918/files#diff-b2588fe10cfa40f26a678938f0efe8984afee13b8ddc81c458a4d65d54de9a2dR4\">https://github.com/rust-lang/rust/pull/83918/files#diff-b2588fe10cfa40f26a678938f0efe8984afee13b8ddc81c458a4d65d54de9a2dR4</a>&gt;, in the form <code>0..=(1+2)</code>, where the parens are more useful, albeit not allowed.</p>",
        "id": 235995139,
        "sender_full_name": "scottmcm",
        "timestamp": 1619290217
    },
    {
        "content": "<p>LHS and RHS in range patterns are just very limited and expect either literals, or paths, or <code>const</code> blocks, but not arbitrary patterns (including parentheses).</p>",
        "id": 235998591,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1619292765
    },
    {
        "content": "<p>Regarding <code>1 + 2</code> in the parentheses, parentheses in patterns still expect other patterns inside the parentheses rather than arbitrary expressions, for arbitrary expressions we have <code>const { ... }</code> blocks.</p>",
        "id": 235998759,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1619292870
    },
    {
        "content": "<p>(Nothing prevents suggesting const blocks in error messages for cases like <code>0 ..= (1 + 2)</code> though.)</p>",
        "id": 235998844,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1619292933
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123856\">Vadim Petrochenkov</span> <a href=\"#narrow/stream/213817-t-lang/topic/Parentheses.20in.20patterns/near/235998591\">said</a>:</p>\n<blockquote>\n<p>LHS and RHS in range patterns are just very limited and expect either literals, or paths, or <code>const</code> blocks, but not arbitrary patterns (including parentheses).</p>\n</blockquote>\n<p>Ah, I that makes sense as it's not like <code>0..=(3 | 4)</code> with a subpattern there would make any sense.  Thanks.</p>\n<p>(Agreed about  <code>const{}</code> being the way for <code>(1+2)</code>; I don't want to propose a change to make that a legal pattern on its own.)</p>",
        "id": 236004390,
        "sender_full_name": "scottmcm",
        "timestamp": 1619297216
    },
    {
        "content": "<p>Yeah, I mentioned this in <a href=\"https://github.com/rust-lang/rust/issues/67264#issuecomment-812770692\">https://github.com/rust-lang/rust/issues/67264#issuecomment-812770692</a>, where I tried to find as many edges as I could. ^^</p>",
        "id": 236033787,
        "sender_full_name": "Jubilee",
        "timestamp": 1619321965
    },
    {
        "content": "<p>and as I mentioned in the PR,</p>\n<blockquote>\n<p>e.g. There is, at least, a mild diagnostic improvement in some edge cases, because before this PR the pattern<code> 0..=(5+1)</code> encounters the <code>half_open_range_patterns</code> feature gate and can thus emit the request to enable the feature flag, while also emitting the \"inclusive range with no end\" diagnostic. There is no intent to allow an <code>X..=</code> pattern that I am aware of, so so removing the flag request is a strict improvement. The arrival of the <code>J | K</code> \"or\" pattern also enables some odd formations.</p>\n</blockquote>",
        "id": 236033883,
        "sender_full_name": "Jubilee",
        "timestamp": 1619322098
    }
]