[
    {
        "content": "<p>So we had this \"dyn rvalues\" RFC that aimed to allow unsized things on the stack. But I have come to the opinion it was too maximal.</p>",
        "id": 245741526,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626120787
    },
    {
        "content": "<p>In particular, it is not compatible with <code>async fn</code></p>",
        "id": 245741538,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626120794
    },
    {
        "content": "<p>Since in an async fn we can't do <code>alloca</code></p>",
        "id": 245741552,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626120802
    },
    {
        "content": "<p>I am thinking again about a scaled back version, one that permits you to pass ownership of <code>dyn</code> values <em>to functions</em> but not to manipulate them <em>within</em> a function</p>",
        "id": 245741603,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626120826
    },
    {
        "content": "<p>In particular this would enable code like this</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 245741678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626120847
    },
    {
        "content": "<p>Coupled with a <code>size_of</code> operation, one could also do things like</p>",
        "id": 245741718,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626120869
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">())</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 245741764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626120886
    },
    {
        "content": "<p>That seems feasible.</p>",
        "id": 245741816,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626120912
    },
    {
        "content": "<p>part of why I'm thinking about this again is thinking about portable runtime APIs, and wanting to have the ability to have <code>dyn</code> traits that take <code>dyn</code> values by argument</p>",
        "id": 245741823,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626120917
    },
    {
        "content": "<p>so as to be both ergonomic and more compatible with no-std</p>",
        "id": 245741861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626120930
    },
    {
        "content": "<p>It's largely orthogonal to being able to do things like create an array on the stack, but in theory you <em>could</em> do something like <code>alloc_array(..., |array| some_code(array))</code> with that, at least outside of async.</p>",
        "id": 245741944,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626120959
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/Passing.20dyn.20by.20value/near/245741861\">said</a>:</p>\n<blockquote>\n<p>so as to be both ergonomic and more compatible with no-std</p>\n</blockquote>\n<p>The latter seems especially exciting. I'd love to make it possible to have trait objects without boxing.</p>",
        "id": 245742029,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626120985
    },
    {
        "content": "<p>I also just like the story that one can write</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>with (nearly) equal ease.</p>",
        "id": 245742074,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626121010
    },
    {
        "content": "<p>The Linux kernel would also benefit from that; it will have enough of alloc to have <code>Box</code>, but it'll still prefer to avoid allocating if possible.</p>",
        "id": 245742088,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626121015
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/Passing.20dyn.20by.20value/near/245742074\">said</a>:</p>\n<blockquote>\n<p>I also just like the story that one can write</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>with (nearly) equal ease.</p>\n</blockquote>\n<p>This also seems like something only possible now that we've mandated the <code>dyn</code> keyword for that. Doing that with just <code>Trait</code> seems error-prone.</p>",
        "id": 245742179,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626121059
    },
    {
        "content": "<p>So basically the rule would be unsized values are allowed as parameters, but not as locals and return values on the MIR level. That works fine even without alloca. cg_clif already has this implemented. (Cranelift doesn't support alloca) This is already pretty much implemented as <code>#![feature(unsized_fn_params)]</code> I believe.</p>",
        "id": 245744113,
        "sender_full_name": "bjorn3",
        "timestamp": 1626121914
    },
    {
        "content": "<p>Yes, that would be the rule, and the fact that it is indeed fairly easy to implement is the main reason I like it</p>",
        "id": 245745125,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626122372
    },
    {
        "content": "<p>There are some other cases you could conceivably manage -- e.g., using a <code>let</code> to \"move\" out from some outer location</p>",
        "id": 245745234,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626122408
    },
    {
        "content": "<p>When such a \"move\" rule would be implemented it would preferably happen in the form of a MIR transformation that preserves the only parameters are unsized rule. Otherwise every backend would have to contain this complex logic or fallback to alloca if it supports it.</p>",
        "id": 245746545,
        "sender_full_name": "bjorn3",
        "timestamp": 1626123016
    },
    {
        "content": "<p>Is it really possible to use such a value though? Not being able to memcpy a rust value seems like it would be irretrievably hobbled. How do you move it elsewhere?</p>",
        "id": 245747132,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626123256
    },
    {
        "content": "<p>or is this some kind of Pin-alike?</p>",
        "id": 245747246,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626123306
    },
    {
        "content": "<p>I assume that the idea would be to keep it in the same place, but update the places the local is referenced from to point to the original parameter or a field of the parameter.</p>",
        "id": 245749746,
        "sender_full_name": "bjorn3",
        "timestamp": 1626124051
    },
    {
        "content": "<p>I don't see how that would work if you want to forward the argument to another function, for example</p>",
        "id": 245750454,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626124255
    },
    {
        "content": "<p>Unsized values are always passed by-reference</p>",
        "id": 245750541,
        "sender_full_name": "bjorn3",
        "timestamp": 1626124279
    },
    {
        "content": "<p>I see, so it's really <code>Box&lt;dyn Trait&gt;</code> at the abi level?</p>",
        "id": 245750612,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626124303
    },
    {
        "content": "<p>Pretty much. Except that the caller is responsible for \"freeing\" the memory and not the callee.</p>",
        "id": 245750687,
        "sender_full_name": "bjorn3",
        "timestamp": 1626124339
    },
    {
        "content": "<p>(actually it's unclear whether it's <code>Box&lt;dyn Trait&gt;</code> or <code>&amp;mut dyn Trait</code>)</p>",
        "id": 245750688,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626124339
    },
    {
        "content": "<p>but then what advantage does this actually have over <code>&amp;mut dyn Trait</code> arguments?</p>",
        "id": 245750763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626124405
    },
    {
        "content": "<p><code>&amp;mut dyn Trait</code> wouldn't allow moving out of the argument, so it is more like <code>Box&lt;dyn Trait&gt;</code>.</p>",
        "id": 245750772,
        "sender_full_name": "bjorn3",
        "timestamp": 1626124409
    },
    {
        "content": "<p>dropping?</p>",
        "id": 245750781,
        "sender_full_name": "The 8472",
        "timestamp": 1626124418
    },
    {
        "content": "<p>For example an <code>&amp;mut dyn FnOnce()</code> argument is uncallable. An <code>dyn FnOnce()</code> or <code>Box&lt;dyn FnOnce()&gt;</code> argument is callable.</p>",
        "id": 245750901,
        "sender_full_name": "bjorn3",
        "timestamp": 1626124475
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/213817-t-lang/topic/Passing.20dyn.20by.20value/near/245750901\">said</a>:</p>\n<blockquote>\n<p>For example an <code>&amp;mut dyn FnOnce()</code> argument is uncallable. An <code>dyn FnOnce()</code> or <code>Box&lt;dyn FnOnce()&gt;</code> argument is callable.</p>\n</blockquote>\n<p>So the caller (creator of the <code>dyn Trait</code> value) is responsible for freeing the memory, but the callee is responsible for dropping (so neither <code>Box&lt;T&gt;</code> nor <code>&amp;mut T</code> completely describes this type). In that case, I don't see how you could forward to a function accepting a <code>Box&lt;dyn Trait&gt;</code>, since that function will want to free the memory behind the box and can't since it's actually stack memory</p>",
        "id": 245751748,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626124861
    },
    {
        "content": "<p>In that case you need to <code>Box</code> it first using <code>Box::new</code>.</p>",
        "id": 245751991,
        "sender_full_name": "bjorn3",
        "timestamp": 1626125000
    },
    {
        "content": "<p>So part of this is <code>Box::new</code> becoming magic so that it can move out of these unsized parameters?</p>",
        "id": 245752116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626125062
    },
    {
        "content": "<p>Using <code>size_of_val</code> to determine the allocation size and <code>copy_nonoverlapping</code> to copy an arbitrarily sized region of memory should work I think. Then <code>mem::forget</code> can be used to prevent a drop of the original parameter.</p>",
        "id": 245752184,
        "sender_full_name": "bjorn3",
        "timestamp": 1626125100
    },
    {
        "content": "<p>The signature of <code>Box::new</code> currently requires that its argument is <code>Sized</code>; are unsized parameters also being considered here or just parameters of the <code>dyn Trait</code> variety?</p>",
        "id": 245752295,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626125163
    },
    {
        "content": "<p>(sorry for all the clarification questions)</p>",
        "id": 245752423,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626125212
    },
    {
        "content": "<p>It is currently not accepted, but I was saying how I think it could be impelemented in the future.</p>",
        "id": 245752462,
        "sender_full_name": "bjorn3",
        "timestamp": 1626125237
    },
    {
        "content": "<p>That is <code>Box::new</code> taking <code>T: ?Sized</code>.</p>",
        "id": 245752523,
        "sender_full_name": "bjorn3",
        "timestamp": 1626125270
    },
    {
        "content": "<p>Ah, I guess that all the considerations about <code>dyn Trait</code> parameters mostly apply to <code>fn foo&lt;T: ?Sized&gt;(x: T) { ... }</code>as well</p>",
        "id": 245752640,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626125327
    },
    {
        "content": "<p>Indeed, <code>dyn Trait</code> is a special case of <code>T:?Sized</code>.</p>",
        "id": 245752751,
        "sender_full_name": "bjorn3",
        "timestamp": 1626125379
    },
    {
        "content": "<p>FWIW on LLVM this (unsized params) should also work without <code>alloca</code>... indeed I hope it does since what our backend does with <code>alloca</code> in LLVM is wrong^^ (it doesnt properly account for alignment)</p>",
        "id": 245756938,
        "sender_full_name": "RalfJ",
        "timestamp": 1626127900
    },
    {
        "content": "<p>so if we decide to \"de-support\" more general unsized locals we could remove that incorrect <code>alloca</code> code and I could sleep better knowing for sure it wouldn't be used. ;)  I think we could also remove some ugly hacks from Miri/CTFE.</p>",
        "id": 245757064,
        "sender_full_name": "RalfJ",
        "timestamp": 1626127970
    },
    {
        "content": "<p>We'd want a magic intrinsic that allows calling a function with a unsized argument that is a dereferenced pointer, since <code>ptr::read</code> won't work due to needing to return the unsized value, or maybe we could make ptr::read magic?</p>",
        "id": 245762334,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1626132049
    },
    {
        "content": "<p>or just write</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">my_fn</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">todo!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"n\">move_call</span><span class=\"p\">(</span><span class=\"n\">f</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">my_fn</span><span class=\"p\">(</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">f</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 245762600,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1626132244
    },
    {
        "content": "<p>I feel like maintaining a \"no-alloca\" rule makes sense</p>",
        "id": 245848778,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626192926
    },
    {
        "content": "<p>FWIW, and summarizing some things mentioned in this thread, <code>unsized_fn_params</code> is basically sugar for <em>one</em> case of <code>&amp;move</code>, right?</p>\n<p>That is, <code>fn foo(x: dyn Trait)</code> and <code>fn foo(x: &amp;move dyn Trait)</code> would mean the same, should both ever coexist?</p>\n<p>Let's then note that the latter is more general, and less magic / more explicit <em>w.r.t.</em> semantics involved, so I do hope the one case of <code>unsized_fn_params</code> does not shadow completely the <code>&amp;move</code> ideas.</p>\n<hr>\n<p>One example is <em>returning</em> unsized values. AFAIUI, <code>unsized_fn_params</code> would not allow this, even though it could allow it when the returned value comes from a parameter.</p>\n<p>Similarly, one can imagine:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">Slot</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MaybeUninit</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// feel free to newtype</span>\n<span class=\"k\">fn</span> <span class=\"nf\">alloc_in</span><span class=\"p\">(</span><span class=\"n\">storage</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">_</span> <span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Slot</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">_</span> <span class=\"nc\">move</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and thus, for returning an unsized type, assuming existential <code>impl</code> trait in parameter position, one could imagine:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">mk_buf</span><span class=\"p\">(</span><span class=\"n\">storage</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">_</span> <span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Slot</span><span class=\"o\">&lt;</span><span class=\"cp\">#[existential]</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">_</span> <span class=\"nc\">move</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">alloc_in</span><span class=\"p\">(</span><span class=\"n\">storage</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">])</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<ul>\n<li>(Existential in param position should be quite trivial to feature, by using TAIT and allowing the action of <em>setting</em> assigning to a value of that type (or calling a function that does so) to be a defining use.)</li>\n</ul>\n<p>This further allows the caller to have control as to whether they want to stack-allocate the return value of <code>buf</code> within their own stack frame:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">caller</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">buf</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">move</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mk_buf</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">slot</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cm\">/* buf can be used here… */</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cm\">/* but it can't outlive this frame since its backing storage (`slot()`) gets deallocated */</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>or transitively require caller-provided storage:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">mk_buf_sorted</span><span class=\"p\">(</span><span class=\"n\">storage</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">_</span> <span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Slot</span><span class=\"o\">&lt;</span><span class=\"cp\">#[existential]</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">_</span> <span class=\"nc\">move</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mk_buf</span><span class=\"p\">(</span><span class=\"n\">storage</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">buf</span><span class=\"p\">.</span><span class=\"n\">sort_unstable</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">buf</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I hope I am indeed proving how the value of <code>&amp;move</code> is greater than that of <code>unsized_fn_params</code>; so, if featuring <em>both</em> were to be deemed \"too much\", as has been said in the past in some IRLO threads about move references, I do hope Rust does not puts itself into a corner by going for the fancy-looking \"<code>dyn</code> by value\" over the more explicit (and thus clearer) as well as more capable <code>&amp;move</code> references.</p>\n<hr>\n<p>If, on the other hand, <code>unsized_fn_params</code> is not to preclude <code>&amp;move</code> references, then do clearly mention that in the RFC, and then feel free to disregard this post <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 246028390,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1626300541
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"229517\">Jacob Lifshay</span> <a href=\"#narrow/stream/213817-t-lang/topic/Passing.20dyn.20by.20value/near/245762600\">said</a>:</p>\n<blockquote>\n<p>or just write</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">my_fn</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">todo!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"n\">move_call</span><span class=\"p\">(</span><span class=\"n\">f</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">my_fn</span><span class=\"p\">(</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">f</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">my_fn</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">move</span><span class=\"w\"> </span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">todo!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"n\">move_call</span><span class=\"p\">(</span><span class=\"n\">f</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">my_fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">f</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 246028626,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1626300688
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> since you seemed to have a bunch of questions regarding the exact <em>semantics</em> of these things, I can provide you a fully working prototype of <code>&amp;move</code> references as a third-party lib which <em>may</em> clarify the rules of <code>unsized_fn_params</code>, should these behave as sugared <code>&amp;move</code>s: <a href=\"https://docs.rs/stackbox\">https://docs.rs/stackbox</a></p>",
        "id": 246029751,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1626301396
    },
    {
        "content": "<p>I'd be happy if the feature could be defined and implemented in terms of <code>&amp;move</code>, in the same way that async is on top of generators</p>",
        "id": 246029920,
        "sender_full_name": "bstrie",
        "timestamp": 1626301504
    },
    {
        "content": "<p>The <code>T</code> -&gt; <code>&amp;move T</code> \"lowering\" already happens for sized types that don't fit in two registers. This is unavoidable. <code>unsized_fn_params</code> is just a natural extension to this. I also don't think this should be blocked on <code>&amp;move</code>.</p>",
        "id": 246057071,
        "sender_full_name": "bjorn3",
        "timestamp": 1626331222
    },
    {
        "content": "<p>True, although that only happens for <code>extern \"Rust\"</code>: when writing an <code>extern \"C\"</code> function, for instance, one needs to be very mindful of by-value _vs._ by-ref designs when optimizing stack usage and trying to elide copies, which these implicit unsugarings do not allow.</p>\n<p>Note that I'm not advocating for blocking either feature, here <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> I believe by-value <code>dyn</code> parameters will be a very welcome addition to the language; and indeed one potentially faster to feature than <code>&amp;move</code> since it does not require an addition to the language's grammar (as I see it, there is no other issue besides grammar for supporting <code>&amp;move</code>: <code>StackBox&lt;'frame, T&gt;</code> semantics are pretty clear). I am just asking for a very explicit mention in the RFC/MCP acknowledging that by-value <code>dyn</code> parameters does not cover all the spectrum of features that <code>&amp;move</code> does, and thus that neither feature is to shadow or supersede the other <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 246164217,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1626388106
    }
]