[
    {
        "content": "<p>Are there any blockers to <code>try</code> blocks (<a href=\"https://github.com/rust-lang/rust/issues/31436\">#31436</a>) other than the question of inference? I think the benefit of having it could be quite a bit even if it couldn't be used without type annotations everywhere.</p>",
        "id": 275117936,
        "sender_full_name": "Jacob Pratt ðŸ‡ºðŸ‡¦",
        "timestamp": 1647120296
    },
    {
        "content": "<p>The problem is that I think the vanilla form should do something different, which isn't a backwards-compatible change.</p>\n<p>I've got an RFC started; I should try to get it to 1st draft this weekend...</p>",
        "id": 275118306,
        "sender_full_name": "scottmcm",
        "timestamp": 1647120933
    },
    {
        "content": "<p>What do you mean by \"something different\"? If it 's something that can be explained briefly.</p>",
        "id": 275118361,
        "sender_full_name": "Jacob Pratt ðŸ‡ºðŸ‡¦",
        "timestamp": 1647120998
    },
    {
        "content": "<p>Something that uses the type of the argument to <code>?</code> inside the block to fully-determine the type of the <code>try</code> block, rather than depending on context.  Since that's necessary for <code>try { ... }.a_method()</code> to work, for example.</p>\n<p>It will use the (currently unstable on nightly) <code>Residual</code> trait, like <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.try_find\">https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.try_find</a> does</p>",
        "id": 275118445,
        "sender_full_name": "scottmcm",
        "timestamp": 1647121105
    },
    {
        "content": "<p>Basically setting a fallback for inference? I would definitely like that.</p>",
        "id": 275118525,
        "sender_full_name": "Jacob Pratt ðŸ‡ºðŸ‡¦",
        "timestamp": 1647121245
    },
    {
        "content": "<p>Conceptually sortof, but not in actual implementation.  I don't want to block on the completely-unknown-whether-it's-possible idea of inference fallbacks.  So it's just a trait with an associated type, such that when you use <code>?</code> on an <code>Option</code>, it can use that trait to go \"oh, you'd like one of these but holding a U?  Sure, here's an <code>Option&lt;U&gt;</code>\".</p>",
        "id": 275118598,
        "sender_full_name": "scottmcm",
        "timestamp": 1647121373
    },
    {
        "content": "<p>See the (rather long) return type in that <code>try_find</code> I linked.</p>",
        "id": 275118612,
        "sender_full_name": "scottmcm",
        "timestamp": 1647121407
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 275118614,
        "sender_full_name": "Jacob Pratt ðŸ‡ºðŸ‡¦",
        "timestamp": 1647121414
    },
    {
        "content": "<p>(More specifically, <code>?</code> on an <code>Option&lt;T&gt;</code> splits it into a <code>T</code> and an <code>Option&lt;!&gt;</code>, and then there's a generic trait implemented for <code>Option&lt;!&gt;</code> so that it combines with a <code>U</code> to get <code>Option&lt;U&gt;</code> again.  <code>Iterator::try_fold</code> doesn't need this dance since it returns the same type that the closure does, but <code>try_find</code> has a closure that returns <code>Result&lt;bool, E&gt;</code> but the method wants to return <code>Result&lt;Option&lt;Item&gt;, E&gt;</code>.)</p>",
        "id": 275118688,
        "sender_full_name": "scottmcm",
        "timestamp": 1647121561
    },
    {
        "content": "<p>If that can help inference it would be quite nice indeed <span aria-label=\"ok\" class=\"emoji emoji-1f44c\" role=\"img\" title=\"ok\">:ok:</span> </p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Bikeshed  / aside</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>when I see <code>...Residual as Residual&lt;...&gt;</code> I don't feel like it reads very nicely / I always have to go back to the trait definitions, re-read some of them a couple times, until I remember that <code>Residual as Residual&lt;T&gt;</code> is actually sticking back a <code>T</code> as the <code>Output</code> of that \"<code>Output</code>-less\" <code>Residual</code>. So, what about: <code>WithOutput&lt;O&gt;</code>, <code>ChangeOutputTo&lt;O&gt;</code>, <code>IntoTryWithOutput&lt;O&gt;</code>, <code>WrapOutput&lt;O&gt;</code> or something like that instead?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// Currently</span>\n<span class=\"k\">fn</span> <span class=\"nf\">try_find</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">f</span>: <span class=\"nc\">F</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">&lt;&lt;</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Try</span><span class=\"o\">&gt;</span>::<span class=\"n\">Residual</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Residual</span><span class=\"o\">&lt;</span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">Item</span><span class=\"o\">&gt;&gt;&gt;</span>::<span class=\"n\">TryType</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">F</span>: <span class=\"nb\">FnMut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">Self</span>::<span class=\"n\">Item</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">R</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">R</span>: <span class=\"nc\">Try</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Try</span><span class=\"o\">&gt;</span>::<span class=\"n\">Residual</span>: <span class=\"nc\">Residual</span><span class=\"o\">&lt;</span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">Item</span><span class=\"o\">&gt;&gt;</span><span class=\"n\">rs</span><span class=\"w\"></span>\n\n<span class=\"sd\">/// Suggestion</span>\n<span class=\"k\">fn</span> <span class=\"nf\">try_find</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">f</span>: <span class=\"nc\">F</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">&lt;</span><span class=\"n\">R</span>::<span class=\"n\">Residual</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">WrapOutput</span><span class=\"o\">&lt;</span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">Item</span><span class=\"o\">&gt;&gt;&gt;</span>::<span class=\"n\">TryType</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">F</span>: <span class=\"nb\">FnMut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">Self</span>::<span class=\"n\">Item</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">R</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">R</span>: <span class=\"nc\">Try</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">R</span>::<span class=\"n\">Residual</span>: <span class=\"nc\">WrapOutput</span><span class=\"o\">&lt;</span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">Item</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n</code></pre></div>\n</div></div>",
        "id": 275123124,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1647129443
    },
    {
        "content": "<p>re the aside: please leave that in the trait's tracking issue, <a href=\"https://github.com/rust-lang/rust/issues/91285\">#91285</a> .  I'm always in favour of better names.  (And names are still an open question for TryV2 too, like <a href=\"https://github.com/rust-lang/rust/issues/84277#issuecomment-1035922689\">https://github.com/rust-lang/rust/issues/84277#issuecomment-1035922689</a> )</p>",
        "id": 275126453,
        "sender_full_name": "scottmcm",
        "timestamp": 1647135046
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245610\">@Jacob Pratt ðŸ‡ºðŸ‡¦</span> Well, I was overly optimistic once again, but here's what I've got so far:</p>\n<p><a href=\"https://github.com/scottmcm/rfcs/blob/try-again/text/0000-resolving-try-annotations.md#summary\">https://github.com/scottmcm/rfcs/blob/try-again/text/0000-resolving-try-annotations.md#summary</a></p>\n<p>Still needs drawbacks and rationales and such.  If you have any questions or suggestions, please let me know as they can make good sections <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> </p>\n<p>It's also using <a href=\"https://unicodesnowmanforyou.com/\"><code>â˜ƒ</code></a> as a bikeshed-avoidance token.  Please concentrate on the semantics, folks, and leave discussion for what token should go there for later.</p>",
        "id": 275766941,
        "sender_full_name": "scottmcm",
        "timestamp": 1647587695
    },
    {
        "content": "<p>I'll take a look at it in the morning. Looking forward to the infamous snowman.</p>",
        "id": 275767082,
        "sender_full_name": "Jacob Pratt ðŸ‡ºðŸ‡¦",
        "timestamp": 1647587883
    },
    {
        "content": "<p>Wouldn't the snowman variant just be type ascription?</p>",
        "id": 275866707,
        "sender_full_name": "The 8472",
        "timestamp": 1647639944
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/213817-t-lang/topic/try.20blocks/near/275866707\">said</a>:</p>\n<blockquote>\n<p>Wouldn't the snowman variant just be type ascription?</p>\n</blockquote>\n<p><code>let x = try â˜ƒ T { ... stuff ... };</code> and <code>let x: T = try { ... stuff ... };</code> do different things, so no, not exactly.</p>",
        "id": 275869803,
        "sender_full_name": "scottmcm",
        "timestamp": 1647642156
    },
    {
        "content": "<p>If the desugaring works (I trust you did your due diligence), then I think this looks good.</p>",
        "id": 275870267,
        "sender_full_name": "Jacob Pratt ðŸ‡ºðŸ‡¦",
        "timestamp": 1647642551
    },
    {
        "content": "<p>For snowman-building, I'd say something turbofish-like would make sense. <code>let x = try::&lt;_&gt; { â€¦ };</code>, or omitting the <code>::</code> because it's not syntactically necessary I believe: <code>let x = try&lt;_&gt; { â€¦ };</code></p>",
        "id": 275870385,
        "sender_full_name": "Jacob Pratt ðŸ‡ºðŸ‡¦",
        "timestamp": 1647642615
    },
    {
        "content": "<p>Oh, interesting! I haven't seen that suggestion before, and I think it looks good.</p>",
        "id": 275871045,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647643117
    },
    {
        "content": "<p>It allows knowledge transfer from people's existing understanding of turbofish.</p>",
        "id": 275871052,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647643130
    },
    {
        "content": "<p>Precisely. I honestly don't know what else could possibly make sense in that place.</p>",
        "id": 275871080,
        "sender_full_name": "Jacob Pratt ðŸ‡ºðŸ‡¦",
        "timestamp": 1647643165
    },
    {
        "content": "<p><code>try -&gt; T { ... }</code></p>",
        "id": 275871307,
        "sender_full_name": "cuviper",
        "timestamp": 1647643346
    },
    {
        "content": "<p>Is there anywhere outside of function/closure return types where that syntax is used to indicate types?</p>",
        "id": 275871365,
        "sender_full_name": "Jacob Pratt ðŸ‡ºðŸ‡¦",
        "timestamp": 1647643390
    },
    {
        "content": "<p>not that I know of, but I could imagine it for <code>async</code> blocks too</p>",
        "id": 275871563,
        "sender_full_name": "cuviper",
        "timestamp": 1647643533
    },
    {
        "content": "<p>True; the syntax would likely end up being the same.</p>",
        "id": 275871582,
        "sender_full_name": "Jacob Pratt ðŸ‡ºðŸ‡¦",
        "timestamp": 1647643554
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245610\">Jacob Pratt ðŸ‡ºðŸ‡¦</span> <a href=\"#narrow/stream/213817-t-lang/topic/try.20blocks/near/275870267\">said</a>:</p>\n<blockquote>\n<p>If the desugaring works [...]</p>\n</blockquote>\n<p>If you want to play with it a bit, here's the playground I was using to make sure: &lt;<a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=1d23417d06d1abb109da548df9024e54\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=1d23417d06d1abb109da548df9024e54</a>&gt;</p>",
        "id": 275873982,
        "sender_full_name": "scottmcm",
        "timestamp": 1647645508
    },
    {
        "content": "<p><code>try -&gt; T</code> was my first thought for the snowman too</p>",
        "id": 275882748,
        "sender_full_name": "David Hewitt",
        "timestamp": 1647655309
    },
    {
        "content": "<p>It fits really nicely into closure syntax <code>|x| try -&gt; Result&lt;Foo&gt; { ... }</code></p>",
        "id": 275882893,
        "sender_full_name": "David Hewitt",
        "timestamp": 1647655486
    },
    {
        "content": "<p>Note that it's useless there, though.  <code>|x| -&gt; Result&lt;Foo&gt; { ... }</code> does exactly the same thing as <code>|x| try â˜ƒ Result&lt;Foo&gt; { ... }</code>, so there's no need to ever write the latter -- it's just longer for no reason.</p>",
        "id": 275883475,
        "sender_full_name": "scottmcm",
        "timestamp": 1647656191
    },
    {
        "content": "<p>Tangentially, that's one of the things I like about new desugaring -- it means that top-level (un-annotated) <code>try{ ... }</code> becomes actually useful.</p>",
        "id": 275883691,
        "sender_full_name": "scottmcm",
        "timestamp": 1647656473
    },
    {
        "content": "<p>I think there is a difference in ok-wrapping? i.e. <code>|x| -&gt; Result&lt;_, !&gt; { Ok(x) }</code> vs <code>|x| try â˜ƒ Result&lt;_, !&gt; { x }</code></p>",
        "id": 275884399,
        "sender_full_name": "David Hewitt",
        "timestamp": 1647657443
    },
    {
        "content": "<p>Oh, that's right.  I guess that's a reason to use the latter.</p>",
        "id": 275885085,
        "sender_full_name": "scottmcm",
        "timestamp": 1647658367
    },
    {
        "content": "<p>That also gets into the whole <code>async || { ... }</code> vs <code>|| async { ... }</code> conversation -- arguably <code>try || { ... }</code> vs <code>|| try { ... }</code> should analogously exist too, though they don't today.</p>",
        "id": 275885168,
        "sender_full_name": "scottmcm",
        "timestamp": 1647658534
    },
    {
        "content": "<p>Continuing that thought to <code>async fn</code> and <code>try fn</code>, a complication of using <code>-&gt;</code> would be you'd imagine people would start asking for the same kind of structure for normal functions to get ok-wrapping, something like <code>fn(x: i32) try -&gt; Result&lt;i32, !&gt; { x }</code>. Unclear to me if that's desirable even if the syntax would suggest it.</p>",
        "id": 275885413,
        "sender_full_name": "David Hewitt",
        "timestamp": 1647658866
    },
    {
        "content": "<p><code>try || { ... }</code> vs <code>|| try { ... }</code> - where would snowman go in the first form? <code>try â˜ƒ Result&lt;_, !&gt; |x| { x }</code>, presumably. With <code>-&gt;</code> I'd be tempted to split it and have <code>try |x| -&gt; Result&lt;_, !&gt; { x }</code> enable the Into desugaring.</p>\n<p>At least, that makes sense to me as long as there's no semantic difference in how <code>try || { ... }</code> vs <code>|| try { ... }</code> would behave.</p>",
        "id": 275885931,
        "sender_full_name": "David Hewitt",
        "timestamp": 1647659752
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"249430\">@David Hewitt</span> I would expect to spell that <code>|x| -&gt; Result&lt;...&gt; { try { ... } }</code>.</p>",
        "id": 275886009,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647659878
    },
    {
        "content": "<p>Or if need be <code>|x| try&lt;Result&lt;...&gt;&gt; { ... }</code>.</p>",
        "id": 275886056,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647659916
    },
    {
        "content": "<p>I think in this proposal those two aren't equivalent? <code>|x| -&gt; Result&lt;...&gt; { try { ... } }</code> would use the \"inference-friendly\" <code>?</code> desugaring, <code>|x| try&lt;Result&lt;...&gt;&gt; { ... }</code> would use the current desugaring.</p>\n<p>That seems like a good reason to not use <code>-&gt;</code> for the snowman; <code>|| -&gt; Result&lt;...&gt; try { ... }</code> and <code>|| try -&gt; Result&lt;...&gt; { ... }</code> look very similar but would have different desugaring of <code>?</code> inside the block.</p>\n<p>EDIT: above <code>|| -&gt; Result&lt;...&gt; try { ... }</code> isn't legal syntax. It would have to be <code>|| -&gt; Result&lt;...&gt; { try { ... } }</code>. So I hold my opinion that <code>-&gt;</code> seems a good fit.</p>",
        "id": 275886568,
        "sender_full_name": "David Hewitt",
        "timestamp": 1647660719
    },
    {
        "content": "<p>That was what I meant by \"if need be\"; the desugaring of <code>try</code> was the difference between the two cases I posted.</p>",
        "id": 275886626,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647660779
    },
    {
        "content": "<p>But I don't think either case motivates a <code>try ||</code> syntax.</p>",
        "id": 275886636,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647660802
    },
    {
        "content": "<p>Right <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 275886699,
        "sender_full_name": "David Hewitt",
        "timestamp": 1647660865
    },
    {
        "content": "<p>Corrected my comment above. Agree with you that <code>try ||</code> doesn't seem necessary.</p>",
        "id": 275887101,
        "sender_full_name": "David Hewitt",
        "timestamp": 1647661495
    },
    {
        "content": "<p>For top-level functions, there's a rationale: it avoids writing an extra set of braces. But since closures don't require braces, that's not an issue here.</p>",
        "id": 275887163,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647661573
    },
    {
        "content": "<p>Yep absolutely. That's why I wondered how this syntax might interact with <code>try fn</code></p>",
        "id": 275887232,
        "sender_full_name": "David Hewitt",
        "timestamp": 1647661717
    },
    {
        "content": "<p>(Tangent: for the purposes of avoiding braces, I'm still finding the <code>fn func() -&gt; Type = try { ... }</code> syntax growing on me.)</p>",
        "id": 275887302,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647661807
    },
    {
        "content": "<p>Would it need to be <code>fn func() -&gt; Type = try â˜ƒ Type { ... }</code> to get \"normal\" <code>?</code> desugaring under this proposal?</p>",
        "id": 275887394,
        "sender_full_name": "David Hewitt",
        "timestamp": 1647662023
    },
    {
        "content": "<p>Given that <code>try { ... }</code> in other contexts would lead to non-converting desugaring.</p>",
        "id": 275887440,
        "sender_full_name": "David Hewitt",
        "timestamp": 1647662074
    },
    {
        "content": "<p>(That's why with <code>-&gt;</code> snowman it seems to me like this collapses cleanly to <code>fn func() try -&gt; Type { ... }</code>. I'm unconvinced I love <code>try</code> in that position despite the consistency.)</p>",
        "id": 275887609,
        "sender_full_name": "David Hewitt",
        "timestamp": 1647662368
    },
    {
        "content": "<p><code>fn func() -&gt; Type = try â˜ƒ _ { ... }</code> would be fine.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"249430\">David Hewitt</span> <a href=\"#narrow/stream/213817-t-lang/topic/try.20blocks/near/275886568\">said</a>:</p>\n<blockquote>\n<p>That seems like a good reason to not use <code>-&gt;</code> for the snowman; <code>|| -&gt; Result&lt;...&gt; try { ... }</code> and <code>|| try -&gt; Result&lt;...&gt; { ... }</code> look very similar but would have different desugaring of <code>?</code> inside the block.</p>\n</blockquote>\n<p>This is my primary thought when it comes to <code>â˜ƒ</code>.  Since <code>try â˜ƒ _ { ... }</code> and <code>try { ... }</code> do different things, I think it's important that <code>â˜ƒ</code> <em>not</em> be something where <code>â˜ƒ _</code> is commonly the same as leaving it off.</p>\n<p>That, to me, argues against a bunch of common options.  For example, <code>try&lt;_&gt; {</code> or <code>try::&lt;_&gt;</code> where mentioned, but I'm not a fan since <code>foo()</code> and <code>foo::&lt;_&gt;()</code> do the same thing (assuming <code>foo</code> has exactly one generic parameter).  Type ascription was also mentioned, but <code>let x: _ =</code> and <code>let x =</code> are equivalent, so I don't think <code>try:_{</code> and <code>try{</code> being different would be good.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span>'s <a href=\"https://github.com/rust-lang/rust/issues/70941#issuecomment-612167041\">instinct here</a> was <code>try as _</code>, which <em>does</em> pass the test, since <code>foo()</code> and <code>foo() as _</code> are often not equivalent.</p>\n<p>EDIT: Oh, looks like Niko's use of <code>try as</code> is older than that -- <a href=\"https://github.com/rust-lang/rfcs/pull/2388#issuecomment-378750364\">here's a comment from 4 years ago</a> also using it, in the \"reserve <code>try</code>\" RFC.</p>",
        "id": 275889309,
        "sender_full_name": "scottmcm",
        "timestamp": 1647664985
    },
    {
        "content": "<p>I'm trying (heh) to not break the minimal-change approach to improving <code>try</code> here, but the possible snowman syntaxes feel really confusing to me.</p>",
        "id": 275889421,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647665209
    },
    {
        "content": "<p>In the current state of the various evaluated alternatives, is it that it's <em>impossible</em> to make <code>try</code> do inference that gives \"priority\" to the outer type rather than the inner, or is it that it's <em>hard</em>?</p>",
        "id": 275889432,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647665271
    },
    {
        "content": "<p>FWIW, I had been assuming that <code>try&lt;_&gt; {</code> <em>would</em> be the same as <code>try {</code>.</p>",
        "id": 275889473,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647665327
    },
    {
        "content": "<p>I think it depends on the mythical \"type inference defaults\" stuff, but that doesn't exist and AFAIK isn't designed, so I don't know whether it'd work to solve this.</p>",
        "id": 275889596,
        "sender_full_name": "scottmcm",
        "timestamp": 1647665530
    },
    {
        "content": "<p>So, I have a kinda awful proposal.</p>",
        "id": 275889664,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647665671
    },
    {
        "content": "<p>And because of how method resolution works, anything that cares about the context is going to have trouble with <code>try { ... }.foo()</code>.</p>",
        "id": 275889677,
        "sender_full_name": "scottmcm",
        "timestamp": 1647665718
    },
    {
        "content": "<p>If, hypothetically, we think we <em>might</em> be able to make <code>try</code> do better inference in the future, but not soon, we could <em>just</em> support your proposed <code>try</code>/<code>?</code> desugaring without adding any snowman-syntax, and add a special case for try directly within an expression that gives it a concrete type (e.g. <code>let var: Result&lt;...&gt; = try {</code></p>",
        "id": 275889730,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647665794
    },
    {
        "content": "<p>Effectively a small subset of the desired inference.</p>",
        "id": 275889735,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647665809
    },
    {
        "content": "<p>I think part of my concern here is that the proposed <code>try</code>/<code>?</code> desugaring doesn't seem forwards-compatible with better inference?</p>",
        "id": 275889753,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647665862
    },
    {
        "content": "<p>Unless I'm missing something.</p>",
        "id": 275889760,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647665872
    },
    {
        "content": "<p>I'd be totally game to <em>only</em> have the un-annotated <code>try</code> with the new desugaring.  We could always start with that and leave another form to the future.</p>\n<p>I really don't like special-casing <code>try</code> in an annotated <code>let</code>, though.  That breaks the \"you can put it in a local\" thing that otherwise always works for typeck.  (It might make borrowck fail because of lifetimes, but the types work out.)</p>",
        "id": 275889983,
        "sender_full_name": "scottmcm",
        "timestamp": 1647666053
    },
    {
        "content": "<p>No argument there; I said \"kinda awful proposal\" for a reason. :)</p>",
        "id": 275890074,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647666159
    },
    {
        "content": "<p>But yeah, adding <em>just</em> the alternate desugaring and not having an escape hatch seems forwards-compatible.</p>",
        "id": 275890086,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647666190
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/try.20blocks/near/275889753\">said</a>:</p>\n<blockquote>\n<p>I think part of my concern here is that the proposed <code>try</code>/<code>?</code> desugaring doesn't seem forwards-compatible with better inference?</p>\n</blockquote>\n<p>It's really just a type ascription in the desugaring, so I think it'd be mostly fine.</p>\n<p>The change to the <code>?</code> desugaring is essentially</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"w\"> </span>match Try::branch(x) {<span class=\"w\"></span>\n<span class=\"w\"> </span>    ControlFlow::Continue(v) =&gt; v,<span class=\"w\"></span>\n<span class=\"gd\">-    ControlFlow::Break(r) =&gt; break 'try FromResidual::from_residual(r),</span><span class=\"w\"></span>\n<span class=\"gi\">+    ControlFlow::Break(r) =&gt; break 'try FromResidual::from_residual(r) : SpecialAnnotationHere,</span><span class=\"w\"></span>\n<span class=\"w\"> </span>}<span class=\"w\"></span>\n</code></pre></div>\n<p>So it really is just a matter of how that type gets picked.</p>",
        "id": 275890170,
        "sender_full_name": "scottmcm",
        "timestamp": 1647666292
    },
    {
        "content": "<p>I don't know that it'd necessarily be 100% inside-an-edition compatible, but I think that we could definitely remove that hint over an edition boundary without requiring any code changes to the vast majority of cases.</p>",
        "id": 275890240,
        "sender_full_name": "scottmcm",
        "timestamp": 1647666388
    },
    {
        "content": "<p>If nothing else, it could migrate code using that to <code>try â˜ƒ WhateverTheActualTypeIs {</code> 100% reliably, as it's <code>FromResidual::from_residual</code> either way, so the behaviour is guaranteed to be the same for that case.</p>",
        "id": 275890302,
        "sender_full_name": "scottmcm",
        "timestamp": 1647666528
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/try.20blocks/near/275890086\">said</a>:</p>\n<blockquote>\n<p>But yeah, adding <em>just</em> the alternate desugaring and not having an escape hatch seems forwards-compatible.</p>\n</blockquote>\n<p>Hmm, come to think of it, this is the easy part to prototype, since it doesn't touch the parser at all.</p>\n<p>If it then turns out that all (or nearly so) of the uses in the compiler code pass with the restrictive form, that might be good evidence that the non-annotated version is useful enough on its own to just add.</p>\n<p>(Though the annotated form opens a whole bunch of interesting possibilities, like <code>fn foo() { try â˜ƒ IgnoreErrors { ... code here using ? ... } }</code> for the \"can I use <code>?</code> in a <code>-&gt; ()</code> function?\" questions that come up a bunch on URLO.)</p>",
        "id": 275890726,
        "sender_full_name": "scottmcm",
        "timestamp": 1647667228
    },
    {
        "content": "<p>I got the impression that the snowman escape hatch is desirable to give users of existing try blocks on nightly a migration path?</p>",
        "id": 275890820,
        "sender_full_name": "David Hewitt",
        "timestamp": 1647667411
    },
    {
        "content": "<p><code>try as</code> seems good to me, as it's a verb we already use for conversion (which is what the snowman is enabling).</p>",
        "id": 275890874,
        "sender_full_name": "David Hewitt",
        "timestamp": 1647667491
    },
    {
        "content": "<p>Note that because <code>try</code> is a keyword, <code>â˜ƒ</code> doesn't even need to be a keyword.  I do like <code>as</code>, but if we want some other token like <code>try using anyhow::Result { ... }</code> that would work too.</p>",
        "id": 275892852,
        "sender_full_name": "scottmcm",
        "timestamp": 1647670526
    },
    {
        "content": "<p>Well, I implemented it: <a href=\"https://github.com/scottmcm/rust/commit/9484aba9bd707dedf49b5d8622cecd53f03b8797\">https://github.com/scottmcm/rust/commit/9484aba9bd707dedf49b5d8622cecd53f03b8797</a></p>\n<p>It turns out that 17 of the 18 <code>try</code> blocks in the compiler are totally fine without error conversion in <code>?</code>.</p>\n<p>And the one exception would actually be solved with a primitive <code>yeet</code> instead of the <code>Err(...)?</code> hack: <a href=\"https://github.com/scottmcm/rust/blob/9484aba9bd707dedf49b5d8622cecd53f03b8797/compiler/rustc_const_eval/src/interpret/terminator.rs#L456\">https://github.com/scottmcm/rust/blob/9484aba9bd707dedf49b5d8622cecd53f03b8797/compiler/rustc_const_eval/src/interpret/terminator.rs#L456</a></p>",
        "id": 275904384,
        "sender_full_name": "scottmcm",
        "timestamp": 1647687908
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/213817-t-lang/topic/try.20blocks/near/275766941\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"245610\">Jacob Pratt ðŸ‡ºðŸ‡¦</span> Well, I was overly optimistic once again, but here's what I've got so far:</p>\n<p><a href=\"https://github.com/scottmcm/rfcs/blob/try-again/text/0000-resolving-try-annotations.md#summary\">https://github.com/scottmcm/rfcs/blob/try-again/text/0000-resolving-try-annotations.md#summary</a></p>\n</blockquote>\n<p>this example is missing a crucial <code>?</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">pair_result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kr\">try</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fs</span>::<span class=\"n\">read_to_string</span><span class=\"p\">(</span><span class=\"s\">\"hello\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fs</span>::<span class=\"n\">read_to_string</span><span class=\"p\">(</span><span class=\"s\">\"world\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span>: <span class=\"kt\">i32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">parse</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// &lt;-- missing right here</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>\n<p>(and again a few paragraphs down, with the snowman)</p>",
        "id": 275924463,
        "sender_full_name": "RalfJ",
        "timestamp": 1647716582
    },
    {
        "content": "<p>Thanks, <span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span>!  Looks like I remembered it in the error, but not the code example, oops.  Fixed.</p>",
        "id": 275929844,
        "sender_full_name": "scottmcm",
        "timestamp": 1647724215
    },
    {
        "content": "<p>I like the suggested semantics very much, and the idea that <code>try</code> unannotated feature a \"best-effort\" semantic rather than our current <code>_</code> semantics. Nice!</p>\n<hr>\n<p>Now, i know you warned against syntax bikeshed, but in my defense it looks like it's too late and we may already be there, given the history of the discussion <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n<p>So, in that regard, would simple \"inner\" ascription be a decent candidate?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">pair_result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kr\">try</span>: <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">error</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fs</span>::<span class=\"n\">read_to_string</span><span class=\"p\">(</span><span class=\"s\">\"hello\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fs</span>::<span class=\"n\">read_to_string</span><span class=\"p\">(</span><span class=\"s\">\"world\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span>: <span class=\"kt\">i32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">parse</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>\n<ul>\n<li>\n<p>Indeed,  for some reason <code>try as</code> does not sound right to my ears; I guess it's because <code>as</code> involves an idea of <em>forced coercion</em>, where here we're just talking of a very gentle type inference nudging.</p>\n</li>\n<li>\n<p>and regarding <code>try -&gt;</code>, it's not great either (although preferable to <code>as</code>, imho), since arrows have, historically, a quite heavy functional taint attached to them, which could suggest / hint at the idea of a <em>suspension</em> within the <code>try</code> block, which is very much not the case (contrary to closures or <code>async</code>).</p>\n</li>\n<li>\n<p>The turbofish would be the other very nice candidate, imho (semantically unambiguous) â€” but it's true that it's syntactically a tad more heavyweight than <code>:</code></p>\n</li>\n</ul>",
        "id": 275930704,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1647725520
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span> <a href=\"#narrow/stream/213817-t-lang/topic/try.20blocks/near/275930704\">said</a>:</p>\n<blockquote>\n<p>I like the suggested semantics very much, and the idea that <code>try</code> unannotated feature a \"best-effort\" semantic rather than our current <code>_</code> semantics. Nice!</p>\n</blockquote>\n<p>Thanks!</p>\n<blockquote>\n<p>Now, i know you warned against syntax bikeshed, but in my defense it looks like it's too late and we may already be there, given the history of the discussion <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>\n<p>Yeah, sadly.</p>\n<blockquote>\n<p>So, in that regard, would simple \"inner\" ascription be a decent candidate?</p>\n</blockquote>\n<p>I mention that one in<br>\n<a href=\"#narrow/stream/213817-t-lang/topic/try.20blocks/near/275889309\">https://rust-lang.zulipchat.com/#narrow/stream/213817-t-lang/topic/try.20blocks/near/275889309</a></p>\n<blockquote>\n<p>I guess it's because <code>as</code> involves an idea of <em>forced coercion</em>, where here we're just talking of a very gentle type inference nudging.</p>\n</blockquote>\n<p>I think it's important to look at the <em>effect</em> of that nudging.  Because in the new desugaring for the non-annotated case, a <code>Result&lt;_, E&gt;</code> can only become a <code>Result&lt;_, E&gt;</code> -- no transformation is applied to the error value at all.  While the difference in the desugaring is just a type nudge, the <code>â˜ƒ Result&lt;_, F&gt;</code> annotation is causing <code>F::from(e)</code> to be called in every <code>?</code> .  Which is why I think \"forced\" conversion is at least somewhat appropriate.</p>\n<p>I suppose one could lean into that by picking something like <code>try into Result&lt;_, Box&lt;dyn std::error::Error&gt;&gt; { ... }</code> for <code>â˜ƒ</code>.  (Though that then starts to look like <code>try_into</code>, which might also be a bad parallel.)</p>",
        "id": 275933421,
        "sender_full_name": "scottmcm",
        "timestamp": 1647728929
    },
    {
        "content": "<p>I think that the distinction of <code>_</code> vs nothing that you pointed out already (which I overlooked when skimming, my bad) is indeed a good argument against <code>:</code> (with all that considered, maybe the argument against <code>try -&gt;</code> and \"lazy or not\" evaluation is the mootest of them all, that is to say I recant my objection in that regard)</p>",
        "id": 275937238,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1647734778
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232018\">Daniel Henry-Mantilla</span> <a href=\"#narrow/stream/213817-t-lang/topic/try.20blocks/near/275930704\">said</a>:</p>\n<blockquote>\n<p>i know you warned against syntax bikeshed, but in my defense it looks like it's too late and we may already be there, given the history of the discussion</p>\n</blockquote>\n<p>I think that's because it's quite clear that <em>something</em> should be done here, so we may as well move ahead to bikeshedding <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 275945948,
        "sender_full_name": "Jacob Pratt ðŸ‡ºðŸ‡¦",
        "timestamp": 1647748897
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> I'm skimming the link you gave, is the tl;dr that <code>?</code> inside of <code>try</code> does not use <code>From</code>?</p>",
        "id": 276104672,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647892287
    },
    {
        "content": "<p>(unless you manually annotate)</p>",
        "id": 276104686,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647892301
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Yes.</p>\n<p>The slightly longer TLDR is that it blocks all interoperations, so if you'd made a <code>MyResult</code> (that's not just a type alias for <code>Result</code>) that wouldn't be allowed either.</p>",
        "id": 276106127,
        "sender_full_name": "scottmcm",
        "timestamp": 1647893022
    },
    {
        "content": "<p>OK. I'm not sure what an \"interoperation\" is</p>",
        "id": 276106226,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647893054
    },
    {
        "content": "<p>this is probably a reasonable step to take</p>",
        "id": 276106240,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647893061
    },
    {
        "content": "<p>You can make a <code>NikoResult</code> that implements <code>FromResidual&lt;Option&lt;!&gt;&gt;</code>, and that would allow <code>?</code> on <code>Option</code>s inside something returning <code>NikoResult</code>.  That wouldn't be allowed here; <code>?</code> on <code>Option</code>s would <em>only</em> give back <code>Option</code>s.  (Unless you used the annotated version that allows the generality again.)</p>",
        "id": 276106357,
        "sender_full_name": "scottmcm",
        "timestamp": 1647893121
    },
    {
        "content": "<p>Said otherwise, there's more freedom than <em>just</em> the <code>From</code>.  So it blocks that freedom too.</p>",
        "id": 276106516,
        "sender_full_name": "scottmcm",
        "timestamp": 1647893188
    },
    {
        "content": "<p>Sorry for the tangent, but Iâ€™ve often wondered if we should have some convenient syntax for â€˜intoâ€™ conversions, which might help here (convenient as in less noisy to read/write but also letâ€™s you easily specify the target type)</p>",
        "id": 276110594,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1647895410
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>, I've wanted something equivalent to <code>.into::&lt;Type&gt;()</code> for a while.</p>",
        "id": 276111181,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647895722
    },
    {
        "content": "<p>I'm pretty sure everyone has wanted that on a number of occasions.</p>",
        "id": 276112116,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1647896145
    },
    {
        "content": "<p>overloadable <code>as</code> :P</p>",
        "id": 276118998,
        "sender_full_name": "bstrie",
        "timestamp": 1647899568
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">To</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">to</span><span class=\"o\">&lt;</span><span class=\"n\">Dest</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Dest</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"bp\">Self</span>: <span class=\"nb\">Into</span><span class=\"o\">&lt;</span><span class=\"n\">Dest</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nb\">Into</span><span class=\"o\">&lt;</span><span class=\"n\">Dest</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">into</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">To</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span>: <span class=\"kt\">u8</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">to</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u16</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p><a href=\"https://play.rust-lang.org/?edition=2021&amp;gist=c7605f7eb605f56788942c26505907a6\">https://play.rust-lang.org/?edition=2021&amp;gist=c7605f7eb605f56788942c26505907a6</a></p>",
        "id": 276120944,
        "sender_full_name": "Jules Bertholet",
        "timestamp": 1647900844
    },
    {
        "content": "<p>I've been thinking more about this, and about the feedback here.</p>\n<p>I realized I've been thinking too narrowly about this.  I had mentally restricted myself to <code>â˜ƒ</code> being a single token, but of course that's not actually a requirement.</p>\n<p>The \"why not <code>:</code>?\"feedback is common, and TBH I'd like using <code>:</code> for types best.  But there's an obvious way we can do that while still making it different: add a <em>different</em> token for that.</p>\n<p>Concretely, we could have </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kr\">try</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>be the new way (and possibly allow <code>try : Foo { ... }</code> as well if we wanted, though it's not terribly useful there)</p>\n<p>But then have both of these exist for the other way:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kr\">try</span><span class=\"w\"> </span><span class=\"err\">â˜ƒ</span>: <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"kr\">try</span><span class=\"w\"> </span><span class=\"err\">â˜ƒ</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"c1\">// same as `try â˜ƒ: _ { ... }`</span>\n</code></pre></div>\n<p>Where <code>â˜ƒ</code> is again a placeholder.  For a \"too verbose, please invent something better\" strawman, it could for example be </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kr\">try</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">conversions</span><span class=\"w\"> </span>: <span class=\"nc\">anyhow</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>How would people feel about that variation?</p>",
        "id": 276820787,
        "sender_full_name": "scottmcm",
        "timestamp": 1648434959
    },
    {
        "content": "<p>(Or the other order could work too, still without reserving extra keywords, like <code>converting try : anyhow::Result&lt;_&gt; { ... }</code>.)</p>",
        "id": 276820845,
        "sender_full_name": "scottmcm",
        "timestamp": 1648435037
    },
    {
        "content": "<blockquote>\n<p>how would people feel about that variation?</p>\n</blockquote>\n<p>Initial reaction is \"that's way too long\"</p>",
        "id": 276823107,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1648437097
    },
    {
        "content": "<p>Debating throwing more paint at the bikeshed or not</p>",
        "id": 276823434,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1648437525
    },
    {
        "content": "<p>Yolo</p>",
        "id": 276823438,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1648437540
    },
    {
        "content": "<p>Monad brain be like <code>try within anyhow::Result&lt;_&gt; {}</code></p>",
        "id": 276823456,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1648437581
    },
    {
        "content": "<p><code>try into anyhow::Result&lt;_&gt; {}</code>?</p>",
        "id": 276873456,
        "sender_full_name": "RalfJ",
        "timestamp": 1648474430
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> That came up earlier in the thread, but it has the issue of being confusingly similar to <code>tty_into</code>.</p>",
        "id": 276886413,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648479715
    },
    {
        "content": "<p><code>try in</code> works with monad brain</p>",
        "id": 276900367,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1648485652
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132829\">Christopher Durham</span> <a href=\"#narrow/stream/213817-t-lang/topic/try.20blocks/near/276900367\">said</a>:</p>\n<blockquote>\n<p><code>try in</code> works with monad brain</p>\n</blockquote>\n<p>it also works with effect systems brain</p>",
        "id": 276900765,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1648485825
    },
    {
        "content": "<p>and is vaguely consistent with <code>for _ in _</code></p>",
        "id": 276900786,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1648485835
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby [she/her]</span> <a href=\"#narrow/stream/213817-t-lang/topic/try.20blocks/near/276900786\">said</a>:</p>\n<blockquote>\n<p>and is vaguely consistent with <code>for _ in _</code></p>\n</blockquote>\n<p>is it? in <code>for</code>, there's an expression after <code>in</code>, whereas with <code>try in</code> it's a type...</p>",
        "id": 276903053,
        "sender_full_name": "RalfJ",
        "timestamp": 1648486822
    },
    {
        "content": "<p>I think the placement operator is still reserved.</p>",
        "id": 276903157,
        "sender_full_name": "The 8472",
        "timestamp": 1648486867
    },
    {
        "content": "<p><code>try as Foo { ... }</code> ?</p>",
        "id": 276903430,
        "sender_full_name": "cuviper",
        "timestamp": 1648486981
    },
    {
        "content": "<p>oh I guess that was mentioned already</p>",
        "id": 276903532,
        "sender_full_name": "cuviper",
        "timestamp": 1648487026
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/213817-t-lang/topic/try.20blocks/near/276903053\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby [she/her]</span> <a href=\"#narrow/stream/213817-t-lang/topic/try.20blocks/near/276900786\">said</a>:</p>\n<blockquote>\n<p>and is vaguely consistent with <code>for _ in _</code></p>\n</blockquote>\n<p>is it? in <code>for</code>, there's an expression after <code>in</code>, whereas with <code>try in</code> it's a type...</p>\n</blockquote>\n<p>yea, like I said it's only vaguely similar. The best framing I can come up with is that for is operating inside of an existing value and try is operating inside of a value yet to be constructed</p>",
        "id": 276904341,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1648487438
    },
    {
        "content": "<p>I think <code>try {}</code> vs <code>try as _ {}</code> <em>is</em> my favourite of that form, <span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span>.  Like how <code>box e</code> and <code>box e as _</code> do slightly things.</p>",
        "id": 276910961,
        "sender_full_name": "scottmcm",
        "timestamp": 1648490821
    },
    {
        "content": "<p><code>try mixed { ... }</code> vs <code>try { ... }</code>?</p>",
        "id": 276911007,
        "sender_full_name": "scottmcm",
        "timestamp": 1648490854
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/213817-t-lang/topic/try.20blocks/near/276911007\">said</a>:</p>\n<blockquote>\n<p><code>try mixed { ... }</code> vs <code>try { ... }</code>?</p>\n</blockquote>\n<p>you lost me on this one, what is try mixed?</p>",
        "id": 276915038,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1648492916
    },
    {
        "content": "<p>my confusion may be all the answer you needed to your question, lol</p>",
        "id": 276915124,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1648492945
    },
    {
        "content": "<p>Well, as in heterogeneous try vs homogeneous try.</p>\n<p>But <code>try heterogeneous : anyhow::Result&lt;_&gt; { ... }</code> is definitely too long :P</p>",
        "id": 276920537,
        "sender_full_name": "scottmcm",
        "timestamp": 1648495886
    },
    {
        "content": "<p>ah, but the mixed one would still have to include a type</p>",
        "id": 276920699,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1648495962
    },
    {
        "content": "<p>you just left it out for brevity in your example</p>",
        "id": 276920719,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1648495971
    },
    {
        "content": "<p>Well, having the extra word means that it <em>could</em> just be <code>try heterogeneous  { ... }</code>, and it would behave like <code>try heterogeneous : _ { ... }</code>.</p>\n<p>So if you wanted to write </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nc\">anyhow</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kr\">try</span><span class=\"w\"> </span><span class=\"n\">heterogeneous</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>\n<p>instead, you could.</p>\n<p>I don't have a good intuition right now of how often someone would end up wanting <code>try as _ {</code> in that version of it -- if it's rare that's fine, if it's common then the version where the type hint is separate from the semantic change might be better.</p>\n<p>(Hopefully I'm clearer this time.)</p>",
        "id": 276921117,
        "sender_full_name": "scottmcm",
        "timestamp": 1648496175
    },
    {
        "content": "<p>oh I quite like that</p>",
        "id": 276921468,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1648496394
    },
    {
        "content": "<p>laughing at some of these</p>",
        "id": 276921681,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1648496519
    },
    {
        "content": "<blockquote>\n<p>Synonyms for heterogeneous<br>\n   assorted, eclectic, indiscriminate, kitchen-sink, magpie, miscellaneous, mixed, motley, patchwork, piebald, promiscuous, raggle-taggle, ragtag, varied</p>\n</blockquote>",
        "id": 276921728,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1648496528
    },
    {
        "content": "<p>mixed really does seem like the best option (if not the most fun)</p>",
        "id": 276921766,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1648496559
    },
    {
        "content": "<p>my vote is for <code>try raggle-taggle { ... }</code>, the most fun option. It does bring up the issue of the <code>-</code> though... can a keyword have a hyphen <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 276921989,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1648496701
    },
    {
        "content": "<p>Whatever we put here doesn't need to be a keyword -- it's hidden by the <code>try</code> keyword, so the only restrictions are:</p>\n<ul>\n<li>doesn't have <code>{</code></li>\n<li>doesn't have <code>:</code></li>\n<li>doesn't have unbalanced token tree delimiters</li>\n</ul>",
        "id": 276924974,
        "sender_full_name": "scottmcm",
        "timestamp": 1648498303
    },
    {
        "content": "<p>(<code>mixed try { ... }</code> could work too, though a prefix means lookahead to find the <code>try</code>, so for that one I wouldn't want it to be <code>some long &amp; complicated try { ... }</code>, even though it'd \"work\".  That doesn't have the same parsing implications if it's a suffix.)</p>",
        "id": 276925484,
        "sender_full_name": "scottmcm",
        "timestamp": 1648498465
    },
    {
        "content": "<p>(<code>try but long &amp; complicated {</code> is still LL(1), I think <span aria-label=\"smiling devil\" class=\"emoji emoji-1f608\" role=\"img\" title=\"smiling devil\">:smiling_devil:</span>)</p>",
        "id": 276925792,
        "sender_full_name": "scottmcm",
        "timestamp": 1648498570
    },
    {
        "content": "<p>tbh i don't feel most of these are compelling over the existing syntax, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kr\">try</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fs</span>::<span class=\"n\">read_to_string</span><span class=\"p\">(</span><span class=\"s\">\"hello\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fs</span>::<span class=\"n\">read_to_string</span><span class=\"p\">(</span><span class=\"s\">\"world\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span>: <span class=\"kt\">i32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">parse</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276928244,
        "sender_full_name": "mejrs",
        "timestamp": 1648499988
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"433532\">mejrs</span> <a href=\"#narrow/stream/213817-t-lang/topic/try.20blocks/near/276928244\">said</a>:</p>\n<blockquote>\n<p>tbh i don't feel most of these are compelling over the existing syntax, e.g.</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kr\">try</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fs</span>::<span class=\"n\">read_to_string</span><span class=\"p\">(</span><span class=\"s\">\"hello\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fs</span>::<span class=\"n\">read_to_string</span><span class=\"p\">(</span><span class=\"s\">\"world\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span>: <span class=\"kt\">i32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">parse</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>did you read <a href=\"https://github.com/scottmcm/rfcs/blob/try-again/text/0000-resolving-try-annotations.md#summary\">https://github.com/scottmcm/rfcs/blob/try-again/text/0000-resolving-try-annotations.md#summary</a>? I think it pretty clearly outlines why the existing syntax is insufficient by itself</p>",
        "id": 276928783,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1648500269
    },
    {
        "content": "<p>Fair enough. I have used <code>try</code> blocks in my own code and never found them problematic w/r having to give type hints</p>",
        "id": 276933231,
        "sender_full_name": "mejrs",
        "timestamp": 1648502591
    },
    {
        "content": "<p>Do you have a link I could look at, <span class=\"user-mention\" data-user-id=\"433532\">@mejrs</span>?  I'd like to see how you use them to have better context for the RFC I'm writing.</p>",
        "id": 276933581,
        "sender_full_name": "scottmcm",
        "timestamp": 1648502774
    },
    {
        "content": "<p>For example, <a href=\"https://github.com/mejrs/rs3cache/blob/master/src/definitions/location_configs.rs#L234\">https://github.com/mejrs/rs3cache/blob/master/src/definitions/location_configs.rs#L234</a> (i don't know how easy this is to parse, the data format it decodes is somewhat cursed)</p>",
        "id": 276933825,
        "sender_full_name": "mejrs",
        "timestamp": 1648502900
    },
    {
        "content": "<p>it boils down to </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">deserialize</span><span class=\"p\">(</span><span class=\"n\">id</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buffer</span>: <span class=\"nc\">Bytes</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ReadError</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">loc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">id</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">..</span><span class=\"nb\">Default</span>::<span class=\"n\">default</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">opcode</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">try_get_u8</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">read</span>: <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">ReadError</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kr\">try</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">opcode</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">has_remaining</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"cm\">/* .. */</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"k\">break</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">loc</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"c1\">// big match block</span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">read</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"cm\">/* .. */</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"err\">```</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276933841,
        "sender_full_name": "mejrs",
        "timestamp": 1648502910
    },
    {
        "content": "<p>Ah, even has a <code>break</code>, nice.  That extra helps for the \"just use an IIFE\" comments that are sure to come when <code>try</code> gets talked about.</p>",
        "id": 276933933,
        "sender_full_name": "scottmcm",
        "timestamp": 1648502982
    },
    {
        "content": "<p>Are all your <code>?</code>s on <code>Result&lt;_, ReadError&gt;</code>?</p>\n<p><code>try_get_u8</code> and friends seems to be, at least <a href=\"https://github.com/mejrs/rs3cache/blob/19abad75314f6a5faadc6d7fd03cdf58eb80e9aa/rs3cache_backend/src/buf.rs#L162\">https://github.com/mejrs/rs3cache/blob/19abad75314f6a5faadc6d7fd03cdf58eb80e9aa/rs3cache_backend/src/buf.rs#L162</a></p>",
        "id": 276934125,
        "sender_full_name": "scottmcm",
        "timestamp": 1648503084
    },
    {
        "content": "<p>Yeah, i originally tried to use an iife, but you cannot break out of it. That's the nice thing about hobby projects though - you can just keep adding nightly features</p>",
        "id": 276934134,
        "sender_full_name": "mejrs",
        "timestamp": 1648503091
    },
    {
        "content": "<p>I don't know all the types, but it looks like that example is homogeneous, right <span class=\"user-mention\" data-user-id=\"433532\">@mejrs</span>?  So it'd just be <code>let read = try {</code> and success.</p>",
        "id": 276945057,
        "sender_full_name": "scottmcm",
        "timestamp": 1648512564
    },
    {
        "content": "<p>It's seeming like the <em>vast</em> majority of the <code>try</code> cases I'm finding are homogeneous</p>",
        "id": 276945120,
        "sender_full_name": "scottmcm",
        "timestamp": 1648512613
    },
    {
        "content": "<p>Would it be worthwhile to attempt the proposed desugaring <em>without</em> permitting conversions, at least initially? That would let us judge just how much desire/demand there is for heterogeneous cases.</p>",
        "id": 276947895,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1648515926
    },
    {
        "content": "<p>Indeed, I've already implemented it <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> <a href=\"https://github.com/scottmcm/rust/commit/9484aba9bd707dedf49b5d8622cecd53f03b8797\">https://github.com/scottmcm/rust/commit/9484aba9bd707dedf49b5d8622cecd53f03b8797</a></p>\n<p>That's how I know that 17/18 of the try blocks in <code>rustc</code> are homogeneous.</p>",
        "id": 276950711,
        "sender_full_name": "scottmcm",
        "timestamp": 1648519499
    },
    {
        "content": "<p>I guess I'm hitting the \"what process approval do I need\" trouble.</p>\n<p>Maybe I should just write the RFC for the simple homogeneous case, and leave the heterogeneous case as Future Work.</p>",
        "id": 276950790,
        "sender_full_name": "scottmcm",
        "timestamp": 1648519583
    },
    {
        "content": "<p>(Maybe that last statement is also what you were saying)</p>",
        "id": 276950798,
        "sender_full_name": "scottmcm",
        "timestamp": 1648519597
    },
    {
        "content": "<p>Something I realized: while <code>in</code> is followed by an expression in <code>for _ in _</code>, it's followed by a path in the (admittedly rare) <code>pub(in path)</code></p>",
        "id": 276975854,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1648544356
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> would it be possible to start with a method for the heterogenous case? Similar to how we already have <code>.ready()?</code>, we could have a <code>.yeet_into()?</code> <del>yeento</del> adapter?</p>\n<p>And whenever <code>try { â€¦ .yeento()? â€¦ .yeento()? }</code> ends up being more frequent than we'd like, if ever, ony then would we could consider the <code>try yeentoing { â€¦ }</code> shorthand <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>\n<ul>\n<li>or would it be <code>yeeto</code> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></li>\n</ul>",
        "id": 276985040,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1648549909
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/213817-t-lang/topic/try.20blocks/near/276945120\">said</a>:</p>\n<blockquote>\n<p>It's seeming like the <em>vast</em> majority of the <code>try</code> cases I'm finding are homogeneous</p>\n</blockquote>\n<p>FWIW, I've avoided using try blocks as they are nightly (IIFEs are generally good enough, otherwise I bite the bullet and make a new function), but I'd expect most of my usages to be heterogenous as that's kind of how SNAFU works.</p>",
        "id": 277009096,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1648562622
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span> I'd rather not <em>aim</em> for that approach since the tradeoff of needing to update it on most, if not all, of the <code>?</code> is poor.  It's like how we could have had people do <code>.map_err(Into::into)?</code> whenever they wanted the heterogeneous case, but we didn't.</p>\n<p>But the \"let's just address the homogeneous case first\" seems like the way forward I should do for the RFC, at least.</p>\n<p>(And maybe have <code>try heterogeneous {</code> with today's behaviour as a placeholder for nightly users to migrate to if needed.)</p>",
        "id": 277037351,
        "sender_full_name": "scottmcm",
        "timestamp": 1648573993
    },
    {
        "content": "<p>Honestly, if it isn't <code>try {</code> with no extra syntax, or at most some syntax that looks like type ascription, then I can't see myself ever using try or recommending that anyone else does either. It needs to Just Work without looking weird or being more verbose than current solutions.</p>",
        "id": 277041088,
        "sender_full_name": "bstrie",
        "timestamp": 1648575633
    },
    {
        "content": "<p>\"Read my lips: no new syntaxes.\"</p>",
        "id": 277041327,
        "sender_full_name": "bstrie",
        "timestamp": 1648575764
    },
    {
        "content": "<p><em>breathes in deeply... sighs</em> ah yes, I do love the smell of fresh paint in the morning</p>",
        "id": 277044252,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1648577119
    },
    {
        "content": "<p>yeah it has to <em>work</em> with <code>try{</code> even if there's also like, <code>try as MyType {</code> available</p>",
        "id": 277065049,
        "sender_full_name": "Lokathor",
        "timestamp": 1648588100
    },
    {
        "content": "<p>My vote goes to <code>try {</code> and <code>try: _ {</code> being different. We'll get over it, there are already things which are at least as weird:</p>\n<ul>\n<li><code>&amp;ref x</code> not always being equivalent to <code>x</code> in a <code>&amp;T</code> pattern</li>\n<li><code>(&amp;x,)</code> not working even though <code>(x,)</code> yields a variable of type <code>&amp;T</code> if matching <code>&amp;(T,)</code></li>\n<li><code>for x in mut_ref {</code> consumes <code>mut_ref: &amp;mut T</code> instead of reborrowing like it does in most other places</li>\n<li><code>let x = a;</code> and <code>match a { x =&gt; ... }</code> are not equivalent because of temporary lifetimes</li>\n<li><code>e;</code> and <code>let _ = e;</code> are not equivalent</li>\n</ul>",
        "id": 277074965,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648594376
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/213817-t-lang/topic/try.20blocks/near/277065049\">said</a>:</p>\n<blockquote>\n<p>yeah it has to <em>work</em> with <code>try{</code></p>\n</blockquote>\n<p>Can you clarify what \"it\" is, specifically?  The plan is certainly that <code>try {</code> will usually \"just work\".</p>",
        "id": 277076457,
        "sender_full_name": "scottmcm",
        "timestamp": 1648595645
    },
    {
        "content": "<p>I don't think the fact that we already have inconsistencies is a sufficiently strong justification for adding new inconsistencies.</p>",
        "id": 277077892,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1648596882
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/213817-t-lang/topic/try.20blocks/near/277076457\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/213817-t-lang/topic/try.20blocks/near/277065049\">said</a>:</p>\n<blockquote>\n<p>yeah it has to <em>work</em> with <code>try{</code></p>\n</blockquote>\n<p>Can you clarify what \"it\" is, specifically?  The plan is certainly that <code>try {</code> will usually \"just work\".</p>\n</blockquote>\n<p>defined as \"the compiler accepts it and continues the build, though maybe something else fails later on\".</p>\n<p>Similar to <code>let x =</code> being valid, though maybe <code>let x: MyType =</code> is what you need in advanced cases.</p>",
        "id": 277078460,
        "sender_full_name": "Lokathor",
        "timestamp": 1648597364
    },
    {
        "content": "<p>i think that's the whole point of making the default mode homogenous and based on Residual</p>",
        "id": 277078728,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1648597655
    },
    {
        "content": "<p>it makes the default <code>try { }</code> syntax work in many more places without extra annotations</p>",
        "id": 277078735,
        "sender_full_name": "Jane Lusby [she/her]",
        "timestamp": 1648597667
    },
    {
        "content": "<p>Yup, that's exactly it.  Right now unannotated try fails in too many situations (see Niko's comment in <a href=\"https://github.com/rust-lang/rust/issues/70941#issuecomment-612167041\">https://github.com/rust-lang/rust/issues/70941#issuecomment-612167041</a>) so the whole goal here is to make the easy cases easier today (with the nice short syntax), and make the advanced ones still possible (just with a few characters more typing in those advanced ones)</p>",
        "id": 277079613,
        "sender_full_name": "scottmcm",
        "timestamp": 1648598413
    },
    {
        "content": "<p>let me just add one more thought</p>",
        "id": 277113119,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648630586
    },
    {
        "content": "<p>even though I've resisted talking about inference fallback...</p>",
        "id": 277113141,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648630604
    },
    {
        "content": "<p>...there are definitely uses for it...</p>",
        "id": 277113148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648630612
    },
    {
        "content": "<p>it certainly seems plausible that we could detect \"<code>?</code> was applied to homogeneous types\"--</p>",
        "id": 277113191,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648630634
    },
    {
        "content": "<p>/me thinks a bit more</p>",
        "id": 277113227,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648630650
    },
    {
        "content": "<p>that may not be true I guess :) I could see it getting stuck</p>",
        "id": 277113246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648630660
    },
    {
        "content": "<p>still, I've been working a lot on a newer approach to type inference (in the formality repo, to be clear, not actual code) and I feel like there's a <em>universe</em> where we could design more advanced fallback questions without being totally adhoc</p>",
        "id": 277113341,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648630692
    },
    {
        "content": "<p>but I can't say that with confidence yet</p>",
        "id": 277113352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648630699
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/213817-t-lang/topic/try.20blocks/near/277074965\">said</a>:</p>\n<blockquote>\n<p>My vote goes to <code>try {</code> and <code>try: _ {</code> being different. We'll get over it, there are already things which are at least as weird:</p>\n</blockquote>\n<p>Yeah, this may not be as bad as it looks. I think another nice example of this distinction already existing in current code is:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">i32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// nudge inference here</span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">i32</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>not meaning the same (currently the latter fails to compile, while the former will yield a closure that can't be fed to APIs expecting a higher-order closure).</p>",
        "id": 277142950,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1648646367
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/213817-t-lang/topic/try.20blocks/near/277037351\">said</a>:</p>\n<blockquote>\n<p>It's like how we could have had people do <code>.map_err(Into::into)?</code> whenever they wanted the heterogeneous case, but we didn't.</p>\n</blockquote>\n<p>even though we didn't (and rightfully so, don't get me wrong), there is still an operation there, the <code>FromResidual::from_residual</code> mapping on the <code>Residual</code> variant, which is something that could deserve a name in and of itself (I have joked about calling it <code>yeento</code> or <code>yeeto</code>, for instance). Should we have such a name, it could help us find a name for the modifier to use with the <code>try</code> block. This is to nuance the suggestion from some people to use <code>into</code>, when the <code>try</code> semantics no longer use the <code>Into</code> trait, which is why I'm not fond of that.</p>",
        "id": 277143484,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1648646595
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232018\">Daniel Henry-Mantilla</span> <a href=\"#narrow/stream/213817-t-lang/topic/try.20blocks/near/277143484\">said</a>:</p>\n<blockquote>\n<p>when the <code>try</code> semantics no longer use the <code>Into</code> trait, which is why I'm not fond of that.</p>\n</blockquote>\n<p>AFAIK neither <code>r#try!</code> nor <code>?</code> have ever used <code>Into</code>.</p>\n<p>That one I do think that we can change eventually.  It's technically a minor change -- the breakage currently is inference breakage -- so a smarter algorithm for that could absolutely let it work.</p>",
        "id": 277169838,
        "sender_full_name": "scottmcm",
        "timestamp": 1648657439
    }
]