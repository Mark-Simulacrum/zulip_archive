[
    {
        "content": "<p>Imagine for a moment that we have a generic structure with more than one generic type, such as either of these:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">VolSeries</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">W</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">S</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">GenericLcg64</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">MUL</span>: <span class=\"kt\">u64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ADD</span>: <span class=\"kt\">u64</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>When a user goes to instantiate the generics it would be very easy to not remember the correct ordering for <code>R</code> and <code>W</code>, or for <code>MUL</code> and <code>ADD</code>.</p>\n<p>We're actually already familiar with this problem! It happens in structs that have many fields, and so with structs we name each field we're putting a value to which makes clear what goes where. <code>Struct { f1: true, f2: false }</code>, and so on.</p>\n<p>This doesn't <em>seem</em> to be possible with generics according to any of the syntaxes for how to do this that I guessed at, but it feels like it <em>should</em> be possible to express within Rust.</p>",
        "id": 246283239,
        "sender_full_name": "Lokathor",
        "timestamp": 1626471312
    },
    {
        "content": "<p>I wonder if we could allow <code>where</code> in more places to do something like that.</p>",
        "id": 246284537,
        "sender_full_name": "eholk",
        "timestamp": 1626472056
    },
    {
        "content": "<p>I was hoping that <code>=</code> or <code>:</code> might be possible without breaking any previous part of the syntax.</p>",
        "id": 246298139,
        "sender_full_name": "Lokathor",
        "timestamp": 1626487420
    },
    {
        "content": "<p>Could always change that second one to take a struct with <code>mul</code> and <code>add</code> fields.</p>\n<p>But in general I think this is the same problem as named function arguments, with mostly the same questions (like not making names part of the public API implicitly).</p>",
        "id": 246630916,
        "sender_full_name": "scottmcm",
        "timestamp": 1626805943
    },
    {
        "content": "<p>don't we not yet have const generic structs?</p>",
        "id": 246631046,
        "sender_full_name": "Lokathor",
        "timestamp": 1626806006
    },
    {
        "content": "<p>are you talking about <code>const N: Foo</code> ?</p>",
        "id": 246631097,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626806032
    },
    {
        "content": "<p>yes</p>",
        "id": 246632367,
        "sender_full_name": "Lokathor",
        "timestamp": 1626806686
    },
    {
        "content": "<p>i thought min_const_generics was only int, char, bool, and arrayed variants</p>",
        "id": 246632430,
        "sender_full_name": "Lokathor",
        "timestamp": 1626806719
    },
    {
        "content": "<p>True, but if we're talking about language changes than we can assume we'll have it at some point.</p>",
        "id": 246634512,
        "sender_full_name": "scottmcm",
        "timestamp": 1626807797
    },
    {
        "content": "<p>Yea <code>const N: Foo</code> isnt supported yet but it'll happen :)</p>",
        "id": 246635436,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1626808284
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> I have long wished for this, yes; the problem is particularly acute with defaults. Consider <code>HashMap</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">HashMap</span><span class=\"o\">&lt;</span><span class=\"n\">K</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">RandomState</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* fields omitted */</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>What happens if/when we add a <code>A = DefaultAllocator</code>? How can I set the allocator <em>without</em> setting the <code>RandomState</code>? Do I have to do <code>HashMap&lt;K, V, _, A&gt;</code>?</p>",
        "id": 246696818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626859722
    }
]