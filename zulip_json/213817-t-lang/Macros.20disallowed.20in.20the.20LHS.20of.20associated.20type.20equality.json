[
    {
        "content": "<p>Is there a particular reason that macros are disallowed on the left-hand side of associated type equality clauses?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Tr</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Ty</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Ty</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">x</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nc\">Tr</span><span class=\"o\">&lt;</span><span class=\"n\">Ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">!</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// OK</span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nc\">Tr</span><span class=\"o\">&lt;</span><span class=\"n\">ty</span><span class=\"o\">!</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// Not OK</span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>error: expected one of `,`, `:`, or `&gt;`, found `=`\n  --&gt; src/lib.rs:11:17\n   |\n11 |     T: Tr&lt;ty!() = A&gt;, // Not OK\n   |               - ^ expected one of `,`, `:`, or `&gt;`\n   |               |\n   |               maybe try to close unmatched angle bracket\n</code></pre></div>",
        "id": 248989880,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1628607213
    },
    {
        "content": "<p>In your specific case, maybe it is because « Ty » is a label/binding ?</p>",
        "id": 249045462,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1628633991
    },
    {
        "content": "<p>So the compiler sees the macro as introducing a name in the calling scope, which is forbidden ?</p>",
        "id": 249045561,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1628634034
    },
    {
        "content": "<p>Nop, doesn't seem to be the case, this works in <code>main</code> but no in the LHS:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"cp\">$ty</span>:<span class=\"nc\">ident</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cp\">$ty</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">dbg!</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Tr</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Ty</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">x</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nc\">Tr</span><span class=\"o\">&lt;</span><span class=\"n\">Ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">!</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// OK</span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nc\">Tr</span><span class=\"o\">&lt;</span><span class=\"n\">ty</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">Ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// Not OK</span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 249046186,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1628634475
    },
    {
        "content": "<p>macros are only allowed in a few specific syntax positions</p>",
        "id": 249057550,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1628643321
    },
    {
        "content": "<p>items, statements, expressions, types, patterns</p>",
        "id": 249057565,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1628643350
    },
    {
        "content": "<p>Yes, I am aware. Why is an associated type not a type?</p>",
        "id": 249108381,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1628689266
    },
    {
        "content": "<p>because in this case, it's not a type, you can't write <code>Tr&lt;i32 = u32&gt;</code>, even syntactically, unless <code>Tr</code> has an associated type called <code>i32</code>. From a syntax perspective this <code>x = y</code> is just an <code>(ident, type)</code> pair, the lhs is not a type</p>",
        "id": 249112489,
        "sender_full_name": "oli",
        "timestamp": 1628690781
    },
    {
        "content": "<p>the grammar for this is (from <a href=\"https://doc.rust-lang.org/reference/paths.html#paths-in-expressions\">here</a>)</p>\n<div class=\"codehilite\"><pre><span></span><code>GenericArgsBinding :\n   IDENTIFIER = Type\n</code></pre></div>\n<p>and macros are not allowed in identifier position</p>",
        "id": 249115988,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1628692230
    }
]