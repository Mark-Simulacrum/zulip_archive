[
    {
        "content": "<p>Thoughts on stabilizing <a href=\"https://github.com/rust-lang/rust/issues/87517\">#87517</a>?</p>",
        "id": 272843760,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1645553419
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 272850043,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645556152
    },
    {
        "content": "<p>I think we have a ways to go before we get there on structs, but on enums, seems good to me.</p>",
        "id": 272850130,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645556177
    },
    {
        "content": "<p>Yeah, I think there's no strong concerns here that would prevent stabilization</p>",
        "id": 272850134,
        "sender_full_name": "simulacrum",
        "timestamp": 1645556180
    },
    {
        "content": "<p>The unit variant thing seems quite limiting, especially if the enum doesn't have any type arguments in the first place. Prohibiting variants with type arguments would also satisfy the bikeshed avoidance issue and would be a lot more permissive</p>",
        "id": 272852181,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645556986
    },
    {
        "content": "<p>Hmm, does this do anything that a user-written proc macro couldn't do?</p>\n<p>Because I didn't think it does, and if that's the case, then IMHO it's a <a class=\"stream\" data-stream-id=\"219381\" href=\"/#narrow/stream/219381-t-libs\">#t-libs</a> (T-libs-api) issue, not a lang one.</p>",
        "id": 272852522,
        "sender_full_name": "scottmcm",
        "timestamp": 1645557123
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> There was significant discussion about this previously. The RFC was scaled back specifically to avoid the issue of bounds. It was generally understood that this is a first step.</p>\n<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> Good point. This would be T-libs-api in that case, as this could be done in userspace. There's nothing special about the behavior here, just that it's a built-in macro (for convenience, I presume).</p>",
        "id": 272854092,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1645557834
    },
    {
        "content": "<p>Right, I gathered as much. My point is that you can still avoid the question of bounds if the constraint is \"does not mention type variables\" instead of \"does not have fields\"</p>",
        "id": 272854232,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645557895
    },
    {
        "content": "<p>It's still not agreed what the bounds should be, though.</p>",
        "id": 272854300,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1645557935
    },
    {
        "content": "<p>The RFC is at least committing to no bounds in the unit variant case</p>",
        "id": 272854375,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645557967
    },
    {
        "content": "<p>like the <code>Option&lt;T&gt;</code> example</p>",
        "id": 272854405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645557985
    },
    {
        "content": "<p>Because everybody agreed that was the sensible thing to do.</p>",
        "id": 272854407,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1645557987
    },
    {
        "content": "<p>Discussion about bounds is separate to what I'm asking here. I'm solely asking about stabilization of what has already been agreed upon, has been through the RFC process, and been implemented.</p>",
        "id": 272854429,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1645558005
    },
    {
        "content": "<p>You can still trivially do no bounds in the case <code>enum Foo&lt;T&gt; { #[default] A(u32), B(T) }</code></p>",
        "id": 272854599,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645558088
    },
    {
        "content": "<p>Please create a separate thread to discuss this if you'd like.</p>",
        "id": 272854632,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1645558110
    },
    {
        "content": "<p>but it's a fair point that this is not super relevant to the stabilization question</p>",
        "id": 272854642,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645558115
    },
    {
        "content": "<p>JFYI I've been working towards a model that enables \"perfect derive\"</p>",
        "id": 273573476,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1646093593
    },
    {
        "content": "<p>\"perfect\" in the sense of bounds or something else?</p>",
        "id": 273575189,
        "sender_full_name": "Jacob Pratt ðŸ‡ºðŸ‡¦",
        "timestamp": 1646094742
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/stabilizing.20.23.5Bderive.28Default.29.5D.60.20on.20enums/near/273573476\">said</a>:</p>\n<blockquote>\n<p>JFYI I've been working towards a model that enables \"perfect derive\"</p>\n</blockquote>\n<p>I'd love to hear more about this!</p>",
        "id": 273580618,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646099163
    },
    {
        "content": "<blockquote>\n<p>I have discovered a truly marvelous proof of [perfect derives], which this margin is too narrow to contain.</p>\n</blockquote>",
        "id": 273580917,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1646099424
    },
    {
        "content": "<p>So this doesn't fall off the radar, a stabilization report and PR are up. Just needs FCP at this point.</p>",
        "id": 275177662,
        "sender_full_name": "Jacob Pratt ðŸ‡ºðŸ‡¦",
        "timestamp": 1647209328
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span></p>",
        "id": 275178315,
        "sender_full_name": "Jacob Pratt ðŸ‡ºðŸ‡¦",
        "timestamp": 1647210300
    }
]