[
    {
        "content": "<p>Just spitballing here: It would be nice to have some kind of syntax sugar like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">do_stuff</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// If `do_stuff()` returned `Err` or `None`.</span>\n<span class=\"w\">    </span><span class=\"n\">do_other_stuff</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>This would desugar into this for <code>Result</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">do_stuff</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">do_other_stuff</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>and this for <code>Option</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">do_stuff</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">do_other_stuff</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>What do you think?</p>",
        "id": 213980807,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603228736
    },
    {
        "content": "<p>It would be nice specifically because then the two branches would be symmetrical, as opposed to with <code>match</code> or <code>if let</code></p>",
        "id": 213980931,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603228825
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Camelid</span> <a href=\"#narrow/stream/213817-t-lang/topic/try.20else/near/213980931\">said</a>:</p>\n<blockquote>\n<p>It would be nice specifically because then the two branches would be symmetrical, as opposed to with <code>match</code> or <code>if let</code></p>\n</blockquote>\n<p>I don't quite follow this bit</p>",
        "id": 213981013,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603228896
    },
    {
        "content": "<p>what's the advantage over <code>let res = try { do_stuff(); } match res { ... }</code>?</p>",
        "id": 213981042,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603228918
    },
    {
        "content": "<p>that would let you handle <code>Err(e)</code> without bikeshedding about how to bind <code>e</code>, too</p>",
        "id": 213981103,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603228938
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/213817-t-lang/topic/try.20else/near/213981042\">said</a>:</p>\n<blockquote>\n<p>what's the advantage over <code>let res = try { do_stuff(); } match res { ... }</code>?</p>\n</blockquote>\n<p>Not sure what you mean. Did you mean this?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">do_stuff</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 213984927,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603231188
    },
    {
        "content": "<p>I forgot the semicolon, sorry, I meant <code>let res = try { ... };</code></p>",
        "id": 213985103,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603231294
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/213817-t-lang/topic/try.20else/near/213981013\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"307537\">Camelid</span> <a href=\"#narrow/stream/213817-t-lang/topic/try.20else/near/213980931\">said</a>:</p>\n<blockquote>\n<p>It would be nice specifically because then the two branches would be symmetrical, as opposed to with <code>match</code> or <code>if let</code></p>\n</blockquote>\n<p>I don't quite follow this bit</p>\n</blockquote>\n<p>For example, take this code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">do_stuff</span><span class=\"p\">().</span><span class=\"n\">is_err</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">do_other_stuff</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>This says:</p>\n<ol>\n<li>Try calling <code>do_stuff()</code></li>\n<li>If it returns an error, call <code>do_other_stuff()</code></li>\n</ol>\n<p>But I would find this expressed more clearly as:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">do_stuff</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">do_other_stuff</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 213985135,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603231320
    },
    {
        "content": "<p>Rather than writing <code>try { ... } else { ... }</code>, which raises questions about how to bind the error result in the else path, you could write <code>let result = try { ... }; if let Err(e) = result { ... }</code> which means the same thing.</p>",
        "id": 213985181,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603231328
    },
    {
        "content": "<p>Or if you don't want to bind <code>e</code>, you could write <code>if let Err(_) = result { ... }</code>.</p>",
        "id": 213985213,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603231348
    },
    {
        "content": "<p>Well in this case, I wouldn't even need that: I could just do <code>if let Err(_) = do_stuff() { ... }</code></p>",
        "id": 213985230,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603231363
    },
    {
        "content": "<p>We do currently have syntactic space reserved for this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span>: <span class=\"nc\">keyword</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">catch</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">cannot</span><span class=\"w\"> </span><span class=\"n\">follow</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"k\">try</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">2</span>:<span class=\"mi\">23</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"n\">catch</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">                       </span><span class=\"o\">^^^^^</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">help</span>: <span class=\"nc\">try</span><span class=\"w\"> </span><span class=\"n\">using</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"k\">match</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"k\">try</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"w\"> </span><span class=\"n\">instead</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=1cb59035e7410aa512774146ea30c8ae\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=1cb59035e7410aa512774146ea30c8ae</a></p>",
        "id": 213985242,
        "sender_full_name": "scottmcm",
        "timestamp": 1603231373
    },
    {
        "content": "<p>I'm not saying this isn't possible to express currently, I just think it's clearer and simpler as <code>try { ... } else { ... }</code> or <code>try { ... } catch { ... }</code></p>",
        "id": 213985299,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603231412
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Camelid</span> <a href=\"#narrow/stream/213817-t-lang/topic/try.20else/near/213985230\">said</a>:</p>\n<blockquote>\n<p>Well in this case, I wouldn't even need that: I could just do <code>if let Err(_) = do_stuff() { ... }</code></p>\n</blockquote>\n<p>True, but I assumed part of the problem is that you want to do this when you don't have it all wrapped up in a function, and <code>if let Err(_) = { pile of code }  { other pile of code }</code> is really unclear.</p>",
        "id": 213985310,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603231419
    },
    {
        "content": "<p>I see :)</p>\n<p>My specific use case is this, which is somewhere in between <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">cfg</span><span class=\"p\">.</span><span class=\"n\">spawn</span><span class=\"p\">(</span><span class=\"n\">runtest</span><span class=\"p\">).</span><span class=\"n\">is_err</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// If we can't spawn a new thread, just run the test synchronously.</span>\n<span class=\"w\">                </span><span class=\"n\">runtest</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 213985441,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603231507
    },
    {
        "content": "<p>I would like to write that as:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">cfg</span><span class=\"p\">.</span><span class=\"n\">spawn</span><span class=\"p\">(</span><span class=\"n\">runtest</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"c1\">// or `catch`, we could bikeshed :)</span>\n<span class=\"w\">    </span><span class=\"n\">runtest</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 213985479,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603231538
    },
    {
        "content": "<p>The problem is that an <code>else</code> (or <code>catch</code>) on <code>try</code> would only work for the \"I don't care what error happened\" case, unless we add binding syntax.</p>",
        "id": 213985498,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603231548
    },
    {
        "content": "<p>Going into my corrupted long-term memory, I think one of the big questions about this was that this would want to be able to handle different errors in some cases, so it arguably would need to support a whole chain of such blocks, with patterns on them.</p>",
        "id": 213985503,
        "sender_full_name": "scottmcm",
        "timestamp": 1603231553
    },
    {
        "content": "<p>And what it's competing against is <em>almost</em> as short.</p>",
        "id": 213985509,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603231555
    },
    {
        "content": "<p>I like the original <code>if</code> better TBH</p>",
        "id": 213985532,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603231562
    },
    {
        "content": "<p>fewer lines and it's clear what it's doing even if you've never used another language</p>",
        "id": 213985583,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603231576
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307537\">@Camelid</span> <code>cfg.spawn(runtest) || runtest()</code> <span aria-label=\"smirk\" class=\"emoji emoji-1f60f\" role=\"img\" title=\"smirk\">:smirk:</span></p>",
        "id": 213985599,
        "sender_full_name": "scottmcm",
        "timestamp": 1603231588
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307537\">@Camelid</span> Other than indentation conventions, why do you find:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// lots of code here</span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// handling code here</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>less clear than</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// lots of code here</span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// handling code here</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 213985619,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603231603
    },
    {
        "content": "<p>The main reason I don't like the <code>if</code> is that it's easier to overlook side effects</p>",
        "id": 213985621,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603231607
    },
    {
        "content": "<p>Because the try-else version clearly shows the two branches, just like an if-else would if the condition didn't have side-effects</p>",
        "id": 213985702,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603231681
    },
    {
        "content": "<p>Hmm, come to think of it, if we had postfix <code>match</code> (like C# now does),</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// lots of code here</span>\n<span class=\"p\">}.</span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// handling code here</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 213985745,
        "sender_full_name": "scottmcm",
        "timestamp": 1603231688
    },
    {
        "content": "<p>I.e., I would prefer something like this, but that's not how the thread API works:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">can_spawn_thread</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// spawn thread</span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// do synchronously</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 213985783,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603231728
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/213817-t-lang/topic/try.20else/near/213985745\">said</a>:</p>\n<blockquote>\n<p>Hmm, come to think of it, if we had postfix <code>match</code> (like C# now does),</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// lots of code here</span>\n<span class=\"p\">}.</span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// handling code here</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>\n\n</blockquote>\n<p>Although that still wouldn't solve the thing that bothers me, which is that when the <code>try</code> code has side-effects, the <code>Err</code> case is treated separately</p>",
        "id": 213985849,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603231776
    },
    {
        "content": "<p>Can you elaborate on what you mean by \"when the try code has side-effects\"?</p>",
        "id": 213985883,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603231799
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> I think <span class=\"user-mention silent\" data-user-id=\"307537\">Camelid</span> means that <code>if cfg.spawn(...).is_err()</code> spawns a thread</p>",
        "id": 213985957,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603231829
    },
    {
        "content": "<p>personally I <em>like</em> that style</p>",
        "id": 213985963,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603231836
    },
    {
        "content": "<p>I like that style when the condition does not have side-effects, but in this case it does, which I find confusing.</p>",
        "id": 213985985,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603231858
    },
    {
        "content": "<p>it's like in C: <code>while ((c = getchar()) != EOF) { ... }</code></p>",
        "id": 213985987,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603231858
    },
    {
        "content": "<p>Ah, I see.</p>",
        "id": 213985997,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603231866
    },
    {
        "content": "<p>which seems very idiomatic to me</p>",
        "id": 213986000,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603231869
    },
    {
        "content": "<p>I guess I prefer purely-functional code <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 213986032,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603231893
    },
    {
        "content": "<p>(even though my suggestion isn't magically purely-functional)</p>",
        "id": 213986067,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603231916
    },
    {
        "content": "<p>the other thing your syntax changes is now it swallows <em>everything</em> in the try block</p>",
        "id": 213986206,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603231989
    },
    {
        "content": "<p>previously it would only deal with errors from <code>spawn()</code>, now it could be any error that appears</p>",
        "id": 213986222,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603232005
    },
    {
        "content": "<p>What do you mean?</p>",
        "id": 213986420,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603232125
    },
    {
        "content": "<p>I'm proposing that it would be purely syntactic sugar for calling <code>.is_err()</code>/<code>.is_none()</code></p>",
        "id": 213986511,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603232168
    },
    {
        "content": "<p>In fact, my intention is sort of for try-else to not capture the error, at least for a first implementation.</p>",
        "id": 213987405,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603232806
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">_try</span><span class=\"o\">!</span><span class=\"p\">({</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">cfg</span><span class=\"p\">.</span><span class=\"n\">spawn</span><span class=\"p\">(</span><span class=\"n\">runtest</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">//fallback to a sequential run</span>\n<span class=\"w\">    </span><span class=\"n\">runtest</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">})</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 213992469,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1603237082
    },
    {
        "content": "<p>(and for this case the simple:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cfg</span><span class=\"p\">.</span><span class=\"n\">spawn</span><span class=\"p\">(</span><span class=\"n\">runtest</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">unwrap_or_else</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"c1\">// fallback...</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>looks fairly idiomatic to me)</p>",
        "id": 213992676,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1603237265
    },
    {
        "content": "<p>Have y'all seen Swift's multi-pattern catch clauses? I think this is <em>fascinating</em></p>\n<p><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0276-multi-pattern-catch-clauses.md\">https://github.com/apple/swift-evolution/blob/master/proposals/0276-multi-pattern-catch-clauses.md</a></p>\n<div class=\"codehilite\" data-code-language=\"Swift\"><pre><span></span><code><span class=\"k\">do</span> <span class=\"p\">{</span>\n  <span class=\"k\">try</span> <span class=\"n\">performTask</span><span class=\"p\">()</span>\n<span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"n\">TaskError</span><span class=\"p\">.</span><span class=\"n\">someRecoverableError</span> <span class=\"p\">{</span>    <span class=\"c1\">// OK</span>\n  <span class=\"n\">recover</span><span class=\"p\">()</span>\n<span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"n\">TaskError</span><span class=\"p\">.</span><span class=\"n\">someFailure</span><span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nv\">msg</span><span class=\"p\">),</span>\n        <span class=\"n\">TaskError</span><span class=\"p\">.</span><span class=\"n\">anotherFailure</span><span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nv\">msg</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// Also Allowed</span>\n  <span class=\"n\">showMessage</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 214028771,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1603273500
    },
    {
        "content": "<p>Effectively a match?</p>",
        "id": 214074996,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603297040
    },
    {
        "content": "<p>I think a more precise analogy would be <code>else if let Err(_)</code>, but I guess that is indeed effectively a match.</p>",
        "id": 214079918,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1603299063
    },
    {
        "content": "<p>One interesting problem I haven't seen raised in this thread yet is how to match through a \"carrier error type\".</p>\n<p>Say an <code>io::Error</code> was thrown, but we only wanted to recover from <code>io::ErrorKind:: Interrupted</code>, what would that look like? Could we make that convenient?</p>\n<p>This gets rough for carriers which rely on downcasting to recover error kinds, and I wonder how much the language could do at that point to help.</p>",
        "id": 214081514,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1603299671
    },
    {
        "content": "<blockquote>\n<p>Have y'all seen Swift's multi-pattern catch clauses?</p>\n</blockquote>\n<p>I think the rust version of </p>\n<div class=\"codehilite\" data-code-language=\"Swift\"><pre><span></span><code><span class=\"k\">catch</span> <span class=\"n\">TaskError</span><span class=\"p\">.</span><span class=\"n\">someFailure</span><span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nv\">msg</span><span class=\"p\">),</span>\n      <span class=\"n\">TaskError</span><span class=\"p\">.</span><span class=\"n\">anotherFailure</span><span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nv\">msg</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p>would be</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">bikeshed</span><span class=\"w\"> </span><span class=\"n\">TaskError</span><span class=\"p\">.</span><span class=\"n\">someFailure</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"n\">TaskError</span><span class=\"p\">.</span><span class=\"n\">anotherFailure</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>like it is in a match.</p>",
        "id": 214087689,
        "sender_full_name": "scottmcm",
        "timestamp": 1603302182
    },
    {
        "content": "<p>Something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_try</span><span class=\"o\">!</span><span class=\"p\">({</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">try_run</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"n\">catch</span><span class=\"w\"> </span><span class=\"n\">err</span>: <span class=\"nc\">Error</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">SomeRecoverableError</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">print</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"Recovered: \"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">task</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">SomeFailure</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">AnotherFailure</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span>::<span class=\"n\">log</span>::<span class=\"n\">error</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<ul>\n<li><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=3868b1a6ef98de3dd0d8e6ea360e1f35\">Playground</a></li>\n</ul>",
        "id": 214091764,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1603303944
    },
    {
        "content": "<blockquote>\n<p>Say an io::Error was thrown, but we only wanted to recover from io::ErrorKind:: Interrupted, what would that look like? Could we make that convenient?</p>\n</blockquote>\n<p>I feel like it'd probably be like <code>if</code> guards on <code>match</code> arms, for consistency.  Kinda like C#'s <code>catch (IoException ex) when (ex.Message.Foo())</code>.</p>",
        "id": 214093178,
        "sender_full_name": "scottmcm",
        "timestamp": 1603304654
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">something_that_can_error</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">io</span>::<span class=\"n\">Error</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">bikeshed</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">bikeshed</span><span class=\"o\">&gt;</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">io</span>::<span class=\"n\">ErrorKind</span>::<span class=\"n\">Interrupted</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">bar</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 214110356,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603312097
    },
    {
        "content": "<p>I still like it the way it was in your PR (maybe with if-let chains)</p>",
        "id": 214126565,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603322090
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cfg</span><span class=\"p\">.</span><span class=\"n\">spawn</span><span class=\"p\">(</span><span class=\"n\">runtest</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">io</span>::<span class=\"n\">ErrorKind</span>::<span class=\"n\">WouldBlock</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 214126585,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603322110
    },
    {
        "content": "<p>in general I'm biased to have as little syntax as possible; rust already has a reputation for being hard to learn</p>",
        "id": 214127257,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603322783
    },
    {
        "content": "<p>The syntax I'm proposing looks fairly intuitive to me, but I guess maybe not to other people :)</p>",
        "id": 214127685,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603323175
    },
    {
        "content": "<p>But having if-let chains implemented and stable would help a lot in this case</p>",
        "id": 214127693,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603323184
    },
    {
        "content": "<p>Because then it could be:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cfg</span><span class=\"p\">.</span><span class=\"n\">spawn</span><span class=\"p\">(</span><span class=\"n\">runtest</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">io</span>::<span class=\"n\">ErrorKind</span>::<span class=\"n\">WouldBlock</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 214127714,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603323204
    }
]