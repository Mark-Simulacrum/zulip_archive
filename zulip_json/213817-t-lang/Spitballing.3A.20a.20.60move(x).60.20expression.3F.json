[
    {
        "content": "<p>I was just writing <code>{v}.pop()</code>, in venerable <a href=\"https://bluss.github.io/rust/fun/2015/10/11/stuff-the-identity-function-does/#rust-has-dedicated-syntax-for-this\">https://bluss.github.io/rust/fun/2015/10/11/stuff-the-identity-function-does/#rust-has-dedicated-syntax-for-this</a> style, and agreeing with the blog post that it might be nice to have a less-abstruse way to write that.</p>\n<p>Since we have <code>drop(x)</code>, maybe we could have <code>move(x)</code> too?  It'd need to be in the grammar, because keyword, but maybe that's ok?  It seems like it's probably unambiguous in the grammar, the only confusion that pops to mind is that <code>move(|| x)</code> and <code>(move || x)</code> would be different.</p>\n<p>(I picked parens instead of braces because it applies to the result of the expression, not to the expression as a whole.)</p>",
        "id": 212331245,
        "sender_full_name": "scottmcm",
        "timestamp": 1601919040
    },
    {
        "content": "<p>If <code>::core::convert::identity</code> was in the prelude we'd already have some basic alternative, but I do agree that the word <em>move</em> is the one best conveying the desired semantics. Other option being <code>moved</code> and <code>by_move</code>, which have the advantage of not requiring a keyword, just an added function to prelude (which is also something desirable; one thing I love about <code>drop</code> in Rust is how it is simultaneously the simplest function you can write, and yet one with important semantics <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>)</p>",
        "id": 212332023,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1601919435
    },
    {
        "content": "<p>I'm not a fan of <code>identity(v).pop()</code> because my first reaction to that is \"why did you use identity there?\" -- like it would be possible to <code>{v};</code> or <code>identity(v);</code> instead of <code>drop(v);</code>, but I wouldn't want to.</p>",
        "id": 212333763,
        "sender_full_name": "scottmcm",
        "timestamp": 1601920346
    },
    {
        "content": "<p>I'd hate to have that function invite comparisons to C++ <code>std::move</code></p>",
        "id": 212348427,
        "sender_full_name": "cuviper",
        "timestamp": 1601927739
    },
    {
        "content": "<p>Rust's move semantics are so much simpler</p>",
        "id": 212348544,
        "sender_full_name": "cuviper",
        "timestamp": 1601927786
    },
    {
        "content": "<p>That's true; would definitely want it to come along with warnings for <code>foo(move(v))</code> or <code>x = move(y);</code> to tell people they didn't need it there.</p>",
        "id": 212351488,
        "sender_full_name": "scottmcm",
        "timestamp": 1601929297
    },
    {
        "content": "<p>I suppose I could just write <code>{v}.pop()</code> as <code>{ let v = v; v.pop() }</code> instead, though that's not all that intuitive either, just longer...</p>",
        "id": 212351842,
        "sender_full_name": "scottmcm",
        "timestamp": 1601929447
    },
    {
        "content": "<p>Honestly, the times I've wanted something like <code>move</code> on one expression, it's been in the middle of a lambda, where I want to move some but not all of the captures of that lambda.</p>",
        "id": 212362699,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601935759
    },
    {
        "content": "<p>So it still couldn't have just been added to an individual expression in those cases.</p>",
        "id": 212362722,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601935786
    },
    {
        "content": "<blockquote>\n<p>I suppose I could just write <code>{v}.pop()</code> as <code>{ let v = v; v.pop() }</code> instead, though that's not all that intuitive either, just longer...</p>\n</blockquote>\n<p>Funnily enough, you got the second one wrong <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span> I mean yes, we can just go and <code>let mut v = v</code> rebind the value.</p>\n<p>The purpose of offering a renamed <code>identity</code> (as <code>moved</code> or <code>by_move</code>) would be twofold: on the one hand, as you pointed out, <code>identity(v).pop()</code> doesn't look better than <code>{v}.pop()</code>, and on the other hand, for anybody making a comparison to <code>std::move()</code>, we'd have at least the fact that \"our\" implementation of <code>move</code> is just the identity function (granted, <code>std::move()</code> is just a cast), so that we know there is no magic going on there. I'd say that the fact that a binding can be \"reluctant to being accessed exclusively\"  (I don't like to say immutable, since <code>let x = Cell::new(42);</code> isn't immutable) _vs._ a temporary / rvalue not being so, has kind of already sailed the ship in that regard.</p>",
        "id": 212400296,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1601974407
    },
    {
        "content": "<p>we can make <code>move(x)</code> syntax sugar (lol?) for <code>{x}</code>, so it's not even a function that you can import</p>",
        "id": 212403377,
        "sender_full_name": "oli",
        "timestamp": 1601976430
    },
    {
        "content": "<p>that seems like too much magic IMO</p>",
        "id": 212427171,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601990997
    },
    {
        "content": "<p>it would be easy to get confused and think you <em>needed</em> move to move things</p>",
        "id": 212427248,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601991017
    },
    {
        "content": "<p>If we don't want it to be a function, I'd keep using it like a keyword operator, <code>move expr</code>. But that means <code>(move v).pop()</code>.</p>",
        "id": 212432630,
        "sender_full_name": "cuviper",
        "timestamp": 1601993375
    },
    {
        "content": "<p>Closures could be wrapped to disambiguate it, <code>move (|| ...)</code>, but there's also no reason to use it that way</p>",
        "id": 212432815,
        "sender_full_name": "cuviper",
        "timestamp": 1601993449
    },
    {
        "content": "<p>I like that a lot!</p>",
        "id": 212434820,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1601994235
    },
    {
        "content": "<p>Clearly then it just needs to be <code>v.move.pop()</code>, <span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> <span aria-label=\"smirk\" class=\"emoji emoji-1f60f\" role=\"img\" title=\"smirk\">:smirk:</span></p>\n<p>Which does actually remove the closure ambiguity <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 212463117,
        "sender_full_name": "scottmcm",
        "timestamp": 1602007226
    },
    {
        "content": "<p>oh man, whatever happened to making more postfix keywords?</p>",
        "id": 212463218,
        "sender_full_name": "cuviper",
        "timestamp": 1602007276
    },
    {
        "content": "<p><code>.match</code> came up a lot when justifying <code>.await</code>.</p>",
        "id": 212463253,
        "sender_full_name": "cuviper",
        "timestamp": 1602007300
    },
    {
        "content": "<p>Actually, I like this more than my original proposal.  It meets my \"this takes the result of the expression rather than impacting all the code in the region\" criteria for fitting well as postfix.</p>",
        "id": 212463534,
        "sender_full_name": "scottmcm",
        "timestamp": 1602007438
    },
    {
        "content": "<p>IIRC we explicitly said that <code>.match</code> was a reasonableness argument, not an actual plan to do something there.</p>",
        "id": 212463912,
        "sender_full_name": "scottmcm",
        "timestamp": 1602007611
    },
    {
        "content": "<p>Not that I'd be opposed to exploring it more seriously</p>",
        "id": 212463956,
        "sender_full_name": "scottmcm",
        "timestamp": 1602007648
    },
    {
        "content": "<p>Isn't <code>move x</code> actual syntax in MIR?</p>",
        "id": 212471368,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602011336
    },
    {
        "content": "<p>Well, there's <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/enum.Operand.html\"><code>Operand::Move</code></a> certainly.  The MIR syntax doesn't really matter, since it's unstable, doesn't have a parser, and doesn't nest or chain so the constraints on it are completely different.</p>",
        "id": 212495783,
        "sender_full_name": "scottmcm",
        "timestamp": 1602024696
    },
    {
        "content": "<p>Actually, an interesting possibility: <code>.move</code> could <em>always</em> be a move, rather than being a copy for <code>Copy</code> types.</p>",
        "id": 212495867,
        "sender_full_name": "scottmcm",
        "timestamp": 1602024752
    },
    {
        "content": "<p>Would make <code>let _ = x.move;</code> a way to keep <code>x</code> from being used again more obviously than the current <code>let x: !;</code> shadowing approach.</p>",
        "id": 212496212,
        "sender_full_name": "scottmcm",
        "timestamp": 1602025086
    },
    {
        "content": "<p>that's <code>drop(x)</code>, no?</p>",
        "id": 212496248,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602025127
    },
    {
        "content": "<p>also, while I'm grumbling, I think having <code>let _ = f();</code> drop immediately but <code>let _ = x;</code> do nothing is <em>super</em> confusing</p>",
        "id": 212496276,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602025168
    },
    {
        "content": "<p>oh I guess <code>drop</code> wouldn't do anything for <code>Copy</code> types though</p>",
        "id": 212496388,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602025211
    },
    {
        "content": "<p>that seems a little niche</p>",
        "id": 212496395,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602025214
    },
    {
        "content": "<p>I've definitely wanted a way to move a value that is <code>Copy</code> before</p>",
        "id": 212497250,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1602025938
    },
    {
        "content": "<p>Also, one way a <code>.move</code> expression could be useful, would be if it could also have the semantics of the <code>drop_guards!</code> macro of the following post: <a href=\"https://users.rust-lang.org/t/while-let-borrow-lifetime-seems-to-be-too-long/49784/5?u=yandros\">https://users.rust-lang.org/t/while-let-borrow-lifetime-seems-to-be-too-long/49784/5?u=yandros</a></p>",
        "id": 212573828,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1602083816
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span> so you want to use <code>v.borrow_mut().move.pop()</code> in that example?</p>",
        "id": 212575518,
        "sender_full_name": "cuviper",
        "timestamp": 1602084411
    },
    {
        "content": "<p>I don't know, I think it would be even more confusing if this didn't follow normal lifetime rules for temporaries in an expression</p>",
        "id": 212575603,
        "sender_full_name": "cuviper",
        "timestamp": 1602084451
    },
    {
        "content": "<p>I was thinking of <code>rc.borrow_mut().pop().move</code>, that is, give <code>&lt;expr&gt;.move</code> the semantics of <code>{ let it = &lt;expr&gt;; it }</code>. This enables a second usage on top of the aforementioned <code>non_mut_var_name.move.pop()</code>, which also justifies having that as a postfix expression (Otherwise there is little reason not to use <code>(move var_name)</code>, since applying it to an <code>rvalue</code> would be a complete no-op).</p>\n<p>Basically, the current situation with <code>while let Some(x) = rc.borrow_mut().pop()</code> is quite unfortunate, and I can't come up with a better way to solve that one than a special tool to express dropping temporaries. So, if we were to commit a full-fledged postfix keyword for the <code>{v}.pop()</code>, I think that also covering <code>{ let it = rc.borrow_mut().pop(); it }</code> would be a nice added benefit <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 212576475,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1602084780
    },
    {
        "content": "<p>that's interesting</p>",
        "id": 212576849,
        "sender_full_name": "cuviper",
        "timestamp": 1602084937
    },
    {
        "content": "<p><code>.move</code> so far would apply to the same things that the borrow checker tracks, i.e. <a href=\"https://rustc-dev-guide.rust-lang.org/borrow_check/moves_and_initialization.html\">https://rustc-dev-guide.rust-lang.org/borrow_check/moves_and_initialization.html</a></p>",
        "id": 212577126,
        "sender_full_name": "cuviper",
        "timestamp": 1602085054
    },
    {
        "content": "<p>your suggestion is a different scope, I think, but I can see the need</p>",
        "id": 212577227,
        "sender_full_name": "cuviper",
        "timestamp": 1602085083
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> <a href=\"#narrow/stream/213817-t-lang/topic/Spitballing.3A.20a.20.60move(x).60.20expression.3F/near/212577227\">said</a>:</p>\n<blockquote>\n<p>your suggestion is a different scope, I think, but I can see the need</p>\n</blockquote>\n<p>I do agree that the semantics may not be that obvious for this second use case though <span aria-label=\"slight frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"slight frown\">:slight_frown:</span>. But it's hard to come with any other kind of workaround whatsoever <span aria-label=\"weary\" class=\"emoji emoji-1f629\" role=\"img\" title=\"weary\">:weary:</span></p>",
        "id": 212578155,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1602085460
    },
    {
        "content": "<p>Bleh, temporaries.</p>\n<p>Yeah, I'd been thinking of this as just introducing a MIR <code>Operand::Move</code>, and linting for uselessly applying it to an <del>rvalue</del>operand instead of an <del>lvalue</del>place.</p>",
        "id": 212584326,
        "sender_full_name": "scottmcm",
        "timestamp": 1602088097
    },
    {
        "content": "<p>I think I see the postfix-ness of it opposite to how you do, though, <span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span>.</p>\n<p>To me it makes sense because it doesn't affect the whole expression, just the result.  For something that affects temporaries I'd expect to be able to express <code>drop_guards! { v.borrow_mut().pop() }</code> vs <code>drop_guards! { v.borrow_mut() }.pop()</code>, and I don't think that's reasonable with <code>.move</code>.</p>",
        "id": 212584887,
        "sender_full_name": "scottmcm",
        "timestamp": 1602088342
    },
    {
        "content": "<p>(AKA exactly the same issue that was the stumbling block for postfix macros in general.)</p>\n<p>So I think if we went that way it would be a \"move block\".  Which could totally work, <code>move{v}.pop()</code> it's terrible.</p>\n<p>But I don't know that I'd pick <code>move</code> as the token for that feature.  It doesn't obviously say \"changes the lifetime rules\" to me.  I was thinking more in the <code>v.move</code> vs <code>v.clone()</code> vs <code>v.as_ref()</code> way.</p>",
        "id": 212588024,
        "sender_full_name": "scottmcm",
        "timestamp": 1602089891
    },
    {
        "content": "<p>I think other keywords could be explored for the \"de-temp\" case, like maybe <code>do { v.borrow_mut().pop() }</code></p>",
        "id": 212589050,
        "sender_full_name": "cuviper",
        "timestamp": 1602090336
    },
    {
        "content": "<p>True, though I feel like <code>library_bikeshed_here! { v.borrow_mut().pop() }</code> might be ok for that, since \"add a <code>let</code>\" apparently has the desired semantics.  And it's a rather nuanced operation, so a long name seems fine.  (Whereas there's no way to move-not-copy a <code>Copy</code> place right now.)</p>",
        "id": 212601447,
        "sender_full_name": "scottmcm",
        "timestamp": 1602096130
    },
    {
        "content": "<p>is the intent that \"move\" also moves <code>copy</code> things?</p>",
        "id": 212603381,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602097060
    },
    {
        "content": "<p>i.e., <code>let x = 22; move(x); move(x)</code> is an error?</p>",
        "id": 212603412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602097076
    },
    {
        "content": "<p>that's the current thought, yes</p>",
        "id": 212604164,
        "sender_full_name": "cuviper",
        "timestamp": 1602097330
    },
    {
        "content": "<p>it would move/invalidate any place, regardless of <code>Copy</code></p>",
        "id": 212604244,
        "sender_full_name": "cuviper",
        "timestamp": 1602097360
    },
    {
        "content": "<p>the initial motivation didn't require that though, formalizing the \"move\" effect of <code>{v}.pop()</code></p>",
        "id": 212604374,
        "sender_full_name": "cuviper",
        "timestamp": 1602097427
    },
    {
        "content": "<p>yeah.</p>",
        "id": 212604661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602097555
    },
    {
        "content": "<p>we used to have this and removed it :)</p>",
        "id": 212604735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602097575
    },
    {
        "content": "<p>(not to say we can't add it back)</p>",
        "id": 212604748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602097582
    },
    {
        "content": "<p>I know <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> is always a fan of being able to be explicit when you need it ...</p>",
        "id": 212604834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602097619
    },
    {
        "content": "<p>what did it look like before?</p>",
        "id": 212605283,
        "sender_full_name": "cuviper",
        "timestamp": 1602097804
    },
    {
        "content": "<p>/me tries to remember</p>",
        "id": 212605302,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602097816
    },
    {
        "content": "<p>I think it was just <code>move x</code>, but we also had \"move mode\" for arguments... maybe I'm remembering wrong</p>",
        "id": 212605334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602097831
    },
    {
        "content": "<p>in case you missed the pivot, <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> is suggesting this as a postfix keyword now, <code>x.move</code></p>",
        "id": 212605493,
        "sender_full_name": "cuviper",
        "timestamp": 1602097920
    },
    {
        "content": "<p>I did see that</p>",
        "id": 212605560,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602097935
    },
    {
        "content": "<p>interesting :)</p>",
        "id": 212605568,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602097940
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> <a href=\"#narrow/stream/213817-t-lang/topic/Spitballing.3A.20a.20.60move(x).60.20expression.3F/near/212604244\">said</a>:</p>\n<blockquote>\n<p>it would move/invalidate any place, regardless of <code>Copy</code></p>\n</blockquote>\n<p>Is there any use case for this, btw? I was just thinking that the initial motivation was <code>{v}.pop()</code> being ugly, but what happens if somebody had a <code>.pop()</code> method for <a href=\"https://docs.rs/tinyvec/1.0.1/tinyvec/struct.ArrayVec.html#impl-Copy\">a <code>Copy</code> receiver</a>? They wouldn't be able to use this neat <code>(move v).pop()</code> / <code>v.move.pop()</code> since it would happen to also invalidate their initial copy. And if they were doing <code>{copy_thingy}.pop()</code> to begin with it was precisely because they did not want to alter their initial <code>Copy</code> value, right?</p>\n<ul>\n<li>In other words, there is something that fundamentally does not feel right about being able to invalidate a thing that has the trait <code>CannotBeInvalidated / Pod / Copy</code>. An actual use case would thus greatly help soothe this feeling <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></li>\n</ul>",
        "id": 212606577,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1602098372
    },
    {
        "content": "<p>Note that the reason for <code>{v}.pop()</code> originally was to invalidate <code>v</code> -- if I didn't want to invalidate it there's no need for the <code>{}</code>s.  (Basically to act like a <code>self</code>-taking <code>pop</code>, instead of a <code>&amp;mut</code>-taking <code>pop</code>.)</p>\n<p>To me, the readable way to call a <code>&amp;mut</code> on something <code>Copy</code> without affecting the original place is <code>v.clone().pop()</code> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 212607991,
        "sender_full_name": "scottmcm",
        "timestamp": 1602099053
    },
    {
        "content": "<p>I guess one problem with the postfix form is that <code>*</code> should have been postfix -- <code>*x.move</code> is probably not what one wanted.  I wonder how scary it would be as an auto-deref point...</p>",
        "id": 212608605,
        "sender_full_name": "scottmcm",
        "timestamp": 1602099335
    },
    {
        "content": "<p>I thought it was also for when <code>v</code> isn't already mutable -- then <code>{v}</code> gives you a mutable temporary</p>",
        "id": 212608995,
        "sender_full_name": "cuviper",
        "timestamp": 1602099534
    },
    {
        "content": "<p>Hmm, those are definitely two sides of the same coin, but also give a different implication for <code>Copy</code> things.</p>",
        "id": 212609559,
        "sender_full_name": "scottmcm",
        "timestamp": 1602099827
    },
    {
        "content": "<p>sorry, ICR my original motivation for a move expression since I had wanted it like a year ago since I haven't had as much time to actually write rust recently :(</p>",
        "id": 212616407,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1602103280
    },
    {
        "content": "<p>I wonder whether this interacts with the thread about Range being non-Copy, and generally iterators being non-Copy to prevent footguns. It seems the <code>move</code> keyword can address some of the same pain points</p>",
        "id": 212641938,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602124265
    },
    {
        "content": "<p>Oh, interesting.  An edition could change the <code>IntoIterator::into_iter(foo)</code> to <code>IntoIterator::into_iter(foo.move)</code></p>",
        "id": 212652734,
        "sender_full_name": "scottmcm",
        "timestamp": 1602140125
    },
    {
        "content": "<p>wrong topic <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 212662404,
        "sender_full_name": "lcnr",
        "timestamp": 1602147256
    },
    {
        "content": "<p>but <code>Copy for Range</code> would still be a footgun in prior editions</p>",
        "id": 212706909,
        "sender_full_name": "cuviper",
        "timestamp": 1602170807
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/213817-t-lang/topic/Spitballing.3A.20a.20.60move(x).60.20expression.3F/near/212652734\">said</a>:</p>\n<blockquote>\n<p>Oh, interesting.  An edition could change the <code>IntoIterator::into_iter(foo)</code> to <code>IntoIterator::into_iter(foo.move)</code></p>\n</blockquote>\n<p>ooh I really like that</p>",
        "id": 212710133,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602172185
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> <a href=\"#narrow/stream/213817-t-lang/topic/Spitballing.3A.20a.20.60move(x).60.20expression.3F/near/212706909\">said</a>:</p>\n<blockquote>\n<p>but <code>Copy for Range</code> would still be a footgun in prior editions</p>\n</blockquote>\n<p>I think we could address that with a lint that only runs in previous editions</p>",
        "id": 212710229,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602172210
    },
    {
        "content": "<p>that runs whenever you copy a range</p>",
        "id": 212710257,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602172218
    },
    {
        "content": "<p>Hmm, could simplify that to just linting on <code>for i in something_copy {</code>, suggesting <code>for i in something_copy.move {</code> -- there's no reason that <code>.move</code> would need a new edition.</p>",
        "id": 212726307,
        "sender_full_name": "scottmcm",
        "timestamp": 1602179472
    },
    {
        "content": "<p>only when copying from a place though -- I don't want to write <code>for i in (0..10).move {</code></p>",
        "id": 212726799,
        "sender_full_name": "cuviper",
        "timestamp": 1602179673
    },
    {
        "content": "<blockquote>\n<p>I just want to point out that <code>.move</code> has gained a lot of meanings in this thread. I would hate to teach this</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> Could you elaborate?  I thought this was actually fairly consistent for a spitballing thread, with things like <a href=\"#narrow/stream/122651-general/topic/In.20a.20closure.2C.20how.20do.20I.20move.20some.20things.20but.20not.20others.3F\">its meaning in a closure</a> being an implication of the \"forces a place to move, becoming a temporary\" semantics, not another meaning.</p>",
        "id": 213070210,
        "sender_full_name": "scottmcm",
        "timestamp": 1602526641
    },
    {
        "content": "<p>That is to say, I hope that the move keyword does not simultaneously get all meanings that were proposed for it</p>",
        "id": 213070339,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602526704
    },
    {
        "content": "<p>Moving in a closure seems pretty different to me, given that it logically associates to the closure, not the moved value. It also doesn't interact well with the suggestion to invalidate copy locations (in the sense that they are orthogonal features, although their uses are somewhat in complementary distribution so it wouldn't be a problem except for macros)</p>",
        "id": 213070631,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602526864
    },
    {
        "content": "<p>Ah, the <code>move</code> keyword as a whole, not specifically <code>.move</code>.  I see.</p>",
        "id": 213070639,
        "sender_full_name": "scottmcm",
        "timestamp": 1602526867
    }
]