[
    {
        "content": "<p>Hey lang team! Function parameters can have attribute macros:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"cp\">#[some_attr]</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u8</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I am wondering why the same isn't also possible for return types?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"cp\">#[some_attr]</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I'm currently working on a library that processes traits and I would find this quite handy because right now I'm forced to do something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[return = ...]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u8</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>which imo is less clear because it's not immediately obvious that the macro is just meant for the return type.</p>\n<p>(I'm new here ... if there's a better place to ask such questions please tell me :)</p>",
        "id": 262619922,
        "sender_full_name": "push-f",
        "timestamp": 1637775728
    },
    {
        "content": "<p>I might be totally wrong about this, but at a glance it looks like the answer is simply that <em>nobody has written an RFC for this yet</em>!  Check out <a href=\"https://github.com/rust-lang/rfcs/pull/2565\">RFC2565</a> (which allows attributes on parameters) for a model of what an RFC for attributes-on-return types might look like.</p>",
        "id": 262627172,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1637779709
    },
    {
        "content": "<p>Thanks for digging up that RFC :) As it turns out there is <a href=\"https://github.com/rust-lang/rfcs/pull/2602\">RFC2602</a> which would allow adding attribute macros to any types ... I think I however agree with <span class=\"user-mention\" data-user-id=\"158781\">@Graydon Hoare</span>'s concern that allowing attributes nearly everywhere (especially in nested types) would negatively impact the readability of Rust.</p>",
        "id": 262642166,
        "sender_full_name": "push-f",
        "timestamp": 1637789205
    },
    {
        "content": "<p>Well I went ahead and opened <a href=\"https://github.com/rust-lang/rfcs/pull/3201\">RFC3201</a> for this.</p>",
        "id": 262658854,
        "sender_full_name": "push-f",
        "timestamp": 1637804519
    },
    {
        "content": "<p>IMO it would only harm readability if over-used. Given our experience with attributes on arguments, etc. I don't think they will be overused, so I don't think there will be an issue</p>",
        "id": 262688658,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1637835896
    },
    {
        "content": "<p>If this is only for proc macros then allowing it syntactically should be sufficient?</p>",
        "id": 262728151,
        "sender_full_name": "Gary Guo",
        "timestamp": 1637860542
    }
]