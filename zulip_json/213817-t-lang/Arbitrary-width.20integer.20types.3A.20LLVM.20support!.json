[
    {
        "content": "<p><a href=\"http://blog.llvm.org/2020/04/the-new-clang-extint-feature-provides.html\" title=\"http://blog.llvm.org/2020/04/the-new-clang-extint-feature-provides.html\">http://blog.llvm.org/2020/04/the-new-clang-extint-feature-provides.html</a></p>",
        "id": 194947199,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587568847
    },
    {
        "content": "<p>Here's hoping we can wire that up in Rust.</p>",
        "id": 194947249,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587568872
    },
    {
        "content": "<p>(hanna shared more details on discord (#design room) but this is mostly news for clang/C, it's always been supported in LLVM IR)</p>",
        "id": 194948042,
        "sender_full_name": "lqd",
        "timestamp": 1587569255
    },
    {
        "content": "<p>I assume that <a href=\"https://github.com/rust-lang/rfcs/pull/2581\" title=\"https://github.com/rust-lang/rfcs/pull/2581\">https://github.com/rust-lang/rfcs/pull/2581</a> will use this feature in LLVM</p>",
        "id": 194956415,
        "sender_full_name": "Sebastian Malton",
        "timestamp": 1587572752
    },
    {
        "content": "<p>tried performing division using <code>_ExtInt(8192)</code>, and clang ICE with \"error in backend: Unsupported library call operation!\" <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 194962316,
        "sender_full_name": "kennytm",
        "timestamp": 1587575449
    },
    {
        "content": "<p><code>_ExtInt(128)</code> is the highest type supporting <code>/</code> and <code>%</code>, as expected.</p>",
        "id": 194962713,
        "sender_full_name": "kennytm",
        "timestamp": 1587575630
    },
    {
        "content": "<p>While it's always been theoretically supported in IR, it'll probably mean it has fewer rough edge, which is nice.</p>",
        "id": 194972960,
        "sender_full_name": "scottmcm",
        "timestamp": 1587580370
    },
    {
        "content": "<p>I often wish we could have <code>u63</code> and such -- we have a ton of APIs that take a usize where you're prohibited from setting the high bit</p>",
        "id": 194973228,
        "sender_full_name": "scottmcm",
        "timestamp": 1587580477
    },
    {
        "content": "<p>there were some suggestions regarding using const generics for arbitrary-width integers, though I can't remember how nice the APIs were</p>",
        "id": 194974758,
        "sender_full_name": "varkor",
        "timestamp": 1587581175
    },
    {
        "content": "<p>Yep, there's a ton of low-level data structures that could benefit from it too. Like taking 9 bits out of a virtual address to index a page table.</p>",
        "id": 195117546,
        "sender_full_name": "mark-i-m",
        "timestamp": 1587674917
    },
    {
        "content": "<p>I'm dealing with many u48 and u40 values lately.</p>",
        "id": 195118552,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587675436
    },
    {
        "content": "<p>And in one case, a u34 value...</p>",
        "id": 195118716,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587675499
    },
    {
        "content": "<p>The PNG spec says that image dimensions are supposed to be the equivalent of what Rust would call <code>NonZeroU31</code>. And a lot of MMIO would benefit from some sort of bitfields struct support combined with arbitrary width integers.</p>",
        "id": 195119173,
        "sender_full_name": "Lokathor",
        "timestamp": 1587675723
    },
    {
        "content": "<p>I believe this clang extension is completely unrelated to bitfields.</p>",
        "id": 195119616,
        "sender_full_name": "Amanieu",
        "timestamp": 1587675947
    },
    {
        "content": "<blockquote>\n<p>_ExtInt types are bit-aligned to the next greatest power-of-2 up to 64 bits</p>\n</blockquote>\n<p>So basically these types still use up the same amount of memory as normal integers but have operations on them effectively automatically truncated to a certain bit width.</p>",
        "id": 195119824,
        "sender_full_name": "Amanieu",
        "timestamp": 1587676063
    },
    {
        "content": "<p>That would make them helpful for implementing bitfield semantics, though.</p>",
        "id": 195122232,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587677591
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> Hm, I don't see how that's true? You'd (if I understand correctly) not be able to use these for bit fields because <code>a: u1, b: u1</code> takes up two bytes still</p>",
        "id": 195128469,
        "sender_full_name": "simulacrum",
        "timestamp": 1587681774
    },
    {
        "content": "<p>It might have to be kinda jiggered a bit on the Rust side of things, where you have a setter that takes a <code>u3</code> or something and then stores it in a <code>u16</code>or whatever by upcasting it and then shifting it into place and such.</p>",
        "id": 195128645,
        "sender_full_name": "Lokathor",
        "timestamp": 1587681887
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> In Rust yes. I meant that with C-style bitfields, you could write <code>_ExtInt(5) fieldname: 5;</code> and you'd have a field that not only takes up five bits, but operates as a five-bit number type.</p>",
        "id": 195128652,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587681890
    },
    {
        "content": "<p>That would need more wiring up to work in Rust, not least of which, having bitfield support. :)</p>",
        "id": 195128694,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587681931
    },
    {
        "content": "<p><code>no-ref fieldname: u5</code> ;)</p>",
        "id": 195128761,
        "sender_full_name": "scottmcm",
        "timestamp": 1587681963
    },
    {
        "content": "<p>I sort of like how zig did this, they allow references to bitfields by encoding the offsets in the type</p>",
        "id": 195137706,
        "sender_full_name": "Sebastian Malton",
        "timestamp": 1587690530
    }
]