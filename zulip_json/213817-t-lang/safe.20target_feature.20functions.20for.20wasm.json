[
    {
        "content": "<p>I've proposed <a href=\"https://github.com/rust-lang/rust/pull/84988\">https://github.com/rust-lang/rust/pull/84988</a> for merge. It seems reasonable to me, given how WebAssembly works. Please take a look at it and see what you think.</p>",
        "id": 238667618,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620933785
    },
    {
        "content": "<p>I nominated it for next week's meeting, but I'd love to handle it asynchronously.</p>",
        "id": 238667642,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620933796
    },
    {
        "content": "<p>I think it's worth noting I recall some discussion (or maybe my own thinking) that ideally you'd also get these intrinsics for free as safe functions if we had some sort of \"I'm only targeting platforms with X\", roughly. I guess more portability lint desire :)</p>",
        "id": 238675654,
        "sender_full_name": "simulacrum",
        "timestamp": 1620937472
    },
    {
        "content": "<p>IIRC that was the target_feature 1.1 RFC</p>",
        "id": 238679585,
        "sender_full_name": "Amanieu",
        "timestamp": 1620939248
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2396-target-feature-1.1.md\">https://github.com/rust-lang/rfcs/blob/master/text/2396-target-feature-1.1.md</a></p>",
        "id": 238679616,
        "sender_full_name": "Amanieu",
        "timestamp": 1620939263
    },
    {
        "content": "<p>Yeah. This seems somewhat orthogonal, to me. I'd love to have both. :)</p>",
        "id": 238679717,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620939313
    },
    {
        "content": "<p>For sure! I just wanted to note that the desire isn't unique to webassembly.</p>",
        "id": 238679796,
        "sender_full_name": "simulacrum",
        "timestamp": 1620939358
    },
    {
        "content": "<p>Absolutely.</p>",
        "id": 238679930,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620939411
    },
    {
        "content": "<p>I'd also love to have a compile-time-verifiable way to call functions with <code>target_feature</code> from safe code if I supply a static type-based proof that I've checked the CPU features, for instance.</p>",
        "id": 238680016,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620939450
    },
    {
        "content": "<p>But that's a much more complicated proposition.</p>",
        "id": 238680027,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620939455
    },
    {
        "content": "<p>That's pretty simple to put in a crate</p>",
        "id": 238827748,
        "sender_full_name": "Lokathor",
        "timestamp": 1621025398
    },
    {
        "content": "<p>So apparently, to <span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span>, the issue with <code>unsafe</code> on <code>target_feature</code> was not actually entirely on the processor being safe or not. It was also about the codegen backend and what sort of malevolent tricks it might pull:</p>\n<p><a href=\"https://rust-lang.github.io/rfcs/2045-target-feature.html#make-target_feature-safe\">https://rust-lang.github.io/rfcs/2045-target-feature.html#make-target_feature-safe</a><br>\n<a href=\"https://github.com/rust-lang/rfcs/pull/2045#issuecomment-311325202\">https://github.com/rust-lang/rfcs/pull/2045#issuecomment-311325202</a></p>",
        "id": 238857901,
        "sender_full_name": "Jubilee",
        "timestamp": 1621043551
    },
    {
        "content": "<p>I don't think this necessarily means that this is invalid, but it does highlight that it's not entirely about the WebAssembly \"decoder\" but about the codegen backend, runtime, wasm's control flow integrity, AND its decode.</p>",
        "id": 238858379,
        "sender_full_name": "Jubilee",
        "timestamp": 1621044007
    },
    {
        "content": "<p>At the very least we need to delve into the LLVM LangRef and find a guarantee that on a wasm target, calling a function with \"bad\" target_feature is <em>not</em> UB but a guaranteed trap on old interpreters.</p>",
        "id": 238889690,
        "sender_full_name": "RalfJ",
        "timestamp": 1621077103
    }
]