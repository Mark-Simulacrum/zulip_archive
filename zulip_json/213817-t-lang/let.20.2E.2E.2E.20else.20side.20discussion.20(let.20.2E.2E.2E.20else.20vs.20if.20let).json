[
    {
        "content": "<p>it's basically <code>unwrap_or</code>, but more flexible</p>",
        "id": 228692272,
        "sender_full_name": "Lokathor",
        "timestamp": 1614816553
    },
    {
        "content": "<p>I don't think I'd put it in the same category as unwrap_or. unwrap_or is for when there's a default. This is for when there's no default and you need to do error handling instead.</p>",
        "id": 228692363,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614816611
    },
    {
        "content": "<p>well you can use it for error handling, or you can use it for picking a default, or you can use it for whatever you like. \"but more flexible\"</p>",
        "id": 228692423,
        "sender_full_name": "Lokathor",
        "timestamp": 1614816664
    },
    {
        "content": "<p><code>let ... else</code> doesn't apply to the \"picking a default\" case at all, because it doesn't bind the variable in the <code>else</code> case.</p>",
        "id": 228692501,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614816711
    },
    {
        "content": "<p>oh that's.... entirely not how i imagined it to work.</p>",
        "id": 228692572,
        "sender_full_name": "Lokathor",
        "timestamp": 1614816732
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> Are you perhaps thinking of another construct somehow? <code>if let ... { } else { ... }</code> already works today and does what you'd expect it to do.</p>",
        "id": 228692623,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614816758
    },
    {
        "content": "<p>This is <code>let Some(x) = an_option else { diverge and don't reach the end of this block, most commonly via return or break }</code>.</p>",
        "id": 228692702,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614816809
    },
    {
        "content": "<p>Okay, so... okay... so i don't use if let often i'm a match sort of fellow I wandered in from Haskell-town, and it turns out you can already write</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kt\">i32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">12</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and you can <em>also</em> already just choose to diverge in the <code>else</code> path if you want to, so I guess i'm not clear on whatever the new thing would allow compared to this existing ability.</p>",
        "id": 228692878,
        "sender_full_name": "Lokathor",
        "timestamp": 1614816925
    },
    {
        "content": "<p>like instead of 12, i could have written <code>return</code> and that compiles</p>",
        "id": 228693000,
        "sender_full_name": "Lokathor",
        "timestamp": 1614816986
    },
    {
        "content": "<p>I believe primarily not having to bind-return-bind on the success case.</p>",
        "id": 228693031,
        "sender_full_name": "nagisa",
        "timestamp": 1614817013
    },
    {
        "content": "<p>Right. And thus having to write the name of the thing three times.</p>",
        "id": 228693073,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614817043
    },
    {
        "content": "<p><code>let name = if let Some(name) = expr { name } else { ... }</code> is possible today, and it feels clunky and awkward. This is what people already do today.</p>",
        "id": 228693161,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614817089
    },
    {
        "content": "<p>so what would the new thing be</p>",
        "id": 228693192,
        "sender_full_name": "Lokathor",
        "timestamp": 1614817108
    },
    {
        "content": "<p>(wild bikeshed allowed for this answer)</p>",
        "id": 228693197,
        "sender_full_name": "Lokathor",
        "timestamp": 1614817117
    },
    {
        "content": "<p><code>let Some(name) = expr else { ...}</code></p>",
        "id": 228693198,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614817119
    },
    {
        "content": "<p>ohhhh, okay, i merged your first two posts in my head</p>",
        "id": 228693235,
        "sender_full_name": "Lokathor",
        "timestamp": 1614817145
    },
    {
        "content": "<p>okay i follow</p>",
        "id": 228693238,
        "sender_full_name": "Lokathor",
        "timestamp": 1614817148
    },
    {
        "content": "<p>/me is going to split this tangent into another topic for clarity.</p>",
        "id": 228693268,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614817162
    },
    {
        "content": "<p>requiring that the else block diverses seemsâ€¦ pretty weird to me. Not from the perpective of why you'd require but from the perspective of this seeming fairly constrained to add additional syntax over.</p>",
        "id": 228693285,
        "sender_full_name": "nagisa",
        "timestamp": 1614817182
    },
    {
        "content": "<p>so it's like enhanced <code>?</code></p>",
        "id": 228693415,
        "sender_full_name": "Lokathor",
        "timestamp": 1614817250
    }
]