[
    {
        "content": "<p>I have finally gotten around to <a href=\"https://github.com/rust-lang/rust/pull/71274#issuecomment-683937298\">analyzing all the crater regressions</a> for my attempt to detect more misuse of mem::uninitialized/zeroed. <span class=\"user-group-mention\" data-user-group-id=\"1977\">@T-lang</span> what do you think is the next step here, is this okay to land (early in the cycle as we are now) or would you prefer another crater run (which will take a while)?</p>",
        "id": 208593837,
        "sender_full_name": "RalfJ",
        "timestamp": 1598897063
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> That's really impressive work!</p>",
        "id": 208594497,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598897379
    },
    {
        "content": "<p>Is the proposal to land the compiler check as a lint (warn?, deny?) or as an error?</p>",
        "id": 208594580,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598897407
    },
    {
        "content": "<p>Or as a runtime panic?</p>",
        "id": 208594633,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598897436
    },
    {
        "content": "<p>this is a dynamic check. it makes the function panic. see <a href=\"https://github.com/rust-lang/rust/issues/66151\">https://github.com/rust-lang/rust/issues/66151</a> for more information.</p>",
        "id": 208594643,
        "sender_full_name": "RalfJ",
        "timestamp": 1598897440
    },
    {
        "content": "<p>we also have a static check but naturally it is less precise, and to avoid false positives it misses many cases</p>",
        "id": 208594680,
        "sender_full_name": "RalfJ",
        "timestamp": 1598897462
    },
    {
        "content": "<p>Sure.</p>",
        "id": 208594692,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598897467
    },
    {
        "content": "<p>and of course the lint doesn't show anything for bugs in dependencies</p>",
        "id": 208594704,
        "sender_full_name": "RalfJ",
        "timestamp": 1598897474
    },
    {
        "content": "<p>So, landing a lint I'd be completely in favor of doing as soon as possible, and I'd be happy for it to be deny-by-default.</p>",
        "id": 208594760,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598897507
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/Detecting.20bad.20mem.3A.3Auninitialized.2Fzeroed/near/208594497\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> That's really impressive work!</p>\n</blockquote>\n<p>thanks. :) it wasn't a lot of fun to be honest, which is why it took me so long to find the motivation to go over &gt;100 regression logs and figure out what happened and create appropriate bugreports.^^ but I really want those safety checks ;)</p>",
        "id": 208594772,
        "sender_full_name": "RalfJ",
        "timestamp": 1598897518
    },
    {
        "content": "<p>The runtime panic I'm also in favor of landing, at the beginning of a cycle. Is there any <em>reasonable</em> way for it to be feasible to have 1-2 releases worth of ability to opt out of that panic?</p>",
        "id": 208594858,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598897551
    },
    {
        "content": "<p>Just in case there turns out to be a critical problem?</p>",
        "id": 208594910,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598897586
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/Detecting.20bad.20mem.3A.3Auninitialized.2Fzeroed/near/208594760\">said</a>:</p>\n<blockquote>\n<p>So, landing a lint I'd be completely in favor of doing as soon as possible, and I'd be happy for it to be deny-by-default.</p>\n</blockquote>\n<p>the lint is fully orthogonal in implementation and already exists (<a href=\"https://github.com/rust-lang/rust/pulls?q=is%3Apr+author%3ARalfJung+is%3Aclosed+invalid_value\">https://github.com/rust-lang/rust/pulls?q=is%3Apr+author%3ARalfJung+is%3Aclosed+invalid_value</a>). it is currently warn-by-default.</p>",
        "id": 208594931,
        "sender_full_name": "RalfJ",
        "timestamp": 1598897599
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> If you want to ramp that up to deny-by-default, go for it, especially if we're going to be panicking in at least any case that that lint would flag.</p>",
        "id": 208594973,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598897626
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/Detecting.20bad.20mem.3A.3Auninitialized.2Fzeroed/near/208594858\">said</a>:</p>\n<blockquote>\n<p>The runtime panic I'm also in favor of landing, at the beginning of a cycle. Is there any <em>reasonable</em> way for it to be feasible to have 1-2 releases worth of ability to opt out of that panic?</p>\n</blockquote>\n<p>to be clear, we <em>already</em> panic in some cases, like <code>mem::zeroed::&lt;&amp;T&gt;</code>.</p>",
        "id": 208595063,
        "sender_full_name": "RalfJ",
        "timestamp": 1598897664
    },
    {
        "content": "<p>the proposal is to detect more cases, like when the reference is nested in a struct.</p>",
        "id": 208595086,
        "sender_full_name": "RalfJ",
        "timestamp": 1598897677
    },
    {
        "content": "<p>Ah!</p>",
        "id": 208595090,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598897679
    },
    {
        "content": "<p>OK, I missed that detail.</p>",
        "id": 208595106,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598897685
    },
    {
        "content": "<p>I would have felt like we needed a bit of leeway for the initial cases like that.</p>",
        "id": 208595123,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598897696
    },
    {
        "content": "<p>But now that we <em>have</em> those cases, extending that to catch more things is fine.</p>",
        "id": 208595147,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598897707
    },
    {
        "content": "<p>FWIW, there was a t-lang FCP for landing the panic^^ (<a href=\"https://github.com/rust-lang/rust/pull/66059\">https://github.com/rust-lang/rust/pull/66059</a>)</p>",
        "id": 208595169,
        "sender_full_name": "RalfJ",
        "timestamp": 1598897716
    },
    {
        "content": "<p>/me is sure there was, yes. :)</p>",
        "id": 208595195,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598897726
    },
    {
        "content": "<p>I remembered us going through that, I was just confused because I thought you were talking about introducing that.</p>",
        "id": 208595303,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598897767
    },
    {
        "content": "<p>But now I understand what you mean. Extending that to more cases seems fine.</p>",
        "id": 208595325,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598897779
    },
    {
        "content": "<p>so regarding the opt-out... the only thing I can think of is a <code>-Z</code> flag, which would not really help for stable obviously.</p>",
        "id": 208595329,
        "sender_full_name": "RalfJ",
        "timestamp": 1598897782
    },
    {
        "content": "<p>/me shakes his head.</p>",
        "id": 208595344,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598897794
    },
    {
        "content": "<p>No need, I think.</p>",
        "id": 208595347,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598897796
    },
    {
        "content": "<p>I'd happily check off on merging extensions to that panic.</p>",
        "id": 208595353,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598897800
    },
    {
        "content": "<p>Go ahead and file it and poke me to FCP.</p>",
        "id": 208595376,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598897811
    },
    {
        "content": "<p>Beyond <a href=\"https://github.com/rust-lang/rust/pull/71274#issuecomment-683937298\">https://github.com/rust-lang/rust/pull/71274#issuecomment-683937298</a>, what do you require?</p>",
        "id": 208595438,
        "sender_full_name": "RalfJ",
        "timestamp": 1598897844
    },
    {
        "content": "<p>(not sure what you mean by \"file it\")</p>",
        "id": 208595458,
        "sender_full_name": "RalfJ",
        "timestamp": 1598897864
    },
    {
        "content": "<p>...sorry, I'm clearly multitasking too much today, that's a PR and not an issue. :)</p>",
        "id": 208595480,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598897881
    },
    {
        "content": "<p>One moment...</p>",
        "id": 208595522,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598897885
    },
    {
        "content": "<p>thanks :)</p>",
        "id": 208595611,
        "sender_full_name": "RalfJ",
        "timestamp": 1598897953
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/Detecting.20bad.20mem.3A.3Auninitialized.2Fzeroed/near/208594973\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> If you want to ramp that up to deny-by-default, go for it, especially if we're going to be panicking in at least any case that that lint would flag.</p>\n</blockquote>\n<p>I think that would be <a href=\"https://github.com/rust-lang/rust/issues/75968\">https://github.com/rust-lang/rust/issues/75968</a>, maybe you want to comment here :)</p>",
        "id": 208595812,
        "sender_full_name": "RalfJ",
        "timestamp": 1598898060
    },
    {
        "content": "<p>don't worry, github gets confused too ;) <a href=\"https://github.com/rust-lang/rust/issues/71274#issuecomment-683937298\">https://github.com/rust-lang/rust/issues/71274#issuecomment-683937298</a></p>",
        "id": 208595814,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598898061
    },
    {
        "content": "<p>You can always refer to pr's using <code>/issues/</code>, but not the opposite way around. When you write <a href=\"https://github.com/rust-lang/rust/issues/71274\">#71274</a> there is a zulip linkifier that turns it into <a href=\"https://github.com/rust-lang/rust/issues/71274\">https://github.com/rust-lang/rust/issues/71274</a>. It can't query github if it is a issue or pr, which means that having <code>/issues/</code> work is very nice.</p>",
        "id": 208602673,
        "sender_full_name": "bjorn3",
        "timestamp": 1598901188
    },
    {
        "content": "<p>it looks like it works both ways, <a href=\"https://github.com/rust-lang/rust/pull/76177\">https://github.com/rust-lang/rust/pull/76177</a> redirects to <a href=\"https://github.com/rust-lang/rust/issues/76177\">https://github.com/rust-lang/rust/issues/76177</a></p>",
        "id": 208605957,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598902872
    }
]