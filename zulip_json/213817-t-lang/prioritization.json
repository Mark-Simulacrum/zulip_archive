[
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> and I put our heads together to try and bang out a kind of \"rough draft\" lang-team roadmap sort of document:</p>\n<p><a href=\"https://hackmd.io/Czx3MwkpQeiC2_e9XI8OIw\" title=\"https://hackmd.io/Czx3MwkpQeiC2_e9XI8OIw\">https://hackmd.io/Czx3MwkpQeiC2_e9XI8OIw</a></p>\n<p>The idea was to identify big priorities and things we would like to make progress on, along with a sense of what we're <em>actually capable of</em>. </p>\n<p>We started out with \"big themes\" that we think are important and why.</p>\n<p>Then, we broke out ideas into \"short term\" (goal: stable and deployed by late 2021), \"mid term\" (goal: could maybe make progress but shouldn't expect to be fully done by then), and \"blocked\" (reconsider as we make progress).</p>\n<p>I've found this structure quite helpful. I suspect the short term list will need some tweaking, and it's probably a bit over-ambitious. I want to be breaking that list down by <strong>who</strong> will serve as the liaison -- I can tell that I have a lot of big projects there, for example, and I'd like to discuss how best to manage that (but some of them are \"close-ish\" to completion..still.) It seems ok to some extent, though, as we're describing a queue, but it's a good exercise.</p>",
        "id": 196650576,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588778548
    },
    {
        "content": "<p>I'm particularly interested to hear from <span class=\"user-group-mention\" data-user-group-id=\"1977\">@T-lang</span> if there are things you think are important that are not represented there, and if there are projects you would like to spearhead that are not on this list. I don't think that each person has to spearhead something necessarily, as many of us wear multiple hats, and it may be that our main focus is in other areas. But I think being concrete about who will do what can also help us to see where we need to grow expertise within the team to increase bandwidth.</p>",
        "id": 196650745,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588778611
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> would you see stability/safety of non-Rust-code things as the domain of T-lang?</p>",
        "id": 196662458,
        "sender_full_name": "James Munns",
        "timestamp": 1588783398
    },
    {
        "content": "<p>For example, the safety of items that concern the linker (e.g. <code>-Clink-args</code>), or stability of <code>rust-lld</code> as a part of the distribution?</p>",
        "id": 196662575,
        "sender_full_name": "James Munns",
        "timestamp": 1588783443
    },
    {
        "content": "<p>I know it's a little unfair to request stability for LLVM's linker, but we've been bitten before on breakages in <code>lld</code>, which is the default linker for some targets.</p>",
        "id": 196662662,
        "sender_full_name": "James Munns",
        "timestamp": 1588783487
    },
    {
        "content": "<p>In my opinion, I think <code>-Clink-args</code> would be, yes.</p>",
        "id": 196663193,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588783732
    },
    {
        "content": "<p>I'm not <em>sure</em> if <code>rust-lld</code> would be the domain of <code>T-lang</code> or <code>T-compiler</code> or another group entirely.</p>",
        "id": 196663233,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588783757
    },
    {
        "content": "<p>(in this regard, -Clink-args is an example of something that could induce wildly unsafe behavior, with no use of <code>unsafe { }</code>).</p>",
        "id": 196663296,
        "sender_full_name": "James Munns",
        "timestamp": 1588783789
    },
    {
        "content": "<p>It's not really a <em>rust</em> thing, though there have been some suggestions to \"lift\" those commands into compile time directives/attributes, where at least the compiler could take a look at it.</p>",
        "id": 196663454,
        "sender_full_name": "James Munns",
        "timestamp": 1588783858
    },
    {
        "content": "<p>True, but I'm not sure how fixable that is, or if that's even considered incorrect.</p>",
        "id": 196663457,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588783859
    },
    {
        "content": "<p>I think it'd make sense to take the most common things people want to do with it, and turn them into dedicated command-line options or crate options.</p>",
        "id": 196663516,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588783893
    },
    {
        "content": "<p>But in the fully general case, I'd still want to pass arbitrary options to the linker.</p>",
        "id": 196663533,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588783905
    },
    {
        "content": "<p>And that includes arbitrary linker scripts.</p>",
        "id": 196663550,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588783911
    },
    {
        "content": "<p>For example, basically every embedded systems crate needs link args to provide a linker script: <a href=\"https://github.com/jamesmunns/tiny-nrf52/blob/master/.cargo/config#L7-L9\" title=\"https://github.com/jamesmunns/tiny-nrf52/blob/master/.cargo/config#L7-L9\">https://github.com/jamesmunns/tiny-nrf52/blob/master/.cargo/config#L7-L9</a></p>",
        "id": 196663555,
        "sender_full_name": "James Munns",
        "timestamp": 1588783914
    },
    {
        "content": "<p>however, it would be good for a crate (either the main/application crate, or even a dependency, like <code>cortex-m-rt</code>) to provide one, something like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#![linker_script(</span><span class=\"s\">&quot;link.x&quot;</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>or something</p>",
        "id": 196663732,
        "sender_full_name": "James Munns",
        "timestamp": 1588783994
    },
    {
        "content": "<p>(I know that's a lot of imaginary syntax, but it's just illustrative)</p>",
        "id": 196663771,
        "sender_full_name": "James Munns",
        "timestamp": 1588784011
    },
    {
        "content": "<p>Or for that matter, providing the text of a linker script rather than a filename, and generating the linker script with Rust. :)</p>",
        "id": 196664013,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588784128
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/prioritization/near/196663533\" title=\"#narrow/stream/213817-t-lang/topic/prioritization/near/196663533\">said</a>:</p>\n<blockquote>\n<p>But in the fully general case, I'd still want to pass arbitrary options to the linker.</p>\n</blockquote>\n<p>Yeah, I think this is pretty necessary. It's unlikely Rust will gain full feature parity with a complete linker</p>",
        "id": 196664030,
        "sender_full_name": "James Munns",
        "timestamp": 1588784144
    },
    {
        "content": "<p>I mean, to be fair, we already generate the linker script using a <a href=\"http://build.rs\" title=\"http://build.rs\">build.rs</a> script and some templates :)</p>",
        "id": 196664091,
        "sender_full_name": "James Munns",
        "timestamp": 1588784164
    },
    {
        "content": "<p>It's not that, so much as that anything with full parity with a linker will have effectively all the same options. :)</p>",
        "id": 196664119,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588784168
    },
    {
        "content": "<p>And be just as unsafe.</p>",
        "id": 196664134,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588784176
    },
    {
        "content": "<p>The real linker script only ever lives in the <code>out/</code> directory.</p>",
        "id": 196664147,
        "sender_full_name": "James Munns",
        "timestamp": 1588784180
    },
    {
        "content": "<p>I'd love to have more control over linking. And I do think we could take some of the common cases and make them easier.</p>",
        "id": 196664166,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588784194
    },
    {
        "content": "<p>I guess my suggestion is that at least then rustc can \"see\" the unsafety.</p>",
        "id": 196664167,
        "sender_full_name": "James Munns",
        "timestamp": 1588784195
    },
    {
        "content": "<p>I mean, if I use something like <code>--wrap</code>, I can induce some really awesome unsafe behavior, really quickly.</p>",
        "id": 196664208,
        "sender_full_name": "James Munns",
        "timestamp": 1588784225
    },
    {
        "content": "<p>I'm not sure we've ever made an <code>#![attribute]</code> be <code>unsafe</code>.</p>",
        "id": 196664223,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588784229
    },
    {
        "content": "<p>Yeah, <code>#[no_mangle]</code> was flagged as a particularly unsafe one.</p>",
        "id": 196664272,
        "sender_full_name": "James Munns",
        "timestamp": 1588784252
    },
    {
        "content": "<p><code>#[link_section]</code>, etc. etc.</p>",
        "id": 196664338,
        "sender_full_name": "James Munns",
        "timestamp": 1588784282
    },
    {
        "content": "<p>Why would <code>#[no_mangle]</code> be unsafe, exactly? Just because you can potentially conflict with an existing symbol name that something expects?</p>",
        "id": 196664366,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588784296
    },
    {
        "content": "<p>allows you to alias data</p>",
        "id": 196664421,
        "sender_full_name": "James Munns",
        "timestamp": 1588784328
    },
    {
        "content": "<p>...ah. That's fun.</p>",
        "id": 196664440,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588784339
    },
    {
        "content": "<p>OK. So, generalizing, \"better linker support, including full linker scripts and simple attributes for common options\"?</p>",
        "id": 196664504,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588784367
    },
    {
        "content": "<p>That seems worth adding. Interested in working on it?</p>",
        "id": 196664526,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588784378
    },
    {
        "content": "<p>I was mostly asking if that even makes sense as a T-Lang item</p>",
        "id": 196664561,
        "sender_full_name": "James Munns",
        "timestamp": 1588784397
    },
    {
        "content": "<p>I think it absolutely does.</p>",
        "id": 196664679,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588784433
    },
    {
        "content": "<p>Link time has been the sort of \"not many eyes, because most people don't actively interact with the linker\"</p>",
        "id": 196664696,
        "sender_full_name": "James Munns",
        "timestamp": 1588784442
    },
    {
        "content": "<p><code>#![attributes]</code> are definitely T-lang.</p>",
        "id": 196664706,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588784448
    },
    {
        "content": "<p>At least, from the perspective of \"totally end-to-end safe rust\"</p>",
        "id": 196664738,
        "sender_full_name": "James Munns",
        "timestamp": 1588784460
    },
    {
        "content": "<p>/me would love to see rust-lld become the default, as well.</p>",
        "id": 196664744,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588784462
    },
    {
        "content": "<p>Linker options that involve <code>Cargo.toml</code> and similar will be <code>T-cargo</code> instead, but I'd like to see those happen too, with my T-cargo hat on. :)</p>",
        "id": 196664857,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588784510
    },
    {
        "content": "<p>I added a bullet point under \"C parity\".</p>",
        "id": 196664955,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588784544
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/prioritization/near/196664526\" title=\"#narrow/stream/213817-t-lang/topic/prioritization/near/196664526\">said</a>:</p>\n<blockquote>\n<p>That seems worth adding. Interested in working on it?</p>\n</blockquote>\n<p>Not sure to what extent you mean :) I don't do a lot of work in <code>rustc</code>, personally</p>",
        "id": 196664996,
        "sender_full_name": "James Munns",
        "timestamp": 1588784567
    },
    {
        "content": "<p>Happy to help discuss or with an RFC, etc.</p>",
        "id": 196665017,
        "sender_full_name": "James Munns",
        "timestamp": 1588784576
    },
    {
        "content": "<p>Yeah, I'm talking about making a proposal, helping to specify its behavior, up to the point of an RFC.</p>",
        "id": 196665153,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588784640
    },
    {
        "content": "<p>See <a href=\"#narrow/stream/213817-t-lang/topic/Lang.20team.20proposals.2C.20project.20groups.2C.20and.20active.2Fbacklog\" title=\"#narrow/stream/213817-t-lang/topic/Lang.20team.20proposals.2C.20project.20groups.2C.20and.20active.2Fbacklog\">https://rust-lang.zulipchat.com/#narrow/stream/213817-t-lang/topic/Lang.20team.20proposals.2C.20project.20groups.2C.20and.20active.2Fbacklog</a></p>",
        "id": 196665270,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588784678
    },
    {
        "content": "<p>I'd love to see a \"linker parity\" project group, which could develop and submit RFCs for linker options a few at a time.</p>",
        "id": 196665328,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588784707
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228912\">@James Munns</span> I'd prefer not to get too fixed on <em>which team's job is this</em> and think more about \"what should be done\". Compiler flags definitely straddle a line between compiler/lang, but that's not the high order bit I guess.</p>",
        "id": 196665476,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588784763
    },
    {
        "content": "<p>I suspect that having a project group that involves folks from the relevant teams is ultimately the right thing</p>",
        "id": 196665565,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588784806
    },
    {
        "content": "<p>Fair! I just wanted to make sure I was barking up the right tree :)</p>",
        "id": 196665681,
        "sender_full_name": "James Munns",
        "timestamp": 1588784856
    },
    {
        "content": "<p>I think you're in the right place for this.</p>",
        "id": 196665710,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588784877
    },
    {
        "content": "<p>(as this was described a \"t-lang prioritization\")</p>",
        "id": 196665750,
        "sender_full_name": "James Munns",
        "timestamp": 1588784882
    },
    {
        "content": "<p>Also, if you're up for it, I'd also love to see more work on the properties of the default generated binaries, such as being able to strip them by default.</p>",
        "id": 196665855,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588784919
    },
    {
        "content": "<p>(Goal: the output of <code>cargo build --release</code> should be unchanged by running <code>strip</code> on it.)</p>",
        "id": 196665923,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588784948
    },
    {
        "content": "<p>Oh, nice!</p>",
        "id": 196666292,
        "sender_full_name": "James Munns",
        "timestamp": 1588785081
    },
    {
        "content": "<p>Other things I don't see from the embedded wish list:</p>\n<ul>\n<li>defined MMIO interactions (c parity)</li>\n<li>pointers of incompatible types (c parity)</li>\n<li>stable global alloc, or stable parameterizable allocators</li>\n</ul>\n<p>Something that's probably a longer discussion, but might be worth reserving keywords for:</p>\n<ul>\n<li>Multicore Send/Sync traits</li>\n</ul>",
        "id": 196666721,
        "sender_full_name": "James Munns",
        "timestamp": 1588785260
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228912\">@James Munns</span> The first one meaning a replacement for the concept of <code>volatile</code>?</p>",
        "id": 196667752,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588785675
    },
    {
        "content": "<p>Could you explain the second item?</p>",
        "id": 196667779,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588785683
    },
    {
        "content": "<p>Also, can I suggest that we start a new thread for this?</p>",
        "id": 196667851,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588785718
    },
    {
        "content": "<p>(I'd love to have the explanation for multicore send/sync, but not in this thread.)</p>",
        "id": 196667905,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588785728
    },
    {
        "content": "<p>First one would be around the fact that references can allow for spurious reads, so taking references can cause side effects in hardware.</p>\n<p>Second one would be for pointers in non-contiguous address spaces, for example, AVR has a different address space for flash (.text, .data), and RAM, so you can't compare pointers; or Arm has SecureZone, where you have domains of trust with different, incompatible address spaces.</p>\n<p>Multicore Sync/Send is best described in this RFC: <a href=\"https://github.com/rust-embedded/wg/blob/master/rfcs/0419-multi-core-soundness.md\" title=\"https://github.com/rust-embedded/wg/blob/master/rfcs/0419-multi-core-soundness.md\">https://github.com/rust-embedded/wg/blob/master/rfcs/0419-multi-core-soundness.md</a></p>\n<p>btw, all of these are from the embedded meeting notes, here: <a href=\"https://github.com/rust-embedded/wg/blob/master/minutes/2020-04-28.md#embedded-lang-item-wish-list\" title=\"https://github.com/rust-embedded/wg/blob/master/minutes/2020-04-28.md#embedded-lang-item-wish-list\">https://github.com/rust-embedded/wg/blob/master/minutes/2020-04-28.md#embedded-lang-item-wish-list</a></p>",
        "id": 196668213,
        "sender_full_name": "James Munns",
        "timestamp": 1588785845
    },
    {
        "content": "<p>But yeah, I didn't know where the right place to discuss this was. @ me somewhere and I will move to chatting there :)</p>",
        "id": 196668268,
        "sender_full_name": "James Munns",
        "timestamp": 1588785864
    },
    {
        "content": "<p>\"Multicore\" topics also apply to IPC, so it's not just an embedded thing (different processes may have disparate address spaces)</p>",
        "id": 196668665,
        "sender_full_name": "James Munns",
        "timestamp": 1588786027
    },
    {
        "content": "<p>Thanks! really nice to see these listed, and i feel i can see some \"core values\" of rust design in the list. May i suggest re-raising structural typing ergonomics (e.g. dealing with tuples or unnamed structs (records)) in the longer range section?</p>",
        "id": 196668719,
        "sender_full_name": "Charles Lew",
        "timestamp": 1588786048
    },
    {
        "content": "<p>There's also method call forwarding (delegation) and Fn* traits implementations</p>",
        "id": 196669722,
        "sender_full_name": "Charles Lew",
        "timestamp": 1588786420
    },
    {
        "content": "<p>And I'm not sure SIMD is a language-level thing. Maybe?</p>",
        "id": 196670197,
        "sender_full_name": "Charles Lew",
        "timestamp": 1588786616
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span> -- those are really good suggestions</p>",
        "id": 196670496,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588786720
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"228912\">James Munns</span> <a href=\"#narrow/stream/213817-t-lang/topic/prioritization/near/196668213\" title=\"#narrow/stream/213817-t-lang/topic/prioritization/near/196668213\">said</a>:</p>\n<blockquote>\n<p>Second one would be for pointers in non-contiguous address spaces, for example, AVR has a different address space for flash (.text, .data), and RAM, so you can't compare pointers; or Arm has SecureZone, where you have domains of trust with different, incompatible address spaces.</p>\n</blockquote>\n<p>Oh, I see. <code>__attribute__((address_space(...)))</code> in GCC?</p>",
        "id": 196670512,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588786726
    },
    {
        "content": "<p>Thinking about this more, I think in some kind of ideal world, actually, we would try to \"slot\" most every idea we here about, or at least the \"major ones\", somewhere in this list, even if it's a \"never\" category</p>",
        "id": 196670583,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588786749
    },
    {
        "content": "<p>(I was under the impression that the volatile / mmio thing was largely \"solved\", but maybe my needs are more modest than the needs of others. I've certainly never had any trouble lately)</p>",
        "id": 196670945,
        "sender_full_name": "Lokathor",
        "timestamp": 1588786900
    },
    {
        "content": "<p>Solved in what sense?</p>",
        "id": 196670978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588786914
    },
    {
        "content": "<p>that is, solved by changes to libraries?</p>",
        "id": 196671039,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588786923
    },
    {
        "content": "<p>As in, a total non issue, we have good abstractions already in various crates and we don't need any more to build up the support for a particular device.</p>",
        "id": 196671161,
        "sender_full_name": "Lokathor",
        "timestamp": 1588786978
    },
    {
        "content": "<p>But if I'm wrong we can fork that conversation into another thread because it's probably a rabbit hole.</p>",
        "id": 196671340,
        "sender_full_name": "Lokathor",
        "timestamp": 1588787051
    },
    {
        "content": "<blockquote>\n<p>First-class C compiler: rustc <a href=\"http://foo.rs\" title=\"http://foo.rs\">foo.rs</a> bar.c</p>\n</blockquote>\n<p>This made my mouth water (literally!)</p>",
        "id": 196688400,
        "sender_full_name": "mark-i-m",
        "timestamp": 1588794975
    }
]