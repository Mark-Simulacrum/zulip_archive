[
    {
        "content": "<p>I am not going to be able to make the design meeting today <span class=\"user-group-mention\" data-user-group-id=\"1977\">@T-lang</span>.</p>",
        "id": 262618462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1637774938
    },
    {
        "content": "<p>I cannot make it either</p>",
        "id": 262621941,
        "sender_full_name": "pnkfelix",
        "timestamp": 1637776804
    },
    {
        "content": "<p>Looks like the zoom meeting hasn't been started?</p>",
        "id": 262622489,
        "sender_full_name": "scottmcm",
        "timestamp": 1637777097
    },
    {
        "content": "<p>I'm in the meeting as well, and it doesn't look like it has started.</p>",
        "id": 262622512,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637777108
    },
    {
        "content": "<p>/me is wondering if the problem is that I don't have the requisite permissions to kick off the meeting whose link is in the calendar invite.</p>",
        "id": 262622547,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637777128
    },
    {
        "content": "<p>/me will make a new meeting room.</p>",
        "id": 262622812,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637777251
    },
    {
        "content": "<p>Hmm, so what do we do now?</p>",
        "id": 262622827,
        "sender_full_name": "Amanieu",
        "timestamp": 1637777263
    },
    {
        "content": "<p><a href=\"https://meet.jit.si/BvELIHv4KtF4rBLO\">https://meet.jit.si/BvELIHv4KtF4rBLO</a></p>",
        "id": 262622923,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637777290
    },
    {
        "content": "<p>The one in the calendar invite just started.</p>",
        "id": 262622965,
        "sender_full_name": "scottmcm",
        "timestamp": 1637777310
    },
    {
        "content": "<p>Oh! Going back and joining that then.</p>",
        "id": 262622981,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637777318
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span></p>",
        "id": 262623106,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637777401
    },
    {
        "content": "<p><a href=\"https://gist.github.com/Amanieu/e30b9d6ad36b011125d8d3a01e0e622b\">https://gist.github.com/Amanieu/e30b9d6ad36b011125d8d3a01e0e622b</a></p>",
        "id": 262623359,
        "sender_full_name": "Amanieu",
        "timestamp": 1637777518
    },
    {
        "content": "<p>Hey <span class=\"user-group-mention\" data-user-group-id=\"1977\">@T-lang</span> folks, while I can't attend, I did want to point out one interesting data point:</p>\n<p>The <a href=\"https://www.micahlerner.com/assets/papers/rudra.pdf\">Rudra project</a> -- great paper! -- pointed out that panic safety is a particular source of problems in unsafe code:</p>\n<blockquote>\n<p>Due to their subtlety, panic safety violations have caused several memory safety bugs in popular Rust packages [1, 4, 5] and the Rust standard library [7, 10, 12]</p>\n</blockquote>\n<p>My experience with Rayon was that while it was plausible for me to audit the sources of panics from explicit closure calls or generic operations, identifying panics that might result from drops was beyond my capabilities. I wound up just adding a \"abort on panic\" guard. It's possible that a lint against \"possible panics\" would have helped, but I think that in general such a lint + disallowing panic in drop would help even more.</p>",
        "id": 262624063,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1637777906
    },
    {
        "content": "<p>Are folks done reading? <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> for done, <span aria-label=\"book\" class=\"emoji emoji-1f4d6\" role=\"img\" title=\"book\">:book:</span> for still reading.</p>",
        "id": 262624385,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637778081
    },
    {
        "content": "<p>Thank you, <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span>!  Great meeting.</p>",
        "id": 262629335,
        "sender_full_name": "scottmcm",
        "timestamp": 1637780767
    },
    {
        "content": "<p>Capturing the hackmd link so we can find it later: <a href=\"https://hackmd.io/bTzkjcODSDWREJSRAEhRlQ\">https://hackmd.io/bTzkjcODSDWREJSRAEhRlQ</a></p>",
        "id": 262634173,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637783936
    },
    {
        "content": "<p>Regarding <code>drain_filter</code>, there currently doesn't seem much momentum towards stabilization or people discussing new designs. There are several tracking issues for the different collections, not a central one for drain_filter in general, I think. A new ticket stating the need that they all need their drop behavior changed would help.</p>",
        "id": 262636272,
        "sender_full_name": "The 8472",
        "timestamp": 1637785273
    },
    {
        "content": "<blockquote>\n<p>Amanieu: Yes, we call the panic hook. But then we eventually abort before we escape the drop.</p>\n</blockquote>\n<p>Could someone put a <code>while (!waiting_for_other_threads()) {thread::yield();}</code>into the panic hook for the webserver case? And would it be a good idea?</p>",
        "id": 262636641,
        "sender_full_name": "The 8472",
        "timestamp": 1637785491
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"330154\">@The 8472</span> That's roughly what we outlined in the meeting as something people might want to do (modulo implementation details).</p>",
        "id": 262636692,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637785526
    },
    {
        "content": "<p>Yeah, that is the obvious followup question but it seems iffy, e.g. code might deadlock because something is frozen in what would normally drop a lock guard for example.</p>",
        "id": 262637074,
        "sender_full_name": "The 8472",
        "timestamp": 1637785748
    },
    {
        "content": "<p>Something that percolated up in my brain: does more usage of <code>ManuallyDrop</code> help any of these scenarios?</p>\n<p>Certainly writing code that \"pre-leaks\" by putting something into a <code>ManuallyDrop</code> is less UB-prone than something that needs to get to a <code>forget</code> call.</p>\n<p>For example, we could deprecate <code>catch_unwind</code> in favour of something that's <code>-&gt; Result&lt;ManuallyDrop&lt;R&gt;&gt;</code> instead of <code>-&gt; Result&lt;R&gt;</code> to defuse that particular bomb.</p>",
        "id": 262637442,
        "sender_full_name": "scottmcm",
        "timestamp": 1637786027
    },
    {
        "content": "<p>It might help in some cases but not where unsafe code interacts with \"normal\" safe stuff that isn't tailored for the extra carefulness that unsafe needs.<br>\nEspecially when the thing the unsafe code does is dropping something</p>",
        "id": 262639248,
        "sender_full_name": "The 8472",
        "timestamp": 1637787291
    },
    {
        "content": "<p>Code using <code>ManuallyDrop</code> is more leak-prone since it doesn't benefit from the automatic \"continue trying to drop the next member on unwind\" behavior that normal struct fields have.</p>",
        "id": 262640185,
        "sender_full_name": "Amanieu",
        "timestamp": 1637787803
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/213817-t-lang/topic/design.20meeting.202021-11-24/near/262637442\">said</a>:</p>\n<blockquote>\n<p>Certainly writing code that \"pre-leaks\" by putting something into a <code>ManuallyDrop</code> is less UB-prone than something that needs to get to a <code>forget</code> call.</p>\n<p>For example, we could deprecate <code>catch_unwind</code> in favour of something that's <code>-&gt; Result&lt;ManuallyDrop&lt;R&gt;&gt;</code> instead of <code>-&gt; Result&lt;R&gt;</code> to defuse that particular bomb.</p>\n</blockquote>\n<p>Yes, <code>forget</code> is an anti-pattern, imho (if anything, because of Stacked Borrows). Anecdotically, I once wrote a custom lint that guarded against it when when toying with <code>dylint</code>, precisely to suggest using  <code>ManuallyDrop</code> instead.</p>\n<ol>\n<li><code>forget</code> -&gt; <code>ManuallyDrop::new()</code> can always be done</li>\n<li>At that point moving the <code>ManuallyDrop</code> \"as up as possible\" becomes easier, leading to less error-prone code.</li>\n</ol>\n<hr>\n<p>In the case of <code>catch_unwind</code>, however, <code>ManuallyDrop</code> isn't really the tool (it would kind of leak unnecessarily). For that I'd rather use a <code>-&gt; … DropCantUnwind&lt;R&gt;</code> instead:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[repr(transparent)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">DropCantUnwind</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">MD</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Deref</span><span class=\"p\">{,</span><span class=\"n\">Mut</span><span class=\"p\">}</span><span class=\"err\">…</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">()</span><span class=\"err\">…</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">into_inner</span><span class=\"p\">()</span><span class=\"err\">…</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Drop</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">DropCantUnwind</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">drop</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"bp\">self</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">_</span> <span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span>::<span class=\"n\">scopeguard</span>::<span class=\"n\">defer_on_unwind</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"fm\">panic!</span><span class=\"p\">(</span><span class=\"s\">\"Aborting\"</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">MD</span>::<span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>But the <code>catch_unwind</code> situation had already been discussed, right? Because of retro-compat the hands are kind of tied. Although for that particual case the <code>repr(transparent)</code> could be abused to either lie about the <code>TypeId</code>, or to overwrite the virtual destructor.</p>",
        "id": 262696004,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1637840625
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/design.20meeting.202021-11-24/near/262624063\">said</a>:</p>\n<blockquote>\n<p>It's possible that a lint against \"possible panics\" would have helped, but I think that in general such a lint + disallowing panic in drop would help even more.</p>\n</blockquote>\n<p>Such a lint would be very useful in <em>many</em> places, unwind safety being a no small one! I'd start off that and see how the situation evolves</p>",
        "id": 262696171,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1637840732
    }
]