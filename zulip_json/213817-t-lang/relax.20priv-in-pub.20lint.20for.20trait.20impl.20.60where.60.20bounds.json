[
    {
        "content": "<p>Following <a href=\"https://www.reddit.com/r/rust/comments/kvc18j/blog_post_rust_gotcha_deriving_copy_and_clone_can/gixozs9/\">this thread</a>, I wanted to take the temperature on a possible relaxation of the priv-in-pub lint in a particular situation... (cc <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span>)</p>",
        "id": 222458397,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1610469769
    },
    {
        "content": "<p>On public trait impls, it's currently an <strong>error</strong> to have a <code>where</code> bound constraining a private type with a trait:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Type</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Priv</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Priv</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Type</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Priv</span>: <span class=\"nc\">Trait</span><span class=\"w\"> </span><span class=\"c1\">// ERROR</span>\n<span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>...and it's a <strong>warning</strong> to have have a public type bound by a private trait:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Type</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Pub</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Priv</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Priv</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Pub</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Type</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Pub</span>: <span class=\"nc\">Priv</span><span class=\"w\"> </span><span class=\"c1\">// WARNING</span>\n<span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p><strong>I think these constraints could be relaxed without issue.</strong></p>",
        "id": 222458419,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1610469778
    },
    {
        "content": "<p>The primary purpose of the priv-in-pub lints is to prevent programmers from exposing public APIs that are externally unusable. (Secondarily, it provides a definition-site complement to <a href=\"https://github.com/rust-lang/rfcs/pull/2145\">type privacy</a>, which enforces that private types and impls are not unusable outside their visible scope.)</p>\n<p>However, private <code>where</code> bounds  on a public trait impl <em>aren't</em> a situation where a public API becomes externally unusable.</p>",
        "id": 222458517,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1610469813
    },
    {
        "content": "<p>Such a lint <em>is</em> useful for free functions; e.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Priv</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Pub</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Pub</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Pub</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Priv</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">function</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Priv</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>: <span class=\"nc\">Pub</span><span class=\"w\"> </span><span class=\"c1\">// WARNING</span>\n<span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>...because to call that function in a generic context, you need to 'forward' the <code>where</code> bound to the call-site:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">callsite</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Priv</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>: <span class=\"nc\">Pub</span><span class=\"w\"> </span><span class=\"c1\">// omitting this bound is a compile error</span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">function</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>...which you can only actually do if all elements of the bound are in scope at the call site.</p>",
        "id": 222458560,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1610469833
    },
    {
        "content": "<p>But this same reasoning <strong>doesn't</strong> hold for trait impls. To call a method on a public trait impl with private bounds, you don't need to 'forward' those private bounds, you can 'forward' the public trait:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">mod</span> <span class=\"nn\">upstream</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">method</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Type</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Pub</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Priv</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Priv</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Priv</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Pub</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Type</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Pub</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>: <span class=\"nc\">Priv</span><span class=\"w\"> </span><span class=\"c1\">// WARNING</span>\n<span class=\"w\">    </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">mod</span> <span class=\"nn\">downstream</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">super</span>::<span class=\"n\">upstream</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">function</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">value</span>: <span class=\"nc\">Type</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Type</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>: <span class=\"nc\">Trait</span><span class=\"w\"> </span><span class=\"c1\">// &lt;- no private deets!</span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">method</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 222458628,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1610469845
    },
    {
        "content": "<p>I don't think the fn-vs-impl distinction is necessary, since you can already bound functions by unnamable traits using the \"make it public in a private module\" trick, like I do here: <a href=\"https://github.com/scottmcm/arraytools/blob/a4a6c1bf31c4c62d7825d6ccdd6d4826d7062e34/src/lib.rs#L398-L460\">https://github.com/scottmcm/arraytools/blob/a4a6c1bf31c4c62d7825d6ccdd6d4826d7062e34/src/lib.rs#L398-L460</a></p>",
        "id": 222483732,
        "sender_full_name": "scottmcm",
        "timestamp": 1610480457
    },
    {
        "content": "<p>So it's already possible to write things that can only be called non-generically.  Weakinging the restrictions would just make it easier to write such things.</p>",
        "id": 222484023,
        "sender_full_name": "scottmcm",
        "timestamp": 1610480618
    },
    {
        "content": "<p>Does <a href=\"https://rust-lang.github.io/rfcs/2145-type-privacy.html\">https://rust-lang.github.io/rfcs/2145-type-privacy.html</a> address this?</p>",
        "id": 222484839,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1610480979
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/213817-t-lang/topic/relax.20priv-in-pub.20lint.20for.20trait.20impl.20.60where.60.20bounds/near/222484023\">said</a>:</p>\n<blockquote>\n<p>So it's already possible to write things that can only be called non-generically.  Weakinging the restrictions would just make it easier to write such things.</p>\n</blockquote>\n<p>Yep! I only draw the distinction because the priv-in-pub lint exists to <em>discourage</em> (but not make impossible) situations like that, because of a community value judgement that those situations are undesirable — but <code>where</code> bounds on trait impls <em>don't</em> give way to the same undesirable scenario. Turning of the lint in this particular case should be extra uncontroversial.</p>",
        "id": 222505316,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1610490669
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116118\">Matthew Jasper</span> <a href=\"#narrow/stream/213817-t-lang/topic/relax.20priv-in-pub.20lint.20for.20trait.20impl.20.60where.60.20bounds/near/222484839\">said</a>:</p>\n<blockquote>\n<p>Does <a href=\"https://rust-lang.github.io/rfcs/2145-type-privacy.html\">https://rust-lang.github.io/rfcs/2145-type-privacy.html</a> address this?</p>\n</blockquote>\n<p>Yes, that RFC/mechanism sets the stage for weakening many errors of the pub-in-priv lint into warnings (or muting them altogether), without affecting the soundness of the visibility system. It's just a matter of <em>actually</em> weakening/muting the lint now. (cc <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span>)</p>",
        "id": 222505866,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1610490987
    },
    {
        "content": "<p>Yeah, this just needs an implementation.</p>",
        "id": 222510358,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1610493697
    },
    {
        "content": "<p>By a very pedantic person.</p>",
        "id": 222510384,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1610493715
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219211\">Jack Wrenn</span> has marked this topic as resolved.</p>",
        "id": 260154345,
        "sender_full_name": "Notification Bot",
        "timestamp": 1635954690
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219211\">Jack Wrenn</span> has marked this topic as unresolved.</p>",
        "id": 260154463,
        "sender_full_name": "Notification Bot",
        "timestamp": 1635954729
    },
    {
        "content": "<p>While writing tests for this, I came across <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/const-generics/generic_const_exprs/eval-privacy.rs\"><code>test/ui/const-generics/generic_const_exprs/eval-privacy.rs</code></a>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![crate_type = </span><span class=\"s\">\"lib\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(generic_const_exprs)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![allow(incomplete_features)]</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Const</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">U</span>: <span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">AssocTy</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">assoc_fn</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">AssocTy</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">U</span>: <span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Const</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"c1\">//~^ WARN private type</span>\n<span class=\"c1\">//~| WARN this was previously</span>\n<span class=\"c1\">//~| WARN private type</span>\n<span class=\"c1\">//~| WARN this was previously</span>\n\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Const</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">my_const_fn</span><span class=\"p\">(</span><span class=\"n\">U</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span>: <span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">AssocTy</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Const</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">my_const_fn</span><span class=\"p\">(</span><span class=\"n\">U</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">//~^ ERROR private type</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">assoc_fn</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">AssocTy</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Const</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">my_const_fn</span><span class=\"p\">(</span><span class=\"n\">val</span>: <span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u8</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// body of this function doesn't matter</span>\n<span class=\"w\">    </span><span class=\"n\">val</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>...this <em>should</em> be permissible, right? Whether <code>my_const_fn</code> is public seems immaterial. What matters here is whether <code>Const</code> is a public type, and it is: it's declared <code>pub</code> and its constant parameter has a <code>pub</code> type (<code>u8</code>).</p>",
        "id": 260196439,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1635973037
    },
    {
        "content": "<p>Ah, I found <a href=\"https://github.com/rust-lang/rust/pull/79291#issuecomment-762495270\">this comment</a> by <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span>:</p>\n<blockquote>\n<p>@petrochenkov with <code>feature(const_evaluatable_checked)</code> the idea is that the user should be able to propagate requirements wards. Uing <code>{ expr }</code> as a where bound to mean that a (generic) <code>expr</code> evaluates successfully, we want to be able to write</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">const_fn_bound</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"c1\">// ..</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">const_fn_bound</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"c1\">// ^ this where clause is required for the call to `foo` to compile</span>\n<span class=\"w\">     </span><span class=\"n\">foo</span>::<span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>So our goal for now is to require everything used in these const evaluatable clauses to be public, as otherwise users of a crate would be unable to use that function in generic contexts. We may want to loosen this restriction in the future and only warn here but for now this seems like the safest approach to me</p>\n</blockquote>\n<p>...to which <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> <a href=\"https://github.com/rust-lang/rust/pull/79291#issuecomment-764995820\">replies</a>:</p>\n<blockquote>\n<blockquote>\n<p>the idea is that the user should be able to propagate requirements upwards</p>\n</blockquote>\n<p>For type-based predicates this goal was retired by <a href=\"https://github.com/rust-lang/rust/issues/48054\">#48054</a> (or at least requalified to a lint, which hasn't been implemented yet.)  this PR is an extension to the legacy private-in-public mechanism.</p>\n</blockquote>\n<p>Okay, so <strong>I think the answer is that it <em>should</em> be permissible (but, ideally, linted).</strong></p>",
        "id": 260198173,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1635973903
    },
    {
        "content": "<p>PR: <a href=\"https://github.com/rust-lang/rust/pull/90586\">https://github.com/rust-lang/rust/pull/90586</a></p>",
        "id": 260332028,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1636058745
    }
]