[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> -- as the \"async fn in traits\" liaison, do you want to \"pre-read\" the doc for Wed? <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> and I wrote it up here <a href=\"https://hackmd.io/@nikomatsakis/S1xxjkZGc\">https://hackmd.io/@nikomatsakis/S1xxjkZGc</a></p>",
        "id": 276104323,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647892092
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Done, thank you. I added several comments.</p>",
        "id": 276108231,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647894128
    },
    {
        "content": "<p>You can probably predict my most substantial feedback: \"no, let's not implicitly box by default, that's not a zero-cost abstraction\".</p>",
        "id": 276108284,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647894156
    },
    {
        "content": "<p>I'm really appreciating the format here, of stating requirements / design goals up front, because it makes it easier to discuss this in the context of specific requirements, rather than in the context of specific solutions.</p>",
        "id": 276108341,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647894197
    },
    {
        "content": "<p>I feel like there is a design goal of \"zero-cost abstraction\" missing here, which I would rank higher than some of the other current design goals.</p>",
        "id": 276108486,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647894268
    },
    {
        "content": "<p>FWIW, I am <em>less</em> concerned with performance here (allocation isn't necessarily a massive performance hit), and more concerned with use cases (hidden allocation feels like a loss of control).</p>",
        "id": 276108699,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647894376
    },
    {
        "content": "<p>Boxing be default seems fairly zero cost to me - you don’t pay if you don’t use it and I can’t imagine doing better with something handwritten. It feels kind of more ‘expensive’ than an implicit feature should be maybe, but I don’t think zero cost abstraction is quite the right objection?</p>",
        "id": 276110380,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1647895284
    },
    {
        "content": "<p>So, to look at it a slightly different way:</p>",
        "id": 276110908,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647895581
    },
    {
        "content": "<p>If you box, then you're doing an allocation, which means you could fail, which means this operation could panic.</p>",
        "id": 276110931,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647895598
    },
    {
        "content": "<p>That's one of several reasons why it's important to know if your operations allocate.</p>",
        "id": 276110946,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647895606
    },
    {
        "content": "<p>Suppose you're in a context in which you <em>cannot</em> panic on allocation failure, and you instead need to carefully process that and return <code>-ENOMEM</code> from the kernel call you're in?</p>",
        "id": 276111001,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647895637
    },
    {
        "content": "<p>That's not a no_std context.</p>",
        "id": 276111010,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647895644
    },
    {
        "content": "<p>But where's the mechanism to say \"no, stop, don't allow code to compile at all if it doesn't handle this correctly\".</p>",
        "id": 276111037,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647895661
    },
    {
        "content": "<p>There isn't even an opt-out, let alone a requirement to opt in.</p>",
        "id": 276111064,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647895677
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> =) I'll read the comments. I think it'd be helpful if we can phrase this as a \"requirement\" we are trying to meet, then maybe we can iterate on that. </p>\n<p>For me, the need to box stems from the requirement that the \"easy path should be easy\" -- i.e., you should be able to write natural code and have it just work.</p>",
        "id": 276114713,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647897234
    },
    {
        "content": "<p>It'd be good to have more examples of the patterns you are talking about and where you anticipate a problem.</p>",
        "id": 276114870,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647897265
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276114713\">said</a>:</p>\n<blockquote>\n<p>Thanks <span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> =) I'll read the comments. I think it'd be helpful if we can phrase this as a \"requirement\" we are trying to meet, then maybe we can iterate on that. </p>\n</blockquote>\n<p>In particular, I'm wondering if some kind of allow-by-default lint makes sense here. This feels like a case where there are likely a variety of concerns one has to audit for.</p>",
        "id": 276115072,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647897370
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276114713\">said</a>:</p>\n<blockquote>\n<p>For me, the need to box stems from the requirement that the \"easy path should be easy\" -- i.e., you should be able to write natural code and have it just work.</p>\n</blockquote>\n<p>Right, and I really appreciated having that requirement written explicitly. I both agree with that requirement and rank it lower than \"don't allocate implicitly\". :)</p>",
        "id": 276117553,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647898743
    },
    {
        "content": "<p>And I appreciate that having those requirements stated explicitly gets us that much closer to our cruxes. :)</p>",
        "id": 276117587,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647898765
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276115072\">said</a>:</p>\n<blockquote>\n<p>In particular, I'm wondering if some kind of allow-by-default lint makes sense here. This feels like a case where there are likely a variety of concerns one has to audit for.</p>\n</blockquote>\n<p>Perhaps, but it feels like that's starting from a requirement that it look a certain way, and then working backwards to a mechanism for making the other cases possible, which makes those cases feel second-class.</p>",
        "id": 276117774,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647898867
    },
    {
        "content": "<p>Part of what I'm getting at is -- imagine that we required explicit annotation, e.g., via <code>#[dyn(box)]</code>. Do you think that your use case would be satisfied?</p>",
        "id": 276118483,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647899264
    },
    {
        "content": "<p>I could also imagine wanting other points -- perhaps the coercion that references the boxing vtable -- to be loud. But I'm not sure if I find that convincing, since most any fn call could allocate.</p>",
        "id": 276118598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647899322
    },
    {
        "content": "<p>The other question is whether \"easy to audit allocations if desired\" is a better way to phrase your requirement.</p>",
        "id": 276119546,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647899951
    },
    {
        "content": "<p>\"easy to audit and prevent allocations if desired\"?</p>",
        "id": 276119766,
        "sender_full_name": "tmandry",
        "timestamp": 1647900070
    },
    {
        "content": "<p>one thing that bothers me is -- I feel like our lints and things are not \"organized\" enough here. This feels related to the whole portability design question.</p>",
        "id": 276120089,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647900272
    },
    {
        "content": "<p>hoping not to derail discussion too much, but it would be nice if you could define profiles that enable certain lints and other global things (dyn adaptation strategy, allocator if crate_type = bin, ...)</p>",
        "id": 276120755,
        "sender_full_name": "tmandry",
        "timestamp": 1647900722
    },
    {
        "content": "<p>but that feels more like a build system feature</p>",
        "id": 276120985,
        "sender_full_name": "tmandry",
        "timestamp": 1647900888
    },
    {
        "content": "<p>this is partly what I am getting at</p>",
        "id": 276121363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647901166
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276118483\">said</a>:</p>\n<blockquote>\n<p>Part of what I'm getting at is -- imagine that we required explicit annotation, e.g., via <code>#[dyn(box)]</code>. Do you think that your use case would be satisfied?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Explicit annotation where? I was kinda assuming the annotation would just be <code>Box::new</code> in the appropriate place.</p>",
        "id": 276121996,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647901613
    },
    {
        "content": "<p>This seems like something the compiler could catch, and suggest either <code>Box::new</code> or <code>dyner::Something::new</code>.</p>",
        "id": 276122031,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647901647
    },
    {
        "content": "<p>(Bonus if some future work could give a hint of \"don't suggest <code>Box::new</code>\", but that's optional.)</p>",
        "id": 276122057,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647901670
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> My initial reaction is \"this seems like a case where it's correct that Rust and Dada would have different behavior because they have different requirements\". :)</p>",
        "id": 276122129,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647901717
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276121996\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> Explicit annotation where? I was kinda assuming the annotation would just be <code>Box::new</code> in the appropriate place.</p>\n</blockquote>\n<p>It's not that simple-- you only want the box to occur when using dynamic dispatch, not static dispatch. Under the current design, the annotation would be on the impl that is implementing the trait. Or, more specifically, on the async fn within that impl.</p>",
        "id": 276172715,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647947784
    },
    {
        "content": "<p>The allocation is happening inside the \"shim\" function that goes in the vtable, and the <code>#[dyn(box)]</code> annotation controls how that shim function is generated.</p>",
        "id": 276172751,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647947821
    },
    {
        "content": "<p>The <code>#[dyner::inline_adapter(MyAdapterTrait)]</code> syntax seems mainly designed for the \"async iterator\" use-case. Would it still work with non-async RPIT-in-traits? With traits that have multiple async methods?</p>",
        "id": 276178918,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1647951139
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Ah, I think I see! The box goes around the one return value, not the dyn trait.</p>",
        "id": 276191392,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647957204
    },
    {
        "content": "<p>Correct.</p>",
        "id": 276197406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647959669
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"263609\">Olivier FAURE</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276178918\">said</a>:</p>\n<blockquote>\n<p>The <code>#[dyner::inline_adapter(MyAdapterTrait)]</code> syntax seems mainly designed for the \"async iterator\" use-case. Would it still work with non-async RPIT-in-traits? With traits that have multiple async methods?</p>\n</blockquote>\n<p>I don't think there is any specific to async iterator <em>per se</em>-- it works best for <code>&amp;mut self</code> methods, though, and if you have a whole bunch of async fns but you only call 1 or 2 you would waste some stack space. (With <code>&amp;self</code> methods, we have to prevent recursion, and that is a dynamic check; I don't think there's much of a way around <em>that</em>.)</p>\n<p>That said, from discussions with folks in an embedded etc space, there are very limited reasons to use <code>dyn</code> and the above conditions mostly apply just fine.</p>",
        "id": 276197584,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647959756
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I don't think <code>&amp;mut self</code> alone is enough to prevent recursion</p>",
        "id": 276247570,
        "sender_full_name": "tmandry",
        "timestamp": 1647979781
    },
    {
        "content": "<blockquote>\n<p>(With <code>&amp;self</code> methods, we have to prevent recursion, and that is a dynamic check; I don't think there's much of a way around that.)</p>\n</blockquote>\n<p>You don't just have to prevent recursion, you have to handle this case:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">MyTrait</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">get_printable</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Display</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">call_three_times</span><span class=\"p\">(</span><span class=\"n\">obj</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"n\">MyTrait</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">obj</span><span class=\"p\">.</span><span class=\"n\">get_printable</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">obj</span><span class=\"p\">.</span><span class=\"n\">get_printable</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">obj</span><span class=\"p\">.</span><span class=\"n\">get_printable</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{a} {b} {c}\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276372609,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1648057115
    },
    {
        "content": "<p>I guess you could use refcells to make it fail at runtime, but it seems unexpected</p>",
        "id": 276373067,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1648057324
    },
    {
        "content": "<p>so <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> something I wanted to follow up with</p>",
        "id": 276376296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648058671
    },
    {
        "content": "<p>yes, we would use something refcell-like</p>",
        "id": 276376297,
        "sender_full_name": "tmandry",
        "timestamp": 1648058671
    },
    {
        "content": "<p>at least right now with rust, if you have <code>dyn AsyncIterator</code>, then this type implements <code>AsyncIterator</code></p>",
        "id": 276376328,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648058689
    },
    {
        "content": "<p>which implies that you can have</p>",
        "id": 276376343,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648058699
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">AsyncIterator</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">t</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276376374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648058715
    },
    {
        "content": "<p>which might or might not be dyn</p>",
        "id": 276376382,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648058719
    },
    {
        "content": "<p>Sure. And we're allowed to change the <code>extern \"Rust\"</code> calling convention any way we want, so if we need handling for the \"may or may not be dyn\" case we can do that.</p>",
        "id": 276376432,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648058743
    },
    {
        "content": "<p>it's not impossible to have opt-in, but it chips away at that composition and so forth</p>",
        "id": 276376441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648058749
    },
    {
        "content": "<p>it's not about the ABI</p>",
        "id": 276376466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648058761
    },
    {
        "content": "<p>it's that you couldn't write functions like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">AsyncIterator</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276376533,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648058786
    },
    {
        "content": "<p>maybe fine, just an observation</p>",
        "id": 276376544,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648058791
    },
    {
        "content": "<p>or rather, you could write them</p>",
        "id": 276376555,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648058800
    },
    {
        "content": "<p>but they'd have to \"opt-in\" to some strategy</p>",
        "id": 276376562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648058805
    },
    {
        "content": "<p>Right. That seems completely fine to me?</p>",
        "id": 276376575,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648058811
    },
    {
        "content": "<p>it's very unclear to me that they are in a good position to do that!</p>",
        "id": 276376577,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648058811
    },
    {
        "content": "<p>Sorry, correction:</p>",
        "id": 276376668,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648058846
    },
    {
        "content": "<p>i'm still a bit stuck on what bad outcome you are trying to avoid -- or at least, why it's not ok for code that has very particular requirements about allocation to say so (and wouldn't that be an opportunity for us to help that code even further?)</p>",
        "id": 276376701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648058863
    },
    {
        "content": "<p>I would expect that someone who has a <code>dyn T</code> who wants to pass that to an <code>impl T + ?Sized</code> has to make the decision at <em>that</em> point about how to handle it.</p>",
        "id": 276376735,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648058875
    },
    {
        "content": "<p>interesting</p>",
        "id": 276376795,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648058887
    },
    {
        "content": "<p>so <code>dyn T: T</code> would no longer be true</p>",
        "id": 276376816,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648058895
    },
    {
        "content": "<p>but there'd be adapters to from <code>dyn T</code> to <code>impl T</code></p>",
        "id": 276376830,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648058903
    },
    {
        "content": "<p>(mind you, I've thought about lifting that requirement for a lot of reasons, so I think that's ok)</p>",
        "id": 276376855,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648058915
    },
    {
        "content": "<p>(regardless, I still think we should make the simple code work)</p>",
        "id": 276376890,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648058933
    },
    {
        "content": "<p>(and provide a way to say when you don't like box)</p>",
        "id": 276376907,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648058940
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276376907\">said</a>:</p>\n<blockquote>\n<p>(and provide a way to say when you don't like box)</p>\n</blockquote>\n<p>(insert ongoing objection to \"say when you <em>don't</em> like\" here)</p>",
        "id": 276376961,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648058962
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276376816\">said</a>:</p>\n<blockquote>\n<p>so <code>dyn T: T</code> would no longer be true</p>\n</blockquote>\n<p>The fact that that's true today does seem like a painful limitation, yes.</p>",
        "id": 276376990,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648058979
    },
    {
        "content": "<p>(For the longest time I wasn't aware that that <em>was</em> true.)</p>",
        "id": 276377037,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648059000
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276376961\">said</a>:</p>\n<blockquote>\n<p>(insert ongoing objection to \"say when you <em>don't</em> like\" here)</p>\n</blockquote>\n<p>what exactly is it? you don't like opting out in general?</p>",
        "id": 276377103,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059012
    },
    {
        "content": "<p>or specific to <code>Box</code></p>",
        "id": 276377140,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059033
    },
    {
        "content": "<p>/me tries to formulate that objection.</p>",
        "id": 276377207,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648059076
    },
    {
        "content": "<p>can you walk me through the scenario you have in mind a bit more closely?</p>",
        "id": 276377224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059084
    },
    {
        "content": "<p>I think it's something like this</p>",
        "id": 276377234,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059089
    },
    {
        "content": "<p>I am a kernel developer</p>",
        "id": 276377242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059094
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 276377249,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059098
    },
    {
        "content": "<p>I am manually reading my code</p>",
        "id": 276377264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059109
    },
    {
        "content": "<p>to look for boxes :)</p>",
        "id": 276377270,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059112
    },
    {
        "content": "<p>to the point, I have to be very careful about where I allocate</p>",
        "id": 276377334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059126
    },
    {
        "content": "<p>I see</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">SomeTrait</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">method</span><span class=\"p\">().</span><span class=\"k\">await</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276377366,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059143
    },
    {
        "content": "<p>that code on its own is fine</p>",
        "id": 276377379,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059148
    },
    {
        "content": "<p>then elsewhere I see</p>",
        "id": 276377389,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059151
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">something</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276377412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059161
    },
    {
        "content": "<p>Trying to roughly capture the feeling, here: I don't like code that looks <em>exactly like</em> other code patterns but makes allocations behind the scenes in order to not change the interface.</p>",
        "id": 276377413,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648059161
    },
    {
        "content": "<p>where <code>something: T</code></p>",
        "id": 276377415,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059164
    },
    {
        "content": "<p>so I go read the impl for <code>T</code> to be sure that its impl doesn't box</p>",
        "id": 276377432,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059172
    },
    {
        "content": "<p>I don't see any boxes, so I am happy</p>",
        "id": 276377438,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059175
    },
    {
        "content": "<p>but one is injected by the shim at the coercion site that I didn't realize</p>",
        "id": 276377462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059187
    },
    {
        "content": "<p>That's getting much closer to the feeling, yes.</p>",
        "id": 276377482,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648059197
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276377379\">said</a>:</p>\n<blockquote>\n<p>that code on its own is fine</p>\n</blockquote>\n<p>\"on its own is fine\" is actually getting closer to the feeling I'm concerned about, yes.</p>",
        "id": 276377487,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648059200
    },
    {
        "content": "<p>I mean, I see that as a key feature</p>",
        "id": 276377515,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059212
    },
    {
        "content": "<p>that's \"separation of concerns\"</p>",
        "id": 276377527,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059218
    },
    {
        "content": "<p>Right now, we're getting close to the point where I just mentally add <code>dyn</code> to the \"don't ever do that\" list in contexts where I care at all about allocation.</p>",
        "id": 276377548,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648059222
    },
    {
        "content": "<p>I'd like to not do that.</p>",
        "id": 276377560,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648059232
    },
    {
        "content": "<p>I want people to be able to write libraries that don't have to think about their caller's requirements and they can still be used by all the callers</p>",
        "id": 276377562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059233
    },
    {
        "content": "<p>I still feel like what you want is a \"#[warn(allocation)]` lint</p>",
        "id": 276377648,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059257
    },
    {
        "content": "<p>that warns about calls to <code>Box::new</code>, <code>vec.push</code>, etc</p>",
        "id": 276377671,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059266
    },
    {
        "content": "<p>but also coercions to dyn that don't use <code>dyn(identity)</code></p>",
        "id": 276377686,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059276
    },
    {
        "content": "<p>Right now, I can skim for <code>String</code> or <code>Vec</code> or <code>Box</code> or similar, and be confident allocation doesn't happen. Do I need to add <code>dyn</code> to that list, or can there be something more specific so that <code>dyn</code> in general is not verboten?</p>",
        "id": 276377719,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648059290
    },
    {
        "content": "<p>One thing that comes to mind is that implicit boxing may be much more acceptable in <code>async</code> contexts than in general RPITIDT contexts. Maybe a middle ground here is to do opt out in async but opt in for other cases. I do think it's sort of unfortunate that Rust loses the \"no implicit allocations\" claim to fame, but specifically <code>async</code> seems like a domain where this is of less concern</p>",
        "id": 276377750,
        "sender_full_name": "Jake",
        "timestamp": 1648059304
    },
    {
        "content": "<p>dyn in general is not verboten, dyn without some kind of adapter is</p>",
        "id": 276377761,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059308
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276377761\">said</a>:</p>\n<blockquote>\n<p>dyn in general is not verboten, dyn without some kind of adapter is</p>\n</blockquote>\n<p>What do I grep for to find \"dyn without some kind of adapter\"?</p>",
        "id": 276377794,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648059323
    },
    {
        "content": "<p>I feel like there's a \"code reading\" pattern here, of \"I shouldn't have to know multiple distant pieces of information to find something\".</p>",
        "id": 276377821,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648059333
    },
    {
        "content": "<p>why would you grep and not let the compiler help you?</p>",
        "id": 276377822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059333
    },
    {
        "content": "<p>like, we could add a crate attr <code>#![no_implicit_dyn_boxing]</code> which removes the auto box feature, don't we?</p>",
        "id": 276377843,
        "sender_full_name": "lcnr",
        "timestamp": 1648059340
    },
    {
        "content": "<p>The compiler isn't helping me, it's boxing \"for\" me. :P</p>",
        "id": 276377853,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648059344
    },
    {
        "content": "<p><code>#[warn(...)]</code></p>",
        "id": 276377863,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059351
    },
    {
        "content": "<p>I mean: let the compiler help you search</p>",
        "id": 276377881,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059358
    },
    {
        "content": "<p>like, if you don't want something, say so</p>",
        "id": 276377922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059363
    },
    {
        "content": "<p>I don't think it's always good</p>",
        "id": 276377950,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059372
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276377863\">said</a>:</p>\n<blockquote>\n<p><code>#[warn(...)]</code></p>\n</blockquote>\n<p>But I don't want to warn on every allocation. I'm not in no_std. I want to <em>be careful about</em> every allocation.</p>",
        "id": 276377951,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648059373
    },
    {
        "content": "<p>but in this case it seems like a decent tradeoff</p>",
        "id": 276377958,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059378
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276377843\">said</a>:</p>\n<blockquote>\n<p>like, we could add a crate attr <code>#![no_implicit_dyn_boxing]</code> which removes the auto box feature, don't we?</p>\n</blockquote>\n<p>and with that we're back at no implicit allocations <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 276377960,
        "sender_full_name": "lcnr",
        "timestamp": 1648059379
    },
    {
        "content": "<p>especially given how omnipresent allocations are</p>",
        "id": 276377973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059382
    },
    {
        "content": "<p>I feel you overestimate your ability to predict that</p>",
        "id": 276377995,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059400
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276377843\">said</a>:</p>\n<blockquote>\n<p>like, we could add a crate attr <code>#![no_implicit_dyn_boxing]</code> which removes the auto box feature, don't we?</p>\n</blockquote>\n<p>yes, I'm basically saying this feature could be <code>#[deny(allocation)]</code></p>",
        "id": 276378037,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059423
    },
    {
        "content": "<p>where this is a new lint group</p>",
        "id": 276378042,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059427
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276378037\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276377843\">said</a>:</p>\n<blockquote>\n<p>like, we could add a crate attr <code>#![no_implicit_dyn_boxing]</code> which removes the auto box feature, don't we?</p>\n</blockquote>\n<p>yes, I'm basically saying this feature could be <code>#[deny(allocation)]</code></p>\n</blockquote>\n<p>See above, I don't want to <em>deny</em> allocation, I want to think about every allocation.</p>",
        "id": 276378072,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648059439
    },
    {
        "content": "<p>no one is stopping you?</p>",
        "id": 276378096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059450
    },
    {
        "content": "<p>It's hard to think about things that aren't visible in the code.</p>",
        "id": 276378122,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648059460
    },
    {
        "content": "<p>you can <code>#[allow]</code>, or you can use an adapter that allocates (and hence uses <code>dyn(identity)</code>)</p>",
        "id": 276378128,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059462
    },
    {
        "content": "<p>I mean, <code>#[deny(allocation)]</code> would be exactly that.</p>",
        "id": 276378138,
        "sender_full_name": "Connor Horman",
        "timestamp": 1648059465
    },
    {
        "content": "<p>\"compiler-added implicit code\" has not in the past included allocations.</p>",
        "id": 276378152,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648059471
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"257758\">Connor Horman</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276378138\">said</a>:</p>\n<blockquote>\n<p>I mean, <code>#[deny(allocation)]</code> would be exactly that.</p>\n</blockquote>\n<p>see my comment above :)</p>",
        "id": 276378161,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059476
    },
    {
        "content": "<blockquote>\n<p>But I don't want to warn on every allocation. I'm not in no_std. I want to be careful about every allocation.</p>\n</blockquote>\n<p>This seems like a good use case for clippy \"restriction\" lints?</p>",
        "id": 276378164,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1648059477
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276378152\">said</a>:</p>\n<blockquote>\n<p>\"compiler-added implicit code\" has not in the past included allocations.</p>\n</blockquote>\n<p>that's true, but we are now addressing a wider range of use cases</p>",
        "id": 276378227,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059489
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276378227\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276378152\">said</a>:</p>\n<blockquote>\n<p>\"compiler-added implicit code\" has not in the past included allocations.</p>\n</blockquote>\n<p>that's true, but we are now addressing a wider range of use cases</p>\n</blockquote>\n<p>Right, and I'm trying to advocate for the requirement of \"don't ever do that, find another way to solve those use cases\".</p>",
        "id": 276378260,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648059504
    },
    {
        "content": "<p>I'm trying to install that at the requirements level. :)</p>",
        "id": 276378273,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648059510
    },
    {
        "content": "<p>yes, I realize that, and I'm pushing back :)</p>",
        "id": 276378316,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059527
    },
    {
        "content": "<p>I think what I'm saying is:</p>\n<ul>\n<li>this concern is niche</li>\n<li>it's ok to ask people with this concern to say so</li>\n</ul>",
        "id": 276378348,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059540
    },
    {
        "content": "<p>it takes one line</p>",
        "id": 276378363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059547
    },
    {
        "content": "<p>and it makes your life better in other ways too</p>",
        "id": 276378372,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059552
    },
    {
        "content": "<p>you don't have to be the compiler</p>",
        "id": 276378376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059555
    },
    {
        "content": "<p>I know, and I'd be happy to have a discussion at that level (in addition to the this-instance case of \"can we do without\").</p>",
        "id": 276378378,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648059556
    },
    {
        "content": "<p>you can let the compiler be the compiler and help you</p>",
        "id": 276378387,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059561
    },
    {
        "content": "<p>SIde note, I think implicit allocation of any kind is a poor idea. C++ has implicit allocation, and it means <code>operator new</code> is a required function, even in freestanding.</p>",
        "id": 276378411,
        "sender_full_name": "Connor Horman",
        "timestamp": 1648059572
    },
    {
        "content": "<p>I mean, if we were <em>actually</em> adding a feature to the compiler to help with this, it'd be something that looks like unsafe blocks. <code>alloc_ok { ... }</code>. That'd be a <em>fascinating</em> effect-ish thing to add, where any function doing an allocation has to propagate that property upwards.</p>",
        "id": 276378464,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648059594
    },
    {
        "content": "<p>/me thinks</p>",
        "id": 276378525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059605
    },
    {
        "content": "<p><code>alloc_ok { random_function() }</code> if <code>random_function()</code> wants to write <code>Vec::new()</code> internally.</p>",
        "id": 276378547,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648059612
    },
    {
        "content": "<p>I think to phrase things in a more positive way, it seems <em>very important</em> to me that people are able to work with dyn trait objects in a natural way</p>",
        "id": 276378561,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059618
    },
    {
        "content": "<p>But I don't see us adding that <em>soon</em>. :)</p>",
        "id": 276378565,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648059619
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276378561\">said</a>:</p>\n<blockquote>\n<p>I think to phrase things in a more positive way, it seems <em>very important</em> to me that people are able to work with dyn trait objects in a natural way</p>\n</blockquote>\n<p>I understand and acknowledge that requirement.</p>",
        "id": 276378588,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648059631
    },
    {
        "content": "<p>having to add box in front of every method call doesn't feel natural to me</p>",
        "id": 276378594,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059633
    },
    {
        "content": "<p>Approaching things in similar terms...</p>",
        "id": 276378617,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648059647
    },
    {
        "content": "<p>I'm not especially keen on the fact that you have to write <code>Box&lt;dyn ...&gt;</code>, I'd like to do better there too</p>",
        "id": 276378619,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059647
    },
    {
        "content": "<p>Isn't that what unsized locals are for?</p>",
        "id": 276378674,
        "sender_full_name": "Connor Horman",
        "timestamp": 1648059672
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276378594\">said</a>:</p>\n<blockquote>\n<p>having to add box in front of every method call doesn't feel natural to me</p>\n</blockquote>\n<p>Having to write <code>box</code> or similar in front of a method call that allocates feels both natural and very Rust to me; it evokes the feeling Rust gives me of \"I know what Rust is doing, Rust won't do something unexpected behind my back\".</p>",
        "id": 276378682,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648059676
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276378464\">said</a>:</p>\n<blockquote>\n<p>I mean, if we were <em>actually</em> adding a feature to the compiler to help with this, it'd be something that looks like unsafe blocks. <code>alloc_ok { ... }</code>. That'd be a <em>fascinating</em> effect-ish thing to add, where any function doing an allocation has to propagate that property upwards.</p>\n</blockquote>\n<p>I'm not sure how different that is from what I jsut proposed with a lint</p>",
        "id": 276378683,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059677
    },
    {
        "content": "<p>it doesn't seem very different</p>",
        "id": 276378689,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059680
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"257758\">Connor Horman</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276378674\">said</a>:</p>\n<blockquote>\n<p>Isn't that what unsized locals are for?</p>\n</blockquote>\n<p>Don't work in generators unfortunately</p>",
        "id": 276378722,
        "sender_full_name": "Jake",
        "timestamp": 1648059692
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"257758\">Connor Horman</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276378674\">said</a>:</p>\n<blockquote>\n<p>Isn't that what unsized locals are for?</p>\n</blockquote>\n<p>they don't work in async or... in general :)</p>",
        "id": 276378742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059697
    },
    {
        "content": "<p>but certainly not in async</p>",
        "id": 276378756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059701
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> A lint wouldn't actually have the desired property, because you can allow a lint in a random function <em>without</em> having to then allow the same lint whenever calling the function.</p>",
        "id": 276378767,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648059707
    },
    {
        "content": "<p>also, no, they don't work in general for this case</p>",
        "id": 276378769,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059707
    },
    {
        "content": "<p>(well, I guess if you store the szie in the vtable, you can make it work)</p>",
        "id": 276378789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059719
    },
    {
        "content": "<p>(for this particular case)</p>",
        "id": 276378841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059726
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276378767\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> A lint wouldn't actually have the desired property, because you can allow a lint in a random function <em>without</em> having to then allow the same lint whenever calling the function.</p>\n</blockquote>\n<p>same with unsfae?</p>",
        "id": 276378868,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059739
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276378789\">said</a>:</p>\n<blockquote>\n<p>(well, I guess if you store the szie in the vtable, you can make it work)</p>\n</blockquote>\n<p>I'd very much like to explore that solution, for this particular case, in addition to discussing the general requirement.</p>",
        "id": 276378882,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648059746
    },
    {
        "content": "<blockquote>\n<p>also, no, they don't work in general for this case</p>\n</blockquote>\n<p>I want to push back a little on that</p>",
        "id": 276378898,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1648059754
    },
    {
        "content": "<p>I agree, I was mistaken about that</p>",
        "id": 276378930,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059769
    },
    {
        "content": "<p>if you store the size of the future in the vtable</p>",
        "id": 276378938,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059773
    },
    {
        "content": "<p><em>and</em> you're in an environment that supports alloca</p>",
        "id": 276378961,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059780
    },
    {
        "content": "<p>you can do that</p>",
        "id": 276378967,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059782
    },
    {
        "content": "<p>Can I quickly make my case?</p>",
        "id": 276378992,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1648059792
    },
    {
        "content": "<p>it wouldn't work for (e.g.) returning <code>[u32]</code> or something</p>",
        "id": 276378996,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059794
    },
    {
        "content": "<p>where the length is computed by the fn</p>",
        "id": 276379001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059799
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"263609\">Olivier FAURE</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276378992\">said</a>:</p>\n<blockquote>\n<p>Can I quickly make my case?</p>\n</blockquote>\n<p>Please do go ahead, I'd like to hear what you're proposing.</p>",
        "id": 276379029,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648059810
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> FWIW, I do agree that \"size in the vtable\" is not a completely optimal solution either. If you have a function that sometimes returns a tiny future and sometimes returns a huge future then ideally you'd be able to allocate only what's needed for the given call.</p>",
        "id": 276379105,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648059841
    },
    {
        "content": "<p>AIUI we make that tradeoff today, in that futures are as big as the biggest suspend point requires.</p>",
        "id": 276379178,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648059855
    },
    {
        "content": "<p>yes, I'd like to have an easy way to \"box\" cold parts of your future</p>",
        "id": 276379222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059876
    },
    {
        "content": "<p>niko: To make sure I understand your position: Your problem with the \"unsized returns\" path is that it doesn't work for the use case of embedded developers in a no_alloc environment that nevertheless want to use <code>dyn AsyncIterator</code>. Is that correct?</p>",
        "id": 276379253,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1648059892
    },
    {
        "content": "<p>Isn't the size of the type already in the vtable, because of <code>size_of_val</code>?</p>",
        "id": 276379283,
        "sender_full_name": "Connor Horman",
        "timestamp": 1648059910
    },
    {
        "content": "<p>I'm pondering -- there's definitely a problem here of \"for some people, box is something to be very careful about; for others, it's a huge enabler\".</p>",
        "id": 276379303,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059918
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"257758\">Connor Horman</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276379283\">said</a>:</p>\n<blockquote>\n<p>Isn't the size of the type already in the vtable, because of <code>size_of_val</code>?</p>\n</blockquote>\n<p>this is the size of the futures its methods will return</p>",
        "id": 276379318,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059926
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"263609\">Olivier FAURE</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276379253\">said</a>:</p>\n<blockquote>\n<p>niko: To make sure I understand your position: Your problem with the \"unsized returns\" path is that it doesn't work for the use case of embedded developers in a no_alloc environment that nevertheless want to use <code>dyn AsyncIterator</code>. Is that correct?</p>\n</blockquote>\n<p>no</p>",
        "id": 276379334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059936
    },
    {
        "content": "<p>Ah ok. That would be annoying.</p>",
        "id": 276379354,
        "sender_full_name": "Connor Horman",
        "timestamp": 1648059948
    },
    {
        "content": "<p>in async</p>",
        "id": 276379358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059950
    },
    {
        "content": "<p>basically, the way that async fn works is that you return an <code>impl Future</code></p>",
        "id": 276379425,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059963
    },
    {
        "content": "<p>which can get embedded in other <code>impl Future</code> types</p>",
        "id": 276379439,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059972
    },
    {
        "content": "<p>to yield your final future type, which has a fixed size</p>",
        "id": 276379460,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059979
    },
    {
        "content": "<p>FWIW, I absolutely think box is a huge enabler, and I'm glad Rust makes it so easy (with, among other things, Deref).</p>",
        "id": 276379467,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648059983
    },
    {
        "content": "<p>we allocate that in the heap, and it effectively <em>becomes</em> the stack for that future</p>",
        "id": 276379478,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648059988
    },
    {
        "content": "<p>I'm also glad Rust makes it as easy as it can without making it disappear.</p>",
        "id": 276379491,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648059995
    },
    {
        "content": "<p>I'd also like for specifically <code>Box</code> to not become even <em>more</em> magic.</p>",
        "id": 276379544,
        "sender_full_name": "Connor Horman",
        "timestamp": 1648060023
    },
    {
        "content": "<p>Down the \"disappear\" path lies Java, where it feels like it takes considerable skill to say \"no, really, I just want an integer, not a pointer to an integer\".</p>",
        "id": 276379545,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648060024
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276379478\">said</a>:</p>\n<blockquote>\n<p>we allocate that in the heap, and it effectively <em>becomes</em> the stack for that future</p>\n</blockquote>\n<p>the point being, we can't alloca in that environment</p>",
        "id": 276379576,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060043
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"257758\">Connor Horman</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276379544\">said</a>:</p>\n<blockquote>\n<p>I'd also like for specifically <code>Box</code> to not become even <em>more</em> magic.</p>\n</blockquote>\n<p><code>#[lang = \"Box\"]</code>; let's not go down that tangent in <em>this</em> thread please. :)</p>",
        "id": 276379582,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648060048
    },
    {
        "content": "<p>the stack is a struct allocated in the heap</p>",
        "id": 276379587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060052
    },
    {
        "content": "<p>Right.</p>",
        "id": 276379599,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1648060062
    },
    {
        "content": "<p>But the unsized returns proposal works without alloca</p>",
        "id": 276379630,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1648060079
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276379587\">said</a>:</p>\n<blockquote>\n<p>the stack is a struct allocated in the heap</p>\n</blockquote>\n<p>Checking something: in the context of a future, that struct can also be allocated on the caller's stack, right?</p>",
        "id": 276379693,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648060091
    },
    {
        "content": "<p>there seem to be 2 questions re: box, one (which I think <span class=\"user-mention\" data-user-id=\"257758\">@Connor Horman</span> is alluding to) is that it is well understood by the analyses, the other is the fact that it allocates. lifting the first is relatively easy and orthogonal.</p>",
        "id": 276379700,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060093
    },
    {
        "content": "<p>the latter is more fundamental :)</p>",
        "id": 276379715,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060099
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276379693\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276379587\">said</a>:</p>\n<blockquote>\n<p>the stack is a struct allocated in the heap</p>\n</blockquote>\n<p>Checking something: in the context of a future, that struct can also be allocated on the caller's stack, right?</p>\n</blockquote>\n<p>yes, I was simplifying, but regardless it's a struct of fixed size</p>",
        "id": 276379737,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060112
    },
    {
        "content": "<p>Understood.</p>",
        "id": 276379762,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648060122
    },
    {
        "content": "<p>and the point is that you need to be able to pop that stack frame easily</p>",
        "id": 276379763,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060122
    },
    {
        "content": "<p>and jump back into it</p>",
        "id": 276379770,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060124
    },
    {
        "content": "<p>so that's kind of the \"whole thing\"</p>",
        "id": 276379780,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060130
    },
    {
        "content": "<blockquote>\n<p>But the unsized returns proposal works without alloca</p>\n</blockquote>\n<p>The idea is that you do <code>Box::new_with(|| function_that_returns_unsized(a, b, c))</code> and with some compiler magic detailed in the RFC, it all works without doing allocas</p>",
        "id": 276379787,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1648060134
    },
    {
        "content": "<p>if we are boxing anyway.....</p>",
        "id": 276379805,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060145
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276379582\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"257758\">Connor Horman</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276379544\">said</a>:</p>\n<blockquote>\n<p>I'd also like for specifically <code>Box</code> to not become even <em>more</em> magic.</p>\n</blockquote>\n<p><code>#[lang = \"Box\"]</code>; let's not go down that tangent in <em>this</em> thread please. :)</p>\n</blockquote>\n<p>I mean, at least keeping from gaining more magic is relevant here, since it's an argument against autoboxing. I'm not going to argue making it less magic, I'll save that for deref patterns and deref move.</p>",
        "id": 276379809,
        "sender_full_name": "Connor Horman",
        "timestamp": 1648060147
    },
    {
        "content": "<p>....I'm not seeing the point :)</p>",
        "id": 276379812,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060150
    },
    {
        "content": "<p>but this is getting at exactly the question</p>",
        "id": 276379824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060157
    },
    {
        "content": "<p>of whether it's acceptable to ask people to write <code>box foo.some_method().await</code> or whatever</p>",
        "id": 276379847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060169
    },
    {
        "content": "<p>and whether we expect to ship this year :)</p>",
        "id": 276379860,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060173
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> So, I think the async fixed-size structs case is actually illuminating here.</p>",
        "id": 276379870,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648060178
    },
    {
        "content": "<p>I guess it would be <code>foo.some_method().box.await</code></p>",
        "id": 276379872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060179
    },
    {
        "content": "<p>Oooh, not bad.</p>",
        "id": 276379901,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648060192
    },
    {
        "content": "<p>since <code>box</code> as a prefix has all the wrong precedence</p>",
        "id": 276379909,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060195
    },
    {
        "content": "<p>(clearly we need to ship postfix macros so we can experiment with this)</p>",
        "id": 276379975,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648060218
    },
    {
        "content": "<p>here's the thing</p>",
        "id": 276379988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060224
    },
    {
        "content": "<p>this is <em>not as good</em> as the design we have, in my opinion</p>",
        "id": 276380006,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060231
    },
    {
        "content": "<p>because :</p>",
        "id": 276380012,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060234
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">count</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">AsyncIterator</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276380021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060242
    },
    {
        "content": "<p>that function doesn't want to have to decide the strategy</p>",
        "id": 276380033,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060247
    },
    {
        "content": "<p>I want people to be able to write libraries</p>",
        "id": 276380044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060255
    },
    {
        "content": "<p>that can be used by clients with different requirements</p>",
        "id": 276380052,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060260
    },
    {
        "content": "<p>if the \"easy way\" to make code work</p>",
        "id": 276380075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060269
    },
    {
        "content": "<p>is that I write <code>foo.next().box.await</code></p>",
        "id": 276380085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060274
    },
    {
        "content": "<p>people will do that, but they are now hardcoding a strategy</p>",
        "id": 276380100,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060278
    },
    {
        "content": "<p>and they shouldn't have</p>",
        "id": 276380103,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060280
    },
    {
        "content": "<p>I think I have a better answer to that.</p>",
        "id": 276380117,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648060287
    },
    {
        "content": "<p>here's the <em>other</em> thing</p>",
        "id": 276380142,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060294
    },
    {
        "content": "<p>we can transition to that :)</p>",
        "id": 276380155,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060301
    },
    {
        "content": "<p>Also, I think \"I want people to be able to write libraries that can be used by clients with different requirements\" is a requirement I agree much more with than the one written in the current doc.</p>",
        "id": 276380165,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648060311
    },
    {
        "content": "<p>(but we covered that)</p>",
        "id": 276380168,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060312
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276380165\">said</a>:</p>\n<blockquote>\n<p>Also, I think \"I want people to be able to write libraries that can be used by clients with different requirements\" is a requirement I agree much more with than the one written in the current doc.</p>\n</blockquote>\n<p>that is in the doc</p>",
        "id": 276380180,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060319
    },
    {
        "content": "<p>it's called \"Separation of concerns\"</p>",
        "id": 276380231,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060326
    },
    {
        "content": "<p>I saw the requirement for \"don't hardcode box\".</p>",
        "id": 276380235,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648060328
    },
    {
        "content": "<blockquote>\n<p>It is important that:</p>\n<ul>\n<li>a library L can write natural-looking traits, impls, and functions that take <code>dyn Trait</code> values;</li>\n<li>the library L can be used by a std project with zero annotation overhead;</li>\n<li>and the library L can then be used as a dependency by a no-std project with some effort (to specify the alternative memory allocation strategy they want).</li>\n</ul>\n<p>Put another way, the code with the most information about its requirements should be making the decisions for how things work at runtime.</p>\n</blockquote>",
        "id": 276380306,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060365
    },
    {
        "content": "<p>seems like it can be phrased more clearly!</p>",
        "id": 276380314,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060369
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276380231\">said</a>:</p>\n<blockquote>\n<p>it's called \"Separation of concerns\"</p>\n</blockquote>\n<p>Ah, sorry, I missed how that covers this; thank you.</p>",
        "id": 276380317,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648060371
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276380314\">said</a>:</p>\n<blockquote>\n<p>seems like it can be phrased more clearly!</p>\n</blockquote>\n<p>Possibly, but if I'd thought of that text I would have considered it to apply, it just didn't feel indexed by this issue.</p>",
        "id": 276380372,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648060398
    },
    {
        "content": "<p>(basically I want you to be able to write a library that uses traits + impls + dyn in the obvious way, and then be able to <em>reuse</em> that from any environment, at least a lot of the time)</p>",
        "id": 276380396,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060410
    },
    {
        "content": "<p>I want that too!</p>",
        "id": 276380418,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648060421
    },
    {
        "content": "<p>So, a bit of handwaving I've had pending for a bit:</p>",
        "id": 276380459,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648060440
    },
    {
        "content": "<p>go for it :)</p>",
        "id": 276380542,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060460
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276379870\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> So, I think the async fixed-size structs case is actually illuminating here.</p>\n</blockquote>\n<p>Expanding on this: if you have a function to call with an unsized return value, you can <em>either</em> box it and then your future is sized, or you can <em>not</em> box it and your future is unsized.</p>",
        "id": 276380566,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648060474
    },
    {
        "content": "<p>Or in other words, like many things (e.g. Result), you can either handle something or make it your caller's problem.</p>",
        "id": 276380606,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648060494
    },
    {
        "content": "<p>And if you want to write a library that works for many callers, you make it your caller's problem.</p>",
        "id": 276380633,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648060507
    },
    {
        "content": "<p>what is the interface to your caller</p>",
        "id": 276380665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060521
    },
    {
        "content": "<p>who decides how much space to allocate for your return value?</p>",
        "id": 276380674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060527
    },
    {
        "content": "<p>is it known before you are invoked, or not</p>",
        "id": 276380686,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060535
    },
    {
        "content": "<p>that's kind of the question I'm getting at</p>",
        "id": 276380692,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060538
    },
    {
        "content": "<p>I think the design you are sketching requires that it might not be known</p>",
        "id": 276380715,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060548
    },
    {
        "content": "<p>since you don't necessarily know which <code>dyn</code> you are invoking, for example</p>",
        "id": 276380729,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060555
    },
    {
        "content": "<blockquote>\n<p>Expanding on this: if you have a function to call with an unsized return value, you can either box it and then your future is sized, or you can not box it and your future is unsized.</p>\n</blockquote>\n<p>There's some snags, depending on how the return value is got</p>",
        "id": 276380739,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1648060559
    },
    {
        "content": "<p>and I think if the callee has to allocate a \"not known up front\" amount of stack space-- well, that's not a stack (by definition)</p>",
        "id": 276380855,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060592
    },
    {
        "content": "<p>Or that it may require a bit of work to know it; depends on how much we want to know at compile time vs runtime. Or that some cases will work and others won't, or that the compiler calls <code>max(vtable1.value, vtable2.value)</code>.</p>",
        "id": 276380867,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648060596
    },
    {
        "content": "<p>That last one is the easiest.</p>",
        "id": 276380886,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648060605
    },
    {
        "content": "<p>that last one doesn't really work</p>",
        "id": 276380899,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060610
    },
    {
        "content": "<p>you could have a <code>Vec&lt;Box&lt;dyn AsyncIterator&gt;&gt;</code></p>",
        "id": 276380918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060618
    },
    {
        "content": "<p>(for example)</p>",
        "id": 276380922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060621
    },
    {
        "content": "<p>and you are calling <code>vec[some_index].next().await</code></p>",
        "id": 276380939,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060629
    },
    {
        "content": "<p>are we going to iterate over the whole vector...automatically...</p>",
        "id": 276380951,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060636
    },
    {
        "content": "<p>I am wondering</p>",
        "id": 276381002,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060659
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276380918\">said</a>:</p>\n<blockquote>\n<p>you could have a <code>Vec&lt;Box&lt;dyn AsyncIterator&gt;&gt;</code></p>\n</blockquote>\n<p>That's a really good example, thank you; OK, we can't compute <em>that</em> at compile time.</p>",
        "id": 276381006,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648060660
    },
    {
        "content": "<p>I am wondering</p>",
        "id": 276381023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060669
    },
    {
        "content": "<p>(at least, not without more complex types that put bounds on things, which, maybe not)</p>",
        "id": 276381033,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648060672
    },
    {
        "content": "<p>the point in our design where the decision to made to box is the coercion to dyn</p>",
        "id": 276381043,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060677
    },
    {
        "content": "<p>I agree with <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span>'s argument that this is the <em>right</em> point</p>",
        "id": 276381099,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060687
    },
    {
        "content": "<p>or at least a better point than the individual call site</p>",
        "id": 276381116,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060696
    },
    {
        "content": "<p>it's not like there's any one right answer here</p>",
        "id": 276381119,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060700
    },
    {
        "content": "<p>but it gives better separation of concerns, and it's often the point with the most information</p>",
        "id": 276381142,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060714
    },
    {
        "content": "<p>and you can use generics to control it to some extent</p>",
        "id": 276381153,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060720
    },
    {
        "content": "<p>it seems plausible to have a box keyword <em>there</em> somehow</p>",
        "id": 276381164,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060728
    },
    {
        "content": "<p>I'm not saying I <em>like</em> it :)</p>",
        "id": 276381182,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060738
    },
    {
        "content": "<p>I'm not saying I like it yet either, but: what would that look like, vaguely?</p>",
        "id": 276381201,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648060749
    },
    {
        "content": "<p>but it's not something we've explored or discussed very much</p>",
        "id": 276381205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060751
    },
    {
        "content": "<p>I mean in our example you wrote <code>count(&amp;mut my_iter)</code></p>",
        "id": 276381224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060760
    },
    {
        "content": "<blockquote>\n<p>Or that it may require a bit of work to know it; depends on how much we want to know at compile time vs runtime. Or that some cases will work and others won't, or that the compiler calls max(vtable1.value, vtable2.value).</p>\n</blockquote>\n<p>If you do:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">call_dyn</span><span class=\"p\">(</span><span class=\"n\">my_fn</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Display</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"n\">Display</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">my_fn</span><span class=\"p\">)()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>the function can \"guess\" ahead of time hom much space you will need to allocate for the return value.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">call_dyn</span><span class=\"p\">(</span><span class=\"n\">my_fns</span>: <span class=\"p\">[</span><span class=\"o\">&amp;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Display</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"n\">Display</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">my_fn</span><span class=\"p\">[</span><span class=\"n\">random_number</span><span class=\"p\">()])()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>it gets a lot more complicated</p>",
        "id": 276381245,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1648060768
    },
    {
        "content": "<p>if we just always required an adapter</p>",
        "id": 276381246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060768
    },
    {
        "content": "<p>which I definitely don't love :)</p>",
        "id": 276381251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060771
    },
    {
        "content": "<p>it would be</p>",
        "id": 276381255,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060772
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">BoxingIter</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">my_iter</span><span class=\"p\">))</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276381270,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060781
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"263609\">Olivier FAURE</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276381245\">said</a>:</p>\n<blockquote>\n<p>it gets a lot more complicated</p>\n</blockquote>\n<p>yep...</p>",
        "id": 276381311,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060801
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276381246\">said</a>:</p>\n<blockquote>\n<p>if we just always required an adapter</p>\n</blockquote>\n<p>Ah, right. I did think about that possibility when you pointed out that it wasn't just <code>Box::new</code>. Having it <em>always</em> be <code>dyner::SomeAdapter</code> even for the box case would be an <em>improvement</em>. I do think it could be more elegant than that, but I would consider that an improvement.</p>",
        "id": 276381367,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648060808
    },
    {
        "content": "<p>gotta be some way to reduce that to the halting prioblem :)</p>",
        "id": 276381372,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060810
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"263609\">@Olivier FAURE</span> I do want to know if you agreed with my summary of why alloca doesn't work etc? I am hoping I understood what it is you're proposing completely</p>",
        "id": 276381474,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060857
    },
    {
        "content": "<blockquote>\n<p>gotta be some way to reduce that to the halting prioblem :)</p>\n</blockquote>\n<p>No, I don't think it's undecidable. But it is \"we don't ship this year\" complicated.</p>",
        "id": 276381519,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1648060879
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276380855\">said</a>:</p>\n<blockquote>\n<p>and I think if the callee has to allocate a \"not known up front\" amount of stack space-- well, that's not a stack (by definition)</p>\n</blockquote>\n<p>put the unknown thing at the top of the stack and communicates the size to the caller which can then fix its stack pointer or move things around?</p>",
        "id": 276381560,
        "sender_full_name": "The 8472",
        "timestamp": 1648060906
    },
    {
        "content": "<p>(FWIW I acknowledge that the designs I'm handwaving, assuming they're workable, are also likely to be \"don't ship this year\" complicated unless we have some <em>very</em> motivated people working on it.)</p>",
        "id": 276381578,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648060917
    },
    {
        "content": "<blockquote>\n<p>I do want to know if you agreed with my summary of why alloca doesn't work etc?</p>\n</blockquote>\n<p>Sure. That was kinda my starting point</p>",
        "id": 276381636,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1648060925
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"263609\">Olivier FAURE</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276381519\">said</a>:</p>\n<blockquote>\n<p>No, I don't think it's undecidable. But it is \"we don't ship this year\" complicated.</p>\n</blockquote>\n<p>... it's undecidable to do perfectly, obviously ...</p>",
        "id": 276381662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060933
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276381560\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276380855\">said</a>:</p>\n<blockquote>\n<p>and I think if the callee has to allocate a \"not known up front\" amount of stack space-- well, that's not a stack (by definition)</p>\n</blockquote>\n<p>put the unknown thing at the top of the stack and communicates the size to the caller which can then fix its stack pointer or move things around?</p>\n</blockquote>\n<p>That's one of several possibilities I had vaguely in my head when saying in the meeting that the ABI isn't that hard.</p>",
        "id": 276381671,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648060938
    },
    {
        "content": "<p>that's not really a stack</p>",
        "id": 276381700,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060955
    },
    {
        "content": "<p>it's plausible</p>",
        "id": 276381711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060959
    },
    {
        "content": "<blockquote>\n<p>put the unknown thing at the top of the stack and communicates the size to the caller which can then fix its stack pointer or move things around?</p>\n</blockquote>\n<p>That works until you have TWO unknown things</p>",
        "id": 276381715,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1648060961
    },
    {
        "content": "<p>you'll have intermediate values you have to shuffle around</p>",
        "id": 276381723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060966
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276381671\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276381560\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276380855\">said</a>:</p>\n<blockquote>\n<p>and I think if the callee has to allocate a \"not known up front\" amount of stack space-- well, that's not a stack (by definition)</p>\n</blockquote>\n<p>put the unknown thing at the top of the stack and communicates the size to the caller which can then fix its stack pointer or move things around?</p>\n</blockquote>\n<p>That's one of several possibilities I had vaguely in my head when saying in the meeting that the ABI isn't that hard.</p>\n</blockquote>\n<p>One issue with that as well, though: it's the same as the \"box whether the caller wants it or not\" problem but in reverse: it's \"don't box whether the caller wants it or not\".</p>",
        "id": 276381759,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648060985
    },
    {
        "content": "<p>You'd have to copy piles of memory into a box if you wanted to box it.</p>",
        "id": 276381805,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648060996
    },
    {
        "content": "<p>like, right now you have arguments there, you need to compute (dynamically since you don't know statically) how much space you need to displace</p>",
        "id": 276381810,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648060999
    },
    {
        "content": "<p>do some shifts</p>",
        "id": 276381818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648061001
    },
    {
        "content": "<p>etc</p>",
        "id": 276381820,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648061001
    },
    {
        "content": "<p>it's not <em>impossible</em> but it's not <em>easy</em></p>",
        "id": 276381827,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648061006
    },
    {
        "content": "<p>(also what josh wrote)</p>",
        "id": 276381869,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648061034
    },
    {
        "content": "<p>all of this makes me feel that it's the coercion point that is the key decider</p>",
        "id": 276381928,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648061046
    },
    {
        "content": "<p><code>-&gt; impl Fn(impl Fn(ThingIWantToReturn) -&gt; T) -&gt; T</code></p>",
        "id": 276381942,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648061056
    },
    {
        "content": "<p>it woudl be useful, josh, to have some example of the kind of code you are thinking of</p>",
        "id": 276381959,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648061066
    },
    {
        "content": "<p>e.g. some code that might plausibly use dyn</p>",
        "id": 276381967,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648061071
    },
    {
        "content": "<p>maybe there's code in the kernel that does? etc</p>",
        "id": 276381977,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648061076
    },
    {
        "content": "<p>that we could try to hypothesize \"what if these were async fns\"</p>",
        "id": 276381993,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648061083
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"263609\">Olivier FAURE</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276381715\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>put the unknown thing at the top of the stack and communicates the size to the caller which can then fix its stack pointer or move things around?</p>\n</blockquote>\n<p>That works until you have TWO unknown things</p>\n</blockquote>\n<p>Then you need to communicate two sizes to the caller, doesn't seem impossible.</p>",
        "id": 276381997,
        "sender_full_name": "The 8472",
        "timestamp": 1648061084
    },
    {
        "content": "<p>and see the patterns</p>",
        "id": 276382007,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648061087
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276381474\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"263609\">Olivier FAURE</span> I do want to know if you agreed with my summary of why alloca doesn't work etc? I am hoping I understood what it is you're proposing completely</p>\n</blockquote>\n<p>Basically, my big question was \"Do we really, <em>really</em> want code to be able to call functions that take <code>&amp;mut dyn AsyncIterator</code> to compile transparently in no_alloc environment?\"</p>",
        "id": 276382067,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1648061122
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276381997\">said</a>:</p>\n<blockquote>\n<p>Then you need to communicate two sizes to the caller, doesn't seem impossible.</p>\n</blockquote>\n<p>the thing about these designs: it's not that their  not <em>possible</em> (although I'm not sure they are), it's that they're also violating constraints, that our codegen is predictable and efficient. things are getting awfully complex.</p>",
        "id": 276382092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648061137
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276381959\">said</a>:</p>\n<blockquote>\n<p>it woudl be useful, josh, to have some example of the kind of code you are thinking of</p>\n</blockquote>\n<p>I'm not <em>objecting</em> to the ask for specificity, but I do want to observe that I think that's a different ask in the case of the specific problem of RPITIDT than it is for the general requirement of \"don't hide allocations in compiler-generated code\".</p>",
        "id": 276382109,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648061145
    },
    {
        "content": "<p>As opposed to \"function that take <code>&amp;mut impl AsyncIterator</code>\"</p>",
        "id": 276382113,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1648061146
    },
    {
        "content": "<p>The underlying requirement I'm trying to satisfy with \"don't hide allocations in compiler-generated code\" is very much steeped in \"what is it I feel like Rust does much better than any other non-C language, that makes it a credible C replacement\".</p>",
        "id": 276382245,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648061208
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276382109\">said</a>:</p>\n<blockquote>\n<p>I'm not <em>objecting</em> to the ask for specificity, but I do want to observe that I think that's a different ask in the case of the specific problem of RPITIDT than it is for the general requirement of \"don't hide allocations in compiler-generated code\".</p>\n</blockquote>\n<p>my intent here is not to be like \"See, you can't show me anything!\", it's more to be able to see whether they fit the patterns I have in my head around how dyn is likely to be used in these sorts of contexts</p>",
        "id": 276382273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648061219
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276382273\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276382109\">said</a>:</p>\n<blockquote>\n<p>I'm not <em>objecting</em> to the ask for specificity, but I do want to observe that I think that's a different ask in the case of the specific problem of RPITIDT than it is for the general requirement of \"don't hide allocations in compiler-generated code\".</p>\n</blockquote>\n<p>my intent here is not to be like \"See, you can't show me anything!\", it's more to be able to see whether they fit the patterns I have in my head around how dyn is likely to be used in these sorts of contexts</p>\n</blockquote>\n<p>Genuine appreciation for your clarification here, thank you.</p>",
        "id": 276382305,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648061234
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"263609\">Olivier FAURE</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276382113\">said</a>:</p>\n<blockquote>\n<p>As opposed to \"function that take <code>&amp;mut impl AsyncIterator</code>\"</p>\n</blockquote>\n<p>I do think that's important, but I agree that embedded folks use dyn in relatively narrow and limited ways</p>",
        "id": 276382307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648061234
    },
    {
        "content": "<p>but they like to control code size like everybody else :)</p>",
        "id": 276382331,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648061243
    },
    {
        "content": "<blockquote>\n<p>I do think that's important, but I agree that embedded folks use dyn in relatively narrow and limited ways</p>\n</blockquote>\n<p>Right. So my question is: if we fix the \"dyn\" use-case, would unsized returns become interesting?</p>",
        "id": 276382389,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1648061269
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> While I wasn't ascribing it to you in particular, I definitely have a strong association between \"please spell out your exact use case\" and \"see, I can poke a hole in your exact use case therefore the general concept you're trying to express is invalid\".</p>",
        "id": 276382447,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648061286
    },
    {
        "content": "<p>well, I still don't want users to have to write <code>foo.bar().box.await</code></p>",
        "id": 276382465,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648061293
    },
    {
        "content": "<blockquote>\n<p>\"see, I can poke a hole in your exact use case therefore the general concept you're trying to express is invalid\".</p>\n</blockquote>\n<p>I feel like that's a valid way to express disagreements, if done in good faith? (the \"I can poke a hole\" part, I mean)</p>",
        "id": 276382501,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1648061315
    },
    {
        "content": "<p>this comes back to \"learning curve is rust's primary obstacle\"</p>",
        "id": 276382502,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648061316
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276382465\">said</a>:</p>\n<blockquote>\n<p>well, I still don't want users to have to write <code>foo.bar().box.await</code></p>\n</blockquote>\n<p>I would be pretty happy if <em>either</em> they did xor their caller did.</p>",
        "id": 276382533,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648061325
    },
    {
        "content": "<p>that's the other thing -- it seems wrong</p>",
        "id": 276382570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648061344
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"263609\">Olivier FAURE</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276382501\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>\"see, I can poke a hole in your exact use case therefore the general concept you're trying to express is invalid\".</p>\n</blockquote>\n<p>I feel like that's a valid way to express disagreements, if done in good faith?</p>\n</blockquote>\n<p>Not if you're asking someone to turn a general requirement into a specific example; that's a requirement that the specific example capture absolutely everything important about the general requirement.</p>",
        "id": 276382577,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648061347
    },
    {
        "content": "<p>not just because of the caller</p>",
        "id": 276382586,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648061352
    },
    {
        "content": "<p>but because it leaves us a lot less room to optimize</p>",
        "id": 276382600,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648061357
    },
    {
        "content": "<p>I'd like to be able to (if we thought it useful) modify that default strategy</p>",
        "id": 276382617,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648061366
    },
    {
        "content": "<p>and if we force people to spell it out... that'll be harder</p>",
        "id": 276382629,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648061371
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276382502\">said</a>:</p>\n<blockquote>\n<p>this comes back to \"learning curve is rust's primary obstacle\"</p>\n</blockquote>\n<p>I'm <em>not</em> saying we're doing this here, but I am very cautious about an end result of \"OK, now we have a language that's easier to learn that no longer is a C replacement; so where's the new language that's harder to learn but is still a C replacement\".</p>",
        "id": 276382669,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648061395
    },
    {
        "content": "<p>I'm trying to think how to summarize this debate</p>",
        "id": 276382673,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648061399
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276382669\">said</a>:</p>\n<blockquote>\n<p>I'm <em>not</em> saying we're doing this here, but I am very cautious about an end result of \"OK, now we have a language that's easier to learn that no longer is a C replacement; so where's the new language that's harder to learn but is still a C replacement\".</p>\n</blockquote>\n<p>yes, and i'm glad you're keeping me honest :)</p>",
        "id": 276382745,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648061416
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I suspect that you and I agree on two or more tenets here but are sorting them in different orders. :)</p>",
        "id": 276382760,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648061424
    },
    {
        "content": "<p>I just don't think that this is crossing that bridge, or even close it</p>",
        "id": 276382775,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648061431
    },
    {
        "content": "<p>....yes, which makes it fun...</p>",
        "id": 276382795,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648061439
    },
    {
        "content": "<p>I have to go, but I think the next step is to try to summarize some what the ideas that were tossed out in this thread overall</p>",
        "id": 276382834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648061469
    },
    {
        "content": "<p>and spell out what they would look like, advantages and disadvantages, in more depth</p>",
        "id": 276382855,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648061481
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276382775\">said</a>:</p>\n<blockquote>\n<p>I just don't think that this is crossing that bridge, or even close it</p>\n</blockquote>\n<p>Digging a little deeper here, I feel like there's a set of things that's acceptable for the compiler to hide, and a set of things that isn't, and those things share common properties, and I put \"allocation\" in the latter set based on those properties.</p>",
        "id": 276382899,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648061507
    },
    {
        "content": "<p>yeah, I just don't see it as that black and white</p>",
        "id": 276382932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648061522
    },
    {
        "content": "<p>I need to figure out a better description of those properties than \"things that make C programmers cry\".</p>",
        "id": 276382949,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648061522
    },
    {
        "content": "<p>I think it very much depends on what you are doing and there won't be one answer</p>",
        "id": 276382989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648061542
    },
    {
        "content": "<p>but most every C program I ever wrote called <code>malloc</code> an awful lot</p>",
        "id": 276383003,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648061551
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276382932\">said</a>:</p>\n<blockquote>\n<p>yeah, I just don't see it as that black and white</p>\n</blockquote>\n<p>Interesting! I I think I had an implicit expectation that you <em>did</em> have that same distinction and just put \"allocation\" into the former set. But if I'd thought about and questioned that assumption, it makes more sense that you don't have that distinction as a hard line.</p>",
        "id": 276383055,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648061580
    },
    {
        "content": "<p>I tend more towards: we should make it easier for people to identify what they care about</p>",
        "id": 276383056,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648061581
    },
    {
        "content": "<p>and define a kind of \"common set of things\" that most folks care about</p>",
        "id": 276383071,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648061587
    },
    {
        "content": "<p>kind of like portability etc</p>",
        "id": 276383074,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648061589
    },
    {
        "content": "<p>Well, chained <code>.box</code> is a lot more ergonomic than a separate <code>malloc()</code> line.</p>",
        "id": 276383097,
        "sender_full_name": "The 8472",
        "timestamp": 1648061605
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276382307\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"263609\">Olivier FAURE</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276382113\">said</a>:</p>\n<blockquote>\n<p>As opposed to \"function that take <code>&amp;mut impl AsyncIterator</code>\"</p>\n</blockquote>\n<p>I do think that's important, but I agree that embedded folks use dyn in relatively narrow and limited ways</p>\n</blockquote>\n<p>My point is we could ask developers who want their async code to be maximally portable to write</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">count</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">AsyncIterator</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">().</span><span class=\"k\">await</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">c</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>And also add a special <code>InlineDynAsyncIterator</code> type (one that only works for <code>&amp;mut dyn AsyncIterator</code> and therefore doesn't need the whole dynx machinery).</p>\n<p>Embedded developers who want no allocation and also limited code size then do:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">invoke_count</span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">AsyncIterator</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">InlineDynAsyncIterator</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>All of this can be done with existing concepts.</p>",
        "id": 276383115,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1648061611
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276383056\">said</a>:</p>\n<blockquote>\n<p>I tend more towards: we should make it easier for people to identify what they care about</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276383071\">said</a>:</p>\n<blockquote>\n<p>and define a kind of \"common set of things\" that most folks care about</p>\n</blockquote>\n<p>I do agree with that principle in general. But my \"common set of things\" isn't based on \"what's the most popular\", it's based on \"what can Rust do and where can Rust go, that we don't want to lose\".</p>",
        "id": 276383132,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648061618
    },
    {
        "content": "<p>It could even be <code>.box?</code> or something to let the compiler decide?</p>",
        "id": 276383167,
        "sender_full_name": "The 8472",
        "timestamp": 1648061637
    },
    {
        "content": "<p>you might be losing things on the other side :)</p>",
        "id": 276383170,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648061639
    },
    {
        "content": "<p>/me contemplates overloading edition for this ...</p>",
        "id": 276383246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648061659
    },
    {
        "content": "<p>side note that I do like the idea of <code>edition = \"2024-core\"</code> or something instead of <code>#![no_std]</code></p>",
        "id": 276383290,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648061682
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276383170\">said</a>:</p>\n<blockquote>\n<p>you might be losing things on the other side :)</p>\n</blockquote>\n<p>Acknowledged, and if I <em>have</em> to make that trade I'll make it in favor of \"things Rust does that nothing else except C can\" rather than \"things Go and Python and a hundred other languages can do\".</p>",
        "id": 276383312,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648061690
    },
    {
        "content": "<p>I guess my feeling is that you are not losing</p>",
        "id": 276383342,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648061708
    },
    {
        "content": "<p>because people who have more extreme requirements are ok with saying so</p>",
        "id": 276383352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648061715
    },
    {
        "content": "<p>as long as it's easy to do</p>",
        "id": 276383367,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648061721
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276383352\">said</a>:</p>\n<blockquote>\n<p>because people who have more extreme requirements are ok with saying so</p>\n</blockquote>\n<p>Request: please don't consider \"doing systems programming with Rust\" to be \"extreme requirements\".</p>",
        "id": 276383410,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648061742
    },
    {
        "content": "<p>maybe it's worth spelling out what an \"allocation lint\" (or even effect system) might really look like</p>",
        "id": 276383432,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648061753
    },
    {
        "content": "<p>systems programming is a pretty broad brush</p>",
        "id": 276383488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648061764
    },
    {
        "content": "<p>I realize, and I used the broad brush intentionally.</p>",
        "id": 276383504,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648061772
    },
    {
        "content": "<p>Is there a less judgmental word to \"extreme\" you'd prefer?</p>",
        "id": 276383551,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648061800
    },
    {
        "content": "<p>I didn't intend it to sound judgmental</p>",
        "id": 276383566,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648061806
    },
    {
        "content": "<p>what I did intend was to say that -- the more you care, the less you mind saying so (I believe)</p>",
        "id": 276383596,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648061821
    },
    {
        "content": "<p>I didn't take it as judgmental, it's more that I'm disagreeing with your characterization that it's non-central.</p>",
        "id": 276383623,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648061831
    },
    {
        "content": "<p>To me, a <em>defining</em> property of Rust is that it never gives that \"I'm not in control here, the language is\" feeling.</p>",
        "id": 276383653,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648061846
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276383432\">said</a>:</p>\n<blockquote>\n<p>maybe it's worth spelling out what an \"allocation lint\" (or even effect system) might really look like</p>\n</blockquote>\n<p>Probably something close to <a href=\"https://rust-lang.github.io/rust-clippy/master/#panic\">the panic lint</a>?</p>",
        "id": 276383654,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1648061847
    },
    {
        "content": "<p>When I'm writing Python, I feel like it'll do whatever it wants as long as it gives me an answer; if I want control I don't write Python.</p>",
        "id": 276383693,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648061870
    },
    {
        "content": "<p>OK. I think systems programming encompasses a wide variety of things, some of which care deeply about allocaitons, many of which don't -- and of course sometimes it's at a finer granularity than that (this function or module does...)</p>",
        "id": 276383698,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648061871
    },
    {
        "content": "<p>I think I'm suggesting (and I agree \"systems programming\" may be the wrong term for the \"C refugees\" use case I have here) that I'm thinking about the set of users who feel comfortable because Rust keeps them in control.</p>",
        "id": 276383803,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648061904
    },
    {
        "content": "<p>And who <em>no longer feel in control</em> if something as important as allocation is added in compiler-generated code.</p>",
        "id": 276383831,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648061919
    },
    {
        "content": "<p>That requirement is, quite literally, how I got here and in the top three reasons why I'm here, behind \"the community is wonderful and caring and welcoming\".</p>",
        "id": 276383873,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648061939
    },
    {
        "content": "<p>That set of people is a <em>superset</em> of the people who actually <em>will</em> have something go horribly wrong in their code if an allocation happens behind their back.</p>",
        "id": 276384131,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648062033
    },
    {
        "content": "<p>Though in practice I do think that it's a set of people who feel something <em>may</em> go horribly wrong if an allocation happens behind their back.</p>",
        "id": 276384170,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648062051
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"263609\">Olivier FAURE</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276383654\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276383432\">said</a>:</p>\n<blockquote>\n<p>maybe it's worth spelling out what an \"allocation lint\" (or even effect system) might really look like</p>\n</blockquote>\n<p>Probably something close to <a href=\"https://rust-lang.github.io/rust-clippy/master/#panic\">the panic lint</a>?</p>\n</blockquote>\n<p>Probably, and for many of the same reasons.</p>",
        "id": 276384228,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648062078
    },
    {
        "content": "<p>To say it a slightly different way, which I think is a real feeling many people have:</p>",
        "id": 276384266,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648062106
    },
    {
        "content": "<p>I agree that people with those requirements can say they have those requirements. The declaration that they have those requirements is <code>.rs</code>.</p>",
        "id": 276384377,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648062149
    },
    {
        "content": "<p>If they have to say it more explicitly, <code>.rs</code> loses something, and many of them go back to saying they have those requirements by writing <code>.c</code>.</p>",
        "id": 276384436,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648062182
    },
    {
        "content": "<p>hm, does this area have any overlap with placement-new? it feels like having a first-class concept of a place, and letting the caller decide what that place is</p>",
        "id": 276384527,
        "sender_full_name": "bstrie",
        "timestamp": 1648062221
    },
    {
        "content": "<p>allocation would also mean this isn't async-signal-safe</p>",
        "id": 276384537,
        "sender_full_name": "The 8472",
        "timestamp": 1648062225
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276384537\">said</a>:</p>\n<blockquote>\n<p>allocation would also mean this isn't async-signal-safe</p>\n</blockquote>\n<p>That's one of many good examples, yeah. Right now, you have to be careful what syscalls or library functions you call, but you don't have to be careful what bits of the <em>language</em> you use.</p>",
        "id": 276384708,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648062284
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256342\">bstrie</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276384527\">said</a>:</p>\n<blockquote>\n<p>hm, does this area have any overlap with placement-new? it feels like having a first-class concept of a place, and letting the caller decide what that place is</p>\n</blockquote>\n<p>FWIW placement new was one of the use-cases of <a href=\"https://github.com/rust-lang/rfcs/pull/2884\">RFC 2884</a></p>",
        "id": 276384740,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1648062299
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"263609\">@Olivier FAURE</span> Oooh, interesting. I haven't read RFC 2884, but the motivation and summary certainly <em>sound</em> relevant here.</p>",
        "id": 276384966,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648062390
    },
    {
        "content": "<p>... No, no, it's fine, I've only been mentioning it in every discussion of async traits for the last six months... :P</p>",
        "id": 276385052,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1648062433
    },
    {
        "content": "<p>(well, to be fair, mostly discussions on IRLO, not on zulip)</p>",
        "id": 276385117,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1648062465
    },
    {
        "content": "<p>note to self: </p>\n<p>The reason that you can't have a \"required adapter\" to convert <code>T</code> to a <code>dyn AsyncIterator</code>, at least not without further changes, is that code like this compiles today:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Debug</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">t</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">u</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"n\">Debug</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>In other words, we assume that any <code>T: Trait</code> can be converted to a <code>dyn Trait</code>. We'd have to add some kind of concept for making that conditional.</p>",
        "id": 276407644,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648073354
    },
    {
        "content": "<p>In theory, we could make that conditional only in the case of a <code>dyn</code> trait where the trait has methods returning <code>impl Trait</code>, right?</p>",
        "id": 276407949,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648073511
    },
    {
        "content": "<p>(As in, that code would work fine, and we'd only have to block \"transparent\" <code>dyn</code>-to-<code>impl</code> conversion if the trait has <code>impl Trait</code> return values?)</p>",
        "id": 276408064,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648073561
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276384377\">said</a>:</p>\n<blockquote>\n<p>I agree that people with those requirements can say they have those requirements. The declaration that they have those requirements is <code>.rs</code>.</p>\n</blockquote>\n<p>I don't think Rust as a language treats all requirements around control of the final binary equally – even requirements for low-level systems programmers. As a real-world example, if my primary constraint is binary size, there's currently no way to see all the places my code is instantiating new monomorphizations that could dramatically increase that binary size.</p>\n<p>The language made a decision long ago to make these instantiations silent, probably for good reason. But it's conceivable that tooling or language features could still help with this in the future.</p>",
        "id": 276430659,
        "sender_full_name": "tmandry",
        "timestamp": 1648094971
    },
    {
        "content": "<p>And I would guess that applications that <em>do</em> care deeply about auditing allocations probably have other concerns that vary greatly from one use case to the next.</p>",
        "id": 276430858,
        "sender_full_name": "tmandry",
        "timestamp": 1648095276
    },
    {
        "content": "<p>I think what I'm saying is that I don't view it as realistic to say that <code>.rs</code> should automatically mean all of one group's concerns are met – either the language is tailored to very specific use cases at the expense of others, or we expect everyone to make some accommodation for their use case.</p>",
        "id": 276431006,
        "sender_full_name": "tmandry",
        "timestamp": 1648095510
    },
    {
        "content": "<p>As an idea, for this matter I think the \"accommodation\" could take the form of <code>#![profile(explicit)]</code>, <code>#![profile(embedded)]</code> or similar, for example. You could imagine defining a few standard profiles like this and letting users define their own. That way the customization points are \"bundled together\" in a way that doesn't require much effort from the user (to use or describe).</p>",
        "id": 276431021,
        "sender_full_name": "tmandry",
        "timestamp": 1648095570
    },
    {
        "content": "<p>I agree that code size expansion isn't one we have prohibited in compiler-generated code.</p>",
        "id": 276431095,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648095654
    },
    {
        "content": "<p>But that feels like it has a different character. I'm thinking more of things like making syscalls from compiler generated code.</p>",
        "id": 276431106,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648095672
    },
    {
        "content": "<p>I think both are things that bear on requirements for different (or sometimes the same) users, and working in a domain that cares more about one or the other could cause a person to feel differently about them. But I don't actually think they're all that different in character – in one scenario syscalls are a big deal; in another ~100 bytes of machine code are a big deal.</p>",
        "id": 276431284,
        "sender_full_name": "tmandry",
        "timestamp": 1648095887
    },
    {
        "content": "<p>It's true that one is \"binary\" (and therefore easy to model with e.g. capabilities) and the other is more \"continuous\"</p>",
        "id": 276431308,
        "sender_full_name": "tmandry",
        "timestamp": 1648095908
    },
    {
        "content": "<p>That does capture an important difference I think. None of the things I'm imagining that make people feel like they don't have control are on a sliding scale; they're all either true or false.</p>",
        "id": 276431323,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648095955
    },
    {
        "content": "<p>Still, you could even imagine modeling something like binary size with a static capability-like system, assigning budgets to different modules and so on</p>",
        "id": 276431390,
        "sender_full_name": "tmandry",
        "timestamp": 1648096028
    },
    {
        "content": "<p>C is a great \"natural fit\" for certain domains. I'd like Rust to be a great fit for those domains <em>and</em> for others, and am starting to believe that you need these kinds of customization knobs for that to happen. Define how square or round you want your peg to be, so to speak</p>",
        "id": 276431491,
        "sender_full_name": "tmandry",
        "timestamp": 1648096251
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/RPITIDT/near/276431323\">said</a>:</p>\n<blockquote>\n<p>That does capture an important difference I think. None of the things I'm imagining that make people feel like they don't have control are on a sliding scale; they're all either true or false.</p>\n</blockquote>\n<p>I disagree with this -- allocation can be binary, but I think for a lot of users <em>a few allocations</em> are not a problem but a <em>lot of them</em> are</p>",
        "id": 276482397,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648131798
    },
    {
        "content": "<p>also, thank you <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span>, you expressed very well my feeling :)</p>",
        "id": 276482444,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648131814
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> If you're talking about performance or memory usage, sure. But in terms of the user feeling in control, one allocation hidden in compiler-generated code is too many.</p>",
        "id": 276484158,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648132526
    },
    {
        "content": "<p>I'm arguing that this depends on the user and their needs.</p>",
        "id": 276503561,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648139917
    },
    {
        "content": "<p>I think that, for some users, they feel out of control when the compiler is making them \"jump through hoops\" for something they don't care about.</p>",
        "id": 276503611,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648139938
    },
    {
        "content": "<p>e.g., \"I just want to call a function, why do I have to talk about box?\"</p>",
        "id": 276503632,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648139947
    },
    {
        "content": "<p>I think there's a meaningful difference between \"too much control / too low-level\" and \"not enough control\". I agree that both are unpleasant, though.<br>\nI agree that we should strive to make Rust usable for both, but in the spirit of tenets, I think it's important that we order \"don't lose the critical property and feeling of control that provides a primary advantage of Rust\" above \"let the user ignore or leave out considerations they don't care about\".</p>",
        "id": 276506209,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648140885
    },
    {
        "content": "<p>Defaults are really important, and there's a difference between trying to extend Rust to new users and stepping away from the ones we have. Especially because the new users we're talking about here have many options, and the ones we have often don't.</p>",
        "id": 276506371,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648140940
    },
    {
        "content": "<p>I'm genuinely excited about making Rust easier to use. Especially so because we have a history of taking things that are hard and making them easier without hiding them entirely. Lifetimes make it possible to get automatic memory management <em>without</em> GC and its associated loss of control over timing of important operations (e.g. <a href=\"https://openjdk.java.net/jeps/421\">https://openjdk.java.net/jeps/421</a> ).</p>",
        "id": 276507752,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648141373
    },
    {
        "content": "<p>I have no fucking idea what this acronym means.</p>",
        "id": 276538748,
        "sender_full_name": "Jubilee",
        "timestamp": 1648155604
    },
    {
        "content": "<p>continued as <a href=\"#narrow/stream/213817-t-lang/topic/return.20position.20impl.20Trait.20in.20dyn.20Trait\">https://rust-lang.zulipchat.com/#narrow/stream/213817-t-lang/topic/return.20position.20impl.20Trait.20in.20dyn.20Trait</a></p>",
        "id": 276541731,
        "sender_full_name": "Jubilee",
        "timestamp": 1648157221
    }
]