[
    {
        "content": "<p>I'm not able to find the original discussion at this point, and I don't want to add to the noise in the tracking issue (<a href=\"https://github.com/rust-lang/rust/issues/31436\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/31436\">https://github.com/rust-lang/rust/issues/31436</a>), but was there ever any attempt to fix the <code>try</code> inference problem with an inference default?</p>",
        "id": 191655419,
        "sender_full_name": "rpjohnst",
        "timestamp": 1585075430
    },
    {
        "content": "<p>(also asked on discord but I guess people are here more now?)</p>",
        "id": 191655489,
        "sender_full_name": "rpjohnst",
        "timestamp": 1585075443
    },
    {
        "content": "<p>I'm not aware of anyone trying that, perhaps because I would've discouraged any such attempt :)</p>",
        "id": 191662723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585079138
    },
    {
        "content": "<p>Mostly because I have an allergic response to more inference fallback</p>",
        "id": 191662744,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585079158
    },
    {
        "content": "<p>It also comes pretty late in the type-checking pipeline so it's not a \"great\" user experience somehow, though we could conceptually make changes there</p>",
        "id": 191662815,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585079183
    },
    {
        "content": "<p>ah thanks, that's what I was wondering. alternatively (based on recent discussion in the tracking issue) could it perhaps be inferred from any <code>?</code>s within the block? or would that run into the same problems?</p>",
        "id": 191663266,
        "sender_full_name": "rpjohnst",
        "timestamp": 1585079437
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"117495\">@rpjohnst</span> well, it depends I suppose on the design of the <code>Try</code> that we ultimately wind up with</p>",
        "id": 191663762,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585079707
    },
    {
        "content": "<p>the current one makes the type of value being <code>?</code>'d against irrelevant to the output type</p>",
        "id": 191663778,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585079716
    },
    {
        "content": "<p>I'm not very happy with the current design for a variety of reasons</p>",
        "id": 191663786,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585079723
    },
    {
        "content": "<p>Some of the earlier designs would have made it so that, in practice, there was more of a 1-to-1 relationship (e.g., a <code>Result</code> always had to use a <code>Result</code> in the output type, albeit potentially with a different error)</p>",
        "id": 191663848,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585079748
    },
    {
        "content": "<p>Though this was always going to be something that was inferred based on the extant impls, which we will do, but which is somewhat dicey (it causes problems for e.g. <code>From</code>)</p>",
        "id": 191663912,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585079768
    },
    {
        "content": "<p>though at this point we're pretty committed to that, the most we could ever do is to add an annotation to <code>Into</code>/<code>From</code> to disable inference <em>for those particular traits</em></p>",
        "id": 191663947,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585079790
    },
    {
        "content": "<p>i'm not \"up to speed\" though with the latest proposals for the trait, <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> was following up with that more than I</p>",
        "id": 191663988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585079810
    },
    {
        "content": "<p>one could also imagine a syntax for <code>try</code> that requires the result type to be written explicitly</p>",
        "id": 191664033,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585079830
    },
    {
        "content": "<p>e.g. <code>try { }</code> implies <code>Result</code>, and <code>try as Option&lt;_&gt; { .. }</code> uses <code>Option</code></p>",
        "id": 191664058,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585079841
    },
    {
        "content": "<p>or something like that</p>",
        "id": 191664062,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585079843
    },
    {
        "content": "<p>I... might favor that</p>",
        "id": 191664085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585079853
    },
    {
        "content": "<p>oh, that would have the same practical benefits as an inference fallback but without the implementation concerns?</p>",
        "id": 191664122,
        "sender_full_name": "rpjohnst",
        "timestamp": 1585079872
    },
    {
        "content": "<p>well the main downside would be if you use <code>try</code> with <code>Option</code> types I guess, in which case it'd require annotation, but then today it requires annotation anyway</p>",
        "id": 191664184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585079892
    },
    {
        "content": "<p>so I guess \"yes\" is the answer :)</p>",
        "id": 191664192,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585079900
    },
    {
        "content": "<p>there would be some contexts where it'd require strictly more annotation</p>",
        "id": 191664218,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585079913
    },
    {
        "content": "<p>mostly I'm just trying to think through ways to let <code>try {}</code> work without forcing (nearly) every use site to write <code>try: Result</code> or whatever</p>",
        "id": 191664221,
        "sender_full_name": "rpjohnst",
        "timestamp": 1585079914
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/.60try.60.20block.20inference/near/191664218\" title=\"#narrow/stream/213817-t-lang/topic/.60try.60.20block.20inference/near/191664218\">said</a>:</p>\n<blockquote>\n<p>there would be some contexts where it'd require strictly more annotation</p>\n</blockquote>\n<p>though we could even address those</p>",
        "id": 191664233,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585079920
    },
    {
        "content": "<p>e.g., you could make it so that <code>foo(try { ... })</code> takes the \"expected type\" from context, potentially.. hmm, not sure, that's a bit tricky-ish</p>",
        "id": 191664258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585079937
    },
    {
        "content": "<p>but certainly plausible</p>",
        "id": 191664269,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585079942
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"117495\">rpjohnst</span> <a href=\"#narrow/stream/213817-t-lang/topic/.60try.60.20block.20inference/near/191664221\" title=\"#narrow/stream/213817-t-lang/topic/.60try.60.20block.20inference/near/191664221\">said</a>:</p>\n<blockquote>\n<p>mostly I'm just trying to think through ways to let <code>try {}</code> work without forcing (nearly) every use site to write <code>try: Result</code> or whatever</p>\n</blockquote>\n<p>yes this is indeed a good design goal</p>",
        "id": 191664289,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585079952
    },
    {
        "content": "<p>I'm pretty sure that uses of things like <code>Option</code> are distinctly secondary</p>",
        "id": 191664301,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585079958
    },
    {
        "content": "<p>and it feels \"ok\" to me to call them out</p>",
        "id": 191664315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585079962
    },
    {
        "content": "<p>though I'd be happy with other solutions</p>",
        "id": 191664325,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585079969
    },
    {
        "content": "<p>Yeah, I think we should probably change it to more of a hybrid between the two solutions that were discussed in the RFC thread</p>",
        "id": 191667957,
        "sender_full_name": "scottmcm",
        "timestamp": 1585081828
    },
    {
        "content": "<p>Something like having the associated type for the Ok side, but with a place for more of a generic or carrier type thing for the Error side</p>",
        "id": 191668202,
        "sender_full_name": "scottmcm",
        "timestamp": 1585081926
    },
    {
        "content": "<p>There are a bunch of different ways that we could keep the \"Result-ness\" of things around</p>",
        "id": 191668528,
        "sender_full_name": "scottmcm",
        "timestamp": 1585082066
    }
]