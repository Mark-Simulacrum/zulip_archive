[
    {
        "content": "<p>For those that don't follow IRLO, I posted a pre-RFC where the following would be a thing with what I hope is obvious semantics:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Default)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Window</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">width</span>: <span class=\"kt\">u16</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">640</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">height</span>: <span class=\"kt\">u16</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">480</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>[<a href=\"https://internals.rust-lang.org/t/pre-rfc-user-provided-default-field-values/15877?u=jhpratt\">link</a>]</p>",
        "id": 266382482,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1640815338
    },
    {
        "content": "<p>I read the proposal, and I'm in favor of that syntax. However, I don't think we should limit it to constant expressions. I think <em>if</em> you give a constant expression we can provide a const impl of Default. But if you don't, we can still provide an impl of Default.</p>",
        "id": 266382662,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1640815529
    },
    {
        "content": "<p>We can simply inline whatever non-constant expression you provide into the derived implementation of Default.</p>",
        "id": 266382676,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1640815547
    },
    {
        "content": "<p>I can easily think of reasons to want a non-constant implementation. Consider interning, or a global cache, or an ID generator.</p>",
        "id": 266382746,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1640815601
    },
    {
        "content": "<p>I've been thinking about deriving const impls recently (partly because of this, partly because of something else). Given that derives are just macros without access to type information, I don't think it would be possible to <code>impl const Default</code> based on whether an expression is a const expression (or if other types' defaults <code>impl const Default</code>). Would it make sense to have a more general mechanism such as <code>#[derive(Default(const))]</code>?</p>",
        "id": 266383526,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1640816208
    },
    {
        "content": "<p>obviously not as part of this RFC</p>",
        "id": 266383535,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1640816217
    },
    {
        "content": "<p>I think I would spell that <code>derive(const Default)</code>, but <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> .</p>",
        "id": 266383571,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1640816257
    },
    {
        "content": "<p>Either way.</p>",
        "id": 266383638,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1640816301
    },
    {
        "content": "<p>Having a mechanism like that raises some other questions, but that's an aside.</p>",
        "id": 266383688,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1640816367
    },
    {
        "content": "<p>(Concrete design principle rather than bikeshedding:  I think it's good to use similar syntax for similar mechanisms, and since we write <code>impl const Trait</code>, we should write <code>derive(const Trait)</code>.)</p>",
        "id": 266383698,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1640816375
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245610\">Jacob Pratt</span> <a href=\"#narrow/stream/213817-t-lang/topic/Pre-RFC.3A.20User-provided.20default.20field.20values/near/266383526\">said</a>:</p>\n<blockquote>\n<p>I've been thinking about deriving const impls recently (partly because of this, partly because of something else). Given that derives are just macros without access to type information, I don't think it would be possible to <code>impl const Default</code> based on whether an expression is a const expression (or if other types' defaults <code>impl const Default</code>). Would it make sense to have a more general mechanism such as <code>#[derive(Default(const))]</code>?</p>\n</blockquote>\n<p>Even if it were possible, I don't think it would be a good idea, since this becomes a semver hazard.</p>",
        "id": 266383798,
        "sender_full_name": "Jake",
        "timestamp": 1640816448
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310518\">@Jake</span> Very good point.</p>",
        "id": 266383826,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1640816476
    },
    {
        "content": "<p>That's partly why the RFC requires const expressions right now.</p>",
        "id": 266383847,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1640816503
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/Pre-RFC.3A.20User-provided.20default.20field.20values/near/266383571\">said</a>:</p>\n<blockquote>\n<p>I think I would spell that <code>derive(const Default)</code>, but <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> .</p>\n</blockquote>\n<p>How would this work in general for Derive macros?</p>",
        "id": 266383861,
        "sender_full_name": "Connor Horman",
        "timestamp": 1640816510
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"257758\">Connor Horman</span> <a href=\"#narrow/stream/213817-t-lang/topic/Pre-RFC.3A.20User-provided.20default.20field.20values/near/266383861\">said</a>:</p>\n<blockquote>\n<p>How would this work in general for Derive macros?</p>\n</blockquote>\n<p>That's the aside that I mentioned <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> It's not particularly relevant to this specific RFC, though.</p>",
        "id": 266383915,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1640816534
    },
    {
        "content": "<p>Given Jake's observation (which I agree with), I don't think in general we would want <code>derive(Default)</code> to imply a const impl, so I don't see any reason we should limit it to constants.</p>",
        "id": 266383968,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1640816617
    },
    {
        "content": "<p>In any case, as prior art, C++'s default member initializers seem fairly close to this. IIRC, those <em>do</em> require constant expressions, but they might be any expression (as long as you aren't using other fields).</p>",
        "id": 266383987,
        "sender_full_name": "Connor Horman",
        "timestamp": 1640816640
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"257758\">@Connor Horman</span> That (const derives) would need some design work, but I think it's worth doing.</p>",
        "id": 266384045,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1640816662
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245610\">Jacob Pratt</span> <a href=\"#narrow/stream/213817-t-lang/topic/Pre-RFC.3A.20User-provided.20default.20field.20values/near/266383847\">said</a>:</p>\n<blockquote>\n<p>That's partly why the RFC requires const expressions right now.</p>\n</blockquote>\n<p>I'm not following this reasoning. If we want const derives in the future, and we want those to be spelled <code>#[derive(const Default)]</code>, doesn't this mean that the proposed enhancement to <code>#[derive(Default)]</code> should be completely ok with non-const values?</p>",
        "id": 266384221,
        "sender_full_name": "Jake",
        "timestamp": 1640816848
    },
    {
        "content": "<p>Uh, yeah, what Josh said</p>",
        "id": 266384230,
        "sender_full_name": "Jake",
        "timestamp": 1640816853
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"257758\">Connor Horman</span> <a href=\"#narrow/stream/213817-t-lang/topic/Pre-RFC.3A.20User-provided.20default.20field.20values/near/266383987\">said</a>:</p>\n<blockquote>\n<p>In any case, as prior art, C++'s default member initializers seem fairly close to this. IIRC, those <em>do</em> require constant expressions, but they might be any expression (as long as you aren't using other fields).</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\"></span>\n\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">S</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">++</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">S</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\">                 </span><span class=\"c1\">// uses default member initializer</span>\n<span class=\"w\">    </span><span class=\"n\">S</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"c1\">// uses member initializer</span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Apparently not (to requiring constant expressions - I still think this is close enough to be considered prior art).</p>",
        "id": 266384349,
        "sender_full_name": "Connor Horman",
        "timestamp": 1640816954
    },
    {
        "content": "<p>Is <code>x</code> incremented when you use the second constructor?</p>",
        "id": 266384766,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640817328
    },
    {
        "content": "<p>It is not, no. Though, that is likely moot for the application here.</p>",
        "id": 266384900,
        "sender_full_name": "Connor Horman",
        "timestamp": 1640817417
    },
    {
        "content": "<p>Actually, that may be relevant, because in rust it would be, if you did<code>S{ n: 0, ..Default::default()}</code> (realising that is useless in the equivalent of that example, but in more general examples). That would still increment <code>x</code> in that case.</p>",
        "id": 266385209,
        "sender_full_name": "Connor Horman",
        "timestamp": 1640817718
    },
    {
        "content": "<p>I think I'm going to go ahead and change it to be a generic expression, deferring to a potential <code>#[derive(const Default)]</code> in a future RFC.</p>",
        "id": 266386439,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1640818855
    },
    {
        "content": "<p>After some additional discussion on IRLO, I'll investigate whether to take it a step farther and adopt most of Centril's RFC. See the post for details.</p>",
        "id": 266443982,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1640885382
    },
    {
        "content": "<p>Previous RFC: <a href=\"https://github.com/rust-lang/rfcs/pull/1806\">https://github.com/rust-lang/rfcs/pull/1806</a> (Sorry if this is mentioned already on irlo)</p>",
        "id": 266798927,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1641297172
    },
    {
        "content": "<p>I actually wasn't aware of that. Thanks!</p>",
        "id": 266879210,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1641339265
    },
    {
        "content": "<p>There's also this one: <a href=\"https://github.com/Centril/rfcs/blob/rfc/default-field-values/text/0000-default-field-values.md\">https://github.com/Centril/rfcs/blob/rfc/default-field-values/text/0000-default-field-values.md</a></p>",
        "id": 266880587,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1641340320
    },
    {
        "content": "<p>which wasn't ever opened officially but was discussed internally by some members of the lang team at the time</p>",
        "id": 266880639,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1641340337
    },
    {
        "content": "<p>^^ that's the one I pulled a chunk of text from (and is linked to in the IRLO thread)</p>",
        "id": 266880918,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1641340606
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/213817-t-lang/topic/Pre-RFC.3A.20User-provided.20default.20field.20values/near/266382662\">said</a>:</p>\n<blockquote>\n<p>I read the proposal, and I'm in favor of that syntax. However, I don't think we should limit it to constant expressions. I think <em>if</em> you give a constant expression we can provide a const impl of Default. But if you don't, we can still provide an impl of Default.</p>\n</blockquote>\n<p>I've said this on IRLO, but I think <code>Foo { .. }</code> doing non-const things is pretty weird, so I really like the restriction to <code>const</code> now that CTFE is quite capable.  (In 2016 it would have been a really annoying restriction, but these days I think it'd be fine.)</p>\n<p>I'm still hoping to get Esteban's from &lt;<a href=\"https://internals.rust-lang.org/t/pre-pre-rfc-syntactic-sugar-for-default-default/13234/75?u=scottmcm\">https://internals.rust-lang.org/t/pre-pre-rfc-syntactic-sugar-for-default-default/13234/75?u=scottmcm</a>&gt;, which I thought ended up in a good design place.</p>",
        "id": 267623905,
        "sender_full_name": "scottmcm",
        "timestamp": 1641925314
    },
    {
        "content": "<p>I'm in support of limiting it to const for now, though in the future I might want it to be non-const.</p>",
        "id": 267628481,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1641927258
    },
    {
        "content": "<p>The most obvious case I can think of would be something like <code>unique_id: u128 = make_unique_id();</code>.</p>",
        "id": 267628584,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1641927311
    },
    {
        "content": "<p>If we <em>expected</em> to allow non-const in the future, we're probably want to require <code>x: i32 = const { foo() + bar() }</code> initially to be able to remove the constness restriction simply.</p>\n<p>But it's non-obvious to me that we'd ever really want side effects in <code>Foo { .. }</code>.  Being able to think of the defaults like they were const items (&lt;<a href=\"https://internals.rust-lang.org/t/pre-rfc-user-provided-default-field-values/15877/120?u=scottmcm\">https://internals.rust-lang.org/t/pre-rfc-user-provided-default-field-values/15877/120?u=scottmcm</a>&gt;) is a nice mental model, even if it might not desugar to exactly that.</p>\n<p>(And I definitely don't want <code>Foo { .. .await? }</code> because someone wants a fallible async default for a field...)</p>",
        "id": 267629827,
        "sender_full_name": "scottmcm",
        "timestamp": 1641927873
    },
    {
        "content": "<p>I'm rewriting the RFC now and am going to be keeping the <code>const</code> requirement. It seemed in the IRLO thread to be consensus.</p>",
        "id": 267670368,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1641949700
    },
    {
        "content": "<p>If you have a non-const expression, just write the impl out. Having a new shorthand doesn't stop the current way from working.</p>",
        "id": 267748082,
        "sender_full_name": "Lokathor",
        "timestamp": 1642004682
    }
]