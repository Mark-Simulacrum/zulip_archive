[
    {
        "content": "<p>I've been thinking about ways to allow derive helper attributes on standard library <code>derive</code> macros without introducing backwards compatibility problems. I think allowing arguments on derive macros (e.g. <code>#[derive(Foo(some, arguments)]</code> would be a nice way to resolve this.</p>\n<p>Derive macros could use this to require an explicit opt-in towards using certain derive helper attributse. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Debug(enable_skip), SomeCustomDerive)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">first</span>: <span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[skip]</span><span class=\"w\"> </span><span class=\"n\">second</span>: <span class=\"nc\">SomeNonDebugType</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>would cause the <code>Debug</code> macro to respect the <code>#[skip]</code> derive helper, and consequently skip the <code>second</code> field in the generated <code>Debug</code> impl. If the <code>enable_skip</code> argument is <em>not</em> provided, then the <code>Debug</code> macro will ignore the <code>#[skip]</code> attribute, and generate a <code>Debug</code> implementation that uses both fields. This means that the behavior of code like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Debug, SomeCustomDerive)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">first</span>: <span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[skip]</span><span class=\"w\"> </span><span class=\"n\">second</span>: <span class=\"nc\">SomeNonDebugType</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>will be unchanged, so upgrading to a newer version of Rust will not silently change the behavior of existing code.</p>\n<p>We would implement this by allowing proc-macros of the form:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[proc_macro_derive(MyDerive)]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">my_derive</span><span class=\"p\">(</span><span class=\"n\">attr</span>: <span class=\"nc\">TokenStream</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">input</span>: <span class=\"nc\">TokenStream</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>analogous to how attribute proc-macros work. We would still accept the current single-argument <code>fn my_derive(input: TokenStream) { ... }</code> function definition.</p>\n<p>An additional use-case for this feature would be for using a derive macro multiple times. For example, you could have <code>#[derive(From(u8, u32))] enum Foo { A, B }</code> or <code>#[derive(From(u8))] #[derive(From(u32))] enum Foo { A, B }</code>, where <code>#[derive(From)]</code> is a custom derive macro that lets you convert an enum discriminant to an instance of the enum. I don't think this use-case is valuable enough to motivate this feature by itself, but it would make some code less verbose and more readable.</p>\n<p>If people are generally in favor of the idea, I'll write up a (pre) RFC with some more detailed motivating examples</p>\n<div class=\"codehilite\"><pre><span></span><code>\n</code></pre></div>",
        "id": 240775046,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622410239
    },
    {
        "content": "<p>RFC <a href=\"https://github.com/rust-lang/rfcs/pull/3107\">https://github.com/rust-lang/rfcs/pull/3107</a> could use this to make <code>#[default]</code> a derive helper instead of a built-in attribute</p>",
        "id": 240775091,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622410316
    },
    {
        "content": "<p>This would also allow a nicer way of feature-gating standard library derive helpers - otherwise, we'd need to either have the feature gate change the behavior of the derive macro, or give false-positive feature gates where the derive helper overlaps with a custom derive macro</p>",
        "id": 240775283,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622410566
    },
    {
        "content": "<p>I'd personally prefer namespacing helpers, for example std::skip or std:: default::skip, I think.</p>",
        "id": 240784073,
        "sender_full_name": "simulacrum",
        "timestamp": 1622426205
    },
    {
        "content": "<p>I've thought about this before. I think the best way for something like this is <code>#[skip(Debug)]</code> or similar (I use <code>#[ignore]</code> when playing around myself). It would trivially permit a field to be ignored for a specific derive, but not for others.</p>",
        "id": 240784152,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1622426304
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> The problem with namespacing is that proc-macros need to be able to textually match derive helpers</p>",
        "id": 240784574,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622426915
    },
    {
        "content": "<p>so, either all proc-macros need to remember to check for the namespace in every place, or rustc needs to rewrite attributes before passing them to proc-macros</p>",
        "id": 240784584,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622426948
    },
    {
        "content": "<p>Since they're our macros we should be able to check right? Or do you mean that there's a good chance non-std macros \"see\" the std paths by accident?</p>",
        "id": 240784638,
        "sender_full_name": "simulacrum",
        "timestamp": 1622427014
    },
    {
        "content": "<p>yeah - either we selectively rewrite the attributse based on which macro we're invoking (e.g. we only rewrite <code>#[std::skip]</code> when invoking an std macro), or we deal with the problem of accidentally overlapping an existing attribute</p>",
        "id": 240784704,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622427131
    },
    {
        "content": "<p>also, you can define a derive proc-macro named <code>Debug</code>, and import it</p>",
        "id": 240784781,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622427311
    },
    {
        "content": "<p>which will take precedence over the one in the prelude</p>",
        "id": 240784784,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622427317
    },
    {
        "content": "<p>which seems somewhat contrived, but I could see someone doing that to provide a more featureful version (e.g. implementing <code>#[skip]</code> themselves</p>",
        "id": 240784848,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622427421
    },
    {
        "content": "<p>somewhat analogous to doing <code>type Result&lt;T&gt; = std::result::Result&lt;T, MyError&gt;</code>, and importing your custom <code>Result</code></p>",
        "id": 240784862,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622427470
    },
    {
        "content": "<p>since we're dealing with the standard library, I think we should strive for stronger backwards-compatibility guarantees than \"it seems unlikely that anyone is using this particular derive helper name/argument\"</p>",
        "id": 240784917,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622427528
    },
    {
        "content": "<p>especially considering that the consequences of breaking backwards-compatibility here might never be seen by the affected crate author (e.g. I use an overlapping derive helper attribute, and somebody else does a <code>cargo install</code> that pulls in my crate as a dependency)</p>",
        "id": 240784936,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622427599
    }
]