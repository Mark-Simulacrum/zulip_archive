[
    {
        "content": "<p>This is just me thinking aloud. Most crates are currently carefully manually designed by the author, with carefully designed ownership and borrowing correspondence for values, types, and function boundaries, which is awesome.</p>",
        "id": 194760155,
        "sender_full_name": "Charles Lew",
        "timestamp": 1587443816
    },
    {
        "content": "<p>I'm with you so far.</p>",
        "id": 194760237,
        "sender_full_name": "Lokathor",
        "timestamp": 1587443948
    },
    {
        "content": "<p>However I'm thinking about something in larger scale. In data processing applications and many other applications, we are often processing data following some kind of external specification, written in schema or some other form. These specifications are sometimes very large. Examples are MS OOXML specifications and many others.</p>",
        "id": 194760238,
        "sender_full_name": "Charles Lew",
        "timestamp": 1587443951
    },
    {
        "content": "<p>For that you'd probably use a \"type that is less typed\". For example, an general XML tree type instead of having a specific type for a specific XML DTD.</p>",
        "id": 194760292,
        "sender_full_name": "Lokathor",
        "timestamp": 1587444021
    },
    {
        "content": "<p>Yes, exactly.</p>",
        "id": 194760302,
        "sender_full_name": "Charles Lew",
        "timestamp": 1587444050
    },
    {
        "content": "<p>However, to achieve ergonomics the more specialized API needs to be created. It's no fun for downstream crates to deal with the general types.</p>",
        "id": 194760316,
        "sender_full_name": "Charles Lew",
        "timestamp": 1587444099
    },
    {
        "content": "<p>woahhh that's a bit of a leap maybe</p>",
        "id": 194760323,
        "sender_full_name": "Lokathor",
        "timestamp": 1587444118
    },
    {
        "content": "<p>Imagine i'm writing a docx format report generator, with a xml dom library and xml writer library, theorically it's enough.</p>",
        "id": 194760394,
        "sender_full_name": "Charles Lew",
        "timestamp": 1587444211
    },
    {
        "content": "<p>There's a lot of schema information that should be mapped to API surface.</p>",
        "id": 194760453,
        "sender_full_name": "Charles Lew",
        "timestamp": 1587444270
    },
    {
        "content": "<p>And focusing on your exact needs lets you cut a lot of corners. For example you don't need to support 100% of XML to parse a <em>lot</em> of XML description files, you can usually get away with like a 200 line module that as a super simple API.</p>",
        "id": 194760467,
        "sender_full_name": "Lokathor",
        "timestamp": 1587444352
    },
    {
        "content": "<p>Yes, that's right. However it seems to me it's just delaying the problem, \"i'll add what i need now and leave the rest to the future\".</p>",
        "id": 194760542,
        "sender_full_name": "Charles Lew",
        "timestamp": 1587444441
    },
    {
        "content": "<p>having every feature ever in every crate ever is just a way to summon code bloat.</p>",
        "id": 194760598,
        "sender_full_name": "Lokathor",
        "timestamp": 1587444501
    },
    {
        "content": "<p>There's a lot of reasons people don't like <code>rand</code>, and one of them is \"I can't even tell how to make the dumb thing go\"</p>",
        "id": 194760604,
        "sender_full_name": "Lokathor",
        "timestamp": 1587444529
    },
    {
        "content": "<p>I think you're right, but there're different scenarios. I think in many businesses you can't tell the customer \"i'll add the missing features when you need it\", things like that.</p>",
        "id": 194760678,
        "sender_full_name": "Charles Lew",
        "timestamp": 1587444666
    },
    {
        "content": "<p>Well, sure, in most businesses you can say \"I'll add the missing feature never.\", but maybe more nicely somehow, like \"We value your feedback and will work to improve on our core mission\".</p>",
        "id": 194760733,
        "sender_full_name": "Lokathor",
        "timestamp": 1587444810
    },
    {
        "content": "<p>Oh, i mean sometimes the delivery is one-shot. The source code and maintenance will be transferred to another party when it's \"code complete\".</p>",
        "id": 194760794,
        "sender_full_name": "Charles Lew",
        "timestamp": 1587444916
    },
    {
        "content": "<p>Maybe that's not a recipe for awesome software, but it's reality sometimes.</p>",
        "id": 194760865,
        "sender_full_name": "Charles Lew",
        "timestamp": 1587445019
    },
    {
        "content": "<p>Sure, there's a lot of scenarios. If you're trying to attract users then having more features is good. If you're trying to finish on time then focus is good. And many places in between.</p>",
        "id": 194760870,
        "sender_full_name": "Lokathor",
        "timestamp": 1587445031
    },
    {
        "content": "<p>So in short, i think i'm seeking ways for \"mass production\" of rust code, that will enable its use in more business scenarios.</p>",
        "id": 194761160,
        "sender_full_name": "Charles Lew",
        "timestamp": 1587445482
    },
    {
        "content": "<p>Designs and tools to deal with the \"uninteresting but large part\" of the system.</p>",
        "id": 194761184,
        "sender_full_name": "Charles Lew",
        "timestamp": 1587445550
    }
]