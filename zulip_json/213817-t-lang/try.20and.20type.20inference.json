[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> If I'm understanding your concern about type inference correctly, you're saying that it would surprise you if we can get away with not writing type annotations for the carrier (e.g. <code>Result&lt;_, _&gt;</code>) because you expect to need annotations for the error type?</p>",
        "id": 196210275,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588611818
    },
    {
        "content": "<p>(because of double conversion?)</p>",
        "id": 196210287,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588611830
    },
    {
        "content": "<p>Right, I'd expect you'd need at least some annotation to tell it what error type you want</p>",
        "id": 196210681,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1588611979
    },
    {
        "content": "<p>So, I don't know how feasible this is, but personally I would love it if we had some general rule for double-type-inference cases, that amounts to \"convert as far as possible during the first conversion\".</p>",
        "id": 196211000,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588612132
    },
    {
        "content": "<p>As in, <code>try { x? }.context(...)?</code> would simply not need to do any conversion the second time, because it already converted to the type it needed the first time.</p>",
        "id": 196211039,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588612167
    },
    {
        "content": "<p>I'm not quite sure I understand-- I don't see \"double conversion\" as the problem</p>",
        "id": 196211247,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1588612263
    },
    {
        "content": "<p>I'm thinking of code like thsi:</p>",
        "id": 196211263,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1588612268
    },
    {
        "content": "<p><code>match (try { x? }) { Ok(_) =&gt; ..., Err(_) =&gt; ... }</code></p>",
        "id": 196211315,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1588612293
    },
    {
        "content": "<p>what should the error type there be?</p>",
        "id": 196211361,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1588612312
    },
    {
        "content": "<p>it's unknown because the error type gets <code>into</code>'d</p>",
        "id": 196211424,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1588612331
    },
    {
        "content": "<p>For one thing, I can't really imagine a case where I'd want to match <code>Err(_)</code> like that without wanting to capture the <code>Err(e)</code>. (Leaving aside that I'm going to go to great lengths to never manually write that match.)</p>",
        "id": 196211475,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588612362
    },
    {
        "content": "<p>And if I'm capturing the <code>e</code> it's likely to do something with it that will determine its type, such as checking an error code inside it.</p>",
        "id": 196211532,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588612399
    },
    {
        "content": "<p>I think this might actually raise a good general point: there's likely value in people talking about their desired use cases for <code>try</code>, how they see themselves using it, so that we can understand how those use cases would be impacted.</p>",
        "id": 196211654,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588612462
    },
    {
        "content": "<p>I personally know that I have code that wants this:</p>\n<div class=\"codehilite\"><pre><span></span><code>let res = try { ... };\nmatch res {\n    Ok(()) =&gt; {},\n    Err(e) =&gt; error!(&quot;Error: {}&quot;, e),\n}\n</code></pre></div>",
        "id": 196211673,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1588612472
    },
    {
        "content": "<p>That code doesn't provide any guidance as to what the type of <code>e</code> is</p>",
        "id": 196211722,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1588612501
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> I'm curious, why is that a match rather than a macro of some kind, for instance?</p>",
        "id": 196211742,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588612508
    },
    {
        "content": "<p>I mean, I could also write it <code>e.map_err(|e| error!(\"Error: {}\", e))</code> if I don't care about asserting that the <code>Ok</code> case is <code>()</code></p>",
        "id": 196211808,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1588612552
    },
    {
        "content": "<p>does that answer your question?</p>",
        "id": 196211823,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1588612559
    },
    {
        "content": "<p>...not really?</p>",
        "id": 196211864,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588612563
    },
    {
        "content": "<p>Can you write it how you'd write that code instead?</p>",
        "id": 196211913,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1588612583
    },
    {
        "content": "<p>Because if I had to write that once, let alone twice, I'd be trying very hard to factor it out.</p>",
        "id": 196211925,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588612588
    },
    {
        "content": "<p>what would you write instead?</p>",
        "id": 196211994,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1588612621
    },
    {
        "content": "<p><code>macro_rules! check_eprint { ... } check_eprint!(...)</code>, most likely?</p>",
        "id": 196211995,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588612622
    },
    {
        "content": "<p>what does <code>check_print</code> do internally?</p>",
        "id": 196212035,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1588612644
    },
    {
        "content": "<p>(Note: I don't know in practice if I'd put the <code>try</code> inside the <code>check_print</code> or in its argument. Would have to think about that.)</p>",
        "id": 196212090,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588612678
    },
    {
        "content": "<p>to clarify: i'm trying to understand what code inside of <code>check_print</code> changes whether this is an inference issue or not</p>",
        "id": 196212208,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1588612719
    },
    {
        "content": "<p>(typing, sorry)</p>",
        "id": 196212394,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588612806
    },
    {
        "content": "<p>(In a meeting)</p>",
        "id": 196212398,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588612811
    },
    {
        "content": "<p>no worries, I have to get to other things soon anyways, but I wanted to offer that as one example of a place where the error type will not be inferred</p>",
        "id": 196212551,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1588612917
    },
    {
        "content": "<p>So, for one thing the use case is a little hard for me to understand. Does <code>error!</code> print to stderr and then exit the program? Or what does it do?</p>",
        "id": 196212607,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588612934
    },
    {
        "content": "<p>Because I think I'd normally handle that by propagating the error to the top of the program and handling such errors in main.</p>",
        "id": 196212684,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588612989
    },
    {
        "content": "<p>I think I'm with Taylor, I often match on a Result with some branches handling the Ok and some handling the Err, and putting some extra macro around that seems like overkill.</p>",
        "id": 196212704,
        "sender_full_name": "Lokathor",
        "timestamp": 1588613004
    },
    {
        "content": "<p>That said, if I needed to write that macro, I'd likely use something like <code>if let Err(e) = expr { let e: anyhow::Error = e; error!(\"Error: {}\", e); }</code>.</p>",
        "id": 196212844,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588613086
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> I have an extremely low tolerance for boilerplate.</p>",
        "id": 196212864,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588613102
    },
    {
        "content": "<p>Patterns are a sign that some function or macro or other pattern-extraction is needed.</p>",
        "id": 196212915,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588613134
    },
    {
        "content": "<p>I'm glad that the common case of error handling is reduced to <code>?</code>.</p>",
        "id": 196212939,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588613150
    },
    {
        "content": "<p>And I don't want any other \"handle the error if any\" pattern to be substantially longer than that.</p>",
        "id": 196213001,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588613167
    },
    {
        "content": "<p>I would agree with your radical anti-boilerplate platform, but when the answer is \"so i'll write a macro_rules\" I give great, great pause.</p>",
        "id": 196213032,
        "sender_full_name": "Lokathor",
        "timestamp": 1588613192
    },
    {
        "content": "<p>I can understand that, and I tend to hesitate before writing non-local macros.</p>",
        "id": 196213084,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588613228
    },
    {
        "content": "<p>It seems to me that the question of a macro is really besides the point</p>",
        "id": 196213111,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588613241
    },
    {
        "content": "<p>The point is that there is going to be some code that \"handles\" the exception</p>",
        "id": 196213135,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588613253
    },
    {
        "content": "<p>That's part of why I observed that in the common case I would want to return the error all the way up to <code>main</code>, in which case I just have to write <code>?</code>.</p>",
        "id": 196213148,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588613261
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> Could you clarify what <code>error!</code> does in your sample code?</p>",
        "id": 196213262,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588613301
    },
    {
        "content": "<p>But even in the <code>main</code> case, then</p>",
        "id": 196213427,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588613395
    },
    {
        "content": "<p>the point is that it would be required to manage the exception</p>",
        "id": 196213441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588613401
    },
    {
        "content": "<p>I believe <code>error!</code> though was meant to be the \"error-level log\" macro</p>",
        "id": 196213485,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588613409
    },
    {
        "content": "<p>i.e., <span class=\"user-mention silent\" data-user-id=\"127859\">Taylor Cramer</span>'s code was meant to \"log the error and move on with life\"</p>",
        "id": 196213497,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588613420
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> It also occurs to me that as long as you call <code>try</code> explicitly, you could then put the rest in a function rather than a macro, since it doesn't have to stop the propagation of <code>?</code>..</p>",
        "id": 196213544,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588613445
    },
    {
        "content": "<p>And a function has the advantage of being able to include an expected type (e.g. <code>anyhow::Result&lt;()&gt;</code>).</p>",
        "id": 196213595,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588613466
    },
    {
        "content": "<p>So a function like <code>fn check_eprint(result: anyhow::Result&lt;()&gt;) { ... }</code> for error reporting would handle the boilerplate removal and the type inference issue.</p>",
        "id": 196213749,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588613525
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/213817-t-lang/topic/try.20and.20type.20inference/near/196213441\" title=\"#narrow/stream/213817-t-lang/topic/try.20and.20type.20inference/near/196213441\">said</a>:</p>\n<blockquote>\n<p>the point is that it would be required to manage the exception</p>\n</blockquote>\n<p>Right, but if it bubbles up to <code>main</code> it'll have a type by then.</p>",
        "id": 196213835,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588613572
    },
    {
        "content": "<p>Which means it doesn't have a type inference issue.</p>",
        "id": 196213850,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588613580
    },
    {
        "content": "<p>No, it won't</p>",
        "id": 196214020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588613660
    },
    {
        "content": "<p>i.e., if I write </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>the result type of that is fully unknown, today, but even if I constrain to <code>Result&lt;_, _&gt;</code>, the error type is unknown. It is <em>independent</em> of <code>foo()</code>'s return type, except in so far as it is \"something that the error of <code>foo</code> can be converted into\".</p>",
        "id": 196214089,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588613705
    },
    {
        "content": "<p>This I think is <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span>'s point, and I think certainly one of the challenges around try blocks. (The other is \"chained\" errors, which I think you highlighted earlier.)</p>",
        "id": 196214172,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588613757
    },
    {
        "content": "<p>(Though the two are not independent, it's just that \"chained\" errors -- i.e., trying to apply <code>?</code> to the result of <code>try</code> block -- are going to lead to type inference failures as a consequence of this.)</p>",
        "id": 196214280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588613804
    },
    {
        "content": "<p>Right, there are a number of things you could do with the error value (including <code>.into()</code>, as <code>?</code> again would do) that wouldn't fully constrain it</p>",
        "id": 196214344,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1588613841
    },
    {
        "content": "<p>I'm wondering how common</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">error</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;Error: {}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">)}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>would be, as I see the main advantage of <code>try</code> is allowing things like this: </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">x</span><span class=\"o\">?</span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">MyErrorType</span>::<span class=\"n\">Foo</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"cm\">/* handle this locally */</span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\">// Propagate other errors</span>\n</code></pre></div>\n\n\n<p>In that case, the error type would be specified as <code>MyErrorType </code> (unless<code>_::Foo</code> is added.)</p>",
        "id": 196248090,
        "sender_full_name": "Asa Zeren",
        "timestamp": 1588631581
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"236160\">@Asa Zeren</span> i've personally wanted that (casing out a particular error) much less than switching to logging or adding context, or even throwing the error away entirely</p>",
        "id": 196249284,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1588632459
    },
    {
        "content": "<p>If that is your use case, would it not be better to have something like:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">log_err</span><span class=\"o\">&lt;</span><span class=\"n\">R</span>: <span class=\"nc\">Try</span><span class=\"p\">(</span><span class=\"n\">res</span>:<span class=\"nc\">R</span><span class=\"p\">)</span>-&gt;<span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">R</span>::<span class=\"n\">Output</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* ... */</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 196249687,
        "sender_full_name": "Asa Zeren",
        "timestamp": 1588632760
    },
    {
        "content": "<p>Though I guess that has the same issue</p>",
        "id": 196249701,
        "sender_full_name": "Asa Zeren",
        "timestamp": 1588632774
    }
]