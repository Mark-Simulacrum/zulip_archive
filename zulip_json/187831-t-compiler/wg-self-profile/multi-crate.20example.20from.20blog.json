[
    {
        "content": "<p>Hi self-profile team!</p>\n<p>I just tried the multi-crate example from your recent blog post <a href=\"https://blog.rust-lang.org/inside-rust/2020/02/25/intro-rustc-self-profile.html\" target=\"_blank\" title=\"https://blog.rust-lang.org/inside-rust/2020/02/25/intro-rustc-self-profile.html\">https://blog.rust-lang.org/inside-rust/2020/02/25/intro-rustc-self-profile.html</a> on my project <a href=\"https://github.com/HadrienG2/3photons-rust\" target=\"_blank\" title=\"https://github.com/HadrienG2/3photons-rust\">https://github.com/HadrienG2/3photons-rust</a> , but it doesn't seem to work. In the \"profiles\" directory, there is just one other profile behind the one from my crate, with the weird underscore-ey name, <code>___-17023.*</code>, and it's mostly empty (all files are &lt;1kB, nothing is displayed in <code>chrome://tracing</code>).</p>\n<p>The command I use to flush old data and run a profile is <code>rm profiles/* &amp;&amp; cargo clean &amp;&amp; RUSTFLAGS=\"-Zself-profile=./profiles -Zself-profile-events=default,args\" cargo +nightly build --release &amp;&amp; crox --dir profiles/</code>.</p>\n<p>Any idea what could be going wrong, and how to debug or report this?</p>",
        "id": 189393844,
        "sender_full_name": "Hadrien Grasland",
        "timestamp": 1582989531
    },
    {
        "content": "<p>I tried it on the regex repo, and the result is the same: one profile for regex-syntax, one for regex, but nothing for the dependencies (just weird almost-empty underscore-prefixed profiles).</p>\n<p>This is on rustc 1.43.0-nightly (0eb878d2a 2020-02-28).</p>",
        "id": 189394022,
        "sender_full_name": "Hadrien Grasland",
        "timestamp": 1582989869
    },
    {
        "content": "<p>...and using the measureme master, as suggested by the blog post.</p>",
        "id": 189394144,
        "sender_full_name": "Hadrien Grasland",
        "timestamp": 1582990115
    },
    {
        "content": "<p>Every time cargo attempt to build something, it runs <code>rustc - --crate-name ___ --print=file-names --crate-type bin --crate-type rlib --crate-type dylib --crate-type cdylib --crate-type staticlib --crate-type proc-macro --print=sysroot --print=cfg</code> to find the extensions for various crate types, the active <code>#[cfg]</code>, and so on. This will cause measureme profiles like <code>___-17023.*</code>.</p>",
        "id": 189394154,
        "sender_full_name": "bjorn3",
        "timestamp": 1582990148
    },
    {
        "content": "<p>(but that shouldn't matter because AFAIK the generation of those profile files is carried out by rustc iself)</p>",
        "id": 189394157,
        "sender_full_name": "Hadrien Grasland",
        "timestamp": 1582990150
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> I see... is that a recent change? I'm curious about how you got the profile from the blog post with all the deps.</p>",
        "id": 189394207,
        "sender_full_name": "Hadrien Grasland",
        "timestamp": 1582990205
    },
    {
        "content": "<p>And also, why do I get one empty underscore-prefixed file, rather than one per dependency with some data inside?</p>",
        "id": 189394222,
        "sender_full_name": "Hadrien Grasland",
        "timestamp": 1582990248
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>hadrien@spartan-graloufotron:~/Bureau/regex&gt; ll profiles/\ntotal 38156\n-rw-r--r-- 1 hadrien users       32 29 févr. 16:20 ___-18568.events\n-rw-r--r-- 1 hadrien users      487 29 févr. 16:20 ___-18568.string_data\n-rw-r--r-- 1 hadrien users       16 29 févr. 16:20 ___-18568.string_index\n-rw-r--r-- 1 hadrien users  5478416 29 févr. 16:21 regex-18706.events\n-rw-r--r-- 1 hadrien users 12077624 29 févr. 16:21 regex-18706.string_data\n-rw-r--r-- 1 hadrien users  1361816 29 févr. 16:21 regex-18706.string_index\n-rw-r--r-- 1 hadrien users  5583512 29 févr. 16:21 regex_syntax-18579.events\n-rw-r--r-- 1 hadrien users 12946787 29 févr. 16:21 regex_syntax-18579.string_data\n-rw-r--r-- 1 hadrien users  1528192 29 févr. 16:21 regex_syntax-18579.string_index\n</pre></div>",
        "id": 189394278,
        "sender_full_name": "Hadrien Grasland",
        "timestamp": 1582990359
    },
    {
        "content": "<p>This is not a recent change. You get one per <code>cargo build</code>, as cargo only performs the aforementioned once per <code>cargo build</code>. The blog post uses <code>cargo rustc -- -Zself-profile</code> instead of setting <code>RUSTFLAGS</code>, which means that <code>-Zself-profile</code> is only passed when the target crate is build, instead of being passed for every rustc invocation.</p>",
        "id": 189394297,
        "sender_full_name": "bjorn3",
        "timestamp": 1582990430
    },
    {
        "content": "<p>That's the beginning of the blog post indeed. But at the end, there's a multi-crate example using rustflags.</p>",
        "id": 189394344,
        "sender_full_name": "Hadrien Grasland",
        "timestamp": 1582990479
    },
    {
        "content": "<p>Which is what I was trying to replicate here.</p>",
        "id": 189394346,
        "sender_full_name": "Hadrien Grasland",
        "timestamp": 1582990489
    },
    {
        "content": "<p><a href=\"https://blog.rust-lang.org/inside-rust/2020/02/25/intro-rustc-self-profile.html#profiling-an-entire-crate-graph\" target=\"_blank\" title=\"https://blog.rust-lang.org/inside-rust/2020/02/25/intro-rustc-self-profile.html#profiling-an-entire-crate-graph\">https://blog.rust-lang.org/inside-rust/2020/02/25/intro-rustc-self-profile.html#profiling-an-entire-crate-graph</a></p>",
        "id": 189394349,
        "sender_full_name": "Hadrien Grasland",
        "timestamp": 1582990500
    },
    {
        "content": "<p>The <code>___-*.*</code> files are empty, because the rustc doesn't perform any actual compilation work for it, so there is nothing to record.</p>",
        "id": 189394360,
        "sender_full_name": "bjorn3",
        "timestamp": 1582990540
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211871\">Hadrien Grasland</span> <a href=\"#narrow/stream/187831-t-compiler.2Fwg-self-profile/topic/multi-crate.20example.20from.20blog/near/189394344\" title=\"#narrow/stream/187831-t-compiler.2Fwg-self-profile/topic/multi-crate.20example.20from.20blog/near/189394344\">said</a>:</p>\n<blockquote>\n<p>That's the beginning of the blog post indeed. But at the end, there's a multi-crate example using rustflags.</p>\n</blockquote>\n<p>I see it now. The <code>___-*.*</code> shouldn't give any problems. Just run <code>crox --dir profiles</code>.</p>",
        "id": 189394419,
        "sender_full_name": "bjorn3",
        "timestamp": 1582990603
    },
    {
        "content": "<p>This works, but it will only feature the regex and regex-syntax profiles, not those of the dependencies as seen on <a href=\"https://blog.rust-lang.org/images/inside-rust/2020-02-25-intro-rustc-self-profile/chrome_profiler3.png\" target=\"_blank\" title=\"https://blog.rust-lang.org/images/inside-rust/2020-02-25-intro-rustc-self-profile/chrome_profiler3.png\">https://blog.rust-lang.org/images/inside-rust/2020-02-25-intro-rustc-self-profile/chrome_profiler3.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://blog.rust-lang.org/images/inside-rust/2020-02-25-intro-rustc-self-profile/chrome_profiler3.png\" target=\"_blank\" title=\"https://blog.rust-lang.org/images/inside-rust/2020-02-25-intro-rustc-self-profile/chrome_profiler3.png\"><img src=\"https://blog.rust-lang.org/images/inside-rust/2020-02-25-intro-rustc-self-profile/chrome_profiler3.png\"></a></div>",
        "id": 189394484,
        "sender_full_name": "Hadrien Grasland",
        "timestamp": 1582990693
    },
    {
        "content": "<p>Can you post a screenshot?</p>",
        "id": 189394511,
        "sender_full_name": "bjorn3",
        "timestamp": 1582990752
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/dlX4eJHkqy5n51fWo3_z5mMt/Capture-décran-du-2020-02-29-16-40-25.png\" target=\"_blank\" title=\"Capture-décran-du-2020-02-29-16-40-25.png\">Capture-décran-du-2020-02-29-16-40-25.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/dlX4eJHkqy5n51fWo3_z5mMt/Capture-décran-du-2020-02-29-16-40-25.png\" target=\"_blank\" title=\"Capture-décran-du-2020-02-29-16-40-25.png\"><img src=\"/user_uploads/4715/dlX4eJHkqy5n51fWo3_z5mMt/Capture-décran-du-2020-02-29-16-40-25.png\"></a></div>",
        "id": 189394566,
        "sender_full_name": "Hadrien Grasland",
        "timestamp": 1582990850
    },
    {
        "content": "<p>Found the problem: dependencies outside of the current workspace will have the current working dir of the rustc instance switched to their source directory. Because you specified the profile dir as a relative path, that means that the profiles will end up in a different directory for those dependencies. Replacing <code>-Zself-profile=./profiles</code> with <code>-Zself-profile=$(pwd)/profiles</code> should fix this.</p>",
        "id": 189394769,
        "sender_full_name": "bjorn3",
        "timestamp": 1582991199
    },
    {
        "content": "<p>Oh, I see!</p>",
        "id": 189394774,
        "sender_full_name": "Hadrien Grasland",
        "timestamp": 1582991223
    },
    {
        "content": "<p>Well, let me send you a blog post PR then ;)</p>",
        "id": 189394781,
        "sender_full_name": "Hadrien Grasland",
        "timestamp": 1582991250
    },
    {
        "content": "<p>Not me, I am not part of wg-self-profile :)</p>\n<p>Anyway the source is at <a href=\"https://github.com/rust-lang/blog.rust-lang.org/blob/master/posts/inside-rust/2020-02-25-intro-rustc-self-profile.md\" target=\"_blank\" title=\"https://github.com/rust-lang/blog.rust-lang.org/blob/master/posts/inside-rust/2020-02-25-intro-rustc-self-profile.md\">https://github.com/rust-lang/blog.rust-lang.org/blob/master/posts/inside-rust/2020-02-25-intro-rustc-self-profile.md</a></p>",
        "id": 189394828,
        "sender_full_name": "bjorn3",
        "timestamp": 1582991331
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 189394845,
        "sender_full_name": "Hadrien Grasland",
        "timestamp": 1582991401
    },
    {
        "content": "<p>No problem!</p>",
        "id": 189394896,
        "sender_full_name": "bjorn3",
        "timestamp": 1582991452
    },
    {
        "content": "<p>Nice debugging! Yeah, you're totally correct that path should be absolute not relative to avoid this issue. I'll think about where we can document that better.</p>",
        "id": 189444574,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1583090913
    }
]