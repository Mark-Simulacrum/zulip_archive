[
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span>, wycats was asking me about aggregating self-profile data across multiple crates.</p>",
        "id": 182399146,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575327950
    },
    {
        "content": "<p>They're creating a Zulip account now.</p>",
        "id": 182399153,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575327956
    },
    {
        "content": "<p>I know that if you do <code>RUSTFLAGS=-Zself-profile</code> you'll get a separate data file for each crate you build</p>",
        "id": 182399207,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575327974
    },
    {
        "content": "<p>( cc <span class=\"user-mention\" data-user-id=\"252446\">@Yehuda Katz</span> )</p>",
        "id": 182399215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575327980
    },
    {
        "content": "<p>hello!</p>",
        "id": 182399227,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1575327997
    },
    {
        "content": "<p>but is there a tool that combines the output from multiple crates to give you an overall view? At least I think that is what <span class=\"user-mention\" data-user-id=\"252446\">@Yehuda Katz</span> is asking for</p>",
        "id": 182399230,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575328002
    },
    {
        "content": "<p>what I'm trying to do is figure out what parts of <code>nu</code> are contributing to build slowness</p>",
        "id": 182399240,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1575328015
    },
    {
        "content": "<p>You can take a look at <code>-Ztimings</code> in Cargo which gives a super high level view (timings per crate, split into 'metadata' and 'codegen')</p>",
        "id": 182399276,
        "sender_full_name": "simulacrum",
        "timestamp": 1575328059
    },
    {
        "content": "<p>There is also this tool that <span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> wrote, I think?</p>",
        "id": 182399279,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575328060
    },
    {
        "content": "<p>Ah, maybe that's it</p>",
        "id": 182399284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575328066
    },
    {
        "content": "<p>but that won't help at all if you're interested in \"which functions in this crate are causing slowness\"</p>",
        "id": 182399346,
        "sender_full_name": "simulacrum",
        "timestamp": 1575328085
    },
    {
        "content": "<p>I will just reiterate that <em>man</em> do we need some docs to point people at on this</p>",
        "id": 182399350,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575328088
    },
    {
        "content": "<p>that we can't answer ~at all today</p>",
        "id": 182399351,
        "sender_full_name": "simulacrum",
        "timestamp": 1575328090
    },
    {
        "content": "<p>I'm first interested in which deps</p>",
        "id": 182399358,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1575328096
    },
    {
        "content": "<p>that's good enough for now</p>",
        "id": 182399359,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1575328099
    },
    {
        "content": "<p>okay, then -Ztimings is your best bet for deps I think today</p>",
        "id": 182399362,
        "sender_full_name": "simulacrum",
        "timestamp": 1575328107
    },
    {
        "content": "<p>will try it out</p>",
        "id": 182399373,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1575328124
    },
    {
        "content": "<p>should be a matter of <code>cargo build -Ztimings</code> (or any other cargo command that builds things, in theory)</p>",
        "id": 182399375,
        "sender_full_name": "simulacrum",
        "timestamp": 1575328125
    },
    {
        "content": "<p>that'll print out a message at the end pointing at an HTML file which gives you a couple graphs and is generally helpful for this question</p>",
        "id": 182399395,
        "sender_full_name": "simulacrum",
        "timestamp": 1575328159
    },
    {
        "content": "<p>sadly there's currently a nightly regression that's making my build not work but I can wait for that to be reverted</p>",
        "id": 182399401,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1575328169
    },
    {
        "content": "<p>you could also pop back to an earlier nightly, <span class=\"user-mention\" data-user-id=\"252446\">@Yehuda Katz</span></p>",
        "id": 182399462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575328214
    },
    {
        "content": "<p>(or use an earlier nightly -- this functionality has been in and pretty stable for a month or two)</p>",
        "id": 182399470,
        "sender_full_name": "simulacrum",
        "timestamp": 1575328222
    },
    {
        "content": "<p>I'm not totally sure which one works</p>",
        "id": 182399473,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1575328229
    },
    {
        "content": "<p><code>cargo-bisect-rustc</code> can help there, in theory :)</p>",
        "id": 182399484,
        "sender_full_name": "simulacrum",
        "timestamp": 1575328250
    },
    {
        "content": "<p>yeah fair</p>",
        "id": 182399488,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1575328256
    },
    {
        "content": "<p>/me installs</p>",
        "id": 182399494,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1575328261
    },
    {
        "content": "<blockquote>\n<p><code>cargo-bisect-rustc</code> can help there, in theory :)</p>\n</blockquote>\n<p>heh interesting application</p>",
        "id": 182399511,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575328282
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/cargo-bisect-rustc\" target=\"_blank\" title=\"https://github.com/rust-lang/cargo-bisect-rustc\">https://github.com/rust-lang/cargo-bisect-rustc</a></p>",
        "id": 182399514,
        "sender_full_name": "simulacrum",
        "timestamp": 1575328287
    },
    {
        "content": "<p>yah</p>",
        "id": 182399526,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1575328310
    },
    {
        "content": "<p>installing!</p>",
        "id": 182399532,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1575328318
    },
    {
        "content": "<p>I never quite have any idea what I'm doing :P</p>",
        "id": 182399588,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1575328340
    },
    {
        "content": "<p>Very soon, you'll be able to do something similar with the measureme data. <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> just released measureme 0.5 this morning and we need to update it in rustc.</p>",
        "id": 182399642,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1575328421
    },
    {
        "content": "<p>how does measureme work?</p>",
        "id": 182399657,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1575328441
    },
    {
        "content": "<p>At that point, the <code>crox</code> tool can generate the same kind of visualization as cargo timings but more detailed.</p>",
        "id": 182399711,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1575328458
    },
    {
        "content": "<p>We have hooks in the compiler (mostly around the query system but also a few other areas) which record \"interesting\" events. The data is dumped in a binary format to some files in your working directory. Then after the compilation session, we have set of tools you can use to inspect the files.</p>",
        "id": 182399762,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1575328509
    },
    {
        "content": "<p>Once <a href=\"mailto:measureme@0.5\" title=\"mailto:measureme@0.5\">measureme@0.5</a> lands in rustc, you'll be able to generate performance traces like this <a href=\"https://github.com/rust-lang/measureme/pull/84#issuecomment-552688721\" target=\"_blank\" title=\"https://github.com/rust-lang/measureme/pull/84#issuecomment-552688721\">https://github.com/rust-lang/measureme/pull/84#issuecomment-552688721</a></p>",
        "id": 182399957,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1575328671
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> is opening a PR tomorrow so we should be able to do that in nightlies starting later this week.</p>",
        "id": 182400020,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1575328711
    }
]