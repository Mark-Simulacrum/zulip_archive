[
    {
        "content": "<p>I'm taking a look at <a href=\"https://github.com/rust-lang/rust/issues/72837\">#72837</a>, and running rustc with <code>-Z self-profile-events=default,query-keys -Zself-profile</code> results in a profile dominated by <code>self_profile_alloc_query_strings</code> taking 40% of the total time. Is that expected to be so slow?</p>",
        "id": 199321772,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1590960326
    },
    {
        "content": "<p>query key collection is pretty slow, but I wouldn't have expected it to be <em>that</em> slow... <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span>, could it be the codegen unit thing you added recently?</p>",
        "id": 199322113,
        "sender_full_name": "simulacrum",
        "timestamp": 1590961066
    },
    {
        "content": "<p>I haven't actually checked the query keys, but it's possible that they are just gigantic</p>",
        "id": 199322309,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1590961385
    },
    {
        "content": "<p>you can probably e.g. <code>strings</code> the generated file as a quick check</p>",
        "id": 199322454,
        "sender_full_name": "simulacrum",
        "timestamp": 1590961641
    },
    {
        "content": "<p>from where it was introduced in <a href=\"https://github.com/rust-lang/rust/pull/67397\">https://github.com/rust-lang/rust/pull/67397</a> \"This PR makes self-profiling able to record query keys. The implementation is not as efficient as it could be yet (all query keys except for DefIds cause string data to be duplicated) and the rendered strings could be nicer too\" so think is expected to be slow</p>",
        "id": 199322511,
        "sender_full_name": "andjo403",
        "timestamp": 1590961757
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> the codegen unit thing that was added shall only be logged if self-profile-events contains args or function-args so that shall not be part of the problem and that event is not triggered that often only once per cgu</p>",
        "id": 199322859,
        "sender_full_name": "andjo403",
        "timestamp": 1590962407
    },
    {
        "content": "<p>ah okay</p>",
        "id": 199322862,
        "sender_full_name": "simulacrum",
        "timestamp": 1590962422
    },
    {
        "content": "<p>It depends a lot on what the rustc session you're profiling looks like. For most sessions, the majority of time is spent in LLVM and there aren't (comparatively) that many query keys to be recorded. If the middle part of rustc is what's slow, we could easily be generating millions of queries and recording all of that data is slow. Usually dumping the query keys happens while LLVM is running so it doesn't really add much to the wall clock time.</p>",
        "id": 199327117,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590970240
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> FWIW I intentionally only profile <code>cargo check</code> runs</p>",
        "id": 204233879,
        "sender_full_name": "eddyb",
        "timestamp": 1595006535
    },
    {
        "content": "<p>(not sure how relevant it is to the discussion, just wanted to offer that data point)</p>",
        "id": 204233941,
        "sender_full_name": "eddyb",
        "timestamp": 1595006581
    },
    {
        "content": "<p>(running LLVM is a waste of time in that case since what I'm looking for is ways to optimize trait system stuff)</p>",
        "id": 204233979,
        "sender_full_name": "eddyb",
        "timestamp": 1595006608
    },
    {
        "content": "<p>I'm doing a bit of self-profiling and also seeing <code>self_profile_alloc_query_strings</code> take ~35% of one crate. Is that indicative of anything bad for my code, or can I just write that off as \"the profiling itself takes some time\"?</p>",
        "id": 264471145,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1639153451
    },
    {
        "content": "<p>Usually that only takes a significant amount of time if you've turned on some of the detailed profiling options like \"query-keys\". If you have turned that option on, you can probably write this off. If you haven't, then there may be something more interesting going on.</p>",
        "id": 264472573,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1639154119
    },
    {
        "content": "<p>Does <code>args</code> count as detailed? Just copying from the blog post <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span> </p>\n<div class=\"codehilite\"><pre><span></span><code>RUSTFLAGS=&quot;-Zself-profile=$(pwd)/profiles -Zself-profile-events=default,args&quot; cargo +nightly build --workspace\n</code></pre></div>",
        "id": 264473272,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1639154408
    },
    {
        "content": "<p>Yeah, \"args\" enables both \"query-keys\" and \"function-args\". When that is enabled, we basically <code>.to_string()</code> all the arguments to every query invoked during compilation and then dump to them disk at the end. The time reported in <code>self_profile_alloc_query_strings</code> is the time it takes to dump that data.</p>",
        "id": 264473919,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1639154720
    },
    {
        "content": "<p>ok, so that sounds like that timing piece doesn't really matter for \"why is our build slow\". It's only important for \"why is timing our build to see why it's slow slower than the build itself\" <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> </p>\n<p>Thanks!</p>",
        "id": 264475966,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1639155632
    }
]