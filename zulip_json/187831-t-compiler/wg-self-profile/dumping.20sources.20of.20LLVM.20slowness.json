[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span> So I experimented with the CGU dumping functionality already built-in to rustc, and dumped the CGUs for librustc -- as a case study -- while in incremental mode. </p>\n<p>Here are the top CGUs by number of items in them for just librustc, though post-inlining in the mono collector.</p>\n<p>Do you think it'd be useful to clean this up and make it a more easily obtainable output from rustc? I could imagine us integrating it with self-profile or just dumping into a text file via -Zdump-cgus or so...</p>\n<div class=\"codehilite\"><pre><span></span>9106 rustc.c0mi9ud5-dep_graph-graph.volatile\n9339 rustc_data_structures.9qcb4nu3-in-rustc_interface.f5pc1f2p-box_region.volatile\n9582 rustc.c0mi9ud5-ty-query\n9792 core.d2krjpsn-in-rustc_mir.34aofsg3-iter-adapters.volatile\n9942 hashbrown.dxqb203g-in-rustc_typeck.6k1cg5uj-raw.volatile\n11002 rustc.c0mi9ud5-in-rustc_mir.34aofsg3-ty-context.volatile\n11903 rustc.c0mi9ud5-in-rustc_typeck.6k1cg5uj-ty-context.volatile\n13000 rustc.c0mi9ud5-ty-context\n14853 hashbrown.dxqb203g-in-rustc_mir.34aofsg3-raw.volatile\n15977 alloc.3yhu0pmp-in-rustc.c0mi9ud5-raw_vec.volatile\n19555 alloc.3yhu0pmp-in-rustc_mir.34aofsg3-vec.volatile\n19729 core.d2krjpsn-in-rustc.c0mi9ud5-iter-adapters.volatile\n26826 rustc.c0mi9ud5-ty-context.volatile\n27567 alloc.3yhu0pmp-in-rustc.c0mi9ud5-vec.volatile\n32196 hashbrown.dxqb203g-in-rustc.c0mi9ud5-raw.volatile\n</pre></div>",
        "id": 176740749,
        "sender_full_name": "simulacrum",
        "timestamp": 1569587075
    },
    {
        "content": "<p>I also don't quite understand how we get e.g. <code>hashbrown.dxqb203g-in-rustc_mir.34aofsg3-raw.volatile</code> as a codegen unit inside librustc, since it doesn't have a dependency on librustc_mir at all, so I wouldn't expect that to show up -- maybe I'm missing something though?</p>",
        "id": 176740878,
        "sender_full_name": "simulacrum",
        "timestamp": 1569587187
    },
    {
        "content": "<p>This is the documented syntax</p>\n<div class=\"codehilite\"><pre><span></span>&lt;crate-name&gt;.&lt;crate-disambiguator&gt;[-in-&lt;local-crate-id&gt;](-&lt;component&gt;)*[.&lt;special-suffix&gt;]\n&lt;local-crate-id&gt; = &lt;local-crate-name&gt;.&lt;local-crate-disambiguator&gt;\n</pre></div>",
        "id": 176741155,
        "sender_full_name": "simulacrum",
        "timestamp": 1569587462
    },
    {
        "content": "<p>So I guess one would read that as functions from hashbrown, inlined into rustc_mir due to being generic (volatile)</p>",
        "id": 176741271,
        "sender_full_name": "simulacrum",
        "timestamp": 1569587549
    },
    {
        "content": "<p>oh, wait, this is not from just librustc, this is across all crates in a standard build</p>",
        "id": 176741341,
        "sender_full_name": "simulacrum",
        "timestamp": 1569587606
    },
    {
        "content": "<p>This is from just librustc:</p>\n<div class=\"codehilite\"><pre><span></span>3243 arena.29va6d19-in-rustc.c0mi9ud5.volatile\n4361 core.d2krjpsn-in-rustc.c0mi9ud5-slice-sort.volatile\n4588 rustc.c0mi9ud5-ty-query-on_disk_cache.volatile\n5275 alloc.3yhu0pmp-in-rustc.c0mi9ud5-collections-btree-node.volatile\n5439 std.4uew1l7o-in-rustc.c0mi9ud5-thread-local.volatile\n7962 core.d2krjpsn-in-rustc.c0mi9ud5-intrinsics.volatile\n8535 rustc.c0mi9ud5-ty-query-plumbing.volatile\n9106 rustc.c0mi9ud5-dep_graph-graph.volatile\n9582 rustc.c0mi9ud5-ty-query\n13000 rustc.c0mi9ud5-ty-context\n15977 alloc.3yhu0pmp-in-rustc.c0mi9ud5-raw_vec.volatile\n19729 core.d2krjpsn-in-rustc.c0mi9ud5-iter-adapters.volatile\n26826 rustc.c0mi9ud5-ty-context.volatile\n27567 alloc.3yhu0pmp-in-rustc.c0mi9ud5-vec.volatile\n32196 hashbrown.dxqb203g-in-rustc.c0mi9ud5-raw.volatile\n</pre></div>",
        "id": 176741352,
        "sender_full_name": "simulacrum",
        "timestamp": 1569587627
    },
    {
        "content": "<blockquote>\n<p>So I guess one would read that as functions from hashbrown, inlined into rustc_mir due to being generic (volatile)</p>\n</blockquote>\n<p>\"instantiated in rustc_mir\" would be more accurate than \"inlined into rustc_mir\", but otherwise that's correct, yes</p>",
        "id": 176741922,
        "sender_full_name": "mw",
        "timestamp": 1569588150
    },
    {
        "content": "<p>hashbrown seems to instantiate lots of generic code <code>:)</code></p>",
        "id": 176741940,
        "sender_full_name": "mw",
        "timestamp": 1569588185
    },
    {
        "content": "<p>Regarding your more general question: Yes, I'd like to add some kind of monomorphization tracking into self-profiling</p>",
        "id": 176742058,
        "sender_full_name": "mw",
        "timestamp": 1569588319
    },
    {
        "content": "<p>I don't know what form it would take exactly but seems very useful</p>",
        "id": 176742089,
        "sender_full_name": "mw",
        "timestamp": 1569588354
    },
    {
        "content": "<p>I guess to get a more interesting question: do we think this information is useful? How would one use it?</p>",
        "id": 176742395,
        "sender_full_name": "simulacrum",
        "timestamp": 1569588627
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> as well since you might be interested</p>",
        "id": 176742404,
        "sender_full_name": "simulacrum",
        "timestamp": 1569588644
    },
    {
        "content": "<p>I think answering that question can help drive figuring out how to integrate</p>",
        "id": 176742522,
        "sender_full_name": "simulacrum",
        "timestamp": 1569588733
    },
    {
        "content": "<p>I think it is more interesting that the function level</p>",
        "id": 176742539,
        "sender_full_name": "mw",
        "timestamp": 1569588776
    },
    {
        "content": "<p>also for actual inlining</p>",
        "id": 176742553,
        "sender_full_name": "mw",
        "timestamp": 1569588804
    },
    {
        "content": "<p>Sure - I have that info too</p>",
        "id": 176742555,
        "sender_full_name": "simulacrum",
        "timestamp": 1569588808
    },
    {
        "content": "<p>Though that I know even less what to do with</p>",
        "id": 176742564,
        "sender_full_name": "simulacrum",
        "timestamp": 1569588828
    },
    {
        "content": "<p>inlining?</p>",
        "id": 176742571,
        "sender_full_name": "mw",
        "timestamp": 1569588839
    },
    {
        "content": "<p>No, the functions - like, sure there's a lot of them, but it's not clear  how to act on that</p>",
        "id": 176742648,
        "sender_full_name": "simulacrum",
        "timestamp": 1569588878
    },
    {
        "content": "<p>I guess if you had the actual call graph (that the collector works with) then a tool could find parts of the graph that are instantiate by a single invocation and point you to that invocation</p>",
        "id": 176742760,
        "sender_full_name": "mw",
        "timestamp": 1569588976
    },
    {
        "content": "<p>saying: if you turn this into a trait object, the compiler has X thousand functions less to optimize</p>",
        "id": 176742785,
        "sender_full_name": "mw",
        "timestamp": 1569589007
    },
    {
        "content": "<p>something like that</p>",
        "id": 176742810,
        "sender_full_name": "mw",
        "timestamp": 1569589026
    },
    {
        "content": "<p>Hm that would be interesting</p>",
        "id": 176742821,
        "sender_full_name": "simulacrum",
        "timestamp": 1569589033
    },
    {
        "content": "<p>similar for function inlining</p>",
        "id": 176742830,
        "sender_full_name": "mw",
        "timestamp": 1569589039
    },
    {
        "content": "<p>a tool could tell you for each function how if it gets copied because of inlining</p>",
        "id": 176742843,
        "sender_full_name": "mw",
        "timestamp": 1569589061
    },
    {
        "content": "<p>Though I wonder - e.g. hashbrown can't be, right?</p>",
        "id": 176742856,
        "sender_full_name": "simulacrum",
        "timestamp": 1569589073
    },
    {
        "content": "<p>and how many other inline functions get pulled into each CGU because of it</p>",
        "id": 176742863,
        "sender_full_name": "mw",
        "timestamp": 1569589079
    },
    {
        "content": "<blockquote>\n<p>Though I wonder - e.g. hashbrown can't be, right?</p>\n</blockquote>\n<p>what do you mean?</p>",
        "id": 176742920,
        "sender_full_name": "mw",
        "timestamp": 1569589096
    },
    {
        "content": "<p>There's no way to have a non-generic hashmap</p>",
        "id": 176742967,
        "sender_full_name": "simulacrum",
        "timestamp": 1569589136
    },
    {
        "content": "<p>true</p>",
        "id": 176743037,
        "sender_full_name": "mw",
        "timestamp": 1569589191
    },
    {
        "content": "<p>a tool might have to know which traits are object safe in order to give good suggestions?</p>",
        "id": 176743114,
        "sender_full_name": "mw",
        "timestamp": 1569589215
    },
    {
        "content": "<p>I don't know what the hashbrown code looks like, but it might still give the author an idea how to refactor things in order to have less generic code</p>",
        "id": 176743188,
        "sender_full_name": "mw",
        "timestamp": 1569589266
    },
    {
        "content": "<p>I guess it would be useful to know that e.g. librustc compile time is 40% hashmaps</p>",
        "id": 176743211,
        "sender_full_name": "simulacrum",
        "timestamp": 1569589275
    },
    {
        "content": "<p>indeed :)</p>",
        "id": 176743229,
        "sender_full_name": "mw",
        "timestamp": 1569589288
    },
    {
        "content": "<p>it's probably also interesting to know how big these functions are</p>",
        "id": 176743257,
        "sender_full_name": "mw",
        "timestamp": 1569589310
    },
    {
        "content": "<p>Yeah I'm working on that</p>",
        "id": 176743286,
        "sender_full_name": "simulacrum",
        "timestamp": 1569589322
    },
    {
        "content": "<p>I bet the hashbrown functions are all rather small</p>",
        "id": 176743326,
        "sender_full_name": "mw",
        "timestamp": 1569589326
    },
    {
        "content": "<p>It's mostly things like ManuallyDrop::deref_mut, tbh</p>",
        "id": 176743391,
        "sender_full_name": "simulacrum",
        "timestamp": 1569589377
    },
    {
        "content": "<p>hm</p>",
        "id": 176743545,
        "sender_full_name": "mw",
        "timestamp": 1569589465
    },
    {
        "content": "<p>I wonder how much of that is left after LLVM has done inlining and function merging</p>",
        "id": 176743576,
        "sender_full_name": "mw",
        "timestamp": 1569589494
    },
    {
        "content": "<p>probably very little -- but that takes time</p>",
        "id": 176743691,
        "sender_full_name": "simulacrum",
        "timestamp": 1569589571
    },
    {
        "content": "<p>is this for a debug or a release build</p>",
        "id": 176743847,
        "sender_full_name": "mw",
        "timestamp": 1569589684
    },
    {
        "content": "<p>I think we are a lot more aggressive about duplicating code for release builds</p>",
        "id": 176743882,
        "sender_full_name": "mw",
        "timestamp": 1569589707
    },
    {
        "content": "<p>release build</p>",
        "id": 176743904,
        "sender_full_name": "simulacrum",
        "timestamp": 1569589720
    },
    {
        "content": "<p>(this is literally just an x.py build with some dumping built in)</p>",
        "id": 176743923,
        "sender_full_name": "simulacrum",
        "timestamp": 1569589732
    },
    {
        "content": "<p>inline functions are treated differently and -Zshare-generics is on by default for debug builds</p>",
        "id": 176743926,
        "sender_full_name": "mw",
        "timestamp": 1569589737
    },
    {
        "content": "<p>I wonder if it's worth trying to run this with -Zshare-generics in release mode, if that's a big win compile time and not a big loss at runtime it might be worth considering</p>",
        "id": 176744362,
        "sender_full_name": "simulacrum",
        "timestamp": 1569590056
    },
    {
        "content": "<p>Seems worth benchmarking, yes</p>",
        "id": 176744809,
        "sender_full_name": "mw",
        "timestamp": 1569590466
    },
    {
        "content": "<p>I'll try to allocate some time to a PR that does that to run it through perf</p>",
        "id": 176744911,
        "sender_full_name": "simulacrum",
        "timestamp": 1569590546
    },
    {
        "content": "<p>oof</p>\n<div class=\"codehilite\"><pre><span></span>1664 stmts for fn syntax::visit[0]::walk_expr[0]&lt;syntax::util[0]::node_count[0]::NodeCounter[0]&gt;\n1791 stmts for fn syntax::parse[0]::parser[0]::ty[0]::{{impl}}[0]::parse_ty_common[0]\n1832 stmts for fn syntax::print[0]::pprust[0]::{{impl}}[5]::print_item[0]\n2073 stmts for fn syntax::ast[0]::{{impl}}[255]::fmt[0]\n2073 stmts for fn syntax::print[0]::pprust[0]::{{impl}}[5]::print_expr_outer_attr_style[0]\n2225 stmts for fn syntax::parse[0]::parser[0]::expr[0]::{{impl}}[2]::parse_bottom_expr[0]\n2241 stmts for fn syntax::feature_gate[0]::check[0]::{{impl}}[0]::check_abi[0]\n2738 stmts for fn syntax::feature_gate[0]::check[0]::{{impl}}[1]::visit_item[0]\n3868 stmts for fn syntax::parse[0]::parser[0]::item[0]::{{impl}}[0]::parse_item_implementation[0]\n4183 stmts for fn proc_macro::bridge[0]::server[0]::{{impl}}[18]::dispatch[0]&lt;syntax::ext[0]::proc_macro_server[0]::Rustc[0]&gt;\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>3240 stmts for fn rustc::ty[0]::query[0]::{{impl}}[0]::print_stats[0]\n4007 stmts for fn rustc::ty[0]::query[0]::plumbing[0]::force_from_dep_node[0]\n4744 stmts for fn rustc::ty[0]::layout[0]::{{impl}}[3]::layout_raw_uncached[0]\n5092 stmts for fn rustc::ty[0]::context[0]::{{impl}}[14]::print_debug_stats[0]::inner[0]::go[0]\n5685 stmts for fn rustc::ty[0]::print[0]::pretty[0]::PrettyPrinter[0]::pretty_print_type[0]&lt;rustc::ty[0]::print[0]::pretty[0]::FmtPrinter[0]&lt;&amp;mut alloc::string[0]::String[0]&gt;&gt;\n5685 stmts for fn rustc::ty[0]::print[0]::pretty[0]::PrettyPrinter[0]::pretty_print_type[0]&lt;rustc::ty[0]::print[0]::pretty[0]::FmtPrinter[0]&lt;&amp;mut core::fmt[0]::Formatter[0]&gt;&gt;\n6501 stmts for fn rustc::ty[0]::query[0]::{{impl}}[401]::fmt[0]\n16401 stmts for fn rustc::dep_graph[0]::dep_node[0]::{{impl}}[14]::new[0]\n16401 stmts for fn rustc::dep_graph[0]::dep_node[0]::{{impl}}[14]::new[0]\n16401 stmts for fn rustc::dep_graph[0]::dep_node[0]::{{impl}}[14]::new[0]\n</pre></div>",
        "id": 176745580,
        "sender_full_name": "simulacrum",
        "timestamp": 1569591087
    },
    {
        "content": "<p>in particular those 16,000 statement long new functions are a bit sad to see duplicated</p>",
        "id": 176745602,
        "sender_full_name": "simulacrum",
        "timestamp": 1569591114
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span> is there any point in us generating empty functions? At least size_estimate is 0... maybe that's not entirely accurate?</p>",
        "id": 176746358,
        "sender_full_name": "simulacrum",
        "timestamp": 1569591676
    },
    {
        "content": "<p>e.g. I get a lot of:</p>\n<div class=\"codehilite\"><pre><span></span>0 stmts for fn core::ptr[0]::real_drop_in_place[0]&lt;&amp;u64&gt;\n0 stmts for fn core::mem[0]::needs_drop[0]&lt;(syntax_pos::SpanData[0], u32)&gt;\n0 stmts for fn core::ptr[0]::real_drop_in_place[0]&lt;hashbrown::map[0]::HashMap[0]&lt;syntax_pos::SpanData[0], u32, core::hash[0]::BuildHasherDefault[0]&lt;rustc_hash::FxHasher[0]&gt;&gt;&gt;\n0 stmts for fn core::mem[0]::align_of[0]&lt;(&amp;str, syntax_pos::symbol[0]::Symbol[0])&gt;\n0 stmts for fn core::mem[0]::size_of[0]&lt;syntax_pos::SpanLabel[0]&gt;\n0 stmts for fn core::ptr[0]::real_drop_in_place[0]&lt;&amp;bool&gt;\n0 stmts for fn core::mem[0]::size_of[0]&lt;(&amp;str, syntax_pos::symbol[0]::Symbol[0])&gt;\n0 stmts for fn core::hint[0]::unreachable_unchecked[0]\n0 stmts for fn core::ptr[0]::real_drop_in_place[0]&lt;&amp;alloc::vec[0]::Vec[0]&lt;(syntax_pos::span_encoding[0]::Span[0], alloc::string[0]::String[0])&gt;&gt;\n0 stmts for fn hashbrown::raw[0]::{{impl}}[5]::free_buckets[0]::{{closure}}[0]&lt;((syntax_pos::hygiene[0]::SyntaxContext[0], syntax_pos::hygiene[0]::ExpnId[0], syntax_pos::hygien\n0 stmts for fn core::ptr[0]::real_drop_in_place[0]&lt;syntax_pos::hygiene[0]::HygieneData[0]&gt;\n0 stmts for fn core::ptr[0]::real_drop_in_place[0]&lt;std::path[0]::PathBuf[0]&gt;\n0 stmts for fn core::ptr[0]::real_drop_in_place[0]&lt;std::collections[0]::hash[0]::map[0]::HashMap[0]&lt;(syntax_pos::hygiene[0]::SyntaxContext[0], syntax_pos::hygiene[0]::ExpnId[0]\n0 stmts for fn core::ptr[0]::real_drop_in_place[0]&lt;&amp;u8&gt;\n0 stmts for fn core::ptr[0]::real_drop_in_place[0]&lt;std::ffi[0]::os_str[0]::OsString[0]&gt;\n0 stmts for fn core::ptr[0]::real_drop_in_place[0]&lt;std::collections[0]::hash[0]::map[0]::HashMap[0]&lt;syntax_pos::SpanData[0], u32, core::hash[0]::BuildHasherDefault[0]&lt;rustc_has\n0 stmts for fn core::mem[0]::size_of[0]&lt;u8&gt;\n0 stmts for fn core::ptr[0]::real_drop_in_place[0]&lt;std::collections[0]::hash[0]::map[0]::HashMap[0]&lt;&amp;str, syntax_pos::symbol[0]::Symbol[0], core::hash[0]::BuildHasherDefault[0]\n0 stmts for fn core::slice[0]::size_from_ptr[0]&lt;syntax_pos::span_encoding[0]::Span[0]&gt;\n0 stmts for fn core::mem[0]::size_of[0]&lt;(syntax_pos::span_encoding[0]::Span[0], alloc::string[0]::String[0])&gt;\n0 stmts for fn core::ptr[0]::real_drop_in_place[0]&lt;&amp;syntax_pos::FileName[0]&gt;\n0 stmts for fn hashbrown::raw[0]::{{impl}}[5]::free_buckets[0]::{{closure}}[0]&lt;(syntax_pos::SpanData[0], u32), i32, extern &quot;rust-call&quot; fn(()) -&gt; (core::alloc[0]::Layout[0], usi\n0 stmts for fn core::mem[0]::size_of[0]&lt;((syntax_pos::hygiene[0]::SyntaxContext[0], syntax_pos::hygiene[0]::ExpnId[0], syntax_pos::hygiene[0]::Transparency[0]), syntax_pos::hyg\n0 stmts for fn core::slice[0]::size_from_ptr[0]&lt;syntax_pos::SpanLabel[0]&gt;\n0 stmts for fn core::ptr[0]::real_drop_in_place[0]&lt;syntax_pos::symbol[0]::Interner[0]&gt;\n0 stmts for fn core::ptr[0]::real_drop_in_place[0]&lt;&amp;std::path[0]::PathBuf[0]&gt;\n0 stmts for fn core::ptr[0]::real_drop_in_place[0]&lt;arena::DroplessArena[0]&gt;\n0 stmts for fn core::ptr[0]::real_drop_in_place[0]&lt;core::cell[0]::UnsafeCell[0]&lt;syntax_pos::symbol[0]::Interner[0]&gt;&gt;\n0 stmts for fn core::ptr[0]::real_drop_in_place[0]&lt;syntax_pos::BytePos[0]&gt;\n0 stmts for fn core::ptr[0]::real_drop_in_place[0]&lt;core::cell[0]::RefCell[0]&lt;syntax_pos::span_encoding[0]::SpanInterner[0]&gt;&gt;\n0 stmts for fn core::ptr[0]::real_drop_in_place[0]&lt;&amp;alloc::rc[0]::Rc[0]&lt;syntax_pos::SourceFile[0]&gt;&gt;\n0 stmts for fn core::ptr[0]::real_drop_in_place[0]&lt;core::cell[0]::UnsafeCell[0]&lt;syntax_pos::hygiene[0]::HygieneData[0]&gt;&gt;\n0 stmts for fn core::ptr[0]::real_drop_in_place[0]&lt;&amp;alloc::vec[0]::Vec[0]&lt;syntax_pos::span_encoding[0]::Span[0]&gt;&gt;\n0 stmts for fn core::ptr[0]::real_drop_in_place[0]&lt;&amp;syntax_pos::BytePos[0]&gt;\n0 stmts for fn core::ptr[0]::real_drop_in_place[0]&lt;core::cell[0]::BorrowMutError[0]&gt;\n0 stmts for fn core::mem[0]::size_of[0]&lt;syntax_pos::span_encoding[0]::Span[0]&gt;\n0 stmts for fn core::mem[0]::align_of[0]&lt;(syntax_pos::SpanData[0], u32)&gt;\n</pre></div>",
        "id": 176746375,
        "sender_full_name": "simulacrum",
        "timestamp": 1569591691
    },
    {
        "content": "<p>I don't remember how the size estimate is done. it might not be reliable</p>",
        "id": 176748476,
        "sender_full_name": "mw",
        "timestamp": 1569593045
    },
    {
        "content": "<p>this does seem like very interesting data to me! I suspect that hashbrown is generating so much because it seems literally all functions in the crate are <code>#[inline]</code>...</p>",
        "id": 176750714,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569594425
    },
    {
        "content": "<p>maybe not all of them need to be? the majority of the code seems to be generic though</p>",
        "id": 176750871,
        "sender_full_name": "mw",
        "timestamp": 1569594524
    },
    {
        "content": "<p>yup...</p>",
        "id": 176750919,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569594552
    },
    {
        "content": "<p>i.e. if it ends up in the <code>volatile</code> CGU, it means that it is not inline</p>",
        "id": 176750920,
        "sender_full_name": "mw",
        "timestamp": 1569594552
    },
    {
        "content": "<p>hm what would end up in the <code>volatile</code> CGU?</p>",
        "id": 176750960,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569594572
    },
    {
        "content": "<p>or maybe it is inline and pulled in by something not inline :)</p>",
        "id": 176750963,
        "sender_full_name": "mw",
        "timestamp": 1569594575
    },
    {
        "content": "<p>just generics w/o <code>#{inline]</code>?</p>",
        "id": 176750967,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569594577
    },
    {
        "content": "<p>yes</p>",
        "id": 176750973,
        "sender_full_name": "mw",
        "timestamp": 1569594582
    },
    {
        "content": "<p>and everything inline they pull in</p>",
        "id": 176750986,
        "sender_full_name": "mw",
        "timestamp": 1569594593
    },
    {
        "content": "<p>that's... probably a lot</p>",
        "id": 176751071,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569594618
    },
    {
        "content": "<p>we did indeed measure compile time slowdown on perf benchmarks b/c of hashbrown</p>",
        "id": 176751091,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569594633
    },
    {
        "content": "<p>and interesting question is: what kind of tool would help improving the situation here?</p>",
        "id": 176754417,
        "sender_full_name": "mw",
        "timestamp": 1569596722
    },
    {
        "content": "<p>/me goes crazy and thinks about profile-guided CGU partitioning <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> <span aria-label=\"explosion\" class=\"emoji emoji-1f4a5\" role=\"img\" title=\"explosion\">:explosion:</span></p>",
        "id": 176754555,
        "sender_full_name": "mw",
        "timestamp": 1569596810
    },
    {
        "content": "<blockquote>\n<p>/me goes crazy and thinks about profile-guided CGU partitioning <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> <span aria-label=\"explosion\" class=\"emoji emoji-1f4a5\" role=\"img\" title=\"explosion\">:explosion:</span></p>\n</blockquote>\n<p>Although I'm not sure this makes sense. All the information is also available at compile time ??</p>",
        "id": 176754691,
        "sender_full_name": "mw",
        "timestamp": 1569596906
    },
    {
        "content": "<p>I've posted <a href=\"https://github.com/rust-lang/rust/pull/64846\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/64846\">https://github.com/rust-lang/rust/pull/64846</a> to investigate what happens if we remove <code>#[inline]</code> from hashbrown</p>",
        "id": 176755262,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569597304
    },
    {
        "content": "<p>it could also just very well be the case that hashbrown has a lot more code</p>",
        "id": 176755279,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569597315
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> Yeah, hashbrown today compiles to the following in a standalone sense</p>\n<div class=\"codehilite\"><pre><span></span>POST INLINING:\nCodegenUnit hashbrown.dxqb203g-cgu.0 (3 items):\n0 stmts for fn core::ptr[0]::real_drop_in_place[0]&lt;&amp;core::alloc[0]::Layout[0]&gt;\n9 stmts for fn core::fmt[0]::{{impl}}[47]::fmt[0]&lt;core::alloc[0]::Layout[0]&gt;\n61 stmts for fn hashbrown::{{impl}}[0]::fmt[0]\n</pre></div>",
        "id": 176756857,
        "sender_full_name": "simulacrum",
        "timestamp": 1569598319
    },
    {
        "content": "<p>Top 15 functions by our size_estimate across all of rust-lang/rust pretty much (not including tools):</p>\n<div class=\"codehilite\"><pre><span></span>total    # of copies   per copy size\n278817   17            16401           rustc::dep_graph[0]::dep_node[0]::{{impl}}[14]::new[0]\n177814   977           182             core::ptr[0]::swap_nonoverlapping_bytes[0]\n85560    1240          69              core::intrinsics[0]::copy_nonoverlapping[0]&lt;u8&gt;\n70180    605           116             hashbrown::raw[0]::imp[0]::{{impl}}[0]::load_aligned[0]\n62370    462           135             core::alloc[0]::{{impl}}[0]::extend[0]\n61920    180           344             core::char[0]::methods[0]::{{impl}}[0]::encode_utf8[0]\n51072    532           96              core::alloc[0]::{{impl}}[0]::repeat[0]\n44826    1446          31              core::num[0]::{{impl}}[17]::overflowing_mul[0]\n33258    1446          23              core::num[0]::{{impl}}[17]::checked_mul[0]\n31360    490           64              core::core_arch[0]::simd[0]::{{impl}}[95]::new[0]\n31070    26            1195            rustc::dep_graph[0]::dep_node[0]::{{impl}}[13]::can_reconstruct_query_key[0]\n29988    588           51              core::alloc[0]::{{impl}}[0]::from_size_align[0]\n29951    491           61              rustc::hir[0]::def_id[0]::{{impl}}[36]::eq[0]\n29187    423           69              core::intrinsics[0]::copy_nonoverlapping[0]&lt;usize&gt;\n26505    855           31              core::num[0]::{{impl}}[17]::overflowing_add[0]\n</pre></div>",
        "id": 176759050,
        "sender_full_name": "simulacrum",
        "timestamp": 1569599747
    },
    {
        "content": "<p>Some of these are really a bit sad to see so high up, though others mostly make sense</p>",
        "id": 176759148,
        "sender_full_name": "simulacrum",
        "timestamp": 1569599801
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> filtering all instantiations down to just hashbrown I see </p>\n<div class=\"codehilite\"><pre><span></span>total   # of copies   per copy size\n70180   605           116             hashbrown::raw[0]::imp[0]::{{impl}}[0]::load_aligned[0]\n18816   84            224             hashbrown::raw[0]::{{impl}}[11]::new[0]&lt;(&amp;rustc::ty[0]::sty[0]::RegionKind[0]\n18468   486           38              hashbrown::raw[0]::{{impl}}[1]::next[0]\n17696   79            224             hashbrown::raw[0]::{{impl}}[11]::new[0]&lt;(rustc::hir[0]::item_local_id_inner[0]::ItemLocalId[0]\n16800   75            224             hashbrown::raw[0]::{{impl}}[11]::new[0]&lt;(rustc::ty[0]::UpvarId[0]\n16800   75            224             hashbrown::raw[0]::{{impl}}[11]::new[0]&lt;(rustc::hir[0]::item_local_id_inner[0]::ItemLocalId[0]\n16800   75            224             hashbrown::raw[0]::{{impl}}[11]::new[0]&lt;(rustc::hir[0]::item_local_id_inner[0]::ItemLocalId[0]\n16800   75            224             hashbrown::raw[0]::{{impl}}[11]::new[0]&lt;(rustc::hir[0]::item_local_id_inner[0]::ItemLocalId[0]\n16800   75            224             hashbrown::raw[0]::{{impl}}[11]::new[0]&lt;(rustc::hir[0]::item_local_id_inner[0]::ItemLocalId[0]\n16800   75            224             hashbrown::raw[0]::{{impl}}[11]::new[0]&lt;(rustc::hir[0]::def_id[0]::DefId[0]\n16576   74            224             hashbrown::raw[0]::{{impl}}[11]::new[0]&lt;(rustc::hir[0]::item_local_id_inner[0]::ItemLocalId[0]\n16576   74            224             hashbrown::raw[0]::{{impl}}[11]::new[0]&lt;(rustc::hir[0]::item_local_id_inner[0]::ItemLocalId[0]\n16576   74            224             hashbrown::raw[0]::{{impl}}[11]::new[0]&lt;(rustc::hir[0]::item_local_id_inner[0]::ItemLocalId[0]\n16576   74            224             hashbrown::raw[0]::{{impl}}[11]::new[0]&lt;(rustc::hir[0]::item_local_id_inner[0]::ItemLocalId[0]\n16576   74            224             hashbrown::raw[0]::{{impl}}[11]::new[0]&lt;(rustc::hir[0]::item_local_id_inner[0]::ItemLocalId[0]\n</pre></div>",
        "id": 176759297,
        "sender_full_name": "simulacrum",
        "timestamp": 1569599922
    },
    {
        "content": "<p>I guess most of those have their \"values\" cut off -- but still</p>",
        "id": 176759341,
        "sender_full_name": "simulacrum",
        "timestamp": 1569599957
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> what does that mean # of copies?</p>",
        "id": 176759385,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569599989
    },
    {
        "content": "<p>is this for one rustc crate or the whole crate graph?</p>",
        "id": 176759399,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569599998
    },
    {
        "content": "<p>whole crate graph</p>",
        "id": 176759455,
        "sender_full_name": "simulacrum",
        "timestamp": 1569600007
    },
    {
        "content": "<p>do you perhaps have a compiler with debug assertions enabled?</p>",
        "id": 176759458,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569600007
    },
    {
        "content": "<p>yeah, I do</p>",
        "id": 176759475,
        "sender_full_name": "simulacrum",
        "timestamp": 1569600014
    },
    {
        "content": "<p>so <code>load_aligned</code> was instantiated 605 times?</p>",
        "id": 176759485,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569600020
    },
    {
        "content": "<p>across the whole crate graph (std, rustc, test, codegen, etc)</p>",
        "id": 176759496,
        "sender_full_name": "simulacrum",
        "timestamp": 1569600035
    },
    {
        "content": "<p>this'd be why it's so expensive -- <a href=\"https://github.com/rust-lang/hashbrown/blob/d1ad4fc3aae2ade446738eea512e50b9e863dd0c/src/raw/sse2.rs#L57\" target=\"_blank\" title=\"https://github.com/rust-lang/hashbrown/blob/d1ad4fc3aae2ade446738eea512e50b9e863dd0c/src/raw/sse2.rs#L57\">https://github.com/rust-lang/hashbrown/blob/d1ad4fc3aae2ade446738eea512e50b9e863dd0c/src/raw/sse2.rs#L57</a></p>",
        "id": 176759516,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569600052
    },
    {
        "content": "<p>but nice data!</p>",
        "id": 176759542,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569600067
    },
    {
        "content": "<p><code>hashbrown::raw[0]::{{impl}}[1]::next[0]</code> &lt;- how would I interpret that?</p>",
        "id": 176759561,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569600086
    },
    {
        "content": "<p>I believe that's the next function in the 2nd impl in the raw module</p>",
        "id": 176759577,
        "sender_full_name": "simulacrum",
        "timestamp": 1569600102
    },
    {
        "content": "<p>probably an Iterator?</p>",
        "id": 176759582,
        "sender_full_name": "simulacrum",
        "timestamp": 1569600108
    },
    {
        "content": "<p>ok cool</p>",
        "id": 176759638,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569600124
    },
    {
        "content": "<p>looks like this in that case -- <a href=\"https://github.com/rust-lang/hashbrown/blob/d1ad4fc3aae2ade446738eea512e50b9e863dd0c/src/raw/mod.rs#L1185-L1208\" target=\"_blank\" title=\"https://github.com/rust-lang/hashbrown/blob/d1ad4fc3aae2ade446738eea512e50b9e863dd0c/src/raw/mod.rs#L1185-L1208\">https://github.com/rust-lang/hashbrown/blob/d1ad4fc3aae2ade446738eea512e50b9e863dd0c/src/raw/mod.rs#L1185-L1208</a></p>",
        "id": 176759664,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569600144
    },
    {
        "content": "<p>which makes sense</p>",
        "id": 176759688,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569600158
    },
    {
        "content": "<p>not sure why that has 486 copies...</p>",
        "id": 176759731,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569600186
    },
    {
        "content": "<p>well, it's probably getting instantiated in every single module ever pretty much inside the compiler</p>",
        "id": 176759751,
        "sender_full_name": "simulacrum",
        "timestamp": 1569600205
    },
    {
        "content": "<p>FWIW building libstd with debug assertions, I think all bets are off in terms of compile time</p>",
        "id": 176759755,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569600206
    },
    {
        "content": "<p>like even <em>really</em> core things like <code>ptr</code> and <code>mem</code> methods have debug assertions</p>",
        "id": 176759772,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569600219
    },
    {
        "content": "<p>Is there a way to disable debug asserts for std but enable them for the compiler?</p>",
        "id": 176759777,
        "sender_full_name": "simulacrum",
        "timestamp": 1569600222
    },
    {
        "content": "<p>not currently</p>",
        "id": 176759789,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569600227
    },
    {
        "content": "<p>or at least not that I know of</p>",
        "id": 176759799,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569600233
    },
    {
        "content": "<p>we should probably expose that tbh</p>",
        "id": 176759813,
        "sender_full_name": "simulacrum",
        "timestamp": 1569600241
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> do you have a branch w/ this data collection I could poke at?</p>",
        "id": 176759915,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569600316
    },
    {
        "content": "<p>I'd be curious if I can get info out of cargo</p>",
        "id": 176759924,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569600321
    },
    {
        "content": "<p>yeah, give me one moment to push it up</p>",
        "id": 176759931,
        "sender_full_name": "simulacrum",
        "timestamp": 1569600326
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> <a href=\"https://github.com/Mark-Simulacrum/rust/tree/dump-codegen\" target=\"_blank\" title=\"https://github.com/Mark-Simulacrum/rust/tree/dump-codegen\">https://github.com/Mark-Simulacrum/rust/tree/dump-codegen</a> -- you probably want just the first commit</p>",
        "id": 176760031,
        "sender_full_name": "simulacrum",
        "timestamp": 1569600382
    },
    {
        "content": "<p>I currently have it setup to just dump to /tmp/cg-dumps/{crate name}/{label} if debug asserts are on for all crates</p>",
        "id": 176760054,
        "sender_full_name": "simulacrum",
        "timestamp": 1569600414
    },
    {
        "content": "<p>ah so this isn't actually instrumenting llvm</p>",
        "id": 176760110,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569600464
    },
    {
        "content": "<p>it's just using a size estimate</p>",
        "id": 176760113,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569600467
    },
    {
        "content": "<p>right, yeah</p>",
        "id": 176760118,
        "sender_full_name": "simulacrum",
        "timestamp": 1569600471
    },
    {
        "content": "<p>RUSTFLAGS_NOT_BOOTSTRAP=\"-Zhuman-readable-cgu-names\" is also somewhat helpful to figure out where things are being emitted</p>",
        "id": 176760173,
        "sender_full_name": "simulacrum",
        "timestamp": 1569600490
    },
    {
        "content": "<p>but I believe this size estimate has a pretty good correspondence  with what we end up codegen'ing -- some constant factor</p>",
        "id": 176760210,
        "sender_full_name": "simulacrum",
        "timestamp": 1569600527
    },
    {
        "content": "<p>I think it'd be feasible to do some more low-level instrumentation of LLVM but I jumped on the fact that we already had this infra mostly in place on master</p>",
        "id": 176760272,
        "sender_full_name": "simulacrum",
        "timestamp": 1569600585
    },
    {
        "content": "<p>i.e., the function was hooked up and such</p>",
        "id": 176760290,
        "sender_full_name": "simulacrum",
        "timestamp": 1569600596
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>cat /tmp/cg-dumps/*/POST_INLINING\\:.codegen-units | rg &#39;stmts for&#39; | sort -n -k1 --parallel=8 | uniq -c &gt; /tmp/st\n(printf &#39;total, # of copies, per copy size\\n&#39;; (rg hashbrown /tmp/st | awk &#39;{ print $1*$2 &quot;, &quot; $1 &quot;, &quot; $2 &quot;, &quot; $6 }&#39; | sort -rn -k1 | head -n15)) | column -t -s,\n# or\n(printf &#39;total, # of copies, per copy size\\n&#39;; (awk &#39;{ print $1*$2 &quot;, &quot; $1 &quot;, &quot; $2 &quot;, &quot; $0 }&#39; /tmp/st | sort -rn -k1 | head -n15)) | column -t -s,\n</pre></div>",
        "id": 176760443,
        "sender_full_name": "simulacrum",
        "timestamp": 1569600678
    },
    {
        "content": "<p>those are the 2 commands I've been using to get that chart output</p>",
        "id": 176760451,
        "sender_full_name": "simulacrum",
        "timestamp": 1569600688
    },
    {
        "content": "<p>if in non-incremental mode you probably want POST_MERGING instead of POST_INLINING, since we merge into 16 codegen units then or so</p>",
        "id": 176760550,
        "sender_full_name": "simulacrum",
        "timestamp": 1569600751
    },
    {
        "content": "<p>fixed the cutting of the values etc</p>\n<div class=\"codehilite\"><pre><span></span>total, # of copies, per copy size\n69575                               605   115       605 115 stmts for fn hashbrown::raw[0]::imp[0]::{{impl}}[0]::load_aligned[0]\n18816                               84    224        84 224 stmts for fn hashbrown::raw[0]::{{impl}}[11]::new[0]&lt;(&amp;rustc::ty[0]::sty[0]::RegionKind[0], rustc_data_structures::transitive_relation[0]::Index[0])&gt;\n17696                               79    224        79 224 stmts for fn hashbrown::raw[0]::{{impl}}[11]::new[0]&lt;(rustc::hir[0]::item_local_id_inner[0]::ItemLocalId[0], ())&gt;\n17496                               486   36        486 36 stmts for fn hashbrown::raw[0]::{{impl}}[1]::next[0]\n16800                               75    224        75 224 stmts for fn hashbrown::raw[0]::{{impl}}[11]::new[0]&lt;(rustc::ty[0]::UpvarId[0], rustc::ty[0]::UpvarCapture[0])&gt;\n16800                               75    224        75 224 stmts for fn hashbrown::raw[0]::{{impl}}[11]::new[0]&lt;(rustc::hir[0]::item_local_id_inner[0]::ItemLocalId[0], rustc::ty[0]::sty[0]::FnSig[0])&gt;\n16800                               75    224        75 224 stmts for fn hashbrown::raw[0]::{{impl}}[11]::new[0]&lt;(rustc::hir[0]::item_local_id_inner[0]::ItemLocalId[0], rustc::infer[0]::canonical[0]::Canonical[0]&lt;rustc::ty[0]::context[0]::UserType[0]&gt;)&gt;\n16800                               75    224        75 224 stmts for fn hashbrown::raw[0]::{{impl}}[11]::new[0]&lt;(rustc::hir[0]::item_local_id_inner[0]::ItemLocalId[0], alloc::vec[0]::Vec[0]&lt;&amp;rustc::ty[0]::TyS[0]&gt;)&gt;\n16800                               75    224        75 224 stmts for fn hashbrown::raw[0]::{{impl}}[11]::new[0]&lt;(rustc::hir[0]::item_local_id_inner[0]::ItemLocalId[0], (syntax_pos::span_encoding[0]::Span[0], syntax_pos::symbol[0]::Symbol[0]))&gt;\n16800                               75    224        75 224 stmts for fn hashbrown::raw[0]::{{impl}}[11]::new[0]&lt;(rustc::hir[0]::def_id[0]::DefId[0], rustc::infer[0]::canonical[0]::Canonical[0]&lt;rustc::ty[0]::sty[0]::Binder[0]&lt;rustc::ty[0]::sty[0]::FnSig[0]&gt;&gt;)&gt;\n16576                               74    224        74 224 stmts for fn hashbrown::raw[0]::{{impl}}[11]::new[0]&lt;(rustc::hir[0]::item_local_id_inner[0]::ItemLocalId[0], usize)&gt;\n16576                               74    224        74 224 stmts for fn hashbrown::raw[0]::{{impl}}[11]::new[0]&lt;(rustc::hir[0]::item_local_id_inner[0]::ItemLocalId[0], rustc::ty[0]::binding[0]::BindingMode[0])&gt;\n16576                               74    224        74 224 stmts for fn hashbrown::raw[0]::{{impl}}[11]::new[0]&lt;(rustc::hir[0]::item_local_id_inner[0]::ItemLocalId[0], core::result[0]::Result[0]&lt;(rustc::hir[0]::def[0]::DefKind[0], rustc::hir[0]::def_id[0]::DefId[0]), rustc::util[0]::common[0]::ErrorReported[0]&gt;)&gt;\n16576                               74    224        74 224 stmts for fn hashbrown::raw[0]::{{impl}}[11]::new[0]&lt;(rustc::hir[0]::item_local_id_inner[0]::ItemLocalId[0], alloc::vec[0]::Vec[0]&lt;rustc::ty[0]::adjustment[0]::Adjustment[0]&gt;)&gt;\n16576                               74    224        74 224 stmts for fn hashbrown::raw[0]::{{impl}}[11]::new[0]&lt;(rustc::hir[0]::item_local_id_inner[0]::ItemLocalId[0], &amp;rustc::ty[0]::TyS[0])&gt;\n</pre></div>",
        "id": 176761609,
        "sender_full_name": "simulacrum",
        "timestamp": 1569601584
    },
    {
        "content": "<p>(this is with debug asserts in std off, I think)</p>",
        "id": 176761677,
        "sender_full_name": "simulacrum",
        "timestamp": 1569601653
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> There are quite a few methods in <code>DepNode</code> that could be made const fns:</p>\n<ul>\n<li>can_reconstruct_query_key</li>\n<li>is_anon</li>\n<li>is_eval_always</li>\n<li>has_params</li>\n<li>from_def_path_hash (no sure if <code>debug_assert</code> is a problem for const-fn)</li>\n<li>new_no_params (ditto)</li>\n</ul>",
        "id": 176909399,
        "sender_full_name": "mw",
        "timestamp": 1569828596
    },
    {
        "content": "<p>That might improve things a little.</p>",
        "id": 176909458,
        "sender_full_name": "mw",
        "timestamp": 1569828629
    },
    {
        "content": "<p>(because the compiler might be able to \"inline\" const-fns away before the monomorphizer sees them)</p>",
        "id": 176909624,
        "sender_full_name": "mw",
        "timestamp": 1569828850
    }
]