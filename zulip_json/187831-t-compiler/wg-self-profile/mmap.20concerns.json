[
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> that's fine in this case, i.e. there's no real risk here</p>\n</blockquote>\n<p>Why is that?</p>",
        "id": 161852999,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1553688933
    },
    {
        "content": "<p>(This is one of my big problems with the mmap crate, which doesn't clearly explain this unsafety in the docs the last time I checked)</p>",
        "id": 161853086,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1553688984
    },
    {
        "content": "<p>the file is exclusively accessed by a single process and all data is written just once</p>",
        "id": 161853092,
        "sender_full_name": "mw",
        "timestamp": 1553688991
    },
    {
        "content": "<p>i.e. we open a new file, touch each byte once for writing and never look at it again</p>",
        "id": 161853110,
        "sender_full_name": "mw",
        "timestamp": 1553689022
    },
    {
        "content": "<blockquote>\n<p>exclusively accessed by a single process</p>\n</blockquote>\n<p>That's my point though; you literally cannot guarantee that. While it's writing, an automated program can see it and start writing to it as well</p>",
        "id": 161853133,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1553689053
    },
    {
        "content": "<p>the same is true for basically everything in the compiler where the file system is touched</p>",
        "id": 161853189,
        "sender_full_name": "mw",
        "timestamp": 1553689083
    },
    {
        "content": "<p>Sure, but in the case of <code>File</code>, you don't introduce memory unsafety, the file just gets clobbered</p>",
        "id": 161853208,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1553689109
    },
    {
        "content": "<p>do you have a specific scenario in mind that worries you?</p>",
        "id": 161853244,
        "sender_full_name": "mw",
        "timestamp": 1553689169
    },
    {
        "content": "<p>we are not using the mmap for communicating between threads or processes</p>",
        "id": 161853322,
        "sender_full_name": "mw",
        "timestamp": 1553689230
    },
    {
        "content": "<p>it is just supposed to let the OS do some paging magic</p>",
        "id": 161853351,
        "sender_full_name": "mw",
        "timestamp": 1553689266
    },
    {
        "content": "<p>With file-backed-mmap, you get a <code>*mut T</code> and convert it to a <code>&amp;T</code> or <code>&amp;mut T</code>. During the time that reference exists, if anything else decides to write to that file, the reference's guarantees are invalidated.</p>",
        "id": 161853354,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1553689271
    },
    {
        "content": "<p>I do not have any specific scenarios, no. I'm just pointing out that, as far I have been able to determine, file-backed-mmap cannot be used in Rust without introducing memory unsafety based on my understanding of the rules.</p>",
        "id": 161853448,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1553689333
    },
    {
        "content": "<p>It doesn't matter what the intended use is, only what the <em>possible</em> uses are.</p>",
        "id": 161853477,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1553689366
    },
    {
        "content": "<p>well yeah, the memory/file is accessed only from unsafe code anyway</p>",
        "id": 161853480,
        "sender_full_name": "mw",
        "timestamp": 1553689373
    },
    {
        "content": "<p>but that's like saying you can't use <code>&amp;mut []</code> safely because someone else might use <code>unsafe</code> to get another reference</p>",
        "id": 161853555,
        "sender_full_name": "mw",
        "timestamp": 1553689438
    },
    {
        "content": "<blockquote>\n<p>only from unsafe code anyway</p>\n</blockquote>\n<p>You aren't allowed to violate Rust's guarantees in an <code>unsafe</code> block. The compiler just cannot validate them, so it's up to the programmer.</p>",
        "id": 161853610,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1553689450
    },
    {
        "content": "<blockquote>\n<p>but that's like saying you can't use <code>&amp;mut []</code> safely because someone else might use <code>unsafe</code> to get another reference</p>\n</blockquote>\n<p>I'm sorry if I've given this impression, but it's definitely not the same case.</p>",
        "id": 161853619,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1553689474
    },
    {
        "content": "<p>we are doing a runtime check that makes sure that we don't violate the invariants in the current process</p>",
        "id": 161853653,
        "sender_full_name": "mw",
        "timestamp": 1553689515
    },
    {
        "content": "<p>In the <code>&amp;mut[]</code> case, the person who wrote the <code>unsafe</code> block code didn't uphold the reference's guarantees of non-mutability / single-mutable</p>",
        "id": 161853665,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1553689523
    },
    {
        "content": "<p>if another process writes over the file, well that's a bug</p>",
        "id": 161853675,
        "sender_full_name": "mw",
        "timestamp": 1553689528
    },
    {
        "content": "<p>A bug that (I believe) introduces memory unsafety</p>",
        "id": 161853702,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1553689549
    },
    {
        "content": "<p>Thus my statement: </p>\n<blockquote>\n<p>file-backed-mmap cannot be used in Rust without introducing memory unsafety</p>\n</blockquote>",
        "id": 161853761,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1553689567
    },
    {
        "content": "<p>so you are worried about an attacker?</p>",
        "id": 161853765,
        "sender_full_name": "mw",
        "timestamp": 1553689571
    },
    {
        "content": "<p>Chiming in from the back row to say that you can side step these concerns by creating a <code>&amp;[Cell&lt;u8&gt;]</code> and never having a reference to a non-cell type in the first place</p>",
        "id": 161853796,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1553689603
    },
    {
        "content": "<p>if no other process access the file, then no assumptions that the compiler made are violated</p>",
        "id": 161853802,
        "sender_full_name": "mw",
        "timestamp": 1553689609
    },
    {
        "content": "<p>There's two schools of thought about that: does UB occur only when it happens, or when it <em>could</em> happen? I believe Rust falls into the latter case.</p>",
        "id": 161853831,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1553689645
    },
    {
        "content": "<p>I thought the problem with UB is that the compiler does invalid optimizations</p>",
        "id": 161853915,
        "sender_full_name": "mw",
        "timestamp": 1553689697
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> ah, that's a missing piece I hadn't considered. I wonder how painful it is to read/write to such a thing</p>",
        "id": 161853934,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1553689716
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span>  for example</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{:p}, {:p}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Miri reports this as causing undefined behavior. We never actually mutate anything; the sheer existence of the aliased pointers is enough.</p>",
        "id": 161854136,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1553689903
    },
    {
        "content": "<p>I don't see how this relates to memory mapped files that are accessed exclusively by one process</p>",
        "id": 161854479,
        "sender_full_name": "mw",
        "timestamp": 1553690200
    },
    {
        "content": "<p>The caveat \"exclusively accessed by one process\" is a big one because that's not something you can do in that process to ensure others won't access the file, and unlike e.g. unsafe code in the same process duplicating mutable references, there is no convention or assignment of responsibility that would prevent it. Perfectly well-behaved processes and well-intentioned users can trample all over your mmap'd file. IMO a program that \"only has UB if other processes access the file\" is just as buggy as a program that \"only has UB if the input file contains &lt;perfectly plausible errors&gt;\", e.g. a malformed gzip archive that leads to a buffer overflow in a decompression program.</p>",
        "id": 161855099,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1553690715
    },
    {
        "content": "<p>That is a wonderfully better way of expressing my concerns, thank you :-)</p>",
        "id": 161855180,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1553690774
    },
    {
        "content": "<p>Practically, I don't know if anything bad will happen <em>now</em>. What's most insidious is when compiler changes in the future break seemingly \"working\" code.</p>",
        "id": 161855250,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1553690868
    },
    {
        "content": "<p>I'm still not convinced this applies here :)</p>",
        "id": 161855549,
        "sender_full_name": "mw",
        "timestamp": 1553691069
    },
    {
        "content": "<p>I'm not trying to convince you that mutable shared memory maps are fine in general</p>",
        "id": 161855570,
        "sender_full_name": "mw",
        "timestamp": 1553691093
    },
    {
        "content": "<p>I totally see what your concern is</p>",
        "id": 161855584,
        "sender_full_name": "mw",
        "timestamp": 1553691111
    },
    {
        "content": "<p>I just don't see a real risk in this specific case</p>",
        "id": 161855676,
        "sender_full_name": "mw",
        "timestamp": 1553691170
    },
    {
        "content": "<p>I mean by that same argument, we would not be allowed to read crate metadata from disk because someone could have changed the length of an array in the binary format</p>",
        "id": 161855894,
        "sender_full_name": "mw",
        "timestamp": 1553691306
    },
    {
        "content": "<p>this is a form of FFI where there is always some risk that some code outside of Rust has changed something unexpectedly</p>",
        "id": 161855971,
        "sender_full_name": "mw",
        "timestamp": 1553691362
    },
    {
        "content": "<blockquote>\n<p>I mean by that same argument, we would not be allowed to read crate metadata from disk because someone could have changed the length of an array in the binary format</p>\n</blockquote>\n<p>I'm not sure this is the same argument. In that case, with an untrusted input like the file, we would perform some check in our process that the array length is correct. If it wasn't, we don't allow access to that data (panic, return a <code>Result</code>, etc.). </p>\n<p>If we <em>didn't</em> perform that check, but assumed that the array length was accurate and assumed that data at some offset was of a specific form, then that might lead to memory unsafety and should indeed be disallowed.</p>",
        "id": 161856434,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1553691720
    },
    {
        "content": "<p>With file-backed-mmap, there's no possible check that our program can make to know that the underlying data hasn't changed.</p>",
        "id": 161856813,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1553691966
    },
    {
        "content": "<p>but the data is in the file is not read by the rustc process, it is only written</p>",
        "id": 161856989,
        "sender_full_name": "mw",
        "timestamp": 1553692088
    },
    {
        "content": "<p>I personally don't care super strongly about this situation :) But the one thing that actually gives me a stomach ache when mmap'd files come up, is: what precedent does this set? Even if in this situation the risk is tiny and acceptable for big performance wins, I worry that there is insufficient caution about the pitfalls of mmap in the community. For example, rustc's clearly not intended to be run in a hostile execution environment, and that's fine for rustc, but a different project may have different needs and if its authors are unaware of the potential UB of mmap, they may handle it insufficiently.</p>",
        "id": 161857004,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1553692105
    },
    {
        "content": "<p>that's something that should be documented in the <code>memmap</code> crate, I think</p>",
        "id": 161857176,
        "sender_full_name": "mw",
        "timestamp": 1553692255
    },
    {
        "content": "<p>I mean, I don't mind adding a big warning comment to the measureme crate too, should it turn out that mmap files are actually faster</p>",
        "id": 161857227,
        "sender_full_name": "mw",
        "timestamp": 1553692303
    },
    {
        "content": "<p>but memory mapped files are a fundamental OS facility, they should be usable in Rust</p>",
        "id": 161857319,
        "sender_full_name": "mw",
        "timestamp": 1553692351
    },
    {
        "content": "<blockquote>\n<p>that's something that should be documented in the <code>memmap</code> crate, I think</p>\n</blockquote>\n<p>I agree, which is why I started this thread with \"(This is one of my big problems with the mmap crate, which doesn't clearly explain this unsafety in the docs the last time I checked)\"</p>",
        "id": 161857726,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1553692659
    },
    {
        "content": "<p>Although I think that the crate itself is flawed, as it gives you back a type which derefs to <code>[u8]</code> so you can't even use a <code>Cell</code>, it's already too late.</p>",
        "id": 161857885,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1553692770
    },
    {
        "content": "<blockquote>\n<p>I mean, I don't mind adding a big warning comment to the measureme crate too, should it turn out that mmap files are actually faster</p>\n</blockquote>\n<p>The problem is that the warning is unactionable. It would be like \"if you use mmap, then your program has undefined behavior, but it's faster!\". What do I do with that as a user?</p>",
        "id": 161857975,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1553692835
    },
    {
        "content": "<p>the warning would be \"we carefully checked that this specific use of memory mapped files does not introduce undefined behaviour. that does not mean that memory mapped files are easy to use from Rust\"</p>",
        "id": 161858123,
        "sender_full_name": "mw",
        "timestamp": 1553692939
    },
    {
        "content": "<p>that's rather different, I'd say</p>",
        "id": 161858145,
        "sender_full_name": "mw",
        "timestamp": 1553692954
    },
    {
        "content": "<p>I'm afraid that I'm saying the same thing over and over, so I apologize. I can see that I'm not going to be able to convince you, so perhaps I'm wrong. My last attempt:</p>\n<blockquote>\n<p>this specific use of memory mapped files does not introduce undefined behaviour</p>\n</blockquote>\n<p>There is no way we can make such a statement. The running program is completely unable to make this guarantee.</p>",
        "id": 161858748,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1553693418
    },
    {
        "content": "<p>even if it nevers casts a pointer into the memory in question to a <code>&amp;</code> or <code>&amp;mut</code>? i.e. if it only ever uses raw pointers to that memory?</p>",
        "id": 161859087,
        "sender_full_name": "mw",
        "timestamp": 1553693673
    },
    {
        "content": "<p>On the one hand, I agree: using <code>mmap</code> does seem to create the potential to violate Rust's semantics and introduce UB. On the other hand, if the scenario we're worried about is another process causing the violation to happen, I'm not sure why this is an issue and <code>ptrace</code> isn't. Ultimately we're at the mercy of the OS not to do something which violates the language semantics.</p>",
        "id": 161859095,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1553693682
    },
    {
        "content": "<p>i.e. if I only ever use raw pointers, there should not be any UB, right? same as with <code>Cell</code></p>",
        "id": 161859344,
        "sender_full_name": "mw",
        "timestamp": 1553693864
    },
    {
        "content": "<blockquote>\n<p>That's my point though; you literally cannot guarantee that. While it's writing, an automated program can see it and start writing to it as well</p>\n</blockquote>\n<p>You can lock the file.</p>",
        "id": 161859899,
        "sender_full_name": "nagisa",
        "timestamp": 1553694204
    },
    {
        "content": "<p>The API you’re looking for is <code>flock</code> that could maintain the invariant of 1 writer 0 readers or at least 1 writer many readers.</p>",
        "id": 161860131,
        "sender_full_name": "nagisa",
        "timestamp": 1553694322
    },
    {
        "content": "<p>then the next complaint will be that these locks are only advisory and can be ignored at will :P</p>",
        "id": 161860268,
        "sender_full_name": "mw",
        "timestamp": 1553694405
    },
    {
        "content": "<p>… Sure.</p>",
        "id": 161860845,
        "sender_full_name": "nagisa",
        "timestamp": 1553694799
    },
    {
        "content": "<p>As I mentioned in some issue before, you could use <code>pwrite</code> and <code>pread</code> to write and read at arbitrary offsets in a file.</p>",
        "id": 161862305,
        "sender_full_name": "nagisa",
        "timestamp": 1553695737
    },
    {
        "content": "<p>You would have to get rid of conveniences that mmap affords you, but functionally there should be little difference.</p>",
        "id": 161862343,
        "sender_full_name": "nagisa",
        "timestamp": 1553695760
    },
    {
        "content": "<p>these sound expensive, being system calls?</p>",
        "id": 161863616,
        "sender_full_name": "mw",
        "timestamp": 1553696578
    }
]