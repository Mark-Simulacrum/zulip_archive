[
    {
        "content": "<p>I'm doing a bit of digging to see if/how to speed up compilation of <a href=\"https://github.com/influxdata/influxdb_iox/\">influxdb_iox</a>, so I was hoping to ask some questions to better understand the self-profiler results!</p>\n<p>First up, why does this appear as if many threads are being used but they are all still sequential?</p>\n<p><a href=\"/user_uploads/4715/aM_D1IcNPEwOD1jwZfuJTzvv/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/aM_D1IcNPEwOD1jwZfuJTzvv/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/aM_D1IcNPEwOD1jwZfuJTzvv/image.png\"></a></div>",
        "id": 264473860,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1639154690
    },
    {
        "content": "<p>It reminds me of when I first did <code>iterator.map(|_| thread::spawn(...).join())</code> instead of letting each thread run in parallel <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 264473957,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1639154743
    },
    {
        "content": "<p>is that compilation running in parallel with other compilations?</p>",
        "id": 264474200,
        "sender_full_name": "simulacrum",
        "timestamp": 1639154862
    },
    {
        "content": "<p>(or -j1 etc)</p>",
        "id": 264474235,
        "sender_full_name": "simulacrum",
        "timestamp": 1639154875
    },
    {
        "content": "<p>We record the thread id using <code>std::thread::Thread::id()</code> which doesn't map to the OS thread id, it's just an integer that gets incremented every time you call <code>Thread::new()</code>. I believe the codegen backend doesn't keep a thread pool of worker threads but instead just creates a new <code>Thread</code> when it has work to do and it isn't yet at the max limit of job server tokens. (Having looked at this a while ago, my memory is cloudy on the exact specifics here)</p>",
        "id": 264474327,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1639154914
    },
    {
        "content": "<p>yeah, that's my recollection as well</p>",
        "id": 264474400,
        "sender_full_name": "simulacrum",
        "timestamp": 1639154952
    },
    {
        "content": "<p>but we expect actual parallelism if there's available jobserver tokens</p>",
        "id": 264474455,
        "sender_full_name": "simulacrum",
        "timestamp": 1639154981
    },
    {
        "content": "<p>It is a full workspace build, so I'd expect that there are other crates build built contemporaneously — this crate is rather in the middle of the graph.</p>",
        "id": 264474691,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1639155082
    },
    {
        "content": "<p>So maybe other crates have used up the tokens and at this point in time there's only one thread-at-a-time available?</p>",
        "id": 264474883,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1639155169
    },
    {
        "content": "<p>ah. then it seems likely that this rustc just didn't get allocated more than the one jobserver token it implicitly has</p>",
        "id": 264474895,
        "sender_full_name": "simulacrum",
        "timestamp": 1639155175
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/187831-t-compiler.2Fwg-self-profile/topic/self-profiling.20influxdb_iox/near/264474895\">said</a>:</p>\n<blockquote>\n<p>this rustc just didn't get allocated</p>\n</blockquote>\n<p>Hmm, this phrasing suggests that allocation only happens once, at process start — is that how it works?</p>",
        "id": 264475084,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1639155262
    },
    {
        "content": "<p>no</p>",
        "id": 264475113,
        "sender_full_name": "simulacrum",
        "timestamp": 1639155281
    },
    {
        "content": "<p>you can read about it at <a href=\"https://make.mad-scientist.net/papers/jobserver-implementation/\">https://make.mad-scientist.net/papers/jobserver-implementation/</a></p>",
        "id": 264475146,
        "sender_full_name": "simulacrum",
        "timestamp": 1639155300
    },
    {
        "content": "<p>Yeah, I did a search in parallel <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 264475174,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1639155317
    },
    {
        "content": "<p>but it's basically a shared pipe amongst all rustc's and cargo (and makes, if invoked by build scripts, etc)</p>",
        "id": 264475175,
        "sender_full_name": "simulacrum",
        "timestamp": 1639155319
    },
    {
        "content": "<p>so it likely asked for a few tokens, blocked for a bit, got one token, ran all the code it needed to, returned the token, and then got back more-or-less the same token again.</p>",
        "id": 264475418,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1639155430
    },
    {
        "content": "<p>well, \"ask\" is just a blocking read() call</p>",
        "id": 264475590,
        "sender_full_name": "simulacrum",
        "timestamp": 1639155496
    },
    {
        "content": "<p>yeah</p>",
        "id": 264475622,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1639155512
    },
    {
        "content": "<p>but yes, I suspect it's continuously getting and losing a 2nd token based on the first thread having activity throughout</p>",
        "id": 264475677,
        "sender_full_name": "simulacrum",
        "timestamp": 1639155542
    },
    {
        "content": "<p>(we never drop to zero tokens)</p>",
        "id": 264475704,
        "sender_full_name": "simulacrum",
        "timestamp": 1639155552
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> <a href=\"#narrow/stream/187831-t-compiler.2Fwg-self-profile/topic/self-profiling.20influxdb_iox/near/264474327\">said</a>:</p>\n<blockquote>\n<p>the codegen backend doesn't keep a thread pool</p>\n</blockquote>\n<p>I wonder whether there would be any net benefit to doing so...</p>",
        "id": 264476336,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1639155787
    },
    {
        "content": "<p>Would make that graph take up less vertical space, I suppose <span aria-label=\"smirk\" class=\"emoji emoji-1f60f\" role=\"img\" title=\"smirk\">:smirk:</span></p>",
        "id": 264476417,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1639155822
    },
    {
        "content": "<p>iirc, we have some thread-collapsing to avoid the vertical space</p>",
        "id": 264476845,
        "sender_full_name": "simulacrum",
        "timestamp": 1639156003
    },
    {
        "content": "<p>At which level would that apply? If it's a visual level, I'm using <code>crox</code>.</p>",
        "id": 264477229,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1639156194
    },
    {
        "content": "<p>There might be a cli option? I forget the details</p>",
        "id": 264479113,
        "sender_full_name": "simulacrum",
        "timestamp": 1639157042
    },
    {
        "content": "<p>It's a cli option. One sec.</p>",
        "id": 264480611,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1639157694
    },
    {
        "content": "<p><code>--collapse-threads</code></p>",
        "id": 264480675,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1639157729
    },
    {
        "content": "<p>This is mostly just a presentation option, the underlying data doesn't have enough info to reconstruct a completely accurate representation of which queries/activities ran on which physical cores.</p>",
        "id": 264480816,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1639157796
    },
    {
        "content": "<p>We are definitely running into <a href=\"https://github.com/rust-lang/rust/issues/87012\">https://github.com/rust-lang/rust/issues/87012</a></p>",
        "id": 264492350,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1639162589
    },
    {
        "content": "<p>Is there a way I can educate myself on what the items in the output <em>mean</em>? Some names are sensible (e.g. <code>macro_expand_crate</code>), but further details would be nice (e.g. is this declarative and/or procedural macros?). Other names are not as useful (e.g. <code>misc_checking_{1,2,3}</code> <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span> )</p>",
        "id": 264493424,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1639163038
    },
    {
        "content": "<p>Unfortunately there isn't really a reference or anything for what the items mean as they're very much compiler implementation details. The only thing I can suggest is grepping the rust-lang/rust source.</p>",
        "id": 264498024,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1639165307
    },
    {
        "content": "<p>misc_checking for example <a href=\"https://github.com/rust-lang/rust/blob/e25077704164071a1ef87cdc90fe7dd1872ba3fa/compiler/rustc_interface/src/passes.rs#L895\">https://github.com/rust-lang/rust/blob/e25077704164071a1ef87cdc90fe7dd1872ba3fa/compiler/rustc_interface/src/passes.rs#L895</a></p>",
        "id": 264498103,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1639165346
    },
    {
        "content": "<p>I was afraid of that :-)</p>",
        "id": 264498990,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1639165825
    }
]