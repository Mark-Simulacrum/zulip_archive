[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> So, if I want to store the self-profile results in what needs to be long-term backwards compatible -- should I store the JSON results of <code>summarize summarize --json</code>?</p>",
        "id": 176155800,
        "sender_full_name": "simulacrum",
        "timestamp": 1568940984
    },
    {
        "content": "<p>or is that a pretty unstable format, and I should load that up and try and parse it down to \"what perf wants\"</p>",
        "id": 176155815,
        "sender_full_name": "simulacrum",
        "timestamp": 1568941011
    },
    {
        "content": "<p>or is there some non-summary method of getting events out? Should we be storing the 'raw' event files?</p>",
        "id": 176155841,
        "sender_full_name": "simulacrum",
        "timestamp": 1568941072
    },
    {
        "content": "<p>I'll probably come back to this tomorrow or so</p>",
        "id": 176155895,
        "sender_full_name": "simulacrum",
        "timestamp": 1568941095
    },
    {
        "content": "<p>I don't think we should store the raw events files because they're very large. The output of <code>summarize summarize --json</code> should be pretty stable so I think we can store it as is.</p>",
        "id": 176181225,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1568975589
    },
    {
        "content": "<p>Okay, sounds good. Should be fairly easy to implement that.</p>",
        "id": 176182223,
        "sender_full_name": "simulacrum",
        "timestamp": 1568976785
    },
    {
        "content": "<p>Okay, I have an initial draft (no diff, just view) of the self-profile data live. Any recent (currently, I think last two) commits should have self-profile data recorded. If you go to the comparison page and pop open one of the drop downs, any of the links in the second column should work -- e.g. <a href=\"https://perf.rust-lang.org/detailed-query.html?commit=97e58c0d32bcb8730f8246d25f3d2fa8092b450a&amp;benchmark=inflate-check&amp;run_name=baseline%20incremental\" target=\"_blank\" title=\"https://perf.rust-lang.org/detailed-query.html?commit=97e58c0d32bcb8730f8246d25f3d2fa8092b450a&amp;benchmark=inflate-check&amp;run_name=baseline%20incremental\">https://perf.rust-lang.org/detailed-query.html?commit=97e58c0d32bcb8730f8246d25f3d2fa8092b450a&amp;benchmark=inflate-check&amp;run_name=baseline%20incremental</a>. Two problems I noted: we always have 0s in the incremental column and seem to get no reuse (i.e., cache hits are 0). I've not yet investigated if this is perf doing something wrong and not running in incremental mode (unlikely, given lower instruction counts) or self-profile data being incorrectly reported.</p>\n<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> -- I've ticked the boxes in the tracking issue per the above. Tomorrow's agenda is to try and rework how perf stores and publishes data as right now we've ~20x increased each commit's data with the self-profile info, which is unacceptable (we've previously been getting closer to this, but only just now hit this point). I don't anticipate this being a concern for self-profile WG, though, as we can take the hit for now. I'm interested in hearing feedback on the table (it's sortable on every column!) and if we want to spend time implementing a diff view. I'm not sure how a diff view should look, either.</p>",
        "id": 176241816,
        "sender_full_name": "simulacrum",
        "timestamp": 1569027048
    },
    {
        "content": "<p>(the above will be live in 15 minutes or so once I finish compiling)</p>",
        "id": 176241818,
        "sender_full_name": "simulacrum",
        "timestamp": 1569027061
    },
    {
        "content": "<p>I suspect the lack of incremental might be a perf collection bug but I'll investigate tomorrow probably</p>",
        "id": 176241895,
        "sender_full_name": "simulacrum",
        "timestamp": 1569027202
    },
    {
        "content": "<p>Aha, cache hits are not recorded by default</p>",
        "id": 176262129,
        "sender_full_name": "simulacrum",
        "timestamp": 1569067535
    },
    {
        "content": "<p>I've now passed -Zself-profile-events=all as a (possibly temporary) stopgap</p>",
        "id": 176262130,
        "sender_full_name": "simulacrum",
        "timestamp": 1569067548
    },
    {
        "content": "<p>Yeah, we found recording cache hits incurs a big performance hit</p>",
        "id": 176264966,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1569072636
    },
    {
        "content": "<p>hm, interesting</p>",
        "id": 176267965,
        "sender_full_name": "simulacrum",
        "timestamp": 1569077608
    },
    {
        "content": "<p>I would not expect that</p>",
        "id": 176267967,
        "sender_full_name": "simulacrum",
        "timestamp": 1569077610
    },
    {
        "content": "<p>and based on the perf graphs it appears to be at most a few percent -- at least for perf, I think acceptable</p>",
        "id": 176268016,
        "sender_full_name": "simulacrum",
        "timestamp": 1569077670
    },
    {
        "content": "<p>hm, so it looks like I'm also hitting some ICEs when enabling all events -- e.g. </p>\n<div class=\"codehilite\"><pre><span></span>thread &#39;rustc&#39; panicked at &#39;assertion failed: pos.checked_add(num_bytes).unwrap() &lt;= self.mapped_file.len()&#39;, /cargo/registry/src/gi\nthub.com-1ecc6299db9ec823/measureme-0.3.0/src/mmap_serialization_sink.rs:38:9\n</pre></div>",
        "id": 176268769,
        "sender_full_name": "simulacrum",
        "timestamp": 1569079026
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> is that because we're only allocating 1 GB of output? Seems like we should allocate more to avoid this</p>",
        "id": 176268792,
        "sender_full_name": "simulacrum",
        "timestamp": 1569079078
    },
    {
        "content": "<p>or come up with some sort of resizing / splitting scheme</p>",
        "id": 176268831,
        "sender_full_name": "simulacrum",
        "timestamp": 1569079086
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> is that because we're only allocating 1 GB of output? Seems like we should allocate more to avoid this</p>\n</blockquote>\n<p>Yeah, that seems likely to me. IIRC, there isn't a huge downside to allocating more space because we shrink the file to the correct size at the end after we've recorded all of the data.</p>",
        "id": 176312899,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1569162794
    },
    {
        "content": "<p>Ok, I'm not remembering correctly. For *nix, we <code>mmap()</code> an anonymous file and then create a real file at the end and dump everything to it. So yeah, increasing it is probably not a big deal.</p>",
        "id": 176312975,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1569162926
    },
    {
        "content": "<p>Since it's lazily allocated, it shouldn't actually cost us anything unless we end up using all of the space.</p>",
        "id": 176313020,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1569162967
    },
    {
        "content": "<p>Awesome work, <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span>!</p>",
        "id": 176347599,
        "sender_full_name": "mw",
        "timestamp": 1569225734
    },
    {
        "content": "<p>Wow, more than 1 GB of events <code>:)</code></p>",
        "id": 176347620,
        "sender_full_name": "mw",
        "timestamp": 1569225752
    },
    {
        "content": "<p>Increasing that shouldn't be a problem, as <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> stated.</p>",
        "id": 176347663,
        "sender_full_name": "mw",
        "timestamp": 1569225800
    },
    {
        "content": "<p>However, we don't want to record all events, since the query cache hits don't contribute anything to the summarized data but increase the overhead by something like 400%.</p>",
        "id": 176347741,
        "sender_full_name": "mw",
        "timestamp": 1569225879
    },
    {
        "content": "<p>I think we should change the default event filter instead</p>",
        "id": 176347844,
        "sender_full_name": "mw",
        "timestamp": 1569225979
    },
    {
        "content": "<p>this would be part of my event-kind review (which I hope to get to later this week)</p>",
        "id": 176347884,
        "sender_full_name": "mw",
        "timestamp": 1569226032
    },
    {
        "content": "<p>until then it's fine if the incremental cache hits only shows zeros</p>",
        "id": 176347986,
        "sender_full_name": "mw",
        "timestamp": 1569226113
    },
    {
        "content": "<blockquote>\n<p>Tomorrow's agenda is to try and rework how perf stores and publishes data as right now we've ~20x increased each commit's data with the self-profile info, which is unacceptable</p>\n</blockquote>\n<p>Can you elaborate on that? What is this additional data?</p>",
        "id": 176348110,
        "sender_full_name": "mw",
        "timestamp": 1569226238
    },
    {
        "content": "<p>Correction: Query cache hits <em>do</em> contribute to the summarized data. I wonder if it is worth the overhead though.</p>",
        "id": 176348443,
        "sender_full_name": "mw",
        "timestamp": 1569226587
    },
    {
        "content": "<p>And the possible skew we get from recording them: a query cache hit is a very cheap operation, so the recording overhead will be a much larger percentage of it's actual execution time then for other kinds of events.</p>",
        "id": 176348497,
        "sender_full_name": "mw",
        "timestamp": 1569226656
    },
    {
        "content": "<p>regarding the details view:</p>\n<ul>\n<li>awesome <code>:)</code></li>\n<li>great that one can sort by column</li>\n<li>I think it would be good to have a column for percentage of total compile time</li>\n<li>would it make sense to automatically omit columns that are all zeros? Are those columns present in the JSON output?</li>\n<li>in the future, once we have it, it would be cool to also show some metadata about the benchmark, like total execution time (need to implement <a href=\"https://github.com/rust-lang/measureme/issues/15\" target=\"_blank\" title=\"https://github.com/rust-lang/measureme/issues/15\">https://github.com/rust-lang/measureme/issues/15</a> for that)</li>\n</ul>",
        "id": 176349846,
        "sender_full_name": "mw",
        "timestamp": 1569228070
    },
    {
        "content": "<p>regarding a comparison view:</p>\n<ul>\n<li>I think we need it. It might be the most important tool here because it should enable pinpointing regressions pretty quickly.</li>\n<li>next to each column there could another (narrow) one, just showing <code>+ x%</code>, color coded like in the regular comparison view</li>\n<li>the alt-text for the percentage could be the absolute number from the baseline commit. It might be interesting sometimes but usually knowing just the percentage of change is enough information.</li>\n</ul>",
        "id": 176350318,
        "sender_full_name": "mw",
        "timestamp": 1569228514
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>Tomorrow's agenda is to try and rework how perf stores and publishes data as right now we've ~20x increased each commit's data with the self-profile info, which is unacceptable</p>\n</blockquote>\n<p>Can you elaborate on that? What is this additional data?</p>\n</blockquote>\n<p>The self profile data itself -- basically all the string \"labels\" for the fields and such - since we're storing it as JSON</p>",
        "id": 176360451,
        "sender_full_name": "simulacrum",
        "timestamp": 1569238869
    },
    {
        "content": "<p>I didn't get a chance to investigate too much though (got distracted with other things) -- I don't think it's a problem for the time being though as I said</p>",
        "id": 176360469,
        "sender_full_name": "simulacrum",
        "timestamp": 1569238894
    },
    {
        "content": "<blockquote>\n<p>And the possible skew we get from recording them: a query cache hit is a very cheap operation, so the recording overhead will be a much larger percentage of it's actual execution time then for other kinds of events.</p>\n</blockquote>\n<p>Sure -- I also think that the current query hits aren't really too useful since there's not much we can do about them (it's also unclear how many are due to \"poor incremental\" or what)</p>",
        "id": 176360525,
        "sender_full_name": "simulacrum",
        "timestamp": 1569238942
    },
    {
        "content": "<p>So I'll switch back to the default set of events I guess -- and probably drop the now-always-0 columns from the display</p>",
        "id": 176360532,
        "sender_full_name": "simulacrum",
        "timestamp": 1569238963
    },
    {
        "content": "<blockquote>\n<p>regarding a comparison view:</p>\n<ul>\n<li>I think we need it. It might be the most important tool here because it should enable pinpointing regressions pretty quickly.</li>\n<li>next to each column there could another (narrow) one, just showing <code>+ x%</code>, color coded like in the regular comparison view</li>\n<li>the alt-text for the percentage could be the absolute number from the baseline commit. It might be interesting sometimes but usually knowing just the percentage of change is enough information.</li>\n</ul>\n</blockquote>\n<p>Would it be sufficient for now to just always compare with the same \"benchmark + run\" pair (basically, not support commit A, benchmark B, run C with commit A1, benchmark D, run E)? That should be relatively easy (\"just another column\")</p>",
        "id": 176360583,
        "sender_full_name": "simulacrum",
        "timestamp": 1569239033
    },
    {
        "content": "<blockquote>\n<p>Correction: Query cache hits <em>do</em> contribute to the summarized data. I wonder if it is worth the overhead though.</p>\n</blockquote>\n<p>Hm, so actually -- if we're collecting a total invocation count, and cache misses, we get cache hits for free, right?</p>",
        "id": 176362413,
        "sender_full_name": "simulacrum",
        "timestamp": 1569240877
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span> In any case, though, displaying them is somewhat pointless -- they're equivalent to total count - misses or so</p>",
        "id": 176362442,
        "sender_full_name": "simulacrum",
        "timestamp": 1569240909
    },
    {
        "content": "<p>which I _think_ can be reached by sorting? not quite sure</p>",
        "id": 176362457,
        "sender_full_name": "simulacrum",
        "timestamp": 1569240926
    },
    {
        "content": "<p>I'll remove the hit columns for now though</p>",
        "id": 176362463,
        "sender_full_name": "simulacrum",
        "timestamp": 1569240939
    },
    {
        "content": "<blockquote>\n<p>Would it be sufficient for now to just always compare with the same \"benchmark + run\" pair (basically, not support commit A, benchmark B, run C with commit A1, benchmark D, run E)? That should be relatively easy (\"just another column\")</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span>, I don't think I understand what you mean here</p>",
        "id": 176374654,
        "sender_full_name": "mw",
        "timestamp": 1569249696
    },
    {
        "content": "<p>The inputs to the query compare page can just be commit (A, B) + the run identifier (benchmark name, run name)</p>",
        "id": 176374730,
        "sender_full_name": "simulacrum",
        "timestamp": 1569249730
    },
    {
        "content": "<p>Right?</p>",
        "id": 176374738,
        "sender_full_name": "simulacrum",
        "timestamp": 1569249736
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span> anyway, here's what I have so far: <a href=\"https://perf.rust-lang.org/detailed-query.html?commit=4ff32c07da9d97e6dc315a4a5c9ffbb797cb27bb&amp;base_commit=ef906d0e3c50ba0833c5a135d705ab4f6bd93aea&amp;benchmark=syn-opt&amp;run_name=clean\" target=\"_blank\" title=\"https://perf.rust-lang.org/detailed-query.html?commit=4ff32c07da9d97e6dc315a4a5c9ffbb797cb27bb&amp;base_commit=ef906d0e3c50ba0833c5a135d705ab4f6bd93aea&amp;benchmark=syn-opt&amp;run_name=clean\">https://perf.rust-lang.org/detailed-query.html?commit=4ff32c07da9d97e6dc315a4a5c9ffbb797cb27bb&amp;base_commit=ef906d0e3c50ba0833c5a135d705ab4f6bd93aea&amp;benchmark=syn-opt&amp;run_name=clean</a></p>",
        "id": 176375000,
        "sender_full_name": "simulacrum",
        "timestamp": 1569249925
    },
    {
        "content": "<p>which is what you get when clicking the RHS of any compare page, LHS leads to a page that's basically what we had before (i.e., no deltas)</p>",
        "id": 176375179,
        "sender_full_name": "simulacrum",
        "timestamp": 1569250026
    },
    {
        "content": "<p>Sorting for the delta columns and color coding isn't implemented since both are based on percentages and percentages are a bit hard</p>",
        "id": 176375207,
        "sender_full_name": "simulacrum",
        "timestamp": 1569250048
    },
    {
        "content": "<p>yes, this looks good. I think for now, it's fine that one is not able to compare e.g. <code>clean</code> vs <code>patched incremental</code></p>",
        "id": 176375297,
        "sender_full_name": "mw",
        "timestamp": 1569250088
    },
    {
        "content": "<p>yeah, that seemed ... a bit nonsensical to me, anyway -- like, they'd ~always have different queries and such</p>",
        "id": 176375350,
        "sender_full_name": "simulacrum",
        "timestamp": 1569250131
    },
    {
        "content": "<p>it might make sense in the future (not sure) but for spotting regressions you'd always want to compare the same kind of run</p>",
        "id": 176375351,
        "sender_full_name": "mw",
        "timestamp": 1569250132
    },
    {
        "content": "<p>in theory though you'd not use this to spot the regression, it'd be more so to say \"what actually regressed\", right?</p>",
        "id": 176375399,
        "sender_full_name": "simulacrum",
        "timestamp": 1569250166
    },
    {
        "content": "<p>I think it would be good to show the deltas as percentages</p>",
        "id": 176375417,
        "sender_full_name": "mw",
        "timestamp": 1569250177
    },
    {
        "content": "<p>i.e., the regression would be spotted on the compare or the graph page and then you click in for more info</p>",
        "id": 176375422,
        "sender_full_name": "simulacrum",
        "timestamp": 1569250182
    },
    {
        "content": "<p>yes, \"pinpoint the regression\" would be more accurate</p>",
        "id": 176375448,
        "sender_full_name": "mw",
        "timestamp": 1569250199
    },
    {
        "content": "<p>One concern with percentages is that I don't quite know how to show the times</p>",
        "id": 176375452,
        "sender_full_name": "simulacrum",
        "timestamp": 1569250202
    },
    {
        "content": "<p>right now the \"raw data\" is seconds + nanoseconds which we're converting to the <a href=\"http://x.xxx\" target=\"_blank\" title=\"http://x.xxx\">x.xxx</a> format; I show the \"raw\" data in the tooltip</p>",
        "id": 176375530,
        "sender_full_name": "simulacrum",
        "timestamp": 1569250237
    },
    {
        "content": "<p>with the percents idea I'm not quite sure how to show the \"raw\" data then</p>",
        "id": 176375545,
        "sender_full_name": "simulacrum",
        "timestamp": 1569250247
    },
    {
        "content": "<p>I guess I could just show both somehow?</p>",
        "id": 176375563,
        "sender_full_name": "simulacrum",
        "timestamp": 1569250259
    },
    {
        "content": "<p>I would just show <code>x.xxx</code>, I think</p>",
        "id": 176375607,
        "sender_full_name": "mw",
        "timestamp": 1569250301
    },
    {
        "content": "<p>the measurements are not that accurate anyway, I guess?</p>",
        "id": 176375642,
        "sender_full_name": "mw",
        "timestamp": 1569250322
    },
    {
        "content": "<p>probably? no idea :) higher variance, at least, I presume</p>",
        "id": 176375753,
        "sender_full_name": "simulacrum",
        "timestamp": 1569250384
    },
    {
        "content": "<p>So, I would do any calculations with the raw data, but render things in <code>x.xxx</code> format</p>",
        "id": 176375918,
        "sender_full_name": "mw",
        "timestamp": 1569250473
    },
    {
        "content": "<p>makes sense -- shouldn't be too hard</p>",
        "id": 176375998,
        "sender_full_name": "simulacrum",
        "timestamp": 1569250546
    },
    {
        "content": "<p>I'm excited by how far along this already is, btw <code>:D</code></p>",
        "id": 176376014,
        "sender_full_name": "mw",
        "timestamp": 1569250557
    },
    {
        "content": "<p>very nice!</p>",
        "id": 176376017,
        "sender_full_name": "mw",
        "timestamp": 1569250562
    },
    {
        "content": "<p>regarding the links that lead to the details view: I think the LHS and the RHS show both lead to a non-comparison page</p>",
        "id": 176376115,
        "sender_full_name": "mw",
        "timestamp": 1569250615
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span> do we care about sorting by delta? currently we calculate them frontend so a bit harder to implement</p>",
        "id": 176376134,
        "sender_full_name": "simulacrum",
        "timestamp": 1569250628
    },
    {
        "content": "<p>I would expect the LHS to give the details view of the baseline commit</p>",
        "id": 176376135,
        "sender_full_name": "mw",
        "timestamp": 1569250629
    },
    {
        "content": "<p>and the RHS to the details view of the new commit</p>",
        "id": 176376165,
        "sender_full_name": "mw",
        "timestamp": 1569250659
    },
    {
        "content": "<p>It's \"hard\" to recover the baseline commit then -- right now the RHS will have a link to the details view for just the RHS (and just the LHS)</p>",
        "id": 176376227,
        "sender_full_name": "simulacrum",
        "timestamp": 1569250684
    },
    {
        "content": "<p>and then there could be a <code>compare details</code> button to the right, or the change percentage could be the link</p>",
        "id": 176376265,
        "sender_full_name": "mw",
        "timestamp": 1569250701
    },
    {
        "content": "<p>Yeah, we could make the subtraction the link to the diff, I like that</p>",
        "id": 176376555,
        "sender_full_name": "simulacrum",
        "timestamp": 1569250874
    },
    {
        "content": "<p>regarding sorting by delta: It might be useful. but if it's significantly harder to have that then we don't need it initially</p>",
        "id": 176376818,
        "sender_full_name": "mw",
        "timestamp": 1569251013
    },
    {
        "content": "<p>color coding (or otherwise highlighting) the bigger changes becomes more important then</p>",
        "id": 176376891,
        "sender_full_name": "mw",
        "timestamp": 1569251044
    },
    {
        "content": "<p>I think it would also help readability a bit if the was styled a little more.</p>",
        "id": 176377353,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1569251347
    },
    {
        "content": "<p>For example</p>",
        "id": 176377358,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1569251353
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/TmQ9rWOBVItv6mUqMhY0WqA2/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/TmQ9rWOBVItv6mUqMhY0WqA2/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/4715/TmQ9rWOBVItv6mUqMhY0WqA2/pasted_image.png\"></a></div>",
        "id": 176377363,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1569251358
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span> okay, deltas are now percents and I made the 3 compare columns be links to 'just left' 'just right' and 'diff'</p>",
        "id": 176377365,
        "sender_full_name": "simulacrum",
        "timestamp": 1569251359
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> I'm no great shakes at design -- presuming you did that by editing CSS though I'm happy to take a PR</p>",
        "id": 176377414,
        "sender_full_name": "simulacrum",
        "timestamp": 1569251401
    },
    {
        "content": "<p>(or a pasted diff :)</p>",
        "id": 176377462,
        "sender_full_name": "simulacrum",
        "timestamp": 1569251409
    },
    {
        "content": "<p>I've still got it open in the Inspector... one sec</p>",
        "id": 176377476,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1569251423
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>perf.css\ntable {\n<span class=\"gi\">+     border-collapse: collapse;</span>\n}\n<span class=\"gi\">+ #primary-table td {</span>\n<span class=\"gi\">+     border: 1px lightgrey solid;</span>\n<span class=\"gi\">+ }</span>\n<span class=\"gi\">+ #primary-table tr:nth-child(2n+1) {</span>\n<span class=\"gi\">+     background-color: #FBFBFB;</span>\n}\n</pre></div>",
        "id": 176377600,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1569251522
    },
    {
        "content": "<p>I'll open a PR.</p>",
        "id": 176377759,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1569251608
    },
    {
        "content": "<p>ah, let's actually add it inline in the detailed-query.html</p>",
        "id": 176377770,
        "sender_full_name": "simulacrum",
        "timestamp": 1569251621
    },
    {
        "content": "<p>but looks good</p>",
        "id": 176377773,
        "sender_full_name": "simulacrum",
        "timestamp": 1569251628
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> merged and deployed :)</p>",
        "id": 176378316,
        "sender_full_name": "simulacrum",
        "timestamp": 1569251943
    },
    {
        "content": "<p>Thanks :)</p>",
        "id": 176378329,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1569251951
    },
    {
        "content": "<p>This is <span aria-label=\"fire\" class=\"emoji emoji-1f525\" role=\"img\" title=\"fire\">:fire:</span> Really nice work <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span>!!</p>",
        "id": 176378454,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1569252007
    },
    {
        "content": "<p>it'd be great to somewhat fast track the mmap size fix so that we stop breaking some of the benchmarks on perf, btw (or let me know that it's hard and I can disable self-profile on them, that's just painful work since it's going to get deleted in a bit)</p>",
        "id": 176378552,
        "sender_full_name": "simulacrum",
        "timestamp": 1569252070
    },
    {
        "content": "<p>Do you think 4gb would be sufficient? If you have any kind of gut level feeling</p>",
        "id": 176378593,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1569252099
    },
    {
        "content": "<p>heh, unfortunately, no</p>",
        "id": 176378847,
        "sender_full_name": "simulacrum",
        "timestamp": 1569252250
    },
    {
        "content": "<p>I think a stop the world pause as we push out events when we hit the GB marker would work though</p>",
        "id": 176378878,
        "sender_full_name": "simulacrum",
        "timestamp": 1569252271
    },
    {
        "content": "<p>Based on past efforts designing something like that is a bit non-trivial though</p>",
        "id": 176378890,
        "sender_full_name": "simulacrum",
        "timestamp": 1569252283
    },
    {
        "content": "<p>I would be cautious about allocating the 4gb in one big mmap, too, that seems likely to not work / be bad</p>",
        "id": 176378923,
        "sender_full_name": "simulacrum",
        "timestamp": 1569252311
    },
    {
        "content": "<p>Gotcha</p>",
        "id": 176378937,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1569252317
    },
    {
        "content": "<p>(although I guess mmap doesn't guarantee the _pages_ underlying your virtual memory are consecutive, so it's probably fine?)</p>",
        "id": 176378958,
        "sender_full_name": "simulacrum",
        "timestamp": 1569252339
    },
    {
        "content": "<p>Maybe we can have a \"standby\" mmap and when we fill up, then we'll switch to that one. When we do the switch, we'll also allocate another mmap for standby.</p>",
        "id": 176379053,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1569252378
    },
    {
        "content": "<p>sure, that'd work fine I think -- not sure if that's all that much easier to implement -- we want to avoid locks around the mmaps in the happy path</p>",
        "id": 176379165,
        "sender_full_name": "simulacrum",
        "timestamp": 1569252466
    },
    {
        "content": "<p>so, massively overallocating shouldn't be a problem. that's what the MMU is for.</p>",
        "id": 176380138,
        "sender_full_name": "mw",
        "timestamp": 1569253043
    },
    {
        "content": "<p>but I also suspect that we'll stay under 1gb once we don't record cache hits anymore</p>",
        "id": 176380161,
        "sender_full_name": "mw",
        "timestamp": 1569253062
    },
    {
        "content": "<p>I don't want to do some kind of ring buffer because it requires locking</p>",
        "id": 176380371,
        "sender_full_name": "mw",
        "timestamp": 1569253186
    },
    {
        "content": "<p>if we decided to switch to something like a ring buffer though, then I wouldn't want to use mmaps anymore because there's no need for that then</p>",
        "id": 176380479,
        "sender_full_name": "mw",
        "timestamp": 1569253235
    },
    {
        "content": "<p>Makes sense. I've reverted to just the default collection list for now, we'll see soon if that fixes the failures</p>",
        "id": 176381348,
        "sender_full_name": "simulacrum",
        "timestamp": 1569253825
    },
    {
        "content": "<p>some observations: </p>\n<ul>\n<li>the color don't seem to be quite right yet.</li>\n<li>some queries with very small absolute times often seem to have very big changes in percent, because the noise dominates for them. I don't know what to do about that.</li>\n</ul>",
        "id": 176381491,
        "sender_full_name": "mw",
        "timestamp": 1569253928
    },
    {
        "content": "<p>maybe everything below a certain threshold should just be grayed  out anyway</p>",
        "id": 176381672,
        "sender_full_name": "mw",
        "timestamp": 1569254072
    },
    {
        "content": "<p>if it takes under 1 microsecond, I don't care :)</p>",
        "id": 176381718,
        "sender_full_name": "mw",
        "timestamp": 1569254103
    },
    {
        "content": "<p>Another note:</p>\n<ul>\n<li>it would help readability if there was more horizontal space between the columns</li>\n</ul>",
        "id": 176381789,
        "sender_full_name": "mw",
        "timestamp": 1569254156
    },
    {
        "content": "<p>/me needs to run <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 176381846,
        "sender_full_name": "mw",
        "timestamp": 1569254179
    },
    {
        "content": "<blockquote>\n<ul>\n<li>some queries with very small absolute times often seem to have very big changes in percent, because the noise dominates for them. I don't know what to do about that.</li>\n</ul>\n</blockquote>\n<p>I arbitrarily chose 0.05 as minimum realistic absolute delta (i.e., anything less is noise) and we don't color any percents that are representing anything less than this delta. This isn't right for anything but time, but seems fine -- other measurements are counts, which are always going to be non-noisy since we should be deterministic, though possibly modulo parallelism, not sure</p>",
        "id": 176413777,
        "sender_full_name": "simulacrum",
        "timestamp": 1569276239
    },
    {
        "content": "<p>sounds good! query invocations should be deterministic even with parallelism enable, yes</p>",
        "id": 176441698,
        "sender_full_name": "mw",
        "timestamp": 1569312951
    },
    {
        "content": "<p>I was thinking we might have a mode of \"race to completion\" between two threads if both need results and they're not available but I guess there's probably not much point as we're waiting for the sameish amount of time anyway</p>",
        "id": 176452896,
        "sender_full_name": "simulacrum",
        "timestamp": 1569323134
    },
    {
        "content": "<p>Are the diffs right? They kind of look backwards to me.</p>\n<p><a href=\"https://perf.rust-lang.org/detailed-query.html?commit=8be3622ad74755484fd9b9e401d0ee96837be244&amp;base_commit=b4ba2a3953ea9ec28f01c314be315d46673bd782&amp;benchmark=clap-rs-debug&amp;run_name=clean\" target=\"_blank\" title=\"https://perf.rust-lang.org/detailed-query.html?commit=8be3622ad74755484fd9b9e401d0ee96837be244&amp;base_commit=b4ba2a3953ea9ec28f01c314be315d46673bd782&amp;benchmark=clap-rs-debug&amp;run_name=clean\">https://perf.rust-lang.org/detailed-query.html?commit=8be3622ad74755484fd9b9e401d0ee96837be244&amp;base_commit=b4ba2a3953ea9ec28f01c314be315d46673bd782&amp;benchmark=clap-rs-debug&amp;run_name=clean</a></p>\n<p>Reads like an increase of 46.9% but if you check, it's actually a decrease.</p>",
        "id": 176506526,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1569359349
    },
    {
        "content": "<p>Base time:</p>\n<p>LLVM_emit_obj   7.779   4   4   0.000</p>\n<p>New time:</p>\n<p>LLVM_emit_obj   5.296   4   4   0.000</p>",
        "id": 176506576,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1569359385
    },
    {
        "content": "<p>Uh, yes, that was a bug -- should be fixed now.</p>",
        "id": 176506762,
        "sender_full_name": "simulacrum",
        "timestamp": 1569359507
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> ^</p>",
        "id": 176506764,
        "sender_full_name": "simulacrum",
        "timestamp": 1569359510
    },
    {
        "content": "<p>Just as I was starting to look at the code... it's already fixed. Fast as always <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> :)</p>",
        "id": 176506856,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1569359569
    },
    {
        "content": "<p>I have no real idea if the percentages are \"good\" though -- I'm never sure what my denominator should be</p>",
        "id": 176506899,
        "sender_full_name": "simulacrum",
        "timestamp": 1569359612
    },
    {
        "content": "<p>I guess in part because it depends on what you want a percent _of_</p>",
        "id": 176506914,
        "sender_full_name": "simulacrum",
        "timestamp": 1569359625
    },
    {
        "content": "<p>Yeah, I had the same question when I added the diff subcommand to <code>summarize</code></p>",
        "id": 176506986,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1569359658
    },
    {
        "content": "<p>It just outputs the differences and orders results by the absolute values</p>",
        "id": 176507027,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1569359691
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/measureme/tree/master/summarize#the-diff-sub-command\" target=\"_blank\" title=\"https://github.com/rust-lang/measureme/tree/master/summarize#the-diff-sub-command\">https://github.com/rust-lang/measureme/tree/master/summarize#the-diff-sub-command</a></p>",
        "id": 176507031,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1569359692
    },
    {
        "content": "<p>The easy way out :)</p>",
        "id": 176507175,
        "sender_full_name": "simulacrum",
        "timestamp": 1569359773
    },
    {
        "content": "<p>if you ask me, the problem is using percent difference rather than just presenting the ratio</p>",
        "id": 176638512,
        "sender_full_name": "pnkfelix",
        "timestamp": 1569486995
    },
    {
        "content": "<p>i.e., I personally would rather see <code>0.60</code> than <code>-66.66%</code> or <code>-40%</code></p>",
        "id": 176638646,
        "sender_full_name": "pnkfelix",
        "timestamp": 1569487197
    },
    {
        "content": "<p>(this is me starting from a hypothetical change from 100.0 to 60.0)</p>",
        "id": 176638793,
        "sender_full_name": "pnkfelix",
        "timestamp": 1569487325
    },
    {
        "content": "<p>see also <a href=\"http://mathcentral.uregina.ca/QQ/database/QQ.09.06/s/carolyn1.html\" target=\"_blank\" title=\"http://mathcentral.uregina.ca/QQ/database/QQ.09.06/s/carolyn1.html\">http://mathcentral.uregina.ca/QQ/database/QQ.09.06/s/carolyn1.html</a></p>",
        "id": 176638817,
        "sender_full_name": "pnkfelix",
        "timestamp": 1569487383
    },
    {
        "content": "<p>In particular \"percentage change. This is the change from an early value to a later value, and by convention, it is done with respect to the earlier value.\"</p>",
        "id": 176638831,
        "sender_full_name": "pnkfelix",
        "timestamp": 1569487409
    },
    {
        "content": "<p>Seems reasonable, and link is super handy -- I'll look into that and try and migrate perf over entirely</p>",
        "id": 176650048,
        "sender_full_name": "simulacrum",
        "timestamp": 1569498031
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> Is perf.rlo doing self-profiling with the default event filter at the moment?</p>",
        "id": 176658781,
        "sender_full_name": "mw",
        "timestamp": 1569505376
    },
    {
        "content": "<p>I believe so yes</p>",
        "id": 176658791,
        "sender_full_name": "simulacrum",
        "timestamp": 1569505385
    },
    {
        "content": "<p>I can switch that to a non-default though (maybe we want a dedicated one for perf?)</p>",
        "id": 176658803,
        "sender_full_name": "simulacrum",
        "timestamp": 1569505398
    },
    {
        "content": "<p>Thanks for the info. The default is fine for now.</p>",
        "id": 176660288,
        "sender_full_name": "mw",
        "timestamp": 1569506535
    }
]