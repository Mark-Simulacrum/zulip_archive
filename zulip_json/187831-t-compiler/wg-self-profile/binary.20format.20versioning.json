[
    {
        "content": "<p>We might want to look into supporting different versions of the binary format. The specific encoding might change but it would probably not be too hard to make measure support different encodings at the same time. Then people would not need to be so careful about using tools matching the compiler.</p>",
        "id": 164238095,
        "sender_full_name": "mw",
        "timestamp": 1556262127
    },
    {
        "content": "<p>At a minimum this would allow us to give a sensible error message if a tool can't handle a file.</p>",
        "id": 164238109,
        "sender_full_name": "mw",
        "timestamp": 1556262176
    },
    {
        "content": "<p>Besides, it would seem that it's more important that the compiled summarize binary uses the same version of measureme, as the one in the compiler being measured, than that summarize is compiled <em>by</em> that compiler?</p>",
        "id": 164238142,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1556262239
    },
    {
        "content": "<p>Perhaps one should keep master up to date with the measureme in nightly/rust master, so this matches up every time you pull both from master?</p>",
        "id": 164238408,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1556262574
    },
    {
        "content": "<p>(or just don't mess up support of previous formats or something of that kind)</p>",
        "id": 164238483,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1556262642
    },
    {
        "content": "<p>I imagined that measureme would keep supporting old formats</p>",
        "id": 164239121,
        "sender_full_name": "mw",
        "timestamp": 1556263541
    },
    {
        "content": "<p>and yes, what you say is true: the measureme versions have to match up. what compiler the tools are compiled with doesn't matter</p>",
        "id": 164239209,
        "sender_full_name": "mw",
        "timestamp": 1556263632
    },
    {
        "content": "<p>But at least if we support older formats the measureme version would just have to be larger or equal in <code>summarize</code></p>",
        "id": 164239278,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1556263717
    },
    {
        "content": "<p>yes</p>",
        "id": 164239298,
        "sender_full_name": "mw",
        "timestamp": 1556263750
    },
    {
        "content": "<p>but if we stick to a stable encoding of just the version identifier then older versions can at least tell that they are dealing with a newer encoding</p>",
        "id": 164239308,
        "sender_full_name": "mw",
        "timestamp": 1556263795
    },
    {
        "content": "<p>That would also be really nice</p>",
        "id": 164239367,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1556263820
    },
    {
        "content": "<p>I'd probably just add a small header to each of the files</p>",
        "id": 164239405,
        "sender_full_name": "mw",
        "timestamp": 1556263877
    },
    {
        "content": "<p>some magic 4 byte tag and 4 little-endian bytes for a version number</p>",
        "id": 164239417,
        "sender_full_name": "mw",
        "timestamp": 1556263905
    },
    {
        "content": "<p>Yeah, 32 bits for the version sounds enough</p>",
        "id": 164239473,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1556263950
    },
    {
        "content": "<p>definitely :)</p>",
        "id": 164239495,
        "sender_full_name": "mw",
        "timestamp": 1556263984
    },
    {
        "content": "<p>Do the files have any tag or similar now?</p>",
        "id": 164239670,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1556264172
    },
    {
        "content": "<p>Also, I was wondering: why is a profiling three files instead of bundling it in one? It seems like having one file would improve usability for the user.</p>",
        "id": 164239806,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1556264397
    },
    {
        "content": "<p>the files don't have a tag or any kind of header at the moment</p>",
        "id": 164240009,
        "sender_full_name": "mw",
        "timestamp": 1556264592
    },
    {
        "content": "<p>using three files allows us to be a bit more efficient when generating the data</p>",
        "id": 164240024,
        "sender_full_name": "mw",
        "timestamp": 1556264633
    },
    {
        "content": "<p>I think at least :) maybe the circumstances have changed since that decision was made, we should validate that</p>",
        "id": 164240088,
        "sender_full_name": "mw",
        "timestamp": 1556264674
    },
    {
        "content": "<p>however, ideally it shouldn't matter if there's one or three files because the tooling should hide this implementation detail</p>",
        "id": 164240121,
        "sender_full_name": "mw",
        "timestamp": 1556264709
    },
    {
        "content": "<p>I mean my point is you can't really hide that detail. There user has three files in their directory.</p>",
        "id": 164240213,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1556264806
    },
    {
        "content": "<p>yeah, I imagine that that can be inconvenient when having to get rid of those files manually</p>",
        "id": 164240619,
        "sender_full_name": "mw",
        "timestamp": 1556265311
    },
    {
        "content": "<p>but those binary files are not really meant to live long or be copied somewhere</p>",
        "id": 164240629,
        "sender_full_name": "mw",
        "timestamp": 1556265343
    },
    {
        "content": "<p>they are a means of serializing the profiling data while the compiler runs, in a way that has as little overhead as possible, which is important in order not to skew the measurements too much</p>",
        "id": 164240695,
        "sender_full_name": "mw",
        "timestamp": 1556265403
    },
    {
        "content": "<p>once all profiling is done and the system has resources for the postprocessing step, the binary files should be made obsolete asap</p>",
        "id": 164240717,
        "sender_full_name": "mw",
        "timestamp": 1556265468
    },
    {
        "content": "<p>all of this should be handled by a tool so that the user doesn't have to deal with it</p>",
        "id": 164240777,
        "sender_full_name": "mw",
        "timestamp": 1556265524
    },
    {
        "content": "<p>what exactly this tool looks like we don't know yet :)</p>",
        "id": 164240798,
        "sender_full_name": "mw",
        "timestamp": 1556265557
    },
    {
        "content": "<p>I mean, in principle you could just convert them immediately after the compiling finishes, at which point they no longer skew the profiling. On the other hand, doing IO at all during profiling sounds like it would skew it unnecessarily compared to just keeping it in memory? Maybe. I don't know how large the data is.</p>",
        "id": 164241322,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1556266111
    },
    {
        "content": "<p>I think for the regex crate (which is medium-sized) it was something like 20 megabytes</p>",
        "id": 164241567,
        "sender_full_name": "mw",
        "timestamp": 1556266406
    },
    {
        "content": "<p>it would certainly make sense to write this data to a RAM-disk of some kind</p>",
        "id": 164241631,
        "sender_full_name": "mw",
        "timestamp": 1556266459
    },
    {
        "content": "<p>You could even pre-allocate a large buffer like 100 MB and write it there, then flush to a file when we're done. Then if the buffer is filled, allocate another 100 MB buffer in some sort of rope to avoid the cost of copying during profiling.</p>",
        "id": 164241692,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1556266550
    },
    {
        "content": "<p>or if you really need to flush it to a file, try to profile how much time that took?</p>",
        "id": 164241757,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1556266582
    },
    {
        "content": "<p>we are using a memory map on Unix at the moment, which is a lazily allocated 1GiB buffer</p>",
        "id": 164241776,
        "sender_full_name": "mw",
        "timestamp": 1556266620
    },
    {
        "content": "<p>on Windows it turned out that writing to file immediately performs the best</p>",
        "id": 164241791,
        "sender_full_name": "mw",
        "timestamp": 1556266641
    },
    {
        "content": "<p>the memory map allows us to not do any locking during event recording</p>",
        "id": 164241859,
        "sender_full_name": "mw",
        "timestamp": 1556266696
    },
    {
        "content": "<blockquote>\n<p>I think for the regex crate (which is medium-sized) it was something like 20 megabytes</p>\n</blockquote>\n<p>Regex is actually 75mb (at least on macOS but I'd imagine all of the platforms are similar)</p>",
        "id": 164245200,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1556269810
    },
    {
        "content": "<p>It zips down to 12mb though</p>",
        "id": 164245238,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1556269858
    },
    {
        "content": "<p>Uhh, on my linux laptop it is only 3.4 MB</p>",
        "id": 164245251,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1556269871
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> was that before event filtering?</p>",
        "id": 164245261,
        "sender_full_name": "mw",
        "timestamp": 1556269887
    },
    {
        "content": "<p>Huh</p>",
        "id": 164245263,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1556269890
    },
    {
        "content": "<p>Yeah</p>",
        "id": 164245266,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1556269896
    },
    {
        "content": "<p>Is the default all events?</p>",
        "id": 164245276,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1556269916
    },
    {
        "content": "<p>My number is just the size of the three files created by <code>cargo +nightly rustc -- -Z self-profile</code></p>",
        "id": 164245278,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1556269919
    },
    {
        "content": "<p>Or all - incremental hit?</p>",
        "id": 164245323,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1556269924
    },
    {
        "content": "<p>the default is everything except for query cache hits, I think</p>",
        "id": 164245366,
        "sender_full_name": "mw",
        "timestamp": 1556269955
    },
    {
        "content": "<p>Oh ok</p>",
        "id": 164245374,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1556269961
    },
    {
        "content": "<p>Ignore me then</p>",
        "id": 164245376,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1556269966
    },
    {
        "content": "<p>How did you get 75 MB though?</p>",
        "id": 164245387,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1556269982
    },
    {
        "content": "<p>That event is like 85% of the file</p>",
        "id": 164245400,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1556269991
    },
    {
        "content": "<p>When all events are turned on, it's something ike 3.5 million events out of ~4 million total events</p>",
        "id": 164245425,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1556270022
    },
    {
        "content": "<p>How do you turn on all events though?</p>",
        "id": 164245435,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1556270036
    },
    {
        "content": "<p><code>-Z self-profile -Z self-profile-events all</code></p>",
        "id": 164245510,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1556270080
    },
    {
        "content": "<p>(This is also a clean compilation which is the worst case)</p>",
        "id": 164245625,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1556270170
    },
    {
        "content": "<p>I'm going to look into implementing this...</p>",
        "id": 165242977,
        "sender_full_name": "mw",
        "timestamp": 1557400492
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/measureme/issues/40\" target=\"_blank\" title=\"https://github.com/rust-lang/measureme/issues/40\">https://github.com/rust-lang/measureme/issues/40</a></p>",
        "id": 165243004,
        "sender_full_name": "mw",
        "timestamp": 1557400522
    },
    {
        "content": "<p>Hm, it looks like keeping to support older versions of the binary format is a bit more complicated than I want to implement right now.</p>",
        "id": 165250419,
        "sender_full_name": "mw",
        "timestamp": 1557407289
    },
    {
        "content": "<p>The <code>StringRef</code> is tied to the binary encoding of the string data. In order to solve that there are a few options:</p>\n<ul>\n<li>Make <code>StringRef</code> more eager, potentially making things less efficient</li>\n<li>Turn <code>StringTable</code> into a trait with an associated <code>StringRef</code> type. That would mean that all consumers of events would have to be made generic. Yuck.</li>\n<li>Convert old data to the newest format when encountering, which makes loading old data less efficient. Also, it seems error prone.</li>\n</ul>",
        "id": 165250799,
        "sender_full_name": "mw",
        "timestamp": 1557407607
    },
    {
        "content": "<p>Since we are at version zero anyway, I'll take the easy route and just defer this decision.</p>",
        "id": 165250897,
        "sender_full_name": "mw",
        "timestamp": 1557407673
    },
    {
        "content": "<p>If we make the measureme suite a rustup component then we might decide to not support old formats at all.</p>",
        "id": 165250946,
        "sender_full_name": "mw",
        "timestamp": 1557407739
    },
    {
        "content": "<p>I had a thought about this yesterday after the meeting. Could we just make the first event in the file a \"metadata\" event by convention?</p>",
        "id": 165254026,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557409955
    },
    {
        "content": "<p>We could then stuff a JSON blob or something in the string data for that event</p>",
        "id": 165254036,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557409967
    },
    {
        "content": "<p>The deserializer would know to look at the first event and to try deserializing it's data</p>",
        "id": 165254060,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557409999
    },
    {
        "content": "<p>If that fails, then we know it's an old style file</p>",
        "id": 165254077,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557410015
    },
    {
        "content": "<p>If it succeeds, then we can pull the version from the JSON blob</p>",
        "id": 165254091,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1557410034
    },
    {
        "content": "<p>Could we just make a header \"event\" that's always, say, the first 64 bits of all files and put (for now) just the version info in there?</p>",
        "id": 165262690,
        "sender_full_name": "simulacrum",
        "timestamp": 1557415486
    },
    {
        "content": "<p>In <a href=\"https://github.com/rust-lang/measureme/issues/15\" target=\"_blank\" title=\"https://github.com/rust-lang/measureme/issues/15\">https://github.com/rust-lang/measureme/issues/15</a> I suggested to have a string table entry with JSON metadata</p>",
        "id": 165321243,
        "sender_full_name": "mw",
        "timestamp": 1557479861
    },
    {
        "content": "<p>however, the version determines how events are encoded, so we can't put that information into an encoded event</p>",
        "id": 165321303,
        "sender_full_name": "mw",
        "timestamp": 1557479894
    },
    {
        "content": "<p>we'd have to decode the event in order to get the version and we have to know the version in order to know how to decode the event</p>",
        "id": 165321329,
        "sender_full_name": "mw",
        "timestamp": 1557479941
    },
    {
        "content": "<p>I think a simple scheme, as implemented in <a href=\"https://github.com/rust-lang/measureme/pull/41\" target=\"_blank\" title=\"https://github.com/rust-lang/measureme/pull/41\">https://github.com/rust-lang/measureme/pull/41</a>, where we reserve the first 8 bytes of each file for a header with just the version in it is a good choice.</p>",
        "id": 165321415,
        "sender_full_name": "mw",
        "timestamp": 1557480036
    },
    {
        "content": "<p>we only have to keep the encoding of the header stable, all other decoding can then dispatch on the version number</p>",
        "id": 165321430,
        "sender_full_name": "mw",
        "timestamp": 1557480067
    }
]