[
    {
        "content": "<p>I've been looking into implementing query key recording a little more concretely just now and it seems that my initial plan does not quite work <span aria-label=\"grumpy\" class=\"emoji emoji-1f621\" role=\"img\" title=\"grumpy\">:grumpy:</span></p>",
        "id": 178863377,
        "sender_full_name": "mw",
        "timestamp": 1571843442
    },
    {
        "content": "<p>I planned to use the <code>DepNodeIndex</code> corresponding to each query invocation as the <code>StringId</code> for which we'd then allocate string representations of the keys in bulk</p>",
        "id": 178863480,
        "sender_full_name": "mw",
        "timestamp": 1571843511
    },
    {
        "content": "<p>this is nice because it allows to also have query keys on dep-tracking events (once we add them) without additional overhead</p>",
        "id": 178863574,
        "sender_full_name": "mw",
        "timestamp": 1571843551
    },
    {
        "content": "<p>BUT: it turns out that the <code>DepNodeIndex</code> for a given query invocation is assigned only <em>after</em> the query provider has finished</p>",
        "id": 178863634,
        "sender_full_name": "mw",
        "timestamp": 1571843598
    },
    {
        "content": "<p>while we obviously want to start recording <em>before</em> invoking the query provider</p>",
        "id": 178863668,
        "sender_full_name": "mw",
        "timestamp": 1571843629
    },
    {
        "content": "<p>so we don't know which StringId to stick into the start event</p>",
        "id": 178863734,
        "sender_full_name": "mw",
        "timestamp": 1571843651
    },
    {
        "content": "<p>But we'd have the data when we go to record the end event?</p>",
        "id": 178863801,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1571843698
    },
    {
        "content": "<p>yes</p>",
        "id": 178863851,
        "sender_full_name": "mw",
        "timestamp": 1571843728
    },
    {
        "content": "<p>I mean we already depend heavily on the start/stop events being balanced...</p>",
        "id": 178863877,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1571843753
    },
    {
        "content": "<p>yes, it has been suggested in the past to have only one (start, end) event</p>",
        "id": 178863969,
        "sender_full_name": "mw",
        "timestamp": 1571843792
    },
    {
        "content": "<p>instead of two events</p>",
        "id": 178863980,
        "sender_full_name": "mw",
        "timestamp": 1571843797
    },
    {
        "content": "<p>that would solve the problem and also use less space</p>",
        "id": 178864002,
        "sender_full_name": "mw",
        "timestamp": 1571843812
    },
    {
        "content": "<p>the only problem I see with that is event nesting</p>",
        "id": 178864041,
        "sender_full_name": "mw",
        "timestamp": 1571843837
    },
    {
        "content": "<p>i.e. we want to be able to reconstruct \"event stacks\"</p>",
        "id": 178864106,
        "sender_full_name": "mw",
        "timestamp": 1571843874
    },
    {
        "content": "<p>and solely relying on time-stamps might not quite work (right?)</p>",
        "id": 178864166,
        "sender_full_name": "mw",
        "timestamp": 1571843896
    },
    {
        "content": "<p>I think it should because <code>libstd</code> has been patched to force monotonic clocks</p>",
        "id": 178864216,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1571843928
    },
    {
        "content": "<p>it has?</p>",
        "id": 178864252,
        "sender_full_name": "mw",
        "timestamp": 1571843949
    },
    {
        "content": "<p>Yeah</p>",
        "id": 178864266,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1571843960
    },
    {
        "content": "<p>it might just work then :)</p>",
        "id": 178864268,
        "sender_full_name": "mw",
        "timestamp": 1571843961
    },
    {
        "content": "<p>Pretty sure</p>",
        "id": 178864272,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1571843962
    },
    {
        "content": "<p>/me looking</p>",
        "id": 178864281,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1571843967
    },
    {
        "content": "<p>I remember the issue but not the outcome</p>",
        "id": 178864290,
        "sender_full_name": "mw",
        "timestamp": 1571843974
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/56988\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/56988\">https://github.com/rust-lang/rust/pull/56988</a></p>",
        "id": 178864438,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1571844049
    },
    {
        "content": "<p>(wow 2018... time flies)</p>",
        "id": 178864517,
        "sender_full_name": "mw",
        "timestamp": 1571844103
    },
    {
        "content": "<p>well only if you're x86_64-linux, otherwise it just jumps forward sporadically :)</p>",
        "id": 178864656,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1571844192
    },
    {
        "content": "<p><span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 178864791,
        "sender_full_name": "mw",
        "timestamp": 1571844269
    },
    {
        "content": "<p>alright, so I guess I'll take a stab at implementing the single-event approach?</p>",
        "id": 178864850,
        "sender_full_name": "mw",
        "timestamp": 1571844309
    },
    {
        "content": "<p>I guess you're going to need to mess with the <code>RawEvent</code> layout?</p>",
        "id": 178864885,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1571844330
    },
    {
        "content": "<p>it will mean updating quite a few of the tools</p>",
        "id": 178864898,
        "sender_full_name": "mw",
        "timestamp": 1571844336
    },
    {
        "content": "<p>I'm not sure if we can retain the iterator interface</p>",
        "id": 178864936,
        "sender_full_name": "mw",
        "timestamp": 1571844361
    },
    {
        "content": "<p>I think most of them actually use <code>iter_matching_events()</code> so it probably won't be that bad</p>",
        "id": 178864996,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1571844371
    },
    {
        "content": "<p>that's true</p>",
        "id": 178865010,
        "sender_full_name": "mw",
        "timestamp": 1571844382
    },
    {
        "content": "<p>I mean, I'm sure we <em>could</em>  retain the interface</p>",
        "id": 178865032,
        "sender_full_name": "mw",
        "timestamp": 1571844399
    },
    {
        "content": "<p>I'm not sure we want to</p>",
        "id": 178865056,
        "sender_full_name": "mw",
        "timestamp": 1571844410
    },
    {
        "content": "<p>I think it's mostly going to be the same as what we already have if I understand what you want to do correctly</p>",
        "id": 178865091,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1571844434
    },
    {
        "content": "<p>well, <code>Event</code> has distinct <code>start</code> and <code>end</code> events</p>",
        "id": 178865249,
        "sender_full_name": "mw",
        "timestamp": 1571844509
    },
    {
        "content": "<p>Well I guess I'm thinking primary of the stuff that already uses <code>MatchingEvent</code></p>",
        "id": 178865256,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1571844517
    },
    {
        "content": "<p>while the new <code>RawEvent</code> would not have those</p>",
        "id": 178865270,
        "sender_full_name": "mw",
        "timestamp": 1571844524
    },
    {
        "content": "<p>Yeah</p>",
        "id": 178865281,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1571844529
    },
    {
        "content": "<p>we could emulate the old behavior</p>",
        "id": 178865295,
        "sender_full_name": "mw",
        "timestamp": 1571844541
    },
    {
        "content": "<p>but that would mean reading the entire event stream into memory</p>",
        "id": 178865333,
        "sender_full_name": "mw",
        "timestamp": 1571844564
    },
    {
        "content": "<p>I think the new design might actually simplify <code>summarize</code></p>",
        "id": 178865348,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1571844572
    },
    {
        "content": "<p>We do that already</p>",
        "id": 178865362,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1571844578
    },
    {
        "content": "<p><code>MatchingEvent</code> would not be affect much, probably</p>",
        "id": 178865377,
        "sender_full_name": "mw",
        "timestamp": 1571844591
    },
    {
        "content": "<p>(I'm pretty sure)</p>",
        "id": 178865378,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1571844592
    },
    {
        "content": "<p>so, yeah</p>",
        "id": 178865431,
        "sender_full_name": "mw",
        "timestamp": 1571844603
    },
    {
        "content": "<p>I'll do some experimentation and show the result to you</p>",
        "id": 178865484,
        "sender_full_name": "mw",
        "timestamp": 1571844624
    },
    {
        "content": "<p>Ok</p>",
        "id": 178865504,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1571844634
    },
    {
        "content": "<p>and then we can discuss further</p>",
        "id": 178865509,
        "sender_full_name": "mw",
        "timestamp": 1571844635
    },
    {
        "content": "<p>it might be simpler than I thought</p>",
        "id": 178865520,
        "sender_full_name": "mw",
        "timestamp": 1571844644
    },
    {
        "content": "<p>I think <code>summarize</code> is really the only thing that's going to be invasive to change</p>",
        "id": 178865521,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1571844647
    },
    {
        "content": "<p>yeah</p>",
        "id": 178865547,
        "sender_full_name": "mw",
        "timestamp": 1571844665
    },
    {
        "content": "<p>And I think this may actually be good. The new approach lends pretty naturally to breaking the problem apart into a few discrete steps instead of mixing everything together in a massive loop</p>",
        "id": 178865570,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1571844682
    },
    {
        "content": "<p>yeah</p>",
        "id": 178865624,
        "sender_full_name": "mw",
        "timestamp": 1571844715
    },
    {
        "content": "<p>I guess flamegraphs will be affected too?</p>",
        "id": 178865677,
        "sender_full_name": "mw",
        "timestamp": 1571844730
    },
    {
        "content": "<p>they need the nesting information</p>",
        "id": 178865683,
        "sender_full_name": "mw",
        "timestamp": 1571844739
    },
    {
        "content": "<p>Yeah</p>",
        "id": 178865716,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1571844761
    },
    {
        "content": "<p>eddyb had a few thoughts they mentioned to me the other day about <code>RawEvent</code>, let me go find those in discord</p>",
        "id": 178865767,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1571844808
    },
    {
        "content": "<blockquote>\n<p>why are these two separate things? <a href=\"https://github.com/rust-lang/measureme/blob/d6440835f30cdc6cfbe8953711bcd7e703e98c79/measureme/src/raw_event.rs#L39-L40\" target=\"_blank\" title=\"https://github.com/rust-lang/measureme/blob/d6440835f30cdc6cfbe8953711bcd7e703e98c79/measureme/src/raw_event.rs#L39-L40\">https://github.com/rust-lang/measureme/blob/d6440835f30cdc6cfbe8953711bcd7e703e98c79/measureme/src/raw_event.rs#L39-L40</a><br>\nif you merged them somehow and made thread_id just u32 then the whole thing would be 16 bytes<br>\nwhich you can divide a mmap page into<br>\nso now you get to write the entire record with one instruction on x86_64</p>\n</blockquote>",
        "id": 178865854,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1571844867
    },
    {
        "content": "<p>AFAIK, we don't actually use <code>event_kind</code> at all</p>",
        "id": 178865875,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1571844884
    },
    {
        "content": "<p>So we could drop that field \"for free\"</p>",
        "id": 178865883,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1571844893
    },
    {
        "content": "<p>yeah, maybe</p>",
        "id": 178866072,
        "sender_full_name": "mw",
        "timestamp": 1571845014
    },
    {
        "content": "<p>I'll try to reconstruct our reasoning for having two distinct fields</p>",
        "id": 178866100,
        "sender_full_name": "mw",
        "timestamp": 1571845032
    },
    {
        "content": "<p>originally we had the 'high-level' summary thing</p>",
        "id": 178866124,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1571845049
    },
    {
        "content": "<p>which just lumped everything together under really broad categories</p>",
        "id": 178866144,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1571845066
    },
    {
        "content": "<p>but that wasn't detailed enough so we made it per query and left the categories alone</p>",
        "id": 178866164,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1571845082
    },
    {
        "content": "<p>so you did <code>-Zself-profile</code> and got the high-level thing and if you added a <code>-v</code> on to it, you got the queries</p>",
        "id": 178866287,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1571845130
    },
    {
        "content": "<p>but everybody that wanted to use the tool ended up doing that anyway so it just became the default</p>",
        "id": 178866315,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1571845150
    },
    {
        "content": "<p>and we never actually implemented anything in <code>measureme</code> to handle <code>event_kind</code></p>",
        "id": 178866351,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1571845176
    },
    {
        "content": "<p>right now we are using the <code>event_kind</code> to distinguish between generic activities vs queries etc</p>",
        "id": 178866361,
        "sender_full_name": "mw",
        "timestamp": 1571845181
    },
    {
        "content": "<p>ah, you're right</p>",
        "id": 178866488,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1571845237
    },
    {
        "content": "<p>one could lump that into the string contents of the event-id</p>",
        "id": 178866535,
        "sender_full_name": "mw",
        "timestamp": 1571845262
    },
    {
        "content": "<p>for query keys I already planned to make event-id conform to some simple grammar</p>",
        "id": 178866706,
        "sender_full_name": "mw",
        "timestamp": 1571845343
    },
    {
        "content": "<p>Actually, it's just query/activity vs incremental load time vs blocked time</p>",
        "id": 178866733,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1571845362
    },
    {
        "content": "<p>so that query-name and query-key can reliably be parsed out</p>",
        "id": 178866744,
        "sender_full_name": "mw",
        "timestamp": 1571845369
    },
    {
        "content": "<p>This is the only place I found we actually use it <a href=\"https://github.com/rust-lang/measureme/blob/34792560521a30030b2949b2c9dce881dea77852/summarize/src/analysis.rs#L84\" target=\"_blank\" title=\"https://github.com/rust-lang/measureme/blob/34792560521a30030b2949b2c9dce881dea77852/summarize/src/analysis.rs#L84\">https://github.com/rust-lang/measureme/blob/34792560521a30030b2949b2c9dce881dea77852/summarize/src/analysis.rs#L84</a></p>",
        "id": 178866766,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1571845384
    },
    {
        "content": "<p>it is useful information, I'd say</p>",
        "id": 178866806,
        "sender_full_name": "mw",
        "timestamp": 1571845425
    },
    {
        "content": "<p>Yeah</p>",
        "id": 178866810,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1571845428
    },
    {
        "content": "<blockquote>\n<p>for query keys I already planned to make event-id conform to some simple grammar</p>\n</blockquote>\n<p>This is a really good idea!</p>",
        "id": 178866876,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1571845444
    },
    {
        "content": "<p>but it could all be in one string, that's also true</p>",
        "id": 178866879,
        "sender_full_name": "mw",
        "timestamp": 1571845444
    },
    {
        "content": "<p>so if we already make the event-id complex in order to support query keys, we might as well add the event-kind to that too</p>",
        "id": 178866956,
        "sender_full_name": "mw",
        "timestamp": 1571845485
    },
    {
        "content": "<p>We're not currently using this stuff IIRC </p>\n<p><a href=\"https://github.com/rust-lang/measureme/blob/c8c27a9b17db7c863d4d59ecdbc26f3df20e2787/measureme/src/stringtable.rs#L7\" target=\"_blank\" title=\"https://github.com/rust-lang/measureme/blob/c8c27a9b17db7c863d4d59ecdbc26f3df20e2787/measureme/src/stringtable.rs#L7\">https://github.com/rust-lang/measureme/blob/c8c27a9b17db7c863d4d59ecdbc26f3df20e2787/measureme/src/stringtable.rs#L7</a></p>",
        "id": 178867004,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1571845510
    },
    {
        "content": "<p>yes, that will be sorely needed soon though :)</p>",
        "id": 178867046,
        "sender_full_name": "mw",
        "timestamp": 1571845538
    },
    {
        "content": "<p>otherwise we'd replicate the query-names a billion times</p>",
        "id": 178867069,
        "sender_full_name": "mw",
        "timestamp": 1571845560
    },
    {
        "content": "<p>You could use it for the query key grammar as well</p>",
        "id": 178867121,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1571845567
    },
    {
        "content": "<p>yes, that's what I planned to use it for</p>",
        "id": 178867144,
        "sender_full_name": "mw",
        "timestamp": 1571845581
    },
    {
        "content": "<p>If there's anything I can do to help, feel free to ping me :)</p>",
        "id": 178867353,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1571845693
    },
    {
        "content": "<p>will do :)</p>",
        "id": 178867395,
        "sender_full_name": "mw",
        "timestamp": 1571845718
    },
    {
        "content": "<p>so, I started looking into this and it turns out that this works best if we do a number of refactorings (that we wanted to do anyway) first</p>",
        "id": 178941107,
        "sender_full_name": "mw",
        "timestamp": 1571915403
    },
    {
        "content": "<ol>\n<li>move the RAII based API into measureme itself (i.e. the TimingGuard stuff)</li>\n</ol>",
        "id": 178941160,
        "sender_full_name": "mw",
        "timestamp": 1571915456
    },
    {
        "content": "<p>this just works better with only having a single event at the end because you need to remember the starting time somewhere</p>",
        "id": 178941194,
        "sender_full_name": "mw",
        "timestamp": 1571915496
    },
    {
        "content": "<p>well, it looks like this is the main thing that should be done :)</p>",
        "id": 178941272,
        "sender_full_name": "mw",
        "timestamp": 1571915553
    },
    {
        "content": "<p>other nice-to-have things that I'll also do: </p>\n<ul>\n<li>make thread-id a u32</li>\n<li>make measureme compute the thread-id (not sure about this one)</li>\n</ul>",
        "id": 178941339,
        "sender_full_name": "mw",
        "timestamp": 1571915640
    },
    {
        "content": "<p>for some context: once <a href=\"https://github.com/rust-lang/measureme/pull/70\" target=\"_blank\" title=\"https://github.com/rust-lang/measureme/pull/70\">https://github.com/rust-lang/measureme/pull/70</a> lands, I plan to immediately follow up with a rustc PR that uses 0.4.0 because it's straightforward and makes the code a bit cleaner in rustc. That should not require any changes to perf.rlo.</p>",
        "id": 178946893,
        "sender_full_name": "mw",
        "timestamp": 1571920590
    },
    {
        "content": "<p>the rest of the refactoring might take a little longer (a few days maybe) so it would be nice to land the improvements in the meantime.</p>",
        "id": 178946952,
        "sender_full_name": "mw",
        "timestamp": 1571920641
    },
    {
        "content": "<p>Alternatively we could not land anything just yet and wait for the refactoring to be completed. That would also be fine with me.</p>",
        "id": 178946989,
        "sender_full_name": "mw",
        "timestamp": 1571920677
    },
    {
        "content": "<p>I think we should land things as we go</p>",
        "id": 178947127,
        "sender_full_name": "simulacrum",
        "timestamp": 1571920780
    },
    {
        "content": "<p>I'm in the middle after refactoring events from start+stop to single interval events, and it's going fine so far.</p>",
        "id": 179526924,
        "sender_full_name": "mw",
        "timestamp": 1572525623
    },
    {
        "content": "<p>I'm trying update <code>summarize</code> right now. Do we have test cases for that somewhere?</p>",
        "id": 179526939,
        "sender_full_name": "mw",
        "timestamp": 1572525651
    },
    {
        "content": "<p>Or did we have plans on how to add test cases for it?</p>",
        "id": 179526967,
        "sender_full_name": "mw",
        "timestamp": 1572525677
    },
    {
        "content": "<p>^ <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span></p>",
        "id": 179527007,
        "sender_full_name": "mw",
        "timestamp": 1572525704
    },
    {
        "content": "<p>I seem to remember chatting about a text format that could be converted into a raw event stream, that would then be used for having tests with predictable time stamps</p>",
        "id": 179527112,
        "sender_full_name": "mw",
        "timestamp": 1572525761
    },
    {
        "content": "<p>A \"builder\" type that takes care of creating raw event streams for testing might be event better.</p>",
        "id": 179527244,
        "sender_full_name": "mw",
        "timestamp": 1572525867
    },
    {
        "content": "<p>because then we can have unit tests more easily and don't need to write a parser</p>",
        "id": 179527270,
        "sender_full_name": "mw",
        "timestamp": 1572525899
    },
    {
        "content": "<p>I think I need to add test cases <em>before</em> doing the refactoring, at least for <code>summarize</code>...</p>",
        "id": 179527587,
        "sender_full_name": "mw",
        "timestamp": 1572526160
    },
    {
        "content": "<p>(in case anyone is interested, my changes so far can be found at <a href=\"https://github.com/michaelwoerister/measureme/tree/interval-events-refactoring\" target=\"_blank\" title=\"https://github.com/michaelwoerister/measureme/tree/interval-events-refactoring\">https://github.com/michaelwoerister/measureme/tree/interval-events-refactoring</a>)</p>",
        "id": 179528020,
        "sender_full_name": "mw",
        "timestamp": 1572526487
    },
    {
        "content": "<blockquote>\n<p>I seem to remember chatting about a text format that could be converted into a raw event stream, that would then be used for having tests with predictable time stamps</p>\n</blockquote>\n<p>I vaguely remember talking about this <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span> </p>\n<blockquote>\n<p>A \"builder\" type that takes care of creating raw event streams for testing might be event better.</p>\n</blockquote>\n<p>This sounds really good! I like this idea a lot</p>",
        "id": 179529411,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1572527515
    },
    {
        "content": "<p>I'll probably look into that tomorrow</p>",
        "id": 179529920,
        "sender_full_name": "mw",
        "timestamp": 1572527899
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1123\">@WG-self-profile</span> we are getting close <code>:)</code></p>\n<p><a href=\"https://github.com/michaelwoerister/rust/commit/8f38d4c1e2013a29fbd32659b7338ebe80ff7ea9\" target=\"_blank\" title=\"https://github.com/michaelwoerister/rust/commit/8f38d4c1e2013a29fbd32659b7338ebe80ff7ea9\">This commit</a> switches <code>rustc</code> to the new strategy for mapping event_ids to strings. It only needs a small patch on top of <a href=\"https://github.com/rust-lang/measureme/pull/98\" target=\"_blank\" title=\"https://github.com/rust-lang/measureme/pull/98\">https://github.com/rust-lang/measureme/pull/98</a> in order to work. With that strategy in place it's just a matter of efficiently allocating string representations for query-keys in the <code>allocate_string_ids()</code> method. I'm pleased that things are not becoming overly complicated so far <code>:D</code></p>",
        "id": 182970637,
        "sender_full_name": "mw",
        "timestamp": 1575907593
    },
    {
        "content": "<p>This is really exciting! Great work <span class=\"user-mention\" data-user-id=\"124287\">@mw</span>!!</p>",
        "id": 182971005,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1575907799
    },
    {
        "content": "<p>Alright, I guess this works, for some definition of \"works\": <a href=\"https://github.com/michaelwoerister/rust/tree/query-keys-in-self-profiling\" target=\"_blank\" title=\"https://github.com/michaelwoerister/rust/tree/query-keys-in-self-profiling\">https://github.com/michaelwoerister/rust/tree/query-keys-in-self-profiling</a></p>",
        "id": 183651103,
        "sender_full_name": "mw",
        "timestamp": 1576591764
    },
    {
        "content": "<p>There has been little testing and the way query keys are generated is very crude</p>",
        "id": 183651172,
        "sender_full_name": "mw",
        "timestamp": 1576591803
    },
    {
        "content": "<p>but it compiles cargo and generates 1.2 GB of data for the whole crate graph :)</p>",
        "id": 183651195,
        "sender_full_name": "mw",
        "timestamp": 1576591829
    },
    {
        "content": "<p>That's awesome!</p>",
        "id": 183651216,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1576591847
    },
    {
        "content": "<p>I hope it's possible to integrate query key generation with the existing machinery in <code>ty::print</code></p>",
        "id": 183651262,
        "sender_full_name": "mw",
        "timestamp": 1576591889
    },
    {
        "content": "<p>(while still making use of string sharing)</p>",
        "id": 183651273,
        "sender_full_name": "mw",
        "timestamp": 1576591903
    },
    {
        "content": "<p>that would probably give us rather high-fidelity query keys</p>",
        "id": 183651338,
        "sender_full_name": "mw",
        "timestamp": 1576591924
    },
    {
        "content": "<p>I'm not sure if I'll get around to implementing that before the holidays</p>",
        "id": 183651394,
        "sender_full_name": "mw",
        "timestamp": 1576591976
    },
    {
        "content": "<p>Would that be similar to the <code>Debug</code> presentation for query keys or something else?</p>",
        "id": 183651408,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1576591986
    },
    {
        "content": "<p>It should be similar to what one gets in error messages</p>",
        "id": 183651431,
        "sender_full_name": "mw",
        "timestamp": 1576592004
    },
    {
        "content": "<p>Very cool!</p>",
        "id": 183651460,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1576592028
    },
    {
        "content": "<p>symbol name generation is also based on it</p>",
        "id": 183651462,
        "sender_full_name": "mw",
        "timestamp": 1576592030
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> has done a great job at making things generic there</p>",
        "id": 183651525,
        "sender_full_name": "mw",
        "timestamp": 1576592048
    },
    {
        "content": "<p>but I don't have any experience with it</p>",
        "id": 183651541,
        "sender_full_name": "mw",
        "timestamp": 1576592059
    },
    {
        "content": "<p>lmk if there's anything I can do to help!</p>",
        "id": 183651569,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1576592091
    },
    {
        "content": "<p>I suspect we may need to update some of the measureme tools to take better advantage of the data</p>",
        "id": 183651607,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1576592127
    },
    {
        "content": "<p>yeah, some of the tools can make good use of query keys (e.g. crox?)</p>",
        "id": 183651853,
        "sender_full_name": "mw",
        "timestamp": 1576592295
    },
    {
        "content": "<p>/me needs to run ...</p>",
        "id": 183651859,
        "sender_full_name": "mw",
        "timestamp": 1576592300
    },
    {
        "content": "<p><code>ty::print</code> is nowhere near what I was hoping it would be tbh</p>",
        "id": 183659014,
        "sender_full_name": "eddyb",
        "timestamp": 1576596735
    },
    {
        "content": "<p>if you have ideas for how to improve its design, I'm all ears</p>",
        "id": 183659041,
        "sender_full_name": "eddyb",
        "timestamp": 1576596747
    },
    {
        "content": "<p>(it's plausible <code>ty::print</code> itself is pointless since most of the logic can be replicated without too much effort, and <code>ty::print::pretty</code> should be the only part that's actually abstracted, which would allow a nice abstraction overall)</p>",
        "id": 183659123,
        "sender_full_name": "eddyb",
        "timestamp": 1576596802
    },
    {
        "content": "<p>I've been browsing through ty::print for a bit just now and it looks very useful. The logic in the default methods seems rather sophisticated. I'd rather not try to duplicate that without good reason.</p>",
        "id": 183688023,
        "sender_full_name": "mw",
        "timestamp": 1576614493
    },
    {
        "content": "<p>I'll have another look tomorrow, specifically at what actual implementations of the trait look like</p>",
        "id": 183688145,
        "sender_full_name": "mw",
        "timestamp": 1576614600
    }
]