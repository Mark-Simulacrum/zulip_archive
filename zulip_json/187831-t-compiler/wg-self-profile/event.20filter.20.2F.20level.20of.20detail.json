[
    {
        "content": "<p>I think it makes sense to allow some control over what events the compiler records in order to keep profiling overhead as low as possible.</p>",
        "id": 162989448,
        "sender_full_name": "mw",
        "timestamp": 1554889657
    },
    {
        "content": "<p>one obvious example is query keys. recording those will have quite a bit of overhead.</p>",
        "id": 162989513,
        "sender_full_name": "mw",
        "timestamp": 1554889703
    },
    {
        "content": "<p>but another example that is already relevant in the current version is query cache hits. As <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> mentioned <a href=\"#narrow/stream/187831-t-compiler.2Fwg-self-profile/topic/measureme.20performance/near/162136966\" title=\"#narrow/stream/187831-t-compiler.2Fwg-self-profile/topic/measureme.20performance/near/162136966\">here</a> they make up a huge portion of events overall, but for most kinds of analysis they are not needed.</p>",
        "id": 162989664,
        "sender_full_name": "mw",
        "timestamp": 1554889860
    },
    {
        "content": "<p>Yeah, I think we should offer some kind of control here. One option would be to allow complete control over the event types that will be captured a la <code>-Z profiler-events=query,activity,incremental,etc</code>. Another (better?) option would be some kind of \"slider\" which offers less control but doesn't require as much knowledge to use: <code>-Z profiler-setting={fast|normal|detailed}</code>.</p>",
        "id": 162996055,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1554896384
    },
    {
        "content": "<p>we could do both where <code>fast</code>, <code>normal</code>, <code>detailed</code> just map to a defined set of actual event-types</p>",
        "id": 162997344,
        "sender_full_name": "mw",
        "timestamp": 1554897403
    },
    {
        "content": "<p>e.g. <code>-Z profiler-events=query,activity</code> is exactly the same as <code>-Z profiler-events=fast</code></p>",
        "id": 162997369,
        "sender_full_name": "mw",
        "timestamp": 1554897436
    },
    {
        "content": "<p>we'd have to decide what happens if one does <code>-Z profiler-events=fast,incremental</code></p>",
        "id": 162997392,
        "sender_full_name": "mw",
        "timestamp": 1554897480
    },
    {
        "content": "<p>creating the union of all given sets would be a straightforward option</p>",
        "id": 162997453,
        "sender_full_name": "mw",
        "timestamp": 1554897522
    },
    {
        "content": "<p>\"Adding\" them together makes sense to me</p>",
        "id": 162997458,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1554897541
    },
    {
        "content": "<p>Yeah</p>",
        "id": 162997461,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1554897543
    },
    {
        "content": "<p>(btw, can I get you to sign off on <a href=\"https://github.com/rust-lang/measureme/pull/21\" target=\"_blank\" title=\"https://github.com/rust-lang/measureme/pull/21\">https://github.com/rust-lang/measureme/pull/21</a> which bumps the version number and adds some missing Cargo.toml fields?)</p>",
        "id": 162997563,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1554897631
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> signed off</p>",
        "id": 162997597,
        "sender_full_name": "simulacrum",
        "timestamp": 1554897670
    },
    {
        "content": "<p>Thanks <span aria-label=\"smile\" class=\"emoji emoji-263a\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 162997606,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1554897684
    },
    {
        "content": "<p>merged</p>",
        "id": 162997609,
        "sender_full_name": "mw",
        "timestamp": 1554897691
    },
    {
        "content": "<p>here is a thought on the implementation: it would be good the filter mechanism could also take care of the case where the profiler is completely disabled.</p>",
        "id": 163096069,
        "sender_full_name": "mw",
        "timestamp": 1554987180
    },
    {
        "content": "<p>that is, instead of storing the profiler as <code>Option&lt;Arc&lt;SelfProfiler&gt;&gt;</code> it would something like <code>SelfProfiler { filter_mask: FilterBitFlags, Arc&lt;SelfProfilerData&gt; }</code></p>",
        "id": 163096193,
        "sender_full_name": "mw",
        "timestamp": 1554987265
    },
    {
        "content": "<p>where <code>filter_mask</code> would be all zeros for the disabled-case</p>",
        "id": 163096206,
        "sender_full_name": "mw",
        "timestamp": 1554987288
    },
    {
        "content": "<p>that way we would avoid checking twice whether we should record an event</p>",
        "id": 163096274,
        "sender_full_name": "mw",
        "timestamp": 1554987351
    },
    {
        "content": "<p>in order to implement this we would need to be able to create a <code>Profiler</code> \"null object\", which is simple for the <code>MmapSerializationSink</code> (allocate the memory maps as usual, just don't write anything to disk at the end) but trickier for the <code>FileSerializationSink</code> because that expects to create the file on disk immediately</p>",
        "id": 163096534,
        "sender_full_name": "mw",
        "timestamp": 1554987570
    },
    {
        "content": "<p>On *nix, perhaps <code>FileSerializationSink</code> could write to <code>/dev/null</code>?</p>",
        "id": 163097340,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1554988133
    },
    {
        "content": "<p>I believe Windows has a <code>NUL</code> device as well</p>",
        "id": 163097368,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1554988153
    },
    {
        "content": "<p>Yes, I've thought of <code>/dev/null</code>. If Windows has an equivalent then that would work</p>",
        "id": 163097582,
        "sender_full_name": "mw",
        "timestamp": 1554988310
    },
    {
        "content": "<p><a href=\"https://stackoverflow.com/questions/313111/is-there-a-dev-null-on-windows\" target=\"_blank\" title=\"https://stackoverflow.com/questions/313111/is-there-a-dev-null-on-windows\">https://stackoverflow.com/questions/313111/is-there-a-dev-null-on-windows</a></p>",
        "id": 163097694,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1554988391
    },
    {
        "content": "<p>OK, this works on Linux: <code>let _file = std::fs::File::create(\"/dev/null\").unwrap();</code></p>",
        "id": 163098195,
        "sender_full_name": "mw",
        "timestamp": 1554988781
    },
    {
        "content": "<p>i.e. there's no error reported.</p>",
        "id": 163098207,
        "sender_full_name": "mw",
        "timestamp": 1554988794
    },
    {
        "content": "<p><code>libstd</code> seems to use <code>Path::new(\"NUL\")</code>: <a href=\"https://github.com/rust-lang/rust/blob/ee1474acc43fbf657b0fc910c139cf63cef34dc8/src/libstd/sys/windows/process.rs#L284-L301\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/ee1474acc43fbf657b0fc910c139cf63cef34dc8/src/libstd/sys/windows/process.rs#L284-L301\">https://github.com/rust-lang/rust/blob/ee1474acc43fbf657b0fc910c139cf63cef34dc8/src/libstd/sys/windows/process.rs#L284-L301</a></p>",
        "id": 163098518,
        "sender_full_name": "mw",
        "timestamp": 1554989040
    },
    {
        "content": "<p>Hm, so one concern with just writing to /dev/null is that we're still paying some cost for the event recording</p>",
        "id": 163099503,
        "sender_full_name": "simulacrum",
        "timestamp": 1554989754
    },
    {
        "content": "<p>Unless I misunderstood</p>",
        "id": 163099568,
        "sender_full_name": "simulacrum",
        "timestamp": 1554989773
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> is suggesting that when the profiler is disabled, that state will be the same as manually disabling all of the event types. So no events will actually be recorded. However, the <code>FileSerializationSink</code> creates its profile files when it is constructed. We can resolve that when the profiler is disabled by having it \"write\" to <code>/dev/null</code> in which case it doesn't matter because no events will be recorded.</p>",
        "id": 163099838,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1554989957
    },
    {
        "content": "<p>Ah, okay, that sounds better. Though I still half expect that the cost of option.is_none() might be lower than some set of bit operations for each event</p>",
        "id": 163099936,
        "sender_full_name": "simulacrum",
        "timestamp": 1554990006
    },
    {
        "content": "<p>Definitely something to test</p>",
        "id": 163099979,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1554990052
    },
    {
        "content": "<p>It might well be that the optimization is not worth it but the idea is to replace</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">profiler</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">xyz</span><span class=\"p\">.</span><span class=\"n\">profiler</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">profiler</span><span class=\"p\">.</span><span class=\"n\">filter_mask</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"n\">SOME_EVENT</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">profiler</span><span class=\"p\">.</span><span class=\"n\">record_some_event</span><span class=\"p\">(...);</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>with</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">   </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">xyz</span><span class=\"p\">.</span><span class=\"n\">profiler</span><span class=\"p\">.</span><span class=\"n\">filter_mask</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"n\">SOME_EVENT</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">profiler</span><span class=\"p\">.</span><span class=\"n\">record_some_event</span><span class=\"p\">(...);</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>and set <code>filter_mask</code> to <code>0</code> when the profiler is disabled completely.</p>",
        "id": 163100311,
        "sender_full_name": "mw",
        "timestamp": 1554990274
    },
    {
        "content": "<p>it's probably not something we'd have to do in the initial implementation of event filtering <code>:)</code></p>",
        "id": 163100527,
        "sender_full_name": "mw",
        "timestamp": 1554990454
    },
    {
        "content": "<p>I would indeed be interested if that would be slower (technically, CPU etc could optimize if filter_mask is 0) and the &amp; is quite cheap these days...</p>",
        "id": 163100643,
        "sender_full_name": "simulacrum",
        "timestamp": 1554990529
    },
    {
        "content": "<p>I suspect it not to make much of a difference</p>",
        "id": 163100694,
        "sender_full_name": "mw",
        "timestamp": 1554990567
    },
    {
        "content": "<p>then again, doing an <code>if</code> that always evaluates to <code>true</code> is cheap too these days</p>",
        "id": 163100718,
        "sender_full_name": "mw",
        "timestamp": 1554990594
    },
    {
        "content": "<p>so maybe I'm trying to be a bit too clever here</p>",
        "id": 163100813,
        "sender_full_name": "mw",
        "timestamp": 1554990629
    },
    {
        "content": "<p>eh, at least the code will be a bit clearer</p>",
        "id": 163100843,
        "sender_full_name": "simulacrum",
        "timestamp": 1554990657
    },
    {
        "content": "<p>yes</p>",
        "id": 163100885,
        "sender_full_name": "mw",
        "timestamp": 1554990696
    },
    {
        "content": "<p>that might be more important</p>",
        "id": 163100898,
        "sender_full_name": "mw",
        "timestamp": 1554990710
    },
    {
        "content": "<p>one thing I do suggest doing in the first implementation is storing the filter_mask next to the <code>Option&lt;Arc&lt;SelfProfiler&gt;&gt;</code> instead of in <code>SelfProfiler</code> itself. That way the filtering can be done without having to dereference the pointer, leading to better cache behaviour</p>",
        "id": 163101424,
        "sender_full_name": "mw",
        "timestamp": 1554991068
    },
    {
        "content": "<p>or in other words, split <code>SelfProfiler</code> into something like </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">SelfProfilerInternal</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"n\">stuff</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[derive(Clone, Send, Sync)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">SelfProfiler</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">event_filter_mask</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">internal</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Arc</span><span class=\"o\">&lt;</span><span class=\"n\">SelfProfilerInternal</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 163101732,
        "sender_full_name": "mw",
        "timestamp": 1554991228
    },
    {
        "content": "<p>hm, I'd expect either to be about equally cached</p>",
        "id": 163102798,
        "sender_full_name": "simulacrum",
        "timestamp": 1554991880
    },
    {
        "content": "<p>another thing that I'd like to have numbers on :)</p>",
        "id": 163103786,
        "sender_full_name": "mw",
        "timestamp": 1554992484
    },
    {
        "content": "<p>So, I actually ran some perf tests here: <a href=\"https://github.com/rust-lang/rust/pull/59915\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/59915\">https://github.com/rust-lang/rust/pull/59915</a></p>",
        "id": 163458313,
        "sender_full_name": "mw",
        "timestamp": 1555411897
    },
    {
        "content": "<p>but the numbers are not very reliable because there are also other changes in there that might affect performance</p>",
        "id": 163458338,
        "sender_full_name": "mw",
        "timestamp": 1555411922
    },
    {
        "content": "<p>anyway, filtering itself is very helpful in keeping overhead low: <a href=\"https://perf.rust-lang.org/compare.html?start=99da733f7f38ce8fe68453e859b7ac96bf7caa0f&amp;end=30ce13219eef2589a769b5d694bdc1c0aec0befc\" target=\"_blank\" title=\"https://perf.rust-lang.org/compare.html?start=99da733f7f38ce8fe68453e859b7ac96bf7caa0f&amp;end=30ce13219eef2589a769b5d694bdc1c0aec0befc\">https://perf.rust-lang.org/compare.html?start=99da733f7f38ce8fe68453e859b7ac96bf7caa0f&amp;end=30ce13219eef2589a769b5d694bdc1c0aec0befc</a></p>",
        "id": 163458423,
        "sender_full_name": "mw",
        "timestamp": 1555412021
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span>, <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span>: how would you do the commandline interface for this? one option is to do it like the PR does:</p>\n<ul>\n<li>have a <code>-Zself-profile</code> flag for enabling self-profiling and a separate flag (<code>-Zself-profile-event-filter</code> or something like that) that specifies which events get recorded.</li>\n</ul>",
        "id": 163458596,
        "sender_full_name": "mw",
        "timestamp": 1555412206
    },
    {
        "content": "<p>another option would be to </p>\n<ul>\n<li>have just one <code>-Zself-profile</code> flag that takes the events to record as an argument</li>\n</ul>",
        "id": 163458648,
        "sender_full_name": "mw",
        "timestamp": 1555412274
    },
    {
        "content": "<p>I'd prefer the second option but then we'd have no way to specify the directory to store the profiling data in</p>",
        "id": 163458738,
        "sender_full_name": "mw",
        "timestamp": 1555412373
    },
    {
        "content": "<p>I'd like to have a \"sensible default\" which provides a useful set of events but doesn't have too much overhead. This would be the flag we'd use to get performance bug reports from users. I think having the ability to tweak the events captured is also a good idea so I'd propose something like this:</p>\n<ul>\n<li><code>-Z self-profile</code> records the events we deem useful and places the output files in the working directory.</li>\n<li><code>-Z self-profile dir</code> records the events we deem useful and places the output files in the specified folder (creating it if it doesn't exist).</li>\n<li><code>-Z self-profile -Z self-profile-event-filter filter</code> records the events matched by the filter and places the output files in the working directory.</li>\n<li><code>-Z self-profile dir -Z self-profile-event-filter filter</code> records the events matched by the filter and places the output files in the specified folder (creating it if it doesn't exist)</li>\n</ul>",
        "id": 163468193,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1555420830
    },
    {
        "content": "<p>that makes sense to me. I'll update the event filter PR later. <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span>, I imagine that <code>perf.rlo</code> will want the ability to specify the output directory right from the beginning, right?</p>",
        "id": 163541952,
        "sender_full_name": "mw",
        "timestamp": 1555490239
    },
    {
        "content": "<p>(side note: it would make sense to write data like this to a ram-disk)</p>",
        "id": 163542080,
        "sender_full_name": "mw",
        "timestamp": 1555490351
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span> I don't think perf cares too much if the default is working directory</p>",
        "id": 163554541,
        "sender_full_name": "simulacrum",
        "timestamp": 1555503195
    },
    {
        "content": "<p>(or like /tmp)</p>",
        "id": 163554545,
        "sender_full_name": "simulacrum",
        "timestamp": 1555503199
    },
    {
        "content": "<p>so long as the filename is either settable or relatively obvious we should be fine</p>",
        "id": 163554558,
        "sender_full_name": "simulacrum",
        "timestamp": 1555503231
    },
    {
        "content": "<p>OK, good to know.</p>",
        "id": 163557886,
        "sender_full_name": "mw",
        "timestamp": 1555506312
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span> fwiw here's how the current profilers are integrated: <a href=\"https://github.com/rust-lang-nursery/rustc-perf/blob/master/collector/src/bin/rustc-perf-collector/execute.rs#L476\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/rustc-perf/blob/master/collector/src/bin/rustc-perf-collector/execute.rs#L476\">https://github.com/rust-lang-nursery/rustc-perf/blob/master/collector/src/bin/rustc-perf-collector/execute.rs#L476</a> and <a href=\"https://github.com/rust-lang-nursery/rustc-perf/blob/master/collector/src/bin/rustc-fake.rs#L18\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/rustc-perf/blob/master/collector/src/bin/rustc-fake.rs#L18\">https://github.com/rust-lang-nursery/rustc-perf/blob/master/collector/src/bin/rustc-fake.rs#L18</a></p>",
        "id": 163560947,
        "sender_full_name": "simulacrum",
        "timestamp": 1555508372
    },
    {
        "content": "<p>so something loosely similar would probably be wanted</p>",
        "id": 163560968,
        "sender_full_name": "simulacrum",
        "timestamp": 1555508383
    },
    {
        "content": "<p>What kind of output would be easiest for <code>rustc-perf</code> to interpret? Json, csv, something else?</p>",
        "id": 163562396,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1555509272
    },
    {
        "content": "<p>I'm working on the analysis tool and looking to add machine readable output for collection</p>",
        "id": 163562529,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1555509358
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> Probably JSON? We already emit it so the necessary parts are there</p>",
        "id": 163563681,
        "sender_full_name": "simulacrum",
        "timestamp": 1555510077
    },
    {
        "content": "<p>but doesn't matter all that much since IIRC we'll be using a library to load the data anyway</p>",
        "id": 163563743,
        "sender_full_name": "simulacrum",
        "timestamp": 1555510100
    },
    {
        "content": "<p>Ok. Easy enough</p>",
        "id": 163563763,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1555510120
    },
    {
        "content": "<p>Is there a prefered encoding for <code>Duration</code>s? I was thinking of outputting nanoseconds</p>",
        "id": 163563831,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1555510173
    },
    {
        "content": "<p>That seems reasonable -- what does Serde serialize them as?</p>",
        "id": 163563849,
        "sender_full_name": "simulacrum",
        "timestamp": 1555510190
    },
    {
        "content": "<p><a href=\"https://github.com/serde-rs/serde/blob/master/serde/src/ser/impls.rs#L589\" target=\"_blank\" title=\"https://github.com/serde-rs/serde/blob/master/serde/src/ser/impls.rs#L589\">https://github.com/serde-rs/serde/blob/master/serde/src/ser/impls.rs#L589</a></p>",
        "id": 163563945,
        "sender_full_name": "simulacrum",
        "timestamp": 1555510232
    },
    {
        "content": "<p>I'll just serde on our end so it will match up</p>",
        "id": 163563996,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1555510267
    },
    {
        "content": "<p>Hm, interestingly, nanoseconds are somewhat not lossless to convert back it seems</p>",
        "id": 163564024,
        "sender_full_name": "simulacrum",
        "timestamp": 1555510296
    },
    {
        "content": "<p>well, needs work, anyway</p>",
        "id": 163564042,
        "sender_full_name": "simulacrum",
        "timestamp": 1555510311
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> Duration::new takes u32 for nanoseconds but duration can store up to u128 nanoseconds it seems</p>",
        "id": 163566734,
        "sender_full_name": "simulacrum",
        "timestamp": 1555512053
    },
    {
        "content": "<p>Oh ok. It looks like serde calls the <code>Duration::new(secs, nanos)</code> ctor so that shouldn't be an issue<br>\n<a href=\"https://github.com/serde-rs/serde/blob/79a20e9e33a7cdb68d32cd990b638ce5357230d6/serde/src/de/impls.rs#L1921\" target=\"_blank\" title=\"https://github.com/serde-rs/serde/blob/79a20e9e33a7cdb68d32cd990b638ce5357230d6/serde/src/de/impls.rs#L1921\">https://github.com/serde-rs/serde/blob/79a20e9e33a7cdb68d32cd990b638ce5357230d6/serde/src/de/impls.rs#L1921</a></p>",
        "id": 163566918,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1555512179
    },
    {
        "content": "<p>yeah, seems fine because of the seconds part I think</p>",
        "id": 163567102,
        "sender_full_name": "simulacrum",
        "timestamp": 1555512294
    },
    {
        "content": "<p>Yeah, <code>nanos</code> is only used for storing fractional seconds and <code>2^32 -1 ns</code> is ~4 seconds so there shouldn't be any issue there.</p>",
        "id": 163567253,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1555512368
    },
    {
        "content": "<p>sounds good</p>",
        "id": 163567490,
        "sender_full_name": "simulacrum",
        "timestamp": 1555512512
    },
    {
        "content": "<p>PR for the summarization tool is up: <a href=\"https://github.com/rust-lang/measureme/pull/17\" target=\"_blank\" title=\"https://github.com/rust-lang/measureme/pull/17\">https://github.com/rust-lang/measureme/pull/17</a></p>\n<p>It also includes a <code>--json</code> flag to have it generate a json version of the analysis. Some sample output:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"p\">{</span>\n    <span class=\"nt\">&quot;query_data&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n            <span class=\"nt\">&quot;label&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;codegen 2i9de11lfqzk0ltu&quot;</span><span class=\"p\">,</span>\n            <span class=\"nt\">&quot;self_time&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"nt\">&quot;secs&quot;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                <span class=\"nt\">&quot;nanos&quot;</span><span class=\"p\">:</span> <span class=\"mi\">922041</span>\n            <span class=\"p\">},</span>\n            <span class=\"nt\">&quot;number_of_cache_misses&quot;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"nt\">&quot;number_of_cache_hits&quot;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n            <span class=\"nt\">&quot;invocation_count&quot;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"nt\">&quot;blocked_time&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"nt\">&quot;secs&quot;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                <span class=\"nt\">&quot;nanos&quot;</span><span class=\"p\">:</span> <span class=\"mi\">0</span>\n            <span class=\"p\">},</span>\n            <span class=\"nt\">&quot;incremental_load_time&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"nt\">&quot;secs&quot;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                <span class=\"nt\">&quot;nanos&quot;</span><span class=\"p\">:</span> <span class=\"mi\">0</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n            <span class=\"nt\">&quot;label&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;CrateHash&quot;</span><span class=\"p\">,</span>\n            <span class=\"nt\">&quot;self_time&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"nt\">&quot;secs&quot;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                <span class=\"nt\">&quot;nanos&quot;</span><span class=\"p\">:</span> <span class=\"mi\">21245</span>\n            <span class=\"p\">},</span>\n            <span class=\"nt\">&quot;number_of_cache_misses&quot;</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">,</span>\n            <span class=\"nt\">&quot;number_of_cache_hits&quot;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"nt\">&quot;invocation_count&quot;</span><span class=\"p\">:</span> <span class=\"mi\">21</span><span class=\"p\">,</span>\n            <span class=\"nt\">&quot;blocked_time&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"nt\">&quot;secs&quot;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                <span class=\"nt\">&quot;nanos&quot;</span><span class=\"p\">:</span> <span class=\"mi\">0</span>\n            <span class=\"p\">},</span>\n            <span class=\"nt\">&quot;incremental_load_time&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"nt\">&quot;secs&quot;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                <span class=\"nt\">&quot;nanos&quot;</span><span class=\"p\">:</span> <span class=\"mi\">0</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">],</span>\n    <span class=\"nt\">&quot;total_time&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">&quot;secs&quot;</span><span class=\"p\">:</span> <span class=\"mi\">13</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;nanos&quot;</span><span class=\"p\">:</span> <span class=\"mi\">351586715</span>\n    <span class=\"p\">}</span>\n</pre></div>\n\n\n<p>cc <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span></p>",
        "id": 163614755,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1555549800
    }
]