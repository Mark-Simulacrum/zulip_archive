[
    {
        "content": "<p>so, we like to discuss how events should be presented to post processing by the measureme crate</p>",
        "id": 160212435,
        "sender_full_name": "mw",
        "timestamp": 1551975619
    },
    {
        "content": "<p>i.e. that is the format that analysis happens on</p>",
        "id": 160212538,
        "sender_full_name": "mw",
        "timestamp": 1551975693
    },
    {
        "content": "<p>in this form one should not have to deal with the low-level encoding of the raw format as produced by the compiler</p>",
        "id": 160212613,
        "sender_full_name": "mw",
        "timestamp": 1551975727
    },
    {
        "content": "<p>Seems like there's maybe a efficient, low-level format that's used for serialization and a higher-level \"nicer\" event format that can be used for analysis</p>",
        "id": 160212616,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1551975730
    },
    {
        "content": "<p>Yes</p>",
        "id": 160212619,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1551975733
    },
    {
        "content": "<p>yes, exactly</p>",
        "id": 160212626,
        "sender_full_name": "mw",
        "timestamp": 1551975743
    },
    {
        "content": "<p>I see (at least) two ways of doing this</p>",
        "id": 160212660,
        "sender_full_name": "mw",
        "timestamp": 1551975771
    },
    {
        "content": "<p>1. define a <code>struct Event</code> with the appropriate fields</p>",
        "id": 160212691,
        "sender_full_name": "mw",
        "timestamp": 1551975795
    },
    {
        "content": "<p>2. define a callback interface like: <code>iter_events(f: Fn(event_name, thread_id, time_stamp, ...))</code></p>",
        "id": 160212737,
        "sender_full_name": "mw",
        "timestamp": 1551975836
    },
    {
        "content": "<p>the struct might be more flexible?</p>",
        "id": 160212823,
        "sender_full_name": "mw",
        "timestamp": 1551975898
    },
    {
        "content": "<p>You could also have a <code>struct Event</code> with the raw fields and serialization data and then an <code>enum Event</code> which is basically what we have now in the compiler</p>",
        "id": 160212847,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1551975915
    },
    {
        "content": "<p>anyway, for both approaches we have to define the \"fields\"...</p>",
        "id": 160212865,
        "sender_full_name": "mw",
        "timestamp": 1551975933
    },
    {
        "content": "<p>Then provide an function to get an <code>Iterator&lt;Item=enum Event&gt;</code> over the raw struct data</p>",
        "id": 160212889,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1551975948
    },
    {
        "content": "<p>I kind of like this: <a href=\"https://github.com/rust-lang/rust/issues/58372#issuecomment-468238097\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/58372#issuecomment-468238097\">https://github.com/rust-lang/rust/issues/58372#issuecomment-468238097</a></p>",
        "id": 160212971,
        "sender_full_name": "mw",
        "timestamp": 1551975991
    },
    {
        "content": "<p>except <code>event_id</code> would be a string version</p>",
        "id": 160212993,
        "sender_full_name": "mw",
        "timestamp": 1551976016
    },
    {
        "content": "<p>of the query key + args</p>",
        "id": 160213001,
        "sender_full_name": "mw",
        "timestamp": 1551976024
    },
    {
        "content": "<p>Like actually a <code>str</code> or a string id into the StringTable?</p>",
        "id": 160213052,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1551976059
    },
    {
        "content": "<p>something that can be converted to a <code>&amp;str</code></p>",
        "id": 160213126,
        "sender_full_name": "mw",
        "timestamp": 1551976085
    },
    {
        "content": "<p>Oh I see</p>",
        "id": 160213127,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1551976085
    },
    {
        "content": "<p>Next bullet point :)</p>",
        "id": 160213137,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1551976089
    },
    {
        "content": "<p>also, maybe other things like event_kind should be a string too?</p>",
        "id": 160213268,
        "sender_full_name": "mw",
        "timestamp": 1551976185
    },
    {
        "content": "<p>in order to be able to add new kinds later?</p>",
        "id": 160213283,
        "sender_full_name": "mw",
        "timestamp": 1551976199
    },
    {
        "content": "<p>I'm not sure if that would be necessary</p>",
        "id": 160213339,
        "sender_full_name": "mw",
        "timestamp": 1551976209
    },
    {
        "content": "<p>I think we may want to have a <code>label</code> field on every event</p>",
        "id": 160213383,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1551976242
    },
    {
        "content": "<p>which would contain what information?</p>",
        "id": 160213429,
        "sender_full_name": "mw",
        "timestamp": 1551976264
    },
    {
        "content": "<p>the query + key?</p>",
        "id": 160213444,
        "sender_full_name": "mw",
        "timestamp": 1551976278
    },
    {
        "content": "<p>Queries - query name<br>\n\"generic activity\" - some kind of associated data</p>",
        "id": 160213459,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1551976287
    },
    {
        "content": "<p>just the name or also the key/args?</p>",
        "id": 160213492,
        "sender_full_name": "mw",
        "timestamp": 1551976311
    },
    {
        "content": "<p>I know we can get at the query name from the event data but I think it's important semantically to have this so that the tool doesn't have to have super deep knowledge of rustc to interpret the results</p>",
        "id": 160213576,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1551976343
    },
    {
        "content": "<p>For the summarization tool, the label is the thing we'd aggregate on</p>",
        "id": 160213607,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1551976364
    },
    {
        "content": "<p>ok, so there would be the <code>label</code> and a separate field for the arguments?</p>",
        "id": 160213649,
        "sender_full_name": "mw",
        "timestamp": 1551976396
    },
    {
        "content": "<p>Yeah</p>",
        "id": 160213670,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1551976416
    },
    {
        "content": "<p>ok, sounds good</p>",
        "id": 160213675,
        "sender_full_name": "mw",
        "timestamp": 1551976423
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">ProfilerEvent</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">event_kind</span>: <span class=\"nc\">EventKind</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// u8 - query-provider, query-cache-hit, generic-event, incr-comp-cache-loading ...</span>\n<span class=\"w\">  </span><span class=\"n\">timestamp_kind</span>: <span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// start, stop, instant</span>\n<span class=\"w\">  </span><span class=\"n\">timestamp</span>: <span class=\"kt\">u64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// nanoseconds since profiler was created</span>\n<span class=\"w\">  </span><span class=\"n\">label</span>: <span class=\"nc\">StringTableId</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">additional_data</span>: <span class=\"p\">[</span><span class=\"n\">StringTableId</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 160213795,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1551976491
    },
    {
        "content": "<p>I guess you were saying <code>event_id</code> is also a <code>StringTableId</code>?</p>",
        "id": 160213826,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1551976509
    },
    {
        "content": "<p>I think <code>event_id</code> would go away</p>",
        "id": 160213848,
        "sender_full_name": "mw",
        "timestamp": 1551976532
    },
    {
        "content": "<p>because it's replaced by the <code>label</code></p>",
        "id": 160213858,
        "sender_full_name": "mw",
        "timestamp": 1551976544
    },
    {
        "content": "<p>plus an additional list of arguments</p>",
        "id": 160213870,
        "sender_full_name": "mw",
        "timestamp": 1551976558
    },
    {
        "content": "<p>Ok yes</p>",
        "id": 160213921,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1551976565
    },
    {
        "content": "<p><code>measureme</code> would take care of decoding the <code>event_id</code> string into <code>label</code> and args</p>",
        "id": 160213944,
        "sender_full_name": "mw",
        "timestamp": 1551976583
    },
    {
        "content": "<p>Oh ok</p>",
        "id": 160214038,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1551976640
    },
    {
        "content": "<p>and I don't think it would be a <code>StringTableId</code> because there might not be a single string table entry for the label</p>",
        "id": 160214041,
        "sender_full_name": "mw",
        "timestamp": 1551976641
    },
    {
        "content": "<p>although in practice there probably would be</p>",
        "id": 160214065,
        "sender_full_name": "mw",
        "timestamp": 1551976657
    },
    {
        "content": "<p>So this is the on-disk binary format:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">ProfilerEvent</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">event_kind</span>: <span class=\"nc\">EventKind</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// u8 - query-provider, query-cache-hit, generic-event, incr-comp-cache-loading ...</span>\n<span class=\"w\">  </span><span class=\"n\">event_id</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// ~ (query-kind, query-key) or (function-name, arguments)</span>\n<span class=\"w\">  </span><span class=\"n\">timestamp_kind</span>: <span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// start, stop, instant</span>\n<span class=\"w\">  </span><span class=\"n\">timestamp</span>: <span class=\"kt\">u64</span> <span class=\"c1\">// nanoseconds since profiler was created</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 160214090,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1551976673
    },
    {
        "content": "<p>yes</p>",
        "id": 160214147,
        "sender_full_name": "mw",
        "timestamp": 1551976686
    },
    {
        "content": "<p>But conceptually, its something like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">Event</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">event_kind</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">label</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">additional_data</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">str</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">timestamp</span>: <span class=\"nc\">Instant</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">event_kind</span>: <span class=\"p\">(</span><span class=\"n\">Start</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Stop</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Instant</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 160214228,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1551976750
    },
    {
        "content": "<p>yes</p>",
        "id": 160214252,
        "sender_full_name": "mw",
        "timestamp": 1551976770
    },
    {
        "content": "<p>Got it</p>",
        "id": 160214265,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1551976774
    },
    {
        "content": "<p>I really like that</p>",
        "id": 160214270,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1551976777
    },
    {
        "content": "<p>The profiling tools don't really have to know anything about rustc then. And eventually they can be generalized for salsa or whatever</p>",
        "id": 160214315,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1551976802
    },
    {
        "content": "<p>Instead of <code>&amp;str</code> it would probably be something else with a <code>fn as_str() -&gt; Cow&lt;str&gt;</code> method</p>",
        "id": 160214413,
        "sender_full_name": "mw",
        "timestamp": 1551976829
    },
    {
        "content": "<p>Ok</p>",
        "id": 160214432,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1551976846
    },
    {
        "content": "<p>then we can do something more efficient in some cases maybe</p>",
        "id": 160214446,
        "sender_full_name": "mw",
        "timestamp": 1551976856
    },
    {
        "content": "<p>but that's only a superficial difference</p>",
        "id": 160214485,
        "sender_full_name": "mw",
        "timestamp": 1551976873
    },
    {
        "content": "<p>Makes sense</p>",
        "id": 160214488,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1551976874
    },
    {
        "content": "<p>I wonder if <code>event_kind</code> should be a string or an enum</p>",
        "id": 160214535,
        "sender_full_name": "mw",
        "timestamp": 1551976912
    },
    {
        "content": "<p>string is more flexible</p>",
        "id": 160214548,
        "sender_full_name": "mw",
        "timestamp": 1551976921
    },
    {
        "content": "<p>Yeah, string makes more sense to me</p>",
        "id": 160214600,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1551976932
    },
    {
        "content": "<p>alright, let's do that then</p>",
        "id": 160214613,
        "sender_full_name": "mw",
        "timestamp": 1551976945
    },
    {
        "content": "<p>Then we don't have to go add a bunch of code to the tools when we add new events</p>",
        "id": 160214639,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1551976970
    },
    {
        "content": "<p>yes</p>",
        "id": 160214654,
        "sender_full_name": "mw",
        "timestamp": 1551976982
    },
    {
        "content": "<p>When I added the events for parallel query blocking, I thought it might be nice to have some kind of way to indicate semantically that the event is measuring something \"bad\"</p>",
        "id": 160214687,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1551977010
    },
    {
        "content": "<p>ie \"overhead\"</p>",
        "id": 160214699,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1551977018
    },
    {
        "content": "<p>The tools could then do things with that data as appropriate</p>",
        "id": 160214716,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1551977033
    },
    {
        "content": "<p>yeah, but that's probably a categorization that should be done during postprocessing</p>",
        "id": 160214792,
        "sender_full_name": "mw",
        "timestamp": 1551977060
    },
    {
        "content": "<p>The summarization tool could count up all of time spent in the overhead events and report that as an piece of data</p>",
        "id": 160214798,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1551977064
    },
    {
        "content": "<p>Yeah, we could do it that way.</p>",
        "id": 160214838,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1551977075
    },
    {
        "content": "<p><code>thread_id</code> is another field we'll need</p>",
        "id": 160214888,
        "sender_full_name": "mw",
        "timestamp": 1551977104
    },
    {
        "content": "<p>Yeah</p>",
        "id": 160214945,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1551977148
    },
    {
        "content": "<p>That's just a <code>u64</code> or even a <code>u16</code> or something if we want to save the space</p>",
        "id": 160215045,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1551977186
    },
    {
        "content": "<p>so, <code>measureme</code> would then provide something like a <code>ProfileData</code> struct</p>",
        "id": 160215057,
        "sender_full_name": "mw",
        "timestamp": 1551977195
    },
    {
        "content": "<p>that has a <code>fn events() -&gt; impl Iterator&lt;Item=Event&gt;</code> method ...</p>",
        "id": 160215100,
        "sender_full_name": "mw",
        "timestamp": 1551977222
    },
    {
        "content": "<p>yeah, thread_id could be an integer</p>",
        "id": 160215218,
        "sender_full_name": "mw",
        "timestamp": 1551977243
    },
    {
        "content": "<p>u64 seems fine</p>",
        "id": 160215227,
        "sender_full_name": "mw",
        "timestamp": 1551977249
    },
    {
        "content": "<p>ok, I like that so far</p>",
        "id": 160215314,
        "sender_full_name": "mw",
        "timestamp": 1551977283
    },
    {
        "content": "<p>That all seems great to me</p>",
        "id": 160215330,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1551977293
    },
    {
        "content": "<p>I've got to run in a few minutes</p>",
        "id": 160215343,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1551977300
    },
    {
        "content": "<p>I think this is plenty for me to get started though :)</p>",
        "id": 160215369,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1551977315
    },
    {
        "content": "<p>ok, great</p>",
        "id": 160215381,
        "sender_full_name": "mw",
        "timestamp": 1551977324
    },
    {
        "content": "<p>(not to cut you off if you have more you want to talk about)</p>",
        "id": 160215407,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1551977339
    },
    {
        "content": "<p>hopefully we can actually create the measureme GH repo soon :)</p>",
        "id": 160215430,
        "sender_full_name": "mw",
        "timestamp": 1551977352
    },
    {
        "content": "<p>Yeah</p>",
        "id": 160215484,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1551977395
    },
    {
        "content": "<p>I think I'm good for now</p>",
        "id": 160215549,
        "sender_full_name": "mw",
        "timestamp": 1551977411
    },
    {
        "content": "<p>It looks like there's still some process discussions?</p>",
        "id": 160215550,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1551977411
    },
    {
        "content": "<p>yeah</p>",
        "id": 160215564,
        "sender_full_name": "mw",
        "timestamp": 1551977419
    },
    {
        "content": "<p>Ok. Well have a great three-day weekend! <span aria-label=\"smile\" class=\"emoji emoji-263a\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 160215628,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1551977471
    },
    {
        "content": "<p>thanks!</p>",
        "id": 160215638,
        "sender_full_name": "mw",
        "timestamp": 1551977481
    },
    {
        "content": "<p>have a great weekend too!</p>",
        "id": 160215651,
        "sender_full_name": "mw",
        "timestamp": 1551977497
    }
]