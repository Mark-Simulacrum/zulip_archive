[
    {
        "content": "<p>Hi all! This might've been covered beforehand/be redundant, but a talk at last week's Strangeloop (<a href=\"https://www.youtube.com/watch?v=r-TLSBdHe1A\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=r-TLSBdHe1A\">https://www.youtube.com/watch?v=r-TLSBdHe1A</a>) covered <a href=\"https://github.com/plasma-umass/coz\" target=\"_blank\" title=\"https://github.com/plasma-umass/coz\">coz-profiler</a> (<a href=\"https://www.youtube.com/watch?v=r-TLSBdHe1A\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=r-TLSBdHe1A\">https://www.youtube.com/watch?v=r-TLSBdHe1A</a> that's kinda magicalâ€”it finds and predicts what sort of optimizations would be useful, and how much of a throughput/latency increase it would provide. it could provide some useful measurements on rustc (but I suspect y'all might already have that data!)</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"r-TLSBdHe1A\" href=\"https://www.youtube.com/watch?v=r-TLSBdHe1A\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=r-TLSBdHe1A\"><img src=\"https://i.ytimg.com/vi/r-TLSBdHe1A/default.jpg\"></a></div>",
        "id": 175829199,
        "sender_full_name": "David Barsky",
        "timestamp": 1568651714
    },
    {
        "content": "<p>it will likely need to be bindgen'd to work with Rust, but the author/presenter said that it should work with Rust with suprisingly little effort</p>",
        "id": 175829254,
        "sender_full_name": "David Barsky",
        "timestamp": 1568651763
    },
    {
        "content": "<p>Wow, that's interesting! It seems very related to this open issue we have: <a href=\"https://github.com/rust-lang/measureme/issues/39\" target=\"_blank\" title=\"https://github.com/rust-lang/measureme/issues/39\">https://github.com/rust-lang/measureme/issues/39</a></p>",
        "id": 175829489,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1568651928
    },
    {
        "content": "<p>I think coz fits the bill for this, then!</p>",
        "id": 175830825,
        "sender_full_name": "David Barsky",
        "timestamp": 1568652963
    },
    {
        "content": "<p>Commented on the issue: <a href=\"https://github.com/rust-lang/measureme/issues/39#issuecomment-531865442\" target=\"_blank\" title=\"https://github.com/rust-lang/measureme/issues/39#issuecomment-531865442\">https://github.com/rust-lang/measureme/issues/39#issuecomment-531865442</a></p>",
        "id": 175831235,
        "sender_full_name": "David Barsky",
        "timestamp": 1568653272
    },
    {
        "content": "<p>Has anyone successfully used coz for a Rust project? If so, how?<br>\nThis blog post by llogiq is the only thing I've found and he couldn't get it to run either: <a href=\"https://llogiq.github.io/2019/09/25/coz.html\">https://llogiq.github.io/2019/09/25/coz.html</a></p>\n<p>Personally, I haven't been able to get it to run even for the project's own C benchmarks.</p>",
        "id": 214441106,
        "sender_full_name": "Emerent",
        "timestamp": 1603562889
    },
    {
        "content": "<p>What is the problem? You may need a newer version of libelfin (I think it was called that)</p>",
        "id": 214443925,
        "sender_full_name": "bjorn3",
        "timestamp": 1603566427
    },
    {
        "content": "<p>Yeah, apparently I still had the incompatible apt installed libraries lying around after uninstalling libelfin-dev which were then picked up instead of the up to date ones I compiled from source.<br>\nI managed to get some profiles for my toy example in Rust, after switching on debug symbols and removing <code>crunchy::unroll!{}</code>. The latter caused coz to think all samples were collected in one line for some reason.<br>\nStill have to get it to run under WSL2.</p>",
        "id": 214446761,
        "sender_full_name": "Emerent",
        "timestamp": 1603570012
    }
]