[
    {
        "content": "<p>I am trying to use valgrind massif on cg_clif compiling issue_20936_deep_vector, however no output file is produced. When I try massif on the resulting executable, it does produce an output file. Is this because rustc is using jemalloc? If so, it would be nice if some message was produced about this.</p>",
        "id": 190595304,
        "sender_full_name": "bjorn3",
        "timestamp": 1584188421
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> Yes, I believe rustc is still using jemalloc. There might be an exception for certain platforms (Windows, I think, uses the system allocator).</p>",
        "id": 190620627,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1584229586
    },
    {
        "content": "<p>Why does massif completely skip the generation of the result file without warning when jemalloc is used?</p>",
        "id": 190620923,
        "sender_full_name": "bjorn3",
        "timestamp": 1584230200
    },
    {
        "content": "<p>I don't have any experience using massif so I couldn't say. <span class=\"user-mention\" data-user-id=\"120989\">@Nicholas Nethercote</span> probably knows the answer though...</p>",
        "id": 190621236,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1584230769
    },
    {
        "content": "<p>@bjorn3: Does clif spawn any child processes? Valgrind's <code>--trace-children=yes</code> option <em>might</em> help here...</p>",
        "id": 190675379,
        "sender_full_name": "njn",
        "timestamp": 1584319341
    },
    {
        "content": "<p>Yes, but only processes that I don't need to be profiled. (ranlib, linker) cg_clif itself is a dylib for rustc.</p>",
        "id": 190691051,
        "sender_full_name": "bjorn3",
        "timestamp": 1584345259
    },
    {
        "content": "<p>does cg_clif call <code>exec()</code> and become another process? That's the only case I can think of off the top of my head for why Massif wouldn't produce it's output</p>",
        "id": 190694935,
        "sender_full_name": "njn",
        "timestamp": 1584348607
    },
    {
        "content": "<p>No, cg_clif just keeps running in the context of its parent rustc process. After cg_clif finishes codegen, it returns back to rustc_interface.</p>",
        "id": 190703561,
        "sender_full_name": "bjorn3",
        "timestamp": 1584354486
    },
    {
        "content": "<p>It works with <code>--trace-children=yes</code>. Is it possible that threads are not distinguished from processes?</p>",
        "id": 190705745,
        "sender_full_name": "bjorn3",
        "timestamp": 1584355820
    },
    {
        "content": "<p>I managed to crash valgrind: <a href=\"https://gist.github.com/bjorn3/be5eea7120740f5351d8278df14a573c\" target=\"_blank\" title=\"https://gist.github.com/bjorn3/be5eea7120740f5351d8278df14a573c\">https://gist.github.com/bjorn3/be5eea7120740f5351d8278df14a573c</a></p>",
        "id": 190706683,
        "sender_full_name": "bjorn3",
        "timestamp": 1584356418
    },
    {
        "content": "<p>Why is llvm still running?</p>\n<blockquote>\n<p>Thread 2: status = VgTs_Runnable (lwpid 21490)<br>\n==21488==    at 0x4833DCF: operator new(unsigned long) (vg_replace_malloc.c:334)<br>\n==21488==    by 0xA21407E: LLVMBuildMul (in /home/bjorn/.rustup/toolchains/nightly-2020-03-12-x86_64-unknown-linux-gnu/lib/libLLVM-9-rust-1.43.0-nightly.so)<br>\n==21488==    by 0x4EF8EF0: rustc_codegen_ssa::glue::size_and_align_of_dst (in /home/bjorn/.rustup/toolchains/nightly-2020-03-12-x86_64-unknown-linux-gnu/lib/librustc_driver-5bafe156ff266a09.so)</p>\n</blockquote>",
        "id": 190733337,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1584370602
    },
    {
        "content": "<p>That run was with cg_llvm to compare against cg_clif.</p>",
        "id": 190738271,
        "sender_full_name": "bjorn3",
        "timestamp": 1584372624
    },
    {
        "content": "<p>Threads are definitely distinguished from processes.</p>",
        "id": 190785904,
        "sender_full_name": "njn",
        "timestamp": 1584396321
    },
    {
        "content": "<p>This line appears twice: <code>==21488== Massif, a heap profiler</code></p>",
        "id": 190785944,
        "sender_full_name": "njn",
        "timestamp": 1584396358
    },
    {
        "content": "<p>Which is strange. If the process forked, I would expect the new process to have a different PID</p>",
        "id": 190786004,
        "sender_full_name": "njn",
        "timestamp": 1584396378
    },
    {
        "content": "<p>Or is that output from two separate runs?</p>",
        "id": 190786256,
        "sender_full_name": "njn",
        "timestamp": 1584396574
    },
    {
        "content": "<p>That was one single run.</p>",
        "id": 190787676,
        "sender_full_name": "bjorn3",
        "timestamp": 1584397514
    },
    {
        "content": "<p>By the way my version of valgrind came with debian, so it may be relatively old.</p>",
        "id": 190787725,
        "sender_full_name": "bjorn3",
        "timestamp": 1584397555
    },
    {
        "content": "<p>You have 3.14, 3.15 is the current release, but it shouldn't matter</p>",
        "id": 190810366,
        "sender_full_name": "njn",
        "timestamp": 1584424181
    }
]