[
    {
        "content": "<p>I have a rough prototype integrating <code>measureme</code> with <code>rustc</code>. Here's some quick measurements showing the performance including <a href=\"https://github.com/rust-lang/measureme/pull/7\" target=\"_blank\" title=\"https://github.com/rust-lang/measureme/pull/7\">https://github.com/rust-lang/measureme/pull/7</a>:</p>\n<table>\n<thead>\n<tr>\n<th>Test Case</th>\n<th>Time taken</th>\n<th>Profile output file size</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>regex baseline rustc</td>\n<td>3.2s</td>\n<td><em>N/A</em></td>\n</tr>\n<tr>\n<td>regex baseline rustc + <code>-Z self-profile</code></td>\n<td>6.1s</td>\n<td>423mb</td>\n</tr>\n<tr>\n<td>regex rustc + <code>measureme</code> + <code>-Z self-profile</code></td>\n<td>4.0s</td>\n<td>19.6mb</td>\n</tr>\n</tbody>\n</table>\n<p>The prototype doesn't yet deduplicate query names so the output size should shrink quite a bit more once that is implemented.</p>\n<p>cc <span class=\"user-mention\" data-user-id=\"124287\">@mw</span></p>",
        "id": 161753878,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1553601560
    },
    {
        "content": "<p>Nice!</p>",
        "id": 161754400,
        "sender_full_name": "mw",
        "timestamp": 1553601973
    },
    {
        "content": "<p>That's already a big improvement.</p>",
        "id": 161754415,
        "sender_full_name": "mw",
        "timestamp": 1553601993
    },
    {
        "content": "<p>It would be great to have an end-to-end test case for event serialization &amp; deserialization.</p>",
        "id": 161754583,
        "sender_full_name": "mw",
        "timestamp": 1553602149
    },
    {
        "content": "<p>then we could test the current serialization sink and later the mmap based one</p>",
        "id": 161754609,
        "sender_full_name": "mw",
        "timestamp": 1553602189
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span>, I opened <a href=\"https://github.com/rust-lang/measureme/pull/8\" target=\"_blank\" title=\"https://github.com/rust-lang/measureme/pull/8\">https://github.com/rust-lang/measureme/pull/8</a> which contains a test case. Seems like the <code>FileSerializationSink</code> works as expected <code>:)</code></p>",
        "id": 161768409,
        "sender_full_name": "mw",
        "timestamp": 1553611555
    },
    {
        "content": "<p>I've created an implementation of MmapSerializationSink on this branch: <a href=\"https://github.com/michaelwoerister/measureme/tree/mmap-sink-2\" target=\"_blank\" title=\"https://github.com/michaelwoerister/measureme/tree/mmap-sink-2\">https://github.com/michaelwoerister/measureme/tree/mmap-sink-2</a></p>",
        "id": 161846534,
        "sender_full_name": "mw",
        "timestamp": 1553682864
    },
    {
        "content": "<p>I also added some benchmarks and it looks like the FileSerializationSink is actually faster :/</p>",
        "id": 161846564,
        "sender_full_name": "mw",
        "timestamp": 1553682895
    },
    {
        "content": "<p>at least on Windows. I'll test later on Linux too.</p>",
        "id": 161846585,
        "sender_full_name": "mw",
        "timestamp": 1553682911
    },
    {
        "content": "<p>Note that the current MmapSerializationSink implementation creates and anonymous memory map and then writes it out to disk in one go at the end. I tried having a memory map that is directly backed up by a file but that turned out to be more complicated than I have time for right now.</p>",
        "id": 161846729,
        "sender_full_name": "mw",
        "timestamp": 1553683036
    },
    {
        "content": "<p>I want to try that at some point though.</p>",
        "id": 161846742,
        "sender_full_name": "mw",
        "timestamp": 1553683054
    },
    {
        "content": "<p>I see similar results on macOS:</p>\n<div class=\"codehilite\"><pre><span></span>running 2 tests\ntest bench_file_serialization_sink ... bench: 188,348,802 ns/iter (+/- 3,373,099)\ntest bench_mmap_serialization_sink ... bench: 178,566,142 ns/iter (+/- 6,515,375)\n</pre></div>",
        "id": 161849198,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1553685256
    },
    {
        "content": "<blockquote>\n<p>a memory map that is directly backed up by a file</p>\n</blockquote>\n<p>Gentle reminder that this in basically intrinsically <code>unsafe</code> in Rust terms, as anything on the system can write to that file, invalidating immutability and single-mutable notions with one quick <code>cat</code>.</p>",
        "id": 161852199,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1553688169
    },
    {
        "content": "<p>These are the Linux numbers for me:</p>\n<div class=\"codehilite\"><pre><span></span>test bench_file_serialization_sink ... bench: 129,967,832 ns/iter (+/- 12,956,926)\ntest bench_mmap_serialization_sink ... bench: 126,248,624 ns/iter (+/- 8,204,924)\n</pre></div>",
        "id": 161852849,
        "sender_full_name": "mw",
        "timestamp": 1553688791
    },
    {
        "content": "<p>so mmap slightly faster</p>",
        "id": 161852851,
        "sender_full_name": "mw",
        "timestamp": 1553688797
    },
    {
        "content": "<p>on windows it was more like 188ms (file) vs 240ms (mmap)</p>",
        "id": 161852869,
        "sender_full_name": "mw",
        "timestamp": 1553688831
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> that's fine in this case, i.e. there's no real risk here</p>",
        "id": 161852962,
        "sender_full_name": "mw",
        "timestamp": 1553688901
    },
    {
        "content": "<p>I'd say we use the <code>FileSerializationSink</code> for now. It seems to be OK performance-wise and won't affect memory usage.</p>",
        "id": 161876312,
        "sender_full_name": "mw",
        "timestamp": 1553703990
    },
    {
        "content": "<p>Sounds reasonable to me</p>",
        "id": 161876338,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1553704019
    },
    {
        "content": "<p>So the earlier measurements didn't include the <code>QueryCacheHit</code> event and that turns out to be most of the events recorded in the profile. The correct measurements are:</p>\n<table>\n<thead>\n<tr>\n<th>Test Case</th>\n<th>Time taken</th>\n<th>Profile output file size</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>regex baseline rustc</td>\n<td>3.2s</td>\n<td><em>N/A</em></td>\n</tr>\n<tr>\n<td>regex baseline rustc + <code>-Z self-profile</code></td>\n<td>6.23s</td>\n<td>416mb</td>\n</tr>\n<tr>\n<td>regex rustc + <code>measureme</code> + <code>-Z self-profile</code></td>\n<td>6.8s</td>\n<td>74mb</td>\n</tr>\n</tbody>\n</table>\n<p>The captured file has 3,087,550 events of which 87% are <code>QueryCacheHit</code>. We should figure out a better way to capture that data.</p>",
        "id": 162136966,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1553976535
    },
    {
        "content": "<p>I've removed the unnecessary double locking which brings us to</p>\n<table>\n<thead>\n<tr>\n<th>Test Case</th>\n<th>Time taken</th>\n<th>Profile output file size</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>regex baseline rustc</td>\n<td>3.2s</td>\n<td><em>N/A</em></td>\n</tr>\n<tr>\n<td>regex baseline rustc + <code>-Z self-profile</code></td>\n<td>6.23s</td>\n<td>416mb</td>\n</tr>\n<tr>\n<td>regex rustc + <code>measureme</code> + <code>-Z self-profile</code></td>\n<td>5.7s</td>\n<td>74mb</td>\n</tr>\n</tbody>\n</table>",
        "id": 162203911,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1554085867
    },
    {
        "content": "<p>yeah that's not good</p>",
        "id": 162222108,
        "sender_full_name": "mw",
        "timestamp": 1554110716
    },
    {
        "content": "<p>we'll also need to profile where exactly we are spending that time</p>",
        "id": 162222195,
        "sender_full_name": "mw",
        "timestamp": 1554110795
    },
    {
        "content": "<p>I'd also be interested in how Mmap sink performs in this scenario</p>",
        "id": 162222226,
        "sender_full_name": "mw",
        "timestamp": 1554110849
    },
    {
        "content": "<p>mmap sink performs much better:</p>\n<table>\n<thead>\n<tr>\n<th>Test Case</th>\n<th>Time taken</th>\n<th>Profile output file size</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>regex baseline rustc</td>\n<td>3.2s</td>\n<td><em>N/A</em></td>\n</tr>\n<tr>\n<td>regex baseline rustc + <code>-Z self-profile</code></td>\n<td>6.23s</td>\n<td>416mb</td>\n</tr>\n<tr>\n<td>regex rustc + <code>measureme</code> + <code>-Z self-profile</code></td>\n<td>5.7s</td>\n<td>74mb</td>\n</tr>\n<tr>\n<td>regex rustc + <code>measureme</code> + <code>-Z self-profile</code> mmap sink</td>\n<td>3.7s</td>\n<td>74mb</td>\n</tr>\n</tbody>\n</table>",
        "id": 162231367,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1554120033
    },
    {
        "content": "<p>awesome :)</p>",
        "id": 162246400,
        "sender_full_name": "mw",
        "timestamp": 1554130708
    },
    {
        "content": "<p>I have another version of the mmap sink locally which needs some cleanup but might be even faster.</p>",
        "id": 162246469,
        "sender_full_name": "mw",
        "timestamp": 1554130763
    },
    {
        "content": "<p>Awesome!</p>",
        "id": 162246491,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1554130783
    },
    {
        "content": "<p>this also tells us that the benchmarks in the crate are no good :)</p>",
        "id": 162246499,
        "sender_full_name": "mw",
        "timestamp": 1554130791
    },
    {
        "content": "<p>it still might be interesting to think about multiple verbosity levels for self-profiling</p>",
        "id": 162246591,
        "sender_full_name": "mw",
        "timestamp": 1554130828
    },
    {
        "content": "<p>Even a modestly sized crate generates an events file with 1,000,000+ events</p>",
        "id": 162246600,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1554130832
    },
    {
        "content": "<p>does that version already deduplicate strings?</p>",
        "id": 162246635,
        "sender_full_name": "mw",
        "timestamp": 1554130862
    },
    {
        "content": "<p>Yeah</p>",
        "id": 162246659,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1554130874
    },
    {
        "content": "<p>i.e. does it allocate a new label string per event?</p>",
        "id": 162246661,
        "sender_full_name": "mw",
        "timestamp": 1554130875
    },
    {
        "content": "<p>ok</p>",
        "id": 162246663,
        "sender_full_name": "mw",
        "timestamp": 1554130877
    },
    {
        "content": "<p>It dedups query names and event type strings</p>",
        "id": 162246677,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1554130891
    },
    {
        "content": "<p>that's a lot of data apparently :)</p>",
        "id": 162246684,
        "sender_full_name": "mw",
        "timestamp": 1554130896
    },
    {
        "content": "<p>The custom <code>GenericEvent</code> labels are not deduplicated</p>",
        "id": 162246701,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1554130907
    },
    {
        "content": "<p>But I don't think there's a lot to be gained there</p>",
        "id": 162246712,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1554130915
    },
    {
        "content": "<p>yes, I think so too</p>",
        "id": 162246761,
        "sender_full_name": "mw",
        "timestamp": 1554130924
    },
    {
        "content": "<p>At least currently</p>",
        "id": 162246773,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1554130928
    },
    {
        "content": "<p>maybe we only need to record query cache hit events when also recording individual query keys</p>",
        "id": 162246825,
        "sender_full_name": "mw",
        "timestamp": 1554130967
    },
    {
        "content": "<p>that will be super slow anyway</p>",
        "id": 162246850,
        "sender_full_name": "mw",
        "timestamp": 1554130980
    },
    {
        "content": "<p>Yeah</p>",
        "id": 162246895,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1554131002
    },
    {
        "content": "<p>We do something similar with the existing cache stats</p>",
        "id": 162246916,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1554131014
    },
    {
        "content": "<p>I haven't had time to look at that PR yet</p>",
        "id": 162246926,
        "sender_full_name": "mw",
        "timestamp": 1554131020
    },
    {
        "content": "<p>hopefully tomorrow</p>",
        "id": 162246938,
        "sender_full_name": "mw",
        "timestamp": 1554131029
    },
    {
        "content": "<p>No worries :)</p>",
        "id": 162247004,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1554131056
    },
    {
        "content": "<p>I think it's mostly working now there's just some unresolved questions</p>",
        "id": 162247029,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1554131071
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 162247045,
        "sender_full_name": "mw",
        "timestamp": 1554131081
    },
    {
        "content": "<p>For anyone following along, I posted some numbers for Windows on <a href=\"https://github.com/rust-lang/rust/pull/59515#issuecomment-480104925\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/59515#issuecomment-480104925\">the PR</a></p>",
        "id": 162580826,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1554422662
    }
]