[
    {
        "content": "<p>quick question: How are people using this typically observing the PID that the <code>rustc</code> invocation used for its files? I personally ended up making a wrapper script that runs <code>rustc ... &amp;</code> in the background and calls <code>jobs -p; wait</code> so that I can observe it, but I'm wondering if it might make sense for <code>-Z self-profile</code> to print the PID for the user?</p>",
        "id": 175895652,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568718625
    },
    {
        "content": "<p>I personally feel like we should think about moving to a scheme where we put the crate name, not the pid, in the file</p>",
        "id": 175895789,
        "sender_full_name": "simulacrum",
        "timestamp": 1568718785
    },
    {
        "content": "<p>or maybe both, I guess, though I personally don't really like having the pid name in the files as it doesn't add much</p>",
        "id": 175895822,
        "sender_full_name": "simulacrum",
        "timestamp": 1568718831
    },
    {
        "content": "<p>or both crate name and pid. Or provide a way for the user to specify file prefix.</p>",
        "id": 175895830,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568718836
    },
    {
        "content": "<p>yeah, IIRC problem with file prefix is that a lot of the time there'll be multiple rustc invocations (e.g., with RUSTFLAGS=\"-Zself-profile\" cargo build)</p>",
        "id": 175895978,
        "sender_full_name": "simulacrum",
        "timestamp": 1568718948
    },
    {
        "content": "<p>right. One could attempt to address that with some sort of variable substitution mechanism.</p>",
        "id": 175896136,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568719072
    },
    {
        "content": "<p>or just tell users to do that themselves</p>",
        "id": 175896178,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568719083
    },
    {
        "content": "<p>I think for the most part I've long really wanted a <code>RUSTFLAGS_CRATE_NAME</code> in Cargo for this sort of thing</p>",
        "id": 175896209,
        "sender_full_name": "simulacrum",
        "timestamp": 1568719120
    },
    {
        "content": "<p>maybe we can have measureme have something that runs atop cargo and sets up a \"server\" or something and store events into one file from a cargo run</p>",
        "id": 175896219,
        "sender_full_name": "simulacrum",
        "timestamp": 1568719142
    },
    {
        "content": "<p>though that seems more complicated</p>",
        "id": 175896227,
        "sender_full_name": "simulacrum",
        "timestamp": 1568719149
    },
    {
        "content": "<p>... well there is <code>RUSTC_FLAGS=--crate-name _</code>, right?</p>",
        "id": 175896228,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568719149
    },
    {
        "content": "<p>but I guess that <code>cargo</code> needs to know about this too</p>",
        "id": 175896238,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568719162
    },
    {
        "content": "<p>er, that doesn't really help though right? Since you want it to run for a particular crate, not override crate names for all crates</p>",
        "id": 175896248,
        "sender_full_name": "simulacrum",
        "timestamp": 1568719177
    },
    {
        "content": "<p>currently the best way is <code>cargo build</code> then <code>cargo clean -p &lt;crate&gt;</code> then <code>cargo build</code> if it's the \"last\" crate</p>",
        "id": 175896309,
        "sender_full_name": "simulacrum",
        "timestamp": 1568719205
    },
    {
        "content": "<p>ah right, you want this to just override the name for the immediate crate being built, not its dependencies, right?</p>",
        "id": 175896329,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568719228
    },
    {
        "content": "<p>otherwise that'll not work too well, particularly in today's world where we have builds happening simultaneously cross-crate</p>",
        "id": 175896330,
        "sender_full_name": "simulacrum",
        "timestamp": 1568719229
    },
    {
        "content": "<p>no, no, I want something like <code>RUSTFLAGS_serde=\"-Zself-profile\" RUSTFLAGS_serde_derive=\"...\" cargo build</code></p>",
        "id": 175896352,
        "sender_full_name": "simulacrum",
        "timestamp": 1568719269
    },
    {
        "content": "<p>oh oh oh</p>",
        "id": 175896386,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568719315
    },
    {
        "content": "<p><code>RUSTFLAGS_${CRATE_NAME}</code> now I see</p>",
        "id": 175896445,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568719341
    },
    {
        "content": "<p>that sounds useful indeed</p>",
        "id": 175896458,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568719362
    },
    {
        "content": "<p>It might be a bit painful to support since IIRC we're struggling to get env-parsing in cargo working with matching \"parts\" (serde vs. serde_derive) but since we know a priori exactly the env variable we expect maybe that's not too bad</p>",
        "id": 175896540,
        "sender_full_name": "simulacrum",
        "timestamp": 1568719451
    },
    {
        "content": "<p>It does seem like a more generally useful feature (certainly, perf wants it, I could imagine e.g. crater runs wanting it)</p>",
        "id": 175896553,
        "sender_full_name": "simulacrum",
        "timestamp": 1568719477
    },
    {
        "content": "<p>Maybe there's a cargo (debugging) feature here as well? If there was a <code>-Z process-info</code> flag you could pass to cargo and have it output a file like:</p>\n<div class=\"codehilite\"><pre><span></span>pid      process\n9382   rustc --crate-name &quot;serde&quot; ....\n122    rustc --crate-name &quot;bin_utils&quot; ....\n4983   rustc --crate-name &quot;foo&quot; ....\n</pre></div>\n\n\n<p>that might be useful as well.</p>",
        "id": 175905468,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1568726826
    },
    {
        "content": "<p>eh, perhaps, but I personally don't like the tying to pids regardless (it seems a bit obscure, and that output could plausibly have the same pid for all three crates, right?)</p>",
        "id": 175905630,
        "sender_full_name": "simulacrum",
        "timestamp": 1568726926
    },
    {
        "content": "<p>At least on Linux and Windows, that seems unlikely</p>",
        "id": 175905836,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1568727039
    },
    {
        "content": "<p>I'm not sure what macOS does</p>",
        "id": 175905891,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1568727067
    },
    {
        "content": "<p>Yeah, it does seem unlikely -- I think it circles back during numbering, right? but still, pids are a bit unfriendly from a usability perspective, though they do seem 'state of the art' to an extent (e.g., valgrind also uses them)</p>",
        "id": 175906029,
        "sender_full_name": "simulacrum",
        "timestamp": 1568727149
    },
    {
        "content": "<p>Agreed! I think it would be great to include both the crate name and the pid in the <code>self-profile</code> filename. Usually, crate name should be enough.</p>",
        "id": 175906124,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1568727214
    },
    {
        "content": "<p>This seemed slightly familiar to me so I tested it on nightly and it appears that try to include the crate name in the output file name already.</p>",
        "id": 175907394,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1568727964
    },
    {
        "content": "<p>oh yeah, that is true</p>",
        "id": 175907449,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568727993
    },
    {
        "content": "<p>my own specific use case was that I wanted to just have a good pattern for <em>knowing</em> what pid was assigned to <code>rustc</code> I just ran</p>",
        "id": 175907504,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568728029
    },
    {
        "content": "<p>I think there should be a wrapper tool at some point that handles all of this for you</p>",
        "id": 175907539,
        "sender_full_name": "mw",
        "timestamp": 1568728052
    },
    {
        "content": "<p>If I do <code>RUSTFLAGS=\"-Z self-profile\" cargo build</code> on a fresh checkout of <code>regex</code>, I get this:</p>\n<div class=\"codehilite\"><pre><span></span>___-3764.{events,string_data,string_index}\n___-5580.{events,string_data,string_index}\n___-24468.{events,string_data,string_index}\nregex_syntax-11648.{events,string_data,string_index}\nregex-32204.{events,string_data,string_index}\n</pre></div>",
        "id": 175907545,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1568728059
    },
    {
        "content": "<p>maybe a cargo subcommand</p>",
        "id": 175907561,
        "sender_full_name": "mw",
        "timestamp": 1568728066
    },
    {
        "content": "<p>I would imagine e.g. that using <code>jobs -p</code> the way I described above is vulnerable to a race with other processes being created</p>",
        "id": 175907562,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568728066
    },
    {
        "content": "<p>(in terms of being able to subsequently automatically run <code>measureme</code> without a human attempting to infer the correct PID)</p>",
        "id": 175907660,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568728104
    },
    {
        "content": "<p>If we have this info (<a href=\"https://github.com/rust-lang/measureme/issues/15\" target=\"_blank\" title=\"https://github.com/rust-lang/measureme/issues/15\">https://github.com/rust-lang/measureme/issues/15</a>) then such a subcommand could get the header info for all the profile traces in the current directory and offer to process the most recent one.</p>",
        "id": 175907733,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1568728163
    },
    {
        "content": "<p>Or some other heuristic</p>",
        "id": 175907757,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1568728180
    },
    {
        "content": "<p>my specific use case is that I'm running the compiler three times: once without incremental, once with incremental with no incrdata, and once with incremental with incrdata. So its important, in that context, for me to have <em>some</em> way of observing the three PIDs that were created.</p>",
        "id": 175907914,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568728291
    },
    {
        "content": "<p>Note in particular that in order to get use of the incrdata that was created, it is not ideal to take the approach of using distinct <code>--crate-name</code> for each run</p>",
        "id": 175907999,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568728329
    },
    {
        "content": "<p>(I <em>could</em> do it, by including an extra fourth non-self-profiled run to generate the incrdata before the third run I mentioned above)</p>",
        "id": 175908044,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568728369
    },
    {
        "content": "<p>Are you invoking <code>rustc</code> directly or going through <code>cargo</code>?</p>",
        "id": 175908203,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1568728490
    },
    {
        "content": "<p>concrete <a href=\"https://gist.github.com/a80d060cf360b03bd2f79d4b82933257\" target=\"_blank\" title=\"https://gist.github.com/a80d060cf360b03bd2f79d4b82933257\">gist</a> of my wrapper script</p>",
        "id": 175908212,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568728497
    },
    {
        "content": "<p>in this case I'm invoking <code>rustc</code> directly</p>",
        "id": 175908231,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568728512
    },
    {
        "content": "<p>which is why I am not crazy worried about how I'm using <code>jobs -p</code></p>",
        "id": 175908248,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568728530
    },
    {
        "content": "<p>but it still seems suboptimal to me.</p>",
        "id": 175908250,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568728533
    },
    {
        "content": "<p>Can you use <code>$!</code>?</p>",
        "id": 175908258,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1568728539
    },
    {
        "content": "<p><a href=\"https://unix.stackexchange.com/questions/30370/how-to-get-the-pid-of-the-last-executed-command-in-shell-script\" target=\"_blank\" title=\"https://unix.stackexchange.com/questions/30370/how-to-get-the-pid-of-the-last-executed-command-in-shell-script\">https://unix.stackexchange.com/questions/30370/how-to-get-the-pid-of-the-last-executed-command-in-shell-script</a></p>",
        "id": 175908272,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1568728551
    },
    {
        "content": "<p>I experimented with that but it didn't seem to give me the right number</p>",
        "id": 175908329,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568728564
    },
    {
        "content": "<p>it was always off by one or so</p>",
        "id": 175908339,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568728567
    },
    {
        "content": "<p>i'm not 100% sure why</p>",
        "id": 175908347,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568728574
    },
    {
        "content": "<p>Weird</p>",
        "id": 175908355,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1568728579
    },
    {
        "content": "<p>it might have been because I was using <code>time</code> in a different way when I was trying to use <code>$!</code></p>",
        "id": 175908375,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568728598
    },
    {
        "content": "<p>/me goes to give <code>$!</code> a try again</p>",
        "id": 175908422,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568728656
    },
    {
        "content": "<p>It might be a good idea to have <code>rustc</code> print something out anyway when <code>-Z self-profile</code> is turned on. Even a short message would be a good indication that it's running and could include the pid.</p>",
        "id": 175908523,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1568728713
    },
    {
        "content": "<p>yeah okay <code>echo $!</code> does seem to do the right thing now that I time the <code>wait</code> at the end instead of the initial call...</p>",
        "id": 175908600,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568728769
    },
    {
        "content": "<p>(and moving the <code>time</code> to the initial invocation causes the aforementioned off-by-one error)</p>",
        "id": 175908736,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568728834
    },
    {
        "content": "<blockquote>\n<p>It might be a good idea to have <code>rustc</code> print something out anyway when <code>-Z self-profile</code> is turned on. Even a short message would be a good indication that it's running and could include the pid.</p>\n</blockquote>\n<p>right, this is what I was wondering about at the outset: Whether there is a good reason <em>not</em> to do this.</p>",
        "id": 175908798,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568728877
    },
    {
        "content": "<p>I can't think of one.</p>",
        "id": 175908865,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1568728923
    },
    {
        "content": "<p>one reason might be to make the output the same, regardless of whether self-profiling is on or off</p>",
        "id": 176082478,
        "sender_full_name": "mw",
        "timestamp": 1568885579
    },
    {
        "content": "<p>okay well maybe I'll add a different <code>-Z</code> flag to make it print the process id. ;)</p>",
        "id": 176083713,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568886846
    },
    {
        "content": "<p>(i do appreciate the benefit of keeping stdout/stderr invariant, at least absent other instrumentation like RUSTC_LOG)</p>",
        "id": 176083764,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568886909
    }
]