[
    {
        "content": "<p>Hey all. The Windows Runtime crate (<a href=\"https://crates.io/crates/winrt\">https://crates.io/crates/winrt</a>) which I help maintain, sometimes generates massive amounts of code. This is because some of the APIs we are creating bindings for are incredibly big. We've created a stress test which takes roughly 1 hour to compile. Perhaps this could be a good benchmark to focus speed improvements for rustc on? <a href=\"https://github.com/kennykerr/stress-rs\">https://github.com/kennykerr/stress-rs</a> Please let me know what you think!</p>",
        "id": 204657509,
        "sender_full_name": "rylev",
        "timestamp": 1595420140
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> your name came up as someone who might find this interesting. Pinging for visibility :-)</p>",
        "id": 204657690,
        "sender_full_name": "rylev",
        "timestamp": 1595420248
    },
    {
        "content": "<blockquote>\n<p>The bindings crate produces around 160MB of Rust source code - about 3.3 million lines of code.</p>\n</blockquote>\n<p>wow</p>",
        "id": 204657831,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595420345
    },
    {
        "content": "<p>But how long does compiling a 160 MB <code>.cpp</code> file take?</p>",
        "id": 204657854,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595420367
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224872\">Ryan Levick</span> <a href=\"#narrow/stream/187831-t-compiler.2Fwg-self-profile/topic/stress-test/near/204657690\">said</a>:</p>\n<blockquote>\n<p>your name came up as someone who might find this interesting. Pinging for visibility :-)</p>\n</blockquote>\n<p>interesting indeed :) I'll try and see if I can also gather stats to help the WG ( <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> we talked for a bit at RustFest Barcelona :)</p>",
        "id": 204657953,
        "sender_full_name": "lqd",
        "timestamp": 1595420423
    },
    {
        "content": "<p>it'd be to nice how \"much slower than your average C++ compiler\" that is indeed</p>",
        "id": 204659169,
        "sender_full_name": "lqd",
        "timestamp": 1595421248
    },
    {
        "content": "<p>it will be interesting to observe how slow the compiler is before reaching 3.3M lines, and it seems it's possible to cut the number of generated bindings in this example</p>",
        "id": 204659568,
        "sender_full_name": "lqd",
        "timestamp": 1595421507
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> I'm definitely interested in also reducing the amount of code we generate, and generating more compiler friendly code if possible, but I also thought that it could be helpful to speed up rustc as well.<br>\nI need to ask my colleague how long a similar compilation takes in C++</p>",
        "id": 204661644,
        "sender_full_name": "rylev",
        "timestamp": 1595422820
    },
    {
        "content": "<p>yeah this is likely pretty helpful, for sure!</p>",
        "id": 204661668,
        "sender_full_name": "simulacrum",
        "timestamp": 1595422840
    },
    {
        "content": "<p>oh yes this seems like it's going to be enlightening for sure !</p>",
        "id": 204661793,
        "sender_full_name": "lqd",
        "timestamp": 1595422912
    },
    {
        "content": "<p>I'm more than happy to help, but I'm not that familiar with the compiler profiling so I'll need your patience :-)</p>",
        "id": 204661854,
        "sender_full_name": "rylev",
        "timestamp": 1595422929
    },
    {
        "content": "<p>tbh I'm only slightly more familiar, I'll <em>also</em> need your patience :) (but mark, wesley, and everyone else from the wg will have our backs I'm sure)</p>",
        "id": 204662123,
        "sender_full_name": "lqd",
        "timestamp": 1595423075
    },
    {
        "content": "<p>it's an area of much interest so thanks for the example</p>",
        "id": 204662207,
        "sender_full_name": "lqd",
        "timestamp": 1595423133
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/187831-t-compiler.2Fwg-self-profile/topic/stress-test/near/204662123\">said</a>:</p>\n<blockquote>\n<p>tbh I'm only slightly more familiar, I'll <em>also</em> need your patience :) (but mark, wesley, and everyone else from the wg will have our backs I'm sure)</p>\n</blockquote>\n<p>Yes, feel free to ping me/otherwise loop me in and I will be happy to help out!</p>",
        "id": 204672034,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1595427757
    },
    {
        "content": "<p>likewise!</p>",
        "id": 204672227,
        "sender_full_name": "simulacrum",
        "timestamp": 1595427847
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> what's a good first step to take? Are you going to run a profiler over the code?</p>",
        "id": 204675049,
        "sender_full_name": "rylev",
        "timestamp": 1595429026
    },
    {
        "content": "<p>(sorry I'm at work) I'd start with looking at the generated code first to have a sense of what's it doing (as I don't know winrt at all), just in case something jumps out (doubtful) in case it exercizes specific parts of the compiler. But mostly starting with small-ish parts extracted from the example, gathering statistics with the self-profiling features, and then over a series of bigger and bigger pieces of code from the example (otherwise, starting with, say, callgrind and its 100x perf cost on such a big benchmark will take a while). That is, trying to discover and reproduce patterns on smaller test cases, see the numbers on what queries and which parts of the compiler are slow (possibly instrumenting rustc in the process in case more information is needed)</p>",
        "id": 204679771,
        "sender_full_name": "lqd",
        "timestamp": 1595431003
    },
    {
        "content": "<p>Yeah, I might also suggest trying just <code>perf top</code> while it's running (I presume you can compile on linux? There's probably similar tooling on windows though, anyway.) to get some idea of what it's doing</p>",
        "id": 204680156,
        "sender_full_name": "simulacrum",
        "timestamp": 1595431148
    },
    {
        "content": "<p>my guess is that will give you some hot functions that you can then ask for feedback on here</p>",
        "id": 204680174,
        "sender_full_name": "simulacrum",
        "timestamp": 1595431163
    },
    {
        "content": "<blockquote>\n<p>about 3.3 million lines of code.</p>\n</blockquote>\n<p>First step is remove all those newlines — one line of code is faster than two <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 204680426,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595431278
    },
    {
        "content": "<p>But seriously, at those sizes, leaving out whitespace might actually be noticeable.</p>",
        "id": 204680488,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595431310
    },
    {
        "content": "<p>Would it make sense to split it into multiple crates? I know that the code is generated by a macro or build script, but I'm not sure if that's because it's a lot of code and nobody wants to wait for it to build.</p>",
        "id": 204680801,
        "sender_full_name": "Laurențiu",
        "timestamp": 1595431447
    },
    {
        "content": "<p>(it does not build on linux)</p>",
        "id": 204705275,
        "sender_full_name": "lqd",
        "timestamp": 1595443021
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@Ryan Levick</span> btw do you have more information on how was the 1 hour figure gathered, was it just <code>cargo check</code> in stress-rs ? or a debug or release build ? was it after a cargo clean or some time after <a href=\"http://winrt.rs\">winrt.rs</a> was generated -- and generating the file is not counted in the 57 minutes ? (I specifically would like to know whether it is including the time it takes the build macro to generate (&lt; 2 mins) and rustfmt <a href=\"http://winrt.rs\">winrt.rs</a> (around 20 mins here))</p>",
        "id": 204706294,
        "sender_full_name": "lqd",
        "timestamp": 1595443508
    },
    {
        "content": "<p>You can’t run it on Linux but we can easily change that. It’s meant for Windows but most of the code should not rely on platform specific stuff</p>",
        "id": 204716159,
        "sender_full_name": "rylev",
        "timestamp": 1595448542
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> are you saying rustfmt takes 20 minutes on your machine? To be honest I hadn’t checked how long that step took for the stress test</p>",
        "id": 204716350,
        "sender_full_name": "rylev",
        "timestamp": 1595448622
    },
    {
        "content": "<p>yes</p>",
        "id": 204716380,
        "sender_full_name": "lqd",
        "timestamp": 1595448635
    },
    {
        "content": "<p>it's still slow to build whether it's 40 minutes or 1h20 minutes don't get me wrong</p>",
        "id": 204716438,
        "sender_full_name": "lqd",
        "timestamp": 1595448666
    },
    {
        "content": "<p>but if it's included that's an easy win</p>",
        "id": 204716468,
        "sender_full_name": "lqd",
        "timestamp": 1595448684
    },
    {
        "content": "<p>Yes it’s included so the build time is 40 minutes</p>",
        "id": 204716608,
        "sender_full_name": "rylev",
        "timestamp": 1595448741
    },
    {
        "content": "<p>Which is a better starting point</p>",
        "id": 204716634,
        "sender_full_name": "rylev",
        "timestamp": 1595448750
    },
    {
        "content": "<p>(I'm looking around to gather statistics)</p>",
        "id": 204716692,
        "sender_full_name": "lqd",
        "timestamp": 1595448778
    },
    {
        "content": "<p>(I also hope it's not my setup being weird and slow for rustfmt)</p>",
        "id": 204716858,
        "sender_full_name": "lqd",
        "timestamp": 1595448844
    },
    {
        "content": "<p>knowing whether it was a check/debug/release build will still be helpful, especially if it's a check build where we can rule out a big chunk of the compiler</p>",
        "id": 204717176,
        "sender_full_name": "lqd",
        "timestamp": 1595448992
    },
    {
        "content": "<p>It’s a debug build.</p>",
        "id": 204717676,
        "sender_full_name": "rylev",
        "timestamp": 1595449226
    },
    {
        "content": "<p>great, thank you</p>",
        "id": 204717711,
        "sender_full_name": "lqd",
        "timestamp": 1595449253
    },
    {
        "content": "<p>I’ll crate an issue with rustfmt to see if we can figure out why that’s taking so long</p>",
        "id": 204717764,
        "sender_full_name": "rylev",
        "timestamp": 1595449298
    },
    {
        "content": "<p>yeah if you can also reproduce the slowness</p>",
        "id": 204717985,
        "sender_full_name": "lqd",
        "timestamp": 1595449396
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/187831-t-compiler.2Fwg-self-profile/topic/stress-test/near/204657854\">said</a>:</p>\n<blockquote>\n<p>But how long does compiling a 160 MB <code>.cpp</code> file take?</p>\n</blockquote>\n<p>the readme was updated in the meantime and it mentions <a href=\"https://github.com/kennykerr/stress-rs/commit/17bbbeb5ad925021cc0d6b28700d8934babf93cb\">around 90 seconds</a> (maybe with parallelism ?)</p>",
        "id": 204724841,
        "sender_full_name": "lqd",
        "timestamp": 1595453148
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224872\">Ryan Levick</span> <a href=\"#narrow/stream/187831-t-compiler.2Fwg-self-profile/topic/stress-test/near/204716159\">said</a>:</p>\n<blockquote>\n<p>You can’t run it on Linux but we can easily change that. It’s meant for Windows but most of the code should not rely on platform specific stuff</p>\n</blockquote>\n<p><code>cargo check</code> working on linux is enough for most compiler work, and would basically be necessary for most of our performance people to look at it I think -- at least I for one don't have windows</p>",
        "id": 204726368,
        "sender_full_name": "simulacrum",
        "timestamp": 1595454265
    },
    {
        "content": "<p>Here's a version of the project that compiles on non-windows platforms: <a href=\"https://github.com/rylev/stress-rs\">https://github.com/rylev/stress-rs</a> Follow the build instructions in the README.<br>\nOn my machine it takes ~23 minutes to run cargo check.</p>",
        "id": 204785306,
        "sender_full_name": "rylev",
        "timestamp": 1595504214
    },
    {
        "content": "<p>Though roughly two minutes of that was code generation</p>",
        "id": 204785495,
        "sender_full_name": "rylev",
        "timestamp": 1595504419
    },
    {
        "content": "<p>cargo build \"only\" takes 37 minutes on my machine. Not sure why the large difference to my colleague</p>",
        "id": 204789699,
        "sender_full_name": "rylev",
        "timestamp": 1595507367
    },
    {
        "content": "<p>(on mine: this cargo checks in around 20 mins, rustfmt this time around 1 min; the generated <a href=\"http://winrt.rs\">winrt.rs</a> is 6.6M lines which is double what we expected but that could be a difference due to formatting -- update: a meaningless difference)</p>",
        "id": 204793050,
        "sender_full_name": "lqd",
        "timestamp": 1595509192
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224872\">Ryan Levick</span> <a href=\"#narrow/stream/187831-t-compiler.2Fwg-self-profile/topic/stress-test/near/204789699\">said</a>:</p>\n<blockquote>\n<p>cargo build \"only\" takes 37 minutes on my machine. Not sure why the large difference to my colleague</p>\n</blockquote>\n<p>What version is used by you and your colleague?</p>",
        "id": 204795213,
        "sender_full_name": "bjorn3",
        "timestamp": 1595510169
    },
    {
        "content": "<p>I don't think it's just a version difference, on 1.45 the xplatform repro builds in 22mins in my WSL1, and will behave as kenny/my repro on windows, with rustfmt consuming a core for dozens of minutes, finishing overall in 45mins</p>",
        "id": 204809816,
        "sender_full_name": "lqd",
        "timestamp": 1595516857
    },
    {
        "content": "<p>(if Ryan wants more info about my numbers, in case they match Kenny's: here's some traces <a href=\"https://gist.github.com/lqd/0bd4cae82f43334701fa2062bac13070\">https://gist.github.com/lqd/0bd4cae82f43334701fa2062bac13070</a> there are 1) forcing a panic after rustfmt (as your last println doesn't work for some reason; also a cool API to know is <code>Instant::elapsed()</code> no need to <code>t2 - t1</code> manually) on both the windows repro and xplatform repro on windows =&gt; 20 mins of formatting, 2) skipping formatting on the windows repro to build in 22 mins, 3) building with formatting turned on, on the xplatform repro on WSL to build in 22 mins)</p>",
        "id": 204821789,
        "sender_full_name": "lqd",
        "timestamp": 1595522395
    },
    {
        "content": "<p>my suspicion is that it's related to the <code>specialization_graph_of</code> query of coherence checking, it's gradually taking more and more time as more bindings are added. (it may be all the <code>From</code> impls but that's conjecture)</p>",
        "id": 204854600,
        "sender_full_name": "lqd",
        "timestamp": 1595539054
    },
    {
        "content": "<p>coherence checking is O(n²) in the number of impls for any given trait</p>",
        "id": 204854739,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595539140
    },
    {
        "content": "<p>and the n is sufficiently large to be noticeable here</p>",
        "id": 204854843,
        "sender_full_name": "lqd",
        "timestamp": 1595539218
    },
    {
        "content": "<p>I did some optimizations on this in the past, since it also shows up in profiles for some generated crates for embedded</p>",
        "id": 204854863,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595539236
    },
    {
        "content": "<p>(<code>resolve_crate</code> is taking a while also)</p>",
        "id": 204854868,
        "sender_full_name": "lqd",
        "timestamp": 1595539240
    },
    {
        "content": "<p>(the rest like <code>typeck_tables_of</code>, borrowck and evaluating obligations are not slow in aggregate either, but the count is very big so that's understandable)</p>",
        "id": 204855166,
        "sender_full_name": "lqd",
        "timestamp": 1595539460
    },
    {
        "content": "<p>would you happen to know whether the specialization graph query is only used for specialization (or maybe I should ask Matthew, or actually look it up myself...) ?</p>",
        "id": 204855395,
        "sender_full_name": "lqd",
        "timestamp": 1595539607
    },
    {
        "content": "<p>Building the specialization graph is what checks for overlap between impls</p>",
        "id": 204855602,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595539743
    },
    {
        "content": "<p>alright, thanks !</p>",
        "id": 204855668,
        "sender_full_name": "lqd",
        "timestamp": 1595539797
    },
    {
        "content": "<p>ah right right your <a href=\"https://github.com/rust-lang/rust/issues/68966\">#68966</a></p>",
        "id": 204856337,
        "sender_full_name": "lqd",
        "timestamp": 1595540204
    },
    {
        "content": "<p>(I wonder about the state of coherence in chalk, and if they have a different strategy than rustc's)</p>",
        "id": 204857572,
        "sender_full_name": "lqd",
        "timestamp": 1595541006
    },
    {
        "content": "<p>hmm, is chalk supposed to do coherence checking?</p>",
        "id": 204857833,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595541153
    },
    {
        "content": "<p>at some point I assume, sunjay did a talk about it 2y ago</p>",
        "id": 204859053,
        "sender_full_name": "lqd",
        "timestamp": 1595542040
    },
    {
        "content": "<p>but I don't really know :)</p>",
        "id": 204859166,
        "sender_full_name": "lqd",
        "timestamp": 1595542122
    },
    {
        "content": "<p>eddy must be hitting this too in their trait system performance work (or will be)</p>",
        "id": 204859234,
        "sender_full_name": "lqd",
        "timestamp": 1595542193
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/187831-t-compiler.2Fwg-self-profile/topic/stress-test/near/204795213\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"224872\">Ryan Levick</span> <a href=\"#narrow/stream/187831-t-compiler.2Fwg-self-profile/topic/stress-test/near/204789699\">said</a>:</p>\n<blockquote>\n<p>cargo build \"only\" takes 37 minutes on my machine. Not sure why the large difference to my colleague</p>\n</blockquote>\n<p>What version is used by you and your colleague?</p>\n</blockquote>\n<p>We're both testing with the current stable. We did seem some differences across intel and AMD based machines with intel being signficantlly faster.</p>",
        "id": 204859894,
        "sender_full_name": "rylev",
        "timestamp": 1595542693
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@Ryan Levick</span> do you test on windows or wsl ? are kennykerr's numbers on amd ? does either of you reproduce what I'm seeing wrt rustfmt ? (I'm on an intel machine fwiw)</p>",
        "id": 204860213,
        "sender_full_name": "lqd",
        "timestamp": 1595542934
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> We're both testing on Windows proper. I've also built on macOS. On macOS as I've said cargo build takes around 37 minutes and on my Windows it takes 25 minutes.  Here's a link to Kenny's numbers. He was able to run on both an AMD and Intel machine (<a href=\"https://github.com/microsoft/winrt-rs/issues/222#issuecomment-663281961\">https://github.com/microsoft/winrt-rs/issues/222#issuecomment-663281961</a>). rustfmt takes ~50 seconds or less on every machine I've tested on.</p>",
        "id": 204889880,
        "sender_full_name": "rylev",
        "timestamp": 1595578506
    },
    {
        "content": "<p>thanks</p>",
        "id": 204890033,
        "sender_full_name": "lqd",
        "timestamp": 1595578639
    },
    {
        "content": "<p>at least we have some numbers on the slow parts, I'll try to see whether turning on parallelism improves things just so we have an idea</p>",
        "id": 204890134,
        "sender_full_name": "lqd",
        "timestamp": 1595578705
    },
    {
        "content": "<p>The C++ (MSVC) equivalent takes less than a minute on my machine.</p>",
        "id": 204890149,
        "sender_full_name": "rylev",
        "timestamp": 1595578719
    },
    {
        "content": "<p>What's the state of parallelism in rustc today?</p>",
        "id": 204890166,
        "sender_full_name": "rylev",
        "timestamp": 1595578730
    },
    {
        "content": "<p>I'm not up-to-date on the details (mark can comment if I say something wrong) it seems to be working but there are some suboptimal locking and possible bugs, which could require more architectural changes. I don't think it's tested on CI and could have regressed recently. From all this and perf numbers it's believed that this particular implementation will not substantially improve things overall IIRC</p>",
        "id": 204890342,
        "sender_full_name": "lqd",
        "timestamp": 1595578896
    },
    {
        "content": "<p>(and so is not an area of focus rn, hence the not-tested on CI parts as well -- again that's my own possibly flawed recollection)</p>",
        "id": 204890413,
        "sender_full_name": "lqd",
        "timestamp": 1595578944
    },
    {
        "content": "<p>It's also extremely likely that the code we're generating is not ideal. One thing the Rust code has to do that the C++ code gets for free is simular inheritance with a bunch of From&lt;T&gt; impls. Perhaps there's a way to improve this</p>",
        "id": 204890565,
        "sender_full_name": "rylev",
        "timestamp": 1595579066
    },
    {
        "content": "<p>this benchmark is however so single-threaded that it's worth trying at least, to see if the implementation indeed matches the belief</p>",
        "id": 204890570,
        "sender_full_name": "lqd",
        "timestamp": 1595579076
    },
    {
        "content": "<p>I want to check this as well but yes I hav a feeling about all the From impls contributing to most of the coherence slowness</p>",
        "id": 204890602,
        "sender_full_name": "lqd",
        "timestamp": 1595579128
    },
    {
        "content": "<p>(which takes 50% of a check run of the full bindings crate)</p>",
        "id": 204890694,
        "sender_full_name": "lqd",
        "timestamp": 1595579195
    },
    {
        "content": "<p>Can you post the findings from your perf test? Do you have a flamegraph I could look at?</p>",
        "id": 204890849,
        "sender_full_name": "rylev",
        "timestamp": 1595579296
    },
    {
        "content": "<p>I see the trace you posted above. Taking a look...</p>",
        "id": 204890952,
        "sender_full_name": "rylev",
        "timestamp": 1595579388
    },
    {
        "content": "<p>that trace was just a sysout, I'll post the summarize output in just a sec (and will be back at lunch break)</p>",
        "id": 204891200,
        "sender_full_name": "lqd",
        "timestamp": 1595579582
    },
    {
        "content": "<p>(I'm sure you did this already) quick summary of the self profiling <a href=\"https://gist.github.com/lqd/1fd734846f522de01da87adc59f8c66e\">https://gist.github.com/lqd/1fd734846f522de01da87adc59f8c66e</a> + <a href=\"/user_uploads/4715/2LvTXeKsvlIhNPjnxk0QlkL5/chrome_profiler.zip\">zipped crox output for the chrome profiler</a></p>",
        "id": 204891515,
        "sender_full_name": "lqd",
        "timestamp": 1595579844
    },
    {
        "content": "<p>ok this looks like a complex query that is not already parallelized</p>",
        "id": 204898747,
        "sender_full_name": "lqd",
        "timestamp": 1595585479
    },
    {
        "content": "<p>and it seems rarely exercized in our benchmarks besides packed-simd like <span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> said, maybe we do need a synthetic benchmark for it</p>",
        "id": 204899372,
        "sender_full_name": "lqd",
        "timestamp": 1595585913
    },
    {
        "content": "<p>yeah we don't have much self-profiling data for theses parts of the compiler, so a profiler will have to do just to narrow it down, but the belief is that at least coherence and overlap checks will be slower the more impls there are, so here are stats about that (over the whole crate graph in this example so there will be duplicates for shared dependencies and core) <a href=\"https://gist.github.com/lqd/d4aa24189260495d53de65f3cc14d2e6\">https://gist.github.com/lqd/d4aa24189260495d53de65f3cc14d2e6</a> we can see that there are indeed a lot, 10 traits or so have 10000-60000 impls. Lowering that number somehow, and also I assume splitting into more crates if possible, would make the bindings crate compile faster; (apart from focusing on fixing in rustc these specific parts which scale badly with bigger crates; maybe parallelizing some parts, etc)</p>",
        "id": 204927363,
        "sender_full_name": "lqd",
        "timestamp": 1595603195
    },
    {
        "content": "<p>for some unfortunate reason <code>perf</code> is now only seeing a small number of rustc function names, so the flamegraph is not super useful, but <a href=\"https://gist.github.com/lqd/479826a0a6169c7bb0c03f26dd69304d\">here it is anyway</a>, the part we're interested in is in the left, that's the things related to the specialization graph, coherence, etc. <a href=\"/user_uploads/4715/tjGGgn5E6p3nh6JhBOtN-gup/image.png\">Highlighted here</a>.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/tjGGgn5E6p3nh6JhBOtN-gup/image.png\" title=\"Highlighted here\"><img src=\"/user_uploads/4715/tjGGgn5E6p3nh6JhBOtN-gup/image.png\"></a></div>",
        "id": 205049236,
        "sender_full_name": "lqd",
        "timestamp": 1595764707
    },
    {
        "content": "<p>For some other unfortunate reason, <code>callgrind</code> doesn't see much more than a big cycle taking 50% of runtime. (All those unfortunate reasons would be solved if I did those things outside a VM for sure, but I don't have access to my work linux box ATM). So I turned to tracing everything in our self-profiling infrastructure, which unfortunately doesn't scale to huge profiles like what I was trying (this is known and rarely a problem IME).</p>",
        "id": 205049249,
        "sender_full_name": "lqd",
        "timestamp": 1595764760
    },
    {
        "content": "<p>but that did give me the opportunity to try my tracy integration prototype with a big profile, and tracy appears to work absolutely fine (38M profiled areas, most lasting in the microsecs). I did this last test with maybe half of the bindings, so a nightly cargo check would take around 4 mins, and this one with debug assertions + self-profiling + tracy profiling, took around 6mins</p>",
        "id": 205049256,
        "sender_full_name": "lqd",
        "timestamp": 1595764782
    },
    {
        "content": "<p>Of those we can attribute 3mins to <a href=\"https://github.com/rust-lang/rust/blob/13f9aa190957b993a268fd4a046fce76ca8814ee/src/librustc_trait_selection/traits/specialize/specialization_graph.rs#L150-L202\">this part of the coherence check</a>, checking for overlapping impls like we expected (it's the O(n²) thing that starts to be noticeable on such big crates). It is itself fast (4-5 us in avg, but varies for different impl couples) but gets called 37M times.</p>",
        "id": 205049297,
        "sender_full_name": "lqd",
        "timestamp": 1595764803
    },
    {
        "content": "<p>Just to show what it looks like, <a href=\"/user_uploads/4715/gn_3oEa9Klgq7oxmNiPOtY5K/image.png\">this is a screenshot</a> of a small part of the tracy profile, with the statistics of the small number of zones I was profiling in <code>librustc_trait_selection</code> here. (The big rectangle at the top has its stats in the lower left, it's taking 45ms, and hierarchically contains (like an inverted flamegraph, the rectangles visually under it) thousands of the small overlapping impls checks I mentioned earlier and whose aggregate stats are shown in the stats window on the right)</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/gn_3oEa9Klgq7oxmNiPOtY5K/image.png\" title=\"this is a screenshot\"><img src=\"/user_uploads/4715/gn_3oEa9Klgq7oxmNiPOtY5K/image.png\"></a></div>",
        "id": 205049315,
        "sender_full_name": "lqd",
        "timestamp": 1595764827
    },
    {
        "content": "<p>Might want to try something like <a href=\"https://github.com/rust-lang/rust/pull/69010\">https://github.com/rust-lang/rust/pull/69010</a></p>",
        "id": 205049345,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595764910
    },
    {
        "content": "<p>interesting, thank you. I can take a look at profiling it with that PR.</p>",
        "id": 205049412,
        "sender_full_name": "lqd",
        "timestamp": 1595765025
    },
    {
        "content": "<p>I feel the biggest gains would be in lowering the number of checks (which as you've seen is easier said than done) more so than making each check faster, but that probably couldn't hurt this specific case</p>",
        "id": 205049486,
        "sender_full_name": "lqd",
        "timestamp": 1595765140
    },
    {
        "content": "<p>We could index each impl by the simplified self type</p>",
        "id": 205049575,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595765245
    },
    {
        "content": "<p>rust-analyzer is doing that</p>",
        "id": 205049583,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595765270
    },
    {
        "content": "<p>Can someone put up the generated source code? I can't build the project (<code>error: 'rustfmt' is not installed for the toolchain 'stage1'</code>)</p>",
        "id": 205049628,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595765317
    },
    {
        "content": "<p>early returns, more caching for the compute (to bypass the fresh vars, unification, etc), that's also probably one of the rare cases where parallelisation would be easy and work ok (but just hiding the problem under the rug)</p>",
        "id": 205049647,
        "sender_full_name": "lqd",
        "timestamp": 1595765359
    },
    {
        "content": "<p>the generated file is 300MB, let met show you how to disable rustfmt</p>",
        "id": 205049657,
        "sender_full_name": "lqd",
        "timestamp": 1595765380
    },
    {
        "content": "<p>turn this <a href=\"https://github.com/rylev/stress-rs/blob/master/winrt-rs/crates/macros/src/lib.rs#L110\">build macro</a> into <a href=\"https://gist.github.com/lqd/d6ef8b76dd4d5f4871f4d4d8bcfb53f5\">this</a></p>",
        "id": 205049726,
        "sender_full_name": "lqd",
        "timestamp": 1595765485
    },
    {
        "content": "<p>commenting some/most of <a href=\"https://github.com/rylev/stress-rs/blob/master/bindings/build.rs\">https://github.com/rylev/stress-rs/blob/master/bindings/build.rs</a> will make the generated file smaller</p>",
        "id": 205049793,
        "sender_full_name": "lqd",
        "timestamp": 1595765563
    },
    {
        "content": "<p>I didn't try on stage1 so I'm not sure how much smaller it should be to be comfortable, but on stage2 the first line of the bindings is like &lt;10s, while the first 100-150 or so are what I reported earlier, 4-6mins</p>",
        "id": 205049910,
        "sender_full_name": "lqd",
        "timestamp": 1595765752
    },
    {
        "content": "<p>(browsing around the generated file, I could have missed some, but complex generic impls didn't jump at me, so maybe the early return would be a win here, so I'll try that now)</p>",
        "id": 205050397,
        "sender_full_name": "lqd",
        "timestamp": 1595766689
    },
    {
        "content": "<p>(yeah I think it'd early reject the overwhelming majority of the ones I've seen)</p>",
        "id": 205052357,
        "sender_full_name": "lqd",
        "timestamp": 1595770144
    },
    {
        "content": "<p>I'll play around with the indexing strategy</p>",
        "id": 205052947,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595771157
    },
    {
        "content": "<p>sweet !</p>",
        "id": 205053359,
        "sender_full_name": "lqd",
        "timestamp": 1595771964
    },
    {
        "content": "<p>Hmm, it seems that there's already some filtering based on SimplifiedTypes going on here: <a href=\"https://github.com/rust-lang/rust/blob/13f9aa190957b993a268fd4a046fce76ca8814ee/src/librustc_trait_selection/traits/specialize/specialization_graph.rs#L90-L93\">https://github.com/rust-lang/rust/blob/13f9aa190957b993a268fd4a046fce76ca8814ee/src/librustc_trait_selection/traits/specialize/specialization_graph.rs#L90-L93</a></p>",
        "id": 205054490,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595774059
    },
    {
        "content": "<p>it's not super clear to me why your early-rejection PR was a slight loss on the other benchmarks, but here, assuming I didn't screw anything up bringing the code over (and I didn't run the tests), it looks to be worth it as most impls do not overlap (on the previous reduced bindings test it was 37M early rejections and  &lt;100K full checks). On the full bindings test it looked like a 45% win, a reduction of around 7mins)</p>",
        "id": 205057575,
        "sender_full_name": "lqd",
        "timestamp": 1595779821
    },
    {
        "content": "<p>Wow, of the <em>total</em> compile time?</p>",
        "id": 205057589,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595779894
    },
    {
        "content": "<p>It's weird that the existing logic apparently doesn't suffice.</p>",
        "id": 205057638,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595779950
    },
    {
        "content": "<p>yes the total time of the bindings + the main</p>",
        "id": 205057641,
        "sender_full_name": "lqd",
        "timestamp": 1595779955
    },
    {
        "content": "<p>(but not including the dependencies)</p>",
        "id": 205057645,
        "sender_full_name": "lqd",
        "timestamp": 1595779966
    },
    {
        "content": "<p>there's 2mins or so to generate the file, and that + the rest took 20 mins (on this build w/ assertions, etc) and now it's in the &lt;13 mins</p>",
        "id": 205057663,
        "sender_full_name": "lqd",
        "timestamp": 1595780031
    },
    {
        "content": "<p>Nice!</p>",
        "id": 205057705,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595780059
    },
    {
        "content": "<p>I'm not sure what the existing logic does either wrt the simplified types</p>",
        "id": 205057777,
        "sender_full_name": "lqd",
        "timestamp": 1595780193
    },
    {
        "content": "<p>but it doesn't seem to be preventing doing the full checks when they can't be overlap</p>",
        "id": 205057791,
        "sender_full_name": "lqd",
        "timestamp": 1595780265
    },
    {
        "content": "<p>again, grain of salt, but it seems you already did a great job on that case :)</p>",
        "id": 205057842,
        "sender_full_name": "lqd",
        "timestamp": 1595780346
    },
    {
        "content": "<p>If it still spends too much time in coherence I suppose it might be worth to look into the inherent impl overlap check again <a href=\"https://github.com/rust-lang/rust/pull/69009\">https://github.com/rust-lang/rust/pull/69009</a></p>",
        "id": 205057980,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595780587
    },
    {
        "content": "<p>Interestingly that PR caused regressions in the only test I expected it would improve, so that's odd.</p>",
        "id": 205057994,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595780637
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> every crate that implements <code>Clone</code> involves coherence checks of all impls against this odd (negative!) impl from libcore:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"nb\">Clone</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 205058832,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595782115
    },
    {
        "content": "<p>you mean the 1.5%/10ms regression in packed simd in the incremental case ? could be just noise. but we’d assume there’d been gains there if it’s more or less the only one exercizing coherence</p>",
        "id": 205060518,
        "sender_full_name": "lqd",
        "timestamp": 1595785087
    },
    {
        "content": "<p>Yeah, it does stress coherence quite a bit (though mostly via trait impls, not inherent ones)</p>",
        "id": 205060577,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595785212
    },
    {
        "content": "<p>it might still be a case of exercizing more than the others but still not that much (and certainly far less than this bindings crate)</p>",
        "id": 205060578,
        "sender_full_name": "lqd",
        "timestamp": 1595785215
    },
    {
        "content": "<p><code>crate_inherent_impls_overlap_check</code> got slower by ~80%, so I don't think it's noise</p>",
        "id": 205060581,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595785230
    },
    {
        "content": "<p>ah right I missed that one it’s not in red in the profile for some reason (maybe that the absolute value is small)</p>",
        "id": 205060651,
        "sender_full_name": "lqd",
        "timestamp": 1595785363
    },
    {
        "content": "<p>yeah the query view only marks execution count differences with color for some reason</p>",
        "id": 205060730,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595785516
    },
    {
        "content": "<p>we shouldn’t really be computing much during coherence if nothing changed in incremental either way</p>",
        "id": 205060732,
        "sender_full_name": "lqd",
        "timestamp": 1595785521
    },
    {
        "content": "<p>hmm, maybe coherence queries aren't persisted?</p>",
        "id": 205060790,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595785669
    },
    {
        "content": "<p>it seems some things are but I’m not sure what :/</p>",
        "id": 205060835,
        "sender_full_name": "lqd",
        "timestamp": 1595785715
    },
    {
        "content": "<p>it won’t hurt to try your change making the checks linear so I’ll do that</p>",
        "id": 205060848,
        "sender_full_name": "lqd",
        "timestamp": 1595785777
    },
    {
        "content": "<p>ah no it doesn't really stress the inherent overlap checker</p>",
        "id": 205061238,
        "sender_full_name": "lqd",
        "timestamp": 1595786457
    },
    {
        "content": "<p>so it really is something we don't seem to track, heavy on coherence but differently from packed-simd</p>",
        "id": 205061253,
        "sender_full_name": "lqd",
        "timestamp": 1595786500
    },
    {
        "content": "<p>svd2rust-generated crates also fall into that category</p>",
        "id": 205061377,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595786676
    },
    {
        "content": "<p>(this bindings crate is also synthetic-like of course, having lot of impls to match an OOP API, so it's unclear to me how widespread the issue is)</p>",
        "id": 205061380,
        "sender_full_name": "lqd",
        "timestamp": 1595786698
    },
    {
        "content": "<p>ah interesting</p>",
        "id": 205061388,
        "sender_full_name": "lqd",
        "timestamp": 1595786709
    },
    {
        "content": "<p>Compile times are a fairly big issue with svd2rust crates. Some SVD files are so complex that the resulting crates simply doesn't compile at all (rustc runs out of memory).</p>",
        "id": 205061504,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595786956
    },
    {
        "content": "<p>Well, that's compiler memory, but compiletimes are a similar problem</p>",
        "id": 205061510,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595786974
    },
    {
        "content": "<p>there might be some common ways to do things in generated crates, compounded with the amount of generated code, that we don't see elsewhere. It makes sense of course, with bounded perf CI resources.</p>",
        "id": 205061849,
        "sender_full_name": "lqd",
        "timestamp": 1595787557
    },
    {
        "content": "<p>the timing is not super stable (with at least 10s variance in some queries which didn't change), but here's a summary of the early rejection on this case (it probably still has the same behaviour as the PR's results on smaller crates)<br>\nbefore - slowest query: <code>  | specialization_graph_of             | 519.83s   | 45.171          | 519.99s  | 24</code><br>\nafter - 2nd slowest query: <code>| specialization_graph_of             | 93.81s    | 11.612          | 93.99s   | 24</code><br>\n<a href=\"https://gist.github.com/lqd/acca04b0489e614c8840072d15e0e98e\">full self-profile results here</a></p>",
        "id": 205068743,
        "sender_full_name": "lqd",
        "timestamp": 1595800174
    },
    {
        "content": "<p>It seems that the additional fast_reject will weed out Into and From impls very quickly, and there's tens of thousands of them</p>",
        "id": 205069127,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595800922
    },
    {
        "content": "<p>Hmm, but the existing simplify_type categorization should <em>also</em> help there, since the self type is always different</p>",
        "id": 205069161,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595800960
    },
    {
        "content": "<p>Ah, found the issue, it's all the <code>From&lt;Type&gt; for winrt::Object</code> impls. The self type is always the same, but the additional simplify_type logic quickly rules out most impls since <code>Type</code> is always concrete</p>",
        "id": 205071068,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595804717
    },
    {
        "content": "<p>I hope there's a way to make coherence not O(n²) in the worst case though... Seems like that's kind of important for making Rust's compilation model more scalable.</p>",
        "id": 205071076,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595804761
    },
    {
        "content": "<p>agreed completely</p>",
        "id": 205082356,
        "sender_full_name": "lqd",
        "timestamp": 1595826525
    },
    {
        "content": "<p>those and other impls seemed possible to be split to other crates to have the same results as fast rejecting (but maybe detrimental to the ease of use of the API ?)</p>",
        "id": 205082710,
        "sender_full_name": "lqd",
        "timestamp": 1595827113
    },
    {
        "content": "<p>Awesome stuff y'all! Great to see we're already finding places where we might be able to make significant gains.</p>",
        "id": 205091220,
        "sender_full_name": "rylev",
        "timestamp": 1595837931
    },
    {
        "content": "<p>As for moving to other crates, that's totally possible. The likelihood that a user would generate _this_ much code is relatively low, but it would not be uncommon to generate ~20-30% of this in a single crate so it's definitely an issue worth solving.</p>",
        "id": 205091782,
        "sender_full_name": "rylev",
        "timestamp": 1595838466
    },
    {
        "content": "<p>Out of curiousity what is the resolve_crate step doing?</p>",
        "id": 205092346,
        "sender_full_name": "rylev",
        "timestamp": 1595838946
    },
    {
        "content": "<p>I think it's the name resolution parts, for imports, macros, types, etc (or at least one of its phases)</p>",
        "id": 205093944,
        "sender_full_name": "lqd",
        "timestamp": 1595840402
    },
    {
        "content": "<p>(I might have to pause looking at this for a short while to have the time to prepare for the polonius workweek next week)</p>",
        "id": 205158539,
        "sender_full_name": "lqd",
        "timestamp": 1595878240
    },
    {
        "content": "<p>Hey all - Wondering how I can help make progress here. Any tasks I can take over?</p>",
        "id": 206439710,
        "sender_full_name": "rylev",
        "timestamp": 1597049300
    },
    {
        "content": "<p>one task which could be interesting is trying to understand the results of the <a href=\"https://github.com/rust-lang/rust/pull/69010\">early exit PR</a> on smaller crates, it seemed like a pessimization on some cases, which is why it wasn't pursued further. If this can be mitigated, or at least understood, it would help in weighing the PR cost vs its gains; we may need a stress case of just this part of coherence if we wanted to track the performance over time, but I'm not sure if simulacrum or njn would agree</p>",
        "id": 206440276,
        "sender_full_name": "lqd",
        "timestamp": 1597049885
    },
    {
        "content": "<p>otherwise, the other big chunk in the profile was resolving, and investigating that seemed worthwhile as well</p>",
        "id": 206440329,
        "sender_full_name": "lqd",
        "timestamp": 1597049964
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> would you have anytime soon to pair with this on me?</p>",
        "id": 208584600,
        "sender_full_name": "rylev",
        "timestamp": 1598892257
    },
    {
        "content": "<p>ah sorry I should have said I was away on vacation for a few days and since my return work has been hectic, limiting my free time quite a lot :/ what did you have in mind ?</p>",
        "id": 208587520,
        "sender_full_name": "lqd",
        "timestamp": 1598893672
    },
    {
        "content": "<p>did you want to look at specific results or investigate the things we mentioned earlier maybe ?</p>",
        "id": 208587640,
        "sender_full_name": "lqd",
        "timestamp": 1598893726
    },
    {
        "content": "<p>I'd like to run through some of the investigation steps together since I have less experience working through this</p>",
        "id": 208693036,
        "sender_full_name": "rylev",
        "timestamp": 1598969871
    },
    {
        "content": "<p>doing this synchronously will be tough in the near future, but I could more easily try to write up a description of that part of the process if that would help ?</p>",
        "id": 208927692,
        "sender_full_name": "lqd",
        "timestamp": 1599116695
    },
    {
        "content": "<p>That certainly would! It would be much appreciated</p>",
        "id": 208937552,
        "sender_full_name": "rylev",
        "timestamp": 1599122917
    }
]