[
    {
        "content": "<p>Hello, after reading the blog post, it seems there's indeed a large fraction of time consumed in waiting for llvm operations complete, especially generating obj files on disk. This makes me wonder that whether asking llvm to generate such data in memory and write them to disk only when absolutely necessary (then in batch) will improve compiling performance.</p>",
        "id": 189100065,
        "sender_full_name": "Charles Lew",
        "timestamp": 1582711351
    },
    {
        "content": "<p>The <code>LLVM_module_codegen_emit_obj</code> step includes going from LLVM IR to object file contents in the first place, it's not just writing stuff to disk. I don't have numbers but I don't see any reason to expect that the I/O takes any significant fraction of that time, most or all of it should be taken up by real work needed for code generation.</p>\n<p>It's also not clear to me if buffering entire files in memory would even help -- even if it would save a roundtrip through the file system (only possible for some output formats), if there's enough free memory to keep the file in memory then the OS might cache it anyway if it gets written to disk &amp; read back.</p>",
        "id": 189109402,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1582720059
    },
    {
        "content": "<p>I've been a little confused by <code>finish_ongoing_codegen</code> -- I don't think it finishes anything, it just waits for codegen to finish on other threads. And if that takes too long, it's not necessarily because of IO.</p>",
        "id": 189110632,
        "sender_full_name": "Lauren»õiu",
        "timestamp": 1582721255
    },
    {
        "content": "<p>It seems from (people's experience)[ <a href=\"https://users.rust-lang.org/t/stylistic-guide-for-speeding-up-compile-time/29592/11?u=crlf0710\" target=\"_blank\" title=\"https://users.rust-lang.org/t/stylistic-guide-for-speeding-up-compile-time/29592/11?u=crlf0710\">https://users.rust-lang.org/t/stylistic-guide-for-speeding-up-compile-time/29592/11?u=crlf0710</a> ], in reality disk I/O is currently a major affecting factor for compilation times. However there're other steps that are IO-heavy (like linking etc) so i'm not sure how much of that belongs to the <code>LLVM_module_codegen_emit_obj</code> step.</p>",
        "id": 189114182,
        "sender_full_name": "Charles Lew",
        "timestamp": 1582724388
    },
    {
        "content": "<p>Somebody had a 2x improvement by switching from NFS to an SSD: <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/865#issuecomment-574747252\" target=\"_blank\" title=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/865#issuecomment-574747252\">https://github.com/bjorn3/rustc_codegen_cranelift/issues/865#issuecomment-574747252</a></p>",
        "id": 189124565,
        "sender_full_name": "bjorn3",
        "timestamp": 1582731046
    }
]