[
    {
        "content": "<p><a href=\"https://www.reddit.com/r/rust/comments/9s785u/ownedalloc_a_crate_to_help_reducing_manual_memory/\" target=\"_blank\" title=\"https://www.reddit.com/r/rust/comments/9s785u/ownedalloc_a_crate_to_help_reducing_manual_memory/\">https://www.reddit.com/r/rust/comments/9s785u/ownedalloc_a_crate_to_help_reducing_manual_memory/</a><br>\nSomeone's made a safe abstraction for writing lock-free data structures. Should we maybe assemble a list of such things? I just randomly stumble upon these. Once I feel I can't make my code fast without <code>unsafe</code> there is no repository of existing safe abstractions that would maybe solve my problem</p>",
        "id": 136786972,
        "sender_full_name": "Shnatsel",
        "timestamp": 1540915937
    },
    {
        "content": "<p>I think that's a good idea. What do other folks think? It'd be nice if there were a single place to go when you want to do something unsafe and you're wondering whether there's a crate that does it for you.</p>",
        "id": 136805227,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1540931821
    },
    {
        "content": "<p>Yes, I think that'd be super helpful.</p>",
        "id": 136807381,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1540933844
    },
    {
        "content": "<p>I think we could definitely use some lists of recommended crates</p>",
        "id": 136957939,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1541115596
    },
    {
        "content": "<p>I just stumbled upon this crate, might be worth keeping an eye out for: <a href=\"https://crates.io/crates/unsafesc\" target=\"_blank\" title=\"https://crates.io/crates/unsafesc\">https://crates.io/crates/unsafesc</a></p>",
        "id": 146860902,
        "sender_full_name": "brycx",
        "timestamp": 1541506168
    },
    {
        "content": "<p>A  safe-ish abstraction for <code>mem::transmute</code> <a href=\"https://github.com/nabijaczleweli/safe-transmute-rs\" target=\"_blank\" title=\"https://github.com/nabijaczleweli/safe-transmute-rs\">https://github.com/nabijaczleweli/safe-transmute-rs</a>.</p>",
        "id": 148194956,
        "sender_full_name": "brycx",
        "timestamp": 1542920556
    },
    {
        "content": "<p>Are you planning to implement alignment checks?</p>",
        "id": 148198350,
        "sender_full_name": "JP Sugarbroad",
        "timestamp": 1542927537
    },
    {
        "content": "<p>FYI armv6 says that unaligned access is <em>unpredictable</em>. <a href=\"https://medium.com/@iLevex/the-curious-case-of-unaligned-access-on-arm-5dd0ebe24965\" target=\"_blank\" title=\"https://medium.com/@iLevex/the-curious-case-of-unaligned-access-on-arm-5dd0ebe24965\">https://medium.com/@iLevex/the-curious-case-of-unaligned-access-on-arm-5dd0ebe24965</a></p>",
        "id": 148198460,
        "sender_full_name": "JP Sugarbroad",
        "timestamp": 1542927763
    },
    {
        "content": "<p>This isn't my crate <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span> But I'm guessing that's why the authors didn't implement alignment checks, since they support <code>no_std</code>.</p>",
        "id": 148212088,
        "sender_full_name": "brycx",
        "timestamp": 1542955742
    },
    {
        "content": "<p>Plus, I wouldn't know how to.</p>",
        "id": 148212537,
        "sender_full_name": "brycx",
        "timestamp": 1542956543
    },
    {
        "content": "<p>unaligned accesses are UB in LLVM, so it doesn't really matter what the HW does, your code could already get misoptimized before than. or is this about assembly code?</p>",
        "id": 148272217,
        "sender_full_name": "RalfJ",
        "timestamp": 1543055698
    },
    {
        "content": "<p>Uh.... that crate has tons of soundness problems</p>",
        "id": 148272349,
        "sender_full_name": "RalfJ",
        "timestamp": 1543055897
    },
    {
        "content": "<p>like, I can transmute <code>&amp;[u8]</code> to <code>&amp;u32</code> and alignment is not checked -&gt; insta-UB</p>",
        "id": 148272353,
        "sender_full_name": "RalfJ",
        "timestamp": 1543055926
    },
    {
        "content": "<p>Also they seem to transmute <code>Vec</code>?!?</p>",
        "id": 148272520,
        "sender_full_name": "RalfJ",
        "timestamp": 1543056252
    },
    {
        "content": "<p>Thanks for pointing that out <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>. I'm not competent enough to validate it's soundness. I wasn't aware that it was in such a bad shape...  At least it's now clear that this should not be included in a list of recommended safe abstractions!</p>",
        "id": 148272588,
        "sender_full_name": "brycx",
        "timestamp": 1543056406
    },
    {
        "content": "<p>TBH I can only recommend to stay away from that crate^^</p>",
        "id": 148272696,
        "sender_full_name": "RalfJ",
        "timestamp": 1543056606
    },
    {
        "content": "<p>I'll stop after finding one concrete example of unsoundness: <a href=\"https://github.com/nabijaczleweli/safe-transmute-rs/issues/35\" target=\"_blank\" title=\"https://github.com/nabijaczleweli/safe-transmute-rs/issues/35\">https://github.com/nabijaczleweli/safe-transmute-rs/issues/35</a></p>",
        "id": 148273240,
        "sender_full_name": "RalfJ",
        "timestamp": 1543057614
    },
    {
        "content": "<p>haha, I'm a little taken aback by \"safe\" and \"transmute\" appearing in succession</p>",
        "id": 148288981,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543088977
    },
    {
        "content": "<p>also I really like how clippy tells you which transmutes can be replaced with pointer casts</p>",
        "id": 148289028,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543089031
    },
    {
        "content": "<p>not that pointer casts are all that great either, but they seem marginally safer</p>",
        "id": 148289029,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543089061
    }
]