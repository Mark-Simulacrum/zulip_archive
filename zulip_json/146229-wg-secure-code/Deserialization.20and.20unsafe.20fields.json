[
    {
        "content": "<p>It has been brought up in #black-magic in Rust Community Discord that Rust currently has no notion of an unsafe field. So it's trivial to put e.g. <code>#[derive(Deserialize)]</code> on a struct where some unsafe code depends on some invariants about the values being upheld.<br>\nI wonder how many examples of that are there in the wild. <span class=\"user-mention\" data-user-id=\"329529\">@Yechan Bae</span> perhaps your <a href=\"http://crates.io\">crates.io</a> scanner can be jury-rigged to detect that, perhaps with false positives for now, to get an idea of whether that's a real issue or not?</p>",
        "id": 226282173,
        "sender_full_name": "Shnatsel",
        "timestamp": 1613271253
    },
    {
        "content": "<p>Note that clippy actually has a lint for this, but it's <code>allow</code>ed by default <a href=\"https://rust-lang.github.io/rust-clippy/master/index.html#unsafe_derive_deserialize\">https://rust-lang.github.io/rust-clippy/master/index.html#unsafe_derive_deserialize</a></p>",
        "id": 226284496,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1613275674
    },
    {
        "content": "<p>I haven't seen such use of deserialize yet. However, I saw similar soundness errors related to Sync trait with <code>Clone</code> and <code>Debug</code> derivation. The provided implementation of those traits access <code>&amp;inner</code> from <code>&amp;self</code>, so <code>inner: Sync</code> trait bound should exist for <code>Self: Sync</code> implementation. However, it is easy to forget that trait bound when <code>Sync</code> is manually implemented.</p>",
        "id": 226288294,
        "sender_full_name": "Yechan Bae",
        "timestamp": 1613283129
    },
    {
        "content": "<p>I've definitely seen Deserialize impls like this, I almost wrote one which is why I realized it was possible</p>",
        "id": 226289232,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1613285032
    }
]