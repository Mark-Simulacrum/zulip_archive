[
    {
        "content": "<p>How does one join the working group?</p>",
        "id": 193124363,
        "sender_full_name": "gatewaynode",
        "timestamp": 1586224810
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"282531\">@gatewaynode</span> basically, do something related to the goals laid in out <a href=\"https://github.com/rust-secure-code/wg\" title=\"https://github.com/rust-secure-code/wg\">https://github.com/rust-secure-code/wg</a><br>\nMembership isn't really gated. In fact, the WG is essentially a place to coordinate their efforts.</p>",
        "id": 193170601,
        "sender_full_name": "Shnatsel",
        "timestamp": 1586257991
    },
    {
        "content": "<p>If you want to have a project to work on, let me know, I have plenty of suggestions</p>",
        "id": 193171281,
        "sender_full_name": "Shnatsel",
        "timestamp": 1586258387
    },
    {
        "content": "<p>Forked, I'll review all the issues.</p>",
        "id": 193173888,
        "sender_full_name": "gatewaynode",
        "timestamp": 1586259805
    },
    {
        "content": "<p>the issues could use an update, we were just busy with other things</p>",
        "id": 193173977,
        "sender_full_name": "Shnatsel",
        "timestamp": 1586259846
    },
    {
        "content": "<p>but they should be a good starting point</p>",
        "id": 193174003,
        "sender_full_name": "Shnatsel",
        "timestamp": 1586259864
    },
    {
        "content": "<p>Yeah, I don't mind working on administriva and documentation while I get up to speed.</p>",
        "id": 193174920,
        "sender_full_name": "gatewaynode",
        "timestamp": 1586260411
    },
    {
        "content": "<p>In particular, I believe reproducible builds are largely a solved problem, even in corner cases like LTO. It may still regress, but there's enough parties looking into this already that we don't have to</p>",
        "id": 193175618,
        "sender_full_name": "Shnatsel",
        "timestamp": 1586260785
    },
    {
        "content": "<p>Correction: the above applies the compiler itself. Supporting tooling is still not great</p>",
        "id": 193329792,
        "sender_full_name": "Shnatsel",
        "timestamp": 1586356955
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"282531\">@gatewaynode</span> if you're looking for a bite-sized work item to get started, this should be fairly straightforward and self-contained: <a href=\"https://github.com/rust-secure-code/safety-dance/issues/54#issuecomment-609487953\" title=\"https://github.com/rust-secure-code/safety-dance/issues/54#issuecomment-609487953\">https://github.com/rust-secure-code/safety-dance/issues/54#issuecomment-609487953</a></p>",
        "id": 193525796,
        "sender_full_name": "Shnatsel",
        "timestamp": 1586477613
    },
    {
        "content": "<p>I'll take a look this weekend.</p>",
        "id": 193526125,
        "sender_full_name": "gatewaynode",
        "timestamp": 1586477942
    },
    {
        "content": "<p>Are there any other opportunities to contribute? <span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span></p>",
        "id": 198714296,
        "sender_full_name": "Javed Nissar",
        "timestamp": 1590458315
    },
    {
        "content": "<p><a href=\"https://github.com/rust-secure-code/safety-dance\">https://github.com/rust-secure-code/safety-dance</a> is one. I will post more later today - it's 4AM for me and I should be asleep right now</p>",
        "id": 198714461,
        "sender_full_name": "Shnatsel",
        "timestamp": 1590458583
    },
    {
        "content": "<p>Thanks! I really appreciate the quick response!</p>",
        "id": 198714733,
        "sender_full_name": "Javed Nissar",
        "timestamp": 1590459026
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"241480\">@Javed Nissar</span> another project that looks very promising and just need someone to actually implement it is this: <a href=\"https://github.com/rust-fuzz/auto-fuzz-test\">https://github.com/rust-fuzz/auto-fuzz-test</a><br>\nFuzzing is quite effective at discovering bugs, but requires a bit of boilerplate so you can easily fuzz something like a PNG decoder that has basically one function that exercises the entire library, but fuzzing something as large as OpenSSL with hundreds of functions is currently not feasible. But Rust type system actually contains enough information so that this boilerplate could be autogenerated! That would enable fuzzing e.g. the entirety of Rust standard library. This project is a proof-of-concept for autogenerating fuzzing boilerplate.</p>",
        "id": 198784499,
        "sender_full_name": "Shnatsel",
        "timestamp": 1590509022
    },
    {
        "content": "<p><a href=\"https://github.com/jakubadamw/arbitrary-model-tests\">https://github.com/jakubadamw/arbitrary-model-tests</a> is a different implementation of a very similar idea tailored specifically to data structures. It is complete enough to be useful in practice - it has found a bunch of bugs in <code>tinyvec</code>, for example. It is a procedural macro so the implementation is a bit more complicated. The main drawback right now is that it cannot compare panicking behavior - if both implementations panic then it's probably the right thing to do, but if just one panics that's probably a bug, and it cannot distinguish  between the two right now. I've tried implementing that but ran into throrny borrow checker issues I couldn't figure out: <a href=\"https://github.com/jakubadamw/arbitrary-model-tests/pull/4\">https://github.com/jakubadamw/arbitrary-model-tests/pull/4</a></p>",
        "id": 198784948,
        "sender_full_name": "Shnatsel",
        "timestamp": 1590509217
    },
    {
        "content": "<p>Another work item is making a PR from this RFC for the Rust standard library: <a href=\"https://github.com/rust-lang/rfcs/pull/2714\">https://github.com/rust-lang/rfcs/pull/2714</a><br>\nThe implementation is available here: <a href=\"https://github.com/WanzenBug/rle-decode-helper\">https://github.com/WanzenBug/rle-decode-helper</a><br>\nThis just needs someone to copy-paste it into std and make a PR</p>",
        "id": 198785246,
        "sender_full_name": "Shnatsel",
        "timestamp": 1590509355
    },
    {
        "content": "<p>It seems like <a href=\"https://github.com/rust-secure-code/safety-dance\">https://github.com/rust-secure-code/safety-dance</a> and that RFC are probably the best for my current experience level. Where in <a href=\"https://github.com/rust-lang/rust/tree/master/src\">https://github.com/rust-lang/rust/tree/master/src</a> do you think the PR for that RFC belongs? I'm very unfamiliar with that repo so I'm finding it difficult to ascertain that myself.</p>",
        "id": 198793338,
        "sender_full_name": "Javed Nissar",
        "timestamp": 1590513375
    },
    {
        "content": "<p><a href=\"https://github.com/RustSec/rustsec-admin/issues/30\">https://github.com/RustSec/rustsec-admin/issues/30</a> is probably a good onboarding task!</p>",
        "id": 198796968,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1590515191
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130046\">@Alex Gaynor</span> Thanks for the link, I'll take a look as soon as I can!</p>",
        "id": 198798137,
        "sender_full_name": "Javed Nissar",
        "timestamp": 1590515802
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"241480\">@Javed Nissar</span> for the RFC impl I suggest looking at prior PRs adding methods to Vec, like <a href=\"https://github.com/rust-lang/rust/pull/64069\">https://github.com/rust-lang/rust/pull/64069</a> - although this one adds an impl, perhaps you can find something adding a function</p>",
        "id": 198813524,
        "sender_full_name": "Shnatsel",
        "timestamp": 1590523023
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> can you point me to the guide on contributing to rust stdlib? The one that talks about stabilization attributes and how to build stdlib without rebuilding all of the compiler stages. I'm pretty sure there was one but for some reason I cannot find it.</p>",
        "id": 198814057,
        "sender_full_name": "Shnatsel",
        "timestamp": 1590523286
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> you mean <a href=\"https://rustc-dev-guide.rust-lang.org/stabilization_guide.html\">https://rustc-dev-guide.rust-lang.org/stabilization_guide.html</a> ?</p>",
        "id": 198819728,
        "sender_full_name": "DPC",
        "timestamp": 1590526200
    },
    {
        "content": "<p>Probably that one. Are there any docs on how to build your own stdlib and test a program against it? Ideally without using 20Gb RAM in the process</p>",
        "id": 198820092,
        "sender_full_name": "Shnatsel",
        "timestamp": 1590526370
    },
    {
        "content": "<p>i'm not sure about that sorry mostly i just depend on the CI xD</p>",
        "id": 198820632,
        "sender_full_name": "DPC",
        "timestamp": 1590526656
    },
    {
        "content": "<p>and my stdlib prs are just stabilisation ones so not much needed</p>",
        "id": 198820660,
        "sender_full_name": "DPC",
        "timestamp": 1590526673
    },
    {
        "content": "<p>Are there any other projects or opportunities to contribute? @Shnatsel</p>",
        "id": 212214755,
        "sender_full_name": "chenqi_s",
        "timestamp": 1601803699
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"347832\">@chenqi_s</span> most of the above list is still relevant. But here are some more contribution opportunities:</p>\n<ul>\n<li><a href=\"https://github.com/rust-lang/crates.io/issues/2869\">https://github.com/rust-lang/crates.io/issues/2869</a> - <a href=\"http://crates.io\">crates.io</a> publisher invitations never expire. This is a potential security issue.</li>\n<li><a href=\"https://github.com/rust-lang/crates.io/issues/2868\">https://github.com/rust-lang/crates.io/issues/2868</a> - outstanding publisher invitations cannot be listed or revoked. Also a potential security issue.</li>\n<li><a href=\"https://github.com/rust-secure-code/cargo-geiger/issues/102\">https://github.com/rust-secure-code/cargo-geiger/issues/102</a> - provide much more accurate measurement of unsafe code in <code>cargo-geiger</code> by running a <code>rustc</code> one-liner and parsing its JSON output</li>\n<li>I am currently working on <a href=\"https://github.com/rust-secure-code/cargo-supply-chain\">https://github.com/rust-secure-code/cargo-supply-chain</a> - it's in early stages still so it's changing rapidly, but should settle down a bit in a week or two.</li>\n</ul>",
        "id": 212585600,
        "sender_full_name": "Shnatsel",
        "timestamp": 1602088695
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"347832\">@chenqi_s</span> another one: profile <code>jpeg-decoder</code> with an instrumentation profiler to determine what part of a large function is slow. <code>perf</code> just shows one big function. <a href=\"https://github.com/image-rs/jpeg-decoder/issues/155\">https://github.com/image-rs/jpeg-decoder/issues/155</a><br>\nThis will help dramatically improve performance and reduce the need to use the C implementation of JPEG decoding.</p>",
        "id": 212585758,
        "sender_full_name": "Shnatsel",
        "timestamp": 1602088797
    },
    {
        "content": "<p>@Shnatsel Thanks for your reply. I will consider these opportunities. By the way, how about the projects in <a href=\"https://github.com/rust-secure-code/wg\">https://github.com/rust-secure-code/wg</a>, such as safety-dance?</p>",
        "id": 212768155,
        "sender_full_name": "chenqi_s",
        "timestamp": 1602205924
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"347832\">@chenqi_s</span> safety-dance is <em>always</em> looking for contributors. There's so much to do!</p>",
        "id": 212939375,
        "sender_full_name": "Shnatsel",
        "timestamp": 1602371969
    }
]