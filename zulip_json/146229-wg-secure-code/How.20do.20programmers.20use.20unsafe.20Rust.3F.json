[
    {
        "content": "<p>This paper seems like it would be interesting for the WG: <a href=\"http://people.inf.ethz.ch/summersa/wiki/lib/exe/fetch.php?media=papers:unsafe-corpus.pdf\">http://people.inf.ethz.ch/summersa/wiki/lib/exe/fetch.php?media=papers:unsafe-corpus.pdf</a></p>",
        "id": 211421955,
        "sender_full_name": "RalfJ",
        "timestamp": 1601221647
    },
    {
        "content": "<p>Cc <span class=\"user-mention\" data-user-id=\"116109\">@Vytautas Astrauskas</span> (one of the authors) -- nice work getting more concrete numbers into this discussion :)</p>",
        "id": 211422004,
        "sender_full_name": "RalfJ",
        "timestamp": 1601221693
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/Hwo.20do.20programmers.20Use.20unsafe.20Rust.3F/near/211422004\">said</a>:</p>\n<blockquote>\n<p>Cc <span class=\"user-mention silent\" data-user-id=\"116109\">Vytautas Astrauskas</span> (one of the authors) -- nice work getting more concrete numbers into this discussion :)</p>\n</blockquote>\n<p>Thanks! <span aria-label=\"smiling face\" class=\"emoji emoji-263a\" role=\"img\" title=\"smiling face\">:smiling_face:</span></p>",
        "id": 211422162,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1601221979
    },
    {
        "content": "<p>I am a bit buried now under my teaching stuff, but if you have any questions I will try to answer them.</p>",
        "id": 211422182,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1601222032
    },
    {
        "content": "<p>The Jupyter notebooks are <a href=\"https://github.com/rust-corpus/qrates/tree/master/reports\">here</a> and the CSV files can be downloaded from <a href=\"https://pmserver.inf.ethz.ch/rust-corpus/query-results.tar.gz\">here</a>. The CSV files are generated by our CI; if you notice that they are broken, please let me know.</p>",
        "id": 211422406,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1601222314
    },
    {
        "content": "<p>Also, if somebody knows how to set up a public internet facing Jupyter notebook without introducing a severe safety risk on our server, I could do that to support people who are interested in running their own analysis but do not have a powerful machine for that.</p>",
        "id": 211422652,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1601222660
    },
    {
        "content": "<p>Would using Google Colaboratory work? (they provide a free hosted environment for Jupyter notebooks, with GPU access as well as TPUs, Google's proprietary ASIC chips)</p>",
        "id": 211422742,
        "sender_full_name": "Teymour Aldridge",
        "timestamp": 1601222791
    },
    {
        "content": "<p>I realise it's not ideal pointing people to Google, but in this case it might work (doesn't require log in, with the option to save one's work)</p>",
        "id": 211422752,
        "sender_full_name": "Teymour Aldridge",
        "timestamp": 1601222824
    },
    {
        "content": "<p>Sounds like an option. How much space do they give?</p>",
        "id": 211423046,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1601223253
    },
    {
        "content": "<p>That metadata database much have cost a fortune to build, since you have to compile every single crate from <a href=\"http://crates.io\">crates.io</a>. <br>\nI've attempted some source code analysis on <a href=\"http://crates.io\">crates.io</a> in the past, but didn't go beyond <code>rg</code> queries.<br>\nI did get a rough measure of the percentage of unsafe code though: <a href=\"https://www.reddit.com/r/rust/comments/g0wu9b/\">https://www.reddit.com/r/rust/comments/g0wu9b/</a></p>",
        "id": 211423297,
        "sender_full_name": "Shnatsel",
        "timestamp": 1601223620
    },
    {
        "content": "<p>I wonder, how long did it take to compile all of <a href=\"http://crates.io\">crates.io</a> via <code>rustwide</code> on your server?</p>",
        "id": 211423368,
        "sender_full_name": "Shnatsel",
        "timestamp": 1601223748
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127617\">Shnatsel</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/Hwo.20do.20programmers.20Use.20unsafe.20Rust.3F/near/211423297\">said</a>:</p>\n<blockquote>\n<p>That metadata database much have cost a fortune to build, since you have to compile every single crate from <a href=\"http://crates.io\">crates.io</a>. </p>\n</blockquote>\n<p>We are using Rustwide and we compile only the newest version of each package.</p>",
        "id": 211423378,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1601223784
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127617\">Shnatsel</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/Hwo.20do.20programmers.20Use.20unsafe.20Rust.3F/near/211423368\">said</a>:</p>\n<blockquote>\n<p>I wonder, how long did it take to compile all of <a href=\"http://crates.io\">crates.io</a> via <code>rustwide</code> on your server?</p>\n</blockquote>\n<p>It takes a week.</p>",
        "id": 211423387,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1601223791
    },
    {
        "content": "<p>To compile all versions of all packages, we would need a server with more space (not a big problem) and to optimize the query engine to actually be able to handle such things.</p>",
        "id": 211423521,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1601223979
    },
    {
        "content": "<p>Oh, that's far more tractable than I expected! I believe crater compiles all versions, which is why it's slow.</p>",
        "id": 211423556,
        "sender_full_name": "Shnatsel",
        "timestamp": 1601224071
    },
    {
        "content": "<p>The infrastructure is in many aspects na√Øve, but it allowed us to get the results so we did not spend much time optimizing it.</p>",
        "id": 211423611,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1601224130
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127617\">Shnatsel</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/Hwo.20do.20programmers.20Use.20unsafe.20Rust.3F/near/211423556\">said</a>:</p>\n<blockquote>\n<p>Oh, that's far more tractable than I expected! I believe crater compiles all versions, which is why it's slow.</p>\n</blockquote>\n<p>A crater run, if I am not mistaken, takes around three days for <code>cargo check</code> (which is basically what we do).</p>",
        "id": 211423626,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1601224187
    },
    {
        "content": "<p>However, I think the full crater pass does <code>cargo test</code>, which is much slower.</p>",
        "id": 211423671,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1601224215
    },
    {
        "content": "<p>I've been warned not to try it because it's going to take months on commodity hardware. I'm glad that whoever told me that was mistaken!</p>",
        "id": 211423697,
        "sender_full_name": "Shnatsel",
        "timestamp": 1601224311
    },
    {
        "content": "<p>Oh nice, safety-dance got a shoutout <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 211423762,
        "sender_full_name": "Shnatsel",
        "timestamp": 1601224424
    },
    {
        "content": "<p>By the way, if you are interested in the latest data, rerunning the compilation regularly is not a problem as long as we manage to keep up with the compiler API (which is a pain, unfortunately).</p>",
        "id": 211423811,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1601224464
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127617\">Shnatsel</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/Hwo.20do.20programmers.20Use.20unsafe.20Rust.3F/near/211423697\">said</a>:</p>\n<blockquote>\n<p>I've been warned not to try it because it's going to take months on commodity hardware. I'm glad that whoever told me that was mistaken!</p>\n</blockquote>\n<p><code>cargo check</code> on the latest versions of all packages is definitely possible within one week on a stronger laptop.</p>",
        "id": 211423890,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1601224587
    },
    {
        "content": "<p>However, this could be the result of the work that the Rustwide team did in the last year. For example, if you disable caching, then it takes much much longer.</p>",
        "id": 211423976,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1601224779
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127617\">Shnatsel</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/Hwo.20do.20programmers.20Use.20unsafe.20Rust.3F/near/211423697\">said</a>:</p>\n<blockquote>\n<p>I've been warned not to try it because it's going to take months on commodity hardware. I'm glad that whoever told me that was mistaken!</p>\n</blockquote>\n<p>that's <a href=\"http://docs.rs\">docs.rs</a>, not crater</p>",
        "id": 211424058,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601224917
    },
    {
        "content": "<p><a href=\"http://docs.rs\">docs.rs</a> compiles <em>all</em> versions, crater just compiles the latest</p>",
        "id": 211424097,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601224926
    },
    {
        "content": "<p>(it was me that told you :P)</p>",
        "id": 211424100,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601224938
    },
    {
        "content": "<p>Ah, that makes sense <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 211425913,
        "sender_full_name": "Shnatsel",
        "timestamp": 1601227597
    },
    {
        "content": "<p>crater doesn't compile the latest, but generally a locked version (depending on why it is run)</p>",
        "id": 211428455,
        "sender_full_name": "DPC",
        "timestamp": 1601231647
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127617\">Shnatsel</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/How.20do.20programmers.20use.20unsafe.20Rust.3F/near/211423556\">said</a>:</p>\n<blockquote>\n<p>Oh, that's far more tractable than I expected! I believe crater compiles all versions, which is why it's slow.</p>\n</blockquote>\n<p>(I don't think so, O never saw more than one version of a crate regress in a crater run and that seems unlikely if all versions are tested.)</p>",
        "id": 211461432,
        "sender_full_name": "RalfJ",
        "timestamp": 1601279596
    },
    {
        "content": "<p>Yeah that database you build <span class=\"user-mention\" data-user-id=\"116109\">@Vytautas Astrauskas</span> sounds like it could be useful for other things as well, that's why <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> proposed it after all</p>",
        "id": 211461555,
        "sender_full_name": "RalfJ",
        "timestamp": 1601279669
    },
    {
        "content": "<p>as an example, how hard would it be to answer a question like \"how many crates create references to packed fields, inside or outside unsafe blocks\" (and would thus be affected by finally making that a hard error)?</p>",
        "id": 211461608,
        "sender_full_name": "RalfJ",
        "timestamp": 1601279715
    },
    {
        "content": "<p>regarding the paper itself, the only thing so far that made be go \"hu?\" was looking for synchronization intrinsics -- not only are they unstable as you say, but they also have stable alternatives via the <code>Atomic*</code> types. I'd expect most unsafe code that needs synchronization to use these stable types for that purpose instead of the unstable intrinsics.</p>",
        "id": 211461718,
        "sender_full_name": "RalfJ",
        "timestamp": 1601279805
    },
    {
        "content": "<p>I am also confused by this statement:</p>\n<blockquote>\n<p>We observed that many functions are declared unsafe despite not employing any of the language<br>\nfeatures which the compiler requires to be used only in unsafe code. This suggests either confusion<br>\non the part of the programmer as to when such blocks are required, legacy reasons (e.g., the same<br>\nfunction must be unsafe on a different platform), or that programmers employ such blocks to<br>\ndocument concerns beyond those that the Rust compiler chooses to associate with unsafe Rust.</p>\n</blockquote>\n<p>One example of such a function is <code>Vec::set_len</code>. However, this function <em>must be unsafe</em> -- <code>Vec</code> would be unsound if it were marked as safe. So there is another option besides confusion, legacy, and documentaiton; namely: upholding safety requirements of the module that are crucial for unsafe code elsewhere in the module.</p>",
        "id": 211482593,
        "sender_full_name": "RalfJ",
        "timestamp": 1601294554
    },
    {
        "content": "<p>or maybe that is me misunderstanding your terminology; the paper also says unsafe traits serve \"purely as documentation feature\", which I would disagree with. they are a crucial part of the safety story, as they mark places where extra invariant needs to be manually upheld by clients -- this goes beyond normal documentation.</p>",
        "id": 211482797,
        "sender_full_name": "RalfJ",
        "timestamp": 1601294679
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116109\">@Vytautas Astrauskas</span> is what I linked the latest version of the paper? it says 2018... I guess SPLASH didnt happen yet so the official version is not even out yet? <em>oops</em></p>",
        "id": 211484202,
        "sender_full_name": "RalfJ",
        "timestamp": 1601295548
    },
    {
        "content": "<p>I'd also be interested in a discussion of unsafe features that don't require the <code>unsafe</code>  keyword</p>",
        "id": 211508820,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601307294
    },
    {
        "content": "<p>e.g. <a href=\"https://github.com/rust-lang/rust/issues/28179\">https://github.com/rust-lang/rust/issues/28179</a> and <a href=\"https://github.com/RustSec/advisory-db/issues/275\">https://github.com/RustSec/advisory-db/issues/275</a></p>",
        "id": 211508871,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601307313
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/How.20do.20programmers.20use.20unsafe.20Rust.3F/near/211461608\">said</a>:</p>\n<blockquote>\n<p>as an example, how hard would it be to answer a question like \"how many crates create references to packed fields, inside or outside unsafe blocks\" (and would thus be affected by finally making that a hard error)?</p>\n</blockquote>\n<p>Do you mean references to packed <strong>fields</strong> or structs?  I am asking because I do see <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.AdtDef.html#structfield.repr\"><code>repr</code></a> on ADTs, but not on <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.FieldDef.html\">fields</a>. Anyway, the main problem seems to be that, currently, the extractor does not collect repr information about structs. This should be easy to fix but will require recompiling all packages. To answer your question: it should not require much human work but would take around a week to get an answer. I have opened <a href=\"https://github.com/rust-corpus/qrates/issues/1\">an issue</a>.</p>",
        "id": 211510201,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1601307957
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/How.20do.20programmers.20use.20unsafe.20Rust.3F/near/211508820\">said</a>:</p>\n<blockquote>\n<p>I'd also be interested in a discussion of unsafe features that don't require the <code>unsafe</code>  keyword</p>\n</blockquote>\n<p>I think there's an issue that there are unsafe attributes but no way to mark attributes as being unsafe?</p>",
        "id": 211510834,
        "sender_full_name": "Chris Denton",
        "timestamp": 1601308237
    },
    {
        "content": "<p>right, that's the first link, the second is macros that expand to <code>unsafe</code></p>",
        "id": 211510906,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601308282
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/How.20do.20programmers.20use.20unsafe.20Rust.3F/near/211482593\">said</a>:</p>\n<blockquote>\n<p>I am also confused by this statement:</p>\n<blockquote>\n<p>We observed that many functions are declared unsafe despite not employing any of the language<br>\nfeatures which the compiler requires to be used only in unsafe code. This suggests either confusion<br>\non the part of the programmer as to when such blocks are required, legacy reasons (e.g., the same<br>\nfunction must be unsafe on a different platform), or that programmers employ such blocks to<br>\ndocument concerns beyond those that the Rust compiler chooses to associate with unsafe Rust.</p>\n</blockquote>\n<p>One example of such a function is <code>Vec::set_len</code>. However, this function <em>must be unsafe</em> -- <code>Vec</code> would be unsound if it were marked as safe. So there is another option besides confusion, legacy, and documentaiton; namely: upholding safety requirements of the module that are crucial for unsafe code elsewhere in the module.</p>\n<p>or maybe that is me misunderstanding your terminology; the paper also says unsafe traits serve \"purely as documentation feature\", which I would disagree with. they are a crucial part of the safety story, as they mark places where extra invariant needs to be manually upheld by clients -- this goes beyond normal documentation.</p>\n</blockquote>\n<p>What you mention is exactly what we meant with ‚Äúdocumentation‚Äù. It seems that I need to double-check our use of terminology. Thanks for pointing this out!</p>",
        "id": 211511587,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1601308578
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/How.20do.20programmers.20use.20unsafe.20Rust.3F/near/211484202\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116109\">Vytautas Astrauskas</span> is what I linked the latest version of the paper? it says 2018... I guess SPLASH didnt happen yet so the official version is not even out yet? <em>oops</em></p>\n</blockquote>\n<p>It is the latest, but not the final version. We are still waiting for the second round results.</p>",
        "id": 211512197,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1601308891
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/How.20do.20programmers.20use.20unsafe.20Rust.3F/near/211508820\">said</a>:</p>\n<blockquote>\n<p>I'd also be interested in a discussion of unsafe features that don't require the <code>unsafe</code>  keyword</p>\n<p>e.g. <a href=\"https://github.com/rust-lang/rust/issues/28179\">https://github.com/rust-lang/rust/issues/28179</a> and <a href=\"https://github.com/RustSec/advisory-db/issues/275\">https://github.com/RustSec/advisory-db/issues/275</a></p>\n</blockquote>\n<p>Discussion as in my opinion on these things or some specific data about uses of these unsafe features?</p>",
        "id": 211512651,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1601309118
    },
    {
        "content": "<p>Both, but I think data would be the most helpful ;)</p>",
        "id": 211512748,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601309161
    },
    {
        "content": "<blockquote>\n<p>Do you mean references to packed fields or structs? I am asking because I do see repr on ADTs, but not on fields. </p>\n</blockquote>\n<p>Sorry, I used that as a shorthand for \"field of packed structs\". (More specifically, fields of packed structs that are actually insufficiently aligned for their type -- i.e., a <code>u8</code> field is still safe to take a reference to, and Rust treats it as such)</p>",
        "id": 211515950,
        "sender_full_name": "RalfJ",
        "timestamp": 1601310717
    },
    {
        "content": "<p>Why was it necessary to focus on whether or not the \"Rust Hypothesis Holds\" in relation to the code review and analysis?</p>",
        "id": 211521085,
        "sender_full_name": "oliver",
        "timestamp": 1601313058
    },
    {
        "content": "<p>Isn't there a natural separation of concerns between a languages theory and design and it's 'real-world' application?</p>",
        "id": 211521270,
        "sender_full_name": "oliver",
        "timestamp": 1601313130
    },
    {
        "content": "<p>Hey Ralf, thanks a lot for checking out for the paper and for the comments! I think the sentence you refer to is perhaps a little implicitly worded (in particular, what \"concerns beyond those that the Rust compiler chooses to associate with unsafe Rust\" precisely means. I think we're aiming to say that these are usages of \"unsafe\" that go beyond what the compiler requires the programmer to write; in these examples, there's nothing (even transitively via called functions) which explicitly forces the programmer to consider adding an \"unsafe\" and they chose to do so nonetheless. Your <code>Vec::set_len</code> example seems to be a good example of such a case, indeed (the compiler won't ask you to label that function as unsafe, but you indeed should for deeper reasons).</p>",
        "id": 211526755,
        "sender_full_name": "Alex Summers",
        "timestamp": 1601315808
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"347112\">@Alex Summers</span> I see, that's fair. <em>the compiler</em> does not force you to write them. but the \"community standard\" of ensuring soundness (no UB from safe code) does.<br>\nthe reason I got confused is that every now and then, the discussion comes up to use <code>unsafe</code> for things unrelated to soundness -- for example, in ye olde times there was talk about keeping <code>mem::forget</code> unsafe to \"discourage\" its use. The lang team decided against that, but it may well be that community crates do this. that is what I thought you mean when you say \"for docs purpose only\".</p>",
        "id": 211527408,
        "sender_full_name": "RalfJ",
        "timestamp": 1601316090
    },
    {
        "content": "<p>if one accepts soundness as a given axiom, someone writing a function like <code>set_len</code> does not really have a choice about whether it should be sound or not. it is generally considered a critical bug to not make such a function sound. but of course, the compiler has no way to actually enforce this.</p>",
        "id": 211527609,
        "sender_full_name": "RalfJ",
        "timestamp": 1601316178
    },
    {
        "content": "<p>maybe another way to put it: soundness is not a convention for libraries, it's a prerequisite, the same way that having the correct behavior is a prerequisite</p>",
        "id": 211531499,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601318134
    },
    {
        "content": "<p>it's <em>possible</em> for libraries to be unsound or do the wrong thing, but it's always a bug</p>",
        "id": 211531521,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601318147
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> Yes - that's a good way of putting it. We were wondering how often this happens, and also whether we could find cases in which unsafe appears to be used to document concerns other than undefined behaviour (which could be another potential reason for a function being labelled as unsafe without anything in its body that the compiler would otherwise complain about). Making this distinction is of course also hard automatically, but I don't think we found too much evidence of either being very common. We can try to clarify these two possibilities in the final final version :)</p>",
        "id": 211537658,
        "sender_full_name": "Alex Summers",
        "timestamp": 1601320936
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span>  Thanks - I totally agree. It's however difficult to detect such usages of unsafe code/keywords automatically; personally I'm very interested to find these cases and stare at them. We used the fact that the keyword occurs somewhere the compiler wouldn't insist on it as a hint (that we could search for over the codebase).</p>",
        "id": 211545975,
        "sender_full_name": "Alex Summers",
        "timestamp": 1601324893
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> Looking at this again I think we do mean something a bit different w.r.t. unsafe <em>traits</em> (compared with the unsafe on functions that the compiler doesn't require an unsafe for that we discussed above). I believe that the instances of unsafe traits that we identified and then looked into by hand often appeared to use the feature to specify functional guarantees other than those clearly directly concerning  undefined behaviour. For example, <a href=\"https://doc.rust-lang.org/std/iter/trait.TrustedLen.html\">https://doc.rust-lang.org/std/iter/trait.TrustedLen.html</a> -  in contrast with other usages of \"unsafe\" it (on the surface) appears to be used to document specifications that aren't clearly/only concerned with UB. I think there were some other non-standard-library instances in the dataset too which used unsafe trait to flag certain expected postconditions, but I'd need to check.</p>\n<p>Of course, there could be client code (of the trait) which depends on these guarantees in arbitrary ways including to prevent undefined behaviour in some unsafe code somewhere (and maybe there even is such code elsewhere in the standard library; I guess this is what makes <code>TrustedLen</code> an unsafe trait?), but that at least also <em>could</em> be the case for any functional properties. In that sense, it seemed to us that there was less clarity on when a trait should be marked as unsafe or not. In practice, we also observed in the study that unsafe traits are used quite rarely, which we speculated could also be for this reason.</p>",
        "id": 211569139,
        "sender_full_name": "Alex Summers",
        "timestamp": 1601340504
    },
    {
        "content": "<p>the way I've heard it described is that traits should be <code>unsafe</code> if <code>unsafe</code> code can depend on them for soundness:</p>\n<blockquote>\n<p>there could be client code (of the trait) which depends on these guarantees in arbitrary ways including to prevent undefined behaviour</p>\n</blockquote>\n<p>but not for correctness: <a href=\"https://doc.rust-lang.org/std/collections/struct.BTreeMap.html\">https://doc.rust-lang.org/std/collections/struct.BTreeMap.html</a>, <a href=\"https://doc.rust-lang.org/std/cmp/trait.Ord.html\">https://doc.rust-lang.org/std/cmp/trait.Ord.html</a></p>",
        "id": 211569505,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601340855
    },
    {
        "content": "<p>I assume that TrustedLen is used to support things like collecting into a vector without a bounds check. While such a function would need to use unsafe internally anyway, it could not be marked as safe without the TrustedLen unsafe trait, because otherwise safe code could call the function, violating the guarantees with other safe code, and get UB</p>",
        "id": 211569566,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601340943
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span>, thanks for the tip: I think what's unclear to me personally is, as someone writing the trait itself (which aggregates some kind of expected behaviour), if I have a particular postcondition in mind that a certain function is meant to always guarantee, when would I <em>not</em> want to make this an unsafe trait? It seems that this would only have advantages; I'm making clear to client code that this property can be relied upon (as opposed to something which is meant to be the case but cannot be relied upon... I'm not sure when I would want to say that). In that sense, it seems hard to decide based on the property, essentially because it's how the <em>clients</em> of this code will want eventually to use and depend on it which determines whether adding unsafe will be useful/necessary or not.</p>",
        "id": 211570102,
        "sender_full_name": "Alex Summers",
        "timestamp": 1601341433
    },
    {
        "content": "<p>ah hmm that's an interesting point</p>",
        "id": 211570161,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601341464
    },
    {
        "content": "<p>I think the difference is that <code>unsafe trait</code> <em>guarantees</em> it is correct, and <code>trait</code> is a little more wishy-washy? but that distinction seems a little vague</p>",
        "id": 211570188,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601341497
    },
    {
        "content": "<p>Well, it means that all clients will have to <code>unsafe impl</code> your trait now, which is added geiger factor</p>",
        "id": 211570203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601341508
    },
    {
        "content": "<p>if it's not so important of a guarantee (i.e. it's not performance sensitive and you can live with a panic instead of UB) you might want to skip all the downstream code review effort</p>",
        "id": 211570297,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601341570
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> - that makes sense. I'm certainly not arguing to drop the <code>unsafe</code> in this case, by the way; it's just less clear to me what makes this particular trait warrant the <code>unsafe</code> and not others.</p>",
        "id": 211570310,
        "sender_full_name": "Alex Summers",
        "timestamp": 1601341584
    },
    {
        "content": "<p>This one is important because it's very performance sensitive, given Rust's reliance on good codegen for iterator loops</p>",
        "id": 211570339,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601341618
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> ) Right - this is kind of my issue :) I think for <code>unsafe</code> on a function there's a clear distinction (say, if we're talking about a precondition property): if the property involved, when violated, will cause undefined behaviour, you'd better put <code>unsafe</code>, otherwise you shouldn't. But that's something you can decide when you implement the function, since (at least for this precondition usage) you know the code and the consequences (hopefully...)</p>",
        "id": 211570438,
        "sender_full_name": "Alex Summers",
        "timestamp": 1601341690
    },
    {
        "content": "<p>Ah sorry; I probably wasn't clear but by \"clients\" I meant people calling the trait's functions, not people implementing it.</p>",
        "id": 211570463,
        "sender_full_name": "Alex Summers",
        "timestamp": 1601341721
    },
    {
        "content": "<p>For an unsafe trait, you are banking on what unsafe code is going to do with the results of the trait methods, rather than the implementation of the methods themselves</p>",
        "id": 211570508,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601341770
    },
    {
        "content": "<p>Exactly; you have to make the decision when writing the trait, in terms of what you expect the clients (callers) of these functions will eventually rely on. That seems difficult, to me - a caller could always want to rely on my functional behaviour for whatever they like.</p>",
        "id": 211570597,
        "sender_full_name": "Alex Summers",
        "timestamp": 1601341846
    },
    {
        "content": "<p>well usually you wouldn't write an unsafe trait unless you had a particular use-case in mind. The <a href=\"https://github.com/rust-lang/rust/pull/37306\">PR that added TrustedLen</a> also put new unsafe code in <code>Vec::extend</code> that relies on it for soundness</p>",
        "id": 211570638,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601341917
    },
    {
        "content": "<p>but of course a guarantee is a guarantee and users can use TrustedLen functions for other uses too</p>",
        "id": 211570725,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601341989
    },
    {
        "content": "<p>Yeah, I think this makes total sense - the standard library's correctness already depends on the property, so it had better be an <code>unsafe</code> trait</p>",
        "id": 211570739,
        "sender_full_name": "Alex Summers",
        "timestamp": 1601342019
    },
    {
        "content": "<p>Thanks for the pointer btw - I wasn't sure whether/where there was this dependency, but it seemed likely to exist somewhere :)</p>",
        "id": 211570834,
        "sender_full_name": "Alex Summers",
        "timestamp": 1601342159
    },
    {
        "content": "<p>But I think it's fair to say that if the word <code>unsafe</code> is used then somehow memory safety or other language UB is at stake, possibly elsewhere in the code</p>",
        "id": 211570889,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601342206
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/How.20do.20programmers.20use.20unsafe.20Rust.3F/near/211570203\">said</a>:</p>\n<blockquote>\n<p>Well, it means that all clients will have to <code>unsafe impl</code> your trait now, which is added geiger factor</p>\n</blockquote>\n<p>I probably think too much in terms of specifications, but my understanding is that all <code>unsafe impl</code> means is \"I promise to implement this trait correctly\". I would argue that I make that promise for implementing any trait :) And having done it, I'd be happy for others to rely on it (well even better, maybe I'll verify its correctness first...)</p>",
        "id": 211570971,
        "sender_full_name": "Alex Summers",
        "timestamp": 1601342285
    },
    {
        "content": "<p>I make a <code>unsafe</code> promise to the compiler at least, what I'm willing to promise other humans is sometimes a different story</p>",
        "id": 211571012,
        "sender_full_name": "oliver",
        "timestamp": 1601342361
    },
    {
        "content": "<p>The paper its self refers to the mere presence of <code>unsafe</code> to be a \"naive query\"</p>",
        "id": 211571309,
        "sender_full_name": "oliver",
        "timestamp": 1601342732
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"347112\">@Alex Summers</span> Hm, an interesting point. I guess I can write the following function:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">test_partial_eq</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">PartialEq</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">hint</span>::<span class=\"n\">unreachable_unchecked</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>and use it to argue that <code>PartialEq</code> should be an <code>unsafe trait</code> because it has some axiomatic guarantees that are now being relied on for soundness in some unsafe code</p>",
        "id": 211571514,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601342960
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> I'd argue that the function is unsound <em>specifically because</em> PartialEq isn't unsafe trait</p>",
        "id": 211571525,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601342998
    },
    {
        "content": "<p>or in other words, the author of the trait gets to make the decision, not the user</p>",
        "id": 211571575,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601343010
    },
    {
        "content": "<p>But to Alex's point, what does the documentation of the trait mean then, when it says that a PartialEq implementation should be symmetric?</p>",
        "id": 211571588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601343045
    },
    {
        "content": "<p>it means that being incorrect is a logic bug, not a soundness bug</p>",
        "id": 211571600,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601343081
    },
    {
        "content": "<p>I sympathize with the POV that says all bugs are bad</p>",
        "id": 211571612,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601343114
    },
    {
        "content": "<p>and some bugs get tool assistance</p>",
        "id": 211571663,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601343132
    },
    {
        "content": "<p>ok but clearly there's a difference between <code>assert_eq!(1 + 1, 3);</code> and <code>unreachable_unchecked()</code></p>",
        "id": 211571671,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601343144
    },
    {
        "content": "<p>some bugs are worse than others</p>",
        "id": 211571674,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601343148
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> Indeed - nice example with <code>PartialEq</code>!</p>",
        "id": 211571703,
        "sender_full_name": "Alex Summers",
        "timestamp": 1601343218
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> This makes a lot of sense to me too - the difficulty is that you kind have to anticipate how bad the resulting bugs could potentially be in all of your clients' code, here. In this sense, I think it feels to me a lot harder to decide when to use <code>unsafe trait</code> than other <code>unsafe</code> occurrences (and quite different in terms of thinking).</p>",
        "id": 211571876,
        "sender_full_name": "Alex Summers",
        "timestamp": 1601343442
    },
    {
        "content": "<blockquote>\n<p>For example, <a href=\"https://doc.rust-lang.org/std/iter/trait.TrustedLen.html\">https://doc.rust-lang.org/std/iter/trait.TrustedLen.html</a> - in contrast with other usages of \"unsafe\" it (on the surface) appears to be used to document specifications that aren't clearly/only concerned with UB. I think there were some other non-standard-library instances in the dataset too which used unsafe trait to flag certain expected postconditions, but I'd need to check.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"347112\">@Alex Summers</span>  TrustedLen exists because there is code in libstd and probably beyond that would cause UB if the contract is violated. that is exactly what unsafe traits are for. (ah someone already gave a pointer :)</p>\n<p>If one did that without marking <code>TrustedLen</code> as <code>unsafe</code>, this would be a critical soundness bug. So I strongly disagree when you say that one could also do this for other traits.</p>",
        "id": 211590874,
        "sender_full_name": "RalfJ",
        "timestamp": 1601366444
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/How.20do.20programmers.20use.20unsafe.20Rust.3F/near/211570188\">said</a>:</p>\n<blockquote>\n<p>I think the difference is that <code>unsafe trait</code> <em>guarantees</em> it is correct, and <code>trait</code> is a little more wishy-washy? but that distinction seems a little vague</p>\n</blockquote>\n<p>it's not wishy washy -- when you write unsafe code interacting with a safe <code>trait</code>, you have to support every possible safe implementation of that trait, no matter how much it violates the purpose of the trait.</p>",
        "id": 211590951,
        "sender_full_name": "RalfJ",
        "timestamp": 1601366510
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"347112\">Alex Summers</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/How.20do.20programmers.20use.20unsafe.20Rust.3F/near/211571876\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> This makes a lot of sense to me too - the difficulty is that you kind have to anticipate how bad the resulting bugs could potentially be in all of your clients' code, here. In this sense, I think it feels to me a lot harder to decide when to use <code>unsafe trait</code> than other <code>unsafe</code> occurrences (and quite different in terms of thinking).</p>\n</blockquote>\n<p>most of the time you could go either way. for example, <code>BTreeMap</code> is full of unsafe code and it has to all \"work\" (not cause UB) even if the underlying <code>Ord</code> implementation is ridicolous.  This is the price BTreeMap pays for working with a safe trait. The benefit if that users do not have to worry about UB when implementing <code>Ord</code>.</p>",
        "id": 211591084,
        "sender_full_name": "RalfJ",
        "timestamp": 1601366609
    },
    {
        "content": "<p>There could be a <code>BTreeMap2</code> that works with an <code>unsafe trait TrustedOrd</code> that can actually rely on the ordering function to be well-behaved when arguing for soundness. I suppose for btrees the benefit of this was considered not worth the cost for users.</p>",
        "id": 211591188,
        "sender_full_name": "RalfJ",
        "timestamp": 1601366672
    },
    {
        "content": "<p>So I'd say there is no \"anticipating how bad the bugs would be\", there is the question of \"can I afford to add extra checks whenever I need to know, for soundness, that the trait is implemented in a certain way\" (and are such checks even possible).</p>",
        "id": 211591262,
        "sender_full_name": "RalfJ",
        "timestamp": 1601366748
    },
    {
        "content": "<p>but <code>unsafe trait</code> is indeed very different from some other uses of <code>unsafe</code>; that is the usual issue with <code>unsafe</code> meaning two different things -- some discharge obligations, some introduce them. <code>unsafe trait</code> is very similar to <code>unsafe fn</code> (ignoring for a second that unfortunately <code>unsafe fn</code> also makes the body and <code>unsafe {}</code> block). in both cases the question is \"do I need to rely on extra proof by the user to establish soundness\". <code>unsafe trait</code> is much more open-ended though, so it is probably the most subtle of them all.</p>",
        "id": 211591418,
        "sender_full_name": "RalfJ",
        "timestamp": 1601366862
    },
    {
        "content": "<blockquote>\n<p>when you write unsafe code interacting with a safe trait, you have to support every possible safe implementation of that trait</p>\n</blockquote>\n<p>An interesting example here is sorting. So insertion sort in some C implementations work like this</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">new_elem</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">arr</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">new_elem</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">arr</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">new_elem</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">-=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">arr</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">new_elem</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>this allows us to skip the bounds check of the loop in the current rust implementation which uses <code>for 0..arr.len()</code>.<br>\nBut if the Ord implementation is broken, e.g. <code>partial_ord(...) -&gt; Ordering { random() }</code> this can results in an oob index.</p>",
        "id": 211591469,
        "sender_full_name": "lcnr",
        "timestamp": 1601366886
    },
    {
        "content": "<blockquote>\n<p>But if the Ord implementation is broken, e.g. partial_ord(...) -&gt; Ordering { random() } this can results in an oob index.</p>\n</blockquote>\n<p>Yes, this is a typical example of having to require <code>TrustedOrd</code> to get better performance.</p>",
        "id": 211591527,
        "sender_full_name": "RalfJ",
        "timestamp": 1601366937
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/How.20do.20programmers.20use.20unsafe.20Rust.3F/near/211571612\">said</a>:</p>\n<blockquote>\n<p>I sympathize with the POV that says all bugs are bad</p>\n</blockquote>\n<p>all bugs are bad, but some make your program meaningless and the assembly just a bunch of happens-to-run garbage, while others \"just\" make the program do the wrong thing in a well-defined way. I am curious if there is data of how often heisenbugs, remote code execution and similar nasty beasts are UB bugs vs not -- I'd expect the vast majority of them to be UB.<br>\nthere's a reason bugs care classified by severity, and while non-UB bugs can be severe, UB bugs are severe much more often (or so I think).</p>",
        "id": 211591757,
        "sender_full_name": "RalfJ",
        "timestamp": 1601367092
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> , thanks for the comments and pointer! I totally agree and see why <code>TrustedLen</code> needs to be an unsafe trait. I'm less clear on exactly how one should make the same decision again, though... at least in general. In particular, I don't see that this example gives me a strong reason <em>not</em> to declare a trait I'm writing as unsafe; the situations in which the decision is clear to me all seem to be ones in which the <code>unsafe</code> is needed.</p>",
        "id": 211639566,
        "sender_full_name": "Alex Summers",
        "timestamp": 1601394128
    },
    {
        "content": "<p>that's fair... if you make a trait safe that is a commitment that no unsafe code will ever rely on its functional contract for safety.</p>",
        "id": 211648260,
        "sender_full_name": "RalfJ",
        "timestamp": 1601397565
    },
    {
        "content": "<p>Isn't it rather that if you make a trait <em>unsafe</em> that is a commitment that no<br>\n<em>safe</em> code will rely on its functional contract?</p>",
        "id": 211655446,
        "sender_full_name": "oliver",
        "timestamp": 1601400533
    },
    {
        "content": "<p>Making a trait unsafe means that both safe and unsafe code can rely on the functional contract of said trait.</p>",
        "id": 211657202,
        "sender_full_name": "bjorn3",
        "timestamp": 1601401323
    },
    {
        "content": "<p>When a trait is safe, nobody can rely on the functional contract. For safe code this is not a problem, as it will at most give a wrong result or panic. For unsafe code this is a problem, as it may need certain behavior of the trait impl to prevent UB.</p>",
        "id": 211657485,
        "sender_full_name": "bjorn3",
        "timestamp": 1601401451
    },
    {
        "content": "<p>Never thought about it that way before</p>",
        "id": 211658470,
        "sender_full_name": "oliver",
        "timestamp": 1601401907
    },
    {
        "content": "<p>Very interesting <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 211658566,
        "sender_full_name": "oliver",
        "timestamp": 1601401934
    },
    {
        "content": "<p>To add on this: it is <em>never unsound</em> to mark a non-<code>unsafe</code> function as <code>unsafe</code>, or a non-<code>unsafe</code> trait as <code>unsafe</code>. That would, however, lead to hindering the ergonomics too much, which would cause <code>unsafe { ... }</code> and <code>unsafe impl</code> (the only two places in Rust that can <em>introduce</em> unsoundness  (sometimes indirectly)) to be trivialized, as people would start using it in order to interact with these APIs, should they become ubiquitous.<br>\nThat's why there is a second <em>tacit</em> expectation, which is to try and only mark as <code>unsafe</code> the functions or the traits, that when wrongly called or when wrongly implemented, introduce unsoundness / ways to trigger UB.</p>\n<p>Regarding, in practice, since that has been brought up, the question of \"shouldn't I conservativley mark my trait as <code>unsafe</code> in case somebody has <code>unsafe</code> code that would like to rely on my trait invariants?\", the rule of thumb is that that \"somebody\" ought to be within the same crate or workspace as the one defining the trait. At least to begin with.<br>\nShould a downstream user ask for an <code>unsafe</code> optimization, an <code>unsafe</code> marker trait can always be added afterwards:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">//! Somebody made a very convincing argument to the stdlib that an `unsafe trait Ord`</span>\n<span class=\"sd\">//! would lead to important improvements</span>\n\n<span class=\"c1\">// Then all the authors (here, T-libs) have to do is:</span>\n\n<span class=\"sd\">/// # Safety</span>\n<span class=\"sd\">/// They must respect the invariants ... yadda yadda</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">TrustedOrd</span><span class=\"w\"> </span>: <span class=\"nb\">Ord</span> <span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"o\">&lt;..</span><span class=\"p\">.</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">TrustedOrd</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">SomeStandardLibraryType</span><span class=\"o\">&lt;..</span><span class=\"p\">.</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"o\">&lt;..</span><span class=\"p\">.</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">TrustedOrd</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">SomeOtherStandardLibraryType</span><span class=\"o\">&lt;..</span><span class=\"p\">.</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>This way, the downstream user can also go an <code>unsafe impl TrustedOrd for TheirOwnLocalType</code> while also having that impl for the types bundled / accessible by the initial crate (such as stdlib in the example).</p>\n<p>TL,DR: Adding an <code>unsafe trait</code> \"extension\" to a trait can always be done afterwards / as an afterthought.</p>\n<p>But in practice, it is rather <strong>the other way around</strong>: the crate author has a function using <code>unsafe</code> code that can be made generic over some behavior, but mis-implementing the behavior could cause UB with that implementation. The crate author thus then wraps that behavior within an <code>unsafe trait</code>, allowing extensionability from downstream crates, without breaking the soundness model</p>",
        "id": 211663403,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1601403973
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127617\">Shnatsel</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/How.20do.20programmers.20use.20unsafe.20Rust.3F/near/211423297\">said</a>:</p>\n<blockquote>\n<p>That metadata database much have cost a fortune to build, since you have to compile every single crate from <a href=\"http://crates.io\">crates.io</a>. <br>\nI've attempted some source code analysis on <a href=\"http://crates.io\">crates.io</a> in the past, but didn't go beyond <code>rg</code> queries.<br>\nI did get a rough measure of the percentage of unsafe code though: <a href=\"https://www.reddit.com/r/rust/comments/g0wu9b/\">https://www.reddit.com/r/rust/comments/g0wu9b/</a></p>\n</blockquote>\n<p>some prior art here:</p>\n<ul>\n<li><a href=\"https://github.com/praezi/rust\">https://github.com/praezi/rust</a></li>\n<li><a href=\"http://pure.tudelft.nl/ws/portalfiles/portal/46926997/main2.pdf\">http://pure.tudelft.nl/ws/portalfiles/portal/46926997/main2.pdf</a></li>\n</ul>",
        "id": 211688047,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1601415511
    },
    {
        "content": "<p>I think there was another more recent attempt to do the same thing</p>",
        "id": 211688123,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1601415569
    },
    {
        "content": "<p>global call graph database of all crates, that is</p>",
        "id": 211688168,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1601415602
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132721\">Tony Arcieri</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/How.20do.20programmers.20use.20unsafe.20Rust.3F/near/211688168\">said</a>:</p>\n<blockquote>\n<p>global call graph database of all crates, that is</p>\n</blockquote>\n<p><a href=\"https://arxiv.org/pdf/2007.00752.pdf\">https://arxiv.org/pdf/2007.00752.pdf</a></p>",
        "id": 211746039,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1601465251
    },
    {
        "content": "<p>They use the term \"escape hatch\" as well</p>",
        "id": 211800105,
        "sender_full_name": "oliver",
        "timestamp": 1601489930
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281739\">Oliver</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/How.20do.20programmers.20use.20unsafe.20Rust.3F/near/211800105\">said</a>:</p>\n<blockquote>\n<p>They use the term \"escape hatch\" as well</p>\n</blockquote>\n<p>I think this is a pretty standard way of explaining the point of unsafe code to non-Rust programmers. If I recall correctly, the first time I heard this expression from Ralf when he was explaining Rust Belt to someone several years ago.</p>",
        "id": 211817869,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1601498711
    },
    {
        "content": "<p>Here is something that just came across my desk: <a href=\"https://arxiv.org/abs/2003.03296\">https://arxiv.org/abs/2003.03296</a><br>\nof course there have probably been pre-prints floating around</p>",
        "id": 211858864,
        "sender_full_name": "oliver",
        "timestamp": 1601514346
    },
    {
        "content": "<p>that's super cool, thanks!</p>",
        "id": 211867024,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1601524871
    },
    {
        "content": "<p>As I was reading the paper I also came back to comment about <code>set_len</code>; I'm glad to see that conversation already happened.</p>\n<p>That's yet more evidence that lang should perhaps consider that \"<code>unsafe</code> field\" feature we keep talking about.  I guess it doesn't solve it completely, so might even make it more confusing because there'd be even fewer places where the \"unsafe impacts the whole module\" can be demonstrated...</p>",
        "id": 211867174,
        "sender_full_name": "scottmcm",
        "timestamp": 1601525086
    },
    {
        "content": "<p>I'm not familiar with the context behind so-called <code>unsafe</code> fields. Generally<br>\nthis is addressing the point that Rust is more vulnerable to dangling pointers?</p>",
        "id": 211912564,
        "sender_full_name": "oliver",
        "timestamp": 1601560177
    },
    {
        "content": "<p>One of the ideas here I hadn't encountered is that the use of <code>unsafe</code><br>\nmight be more restricted.</p>",
        "id": 211912853,
        "sender_full_name": "oliver",
        "timestamp": 1601560285
    },
    {
        "content": "<p>The idea is that accessing an <code>unsafe</code> field requires an <code>unsafe</code> block even if all you're doing is writing to a <code>usize</code> field</p>",
        "id": 211913082,
        "sender_full_name": "oli",
        "timestamp": 1601560392
    },
    {
        "content": "<p>this would communicate that modifying the field can violate invariants that unsafe code elsewhere expects to hold</p>",
        "id": 211913120,
        "sender_full_name": "oli",
        "timestamp": 1601560413
    },
    {
        "content": "<p>basically it would allow making the <code>len</code> field of <code>Vec</code> public (not that I argue we should do that, but we could and it would be sound)</p>",
        "id": 211913181,
        "sender_full_name": "oli",
        "timestamp": 1601560436
    },
    {
        "content": "<p>In terms of more restricted <code>unsafe</code> the authors advocate the compiler look into<br>\n<code>unsafe</code> blocks to better validate integrity of the drop scheme. This seems like<br>\na not un-obvious or wholly bad idea.</p>",
        "id": 211916223,
        "sender_full_name": "oliver",
        "timestamp": 1601561542
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/jOsJuj1kvajwmecE6tkXV5Gc/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/jOsJuj1kvajwmecE6tkXV5Gc/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/jOsJuj1kvajwmecE6tkXV5Gc/image.png\"></a></div>",
        "id": 211918428,
        "sender_full_name": "oliver",
        "timestamp": 1601562437
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/How.20do.20programmers.20use.20unsafe.20Rust.3F/near/211913082\">said</a>:</p>\n<blockquote>\n<p>The idea is that accessing an <code>unsafe</code> field requires an <code>unsafe</code> block</p>\n</blockquote>\n<p>This reminds me of a comment to the effect that wrapping a single <code>unsafe</code><br>\nfunction call in a macro is definitely an anti-pattern</p>",
        "id": 211919781,
        "sender_full_name": "oliver",
        "timestamp": 1601562934
    },
    {
        "content": "<p>macros don't affect unsafety checks, you'd still need an <code>unsafe</code> block around it</p>",
        "id": 211920063,
        "sender_full_name": "oli",
        "timestamp": 1601563042
    },
    {
        "content": "<p>Yes it's in-line with that</p>",
        "id": 211920293,
        "sender_full_name": "oliver",
        "timestamp": 1601563146
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/MpkdSwKjLvmZ90Q-1eUZthIn/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/MpkdSwKjLvmZ90Q-1eUZthIn/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/MpkdSwKjLvmZ90Q-1eUZthIn/image.png\"></a></div>",
        "id": 211921052,
        "sender_full_name": "oliver",
        "timestamp": 1601563446
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/E2ZBLIBuWwtzckzfNDTBa9rm/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/E2ZBLIBuWwtzckzfNDTBa9rm/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/E2ZBLIBuWwtzckzfNDTBa9rm/image.png\"></a></div>",
        "id": 211922994,
        "sender_full_name": "oliver",
        "timestamp": 1601564206
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281739\">Oliver</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/How.20do.20programmers.20use.20unsafe.20Rust.3F/near/211921052\">said</a>:</p>\n<blockquote>\n<p><a href=\"/user_uploads/4715/MpkdSwKjLvmZ90Q-1eUZthIn/image.png\">image.png</a></p>\n</blockquote>\n<p>that rust example could just be <code>let y = &amp;mut x; *y = A { name: \"y\" };</code> I think</p>",
        "id": 211923212,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601564296
    },
    {
        "content": "<p>since it seems the point of the example is drop itself, not the <code>unsafe</code></p>",
        "id": 211923258,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601564318
    },
    {
        "content": "<p>the C++ example is also not the same code as the Rust example, so it seems odd to compare</p>",
        "id": 211923289,
        "sender_full_name": "oli",
        "timestamp": 1601564337
    },
    {
        "content": "<p>also small point of correction: the previous value is dropped when you <em>overwrite</em> it, not when the function returns</p>",
        "id": 211923291,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601564337
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/How.20do.20programmers.20use.20unsafe.20Rust.3F/near/211923289\">said</a>:</p>\n<blockquote>\n<p>the C++ example is also not the same code as the Rust example, so it seems odd to compare</p>\n</blockquote>\n<p>yeah the rust one should use Box to be consistent</p>",
        "id": 211923338,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601564355
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/E1OSkiixYOuGuDsCYwPvAtR6/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/E1OSkiixYOuGuDsCYwPvAtR6/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/E1OSkiixYOuGuDsCYwPvAtR6/image.png\"></a></div>",
        "id": 211923492,
        "sender_full_name": "oliver",
        "timestamp": 1601564411
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/dV8hKXcAM7EKcFKLjLQFUu50/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/dV8hKXcAM7EKcFKLjLQFUu50/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/dV8hKXcAM7EKcFKLjLQFUu50/image.png\"></a></div>",
        "id": 211924324,
        "sender_full_name": "oliver",
        "timestamp": 1601564729
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281739\">@Oliver</span> The idea behind \"<code>unsafe</code> fields\" is to remove the <code>set_len</code> confusion by making field access unsafe -- that way <code>set_len</code> _would_ have unsafe code in the body and wouldn't be picked up by the (misguided) \"search for unsafe functions whose body contains only safe Rust code\".</p>\n<p>Basically adding an \"unsafe encapsulation\" to the existing privacy encapsulation, as a way to help focus auditing (though I'm not sure whether it would be sufficient to change the current \"you must audit the entire module\" rule).</p>",
        "id": 212010293,
        "sender_full_name": "scottmcm",
        "timestamp": 1601619994
    },
    {
        "content": "<p>Conceptually that makes a lot of sense. That would be why code improvements like<br>\nthe following aren't really in scope<br>\n<a href=\"https://github.com/rust-lang/rust/pull/77318\">https://github.com/rust-lang/rust/pull/77318</a></p>",
        "id": 212097662,
        "sender_full_name": "oliver",
        "timestamp": 1601656173
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116109\">Vytautas Astrauskas</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/How.20do.20programmers.20use.20unsafe.20Rust.3F/near/211817869\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"281739\">Oliver</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/How.20do.20programmers.20use.20unsafe.20Rust.3F/near/211800105\">said</a>:</p>\n<blockquote>\n<p>They use the term \"escape hatch\" as well</p>\n</blockquote>\n<p>I think this is a pretty standard way of explaining the point of unsafe code to non-Rust programmers. If I recall correctly, the first time I heard this expression from Ralf when he was explaining Rust Belt to someone several years ago.</p>\n</blockquote>\n<p>yeah, I think I took that term from Derek. it usually seems to instill the right idea at least in PL researchers.^^</p>",
        "id": 212163840,
        "sender_full_name": "RalfJ",
        "timestamp": 1601719189
    },
    {
        "content": "<p>\"usually\" <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span> <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 212180026,
        "sender_full_name": "oliver",
        "timestamp": 1601744145
    },
    {
        "content": "<p>Well that's the best we can hope for when throwing syllables at each other in the hope that something sticks.^^</p>",
        "id": 212180442,
        "sender_full_name": "RalfJ",
        "timestamp": 1601744724
    },
    {
        "content": "<p>Languages are hard</p>",
        "id": 212214290,
        "sender_full_name": "teor",
        "timestamp": 1601802930
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/How.20do.20programmers.20use.20unsafe.20Rust.3F/near/211515950\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Do you mean references to packed fields or structs? I am asking because I do see repr on ADTs, but not on fields. </p>\n</blockquote>\n<p>Sorry, I used that as a shorthand for \"field of packed structs\". (More specifically, fields of packed structs that are actually insufficiently aligned for their type -- i.e., a <code>u8</code> field is still safe to take a reference to, and Rust treats it as such)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> Do you basically want the list of places for which the compiler ‚Äúrequires‚Äù an unsafe block with a reason ‚Äúborrow of packed field‚Äù?</p>",
        "id": 212795407,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1602231576
    },
    {
        "content": "<p>Here is the list of all functions for which the compiler generates this reason: <a href=\"/user_uploads/4715/cizrJYGt5M4FVGhvt4XTSSHl/packed_fields.csv\">packed_fields.csv</a>.</p>",
        "id": 212795536,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1602231653
    },
    {
        "content": "<p>There are 326 such functions coming from 41 crate.</p>",
        "id": 212795731,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1602231779
    },
    {
        "content": "<p>Unfortunately, we do not have the precise position information of each reason and, therefore, I cannot tell you which of these uses are already wrapped in unsafe blocks.</p>",
        "id": 212795862,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1602231868
    },
    {
        "content": "<p>However, 41 crate seems to be a small enough number to try to compile them on our infrastructure or Crater and then grep the logs for the compiler warning.</p>",
        "id": 212796461,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1602232231
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116109\">Vytautas Astrauskas</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/How.20do.20programmers.20use.20unsafe.20Rust.3F/near/212795862\">said</a>:</p>\n<blockquote>\n<p>Unfortunately, we do not have the precise position information of each reason and, therefore, I cannot tell you which of these uses are already wrapped in unsafe blocks.</p>\n</blockquote>\n<p>oh that's okay, this should not be allowed even inside unsafe blocks</p>",
        "id": 212911418,
        "sender_full_name": "RalfJ",
        "timestamp": 1602328705
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116109\">Vytautas Astrauskas</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/How.20do.20programmers.20use.20unsafe.20Rust.3F/near/212795536\">said</a>:</p>\n<blockquote>\n<p>Here is the list of all functions for which the compiler generates this reason: <a href=\"/user_uploads/4715/cizrJYGt5M4FVGhvt4XTSSHl/packed_fields.csv\">packed_fields.csv</a>.</p>\n</blockquote>\n<p>this is great, thanks a lot :)</p>\n<p>could you make this file available in <a href=\"https://github.com/rust-lang/rust/issues/27060\">https://github.com/rust-lang/rust/issues/27060</a> somehow?</p>",
        "id": 212911504,
        "sender_full_name": "RalfJ",
        "timestamp": 1602328892
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/How.20do.20programmers.20use.20unsafe.20Rust.3F/near/212911504\">said</a>:</p>\n<blockquote>\n<p>could you make this file available in <a href=\"https://github.com/rust-lang/rust/issues/27060\">https://github.com/rust-lang/rust/issues/27060</a> somehow?</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/issues/27060#issuecomment-706540964\">Done</a></p>",
        "id": 212913543,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1602332640
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"347112\">@Alex Summers</span> I'm probably too late with this, but I'm curious what % of all Rust code on <a href=\"http://crates.io\">crates.io</a> is unsafe. I didn't see this explicitly stated in the paper. I like this metric because it isn't skewed by crates that are used purely for name-squatting and contain little to no code, yet would be counted in \"% of crates that don't use unsafe code\".</p>",
        "id": 213157765,
        "sender_full_name": "Shnatsel",
        "timestamp": 1602597537
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127617\">Shnatsel</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/How.20do.20programmers.20use.20unsafe.20Rust.3F/near/213157765\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"347112\">Alex Summers</span> I'm probably too late with this, but I'm curious what % of all Rust code on <a href=\"http://crates.io\">crates.io</a> is unsafe. I didn't see this explicitly stated in the paper. I like this metric because it isn't skewed by crates that are used purely for name-squatting and contain little to no code, yet would be counted in \"% of crates that don't use unsafe code\".</p>\n</blockquote>\n<p>MIR total statement count: 334168941<br>\nMIR statement count in user-written unsafe code: 14525076 (4.35%)<br>\nMIR statement count in all unsafe code: 16132548 (4.83%)</p>",
        "id": 213160370,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1602598449
    },
    {
        "content": "<p>Oh, this lines up with the LoC numbers I got far better than I expected. Thanks!</p>",
        "id": 213163502,
        "sender_full_name": "Shnatsel",
        "timestamp": 1602599587
    },
    {
        "content": "<p>heard that macros are the only \"escape hatches\"</p>",
        "id": 213688678,
        "sender_full_name": "oliver",
        "timestamp": 1602997409
    },
    {
        "content": "<p>meaning that all macros are escape hatches not just the unsafe macro</p>",
        "id": 213721845,
        "sender_full_name": "oliver",
        "timestamp": 1603049986
    },
    {
        "content": "<p>unsafe is not a macro</p>",
        "id": 213974630,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603225367
    },
    {
        "content": "<p>and I wouldn't describe macros as escape hatches really</p>",
        "id": 213974647,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603225378
    },
    {
        "content": "<p>except in the sense they're more flexible than other things that go through the type system; but the code they generate is still type-checked after being expanded</p>",
        "id": 213974698,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603225406
    },
    {
        "content": "<p>macros are arguably <em>syntax</em> escape hatches, but not <em>safety</em> escape hatches.</p>",
        "id": 213983349,
        "sender_full_name": "scottmcm",
        "timestamp": 1603230336
    },
    {
        "content": "<p><a href=\"https://docs.rs/plutonium/\">https://docs.rs/plutonium/</a> heh</p>",
        "id": 213988053,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1603233306
    },
    {
        "content": "<p>That advisory is technically yanked, I think we should un-yank it.</p>",
        "id": 213989069,
        "sender_full_name": "Shnatsel",
        "timestamp": 1603234158
    },
    {
        "content": "<p>haha yeah</p>",
        "id": 213989909,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1603234828
    },
    {
        "content": "<p>lol this is fun: <a href=\"https://docs.rs/plutonium/0.5.2/plutonium/macro.optimize.html\">https://docs.rs/plutonium/0.5.2/plutonium/macro.optimize.html</a></p>",
        "id": 213989924,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1603234839
    },
    {
        "content": "<p>maybe don't mix that with <code>zeroize</code></p>",
        "id": 213989935,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1603234847
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132721\">Tony Arcieri</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/How.20do.20programmers.20use.20unsafe.20Rust.3F/near/213988053\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://docs.rs/plutonium/\">https://docs.rs/plutonium/</a> heh</p>\n</blockquote>\n<p>This example makes me wonder whether I should write a simple website that allows querying cargo geiger style information from our database. Since we are using the information from the compiler, for us it is much easier to find all unsafe code and precisely identify its origin.</p>",
        "id": 214031166,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1603275093
    },
    {
        "content": "<p>Cargo geiger, for example, has a problem that if you mix it with cargo expand, then it most likely will start reporting false positives such as unsafe code generated by the compiler itself. (For example, <code>#[derive(PartialEq)]</code> emits unsafe code for enums.)</p>",
        "id": 214031400,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1603275255
    },
    {
        "content": "<p>I may have done a bad thing in the <code>cargo-geiger</code> vs <code>plutonium</code> arms race: <a href=\"https://github.com/mxxo/plutonium/issues/1\">https://github.com/mxxo/plutonium/issues/1</a></p>",
        "id": 214129970,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1603325065
    },
    {
        "content": "<p>you need some <a href=\"https://github.com/lukaslueg/volkswagen/\">https://github.com/lukaslueg/volkswagen/</a></p>",
        "id": 214130102,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603325207
    },
    {
        "content": "<p>haha yeah exactly</p>",
        "id": 214130271,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1603325394
    },
    {
        "content": "<p>Crisis averted. @mxxo doesn't want to implement it.</p>",
        "id": 214208380,
        "sender_full_name": "bjorn3",
        "timestamp": 1603382499
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132721\">Tony Arcieri</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/How.20do.20programmers.20use.20unsafe.20Rust.3F/near/213989924\">said</a>:</p>\n<blockquote>\n<p>lol this is fun: <a href=\"https://docs.rs/plutonium/0.5.2/plutonium/macro.optimize.html\">https://docs.rs/plutonium/0.5.2/plutonium/macro.optimize.html</a></p>\n</blockquote>\n<p>oh wow I didn't realize they added more such great macros to the crate^^</p>",
        "id": 214339791,
        "sender_full_name": "RalfJ",
        "timestamp": 1603472999
    }
]