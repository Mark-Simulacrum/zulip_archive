[
    {
        "content": "<p>My new job is so awesome that I get 2 weeks of paid work time to work with a small team on a project of our choosing. It will most likely be coded in Go. Any ideas on what it could be that would be beneficial to Rust ecosystem?<br>\nNo guarantees on whether it would be released to the public, but I could get something prototyped for you at least</p>",
        "id": 146818160,
        "sender_full_name": "Shnatsel",
        "timestamp": 1541446580
    },
    {
        "content": "<p>Add support for modifying symbols in object files. Currently the Go standard library only supports parsing object files.</p>",
        "id": 146818424,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1541446780
    },
    {
        "content": "<p>That may sound out of left field, but it would unlock using multiple different versions of a Rust crate which depends on a C library.</p>",
        "id": 146818531,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1541446850
    },
    {
        "content": "<p>Obviously even better if it's in Rust rather than Go, but anything would be great.</p>",
        "id": 146818566,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1541446880
    },
    {
        "content": "<p>I'm not sure I understand the task. Are we talking about .o files? What kind of modifications do you expect and what are the use cases?</p>",
        "id": 146819172,
        "sender_full_name": "Shnatsel",
        "timestamp": 1541447331
    },
    {
        "content": "<p>Whatever the platform-specific object file format is. Mach-O for Mac, ELF for Linux, PE for Windows, etc. I think those three would be the biggest deal. Most crates probably don't target outside of those three.</p>",
        "id": 146819285,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1541447404
    },
    {
        "content": "<p>And the modifications are simply symbol renaming.</p>",
        "id": 146819300,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1541447413
    },
    {
        "content": "<p>The goal is to compile and then rename the objects in the object file with a custom prefix which is specific to this version of your crate.</p>",
        "id": 146819330,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1541447448
    },
    {
        "content": "<p>E.g., say you have a crate called <code>foo</code>. If you were compiling version 1.2.3 of that crate, you'd add the prefix <code>__FOO_1_2_3_</code> to all of the symbols. That way, two different object files build from the same library but built for different versions of the crate would have no overlapping symbols, and so linking would succeed.</p>",
        "id": 146819385,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1541447507
    },
    {
        "content": "<p>That... sounds actually pretty trivial. Is there any reason it hasn't been done before?</p>",
        "id": 146819461,
        "sender_full_name": "Shnatsel",
        "timestamp": 1541447547
    },
    {
        "content": "<p>Not sure why. I suspect it just wasn't needed for their use cases.</p>",
        "id": 146819478,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1541447564
    },
    {
        "content": "<p>If you want more details on how this works - and the awful lengths you have to go to if you don't have object-file-level symbol renaming - see the README here: <a href=\"https://github.com/google/mundane/tree/master/boringssl\" target=\"_blank\" title=\"https://github.com/google/mundane/tree/master/boringssl\">https://github.com/google/mundane/tree/master/boringssl</a></p>",
        "id": 146819524,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1541447614
    },
    {
        "content": "<p>Why have I never heard of Mundane before? It actually looks very interesting</p>",
        "id": 146820292,
        "sender_full_name": "Shnatsel",
        "timestamp": 1541448345
    },
    {
        "content": "<p>We haven't officially announced it yet. It's been on my back burner, but I got super swamped with other stuff recently.</p>",
        "id": 146820341,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1541448365
    },
    {
        "content": "<p>Is mundane no longer developed on the fuschia git?</p>",
        "id": 146820348,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1541448390
    },
    {
        "content": "<p>It is, but it's mirrored to GitHub.</p>",
        "id": 146820358,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1541448402
    },
    {
        "content": "<p>The source of truth is in a separate repo now, but still in <a href=\"http://fuchsia.googlesource.com\" target=\"_blank\" title=\"http://fuchsia.googlesource.com\">fuchsia.googlesource.com</a>: <a href=\"https://fuchsia.googlesource.com/mundane\" target=\"_blank\" title=\"https://fuchsia.googlesource.com/mundane\">https://fuchsia.googlesource.com/mundane</a></p>",
        "id": 146820375,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1541448430
    },
    {
        "content": "<p>And <span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span>, to give you a sense of how awesome it'd be to have object file symbol renaming, it took me probably a month of full time work to get the symbol renaming in Mundane working.</p>",
        "id": 146820411,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1541448470
    },
    {
        "content": "<p>Part of that was adding symbol prefixing support to BoringSSL, and part of it was integrating it into Mundane. It was a giant PITA.</p>",
        "id": 146820456,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1541448505
    },
    {
        "content": "<p>C build systems are always a giant PITA</p>",
        "id": 146820476,
        "sender_full_name": "Shnatsel",
        "timestamp": 1541448524
    },
    {
        "content": "<p>I trust you've written the Go program to discover symbols as well?</p>",
        "id": 146820525,
        "sender_full_name": "Shnatsel",
        "timestamp": 1541448601
    },
    {
        "content": "<p>Anyway, thanks for the input, I'll float that idea to the team</p>",
        "id": 146820677,
        "sender_full_name": "Shnatsel",
        "timestamp": 1541448708
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> productionize <a href=\"https://blog.filippo.io/rustgo/\" target=\"_blank\" title=\"https://blog.filippo.io/rustgo/\">https://blog.filippo.io/rustgo/</a> ? <span class=\"emoji emoji-1f61c\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 146821440,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1541449445
    },
    {
        "content": "<p>Why is that different from linking C libraries? Or that's somehow made a PITA in Go?</p>",
        "id": 146821488,
        "sender_full_name": "Shnatsel",
        "timestamp": 1541449522
    },
    {
        "content": "<p>it avoids CGo and libffi and the associated overhead</p>",
        "id": 146821546,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1541449563
    },
    {
        "content": "<p>Okay, that's pretty cool, but I'm not sure I can handle that much unsafety, and I have no clue how to debug what's going on. Still, that's neat. I'll float this idea</p>",
        "id": 146821953,
        "sender_full_name": "Shnatsel",
        "timestamp": 1541450030
    },
    {
        "content": "<p>indeed it seems hard <span class=\"emoji emoji-1f635\" title=\"dizzy\">:dizzy:</span></p>",
        "id": 146826830,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1541454558
    }
]