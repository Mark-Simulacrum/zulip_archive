[
    {
        "content": "<p>Hi!</p>\n<p>Is cargo audit sensible to feature flags? I.e. is it possible to limit an advisory to a set of feature flags? (or is this not possible even in theory?</p>",
        "id": 258033111,
        "sender_full_name": "Jorge Leitao",
        "timestamp": 1634565628
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399416\">@Jorge Leitao</span> it only parses <code>Cargo.lock</code> so it can't be aware of feature flags</p>",
        "id": 258033549,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1634565794
    },
    {
        "content": "<p>there's been a lot of discussion about call graph analysis, however</p>",
        "id": 258033572,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1634565808
    },
    {
        "content": "<p>that would be awesome - I assume a _bit_ more difficult though. Is considering feature flags in scope atm, or the plan is to move to call graph analysis directly?</p>",
        "id": 258034441,
        "sender_full_name": "Jorge Leitao",
        "timestamp": 1634566133
    },
    {
        "content": "<p>call graph analysis has been discussed for years. it's been a perpetual data source problem though</p>",
        "id": 258034984,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1634566353
    },
    {
        "content": "<p>I'm not sure how you would even go about building a feature flag-aware false positive detection without using call graph analysis, as it were</p>",
        "id": 258035056,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1634566382
    },
    {
        "content": "<p>ok, then I likely do not know what call graph analysis means. I was thinking it terms of an optional field in the advisoty with the set of features that are affected. If nothing is provided, all of them are affected. If one is provided, the advisory is only correspondent to that feature (or something like that)</p>",
        "id": 258035709,
        "sender_full_name": "Jorge Leitao",
        "timestamp": 1634566661
    },
    {
        "content": "<p>your point is that we can't identify on the checking side whether the lib is using a given feature flag?</p>",
        "id": 258035821,
        "sender_full_name": "Jorge Leitao",
        "timestamp": 1634566699
    },
    {
        "content": "<p>detecting feature activation through transitive dependencies is a tricky problem, short of doing a full call graph analysis</p>",
        "id": 258036808,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1634567095
    },
    {
        "content": "<p>we do collect what functions are impacted by an advisory, with the goal of eventually using that for call graph analysis</p>",
        "id": 258036866,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1634567113
    },
    {
        "content": "<p>thanks a lot for the explanation. Could you elaborate where is it tricky? Is the issue that <code>Cargo.lock</code> has no information over features, because they are resolved at a later level? Wouldn't it be possible to combine both Cargo.toml (features) and Cargo.lock (dependency tree and versions)?</p>",
        "id": 258038429,
        "sender_full_name": "Jorge Leitao",
        "timestamp": 1634567693
    },
    {
        "content": "<p>any dependency can activate any feature of any other dependency</p>",
        "id": 258039564,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1634568162
    },
    {
        "content": "<p>and feature activation is unified across all dependencies</p>",
        "id": 258039609,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1634568179
    },
    {
        "content": "<p>so even if a toplevel crate doesn't activate a feature of a crate it depends on explicitly, it can still be activated implicitly by another dependency</p>",
        "id": 258039730,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1634568225
    },
    {
        "content": "<p>also features are just one instance of conditional compilation. call graph analysis would work with all of them in a way that's (hopefully!) reliable</p>",
        "id": 258040543,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1634568556
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132721\">Tony Arcieri</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/advisory.20on.20feature.20flags.3F/near/258036808\">said</a>:</p>\n<blockquote>\n<p>detecting feature activation through transitive dependencies is a tricky problem, short of doing a full call graph analysis</p>\n</blockquote>\n<p>We can just call out to <code>cargo metadata</code> to get the info on the call graph and activated features. That's reliable because it uses the exact same algorithm as Cargo.</p>",
        "id": 258767017,
        "sender_full_name": "Shnatsel",
        "timestamp": 1634933236
    },
    {
        "content": "<p>please implement it then <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 258772653,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1634935859
    },
    {
        "content": "<p>I don't think <code>cargo metadata</code> provides unified feature activation</p>",
        "id": 258775607,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1634937284
    },
    {
        "content": "<p>I think you can compute unified feature activation from it</p>",
        "id": 258775622,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1634937293
    },
    {
        "content": "<p>but at the very least it's an extra step</p>",
        "id": 258775630,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1634937298
    },
    {
        "content": "<p>someone should probably write up an issue about it. hopefully you're volunteering there <span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span></p>",
        "id": 258775814,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1634937374
    },
    {
        "content": "<p>but it seems nontrivial to me</p>",
        "id": 258775822,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1634937378
    },
    {
        "content": "<p>I have done most of the work in <code>rust-audit</code> already, should be fairly easy to adapt that. Although that was before the v2 resolver.</p>",
        "id": 258776317,
        "sender_full_name": "Shnatsel",
        "timestamp": 1634937572
    },
    {
        "content": "<p>A potential problem I see is that you want to audit <em>your</em> app with all features enabled, but some of the features might be mutually exclusive. I'm not sure if <code>cargo-metadata</code> would still work or not if the code fails to compile.</p>",
        "id": 258776464,
        "sender_full_name": "Shnatsel",
        "timestamp": 1634937639
    },
    {
        "content": "<p>That would also potentially mean that we're running build scripts...</p>",
        "id": 258776519,
        "sender_full_name": "Shnatsel",
        "timestamp": 1634937665
    },
    {
        "content": "<p>For <code>rust-audit</code> that was not a problem because it only embedded info about the <em>current</em> feature configuration.</p>",
        "id": 258776877,
        "sender_full_name": "Shnatsel",
        "timestamp": 1634937861
    },
    {
        "content": "<p>yeah I mean, that's the biggest difference: the current analysis is of <code>Cargo.lock</code></p>",
        "id": 258777873,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1634938383
    },
    {
        "content": "<p><code>cargo-metadata</code> is trying to take on a whole world of information beyond that</p>",
        "id": 258777895,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1634938400
    },
    {
        "content": "<p>hi, is this where all the dead bodies are? :)</p>",
        "id": 260201966,
        "sender_full_name": "pinkforest(she/her)",
        "timestamp": 1635975943
    }
]