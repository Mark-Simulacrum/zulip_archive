[
    {
        "content": "<p>Well guess I'll try making my first Zulip topic here... a place to dump info about your security-related crates</p>",
        "id": 136008391,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1539819602
    },
    {
        "content": "<p>here's another one of mine: subtle-encoding: constant time hex and base64 encoders/decoders: <a href=\"https://github.com/iqlusioninc/crates/tree/master/subtle-encoding\" target=\"_blank\" title=\"https://github.com/iqlusioninc/crates/tree/master/subtle-encoding\">https://github.com/iqlusioninc/crates/tree/master/subtle-encoding</a></p>",
        "id": 136008452,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1539819654
    },
    {
        "content": "<p>this looks pretty neat <a href=\"https://github.com/Shnatsel/libdiffuzz\" target=\"_blank\" title=\"https://github.com/Shnatsel/libdiffuzz\">https://github.com/Shnatsel/libdiffuzz</a></p>",
        "id": 136052510,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1539878374
    },
    {
        "content": "<p>Hey! libdiffuzz author here. That thing is kind of a hack to get by without Memory Sanitizer, and will be mostly obsolete in Rust contexts once MSAN works well with Rust (but there are use cases for it elsewhere).<br>\nAlso, it is a dynamic analysis tool that's only really useful when combined with a fuzzer (just like sanitizers), and does not check the program exhaustively. This is explicitly out of scope of this WG, which is more about verifying unsafe code statically or getting rid of unsafe code entirely.</p>",
        "id": 136066105,
        "sender_full_name": "Shnatsel",
        "timestamp": 1539891038
    },
    {
        "content": "<p>As for as security-related crates, <a href=\"https://crates.io/crates/untrusted\" target=\"_blank\" title=\"https://crates.io/crates/untrusted\">https://crates.io/crates/untrusted</a> looks neat. I have never used it, though, so can't say if it's actually good or bad.</p>",
        "id": 136066158,
        "sender_full_name": "Shnatsel",
        "timestamp": 1539891115
    },
    {
        "content": "<p>I like what <code>untrusted</code> accomplishes</p>",
        "id": 136079498,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1539906481
    },
    {
        "content": "<p>although I find it moderately annoying it's part of <em>ring</em>'s public API</p>",
        "id": 136079540,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1539906501
    },
    {
        "content": "<p>rather than hidden behind the scenes</p>",
        "id": 136079543,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1539906510
    },
    {
        "content": "<p>I guess that gives the caller more control over allocation... still a bit obtrusive</p>",
        "id": 136079555,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1539906543
    },
    {
        "content": "<p>here's a crate some of you might find interesting: <a href=\"https://keychain-services.rs/docs/\" target=\"_blank\" title=\"https://keychain-services.rs/docs/\">https://keychain-services.rs/docs/</a></p>",
        "id": 136958092,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1541115749
    },
    {
        "content": "<p>wrapper around the macOS Security Framework's Keychain Services</p>",
        "id": 136958298,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1541116011
    },
    {
        "content": "<p>gonna try to use this for GPG and git signing</p>",
        "id": 136958309,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1541116026
    },
    {
        "content": "<p>The idea being <code>untrusted</code> is that you are supposed to be able to use it end-to-end without using the <code>as_slice_less_safe()</code> function. That's why it's part of <em>ring</em>'s API.</p>",
        "id": 137080001,
        "sender_full_name": "briansmith",
        "timestamp": 1541190179
    },
    {
        "content": "<p>In particular, any function that takes an <code>untrusted::Input</code> indicates that it is responsible for parsing and validating those untrusted inputs, so the caller doesn't have to (and in many cases, shouldn't try). This design design works well if one is using <code>untrusted::Input</code> for all parsing but it works less well if one is using it only because <em>ring</em> requires it. For example, it worked very well in my own TLS implementation because I used <code>untrusted</code> to parse TLS records and TLS handshake messages, so everything is already in <code>untrusted::Input</code> form when I hand it to <em>ring</em>.</p>",
        "id": 137080211,
        "sender_full_name": "briansmith",
        "timestamp": 1541190401
    },
    {
        "content": "<p><a href=\"https://careers.microsoft.com/us/en/job/750306/Security-Software-Engineer\" target=\"_blank\" title=\"https://careers.microsoft.com/us/en/job/750306/Security-Software-Engineer\">https://careers.microsoft.com/us/en/job/750306/Security-Software-Engineer</a></p>",
        "id": 182141823,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1574984958
    },
    {
        "content": "<p>talk about zombie threads?^^</p>",
        "id": 182195516,
        "sender_full_name": "RalfJ",
        "timestamp": 1575050830
    },
    {
        "content": "<blockquote>\n<p>Additionally, our vulnerability research tools are primarily written in Rust so experience there is a plus.</p>\n</blockquote>\n<p>cool :D</p>",
        "id": 182195547,
        "sender_full_name": "RalfJ",
        "timestamp": 1575050874
    }
]