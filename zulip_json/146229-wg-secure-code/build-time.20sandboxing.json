[
    {
        "content": "<p>This keeps coming up: <a href=\"https://github.com/rust-secure-code/wg/issues/29\" target=\"_blank\" title=\"https://github.com/rust-secure-code/wg/issues/29\">https://github.com/rust-secure-code/wg/issues/29</a></p>",
        "id": 156703912,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1548261900
    },
    {
        "content": "<p>Since this is a second line of defence and you're pwned regardless of whether we have it or not, I'm not sure I'm on board with this being a 2019 goal. There is already so much on our plates, and I'd expect better authenticating downloaded packages in the first place to take priority.</p>",
        "id": 157484933,
        "sender_full_name": "Shnatsel",
        "timestamp": 1549230301
    },
    {
        "content": "<blockquote>\n<p>you're pwned regardless of whether we have it or not</p>\n</blockquote>\n<p>Are you referring to having the resulting build contaminated whether there is a sandbox or not?</p>",
        "id": 157486256,
        "sender_full_name": "snf",
        "timestamp": 1549232838
    },
    {
        "content": "<p>Yes.</p>",
        "id": 157486470,
        "sender_full_name": "Shnatsel",
        "timestamp": 1549233139
    },
    {
        "content": "<p>I was encouraged by seeing crater disable network access</p>",
        "id": 157543454,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1549304419
    },
    {
        "content": "<p>that leads me to believe that crates aren't presently doing things like hitting the network during builds</p>",
        "id": 157543468,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1549304433
    },
    {
        "content": "<p>for a \"do no harm\" sandbox, the longer you wait, the harder it will be to retrofit restrictions</p>",
        "id": 157543505,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1549304462
    },
    {
        "content": "<p>and yes... it seems people have pretty polarized opinions on this</p>",
        "id": 157543575,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1549304522
    },
    {
        "content": "<p>on the one hand, there's the \"RCE? game over man, game over\" argument <a href=\"https://users.rust-lang.org/t/how-does-crates-io-differ-from-npm/22658/21\" target=\"_blank\" title=\"https://users.rust-lang.org/t/how-does-crates-io-differ-from-npm/22658/21\">https://users.rust-lang.org/t/how-does-crates-io-differ-from-npm/22658/21</a></p>",
        "id": 157543780,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1549304651
    },
    {
        "content": "<p>Attacking at build-time allows for a fly-by-night attack that leaves no forensic evidence and potentially permits lateral movement</p>",
        "id": 157543868,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1549304731
    },
    {
        "content": "<p>as such, it's also the superset of the alternative, which is to trojan the target artifact</p>",
        "id": 157543885,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1549304747
    },
    {
        "content": "<p>to me, one of these things is clearly worse than the other</p>",
        "id": 157543957,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1549304782
    },
    {
        "content": "<p>speaking as someone who used to work on a DFIR team for several years... a non-build-script attack leaves forensic evidence not just in the target binary, but in the original source code</p>",
        "id": 157544119,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1549304957
    },
    {
        "content": "<p>that makes finding the payload a matter of examining the source of the original crate</p>",
        "id": 157544135,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1549304980
    },
    {
        "content": "<p>you don't get that guarantee with build scripts</p>",
        "id": 157544142,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1549304986
    },
    {
        "content": "<p>they could grab a malicious payload off the Internet, and do it in such a way that thwarts attempts by researchers to discover it</p>",
        "id": 157544214,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1549305007
    },
    {
        "content": "<p>build-time attacks are much, much more worrisome to me</p>",
        "id": 157544240,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1549305037
    },
    {
        "content": "<blockquote>\n<p>that leads me to believe that crates aren't presently doing things like hitting the network during builds</p>\n</blockquote>\n<p>I've seen crates that download code using git to build a C dependency.</p>",
        "id": 157544266,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1549305061
    },
    {
        "content": "<p>huh... do those pass crater?</p>",
        "id": 157544364,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1549305122
    },
    {
        "content": "<p>I'm going to guess no</p>",
        "id": 157544423,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1549305145
    },
    {
        "content": "<p>No idea. The only example I know of is in crosvm's new vTPM code.</p>",
        "id": 157544432,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1549305152
    },
    {
        "content": "<p>happen to know a crate name?</p>",
        "id": 157544446,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1549305165
    },
    {
        "content": "<p>dtolnay might. I got the impression he got the idea from another crate.</p>",
        "id": 157544468,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1549305184
    },
    {
        "content": "<p>to me the \"proper\" way to do that is a git submodule in the original repo, and then that can just package the source at the commit the submodule is pinned to into the resulting crate...</p>",
        "id": 157544521,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1549305228
    },
    {
        "content": "<p>The idea is that the source is downloaded and built only when the platform hasn't already installed a static lib.</p>",
        "id": 157544522,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1549305231
    },
    {
        "content": "<p>aah</p>",
        "id": 157544527,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1549305237
    },
    {
        "content": "<p>Agreed that crates should have a more graceful way of using third-party code than downloading in <a href=\"http://build.rs\" target=\"_blank\" title=\"http://build.rs\">build.rs</a>.</p>",
        "id": 157544606,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1549305278
    },
    {
        "content": "<p>if you happen to know the name of such a crate, I'd be interested in investigating how crater handles those crates</p>",
        "id": 157544695,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1549305346
    },
    {
        "content": "<p>the fact crater is shutting off things like network access to operate kind of speaks to the need for the general feature, IMO...</p>",
        "id": 157544760,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1549305370
    },
    {
        "content": "<p>but maybe I'm just a fan of POLA <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 157544782,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1549305388
    },
    {
        "content": "<p>Found one: <a href=\"https://github.com/tversteeg/castle-game/blob/master/build.rs\" target=\"_blank\" title=\"https://github.com/tversteeg/castle-game/blob/master/build.rs\">https://github.com/tversteeg/castle-game/blob/master/build.rs</a></p>",
        "id": 157545150,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1549305624
    },
    {
        "content": "<p><a href=\"https://crates.io/crates/castle-game\" target=\"_blank\" title=\"https://crates.io/crates/castle-game\">https://crates.io/crates/castle-game</a></p>",
        "id": 157545164,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1549305636
    },
    {
        "content": "<p>I just looked through a few pages of crates that depend on git2 and this was the first one I found that used it in <a href=\"http://build.rs\" target=\"_blank\" title=\"http://build.rs\">build.rs</a> for downloading.</p>",
        "id": 157545219,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1549305678
    },
    {
        "content": "<p>it's listed as \"skipped\" in crater</p>",
        "id": 157545409,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1549305834
    },
    {
        "content": "<p>Where can I get this crater information?</p>",
        "id": 157545650,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1549305993
    },
    {
        "content": "<p>it doesn't exactly have the world's most usable/browsable UI, heh</p>",
        "id": 157545677,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1549306022
    },
    {
        "content": "<p><a href=\"https://crater-reports.s3.amazonaws.com/beta-1.33-1/index.html\" target=\"_blank\" title=\"https://crater-reports.s3.amazonaws.com/beta-1.33-1/index.html\">https://crater-reports.s3.amazonaws.com/beta-1.33-1/index.html</a></p>",
        "id": 157545689,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1549306031
    },
    {
        "content": "<p><a href=\"https://crater.rust-lang.org/ex/beta-1.33-1\" target=\"_blank\" title=\"https://crater.rust-lang.org/ex/beta-1.33-1\">https://crater.rust-lang.org/ex/beta-1.33-1</a></p>",
        "id": 157545716,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1549306052
    },
    {
        "content": "<p>hmmm some discussion of external dependency handling here <a href=\"https://internals.rust-lang.org/t/external-dependencies-in-declarative-format/9372\" target=\"_blank\" title=\"https://internals.rust-lang.org/t/external-dependencies-in-declarative-format/9372\">https://internals.rust-lang.org/t/external-dependencies-in-declarative-format/9372</a></p>",
        "id": 157706315,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1549472829
    },
    {
        "content": "<p>I'm not wading into this thread, but if everyone is on the same page that we should sandbox, I'm happy to review/write whatevers needed by way of a sandboxing library.</p>",
        "id": 157736070,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1549494896
    },
    {
        "content": "<p>I think it'd be at least be interesting to build a prototype with something like gaol</p>",
        "id": 157736337,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1549495089
    },
    {
        "content": "<p>having something tangible to talk about at least breaks the endless pontificating cycle</p>",
        "id": 157736352,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1549495119
    },
    {
        "content": "<p>Is depending on containers (at least for right now) out of the question?</p>",
        "id": 157786646,
        "sender_full_name": "Cem Karan",
        "timestamp": 1549554642
    },
    {
        "content": "<p>I know that could make for a heavy-weight dependency, and it could be a headache for supporting multiple platforms, but until gaol is considered to be production ready, containers may be a good option.</p>",
        "id": 157786718,
        "sender_full_name": "Cem Karan",
        "timestamp": 1549554700
    },
    {
        "content": "<p>Containers are chroot+cgroups with a bunch of tooling on top. They do not really introduce much in the way of dependencies - they just need a kernel with those facilities, such as Linux, FreeBSD or Solaris/Illumos. This means that MacOS and Windows would be missing out.</p>",
        "id": 157801411,
        "sender_full_name": "Shnatsel",
        "timestamp": 1549565002
    },
    {
        "content": "<p>see also namespaces+seccomp, which are IMO the more interesting tools for security. as it were, gaol provides a cross-platform abstraction to those and, well... not entirely dissimilar facilities on other operating systems (not entirely similar either, but \"best sandbox for the current OS\" is probably a reasonable goal)</p>",
        "id": 158010114,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1549867096
    },
    {
        "content": "<p>spitballing her: for tackling the cross-platform issue: what if the build script were compiled to wasm and run with an OS-agnostic abi?</p>",
        "id": 158056787,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1549913001
    },
    {
        "content": "<p>I saw there was a WASM + CloudABI project as it were... but that seems like a substantially larger change than just sandboxing the build script</p>",
        "id": 158130646,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1549988935
    },
    {
        "content": "<p>what's nice about using something like gaol is crate consumers could opt into giving the build script all of the access ones today have</p>",
        "id": 158130676,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1549988961
    },
    {
        "content": "<p>aah yeah this: <a href=\"https://github.com/CraneStation/wasmtime\" target=\"_blank\" title=\"https://github.com/CraneStation/wasmtime\">https://github.com/CraneStation/wasmtime</a></p>",
        "id": 158130691,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1549988987
    },
    {
        "content": "<p>fun name <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 158130695,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1549988993
    },
    {
        "content": "<p>apparently Amazon wrote a tool of this ilk for Firecracker: <a href=\"https://github.com/firecracker-microvm/firecracker/blob/master/docs/jailer.md\" target=\"_blank\" title=\"https://github.com/firecracker-microvm/firecracker/blob/master/docs/jailer.md\">https://github.com/firecracker-microvm/firecracker/blob/master/docs/jailer.md</a></p>",
        "id": 158760909,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1550441023
    },
    {
        "content": "<p>Seems similar to minijail which we use in crosvm and in Chrome OS</p>",
        "id": 158761041,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1550441245
    },
    {
        "content": "<p>hi there, considering that most people are importing dependencies without reading their code and that these can contain build scripts or procedural macros that can compromise one's computer, I was thinking we should maybe provide a sandboxed offline compilation process by default in Cargo (SELinux, Hyper-V APIs, jail). What is your opinion on such a thing?</p>\n<p>I'm also thinking about RLS that automatically compiles dependencies, which means it's automatically running untrusted code unsandboxed.</p>",
        "id": 161480654,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1553286280
    },
    {
        "content": "<p>There is already a topic for this that you might want to read through and repost your question: \"build-time sandboxing\"</p>",
        "id": 161481285,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1553286803
    },
    {
        "content": "<p>Yes sorry, I have realized, happy to see it's already being discussed.</p>",
        "id": 161481459,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1553286953
    },
    {
        "content": "<p>So I wanted to insist on the fact that this has to be default in everyone's development environment else the risk wont be mitigated</p>",
        "id": 161481696,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1553287139
    },
    {
        "content": "<p>There's also a problem that I see, it's that we couldnt flag crates that perform network access in build scripts or macros on <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a> because these can always set up a buffer with shellcode and run networked malware there.</p>",
        "id": 161481818,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1553287208
    },
    {
        "content": "<p>I don't think that any build script or procedural macro code should ever be allowed to access the network.</p>",
        "id": 161482014,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1553287365
    },
    {
        "content": "<p>I mean, I'm sure someone will come up with reasons why they need their build script to do so. Off-hand, I'm thinking of cases where you want to ask the build script to automatically update to the upstream version. But by default, no, no build-time code should be able to access the network or arbitrary places on the FS or even arbitrary syscalls. Whatever solution is engineered will need an escape hatch.</p>",
        "id": 161489712,
        "sender_full_name": "JP Sugarbroad",
        "timestamp": 1553293884
    },
    {
        "content": "<p>Is downloading a C library if it's not installed locally still a thing? I imagine it would be pretty big on Windows</p>",
        "id": 161490214,
        "sender_full_name": "Shnatsel",
        "timestamp": 1553294284
    },
    {
        "content": "<p>It was a thing?!</p>",
        "id": 161490280,
        "sender_full_name": "JP Sugarbroad",
        "timestamp": 1553294360
    },
    {
        "content": "<p>Yeah, it's pretty convenient for ssl and zlib wrappers that are in the ecosystem.</p>",
        "id": 161490297,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1553294388
    },
    {
        "content": "<p>Oh, you mean for -sys crates.</p>",
        "id": 161490300,
        "sender_full_name": "JP Sugarbroad",
        "timestamp": 1553294391
    },
    {
        "content": "<p>Probably. submodules would be better, but people don't use/understand them.</p>",
        "id": 161490356,
        "sender_full_name": "JP Sugarbroad",
        "timestamp": 1553294416
    },
    {
        "content": "<p>What kind of submodules? I hope you don't mean git submodules?</p>",
        "id": 161490542,
        "sender_full_name": "Shnatsel",
        "timestamp": 1553294595
    },
    {
        "content": "<p>But yeah, this is a thing, and this practice is especially horrifying for something like OpenSSL that gets a new batch of vulnerabilities every 3 months or so, because you get this thing statically linked with no record of which version compiled or even downloaded. And the worst part is that while on Linux you have an easy way to install these libs, on Windows you don't - or at least, it didn't have anything like that back when I last saw it 10 years ago.</p>",
        "id": 161490617,
        "sender_full_name": "Shnatsel",
        "timestamp": 1553294661
    },
    {
        "content": "<p>Yes, git submodules? Why not?</p>",
        "id": 161491205,
        "sender_full_name": "JP Sugarbroad",
        "timestamp": 1553295181
    },
    {
        "content": "<p>Opinion/rant: git submodules solves its problem domain in such a confusing way that it poisons any future attempts to improve on its problem domain. Kind of like PGP.</p>",
        "id": 161491253,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1553295236
    },
    {
        "content": "<p>No submodules would be way better than what git ended up with.</p>",
        "id": 161491378,
        "sender_full_name": "Shnatsel",
        "timestamp": 1553295332
    },
    {
        "content": "<p>Although compared to the rest of user-facing parts of git it doesn't even stand out all that much</p>",
        "id": 161491440,
        "sender_full_name": "Shnatsel",
        "timestamp": 1553295372
    },
    {
        "content": "<p>Frankly I do not see how git submodules are relevant to crates published on <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a></p>",
        "id": 161491521,
        "sender_full_name": "Shnatsel",
        "timestamp": 1553295480
    },
    {
        "content": "<p>I guess the equivalent idea is one could upload sidecar zips to <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a> that could be optionally downloaded if the build script wanted it.</p>",
        "id": 161491610,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1553295540
    },
    {
        "content": "<p>You can't have real networking, but you can have safety-scissors that are impossible to cut yourself with.</p>",
        "id": 161491723,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1553295612
    },
    {
        "content": "<p>This... actually sounds like a pretty great idea.</p>",
        "id": 161491749,
        "sender_full_name": "Shnatsel",
        "timestamp": 1553295648
    },
    {
        "content": "<p>Quick, jot it down in <a href=\"https://github.com/rust-secure-code/wg/issues/29\" target=\"_blank\" title=\"https://github.com/rust-secure-code/wg/issues/29\">https://github.com/rust-secure-code/wg/issues/29</a></p>",
        "id": 161491772,
        "sender_full_name": "Shnatsel",
        "timestamp": 1553295680
    },
    {
        "content": "<p>ok</p>",
        "id": 161491778,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1553295696
    },
    {
        "content": "<p>Well, I like submodules as implemented in the plumbing (the porcelain for them is terrible). Most importantly, they propagate the core git guarantee -- if you download a specific sha1 you get exactly the same tree.</p>",
        "id": 161491786,
        "sender_full_name": "JP Sugarbroad",
        "timestamp": 1553295716
    },
    {
        "content": "<p>I don't think cargo downloads crates with git though. I thought it downloaded zips.</p>",
        "id": 161491864,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1553295763
    },
    {
        "content": "<p>Ah, that I did not know. Why not have people package up their C dependencies then?</p>",
        "id": 161492052,
        "sender_full_name": "JP Sugarbroad",
        "timestamp": 1553295851
    },
    {
        "content": "<p>I mean, first question is how hard is that to do? If it's hard to do, we should fix that first.</p>",
        "id": 161492117,
        "sender_full_name": "JP Sugarbroad",
        "timestamp": 1553295921
    },
    {
        "content": "<p>(I have never published a crate...)</p>",
        "id": 161492131,
        "sender_full_name": "JP Sugarbroad",
        "timestamp": 1553295935
    },
    {
        "content": "<p>Depending on the source being packaged, it may be very large.</p>",
        "id": 161492197,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1553295964
    },
    {
        "content": "<p>It's also not always necessary if pkg-config can just give them a lib from the system.</p>",
        "id": 161492209,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1553295977
    },
    {
        "content": "<p>Hence sidecar zips?</p>",
        "id": 161492221,
        "sender_full_name": "JP Sugarbroad",
        "timestamp": 1553295990
    },
    {
        "content": "<p>Alternatively one could specify URL+hash pairs somewhere.</p>",
        "id": 161492234,
        "sender_full_name": "JP Sugarbroad",
        "timestamp": 1553296008
    },
    {
        "content": "<p>I guess. Honestly I'm not certain it's a good solution. I was only spit-balling ideas.</p>",
        "id": 161492236,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1553296011
    },
    {
        "content": "<p>It's not a terrible idea. But I'm reading the <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a> docs and they have a strict 10MB limit on .crate files.</p>",
        "id": 161492259,
        "sender_full_name": "JP Sugarbroad",
        "timestamp": 1553296038
    },
    {
        "content": "<p>URL+hash seems reasonable, assuming the URLs are pinned down to trusted domains</p>",
        "id": 161492260,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1553296041
    },
    {
        "content": "<p>trusted domains?</p>",
        "id": 161492269,
        "sender_full_name": "JP Sugarbroad",
        "timestamp": 1553296053
    },
    {
        "content": "<p>Are you concerned about leaking information about who's downloading?</p>",
        "id": 161492281,
        "sender_full_name": "JP Sugarbroad",
        "timestamp": 1553296076
    },
    {
        "content": "<p>Yeah. If cargo contacted a domain controlled by an attacker, that would probably violate what people imagine a \"sandbox\" is good for.</p>",
        "id": 161492328,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1553296094
    },
    {
        "content": "<p>I also want to reserve the option of caching/rewriting/mirroring domains for the purposes of hermetic build systems, like the kind in Chrome OS.</p>",
        "id": 161492386,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1553296126
    },
    {
        "content": "<p>Although I suppose the \"hash\" part solves the issue well enough.</p>",
        "id": 161492410,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1553296163
    },
    {
        "content": "<p>You get that from the hash, though. Your build system can look up that hash wherever it wants</p>",
        "id": 161492412,
        "sender_full_name": "JP Sugarbroad",
        "timestamp": 1553296164
    },
    {
        "content": "<p>The URL is just a hint</p>",
        "id": 161492416,
        "sender_full_name": "JP Sugarbroad",
        "timestamp": 1553296180
    },
    {
        "content": "<p>But most people won't have a pre-mirrored system but would still like a sandbox.</p>",
        "id": 161492471,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1553296206
    },
    {
        "content": "<p>Most people won't care about the leak.</p>",
        "id": 161492500,
        "sender_full_name": "JP Sugarbroad",
        "timestamp": 1553296247
    },
    {
        "content": "<p>Most people don't care about build time sandboxing either.</p>",
        "id": 161492520,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1553296269
    },
    {
        "content": "<p>They want a sandbox to protect their systems, not their privacy.</p>",
        "id": 161492523,
        "sender_full_name": "JP Sugarbroad",
        "timestamp": 1553296272
    },
    {
        "content": "<p>Who are we building this sandbox for?</p>",
        "id": 161492529,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1553296282
    },
    {
        "content": "<p>Fair question.</p>",
        "id": 161492537,
        "sender_full_name": "JP Sugarbroad",
        "timestamp": 1553296291
    },
    {
        "content": "<p>Time for a product requirements document!</p>",
        "id": 161492557,
        "sender_full_name": "Shnatsel",
        "timestamp": 1553296318
    },
    {
        "content": "<p>Also, malware that is being distributed through <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a> can be purged. Malware that is distributed from a attacker controlled server that cargo is directed to download from is harder to purge.</p>",
        "id": 161492622,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1553296366
    },
    {
        "content": "<p>So I would argue it's not only privacy being preserved.</p>",
        "id": 161492645,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1553296388
    },
    {
        "content": "<p>you also get an audit trail that way, since <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a> is supposedly immutable</p>",
        "id": 161492660,
        "sender_full_name": "Shnatsel",
        "timestamp": 1553296414
    },
    {
        "content": "<p>Audit trail of... the malware?</p>",
        "id": 161492666,
        "sender_full_name": "JP Sugarbroad",
        "timestamp": 1553296437
    },
    {
        "content": "<p>The people who downloaded it?</p>",
        "id": 161492683,
        "sender_full_name": "JP Sugarbroad",
        "timestamp": 1553296442
    },
    {
        "content": "<p>Sorry, getting distracted.</p>",
        "id": 161492713,
        "sender_full_name": "JP Sugarbroad",
        "timestamp": 1553296448
    },
    {
        "content": "<p>Who is the sandbox for?</p>",
        "id": 161492716,
        "sender_full_name": "JP Sugarbroad",
        "timestamp": 1553296453
    },
    {
        "content": "<p>The first tranche is obviously the majority -- don't care until they get malware on their box or in their product.</p>",
        "id": 161492734,
        "sender_full_name": "JP Sugarbroad",
        "timestamp": 1553296502
    },
    {
        "content": "<p>I would think it is for everybody to run by default unless they have a very good reason not to.</p>",
        "id": 161492752,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1553296512
    },
    {
        "content": "<p>We can't do anything about the product side, obviously.</p>",
        "id": 161492758,
        "sender_full_name": "JP Sugarbroad",
        "timestamp": 1553296528
    },
    {
        "content": "<p>Good reasons might be legacy crates or the crate is from a trusted party (i.e. an internal team wrote it).</p>",
        "id": 161492763,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1553296547
    },
    {
        "content": "<p>(We should also model the attack side, which means we're really building a full threat model.)</p>",
        "id": 161492815,
        "sender_full_name": "JP Sugarbroad",
        "timestamp": 1553296569
    },
    {
        "content": "<p>I guess we can start with the easy stuff:<br>\nThe attacker has control over the Cargo.toml/Cargo.lock and can upload arbitrary zips to <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a> under crate names that they own.</p>",
        "id": 161493131,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1553296905
    },
    {
        "content": "<p>The attacker can perform a <code>cargo build</code> but can <strong>not</strong> do a <code>cargo test</code> or <code>cargo run</code></p>",
        "id": 161493208,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1553296947
    },
    {
        "content": "<p>Control over my Cargo.toml? How?</p>",
        "id": 161493250,
        "sender_full_name": "JP Sugarbroad",
        "timestamp": 1553297006
    },
    {
        "content": "<p>They gave you a really cool demo on hackernews and explained how you too can make your own ray-traced doom clone with this nice crate.</p>",
        "id": 161493328,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1553297061
    },
    {
        "content": "<p>Sure, so you copy-pasted their Cargo.toml including some weird directives they said were needed to make it work.</p>",
        "id": 161493354,
        "sender_full_name": "JP Sugarbroad",
        "timestamp": 1553297089
    },
    {
        "content": "<p>Why can the attacker build but not run?</p>",
        "id": 161493367,
        "sender_full_name": "JP Sugarbroad",
        "timestamp": 1553297099
    },
    {
        "content": "<p>How are we going to sandbox arbitrary rust programs?</p>",
        "id": 161493418,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1553297115
    },
    {
        "content": "<p>Oh, I see. You're saying only build is in scope.</p>",
        "id": 161493450,
        "sender_full_name": "JP Sugarbroad",
        "timestamp": 1553297141
    },
    {
        "content": "<p>The rust program is probably going to be doing something useful most of the time. We can't hope to sandbox it without everybody disabling it all the time.</p>",
        "id": 161493454,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1553297144
    },
    {
        "content": "<p>Yeah, most build scripts do a common subset of simple things.</p>",
        "id": 161493520,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1553297172
    },
    {
        "content": "<p>I think \"download this external archive so I can compile it\" is a pretty common thing and easy to provide a safe(r) API for.</p>",
        "id": 161493834,
        "sender_full_name": "JP Sugarbroad",
        "timestamp": 1553297406
    },
    {
        "content": "<p>Agreed</p>",
        "id": 161493850,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1553297423
    },
    {
        "content": "<p>Probably what we need to do is make a simple sandbox and crater it.</p>",
        "id": 161493895,
        "sender_full_name": "JP Sugarbroad",
        "timestamp": 1553297474
    },
    {
        "content": "<p>See what breaks.</p>",
        "id": 161493898,
        "sender_full_name": "JP Sugarbroad",
        "timestamp": 1553297478
    },
    {
        "content": "<p>Crater already prohibits network access, so there's that</p>",
        "id": 161496705,
        "sender_full_name": "Shnatsel",
        "timestamp": 1553300520
    },
    {
        "content": "<p>I believe it is pretty common for people to do it (see e.g. <a href=\"https://github.com/danburkert/prost/commit/e0317f83958892d716e99423f07525db5c7469e6#diff-3457fb1ebde739813ad9692cad895f1f\" target=\"_blank\" title=\"https://github.com/danburkert/prost/commit/e0317f83958892d716e99423f07525db5c7469e6#diff-3457fb1ebde739813ad9692cad895f1f\">https://github.com/danburkert/prost/commit/e0317f83958892d716e99423f07525db5c7469e6#diff-3457fb1ebde739813ad9692cad895f1f</a>) and people don't understand why (for so many reasons) why they shouldn't. I see that as a quite distinct issue from sandboxing the build, though.</p>",
        "id": 161497940,
        "sender_full_name": "briansmith",
        "timestamp": 1553302011
    },
    {
        "content": "<p>Note in particular that I ended up embedding like 20MB of executables into that crate in order to avoid the network access.</p>",
        "id": 161498073,
        "sender_full_name": "briansmith",
        "timestamp": 1553302206
    },
    {
        "content": "<p>...so you've embedded OpenSSL and now you need to issue a security update to your crate every time they find yet another CVE in that thing?</p>",
        "id": 161498094,
        "sender_full_name": "Shnatsel",
        "timestamp": 1553302256
    },
    {
        "content": "<p>I don't think we embedded OpenSSL into PROST directly or indirectly since i think those executables don't do network I/O.</p>",
        "id": 161498129,
        "sender_full_name": "briansmith",
        "timestamp": 1553302317
    },
    {
        "content": "<p>But, in the case of rust-openssl or similar, yes you would.</p>",
        "id": 161498179,
        "sender_full_name": "briansmith",
        "timestamp": 1553302332
    },
    {
        "content": "<p>\"Importantly, this eliminates very heavy and brittle non-Rust dependencies<br>\nincluding in particular curl and OpenSSL.\" says the commit message</p>",
        "id": 161498298,
        "sender_full_name": "Shnatsel",
        "timestamp": 1553302508
    },
    {
        "content": "<p>Right, because OpenSSL was used to download the files.</p>",
        "id": 161498300,
        "sender_full_name": "briansmith",
        "timestamp": 1553302517
    },
    {
        "content": "<p>oooh</p>",
        "id": 161498303,
        "sender_full_name": "Shnatsel",
        "timestamp": 1553302524
    },
    {
        "content": "<p>Since the downloading was removed, OpenSSL dep was removed.</p>",
        "id": 161498304,
        "sender_full_name": "briansmith",
        "timestamp": 1553302525
    },
    {
        "content": "<p>Anyway, I think that to realistically have a chance at implementing a sandbox that blocks network I/O by default (and if not by default, why bother?) and/or all the time (ideally), one would need to implement a new build stage, separate from <a href=\"http://build.rs\" target=\"_blank\" title=\"http://build.rs\">build.rs</a>, that can be used for downloading dependencies.</p>",
        "id": 161498477,
        "sender_full_name": "briansmith",
        "timestamp": 1553302746
    },
    {
        "content": "<p>Similarly, people embed executables in <a href=\"http://build.rs\" target=\"_blank\" title=\"http://build.rs\">build.rs</a>, there would probably need to be some mechanism for whitelisting/approving the execution of such embedded executables, if blocking them is to be blocked by default.</p>",
        "id": 161498556,
        "sender_full_name": "briansmith",
        "timestamp": 1553302811
    },
    {
        "content": "<p>I don't actually mind embedding executables because proc macros can do literally anything anyway. You already got arbitrary code in, congratulations.</p>",
        "id": 161498702,
        "sender_full_name": "Shnatsel",
        "timestamp": 1553303029
    },
    {
        "content": "<p>I would assume that people expect proc macros to be safer because they can read the code.</p>",
        "id": 161499177,
        "sender_full_name": "briansmith",
        "timestamp": 1553303524
    },
    {
        "content": "<p>I seem to remember that when the executables in PROST get updated, some doc enumerating their SHA-256(?) hashes and the source of the executable gets updated.</p>",
        "id": 161499203,
        "sender_full_name": "briansmith",
        "timestamp": 1553303591
    },
    {
        "content": "<p>Well, you can always embed a long hex string with a compiled binary in your source code</p>",
        "id": 161520356,
        "sender_full_name": "Shnatsel",
        "timestamp": 1553338542
    },
    {
        "content": "<p>Let's assume the download of source code is handled safely. The next thing that is typically done is executing gcc/clang/make on it. That seems really hard to sandbox because essentially arbitrary and highly complex binaries are being fed attacker controlled input.</p>",
        "id": 161534391,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1553361367
    },
    {
        "content": "<p>wow discussion</p>",
        "id": 161553807,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1553393232
    },
    {
        "content": "<p>/me scrolls up</p>",
        "id": 161553808,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1553393235
    },
    {
        "content": "<p>so uhh</p>",
        "id": 161553813,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1553393276
    },
    {
        "content": "<p>people who want to hit the network to download some external asset/what have you</p>",
        "id": 161553857,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1553393294
    },
    {
        "content": "<p>that seems like a gross hack</p>",
        "id": 161553860,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1553393299
    },
    {
        "content": "<p>what is the justification as opposed to packaging the thing you'd otherwise download in the crate itself?</p>",
        "id": 161553862,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1553393315
    },
    {
        "content": "<p>microoptimizing bandwidth?</p>",
        "id": 161553863,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1553393329
    },
    {
        "content": "<p>it seems like there's a boring KISS solution to this problem and it's \"put the thing you'd otherwise hit the network to download in the crate and you're done\"</p>",
        "id": 161553875,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1553393374
    },
    {
        "content": "<p>shelling out to git/curl/etc from <a href=\"http://build.rs\" target=\"_blank\" title=\"http://build.rs\">build.rs</a> seems like a cargo-culted antipattern which is probably best eliminated</p>",
        "id": 161553924,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1553393421
    },
    {
        "content": "<p>Probably the best way to eliminate it is to find the commonality and make it easier to do something better.</p>",
        "id": 161553986,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1553393543
    },
    {
        "content": "<p>1) add git submodule for the code you'd otherwise use <code>build.rs</code> to go clone<br>\n2) package said code into your crate<br>\n3) you're done</p>",
        "id": 161554007,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1553393612
    },
    {
        "content": "<p>[img:thereisnospoon] \"there is no <code>build.rs</code>\"</p>",
        "id": 161554059,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1553393676
    },
    {
        "content": "<p>or any need for new cargo features, barring a legitimate need to microoptimize bandwidth in the case crates have, umm, \"optional assets\"</p>",
        "id": 161554077,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1553393717
    },
    {
        "content": "<p>The code is usually C, so a <a href=\"http://build.rs\" target=\"_blank\" title=\"http://build.rs\">build.rs</a> is needed to build it.</p>",
        "id": 161554084,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1553393751
    },
    {
        "content": "<p>that sort of thing feels like playing with fire in terms of things like reliable or better yet reproducible builds... or binary transparency efforts (for, say, a hypothetical future community build server)</p>",
        "id": 161554128,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1553393765
    },
    {
        "content": "<p>The size restrictions of 10MB on <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a> means you can't put all the code in.</p>",
        "id": 161554131,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1553393770
    },
    {
        "content": "<p>haha yeah sure I'm not talking about the <code>cc</code> crate <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 161554132,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1553393776
    },
    {
        "content": "<p>so the counterpoint to concerns about the feasibility of shoving everything into a crate are... <code>left-pad</code></p>",
        "id": 161554147,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1553393833
    },
    {
        "content": "<p>or reproducible builds</p>",
        "id": 161554150,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1553393840
    },
    {
        "content": "<p>I guess my question about 10MB is: what isn't fitting into 10MB at the moment?</p>",
        "id": 161554156,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1553393870
    },
    {
        "content": "<p>some option for optional external assets would be interesting, but I'd also be curious what the real-world use cases are</p>",
        "id": 161554222,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1553393992
    },
    {
        "content": "<p>LLVM?</p>",
        "id": 161554223,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1553393998
    },
    {
        "content": "<p>I guess the next question is \"who is the custodian of these assets who is volunteering to indefinitely and reliably host them for free?\"</p>",
        "id": 161554285,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1553394083
    },
    {
        "content": "<p>but that said, aside from the 10MB limit the right answer to me is to put the relevant external artifacts directly into the published crate</p>",
        "id": 161554332,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1553394130
    },
    {
        "content": "<p>Usually the external artifacts are optional.</p>",
        "id": 161554340,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1553394160
    },
    {
        "content": "<p>sure, but nobody's forcing you to use them</p>",
        "id": 161554341,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1553394171
    },
    {
        "content": "<p>That is, if your system already has LLVM or openssl or whatever, you can simply use that.</p>",
        "id": 161554344,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1553394181
    },
    {
        "content": "<p>if you download them and don't use them, that's what I was describing as \"optimizing bandwidth\"</p>",
        "id": 161554354,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1553394187
    },
    {
        "content": "<p>My thinking is that as long as people want to optimize bandwidth, which they seem to do, we need to make it easiest to do it in a safe manner.</p>",
        "id": 161554362,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1553394233
    },
    {
        "content": "<p>which is a concern I would rate lower than \"<code>build.rs</code> is shelling out to random tools to attempt to obtain essential build artifacts that may have disappeared from wherever they were originally supposed to be hosted\"</p>",
        "id": 161554363,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1553394237
    },
    {
        "content": "<p>yes, but that's a microoptimization...</p>",
        "id": 161554409,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1553394248
    },
    {
        "content": "<p>I can understand that perspective.</p>",
        "id": 161554415,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1553394299
    },
    {
        "content": "<p>if a Rust-friendly CDN provider were to volunteer to be the custodian of the \"optional crate asset archive\" I could see something like that happening</p>",
        "id": 161554428,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1553394327
    },
    {
        "content": "<p>But on the other hand, it's usually downloading several times the size of the original crate.</p>",
        "id": 161554429,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1553394330
    },
    {
        "content": "<p>I would assume the custodian would have to be <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a></p>",
        "id": 161554431,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1553394353
    },
    {
        "content": "<p>but anything short of that seems kinda gross to me</p>",
        "id": 161554432,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1553394357
    },
    {
        "content": "<p>well I assume that 10MB limit is there for a reason</p>",
        "id": 161554476,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1553394369
    },
    {
        "content": "<p>but perhaps it could be raised?</p>",
        "id": 161554477,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1553394374
    },
    {
        "content": "<p>It would be nice to find out. Does anybody have contacts on the team?</p>",
        "id": 161554482,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1553394413
    },
    {
        "content": "<p>can look in either the infra IRC or Discord channels I guess? I assume the latter is the current place</p>",
        "id": 161554492,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1553394449
    },
    {
        "content": "<p>but I'm really wondering now how much crazysauce abuse of <code>build.rs</code> to go grab random code from git could be trivially replaced with a git submodule whose contents are published as part of a crate</p>",
        "id": 161554542,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1553394507
    },
    {
        "content": "<p>say, small, infrequently updated libraries</p>",
        "id": 161554547,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1553394543
    },
    {
        "content": "<p>there might be a system version to link to, but if not, use the source</p>",
        "id": 161554556,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1553394570
    },
    {
        "content": "<p>I imagine there might be a surprising amount of that sort of thing</p>",
        "id": 161554600,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1553394603
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132721\">@Tony Arcieri</span> Downloading things in build scripts is what makes Google Chrome's build system horrible and what makes NPM packages unportable. It's literally impossible to port some Electron applications to a new platform even if Electron itself was ported because most NPM packages blatantly download x86 binaries to compile or do other various tasks. It clearly should be eliminated, if you require third party stuff tell the user to install a package from their distribution and add to PATH variable, just like openssl-sys or libcurl-sys crates.</p>",
        "id": 161586024,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1553444889
    },
    {
        "content": "<p>Also for the 10MB limit, can't they create another crate and set it as a dev-dependency?</p>",
        "id": 161586065,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1553445001
    },
    {
        "content": "<p>I feel like creating as many reusable crates as possible is the way to go.</p>",
        "id": 161586145,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1553445071
    },
    {
        "content": "<p>oh, reusability is a good point, I have not considered it</p>",
        "id": 161588084,
        "sender_full_name": "Shnatsel",
        "timestamp": 1553448255
    },
    {
        "content": "<p>yeah for sure</p>",
        "id": 161595972,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1553460241
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214522\">@Leo Le Bouter</span> I am definitely not a fan of using ad hoc mechanisms for fetching build dependencies exactly for those reasons. Right now, aside from that, Cargo and <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a> are quite good at making sure all build artifacts remain available indefinitely (and are all checksummed in the index)</p>",
        "id": 161596039,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1553460322
    },
    {
        "content": "<p>This also ties into auditing binaries for vulnerable libs: as soon as you get those statically linked C blobs versioned and checksummed, you can have an audit trail and check your binaries for vulnerable dependencies even if those came from C</p>",
        "id": 161599175,
        "sender_full_name": "Shnatsel",
        "timestamp": 1553465266
    },
    {
        "content": "<p>made a crate for this: <a href=\"https://github.com/rust-secure-code/cargo-sandbox\" target=\"_blank\" title=\"https://github.com/rust-secure-code/cargo-sandbox\">https://github.com/rust-secure-code/cargo-sandbox</a></p>",
        "id": 165981496,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1558197439
    },
    {
        "content": "<p>like cargo-repro it's empty/vaporware</p>",
        "id": 165981500,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1558197446
    },
    {
        "content": "<p>here's an issue to discuss: <a href=\"https://github.com/rust-secure-code/cargo-sandbox/issues/3\" target=\"_blank\" title=\"https://github.com/rust-secure-code/cargo-sandbox/issues/3\">https://github.com/rust-secure-code/cargo-sandbox/issues/3</a></p>",
        "id": 165981504,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1558197460
    },
    {
        "content": "<p>Just to be sure I understand it correctly again! Is it actually about building in a sandboxed environment? Or about running the binary in a sandboxed environment?</p>\n<p>If it's the first one!: Do we mean that we should be able to download crates in the sandboxed environment? Or that everything should already be there and isolated?</p>",
        "id": 166078089,
        "sender_full_name": "DevQps",
        "timestamp": 1558353002
    },
    {
        "content": "<p>/me thinking the former: crates get downloaded in advance, and then subsequent build-time code execution occurs in a sandbox</p>",
        "id": 166087488,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1558361021
    },
    {
        "content": "<p>gaol specifically has a set of capabilities the build process is allowed to do. they could be tweakable, but denying network access by default, well... that's what crater does already</p>",
        "id": 166087587,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1558361070
    },
    {
        "content": "<p>Ahh I think I understand now. It's mainly because there can be a <a href=\"http://build.rs\" target=\"_blank\" title=\"http://build.rs\">build.rs</a> script that can potentially do anything it would like right? I hope to check the mentioned issue/project and contribute some ideas somewhere this week!</p>",
        "id": 166138749,
        "sender_full_name": "DevQps",
        "timestamp": 1558408796
    },
    {
        "content": "<p><code>build.rs</code>, proc macros, I think there's stuff beyond that</p>",
        "id": 166140409,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1558411407
    },
    {
        "content": "<p>More reasons why builds having access to the network is a bad idea: <a href=\"https://twitter.com/lukejacksonn/status/1131506699356037121\" target=\"_blank\" title=\"https://twitter.com/lukejacksonn/status/1131506699356037121\">https://twitter.com/lukejacksonn/status/1131506699356037121</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/lukejacksonn/status/1131506699356037121\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/905060375128924160/xxTDen1r_normal.jpg\"></a><p>So pm2 (a node process manager package on npm) just caused thousands of CI builds to fail because of an \"optionalDependency\" on a package called gkt which is requested as a tarball from a server that was returning 503. That package consists of one file which contains this: <a href=\"https://t.co/9lY7yJZFm5\" target=\"_blank\" title=\"https://t.co/9lY7yJZFm5\">https://twitter.com/lukejacksonn/status/1131506699356037121/photo/1</a></p><span>- Luke Jackson (@lukejacksonn)</span><div class=\"twitter-image\"><a href=\"https://t.co/9lY7yJZFm5\" target=\"_blank\" title=\"https://t.co/9lY7yJZFm5\"><img src=\"https://pbs.twimg.com/media/D7PrCdLXYAAi3tP.jpg:small\"></a></div></div></div>",
        "id": 166495181,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1558736539
    },
    {
        "content": "<p>\"<a href=\"http://domain.com/not-a-targeted-backdoor.js\" target=\"_blank\" title=\"http://domain.com/not-a-targeted-backdoor.js\">domain.com/not-a-targeted-backdoor.js</a>\". I've seen popular packages in npm using installation telemtry too</p>",
        "id": 167530269,
        "sender_full_name": "snf",
        "timestamp": 1559861673
    },
    {
        "content": "<p>hey look, another case-in-point <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> <a href=\"https://github.com/RustSec/advisory-db/pull/104/files\" target=\"_blank\" title=\"https://github.com/RustSec/advisory-db/pull/104/files\">https://github.com/RustSec/advisory-db/pull/104/files</a></p>",
        "id": 167535142,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1559867369
    },
    {
        "content": "<p>some fun discussion on this thread <a href=\"https://internals.rust-lang.org/t/pre-rfc-procmacros-implemented-in-wasm/10860/75?u=bascule\" target=\"_blank\" title=\"https://internals.rust-lang.org/t/pre-rfc-procmacros-implemented-in-wasm/10860/75?u=bascule\">https://internals.rust-lang.org/t/pre-rfc-procmacros-implemented-in-wasm/10860/75?u=bascule</a></p>",
        "id": 174850293,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1567571064
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 174850850,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1567572040
    },
    {
        "content": "<p>Whoops wrong thread</p>",
        "id": 174850867,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1567572100
    },
    {
        "content": "<p>The desire to do build-time sandboxing also came up a few times in the enterprise rust meetup at rustconf. one of the other people there even broke down a list of things <a href=\"http://build.rs\" target=\"_blank\" title=\"http://build.rs\">build.rs</a> files tend to do:</p>\n<p>1. search for or otherwise wrangle external libraries<br>\n2. check rustc version and enable/disable features<br>\n3. generate some code to be included in the build<br>\n4. (there were 4 of these but i don't remember the fourth one, unfortunately).<br>\nmost of these are amenable to some form of sandboxing, although number 1 is probably the hardest. number 2 could hypothetically be avoided in more cases if there were a way to query the compiler version info via a builtin cfg(...) thing, which i think there's an RFC for that just nobody has implemented.</p>",
        "id": 174898421,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1567614531
    },
    {
        "content": "<p>there's been some interesting discussion of using WASM/WASI for this on rust-internals</p>",
        "id": 174900392,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1567616098
    },
    {
        "content": "<p>which I hadn't seriously considered before but it seems there's a great deal of interest</p>",
        "id": 174900404,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1567616114
    },
    {
        "content": "<p>a new cfg_if_rusct without <a href=\"http://build.rs\" target=\"_blank\" title=\"http://build.rs\">build.rs</a> showed up on Reddit a couple of days ago</p>",
        "id": 174915491,
        "sender_full_name": "Shnatsel",
        "timestamp": 1567625931
    },
    {
        "content": "<p>without a <a href=\"http://build.rs\" target=\"_blank\" title=\"http://build.rs\">build.rs</a>? how?</p>",
        "id": 174916598,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1567626724
    },
    {
        "content": "<p>There's been a crate that does this via a proc-macro attribute for some time: <a href=\"https://crates.io/crates/rustversion\" target=\"_blank\" title=\"https://crates.io/crates/rustversion\">https://crates.io/crates/rustversion</a></p>",
        "id": 174916761,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1567626852
    },
    {
        "content": "<p>ah right, that makes sense. not really that meaningfully different than <a href=\"http://build.rs\" target=\"_blank\" title=\"http://build.rs\">build.rs</a> though, although i guess proc macros will probably be easier to sandbox</p>",
        "id": 174916846,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1567626928
    },
    {
        "content": "<p>(OTOH proc macros that depend on the target environment are probably not very well behaved from the standpoint of related goals like being able to download prebuilt artifacts from <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a>)</p>",
        "id": 174919299,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1567628574
    },
    {
        "content": "<p><a href=\"https://crates.io/crates/if_rust_version\" target=\"_blank\" title=\"https://crates.io/crates/if_rust_version\">https://crates.io/crates/if_rust_version</a> this one, doesn't depend on syn either so probably not a proc macro?</p>",
        "id": 174920522,
        "sender_full_name": "Shnatsel",
        "timestamp": 1567629396
    },
    {
        "content": "<p>oh it comes with <a href=\"http://build.rs\" target=\"_blank\" title=\"http://build.rs\">build.rs</a> too, just pushes it one level down</p>",
        "id": 174920602,
        "sender_full_name": "Shnatsel",
        "timestamp": 1567629452
    },
    {
        "content": "<p>this looks interesting: <a href=\"https://github.com/rust-lang/rustwide\" target=\"_blank\" title=\"https://github.com/rust-lang/rustwide\">https://github.com/rust-lang/rustwide</a></p>",
        "id": 176021805,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1568824618
    },
    {
        "content": "<p>wrapper for a Docker sandbox used by crater and <a href=\"http://docs.rs\" target=\"_blank\" title=\"http://docs.rs\">docs.rs</a></p>",
        "id": 176021821,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1568824635
    },
    {
        "content": "<p>also: <a href=\"https://hub.docker.com/r/rustops/crates-build-env\" target=\"_blank\" title=\"https://hub.docker.com/r/rustops/crates-build-env\">https://hub.docker.com/r/rustops/crates-build-env</a></p>",
        "id": 176022569,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1568825161
    },
    {
        "content": "<p><a href=\"https://github.com/dtolnay/watt\" target=\"_blank\" title=\"https://github.com/dtolnay/watt\">https://github.com/dtolnay/watt</a> - this sure is a step in the right direction, with proc macros being walled off in a small, 100% safe code WASM environment</p>",
        "id": 178125586,
        "sender_full_name": "Shnatsel",
        "timestamp": 1571077073
    },
    {
        "content": "<p>Also helps with reproducible builds</p>",
        "id": 178125650,
        "sender_full_name": "Shnatsel",
        "timestamp": 1571077098
    },
    {
        "content": "<p>Yeah saw the relevant rust-internals thread. WASM certainly seems like an interesting way to do sandboxing</p>",
        "id": 178126194,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1571077543
    },
    {
        "content": "<p>I still want to play with <code>rustwide</code></p>",
        "id": 178126268,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1571077590
    },
    {
        "content": "<p>We had a long talk about sandboxing the other day at work.  I'm really excited for wasms potential there</p>",
        "id": 178126343,
        "sender_full_name": "Stuart Small",
        "timestamp": 1571077634
    },
    {
        "content": "<p><code>build.rs</code> + WASI might be interesting</p>",
        "id": 178126761,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1571077996
    },
    {
        "content": "<p>been playing with Rustwide. It seems pretty cool</p>",
        "id": 179752332,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1572796357
    },
    {
        "content": "<p>Nice! I'm thinking of making Clippy security lints into their own category and then running it rustwide</p>",
        "id": 179755424,
        "sender_full_name": "Shnatsel",
        "timestamp": 1572801899
    },
    {
        "content": "<p><a href=\"https://github.com/rust-secure-code/cargo-sandbox/issues/8\" target=\"_blank\" title=\"https://github.com/rust-secure-code/cargo-sandbox/issues/8\">https://github.com/rust-secure-code/cargo-sandbox/issues/8</a></p>",
        "id": 181928008,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1574779892
    },
    {
        "content": "<p>Docker provides a stable CLI for both Linux and Windows</p>",
        "id": 181928453,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1574780121
    },
    {
        "content": "<p>yeah, but there are also at least two promising crates which wrap up docker-based builds (<code>cargo-wharf</code> and <code>rustwide</code>)</p>",
        "id": 181928639,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1574780211
    },
    {
        "content": "<p>the latter seems really cool for reproducible builds of released crates</p>",
        "id": 181928660,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1574780223
    },
    {
        "content": "<p>not so sure about the sandboxing use case</p>",
        "id": 181928686,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1574780239
    },
    {
        "content": "<p>I think that it's been a while and something should be written even if it's as simple as a wrapper over the Docker/Podman CLI</p>",
        "id": 181928802,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1574780289
    },
    {
        "content": "<p>Perfect solutions certainly do not exist w.r.t sandboxing</p>",
        "id": 181928847,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1574780312
    },
    {
        "content": "<p>The issues with the command I posted are:</p>\n<p>- Does not work with \"path\" dependencies<br>\n- Does not make sources readonly<br>\n- more?</p>",
        "id": 181929106,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1574780423
    },
    {
        "content": "<p>Err, both <code>cargo-wharf</code> and <code>rustwide</code> are fairly new</p>",
        "id": 181929271,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1574780511
    },
    {
        "content": "<p>well, <code>rustwide</code> is old, but that's in terms of it being used to drive crater</p>",
        "id": 181929341,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1574780536
    },
    {
        "content": "<p>the extraction into a crate is relatively recent</p>",
        "id": 181929354,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1574780544
    },
    {
        "content": "<p>I guess the question is: what would yet another docker wrapper do differently?</p>",
        "id": 181929373,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1574780558
    },
    {
        "content": "<p>Aim at the sandboxing use case specially</p>",
        "id": 181929428,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1574780585
    },
    {
        "content": "<p>...and what does that entail in your opinion?</p>",
        "id": 181929481,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1574780611
    },
    {
        "content": "<p>the tricky things to me are the little bits like caching intermediate build artifacts</p>",
        "id": 181929610,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1574780667
    },
    {
        "content": "<p>which it looks like <code>cargo-wharf</code> does well</p>",
        "id": 181929621,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1574780676
    },
    {
        "content": "<p>cargo-wharf looks overcomplicated, my command line uses the current directory's target and caches that and it works well, what else do you want exactly?</p>",
        "id": 181929734,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1574780745
    },
    {
        "content": "<p>ok, would you like to submit a PR?</p>",
        "id": 181930013,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1574780884
    },
    {
        "content": "<p>I will do so ASAP! I propose to integrate something simple first then change when better solutions or motivated people come up.</p>",
        "id": 181930058,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1574780924
    },
    {
        "content": "<p>cool</p>",
        "id": 181930090,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1574780950
    },
    {
        "content": "<p>cargo-wharf looks better suited for CI use cases</p>",
        "id": 181930094,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1574780951
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 181930639,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1574781297
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 181930664,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1574781311
    },
    {
        "content": "<p>OK, I get it better now. It builds each and every crate in its own sandbox to avoid them affecting each other's build artifacts.</p>",
        "id": 181931120,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1574781591
    },
    {
        "content": "<p>Either way, a single artifact can get control over the final binary's execution</p>",
        "id": 181931212,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1574781634
    },
    {
        "content": "<p>I have to think about that. A TOML parser/rewriter for passing in path dependencies, few ro/rw bind mounts, some CLI args to control network access with it off by default, a way to provide a custom Dockerfile, or find a way to make the container be based on a CoW version of the host's file system?</p>",
        "id": 181931912,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1574782018
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132721\">@Tony Arcieri</span> ^ To answer on what I think it entails</p>",
        "id": 181931962,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1574782049
    },
    {
        "content": "<p>yeah, sounds like the right general direction</p>",
        "id": 181932430,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1574782291
    },
    {
        "content": "<p><a href=\"https://benjamincongdon.me/blog/2019/12/04/Fast-Rust-Docker-Builds-with-cargo-vendor/\" target=\"_blank\" title=\"https://benjamincongdon.me/blog/2019/12/04/Fast-Rust-Docker-Builds-with-cargo-vendor/\">https://benjamincongdon.me/blog/2019/12/04/Fast-Rust-Docker-Builds-with-cargo-vendor/</a></p>",
        "id": 182710165,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1575583709
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132721\">@Tony Arcieri</span> Ohh very interesting! Sorry I've been busy, I realize I've been wanting to get things moving but I don't have so much time myself so.. heh</p>",
        "id": 186592318,
        "sender_full_name": "Leo Le Bouter",
        "timestamp": 1579993264
    },
    {
        "content": "<p>A new project implementing build-time sandboxing has popped up: <a href=\"https://github.com/kutometa/carnet\">https://github.com/kutometa/carnet</a></p>",
        "id": 240056079,
        "sender_full_name": "Shnatsel",
        "timestamp": 1621865312
    },
    {
        "content": "<p>neat</p>",
        "id": 240129898,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1621902322
    }
]