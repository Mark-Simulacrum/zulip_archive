[
    {
        "content": "<p>fun case study <a href=\"https://github.com/dominictarr/event-stream/issues/116\" target=\"_blank\" title=\"https://github.com/dominictarr/event-stream/issues/116\">https://github.com/dominictarr/event-stream/issues/116</a></p>",
        "id": 148381659,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543252258
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132721\">@Tony Arcieri</span> Does that problem exist because Node doesn't have a Cargo.lock-like mechanism, or just because of the culture of not reviewing dependencies when updating the lock file?</p>",
        "id": 148388128,
        "sender_full_name": "briansmith",
        "timestamp": 1543257921
    },
    {
        "content": "<p><code>npm</code> does have a locking mechanism. Additionally, it's very easy to accidentally do a <code>cargo update</code> in Rust by simply adding dependencies in your <code>Cargo.toml</code> and then using <code>cargo build</code>.</p>",
        "id": 148388500,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1543258181
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132723\">@Zach Reizner</span> <code>cargo build</code> shouldn't do <code>cargo update</code> itself for this reason. There has to be a time after the lock file is updated before the build starts to verify that, you know, you're not pwning your system.</p>",
        "id": 148388745,
        "sender_full_name": "briansmith",
        "timestamp": 1543258382
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133214\">@briansmith</span> Perhaps I'm misunderstanding what's actually going on. If one adds a dependency to <code>Cargo.toml</code> and then runs <code>cargo build</code>, the <code>Cargo.lock</code> is updated before building the crate.</p>",
        "id": 148388997,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1543258570
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133214\">@briansmith</span> I'd go with the latter, that nobody reviews dependencies before updating them, but even if that were to happen in this particular case, the payload was hidden in minified JS so it wouldn't have been easy to see</p>",
        "id": 148389042,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543258619
    },
    {
        "content": "<p>It looks shockingly similar to the theoretical hack outlined here: <a href=\"https://hackernoon.com/im-harvesting-credit-card-numbers-and-passwords-from-your-site-here-s-how-9a8cb347c5b5\" target=\"_blank\" title=\"https://hackernoon.com/im-harvesting-credit-card-numbers-and-passwords-from-your-site-here-s-how-9a8cb347c5b5\">https://hackernoon.com/im-harvesting-credit-card-numbers-and-passwords-from-your-site-here-s-how-9a8cb347c5b5</a></p>",
        "id": 148389087,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1543258681
    },
    {
        "content": "<p><a href=\"https://github.com/bitpay/copay/issues/9346\" target=\"_blank\" title=\"https://github.com/bitpay/copay/issues/9346\">https://github.com/bitpay/copay/issues/9346</a> &lt;--- target appears to be cryptocurrency wallets</p>",
        "id": 148389340,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543258864
    },
    {
        "content": "<p>also re: npm and lockfiles, it has one</p>",
        "id": 148389381,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543258912
    },
    {
        "content": "<p>the attack only affects people who update, but it sounds like the payload wound up in a version which was up for awhile</p>",
        "id": 148389494,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543258994
    },
    {
        "content": "<p>\"fun thread\" <a href=\"https://users.rust-lang.org/t/how-does-crates-io-differ-from-npm/22658\" target=\"_blank\" title=\"https://users.rust-lang.org/t/how-does-crates-io-differ-from-npm/22658\">https://users.rust-lang.org/t/how-does-crates-io-differ-from-npm/22658</a></p>",
        "id": 148799636,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543510058
    },
    {
        "content": "<p>I'm surprised how passionate some people are about <strong>not</strong> sandboxing <code>build.rs</code></p>",
        "id": 148799701,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543510086
    },
    {
        "content": "<blockquote>\n<p>So even a perfect sandbox is still a total dick move towards end users and will spread malware far and wide</p>\n</blockquote>",
        "id": 148799725,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543510130
    },
    {
        "content": "<p><span class=\"emoji emoji-1f615\" title=\"confused\">:confused:</span></p>",
        "id": 148799734,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543510137
    },
    {
        "content": "<p>I think it would be good to see a concrete proposal for sandboxing that includes a clear threat model. Perhaps starting with the Bazel design as a reference. Then we can see how useful it would be.</p>",
        "id": 148815848,
        "sender_full_name": "briansmith",
        "timestamp": 1543522968
    },
    {
        "content": "<p>TIL: <a href=\"https://github.com/dpc/crev/tree/master/cargo-crev\" target=\"_blank\" title=\"https://github.com/dpc/crev/tree/master/cargo-crev\">https://github.com/dpc/crev/tree/master/cargo-crev</a></p>",
        "id": 152123695,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1545153774
    },
    {
        "content": "<p>just hopped in their gitter channel</p>",
        "id": 152123709,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1545153789
    },
    {
        "content": "<p>It's a lot more sane than most proposed solutions to the trust problem. I can see this approach being viable for e.g. a company that wants to audit third-party code they use.</p>",
        "id": 152132954,
        "sender_full_name": "Shnatsel",
        "timestamp": 1545162414
    },
    {
        "content": "<p>seems to raise the question of whether you trust the reviewers :)</p>",
        "id": 152133933,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545163362
    },
    {
        "content": "<p>still, interesting concept</p>",
        "id": 152133942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545163371
    },
    {
        "content": "<p>web of trust concept hasn't really worked out for PGP, but that's inconclusive because PGP is held back by its UI, or rather lack thereof</p>",
        "id": 152134087,
        "sender_full_name": "Shnatsel",
        "timestamp": 1545163529
    },
    {
        "content": "<p>Still, for a commercial company I can see this being viable</p>",
        "id": 152134102,
        "sender_full_name": "Shnatsel",
        "timestamp": 1545163558
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> haha, I just asked that</p>",
        "id": 152136732,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1545165817
    },
    {
        "content": "<blockquote>\n<p>any thoughts about sybil attacks on a tool like this? e.g. someone maintaining a bot army which generates false reviews for the purposes of making a crate which contains a malicious payload appear reviewed</p>\n</blockquote>",
        "id": 152136736,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1545165820
    },
    {
        "content": "<p>(in their Gitter, guess I'll see!)</p>",
        "id": 152136746,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1545165828
    },
    {
        "content": "<p>Oh, there is no way around people making lots of fake reviews on malicious crates. No amount of identity management would prevent it. I can still sybil it to hell and back.<br>\nWhat they're building here is not a new concept, it's a basic web of trust. All the research in the past 30 years done on web of trust concept and in the past 15 years on PGP applies here.<br>\nIn such a system the amount of reviews should not be a factor at all. The only factor is the count of people <em>whom you trust.</em></p>",
        "id": 152145291,
        "sender_full_name": "Shnatsel",
        "timestamp": 1545173899
    },
    {
        "content": "<p>And it would work well only if you have a small number of trusted people who review incoming code, like a commercial company's security department or some such. Then you can use it to determine if it's okay to use or not, in the sense that it's been reviewed by your security department.</p>",
        "id": 152145339,
        "sender_full_name": "Shnatsel",
        "timestamp": 1545173988
    },
    {
        "content": "<p>You know, if I wanted to take over systems running Rust, I'd just make a PR against the stdlib optimizing or refactoring some important function, with a non-obvious bug. That's the cheapest option right now, and is already proven to work well.</p>",
        "id": 152145638,
        "sender_full_name": "Shnatsel",
        "timestamp": 1545174245
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> yeah asked and got \"It's WoT\" back and had this to say:</p>",
        "id": 152145673,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1545174295
    },
    {
        "content": "<blockquote>\n<p>alrighty. I am generally skeptical of WoT efforts, but I think the problems they have might be solvable with a sufficiently good user experience. so good luck!</p>\n</blockquote>",
        "id": 152145676,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1545174301
    },
    {
        "content": "<p>But assuming I wanted to inject malicious code into a crate and then claim it's all good... yeah, I still probably wouldn't bother with messing with this trust concept because it's very easy to sneak fatal bugs through code review, humans just ain't good at dealing with unsafe code.<br>\nAnd there is no penalty for trying.</p>",
        "id": 152145708,
        "sender_full_name": "Shnatsel",
        "timestamp": 1545174353
    },
    {
        "content": "<p>regarding the \"All the research in the past 30 years done on web of trust concept and in the past 15 years on PGP applies here.\", well... I've been to SOUPS, and the research into that does not paint a good picture</p>",
        "id": 152145713,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1545174359
    },
    {
        "content": "<p>I'd still like to hope it can be solved with \"sufficiently good UX\"</p>",
        "id": 152145770,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1545174407
    },
    {
        "content": "<p>which is definitely easier in a greenfield system than something like PGP <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 152145792,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1545174438
    },
    {
        "content": "<p>that said, I'll definitely be trying it out</p>",
        "id": 152145909,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1545174600
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> as it were, I just saw an elliptic curve-based ZKP system containing a flaw that seemed obvious to me get professionally reviewed by several well-respected cryptographers and cryptography services groups...</p>",
        "id": 152146030,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1545174711
    },
    {
        "content": "<p>...it took something like 4 audits before one of the reviewers (QuarksLab) wrote up the issue I was concerned with</p>",
        "id": 152146088,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1545174744
    },
    {
        "content": "<p>(they do good work, we used them at Square)</p>",
        "id": 152146096,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1545174754
    },
    {
        "content": "<p>What's SOUPS?</p>",
        "id": 152146141,
        "sender_full_name": "Shnatsel",
        "timestamp": 1545174834
    },
    {
        "content": "<p>SOUPS is a security-oriented UX research conference</p>",
        "id": 152146215,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1545174921
    },
    {
        "content": "<p>it's sort of like the UX research side of PETS</p>",
        "id": 152146218,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1545174930
    },
    {
        "content": "<p>Woah, I'm glad that exists</p>",
        "id": 152146228,
        "sender_full_name": "Shnatsel",
        "timestamp": 1545174960
    },
    {
        "content": "<p>WoT will never work as a public system because first, it's not that hard to write underhanded code that does malicious things while passing review (see underhanded Rust competition), and second, it's not that hard to establish yourself as a trustworthy guy in the community and make people treat your signature as trusted.</p>",
        "id": 152146305,
        "sender_full_name": "Shnatsel",
        "timestamp": 1545175061
    },
    {
        "content": "<p>WoT kind of works in a company with a sorta-trusted security department, but the point about underhanded code still stands</p>",
        "id": 152146375,
        "sender_full_name": "Shnatsel",
        "timestamp": 1545175125
    },
    {
        "content": "<p>formal proofs of certain properties about the code might help there, but even those hinge on certain assumptions that can be violated, and I guess I could sneak a vulnerability past that as well if I really wanted. But a pull request with an exploit against stdlib is still cheaper.</p>",
        "id": 152146472,
        "sender_full_name": "Shnatsel",
        "timestamp": 1545175240
    },
    {
        "content": "<p>in terms of actual mechanisms built on a WoT model, there aren't a whole lot of success stories</p>",
        "id": 152146476,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1545175258
    },
    {
        "content": "<p>PGP in particular is quite confusing with its multitude of similarly named trust levels</p>",
        "id": 152146508,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1545175301
    },
    {
        "content": "<p><a href=\"https://www.phildev.net/pgp/gpgtrust.html\" target=\"_blank\" title=\"https://www.phildev.net/pgp/gpgtrust.html\">https://www.phildev.net/pgp/gpgtrust.html</a></p>",
        "id": 152146689,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1545175481
    },
    {
        "content": "<p>\"marginally\", \"fully\", and \"ultimately\" heh</p>",
        "id": 152146702,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1545175498
    },
    {
        "content": "<blockquote>\n<p>...valid keys, meaning one of the following:<br>\n- You have signed it personally<br>\n- It has been signed by one fully trusted key<br>\n- It has been signed by three marginally trusted keys</p>\n</blockquote>",
        "id": 152146722,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1545175531
    },
    {
        "content": "<p>It was always confusing and signing required command line and was always a hassle. Oh and it's not immediately obvious to people that signing in PGP only verifies that this public key belongs to this person but not that you can trust signatures made by this public key... I could go on and on about all the ways PGP is dysfunctional.</p>",
        "id": 152146831,
        "sender_full_name": "Shnatsel",
        "timestamp": 1545175649
    },
    {
        "content": "<p>interesting <a href=\"https://twitter.com/FiloSottile/status/1075429069888598016\" target=\"_blank\" title=\"https://twitter.com/FiloSottile/status/1075429069888598016\">https://twitter.com/FiloSottile/status/1075429069888598016</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/FiloSottile/status/1075429069888598016\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/1028703543174225920/3cm3bMWC_normal.jpg\"></a><p>I am very excited for the modules authentication story we are building. With its auditable transparency log I hope it will be the most secure-by-default package management solution of a popular language. <a href=\"https://t.co/mNoefzZQk1\" target=\"_blank\" title=\"https://t.co/mNoefzZQk1\">https://blog.golang.org/#TOC_5%2E</a> <a href=\"https://t.co/QhMjqiOtLH\" target=\"_blank\" title=\"https://t.co/QhMjqiOtLH\">https://twitter.com/golang/status/1075413970037760001</a></p><span>- Filippo Valsorda (@FiloSottile)</span></div></div>",
        "id": 152201697,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1545243419
    },
    {
        "content": "<p>I guess Filippo is writing a custom Trillian personality for \"binary transparency\"-like purposes</p>",
        "id": 152201718,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1545243438
    },
    {
        "content": "<p>I guess the <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a> index sort of gives you something similar... unfortunately git is awful</p>",
        "id": 152201849,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1545243557
    },
    {
        "content": "<p>crate dependency permissions coming up again: <a href=\"https://internals.rust-lang.org/t/cargo-permissions-to-detect-tampered-dependecies/10236\" target=\"_blank\" title=\"https://internals.rust-lang.org/t/cargo-permissions-to-detect-tampered-dependecies/10236\">https://internals.rust-lang.org/t/cargo-permissions-to-detect-tampered-dependecies/10236</a></p>",
        "id": 166217670,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1558476593
    },
    {
        "content": "<p>my list of the previous topics along the same lines grows longer and longer</p>",
        "id": 166217738,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1558476609
    },
    {
        "content": "<p>So I was thinking about this as well and I had some kind of idea:</p>\n<p>I can imagine people should yank crates when a security vulnerability is present, or a bad bug. Old versions of a library would not be yanked (unless they are so deprecated that they cannot work with other crates anymore).</p>\n<p>What about creating some kind of platform, let's call it amiyanked for now, that iterates through the tree of dependencies to check for yanked crates. So if a specific crate depends on a yanked dependency it is marked \"should be updated/yanked\". After all, that crate might also be vulnerable or might depend on a bugged crate. If we do this iteratively we get a list of crates that should be yanked / updated as well. </p>\n<p>Since crates also specify the email of each author we could even use their email addresses to send them automatic notifications when one of their dependencies has been yanked. (Not sure if that is against any privacy rules, but it would be nice).</p>\n<p>This way we could maybe keep the eco system at least aware of threats and potentially more safe as well? I guess if many people use crate A that depends on vulnerable crate B, people are likely to but a bit more pressure or effort into having crate A update its dependency to crate B, whereas now people still have to manually find that out themselves.</p>\n<p>What do you think?</p>",
        "id": 166253199,
        "sender_full_name": "DevQps",
        "timestamp": 1558519202
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"213094\">@DevQps</span> I had proposed something similar as a way that Cargo-proper could have a minimum viable RustSec integration</p>",
        "id": 166279663,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1558539239
    },
    {
        "content": "<p><a href=\"https://internals.rust-lang.org/t/pre-rfc-reviving-security-advisories-in-crates-io-rfc-pr-1752/9017/14?u=bascule\" target=\"_blank\" title=\"https://internals.rust-lang.org/t/pre-rfc-reviving-security-advisories-in-crates-io-rfc-pr-1752/9017/14?u=bascule\">https://internals.rust-lang.org/t/pre-rfc-reviving-security-advisories-in-crates-io-rfc-pr-1752/9017/14?u=bascule</a></p>",
        "id": 166281192,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1558540179
    },
    {
        "content": "<p>the core idea is giving users some feedback about yanked crates. I suggested doing it during <code>cargo build</code> and that put some people off</p>",
        "id": 166281313,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1558540234
    },
    {
        "content": "<p>it seems like something where it could be a periodic nag, like once a day or something</p>",
        "id": 166281344,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1558540259
    },
    {
        "content": "<p>I think that would be quite a good idea. Developers need some kind of nudge or hint that they should yank their crates and update them as well I guess.</p>",
        "id": 166454548,
        "sender_full_name": "DevQps",
        "timestamp": 1558706146
    },
    {
        "content": "<blockquote>\n<p>the core idea is giving users some feedback about yanked crates. I suggested doing it during <code>cargo build</code> and that put some people off</p>\n</blockquote>\n<p>doesn't npm do it now?</p>",
        "id": 168224138,
        "sender_full_name": "Gerardo Di Giacomo",
        "timestamp": 1560634853
    },
    {
        "content": "<p>do what now? have integrated security audit functionality?</p>",
        "id": 168349800,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1560807370
    },
    {
        "content": "<p>the important part is doing it for <code>cargo build</code> and not just <code>cargo update</code></p>",
        "id": 168349821,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1560807385
    },
    {
        "content": "<p>not to suggest any sort gatekeeping here but it does seem that some sort of committee for security related confidence scoring for crates might be beneficial to prevent uninformed users from making bad design decisions, something that also takes into consideration downstream deps, previous vuln history, clearly poorly written crates.  it would be nice to prevent senseless dep explosion that increase attack surface in general. obviously would need a relatively high level of automation for the entire process to be sustainable. - (didn't read all of the backlog, apologies if this has been brought up before)</p>",
        "id": 168414333,
        "sender_full_name": "defunct",
        "timestamp": 1560873117
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"218492\">@defunct</span> yeah there's been a lot of talk about ideas along those lines</p>",
        "id": 168416385,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1560874337
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132721\">@Tony Arcieri</span>  ah thanks, any chance there a WIP documentation / RFC proposal for potential requirements and implementation for the topic or just discussion for now?</p>",
        "id": 168417038,
        "sender_full_name": "defunct",
        "timestamp": 1560874920
    },
    {
        "content": "<p>some ideas along those lines here <a href=\"https://blog.rust-lang.org/2017/05/05/libz-blitz.html\" target=\"_blank\" title=\"https://blog.rust-lang.org/2017/05/05/libz-blitz.html\">https://blog.rust-lang.org/2017/05/05/libz-blitz.html</a></p>",
        "id": 168417276,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1560875110
    },
    {
        "content": "<p>And this thread is also solved by cargo-crev: <a href=\"https://github.com/dpc/crev\" target=\"_blank\" title=\"https://github.com/dpc/crev\">https://github.com/dpc/crev</a></p>",
        "id": 168580897,
        "sender_full_name": "Shnatsel",
        "timestamp": 1561023693
    },
    {
        "content": "<p>I am really tempted to start using that and file  a \"this is dangerous\" for libflate. Reasons being:<br>\n<a href=\"https://github.com/sile/libflate/issues/16\" target=\"_blank\" title=\"https://github.com/sile/libflate/issues/16\">https://github.com/sile/libflate/issues/16</a><br>\n<a href=\"https://github.com/sile/libflate/issues/29\" target=\"_blank\" title=\"https://github.com/sile/libflate/issues/29\">https://github.com/sile/libflate/issues/29</a><br>\n<a href=\"https://github.com/sile/libflate/issues/31\" target=\"_blank\" title=\"https://github.com/sile/libflate/issues/31\">https://github.com/sile/libflate/issues/31</a><br>\nAnd there is probably more where that came from.<br>\nI was horrified when it showed up on crates-audit as a dependency of reqwest, but fortunately it's just a dev dependency.</p>",
        "id": 168581158,
        "sender_full_name": "Shnatsel",
        "timestamp": 1561023928
    },
    {
        "content": "<p>Oh hey look, I've found another memory safety bug: <a href=\"https://github.com/sile/libflate/issues/33\" target=\"_blank\" title=\"https://github.com/sile/libflate/issues/33\">https://github.com/sile/libflate/issues/33</a><br>\nThis one might be actually exploitable.</p>",
        "id": 168595705,
        "sender_full_name": "Shnatsel",
        "timestamp": 1561037846
    },
    {
        "content": "<p>oof</p>",
        "id": 168596187,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1561038135
    },
    {
        "content": "<blockquote>\n<p>I am really tempted to start using that and file  a \"this is dangerous\" for libflate. Reasons being:<br>\n<a href=\"https://github.com/sile/libflate/issues/16\" target=\"_blank\" title=\"https://github.com/sile/libflate/issues/16\">https://github.com/sile/libflate/issues/16</a><br>\n<a href=\"https://github.com/sile/libflate/issues/29\" target=\"_blank\" title=\"https://github.com/sile/libflate/issues/29\">https://github.com/sile/libflate/issues/29</a><br>\n<a href=\"https://github.com/sile/libflate/issues/31\" target=\"_blank\" title=\"https://github.com/sile/libflate/issues/31\">https://github.com/sile/libflate/issues/31</a><br>\nAnd there is probably more where that came from.<br>\nI was horrified when it showed up on crates-audit as a dependency of reqwest, but fortunately it's just a dev dependency.</p>\n</blockquote>\n<p>In issue 16 why do you set detect_odr_violation=0?  I haven't run into that in rust, what can trigger it?</p>",
        "id": 168606717,
        "sender_full_name": "Stuart Small",
        "timestamp": 1561044996
    },
    {
        "content": "<p>I have no idea what it is, seems to be some kind of check specific to C++. I used to get it randomly on seemingly benign code, so I've disabled it.</p>",
        "id": 168607295,
        "sender_full_name": "Shnatsel",
        "timestamp": 1561045429
    },
    {
        "content": "<p>...which does not sound reassuring</p>",
        "id": 168607626,
        "sender_full_name": "Shnatsel",
        "timestamp": 1561045654
    },
    {
        "content": "<p>I've heard of a few other rust specific asan rust specific false positives so it doesn't bother me too much.  Specifically around zero sized types.  I haven't hit them personally though</p>",
        "id": 168607811,
        "sender_full_name": "Stuart Small",
        "timestamp": 1561045777
    },
    {
        "content": "<p>Alternatives to libflate are:<br>\n1. inflate, which I've already cleansed of unsafe blocks save one, and found a bug in that one, so I'm not really worried about it. But it's even slower.<br>\n2. miniz_oxide, which has withstood my fuzzing attempts admirably, including differential fuzzing with libdiffuzz. It's much faster. I've opened the code now and... it's not reassuring.</p>",
        "id": 168609341,
        "sender_full_name": "Shnatsel",
        "timestamp": 1561046807
    },
    {
        "content": "<p><a href=\"https://github.com/Frommi/miniz_oxide/blob/master/miniz_oxide/src/deflate/core.rs#L314\" target=\"_blank\" title=\"https://github.com/Frommi/miniz_oxide/blob/master/miniz_oxide/src/deflate/core.rs#L314\">https://github.com/Frommi/miniz_oxide/blob/master/miniz_oxide/src/deflate/core.rs#L314</a> - this makes an assumption that is only true for allocations made with stdlib containers<br>\n<a href=\"https://github.com/Frommi/miniz_oxide/blob/master/miniz_oxide/src/deflate/core.rs#L280\" target=\"_blank\" title=\"https://github.com/Frommi/miniz_oxide/blob/master/miniz_oxide/src/deflate/core.rs#L280\">https://github.com/Frommi/miniz_oxide/blob/master/miniz_oxide/src/deflate/core.rs#L280</a> - same here but not explicitly noted. Could be exploitable if writing to user-supplied buffer<br>\n\"check if this is safe\" TODOs:<br>\n<a href=\"https://github.com/Frommi/miniz_oxide/blob/master/miniz_oxide/src/deflate/core.rs#L370\" target=\"_blank\" title=\"https://github.com/Frommi/miniz_oxide/blob/master/miniz_oxide/src/deflate/core.rs#L370\">https://github.com/Frommi/miniz_oxide/blob/master/miniz_oxide/src/deflate/core.rs#L370</a><br>\n<a href=\"https://github.com/Frommi/miniz_oxide/blob/master/miniz_oxide/src/deflate/core.rs#L572\" target=\"_blank\" title=\"https://github.com/Frommi/miniz_oxide/blob/master/miniz_oxide/src/deflate/core.rs#L572\">https://github.com/Frommi/miniz_oxide/blob/master/miniz_oxide/src/deflate/core.rs#L572</a></p>",
        "id": 168609639,
        "sender_full_name": "Shnatsel",
        "timestamp": 1561047067
    },
    {
        "content": "<p>This function is very weird: <br>\n<a href=\"https://github.com/Frommi/miniz_oxide/blob/master/miniz_oxide/src/deflate/core.rs#L276\" target=\"_blank\" title=\"https://github.com/Frommi/miniz_oxide/blob/master/miniz_oxide/src/deflate/core.rs#L276\">https://github.com/Frommi/miniz_oxide/blob/master/miniz_oxide/src/deflate/core.rs#L276</a><br>\nIt doesn't use <code>pos</code> argument in any meaningful way, it seems superfluous. Also I don't understand what <code>#[cfg(all(target_endian = \"little\", test))]</code> does, I thought <code>#[cfg(test)]</code> should only be used for modules?<br>\nDoes anyone understand what's happening in this code?</p>",
        "id": 168610222,
        "sender_full_name": "Shnatsel",
        "timestamp": 1561047517
    },
    {
        "content": "<p>The <code>#[cfg(test)]</code> means that  function is only called in code that's also <code>#[cfg(test)]</code> (so the test module below)</p>",
        "id": 168612581,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1561049246
    },
    {
        "content": "<p>but I don't know what's going on with <code>pos</code>, presumably they meant to write a <code>u16</code> to <code>slice[pos..=pos+1]</code> but forgot to add the offset?</p>",
        "id": 168612704,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1561049351
    },
    {
        "content": "<p>AFAICT it's only called with <code>pos = 0</code>, so luckily for them nothing breaks.</p>",
        "id": 168612834,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1561049448
    },
    {
        "content": "<p>Based on the surrounding code, they forgot to call <code>offset(pos)</code></p>",
        "id": 168612932,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1561049516
    },
    {
        "content": "<p>Thanks! I'll file an issue on github.<br>\nBut this is still not reassuring. And flate2 is by far the most popular gzip/zlib crate.</p>",
        "id": 168613742,
        "sender_full_name": "Shnatsel",
        "timestamp": 1561050134
    },
    {
        "content": "<p>Okay, opened a PR: <a href=\"https://github.com/Frommi/miniz_oxide/pull/45\" target=\"_blank\" title=\"https://github.com/Frommi/miniz_oxide/pull/45\">https://github.com/Frommi/miniz_oxide/pull/45</a></p>",
        "id": 168614497,
        "sender_full_name": "Shnatsel",
        "timestamp": 1561050785
    },
    {
        "content": "<p>Also not reassuring - looks like they have some kind of underlying allocator corruption going on, or are mixing regions allocated from C and from Rust: <a href=\"https://github.com/Frommi/miniz_oxide/issues/14\" target=\"_blank\" title=\"https://github.com/Frommi/miniz_oxide/issues/14\">https://github.com/Frommi/miniz_oxide/issues/14</a><br>\nThis has been open for ages and is tagged <strong>help wanted</strong>, so looks like miniz_oxide devs aren't going to fix it. I don't think I'm competent enough either. Any takers?</p>",
        "id": 168614808,
        "sender_full_name": "Shnatsel",
        "timestamp": 1561051008
    },
    {
        "content": "<p>Oh, here's an interesting pull request for <code>miniz_oxide</code>: <a href=\"https://github.com/Frommi/miniz_oxide/pull/36\" target=\"_blank\" title=\"https://github.com/Frommi/miniz_oxide/pull/36\">https://github.com/Frommi/miniz_oxide/pull/36</a><br>\nIt fixes some segfaults because of \"type confusion\", but I'm not sure if that is exploitable in a context other than DoS. It's not merged, so the bug still exists.<br>\nIs anyone interested in evaluating the impact? This crate has 180,000 downloads per month, so if this is exploitable this would be a high-profile vulnerability by Rust standards.</p>",
        "id": 168753156,
        "sender_full_name": "Shnatsel",
        "timestamp": 1561213787
    },
    {
        "content": "<p>Depends what types you can confuse. If you can confuse something where you've got a user-controlled int at the same offset as a pointer that's a potentially very powerful exploit primitive</p>",
        "id": 168753261,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1561213977
    },
    {
        "content": "<p>I had a bout of insomnia, so I've poked miniz_oxide some more. Lo and behold, a buffer overflow on write<br>\n<a href=\"https://github.com/Frommi/miniz_oxide/pull/47\" target=\"_blank\" title=\"https://github.com/Frommi/miniz_oxide/pull/47\">https://github.com/Frommi/miniz_oxide/pull/47</a><br>\nNow to figure out if this is actually exploitable</p>",
        "id": 168779833,
        "sender_full_name": "Shnatsel",
        "timestamp": 1561268435
    },
    {
        "content": "<p>Ooooh hey look, another vulnerability in <code>smallvec</code>: <a href=\"https://github.com/servo/rust-smallvec/issues/148\" target=\"_blank\" title=\"https://github.com/servo/rust-smallvec/issues/148\">https://github.com/servo/rust-smallvec/issues/148</a></p>",
        "id": 168805889,
        "sender_full_name": "Shnatsel",
        "timestamp": 1561319349
    },
    {
        "content": "<p>Without an advisory, too</p>",
        "id": 168805892,
        "sender_full_name": "Shnatsel",
        "timestamp": 1561319366
    },
    {
        "content": "<p>Any reason not to just file an advisory yourself?</p>",
        "id": 168809433,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1561326477
    },
    {
        "content": "<p>I want to educate SmallVec maintainers. Also, I'm too lazy to go in and try to track down when was the vulnerability introduced to understand which versions are affected</p>",
        "id": 168809489,
        "sender_full_name": "Shnatsel",
        "timestamp": 1561326561
    },
    {
        "content": "<p>Also, speaking of type confusion in <code>miniz_oxide</code>: it's known to cause a double free, so probably exploitable. Still not fixed. <a href=\"https://github.com/Frommi/miniz_oxide/pull/36\" target=\"_blank\" title=\"https://github.com/Frommi/miniz_oxide/pull/36\">https://github.com/Frommi/miniz_oxide/pull/36</a> - PR actually not ready for merging</p>",
        "id": 168809560,
        "sender_full_name": "Shnatsel",
        "timestamp": 1561326649
    },
    {
        "content": "<p>Threat estimation question: calling <code>drop()</code> on uninitialized memory could lead to arbitrary code execution in the worst case, right?</p>",
        "id": 168992039,
        "sender_full_name": "Shnatsel",
        "timestamp": 1561511653
    },
    {
        "content": "<p>I'm observing it on interesting non-Copy types like BufReader</p>",
        "id": 168992041,
        "sender_full_name": "Shnatsel",
        "timestamp": 1561511676
    },
    {
        "content": "<p>On an arbitrary type? Sure, it easily potentially triggers UAF, also can be basically any other sort of memory corruption.</p>",
        "id": 168992112,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1561511785
    },
    {
        "content": "<p>Thanks, UAF is a good way to put it. This is also in <code>libflate</code> crate, for reference. Filing an issue now.</p>",
        "id": 168992433,
        "sender_full_name": "Shnatsel",
        "timestamp": 1561512335
    },
    {
        "content": "<p>Okay, I am done auditing <code>libflate</code>. I have PRs outstanding for removing most unsafe blocks, and I've reported vulnerabilities in the rest of them to the maintainer. So now we just wait for me or the maintainer or myself to come up with fixes.</p>",
        "id": 169136276,
        "sender_full_name": "Shnatsel",
        "timestamp": 1561643413
    },
    {
        "content": "<p>nice, great work there <span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> !</p>",
        "id": 169411062,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1561999817
    },
    {
        "content": "<p>as it were, we're using <code>libflate</code> right now <span aria-label=\"weary\" class=\"emoji emoji-1f629\" role=\"img\" title=\"weary\">:weary:</span></p>",
        "id": 169411072,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1561999826
    },
    {
        "content": "<p>so does smallvec do anything that <code>heapless::Vec</code> doesn't?</p>",
        "id": 169412509,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1562000937
    },
    {
        "content": "<p>this looks interesting: <a href=\"https://blog.trailofbits.com/2019/07/01/siderophile-expose-your-crates-unsafety/\" target=\"_blank\" title=\"https://blog.trailofbits.com/2019/07/01/siderophile-expose-your-crates-unsafety/\">https://blog.trailofbits.com/2019/07/01/siderophile-expose-your-crates-unsafety/</a></p>",
        "id": 169413618,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1562001736
    },
    {
        "content": "<blockquote>\n<p>interesting <a href=\"https://twitter.com/FiloSottile/status/1075429069888598016\" target=\"_blank\" title=\"https://twitter.com/FiloSottile/status/1075429069888598016\">https://twitter.com/FiloSottile/status/1075429069888598016</a></p>\n</blockquote>\n<p>so this shipped!</p>",
        "id": 174495807,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1567115410
    },
    {
        "content": "<p><a href=\"https://twitter.com/FiloSottile/status/1167156608545280005\" target=\"_blank\" title=\"https://twitter.com/FiloSottile/status/1167156608545280005\">https://twitter.com/FiloSottile/status/1167156608545280005</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/FiloSottile/status/1167156608545280005\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/1028703543174225920/3cm3bMWC_normal.jpg\"></a><p>The Go Checksum Database is now production ready, and will secure the module ecosystem starting with Go 1.13.\n\nExtremely proud of this state-of-the-art auth system based on transparency trees (designed by <a href=\"https://twitter.com/_rsc\" target=\"_blank\" title=\"https://twitter.com/_rsc\">@_rsc</a> and me, built by <a href=\"https://twitter.com/katie_hockman\" target=\"_blank\" title=\"https://twitter.com/katie_hockman\">@katie_hockman</a>'s team).\n\n<a href=\"https://t.co/pl5bPOVbOd\" target=\"_blank\" title=\"https://t.co/pl5bPOVbOd\">https://blog.golang.org/module-mirror-launch</a></p><span>- Filippo Valsorda (@FiloSottile)</span></div></div>",
        "id": 174495828,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1567115431
    },
    {
        "content": "<p>looks really interesting</p>",
        "id": 174495836,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1567115440
    },
    {
        "content": "<p>I've been thinking a lot about a similar \"binary transparency\"-style reproducible build system</p>",
        "id": 174495872,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1567115475
    },
    {
        "content": "<p>although I am less excited about Trillian lately than I used to be</p>",
        "id": 174495887,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1567115488
    },
    {
        "content": "<p>I have a pretty crazy idea I need to flesh out better <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 174495912,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1567115519
    },
    {
        "content": "<p>there are a ton of really good ideas in the Go Checksum Database though</p>",
        "id": 174495989,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1567115582
    },
    {
        "content": "<p>This looks neat. Perhaps bring it up on Reddit?</p>",
        "id": 174558039,
        "sender_full_name": "Shnatsel",
        "timestamp": 1567180996
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 174560185,
        "sender_full_name": "jakubadamw",
        "timestamp": 1567182456
    },
    {
        "content": "<p><a href=\"https://medium.com/@dlorenc/getting-serious-about-open-source-security-1d15609478fa\" target=\"_blank\" title=\"https://medium.com/@dlorenc/getting-serious-about-open-source-security-1d15609478fa\">https://medium.com/@dlorenc/getting-serious-about-open-source-security-1d15609478fa</a></p>",
        "id": 185078376,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1578454698
    },
    {
        "content": "<p>the part about \"serverless came and saved us all\" makes me think this is satire? ;) (well I guess that part actually is. kinda hard to tell for a mostly-outsider :P )</p>",
        "id": 185091624,
        "sender_full_name": "RalfJ",
        "timestamp": 1578475018
    },
    {
        "content": "<p>haha</p>",
        "id": 185106110,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1578487675
    },
    {
        "content": "<p>[img:can'thaveXifyoudon'tY] ...software supply chain attacks if you don't have servers.. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 185106183,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1578487721
    },
    {
        "content": "<p>Yeah everything under the first heading is satire</p>",
        "id": 185121601,
        "sender_full_name": "Shnatsel",
        "timestamp": 1578496636
    }
]