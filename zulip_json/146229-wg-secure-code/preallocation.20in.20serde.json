[
    {
        "content": "<p>I bring this up because of <a href=\"https://github.com/3Hren/msgpack-rust/issues/151\" target=\"_blank\" title=\"https://github.com/3Hren/msgpack-rust/issues/151\">https://github.com/3Hren/msgpack-rust/issues/151</a> but I've seen this a couple times now.  It seems to be a reoccurring bug in serde crates that have a binary stream with the style of [length][datastream].   I fixed a similar bug in the bson crate but luckily with that one the spec has a small maximum size defined.. I looked at fixing the msgpack one with <a href=\"https://github.com/rust-lang/rust/issues/48043\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/48043\">https://github.com/rust-lang/rust/issues/48043</a> but that might not be the best path since an attacker can still use the bug to gobble RAM but just won't be able to hit the same DOS panic bug.  Does anyone have a better approach to this class of bugs?  Should I look to the serde comunity?</p>",
        "id": 174383744,
        "sender_full_name": "Stuart Small",
        "timestamp": 1567013046
    },
    {
        "content": "<p>hahahaha</p>",
        "id": 174384833,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1567013878
    },
    {
        "content": "<p>deep rabbit hole</p>",
        "id": 174384844,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1567013882
    },
    {
        "content": "<p>some would argue this is a problematic family in formal language theory</p>",
        "id": 174384889,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1567013898
    },
    {
        "content": "<p>it wasn't even properly classified until a few years ago</p>",
        "id": 174384902,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1567013911
    },
    {
        "content": "<p><a href=\"http://spw17.langsec.org/papers/grosch-taming-length-fiels.pdf\" target=\"_blank\" title=\"http://spw17.langsec.org/papers/grosch-taming-length-fiels.pdf\">http://spw17.langsec.org/papers/grosch-taming-length-fiels.pdf</a></p>",
        "id": 174384926,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1567013930
    },
    {
        "content": "<p>Thanks for the link on more reading</p>",
        "id": 174384973,
        "sender_full_name": "Stuart Small",
        "timestamp": 1567013968
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/hSt7a25I1EXO92moXddkUH6a/Screen-Shot-2019-08-28-at-10.39.13-AM.png\" target=\"_blank\" title=\"Screen-Shot-2019-08-28-at-10.39.13-AM.png\">Screen-Shot-2019-08-28-at-10.39.13-AM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/hSt7a25I1EXO92moXddkUH6a/Screen-Shot-2019-08-28-at-10.39.13-AM.png\" target=\"_blank\" title=\"Screen-Shot-2019-08-28-at-10.39.13-AM.png\"><img src=\"/user_uploads/4715/hSt7a25I1EXO92moXddkUH6a/Screen-Shot-2019-08-28-at-10.39.13-AM.png\"></a></div>",
        "id": 174384975,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1567013970
    },
    {
        "content": "<p>it's a really good read if you're interested in this particular problem</p>",
        "id": 174385003,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1567013994
    },
    {
        "content": "<p>lots of language theory, but they do boil it down to some practical advice about how to parse this family of languages</p>",
        "id": 174385092,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1567014026
    },
    {
        "content": "<p>in general I would say making efficient zero-copy parsers for these sorts of data formats is very much a classical source of vulnerabilities</p>",
        "id": 174385204,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1567014121
    },
    {
        "content": "<p>and there are tons of sharp edges that are rarely considered</p>",
        "id": 174385263,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1567014142
    },
    {
        "content": "<p>Looking at this in the larger context of serde is making a lot of this sharp edges jump to the forefront too.</p>",
        "id": 174385335,
        "sender_full_name": "Stuart Small",
        "timestamp": 1567014221
    },
    {
        "content": "<p>yeah, I think in general <code>serde</code> is designed with context-free grammars in mind</p>",
        "id": 174385427,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1567014270
    },
    {
        "content": "<p>or if not that, \"packed structs\"</p>",
        "id": 174385435,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1567014288
    },
    {
        "content": "<p>I've written a serde parser/serializer for a format that's a combination thereof (which I didn't design), although that makes things a little easier: packed struct in front, with some messages having a variable length (length-prefixed) payload at the end</p>",
        "id": 174385485,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1567014347
    },
    {
        "content": "<p>that avoids nested length fields, which are where things generally start to go awry</p>",
        "id": 174385543,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1567014371
    },
    {
        "content": "<p>Makes sense.  For most of these I'm looking the format is already defined and I just want to be able to handle safely.  I was thinking about peeking ahead to see if the length value in the protocol is longer than what is left in the stream.  Last I played with this was in the winter but IIRC serde didn't make that easy.  This is all just coming up again because of that thread getting bumped.</p>",
        "id": 174385847,
        "sender_full_name": "Stuart Small",
        "timestamp": 1567014597
    },
    {
        "content": "<p>I think I need to do some reading and catch back on what I was playing with last time I looked at this.  It makes me feel better that this is an active research problem.</p>",
        "id": 174385946,
        "sender_full_name": "Stuart Small",
        "timestamp": 1567014645
    },
    {
        "content": "<p>This isn't really just a Rust problem -- fuzzing ImageMagick/GraphicsMagick turned up tons of ooms of the shape \"allocate however many X the length prefix said!\"</p>",
        "id": 174415424,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1567040982
    },
    {
        "content": "<blockquote>\n<p><a href=\"http://spw17.langsec.org/papers/grosch-taming-length-fiels.pdf\" target=\"_blank\" title=\"http://spw17.langsec.org/papers/grosch-taming-length-fiels.pdf\">http://spw17.langsec.org/papers/grosch-taming-length-fiels.pdf</a></p>\n</blockquote>\n<p>thanks for sharing!</p>",
        "id": 174428825,
        "sender_full_name": "RalfJ",
        "timestamp": 1567061880
    },
    {
        "content": "<p>funny that they claim \"(1) Length-prefix languages arenot context-free\" is a contribution of theirs, AFAIK that as well-known and I saw talks about it many years ago... but it might be just clumsy wording in the abstract</p>",
        "id": 174428893,
        "sender_full_name": "RalfJ",
        "timestamp": 1567061928
    },
    {
        "content": "<p>oh wait, they claim to disprove (1)? Now I am confused.^^</p>",
        "id": 174428918,
        "sender_full_name": "RalfJ",
        "timestamp": 1567061981
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> it's a little more nuanced than that. If you look at the image I pasted above (Fig 3), their novel contribution is that \"Calc-Regular\" languages exist outside the normal confines of the Chomsky Hierarchy</p>",
        "id": 174429021,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1567062072
    },
    {
        "content": "<p>that makes sense</p>",
        "id": 174429094,
        "sender_full_name": "RalfJ",
        "timestamp": 1567062132
    },
    {
        "content": "<p>but then what do they mean by \"disproving (1)\"...</p>",
        "id": 174429098,
        "sender_full_name": "RalfJ",
        "timestamp": 1567062141
    },
    {
        "content": "<p>oh, they mean the \"parsing is inefficient\" part</p>",
        "id": 174429113,
        "sender_full_name": "RalfJ",
        "timestamp": 1567062166
    },
    {
        "content": "<p>got it :D</p>",
        "id": 174429119,
        "sender_full_name": "RalfJ",
        "timestamp": 1567062176
    },
    {
        "content": "<p>interpreting a \"Calc-Regular\" language requires a sort of \"recursive regular\" automaton</p>",
        "id": 174429135,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1567062205
    },
    {
        "content": "<p>which first parses and comprehends the length prefix and then uses that as its Kleene star when consuming the message, rinse repeat. but in addition to that, those sort of recursive sub-machines allow you to recursively descend into nested length-prefix data, providing properties closer to a context-free language, but without the need for a pushdown automaton, i.e. while it's popular to use a stack machine for comprehending nested length prefix data, the paper shows it isn't strictly necessary</p>",
        "id": 174429285,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1567062389
    },
    {
        "content": "<p>cool</p>",
        "id": 174429307,
        "sender_full_name": "RalfJ",
        "timestamp": 1567062427
    },
    {
        "content": "<blockquote>\n<p>Calc-regular languages are almost as easy to parse as regular languages, using finite state machines with additional accumulators.</p>\n</blockquote>",
        "id": 174429373,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1567062491
    },
    {
        "content": "<p>AFAIK this is basically unsolved as of right now. Every single image or audio decoder has also bumped into this, see e.g. <a href=\"https://libpng.sourceforge.io/decompression_bombs.html\" target=\"_blank\" title=\"https://libpng.sourceforge.io/decompression_bombs.html\">https://libpng.sourceforge.io/decompression_bombs.html</a><br>\nSo far the approach in C libraries is \"put checks everywhere and hope you got them all and nothing ever overflows\"<br>\nI've found a number of such issues in Lewton, the Vorbis decoder in Rust, and the author came up with an interesting idea: make the memory allocator keep track of memory used by the crate and panic or abort or return error if someone tries to exceed the limit. This way deserialization of crafted input fails safely and in an isolated manner, without impacting the rest of the application. Here's their implementation of that approach, but sadly it's not complete enough to be actually used in lewton: <a href=\"https://github.com/est31/balloc\" target=\"_blank\" title=\"https://github.com/est31/balloc\">https://github.com/est31/balloc</a><br>\nMore info on the issue and their approach: <a href=\"https://github.com/RustAudio/lewton/issues/34\" target=\"_blank\" title=\"https://github.com/RustAudio/lewton/issues/34\">https://github.com/RustAudio/lewton/issues/34</a></p>",
        "id": 174475955,
        "sender_full_name": "Shnatsel",
        "timestamp": 1567101042
    },
    {
        "content": "<p>there's a simple solution. it's just not always applicable.</p>",
        "id": 174476191,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1567101232
    },
    {
        "content": "<p>make the maximum field length a knob in the parser</p>",
        "id": 174476259,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1567101256
    },
    {
        "content": "<p>Well, that's what they're trying to do, but actually <em>implementing</em> that is a game of whack-a-mole.</p>",
        "id": 174476435,
        "sender_full_name": "Shnatsel",
        "timestamp": 1567101356
    },
    {
        "content": "<p><a href=\"https://github.com/clasp-lang/veriform/blob/master/rust/src/parser.rs#L18\" target=\"_blank\" title=\"https://github.com/clasp-lang/veriform/blob/master/rust/src/parser.rs#L18\">https://github.com/clasp-lang/veriform/blob/master/rust/src/parser.rs#L18</a></p>",
        "id": 174476444,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1567101360
    },
    {
        "content": "<p>heh</p>",
        "id": 174476464,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1567101363
    },
    {
        "content": "<p>I'd like to rewrite that into a zero copy pull parser based on iterators</p>",
        "id": 174476511,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1567101373
    },
    {
        "content": "<p>using the techniques in the Calc-Regular paper</p>",
        "id": 174476536,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1567101391
    },
    {
        "content": "<p>libpng has a knob, a bunch of Rust imaging crates got a knob after I bugged the maintainers about it, but it's still not very reliable because you need to get all the math right, never overflow, and not forget a single place with a single check. That's like avoiding buffer overflows in C all over again.</p>",
        "id": 174476610,
        "sender_full_name": "Shnatsel",
        "timestamp": 1567101461
    },
    {
        "content": "<p><a href=\"https://github.com/est31/balloc\" target=\"_blank\" title=\"https://github.com/est31/balloc\">https://github.com/est31/balloc</a> is supposed to handle that for you transparently and reliably... or at least that's the idea. I don't think it's mature enough for production use.</p>",
        "id": 174476671,
        "sender_full_name": "Shnatsel",
        "timestamp": 1567101499
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> my parser neatly sidesteps all that. unfortunately the solution means it isn't applicable to those sorts of problems (max overall message size cap which defaults to 1kB <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span>)</p>",
        "id": 174477189,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1567101759
    },
    {
        "content": "<p>I could probably turn it up just a wee bit, heh</p>",
        "id": 174477215,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1567101777
    },
    {
        "content": "<p>1kb compressed or decompressed?</p>",
        "id": 174477241,
        "sender_full_name": "Shnatsel",
        "timestamp": 1567101796
    },
    {
        "content": "<p>there is no compression <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 174477610,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1567101973
    },
    {
        "content": "<p>it's for credentials</p>",
        "id": 174477629,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1567101987
    }
]