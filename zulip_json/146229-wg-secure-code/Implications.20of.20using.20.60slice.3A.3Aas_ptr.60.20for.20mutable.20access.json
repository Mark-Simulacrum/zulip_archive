[
    {
        "content": "<p>So, obviously, <code>slice::as_ptr</code> states that the pointer must not be used for modifying any of the contents of the slice. That's UB and all, very clearly. However, I'm wondering if there are any <em>practical</em> complications if it is used on a <code>&amp;mut [T]</code> instead of the correct <code>as_mut_ptr</code>. Inspect the llvm IR that is generated does not reveal any UB. </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">as_ptr</span><span class=\"p\">(</span><span class=\"n\">slice</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">slice</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">as_mut_ptr</span><span class=\"p\">(</span><span class=\"n\">slice</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">slice</span><span class=\"p\">.</span><span class=\"n\">as_mut_ptr</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=28d3c19800236ae520441a22a6f99b19\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=28d3c19800236ae520441a22a6f99b19</a></p>\n<p>In particular, the only difference is an additional <code>readonly</code> annotation on the argument/parameter to <code>slice::as_ptr</code> itself. The codegen for the remaining parts of exposed methods is the same. The attribute appears to only add semantics to the method body itself, not place any restrictions on the returned value:</p>\n<blockquote>\n<p>On a function, this attribute indicates that the function does not<br>\nwrite through any pointer arguments. [https://llvm.org/docs/LangRef.html]</p>\n</blockquote>\n<p>Since the function itself does not do so, it seems to me like the behavior is defined from llvm IR onwards and everything is fine. This might of course change in future versions of Rust and in other codegen but the current implementation does not appear to make use of it.</p>\n<p>I'm wondering because I'm curious how to classify <a href=\"https://github.com/image-rs/image/issues/1357\">https://github.com/image-rs/image/issues/1357</a> in its Advisory</p>",
        "id": 216499472,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1605201627
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"229913\">@HeroicKatora</span> seeing some concurrent discussion of this in the Rust Embedded Matrix...</p>",
        "id": 216511215,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1605207066
    },
    {
        "content": "<p>also paging <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span></p>",
        "id": 216511240,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1605207081
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"229913\">@HeroicKatora</span> your quoted code seems wrong, that should be <code>&amp;[u8]</code> for <code>as_ptr</code>. Or maybe I don't understand what that code is supposed to show.</p>",
        "id": 216586901,
        "sender_full_name": "RalfJ",
        "timestamp": 1605260187
    },
    {
        "content": "<p>and indeed we currently hardly exploit the aliasing guarantees provided by Rust, as LLVM does not have good ways to represent them and MIR optimizations are not far enough along yet</p>",
        "id": 216587007,
        "sender_full_name": "RalfJ",
        "timestamp": 1605260228
    },
    {
        "content": "<blockquote>\n<p>On a function, this attribute indicates that the function does not<br>\nwrite through any pointer arguments. [https://llvm.org/docs/LangRef.html]</p>\n</blockquote>\n<p>that is the wrong doc. it's for the <code>readonly</code> attribute on functions, not function arguments.</p>",
        "id": 216587157,
        "sender_full_name": "RalfJ",
        "timestamp": 1605260284
    },
    {
        "content": "<p>but quite possibly LLVM just has no way of saying \"this ptr and all its descendants are read-only\"</p>",
        "id": 216587238,
        "sender_full_name": "RalfJ",
        "timestamp": 1605260319
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/Implications.20of.20using.20.60slice.3A.3Aas_ptr.60.20for.20mutable.20access/near/216586901\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"229913\">HeroicKatora</span> your quoted code seems wrong, that should be <code>&amp;[u8]</code> for <code>as_ptr</code></p>\n</blockquote>\n<p>Indeed that is the crux of the problem. Maybe more clearly what the buggy code was actually doing (it predates TryFrom). All of that hidden in a macro obscuring the target type Wrapper.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Wrapper</span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">as_ptr</span><span class=\"p\">(</span><span class=\"n\">slice</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Wrapper</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// UB according to Rust but how bad does it actually get?</span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">slice</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Wrapper</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>And I'm trying to judge potential implications of that with regards to the AdvisoryDB labels. Unless any miscompilation can be observed I'd feel rather odd about labelling this an exploitable issue of memory safety given if it stays within Rust's provenance model and doesn't even escape  into llvm IR issues</p>",
        "id": 216589292,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1605261255
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/Implications.20of.20using.20.60slice.3A.3Aas_ptr.60.20for.20mutable.20access/near/216587157\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>On a function, this attribute indicates that the function does not<br>\nwrite through any pointer arguments. [https://llvm.org/docs/LangRef.html]</p>\n</blockquote>\n<p>that is the wrong doc. it's for the <code>readonly</code> attribute on functions, not function arguments.</p>\n</blockquote>\n<p>Curious, there are no docs for the function attribute itself that I can find but clearly those attributes exist since the API reference shows them accessible in C++ (Argument::onlyReadsMemory: <code>Return true if this argument has the readonly or readnone attribute.</code>) and they get printed in the llvm IR dump (unless I'm serious misinterpreting what those attributes apply to):</p>\n<div class=\"codehilite\"><pre><span></span><code>define i8* @&quot;_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd73c4c18f8974eb1E&quot;([0 x i8]* noalias nonnull readonly align 1 %self.0, i64 %self.1) unnamed_addr #0 !dbg !29\n</code></pre></div>",
        "id": 216589762,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1605261488
    },
    {
        "content": "<p>The docs say this:</p>\n<blockquote>\n<p>On an argument, this attribute indicates that the function does not write through this pointer argument, even though it may write to the memory that the pointer points to.</p>\n</blockquote>",
        "id": 216725946,
        "sender_full_name": "RalfJ",
        "timestamp": 1605356318
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"229913\">@HeroicKatora</span>  These seem like the relevant docs for the argument attribute case.</p>",
        "id": 216725953,
        "sender_full_name": "RalfJ",
        "timestamp": 1605356345
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> Thanks for the find. I suppose this means the interpretation in llvm IR already does not exhibit UB as the attribute is effectively irrelevant after the call, when used later. I'm probably going to file it as only an informational advisory then.</p>",
        "id": 216727192,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1605357830
    },
    {
        "content": "<p>Yeah that is my interpretation, too -- this is UB, but I see currently no way that it could lead to unexpected behavior.</p>",
        "id": 216728585,
        "sender_full_name": "RalfJ",
        "timestamp": 1605359645
    }
]