[
    {
        "content": "<p>A fun case study I just encountered...</p>",
        "id": 171624427,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1563988452
    },
    {
        "content": "<p>here is some C code <a href=\"https://godbolt.org/z/FzRm5h\" target=\"_blank\" title=\"https://godbolt.org/z/FzRm5h\">https://godbolt.org/z/FzRm5h</a></p>",
        "id": 171624454,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1563988493
    },
    {
        "content": "<p>here is an attempt to translate that code into Rust <a href=\"https://godbolt.org/z/HCFmjy\" target=\"_blank\" title=\"https://godbolt.org/z/HCFmjy\">https://godbolt.org/z/HCFmjy</a></p>",
        "id": 171624624,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1563988617
    },
    {
        "content": "<p>now with more jump instructions</p>",
        "id": 171624654,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1563988641
    },
    {
        "content": "<p>context <a href=\"https://twitter.com/real_or_random/status/1154011131066929152\" target=\"_blank\" title=\"https://twitter.com/real_or_random/status/1154011131066929152\">https://twitter.com/real_or_random/status/1154011131066929152</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/real_or_random/status/1154011131066929152\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/925128264502439936/XcmMIk8k_normal.jpg\"></a><p>Let's talk about code quality in cryptographic implementations. A lot of people in this thread say that the code in question is terrible but noone offers a convincing reason. Moreover, this is not constructive. <a href=\"https://t.co/KTQ11QkBsU\" target=\"_blank\" title=\"https://t.co/KTQ11QkBsU\">https://twitter.com/isislovecruft/status/1153829390138171392</a></p><span>- Tim Ruffing (@real_or_random)</span></div></div>",
        "id": 171624688,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1563988681
    },
    {
        "content": "<p>Your Rust code is much different than the C code. Rewrite your Rust code using <code>usize</code> instead of <code>bool</code> and it may do the right thing.</p>",
        "id": 171637152,
        "sender_full_name": "briansmith",
        "timestamp": 1563997810
    },
    {
        "content": "<p>in particular, you're using short-circuiting <code>&amp;&amp;</code> and <code>||</code> in the Rust code, instead of non-short-circuiting <code>&amp;</code> and <code>|</code> in the C code.</p>",
        "id": 171637201,
        "sender_full_name": "briansmith",
        "timestamp": 1563997858
    },
    {
        "content": "<p>That said, I wouldn't use <code>&lt;</code>, <code>&gt;</code>, etc. in C either</p>",
        "id": 171637328,
        "sender_full_name": "briansmith",
        "timestamp": 1563997929
    },
    {
        "content": "<p>yeah, we already did that</p>",
        "id": 171637552,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1563998078
    },
    {
        "content": "<p>and it appears to be constant time</p>",
        "id": 171637573,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1563998091
    },
    {
        "content": "<p><a href=\"https://godbolt.org/z/NDovea\" target=\"_blank\" title=\"https://godbolt.org/z/NDovea\">https://godbolt.org/z/NDovea</a></p>",
        "id": 171637630,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1563998125
    },
    {
        "content": "<p>Nice. Lucky that LLVM hasn't gotten around to optimizing that the wrong way yet.</p>",
        "id": 171640689,
        "sender_full_name": "briansmith",
        "timestamp": 1564000301
    },
    {
        "content": "<p>Interestingly, there are passes in LLVM that do optimize similar things a bad way, recognizing patterns for constant-time conditionals and converting them into non-constant-time conditionals, with the goal (I think) of having the auto-vectorizer convert them into SIMD conditionals that accidentally happen to be constant time.</p>",
        "id": 171640808,
        "sender_full_name": "briansmith",
        "timestamp": 1564000382
    },
    {
        "content": "<p>...but, when the auto-vectorization doesn't happen, it ends up using the non-constant-time scalar version of the code.</p>",
        "id": 171640849,
        "sender_full_name": "briansmith",
        "timestamp": 1564000438
    }
]