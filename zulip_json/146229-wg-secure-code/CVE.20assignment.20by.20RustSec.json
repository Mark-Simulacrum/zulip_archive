[
    {
        "content": "<p>It has been raised in <a href=\"https://github.com/RustSec/advisory-db/pull/389\">https://github.com/RustSec/advisory-db/pull/389</a> that some processes (e.g. Debian) assume a CVE will be published for a vulnerability; and if it is not, they will miss it.<br>\nI think we could dramatically up our game if we manage to automatically assign CVEs for incoming reports. It is obviously easier to plug RustSec into CVE somehow than to get everyone who already uses CVE to add extra automation for RustSec. <br>\nI'm looking into what it takes to become a \"CVE Numbering Authority\" - an entity that can assign CVE numbers - and it's actually surprisingly easy: <a href=\"https://cve.mitre.org/cve/cna.html#new_cna_onboarding\">https://cve.mitre.org/cve/cna.html#new_cna_onboarding</a><br>\nThoughts?</p>",
        "id": 210662557,
        "sender_full_name": "Shnatsel",
        "timestamp": 1600601587
    },
    {
        "content": "<p>I tried it before and never got a response</p>",
        "id": 210800127,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1600722462
    },
    {
        "content": "<p>best of luck</p>",
        "id": 210800128,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1600722463
    },
    {
        "content": "<p>I'm wondering, are the CVEs are filed or not?</p>",
        "id": 229482962,
        "sender_full_name": "oliver",
        "timestamp": 1615299338
    },
    {
        "content": "<p>answered here: <a href=\"https://github.com/RustSec/advisory-db/pull/389\">https://github.com/RustSec/advisory-db/pull/389</a></p>",
        "id": 229485184,
        "sender_full_name": "oliver",
        "timestamp": 1615300192
    },
    {
        "content": "<p>RustSec doesn't file for CVEs ourselves, sometimes reporters or other folks file for them and then we note them (when we're told)</p>",
        "id": 229485834,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1615300433
    },
    {
        "content": "<p>thanks, just curious, what about DWF ids?</p>",
        "id": 229486022,
        "sender_full_name": "oliver",
        "timestamp": 1615300484
    },
    {
        "content": "<p>Same deal. We don't allocate any IDs besides the RUSTSEC- ones.</p>",
        "id": 229486139,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1615300523
    },
    {
        "content": "<p>Technically CVE allows third-party numbering authorities, so we _could_ get a range allocated to us. Last time Tony tried that he hasn't received a reply, though.<br>\nI think that also requires confidential disclosure which we do not currently provide (all pull requests for advisories are public).</p>",
        "id": 229583665,
        "sender_full_name": "Shnatsel",
        "timestamp": 1615337517
    },
    {
        "content": "<p>More resources here: <a href=\"https://cve.mitre.org/about/documents.html#cna_onboarding\">https://cve.mitre.org/about/documents.html#cna_onboarding</a></p>",
        "id": 229583741,
        "sender_full_name": "Shnatsel",
        "timestamp": 1615337546
    },
    {
        "content": "<p>I found that this might be one avenue: <a href=\"https://iwantacve.org/\">https://iwantacve.org/</a></p>",
        "id": 229648006,
        "sender_full_name": "oliver",
        "timestamp": 1615379277
    },
    {
        "content": "<p><a href=\"https://iwantacve.org/\">https://iwantacve.org/</a> is not really suitable for bulk submissions, and their turnaround time is rather large (~weeks).</p>",
        "id": 229651324,
        "sender_full_name": "Shnatsel",
        "timestamp": 1615380689
    },
    {
        "content": "<p>what is the current turnaround time for comparison?</p>",
        "id": 229657614,
        "sender_full_name": "oliver",
        "timestamp": 1615382980
    },
    {
        "content": "<p>^^ with the legacy CVE service</p>",
        "id": 229658139,
        "sender_full_name": "oliver",
        "timestamp": 1615383142
    },
    {
        "content": "<p>0-48 hours has been roughly my experience with MITRE.</p>",
        "id": 229658219,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1615383186
    },
    {
        "content": "<p>With maybe 3-6 being the median.</p>",
        "id": 229658283,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1615383199
    },
    {
        "content": "<p>is there anything else, other than stonewalling from mitre, causing rustsec to hesitate in using CVEs?</p>",
        "id": 229658508,
        "sender_full_name": "oliver",
        "timestamp": 1615383291
    },
    {
        "content": "<p>I don't know if other feel this way, but to me issuing RUSTSEC advisories ATM is very easy as a maintaining. I review a PR, I click merge, its all automated. Unless there's a similarly automated way to acquire CVEs, I'm disinclined to do it as a matter of policy.</p>",
        "id": 229658841,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1615383403
    },
    {
        "content": "<p>do we know who is consuming rustsec advisories?</p>",
        "id": 229658973,
        "sender_full_name": "oliver",
        "timestamp": 1615383453
    },
    {
        "content": "<p>the systems I'm familiar with are engineered to consume CVEs</p>",
        "id": 229659126,
        "sender_full_name": "oliver",
        "timestamp": 1615383499
    },
    {
        "content": "<p><code>cargo audit</code> consumes rustsec advisories.</p>",
        "id": 229659713,
        "sender_full_name": "bjorn3",
        "timestamp": 1615383710
    },
    {
        "content": "<p>There is a great deal of processes already existing around CVEs. For example, security teams of Linux distributions monitor CVEs almost exclusively, and have the time for very little other work.</p>",
        "id": 229659714,
        "sender_full_name": "Shnatsel",
        "timestamp": 1615383711
    },
    {
        "content": "<p>A requirement that we do not currently meet is \"There must be a terms of service document\", but I think that's it. If we can automate CVE assignment as well, I don't see any reason not to do it. I think CVE is just JSON in git nowadays anyway.</p>",
        "id": 229659982,
        "sender_full_name": "Shnatsel",
        "timestamp": 1615383789
    },
    {
        "content": "<p>if not DWF literally is just this</p>",
        "id": 229660031,
        "sender_full_name": "oliver",
        "timestamp": 1615383818
    },
    {
        "content": "<p>\"Have little time for other work\" is about the volume of vulnerabilities, not the number of feeds in my experience. All the linux distros have automation that pulls the CVE feeds into issue trackers or other tools, adding other feeds wouldn't be the hard part.</p>\n<p>Adding a bunch more vulnerabilities that they need to patch is the hard part.</p>\n<p>This is a problem much bigger in scope than RUSTSEC. A tiny fraction of fuzzing security issues from OSS-Fuzz ever get CVEs. When I brought this up on the oss-security mailing list, a lot of people were afraid that if we got CVEs for every buffer-overflow and UAF it'd basically break the system, there'd be too much insecurity. Which is of course already true.</p>",
        "id": 229660174,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1615383855
    },
    {
        "content": "<p>I guess what I'm saying is that if someone has an idea of how to get CVEs (or DWF, or any other ID) in a way that won't make life harder for the folks maintaining RUSTSEC, I'm in favor. But I'm not super motivated by this.</p>",
        "id": 229660416,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1615383959
    },
    {
        "content": "<p><a href=\"https://security.googleblog.com/2021/02/launching-osv-better-vulnerability.html\">https://security.googleblog.com/2021/02/launching-osv-better-vulnerability.html</a> is another related thing, attempting to aggregate across multiple data sources</p>",
        "id": 229660546,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1615383983
    },
    {
        "content": "<p>Hmm, we could partner with OSV relatively easily. We already track all the version data precisely, after all.</p>",
        "id": 229661289,
        "sender_full_name": "Shnatsel",
        "timestamp": 1615384233
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127617\">Shnatsel</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/CVE.20assignment.20by.20RustSec/near/229659714\">said</a>:</p>\n<blockquote>\n<p>There is a great deal of processes already existing around CVEs. For example, security teams of Linux distributions monitor CVEs almost exclusively, and have the time for very little other work.</p>\n</blockquote>\n<p>I think an issue currently is distros are packaging rust crates with known security vulns but since these aren't CVE formatted [and therefore not consumed by automated systems] the vulns aren't being tracked against the packages</p>",
        "id": 229662073,
        "sender_full_name": "oliver",
        "timestamp": 1615384477
    },
    {
        "content": "<p>CVEs are not really consumed by automated systems regardless. They are not sufficiently structured to be machine-readable in the sense that would be useful for Linux distros. And the problem is actually even deeper than that because of Rust's static linking...</p>",
        "id": 229663884,
        "sender_full_name": "Shnatsel",
        "timestamp": 1615385026
    },
    {
        "content": "<p>That said, I recognize that while CVE alone will not fix all the issues, it would probably still be an improvement.</p>",
        "id": 229663895,
        "sender_full_name": "Shnatsel",
        "timestamp": 1615385031
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281739\">@oliver</span> the unfortunate reality is that RustSec maintainers are volunteers and have their hands full already. It's hard to take on another project like CVE bridging even though it's clear that it would be beneficial.<br>\nHowever, there are things that could be done without depending on the availability of RustSec maintainers. For example, if someone could prototype exporting to CVE (e.g. using our Github action that updates <a href=\"http://rustsec.org\">rustsec.org</a> as a starting point), that would bring CVE assignment much closer to reality.</p>",
        "id": 229664970,
        "sender_full_name": "Shnatsel",
        "timestamp": 1615385378
    },
    {
        "content": "<p>By the way, I've been tackling the static linking problem in <a href=\"https://github.com/Shnatsel/rust-audit\">https://github.com/Shnatsel/rust-audit</a>. It's usable, what it needs is coordination with Cargo team to uplift this into Cargo nightly</p>",
        "id": 229665767,
        "sender_full_name": "Shnatsel",
        "timestamp": 1615385613
    },
    {
        "content": "<p>I'm not familiar with the static linking problem</p>",
        "id": 229666335,
        "sender_full_name": "oliver",
        "timestamp": 1615385770
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281739\">oliver</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/CVE.20assignment.20by.20RustSec/near/229662073\">said</a>:</p>\n<blockquote>\n<p>I think an issue currently is distros are packaging rust crates with known security vulns but since these aren't CVE formatted [and therefore not consumed by automated systems] the vulns aren't being tracked against the packages</p>\n</blockquote>\n<p>I wonder if you can point me to real-world examples of this? E.g. packages being vulnerable to this day, or packages being only updated after a CVE was assigned (RustSec vulns tend to get CVEs sporadically)?</p>",
        "id": 229666452,
        "sender_full_name": "Shnatsel",
        "timestamp": 1615385800
    },
    {
        "content": "<p><a href=\"https://alioth-lists.debian.net/pipermail/pkg-rust-maintainers/2021-March/015287.html\">https://alioth-lists.debian.net/pipermail/pkg-rust-maintainers/2021-March/015287.html</a></p>",
        "id": 229666866,
        "sender_full_name": "oliver",
        "timestamp": 1615385926
    },
    {
        "content": "<p>TL;DR of static linking problem: on Linux usually a single copy of every library is present as a separate file. They are linked together to run a program at runtime.<br>\nRust links all the libraries into the final executable at compile time; if there is a crate <code>foo</code> that several binaries use, every binary has a copy of crate <code>foo</code> in it. If the crate <code>foo</code> has a vulnerability, in Rust you need to recompile every binary depending on <code>foo</code>, while in proper C-on-Linux you only have to update one file and your entire system is patched.</p>",
        "id": 229667030,
        "sender_full_name": "Shnatsel",
        "timestamp": 1615385982
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281739\">oliver</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/CVE.20assignment.20by.20RustSec/near/229666866\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://alioth-lists.debian.net/pipermail/pkg-rust-maintainers/2021-March/015287.html\">https://alioth-lists.debian.net/pipermail/pkg-rust-maintainers/2021-March/015287.html</a></p>\n</blockquote>\n<p>This is more of an example of Debian being slow rather than necessity of CVEs... The RustSec disclosure was on the 8th of January, CVE was published on the 22nd of January, and the fix was published in Debian just yesterday.</p>",
        "id": 229667718,
        "sender_full_name": "Shnatsel",
        "timestamp": 1615386186
    },
    {
        "content": "<p>14 days to CVE and another 46 days till the patch shipped... yikes</p>",
        "id": 229668460,
        "sender_full_name": "Shnatsel",
        "timestamp": 1615386407
    },
    {
        "content": "<p>Debian maintainers are volunteers and have their hands full already, CVE bridging is currently the method for assigning known vulns to existing packaged crates</p>",
        "id": 229668568,
        "sender_full_name": "oliver",
        "timestamp": 1615386446
    },
    {
        "content": "<p>Yeah that's a recurring problem <span aria-label=\"stuck out tongue closed eyes\" class=\"emoji emoji-1f61d\" role=\"img\" title=\"stuck out tongue closed eyes\">:stuck_out_tongue_closed_eyes:</span></p>",
        "id": 229668625,
        "sender_full_name": "Shnatsel",
        "timestamp": 1615386471
    },
    {
        "content": "<p>Right, this is proof that just getting the CVEs assigned doesn't fix things. There's too many volunteers needed to do too much work.</p>\n<p>We need fewer vulnerabilities to relieve the burden on folks, and we need better automation to support folks.</p>",
        "id": 229668838,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1615386537
    },
    {
        "content": "<p>OSV appears to have a far more structured approach to vulnerability tracking. Here's their data schema: <a href=\"https://osv.dev/docs/#tag/vulnerability_schema\">https://osv.dev/docs/#tag/vulnerability_schema</a></p>",
        "id": 229669522,
        "sender_full_name": "Shnatsel",
        "timestamp": 1615386736
    },
    {
        "content": "<p>I've reached out to OSV: <a href=\"https://github.com/google/osv/issues/55#issuecomment-795538232\">https://github.com/google/osv/issues/55#issuecomment-795538232</a></p>",
        "id": 229673040,
        "sender_full_name": "Shnatsel",
        "timestamp": 1615387835
    },
    {
        "content": "<p>But this is a Google project and I'm currently employed by that company, so I may be biased here.</p>",
        "id": 229678351,
        "sender_full_name": "Shnatsel",
        "timestamp": 1615389450
    },
    {
        "content": "<p><strong>To sum up:</strong> CVEs are not going to solve all the problems, but they are an improvement. If there is a way for RustSec to assign CVEs without introducing extra burden for the maintainers, it sounds a good idea to do so, but the current maintainers don't have the bandwidth to develop it from scratch.<br>\nIf anyone wants to help make it happen, a good starting point is prototyping a Github action that exports data in CVE-compatible format and assigns an ID based on our <a href=\"https://github.com/RustSec/advisory-db/tree/main/.github/workflows\">existing actions</a>.</p>",
        "id": 229681172,
        "sender_full_name": "Shnatsel",
        "timestamp": 1615390217
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281739\">@oliver</span> I know Kurt Seifried going back to the '90s and tried to get involved in DWF having gotten a bunch of CVE assignments through him</p>",
        "id": 229734570,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1615407075
    },
    {
        "content": "<p>I applied to DWF on behalf of RustSec in 2017</p>",
        "id": 229734603,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1615407086
    },
    {
        "content": "<p>never heard back and in general he went incommunicado for awhile it seems</p>",
        "id": 229734645,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1615407099
    },
    {
        "content": "<p>(not just me, other people reported the same thing)</p>",
        "id": 229734674,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1615407108
    },
    {
        "content": "<p>but if they're trying to reboot DWF again that sounds interesting</p>",
        "id": 229734705,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1615407116
    },
    {
        "content": "<p>re:  <a href=\"https://iwantacve.org/\">https://iwantacve.org/</a> see <a href=\"https://github.com/RustSec/advisory-db/issues/20\">https://github.com/RustSec/advisory-db/issues/20</a> and some people have succeeded in getting CVEs for RUSTSEC vulns that way</p>",
        "id": 229734911,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1615407181
    },
    {
        "content": "<p>aah, previously with DWF I did get as far as \"DWF/CVE - Acceptance of MITRE Terms\"</p>",
        "id": 229735043,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1615407222
    },
    {
        "content": "<p>but didn't hear back after that</p>",
        "id": 229735052,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1615407226
    },
    {
        "content": "<p>I was attempting to apply for a block of DWF addresses</p>",
        "id": 229735402,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1615407338
    },
    {
        "content": "<p>as it were, it seems like there are people who do routinely file CVEs for all RUSTSEC vulns but I'm still unclear who they are and it'd be great to close the loop with them</p>",
        "id": 229735696,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1615407427
    },
    {
        "content": "<p>you can find DWF in the original 2016 (non-accepted) RFC that RustSec grew out of. It was the original plan, it just didn't end up working out: <a href=\"https://github.com/rust-lang/rfcs/pull/1752\">https://github.com/rust-lang/rfcs/pull/1752</a></p>",
        "id": 229736841,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1615407786
    },
    {
        "content": "<p>If we're applying for a range for our use anyway, it makes more sense to use CVE than DWF. The former is used far more widely.</p>",
        "id": 229737919,
        "sender_full_name": "Shnatsel",
        "timestamp": 1615408126
    },
    {
        "content": "<p>Back in 2016 or so, it looked like the CVE program was dying -- MITRE was getting very bad at issuing them.</p>",
        "id": 229738711,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1615408367
    },
    {
        "content": "<p>yeah like after oss-security@ stopped being the place to get OSS CVEs there was... massive confusion</p>",
        "id": 229738935,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1615408439
    },
    {
        "content": "<p>but if there's someone with a corporate CVE block filing CVEs on our behalf, I'm happy to continue with that, it'd just be nice to know who they are</p>",
        "id": 229739090,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1615408470
    },
    {
        "content": "<p>since that seems to be what's happening</p>",
        "id": 229739126,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1615408481
    },
    {
        "content": "<p>And coordinate with them to make it more timely.</p>",
        "id": 229739153,
        "sender_full_name": "Shnatsel",
        "timestamp": 1615408492
    },
    {
        "content": "<p>Hrmm, perhaps I should contact the CNA Coordination Team and ask about becoming a CNA: <a href=\"https://cve.mitre.org/cve/cna.html#become_a_cna\">https://cve.mitre.org/cve/cna.html#become_a_cna</a></p>",
        "id": 229913487,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1615491981
    },
    {
        "content": "<p>~2 years ago I tried to convince MITRE that there should be an API for requesting CVEs, it never went anywhere AFAIK.</p>",
        "id": 229913689,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1615492069
    },
    {
        "content": "<p>I filled out the contact form</p>",
        "id": 229914444,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1615492342
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127617\">Shnatsel</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/CVE.20assignment.20by.20RustSec/near/229673040\">said</a>:</p>\n<blockquote>\n<p>I've reached out to OSV: <a href=\"https://github.com/google/osv/issues/55#issuecomment-795538232\">https://github.com/google/osv/issues/55#issuecomment-795538232</a></p>\n</blockquote>\n<p>I have received a reply, and I'm now in touch with the OVF folks about making RustSec available in that format as well. I'll share the draft specification of the format as soon as it becomes available.</p>",
        "id": 230382758,
        "sender_full_name": "Shnatsel",
        "timestamp": 1615827754
    },
    {
        "content": "<p>CNA application sent to MITRE</p>",
        "id": 230383523,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1615828050
    },
    {
        "content": "<p>Do I recall correctly that CVE version specification is entirely free-form? We have a rather complex version specification that is friendly towards reporters, since it's as easy to fill out as <code>Cargo.toml</code>, but it requires rather complex resolution logic, which even the <code>rustsec</code> crate is not handling entirely correctly: <a href=\"https://github.com/RustSec/rustsec-crate/issues/218\">https://github.com/RustSec/rustsec-crate/issues/218</a><br>\nOVF early draft just has <code>(start, end)</code> version ranges, which are far easier to process than our complex rules. I wonder if we should translate the version requirements to that representation before performing the actual maching; this would also allow sane export to OVF and CVE.</p>",
        "id": 230385524,
        "sender_full_name": "Shnatsel",
        "timestamp": 1615828788
    },
    {
        "content": "<p>sounds good to me</p>",
        "id": 230411590,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1615839525
    },
    {
        "content": "<p>mind opening an issue or leaving a comment on <a href=\"https://github.com/rust-lang/rust/issues/218\">#218</a>?</p>",
        "id": 230411623,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1615839535
    },
    {
        "content": "<p><del>I'll copy-paste this to <a href=\"https://github.com/rust-lang/rust/issues/218\">#218</a></del></p>",
        "id": 230416461,
        "sender_full_name": "Shnatsel",
        "timestamp": 1615841574
    },
    {
        "content": "<p>Actually, you know what, I'll wait until the first published OVF draft before I do that</p>",
        "id": 230416726,
        "sender_full_name": "Shnatsel",
        "timestamp": 1615841699
    },
    {
        "content": "<p>Oooh, I got a reply from MITRE about CVE onboarding!</p>",
        "id": 230439929,
        "sender_full_name": "Shnatsel",
        "timestamp": 1615852654
    },
    {
        "content": "<p>yup!</p>",
        "id": 230440471,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1615852960
    },
    {
        "content": "<p>FYI, moved the meeting back 2 weeks so we can have some more discussion with the Core Team about whether or not core vulns should be in-scope or out-of-scope for our CNA</p>",
        "id": 231338431,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1616429570
    },
    {
        "content": "<p>re: OVF version ranges, the current doc seems to specify SemVer comparisons for version matching</p>",
        "id": 232180477,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1616952404
    },
    {
        "content": "<p>I mentioned the prerelease matching problems we have on the doc</p>",
        "id": 232180504,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1616952456
    },
    {
        "content": "<p>as far as I can tell, the only resolution suggested for that in the upstream issue on <code>semver</code> is making our own version requirement type and syntax and rules</p>",
        "id": 232180566,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1616952519
    },
    {
        "content": "<p>I've mentioned them too in the internal doc. We have more complicated selectors than what OVF allows - OVF only has <code>[start, end)</code> ranges while we allow complex semver-based rules like what you can write in Cargo.<br>\nI think we'll need to lower our selectors to ranges to be able to export to OVF. Our ranges can be either inclusive or exclusive of the versions specified, but that can be worked around by incrementing/decrementing the version (which is possible to do even in presence of pre-releases).<br>\nOnce we have the version requirements lowered to ranges, rolling our own matching based on them that avoids the issues with pre-releases is very easy.</p>",
        "id": 232195288,
        "sender_full_name": "Shnatsel",
        "timestamp": 1616967689
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> here's what the public doc specifies:</p>",
        "id": 232294647,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1617034772
    },
    {
        "content": "<blockquote>\n<p><code>SEMVER</code>: The versions <code>introduced</code> and <code>fixed</code> are semantic versions as defined by SemVer 2.0.0, with no leading “v” prefix. The relation u &lt; v denotes the precedence order defined in [section 11 of SemVer 2.0]. Ranges listed with type <code>SEMVER</code> should not overlap: since SEMVER is a strict linear ordering, it is always possible to simplify to non-overlapping ranges.</p>\n</blockquote>",
        "id": 232294929,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1617034904
    },
    {
        "content": "<p>SemVer versions, according to the <code>semver</code> crate, do not have a strict linear ordering</p>",
        "id": 232295056,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1617034968
    },
    {
        "content": "<p>maybe it's misinterpreting the spec? I'm not sure, I haven't tried to language lawyer the spec</p>",
        "id": 232295086,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1617034985
    },
    {
        "content": "<p>if you use a <code>semver</code> selector, a prerelease version is considered to match a final release</p>",
        "id": 232295234,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1617035055
    },
    {
        "content": "<p>if you try to bound a version range starting at <code>1.0.0</code>, it will include all <code>1.0.0-pre*</code> releases too</p>",
        "id": 232295426,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1617035144
    },
    {
        "content": "<p>and this is the source of the ongoing problems with prereleases</p>",
        "id": 232295543,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1617035173
    },
    {
        "content": "<p>I agree we should define simpler version requirements</p>",
        "id": 232295708,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1617035261
    },
    {
        "content": "<p>hopefully we can do it in a backwards compatible way</p>",
        "id": 232295813,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1617035294
    },
    {
        "content": "<p>but for this same reason, whenever I use prereleases in Cargo, I <em>always</em> pin to <code>=1.0.0-pre.1</code> instead of just <code>1.0.0-pre.1</code></p>",
        "id": 232295945,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1617035366
    },
    {
        "content": "<p>because if <code>1.0.0</code> is released, and introduces any breaking changes from <code>1.0.0-pre.1</code>, all users with <code>^1.0.0-pre.1</code> will be auto-updated to <code>1.0.0</code> and their builds will break</p>",
        "id": 232296081,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1617035408
    },
    {
        "content": "<p>also <a href=\"https://deps.rs\">https://deps.rs</a> is trying to use this data too and misflagging tons of things as vulnerable when they're not</p>",
        "id": 232296196,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1617035460
    },
    {
        "content": "<p>anyway, this is all an issue with <code>VersionReq</code>, not <code>Version</code> itself. So we can potentially build this... I did it once before</p>",
        "id": 232297887,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1617036257
    },
    {
        "content": "<p>then I had to rip it all out to upgrade <code>semver</code></p>",
        "id": 232297914,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1617036273
    },
    {
        "content": "<p>but then there's the much more difficult question of how to migrate</p>",
        "id": 232298000,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1617036309
    },
    {
        "content": "<p>what I did before was compatible with existing <code>VersionReq</code> expressions</p>",
        "id": 232298101,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1617036349
    },
    {
        "content": "<p>at this point I just want to ignore prerelease dependencies temporarily because the matching logic is broken</p>",
        "id": 232298526,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1617036510
    },
    {
        "content": "<p>if all we're generating is false positives, that isn't helpful</p>",
        "id": 232298575,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1617036529
    },
    {
        "content": "<p>curious what version reqs we might have which would be incompatible with the OVF semantics</p>",
        "id": 232298827,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1617036616
    },
    {
        "content": "<p>and then there's the fun part of writing a linter to ensure there's no overlap in the ranges</p>",
        "id": 232298865,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1617036632
    },
    {
        "content": "<p>this seems like the sort of thorny problem that needs a planning issue along with a potential migration path</p>",
        "id": 232299443,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1617036860
    },
    {
        "content": "<p>(I'm also, in general, so tired of dealing with it)</p>",
        "id": 232299498,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1617036889
    },
    {
        "content": "<p>tl;dr: I think we can migrate to something like OVF's rules, but it's going to be a lot of work, not only to implement, but to migrate all of the existing vulnerabilities to be compatible</p>",
        "id": 232308521,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1617040320
    },
    {
        "content": "<p>and the more I think about it, the more it seems like it will just need a completely new schema for versions</p>",
        "id": 232309645,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1617040795
    },
    {
        "content": "<p>unless anyone can think of a \"clever\" solution, I think we'd need to add the new scheme side-by-side with the old scheme, wait until all clients have updated, and then write some sort of migration tool and do a hard cutover</p>",
        "id": 232310721,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1617041229
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132721\">@Tony Arcieri</span> matching and ordering are two different things for SemVer 2.0, and the ordering rules are far simpler.  The spec calls it \"precedence\" and I believe the <code>semver</code> crate already implements it according to the spec: <a href=\"https://semver.org/#spec-item-11\">https://semver.org/#spec-item-11</a></p>",
        "id": 232364172,
        "sender_full_name": "Shnatsel",
        "timestamp": 1617071242
    },
    {
        "content": "<p>Our problem was that using the semver versions requirement such as \"1.0\" to specify a range was behaving in a weird way, but if we're lowering those requirements to ranges anyway we don't have to use the semver crate matching logic, we can  just use the ranges we generated</p>",
        "id": 232364273,
        "sender_full_name": "Shnatsel",
        "timestamp": 1617071344
    },
    {
        "content": "<p>the problem is we have a living system spec'd in terms of <code>VersionReq</code>s</p>",
        "id": 232424231,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1617110645
    },
    {
        "content": "<p>we'd need to effectively parse those and \"zip\" them together</p>",
        "id": 232424321,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1617110693
    },
    {
        "content": "<p><code>versions.patched</code> and <code>versions.unaffected</code>, that is</p>",
        "id": 232424444,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1617110753
    },
    {
        "content": "<p>also transforming the complex <code>VersionReq</code> expressions into those exclusive range expressions</p>",
        "id": 232424561,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1617110789
    },
    {
        "content": "<p>then lint the whole thing to ensure there are no overlapping ranges</p>",
        "id": 232424579,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1617110800
    },
    {
        "content": "<p>and then go through any advisories that use overly complex rules which whatever tool we write to do ^^^ fails to work on</p>",
        "id": 232424696,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1617110844
    },
    {
        "content": "<p>I'm not saying it isn't possible. I'm saying that's gonna be a ton of work</p>",
        "id": 232424744,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1617110870
    },
    {
        "content": "<p>I have already braced myself for writing that logic, but if you feel it'd be better to switch to the OVF-style system, I can't argue with that</p>",
        "id": 232601353,
        "sender_full_name": "Shnatsel",
        "timestamp": 1617201033
    },
    {
        "content": "<p>I think either way we need to write that logic, to implement OVF and/or automate a migration, unless someone is really keen on doing it by hand</p>",
        "id": 232626763,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1617209802
    },
    {
        "content": "<p>but overall I think it would make sense to migrate</p>",
        "id": 232626804,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1617209825
    },
    {
        "content": "<p>might be of interest: <a href=\"https://lwn.net/SubscriberLink/851849/f8cf36ef115ea090/\">https://lwn.net/SubscriberLink/851849/f8cf36ef115ea090/</a></p>",
        "id": 233633256,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1617878908
    },
    {
        "content": "<p>yeah someone mentioned that, and that's what brought up that MITRE has a new like... awesome-seeming CNA process</p>",
        "id": 233758893,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1617934902
    },
    {
        "content": "<p>well I guess <code>semver</code> 1.0.0 has shipped, without addressing any of the issues with <code>VersionReq</code>. but it was already de facto 1.0 anyway due to use in <code>cargo</code> so c'est la vie</p>",
        "id": 240509732,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622139689
    },
    {
        "content": "<p>one of them seems like a bug in the SemVer spec, another in how <code>VersionReq</code> handles prereleases</p>",
        "id": 240509798,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622139719
    },
    {
        "content": "<p>re: the former, the SemVer spec seems pretty badly written</p>",
        "id": 240509876,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622139735
    },
    {
        "content": "<p>anyway, migrating away from <code>VersionReq</code> sounds like a great idea to me</p>",
        "id": 240509898,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622139749
    },
    {
        "content": "<p>I released <code>cargo-lock</code> v7.0.0 (might've gone 1.0 a bit early on that one) which uses <code>semver</code> v1.0.0</p>",
        "id": 240509992,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622139790
    },
    {
        "content": "<p>might impact your work there <span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span></p>",
        "id": 240510005,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622139796
    },
    {
        "content": "<p>SemVer crate 1.0 is actually good news for OSV export because they have exposed the fields that were previously private. I had to fork semver 0.11 to get to them, but it seems that in 1.0 it's no longer necessary.</p>",
        "id": 240511216,
        "sender_full_name": "Shnatsel",
        "timestamp": 1622140387
    },
    {
        "content": "<p>Also, proper handling of pre-releases will likely be a side effect of OSV export implementation.</p>",
        "id": 240511242,
        "sender_full_name": "Shnatsel",
        "timestamp": 1622140409
    },
    {
        "content": "<p>yeah, I've checked that version comparators look good. it's just the interpretation of <code>VersionReq</code> that's... weird</p>",
        "id": 240511628,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622140613
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=b74ac8bd1d75d4366c81d57d755c934e\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=b74ac8bd1d75d4366c81d57d755c934e</a></p>",
        "id": 240511978,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622140777
    },
    {
        "content": "<p><code>2.0.0-rc.0</code> and <code>^2.0.0-rc.0</code> are interpreted as: <code>&gt;=2.0.0-rc.0, &lt;3.0.0</code></p>",
        "id": 240512024,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622140802
    },
    {
        "content": "<p>per the SemVer spec I think that should be: <code>&gt;=2.0.0-rc.0, &lt;2.0.0</code></p>",
        "id": 240512195,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622140869
    },
    {
        "content": "<p>That seems to be distinct from that bug about pre-release handling that you've filed. Could you file another bug about this?</p>",
        "id": 240512463,
        "sender_full_name": "Shnatsel",
        "timestamp": 1622140989
    },
    {
        "content": "<p>Is there a reference implementation of the spec? If yes, then we can use differential fuzzing to find these discrepancies</p>",
        "id": 240512651,
        "sender_full_name": "Shnatsel",
        "timestamp": 1622141058
    },
    {
        "content": "<p>I did and it was closed: <a href=\"https://github.com/dtolnay/semver/issues/236#issuecomment-848257031\">https://github.com/dtolnay/semver/issues/236#issuecomment-848257031</a></p>\n<p>But again I feel <code>semver</code> has been de-facto 1.0.0 for years because of Cargo</p>",
        "id": 240512652,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622141060
    },
    {
        "content": "<p>I also wrote a rant about how the SemVer spec for prereleases is bad: <a href=\"https://github.com/dtolnay/semver/issues/172#issuecomment-848260770\">https://github.com/dtolnay/semver/issues/172#issuecomment-848260770</a></p>",
        "id": 240512752,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622141104
    },
    {
        "content": "<p>but I do agree the <code>semver</code> crate implements the spec correctly. it's just the spec is wrong</p>",
        "id": 240512785,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622141120
    },
    {
        "content": "<p>and as someone who implements specs a lot, c'est la vie</p>",
        "id": 240512795,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622141128
    },
    {
        "content": "<p>the spec seems to be discussing a sort of boundary condition between prereleases and the non-prerelease versions they're adjacent to</p>",
        "id": 240512899,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622141170
    },
    {
        "content": "<p>Yikes, that rant does ring true.</p>",
        "id": 240512923,
        "sender_full_name": "Shnatsel",
        "timestamp": 1622141184
    },
    {
        "content": "<p>but the way it's worded, that boundary condition seems to have unintended consequences for unrelated versions. it's almost this sort of \"banded\" incongruity where there are holes in the logic</p>",
        "id": 240512975,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622141212
    },
    {
        "content": "<p>anyway, I'm totally on board for migrating away from <code>VersionReq</code> <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 240513032,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622141238
    },
    {
        "content": "<p>So far I've been assuming that the TOML format will be unchanged, and just transforming those <code>VersionReq</code>s into <code>[start; end)</code> ranges that are trivial to match against following semver precedence rules, which seem to be simpler and not quite as messed up as selectors in terms of pre-release handling</p>",
        "id": 240513232,
        "sender_full_name": "Shnatsel",
        "timestamp": 1622141331
    },
    {
        "content": "<p>that's cool</p>",
        "id": 240513256,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622141344
    },
    {
        "content": "<p>I think we can eventually migrate the TOML format</p>",
        "id": 240513274,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622141351
    },
    {
        "content": "<p>possibly as part of a \"1.0 stabilization\" of it</p>",
        "id": 240513297,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622141362
    },
    {
        "content": "<p>I thought we already shipped 1.0... <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 240513334,
        "sender_full_name": "Shnatsel",
        "timestamp": 1622141379
    },
    {
        "content": "<p>We can even use the <code>[start; end)</code> ranges internally for matching, which bypasses the problem with pre-releases</p>",
        "id": 240513371,
        "sender_full_name": "Shnatsel",
        "timestamp": 1622141396
    },
    {
        "content": "<p>as for as internal informal versions go, I'd call it \"V3\"</p>",
        "id": 240513374,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622141399
    },
    {
        "content": "<p>but uhh, I'd like to freeze the format spec and ship a v1.0 of the <code>rustsec</code> crate</p>",
        "id": 240513453,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622141419
    },
    {
        "content": "<p>The entire point of the <code>list-affected-versions</code> subcommand (<a href=\"https://github.com/RustSec/rustsec/pull/373\">https://github.com/RustSec/rustsec/pull/373</a>) is being able to change the matching logic and ensure I don't introduce any regressions when doing so</p>",
        "id": 240513587,
        "sender_full_name": "Shnatsel",
        "timestamp": 1622141478
    },
    {
        "content": "<p>yeah all of the previous format upgrades have been backwards compatible</p>",
        "id": 240513651,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622141514
    },
    {
        "content": "<p>up to a particular version</p>",
        "id": 240513667,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622141522
    },
    {
        "content": "<p>it's been ship a version that supports both the old and new format, wait 6 months - 1 year, then transition the database</p>",
        "id": 240513749,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622141543
    },
    {
        "content": "<p>but there are clients not using the <code>rustsec</code> crate</p>",
        "id": 240513767,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622141550
    },
    {
        "content": "<p>I am tempted to just use the OSV ranges for matching so that if there's a bug in OSV exported data we also see it in <code>cargo-audit</code> and there's only ever a single matching logic in play. But I'm not sure if I'm taking it too far here. There <em>is</em> an intermediate representation with ranges that can have each bound as either inclusive or exclusive and we could match on that instead of <code>[start; end)</code> OSV ranges if you prefer.</p>",
        "id": 240513943,
        "sender_full_name": "Shnatsel",
        "timestamp": 1622141630
    },
    {
        "content": "<p>I defer that decision to you because I'm paid to add OSV support and I might have a bit of conflict of interest here.</p>",
        "id": 240514241,
        "sender_full_name": "Shnatsel",
        "timestamp": 1622141749
    },
    {
        "content": "<p>I think we should get to OSV ranges internally, and then migrate the TOML format to suit</p>",
        "id": 240525477,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622146765
    },
    {
        "content": "<p>on the CVE topic; github does give out CVEs for open source projects. I know this is limited to code hosted on github, but it's something<br>\n<a href=\"https://docs.github.com/en/code-security/security-advisories/publishing-a-security-advisory#requesting-a-cve-identification-number\">https://docs.github.com/en/code-security/security-advisories/publishing-a-security-advisory#requesting-a-cve-identification-number</a></p>",
        "id": 241337108,
        "sender_full_name": "Darakian",
        "timestamp": 1622680833
    },
    {
        "content": "<p>We're aware of that. Some of this discussion came up because that's what the core team normally uses for CVE assignments and they were having some problems with that</p>",
        "id": 241337507,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622681300
    },
    {
        "content": "<p>Ah, apologies for the redundancy. What issues are you running into?</p>",
        "id": 241339299,
        "sender_full_name": "Darakian",
        "timestamp": 1622683322
    },
    {
        "content": "<p>I'm merely relaying the concerns of others here</p>",
        "id": 241339930,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622684045
    },
    {
        "content": "<p>for our purposes, we really need on-demand ID assgnment, or that would really complicate our workflow, which is already somewhat complicated and difficult to maintain</p>",
        "id": 241340710,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622685043
    },
    {
        "content": "<p>the use of a distinguished identifier namespace is because of a long history of problems with integrating with external databases in the RubySec project, whcih is a big inspiration for the general shape of this project</p>",
        "id": 241340746,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622685108
    },
    {
        "content": "<p>RubySec got along for quite some time wiht oss-security@-assigned CVEs</p>",
        "id": 241340793,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622685125
    },
    {
        "content": "<p>then that went away</p>",
        "id": 241340795,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622685128
    },
    {
        "content": "<p>and we tried to migrate to OSSEC</p>",
        "id": 241340797,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622685134
    },
    {
        "content": "<p>and then that went away</p>",
        "id": 241340798,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622685137
    },
    {
        "content": "<p>RustSec tried to use DWF in ~2017</p>",
        "id": 241340814,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622685155
    },
    {
        "content": "<p>and that went away</p>",
        "id": 241340815,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622685157
    },
    {
        "content": "<p>so there's something of a sordid history here</p>",
        "id": 241340832,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622685186
    },
    {
        "content": "<p>I think it'd be great if RustSec could migrate to CVEs</p>",
        "id": 241340843,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622685202
    },
    {
        "content": "<p>but I am very wary of building on quicksand, as that's been a gotcha for me many, many, many times in the past</p>",
        "id": 241340860,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622685232
    },
    {
        "content": "<p>if Rust Core is expressing concerns with the GitHub CVE assignment process, well, color me wary</p>",
        "id": 241340910,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622685264
    },
    {
        "content": "<p>well <span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span>, you're officially in charge of everything relating to advisory version matching</p>",
        "id": 241348769,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622696552
    },
    {
        "content": "<p>I'm burnt out</p>",
        "id": 241348774,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622696557
    },
    {
        "content": "<p>I want nothing to do with the <code>semver</code> crate ever again</p>",
        "id": 241348786,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622696581
    },
    {
        "content": "<p>this has been a multi-year battle of me trying to get anyone to even recognize there was a problem, only to have the problem, reported by others who agreed with me, unceremoniously closed and the thread locked, and my opinion pronounced wrong</p>",
        "id": 241348967,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622696811
    },
    {
        "content": "<p>perhaps I should just stop doing RustSec</p>",
        "id": 241348980,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622696829
    },
    {
        "content": "<p>things that induce burnout: dozens of issues, ill-content users, and various people complaining that things are broken, and I agree. and I try to take things upstream, only to be gaslit and told that the spec makes sense, I am wrong, issue locked, no further discussion.</p>",
        "id": 241349111,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622697014
    },
    {
        "content": "<p>this is obviously not working</p>",
        "id": 241349115,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622697024
    },
    {
        "content": "<p>perhaps I should quit</p>",
        "id": 241349118,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622697035
    },
    {
        "content": "<p>Have you brought up the versionreq issue with <a href=\"https://github.com/semver/semver\">https://github.com/semver/semver</a> ? dtolnay mentioned in that issue you linked that the crate is performing according to the spec, so it seems like the next place to go would be to try changing the spec and see what provisions can be made for the security / patching use case</p>",
        "id": 241349578,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622697646
    },
    {
        "content": "<p>hm, i think its plausible that the behavior for version resolution and for security advisory just are different enough that this doesn't align. that's to say, i kind of... think the spec's behavior makes sense for its use case.</p>",
        "id": 241349737,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1622697886
    },
    {
        "content": "<p>but i agree its probably worth it for someone to bring it up regardless (althouhg i can sympathize with running out of give-a-fucks about a particular issue)</p>",
        "id": 241349768,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1622697925
    },
    {
        "content": "<p>If one grants that \"security version ranges\" are not the same as \"semver version ranges\", then what can be done about the <code>cargo audit fix</code> problem mentioned <a href=\"https://github.com/dtolnay/semver/issues/172#issuecomment-699513786\">here</a>? Does cargo need to support some alternative version range syntax for security ranges?</p>",
        "id": 241349950,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622698156
    },
    {
        "content": "<p>Like what even is the desired end state?</p>",
        "id": 241349958,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622698187
    },
    {
        "content": "<p>Apparently the <code>Ord</code> instance for <code>Version</code> is different from <code>VersionReq</code>, but I don't know if <code>Version</code> ranges can be explicitly specified in a cargo.toml file</p>",
        "id": 241350079,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622698327
    },
    {
        "content": "<p><a href=\"https://github.com/dtolnay/semver/issues/172\">https://github.com/dtolnay/semver/issues/172</a></p>",
        "id": 241350091,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622698368
    },
    {
        "content": "<p><a href=\"https://github.com/dtolnay/semver/issues/236\">https://github.com/dtolnay/semver/issues/236</a></p>",
        "id": 241350102,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622698392
    },
    {
        "content": "<p>I don't know what to do from here but I kind of want to \"retire\" from RustSec</p>",
        "id": 241350119,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622698442
    },
    {
        "content": "<p>it's too much to deal with downstream users complaining about a behavior in a dependency whose upstream mainstainers not only insist isn't a bug but lock the threads and suggest that if I even think it's a bug I'm the problem</p>",
        "id": 241350197,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622698504
    },
    {
        "content": "<p>I have enough else going on in my life I just can't deal with this</p>",
        "id": 241350212,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622698535
    },
    {
        "content": "<p>It seems the issue here is that semver ranges are being used for two things (security/patching and API versioning) and they have different requirements. Rather than trying to change from one to the other, what are the options for supporting both?</p>",
        "id": 241350287,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622698594
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> is trying to rewrite how version comparisons are handled</p>",
        "id": 241350306,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622698628
    },
    {
        "content": "<p>I am so burned out on this I can't even describe it</p>",
        "id": 241350313,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622698639
    },
    {
        "content": "<p>but yeah I think I'm done</p>",
        "id": 241350329,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622698679
    },
    {
        "content": "<p>I've just been trying to relate the problems of downstream users for 5 years</p>",
        "id": 241350379,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622698714
    },
    {
        "content": "<p>discover it's apparently brokenness in the spec, finally, after all that time, after so many open issues and people complaining</p>",
        "id": 241350395,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622698735
    },
    {
        "content": "<p>I think I've finally cracked the case</p>",
        "id": 241350398,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622698741
    },
    {
        "content": "<p>closed</p>",
        "id": 241350401,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622698743
    },
    {
        "content": "<p>locked</p>",
        "id": 241350402,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622698744
    },
    {
        "content": "<p>you're crazy</p>",
        "id": 241350406,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622698747
    },
    {
        "content": "<p>Sorry for bringing up a sore subject, I know what it's like to fight the good fight and get cut down at the end</p>",
        "id": 241350407,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622698748
    },
    {
        "content": "<p>I'm just like... done</p>",
        "id": 241350432,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622698794
    },
    {
        "content": "<p>I'm tired of this</p>",
        "id": 241350436,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622698797
    },
    {
        "content": "<p>as a rough estimate I've spent hundreds of hours on this</p>",
        "id": 241350512,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622698867
    },
    {
        "content": "<p>no more</p>",
        "id": 241350514,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622698868
    },
    {
        "content": "<p>I wrote workarounds and deleted them because <code>semver</code> crate upgrades broke the workarounds and I wanted to upgrade</p>",
        "id": 241350530,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622698921
    },
    {
        "content": "<p>now it's 1.0 and the brokenness is baked in and unfixable and I am told I have no place to even complain and the thread is locked</p>",
        "id": 241350580,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622698958
    },
    {
        "content": "<p>and to add insult to injury</p>",
        "id": 241350601,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622699013
    },
    {
        "content": "<blockquote>\n<p>especially not about deliberate and sensible features of the spec.</p>\n</blockquote>",
        "id": 241350606,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622699037
    },
    {
        "content": "<p>logging out of this Zulip</p>",
        "id": 241350648,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622699060
    },
    {
        "content": "<p>bye</p>",
        "id": 241350650,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1622699062
    },
    {
        "content": "<p>Started an internals discussion here: <a href=\"https://internals.rust-lang.org/t/changing-cargo-semver-compatibility-for-pre-releases/14820\">https://internals.rust-lang.org/t/changing-cargo-semver-compatibility-for-pre-releases/14820</a></p>",
        "id": 241361357,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1622708840
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132721\">@Tony Arcieri</span> sure, I'll take care of fixing version matching. The direction looks is promising so far, and should be possible with <code>semver</code> 1.0 structures only, not methods, so they won't even be able to break it.</p>",
        "id": 241370285,
        "sender_full_name": "Shnatsel",
        "timestamp": 1622714653
    },
    {
        "content": "<p>But it's possible that Cargo-like version selection and RustSec version matching are sufficiently different use cases that they really do require different logic.</p>",
        "id": 241370396,
        "sender_full_name": "Shnatsel",
        "timestamp": 1622714736
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132721\">@Tony Arcieri</span> feel free to take a break from RustSec</p>",
        "id": 241370583,
        "sender_full_name": "Shnatsel",
        "timestamp": 1622714853
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132721\">@Tony Arcieri</span> I've fixed pre-release handling <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> <br>\nIt's already published in the OSV branch. It does not handle all possible selectors, but it does handle everything actually used in RustSec database. The results are identical to the old logic, sans the handling of pre-releases.<br>\nThere is an added requirement that the ranges must not overlap, but that's a good thing - it made me find some incorrectly defined version specs in the current DB.</p>",
        "id": 241575576,
        "sender_full_name": "Shnatsel",
        "timestamp": 1622831377
    },
    {
        "content": "<p>Fixes for overlaps are up, I'd appreciate if someone could double-check that they make sense: <a href=\"https://github.com/RustSec/advisory-db/pull/930\">https://github.com/RustSec/advisory-db/pull/930</a></p>",
        "id": 241575664,
        "sender_full_name": "Shnatsel",
        "timestamp": 1622831415
    },
    {
        "content": "<p>Merged, thanks to Alex for reviewing</p>",
        "id": 241595217,
        "sender_full_name": "Shnatsel",
        "timestamp": 1622842007
    },
    {
        "content": "<p>No problem!</p>",
        "id": 241595551,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1622842296
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> nice. seems like <a href=\"http://deps.rs\">deps.rs</a> could also benefit from that sort of prerelease handling...</p>",
        "id": 241847564,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1623103471
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/rUOrMMnOCWegl5E0BYALuBNx/Screen-Shot-2021-06-07-at-3.05.52-PM.png\">Screen-Shot-2021-06-07-at-3.05.52-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/rUOrMMnOCWegl5E0BYALuBNx/Screen-Shot-2021-06-07-at-3.05.52-PM.png\" title=\"Screen-Shot-2021-06-07-at-3.05.52-PM.png\"><img src=\"/user_uploads/4715/rUOrMMnOCWegl5E0BYALuBNx/Screen-Shot-2021-06-07-at-3.05.52-PM.png\"></a></div>",
        "id": 241847763,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1623103566
    },
    {
        "content": "<p>^^^ same problem</p>",
        "id": 241847779,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1623103576
    },
    {
        "content": "<p>Huh. Did they use version selectors internally or something? I believe the precedence rules alone, without selectors, are sufficient for this use case. And <code>Ord</code> (or was it <code>PartialOrd</code>?) implementation on <code>semver::Version</code> should implement the precedence rules from the semver spec.</p>",
        "id": 241847882,
        "sender_full_name": "Shnatsel",
        "timestamp": 1623103649
    },
    {
        "content": "<p>I'm also not confident that this problem has the same cause. It would be weird if <a href=\"http://deps.rs\">deps.rs</a> used selectors internally, it's more likely that they manually discard pre-release versions</p>",
        "id": 241847977,
        "sender_full_name": "Shnatsel",
        "timestamp": 1623103707
    },
    {
        "content": "<p>I'd check the code but I'm all out of spoons after writing an article for most of the evening. Feedback is very welcome, by the way:<br>\n<a href=\"https://docs.google.com/document/d/1NoJLABjQOdTaGu9CmaosgfJeAxcFGdzCwCShJsDolaQ/edit\">https://docs.google.com/document/d/1NoJLABjQOdTaGu9CmaosgfJeAxcFGdzCwCShJsDolaQ/edit#</a></p>",
        "id": 241848070,
        "sender_full_name": "Shnatsel",
        "timestamp": 1623103794
    },
    {
        "content": "<p>they're also parsing a <code>VersionReq</code></p>",
        "id": 241849569,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1623104773
    },
    {
        "content": "<p>it's coming from a <code>Cargo.toml</code> after all</p>",
        "id": 241849576,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1623104779
    },
    {
        "content": "<p>at least in our case we can avoid that, but they can't</p>",
        "id": 241849601,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1623104798
    },
    {
        "content": "<p>the best they can do is provide their own <code>VersionReq</code>-alike parser which provides the matching rules they need</p>",
        "id": 241849654,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1623104845
    },
    {
        "content": "<p>...which sounds like what you wrote?</p>",
        "id": 241849678,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1623104861
    },
    {
        "content": "<p>Yeah that's pretty much what I wrote.</p>",
        "id": 241849997,
        "sender_full_name": "Shnatsel",
        "timestamp": 1623105097
    },
    {
        "content": "<p>not suggesting we try to extract that into a crate or anything. if anything I'd like to get away from <code>VersionReq</code> entirely, even at a syntactic level, and switch to something that looks more like OSV's ranges, but</p>",
        "id": 241850355,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1623105357
    },
    {
        "content": "<p>if there's an open issue for <a href=\"http://deps.rs\">deps.rs</a>, it might be worth pointing them at your implementation</p>",
        "id": 241850404,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1623105371
    },
    {
        "content": "<p>maybe they can do something similar</p>",
        "id": 241850406,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1623105375
    },
    {
        "content": "<p>It could be extracted, actually. Not the OSV ranges, but the ranges that can have both bounds as inclusive or exclusive. They are used only as an intermediate representation in rustsec crate right now.</p>",
        "id": 241850695,
        "sender_full_name": "Shnatsel",
        "timestamp": 1623105616
    },
    {
        "content": "<p>As of right now, the algorithm is somewhat simplified compared to the full-blown Cargo version selection spec, but it could be improved to cover the entire thing.</p>",
        "id": 241850785,
        "sender_full_name": "Shnatsel",
        "timestamp": 1623105704
    },
    {
        "content": "<p>I don't want to try to fix everything semver-related all at once, that's the road to burnout. I'll do one thing at a time.</p>",
        "id": 241853853,
        "sender_full_name": "Shnatsel",
        "timestamp": 1623108142
    },
    {
        "content": "<p>yeah, that's why I was suggesting just giving the <a href=\"http://deps.rs\">deps.rs</a> people breadcrumbs</p>",
        "id": 241854269,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1623108462
    },
    {
        "content": "<p>because we're not the only ones dealing with this... SemVer design flaw</p>",
        "id": 241854329,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1623108503
    },
    {
        "content": "<p>it was at least nice to see some sort of consensus that the interpretation of prereleases in Cargo.toml could be more restrictive</p>",
        "id": 241854516,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1623108634
    },
    {
        "content": "<p>HOLY VEHK MY OSV EXPORT CODE WORKED ON THE FIRST TRY</p>",
        "id": 241998119,
        "sender_full_name": "Shnatsel",
        "timestamp": 1623192939
    },
    {
        "content": "<p>Truly, if it compiles, it works. All hail this pile of newtypes</p>",
        "id": 241998207,
        "sender_full_name": "Shnatsel",
        "timestamp": 1623192964
    },
    {
        "content": "<p>The entire export operation takes 200ms end to end.</p>",
        "id": 241998237,
        "sender_full_name": "Shnatsel",
        "timestamp": 1623193012
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/td8z2c_rY99hvwsHRQjZPKAs/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/td8z2c_rY99hvwsHRQjZPKAs/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/td8z2c_rY99hvwsHRQjZPKAs/image.png\"></a></div>",
        "id": 242001758,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1623195980
    },
    {
        "content": "<p>Is that yours? Now I want one</p>",
        "id": 242003780,
        "sender_full_name": "Shnatsel",
        "timestamp": 1623197796
    },
    {
        "content": "<p>nah, just think they're funny, heh</p>",
        "id": 242006632,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1623200626
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132721\">@Tony Arcieri</span> do you think OSV addition and the change in matching logic should require an API break? I'm adding more validation on the range specification, so something that was previously accepted no longer will be. And there used to be a few nonsensical version specifications in the DB that eluded human review, so it would actually fail on older versions of the DB too.</p>",
        "id": 242391079,
        "sender_full_name": "Shnatsel",
        "timestamp": 1623438998
    },
    {
        "content": "<p>we don't really need to worry about older versions of the DB</p>",
        "id": 242391111,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1623439028
    },
    {
        "content": "<p>I'm asking because there is this minor API wart I'm introducing to avoid an API break. Minor as in: <code>Versions</code> newtype has public fields that can be mutated, and I want to use it to enforce certain invariants. Deserialization would enforce them but you could still mutate it and cause a panic at runtime if you violate the invariants. If I didn't want to keep the API the same I'd make those fields private and add read-only accessors, plus a validated <code>new()</code> function.<br>\nSo far it looks like the API break is not necessary and I'd prefer to avoid it for now so that people would get the matching fix, but I'd appreciate a second opinion</p>",
        "id": 242391414,
        "sender_full_name": "Shnatsel",
        "timestamp": 1623439209
    },
    {
        "content": "<p>Code in question for context: <a href=\"https://github.com/Shnatsel/rustsec/blob/26f821f9ce99b028264eaff50bf1dca18786bd51/rustsec/src/advisory/versions.rs#L14\">https://github.com/Shnatsel/rustsec/blob/26f821f9ce99b028264eaff50bf1dca18786bd51/rustsec/src/advisory/versions.rs#L14</a></p>",
        "id": 242396154,
        "sender_full_name": "Shnatsel",
        "timestamp": 1623441784
    },
    {
        "content": "<p>a breaking change is fine as well</p>",
        "id": 242406163,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1623447109
    }
]