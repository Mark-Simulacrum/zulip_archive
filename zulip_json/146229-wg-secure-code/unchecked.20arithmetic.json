[
    {
        "content": "<p>Hi there <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<p>I came across this issue about (un-)checked integer arithmetic in Rust: <a href=\"https://github.com/rust-lang/rust/issues/9469\">https://github.com/rust-lang/rust/issues/9469</a><br>\nThe discussion is rather old and I wanted to ask if in the meanwhile the Rust community came to consensus about whether arithmetic in Rust should be checked by default or not?</p>\n<p>As a security-focussed guy I would prefer to have arithmetic checked by default. I saw a some of memory-safety issues arising from it, even in Rust code (<a href=\"https://rustsec.org/advisories/CVE-2018-1000810.html\">https://rustsec.org/advisories/CVE-2018-1000810.html</a>). <br>\nI can understand the performance concerns discussed in Issue <a href=\"https://github.com/rust-lang/rust/issues/9469\">#9469</a> but they are quite old. Did the sitation change? Isn't Rust widely perceived a fast-enough contender for C/C++ now? =&gt; <a href=\"https://github.com/rust-lang/rust/issues/9469#issuecomment-32135246\">https://github.com/rust-lang/rust/issues/9469#issuecomment-32135246</a></p>\n<p>My personal impression when starting with Rust was that \"security's first\": everything is checked outside of unsafe blocks - even arithmetic. So it it was quite a bummer for me to see that arithmetic is not checked by default. Maybe other new Rust programmers will perceive it the same way and could produce buggy code because it's not explicitly visible that default arithmetic operations (+, -, ...) can overflow, etc. <br>\nI think one of Rust's most honorable objectives is to make unsafe behavior explicitly visible in the code - making it easy for reviewers.</p>",
        "id": 215761352,
        "sender_full_name": "Oliver Braunsdorf",
        "timestamp": 1604604166
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245622\">@Oliver Braunsdorf</span> arithmetic is checked in debug mode and wrapping in release mode</p>",
        "id": 215761441,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604604215
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rfcs/pull/2635\">https://github.com/rust-lang/rfcs/pull/2635</a> was my somewhat novel approach to this. It keeps getting blocked by missed optimizations in LLVM though.</p>",
        "id": 215761445,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1604604216
    },
    {
        "content": "<p>I don't think it's had unchecked arithmetic for a while</p>",
        "id": 215761455,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604604223
    },
    {
        "content": "<p>there's also this pre-RFC: <a href=\"https://internals.rust-lang.org/t/where-is-std-saturating-going-to-pre-rfc/13053/27\">https://internals.rust-lang.org/t/where-is-std-saturating-going-to-pre-rfc/13053/27</a></p>",
        "id": 215762027,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1604604467
    },
    {
        "content": "<p>ah intersting, so it seems like this is still a topic..<br>\n<span class=\"user-mention\" data-user-id=\"130046\">@Alex Gaynor</span> seems like your RFC is on the way to getting accepted. Why did you propose it only for usize?</p>",
        "id": 215763736,
        "sender_full_name": "Oliver Braunsdorf",
        "timestamp": 1604605218
    },
    {
        "content": "<p>Balance of perf/security.</p>",
        "id": 215763769,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1604605236
    },
    {
        "content": "<p>okay :D</p>",
        "id": 215763870,
        "sender_full_name": "Oliver Braunsdorf",
        "timestamp": 1604605281
    },
    {
        "content": "<p>did anyone ever proposed to abandon default operators like \"+\" or \"-\" and only have either checked_add or unchecked_add?</p>",
        "id": 215764053,
        "sender_full_name": "Oliver Braunsdorf",
        "timestamp": 1604605360
    },
    {
        "content": "<p>I would really hate that</p>",
        "id": 215764059,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604605369
    },
    {
        "content": "<p>imagine how much noise that adds</p>",
        "id": 215764075,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604605376
    },
    {
        "content": "<p>would be a bold proposal though :D</p>",
        "id": 215764080,
        "sender_full_name": "Oliver Braunsdorf",
        "timestamp": 1604605378
    },
    {
        "content": "<p>I think such a proposal is DOA</p>",
        "id": 215764083,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1604605379
    },
    {
        "content": "<p>yes..i would totally feel that, too</p>",
        "id": 215764170,
        "sender_full_name": "Oliver Braunsdorf",
        "timestamp": 1604605434
    },
    {
        "content": "<p>Can you tell me what would be current best practice to detect such bugs in Rust? Can Miri detect potential overflows?</p>",
        "id": 215764727,
        "sender_full_name": "Oliver Braunsdorf",
        "timestamp": 1604605681
    },
    {
        "content": "<p>well, you can <code>deny(clippy::integer_arithmetic)</code> if you want <a href=\"https://rust-lang.github.io/rust-clippy/master/index.html#integer_arithmetic\">https://rust-lang.github.io/rust-clippy/master/index.html#integer_arithmetic</a></p>",
        "id": 215764847,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604605734
    },
    {
        "content": "<p>and if you have overflows in constants those give <code>const_err</code></p>",
        "id": 215764873,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604605744
    },
    {
        "content": "<p>but other than that I don't think there's any static analysis for it</p>",
        "id": 215764901,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604605753
    },
    {
        "content": "<p>You can also just turn it on in release mode</p>",
        "id": 215764921,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1604605762
    },
    {
        "content": "<p>I did use <code>deny(clippy::integer_arithmetic)</code> in one of my projects, yes</p>",
        "id": 215764923,
        "sender_full_name": "Shnatsel",
        "timestamp": 1604605762
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127617\">Shnatsel</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/unchecked.20arithmetic/near/215764923\">said</a>:</p>\n<blockquote>\n<p>I did use <code>deny(clippy::integer_arithmetic)</code> in one of my projects, yes</p>\n</blockquote>\n<p>I'm surprised to hear that, I consider it one of the more pedantic lints. Which project?</p>",
        "id": 215764958,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604605786
    },
    {
        "content": "<p>Overflow checks, that is</p>",
        "id": 215764983,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1604605797
    },
    {
        "content": "<p><a href=\"https://github.com/viperproject/prusti-dev/\">https://github.com/viperproject/prusti-dev/</a> would be able to prove absence of overflows, once complete</p>",
        "id": 215764984,
        "sender_full_name": "Shnatsel",
        "timestamp": 1604605797
    },
    {
        "content": "<p>I used that in <a href=\"https://github.com/Shnatsel/binfarce\">https://github.com/Shnatsel/binfarce</a></p>",
        "id": 215765061,
        "sender_full_name": "Shnatsel",
        "timestamp": 1604605810
    },
    {
        "content": "<p>Example: <a href=\"https://github.com/Shnatsel/binfarce/blob/master/src/elf64.rs\">https://github.com/Shnatsel/binfarce/blob/master/src/elf64.rs</a></p>",
        "id": 215765122,
        "sender_full_name": "Shnatsel",
        "timestamp": 1604605835
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![deny(clippy::integer_arithmetic)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![deny(clippy::cast_possible_truncation)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![deny(clippy::indexing_slicing)]</span><span class=\"w\"></span>\n</code></pre></div>\n<p>is the full set of things denied in there. Should eliminate most causes of panics in a binary format parser</p>",
        "id": 215765319,
        "sender_full_name": "Shnatsel",
        "timestamp": 1604605925
    },
    {
        "content": "<p>That entire crate was just me looking at <code>goblin</code>, thinking that I don't need 90% of it and there's no way I can prevent that entire thing from either panicking or OOMing on malformed input, and then rolling my own parser for a small subset of ELF/Mach-O/PE that I can statically prevent from OOMing (no allocations) and usually even panicking (clippy lints)</p>",
        "id": 215765711,
        "sender_full_name": "Shnatsel",
        "timestamp": 1604606119
    },
    {
        "content": "<p>Although \"no panics\" is just something I've thrown in because I could, that's not an actual requirement for what I'm building on top of it - <a href=\"https://github.com/Shnatsel/rust-audit\">https://github.com/Shnatsel/rust-audit</a></p>",
        "id": 215765855,
        "sender_full_name": "Shnatsel",
        "timestamp": 1604606172
    },
    {
        "content": "<p>The only thing left to do there is uplift it into cargo itself, which is something I didn't even start tackling yet. Working on <a href=\"https://github.com/rust-secure-code/cargo-supply-chain\">https://github.com/rust-secure-code/cargo-supply-chain</a> in the meanwhile</p>",
        "id": 215765955,
        "sender_full_name": "Shnatsel",
        "timestamp": 1604606233
    },
    {
        "content": "<p>Which works, by the way, and the only thing left to do is writing an announcement</p>",
        "id": 215766191,
        "sender_full_name": "Shnatsel",
        "timestamp": 1604606338
    },
    {
        "content": "<p>Ah, great to know that clippy has lints for this! Although \"no bounds analysis or sophisticated reasoning is attempted\".<br>\nHaving Prusti's powers ready for productive use will be great, but until then it might be a good starting point for me to write a more sophisticated static analysis to check for potential overflows.</p>",
        "id": 215769494,
        "sender_full_name": "Oliver Braunsdorf",
        "timestamp": 1604608060
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/unchecked.20arithmetic/near/215764921\">said</a>:</p>\n<blockquote>\n<p>You can also just turn it on in release mode</p>\n</blockquote>\n<p>also interesting! <span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span>  can you tell me how to enable this?</p>",
        "id": 215769721,
        "sender_full_name": "Oliver Braunsdorf",
        "timestamp": 1604608183
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245622\">Oliver Braunsdorf</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/unchecked.20arithmetic/near/215769721\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/unchecked.20arithmetic/near/215764921\">said</a>:</p>\n<blockquote>\n<p>You can also just turn it on in release mode</p>\n</blockquote>\n<p>also interesting! <span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span>  can you tell me how to enable this?</p>\n</blockquote>\n<p>nevermind. found it here: <a href=\"https://stackoverflow.com/questions/34054669/how-to-compile-and-run-an-optimized-rust-program-with-overflow-checking-enabled\">https://stackoverflow.com/questions/34054669/how-to-compile-and-run-an-optimized-rust-program-with-overflow-checking-enabled</a><br>\nThanks for the info :)</p>",
        "id": 215773446,
        "sender_full_name": "Oliver Braunsdorf",
        "timestamp": 1604610087
    },
    {
        "content": "<blockquote>\n<p>did anyone ever proposed to abandon default operators like \"+\" or \"-\" and only have either checked_add or unchecked_add?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"245622\">@Oliver Braunsdorf</span> a better alternative to this, I think, is an attribute or a macro which defines what kind of behavior you want for a particular block of code</p>",
        "id": 215788300,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1604619588
    },
    {
        "content": "<p>like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[checked]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">myarith</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kt\">u64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u64</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 215788369,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1604619612
    },
    {
        "content": "<p>or:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">checked</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 215788412,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1604619649
    },
    {
        "content": "<p>although personally I'd be happy to settle for <code>Checked</code> as part of the standard library crates</p>",
        "id": 215788443,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1604619688
    },
    {
        "content": "<p>do you see specific advantages of this over the <code>checked_add</code> family of functions already existing in the standard library?</p>",
        "id": 215788601,
        "sender_full_name": "Oliver Braunsdorf",
        "timestamp": 1604619836
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132721\">Tony Arcieri</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/unchecked.20arithmetic/near/215788300\">said</a>:</p>\n<blockquote>\n<p>a better alternative to this, I think, is an attribute or a macro which defines what kind of behavior you want for a particular block of code</p>\n</blockquote>\n<p>That exists: <a href=\"https://github.com/llogiq/overflower\">https://github.com/llogiq/overflower</a></p>",
        "id": 215789068,
        "sender_full_name": "Shnatsel",
        "timestamp": 1604620212
    },
    {
        "content": "<p>I know that exists. There's also the <code>checked</code> crate. But I don't want to pull in another dependency</p>",
        "id": 215868121,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1604679423
    },
    {
        "content": "<blockquote>\n<p>do you see specific advantages of this over the checked_add family of functions already existing in the standard library?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"245622\">@Oliver Braunsdorf</span>  I am a power user of <code>checked_*</code> and I find it really annoying to use</p>",
        "id": 215868172,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1604679456
    },
    {
        "content": "<p>okay, I understand. Whatever a solution looks like, it should be very ergonomic for developers to use.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"127617\">Shnatsel</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/unchecked.20arithmetic/near/215789068\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"132721\">Tony Arcieri</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/unchecked.20arithmetic/near/215788300\">said</a>:</p>\n<blockquote>\n<p>a better alternative to this, I think, is an attribute or a macro which defines what kind of behavior you want for a particular block of code</p>\n</blockquote>\n<p>That exists: <a href=\"https://github.com/llogiq/overflower\">https://github.com/llogiq/overflower</a></p>\n</blockquote>\n<p>I think I like the approach of overflower. Didn't look into it much, but it seems like you could define <code>#[overflow(panic)]</code> for the whole crate and then use <code>#[overflow(wrap)]</code> as exception at function level or instruction level</p>",
        "id": 215877027,
        "sender_full_name": "Oliver Braunsdorf",
        "timestamp": 1604683345
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132721\">@Tony Arcieri</span> you're writing a lot of crypto code, right? Do you think it would be less annoying for you to mark unchecked arithmetic at function level oder module level? - Imagine it would be incorporated into the compiler without having additional dependencies</p>",
        "id": 215877530,
        "sender_full_name": "Oliver Braunsdorf",
        "timestamp": 1604683573
    },
    {
        "content": "<p>I have to deal with a mixture of checked and wrapping arithmetic</p>",
        "id": 215877959,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1604683761
    },
    {
        "content": "<p>so really having a <code>Checked</code> wrapper similar to <code>Wrapping</code> would be nice, especially when some things are checked and some things wrap</p>",
        "id": 215878077,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1604683803
    },
    {
        "content": "<p>e.g. a block cipher or universal hash function may need <code>Wrapping</code>, but the counter for a nonce should be <code>Checked</code> to prevent overflow</p>",
        "id": 215878246,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1604683873
    },
    {
        "content": "<p>I don't think a <code>Checked</code> wrapper  is possible because it returns a <code>Result</code> instead of a number, unless you want it to panic on overflow. <code>Saturating</code> would be nice though</p>",
        "id": 215879438,
        "sender_full_name": "Shnatsel",
        "timestamp": 1604684432
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> check out <a href=\"https://internals.rust-lang.org/t/where-is-std-saturating-going-to-pre-rfc/13053/27\">https://internals.rust-lang.org/t/where-is-std-saturating-going-to-pre-rfc/13053/27</a></p>",
        "id": 215883232,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1604686363
    },
    {
        "content": "<p>also <a href=\"https://docs.rs/checked/\">https://docs.rs/checked/</a></p>",
        "id": 215883293,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1604686403
    },
    {
        "content": "<p>So <code>Checked</code> wrapper allows you to delay handling of the overflow - run a bunch of operations and only check if the overflow occurred at a later date. Is that correct?<br>\nYou can do that with <code>?</code> operator already, but that short-cirquits</p>",
        "id": 215883712,
        "sender_full_name": "Shnatsel",
        "timestamp": 1604686580
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245622\">Oliver Braunsdorf</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/unchecked.20arithmetic/near/215764727\">said</a>:</p>\n<blockquote>\n<p>Can you tell me what would be current best practice to detect such bugs in Rust? Can Miri detect potential overflows?</p>\n</blockquote>\n<p>there is <code>-C overflow-checks</code> to enable overflow checks even for release mode...<br>\nEDIT: oh you already found that :)</p>",
        "id": 215952929,
        "sender_full_name": "RalfJ",
        "timestamp": 1604752307
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> what I like the most about wrapper types is they don't let you do unchecked arithmetic</p>",
        "id": 215958072,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1604760358
    },
    {
        "content": "<p>it isn't about what's \"possible\", it's about making the undesired things unexpressible and the safe thing ergonomic</p>",
        "id": 215958124,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1604760391
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> but that only helps if you instruct the person linking a crate into an executable to do it, and if they don't, you don't get the checks</p>",
        "id": 215958143,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1604760435
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132721\">Tony Arcieri</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/unchecked.20arithmetic/near/215958143\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> but that only helps if you instruct the person linking a crate into an executable to do it, and if they don't, you don't get the checks</p>\n</blockquote>\n<p>that's fair... overflow checks are inserted (or not) during MIR building, so this <em>could</em> be controlled on a per-crate basis, but I am not sure if e have the flags for that</p>",
        "id": 215958403,
        "sender_full_name": "RalfJ",
        "timestamp": 1604760769
    },
    {
        "content": "<p>btw, speaking of Miri, it sets <code>-C debug-assertions=on</code> so it will detect overflows the same way rustc would with that flag</p>",
        "id": 215958430,
        "sender_full_name": "RalfJ",
        "timestamp": 1604760836
    },
    {
        "content": "<p>but if your goal is just to find overflows, it'll be much faster to set that flag for your test suite and run it the regular way, than using miri ;)</p>",
        "id": 215958525,
        "sender_full_name": "RalfJ",
        "timestamp": 1604760948
    },
    {
        "content": "<p>what I'd like to do is catch the overflows the test suite doesn't find when they happen in production</p>",
        "id": 215958575,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1604760986
    },
    {
        "content": "<p>yeah... miri obviously cannot help with that</p>",
        "id": 215958589,
        "sender_full_name": "RalfJ",
        "timestamp": 1604761016
    },
    {
        "content": "<p>(nit: the subject having \"unchecked\" here made me think <a href=\"https://doc.rust-lang.org/nightly/std/intrinsics/fn.unchecked_add.html\"><code>unchecked_add</code></a>, which is the UB-on-overflow version.  But that's the complete opposite of what's being looked for here <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span>)</p>",
        "id": 216022068,
        "sender_full_name": "scottmcm",
        "timestamp": 1604864727
    },
    {
        "content": "<p>haha yeah I honestly would be happy with a type that enforces panic-on-overflow but a slightly fancier combinator-ish type which doesn't panic-on-overflow would be even nicer</p>",
        "id": 216028772,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1604874741
    },
    {
        "content": "<p>with the provision that the type makes unchecked/wrapping arithmetic impossible</p>",
        "id": 216028777,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1604874758
    },
    {
        "content": "<p>I panic in those scenarios with the assumption that other logic is supposed to prevent the panic, but avoiding a panic would also be nice</p>",
        "id": 216028807,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1604874801
    },
    {
        "content": "<p>but then it gets complicated</p>",
        "id": 216028808,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1604874806
    },
    {
        "content": "<p>if the question is should an operation which overflows interact with secret/key material at all, ideally the answer is no</p>",
        "id": 216028860,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1604874857
    },
    {
        "content": "<p><span aria-label=\"bike\" class=\"emoji emoji-1f6b2\" role=\"img\" title=\"bike\">:bike:</span> <span aria-label=\"house\" class=\"emoji emoji-1f3e0\" role=\"img\" title=\"house\">:house:</span> <code>core::num::Panicky&lt;T&gt;</code></p>",
        "id": 216029439,
        "sender_full_name": "cuviper",
        "timestamp": 1604875692
    }
]