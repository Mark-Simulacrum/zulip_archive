[
    {
        "content": "<p>I thought I'd split this advisory off into its own topic because it continues to be a particularly interesting case study</p>",
        "id": 171490722,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1563859570
    },
    {
        "content": "<p>it's one of those cases where the initial severity was underestimated, but the practical exploitability was low... and a lot of people deemed it noise</p>",
        "id": 171490733,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1563859621
    },
    {
        "content": "<p>based on the number of people who pinged me about it, it was quite noisy, and there was not a particularly clear path forward for a lot of crates which rely on it as a dependency</p>",
        "id": 171490743,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1563859651
    },
    {
        "content": "<p>I got some pings about adding some kind of exploitability metrics that can be filtered by, but I wonder if this advisory is a good use case for a more fine-grained static analysis of if particular applications are actually impacted</p>",
        "id": 171490840,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1563859792
    },
    {
        "content": "<p>there are definitely a few existing tools that could potentially be tapped for that purpose</p>",
        "id": 171490889,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1563859838
    },
    {
        "content": "<p>but in the meantime the exploitability jumped a few times as it was further scrutinized... to memory exposure and then RCE</p>",
        "id": 171490929,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1563859882
    },
    {
        "content": "<p>in the code at my workplace we ended up ignoring it because there's no path to update (crossbeam-deque is required by tokio, and uses memoffset 0.2 or something). this is far enough removed that i have no clue if the code in question is actually vulnerable, since almost certainly that depends on how it's being used in crossbeam-deque/tokio.</p>",
        "id": 171491015,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1563860022
    },
    {
        "content": "<p>I just recommended <code>--ignore</code> to a few people</p>",
        "id": 171491084,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1563860099
    },
    {
        "content": "<p>good thing I shipped that last week <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 171491091,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1563860106
    },
    {
        "content": "<p>It's unfortunate. Some digging shows that the use in crossbeam is at least probably not vulnerable to RCE (which would be my largest concern), since it isn't used on a field with a custom deref coersion. still though, it's hard to evaluate an issue like this used in transitive dependencies</p>",
        "id": 171491556,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1563860813
    },
    {
        "content": "<p>yeah, I bumped the version in crossbeam without having to change anything, so there was no deref coercion involved at least in latest git crossbeam</p>",
        "id": 171502274,
        "sender_full_name": "RalfJ",
        "timestamp": 1563873647
    },
    {
        "content": "<p>now this is \"just\" waiting on <a href=\"https://github.com/crossbeam-rs/crossbeam/issues/401\" target=\"_blank\" title=\"https://github.com/crossbeam-rs/crossbeam/issues/401\">https://github.com/crossbeam-rs/crossbeam/issues/401</a></p>",
        "id": 171502277,
        "sender_full_name": "RalfJ",
        "timestamp": 1563873652
    },
    {
        "content": "<p>I guess the more general question is: <code>unsafe</code> can be \"sealed\" behind an sbatraction; if an API is unsound (like <code>memoffset</code>) but a project only uses it transitively through another crate that does not \"exploit\" the unsafety... how should that be handled? We can have an advisory for the unsound crate, and people should bump if they depend on it directly, but there is little they can do about transitive dependencies and in many cases there actually is no harm done by using the old version.</p>",
        "id": 171502368,
        "sender_full_name": "RalfJ",
        "timestamp": 1563873771
    },
    {
        "content": "<blockquote>\n<p>in many cases there actually is no harm done by using the old version</p>\n</blockquote>\n<p>Exploitability analysis is ridiculously hard. It's usually easier to just get rid of the potentially problematic thing than to analyze if it's exploitable or not. <br>\nThere are tons of cautionary tales about people looking at a known-broken system but deeming it not exploitable, and then someone else coming along and exploiting the hell out of it. See e.g. the case of M$ and MD5</p>",
        "id": 171539181,
        "sender_full_name": "Shnatsel",
        "timestamp": 1563902859
    },
    {
        "content": "<p>fair</p>",
        "id": 171551800,
        "sender_full_name": "RalfJ",
        "timestamp": 1563911314
    },
    {
        "content": "<p>OTOH, the \"uninit drop\" soundness hole in memoffset is fixed by adding an extra check</p>",
        "id": 171551821,
        "sender_full_name": "RalfJ",
        "timestamp": 1563911340
    },
    {
        "content": "<p>so if code just compiles after adding that check, it already didnt exploit the hole before (on that platform, with the same features)</p>",
        "id": 171551858,
        "sender_full_name": "RalfJ",
        "timestamp": 1563911372
    },
    {
        "content": "<p>and looking at <a href=\"https://github.com/crossbeam-rs/crossbeam/issues/401\" target=\"_blank\" title=\"https://github.com/crossbeam-rs/crossbeam/issues/401\">https://github.com/crossbeam-rs/crossbeam/issues/401</a> I feel a bit bad, in particular breaking people's CI until crossbeam can make a new release seems a bit over-the-top (I had no idea people run <code>cargo audit</code> on CI)</p>",
        "id": 171551965,
        "sender_full_name": "RalfJ",
        "timestamp": 1563911415
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> the one bit of automated exploitability analysis we could potentially do is checking if any of the affected codepaths are actually used by the app in question</p>",
        "id": 171553560,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1563912571
    },
    {
        "content": "<p>via call graph analysis</p>",
        "id": 171553637,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1563912608
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> people only run it on CI because there is no proper security update mechanism in Cargo. CI is not the right way to deal with this. But that's a story for another time.</p>",
        "id": 171554352,
        "sender_full_name": "Shnatsel",
        "timestamp": 1563913186
    },
    {
        "content": "<p><a href=\"https://github.com/tokio-rs/tokio/issues/1345\" target=\"_blank\" title=\"https://github.com/tokio-rs/tokio/issues/1345\">https://github.com/tokio-rs/tokio/issues/1345</a></p>",
        "id": 171615105,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1563981574
    }
]