[
    {
        "content": "<p>So here's an interesting challenge: I'm performing some validation on some characters that are in a <code>&amp;[u8]</code>. Then I'm creating an <code>&amp;str</code> from it. <br>\nRight now my choices are to either<br>\na) Do 2x passes over the data, once for my validation, and once in <code>str::from_utf8</code> to verify they really are utf8 (even though my validation also ensures they are utf8,<br>\nb) Use the unsafe <code>str::from_utf8_unchecked</code> API to just skip the second validation</p>\n<p>Neither of these appeals to me. What API _should_  exist to allow me to do everything in one pass, safely.</p>\n<p>If there was <code>from_utf8_extra_check(&amp;[u8], fn(char) -&gt; Result&lt;(), Error&gt;) -&gt; Result&lt;&amp;str, Error&gt;</code> I think that'd work?</p>",
        "id": 174013854,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1566605695
    },
    {
        "content": "<p>That would also be unsafe, i think</p>",
        "id": 174016820,
        "sender_full_name": "Nick12",
        "timestamp": 1566610086
    },
    {
        "content": "<p>If the fn didnt correctly validate itd be ub in safe code</p>",
        "id": 174016826,
        "sender_full_name": "Nick12",
        "timestamp": 1566610109
    },
    {
        "content": "<p>You could make it safe by having an unsafe trait</p>",
        "id": 174016827,
        "sender_full_name": "Nick12",
        "timestamp": 1566610123
    },
    {
        "content": "<p>But youll still need unsafe to impl your validator</p>",
        "id": 174016833,
        "sender_full_name": "Nick12",
        "timestamp": 1566610144
    },
    {
        "content": "<p>Whats wrong with option b?</p>",
        "id": 174016835,
        "sender_full_name": "Nick12",
        "timestamp": 1566610160
    },
    {
        "content": "<p>Oh wait, the utf validation would happen outside your fn? So you validate only additional things? Im not sure i see how thats different from option a</p>",
        "id": 174016887,
        "sender_full_name": "Nick12",
        "timestamp": 1566610230
    },
    {
        "content": "<p>You'd do <code>for b in data { user_verify(b)?; normal_utf8_verify(b)?; }</code> and hope the optimizer sorted it out</p>",
        "id": 174016905,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1566610277
    },
    {
        "content": "<p>I don't expect that this would be a clear performance win. Sure, you're only going through the entire string start to finish once, but<br>\n1. lots of strings are short enough it doesn't matter -- if your string fits into the cache (many KB for L1, and L2/L3 might be fine too) walking it twice back-to-back is likely free, and prefetching might make it irrelevant anyway<br>\n2. utf-8 validation can be optimized a lot by validating more than one char at a time and doing less work than full decoding into <code>char</code> -- having to add in actual <em>decoding</em> and doing the other validation char-by-char will not place nicely with that, likely throttling the utf-8 validation even on an algorithmic level</p>",
        "id": 174028225,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1566631866
    },
    {
        "content": "<p>IIRC str::from_utf8 tries pretty hard to avoid looking at characters individually, so with the extra check it would be quite a bit slower (edit: ah, whoops, someone beat me to saying this)</p>",
        "id": 174049497,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1566671268
    },
    {
        "content": "<p>what is the invariant on the characters in the <code>&amp;[u8]</code> for your particular use case, <span class=\"user-mention\" data-user-id=\"130046\">@Alex Gaynor</span> ? ASCII? something more than that?</p>",
        "id": 174096235,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1566760125
    },
    {
        "content": "<p>It's ASN.1's PrintableString that had me thinking about this, so it's an allow-list of particular ASCII chars</p>",
        "id": 174096242,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1566760155
    },
    {
        "content": "<p>aaaaah</p>",
        "id": 174096244,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1566760166
    }
]