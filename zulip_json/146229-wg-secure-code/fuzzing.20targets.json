[
    {
        "content": "<p>Hey everybody.  I'm going through fuzzing some libraries.  Does anyone have any crates, besides stdlib(not looking for that big of a project right now) they'd like to get some attention?  I'm thinking of doing ws-rs next.</p>",
        "id": 158769290,
        "sender_full_name": "Stuart Small",
        "timestamp": 1550456164
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132722\">@Stuart Small</span> I can think of a few good candidates (e.g. <code>bytes</code>) but have no idea if it's already being fuzzed</p>",
        "id": 158771174,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1550459834
    },
    {
        "content": "<p>Cool.  I'll look into it.  That'll be a lot easier than ws-rs.  The logic for signalling the server to shutdown will be a little awkward</p>",
        "id": 158771471,
        "sender_full_name": "Stuart Small",
        "timestamp": 1550460314
    },
    {
        "content": "<p>I already found some decent panics this evening with the first project I started on (mongo_driver) but fixing them will require some API changes.  This is my first go with fuzzing and I'm having a lot of fun</p>",
        "id": 158771535,
        "sender_full_name": "Stuart Small",
        "timestamp": 1550460468
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132722\">@Stuart Small</span> I know snow is looking to get some more fuzzing: <a href=\"https://github.com/mcginty/snow/issues/28\" target=\"_blank\" title=\"https://github.com/mcginty/snow/issues/28\">https://github.com/mcginty/snow/issues/28</a></p>",
        "id": 158798323,
        "sender_full_name": "brycx",
        "timestamp": 1550495334
    },
    {
        "content": "<p>Awesome.  Thanks!</p>",
        "id": 158807156,
        "sender_full_name": "Stuart Small",
        "timestamp": 1550503415
    },
    {
        "content": "<p>I'm actually working on making fuzzing viable for targets with large API surfaces such as the stdlib or the OpenSSL bindings. It's in the minimum viable prototype stage: <a href=\"https://github.com/Eh2406/auto-fuzz-test\" target=\"_blank\" title=\"https://github.com/Eh2406/auto-fuzz-test\">https://github.com/Eh2406/auto-fuzz-test</a></p>",
        "id": 158832169,
        "sender_full_name": "Shnatsel",
        "timestamp": 1550527690
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132722\">@Stuart Small</span> you can update the targets in <a href=\"https://github.com/rust-fuzz/targets\" target=\"_blank\" title=\"https://github.com/rust-fuzz/targets\">https://github.com/rust-fuzz/targets</a> to latest versions of libraries and re-run them. I'm pretty sure you're going to get some crashes out of that, since almost nobody does fuzzing on CI.<br>\nAlso, if you need any tips on fuzzing (like the right way to run AFL in parallel or how to combine compiling release mode and sanitizers) feel free to message me. I have a bunch of experience with that.</p>",
        "id": 158832293,
        "sender_full_name": "Shnatsel",
        "timestamp": 1550527832
    },
    {
        "content": "<p>I'm basing my \"nobody runs fuzzing on CI and that's a problem\" comment on <a href=\"https://github.com/PistonDevelopers/image-png/issues/103\" target=\"_blank\" title=\"https://github.com/PistonDevelopers/image-png/issues/103\">https://github.com/PistonDevelopers/image-png/issues/103</a></p>",
        "id": 158832341,
        "sender_full_name": "Shnatsel",
        "timestamp": 1550527909
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132722\">@Stuart Small</span> also you can run fuzz code that has <code>unsafe</code> in it under <a href=\"https://github.com/Shnatsel/libdiffuzz\" target=\"_blank\" title=\"https://github.com/Shnatsel/libdiffuzz\">https://github.com/Shnatsel/libdiffuzz</a> - I'm pretty sure nobody's done that before. Since Memory Sanitizer is a pain to use, in the meanwhile libdiffuzz can be used to detect reads from uninitialized memory that affect output. You will have to modify the fuzzing targets for it, though. (Full disclosure: I wrote it).</p>",
        "id": 158832820,
        "sender_full_name": "Shnatsel",
        "timestamp": 1550528211
    },
    {
        "content": "<p>Cool.  I'll take a look at it</p>",
        "id": 158837420,
        "sender_full_name": "Stuart Small",
        "timestamp": 1550533668
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> FWIW, I've used libdiffuzz to fuzz some SIMD code :)</p>",
        "id": 158855361,
        "sender_full_name": "brycx",
        "timestamp": 1550561862
    },
    {
        "content": "<p>Oh, that's cool! Found anything?</p>",
        "id": 158909423,
        "sender_full_name": "Shnatsel",
        "timestamp": 1550603336
    },
    {
        "content": "<p>No, \"fortunately\" not. But if I do and it's a public project (this wasn't) then I'll make sure to open a trophy case!</p>",
        "id": 158926956,
        "sender_full_name": "brycx",
        "timestamp": 1550616542
    },
    {
        "content": "<p>Does anyone have good guidance on converting from the crash artifact dumped in /target by rust fuzz back into the arguments to the fuzz_target?  It was easy to handle when I was just passing in Vec&lt;u8&gt; but I'm starting to get more complex method signatures so its hard to sort out</p>",
        "id": 159239203,
        "sender_full_name": "Stuart Small",
        "timestamp": 1550945000
    },
    {
        "content": "<p>If it's AFL, I just replace <code>afl::fuzz!</code> with<code>afl::read_stdio_bytes</code> and run the binary with test target as input.<br>\nIf it's something much more complicated, you can use the newly stabilized <code>dbg!</code> macro to extract inputs passed to individual functions: <a href=\"https://doc.rust-lang.org/std/macro.dbg.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/std/macro.dbg.html\">https://doc.rust-lang.org/std/macro.dbg.html</a></p>",
        "id": 159245567,
        "sender_full_name": "Shnatsel",
        "timestamp": 1550955772
    },
    {
        "content": "<p>I'm using libfuzzer right now.   Looks like I found a good way to do it:</p>\n<p>let slice = &amp;[0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x40,<br>\n        0xff, 0x00, 0xff, 0x00, 0x40, 0xff, 0x00, 0xff,<br>\n        0xff, 0xff, 0x00, 0x6c, 0xff, 0x00, 0x00, 0x00, 0x6c];<br>\n    let mut fb = RingBuffer::new(slice, slice.len()).unwrap();<br>\n    let rand: (Option&lt;u8&gt;, Vec&lt;Action&gt;) = Arbitrary::arbitrary(&amp;mut fb).unwrap();</p>",
        "id": 159247932,
        "sender_full_name": "Stuart Small",
        "timestamp": 1550960271
    },
    {
        "content": "<p>I'm not 100% sure RingBuffer is a good idea. I use a fixed-size buffer instead: <a href=\"https://gist.github.com/Shnatsel/4a907d44d6429de93d63d6e7c4d1361e\" target=\"_blank\" title=\"https://gist.github.com/Shnatsel/4a907d44d6429de93d63d6e7c4d1361e\">https://gist.github.com/Shnatsel/4a907d44d6429de93d63d6e7c4d1361e</a></p>",
        "id": 159248043,
        "sender_full_name": "Shnatsel",
        "timestamp": 1550960514
    },
    {
        "content": "<p>I originally used fixed sized but it paniced.  I'll give it a closed look as to why</p>",
        "id": 159248139,
        "sender_full_name": "Stuart Small",
        "timestamp": 1550960647
    },
    {
        "content": "<p>Probably because it tried to allocate very large strings or vectors and ran out of data</p>",
        "id": 159248272,
        "sender_full_name": "Shnatsel",
        "timestamp": 1550960981
    },
    {
        "content": "<p>It would be interesting to have a comparison between ring buffer and fixed size buffer in terms of fuzzing efficiency</p>",
        "id": 159248401,
        "sender_full_name": "Shnatsel",
        "timestamp": 1550961237
    },
    {
        "content": "<p>Ah I <em>think</em> my issue might be that the definition of Action changed at some point after I generated  that byte stream.   That would do it.</p>",
        "id": 159249269,
        "sender_full_name": "Stuart Small",
        "timestamp": 1550962710
    }
]