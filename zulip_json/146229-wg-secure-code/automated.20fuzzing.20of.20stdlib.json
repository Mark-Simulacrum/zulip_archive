[
    {
        "content": "<p>Speaking of which. I have an idea for a project that could significantly improve Rust stdlib security - I want to auto-generate fuzzing harnesses for Rust stdlib functions and run fuzzing on them. This would have discovered the previous CVE in Rust stdlib before it escaped into the wild. But to be effective this would need to run repeatedly because so far both Rust stdlib CVEs were introduced during refactoring. Maybe not run in CI, that'd be too expensive, but once per beta release or some such. <span class=\"user-mention\" data-user-id=\"116013\">@qmx</span>  would it be okay to ping you about resources to run this on if I actually get around to hacking this together?</p>",
        "id": 136548860,
        "sender_full_name": "Shnatsel",
        "timestamp": 1540562449
    },
    {
        "content": "<p>I can always ask, we already have NO as the default response <span class=\"emoji emoji-1f61d\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 136552823,
        "sender_full_name": "qmx",
        "timestamp": 1540566058
    },
    {
        "content": "<p>Google already has a project for this, and this sounds like a good fit: <a href=\"https://opensource.google.com/projects/oss-fuzz\" target=\"_blank\" title=\"https://opensource.google.com/projects/oss-fuzz\">https://opensource.google.com/projects/oss-fuzz</a></p>",
        "id": 136560892,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1540574346
    },
    {
        "content": "<p>I am aware of oss-fuzz, but what I'm trying to do is rather different from the traditional fuzzer integration, and does not really fit that that mold. However, after reading up on it a bit more, I think integrating with oss-fuzz might be feasible. The big question is whether it will work with Rust code at all - it only officially supports C and C++.</p>",
        "id": 136567791,
        "sender_full_name": "Shnatsel",
        "timestamp": 1540581259
    },
    {
        "content": "<p>Ah. I don't know anything about oss-fuzz other than that it exists, so I can't be of much help here. I could try finding folks internally and putting you in touch with them if you want, though.</p>",
        "id": 136569392,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1540583085
    },
    {
        "content": "<p>That'd be stellar! It's a little early for that, though, but thanks for the offer! And I figure I'll try the regular channels first.<br>\nI'm starting a job at Google myself in two weeks but I don't know what degree of access to those folks it will get me, if any.</p>",
        "id": 136569848,
        "sender_full_name": "Shnatsel",
        "timestamp": 1540583527
    },
    {
        "content": "<p>It will get you plenty of access. Not that there's not access to the public - just that it's easier to find out who they are if you can search internal documentation.</p>",
        "id": 136569868,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1540583567
    },
    {
        "content": "<p>Before I was at Google, I had a number of good experiences tracking down people who'd published a white paper or a product or something and getting them on GVC to ask them for advice on stuff.</p>",
        "id": 136569892,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1540583598
    },
    {
        "content": "<p>Well, I've been in touch with the author of AFL-fuzz before. What's GVC?</p>",
        "id": 136569916,
        "sender_full_name": "Shnatsel",
        "timestamp": 1540583636
    },
    {
        "content": "<p>Google Video Chat. I think it's an old name for the video chat aspect of Google Hangouts? I'm not really sure; it's just an acronym people use.</p>",
        "id": 136569986,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1540583683
    },
    {
        "content": "<p>I'm very familiar with oss-fuzz, I've done a bunch of integrations. It should handle Rust fine, though the existing <code>CFLAGS</code>/<code>CC</code> handling obviously won't help at all. The big challenge for your work is that the \"unit of integration\" for OSS-Fuzz by default is a libFuzzer entrypoint. So if you can structure your work in terms of a function that takes a <code>&amp;[u8]</code>, it'll be Just A Matter Of Engineering. Otherwise work will be required.</p>",
        "id": 136574162,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1540588302
    },
    {
        "content": "<p>Nice. I have a prototype for fuzzing the function with Rust stdlib's latest CVE that just accepts <code>&amp;[u8]</code> as input. <a href=\"https://gist.github.com/Shnatsel/4a907d44d6429de93d63d6e7c4d1361e\" target=\"_blank\" title=\"https://gist.github.com/Shnatsel/4a907d44d6429de93d63d6e7c4d1361e\">This is how it looks</a>. Automatically generating such things for other functions should be fairly trivial, there are literally 3 lines that are specific to the function in the entire file. <br>\nSadly, in my tests this harness has failed to discover the vulnerability. I guess that's because I've been fuzzing on 64-bit, where most of the address space gets you OOM killed instantly. I should try it on 32-bit. I've tried getting a 32-bit chroot in Docker going to make the results reproducible, but I couldn't figure out how to get a 32-bit Docker container on a 64-bit machine without just copy-pasting the entire dockerfile for the base 32-bit image.</p>",
        "id": 136575172,
        "sender_full_name": "Shnatsel",
        "timestamp": 1540589295
    },
    {
        "content": "<p>Just so I understand this code, the input you're getting is just returned by the RNG as you request entropy from it -- not hashed and used as a seed or anything?</p>",
        "id": 136575446,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1540589630
    },
    {
        "content": "<p>Slightly off-topic: Does oss-fuzz or the Rust fuzzing harnesses you've been using support coverage-guided fuzzing?</p>",
        "id": 136575618,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1540589842
    },
    {
        "content": "<p>I've been only using coverage-guided fuzzing, the rest of it is vastly inferior and pretty useless. AFL, libfuzzer, honggfuzz are all coverage-guided, although honggfuzz did not start out that way.</p>",
        "id": 136576067,
        "sender_full_name": "Shnatsel",
        "timestamp": 1540590386
    },
    {
        "content": "<p>OSS-Fuzz is exclusively coverage guided fuzzing; it's libFuzzer + AFL</p>",
        "id": 136576072,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1540590398
    },
    {
        "content": "<p>(Technically that's not true, they have special cases for fuzzing SpiderMonkey, JSC, and Chakra which use a custom non-coverage guided fuzzer. But it's basically true.)</p>",
        "id": 136576094,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1540590443
    },
    {
        "content": "<p>OK cool</p>",
        "id": 136576100,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1540590460
    },
    {
        "content": "<p>so like <a href=\"https://github.com/vegard/prog-fuzz\" target=\"_blank\" title=\"https://github.com/vegard/prog-fuzz\">https://github.com/vegard/prog-fuzz</a> but without the coverage feedback?</p>",
        "id": 136576151,
        "sender_full_name": "Shnatsel",
        "timestamp": 1540590495
    },
    {
        "content": "<p>No, it's a custom javascript fuzzer based on merging and mutating snippets from existing JS programs.</p>",
        "id": 136576190,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1540590550
    },
    {
        "content": "<p>prog-fuzz is basically a completely custom mutation strategy on top of AFL instrumentation feedback. Combining your custom mutation strategy with instrumentation feedback would probably get you better results, although you'd need a pretty big map size or use the (unreleased) coll-afl fork for such a big codebase to be manageable.<br>\nActually, doesn't Mozilla maintain a fork of AFL that lets you plug in custom mutation strategies using Python?</p>",
        "id": 136576312,
        "sender_full_name": "Shnatsel",
        "timestamp": 1540590694
    },
    {
        "content": "<p>I know that's something our fuzzing team used, dunno if we still work on it or not.</p>",
        "id": 136576385,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1540590727
    },
    {
        "content": "<p>As for the code I've linked - I've tried to get it to use the input as-is as much as possible, but at the same time I've tried to reuse the \"arbitrary\" trait made for QuickCheck that transforms <code>&amp;[u8]</code> into structures like strings which is geared towards PRNG output as input. So there's some boilerplate wrapping the input <code>&amp;[u8]</code> and pretending it's PRNG output. I'm still not 100% sure that it doesn't do weird things like hashing to the input, but I've tried to eliminate that.</p>",
        "id": 136576530,
        "sender_full_name": "Shnatsel",
        "timestamp": 1540590903
    },
    {
        "content": "<p>Okay, that was actually a really good question that prompted me to looked at the implementation of Arbitrary and supporting traits. Now I think I know what might be throwing off the fuzz harness. QuickCheck RNG wrapper accepts a size parameter that controls both the length of the generated strings and range of generated numbers, at the same time. This means that when I set it really high which is needed to generate a large number and trigger an overflow, it simply tries to generate a large string and fails because the size of fuzzer input is a few gigabytes short.</p>",
        "id": 136577478,
        "sender_full_name": "Shnatsel",
        "timestamp": 1540591911
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132722\">@Stuart Small</span> now that you're toying with <code>syn</code>, this thread is about a fairly simple but important project I've been meaning to get around to, but so far couldn't. It might be of interest to you. If you'd like to collaborate on this, I could handle the fuzzer part and let you have fun with <code>syn</code></p>",
        "id": 137151822,
        "sender_full_name": "Shnatsel",
        "timestamp": 1541328720
    },
    {
        "content": "<p>Oh man,  Great news.  I was really enjoying syn and looking forward to more with it.  I'll catch up on this thread</p>",
        "id": 137165917,
        "sender_full_name": "Stuart Small",
        "timestamp": 1541355464
    },
    {
        "content": "<p>Neat! I probably didn't describe what I'm trying to do in sufficient detail so feel free to ping me</p>",
        "id": 137165965,
        "sender_full_name": "Shnatsel",
        "timestamp": 1541355522
    },
    {
        "content": "<p>Will do.</p>",
        "id": 137165968,
        "sender_full_name": "Stuart Small",
        "timestamp": 1541355536
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132722\">@Stuart Small</span> I'll have tomorrow and the day after mostly free, so I'll probably be taking another stab at the automated fuzzing of stdlib, at the parts that do not involve <code>syn</code> because I still haven't looked into it. I should be available all day (in UTC+1 timezone) if you want to collaborate and/or have any questions.</p>",
        "id": 147448507,
        "sender_full_name": "Shnatsel",
        "timestamp": 1541884968
    },
    {
        "content": "<p>Okay, so, I've taken another stab at auto-generating fuzzing harnesses for functions based on type declarations. I have done the \"parse the functions and methods and get types from them\" part, it also converts the data into an intermediate representation that's convenient for fuzzing. I've also implemented pretty-printing for the intermediate representation. It parses the entire stdlib without panicking, so that's something. Haven't tried writing the generation pass yet, but judging by <a href=\"https://gist.github.com/Shnatsel/4a907d44d6429de93d63d6e7c4d1361e\" target=\"_blank\" title=\"https://gist.github.com/Shnatsel/4a907d44d6429de93d63d6e7c4d1361e\">the template</a> it should not be all that hard. <br>\nStuff like <code>&amp;str</code> will give me trouble because it has no direct constructor, I'll have to special-case them. <br>\nI'm also concerned about <code>use</code> statements, but perhaps there is an \"expand everything\" output from the compiler that turns them from relative to absolute? Visibility would probably still be an issue though.</p>",
        "id": 156573363,
        "sender_full_name": "Shnatsel",
        "timestamp": 1548122992
    },
    {
        "content": "<p>I've applied for copyright release for this project but got denied. This means that if I open-source it, it will come with a Google CLA attached, which includes copyright assignment among other things: <a href=\"https://cla.developers.google.com/clas/new?domain=DOMAIN_GOOGLE&amp;kind=KIND_INDIVIDUAL\" target=\"_blank\" title=\"https://cla.developers.google.com/clas/new?domain=DOMAIN_GOOGLE&amp;kind=KIND_INDIVIDUAL\">https://cla.developers.google.com/clas/new?domain=DOMAIN_GOOGLE&amp;kind=KIND_INDIVIDUAL</a></p>\n<p>There are two paths from here:<br>\n1. Bite the bullet and attach the CLA to the project forever. I fear this would have a detrimental effect on the number of contributions, but I'd be interested to hear what you guys think.<br>\n2. Get somebody outside Google to kick off the project based on public info. Since I've published the idea and a good chunk of implementation before I joined Google, the only thing the company has a claim to is ~40 lines of code that parse function definitions into structs and pretty-print those structs. So if somebody could re-implement that, I could join in afterwards and we'd have a non-CLA'd project. <br>\nFrankly <a href=\"https://github.com/dtolnay/syn/issues/549#issuecomment-447613475\" target=\"_blank\" title=\"https://github.com/dtolnay/syn/issues/549#issuecomment-447613475\">https://github.com/dtolnay/syn/issues/549#issuecomment-447613475</a> gets you most of the way there for parsing, and we can drop the pretty-printing. </p>\n<p>The question is: are there any takers for option 2?</p>",
        "id": 157944571,
        "sender_full_name": "Shnatsel",
        "timestamp": 1549744367
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> so on a not-entirely-unrelated note I saw Google open sourced clusterfuzz</p>",
        "id": 158010011,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1549866944
    },
    {
        "content": "<p>could... that be used for this? I don't really know, just spitballing</p>",
        "id": 158010015,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1549866958
    },
    {
        "content": "<p>Well, @blt of <a href=\"https://github.com/blt/bughunt-rust\" target=\"_blank\" title=\"https://github.com/blt/bughunt-rust\">bughunt-rust</a> fame considers it useful. Frankly I haven't looked into it.</p>",
        "id": 158714413,
        "sender_full_name": "Shnatsel",
        "timestamp": 1550354624
    },
    {
        "content": "<p>Also, <span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> has independently implemented all parts of automated fuzzing harness generator that I was not allowed to release. I actually like their architecture more than mine. The code is now public and resides here: <a href=\"https://github.com/Eh2406/auto-fuzz-test\" target=\"_blank\" title=\"https://github.com/Eh2406/auto-fuzz-test\">https://github.com/Eh2406/auto-fuzz-test</a><br>\nIt is already useful for generating <code>proptest</code> boilerplate - it gets you 80% there so you can focus on the stuff that matters.<br>\nI'll be hacking on it in my spare time, mostly weekends. A coworker of mine has expressed interest in the project just this weekend, and unlike me he has some professional security experience. I hope he will join in soon as well.</p>",
        "id": 158714803,
        "sender_full_name": "Shnatsel",
        "timestamp": 1550355287
    },
    {
        "content": "<p>whoa, that sounds awesome in theory</p>",
        "id": 158723978,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1550372787
    },
    {
        "content": "<p>I just keep discovering more and more stuff that I've inspired: <a href=\"https://github.com/blt/bh_alloc\" target=\"_blank\" title=\"https://github.com/blt/bh_alloc\">https://github.com/blt/bh_alloc</a><br>\nI might actually use this, too.</p>",
        "id": 158753157,
        "sender_full_name": "Shnatsel",
        "timestamp": 1550426712
    },
    {
        "content": "<p>heh fun... almost thought it might be useful to me but I was thinking <code>no_std</code> which that crate definitely isn't</p>",
        "id": 158759945,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1550439241
    },
    {
        "content": "<p>Okay, so the initial implementation is in. Currently parses a hardcoded string, but the generated code should at least compile and maybe even find some bugs.</p>",
        "id": 158760233,
        "sender_full_name": "Shnatsel",
        "timestamp": 1550439731
    },
    {
        "content": "<p>It's too early to actually try using it, but hey, at least I'm making progress and shouldn't face any more legal hurdles</p>",
        "id": 158760525,
        "sender_full_name": "Shnatsel",
        "timestamp": 1550440297
    },
    {
        "content": "<p>In other fuzzing-related news: <code>png</code> crate authors didn't implement fuzzing on CI, so the crate has regressed and you can OOM-crash it again. <a href=\"https://github.com/PistonDevelopers/image-png/issues/103\" target=\"_blank\" title=\"https://github.com/PistonDevelopers/image-png/issues/103\">https://github.com/PistonDevelopers/image-png/issues/103</a><br>\nAnd I've dug up another vulnerability on rustc bug tracker that should have got a CVE, but didn't. Reported to Rust security team.</p>",
        "id": 158760633,
        "sender_full_name": "Shnatsel",
        "timestamp": 1550440523
    },
    {
        "content": "<p>orly</p>",
        "id": 158760892,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1550440962
    },
    {
        "content": "<p>I kid you not</p>",
        "id": 158834167,
        "sender_full_name": "Shnatsel",
        "timestamp": 1550529760
    },
    {
        "content": "<p>Also, this project is looking for a name: <a href=\"https://github.com/Eh2406/auto-fuzz-test/issues/2\" target=\"_blank\" title=\"https://github.com/Eh2406/auto-fuzz-test/issues/2\">https://github.com/Eh2406/auto-fuzz-test/issues/2</a></p>",
        "id": 158834182,
        "sender_full_name": "Shnatsel",
        "timestamp": 1550529783
    },
    {
        "content": "<p>rust fleece.  It's all sorts of fuzzy hehe</p>",
        "id": 158837469,
        "sender_full_name": "Stuart Small",
        "timestamp": 1550533703
    },
    {
        "content": "<p>for fuzzing there's also <a href=\"http://fuzz.rs\" target=\"_blank\" title=\"http://fuzz.rs\">fuzz.rs</a> (<a href=\"https://fuzz.rs/book/introduction.html\" target=\"_blank\" title=\"https://fuzz.rs/book/introduction.html\">https://fuzz.rs/book/introduction.html</a>) - not sure if it was mentioned</p>",
        "id": 158900580,
        "sender_full_name": "Gerardo Di Giacomo",
        "timestamp": 1550597780
    },
    {
        "content": "<p>I'm planning on adding a section to that explaining how to use arbitrary in fuzz tests.  I wanna get a little more practice with it first so I don't add bad docs</p>",
        "id": 158902104,
        "sender_full_name": "Stuart Small",
        "timestamp": 1550598867
    },
    {
        "content": "<p>Using <code>Arbitrary</code> is exactly the approach I'm taking with the automated generator. I'm not sure if it's worth the trouble in case you have 1-2 harnesses, though. It's probably easier to construct the data type ad-hoc instead of bringing in all the complexity of Arbitrary, most of which is not necessary anyway.</p>",
        "id": 158909569,
        "sender_full_name": "Shnatsel",
        "timestamp": 1550603422
    },
    {
        "content": "<p>\"fleece\" is cool but both \"cargo fleece\" and \"fleece fuzz\" GOogle searches produce over a million results</p>",
        "id": 158909904,
        "sender_full_name": "Shnatsel",
        "timestamp": 1550603665
    },
    {
        "content": "<p>libfuzzer already has an automated generator, why not using that ?</p>",
        "id": 158912178,
        "sender_full_name": "Gerardo Di Giacomo",
        "timestamp": 1550605279
    },
    {
        "content": "<p>Huh? Automated generator of what? Last time I checked <code>cargo-fuzz</code> only created a project template, similar to <code>cargo new</code>. Did I overlook something?</p>",
        "id": 158912581,
        "sender_full_name": "Shnatsel",
        "timestamp": 1550605528
    },
    {
        "content": "<p>I've been using both afl and libfuzzer (mostly for testing for now - nothing serious), libfuzzer doesn't require a corpus to start working, but you can provide one and then it does the mutations (like afl)</p>",
        "id": 158920047,
        "sender_full_name": "Gerardo Di Giacomo",
        "timestamp": 1550611266
    },
    {
        "content": "<p>as far as names, how about the name of a fuzzy crab? :P <a href=\"https://en.wikipedia.org/wiki/Pilumnus_hirtellus\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Pilumnus_hirtellus\">https://en.wikipedia.org/wiki/Pilumnus_hirtellus</a></p>",
        "id": 158920280,
        "sender_full_name": "Gerardo Di Giacomo",
        "timestamp": 1550611465
    },
    {
        "content": "<p>or <a href=\"https://en.wikipedia.org/wiki/Kiwa_hirsuta\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Kiwa_hirsuta\">https://en.wikipedia.org/wiki/Kiwa_hirsuta</a></p>",
        "id": 158920293,
        "sender_full_name": "Gerardo Di Giacomo",
        "timestamp": 1550611495
    },
    {
        "content": "<p>Oh yeah, it's not about generating the corpus, afl/libfuzzer/honggfuzz handle that already. It's about generating the glue code that reads bytes from afl/libfuzzer/honggfuzz and feeds them to the function you want to fuzz, automatically and for every function in the library.</p>",
        "id": 158920815,
        "sender_full_name": "Shnatsel",
        "timestamp": 1550611906
    },
    {
        "content": "<p>\"Hirtellus\" is pretty uniqie, \"cargo hirtellus\" or \"hirtellus fuzz\" don't turn up many results. Googling \"hirtellus\" alone turns up a ton of results for a plant, though.</p>",
        "id": 158921199,
        "sender_full_name": "Shnatsel",
        "timestamp": 1550612218
    },
    {
        "content": "<p>\"fuzzbiglib\" without quotes is 0 results, so that's also an option</p>",
        "id": 158921235,
        "sender_full_name": "Shnatsel",
        "timestamp": 1550612256
    },
    {
        "content": "<p>I wonder if there is a library pun in here somewhere? I have no clue what book storage procedures look like, though.</p>",
        "id": 158921306,
        "sender_full_name": "Shnatsel",
        "timestamp": 1550612291
    },
    {
        "content": "<p>the best I've got is \"fuzzandria\" which is 2 results in google without quotes</p>",
        "id": 158921349,
        "sender_full_name": "Shnatsel",
        "timestamp": 1550612340
    },
    {
        "content": "<blockquote>\n<p>Oh yeah, it's not about generating the corpus, afl/libfuzzer/honggfuzz handle that already. It's about generating the glue code that reads bytes from afl/libfuzzer/honggfuzz and feeds them to the function you want to fuzz, automatically and for every function in the library.</p>\n</blockquote>\n<p>understood</p>",
        "id": 158922030,
        "sender_full_name": "Gerardo Di Giacomo",
        "timestamp": 1550612875
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> have you tried to upgrade libfuzzer to master with cargo fuzz?</p>",
        "id": 158931332,
        "sender_full_name": "Gerardo Di Giacomo",
        "timestamp": 1550620432
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> why do you think nobody runs fuzzing on CI, is it too cumbersome or something?</p>",
        "id": 159040703,
        "sender_full_name": "maksimsco",
        "timestamp": 1550724591
    },
    {
        "content": "<p>is it maybe to do with wanting repeatable test results (which fuzzing generally isn't if you randomise generation), or that you have a different interpretation of \"test failure\" (where someone needs to look over results)?  Unless you can have a relatively simple criterion (fuzz for N mins with no panics), it doesn't fit CI workflow well.</p>",
        "id": 159041070,
        "sender_full_name": "Daniel Carosone",
        "timestamp": 1550725157
    },
    {
        "content": "<p>to put it another way, perhaps CI is not a good place for a project to <em>start</em> fuzzing. Maybe once they've got a mature set of cases and robust error handling, they can CI fuzzing for regressions.</p>",
        "id": 159041164,
        "sender_full_name": "Daniel Carosone",
        "timestamp": 1550725232
    },
    {
        "content": "<p>I think the clusterfuzz model of continuous fuzzing that's seperate from CI, and then running all your regression test cases in CI makes more sense personally.</p>",
        "id": 159041316,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1550725460
    },
    {
        "content": "<p>A quick update: still working on <a href=\"https://github.com/Eh2406/auto-fuzz-test\" target=\"_blank\" title=\"https://github.com/Eh2406/auto-fuzz-test\">https://github.com/Eh2406/auto-fuzz-test</a> on and off, but the progress is slow. There is a fork that adds a bunch of useful stuff, I need to drop the latest commit from it which is kinda misguided and then pull it in.</p>",
        "id": 163866125,
        "sender_full_name": "Shnatsel",
        "timestamp": 1555878338
    },
    {
        "content": "<p>Also maybe comment the code better to make it more approachable, it's kind of a mess right now.</p>",
        "id": 163866156,
        "sender_full_name": "Shnatsel",
        "timestamp": 1555878363
    }
]