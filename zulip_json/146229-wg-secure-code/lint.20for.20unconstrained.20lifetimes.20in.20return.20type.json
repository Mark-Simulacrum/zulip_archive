[
    {
        "content": "<p>BTW, <span class=\"user-mention\" data-user-id=\"235180\">@Jack Moffitt</span> was telling me recently about a lint that he developed for a specific bug that was found in Libra. I'm not sure whether he's tried to upstream said lint somewhere, but I thought I would raise it here, as I thought some of the folks in this stream would be interested. Maybe <span class=\"user-mention\" data-user-id=\"235180\">@Jack Moffitt</span> can provide more details though =) </p>\n<p>Apologies if this is already well known</p>",
        "id": 183656139,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576594971
    },
    {
        "content": "<p>The pattern in question was something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">AsRef</span><span class=\"o\">&lt;</span><span class=\"kt\">str</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"na\">&#39;a</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>which <em>looks</em> like the <code>'a</code> in the return type is \"constrained\" to the lifetime of the data in <code>x</code>, but doesn't actually have that effect all of the time (e.g., <code>x</code> could be a <code>String</code>, in which case any reference to the data in <code>x</code> would be dangling upon return).</p>",
        "id": 183656222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576595034
    },
    {
        "content": "<p>I did an audit of the first party unsafe code in libra/libra. I totally missed that the <code>'a</code> in that signature could be unbound, which David Tolnay thankfully caught in this PR: <a href=\"https://github.com/libra/libra/pull/1949\" target=\"_blank\" title=\"https://github.com/libra/libra/pull/1949\">https://github.com/libra/libra/pull/1949</a></p>\n<p>After talking with <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I decided to try writing a lint to catch this case. The PR to rust-clippy can be found here: <a href=\"https://github.com/rust-lang/rust-clippy/pull/4908\" target=\"_blank\" title=\"https://github.com/rust-lang/rust-clippy/pull/4908\">https://github.com/rust-lang/rust-clippy/pull/4908</a></p>",
        "id": 183660817,
        "sender_full_name": "Jack Moffitt",
        "timestamp": 1576597823
    },
    {
        "content": "<p>Awesome! A capacbility it feels like we should have is:<br>\na) The ability to select only clippy \"security\" lints<br>\nb) Something like crater for clippy security lints</p>",
        "id": 183684876,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1576612415
    },
    {
        "content": "<p>Many correctness lints already fall into that category. Like pointer casts that violate size or alignment constraints.</p>",
        "id": 183687673,
        "sender_full_name": "Shnatsel",
        "timestamp": 1576614252
    },
    {
        "content": "<p>I expect the deny-by-default lints already encode something similar - critically broken code that should be flat out prohibited</p>",
        "id": 183687780,
        "sender_full_name": "Shnatsel",
        "timestamp": 1576614336
    },
    {
        "content": "<p>The required categorization may already exist, I haven't explored clippy's configuration deeply.</p>",
        "id": 183687846,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1576614366
    },
    {
        "content": "<p>I like the idea of rustwide + Clippy deny-by-default lints, I have to admit. <br>\n<a href=\"https://github.com/rust-lang/rustwide\" target=\"_blank\" title=\"https://github.com/rust-lang/rustwide\">https://github.com/rust-lang/rustwide</a> makes it pretty easy.</p>",
        "id": 183687894,
        "sender_full_name": "Shnatsel",
        "timestamp": 1576614410
    },
    {
        "content": "<p>yeah really liking Rustwide. It's what I'm using to try to drive reproducible builds</p>",
        "id": 183688108,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1576614571
    }
]