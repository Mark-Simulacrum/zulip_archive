[
    {
        "content": "<p>Was there any dicussion about mitigations (specifically Control Flow Enforcement)?<br>\nI've been talking to product teams here and, because of the slow adoption, these teams would start with linking Rust components with C/C++ ones. The problem now is that Rust doesn't support CFE so any binary which includes Rust code will have weakened mitigations.</p>",
        "id": 136937149,
        "sender_full_name": "snf",
        "timestamp": 1541093912
    },
    {
        "content": "<p>We explicitly decided to leave it out of our mission and instead focus on language-level safety, but I'm sure nobody would mind if you wanted to work on it!</p>",
        "id": 136937225,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1541094001
    },
    {
        "content": "<p>Actually that's the idea, but I wanted to know if there were any discussions about it. Thanks.</p>",
        "id": 136938272,
        "sender_full_name": "snf",
        "timestamp": 1541094859
    },
    {
        "content": "<p>np</p>",
        "id": 136939725,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1541096082
    },
    {
        "content": "<p>You're thinking about LLVM's CFI specifically?</p>",
        "id": 136939902,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1541096269
    },
    {
        "content": "<p>Actually I'm thinking in Windows CFI because that's my main interest and make it Visual C++ compatible. LLVM's CFI uses Intel's one which hasn't been realeased yet. Last time I checked, Clang didn't rely on LLVM's CFI neither.</p>",
        "id": 137042291,
        "sender_full_name": "snf",
        "timestamp": 1541170221
    },
    {
        "content": "<p>Err, that's not correct; LLVM's CFI is entirely software based, and it's what clang's <code>-fsanitize=cfi</code> uses. And Windows CFG requires you to compile with MSVC to have jumps in your code protected, so I don't think that's an option (you can just use a linker flag if all you need is for Rust functions to be valid CFG call targets)</p>",
        "id": 137048572,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1541171608
    },
    {
        "content": "<p>Oops, you are right about LLVM, haven't touched it in years and only saw the recent HW implementation only.<br>\nHowever, what I'm talking about is modifying rustc and LLVM to emit information for MSVC's linker to generate fully protected binaries. I guess that mainstreaming changes like this will be challenging though.</p>",
        "id": 146787231,
        "sender_full_name": "snf",
        "timestamp": 1541413609
    },
    {
        "content": "<p>It seems that there's two steps: a) just enabling CFG at the linker, which should just be a flag, b) actually doing the codegen for checking the valid jump targets. For (b) you  probably want LLVM's CFI, not CFG (at least for fully statically linked binaries).</p>",
        "id": 146796408,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1541426085
    }
]