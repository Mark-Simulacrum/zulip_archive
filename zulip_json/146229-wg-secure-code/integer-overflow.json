[
    {
        "content": "<p>So to kick off some brainstorming... the combination of integer-overflows and unsafe code seems to be a relatively common source of vulnerabilities in unsafe code. This was the cause of the recent <code>str::repeat</code> issue, it was the cause of  the vulnerability in <code>base64</code>, and it's popped up a few times in some rust code review I've been doing.</p>\n<p>It seems like there's two clear solutions: a) safe abstractions so that people don't have unsafe code, b) abstractions for allocation size computations so that  people aren't doing their own arithmetic. I imagine (a) will be a common theme as we figure out what all those patterns are. (b) is interesting. I wonder if there's any general solutions to the  integer-overflow + unsafe  code problem?</p>",
        "id": 135943946,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1539742015
    },
    {
        "content": "<p>(b) feels like there will be a (relative) explosion in use as more allocation-related pieces get closer to stabilization</p>",
        "id": 135944004,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1539742087
    },
    {
        "content": "<p>Could you provide a tiny concrete example of the problem? I'm only tangentially familiar with the details behind <code>str::repeat</code> and missed the base64 one.</p>",
        "id": 135944044,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1539742173
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/stable/std/alloc/struct.Layout.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/stable/std/alloc/struct.Layout.html\">https://doc.rust-lang.org/stable/std/alloc/struct.Layout.html</a> does exist, but it's difficult to imagine people use this for things like \"compute <code>Vec</code> length\", where a simple multiplication is a lot shorter</p>",
        "id": 135944052,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1539742198
    },
    {
        "content": "<p>The integer overflow issue is what got me involved.</p>",
        "id": 135944142,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1539742297
    },
    {
        "content": "<p>Sure, the basic problem is that <code>str::repeat</code> did <code>let mut new_data = vec![self.len() * n; 0]</code> and then wrote to <code>new_data</code> using <code>unsafe</code>. If <code>self.len() * n</code> overflows you allocate a smaller space than expected, and your writes go off the end of the array.</p>",
        "id": 135944147,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1539742311
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/54399/files#diff-773807740b9d7f176c85b4e2e34b2607L420\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/54399/files#diff-773807740b9d7f176c85b4e2e34b2607L420\">https://github.com/rust-lang/rust/pull/54399/files#diff-773807740b9d7f176c85b4e2e34b2607L420</a></p>",
        "id": 135944194,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1539742346
    },
    {
        "content": "<p>Our particular problem is that we need to allocate and fill structures that interface with the kernel. These structures tend to end with an unsized array.</p>",
        "id": 135944197,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1539742347
    },
    {
        "content": "<p>varsize structs seems like they should just have a safe allocation API. They're generated by bindgen right?</p>",
        "id": 135944224,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1539742441
    },
    {
        "content": "<p>I'll throw the strawman proposal  (c) out there: <em>always</em> enable overflow checks.</p>",
        "id": 135944262,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1539742472
    },
    {
        "content": "<p><a href=\"https://elixir.bootlin.com/linux/latest/source/arch/x86/include/uapi/asm/kvm.h#L182\" target=\"_blank\" title=\"https://elixir.bootlin.com/linux/latest/source/arch/x86/include/uapi/asm/kvm.h#L182\">https://elixir.bootlin.com/linux/latest/source/arch/x86/include/uapi/asm/kvm.h#L182</a></p>",
        "id": 135944271,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1539742490
    },
    {
        "content": "<p>^ As an example of one such structure</p>",
        "id": 135944272,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1539742496
    },
    {
        "content": "<blockquote>\n<p>I'll throw the strawman proposal  (c) out there: <em>always</em> enable overflow checks.</p>\n</blockquote>\n<p>That's what we're experimenting with now in crosvm at least.</p>",
        "id": 135944280,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1539742517
    },
    {
        "content": "<p>It seems unlikely that Rust will go that way until the cost is brought down, much as it'd totally solve this problem.</p>",
        "id": 135944330,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1539742582
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132723\">@Zach Reizner</span> you generate the rust versions of these with bindgen right?</p>",
        "id": 135944339,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1539742600
    },
    {
        "content": "<p>That's right</p>",
        "id": 135944354,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1539742638
    },
    {
        "content": "<p>(AFK now, getting pulled away)</p>",
        "id": 135944359,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1539742649
    },
    {
        "content": "<p>Hmm, does Rust even have native support for var-sized structs with inline arrays, or is bindgen doing some hack to represent them? This case feels like it deserves a safe-allocation API.</p>",
        "id": 135944423,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1539742744
    },
    {
        "content": "<p>For crosvm, we check in generated bindgen code</p>",
        "id": 135944455,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1539742785
    },
    {
        "content": "<p>So possibly we are using out of date bindings</p>",
        "id": 135944459,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1539742800
    },
    {
        "content": "<p>But it uses a generated incomplete array type to do zero length types inline</p>",
        "id": 135944515,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1539742843
    },
    {
        "content": "<p>It has no allocation API that I'm aware of.</p>",
        "id": 135944524,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1539742855
    },
    {
        "content": "<p>To spitball another idea: a clippy lint that detected unchecked arithmetic that flowed into an allocation API. That'd have caught <code>str::repeat</code>, not <code>base64</code> though (the allocation computation is in a separate function).</p>",
        "id": 135944531,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1539742871
    },
    {
        "content": "<p>Ok. Proposing an allocation API in bindgen seems like a good outcome.</p>",
        "id": 135944537,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1539742898
    },
    {
        "content": "<p>That would help but it would not be sufficient for a safe API</p>",
        "id": 135944724,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1539743153
    },
    {
        "content": "<p>You would have to make sure that the count field in the structure agrees with the allocation</p>",
        "id": 135944777,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1539743180
    },
    {
        "content": "<p>I'm not sure you can solve that part in a general-purpose way -- I don't think bindgen has any way of knowing which field is the length (if there is one!)</p>",
        "id": 135944804,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1539743242
    },
    {
        "content": "<p>Maybe we could use some kind of annotation</p>",
        "id": 135944870,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1539743315
    },
    {
        "content": "<p>What about something akin to how <code>calloc</code> takes two arguments: one for element size and one for count? Then <em>that</em> math could always be checked.</p>",
        "id": 135945244,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1539743930
    },
    {
        "content": "<p>I've wished there was an <code>AbortOnOverflow</code> in the same way there's <code>Wrapping</code></p>",
        "id": 135973040,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1539783315
    },
    {
        "content": "<p>right now abort-on-overflow semantics are... not very ergonomic</p>",
        "id": 135973052,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1539783331
    },
    {
        "content": "<p>I intend on replacing these with a proper <code>Accumulator</code> type but... ick <a href=\"https://github.com/iqlusioninc/crates/blob/master/subtle-encoding/src/macros.rs\" target=\"_blank\" title=\"https://github.com/iqlusioninc/crates/blob/master/subtle-encoding/src/macros.rs\">https://github.com/iqlusioninc/crates/blob/master/subtle-encoding/src/macros.rs</a></p>",
        "id": 135973128,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1539783385
    },
    {
        "content": "<p>incidentally, it has always been the <em>intention</em> that code can locally enable stricter overflow checks (e.g., libstd might do this) — I know that some of the layout code in FF does this — does that seem relevant?</p>",
        "id": 135979503,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539789889
    },
    {
        "content": "<p>right now I think that is a bit difficult to do though</p>",
        "id": 135979509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539789898
    },
    {
        "content": "<p>or at least not as elegant as originally envisioned</p>",
        "id": 135979520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539789906
    },
    {
        "content": "<p>Is there some feature for this I don't know about?</p>",
        "id": 135986050,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1539795925
    },
    {
        "content": "<p><code>#[overflow(abort)]</code> or thereabouts would be great</p>",
        "id": 135986070,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1539795945
    },
    {
        "content": "<p>I basically want the debug overflow behavior in release builds</p>",
        "id": 135986124,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1539795967
    },
    {
        "content": "<p>If you want that, you can have it</p>",
        "id": 135986132,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1539795983
    },
    {
        "content": "<p>but... selectively</p>",
        "id": 135986140,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1539795991
    },
    {
        "content": "<p>I guess the stuff I expect to wrap is explicitly <code>Wrapping</code></p>",
        "id": 135986153,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1539796005
    },
    {
        "content": "<p>so if that still works, and I get debug overflow on release everywhere else, that'd be great</p>",
        "id": 135986156,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1539796016
    },
    {
        "content": "<p><a href=\"https://stackoverflow.com/questions/34054669/how-to-compile-and-run-an-optimized-rust-program-with-overflow-checking-enabled\" target=\"_blank\" title=\"https://stackoverflow.com/questions/34054669/how-to-compile-and-run-an-optimized-rust-program-with-overflow-checking-enabled\">https://stackoverflow.com/questions/34054669/how-to-compile-and-run-an-optimized-rust-program-with-overflow-checking-enabled</a></p>",
        "id": 135986157,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1539796016
    },
    {
        "content": "<p>JIC you were not aware</p>",
        "id": 135986162,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1539796024
    },
    {
        "content": "<p>oof, well I use <code>debug_assertions</code> to gate other stuff I don't want in release builds</p>",
        "id": 135986188,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1539796049
    },
    {
        "content": "<p><code>#[overflow(abort)]</code> at <code>fn</code>-level granularity would be great</p>",
        "id": 135986257,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1539796118
    },
    {
        "content": "<p>Oh, let me update that answer; <code>-C overflow-checks</code> exists now</p>",
        "id": 135986268,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1539796132
    },
    {
        "content": "<p>I agree about the fn level, but probably need to decide how it affects called functions</p>",
        "id": 135986289,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1539796166
    },
    {
        "content": "<p>nice re: -C overflow-checks</p>",
        "id": 135988018,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1539797801
    },
    {
        "content": "<p>An overflow attribute applied to modules or at fn-level would be nice. I've certainly had times where I wanted that.</p>",
        "id": 136001015,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1539810573
    },
    {
        "content": "<p>I don't think it makes sense for it to effect called functions. Thinking inductively, if you're in a position where an overflow in your called functions can hurt you in this function, you're fixing the wrong function.</p>",
        "id": 136001210,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1539810725
    },
    {
        "content": "<p>For example, I'm not concerned with functions like Vec::with_capacity overflowing because I trust them to check the input parameters</p>",
        "id": 136001237,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1539810784
    },
    {
        "content": "<p>I think that that attribute can also be linted against with respect to unsafe code. That is, unsafe code that does not have overflow protection in some form (Wrapping, -C overflow checks, #[overflow(abort)]) should throw up a warning on arithmetic.</p>",
        "id": 136001351,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1539810907
    },
    {
        "content": "<p>I was reluctant about adding -C overflow to crosvm this week because I was afraid of performance regressions, but I would have enabled it in a heartbeat on some of our scarier unsafe modules.</p>",
        "id": 136001487,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1539811046
    },
    {
        "content": "<p>What about functions which operate on integers but also return them? E.g., as a silly stramwn, a <code>fn mul(a: usize, b: usize) -&gt; usize</code></p>",
        "id": 136001497,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1539811067
    },
    {
        "content": "<p>The author of <code>mul</code> is probably OK with overflow, and so doesn't check for it</p>",
        "id": 136001501,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1539811079
    },
    {
        "content": "<p>But the consumer probably doesn't want overflow.</p>",
        "id": 136001542,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1539811085
    },
    {
        "content": "<p>That's the exact pattern in base64. <code>compute_size</code> had the overflow, but the actual flow into <code>String::with_capacity()</code> was elsewhere.</p>",
        "id": 136001580,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1539811135
    },
    {
        "content": "<p>What is <code>compute_size</code> supposed to do? Because I'd argue that, if it does what I expect based on the name, it'd make more sense for it to return <code>Option&lt;usize&gt;</code> and be responsible for checking overflow.</p>",
        "id": 136001672,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1539811209
    },
    {
        "content": "<p>That was the fix for the security issue, yes :-)</p>",
        "id": 136001701,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1539811250
    },
    {
        "content": "<p>Could you link that overflow bug for base64 compute_size for reference?</p>",
        "id": 136001706,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1539811260
    },
    {
        "content": "<p><a href=\"https://github.com/alicemaz/rust-base64/commit/24ead980daf11ba563e4fb2516187a56a71ad319\" target=\"_blank\" title=\"https://github.com/alicemaz/rust-base64/commit/24ead980daf11ba563e4fb2516187a56a71ad319\">https://github.com/alicemaz/rust-base64/commit/24ead980daf11ba563e4fb2516187a56a71ad319</a></p>",
        "id": 136001735,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1539811302
    },
    {
        "content": "<p>Thanks</p>",
        "id": 136001788,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1539811345
    },
    {
        "content": "<p>So it looks like the unsafe is in the same module as the integer overflow.</p>",
        "id": 136001920,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1539811530
    },
    {
        "content": "<p>I think a lint or mod level #![overflow(abort)] would have caught that.</p>",
        "id": 136001986,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1539811571
    },
    {
        "content": "<p>Or would have if that existed :P</p>",
        "id": 136002002,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1539811588
    },
    {
        "content": "<p>It strikes me that there's a fundamental issue here, which is that <code>unsafe</code> code is not supposed to rely on safe code to be correct.</p>",
        "id": 136002019,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1539811618
    },
    {
        "content": "<p>In this case, you're right that a mod level attribute would have done it, but what about <code>unsafe</code> code which uses another crate like the strawman <code>offset_utils</code>, which provides safe functions that do the math?</p>",
        "id": 136002049,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1539811663
    },
    {
        "content": "<p>I don't have a great answer for that.</p>",
        "id": 136002209,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1539811821
    },
    {
        "content": "<p>Does cargo provide a way to set a compilation option for a specific dependency?</p>",
        "id": 136002233,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1539811864
    },
    {
        "content": "<p>In fairness, that example demonstrates a broader issue: even if overflow is fixed, there's nothing to prevent that crate from providing non-overflowing but still wrong results that would still be just as bad for soundness.</p>",
        "id": 136002247,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1539811871
    },
    {
        "content": "<p>My hot take is that we can't make it impossible to make unsafe code that will backfire, but it should at least be as obvious as possible.</p>",
        "id": 136002253,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1539811881
    },
    {
        "content": "<p>That's a reasonable hot take.</p>",
        "id": 136002256,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1539811891
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130046\">@Alex Gaynor</span> No, I don't think it does.</p>",
        "id": 136002258,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1539811898
    },
    {
        "content": "<p>I suppose such crates could manually provide Cargo features to do the same, though.</p>",
        "id": 136002262,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1539811916
    },
    {
        "content": "<p>What scared me was that I was pretty confident about the quality of our unsafe code, but there was the hidden Spectre of unchecked overflow</p>",
        "id": 136002309,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1539811941
    },
    {
        "content": "<p>Just filed <a href=\"https://github.com/rust-lang-nursery/rust-bindgen/issues/1423\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/rust-bindgen/issues/1423\">https://github.com/rust-lang-nursery/rust-bindgen/issues/1423</a> to start the discussion on the bindgen side.</p>",
        "id": 136002323,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1539811972
    },
    {
        "content": "<p>However, if someone tried to submit unsafe code that depended on a lot of outer module math, I'd ask them how confident they were in that outer module.</p>",
        "id": 136002342,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1539812003
    },
    {
        "content": "<p>I wonder how reasonable it would be to advance a best practice of having <code>unsafe</code> code only rely on other code from the same crate or code from std/core?</p>",
        "id": 136002417,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1539812052
    },
    {
        "content": "<p>I think that would make using FFI too hard.</p>",
        "id": 136002464,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1539812111
    },
    {
        "content": "<p>Sorry, I should amend: <code>unsafe</code> code should only rely on code from other crates if that code is also <code>unsafe</code>, and thus the implementor has also opted in to reasoning about memory safety themselves.</p>",
        "id": 136002506,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1539812157
    },
    {
        "content": "<p>Does that address the concern about FFI?</p>",
        "id": 136002549,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1539812165
    },
    {
        "content": "<p>I think that idea is worth considering.</p>",
        "id": 136002605,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1539812231
    },
    {
        "content": "<p>Although I suppose the counter-point is that we shouldn't be encouraging authors to write <code>unsafe</code> APIs.</p>",
        "id": 136002633,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1539812271
    },
    {
        "content": "<p>E.g., I've been working recently on some utilities to add automatic allocation, freeing, and reference counting to C types. That has a partially-<code>unsafe</code> API for the bits that the FFI has to plug in, but it provides a safe API for most of its operations. In turn, I use it from <code>unsafe</code> code.</p>",
        "id": 136002724,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1539812351
    },
    {
        "content": "<p>Is there any precedent for giving core/std extra levels of trust? That seems unfair to other high quality crates.</p>",
        "id": 136002728,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1539812354
    },
    {
        "content": "<p>I guess not. That's a fair point about other high quality crates.</p>",
        "id": 136002740,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1539812373
    },
    {
        "content": "<p>(not to tangent this stream too much, but was there an existing proposal to have a curated set of such high quality crates)</p>",
        "id": 136002829,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1539812428
    },
    {
        "content": "<p>Yeah, I've got concerns about such an idea. I'm worried it'll stagnate the ecosystem too much.</p>",
        "id": 136002859,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1539812454
    },
    {
        "content": "<p>I like the idea, but you bring up a very good point.</p>",
        "id": 136002893,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1539812485
    },
    {
        "content": "<p>In general, I think we should prefer technical solutions over social ones if we can find them. Social solutions tend to have ramifications which are harder to predict and harder to control.</p>",
        "id": 136002961,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1539812524
    },
    {
        "content": "<p>Plus, it's easier to reason about the extent to which technical solutions will solve the target problem.</p>",
        "id": 136002973,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1539812545
    },
    {
        "content": "<p>And even applying the high quality label can be concerning. Zlib2's website is a gigantic list of CVEs, libssh2 had a pretty bad bug this week, and even libstd has it's growing collecting of CVEs</p>",
        "id": 136002980,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1539812563
    },
    {
        "content": "<blockquote>\n<p>not to tangent this stream too much,</p>\n</blockquote>\n<p>Remember you can make new zulip threads very easy ;-)</p>",
        "id": 136002993,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1539812580
    },
    {
        "content": "<p>Yeah, that's a good point.</p>",
        "id": 136002994,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1539812581
    },
    {
        "content": "<p>(libssh, not libssh2, I think?)</p>",
        "id": 136003015,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1539812611
    },
    {
        "content": "<p>Sorry, you're correct.</p>",
        "id": 136003066,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1539812649
    },
    {
        "content": "<p>(that was directed at Jake and Alex)</p>",
        "id": 136003077,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1539812665
    },
    {
        "content": "<blockquote>\n<p>It strikes me that there's a fundamental issue here, which is that <code>unsafe</code> code is not supposed to rely on safe code to be correct.</p>\n</blockquote>\n<p>This is too strong. But it's true that the code which unsafe code <em>uses</em> is part of its TCB. But as an extreme example I think it's right and proper for unsafe code to rely on <code>Vec</code>.</p>",
        "id": 136064209,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539889245
    },
    {
        "content": "<p>I would say something like \"unsafe code should be clear about which other code it relies upon and what it requires of that code\"</p>",
        "id": 136064257,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539889291
    },
    {
        "content": "<p>Right.</p>",
        "id": 136064267,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1539889299
    },
    {
        "content": "<p>It's just made confusing by the fact that, e.g., the following is generally considered unsound because it doesn't compose well with the space of all safe code: <code>pub fn deref&lt;T&gt;(ptr: usize) -&gt; &amp;T { ... }</code></p>",
        "id": 136064397,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1539889424
    },
    {
        "content": "<p>In other words, there's at least part of the API surface of unsafe code which is supposed to be robust against <em>arbitrary</em> safe code.</p>",
        "id": 136064400,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1539889426
    },
    {
        "content": "<p>It's probably worth trying to make that explicit - which parts need to be robust against arbitrary safe code, and which parts are allowed to call the safe code part of the TCB?</p>",
        "id": 136064454,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1539889451
    },
    {
        "content": "<blockquote>\n<p><code>#[overflow(abort)]</code> at <code>fn</code>-level granularity would be great</p>\n</blockquote>\n<p><a href=\"https://github.com/llogiq/overflower\" target=\"_blank\" title=\"https://github.com/llogiq/overflower\">https://github.com/llogiq/overflower</a> does pretty much this</p>",
        "id": 136067962,
        "sender_full_name": "Shnatsel",
        "timestamp": 1539893056
    },
    {
        "content": "<p>Looks like the bindgen folks are up for providing an allocation API for varsized structs: <a href=\"https://github.com/rust-lang-nursery/rust-bindgen/issues/1423\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/rust-bindgen/issues/1423\">https://github.com/rust-lang-nursery/rust-bindgen/issues/1423</a> <span class=\"emoji emoji-1f389\" title=\"tada\">:tada:</span> If anyone wants to run with this, go for it, otherwise I'll probably pick it up in a week or two.</p>",
        "id": 136068735,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1539893828
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> That's really cool. I hadn't seen that before.</p>",
        "id": 136068838,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1539893907
    },
    {
        "content": "<p>Sadly it's nightly only and will probably stay that way. A.k.a. it's a no-go for actual production code.</p>",
        "id": 136068861,
        "sender_full_name": "Shnatsel",
        "timestamp": 1539893938
    },
    {
        "content": "<blockquote>\n<p>And even applying the high quality label can be concerning. Zlib2's website is a gigantic list of CVEs, libssh2 had a pretty bad bug this week, and even libstd has it's growing collecting of CVEs</p>\n</blockquote>\n<p>I have been (tangentially) involved in both Rust libstd CVEs, and based on what I've seen, libstd is going to get a lot more CVEs as soon as someone decides to actually audit or fuzz it. It doesn't have more CVEs against it due to lack of auditing, not due to lack of vulnerabilities in it.</p>\n<p>This led me to contemplate automatically generating fuzz harnesses for stateless stdlib functions. I've written <a href=\"https://gist.github.com/Shnatsel/4a907d44d6429de93d63d6e7c4d1361e\" target=\"_blank\" title=\"https://gist.github.com/Shnatsel/4a907d44d6429de93d63d6e7c4d1361e\">a prototype</a> with just the vulnerable function where only 3 lines are function-specific, without any auto-generation for now, but it fails to discover the issue on my machine - probably because only one billionth of the 64-bit address space is actually sensible, everything else gets you an OOM crash. I need to try this in a 32-bit chroot, it will probably crash there, but I didn't get around to it. There is <a href=\"https://github.com/blt/bughunt-rust/commit/c34fe102718a072078a1467f2ed037cc358c4bd9\" target=\"_blank\" title=\"https://github.com/blt/bughunt-rust/commit/c34fe102718a072078a1467f2ed037cc358c4bd9\">an alternative take</a> on the str::repeat fuzz harness, not sure if that detects the bug though.</p>\n<p>Anyway, I will figure out the individual fuzz harness on my own. I could use some help with auto-generating code based on stdlib function definitions. The task is fairly trivial, but I've never used <code>syn</code> before, and didn't get a chance to spend some time figuring it out yet.</p>",
        "id": 136069117,
        "sender_full_name": "Shnatsel",
        "timestamp": 1539894239
    },
    {
        "content": "<blockquote>\n<p>Anyway, I will figure out the individual fuzz harness on my own. I could use some help with auto-generating code based on stdlib function definitions. The task is fairly trivial, but I've never used <code>syn</code> before, and didn't get a chance to spend some time figuring it out yet.</p>\n</blockquote>\n<p><code>syn</code> and <code>quote</code> are ok once you work an example or two.</p>",
        "id": 136069332,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1539894410
    },
    {
        "content": "<blockquote>\n<p>Looks like the bindgen folks are up for providing an allocation API for varsized structs: <a href=\"https://github.com/rust-lang-nursery/rust-bindgen/issues/1423\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/rust-bindgen/issues/1423\">https://github.com/rust-lang-nursery/rust-bindgen/issues/1423</a> <span class=\"emoji emoji-1f389\" title=\"tada\">:tada:</span> If anyone wants to run with this, go for it, otherwise I'll probably pick it up in a week or two.</p>\n</blockquote>\n<p>That's great news. It looks like the author wants someone else to write it though.</p>",
        "id": 136069412,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1539894484
    },
    {
        "content": "<p>Yeah. I'll plan to get to it it, unless someone beats me to it.</p>",
        "id": 136069448,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1539894548
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> neat</p>",
        "id": 136079617,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1539906604
    },
    {
        "content": "<p>heh, forgot about this re: <code>-C overflow-checks</code></p>",
        "id": 136117652,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1539961945
    },
    {
        "content": "<blockquote>\n<p>warning: profiles for the non root package will be ignored, specify profiles at the workspace root:</p>\n</blockquote>",
        "id": 136117663,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1539961961
    },
    {
        "content": "<p>overflower looks like it does what I want though</p>",
        "id": 136117688,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1539961988
    },
    {
        "content": "<p>oh wait, nightly-only</p>",
        "id": 136117705,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1539962009
    },
    {
        "content": "<p>Could we do an RFC to include that functionality in the stable compiler?</p>",
        "id": 136123979,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1539967883
    },
    {
        "content": "<p>I would be a big fan of that</p>",
        "id": 136124749,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1539968535
    },
    {
        "content": "<p>SMACK can also be used for auditing code for integer overflows statically, so you don't have to inject runtime checks that degrade performance: <a href=\"http://soarlab.org/publications/atva2018-bhr.pdf\" target=\"_blank\" title=\"http://soarlab.org/publications/atva2018-bhr.pdf\">http://soarlab.org/publications/atva2018-bhr.pdf</a></p>",
        "id": 136125461,
        "sender_full_name": "Shnatsel",
        "timestamp": 1539969147
    },
    {
        "content": "<p>It only works in reasonable time on standalone functions, not entire projects, but that's not really an issue since you usually want individual functions to be secure, not some functions behaving poorly but the rest of the code being structured in a way that masks that. That would be a pretty nasty non-local invariant.</p>",
        "id": 136125617,
        "sender_full_name": "Shnatsel",
        "timestamp": 1539969296
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132723\">@Zach Reizner</span> guess I'll make a topic for RFC ideas</p>",
        "id": 136125740,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1539969411
    },
    {
        "content": "<p>so, this change really is equivalent, right? /cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 147931544,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1542575836
    },
    {
        "content": "<p>aside from the specifics of how I was aborting</p>",
        "id": 147931547,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1542575845
    },
    {
        "content": "<p>because if so that's pretty awesome</p>",
        "id": 147931554,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1542575852
    },
    {
        "content": "<p><a href=\"https://github.com/iqlusioninc/crates/pull/122/files\" target=\"_blank\" title=\"https://github.com/iqlusioninc/crates/pull/122/files\">https://github.com/iqlusioninc/crates/pull/122/files</a></p>",
        "id": 147931555,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1542575857
    },
    {
        "content": "<p>particularly awesome in that it's a one-liner for an entire workspace</p>",
        "id": 147931602,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1542575913
    },
    {
        "content": "<p>it's also a little terrifying in that it's a single place someone could inadvertently shut it off for a whole workspace <span class=\"emoji emoji-1f62e\" title=\"open mouth\">:open_mouth:</span></p>",
        "id": 147931662,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1542576029
    },
    {
        "content": "<p>Write a test!</p>",
        "id": 147931663,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1542576046
    },
    {
        "content": "<p>I mean, how can I test it short of finding an integer overflow bug and exploiting it?</p>",
        "id": 147931670,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1542576068
    },
    {
        "content": "<p>I guess I could test in each crate that it's on at all</p>",
        "id": 147931672,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1542576081
    },
    {
        "content": "<p>I guess it'd need to be something in a release build</p>",
        "id": 147931682,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1542576101
    },
    {
        "content": "<p>Right, have a test that verifies that <code>usize::MAX + 1</code> panics.</p>",
        "id": 147931728,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1542576152
    },
    {
        "content": "<p>how would I test the release profile though?</p>",
        "id": 147931730,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1542576174
    },
    {
        "content": "<p>there's uhh... <code>#[lazy]</code> or whatever, but that seems like the wrong solution</p>",
        "id": 147931743,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1542576204
    },
    {
        "content": "<p>Oh hmm; does <code>cargo test</code> have a <code>--release</code> flag?</p>",
        "id": 147931744,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1542576211
    },
    {
        "content": "<p>not sure, never tried to run tests in release mode</p>",
        "id": 147931748,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1542576223
    },
    {
        "content": "<blockquote>\n<p>Oh hmm; does <code>cargo test</code> have a <code>--release</code> flag?</p>\n</blockquote>\n<p>It does</p>",
        "id": 147952697,
        "sender_full_name": "RalfJ",
        "timestamp": 1542617228
    },
    {
        "content": "<blockquote>\n<p>so, this change really is equivalent, right? /cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"132721\">@Tony Arcieri</span> btw I am not sure which change you are referring to, or what it should be equivalent <em>to</em> -- but I am in favor of allowing people to enable overflow checks on stable even in release builds.</p>\n<p>I'm less sure about them <em>disable</em> overflow checks in debug builds.</p>",
        "id": 147990222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542657289
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> </p>\n<blockquote>\n<p>This led me to contemplate automatically generating fuzz harnesses for stateless stdlib functions. I</p>\n</blockquote>\n<p>that sounds great btw =)</p>",
        "id": 147990397,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542657403
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> aah sorry, it was this PR <a href=\"https://github.com/iqlusioninc/crates/pull/122/files\" target=\"_blank\" title=\"https://github.com/iqlusioninc/crates/pull/122/files\">https://github.com/iqlusioninc/crates/pull/122/files</a></p>",
        "id": 147991692,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1542658532
    },
    {
        "content": "<p>it replaces usage of explicit <code>checked_*</code> with a workspace-wide <code>[profile.release] overflow-checks = true</code></p>",
        "id": 147991765,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1542658578
    },
    {
        "content": "<p>ah, I see</p>",
        "id": 147992356,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542659069
    },
    {
        "content": "<p>presumably you have panic=abort too</p>",
        "id": 147992358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542659072
    },
    {
        "content": "<p>sounds equiv, anyway</p>",
        "id": 147992406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542659112
    },
    {
        "content": "<p>I don't have <code>panic = abort</code> and I suppose that's notable.</p>",
        "id": 147992741,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1542659409
    },
    {
        "content": "<p>however the previous behavior was just a <code>panic</code>. an <code>abort()</code> would probably be preferred for the integer overflow cases</p>",
        "id": 147992759,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1542659438
    },
    {
        "content": "<p>the change just seemed like such an ergonomic improvement in the code I went through with it</p>",
        "id": 147992804,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1542659472
    },
    {
        "content": "<p>eliminating arithmetic macros with... normal arithmetic syntax</p>",
        "id": 147992813,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1542659489
    },
    {
        "content": "<blockquote>\n<p>I don't have <code>panic = abort</code> and I suppose that's notable.</p>\n</blockquote>\n<p>well I just saw this comment</p>\n<div class=\"codehilite\"><pre><span></span># Enable integer overflow checks in release builds\n# WARNING: DO NOT REMOVE THIS! We rely on this for abort-on-overflow semantics\n# in the event of integer arithmetic bugs.\n</pre></div>\n\n\n<p>perhaps I took \"abort\" too literally, <span class=\"user-mention\" data-user-id=\"132721\">@Tony Arcieri</span></p>",
        "id": 147992916,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542659579
    },
    {
        "content": "<p>I think ideally I'd abort instead of panic on overflow</p>",
        "id": 147995282,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1542661595
    },
    {
        "content": "<p>like if I could have an annotation that does exactly what I'd want, it'd probably be <code>#[overflow(abort)]</code> or thereabouts</p>",
        "id": 147995330,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1542661651
    },
    {
        "content": "<p>Why is integer overflow so special that it deserves an abort while other issues may panic? If anything, I'd make overflows panic and other issues about. Although a consistent policy sounds like the best option</p>",
        "id": 147997372,
        "sender_full_name": "Shnatsel",
        "timestamp": 1542663431
    },
    {
        "content": "<p>Is overflow behavior configurable on a per-crate basis? I didn't realize that.</p>",
        "id": 148001755,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1542667662
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132362\">@Joshua Liebow-Feeser</span> per-workspace basis, but yes</p>",
        "id": 148056201,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1542736959
    },
    {
        "content": "<p>in my case I consider per-workspace an advantage</p>",
        "id": 148056207,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1542736968
    },
    {
        "content": "<p>Ah, so I couldn't publish a crate on <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a> with that configuration?</p>",
        "id": 148064094,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1542744397
    },
    {
        "content": "<p>you can</p>",
        "id": 148066969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542746959
    },
    {
        "content": "<p>it's not recommended</p>",
        "id": 148066971,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542746964
    },
    {
        "content": "<p>er, not sure what exactly you are referring to actually</p>",
        "id": 148066979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542746974
    },
    {
        "content": "<p>the panic=abort vs panic=unwind setting is \"global\" -- you can force it one way or the other, but it means you won't be interoperable with crates that force the other way</p>",
        "id": 148067006,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542747002
    },
    {
        "content": "<p>I'm referring to putting the appropriate configuration in my crate's <code>Cargo.toml</code> before publishing, with the expectation that the compiler would emit overflow checks for all of the code in my crate.</p>",
        "id": 148067054,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1542747012
    },
    {
        "content": "<p>ok, you mean the overflow checks</p>",
        "id": 148067059,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542747019
    },
    {
        "content": "<p>yeah</p>",
        "id": 148067060,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1542747022
    },
    {
        "content": "<p>I'm actually .. not entirely sure how that works, but our <em>intention</em>  when discussing the overflow checks way back when was crates could opt in</p>",
        "id": 148067076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542747041
    },
    {
        "content": "<p>i.e., independently from one another</p>",
        "id": 148067084,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542747049
    },
    {
        "content": "<p>but also that it could be forced on you</p>",
        "id": 148067089,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542747055
    },
    {
        "content": "<p>OK interesting.</p>",
        "id": 148067101,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1542747065
    },
    {
        "content": "<p>basically, I wanted to encourage people to think of overflow as a bug, even if it's too costly to check for it all the time</p>",
        "id": 148067104,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542747068
    },
    {
        "content": "<p>Right</p>",
        "id": 148067108,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1542747073
    },
    {
        "content": "<p>(and if you want wrapping, you should use the methods)</p>",
        "id": 148067122,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542747085
    },
    {
        "content": "<p>And I guess it's a pre-linking thing, even for <code>#[inline]</code> functions, so it's fine to be a per-crate option</p>",
        "id": 148067130,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1542747099
    },
    {
        "content": "<p>yeah, so, I remember that inlining was a tricky case</p>",
        "id": 148067148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542747117
    },
    {
        "content": "<p>(in particular, I think that libstd is always compiled release and hence without overflow checks, and we were inlining the MIR for <code>Add</code> impls and so forth, and it was therefore without checks, but I think we fixed that .. somehow)</p>",
        "id": 148067213,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542747156
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> would maybe remember</p>",
        "id": 148067247,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542747193
    },
    {
        "content": "<p>Ah, <a href=\"https://github.com/rust-lang/rust/pull/33905\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/33905\">https://github.com/rust-lang/rust/pull/33905</a></p>",
        "id": 148067251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542747200
    },
    {
        "content": "<p>anyway, not answering your question :) just reminiscing</p>",
        "id": 148067254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542747207
    },
    {
        "content": "<p>your question is sort of a cargo one and I don't really know</p>",
        "id": 148067258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542747217
    },
    {
        "content": "<p>but there should be <em>some</em> way</p>",
        "id": 148067262,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542747220
    },
    {
        "content": "<p>if not, we should fix that</p>",
        "id": 148067264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542747223
    },
    {
        "content": "<p>(imo)</p>",
        "id": 148067271,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542747233
    },
    {
        "content": "<p>I'd be ok with an attribute too in the crate, personally</p>",
        "id": 148067305,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542747243
    },
    {
        "content": "<p><code>#![overflow_check(panic)]</code> or something</p>",
        "id": 148067334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542747269
    },
    {
        "content": "<p>Ah, gotcha. Either would work.</p>",
        "id": 148067340,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1542747279
    },
    {
        "content": "<p>I just personally don't want people to be able to turn them off, because then the meaning of <code>a + b</code> is context dependent</p>",
        "id": 148067378,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542747315
    },
    {
        "content": "<p>Sure, but presumably if the release-mode default is not to check, then opting in can only make things more robust, not less?</p>",
        "id": 148067406,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1542747350
    },
    {
        "content": "<p>yeah the whole abort thing is a big red herring, sorry. and I should probably change my comment to reflect it's a panic but not an abort</p>",
        "id": 148289075,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543089161
    },
    {
        "content": "<p>comment in my code above</p>",
        "id": 148289076,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543089171
    },
    {
        "content": "<p>I'd have a weak preference for aborting instead of panicking, lest an attack figure out a way to leverage <code>catch_unwind</code> to avoid an exit and exploit the overflow, but I'll take a panic for now</p>",
        "id": 148289124,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543089247
    },
    {
        "content": "<p>Is there any reason to think <code>panic</code> might be more severe than a DoS?</p>",
        "id": 148289180,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1543089411
    },
    {
        "content": "<p>yeah, depends on the circumstances, and the severity of failure to handle an integer overflow correctly</p>",
        "id": 148289353,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543089794
    },
    {
        "content": "<p>a panic is probably sufficient for most</p>",
        "id": 148289356,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543089806
    },
    {
        "content": "<p>aborting would be nice if the overflow could be used to say, corrupt memory or leak cryptographic key material</p>",
        "id": 148289421,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543089909
    },
    {
        "content": "<p>Actually, panicking is less safe in an environment where you want to prevent arbitrary code execution because writing unsafe code that's panic-safe and fast at the same time is really, <em>really</em> hard. To wit: <a href=\"https://rustsec.org/advisories/RUSTSEC-2018-0003.html\" target=\"_blank\" title=\"https://rustsec.org/advisories/RUSTSEC-2018-0003.html\">https://rustsec.org/advisories/RUSTSEC-2018-0003.html</a> - and that's code written by Servo developers, who know their stuff and many of whom have worked on Rust itself</p>",
        "id": 148293066,
        "sender_full_name": "Shnatsel",
        "timestamp": 1543097367
    },
    {
        "content": "<p>It was fixed by leaking memory on panic instead of performing a double free.</p>",
        "id": 148293231,
        "sender_full_name": "Shnatsel",
        "timestamp": 1543097682
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132721\">@Tony Arcieri</span> You probably do want to run your tests in release mode. If you have to choose one of release/debug I would choose  release.</p>",
        "id": 148301416,
        "sender_full_name": "briansmith",
        "timestamp": 1543116041
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133214\">@briansmith</span> as it were, my tests include <code>#[cfg(debug_assertions))]</code>-gated mocks which generate <code>compile_error!</code>s if they are compiled into release builds</p>",
        "id": 148302019,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543117360
    },
    {
        "content": "<p>I would really really really like to keep those mocks out of production builds, so them's the breaks</p>",
        "id": 148302211,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543117837
    },
    {
        "content": "<p>(mocks for HSMs)</p>",
        "id": 148303875,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543121338
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133214\">@briansmith</span> well as it were I was just bitten by not running tests in release mode, and just changed the impacted repository to do so (or rather, there is an open PR)</p>",
        "id": 148329100,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543173548
    },
    {
        "content": "<p>sorry to bring this up again, but I just want to double/triple check here</p>",
        "id": 155318555,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1547713099
    },
    {
        "content": "<p>setting the following on a workspace's <code>Cargo.toml</code>:</p>",
        "id": 155318557,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1547713124
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[profile.release]\noverflow-checks = true\n</pre></div>",
        "id": 155318559,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1547713127
    },
    {
        "content": "<p>that only applies to crates in that workspace, correct?</p>",
        "id": 155318562,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1547713133
    },
    {
        "content": "<p>i.e. does it or does it not enable those checks on transitive dependencies?</p>",
        "id": 155318576,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1547713160
    },
    {
        "content": "<p>I'm actually not sure about that</p>",
        "id": 155336645,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547733615
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> would likely know, or maybe <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span></p>",
        "id": 155336667,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547733634
    },
    {
        "content": "<p>and/or <span class=\"user-mention\" data-user-id=\"121055\">@Pietro Albini</span> =)</p>",
        "id": 155336675,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547733642
    },
    {
        "content": "<p>/me tags everybody</p>",
        "id": 155336677,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547733646
    },
    {
        "content": "<p>let's also tag <span class=\"user-mention\" data-user-id=\"125254\">@kennytm</span>, just to get everyone in there :D</p>",
        "id": 155336703,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1547733675
    },
    {
        "content": "<p>or we could RTFM</p>",
        "id": 155336747,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547733687
    },
    {
        "content": "<blockquote>\n<p>Cargo supports custom configuration of how rustc is invoked through profiles at the top level. Any manifest may declare a profile, but only the top level package’s profiles are actually read. All dependencies’ profiles will be overridden. This is done so the top-level package has control over how its dependencies are compiled.</p>\n</blockquote>",
        "id": 155336748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547733689
    },
    {
        "content": "<p>dunno by the way</p>",
        "id": 155336749,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1547733690
    },
    {
        "content": "<p>from <a href=\"https://doc.rust-lang.org/cargo/reference/manifest.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/cargo/reference/manifest.html\">https://doc.rust-lang.org/cargo/reference/manifest.html</a></p>",
        "id": 155336755,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547733695
    },
    {
        "content": "<p>suggests that it applies to <em>everything</em>, <span class=\"user-mention\" data-user-id=\"132721\">@Tony Arcieri</span></p>",
        "id": 155336763,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547733707
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121055\">@Pietro Albini</span> sorry <span class=\"emoji emoji-1f60a\" title=\"blush\">:blush:</span> I somehow imagine you know everything about cargo after having done enough crater runs</p>",
        "id": 155336815,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547733725
    },
    {
        "content": "<p>not sure why that would be</p>",
        "id": 155336819,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547733729
    },
    {
        "content": "<p>I mean, I learned a lot about cargo :P</p>",
        "id": 155336830,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1547733746
    },
    {
        "content": "<p>but we just strip workspace configuration during crater runs, so <em>shrugs</em></p>",
        "id": 155336842,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1547733764
    },
    {
        "content": "<p>=)</p>",
        "id": 155336846,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547733770
    },
    {
        "content": "<p>Yeah it should apply to all crates within the workspace (not sure if you've figured that out yet)</p>",
        "id": 155341991,
        "sender_full_name": "simulacrum",
        "timestamp": 1547737719
    },
    {
        "content": "<p>er, all crates + dependencies</p>",
        "id": 155342002,
        "sender_full_name": "simulacrum",
        "timestamp": 1547737727
    },
    {
        "content": "<p>Though I <em>believe</em> dependencies could override that, not sure</p>",
        "id": 155342025,
        "sender_full_name": "simulacrum",
        "timestamp": 1547737741
    },
    {
        "content": "<p>I knew crates in the workspace... the dependencies are what I'm unclear on</p>",
        "id": 155345961,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1547740444
    },
    {
        "content": "<p>I'm sure overflow checks do not apply to the standard library. That's something to keep in mind.</p>",
        "id": 155356494,
        "sender_full_name": "Shnatsel",
        "timestamp": 1547749246
    },
    {
        "content": "<p>okay saw the docs now, hmm. that really implies I should really be using explicit checked I/O syntax everywhere in my crates and not depending on <code>overflow-checks = true</code></p>",
        "id": 155356513,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1547749267
    },
    {
        "content": "<p>Maybe you could expose that as a feature and make it default?<br>\nAlso, <a href=\"https://github.com/llogiq/overflower\" target=\"_blank\" title=\"https://github.com/llogiq/overflower\">https://github.com/llogiq/overflower</a> would come in handy if it weren't nightly-only</p>",
        "id": 155358521,
        "sender_full_name": "Shnatsel",
        "timestamp": 1547750980
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132721\">@Tony Arcieri</span> yeah it seems like there may be a missing knob here</p>",
        "id": 156329465,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547768262
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I was a bit weirded out by using the profile setting in the first place, because it seems non-explicit in the <em>code</em>, and I think this pushed me over again</p>",
        "id": 156329570,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1547768371
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> what I want now is this, but as a first-class language feature <a href=\"https://crates.io/crates/checked\" target=\"_blank\" title=\"https://crates.io/crates/checked\">https://crates.io/crates/checked</a></p>",
        "id": 156329633,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1547768404
    },
    {
        "content": "<p>effectively the opposite of <code>Wrapping</code></p>",
        "id": 156329653,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1547768427
    },
    {
        "content": "<p>I'll probably start with the crate, but uhh</p>",
        "id": 156329672,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1547768448
    },
    {
        "content": "<p>I don't want to tell everyone doing cryptography in Rust to use this one crate and then that one crate becomes a single point of compromise for any cryptography in Rust. <span class=\"emoji emoji-1f631\" title=\"scream\">:scream:</span></p>",
        "id": 156329697,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1547768488
    },
    {
        "content": "<p>Has anyone done any tests to check if overflow behavior specified in Cargo in a dependency actually applies to that dependency if toplevel crate does not specify anything? If the toplevel binary crate does not force any specific behavior, keeping the library's behavior sounds reasonable, and if it's not done currently it can be introduced as a (hopefully) non-breaking change</p>",
        "id": 156330050,
        "sender_full_name": "Shnatsel",
        "timestamp": 1547768773
    },
    {
        "content": "<p>that's what we were just talking about. it is documented as parent crates overriding their dependencies</p>",
        "id": 156330161,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1547768886
    },
    {
        "content": "<p>but now I'm just terrified to do it implicitly</p>",
        "id": 156330178,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1547768897
    },
    {
        "content": "<p><code>Checked</code> gets you all of the ergonomics of doing it implicitly, except it's explicit and not controlled in a spooky-action-at-a-distance fashion by some knob located who knows where</p>",
        "id": 156330193,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1547768929
    },
    {
        "content": "<p>also having <code>Wrapping</code> be a first-class part of the language, but not <code>Checked</code>, feels... inconsistent</p>",
        "id": 156330217,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1547768960
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132721\">@Tony Arcieri</span> Adding <code>Checked</code>to the standard library seems like a reasonable task for this WG to take up.</p>",
        "id": 156337355,
        "sender_full_name": "briansmith",
        "timestamp": 1547776014
    },
    {
        "content": "<p>I also think we should be able to allow/deny/forbid the default unchecked arithmetic at granularity of our choosing.</p>",
        "id": 156337423,
        "sender_full_name": "briansmith",
        "timestamp": 1547776090
    },
    {
        "content": "<p>I agree! I might take a crack at writing up a pre-RFC post to rust-internals</p>",
        "id": 156346503,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1547790900
    },
    {
        "content": "<p>I remember several years ago finding <code>Wrapping</code> and being like \"ok, great, now where's <code>Checked</code>?\" (I was implementing something that happened to need them both)</p>",
        "id": 156346523,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1547790949
    },
    {
        "content": "<p>So, an interesting idea was suggested to me recently: enable overflow-check-and-panic on release builds for <code>usize</code> only. A huge percentage of exploitable integer overflow -&gt; heap buffer overflow will be with <code>usize</code> (citation needed, but both of the ones I just checked were <code>usize</code>). And since it's only a small fraction of overall arithmetic, it'll have a much lower performance penalty than doing _all_ arithmetic.</p>",
        "id": 157656684,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1549416253
    },
    {
        "content": "<p>What about u32 * u32 as usize style code?</p>",
        "id": 157657058,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1549416699
    },
    {
        "content": "<p>as in <code>(u32 * u32) as usize</code>. It wouldn't get protection.</p>",
        "id": 157663523,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1549426097
    },
    {
        "content": "<p>The design criteria were a) minimize performance overhead, b) maximize protection, c) easy to reason about</p>",
        "id": 157663534,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1549426126
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130046\">@Alex Gaynor</span> I tried enabling it across the board in projects... the problem is you don't get fine-grained control right now</p>",
        "id": 157706202,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1549472758
    },
    {
        "content": "<p>e.g. if I do that to prevent overflow bugs in my app logic, it also applies to curve25519-dalek</p>",
        "id": 157706263,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1549472779
    },
    {
        "content": "<p>where they want the checks in debug builds, but not in release builds for performance reasons</p>",
        "id": 157706278,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1549472793
    },
    {
        "content": "<p>They should use <code>.wrapping_add()</code> then</p>",
        "id": 157732550,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1549492193
    },
    {
        "content": "<p>like I can ask HdV but I think they want the overflow checks during debug builds</p>",
        "id": 157734504,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1549493753
    },
    {
        "content": "<p>Hmm, there's not an actual explicit API for that, just the default-but-not-garaunteed behavior.</p>",
        "id": 157734632,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1549493850
    },
    {
        "content": "<p>yeah...</p>",
        "id": 157734654,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1549493868
    },
    {
        "content": "<p>that's why I'm... less excited</p>",
        "id": 157734726,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1549493896
    },
    {
        "content": "<p>about <code>overflow-checks = true</code> for release builds</p>",
        "id": 157734735,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1549493904
    },
    {
        "content": "<p>Does curve25519-dalek actually use <code>usize</code> for representing limbs?</p>",
        "id": 157734769,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1549493932
    },
    {
        "content": "<p>going to guess not ¯\\_(ツ)_/¯</p>",
        "id": 157735250,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1549494288
    },
    {
        "content": "<p>So it's unimpacted by my proposal :-)</p>",
        "id": 157735297,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1549494350
    },
    {
        "content": "<p>probably!</p>",
        "id": 157735357,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1549494376
    },
    {
        "content": "<p>If no one wants to tell me this is a horrible idea, I guess I'll write up an RFC this weekend</p>",
        "id": 157736284,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1549495080
    },
    {
        "content": "<p>curve25519-dalek is probably a good acid test... maybe ask them if they foresee any slowdowns... but otherwise SGTM</p>",
        "id": 157736425,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1549495174
    },
    {
        "content": "<p><code>usize</code> in general seems like not the thing to use in performance-oriented code</p>",
        "id": 157736444,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1549495197
    },
    {
        "content": "<p>so hopefully no collateral damage</p>",
        "id": 157736505,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1549495211
    },
    {
        "content": "<p>I think <code>usize</code> is (or will be) 128-bit on <code>riscv64</code> targets <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 157736542,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1549495253
    },
    {
        "content": "<p>There was a bit of non-public discussion about it, and someone from the Midori team in Microsoft shared their experiences on this. In their experience overflow checks introduce negligible performance overhead across the board; very rarely you would need to explicitly opt out of them for performance.</p>",
        "id": 157801651,
        "sender_full_name": "Shnatsel",
        "timestamp": 1549565150
    },
    {
        "content": "<p>I think overflow checks for <code>usize</code> alone are actually a great idea. I would prefer to have a way to express \"I want this optimized out in release mode, but overflow in here is still a bug\" though, and check that in debug mode.</p>",
        "id": 157801925,
        "sender_full_name": "Shnatsel",
        "timestamp": 1549565306
    }
]