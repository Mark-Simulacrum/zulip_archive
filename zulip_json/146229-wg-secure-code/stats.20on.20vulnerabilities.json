[
    {
        "content": "<p>Fun fact: I went through non-DoS vulnerabilities in RustSec advisory DB and counted 16 memory corruption vulns and 5 vulns not related to memory safety. That's very close to the 70% vulns being memory safety issues as reported by M$. Based on this (admittedly limited) sampling it would look like Rust's safety guarantees do not actually make a difference in practice.<br>\nBut if you factor in DoS then it absolutely dominates the memory safety issues: <a href=\"https://github.com/rust-fuzz/trophy-case\" target=\"_blank\" title=\"https://github.com/rust-fuzz/trophy-case\">https://github.com/rust-fuzz/trophy-case</a> lists so many DoS bugs that the actual memory safety issues are below 10%</p>",
        "id": 171337421,
        "sender_full_name": "Shnatsel",
        "timestamp": 1563647128
    },
    {
        "content": "<p>It's not a 1:1 comparison. A lot of the Rust ones are API unsoundness, for many of them it's never been established that it's reachable in real programs. The MS data is CVEs that are all reachable in Windows/Office/Edge/etc.</p>",
        "id": 171337477,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1563647211
    },
    {
        "content": "<p>If we issued CVEs for C APIs that were unsound... it's literally all of them, there is no notion of soundness.</p>",
        "id": 171337495,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1563647253
    },
    {
        "content": "<p>To be clear: it's good that we're holding ourselves to a higher standard! But it does mean the data is not immediately comperable.</p>",
        "id": 171337567,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1563647371
    },
    {
        "content": "<p>I guess the C version of API unsoundness would be \"library function behaves differently compared to what documentation says\" and would very well apply to M$ libraries or Windows syscalls</p>",
        "id": 171337895,
        "sender_full_name": "Shnatsel",
        "timestamp": 1563648002
    },
    {
        "content": "<p>seems like a hard thing to measure/compare without it being apples to oranges. you need some way to also gauge frequency/volume of vulnerabilities (vs LoC I guess) and to accurately compare that vuln discovery and reporting needs to be equally mature.</p>",
        "id": 171338664,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1563649370
    },
    {
        "content": "<p>there are a lot of people (who don't actively use Rust) who seem overly eager to latch onto any mention of memory unsafety in Rust and use that to speciously claim that Rust isn't living up to its guarantees <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span></p>",
        "id": 171338672,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1563649413
    }
]