[
    {
        "content": "<p>I'm drafting a security advisory for the time crate, as it can segfault in very specific situations. What category would this fall under? I am unable to find a description of what category should be used when.</p>",
        "id": 217071724,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1605651750
    },
    {
        "content": "<p><code>code-execution</code>, <code>memory-corruption</code>, and/or <code>memory-exposure</code> depending on the situation</p>",
        "id": 217094701,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1605672951
    },
    {
        "content": "<p>(also we've talked about adopting CWE at various points, if someone wants to actually do the work)</p>",
        "id": 217094744,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1605672966
    },
    {
        "content": "<p>I did CVSS and I volunteer not to <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 217094748,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1605672975
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245610\">@Jacob Pratt</span> is it a segfault from null (or some other address from the 0 page) or from some random pointer</p>",
        "id": 217096445,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1605675197
    },
    {
        "content": "<p>if the former it's probably none of those.</p>",
        "id": 217096449,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1605675210
    },
    {
        "content": "<p>Segfault from what is random at the time of dereferencing. It's _was_ valid, but the OS moves things around apparently. Definitely not a null pointer.</p>",
        "id": 217098760,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1605678461
    },
    {
        "content": "<p>Currently just waiting on a CVE before creating a PR, though.</p>",
        "id": 217098825,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1605678510
    },
    {
        "content": "<p>oof yeah. sounds bad.</p>",
        "id": 217098928,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1605678644
    },
    {
        "content": "<p>Thankfully it's my best guess that running into this is quite rare. It requires setting environment variables for the running program at the _exact_ same time as reading it in a method call. Even running both without delay on separate threads, it'll take ~100 iterations on my machine from the proof of concept.</p>",
        "id": 217099557,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1605679535
    },
    {
        "content": "<p>Apparently stdlib locks the environment while reading, but I don't have that advantage with FFI.</p>",
        "id": 217099604,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1605679579
    },
    {
        "content": "<p>Can you only trigger this from the FFI?</p>",
        "id": 217099951,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1605680153
    },
    {
        "content": "<p>I believe so. It was an issue discovered in the time and chrono crates specifically, as they use the same OS API</p>",
        "id": 217100037,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1605680230
    },
    {
        "content": "<p>I've just created a PR with this vulnerability. An advisory on GitHub <a href=\"https://github.com/time-rs/time/security/advisories/GHSA-wcg3-cvx6-7396\">is published</a>. It has been assigned CVE-2020-26235.</p>",
        "id": 217211181,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1605742332
    },
    {
        "content": "<p>If libstd is content to mostly ignore the issue, triggering it requires unsafe code (invoking C code that performs setenv), and there's no real possible fix, it's unclear to me what priority this actually requires tbh</p>",
        "id": 217216842,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1605746814
    },
    {
        "content": "<p>It's actually invoking getenv, but the point is the same. Ideally I'd have some way to lock the environment, which is apparently what stdlib does now. Having a lock would let me manually take control before performing getenv.</p>",
        "id": 217218255,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1605748007
    },
    {
        "content": "<p>Short of that or a thread-safe getenv (in libc), I don't see any way to avoid this bug.</p>",
        "id": 217218292,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1605748051
    }
]