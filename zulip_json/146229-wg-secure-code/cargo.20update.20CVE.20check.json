[
    {
        "content": "<p>Idea: When you run <code>cargo update</code>, cargo downloads a list of security issues affecting standard libraries (libcore/libstd) and the compiler. Then <code>cargo build</code> will warn/error when building with a version of rustc that has such a vulnerability.</p>",
        "id": 148820317,
        "sender_full_name": "briansmith",
        "timestamp": 1543526492
    },
    {
        "content": "<p>Relatedly, there's an issue on <code>cargo audit</code> to have it consider the stdlib.</p>",
        "id": 148820494,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1543526620
    },
    {
        "content": "<p>Example from the recent past: We run <code>cargo update</code>. The update downloads the info for CVE-2018-1000810. Before it is fixed, the info will say that it \"affects all versions of the toolchain\" and building with any version of the toolchain will warn. When Rust 1.29.1 was released then the next <code>cargo update</code> would download the info that says CVE-2018-1000810 was fixed in Rust 1.29.1. Then building with any version older than Rust 1.29.1 would warn/error and building with Rust 1.29.1 or later would not.</p>",
        "id": 148820559,
        "sender_full_name": "briansmith",
        "timestamp": 1543526653
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130046\">@Alex Gaynor</span> Not just the stdlib, but also the compiler and the rest of the toolchain (Cargo, at least).</p>",
        "id": 148820660,
        "sender_full_name": "briansmith",
        "timestamp": 1543526756
    },
    {
        "content": "<p>e.g. when \"fastcall\" was miscompiled.</p>",
        "id": 148820714,
        "sender_full_name": "briansmith",
        "timestamp": 1543526770
    },
    {
        "content": "<p>Or the recent borrow checker bugs.</p>",
        "id": 148820737,
        "sender_full_name": "briansmith",
        "timestamp": 1543526789
    },
    {
        "content": "<p>(The borrow checker bugs didn't get CVEs but I argued that they should have in <a href=\"https://www.reddit.com/r/rust/comments/8xqrz5/announcing_rust_1271/e25yugs/\" target=\"_blank\" title=\"https://www.reddit.com/r/rust/comments/8xqrz5/announcing_rust_1271/e25yugs/\">https://www.reddit.com/r/rust/comments/8xqrz5/announcing_rust_1271/e25yugs/</a>)</p>",
        "id": 148820810,
        "sender_full_name": "briansmith",
        "timestamp": 1543526879
    },
    {
        "content": "<p><code>std</code> is how the issue is filed, but yes the issue is more general, it's the whole Rust toolchain. anyway here's the issue <a href=\"https://github.com/RustSec/cargo-audit/issues/46\" target=\"_blank\" title=\"https://github.com/RustSec/cargo-audit/issues/46\">https://github.com/RustSec/cargo-audit/issues/46</a></p>",
        "id": 148832199,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543539281
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132721\">@Tony Arcieri</span> IMO <code>cargo audit</code> shouldn't be a separate command but should instead be built into the <code>cargo update</code> process, in the long term. But otherwise, I agree that that seems to be what I'm talking about.</p>",
        "id": 148882602,
        "sender_full_name": "briansmith",
        "timestamp": 1543605668
    },
    {
        "content": "<p>FWIW <code>cargo-audit</code> is distinct from <code>cargo</code> because the response from the core team, at the time, was to prototype it out-of-tree, but maybe it's worth attempting to upstream now <a href=\"https://github.com/rust-lang/rfcs/pull/1752\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/pull/1752\">https://github.com/rust-lang/rfcs/pull/1752</a></p>",
        "id": 148883277,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543606309
    },
    {
        "content": "<p>I feel cargo-audit is more than a prototype at this point, and it's about time that info got actually shipped to users - be it via cargo, github, crates-audit or all of them.<br>\nBy the way, performing these checks only on <code>cargo update</code> might not be the best idea. That's what <code>yarn</code> and <code>npm</code> do, but they only work that way because that's the only place they could put that information. We could also do that on <code>cargo build</code>, for example.</p>",
        "id": 150692201,
        "sender_full_name": "Shnatsel",
        "timestamp": 1543688289
    },
    {
        "content": "<p>What people probably care most about is running vulnerable services in production, which is not mitigated by notifying on any cargo command. Some kind of pre-packaged tool that ingests Cargo.lock of a production service and pokes me if something goes wrong would be great. I'm pretty sure 90% of that is already implemented in <code>cargo-audit</code>, all it needs is a way to poke me when something goes wrong - email, tweet, something. Since checking a cargo.lock is not a lot of work, I guess this could even be hosted as a service.</p>",
        "id": 150692342,
        "sender_full_name": "Shnatsel",
        "timestamp": 1543688612
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> re: looking for deployed vulnerable build artifacts, yup, I noted as much in cargo-audit <a href=\"https://github.com/rust-lang/rust/issues/46\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/46\">#46</a></p>",
        "id": 150693367,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543690696
    },
    {
        "content": "<p>at one of my previous employers we had an agent which collected the Ruby equivalent of Cargo.lock from production servers and cross-referenced that with the RubySec database</p>",
        "id": 150693379,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543690747
    },
    {
        "content": "<p>and autofiled JIRA ( <span class=\"emoji emoji-1f629\" title=\"weary\">:weary:</span> ) tickets about production vulnerabilities, and closed them when the responsible team deployed a version which resolved the vulnerabilities</p>",
        "id": 150693385,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543690798
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> <code>cargo build</code> shouldn't do networking.</p>",
        "id": 150693543,
        "sender_full_name": "briansmith",
        "timestamp": 1543691067
    },
    {
        "content": "<p>Doesn't it already since it can pull down dependencies?</p>",
        "id": 150693546,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1543691095
    },
    {
        "content": "<p>Nobody should use <code>cargo build</code>, only <code>cargo build --locked</code>. <code>cargo build --locked</code> should become the default behavior. If <code>cargo build</code> pulls dependencies then you haven't verified your dependencies are safe to use before running their build script.</p>",
        "id": 150693569,
        "sender_full_name": "briansmith",
        "timestamp": 1543691162
    },
    {
        "content": "<p>While that's certainly reasonable, it also departs significantly from current behavior and the community's attitude towards this stuff. I'm not sure that <code>cargo audit</code> shouldn't follow the same approach - network by default, but optionally locked for folks who either don't have network access, or want a reproducible build, or care more about security, etc.</p>",
        "id": 150693623,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1543691244
    },
    {
        "content": "<p>Pretty sure nobody wants a network ping on every build.</p>",
        "id": 150693669,
        "sender_full_name": "briansmith",
        "timestamp": 1543691303
    },
    {
        "content": "<p>Obviously, if/when <code>cargo build</code> does an implicit <code>cargo update</code> then it would do everything that <code>cargo update</code> does.</p>",
        "id": 150693673,
        "sender_full_name": "briansmith",
        "timestamp": 1543691338
    },
    {
        "content": "<p>I feel like the empirical evidence - that <code>cargo build</code> has that exact behavior - suggests otherwise.</p>",
        "id": 150693674,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1543691338
    },
    {
        "content": "<p>I was thinking cross-referencing against a local instance of vulnerabilities database. AFAIK <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a> index is already cached locally in full</p>",
        "id": 150693680,
        "sender_full_name": "Shnatsel",
        "timestamp": 1543691349
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> I believe that's the case.</p>",
        "id": 150693686,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1543691367
    },
    {
        "content": "<p>Does cargo build do a networking request on every build, or only when it needs to update dependencies/</p>",
        "id": 150693687,
        "sender_full_name": "briansmith",
        "timestamp": 1543691368
    },
    {
        "content": "<p>Ah, I'm not sure about that.</p>",
        "id": 150693690,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1543691377
    },
    {
        "content": "<p>I think only the latter</p>",
        "id": 150693692,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1543691384
    },
    {
        "content": "<p>I guess a vuln database is meaningfully different in that <em>the latest version</em> is a much more appropriate version to use than <em>whatever version we have installed that works</em>.</p>",
        "id": 150693739,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1543691417
    },
    {
        "content": "<p>For versions of source code, it's a much less important distinction.</p>",
        "id": 150693741,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1543691428
    },
    {
        "content": "<p>I don't think people would accept default behavior of a network ping on every build</p>",
        "id": 150693799,
        "sender_full_name": "briansmith",
        "timestamp": 1543691543
    },
    {
        "content": "<p>Yeah you're probably right.</p>",
        "id": 150693808,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1543691559
    },
    {
        "content": "<p>Especially, if you think there's a possibility that a <a href=\"http://build.rs\" target=\"_blank\" title=\"http://build.rs\">build.rs</a> or a test is malicious or equivalently buggy, you couldn't even start the build unless/until you've got the response.</p>",
        "id": 150693820,
        "sender_full_name": "briansmith",
        "timestamp": 1543691587
    },
    {
        "content": "<p>Maybe <code>cargo audit</code> could use a heuristic of how frequently it checks? E.g., the DB is considered stale after <code>n</code> hours or something like that, unless you pass a flag to force update.</p>",
        "id": 150693824,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1543691591
    },
    {
        "content": "<p>hourly database refreshes should be more than enough for non-production stuff like <code>cargo build</code></p>",
        "id": 150693827,
        "sender_full_name": "Shnatsel",
        "timestamp": 1543691603
    },
    {
        "content": "<p>More generally, cargo build could be configurable to indicate how often <code>cargo update</code> should be run.</p>",
        "id": 150693888,
        "sender_full_name": "briansmith",
        "timestamp": 1543691666
    },
    {
        "content": "<p>Not much difference between needing to update a dependency because somebody wrote up a CVE and the developer fixed it, vs. the developer fixed a bug without a CVE.</p>",
        "id": 150693906,
        "sender_full_name": "briansmith",
        "timestamp": 1543691703
    },
    {
        "content": "<p>Especially since what's considered advisory-worthy is very subjective.</p>",
        "id": 150693912,
        "sender_full_name": "briansmith",
        "timestamp": 1543691729
    },
    {
        "content": "<p>Yeah, I think that's reasonable.</p>",
        "id": 150693913,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1543691744
    },
    {
        "content": "<p>e.g. OpenSSL didn't apply for CVEs for a few side-channel bugs that I would consider serious, and they're close to making that their normal policy. And BoringSSL only has one CVE even though there were multiple serious bugs, IIRC.</p>",
        "id": 150693984,
        "sender_full_name": "briansmith",
        "timestamp": 1543691881
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> checking against the local database is at least possible, as a copy is kept locally in <code>~/.git/advisory-db</code></p>",
        "id": 150694250,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543692370
    },
    {
        "content": "<p>err, <code>.cargo</code></p>",
        "id": 150694251,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543692375
    }
]