[
    {
        "content": "<p>FYI: There is a new paper on doing call-graph based dependency analysis for Rust: <a href=\"https://arxiv.org/pdf/2101.09563.pdf\">Präzi: From Package-based to Call-based Dependency Networks</a>. The source code is available <a href=\"https://github.com/praezi/rust-emse-2020\">here</a>.</p>",
        "id": 224606311,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1612042617
    },
    {
        "content": "<p>Neat! We were looking at Präzi awhile ago for call graph analysis. Glad to see there's been some more recent work on it</p>",
        "id": 224779986,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1612208388
    },
    {
        "content": "<p>There is a monetization opportunity in there. For example, run that combined with the advisory DB and flag projects that directly depend on vulnerable crates <em>and</em> actually call the problematic function. Immediate, actionable issue reports with very low false positive rate. Free for open-source, SaaS for everyone else.</p>",
        "id": 224781707,
        "sender_full_name": "Shnatsel",
        "timestamp": 1612209286
    },
    {
        "content": "<p>Too bad Firo Solutions didn't seem to advance beyond what the base <code>cargo-audit</code> offers, and their marketing is also unconvincing, to me at least.</p>",
        "id": 224781800,
        "sender_full_name": "Shnatsel",
        "timestamp": 1612209346
    },
    {
        "content": "<p>it'd be interesting to do this sort of call graph analysis in such a way that it can spit out a JSON report per crate/version, and then have <code>cargo-audit</code> be able to consume it in order to do false positive elimination</p>",
        "id": 224796401,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1612216211
    },
    {
        "content": "<p>Call Graph-as-a-Service</p>",
        "id": 224796428,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1612216224
    },
    {
        "content": "<p>/me downloads all 5GB of the latest Präzi CDN</p>",
        "id": 225051225,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1612373856
    },
    {
        "content": "<p>will be done in, uhh, 6 hours?(!)</p>",
        "id": 225051257,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1612373872
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132721\">Tony Arcieri</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/Paper.3A.20Pr.C3.A4zi.3A.20Call-based.20Dependency.20Networks/near/225051257\">said</a>:</p>\n<blockquote>\n<p>will be done in, uhh, 6 hours?(!)</p>\n</blockquote>\n<p>Looking forward to hearing about what you will manage to do with this data.</p>",
        "id": 225151275,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1612440996
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116109\">@Vytautas Astrauskas</span> I mainly just wanted to take a look at how it's structured/formatted</p>",
        "id": 225190014,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1612458292
    },
    {
        "content": "<p>our long-term goal would be something like false positive elimination in <code>cargo audit</code></p>",
        "id": 225190041,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1612458306
    },
    {
        "content": "<p>and for that it'd sure be nice if we could have separate <code>.json</code> files per crate/version which we could download on demand</p>",
        "id": 225190263,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1612458380
    },
    {
        "content": "<p>I see. Unfortunately, it seems that the authors are not in this Zulip. Let me try to poke them via email…</p>",
        "id": 225192693,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1612459477
    },
    {
        "content": "<p>Happy to chat on an email thread</p>",
        "id": 225207698,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1612466008
    },
    {
        "content": "<p>Thanks for sharing the paper here <span class=\"user-mention\" data-user-id=\"116109\">@Vytautas Astrauskas</span> !</p>",
        "id": 225823611,
        "sender_full_name": "jhejderup",
        "timestamp": 1612956965
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132721\">@Tony Arcieri</span>: the dataset is quite large and will take up quite some space. Each call graph represents the package + its dependencies. I am still thinking of what would be a good way to make the dataset more accessible and queryable. Are there particular package releases that you are interested to look into? If you send me a list of releases (we have from Feb 2020 unfortunately ),  I can create a small zip-file to play around with.</p>",
        "id": 225824048,
        "sender_full_name": "jhejderup",
        "timestamp": 1612957306
    },
    {
        "content": "<p>I would be very interested to have a chat about how we could use call graphs (or the call graph generator) with <code>cargo-audit</code>. I am also interested to know the broader security goals in <a href=\"http://crates.io\">crates.io</a> and how Präzi could maybe fit in here.</p>",
        "id": 225824444,
        "sender_full_name": "jhejderup",
        "timestamp": 1612957567
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281841\">@Robin Moussu</span> was working on something like this for rustdoc to visualize call graphs: <a href=\"https://github.com/robinmoussu/cargo-callgraph\">https://github.com/robinmoussu/cargo-callgraph</a></p>",
        "id": 225843434,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612967345
    },
    {
        "content": "<p>it would be neat to unify the projects somehow</p>",
        "id": 225843453,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612967354
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387642\">@Joseph Hejderup</span> here's the tracking issue on <code>cargo-audit</code></p>",
        "id": 225851437,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1612970507
    },
    {
        "content": "<p><a href=\"https://github.com/RustSec/cargo-audit/issues/21\">https://github.com/RustSec/cargo-audit/issues/21</a></p>",
        "id": 225851449,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1612970510
    },
    {
        "content": "<p>we currently track paths to functions which are affected by a particular vulnerability, although we have no linting that they're valid so the data may not be fully accurate</p>",
        "id": 225851638,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1612970573
    },
    {
        "content": "<p>but beyond that, when we flag a particular dependency as vulnerable, we'd like to be able to ensure that one of those functions appears in the call graph for the crate/workspace being audited in order to eliminate false positives</p>",
        "id": 225851758,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1612970623
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> neat</p>",
        "id": 225851788,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1612970633
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387642\">@Joseph Hejderup</span> regarding the data set being large, I was wondering if it could be subdivided into a (large) git repo of per-package/version JSON files, and incrementally updated that way</p>",
        "id": 225864494,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1612974359
    },
    {
        "content": "<p>or just anything that serves HTTP. git really doesn't matter, but maybe you could host it on GitHub in a semi-verifiable way</p>",
        "id": 225864760,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1612974421
    },
    {
        "content": "<p>mostly it'd be nice to have client-side tooling that could download call graph analysis generated AOT, with on-demand access to the packages they care about</p>",
        "id": 225865074,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1612974486
    },
    {
        "content": "<p>in the case of <code>cargo-audit</code>, it has a <code>Cargo.lock</code> file to work from, so it knows the totality of packages which comprise the call graph</p>",
        "id": 225865240,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1612974528
    },
    {
        "content": "<p>What we'd like for <code>cargo-audit</code> to be able to do is download pre-generated call graph analysis for those (releases of) those packages in Cargo.toml, load that into a call graph data structure along with the local project, and be able to test that any of the listed vulnerable functions in a given advisory exist within the call graph for that project</p>",
        "id": 225865969,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1612974705
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/Paper.3A.20Pr.C3.A4zi.3A.20Call-based.20Dependency.20Networks/near/225843434\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"281841\">Robin Moussu</span> was working on something like this for rustdoc to visualize call graphs: <a href=\"https://github.com/robinmoussu/cargo-callgraph\">https://github.com/robinmoussu/cargo-callgraph</a></p>\n</blockquote>\n<p>Yeah, I really need to restart working on it a bit, clean some stuff and give it more exposure when it will be in a good shape (it's currently in pre-alpha)!</p>",
        "id": 225932208,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1613002181
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132721\">Tony Arcieri</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/Paper.3A.20Pr.C3.A4zi.3A.20Call-based.20Dependency.20Networks/near/225864760\">said</a>:</p>\n<blockquote>\n<p>or just anything that serves HTTP. git really doesn't matter, but maybe you could host it on GitHub in a semi-verifiable way</p>\n</blockquote>\n<p>This sounds like an awesome idea! I will start working on it next week. I created an <a href=\"https://github.com/praezi/rust-emse-2020/issues/3\">issue</a> to keep track of the progress.</p>",
        "id": 225975222,
        "sender_full_name": "jhejderup",
        "timestamp": 1613041532
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/Paper.3A.20Pr.C3.A4zi.3A.20Call-based.20Dependency.20Networks/near/225843434\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"281841\">Robin Moussu</span> was working on something like this for rustdoc to visualize call graphs: <a href=\"https://github.com/robinmoussu/cargo-callgraph\">https://github.com/robinmoussu/cargo-callgraph</a></p>\n</blockquote>\n<p>That's really cool! <span class=\"user-mention\" data-user-id=\"281841\">@Robin Moussu</span> feel free to reach out to Kostas on <a href=\"https://github.com/ktrianta/rust-callgraphs\">github</a>. He has been working on supporting static dispatch, dynamic dispatch (tricky using LLVM IR), and partial support for macro calls.</p>",
        "id": 225975843,
        "sender_full_name": "jhejderup",
        "timestamp": 1613041912
    },
    {
        "content": "<p>With a service like that (i.e. remote and precomputed call graph, not requiring locally available source code) it would even be possible to apply it to analyzing binaries, e.g. <a href=\"https://github.com/Shnatsel/rust-audit\">https://github.com/Shnatsel/rust-audit</a><br>\nHowever, I fear that Cargo features will make this infeasible since the call graph may differ depending on the feature combination, and adding features quickly leads to a combinatorial explosion</p>",
        "id": 226012942,
        "sender_full_name": "Shnatsel",
        "timestamp": 1613059200
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> I think it could be possible to do at least some degree of false-positive elimination, in either case, with no local analysis at all</p>",
        "id": 226083271,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1613093604
    },
    {
        "content": "<p>for transitive dependencies</p>",
        "id": 226083285,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1613093618
    },
    {
        "content": "<p>which seems to be the main place false-positive elimination would be nice</p>",
        "id": 226083292,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1613093628
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132721\">@Tony Arcieri</span> We have started to serve call graphs from our dataset at <a href=\"https://lima.ewi.tudelft.nl/cratesio/\">https://lima.ewi.tudelft.nl/cratesio/</a>. I also made some brief documentation available <a href=\"https://github.com/praezi/rust-emse-2020/blob/main/rustsec/README.md\">here</a> to get started. Other than simple checks, we haven't tried these call graphs for any application, so I would be happy to know if there is any missing or incomplete information.</p>",
        "id": 228298403,
        "sender_full_name": "jhejderup",
        "timestamp": 1614629682
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387642\">@jhejderup</span> this is super cool! curious about this though:</p>\n<blockquote>\n<p>The available call graphs date back to February 2020; newer versions are currently not available</p>\n</blockquote>",
        "id": 228440321,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1614702792
    },
    {
        "content": "<p>random thought: could something like <code>crater</code> generate this information continuously?</p>",
        "id": 228440610,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1614702882
    },
    {
        "content": "<p>that would be a <em>lot</em> of CPU days <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 228440687,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614702915
    },
    {
        "content": "<p>haha</p>",
        "id": 228440709,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1614702924
    },
    {
        "content": "<p>I'm wondering if it could be done incrementally as new crates are published</p>",
        "id": 228440739,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1614702935
    },
    {
        "content": "<p>is the idea that you look at all crates depending on this one to see if it meets the new version constraint? and generate a callgraph if so?</p>",
        "id": 228440880,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614702982
    },
    {
        "content": "<p>that still sounds super expensive <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> imagine every time <code>syn</code> makes a release</p>",
        "id": 228440899,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614702997
    },
    {
        "content": "<p>yeah it sounds tricky, but... <code>crater</code> is already downloading and compiling all of the crates continuously</p>",
        "id": 228441029,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1614703039
    },
    {
        "content": "<p>crater doesn't run continuously, only when someone queues a run</p>",
        "id": 228441053,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614703051
    },
    {
        "content": "<p><a href=\"https://crater.rust-lang.org/\">https://crater.rust-lang.org/</a></p>",
        "id": 228441079,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614703060
    },
    {
        "content": "<p>well, yeah...</p>",
        "id": 228441083,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1614703061
    },
    {
        "content": "<p>so my concern is that the callgraph runs will take over the queue and leave no time for other runs</p>",
        "id": 228441126,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614703082
    },
    {
        "content": "<p>there's already usually a week-long wait</p>",
        "id": 228441222,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614703109
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132721\">Tony Arcieri</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/Paper.3A.20Pr.C3.A4zi.3A.20Call-based.20Dependency.20Networks/near/228440610\">said</a>:</p>\n<blockquote>\n<p>random thought: could something like <code>crater</code> generate this information continuously?</p>\n</blockquote>\n<p>I like the idea of integrating it with <code>crater</code>; I will have to ask Kostas if it is both possible and feasible to do it without much effort</p>",
        "id": 228463009,
        "sender_full_name": "jhejderup",
        "timestamp": 1614710606
    },
    {
        "content": "<p>We used a Docker+Kafka based setup to create a build pipeline last year if I recall correctly.</p>",
        "id": 228463604,
        "sender_full_name": "jhejderup",
        "timestamp": 1614710812
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> the other thing is the calculation doesn't need to be \"on demand\". it could potentially be done as an e.g. weekly job</p>",
        "id": 228465693,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1614711561
    },
    {
        "content": "<p>if we were to lint the <code>[affected.functions]</code> information against this database (for eventual consumption in <code>cargo-audit</code>), we'd just need it to include the crates that security advisories are being filed against, and usually advisories are filed against crates that have been out for awhile</p>",
        "id": 228465943,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1614711649
    },
    {
        "content": "<p>yes, that would be a lot easier</p>",
        "id": 228466057,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614711694
    }
]