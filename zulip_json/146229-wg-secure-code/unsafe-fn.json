[
    {
        "content": "<p>Is there a good reference on \"when your <code>fn</code> should be <code>unsafe fn</code>\"? Brought to you by <a href=\"https://github.com/signalapp/ringrtc/issues/1\" target=\"_blank\" title=\"https://github.com/signalapp/ringrtc/issues/1\">https://github.com/signalapp/ringrtc/issues/1</a></p>",
        "id": 175715193,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1568489971
    },
    {
        "content": "<p>It's somewhat of a topic of unknown: if I have a private function that should be unsafe (i.e., it can cause UB if called incorrectly), must it be unsafe?</p>",
        "id": 175715465,
        "sender_full_name": "simulacrum",
        "timestamp": 1568490432
    },
    {
        "content": "<p>I believe for the current compiler (though it's not documented/specified, etc.) it's true that adding/removing <code>unsafe</code> means nothing, it's essentially \"just\" a lint, but I think I've seen some discussion that we might want to change that</p>",
        "id": 175715515,
        "sender_full_name": "simulacrum",
        "timestamp": 1568490506
    },
    {
        "content": "<p>That matches my understand, that the compiler has no knowledge of <code>unsafe</code>, except that you may perform <code>unsafe</code> operations only in <code>unsafe</code> contexts.</p>\n<p>From an auditability perspective, making <code>unsafe</code> operations as safe is catastrophic though.</p>",
        "id": 175715581,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1568490621
    },
    {
        "content": "<p>I'm not sure I'd go that far -- one example that I've found interesting in the past is <a href=\"https://github.com/dtolnay/erased-serde/blob/master/src/any.rs#L16-L20\" target=\"_blank\" title=\"https://github.com/dtolnay/erased-serde/blob/master/src/any.rs#L16-L20\">https://github.com/dtolnay/erased-serde/blob/master/src/any.rs#L16-L20</a></p>",
        "id": 175715602,
        "sender_full_name": "simulacrum",
        "timestamp": 1568490719
    },
    {
        "content": "<p>In this case essentially this is saying that the whole crate must be audited just as much whether these are unsafe or not due to how their unsafety is specified</p>",
        "id": 175715649,
        "sender_full_name": "simulacrum",
        "timestamp": 1568490768
    },
    {
        "content": "<p>so in some sense, adding that unsafe wouldn't be all that helpful</p>",
        "id": 175715653,
        "sender_full_name": "simulacrum",
        "timestamp": 1568490779
    },
    {
        "content": "<p>though it does in some sense hurt the ability of e.g. cargo-crev to say \"oh, this whole crate has unsafe everywhere\"</p>",
        "id": 175715659,
        "sender_full_name": "simulacrum",
        "timestamp": 1568490803
    },
    {
        "content": "<p><code>unsafe</code> is a marker that you need to manually uphold some invariants before calling this function. This is largely a human-oriented annotation, there is very little tooling that actually uses it. It is mostly a speedbump and a persistent marker to think about what you feed to this function.</p>",
        "id": 175758561,
        "sender_full_name": "Shnatsel",
        "timestamp": 1568569263
    },
    {
        "content": "<p>I have myself created a tool that expects safe functions to never cause UB. The tool is geared towards detecting functions that break this contract, i.e. can cause UB or exploitable security vulnerability by using only safe code.</p>",
        "id": 175758577,
        "sender_full_name": "Shnatsel",
        "timestamp": 1568569312
    },
    {
        "content": "<p>I'd argue that Rust with unsafe functions exposed as safe is basically the same as C code. There are no markers on what's safe and what's not and no automation enforcing that, so you're back to the C situation of constant vigilance, which humans are incapable of.</p>",
        "id": 175758635,
        "sender_full_name": "Shnatsel",
        "timestamp": 1568569386
    },
    {
        "content": "<p>I basically agree with that -- you should be able to know that if you didn't type <code>unsafe</code>, you didn't introduce memory unsafety</p>",
        "id": 175758949,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1568569892
    },
    {
        "content": "<p>I think to an extent this gets back to the notion of having \"unsafe modules\" or some such (i.e., what is the scope of unsafe)</p>",
        "id": 175764335,
        "sender_full_name": "simulacrum",
        "timestamp": 1568578757
    },
    {
        "content": "<p>in erased-serde's case I feel like it's essentially the entire crate that needs to be audited anyway so I sort of agree that marking the functions as unsafe would be unhelpful</p>",
        "id": 175764345,
        "sender_full_name": "simulacrum",
        "timestamp": 1568578789
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130046\">@Alex Gaynor</span> so far the only places I've used <code>unsafe fn</code> are where they're tied to <code>target_feature</code>s (which requires them) or for FFI externs</p>",
        "id": 176021231,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1568824181
    }
]