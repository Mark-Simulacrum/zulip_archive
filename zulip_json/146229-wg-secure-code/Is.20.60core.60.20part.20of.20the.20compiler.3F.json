[
    {
        "content": "<p>I just think that alternate stdlib implementations are an interesting thing, like alternate rust frontends. It seems like it would be easier to specify what no_core rust does than the whole standard library for the purpose of defining \"the rust language\", but I can kind of see the point that <code>#[no_core]</code> should be unstable because maybe it is unpredictable what happens if you don't get the intrinsic definitions right or something</p>",
        "id": 226736290,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613600154
    },
    {
        "content": "<p>I don't think core should be considered separate from the compiler, really. There's no clear boundary between the two like there is between the frontend and codegen</p>",
        "id": 226736432,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613600216
    },
    {
        "content": "<p><a href=\"https://github.com/japaric/steed\">https://github.com/japaric/steed</a> is an alternative stdlib of sorts</p>",
        "id": 226736532,
        "sender_full_name": "Shnatsel",
        "timestamp": 1613600271
    },
    {
        "content": "<p>that only overrides std, not core: <a href=\"https://raw.githubusercontent.com/japaric/steed/master/Xargo.std.toml\">https://raw.githubusercontent.com/japaric/steed/master/Xargo.std.toml</a></p>",
        "id": 226736696,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613600357
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/Stack.20smash.20protection/near/226736290\">said</a>:</p>\n<blockquote>\n<p>I just think that alternate stdlib implementations are an interesting thing, like alternate rust frontends. It seems like it would be easier to specify what no_core rust does than the whole standard library for the purpose of defining \"the rust language\", but I can kind of see the point that <code>#[no_core]</code> should be unstable because maybe it is unpredictable what happens if you don't get the intrinsic definitions right or something</p>\n</blockquote>\n<p>You can't do that split, though.  <code>for</code> loops are defined in terms of things in <code>core</code>.</p>",
        "id": 226737345,
        "sender_full_name": "scottmcm",
        "timestamp": 1613600655
    },
    {
        "content": "<p>Well, that just means that a minimal core library would have to have those particular functions</p>",
        "id": 226737397,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613600691
    },
    {
        "content": "<p>Perhaps core is already a minimal core library but I kind of doubt it</p>",
        "id": 226737453,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613600723
    },
    {
        "content": "<p>the smallest program that will compile with rustc is</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">cat</span><span class=\"w\"> </span><span class=\"n\">no_core</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(no_core, lang_items)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![no_core]</span><span class=\"w\"></span>\n<span class=\"cp\">#![crate_type = </span><span class=\"s\">\"lib\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[lang = </span><span class=\"s\">\"sized\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"nb\">Sized</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 226737495,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613600752
    },
    {
        "content": "<p>however you can't do basically anything with it</p>",
        "id": 226737507,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613600759
    },
    {
        "content": "<p>Yeah, that's why I said that you have to at least declare all the lang items</p>",
        "id": 226737585,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613600791
    },
    {
        "content": "<p>it's not clear to me just how much more is needed</p>",
        "id": 226737596,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613600800
    },
    {
        "content": "<p>at a minimum everything declared with <code>#[lang]</code> I would expect</p>",
        "id": 226737613,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613600812
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/lang_items/enum.LangItem.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/lang_items/enum.LangItem.html</a></p>",
        "id": 226737630,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613600819
    },
    {
        "content": "<p>although I think some of those are just to get around coherence so <code>&amp;[T]</code> can have impls in <code>alloc</code></p>",
        "id": 226737679,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613600851
    },
    {
        "content": "<p>Some impl blocks probably contain more than strictly necessary, for example convenience functions on slices that can't be added any other way</p>",
        "id": 226737683,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613600854
    },
    {
        "content": "<p>does that lang item list contain functions? It doesn't look like it</p>",
        "id": 226737819,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613600913
    },
    {
        "content": "<p>it does: <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/lang_items/enum.LangItem.html#variant.Start\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/lang_items/enum.LangItem.html#variant.Start</a></p>",
        "id": 226737844,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613600924
    },
    {
        "content": "<p>fun fact, if you have <code>#[lang = \"start\"] fn main() {}</code> you get an LLVM assertion</p>\n<div class=\"codehilite\"><pre><span></span><code>Incorrect number of arguments passed to called function!\n  call void @_ZN7no_core4main17hcfbee2d9fb02fb1cE(i8** bitcast (void ()* @_ZN7no_core4main17hc78cb1867f4ab228E to i8**), i64 %3, i8** %1)\nSExt only operates on integer\n  %4 = sext void &lt;badref&gt; to i32\nin function main\nLLVM ERROR: Broken function found, compilation aborted!\n</code></pre></div>",
        "id": 226737903,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613600947
    },
    {
        "content": "<p>That enum should really have docs btw, that seems like a really good place to collect short blurbs about what lang items exist and why</p>",
        "id": 226737975,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613601000
    },
    {
        "content": "<p>heh, the closest link I found was <a href=\"https://doc.rust-lang.org/1.9.0/book/lang-items.html\">https://doc.rust-lang.org/1.9.0/book/lang-items.html</a></p>",
        "id": 226738081,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613601044
    },
    {
        "content": "<p>probably we should move that into the dev guide</p>",
        "id": 226738091,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613601049
    },
    {
        "content": "<p>at the very least it would be nice to have a link to the name of each of those things in rust</p>",
        "id": 226738159,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613601088
    },
    {
        "content": "<p>which would make it obvious what's a function and what's a type</p>",
        "id": 226738252,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613601124
    },
    {
        "content": "<p>I'd take a PR for that :)</p>",
        "id": 226738260,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613601126
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 226738304,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613601146
    },
    {
        "content": "<p>also it does distinguish the two in teh source: <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_hir/lang_items.rs.html#265\">https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_hir/lang_items.rs.html#265</a></p>",
        "id": 226738331,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613601163
    },
    {
        "content": "<p>oh nice, so the docs can even be autogenerated to some extent</p>",
        "id": 226738421,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613601199
    },
    {
        "content": "<p>maybe that macro could autogenerate some docs based on that</p>",
        "id": 226738423,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613601201
    },
    {
        "content": "<p>and there's a small snippet on the module too: <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/lang_items/index.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/lang_items/index.html</a></p>",
        "id": 226738539,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613601249
    },
    {
        "content": "<p>but yeah in general rustc is really bad at internal documention lol</p>",
        "id": 226738600,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613601302
    },
    {
        "content": "<p>I have yet to see a convincing reason why anyone not working on the compiler should need to care about the list.  <code>no_core</code> is not a real scenario.  Something like <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/lang_items/struct.LanguageItems.html#method.shl_assign_trait\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/lang_items/struct.LanguageItems.html#method.shl_assign_trait</a> -- perhaps with better auto-generated comments -- seems fine.</p>\n<p>(And I've seen much unhelpful noise caused by people worrying about whether a particular change adds a lang item.)</p>",
        "id": 226738660,
        "sender_full_name": "scottmcm",
        "timestamp": 1613601336
    },
    {
        "content": "<p>Although I don't really intend to work on the compiler (I'm getting there...) I am definitely interested in understanding how all the moving parts in rust fit together, and stuff like rustc documentation is super helpful in that regard. I don't think the exact details of the list are all that important but it's good to know the ways in which each of the items does something \"magic\" that you can't do manually, e.g. <code>RangeToInclusive</code> is on the list because of the <code>..=</code> notation, <code>AddAssign</code> is on the list because it powers the <code>+=</code> operator and so on</p>",
        "id": 226739089,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613601538
    },
    {
        "content": "<p>you might also find <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustdoc/clean/types.rs.html#1588-1662\">https://doc.rust-lang.org/nightly/nightly-rustc/src/rustdoc/clean/types.rs.html#1588-1662</a> interesting, it maps types to impls</p>",
        "id": 226739567,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613601858
    },
    {
        "content": "<p>Oh, I found something interesting: <br>\n<a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_cranelift/example/mini_core.rs\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_cranelift/example/mini_core.rs</a></p>",
        "id": 226740007,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613602179
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/Is.20.60core.60.20part.20of.20the.20compiler.3F/near/226739089\">said</a>:</p>\n<blockquote>\n<p>I don't think the exact details of the list are all that important but it's good to know the ways in which each of the items does something \"magic\" that you can't do manually, e.g. <code>RangeToInclusive</code> is on the list because of the <code>..=</code> notation, <code>AddAssign</code> is on the list because it powers the <code>+=</code> operator and so on</p>\n</blockquote>\n<p>Note that it's only recently that the lang item list became that -- for quite a while things like <code>?</code> just referenced hard-coded paths.</p>\n<p>In general the reference is the right place to understand all those things.  (Or, more accessibly, things like <a href=\"https://doc.rust-lang.org/nightly/std/#keywords\">https://doc.rust-lang.org/nightly/std/#keywords</a> or the fact that you can search for <code>..=</code> <a href=\"https://doc.rust-lang.org/nightly/std/?search=..%3D\">https://doc.rust-lang.org/nightly/std/?search=..%3D</a> )</p>",
        "id": 226741856,
        "sender_full_name": "scottmcm",
        "timestamp": 1613603266
    },
    {
        "content": "<p>I don't think that any of those methods is complete though</p>",
        "id": 226744156,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613604777
    },
    {
        "content": "<p>well, <code>#keywords</code> is complete for keywords but that's not the same as lang items</p>",
        "id": 226744193,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613604795
    },
    {
        "content": "<p>the advantage of the lang item list is that it is centralized. It's certainly a big improvement over the previous state of affairs that you describe, but it could be better</p>",
        "id": 226744285,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613604858
    },
    {
        "content": "<p>The keyword list looks like just the kind of docs I'm imagining, although the consumers of the lang item documentation would be rustc devs, so it makes more sense as a part of the rustc docs</p>",
        "id": 226744529,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613605044
    },
    {
        "content": "<p>It's a little tricky to find out what the <code>F32Runtime</code> lang item is for that way</p>",
        "id": 226744793,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613605201
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/Is.20.60core.60.20part.20of.20the.20compiler.3F/near/226738260\">said</a>:</p>\n<blockquote>\n<p>I'd take a PR for that :)</p>\n</blockquote>\n<p>Working on that!</p>",
        "id": 226764166,
        "sender_full_name": "Noah Lev",
        "timestamp": 1613623276
    },
    {
        "content": "<p>if you want a minimal Rust-like language/Rust subset with no <code>core</code> (and formally defined semantics), there's hacspec <a href=\"https://github.com/hacspec/hacspec\">https://github.com/hacspec/hacspec</a></p>",
        "id": 226834312,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1613664421
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132721\">@Tony Arcieri</span> I took a look, but I'm having trouble finding examples of what the language actually looks like. There's no examples in the readme and the links are broken: <a href=\"https://github.com/hacspec/hacspec/blob/master/examples/hacspec-chacha20/src/chacha20.rs\">https://github.com/hacspec/hacspec/blob/master/examples/hacspec-chacha20/src/chacha20.rs</a></p>",
        "id": 226835538,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613664840
    },
    {
        "content": "<p><a href=\"https://github.com/hacspec/hacspec/blob/master/examples/chacha20/src/chacha20.rs\">https://github.com/hacspec/hacspec/blob/master/examples/chacha20/src/chacha20.rs</a></p>",
        "id": 226835710,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1613664896
    },
    {
        "content": "<p>it's designed for, among other things, being amenable to symbolic execution environments, e.g. Galois Crucible</p>",
        "id": 226836305,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1613665097
    }
]