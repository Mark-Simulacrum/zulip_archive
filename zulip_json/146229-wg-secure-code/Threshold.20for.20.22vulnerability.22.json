[
    {
        "content": "<p>What is the threshold for something to be considered a \"vulnerability\" for <a href=\"https://github.com/RustSec/advisory-db/blob/master/CONTRIBUTING.md\" target=\"_blank\" title=\"https://github.com/RustSec/advisory-db/blob/master/CONTRIBUTING.md\">https://github.com/RustSec/advisory-db/blob/master/CONTRIBUTING.md</a> ? (And I hope I am asking in the right stream here.)<br>\n<a href=\"https://crates.io/crates/memoffset\" target=\"_blank\" title=\"https://crates.io/crates/memoffset\">https://crates.io/crates/memoffset</a> versions before 0.5 have a critical soundness bug, so it would be good to migrate away and update to 0.5. However, except for version 0.3 and 0.4, there are no known problems that were caused by this pattern. What is the best way to proceed?</p>",
        "id": 170977616,
        "sender_full_name": "RalfJ",
        "timestamp": 1563277799
    },
    {
        "content": "<p>Soundness meaning you can extract multiple <code>&amp;mut</code> references or something?</p>\n<p>I think any time you've got the possibility for memory unsafety using only safe APIs that's fair game</p>",
        "id": 170977978,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1563278053
    },
    {
        "content": "<p>it called <code>mem::uninitialized</code> on arbitrary types</p>",
        "id": 170980684,
        "sender_full_name": "RalfJ",
        "timestamp": 1563280250
    },
    {
        "content": "<p>for most recent compiler versions, that will just panic on uninhabited types, and it is not known to cause problems with inhabited types like <code>bool</code> even though it is UB</p>",
        "id": 170980701,
        "sender_full_name": "RalfJ",
        "timestamp": 1563280275
    },
    {
        "content": "<p>for older compiler versions that do not have this panic yet (I dont recall when it got added), LLVM might do whatever</p>",
        "id": 170980733,
        "sender_full_name": "RalfJ",
        "timestamp": 1563280310
    },
    {
        "content": "<p>Can I get it to call <code>mem::uninitialized</code> with a type that implements <code>Drop</code>, thereby almost certainly causing mayhem? Because that surely seems like it'd qualify.</p>",
        "id": 170980980,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1563280515
    },
    {
        "content": "<p>I think it did <code>mem::forget</code> but let me check</p>",
        "id": 170981004,
        "sender_full_name": "RalfJ",
        "timestamp": 1563280550
    },
    {
        "content": "<p>but note that <code>let b: bool = mem::uninitialized()</code> is insta-UB, drop really is not needed to cause mayhem <em>in theory</em></p>",
        "id": 170981059,
        "sender_full_name": "RalfJ",
        "timestamp": 1563280569
    },
    {
        "content": "<p>Ah, so not a totally straight forward instance of memory unsafety.</p>\n<p>I'm not in charge or anything, but I suppose it qualifies (though I tend to be less excited about these than other vuln types.)</p>",
        "id": 170981092,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1563280625
    },
    {
        "content": "<p>yeah as I said, except for 0.3 and 0.4 there is no known way to cause an actual miscompilation with recent rustc</p>",
        "id": 170981200,
        "sender_full_name": "RalfJ",
        "timestamp": 1563280729
    },
    {
        "content": "<p>Maybe start with an advisory just for 0.3 and 0.4 then?</p>",
        "id": 170981241,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1563280772
    },
    {
        "content": "<p>they were only out very briefly and have no resverse deps so I am wondering if its worth it^^</p>",
        "id": 170981263,
        "sender_full_name": "RalfJ",
        "timestamp": 1563280796
    },
    {
        "content": "<p>actually I am wrong they have reverse deps</p>",
        "id": 170981321,
        "sender_full_name": "RalfJ",
        "timestamp": 1563280810
    },
    {
        "content": "<p>okay so I'll start with that</p>",
        "id": 170981324,
        "sender_full_name": "RalfJ",
        "timestamp": 1563280814
    },
    {
        "content": "<p>It's also always possible for them to have users who aren't other crates</p>",
        "id": 170981541,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1563281006
    },
    {
        "content": "<p>fair</p>",
        "id": 170987637,
        "sender_full_name": "RalfJ",
        "timestamp": 1563285135
    },
    {
        "content": "<p>seems good to me</p>",
        "id": 170988063,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1563285410
    },
    {
        "content": "<p>if something can panic while holding on to <code>mem::uninitialized()</code>, that's exploitable. See <a href=\"https://github.com/RustSec/advisory-db/blob/master/crates/libflate/RUSTSEC-2019-0010.toml\" target=\"_blank\" title=\"https://github.com/RustSec/advisory-db/blob/master/crates/libflate/RUSTSEC-2019-0010.toml\">https://github.com/RustSec/advisory-db/blob/master/crates/libflate/RUSTSEC-2019-0010.toml</a> for example</p>",
        "id": 171113814,
        "sender_full_name": "Shnatsel",
        "timestamp": 1563394639
    },
    {
        "content": "<p><a href=\"https://rustsec.org/advisories/RUSTSEC-2019-0011.html\" target=\"_blank\" title=\"https://rustsec.org/advisories/RUSTSEC-2019-0011.html\">https://rustsec.org/advisories/RUSTSEC-2019-0011.html</a></p>",
        "id": 171113930,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1563394710
    },
    {
        "content": "<p><a href=\"https://github.com/Gilnaa/memoffset/issues/9#issuecomment-505472124\" target=\"_blank\" title=\"https://github.com/Gilnaa/memoffset/issues/9#issuecomment-505472124\">https://github.com/Gilnaa/memoffset/issues/9#issuecomment-505472124</a> - wait, isn't this memory disclosure?</p>",
        "id": 171114086,
        "sender_full_name": "Shnatsel",
        "timestamp": 1563394817
    },
    {
        "content": "<p>sounds like it</p>",
        "id": 171114286,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1563395024
    },
    {
        "content": "<p>It should be mentioned into the advisory then</p>",
        "id": 171119188,
        "sender_full_name": "Shnatsel",
        "timestamp": 1563398918
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> yeah, definitely</p>",
        "id": 171188164,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1563468554
    },
    {
        "content": "<p>do you want to add it or should I?</p>",
        "id": 171188172,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1563468561
    },
    {
        "content": "<p>Best if you do it, I'll try to handle the other smallvec vuln in the meanwhile</p>",
        "id": 171193881,
        "sender_full_name": "Shnatsel",
        "timestamp": 1563472699
    },
    {
        "content": "<p>so I linked that to Patrick Walton and he was questioning it... I'm not sure I'm confident enough to say anything definitive in the advisory</p>",
        "id": 171194144,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1563472882
    },
    {
        "content": "<p>I guess we can just bug <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> directly <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 171194160,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1563472901
    },
    {
        "content": "<p>Neither am I ¯\\_(ツ)_/¯</p>",
        "id": 171194179,
        "sender_full_name": "Shnatsel",
        "timestamp": 1563472921
    },
    {
        "content": "<p>well it's a bug leading to an incorrect offset being returned</p>",
        "id": 171235870,
        "sender_full_name": "RalfJ",
        "timestamp": 1563521045
    },
    {
        "content": "<p>depending on how the offset gets <em>used</em> it could indeed lead to arbitrary OOB memory accesses</p>",
        "id": 171235881,
        "sender_full_name": "RalfJ",
        "timestamp": 1563521071
    },
    {
        "content": "<blockquote>\n<p>if something can panic while holding on to <code>mem::uninitialized()</code>, that's exploitable. See <a href=\"https://github.com/RustSec/advisory-db/blob/master/crates/libflate/RUSTSEC-2019-0010.toml\" target=\"_blank\" title=\"https://github.com/RustSec/advisory-db/blob/master/crates/libflate/RUSTSEC-2019-0010.toml\">https://github.com/RustSec/advisory-db/blob/master/crates/libflate/RUSTSEC-2019-0010.toml</a> for example</p>\n</blockquote>\n<p>I see. And indeed together with the other bug, there <em>could</em> be arbitrary user code being executed (as part of the deref coercion, which I had entirely forgotten about) and if that panics that does lead to dropping a <code>mem::uninitialized</code>.</p>",
        "id": 171235956,
        "sender_full_name": "RalfJ",
        "timestamp": 1563521169
    },
    {
        "content": "<p>this affects <em>all</em> versions before 0.5</p>",
        "id": 171235965,
        "sender_full_name": "RalfJ",
        "timestamp": 1563521184
    },
    {
        "content": "<p>so should the advisory be updated for this?</p>",
        "id": 171235968,
        "sender_full_name": "RalfJ",
        "timestamp": 1563521192
    },
    {
        "content": "<p>I think so but I would prefer someone who understands the exact exploitation path do the writeup <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 171269288,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1563551759
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> Arbitrary OOB memory access is a Big Deal. This definitely needs to go into the advisory.</p>",
        "id": 171274737,
        "sender_full_name": "Shnatsel",
        "timestamp": 1563556006
    },
    {
        "content": "<p>absolutely, I just was not sure if this should be a new advisory or an update. I will then make it an update.</p>",
        "id": 171322692,
        "sender_full_name": "RalfJ",
        "timestamp": 1563620022
    },
    {
        "content": "<p>submitted update: <a href=\"https://github.com/RustSec/advisory-db/pull/129\" target=\"_blank\" title=\"https://github.com/RustSec/advisory-db/pull/129\">https://github.com/RustSec/advisory-db/pull/129</a></p>",
        "id": 171322822,
        "sender_full_name": "RalfJ",
        "timestamp": 1563620259
    },
    {
        "content": "<p>The interesting question is, what do we do about the vulnerable versions with no semver-compatible upgrade path? Is it possible to backport the fixes, or do we need to yank all versions of every single crate that depends on a vulnerable version?</p>",
        "id": 171327420,
        "sender_full_name": "Shnatsel",
        "timestamp": 1563629063
    },
    {
        "content": "<p>there is no semver-compatible upgrade path</p>",
        "id": 171327539,
        "sender_full_name": "RalfJ",
        "timestamp": 1563629308
    },
    {
        "content": "<p>fixing the potential panic during the computation requires ruling out deref coercions, and the only known way to do that only works for testing a field of a type. the old versions of the crate allowed things like <code>offset_of!(Type, field[3].subfield)</code>. We dont know how to statically or dynamically rule out deref coercions for such a macro.</p>",
        "id": 171327550,
        "sender_full_name": "RalfJ",
        "timestamp": 1563629379
    },
    {
        "content": "<p>however, when a crate only uses <code>offset_of!</code> internally and does not actually use it in a way that would cause a deref coercion, there is no reason to yank that crate</p>",
        "id": 171327601,
        "sender_full_name": "RalfJ",
        "timestamp": 1563629427
    },
    {
        "content": "<p>(unless it used version 0.3 or 0.4 which can cause SIGILL)</p>",
        "id": 171327608,
        "sender_full_name": "RalfJ",
        "timestamp": 1563629449
    },
    {
        "content": "<p>Well, we can at least enumerate the crates that depend on old versions. Thanks to <span class=\"user-mention\" data-user-id=\"132723\">@Zach Reizner</span> for <a href=\"https://gitlab.com/zachreizner/crates-audit\" target=\"_blank\" title=\"https://gitlab.com/zachreizner/crates-audit\">https://gitlab.com/zachreizner/crates-audit</a></p>",
        "id": 171328279,
        "sender_full_name": "Shnatsel",
        "timestamp": 1563630737
    },
    {
        "content": "<p>Is there an online summary of this? Just sending PRs to resolve the highest impact ones would be a valuable way for people to contribute to ecosystem security.</p>",
        "id": 171328370,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1563630931
    },
    {
        "content": "<p>do you mean <a href=\"https://crates.io/crates/memoffset/reverse_dependencies\" target=\"_blank\" title=\"https://crates.io/crates/memoffset/reverse_dependencies\">https://crates.io/crates/memoffset/reverse_dependencies</a> ?</p>",
        "id": 171328431,
        "sender_full_name": "RalfJ",
        "timestamp": 1563631017
    },
    {
        "content": "<p>I took care of the three most-downloaded ones in that list</p>",
        "id": 171328445,
        "sender_full_name": "RalfJ",
        "timestamp": 1563631035
    },
    {
        "content": "<blockquote>\n<p>Well, we can at least enumerate the crates that depend on old versions. Thanks to <span class=\"user-mention silent\" data-user-id=\"132723\">Zach Reizner</span> for <a href=\"https://gitlab.com/zachreizner/crates-audit\" target=\"_blank\" title=\"https://gitlab.com/zachreizner/crates-audit\">https://gitlab.com/zachreizner/crates-audit</a></p>\n</blockquote>\n<p>what does that do? the repo doesn't explain anything...</p>",
        "id": 171328503,
        "sender_full_name": "RalfJ",
        "timestamp": 1563631105
    },
    {
        "content": "<p>It analyzes all of <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a> and finds packages which depend on a package which has a rustsec vuln</p>",
        "id": 171328622,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1563631272
    },
    {
        "content": "<p>The interesting part is that it does so transitively. So you can look up all the leaf crates affected by a vulnerability.<br>\nIt currently only detects cases without a semver-compatible upgrade path.</p>",
        "id": 171328757,
        "sender_full_name": "Shnatsel",
        "timestamp": 1563631527
    },
    {
        "content": "<p>I see, interesting. I basically sued the download numbers as a proxy for \"is this in the transitive chain of something widely used\".</p>",
        "id": 171330075,
        "sender_full_name": "RalfJ",
        "timestamp": 1563633952
    },
    {
        "content": "<p>crates-audit is running here: <a href=\"https://crates.rustsec.org/\" target=\"_blank\" title=\"https://crates.rustsec.org/\">https://crates.rustsec.org/</a></p>",
        "id": 171332357,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1563637878
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> your update looks good. should it specifically call out potential memory exposure and/or RCE?</p>",
        "id": 171332359,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1563637889
    },
    {
        "content": "<p>made a note of that on the PR</p>",
        "id": 171333886,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1563640609
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> re: upgrade path for vulnerable versions and semver compat, someone with the same question <a href=\"https://twitter.com/DPC_22/status/1152623528442773505\" target=\"_blank\" title=\"https://twitter.com/DPC_22/status/1152623528442773505\">https://twitter.com/DPC_22/status/1152623528442773505</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/DPC_22/status/1152623528442773505\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/1009416360630345728/Uy0WI9V4_normal.jpg\"></a><p><a href=\"https://twitter.com/bascule\" target=\"_blank\" title=\"https://twitter.com/bascule\">@bascule</a> <a href=\"https://twitter.com/rustlang\" target=\"_blank\" title=\"https://twitter.com/rustlang\">@rustlang</a> We are facing a dilemma as crate authors as replacing it in a minor release would mean bumping the msvr to 1.36.0 which would break the crate on older compilers and updating it in a major means people who have to manually update it</p><span>- ໓ฯlคຖ ໓p¢ (@DPC_22)</span></div></div>",
        "id": 171335111,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1563642888
    },
    {
        "content": "<p>Re: twitter complaint: they need a third option. Backport something somewhere - extract stdlib function into their crate or some such. I wouldn't worry about MSRV 1.32 but if it's 1.36 that's too extreme. And if it's not fixable that way... well, rewrite the code to be slower but actually safe.</p>",
        "id": 171335368,
        "sender_full_name": "Shnatsel",
        "timestamp": 1563643426
    },
    {
        "content": "<p>I don't have twitter so can't comment in there</p>",
        "id": 171335417,
        "sender_full_name": "Shnatsel",
        "timestamp": 1563643473
    },
    {
        "content": "<p>Oh, regarding uninitialized memory and panic, there was this exact problem in libflate too: <a href=\"https://rustsec.org/advisories/RUSTSEC-2019-0010.html\" target=\"_blank\" title=\"https://rustsec.org/advisories/RUSTSEC-2019-0010.html\">https://rustsec.org/advisories/RUSTSEC-2019-0010.html</a> and it's fixed by using <code>take_mut</code> crate instead of uninitialized memory.</p>",
        "id": 171335919,
        "sender_full_name": "Shnatsel",
        "timestamp": 1563644446
    },
    {
        "content": "<blockquote>\n<p>The issue was discovered and fixed by Shnatsel.</p>\n</blockquote>\n<p>This is weird to see in an advisory for some reason.</p>",
        "id": 171335936,
        "sender_full_name": "Shnatsel",
        "timestamp": 1563644479
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> thanks. The relevant discussion is here</p>",
        "id": 171338985,
        "sender_full_name": "DPC",
        "timestamp": 1563649994
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 171338986,
        "sender_full_name": "DPC",
        "timestamp": 1563649998
    },
    {
        "content": "<p>Wait</p>",
        "id": 171338990,
        "sender_full_name": "DPC",
        "timestamp": 1563650007
    },
    {
        "content": "<p><a href=\"https://github.com/sodiumoxide/sodiumoxide/pull/350\" target=\"_blank\" title=\"https://github.com/sodiumoxide/sodiumoxide/pull/350\">https://github.com/sodiumoxide/sodiumoxide/pull/350</a></p>",
        "id": 171338993,
        "sender_full_name": "DPC",
        "timestamp": 1563650035
    },
    {
        "content": "<p>There is nothing in there saying it's exploitable though</p>",
        "id": 171339045,
        "sender_full_name": "Shnatsel",
        "timestamp": 1563650106
    },
    {
        "content": "<p>Yes it may not be. But we are taking the safe option and replacing rather than depending on a deprecated function</p>",
        "id": 171339122,
        "sender_full_name": "DPC",
        "timestamp": 1563650238
    },
    {
        "content": "<p>This function is not yet deprecated and won't be until 1.40, so I don't see an immediate problem.</p>",
        "id": 171339124,
        "sender_full_name": "Shnatsel",
        "timestamp": 1563650270
    },
    {
        "content": "<p>it's deprecated with 1.39</p>",
        "id": 171339164,
        "sender_full_name": "RalfJ",
        "timestamp": 1563650286
    },
    {
        "content": "<p>and the only reason we are waiting is to give people time to migrate</p>",
        "id": 171339167,
        "sender_full_name": "RalfJ",
        "timestamp": 1563650307
    },
    {
        "content": "<p>Huh. With Debian Stable shipping 1.34 and Ubuntu shipping 1.32, I'd expect people will need <em>way</em> more time to migrate.</p>",
        "id": 171339172,
        "sender_full_name": "Shnatsel",
        "timestamp": 1563650326
    },
    {
        "content": "<p>but yeah, mem::uninitialized has been broken since forever, it's just with 1.36 now there is finally a fix -- but it requires bumping the minimal Rust version</p>",
        "id": 171339174,
        "sender_full_name": "RalfJ",
        "timestamp": 1563650333
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> that makes me somewhat sad <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span></p>",
        "id": 171339180,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1563650364
    },
    {
        "content": "<p>Thanks. Yeah which is 2-3 months later which goes well with our release plans</p>",
        "id": 171339181,
        "sender_full_name": "DPC",
        "timestamp": 1563650376
    },
    {
        "content": "<p>I don't think there is any precedence for aligning deprecation schedule with distros? deprecating 3 versions in the future is our \"cautious\" deprecation, most of the time stuff just gets deprecated with some release ;)</p>",
        "id": 171339185,
        "sender_full_name": "RalfJ",
        "timestamp": 1563650397
    },
    {
        "content": "<p>Yeah deprecations don't align with distro releases</p>",
        "id": 171339234,
        "sender_full_name": "DPC",
        "timestamp": 1563650423
    },
    {
        "content": "<p>it's sad that debian and ubuntu have a pre-MaybeUninit rust, but then there are tons of reasons why using a 1-year-old Rust is a bad idea even if thats what your distro ships</p>",
        "id": 171339240,
        "sender_full_name": "RalfJ",
        "timestamp": 1563650458
    },
    {
        "content": "<p>Ubuntu LTS actually updated to 1.32, despite being from April 2018... so there is hope</p>",
        "id": 171339249,
        "sender_full_name": "Shnatsel",
        "timestamp": 1563650494
    },
    {
        "content": "<p>so if they want to stick with that (as opposed to RedHat where I heard they will actually ship ever 2nd Rust release to their stable distro)... well bad for them I guess and someone should talk with them about that.</p>",
        "id": 171339252,
        "sender_full_name": "RalfJ",
        "timestamp": 1563650507
    },
    {
        "content": "<p>We have got bitten by that before. Had to maintain 1.22.0 for a long time on another crate  because of fedora (till we bumped it to 1.32 when we switched to 2018 Ed)</p>",
        "id": 171339292,
        "sender_full_name": "DPC",
        "timestamp": 1563650530
    },
    {
        "content": "<p>I mean if you are not affected by <a href=\"https://github.com/rust-lang/rust/issues/62825\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/62825\">https://github.com/rust-lang/rust/issues/62825</a> there is no reason to do the switch to MaybeUninit now rather than in 2 or 3 releases, I guess</p>",
        "id": 171339294,
        "sender_full_name": "RalfJ",
        "timestamp": 1563650541
    },
    {
        "content": "<p><code>miniz_oxide</code> also has a hypothetical safety improvement if bumped to 1.34 as minimum version thanks to <code>u32::from_le_bytes()</code> and <code>try_into()</code>, but it has so many checks around it already so I'm not really worried</p>",
        "id": 171339297,
        "sender_full_name": "Shnatsel",
        "timestamp": 1563650563
    },
    {
        "content": "<p>for production applications we're primarily CentOS users. We source Rust from the Fedora repos, but the Fedora Rust people are amazing and usually turn around new RPMs for each Rust release in less than a week</p>",
        "id": 171339302,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1563650577
    },
    {
        "content": "<p>Debian/Ubuntu people do not seem to be quite as enthusiastic about Rust...</p>",
        "id": 171339311,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1563650622
    },
    {
        "content": "<p>RHEL also has aggressive about their update policy, with 3-month syncs</p>",
        "id": 171339318,
        "sender_full_name": "Shnatsel",
        "timestamp": 1563650639
    },
    {
        "content": "<p>Yeah Ralf, but it will most likely be a while before we create a new release so it is fine</p>",
        "id": 171339358,
        "sender_full_name": "DPC",
        "timestamp": 1563650649
    },
    {
        "content": "<p>RedHat is also actually using Rust in some of their tools (e.g. <code>rpm-ostree</code>), whereas I see Debian people talking about dropping support for projects which are migrating to Rust because they don't want to deal with building them <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span></p>",
        "id": 171339368,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1563650675
    },
    {
        "content": "<p>I believe Ubuntu actually updates Rust after the distro release, which is basically unprecedented. The only other packages to do that other than rustc are Firefox and Chromium.</p>",
        "id": 171339370,
        "sender_full_name": "Shnatsel",
        "timestamp": 1563650677
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> neat</p>",
        "id": 171339371,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1563650691
    },
    {
        "content": "<p>Tony there is some talk going on with having an Ubuntu snap. Details aren't public yet iirc</p>",
        "id": 171339378,
        "sender_full_name": "DPC",
        "timestamp": 1563650703
    },
    {
        "content": "<p>nice</p>",
        "id": 171339385,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1563650715
    },
    {
        "content": "<p>oh WOW they're on 1.35 already!</p>",
        "id": 171339387,
        "sender_full_name": "Shnatsel",
        "timestamp": 1563650726
    },
    {
        "content": "<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 171339389,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1563650733
    },
    {
        "content": "<p>that's good, because a bunch of my crates are 1.35 minimum now</p>",
        "id": 171339391,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1563650749
    },
    {
        "content": "<p>1.35 because it's apparently a security update?</p>",
        "id": 171339393,
        "sender_full_name": "Shnatsel",
        "timestamp": 1563650760
    },
    {
        "content": "<p>aah</p>",
        "id": 171339433,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1563650765
    },
    {
        "content": "<p>What security update?</p>",
        "id": 171339434,
        "sender_full_name": "DPC",
        "timestamp": 1563650777
    },
    {
        "content": "<p>IDK, it comes from the security updates repo but there is nothing about it on Ubuntu Security Notices</p>",
        "id": 171339497,
        "sender_full_name": "Shnatsel",
        "timestamp": 1563650920
    },
    {
        "content": "<p>The latest CVE I've filed was <a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-1010299\" target=\"_blank\" title=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-1010299\">https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-1010299</a></p>",
        "id": 171339502,
        "sender_full_name": "Shnatsel",
        "timestamp": 1563650929
    },
    {
        "content": "<p><a href=\"https://www.cvedetails.com/vulnerability-search.php?f=1&amp;vendor=&amp;product=Rust%2C+&amp;cveid=&amp;msid=&amp;bidno=&amp;cweid=&amp;cvssscoremin=&amp;cvssscoremax=&amp;psy=&amp;psm=&amp;pey=&amp;pem=&amp;usy=&amp;usm=&amp;uey=&amp;uem=\" target=\"_blank\" title=\"https://www.cvedetails.com/vulnerability-search.php?f=1&amp;vendor=&amp;product=Rust%2C+&amp;cveid=&amp;msid=&amp;bidno=&amp;cweid=&amp;cvssscoremin=&amp;cvssscoremax=&amp;psy=&amp;psm=&amp;pey=&amp;pem=&amp;usy=&amp;usm=&amp;uey=&amp;uem=\">https://www.cvedetails.com/vulnerability-search.php?f=1&amp;vendor=&amp;product=Rust%2C+&amp;cveid=&amp;msid=&amp;bidno=&amp;cweid=&amp;cvssscoremin=&amp;cvssscoremax=&amp;psy=&amp;psm=&amp;pey=&amp;pem=&amp;usy=&amp;usm=&amp;uey=&amp;uem=</a> - nothing here for 1.32 that they shipped previously. Oh well. Good thing it's up to date though!</p>",
        "id": 171339562,
        "sender_full_name": "Shnatsel",
        "timestamp": 1563651017
    },
    {
        "content": "<p>Thanks for the help :)</p>",
        "id": 171339767,
        "sender_full_name": "DPC",
        "timestamp": 1563651397
    },
    {
        "content": "<p>Any idea where I can browse the current package versions for RHEL/CentOS? I know of <a href=\"https://packages.ubuntu.com/\" target=\"_blank\" title=\"https://packages.ubuntu.com/\">https://packages.ubuntu.com/</a> and <a href=\"https://www.debian.org/distrib/packages\" target=\"_blank\" title=\"https://www.debian.org/distrib/packages\">https://www.debian.org/distrib/packages</a> but nothing equivalent for RHEL</p>",
        "id": 171340199,
        "sender_full_name": "Shnatsel",
        "timestamp": 1563652185
    },
    {
        "content": "<p>I might be a bit silly but if I'm trying to find things via the web as opposed to using the <code>yum</code>/<code>dnf</code> CLI tools, here's how I typically do it: <a href=\"http://mirror.centos.org/centos/7/os/x86_64/\" target=\"_blank\" title=\"http://mirror.centos.org/centos/7/os/x86_64/\">http://mirror.centos.org/centos/7/os/x86_64/</a></p>",
        "id": 171342779,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1563657042
    },
    {
        "content": "<p>that's not the yum repo I source Rust from, though</p>",
        "id": 171342780,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1563657048
    },
    {
        "content": "<p>we install Rust from EPEL, which is repackaged from the Fedora Rust builds</p>",
        "id": 171342838,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1563657137
    },
    {
        "content": "<p>we try to minimize use of EPEL and it's not enabled per default, but I think Rust is a great example of it working</p>",
        "id": 171342845,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1563657176
    },
    {
        "content": "<p>also the Fedora Rust team seems amazing</p>",
        "id": 171342850,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1563657191
    },
    {
        "content": "<p>RedHat seems to be quite interested in Rust, especially for things like building out Project Atomic</p>",
        "id": 171342903,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1563657268
    }
]