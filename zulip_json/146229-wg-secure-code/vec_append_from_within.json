[
    {
        "content": "<p>This \"append part of vector to itself\" problem has caused bugs in two crates and even a CVE in stdlib. I'm writing an RFC for a stdlib abtraction to fix this once and for all. Sneak peek:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">].</span><span class=\"n\">append_from_within</span><span class=\"p\">((..</span><span class=\"mi\">1</span><span class=\"p\">)),</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">].</span><span class=\"n\">append_from_within</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">..)),</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">].</span><span class=\"n\">append_from_within</span><span class=\"p\">((..)),</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">].</span><span class=\"n\">append_from_within</span><span class=\"p\">((..</span><span class=\"mi\">20</span><span class=\"p\">));</span><span class=\"w\"> </span><span class=\"c1\">// panic!</span>\n</pre></div>",
        "id": 168636954,
        "sender_full_name": "Shnatsel",
        "timestamp": 1561066701
    },
    {
        "content": "<p>Do I understand correctly that if you want to read several elements from the vector, modify them in some way and append them to the vector you'd have to copy them onto the stack or a different heap location? Otherwise modification would affect the elements within the vector, right?</p>",
        "id": 168637081,
        "sender_full_name": "Shnatsel",
        "timestamp": 1561066822
    },
    {
        "content": "<p>Oh yeah, important constraint: I also want to push them all at the same time</p>",
        "id": 168637585,
        "sender_full_name": "Shnatsel",
        "timestamp": 1561067315
    },
    {
        "content": "<p>that sounds like the safest way to avoid aliasing issues to me...</p>",
        "id": 168641541,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1561071362
    },
    {
        "content": "<p>so is the issue people are doing unsafe in-place modifications and running into aliasing bugs?</p>",
        "id": 168641594,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1561071425
    },
    {
        "content": "<p>The issue is people are trying to append large chunks of the vector to itself. There is no safe way to do that, so they hand-roll unsafe code that does <code>set_len()</code> on vector and then fill it in by copying from the already initialized part. RLE implementations end up not handling the degenerate case where the offset for copying is 0 and they just iterate over the buffer reading uninitialized bytes and writing them back in their place. Stdlib dodged that (hopefully - I haven't checked), but didn't handle the overflow in length computation and ended up with a buffer overflow bug, see CVE-2018-1000810</p>",
        "id": 168644725,
        "sender_full_name": "Shnatsel",
        "timestamp": 1561074992
    },
    {
        "content": "<p>The RFC is almost complete, here's what I've got so far: <a href=\"https://gist.github.com/Shnatsel/e3907b56921e1b6be187aad1d86efc3e\" target=\"_blank\" title=\"https://gist.github.com/Shnatsel/e3907b56921e1b6be187aad1d86efc3e\">https://gist.github.com/Shnatsel/e3907b56921e1b6be187aad1d86efc3e</a></p>",
        "id": 168645086,
        "sender_full_name": "Shnatsel",
        "timestamp": 1561075462
    },
    {
        "content": "<p>FWIW your python example has slightly different semantics, since slicing a list performs a copy, so:</p>\n<blockquote>\n<p><code>.extend</code> method works even when passing a subslice of the same list<br>\nIs mostly irrelevant since subslices aren't a thing.</p>\n</blockquote>",
        "id": 168675056,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1561118433
    },
    {
        "content": "<p>Thanks, I've amended it to make that more clear. Also replaced the C example with a memcpy.</p>",
        "id": 168713019,
        "sender_full_name": "Shnatsel",
        "timestamp": 1561148289
    },
    {
        "content": "<p>RFC is now up for review: <a href=\"https://github.com/rust-lang/rfcs/pull/2714\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/pull/2714\">https://github.com/rust-lang/rfcs/pull/2714</a></p>",
        "id": 168713027,
        "sender_full_name": "Shnatsel",
        "timestamp": 1561148298
    },
    {
        "content": "<p>subscribed to the issue</p>",
        "id": 169412364,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1562000843
    }
]