[
    {
        "content": "<p>got an <code>unsafe</code>-using PR to <code>zeroize</code>: <a href=\"https://github.com/iqlusioninc/crates/pull/341/files\" target=\"_blank\" title=\"https://github.com/iqlusioninc/crates/pull/341/files\">https://github.com/iqlusioninc/crates/pull/341/files</a></p>",
        "id": 186782714,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1580218703
    },
    {
        "content": "<p>at first glance it seems ok</p>",
        "id": 186782734,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1580218710
    },
    {
        "content": "<p>I think this is technically UB, since it can create a slice of uninitialized memory.</p>",
        "id": 186782808,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1580218785
    },
    {
        "content": "<p>IIUC, you want <a href=\"https://github.com/rust-lang/rust/pull/68234\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/68234\">https://github.com/rust-lang/rust/pull/68234</a> which was stabalized yesterday :-)</p>",
        "id": 186782887,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1580218814
    },
    {
        "content": "<p>It does, but then it immediately uses it for <code>ptr::write_volatile</code>. perhaps there's no need to ever go to a slice to begin with</p>",
        "id": 186783706,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1580219396
    },
    {
        "content": "<p>One possible course to avoid all that manual multiplication and the unsoundness would be to create a <code>[MaybeUninit&lt;T&gt;]</code> slice instead, is <code>MaybeUninit&lt;T&gt;: Zeroize</code>?</p>",
        "id": 186783771,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1580219427
    },
    {
        "content": "<p>And if not, it probably should be.</p>",
        "id": 186784115,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1580219667
    },
    {
        "content": "<p>perhaps <code>MaybeUninit&lt;Z&gt;: Zeroize where Z: Zeroize</code></p>",
        "id": 186784345,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1580219822
    },
    {
        "content": "<p>or more like <code>MaybeUninit&lt;Z&gt;: Zeroize where Z: DefaultIsZeroes</code></p>",
        "id": 186784382,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1580219838
    },
    {
        "content": "<p>I mean <code>MaybeUninit&lt;Z&gt;: Zeroize</code> without any conditions. <code>MaybeUninit::zeroed()</code> is stable as well.</p>",
        "id": 186784564,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1580219950
    },
    {
        "content": "<p>But of course even with the bound it would be sufficient for this case, you can always relax it later if you feel more comfortable with that course.</p>",
        "id": 186784612,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1580219996
    },
    {
        "content": "<p>I guess that's an option</p>",
        "id": 186784768,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1580220092
    },
    {
        "content": "<p>PR updated to work entirely in terms of <code>*mut u8</code></p>",
        "id": 186886856,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1580305887
    },
    {
        "content": "<p>I think it looks okay now but...</p>",
        "id": 186886860,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1580305895
    },
    {
        "content": "<p>I wonder if there's a safer way to implement it...</p>",
        "id": 186900764,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1580314593
    },
    {
        "content": "<p>heh uhh, what <a href=\"https://github.com/iqlusioninc/crates/pull/341#discussion_r373196098\" target=\"_blank\" title=\"https://github.com/iqlusioninc/crates/pull/341#discussion_r373196098\">https://github.com/iqlusioninc/crates/pull/341#discussion_r373196098</a></p>",
        "id": 187033620,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1580420105
    },
    {
        "content": "<p>aaaand I think we just got further in the weeds <span aria-label=\"weary\" class=\"emoji emoji-1f629\" role=\"img\" title=\"weary\">:weary:</span></p>",
        "id": 187035939,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1580421576
    },
    {
        "content": "<p>I'm failing to see what's \"UB\" about writing zeros to what is otherwise properly allocated but otherwise uninitialized memory</p>",
        "id": 187037180,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1580422496
    },
    {
        "content": "<p>and then never reading from it until it's initialized</p>",
        "id": 187037201,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1580422519
    },
    {
        "content": "<p>It seems like the argument is: given bugs in the Vec API, and hypothetical changes to the Rust compiler, some ill-defined problem could occur</p>",
        "id": 187038567,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1580423590
    },
    {
        "content": "<p>aah I get it now, it would unsafely expose <code>mem::zeroed</code> to safe Rust via the type parameter</p>",
        "id": 187039139,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1580423994
    },
    {
        "content": "<p>I hate <code>unsafe</code> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 187039140,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1580423997
    }
]