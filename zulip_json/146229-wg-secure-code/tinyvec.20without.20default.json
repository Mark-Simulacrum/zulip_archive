[
    {
        "content": "<p>So I am working on a library that has a data structure that tends to be 1,2,meny in length. Using <a href=\"https://docs.rs/smallvec/1.4.2/smallvec/\">smallvec</a> gets a 1.5x perf improvement over using std::Vec. I know that <code>smallvec</code> does not have a great reputation. <a href=\"https://docs.rs/tinyvec/1.0.1/tinyvec/\">tinyvec</a> has a default requirement that I don't want to leek to my api. <br>\nHow bad is smallvec?<br>\nAre there more alternatives in this space?</p>",
        "id": 213587862,
        "sender_full_name": "Eh2406",
        "timestamp": 1602868308
    },
    {
        "content": "<p>I don't think there's any reason not to use smallvec, known bugs have all been fixed to my knowledge</p>",
        "id": 213588628,
        "sender_full_name": "simulacrum",
        "timestamp": 1602868667
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> If you don't need to dereference to a slice of your elements, you can store some elements on the stack safely by wrapping them in an <code>Option</code> and initializing the backing array to <code>None</code>. This avoids all unsafe code in a similar way to TinyVec. Otherwise you'll need to either require Default or deal with uninitialized memory.<br>\nYou can verify SmallVec using <a href=\"https://github.com/jakubadamw/rutenspitz\">https://github.com/jakubadamw/rutenspitz</a> - this will tell you how bad it is, and find any glaring bugs for relatively cheap. SmallVec already has a hand-rolled fuzzing harness to that effect, since recent vulns have put it under more scrutiny.</p>",
        "id": 213911405,
        "sender_full_name": "Shnatsel",
        "timestamp": 1603197208
    }
]