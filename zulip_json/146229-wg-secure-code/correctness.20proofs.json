[
    {
        "content": "<p>Stupid question: how do correctness proofs handle potentially buggy syscalls which break your assumptions?</p>",
        "id": 136125154,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1539968909
    },
    {
        "content": "<p>No. You have to either assume external stuff behaves in a certain way, or go and actually verify that external stuff.<br>\nWhich is why proven-correct mutex or semaphore implementation in Rust stdlib actually deadlocks when called recursively: Microsoft's implementation of the relevant OS primitive does not support it.</p>",
        "id": 136125377,
        "sender_full_name": "Shnatsel",
        "timestamp": 1539969092
    },
    {
        "content": "<p>I was going to ask more questions, but I don't know the first thing about software verification. <span class=\"emoji emoji-1f636\" title=\"speechless\">:speechless:</span> I'm going to go educate myself.</p>",
        "id": 136125868,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1539969514
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132723\">@Zach Reizner</span> solution: use seL4, prove your program correct in Isabelle, and build on their existing Isabelle proofs for seL4 <span class=\"emoji emoji-1f61c\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 136126012,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1539969619
    },
    {
        "content": "<p>If that was a joke, it went right over my head <span class=\"emoji emoji-1f60e\" title=\"sunglasses\">:sunglasses:</span></p>",
        "id": 136126040,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1539969655
    },
    {
        "content": "<p>It's a joke. They did 100,000 LoC of proofs for a 1,000 LoC program in C.</p>",
        "id": 136126054,
        "sender_full_name": "Shnatsel",
        "timestamp": 1539969676
    },
    {
        "content": "<p>it's also the recommended way you develop applications for seL4, heh</p>",
        "id": 136126059,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1539969690
    },
    {
        "content": "<p>...only to get what safe Rust already guarantees, assuming the stdlib and compiler are bug-free</p>",
        "id": 136126069,
        "sender_full_name": "Shnatsel",
        "timestamp": 1539969716
    },
    {
        "content": "<p>yup, yeah I'm personally in the \"write the best Rust I can and hope that's good enough\" department for now</p>",
        "id": 136126117,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1539969735
    },
    {
        "content": "<p>I'm really curious about applying SMACK to Rust now that it's been ported but didn't get a chance to really dig into it yet. I guess I'll repost this link in this topic too: <a href=\"http://soarlab.org/publications/atva2018-bhr.pdf\" target=\"_blank\" title=\"http://soarlab.org/publications/atva2018-bhr.pdf\">http://soarlab.org/publications/atva2018-bhr.pdf</a> - this is an article from the guys who adapted it for Rust and got several programs verified. Seems like it would have caught the latest stdlib CVE too.</p>",
        "id": 136126248,
        "sender_full_name": "Shnatsel",
        "timestamp": 1539969898
    }
]