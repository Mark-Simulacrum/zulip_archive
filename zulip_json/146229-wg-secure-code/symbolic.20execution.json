[
    {
        "content": "<p>Galois has released a new symbolic execution tool for C, C++ and Rust: <a href=\"https://crux.galois.com/\">https://crux.galois.com/</a><br>\nI'm not sure how complete it is, but it does look interesting. I don't think we had any symbolic execution tools Actually Working prior to this.</p>",
        "id": 212939432,
        "sender_full_name": "Shnatsel",
        "timestamp": 1602372082
    },
    {
        "content": "<p>I've added it to <a href=\"https://github.com/rust-secure-code/projects\">https://github.com/rust-secure-code/projects</a></p>",
        "id": 212939863,
        "sender_full_name": "Shnatsel",
        "timestamp": 1602372899
    },
    {
        "content": "<p>Klee would work if you spent enough time messing with it</p>",
        "id": 212940937,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602375079
    },
    {
        "content": "<p>But it wasn't particularly easy to use</p>",
        "id": 212940941,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602375090
    },
    {
        "content": "<p>If I am not mistaken, <span class=\"user-mention\" data-user-id=\"336739\">@Alastair Reid</span> team is working on having a common interface for Crux, Klee, and Proptest.</p>",
        "id": 212974098,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1602437711
    },
    {
        "content": "<p>Yes, our goal is to get as many different tools and as many different <em>types</em> of tool to support a common interface so that:</p>\n<p>1) We can switch between symbolic execution, bounded model checking, model checking, abstract interpretation and any other form of verification you wish to use. So you can use the type of tool that best suits the current phase of development.</p>\n<p>2) We can switch tools easily. Because even tools of the same type have different sweet spots.</p>\n<p>We are building on a foundation of fuzzing and testing (i.e., proptest) because our focus is on how to get orders of magnitude more programmers to use formal verification tools. So we are \"meeting developers where they are\". That is, we are starting with what programmers are already comfortable with, have experience of, etc. and seeing how far we can get from there.</p>\n<p>We are  in a really early stage of this work but you can get what we have here: <a href=\"https://github.com/project-oak/rust-verification-tools\">https://github.com/project-oak/rust-verification-tools</a><br>\nAt the moment, we have support for KLEE and Crux and we are working to expand that. But, let me warn you that the KLEE setup is painful and and we need to rework the Crux setup to take advantage of the packages in Galois' release.  Very much a work in progress!<br>\nIf anybody has any other verification tools that work with Rust, we would welcome pull requests, etc.</p>",
        "id": 212975132,
        "sender_full_name": "Alastair Reid",
        "timestamp": 1602439297
    },
    {
        "content": "<p>perhaps <a href=\"https://github.com/viperproject/prusti-dev/\">https://github.com/viperproject/prusti-dev/</a> but the setup is also a pain, and it requires a vastly outdated version of rustc</p>",
        "id": 213156039,
        "sender_full_name": "Shnatsel",
        "timestamp": 1602596823
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127617\">Shnatsel</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/symbolic.20execution/near/213156039\">said</a>:</p>\n<blockquote>\n<p>perhaps <a href=\"https://github.com/viperproject/prusti-dev/\">https://github.com/viperproject/prusti-dev/</a> but the setup is also a pain, and it requires a vastly outdated version of rustc</p>\n</blockquote>\n<p>We are currently switching to the latest version of Rustc, so some setup things and documentation could be temporarily broken. However, if you have problems getting started with the <a href=\"https://marketplace.visualstudio.com/items?itemName=viper-admin.prusti-assistant\">VS Code extension</a>, we would appreciate a bug report <span aria-label=\"smiling face\" class=\"emoji emoji-263a\" role=\"img\" title=\"smiling face\">:smiling_face:</span>.</p>",
        "id": 213161971,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1602599084
    },
    {
        "content": "<p>Oh, I wasn't aware of the extension! That looks like it simplifies things a lot, thanks!</p>",
        "id": 213163750,
        "sender_full_name": "Shnatsel",
        "timestamp": 1602599655
    },
    {
        "content": "<p>hi all, I'm working on the beginning stages of adding <a href=\"https://github.com/eurecom-s3/symcc\">https://github.com/eurecom-s3/symcc</a> as an LLVM codegen pass. I saw some questions in #general and #t-compiler/help about passes, and going to try out some hacks with <code>cc</code> and backend <code>rustc</code> stuff. open to any pointers and/or collaboration</p>",
        "id": 213341722,
        "sender_full_name": "nyms",
        "timestamp": 1602704868
    },
    {
        "content": "<p>Hi! I was wondering if anybody knows why Galois developed <a href=\"https://github.com/GaloisInc/crucible/tree/master/crux-mir\">crux-mir</a> in addition to <a href=\"https://github.com/GaloisInc/crucible/tree/master/crux-llvm\">crux-llvm</a>? What are the benefits of doing symbolic execution on the MIR as opposed to the LLVM IR?</p>",
        "id": 216345324,
        "sender_full_name": "Dominik Stolz",
        "timestamp": 1605101361
    },
    {
        "content": "<p>I don't know, but I'd guess it's the fact that there's much more high-level information available</p>",
        "id": 216345503,
        "sender_full_name": "oli",
        "timestamp": 1605101467
    },
    {
        "content": "<p>Do you have an example for information only available on the MIR which would be particularly useful for symbolic execution? (type information?)</p>",
        "id": 216345770,
        "sender_full_name": "Dominik Stolz",
        "timestamp": 1605101599
    },
    {
        "content": "<p>probably layout information about enums</p>",
        "id": 216348692,
        "sender_full_name": "oli",
        "timestamp": 1605103078
    },
    {
        "content": "<p>llvm just sees weird structs</p>",
        "id": 216348701,
        "sender_full_name": "oli",
        "timestamp": 1605103082
    },
    {
        "content": "<p>More than just enums -- a <code>struct Foo { a: u32, b: u16, c: u16 }</code> is bitpacked into an LLVM <code>i64</code>, and it's probably easier not to have to deal with all the <a href=\"https://rust.godbolt.org/z/Pr36Kr\">shifts-ands-ors</a> on every field access.</p>",
        "id": 216350298,
        "sender_full_name": "scottmcm",
        "timestamp": 1605103884
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"302700\">@Dominik Stolz</span> if I understand their longer-term plans correctly, they intend to translate MIR to their intermediate language (Crucible)</p>",
        "id": 216352427,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1605104993
    },
    {
        "content": "<p>with Crucible, they can do equivalence proving between implementations in other languages that translate to Crucible, such as Cryptol</p>",
        "id": 216352554,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1605105033
    },
    {
        "content": "<p>that'd be particularly nice for things like <a href=\"https://github.com/HACS-workshop/hacspec\">https://github.com/HACS-workshop/hacspec</a></p>",
        "id": 216352818,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1605105148
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> what's the reason for emitting all those bitshifts instead of emitting structs and letting llvm figure it out?</p>",
        "id": 216353330,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605105368
    },
    {
        "content": "<p>Would be interesting to try that and see if it makes compile times worse or better</p>",
        "id": 216353376,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605105391
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> The shifts are the optimized IR -- looks like we emit stores into an <code>alloca</code> of <code>%Foo = type { [0 x i32], i32, [0 x i16], i16, [0 x i16], i16, [0 x i16] }</code>.  So maybe symbolic on unoptimized LLVM-IR would be ok.  </p>\n<p>But if they're doing a lowering to their own IR, starting from MIR is definitely the way to go.  (There are already two backends after MIR, why not a third? <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span>)</p>",
        "id": 216354058,
        "sender_full_name": "scottmcm",
        "timestamp": 1605105717
    },
    {
        "content": "<p>whoops, wrong link to hacspec, here's the Rust version: <a href=\"https://github.com/hacspec/hacspec\">https://github.com/hacspec/hacspec</a></p>",
        "id": 216361842,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1605109386
    },
    {
        "content": "<p>Right hacspec and crux-mir are supposed to work together in future for equivalence proofs and such.</p>",
        "id": 216365434,
        "sender_full_name": "franziskus",
        "timestamp": 1605111038
    }
]