[
    {
        "content": "<p>Hegza posted this on the discord server:</p>\n<blockquote>\n<p>I was talking with some of our researchers about using Rust for low-level security code (SSL?) They use C, and one concern that was raised is that they are currently fighting the compiler to stop it from being \"too smart\". There's a good use case, listen out: A function call that compares two long byte-arrays must execute in constant time, such that the user-code cannot determine the point at which the comparison exited. Because the arrays are long, they need to be iterated over (eg. for, iter), and thus the compiler can easily insert an early exit for the first mismatching byte. We don't want this, because the early exit reveals information about the mismatching arrays, which could be a security key. The question is, what's the story of Rust currently, with regards to this issue. Do we have something that we can use to tell the compiler \"I don't want this code/function/block optimized\" or something else that fits the use case. These people sometimes fall back on assembly, and sometimes they end up \"complexifying\" their code until the compiler cannot optimize it. They find both of these approaches fairly unergonomic</p>\n</blockquote>",
        "id": 183918075,
        "sender_full_name": "DPC",
        "timestamp": 1576831790
    },
    {
        "content": "<p>Constant-time execution is an unsolved problem in general, not only for Rust but also for C/C++. You can only guarantee it if you write assembly or capture assembly output of a compiler and then verify that and store the generated assembly instead of building from source, and even that only works for a specific CPU model.</p>",
        "id": 183924961,
        "sender_full_name": "Shnatsel",
        "timestamp": 1576838499
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> specifically for the problem of constant-time equality there's the <code>subtle</code> crate</p>",
        "id": 183944826,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1576855549
    },
    {
        "content": "<p>I would love to see a more comprehensive toolkit for writing constant-time code in Rust</p>",
        "id": 183944883,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1576855567
    },
    {
        "content": "<p>thanks</p>",
        "id": 183945588,
        "sender_full_name": "DPC",
        "timestamp": 1576856093
    },
    {
        "content": "<p>Thank you on my part as well. I'm the original poster, hegza from discord. The person that case is originally from also commented on it, I'll try to get him to join as well.</p>",
        "id": 183946208,
        "sender_full_name": "Henri Lunnikivi",
        "timestamp": 1576856465
    },
    {
        "content": "<p>it'd be possible to write a portable constant time toolkit which emits platform-specific assembly using <code>core::arch</code> (but it'd need to be done on a target-by-target basis)</p>",
        "id": 183947128,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1576857062
    },
    {
        "content": "<p>long ago there was this macro black magic <a href=\"https://github.com/klutzy/nadeko\" target=\"_blank\" title=\"https://github.com/klutzy/nadeko\">https://github.com/klutzy/nadeko</a></p>",
        "id": 183947151,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1576857080
    },
    {
        "content": "<p>one drawback of that is I think code emitted by <code>core::arch</code> can still go through the LLVM optimizer</p>",
        "id": 183947269,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1576857139
    },
    {
        "content": "<p>Cranelift is a compiler which doesn't optimize much. Using my rustc backend <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift\" target=\"_blank\" title=\"https://github.com/bjorn3/rustc_codegen_cranelift\">cg_clif</a>, it is possible to compile rust code using it.</p>",
        "id": 183947487,
        "sender_full_name": "bjorn3",
        "timestamp": 1576857307
    },
    {
        "content": "<p>Sadly Rust compiler that doesn't optimize much is way less useful than a C compiler that doesn't optimize much. C is already pretty close to assembly so it is not reliant on the optimizer to get the code to a reasonable level of performance. Rust is more high-level and much more reliant on the optimizer for performance. Debug mode Rust can easily be 10x slower than release mode. So a non-optimizing Rust compiler is not very useful for compiling production workloads.</p>",
        "id": 183988779,
        "sender_full_name": "Shnatsel",
        "timestamp": 1576890847
    },
    {
        "content": "<p>Also I am yet to see an AES implementation for x86 that would be resilient to cache timing attacks. Various attempts have been made but AFAIK they all fall short.</p>",
        "id": 183988918,
        "sender_full_name": "Shnatsel",
        "timestamp": 1576891084
    },
    {
        "content": "<p>One specific case that can be made to work is constant-time comparison of two memory regions; this will likely also need protection from speculative execution side channel attacks, i.e. LFENCE everywhere, so you would need to doctor and store the assembly anyway. But that very specific, narrow task at least look manageable, while the general case is still a wide open research problem even in assembly, let alone high-level languages.</p>",
        "id": 183989136,
        "sender_full_name": "Shnatsel",
        "timestamp": 1576891454
    },
    {
        "content": "<p>There is a long history of people trying and failing to produce constant-time crypto in software; the most ironic is <a href=\"https://eprint.iacr.org/2018/747.pdf\" target=\"_blank\" title=\"https://eprint.iacr.org/2018/747.pdf\">https://eprint.iacr.org/2018/747.pdf</a></p>",
        "id": 183989313,
        "sender_full_name": "Shnatsel",
        "timestamp": 1576891735
    },
    {
        "content": "<p>AFAIK the need for constant-time crypto code (or at least the padding oracle attacks) can be eliminated by using encrypt-then-authenticate crypto protocols; see e.g. Noise protocol - and any other protocol with a security proof because no other scheme was ever proven correct.</p>",
        "id": 183989490,
        "sender_full_name": "Shnatsel",
        "timestamp": 1576892015
    },
    {
        "content": "<blockquote>\n<p>C is already pretty close to assembly so it is not reliant on the optimizer to get the code to a reasonable level of performance.</p>\n</blockquote>\n<p>Honestly I can reason about LLVM lowering more easily in Rust than I can in C</p>",
        "id": 183992918,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1576898235
    },
    {
        "content": "<p>just anecdotally, I feel like C is <em>much</em> more likely to surprise me</p>",
        "id": 183992923,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1576898254
    },
    {
        "content": "<p>I say this on a night where some of my code may have been <span aria-label=\"zip it\" class=\"emoji emoji-1f910\" role=\"img\" title=\"zip it\">:zip_it:</span></p>",
        "id": 183992974,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1576898302
    },
    {
        "content": "<p>(it's fine!)</p>",
        "id": 183992977,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1576898319
    },
    {
        "content": "<p>Do you mean unoptimized LLVM codegen or with optimizations enabled? I was only talking about debug mode, optimizers will mess things up in any language once they kick in</p>",
        "id": 184006853,
        "sender_full_name": "Shnatsel",
        "timestamp": 1576927042
    },
    {
        "content": "<p>Hi, I am the researcher that was discussing with <span class=\"user-mention\" data-user-id=\"254983\">@Henri Lunnikivi</span> about this.</p>\n<p>I have to disclaim that unfortunately I know close to nothing about Rust, and this discussion sprouted from a chat with our local Rust evangelist (<span class=\"user-mention\" data-user-id=\"254983\">@Henri Lunnikivi</span>) when we entered the \"things I wish new system programming languages addressed\" topic.</p>",
        "id": 184015789,
        "sender_full_name": "Nicola Tuveri",
        "timestamp": 1576944334
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> with optimizations enabled. I don't generally look at debug output (in e.g. Godbolt)</p>",
        "id": 184015842,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1576944388
    },
    {
        "content": "<p>also Godbolt is amazing</p>",
        "id": 184015843,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1576944393
    },
    {
        "content": "<p>/me using it right now</p>",
        "id": 184015845,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1576944396
    },
    {
        "content": "<p>seems I accidentally used the wrong <code>core::arch</code> intrinsic in a place, but LLVM is so smart it substituted the correct one <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 184015848,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1576944415
    },
    {
        "content": "<p>I assume \"wrong\" here means not-optimal, and not dysfunctional</p>",
        "id": 184015906,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1576944503
    },
    {
        "content": "<p>yes</p>",
        "id": 184015907,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1576944511
    },
    {
        "content": "<p>I was using the <code>core::arch</code> intrinsic for <code>shufpd</code> instead of <code>pshufd</code>, however LLVM noticed the inputs and outputs were all integers, so it substituted <code>pshufd</code> for me</p>",
        "id": 184015916,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1576944566
    },
    {
        "content": "<p>just fixed it up to actually use the <code>pshufd</code> intrinsic which as it were also helped clean up the code</p>",
        "id": 184015984,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1576944627
    },
    {
        "content": "<p>it's for this, FWIW: <a href=\"https://blog.quarkslab.com/reversing-a-finite-field-multiplication-optimization.html\" target=\"_blank\" title=\"https://blog.quarkslab.com/reversing-a-finite-field-multiplication-optimization.html\">https://blog.quarkslab.com/reversing-a-finite-field-multiplication-optimization.html</a></p>",
        "id": 184016014,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1576944720
    },
    {
        "content": "<p>it duplicates that assembly in either case (well, sans the <code>v</code>)</p>",
        "id": 184016063,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1576944776
    },
    {
        "content": "<p><a href=\"https://github.com/RustCrypto/universal-hashes/pull/43\" target=\"_blank\" title=\"https://github.com/RustCrypto/universal-hashes/pull/43\">https://github.com/RustCrypto/universal-hashes/pull/43</a></p>",
        "id": 184016308,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1576945207
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255099\">@Nicola Tuveri</span> using ^^^ sort of techniques I think it's very easy to get the desired assembly, but also, very much writing code in an architecture-specific way</p>",
        "id": 184016322,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1576945248
    },
    {
        "content": "<p>Rather, it is possible to get the desired assembly on a specific compiler version built with a specific LLVM version. It's not necessarily forward-compatible, since the optimizations change every release. It is also possible that rustc will optimize the code differently when built as part of larger project, so I don't think you can guarantee your code will be optimized or not optimized in a specific way in a library.</p>",
        "id": 184017483,
        "sender_full_name": "Shnatsel",
        "timestamp": 1576947492
    },
    {
        "content": "<p>I guess my utopistic goal is to collaborate with the compiler rather than fighting it by embedding platform specific code.</p>\n<p>I work mostly on OpenSSL, and there we have a lot of code that is very hard to read and maintain, that includes tricks in C90 or sometime directly in ASM to try and prevent the compiler to, e.g., insert branches where the programmer did not write (and probably does not expect) one.</p>\n<p>Another example can be found in a pattern that some implementations need when fetching secret-dependent precomputed values from a lookup table.<br>\nThe idea is to look at every single element in the table, derive a mask from the comparison of the current index with the secret index used for the lookup and use bitwise logic to mask out all the values (that must be fetched and computed upon anyways to avoid leaks) but the one matching the secret index (which is masked with 0xFF.FF, retaining the result of the computation).<br>\nHere an example of what a programmer might write in C and what assemblers would do: <a href=\"https://godbolt.org/z/o8eqkh\" target=\"_blank\" title=\"https://godbolt.org/z/o8eqkh\">https://godbolt.org/z/o8eqkh</a><br>\nPlay with defining/undefining <code>DO_BITWISE_EQUALITY</code> to see the difference.</p>\n<p>Even if in both alternatives to the main loop of the lookup function there are no branches, one of the 2 solutions results in having branches introduced during compilation.</p>\n<p>The current _hackish_ ways of dealing with this have a series  of shortcomings:</p>\n<ul>\n<li>code becomes really hard to read and maintain</li>\n<li>it's easy to make mistakes for the programmer</li>\n<li>it's easy for reviewers to miss something</li>\n<li>they work with current versions of widely tested compilers, but there is no guarantee that a new version won't be smarter and see through our attempts at concealing what is really going on</li>\n<li>having model-specific ASM embedded in the application/library code is not the best solution: it requires the software maintainers to be quite experienced and up-to-date with the latest HW developments from various manifacturers, while also spending considerable resources to maintain the code for current and legacy platforms at the same time</li>\n</ul>\n<p>My (not original) wish is to have standardized ways in the language (be it annotations or keywords) to signal the compiler the programmer intent about doing stuff in constant time, as the compiler is the piece of software that is best placed to know the exact characteristics of the target platform and select which optimizations to apply, which to omit and which microarch specific tweaks are recommended to achieve the goal.</p>\n<p>One could start with ways to let the programmer ask the compiler not to optimize(or to only apply optimization that guarantee not to introduce branches) a certain region of code, possibly at the block level.<br>\nAnother step would be to have language builtins that the compiler can map to the best implementation for a given architecture: e.g. if the language had a reserved keyword to do const-time equality comparison for basic types, it would be possible to write and maintain more easily code that is supposed to run in constant time.</p>\n<p>I guess what I am saying is that everybody can agree that there are use cases (especially in the software security domain) where it is not fine to maintain the long established convention that compilers can apply any transformation as long as the resulting implementation is semantically equivalent in terms of input/output, yet languages and compilers are not providing a standard way to ward const-time sections in the code we write, and it would be nice if a language like Rust, that already addresses many other shortcomings of traditional languages to aid programmers in writing code that is more robust and safe, could be at the forefront in trying to improve also this aspect.</p>",
        "id": 184017497,
        "sender_full_name": "Nicola Tuveri",
        "timestamp": 1576947547
    },
    {
        "content": "<p>While it would definitely be nice if somebody solved the constant time execution problem at the compiler level, I do not see it happening anytime soon. It would require a huge continuous investment to develop and maintain such compiler features, largely due to the fact that this complicates all the other compiler passes. On the other hand the market for it is simply not big enough: constant-time memory comparison routine is easy enough to hand-roll in assembly, and if you're doing constant-time crypto then your crypto protocol is broken anyway and you should switch to a better one. OpenSSL needs constant-time crypto only because it supports TLS 1.1 and earlier, which are busted anyway.</p>",
        "id": 184017792,
        "sender_full_name": "Shnatsel",
        "timestamp": 1576948078
    },
    {
        "content": "<blockquote>\n<p>On the other hand the market for it is simply not big enough: constant-time memory comparison routine is easy enough to hand-roll in assembly, and if you're doing constant-time crypto then your crypto protocol is broken anyway and you should drop it anyway. OpenSSL needs constant-time crypto only because it supports TLS 1.1 and earlier, which are busted anyway.</p>\n</blockquote>\n<p>I don't agree completely: writing constant time, with no branches, and with no secret-dependent memory accesses is still a requirement for all the basic cryptographic implementations.<br>\nWhen you are generating a keypair or a signature, or deriving a shared secret, even for P-256, X/Ed25519 that are supported by TLS 1.3, you must make sure that nothing is leaked about any bit of the secret (be it the long-term key or a nonce).<br>\nFast const-time implementations of P-256 do use precomputed values stored in lookup tables, for example, and having a branch introduced by the compiler would allow a local attacker to monitor the execution of the algorithm and retrieve secret bits (with different degrees of signal-to-noise depending on the side-channel used).</p>\n<p>One might think that a \"local attacker\" is of no concern, but especially in the age of the cloud, where code is written without having many guarantees on where our code is being run and what is being run in parallel on the same physical processor, it might be dangerously short-sighted.</p>",
        "id": 184018153,
        "sender_full_name": "Nicola Tuveri",
        "timestamp": 1576948695
    },
    {
        "content": "<p>But I agree that it is a niche need: that's why we can't just say disable all optimization for all the cryptographic software and be done with it!</p>",
        "id": 184018239,
        "sender_full_name": "Nicola Tuveri",
        "timestamp": 1576948817
    },
    {
        "content": "<p>I think a constant time toolkit based on <code>core::arch</code> would be interesting. it certainly can get you closer to the desired assembly that Rust alone. like <span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> said it can't guarantee the LLVM optimizer won't come along and insert a branch in code you desired to be constant time, and about all I can say is such a toolkit is best used with algorithms that are amenable to constant time implementations in the first place</p>",
        "id": 184019199,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1576950558
    },
    {
        "content": "<p>\"constant time\" is as big of a rat hole as some recent Rust discussions about whether something is truly \"async\" if e.g. you throw mmap into the mix, heh</p>",
        "id": 184019203,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1576950593
    },
    {
        "content": "<p>Fundamentally, a language like Rust is specified in terms of an interpreter (abstract machine). That machine has no notion of time at all.</p>",
        "id": 184019601,
        "sender_full_name": "centril",
        "timestamp": 1576951292
    },
    {
        "content": "<p>constant time is a property of a combined hardware/software system, so it's probably best reasoned about when working on code with a particular CPU architecture in mind</p>",
        "id": 184020291,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1576952433
    },
    {
        "content": "<p>in my case: post Sandy Bridge x86(-64)</p>",
        "id": 184020293,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1576952444
    },
    {
        "content": "<p>here's the assembly in question <a href=\"https://blog.quarkslab.com/reversing-a-finite-field-multiplication-optimization.html\" target=\"_blank\" title=\"https://blog.quarkslab.com/reversing-a-finite-field-multiplication-optimization.html\">https://blog.quarkslab.com/reversing-a-finite-field-multiplication-optimization.html</a></p>",
        "id": 184020356,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1576952556
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/rFqBQtSREpqBPXq47GlU5Zj-/Screen-Shot-2019-12-21-at-10.22.16-AM.png\" target=\"_blank\" title=\"Screen-Shot-2019-12-21-at-10.22.16-AM.png\">Screen-Shot-2019-12-21-at-10.22.16-AM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/rFqBQtSREpqBPXq47GlU5Zj-/Screen-Shot-2019-12-21-at-10.22.16-AM.png\" target=\"_blank\" title=\"Screen-Shot-2019-12-21-at-10.22.16-AM.png\"><img src=\"/user_uploads/4715/rFqBQtSREpqBPXq47GlU5Zj-/Screen-Shot-2019-12-21-at-10.22.16-AM.png\"></a></div>",
        "id": 184020361,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1576952572
    },
    {
        "content": "<p>here's what I have in Godbolt</p>",
        "id": 184020372,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1576952613
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/bIW-rYgcxdHF7KSXMwU90kbh/Screen-Shot-2019-12-21-at-10.23.22-AM.png\" target=\"_blank\" title=\"Screen-Shot-2019-12-21-at-10.23.22-AM.png\">Screen-Shot-2019-12-21-at-10.23.22-AM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/bIW-rYgcxdHF7KSXMwU90kbh/Screen-Shot-2019-12-21-at-10.23.22-AM.png\" target=\"_blank\" title=\"Screen-Shot-2019-12-21-at-10.23.22-AM.png\"><img src=\"/user_uploads/4715/bIW-rYgcxdHF7KSXMwU90kbh/Screen-Shot-2019-12-21-at-10.23.22-AM.png\"></a></div>",
        "id": 184020374,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1576952618
    },
    {
        "content": "<p>(note: I'm not trying to do vectorized PCLMULQDQ... yet)</p>",
        "id": 184020379,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1576952634
    },
    {
        "content": "<p>but otherwise it's pretty much the ideal target code for this particular routine (Shay Gueron's Montgomery fast reduction)</p>",
        "id": 184020430,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1576952660
    },
    {
        "content": "<blockquote>\n<p>constant time is a property of a combined hardware/software system, so it's probably best reasoned about when working on code with a particular CPU architecture in mind</p>\n</blockquote>\n<p>Right, which makes the idea of keywords or whatnot at the language level which provides guarantees quite unlikely</p>",
        "id": 184020981,
        "sender_full_name": "centril",
        "timestamp": 1576953688
    },
    {
        "content": "<p>oh hey, check this out...</p>",
        "id": 184021411,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1576954412
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/kl5MkJu2etJGit8lwE_J6kf1/Screen-Shot-2019-12-21-at-10.52.33-AM.png\" target=\"_blank\" title=\"Screen-Shot-2019-12-21-at-10.52.33-AM.png\">Screen-Shot-2019-12-21-at-10.52.33-AM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/kl5MkJu2etJGit8lwE_J6kf1/Screen-Shot-2019-12-21-at-10.52.33-AM.png\" target=\"_blank\" title=\"Screen-Shot-2019-12-21-at-10.52.33-AM.png\"><img src=\"/user_uploads/4715/kl5MkJu2etJGit8lwE_J6kf1/Screen-Shot-2019-12-21-at-10.52.33-AM.png\"></a></div>",
        "id": 184021413,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1576954420
    },
    {
        "content": "<p>tada</p>",
        "id": 184021416,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1576954423
    },
    {
        "content": "<p>uhh, wow <span aria-label=\"open mouth\" class=\"emoji emoji-1f62e\" role=\"img\" title=\"open mouth\">:open_mouth:</span></p>",
        "id": 184021504,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1576954556
    },
    {
        "content": "<p>100% performance improvement <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 184021549,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1576954579
    },
    {
        "content": "<p><a href=\"https://godbolt.org/z/Zjuvwu\" target=\"_blank\" title=\"https://godbolt.org/z/Zjuvwu\">https://godbolt.org/z/Zjuvwu</a></p>",
        "id": 184022158,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1576955544
    }
]