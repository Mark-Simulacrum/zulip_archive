[
    {
        "content": "<p>Hello. An email I tried to send to the Google group and it rejected the email, so here I am! I was basically wondering if <a href=\"https://github.com/time-rs/time/issues/276\">https://github.com/time-rs/time/issues/276</a> would qualify for an advisory, given the possibility of an unexpected panic on what should be a valid parameter value. An incorrect value may also be returned. As indicated in the issue, the implications are quite far reaching due to the reliance of this method for arithmetic purposes. One thing to note is that this only affects dates before ~4714 BCE, so it's not like web servers handling HTTP headers will ever run into this.</p>",
        "id": 210235918,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1600246228
    },
    {
        "content": "<p>In case I forget to check back, feel free to leave a message on that issue. Notifications from Zulip don't work for whatever reason.</p>",
        "id": 210235998,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1600246310
    },
    {
        "content": "<p>I understand this only results in integer overflow, right? In this case there would not be a panic in release mode, just silent overflow. Either way panics are usually not considered security issues unless the crate explicitly guarantees absence of panics.</p>",
        "id": 210271573,
        "sender_full_name": "Shnatsel",
        "timestamp": 1600267273
    },
    {
        "content": "<p>It results in an explicit panic due to the calculation of an invalid year-month-day combo, not just an integer overflow. While the crate doesn't explicitly guarantee the lack of panics, I'm pretty sure most people would be extremely surprised if they had an <code>OffsetDateTime</code>, added a <code>Duration</code> of no length, and got a panic.</p>",
        "id": 210284210,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1600272460
    },
    {
        "content": "<p>I think that, in general, DoS possibilities (like unexpected panics or infinite loops) are considered as bugs, not security issues, from the PoV of this.  Otherwise even completely-sound code could get advisories (like anything doing default panic-on-out-of-bounds indexing), which is probably too big a problem to tackle.</p>",
        "id": 210300225,
        "sender_full_name": "scottmcm",
        "timestamp": 1600280316
    },
    {
        "content": "<p>So to me that's clearly a bug, but not a security issue -- the most secure possible service is one that always panics immediately and thus never has a chance to do anything :P</p>",
        "id": 210300320,
        "sender_full_name": "scottmcm",
        "timestamp": 1600280389
    },
    {
        "content": "<p>/me awaits the service that manages to break the panic path into something nasty...</p>",
        "id": 210315527,
        "sender_full_name": "cuviper",
        "timestamp": 1600287760
    },
    {
        "content": "<p>Sounds good! I didn't think it would fall under this, but it's worth checking and playing Devil's advocate. Thanks everyone.</p>",
        "id": 210316793,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1600288368
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> this is only exploitable on panic: <a href=\"https://rustsec.org/advisories/RUSTSEC-2019-0010.html\">https://rustsec.org/advisories/RUSTSEC-2019-0010.html</a><br>\nSo you can in fact use panics to reach unsound but otherwise not exploitable code. Although the same can be said about anything that alters control flow.</p>",
        "id": 210317483,
        "sender_full_name": "Shnatsel",
        "timestamp": 1600288733
    }
]