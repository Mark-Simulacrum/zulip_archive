[
    {
        "content": "<p>I have been messing with <code>rustc</code> following some helpful tips by <span class=\"user-mention\" data-user-id=\"210267\">@Nemo157</span>, and noticed that it can output the list of all known targets with <code>rustc --print=target-list</code> as well as detailed info about each target with <code>rustc --print=cfg --target=...</code><br>\nThis leads me to believe that we could just auto-generate the contents of the <code>platforms</code> crate. No more manual updates or sourcing from Rust Forge. <br>\n<span class=\"user-mention\" data-user-id=\"132721\">@Tony Arcieri</span> has anything like this been attempted? Are you aware of any blockers?</p>",
        "id": 273040430,
        "sender_full_name": "Shnatsel",
        "timestamp": 1645670616
    },
    {
        "content": "<p>no, I've done very little work on that crate since... back when RustForge was actually a thing (it's gone now afaik)</p>",
        "id": 273119733,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1645722753
    },
    {
        "content": "<p>I'll open an issue to auto-generate this data, then. Probably won't have the time to work on it.</p>",
        "id": 273147403,
        "sender_full_name": "Shnatsel",
        "timestamp": 1645735559
    },
    {
        "content": "<p>Issue filed: <a href=\"https://github.com/rustsec/rustsec/issues/513\">https://github.com/rustsec/rustsec/issues/513</a></p>",
        "id": 273173162,
        "sender_full_name": "Shnatsel",
        "timestamp": 1645752047
    },
    {
        "content": "<p>And yes, looks like we do have all the info we need to auto-generate it. Support tiers are the only tricky bit because they're not in rustc, but in Markdown documentation in a git repo.</p>",
        "id": 273173201,
        "sender_full_name": "Shnatsel",
        "timestamp": 1645752100
    },
    {
        "content": "<p>I have nerd-sniped myself. I am prototyping this now.</p>",
        "id": 273185179,
        "sender_full_name": "Shnatsel",
        "timestamp": 1645759853
    },
    {
        "content": "<p>Okay, I got generation of actual architecture data as well as enums it uses working. The code is in <a href=\"https://github.com/rustsec/rustsec/tree/auto-generate-platforms-crate/platforms/platforms-data-gen\"><code>auto-generate-platforms-crate</code></a> branch on the <code>rustsec</code> repo.</p>",
        "id": 273187762,
        "sender_full_name": "Shnatsel",
        "timestamp": 1645763253
    },
    {
        "content": "<p>I wonder if <code>Option&lt;Env&gt;</code> design is still relevant? Now that the crate has users, we could actually check what people are doing with it.</p>",
        "id": 273187989,
        "sender_full_name": "Shnatsel",
        "timestamp": 1645763576
    },
    {
        "content": "<p>it's definitely important... it's how you disambiguate musl targets, for example</p>",
        "id": 273246787,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1645804862
    },
    {
        "content": "<p>Ah, sorry, I wasn't communicating clearly. I mean, is the <code>Option</code> part of it actually relevant? I <em>could</em> just roll this up into the <code>Env</code> enum. <code>Env::None</code> or some such.</p>",
        "id": 273265501,
        "sender_full_name": "Shnatsel",
        "timestamp": 1645813203
    },
    {
        "content": "<p>aah, well, that'd be a breaking change</p>",
        "id": 273274294,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1645817392
    },
    {
        "content": "<p>I was thinking about introducing the <code>target_endian</code> and <code>target_pointer_width</code> fields, so it would be a breaking change anyway, and we might as well roll up this change into it.</p>",
        "id": 273275825,
        "sender_full_name": "Shnatsel",
        "timestamp": 1645818224
    },
    {
        "content": "<p>Ok. Maybe tag the struct as <code>#[non_exhaustive]</code> so we can make non-breaking changes like that in the future</p>",
        "id": 273276871,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1645818837
    },
    {
        "content": "<p>I think that's the extent of basic information that we will include? So I don't necessarily see a way we will extend it in the future.<br>\nAlthough there is the <code>--print=target-spec-json</code> in Nightly rustc that outputs the following:</p>\n<div class=\"codehilite\" data-code-language=\"JSON\"><pre><span></span><code><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">\"arch\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"x86_64\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">\"cpu\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"x86-64\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">\"crt-static-respected\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">\"data-layout\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">\"dynamic-linking\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">\"env\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"gnu\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">\"executables\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">\"has-rpath\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">\"has-thread-local\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">\"is-builtin\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">\"llvm-target\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"x86_64-unknown-linux-gnu\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">\"max-atomic-width\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">\"os\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"linux\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">\"position-independent-executables\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">\"pre-link-args\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nt\">\"gcc\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"s2\">\"-m64\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">\"relro-level\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"full\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">\"stack-probes\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nt\">\"kind\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"call\"</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">\"static-position-independent-executables\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">\"supported-sanitizers\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s2\">\"address\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s2\">\"cfi\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s2\">\"leak\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s2\">\"memory\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s2\">\"thread\"</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">\"target-family\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s2\">\"unix\"</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">\"target-pointer-width\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"64\"</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 273279013,
        "sender_full_name": "Shnatsel",
        "timestamp": 1645820008
    },
    {
        "content": "<p>It might be interesting to support this somehow, but it would probably go into some Ext struct, because it's just a lot of info that you don't necessarily need?</p>",
        "id": 273279181,
        "sender_full_name": "Shnatsel",
        "timestamp": 1645820103
    },
    {
        "content": "<p>I'm just looking for ways to avoid making breaking changes in the future</p>",
        "id": 273279821,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1645820471
    },
    {
        "content": "<p>and I don't think anyone is going to be exhaustively pattern matching on these structs</p>",
        "id": 273279842,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1645820486
    },
    {
        "content": "<p>Hmm, that does make sense.</p>",
        "id": 273281271,
        "sender_full_name": "Shnatsel",
        "timestamp": 1645821257
    },
    {
        "content": "<p>Alright, let's go with <code>#[non_exhaustive]</code> then!</p>",
        "id": 273282153,
        "sender_full_name": "Shnatsel",
        "timestamp": 1645821554
    },
    {
        "content": "<p>Alright, all the data extraction for auto-generating the <code>platforms</code> crate is done <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <br>\nThe generator can now print all the data for every platform, including the tier, which is sourced from markdown documentation.<br>\nCode is here: <a href=\"https://github.com/rustsec/rustsec/tree/auto-generate-platforms-crate/platforms/platforms-data-gen/src\">https://github.com/rustsec/rustsec/tree/auto-generate-platforms-crate/platforms/platforms-data-gen/src</a><br>\nAll that remains to do is cosmetics.</p>",
        "id": 273598231,
        "sender_full_name": "Shnatsel",
        "timestamp": 1646117739
    },
    {
        "content": "<p>I am going to drop the <a href=\"https://github.com/rustsec/rustsec/blob/f37a278f4b3495fb789287ccbe8c6e86719c9ced/platforms/src/target/os.rs#L163-L164\">questionable compile-time information</a> in <code>platforms</code> crate because:</p>\n<ul>\n<li>it can cause build failures in weird configs (you can define both <code>windows</code> and <code>unix</code> at the same time) </li>\n<li>it requires adding <code>Unknown</code> variant everywhere, but that overlaps with the valid <code>Unknown</code> variant on the OS and just doesn't make sense on other enums because they error out on attempting to construct them from an invalid string instead of returning <code>Unknown</code></li>\n<li><a href=\"https://doc.rust-lang.org/std/env/consts/\"><code>std::env::consts</code></a> provides these values already</li>\n</ul>",
        "id": 273820278,
        "sender_full_name": "Shnatsel",
        "timestamp": 1646233624
    },
    {
        "content": "<p>sure</p>",
        "id": 273821882,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1646234282
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132721\">@Tony Arcieri</span> do we want to keep the design with the <code>Env</code> being wrapped in an <code>Option</code>?<br>\n<a href=\"https://docs.rs/platforms/2.0.0/platforms/platform/struct.Platform.html\">https://docs.rs/platforms/2.0.0/platforms/platform/struct.Platform.html</a><br>\nOn one hand this does match the way the target triple is laid out (<code>aarch64-unknown-linux-gnu</code> with env vs <code>x86_64-apple-darwin</code> without), but then there's stuff like <code>aarch64-unknown-none-hermitkernel</code> where <code>hermit</code> is the OS value. So the target triples are just a mess.<br>\nI am tempted to just slap <code>None</code> variant on it and call it a day instead of making an <code>Option&lt;Env&gt;</code>. There is already  a<code>None</code> or <code>Unknown</code> variant on <code>Arch</code> and <code>OS</code>, so this would not even make <code>Env</code> it special. <br>\nBut I am biased because ditching the <code>Option</code> would simplify auto-generating the code. Any thoughts from the user perspective on this?</p>",
        "id": 273842154,
        "sender_full_name": "Shnatsel",
        "timestamp": 1646241359
    },
    {
        "content": "<p>Using a <code>None</code> variant makes sense to me. Rustc gives an empty string as target env by default.</p>",
        "id": 273842724,
        "sender_full_name": "bjorn3",
        "timestamp": 1646241570
    },
    {
        "content": "<p>Rustc doesn't skip the <code>target_env</code> cfg when it is empty.</p>",
        "id": 273842775,
        "sender_full_name": "bjorn3",
        "timestamp": 1646241592
    },
    {
        "content": "<p>I am nearly done with implementing auto-generation, actually. I think all that's left for a new <code>platforms</code> release is getting the data written to the appropriate file instead of stdout and updating the docs.</p>",
        "id": 273847517,
        "sender_full_name": "Shnatsel",
        "timestamp": 1646243124
    },
    {
        "content": "<p>if you're making other breaking changes <code>Env::None</code> is fine</p>",
        "id": 273848630,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1646243542
    },
    {
        "content": "<p>I am marking structs <code>#[non_exhaustive]</code> and adding fields, so yes</p>",
        "id": 273849950,
        "sender_full_name": "Shnatsel",
        "timestamp": 1646244008
    },
    {
        "content": "<p>Ok, so. I have this <code>target_pointer_width</code> field that I'd like to expose. I'm doing that as an enum, for consistency with the rest of the crate (and also because I don't have to write any special auto-generation). <br>\n<code>Bits::64</code> doesn't work because enum variants must start with a letter, not a string.<br>\n<code>Bits::SixtyFour</code> is just unnecessarily verbose.<br>\nI don't want users to look up and use the syntax for raw identifiers, to force number into an enum variant.<br>\nAny tips on how to proceed?</p>",
        "id": 274119026,
        "sender_full_name": "Shnatsel",
        "timestamp": 1646395736
    },
    {
        "content": "<p><code>Pointer::Width64</code> is also awkward<br>\nUnicode lookalikes for letters are cool I guess but cannot be typed, and unicode in source code is certainly going to break something, somewhere</p>",
        "id": 274120146,
        "sender_full_name": "Shnatsel",
        "timestamp": 1646396492
    },
    {
        "content": "<p>target-lexicon uses U16/U32/U64: <a href=\"https://docs.rs/target-lexicon/latest/target_lexicon/enum.PointerWidth.html\">https://docs.rs/target-lexicon/latest/target_lexicon/enum.PointerWidth.html</a></p>",
        "id": 274122812,
        "sender_full_name": "bjorn3",
        "timestamp": 1646398043
    },
    {
        "content": "<p>Turns out that exists. And I've just spent the last week implementing a generator for the exact same thing <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 274122921,
        "sender_full_name": "Shnatsel",
        "timestamp": 1646398104
    },
    {
        "content": "<p>target-lexicon is manually written and has no target tier info.</p>",
        "id": 274123270,
        "sender_full_name": "bjorn3",
        "timestamp": 1646398320
    },
    {
        "content": "<p>Ah, I see. Then mine is not totally useless, then!</p>",
        "id": 274123339,
        "sender_full_name": "Shnatsel",
        "timestamp": 1646398336
    },
    {
        "content": "<p>I'm gonna ape what <code>target-lexicon</code> does. Thanks for the tip!</p>",
        "id": 274123916,
        "sender_full_name": "Shnatsel",
        "timestamp": 1646398665
    },
    {
        "content": "<p>OK, the auto-generated <code>platforms</code> crate now compiles, and I have checked in the generated code. There are a few things to do still, but it's mostly complete!</p>",
        "id": 274135294,
        "sender_full_name": "Shnatsel",
        "timestamp": 1646403773
    },
    {
        "content": "<p>Alright, I think that what I have now is shippable. PR open: <a href=\"https://github.com/rustsec/rustsec/pull/516\">https://github.com/rustsec/rustsec/pull/516</a></p>",
        "id": 274252127,
        "sender_full_name": "Shnatsel",
        "timestamp": 1646497819
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132721\">@Tony Arcieri</span> <code>rustsec</code> CI fails because rustc added new warnings, and we have those treated as errors.<br>\n<a href=\"https://github.com/rustsec/rustsec/pull/516/files#diff-b4db31cd7c46ceeaccc928589774ef80897df397140248a4787c404a729d0d7e\">https://github.com/rustsec/rustsec/pull/516/files#diff-b4db31cd7c46ceeaccc928589774ef80897df397140248a4787c404a729d0d7e</a><br>\nThis warning is legit - the <code>scope</code> is never taken into account when querying the database even though it is set. \"Scope\" is whether the package is local, from <a href=\"http://crates.io\">crates.io</a>, or a private registry.<br>\nHow should that be handled? This makes CI look red and might mask some other issues.</p>",
        "id": 274533475,
        "sender_full_name": "Shnatsel",
        "timestamp": 1646742303
    },
    {
        "content": "<p>yeah, there's some work that needs to be done to get the build green again</p>",
        "id": 274544431,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1646748146
    },
    {
        "content": "<p>been meaning to look at it but too many other things going on</p>",
        "id": 274544448,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1646748156
    },
    {
        "content": "<p>No worries, I have no urgent work being blocked on this</p>",
        "id": 274575469,
        "sender_full_name": "Shnatsel",
        "timestamp": 1646760763
    },
    {
        "content": "<p>Ah, and the platform definitions in <code>advisory-db</code> will have to be revised. They are currently not validated against the <code>platforms</code> crate, and a lot of them just deserialize as <code>unknown</code> and then get written to OSV as <code>[ \"arm\", \"unknown\", \"unknown\", \"unknown\" ]</code> or some such. These will start erroring out. I will take care of adding the check to the linter and revising the db - but again, that's not urgent.</p>",
        "id": 274598271,
        "sender_full_name": "Shnatsel",
        "timestamp": 1646769738
    },
    {
        "content": "<p>I have figured out how to encode the target triple at compile time. It seems to be fast and reliable, and works with rustc as old as 1.19. I intend to publish it as a standalone crate.<br>\nHowever, my employer insists on pre-reviewing anything I publish, so it will take a couple of weeks for me to actually publish the code. If that doesn't go through for any reason, I'll just contribute it to the <code>platforms</code> crate.</p>",
        "id": 277055683,
        "sender_full_name": "Shnatsel",
        "timestamp": 1648583026
    },
    {
        "content": "<p>I'd appreciate PR review for platforms <code>v3.0</code>, by the way. <a href=\"https://github.com/rustsec/rustsec/pull/516\">https://github.com/rustsec/rustsec/pull/516</a></p>",
        "id": 277055818,
        "sender_full_name": "Shnatsel",
        "timestamp": 1648583081
    },
    {
        "content": "<p>yeah sorry meant to do a pass on RustSec stuff this weekend but ended up doing a bunch of RustCrypto PR reviews instead</p>",
        "id": 277056890,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1648583664
    },
    {
        "content": "<p>That's fine, I'm not blocked on this for anything as yet. <br>\nI would be if I didn't decide to just fold <code>cargo auditable</code> into Cargo right away, because there is no reasonable way to do this outside Cargo in some cases (e.g. with workspaces, or when building multiple packages)</p>",
        "id": 277057921,
        "sender_full_name": "Shnatsel",
        "timestamp": 1648584209
    }
]