[
    {
        "content": "<p>I've been finding tons of bugs with miri lately. It's awesome @oli <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span></p>",
        "id": 196595194,
        "sender_full_name": "Brian Anderson",
        "timestamp": 1588749103
    },
    {
        "content": "<p>I'm curious, what kind of bugs those were? Alignment issues, several mutable references, out-of-bounds accesses, uninit memory reads, double-frees?</p>",
        "id": 196632410,
        "sender_full_name": "Shnatsel",
        "timestamp": 1588770979
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"294773\">@Brian Anderson</span> thanks &lt;3 I'm glad it is helpful for you :)</p>",
        "id": 196680959,
        "sender_full_name": "RalfJ",
        "timestamp": 1588791602
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> at least some are listed at <a href=\"https://github.com/rust-lang/miri#bugs-found-by-miri\" title=\"https://github.com/rust-lang/miri#bugs-found-by-miri\">https://github.com/rust-lang/miri#bugs-found-by-miri</a></p>",
        "id": 196681046,
        "sender_full_name": "RalfJ",
        "timestamp": 1588791622
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span>  multiple alignment issues, one out-of-bounds pointer, one overlapping mutable reference, several stacked borrows. The tikv, servo_arc, and ryu links in the <a href=\"https://github.com/rust-lang/miri\" title=\"https://github.com/rust-lang/miri\">miri trophy case</a> are just some of them. I have more to submit yet.</p>",
        "id": 196709517,
        "sender_full_name": "Brian Anderson",
        "timestamp": 1588806779
    },
    {
        "content": "<p>Nice! I'm curious, how do you run something as big as TiKV in miri? And how do you approach running miri on an unfamiliar codebase? I've tried running simple tests in it, like decompressing a 1kb PNG file, but that took longer than I was willing to wait (3 hours).</p>",
        "id": 196711617,
        "sender_full_name": "Shnatsel",
        "timestamp": 1588808618
    },
    {
        "content": "<p>And also thanks for doing that, this kind of work is super important</p>",
        "id": 196711921,
        "sender_full_name": "Shnatsel",
        "timestamp": 1588808891
    },
    {
        "content": "<p>For tikv specifically, i first went after the \"leaf\" crates, and ran their test suites. every time miri hits something it can't handle i hack up the code to ignore that test, and keep going until as much of the test suite runs to completion. then repeat outward in the crate dag. it helps a lot that tikv is broken up into a number of smaller crates, many of which are compute-centric. i've mostly-fully-tested the parts of tikv that are involved in accelerated computation, but not even tried the parts that deal with storage. I run miri with -Zmiri-disable-isolation. It also requires getting used to and working around miri's relatively buggy CLI.</p>",
        "id": 196715392,
        "sender_full_name": "Brian Anderson",
        "timestamp": 1588811864
    },
    {
        "content": "<p>can't run benches in miri as of now, which is a bummer</p>",
        "id": 196715404,
        "sender_full_name": "Brian Anderson",
        "timestamp": 1588811878
    },
    {
        "content": "<p>Interesting, thanks. Benches can be run with Address Sanitizer, but it will not notice alignment issues or stacked borrows violations or reads from uninit memory. It's very straightforward and will reveal out-of-bounds accesses or use-after-frees though. I don't expect much of that to happen on well-formed inputs used in tests or benchmarks, this is where fuzzers come into play.</p>",
        "id": 196717025,
        "sender_full_name": "Shnatsel",
        "timestamp": 1588813508
    },
    {
        "content": "<p>I had the same question, thanks for explaining <span class=\"user-mention\" data-user-id=\"294773\">@Brian Anderson</span> . I would have been quite surprised indeed if you could have run the database itself in Miri.</p>\n<p>I take it these crates also have their own test suites that you can easily run in Miri then?</p>",
        "id": 196745611,
        "sender_full_name": "RalfJ",
        "timestamp": 1588843440
    },
    {
        "content": "<blockquote>\n<p>It also requires getting used to and working around miri's relatively buggy CLI.</p>\n</blockquote>\n<p>Yeah our cargo wrapper is quite the mess. :/ Which problems are you running into, and is there something we should know about that is not <a href=\"https://github.com/rust-lang/miri/issues?q=is%3Aopen+is%3Aissue+label%3AA-cargo\" title=\"https://github.com/rust-lang/miri/issues?q=is%3Aopen+is%3Aissue+label%3AA-cargo\">listed here</a> yet?</p>",
        "id": 196745676,
        "sender_full_name": "RalfJ",
        "timestamp": 1588843485
    },
    {
        "content": "<p>Implement network support, and it may be possible</p>",
        "id": 196745685,
        "sender_full_name": "bjorn3",
        "timestamp": 1588843493
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> in my experience adjusting test suites to not take forever in Miri, I usually have to get iteration counts down into the low 3 digits or even lower. Not sure if such a small PNG file is realistic, but it might be worth a shot.^^</p>",
        "id": 196745855,
        "sender_full_name": "RalfJ",
        "timestamp": 1588843583
    },
    {
        "content": "<p>There are a few people working on a meta-tracer for rust: <a href=\"https://github.com/softdevteam/yk\" title=\"https://github.com/softdevteam/yk\">https://github.com/softdevteam/yk</a> Once it can run most programs, it should theoretically be possible to improve the performance of Miri by running Miri in it.</p>",
        "id": 196746108,
        "sender_full_name": "bjorn3",
        "timestamp": 1588843781
    },
    {
        "content": "<p>I have no idea what a meta-tracer is</p>",
        "id": 196746268,
        "sender_full_name": "RalfJ",
        "timestamp": 1588843856
    },
    {
        "content": "<p>Rpython is an example of a meta-tracer. The basic idea is that you write an interpreter for a language. For example pypy is a python interpreter written in rpython. Then the meta-tracer will find traces (linear sets of instructions without branches) in the interpreted language and compiles an interpreter that only executes that specific trace. It can thus specialize for that specific trace.</p>",
        "id": 196746618,
        "sender_full_name": "bjorn3",
        "timestamp": 1588844066
    },
    {
        "content": "<p><a href=\"http://dom.parnaiba.pi.gov.br/assets/diarios-anteriores/bolz-tracing-jit-final.pdf\" title=\"http://dom.parnaiba.pi.gov.br/assets/diarios-anteriores/bolz-tracing-jit-final.pdf\">http://dom.parnaiba.pi.gov.br/assets/diarios-anteriores/bolz-tracing-jit-final.pdf</a></p>",
        "id": 196747102,
        "sender_full_name": "bjorn3",
        "timestamp": 1588844379
    },
    {
        "content": "<p>It's a great piece of black magic, but I am cautious about predicting how well it would work with miri. I believe a great chunk of miri's overhead is due to the extensive runtime instrumentation (as opposed to just dynamic dispatch etc.), and I don't see how a tracing JIT can remove most of that. For example, if you specializing traces to the assumption of \"no UB\", you still need to instrument the program's memory with borrow stacks and undef masks to know when UB happens, you still need to update and check that metadata on each memory access, etc. -- in much the same way that PyPy and the like still need to store type information in (escaped) objects and perform type checks; but the cost of miri's \"metadata\" is much higher. I'm sure these checks can be folded away or \"batched\" to some degree by generic optimizations on traces, but I expect speedups to be limited as long as miri itself is structured as it is now.</p>",
        "id": 196758221,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1588851531
    },
    {
        "content": "<p>(Of course I would be happy to be proven wrong. The above can just as well be taken as \"things to keep in mind\" rather than \"reasons why it will NEVER work\" ^^)</p>",
        "id": 196758447,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1588851697
    },
    {
        "content": "<p>A quick profiling on <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/blob/master/example/mod_bench.rs\" title=\"https://github.com/bjorn3/rustc_codegen_cranelift/blob/master/example/mod_bench.rs\">https://github.com/bjorn3/rustc_codegen_cranelift/blob/master/example/mod_bench.rs</a> show the following:</p>\n<ul>\n<li>value validation (validate_operand_internal): ~17%</li>\n<li>monomorphization (subst_and_normalize_erasing_regions): ~4.4% (should be removable by tracer)</li>\n<li>layout (tcx.layout_of): ~5.5% (should be removable by tracer)</li>\n<li>try_read_immediate: ~10% (I think a tracer can make it cheaper)</li>\n</ul>\n<p><a href=\"https://www.speedscope.app/#profileURL=https://gist.githubusercontent.com/bjorn3/d703bbc610695359ab4501232f36a9ff/raw/6dfbf30c78f6733616c027debc360710d991555a/gistfile1.txt\" title=\"https://www.speedscope.app/#profileURL=https://gist.githubusercontent.com/bjorn3/d703bbc610695359ab4501232f36a9ff/raw/6dfbf30c78f6733616c027debc360710d991555a/gistfile1.txt\">https://www.speedscope.app/#profileURL=https://gist.githubusercontent.com/bjorn3/d703bbc610695359ab4501232f36a9ff/raw/6dfbf30c78f6733616c027debc360710d991555a/gistfile1.txt</a></p>",
        "id": 196762038,
        "sender_full_name": "bjorn3",
        "timestamp": 1588854155
    },
    {
        "content": "<p>This is great data! So if we assume that those 17% spent in validation isn't sped up at all by tracing (unrealistic; but we're also ignoring all sorts of other effects, this is just to get a rough idea) then Amdahl's law predicts a maximum speedup of ca. 6x in the limit.</p>",
        "id": 196768076,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1588857450
    },
    {
        "content": "<p>There is also ~7.1% time spent on allocations. (<code>cat profile | rg \"malloc|calloc|realloc|memmove|memcpy|free\" &gt; profile2</code> and then divide sample count.)</p>\n<p>Edit: added <code>free</code> to the filter</p>",
        "id": 196768743,
        "sender_full_name": "bjorn3",
        "timestamp": 1588857776
    },
    {
        "content": "<p>Although that's something where the usual tracing JIT tricks unboxing non-escaping values and SROA'ing interpreter frames might help to some degree.</p>",
        "id": 196769428,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1588858068
    },
    {
        "content": "<p>(which you also have to bet on if you want to count e.g. <code>layout_of</code> as something tracing would help with)</p>",
        "id": 196769503,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1588858090
    },
    {
        "content": "<p>Most memory allocations are for <code>Vec</code>, not <code>Box</code>.</p>",
        "id": 196769728,
        "sender_full_name": "bjorn3",
        "timestamp": 1588858193
    },
    {
        "content": "<p>If that's in response to \"unboxing non-escaping locals\", I don't mean Rust's <code>Box</code> but temporaries placed in stack frames or other miri allocations (which btw are mostly composed of various <code>Vec</code>s), analogous to how PyPy etc. might avoid allocating an <code>int</code> object for temporary integer values. But I now realize that this is complicated by the fact that miri allocations are all bags of bytes, not discrete high-level values. I don't think JIT compilers for machine code emulation (which are similarly operating on untyped bytes) have similar tricks up their sleeve, so maybe the usual tricks won't even work for this.</p>",
        "id": 196772011,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1588859139
    },
    {
        "content": "<p>You wrote non-escaping values, not locals, so I thought you were talking about values inside miri, not the interpreted code. For the interpreted code we could make <code>IndexVec&lt;Local, LocalState&gt;</code>turn into a single <code>Allocation</code> when the live state and layout for all locals is known as part of the trace.</p>",
        "id": 196775380,
        "sender_full_name": "bjorn3",
        "timestamp": 1588860557
    },
    {
        "content": "<p>This is starting to sound like the kind of invasive refactoring/optimization \"to help the JIT along\" that I intentionally excluded from consideration earlier (\"miri [...] structured as it is now\") because I can't judge how practical they are nor estimate how much speed-up you could get with the same effort by just optimizing the interpreter.</p>",
        "id": 196775802,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1588860758
    },
    {
        "content": "<p>(But also, merging all the locals into a single allocation seems the opposite of helpful for the problem I was musing about.)</p>",
        "id": 196776292,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1588860893
    },
    {
        "content": "<p>Something with a more immediate effect may be shrinking core type like <code>OpTy</code>. That type is for example 64 bytes big, resulting in quite a lot of <code>movaps</code>/<code>movups</code> instructions to copy it around.</p>",
        "id": 196779444,
        "sender_full_name": "bjorn3",
        "timestamp": 1588862180
    },
    {
        "content": "<blockquote>\n<p>Yeah our cargo wrapper is quite the mess. :/ Which problems are you running into, and is there something we should know about that is not listed here yet?</p>\n</blockquote>\n<p>The big one is that workspaces don't work correctly. ISTR that cargo miri also runs benches in cases where cargo test does not, and that it intercepts --help as its own argument in a position where it should be passed to the test binary (thus I couldn't teach myself how to turn benches off manually).</p>",
        "id": 196834061,
        "sender_full_name": "Brian Anderson",
        "timestamp": 1588887812
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> ^</p>",
        "id": 196834084,
        "sender_full_name": "Brian Anderson",
        "timestamp": 1588887827
    },
    {
        "content": "<p>One other thing that ended up being a problem was miri just stopping with an error in a way that _seemed_ like it was a timeout but didn't say so.</p>",
        "id": 196834178,
        "sender_full_name": "Brian Anderson",
        "timestamp": 1588887879
    },
    {
        "content": "<p>No backtraces or anything, just a nondescript error</p>",
        "id": 196834224,
        "sender_full_name": "Brian Anderson",
        "timestamp": 1588887903
    },
    {
        "content": "<p>miri has also shown a whole heap of issues with <code>bigint</code> crate: <a href=\"https://github.com/RustSec/advisory-db/pull/290\" title=\"https://github.com/RustSec/advisory-db/pull/290\">https://github.com/RustSec/advisory-db/pull/290</a><br>\n<span class=\"user-mention\" data-user-id=\"294773\">@Brian Anderson</span> I would appreciate if you could run <code>bigint</code>'s successor, <a href=\"https://crates.io/crates/uint\" title=\"https://crates.io/crates/uint\"><code>uint</code></a>, in miri so we could get an idea of whether we should recommend it as a replacement in a RustSec advisory.</p>",
        "id": 196838168,
        "sender_full_name": "Shnatsel",
        "timestamp": 1588890469
    },
    {
        "content": "<p>in the meanwhile I'm fuzzing <a href=\"https://github.com/main--/rust-lz-fear\" title=\"https://github.com/main--/rust-lz-fear\">https://github.com/main--/rust-lz-fear</a>, found an OOM and a couple of panics so far, but I don't expect any fireworks since it's all safe code</p>",
        "id": 196838266,
        "sender_full_name": "Shnatsel",
        "timestamp": 1588890519
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"294773\">@Brian Anderson</span> yeah, workspaces <a href=\"https://github.com/rust-lang/miri/issues/1001\" title=\"https://github.com/rust-lang/miri/issues/1001\">don't work</a> and I am not sure how to best make them work. :/ it doesn't help that I myself don't really use workspaces either so I hardly know how they function.<br>\nI'd be surprised if it ran benches, that shouldn't happen -- but maybe you ran into <a href=\"https://github.com/rust-lang/miri/issues/700\" title=\"https://github.com/rust-lang/miri/issues/700\">this problem</a> ?<br>\nFor <code>--help</code>, thanks for letting me know! I wasn't aware and this should not be hard to fix. <code>cargo miri test -- -- --help</code> should show the test runner's help.</p>",
        "id": 196866722,
        "sender_full_name": "RalfJ",
        "timestamp": 1588924093
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"294773\">Brian Anderson</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/miri.20is.20great/near/196834224\" title=\"#narrow/stream/146229-wg-secure-code/topic/miri.20is.20great/near/196834224\">said</a>:</p>\n<blockquote>\n<p>No backtraces or anything, just a nondescript error</p>\n</blockquote>\n<p>you dont happen to know the error message? there should always be a backtrace -- or else it's an ICE and thus (almost always) a bug.</p>",
        "id": 196866750,
        "sender_full_name": "RalfJ",
        "timestamp": 1588924114
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/miri.20is.20great/near/196866750\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"294773\">Brian Anderson</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/miri.20is.20great/near/196834224\">said</a>:</p>\n<blockquote>\n<p>No backtraces or anything, just a nondescript error</p>\n</blockquote>\n<p>you dont happen to know the error message? there should always be a backtrace -- or else it's an ICE and thus (almost always) a bug.</p>\n</blockquote>\n<p>I also saw a case where Miri did not report any error message, except for having an error exit code. My understanding (potentially completely wrong) of that case was that Miri exhausted all RAM on my machine and got killed by the OS.</p>",
        "id": 197108508,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1589181755
    },
    {
        "content": "<p>If you are using Linux, dmesg should show a message about the OOM killer if miri was killed due to OOM.</p>",
        "id": 197116449,
        "sender_full_name": "bjorn3",
        "timestamp": 1589186868
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/miri.20is.20great/near/197116449\">said</a>:</p>\n<blockquote>\n<p>If you are using Linux, dmesg should show a message about the OOM killer if miri was killed due to OOM.</p>\n</blockquote>\n<p>Thanks for the tip!</p>",
        "id": 197287477,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1589295168
    },
    {
        "content": "<p>While I have the attention of some Miri users, could I ask you for feedback on <a href=\"https://github.com/rust-lang/miri/issues/1416\">this issue</a> concerning a potential breaking change in <code>cargo miri test</code> argument handling? Cc <span class=\"user-mention\" data-user-id=\"294773\">@Brian Anderson</span> who struggled with this I think</p>",
        "id": 197838189,
        "sender_full_name": "RalfJ",
        "timestamp": 1589705172
    }
]