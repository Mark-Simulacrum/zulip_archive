[
    {
        "content": "<p>We have outstanding PRs for unsound uses of Read trait that are not fixed upstream. The PR description explains it nicely:</p>\n<blockquote>\n<p>As of Jan 2021, there doesn't seem to be an ideal fix that works in stable Rust with no performance overhead. Below are links to relevant discussions &amp; suggestions for the fix.</p>\n<ul>\n<li>\n<p><a href=\"https://paper.dropbox.com/doc/IO-Buffer-Initialization-MvytTgjIOTNpJAS6Mvw38\">Well-written document regarding the issue</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2930-read-buf.md#summary\">Rust RFC 2930</a></p>\n</li>\n<li>\n<p><a href=\"https://doc.rust-lang.org/std/io/struct.Initializer.html\">nightly feature <code>std::io::Initializer</code></a></p>\n</li>\n<li>\n<p><a href=\"https://internals.rust-lang.org/t/uninitialized-memory/1652\">Discussion in Rust Internals Forum</a></p>\n</li>\n</ul>\n</blockquote>\n<p>I can add that <code>std::io::Initializer</code> didn't pan out - it didn't actually solve the problem, and is not being considered for stabilization. RFC 2930 supersedes it, but is not yet implemented, even in nightly.</p>",
        "id": 224603692,
        "sender_full_name": "Shnatsel",
        "timestamp": 1612038817
    },
    {
        "content": "<p>We need to decide what to do about them as far as RustSec advisories go. Should we surface this issue as a warning, as a hard error, or not at all?</p>",
        "id": 224603780,
        "sender_full_name": "Shnatsel",
        "timestamp": 1612038926
    },
    {
        "content": "<p>It should at least need a warning, because certain safe Read implementation can cause UB with them - <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2930-read-buf.md#but-how-bad-are-undefined-values-really\">But how bad are undefined values really?</a></p>",
        "id": 224619190,
        "sender_full_name": "Yechan Bae",
        "timestamp": 1612062781
    },
    {
        "content": "<p>The counterpoint to this is that while a <code>Read</code> implementation is technically allowed to read from the buffer it was given, in practice it never needs to. So for this to become a miscompilation, it requires _both_ parts to be broken.<br>\nPersonally I agree that this needs to be fixed and the risk is not worth the few % of performance it gets you, but I'm not sure how to make a convincing case for it.</p>",
        "id": 224645806,
        "sender_full_name": "Shnatsel",
        "timestamp": 1612101170
    },
    {
        "content": "<p>The standard library now explicitly calls out that <a href=\"https://doc.rust-lang.org/std/io/trait.Read.html#tymethod.read\">passing uninitialized buffer to <code>read()</code> is not safe</a>, so we were relying on the authority of the stnadard library to convince people when filing a bug report to crate maintainers. Also, how likely a bug will be triggered doesn't affect the soundness of the function. That's why I thought uninit read bugs sufficiently qualify for at least <code>informational = \"unsound\"</code> bugs, aren't they?</p>",
        "id": 224671795,
        "sender_full_name": "Yechan Bae",
        "timestamp": 1612135319
    },
    {
        "content": "<p>Just wanted to bring this up again since this still seems to be the main type of open advisory PR. Given that this type of <code>Read</code> implementation is unlikely to be found in practice, should we just tag the advisories with <code>informational = \"unsound\"</code>? Or is the main reason to not pull them in because there's no good language level solution without sacrificing performance yet?</p>",
        "id": 233830675,
        "sender_full_name": "Ammar Askar",
        "timestamp": 1617978682
    },
    {
        "content": "<p><code>informational = \"unsound\"</code> seems good to me, unless there is a credible threat</p>",
        "id": 233866912,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1617991748
    },
    {
        "content": "<p>Yeah that seems like a reasonable approach to me as well, we'll tag as <code>unsound</code>.</p>",
        "id": 233878756,
        "sender_full_name": "Ammar Askar",
        "timestamp": 1617996877
    },
    {
        "content": "<p>We updated previously opened PRs with <code>unsound</code> tag. Could you check the pull requests again?<br>\n<a href=\"https://github.com/RustSec/advisory-db/pulls\">https://github.com/RustSec/advisory-db/pulls</a></p>",
        "id": 234100925,
        "sender_full_name": "Yechan Bae",
        "timestamp": 1618200747
    }
]