[
    {
        "content": "<p>Fun exploration of Rust supply chain attacks: <a href=\"https://kerkour.com/rust-crate-backdoor/\">https://kerkour.com/rust-crate-backdoor/</a></p>",
        "id": 262107976,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1637346408
    },
    {
        "content": "<p>I've spent some time coming up with various techniques to harden security and then defeat that hardening. And the situation seemed rather hopeless because I could defeat anything without too much trouble.</p>",
        "id": 262110865,
        "sender_full_name": "Shnatsel",
        "timestamp": 1637347613
    },
    {
        "content": "<p>But then I found out that the notorious ESLint compromise was likely because the person reused the same password on many different websites:<br>\n<a href=\"https://eslint.org/blog/2018/07/postmortem-for-malicious-package-publishes\">https://eslint.org/blog/2018/07/postmortem-for-malicious-package-publishes</a></p>",
        "id": 262110887,
        "sender_full_name": "Shnatsel",
        "timestamp": 1637347622
    },
    {
        "content": "<p>And <em>this</em> is the kind of attack we need to harden against, first and foremost. Stolen tokens can wait.</p>",
        "id": 262111030,
        "sender_full_name": "Shnatsel",
        "timestamp": 1637347672
    },
    {
        "content": "<p>We defer to github for user authentication. Can OAuth apps require 2FA from users?</p>",
        "id": 262119450,
        "sender_full_name": "bjorn3",
        "timestamp": 1637351056
    },
    {
        "content": "<blockquote>\n<p>Can OAuth apps require 2FA from users?</p>\n</blockquote>\n<p>Yeah, that's exactly what I've been thinking. Right now logging in to <a href=\"http://crates.io\">crates.io</a> doesn't require 2FA, or even the password. The Github cookie alone is sufficient.<br>\nOne thing we could do is check if the user has 2FA enabled at all. There is an API endpoint for that: <a href=\"https://docs.github.com/en/rest/reference/users\">https://docs.github.com/en/rest/reference/users</a></p>",
        "id": 262121025,
        "sender_full_name": "Shnatsel",
        "timestamp": 1637351726
    },
    {
        "content": "<p>Publishing only requires a <a href=\"http://crates.io\">crates.io</a> token.</p>",
        "id": 262121082,
        "sender_full_name": "Eh2406",
        "timestamp": 1637351753
    },
    {
        "content": "<p>Yes, that is correct. But getting that token requires logging in to <a href=\"http://crates.io\">crates.io</a> - that's the point I'm trying to harden right now.</p>",
        "id": 262121202,
        "sender_full_name": "Shnatsel",
        "timestamp": 1637351790
    },
    {
        "content": "<p>Mostly because protecting against compromise of the machine from which the upload happens is intractable.</p>",
        "id": 262121250,
        "sender_full_name": "Shnatsel",
        "timestamp": 1637351817
    },
    {
        "content": "<p>I think requiring 2FA (from Github) to generate a token, would definitely be a major step forward!</p>",
        "id": 262121506,
        "sender_full_name": "Eh2406",
        "timestamp": 1637351925
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127617\">Shnatsel</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/.22Backdooring.20Rust.20crates.20for.20fun.20and.20profit.22/near/262121250\">said</a>:</p>\n<blockquote>\n<p>Mostly because protecting against compromise of the machine from which the upload happens is intractable.</p>\n</blockquote>\n<p>The problem is intractable because even if the token is totally secure and 2FA is required on every upload, that still doesn't protect from a malicious <code>cargo publish</code> that injects a backdoor into the uploaded code.</p>",
        "id": 262121587,
        "sender_full_name": "Shnatsel",
        "timestamp": 1637351968
    },
    {
        "content": "<p>So 2FA on every upload would just get in the way without providing any additional security.</p>",
        "id": 262121934,
        "sender_full_name": "Shnatsel",
        "timestamp": 1637352098
    },
    {
        "content": "<p>Storing the token in the OS's secret storage would be sufficient and also would not get in the way.</p>",
        "id": 262122060,
        "sender_full_name": "Shnatsel",
        "timestamp": 1637352138
    },
    {
        "content": "<p>We could quibble about how much protection different mitigations make.<br>\nBut the only way to make progress is to harden a bunch of things one by one. And the one you're working on now sounds very important.</p>",
        "id": 262122365,
        "sender_full_name": "Eh2406",
        "timestamp": 1637352291
    },
    {
        "content": "<p>It doesn't look like there is a way to require 2FA with Github. Nothing comes up in Google search, other than asking whether Google supports this (and the answer is \"No\"). Github knowledge base likewise doesn't seem to list anything like that.</p>",
        "id": 262122938,
        "sender_full_name": "Shnatsel",
        "timestamp": 1637352549
    },
    {
        "content": "<p>Our best bet is to poll the API endpoint and check if the user has 2FA enabled: <a href=\"https://docs.github.com/en/rest/reference/users\">https://docs.github.com/en/rest/reference/users</a><br>\nWe can make that API call and deny login if 2FA is disabled on the account. This still protects against password reuse, but does not protect against cookie or token theft.</p>",
        "id": 262123706,
        "sender_full_name": "Shnatsel",
        "timestamp": 1637352884
    },
    {
        "content": "<p>We can start requiring 2FA to be enabled to log in for owners of crates above a certain number of recent downloads.</p>",
        "id": 262123855,
        "sender_full_name": "Shnatsel",
        "timestamp": 1637352954
    },
    {
        "content": "<p>I wonder how will this work with teams... I believe you would have to go through the individual authentication flow regardless, so no special changes are needed to accommodate team-based access?</p>",
        "id": 262124065,
        "sender_full_name": "Shnatsel",
        "timestamp": 1637353062
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127617\">Shnatsel</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/.22Backdooring.20Rust.20crates.20for.20fun.20and.20profit.22/near/262121934\">said</a>:</p>\n<blockquote>\n<p>So 2FA on every upload would just get in the way without providing any additional security.</p>\n</blockquote>\n<p>it's still better than nothing, as with no 2FA it can immediately publish crates with the <a href=\"http://crates.io\">crates.io</a> token after RCE is achieved. trivially wormable</p>",
        "id": 262124173,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1637353100
    },
    {
        "content": "<p>it would be nice to get something more out of some user interaction involving an airgapped key</p>",
        "id": 262124257,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1637353136
    },
    {
        "content": "<p>pie-in-the-sky: opt-in TUF-style k-of-n threshold signature policy, and in order to publish a crate, k people need to be able to reproduce the same crate and sign the same build hash</p>",
        "id": 262124493,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1637353264
    },
    {
        "content": "<p>Well, if you have read-only filesystem access, simply storing the token in the OS keyring is sufficient. And if the compromise also extends to write access, then even 2FA on every upload wouldn't help. Which is why I consider 2FA on every upload not a worthwhile tradeoff.</p>",
        "id": 262125168,
        "sender_full_name": "Shnatsel",
        "timestamp": 1637353599
    },
    {
        "content": "<p>And yes, I like your pie-in-the-sky idea, I converged on more or less the same idea myself. Problem is, it's way too heavyweight for most people to adopt.</p>",
        "id": 262125232,
        "sender_full_name": "Shnatsel",
        "timestamp": 1637353628
    },
    {
        "content": "<p>yeah, the credential helper is probably the biggest thing that could help here</p>",
        "id": 262125236,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1637353632
    },
    {
        "content": "<p>I think it got merged but isn't stable or something yet?</p>",
        "id": 262125280,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1637353658
    },
    {
        "content": "<p>I haven't been following it.</p>",
        "id": 262125381,
        "sender_full_name": "Shnatsel",
        "timestamp": 1637353688
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/cargo/issues/8933\">https://github.com/rust-lang/cargo/issues/8933</a></p>",
        "id": 262125618,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1637353826
    },
    {
        "content": "<p>seems like there's effectively a prototype implementation that got merged</p>",
        "id": 262125655,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1637353847
    },
    {
        "content": "<p><a href=\"https://crates.io/crates/cargo-credential\">https://crates.io/crates/cargo-credential</a></p>",
        "id": 262125707,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1637353878
    },
    {
        "content": "<p>neat. I should try playing around with that</p>",
        "id": 262125718,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1637353887
    },
    {
        "content": "<p>unfortunately this design doesn't play well with macOS Keychain Services</p>",
        "id": 262125762,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1637353921
    },
    {
        "content": "<p>could still use a Yubikey though</p>",
        "id": 262125839,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1637353948
    },
    {
        "content": "<p>Oh, they even allow hardware storage? Neat. I was thinking of using the system keyring or something, this is a step further than I expected.</p>",
        "id": 262125926,
        "sender_full_name": "Shnatsel",
        "timestamp": 1637353999
    },
    {
        "content": "<p>I got myself a security key only recently. The damn things are pricey.</p>",
        "id": 262126077,
        "sender_full_name": "Shnatsel",
        "timestamp": 1637354079
    },
    {
        "content": "<p>haha yeah the FIDO \"Security Keys\" are a lot cheaper</p>",
        "id": 262126136,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1637354110
    },
    {
        "content": "<p>I actually use PIV though</p>",
        "id": 262126153,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1637354117
    },
    {
        "content": "<p>which as it were is the only way I can think of to implement \"push button, decrypt credential\" with a Yubikey</p>",
        "id": 262126211,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1637354153
    },
    {
        "content": "<p>which is kind of silly because they have a whole AES engine for Yubikey-AES</p>",
        "id": 262126285,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1637354174
    },
    {
        "content": "<p>yep looping in my yubikey is why I wrote the credentials tool RFC</p>",
        "id": 262126294,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1637354178
    },
    {
        "content": "<p>maybe there's a way to access it? but if so I've implemented a large part of the Yubikey PC/SC API and it would be using a SmartCard applet I'm not familiar with</p>",
        "id": 262126371,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1637354217
    },
    {
        "content": "<p>but uhh, failing that, you could use PIV with e.g. NIST P-256, and a hybrid cryptosystem built out of that (e.g. combining AES-GCM or ChaCha20Poly1305)</p>",
        "id": 262126555,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1637354289
    },
    {
        "content": "<p>when I was actively developing the <code>keychain-services</code> crate I tried to see if I could get TouchID to work with a subprocess but it seems deliberately designed to disallow that thing, probably with good reasons</p>",
        "id": 262126854,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1637354469
    },
    {
        "content": "<p>that said I'm not sure what allows TouchID interactions from e.g. a process spawned by iTerm</p>",
        "id": 262126896,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1637354501
    },
    {
        "content": "<p>Another really dumb thing that would help is \"someone logged in to <a href=\"http://crates.io\">crates.io</a> as you\" emails.<br>\nAnd/or \"someone has generated a token\" emails, but then we'd have to add those for every administrative action, e.g. adding/removing users.<br>\n<a href=\"http://crates.io\">crates.io</a> currently doesn't do that. By contrast, Google does.</p>",
        "id": 262126979,
        "sender_full_name": "Shnatsel",
        "timestamp": 1637354530
    },
    {
        "content": "<p>yeah, RubyGems for example spams all maintainers of a gem every time someone publishes with a sort of report</p>",
        "id": 262127020,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1637354569
    },
    {
        "content": "<p>I think the \"Subscribe\" functionality in <a href=\"http://crates.io\">crates.io</a> might accomplish something similar? I only recently discovered it</p>",
        "id": 262127044,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1637354593
    },
    {
        "content": "<blockquote>\n<p>that said I'm not sure what allows TouchID interactions from e.g. a process spawned by iTerm</p>\n</blockquote>\n<p>Can the credential helper do something like <code>open -a CargoTouchIDCredentialHelper.app</code>?</p>",
        "id": 262127053,
        "sender_full_name": "bjorn3",
        "timestamp": 1637354597
    },
    {
        "content": "<p>umm, maybe?</p>",
        "id": 262127088,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1637354619
    },
    {
        "content": "<p>Alright, I'll go file those <a href=\"http://crates.io\">crates.io</a> feature requests then, so that this would be more than mere banter in an obscure chat room</p>",
        "id": 262127189,
        "sender_full_name": "Shnatsel",
        "timestamp": 1637354662
    },
    {
        "content": "<p>Keychain Services seems to have a fairly restrictive AuthZ which prevents it from being accessed by background processes and requiring it be some sort of interactive process opened directly by the user</p>",
        "id": 262127213,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1637354674
    },
    {
        "content": "<p>The <code>CargoTouchIDCredentialHeloer.app</code> could show a ui listing all credential helpers (+process parent tree) trying to get the credentials and have a button to accept.</p>",
        "id": 262127317,
        "sender_full_name": "bjorn3",
        "timestamp": 1637354748
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/ktOLYvYx32I58qaOH1OCyje6/Screen-Shot-2021-11-19-at-1.45.37-PM.png\">Screen-Shot-2021-11-19-at-1.45.37-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/ktOLYvYx32I58qaOH1OCyje6/Screen-Shot-2021-11-19-at-1.45.37-PM.png\" title=\"Screen-Shot-2021-11-19-at-1.45.37-PM.png\"><img src=\"/user_uploads/4715/ktOLYvYx32I58qaOH1OCyje6/Screen-Shot-2021-11-19-at-1.45.37-PM.png\"></a></div>",
        "id": 262127334,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1637354759
    },
    {
        "content": "<p>^^^ if anyone's curious, that's what a RubyGems publish notification looks like</p>",
        "id": 262127401,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1637354777
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> yeah it could work if there's some sort of interactive TouchID agent already running, started by the user</p>",
        "id": 262127510,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1637354851
    },
    {
        "content": "<p>Does it really need to be directly opened by the user in advance or is simply having an open window in which you click a button enough?</p>",
        "id": 262127619,
        "sender_full_name": "bjorn3",
        "timestamp": 1637354915
    },
    {
        "content": "<p><code>open -a</code> does pretty much the same as opening an application in finder, right?</p>",
        "id": 262127661,
        "sender_full_name": "bjorn3",
        "timestamp": 1637354942
    },
    {
        "content": "<p><code>open</code> doesn't directly launch executables, but asks launchd(?) to do it.</p>",
        "id": 262127711,
        "sender_full_name": "bjorn3",
        "timestamp": 1637354971
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121055\">@Pietro Albini</span> what's the tl;dr: on the status of <code>credential-process</code> or whatever? If I'm an eager early adopter, can I use it today, and try to write my own helper with the <code>cargo-credential</code> crate?</p>",
        "id": 262128224,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1637355188
    },
    {
        "content": "<p>Yes.</p>",
        "id": 262128250,
        "sender_full_name": "Eh2406",
        "timestamp": 1637355204
    },
    {
        "content": "<p>the tracking issue makes it look really incomplete but when I investigate the various sub-tasks it looks like a lot more has been done than the tracking issue would lead one to believe</p>",
        "id": 262128269,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1637355218
    },
    {
        "content": "<p>I'm... not sure of the status of that, it's a cargo feature</p>",
        "id": 262128295,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1637355233
    },
    {
        "content": "<p>aah ok</p>",
        "id": 262128308,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1637355240
    },
    {
        "content": "<p>If the tracking issue is out of date, please ping.</p>",
        "id": 262128427,
        "sender_full_name": "Eh2406",
        "timestamp": 1637355288
    },
    {
        "content": "<p>Take it back, I'll do the ping.</p>",
        "id": 262128650,
        "sender_full_name": "Eh2406",
        "timestamp": 1637355385
    },
    {
        "content": "<p>so what I'd really like to know...</p>",
        "id": 262128690,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1637355404
    },
    {
        "content": "<p>how do I configure Cargo to make it work?</p>",
        "id": 262128708,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1637355413
    },
    {
        "content": "<p>assuming I want to invent my own <code>credential-process</code></p>",
        "id": 262128738,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1637355431
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#credential-process\">https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#credential-process</a></p>",
        "id": 262128880,
        "sender_full_name": "Eh2406",
        "timestamp": 1637355501
    },
    {
        "content": "<p>aha!</p>",
        "id": 262128919,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1637355529
    },
    {
        "content": "<p>ty</p>",
        "id": 262128921,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1637355530
    },
    {
        "content": "<blockquote>\n<p>There's still a lot of unanswered questions in this tracking issue. But to make it clear basic functionality from the RFC is implemented and available for testing. The questions are all about comparatively small details.</p>\n</blockquote>",
        "id": 262129286,
        "sender_full_name": "Eh2406",
        "timestamp": 1637355660
    },
    {
        "content": "<p>will try playing around with it</p>",
        "id": 262129523,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1637355762
    },
    {
        "content": "<p>Oooh, there is already a wrapper working with Linux keyrings as well - both on GNOME and KDE!</p>",
        "id": 262129542,
        "sender_full_name": "Shnatsel",
        "timestamp": 1637355772
    },
    {
        "content": "<p>FWIW I coauthored this: <a href=\"https://docs.rs/yubikey/\">https://docs.rs/yubikey/</a></p>",
        "id": 262129553,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1637355783
    },
    {
        "content": "<p>PIV pubkey support is a sufficient but wacky way to do what's effectively keywrapping for a credential, but it could work</p>",
        "id": 262129716,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1637355880
    },
    {
        "content": "<p>I'm not sure what better options there are</p>",
        "id": 262129738,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1637355889
    },
    {
        "content": "<p>also wrote this a long time ago and wanted to upstream it to <code>security-framework</code> but never found the time: <a href=\"https://keychain-services.rs/\">https://keychain-services.rs/</a></p>",
        "id": 262129943,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1637355997
    },
    {
        "content": "<p>also got kind of burned out on the development workflow for it since you need to sign every executable you build and then the tests require interactivity</p>",
        "id": 262130048,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1637356069
    },
    {
        "content": "<p>I have been wondering if we could do a transparency log based on signatures off of SSH keys</p>",
        "id": 262209465,
        "sender_full_name": "Dirkjan Ochtman",
        "timestamp": 1637449142
    },
    {
        "content": "<p>the sigstore people are interested in doing something with Rust, as it were</p>",
        "id": 262243609,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1637505646
    },
    {
        "content": "<p>All right, <a href=\"http://crates.io\">crates.io</a> issues filed:<br>\n<a href=\"https://github.com/rust-lang/crates.io/issues/4195\">https://github.com/rust-lang/crates.io/issues/4195</a><br>\n<a href=\"https://github.com/rust-lang/crates.io/issues/4196\">https://github.com/rust-lang/crates.io/issues/4196</a><br>\n<a href=\"https://github.com/rust-lang/crates.io/issues/4197\">https://github.com/rust-lang/crates.io/issues/4197</a></p>",
        "id": 262249423,
        "sender_full_name": "Shnatsel",
        "timestamp": 1637513252
    },
    {
        "content": "<p>cool, subscribed</p>",
        "id": 262249476,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1637513303
    },
    {
        "content": "<p>I would be happy to help with getting community contributors to work on these. Hmm, let me try reaching out to <a href=\"http://crates.io\">crates.io</a> team with that message...</p>",
        "id": 262249499,
        "sender_full_name": "Shnatsel",
        "timestamp": 1637513379
    },
    {
        "content": "<p>A few years ago we integrated HIBP into PyPI and it was horrifying to start seeing the accounts that owned packages that were using 100% compromised passwords.</p>",
        "id": 262249500,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1637513381
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> you may also be interested in <a href=\"https://github.com/rust-lang/crates.io/issues/2630\">https://github.com/rust-lang/crates.io/issues/2630</a>. If your GitHub account is compromised, there is currently no mechanism for you to revoke any <a href=\"http://crates.io\">crates.io</a> session cookies that were created during the compromise.</p>\n<p>Also, the session cookies  are now set with a 90-day lifetime (great!) but the expiration is not part of the signed data in the cookie, so an attacker with a cookie for a compromise account could simply hold onto it and it's indefinitely good: <a href=\"https://github.com/conduit-rust/conduit-cookie/issues/15\">https://github.com/conduit-rust/conduit-cookie/issues/15</a></p>",
        "id": 262251986,
        "sender_full_name": "jsha",
        "timestamp": 1637516967
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315412\">@jsha</span> I was aware of the first one but not of the second one. I understand this applies to <a href=\"http://crates.io\">crates.io</a> because it relies on Conduit for cookie handling, is that right?</p>",
        "id": 262253216,
        "sender_full_name": "Shnatsel",
        "timestamp": 1637518594
    },
    {
        "content": "<p>yes, at least as of the time I filed the issue</p>",
        "id": 262253913,
        "sender_full_name": "jsha",
        "timestamp": 1637519694
    },
    {
        "content": "<p>Wow. I thought I have learned to be pessimistic enough by now - but no. The reality still manages to surprise me by being far lower security than I imagined. Time to drop an email to security@</p>",
        "id": 262254034,
        "sender_full_name": "Shnatsel",
        "timestamp": 1637519884
    },
    {
        "content": "<p>FWIW I think the right thing long-term is not to log people out every 90 days but to make sure their credentials are automatically refreshed so long as they access the site at least once every N days and so long as their GitHub token is still good.</p>",
        "id": 262254215,
        "sender_full_name": "jsha",
        "timestamp": 1637520238
    },
    {
        "content": "<p>Given that getting a new cookie when holding a valid Github cookie is so easy (you just click \"Log in with Github\" and off you go), I don't think holding the cookie around for long is a good idea at all. You do need the Github cookie on hand at all times to e.g. comment on issues and pull requests, but the <a href=\"http://crates.io\">crates.io</a> cookie is used <strong>only</strong> for highly sensitive operations like generating new upload tokens or adding new publishers. There is absolutely no reason to keep it around.<br>\nI've filed another issue about that: <a href=\"https://github.com/rust-lang/crates.io/issues/4198\">https://github.com/rust-lang/crates.io/issues/4198</a></p>",
        "id": 262255351,
        "sender_full_name": "Shnatsel",
        "timestamp": 1637521762
    },
    {
        "content": "<p>Alright, emailed security@ about <a href=\"https://github.com/rust-lang/rust/issues/2630\">#2630</a>, but also mentioned the rest of the batch.</p>",
        "id": 262256494,
        "sender_full_name": "Shnatsel",
        "timestamp": 1637523372
    },
    {
        "content": "<p>Will Crichton suggested I find my way here and it looks like he was right. This morning I wrote a <a href=\"http://build.rs\">build.rs</a> that rewrites Cargo.toml. As discussed up thread, the obvious attack vector is to worm it through <a href=\"http://crates.io\">crates.io</a> via credential reuse</p>",
        "id": 264574888,
        "sender_full_name": "Brendan Hickey",
        "timestamp": 1639244809
    },
    {
        "content": "<p>interesting question: <a href=\"https://twitter.com/Erstejahre/status/1478515537470648322\">https://twitter.com/Erstejahre/status/1478515537470648322</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/Erstejahre/status/1478515537470648322\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/f290d5f0e2fea64403f6844ca6ac896c0c8bc410/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f313237353031313231352f6176617461725f6e6f726d616c2e706e67\"></a><p><a href=\"https://twitter.com/RustSec\">@RustSec</a> Theoretical question for you - If a crate was hijacked and had a cryptominer or other malicious code added, is there an established process to have that removed to prevent infections to consumers of <a href=\"https://t.co/IkWCZfiBHN\">http://crates.io</a> ?</p><span>- Firstyear (@Erstejahre)</span></div></div>",
        "id": 266888313,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1641347326
    },
    {
        "content": "<p>start by reporting it to us at <a href=\"mailto:security@rust-lang.org\">security@rust-lang.org</a></p>",
        "id": 266888941,
        "sender_full_name": "cuviper",
        "timestamp": 1641348022
    },
    {
        "content": "<p>but the actual actions will have to be taken by infra / <a href=\"http://crates.io\">crates.io</a> teams -- <span class=\"user-mention\" data-user-id=\"121055\">@Pietro Albini</span> ?</p>",
        "id": 266889017,
        "sender_full_name": "cuviper",
        "timestamp": 1641348074
    },
    {
        "content": "<p>Is that documented anywhere? I found <a href=\"https://www.rust-lang.org/policies/security\">https://www.rust-lang.org/policies/security</a> but that says </p>\n<blockquote>\n<p>All security bugs in the Rust distribution should be reported by email to <a href=\"mailto:security@rust-lang.org\">security@rust-lang.org</a>. </p>\n</blockquote>\n<p>Which sounds to me like if a crate is not used by rustc, then it's not the right address<br>\nThe crates io website has a link to that page at the bottom for security policy though</p>",
        "id": 266889226,
        "sender_full_name": "Nick12",
        "timestamp": 1641348318
    },
    {
        "content": "<p>I guess we need to clarify that scope, but yes, we've responded to broader reports before</p>",
        "id": 266889335,
        "sender_full_name": "cuviper",
        "timestamp": 1641348441
    },
    {
        "content": "<p>yeah if a crate is actually malicious security@ is the way to go</p>",
        "id": 266907311,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1641369930
    },
    {
        "content": "<p>Just a wild idea around \"Community driven crates registry reflector\" ... <br>\n<a href=\"https://github.com/rust-secure-code/wg/issues/42\">https://github.com/rust-secure-code/wg/issues/42</a><br>\nEssentially if the community expects some type of guarantees around security - or - \"moderation\" - or - \"hardening\" someone will have to do it and naturally it could be community initiative to provide it and easy to plug into automatically.<br>\nEnterprise users typically would be interested on this kind of thing.</p>",
        "id": 266909216,
        "sender_full_name": "pinkforest(she/her)",
        "timestamp": 1641371443
    },
    {
        "content": "<p>(I love that I got the Issue # 42 :D)</p>",
        "id": 266910310,
        "sender_full_name": "pinkforest(she/her)",
        "timestamp": 1641372256
    }
]