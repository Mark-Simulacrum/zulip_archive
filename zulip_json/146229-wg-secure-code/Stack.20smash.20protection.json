[
    {
        "content": "<p>Have I understood correctly that there's no stack smash protection in Rust, and that this means Rust code is more vulnerable to some exploits when calling unsafe code? Or is there a reason this is not a problem? (E.g. stack smashing across stack frames not being a thing, or that such attacks should be caught by canaries in the unsafe code). The use case I have in mind is creating safe Rust abstractions around pre-compiled vendor libraries, and I wonder if this is actually a two-edged sword security-wise: reduced chance of vulnerabilities in the client code, but fewer defenses if the library has a vulnerability.</p>",
        "id": 226303807,
        "sender_full_name": "Benjamin",
        "timestamp": 1613308463
    },
    {
        "content": "<p>It <a href=\"https://github.com/rust-lang/rust/issues/43241\">depends on the platform</a>. I am pretty certain the main (tier 1) x86-64 targets are protected, but for instance <a href=\"https://github.com/rust-lang/rust/issues/77071\">aarch64 is not (yet)</a>. IIUC, support mostly depends on LLVM for the implementation, but <code>rustc</code> needs to enable it explicitly.</p>",
        "id": 226304114,
        "sender_full_name": "Gwaihir Thorondorsen",
        "timestamp": 1613309019
    },
    {
        "content": "<p>I have no idea what the story is for the cranelift backend so I'll just defer to <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span>.</p>",
        "id": 226304171,
        "sender_full_name": "Gwaihir Thorondorsen",
        "timestamp": 1613309089
    },
    {
        "content": "<p>That's stack overflow protection, not stack smash detection.</p>",
        "id": 226304430,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1613309537
    },
    {
        "content": "<p>If the C library itself wasn't built with stack smash protection enabled and you wanted an extra layer of security, you could potentially make a little C shim that wraps the library by just directly delegating each method and then build that shim with stack smash protection enabled.</p>",
        "id": 226304471,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1613309617
    },
    {
        "content": "<p>Thanks, so  it's unlikely that an attacker can target an unchecked Rust stack frame as long as there's one with a canary somewhere further down the call stack? I guess that's the assumption which makes the canaries work at all :) What if the library is given a pointer to the Rust stack though? Should a Rust wrapper prefer sending pointers to heap-allocated data to unsafe code?</p>",
        "id": 226304829,
        "sender_full_name": "Benjamin",
        "timestamp": 1613310240
    },
    {
        "content": "<p>Naming things is hard indeedâ€¦ (Sorry, that's my 2nd in less than 24h and its starting to get embarrassing.)</p>",
        "id": 226304872,
        "sender_full_name": "Gwaihir Thorondorsen",
        "timestamp": 1613310255
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"369545\">Gwaihir Thorondorsen</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/Stack.20smash.20protection/near/226304171\">said</a>:</p>\n<blockquote>\n<p>I have no idea what the story is for the cranelift backend so I'll just defer to <span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span>.</p>\n</blockquote>\n<p>Stack probing isn't supported by cg_clif yet. Cranelift does support it, but the <code>__rust_probestack</code> in compiler-builtins requires inline assembly. While this is partially supported on Linux, compiler-builtins uses some inline asm features that aren't yet supported, so I had to enable the <code>no-asm</code> feature of compiler-builtins.</p>",
        "id": 226304978,
        "sender_full_name": "bjorn3",
        "timestamp": 1613310457
    },
    {
        "content": "<p>FWIW, out of all the advisories in <a href=\"https://rustsec.org/\">https://rustsec.org/</a> I've only seen one that would have been prevented by stack smashing protection. I could have missed something, but stack buffer overflow is not a common failure mode in Rust code.<br>\nI'm not qualified to comment on the interaction with C code.</p>",
        "id": 226310541,
        "sender_full_name": "Shnatsel",
        "timestamp": 1613317621
    },
    {
        "content": "<p>Overflowing a heap allocated buffer rather than a stack allocated buffer just results in heap corruption rather than stack corruption. At some point, you just have to make a call of how sloppy you think these libraries actually are, and if they're that bad you may need to e.g. isolate them to a separate process with limited permissions or something.</p>",
        "id": 226310873,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1613318070
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243558\">Steven Fackler</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/Stack.20smash.20protection/near/226310873\">said</a>:</p>\n<blockquote>\n<p>Overflowing a heap allocated buffer rather than a stack allocated buffer just results in heap corruption rather than stack corruption. At some point, you just have to make a call of how sloppy you think these libraries actually are, and if they're that bad you may need to e.g. isolate them to a separate process with limited permissions or something.</p>\n</blockquote>\n<p>Benjamin Lamowski implemented exactly this appraoch. (Paper: <a href=\"https://dl.acm.org/doi/10.1145/3144555.3144562\">https://dl.acm.org/doi/10.1145/3144555.3144562</a>  Code: <a href=\"https://github.com/atopia/sandcrust\">https://github.com/atopia/sandcrust</a>)</p>",
        "id": 226312547,
        "sender_full_name": "Oliver Braunsdorf",
        "timestamp": 1613319298
    },
    {
        "content": "<p>Speaking of stack overflow protection, I believe LLVM11 has portable stack probes, and I think that might've just gotten wired up (or at least an issue opened) in Rust recently</p>",
        "id": 226322616,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1613333631
    },
    {
        "content": "<p>also there's <code>-Z sanitizer</code>: <a href=\"https://github.com/japaric/rust-san\">https://github.com/japaric/rust-san</a></p>",
        "id": 226322676,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1613333697
    },
    {
        "content": "<p>and this thread seems like the sort of thing that's up <span class=\"user-mention\" data-user-id=\"130046\">@Alex Gaynor</span>'s alley</p>",
        "id": 226322703,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1613333734
    },
    {
        "content": "<p>There's a recent patch (nightly, maybe beta) to take advantage of inline stack probes. Not sure if that's the same as portable ones though? (Makes it be an asm snippet instead of a call)</p>",
        "id": 226322756,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1613333779
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/77885\">https://github.com/rust-lang/rust/pull/77885</a></p>",
        "id": 226322760,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1613333791
    },
    {
        "content": "<p>In terms of \"does rust need <code>-fstack-protector</code>\" it's not _just_ a question of whether Rust code uses this. If you have a stack array and then pass an address to a C function, you need the stack protection in the Rust function, not the C one.</p>",
        "id": 226322783,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1613333846
    },
    {
        "content": "<p>The ideal thing would be some sort of unsafe-aware stack-protector-strong, so only instrument functions that  both take the address of a stack array, and also do something unsafe with it.</p>",
        "id": 226322846,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1613333904
    },
    {
        "content": "<p>I do think it's an advantage to Rust that you don't need to instrument tons of functions for this, which has a perf cost.</p>",
        "id": 226322853,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1613333923
    },
    {
        "content": "<p>More up to date documentation for <code>-Zsanitizer</code> is at <a href=\"https://doc.rust-lang.org/nightly/unstable-book/compiler-flags/sanitizer.html\">https://doc.rust-lang.org/nightly/unstable-book/compiler-flags/sanitizer.html</a></p>",
        "id": 226323142,
        "sender_full_name": "tm",
        "timestamp": 1613334380
    },
    {
        "content": "<p>Thanks everyone for your input!</p>\n<ul>\n<li>Regarding heap allocation of data passed over FFI, I figured this might be safer because of the heap corruption protection mentioned in the exploit mitigation guide (<a href=\"https://doc.rust-lang.org/rustc/exploit-mitigations.html\">https://doc.rust-lang.org/rustc/exploit-mitigations.html</a>). Also, maybe the chance is smaller of finding a function pointer in the vicinity, in contrast to stack overflow where there's a return address not far away. This would be a band-aid for the lack of stack-smashing protection at best though.</li>\n<li>The stack probing mentioned is for stack <em>clash</em> mitigation, right?</li>\n<li>The sanitizer flag sounds promising, though chiefly combined with the \"safe-stack\" sanitizer which fwict is intended for use in release builds. There's no support for this in rustc, even on nightly, correct?</li>\n<li>Thinking more on the issue, I reached a conclusion similar to what <span class=\"user-mention\" data-user-id=\"130046\">@Alex Gaynor</span> points out: stack smash protection could benefit any function with a stack variable whose address is potentially passed to an unsafe block. The precise criterion should in practice be refined both to make analysis feasible and to strike a balance between security and performance (probably resulting in options similar to <code>-fstack-protector-{all,strong,}</code> as in gcc/clang, with the opportunity to make \"strong\" even stronger by excluding stack variables which are definitely only used by safe Rust). Notably though, this is not specific to C/C++ interop, since unsafe Rust code can be just as misbehaved? It's interesting to see that there have been few known vulnerabilities of this kind as <span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> mentions, but this may be an unsatisfactory assurance for the paranoid.</li>\n</ul>\n<p>I think my main concern is about marketing. The lack of hardening such as stack smash protection makes the choice between Rust and C/C++ by definition a trade-off security-wise, regardless of how uneven the trade might be: Rust code is less likely to contain vulnerabilities, but as it stands has fewer defences if shit hits the fan. Is this understanding correct?</p>\n<p>I found an interesting if dated issue about adding a \"stack smash protection\" attribute to the generated LLVM functions (<a href=\"https://github.com/rust-lang/rust/issues/26612\">https://github.com/rust-lang/rust/issues/26612</a>). Limited experimentation indicates that passing <code>-fstack-protector-{all,strong,}</code> to clang does more or less this: the output of <code>echo 'void f() { }' | clang++ -emit-llvm -x c++ - -S -o - -O2 &lt;ssp flag&gt;</code> delegates to LLVM by marking <code>f()</code> with a <code>sspreq</code>, <code>sspstrong</code>, or <code>ssp</code> attribute, respectively. Perhaps it's possible to build a rustc which adds these attributes without major compiler surgery?</p>",
        "id": 226629484,
        "sender_full_name": "Benjamin",
        "timestamp": 1613552461
    },
    {
        "content": "<blockquote>\n<p>stack smash protection could benefit any function with a stack variable whose address is potentially passed to an unsafe block.</p>\n</blockquote>\n<p>I agree with this, and it came up a long time ago although I forget where the discussion went</p>",
        "id": 226656379,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1613569093
    },
    {
        "content": "<p>here's an old issue about it, with someone asking at the end \"is this tracked somewhere now?\" <a href=\"https://github.com/rust-lang/rust/issues/15179\">https://github.com/rust-lang/rust/issues/15179</a></p>",
        "id": 226656478,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1613569144
    },
    {
        "content": "<p>FWIW, it's not clear to me a precise analysis is possible (within the constraints of <code>rustc</code>) -- say you have <code>foo:f()</code> with a stack array. It calls <code>foo::g()</code> and passes a <code>&amp;[T]</code> to it, neither has an <code>unsafe</code> block. <code>foo::g()</code> then calls <code>bar::h()</code> (different module! different compilation unit!) <code>h()</code> does have an unsafe block.</p>\n<p><code>f()</code> is where you need the canary, but the compiler has no way to know this.</p>",
        "id": 226656668,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1613569236
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>stack smash protection could benefit any function with a stack variable whose address is potentially passed to an unsafe block.</p>\n</blockquote>\n<p>I agree with this, and it came up a long time ago although I forget where the discussion went</p>\n<p>here's an old issue about it, with someone asking at the end \"is this tracked somewhere now?\" <a href=\"https://github.com/rust-lang/rust/issues/15179\">https://github.com/rust-lang/rust/issues/15179</a></p>\n</blockquote>\n<p>Thanks! The second-to-last post states that \"we have some interest in a working group that would work on this stuff, and they'll track this in their own ways\". Wouldn't that be this working group? ^_^;</p>\n<blockquote>\n<p>FWIW, it's not clear to me a precise analysis is possible (within the constraints of rustc) -- say you have foo:f() with a stack array. It calls foo::g() and passes a &amp;[T] to it, neither has an unsafe block. foo::g() then calls bar::h() (different module! different compilation unit!) h() does have an unsafe block.</p>\n<p>f() is where you need the canary, but the compiler has no way to know this.</p>\n</blockquote>\n<p>Indeed, and starting out with heuristics similar to those offered by gcc/clang (none, some, strong, all) seems sensible to me, especially considering that they appear to be available out-of-the-box from LLVM and glibc. Safe Rust offers an opportunity for making <code>-fstack-protector-strong</code> more precise, but as you say it seems tough to answer the question \"is this stack address definitely accessed by unsafe Rust\". A better question is perhaps to ask \"is this stack address definitely only accessed by safe Rust\", and exempting stack frames from protection if the answer is \"yes\" for all stack variables whose address is taken. Perhaps there should be an extra option to decide if the standard library is trusted. </p>\n<p>At any rate, I would consider having the choice of (none, some, strong, all) a major improvement over having no options at all, even if it turns out that strong ~= all for Rust code and requires Rust-specific adjustments to be meaningful.</p>",
        "id": 226712361,
        "sender_full_name": "Benjamin",
        "timestamp": 1613590209
    },
    {
        "content": "<p>2Â¢: Don't trust the whole standard library.  Make something targeted and trust only those things.</p>\n<p>(For example, maybe trust the small-size part of <code>swap_nonoverlapping_one</code>(<a href=\"https://github.com/rust-lang/rust/blob/5ef21063f0c0fd5b973bfa8cb88c0b70982da977/library/core/src/ptr/mod.rs#L451\">https://github.com/rust-lang/rust/blob/5ef21063f0c0fd5b973bfa8cb88c0b70982da977/library/core/src/ptr/mod.rs#L451</a>) but not <code>swap_nonoverlapping_bytes</code> (until the latter gets a MIR proof or whatever.)</p>",
        "id": 226714941,
        "sender_full_name": "scottmcm",
        "timestamp": 1613591350
    },
    {
        "content": "<blockquote>\n<p>2Â¢: Don't trust the whole standard library. Make something targeted and trust only those things.</p>\n</blockquote>\n<p>and this is why I write <code>no_std</code> applications <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 226730398,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1613598151
    },
    {
        "content": "<p>Those methods are in core, so you're using them even in <code>no_std</code> <span aria-label=\"smiling imp\" class=\"emoji emoji-1f608\" role=\"img\" title=\"smiling imp\">:smiling_imp:</span> </p>\n<p>(And as far as I know they're correct, and am not concerned about them in the slightest, but the bar \"where to not do the just-in-case checks\" should be seriously high.)</p>",
        "id": 226731060,
        "sender_full_name": "scottmcm",
        "timestamp": 1613598485
    },
    {
        "content": "<p>I just discovered that <code>no_core</code> exists for the truly paranoid</p>",
        "id": 226732295,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613599054
    },
    {
        "content": "<p>Apparently you have to fuss with lang items to actually do anything though. I would be curious to see what a minimal prelude library looks like that actually declares all lang iterms</p>",
        "id": 226732439,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613599130
    },
    {
        "content": "<p>#![no_core] is perma-unstable though</p>",
        "id": 226732534,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613599179
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/Stack.20smash.20protection/near/226732295\">said</a>:</p>\n<blockquote>\n<p>I just discovered that <code>no_core</code> exists for the truly paranoid</p>\n</blockquote>\n<p>That's <em>irrationably</em> paranoid, though.  If you can't trust <code>core</code>, you <em>definitely</em> can't trust the compiler nor LLVM.</p>",
        "id": 226734924,
        "sender_full_name": "scottmcm",
        "timestamp": 1613599789
    },
    {
        "content": "<p>Note that while not a <em>panacea</em>, there is always the possibility of using library-side canaries: <a href=\"https://play.rust-lang.org/?version=beta&amp;mode=release&amp;edition=2018&amp;gist=316165bb1feab341958656dd67f6acec\">https://play.rust-lang.org/?version=beta&amp;mode=release&amp;edition=2018&amp;gist=316165bb1feab341958656dd67f6acec</a></p>",
        "id": 226817046,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1613658395
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127617\">Shnatsel</span> <a href=\"#narrow/stream/146229-wg-secure-code/topic/Stack.20smash.20protection/near/226310541\">said</a>:</p>\n<blockquote>\n<p>FWIW, out of all the advisories in <a href=\"https://rustsec.org/\">https://rustsec.org/</a> I've only seen one that would have been prevented by stack smashing protection. I could have missed something, but stack buffer overflow is not a common failure mode in Rust code.<br>\nI'm not qualified to comment on the interaction with C code.</p>\n</blockquote>\n<p>Here's another example that came up recently: <a href=\"https://github.com/Alexhuszagh/rust-stackvector/issues/2\">https://github.com/Alexhuszagh/rust-stackvector/issues/2</a></p>",
        "id": 226981399,
        "sender_full_name": "Ammar Askar",
        "timestamp": 1613749449
    }
]