[
    {
        "content": "<p>I have a draft of a new post on my personal block, I'd appreciate pre-reading and feedback: <a href=\"https://medium.com/@shnatsel/smoke-testing-rust-http-clients-b8f2ee5db4e6\" target=\"_blank\" title=\"https://medium.com/@shnatsel/smoke-testing-rust-http-clients-b8f2ee5db4e6\">https://medium.com/@shnatsel/smoke-testing-rust-http-clients-b8f2ee5db4e6</a></p>",
        "id": 184971156,
        "sender_full_name": "Shnatsel",
        "timestamp": 1578356330
    },
    {
        "content": "<p>Well, I've just learned that <a href=\"https://crates.io/crates/attohttpc\" target=\"_blank\" title=\"https://crates.io/crates/attohttpc\">https://crates.io/crates/attohttpc</a> is a thing, I guess I have still more testing and writing to do</p>",
        "id": 184973458,
        "sender_full_name": "Shnatsel",
        "timestamp": 1578359140
    },
    {
        "content": "<p>Please disregard that, looks like I will be rewriting that</p>",
        "id": 184978418,
        "sender_full_name": "Shnatsel",
        "timestamp": 1578366473
    },
    {
        "content": "<p>I'm definitely interested in minimalist security-oriented HTTP clients</p>",
        "id": 184978994,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1578367369
    },
    {
        "content": "<p>particularly ones which use rustls by default</p>",
        "id": 184978996,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1578367375
    },
    {
        "content": "<p>Interesting post Shnatsel. In, \"Here are two probably-exploitable bugs that are still unpatched in the latest version of libcurl: 1, 2.\" the second link is in a unit test so might not apply.</p>",
        "id": 184979136,
        "sender_full_name": "Wesley Moore",
        "timestamp": 1578367594
    },
    {
        "content": "<p>Good catch, thanks!</p>",
        "id": 184984095,
        "sender_full_name": "Shnatsel",
        "timestamp": 1578375834
    },
    {
        "content": "<p>I'm re-running the test on attohttpc now, will put in the results and rewrite conclusion</p>",
        "id": 184984154,
        "sender_full_name": "Shnatsel",
        "timestamp": 1578375906
    },
    {
        "content": "<p>Also turns out <a href=\"https://crates.io/crates/http_req\" target=\"_blank\" title=\"https://crates.io/crates/http_req\">https://crates.io/crates/http_req</a> is a thing, even has some downloads unlike the other 2 sync clients</p>",
        "id": 184984158,
        "sender_full_name": "Shnatsel",
        "timestamp": 1578375923
    },
    {
        "content": "<p>Also I think I need a better title for this post</p>",
        "id": 185044728,
        "sender_full_name": "Shnatsel",
        "timestamp": 1578425112
    },
    {
        "content": "<p>huh, another one</p>",
        "id": 185045171,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1578425363
    },
    {
        "content": "<p>I wrote one of these but it barely works and I'd like to abandon it</p>",
        "id": 185045187,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1578425372
    },
    {
        "content": "<p>heh</p>",
        "id": 185045190,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1578425373
    },
    {
        "content": "<p><a href=\"https://crates.io/crates/harp\" target=\"_blank\" title=\"https://crates.io/crates/harp\">https://crates.io/crates/harp</a></p>",
        "id": 185045218,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1578425396
    },
    {
        "content": "<p>There's also <a href=\"https://crates.io/crates/cabot\" target=\"_blank\" title=\"https://crates.io/crates/cabot\">https://crates.io/crates/cabot</a></p>",
        "id": 185049857,
        "sender_full_name": "Shnatsel",
        "timestamp": 1578427945
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> ureq got a <a href=\"https://github.com/dpc/crev-proofs/commit/42a3b5c5d6c0fc6e49f344fb89208454ffd6fc81\" target=\"_blank\" title=\"https://github.com/dpc/crev-proofs/commit/42a3b5c5d6c0fc6e49f344fb89208454ffd6fc81\">bad crev rating</a> the first time around, has the situation gotten better since then?</p>",
        "id": 185057181,
        "sender_full_name": "RalfJ",
        "timestamp": 1578432826
    },
    {
        "content": "<p>Yes, I believe most points from that review are addressed</p>",
        "id": 185057247,
        "sender_full_name": "Shnatsel",
        "timestamp": 1578432852
    },
    {
        "content": "<p>I am rewriting my article to be even more nihilistic now because I've found that none of the sync crates allow specifying a timeout for the entire request, so they're all trivial to DoS</p>",
        "id": 185057291,
        "sender_full_name": "Shnatsel",
        "timestamp": 1578432899
    },
    {
        "content": "<p>the version you linked up there has been a fun read, good job :)</p>",
        "id": 185057480,
        "sender_full_name": "RalfJ",
        "timestamp": 1578433022
    },
    {
        "content": "<p>though even more nihilistic might be hard to swallow^^</p>",
        "id": 185057502,
        "sender_full_name": "RalfJ",
        "timestamp": 1578433033
    },
    {
        "content": "<p>(for my pet projects I used attohttpc instead of ureq based on that crev comment, maybe I should switch. but then, they're just toys, and I am not sure if I want to play type golf again until I figured out how to get a <code>Read</code> trait out of the response^^)</p>",
        "id": 185057612,
        "sender_full_name": "RalfJ",
        "timestamp": 1578433095
    },
    {
        "content": "<p>I have run attohttpc through the same test but haven't looked at the results yet. My gripe with attohttpc is that it doesn't support rustls, only openssl or native-tls</p>",
        "id": 185057696,
        "sender_full_name": "Shnatsel",
        "timestamp": 1578433160
    },
    {
        "content": "<p>plus it pulls in the same hand-rolled hashmap advertised as HTTP types, but I guess I can live with that</p>",
        "id": 185057737,
        "sender_full_name": "Shnatsel",
        "timestamp": 1578433196
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> btw you will probably appreciate this gem:<br>\n<a href=\"https://github.com/actix/actix-net/blob/7dddeab2a8c4fdcd0c7de6aa4303aca8faffcd53/actix-service/src/cell.rs#L40\" target=\"_blank\" title=\"https://github.com/actix/actix-net/blob/7dddeab2a8c4fdcd0c7de6aa4303aca8faffcd53/actix-service/src/cell.rs#L40\">https://github.com/actix/actix-net/blob/7dddeab2a8c4fdcd0c7de6aa4303aca8faffcd53/actix-service/src/cell.rs#L40</a><br>\nand this:<br>\n<a href=\"https://github.com/actix/actix-net/blob/7dddeab2a8c4fdcd0c7de6aa4303aca8faffcd53/actix-service/src/cell.rs#L35\" target=\"_blank\" title=\"https://github.com/actix/actix-net/blob/7dddeab2a8c4fdcd0c7de6aa4303aca8faffcd53/actix-service/src/cell.rs#L35\">https://github.com/actix/actix-net/blob/7dddeab2a8c4fdcd0c7de6aa4303aca8faffcd53/actix-service/src/cell.rs#L35</a></p>",
        "id": 185057983,
        "sender_full_name": "Shnatsel",
        "timestamp": 1578433344
    },
    {
        "content": "<p>the <code>allow(clippy::mut_from_ref)</code> is great^^</p>",
        "id": 185058016,
        "sender_full_name": "RalfJ",
        "timestamp": 1578433383
    },
    {
        "content": "<p>though this does have interior mutability, so if used correctly this could avoid UB</p>",
        "id": 185058099,
        "sender_full_name": "RalfJ",
        "timestamp": 1578433449
    },
    {
        "content": "<p>wait... <code>get_mut</code> makes no sense, does it? <code>&amp;mut Rc&lt;T&gt;</code> doesnt mean we can safely get mutable access to the interior.</p>",
        "id": 185058352,
        "sender_full_name": "RalfJ",
        "timestamp": 1578433663
    },
    {
        "content": "<p>Ah, so the <code>&amp;T</code> to <code>&amp;mut T</code> transmute in here is actually okay because they are doing this to an <code>UnsafeCell</code>?</p>",
        "id": 185058362,
        "sender_full_name": "Shnatsel",
        "timestamp": 1578433673
    },
    {
        "content": "<p>Of course it makes no sense, they're trying to use a hand-rolled Cell as a RefCell</p>",
        "id": 185058423,
        "sender_full_name": "Shnatsel",
        "timestamp": 1578433690
    },
    {
        "content": "<p>which it isn't</p>",
        "id": 185058433,
        "sender_full_name": "Shnatsel",
        "timestamp": 1578433694
    },
    {
        "content": "<p>it's not doing such a transmute, is it? it's calling <code>UnsafeCell::get</code></p>",
        "id": 185058437,
        "sender_full_name": "RalfJ",
        "timestamp": 1578433696
    },
    {
        "content": "<p>which is the one oaky way to go from <code>&amp;UnsafeCell&lt;T&gt;</code> to <code>&amp;mut T</code> <em>if</em> you can assure uniqueness</p>",
        "id": 185058472,
        "sender_full_name": "RalfJ",
        "timestamp": 1578433736
    },
    {
        "content": "<p>but, making <code>get_mut</code> safe just seems entirely wrong, this is like <code>Rc::get_mut</code> but without the check that the refcount is 1...</p>",
        "id": 185058506,
        "sender_full_name": "RalfJ",
        "timestamp": 1578433774
    },
    {
        "content": "<p>Yep, the entire reason why <code>std::Cell</code> doesn't have <code>get_mut()</code> is because you need <code>RefCell</code> to guarantee uniqueness</p>",
        "id": 185058526,
        "sender_full_name": "Shnatsel",
        "timestamp": 1578433790
    },
    {
        "content": "<p>not sure what you mean? <a href=\"https://doc.rust-lang.org/nightly/std/cell/struct.Cell.html#method.get_mut\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/std/cell/struct.Cell.html#method.get_mut\">https://doc.rust-lang.org/nightly/std/cell/struct.Cell.html#method.get_mut</a></p>",
        "id": 185058587,
        "sender_full_name": "RalfJ",
        "timestamp": 1578433811
    },
    {
        "content": "<p>hmm, let me rethink that</p>",
        "id": 185058622,
        "sender_full_name": "Shnatsel",
        "timestamp": 1578433850
    },
    {
        "content": "<p>the thing it doesnt have is <code>RefCell</code>'s <code>borrow_mut</code></p>",
        "id": 185058624,
        "sender_full_name": "RalfJ",
        "timestamp": 1578433852
    },
    {
        "content": "<p>but the thing is, actix' <code>Cell</code> is an <code>Rc</code>, so the <code>&amp;mut</code> doesnt mean anything</p>",
        "id": 185058691,
        "sender_full_name": "RalfJ",
        "timestamp": 1578433919
    },
    {
        "content": "<p>that's why <code>std:::Cell:get_mut</code> makes sense, but this one doesn't</p>",
        "id": 185058768,
        "sender_full_name": "RalfJ",
        "timestamp": 1578433954
    },
    {
        "content": "<p>oh cool, <a href=\"https://crates.io/crates/cabot\" target=\"_blank\" title=\"https://crates.io/crates/cabot\">https://crates.io/crates/cabot</a> is actually async and uses async-std under the hood. I'll have to try that</p>",
        "id": 185063203,
        "sender_full_name": "Shnatsel",
        "timestamp": 1578437198
    },
    {
        "content": "<p>I don't get the point of that</p>",
        "id": 185063548,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1578437480
    },
    {
        "content": "<p>if that's what you want, why not <code>surf</code>?</p>",
        "id": 185063552,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1578437486
    },
    {
        "content": "<p>does it have significantly fewer dependencies?</p>",
        "id": 185063626,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1578437530
    },
    {
        "content": "<p><code>surf</code> has every async dependency under the sun, <em>except</em> <code>async-std</code></p>",
        "id": 185066092,
        "sender_full_name": "Shnatsel",
        "timestamp": 1578439713
    },
    {
        "content": "<p>oh weird, I guess it's only a dev-dependency?</p>",
        "id": 185078332,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1578454671
    },
    {
        "content": "<p>Here's the final draft of the article, i.e. this is what's going to be on reddit tomorrow if you don't stop me:<br>\n<a href=\"https://medium.com/@shnatsel/smoke-testing-rust-http-clients-b8f2ee5db4e6\" target=\"_blank\" title=\"https://medium.com/@shnatsel/smoke-testing-rust-http-clients-b8f2ee5db4e6\">https://medium.com/@shnatsel/smoke-testing-rust-http-clients-b8f2ee5db4e6</a><br>\nProofreading is <em>very</em> welcome.</p>",
        "id": 185750219,
        "sender_full_name": "Shnatsel",
        "timestamp": 1579126498
    },
    {
        "content": "<p>I loved it! You wrote sever instead of server in one place, purpoise instead of purpose in another. Since you mention Go in the end, would you be able to run the same experiment with it for fun?</p>",
        "id": 185789676,
        "sender_full_name": "Yerkebulan Tulibergenov",
        "timestamp": 1579156503
    },
    {
        "content": "<p>Thanks! I am rather tired of doing this after performing and analyzing 10+ runs, so I'll leave trying Go as an exercise to the reader.</p>",
        "id": 185814722,
        "sender_full_name": "Shnatsel",
        "timestamp": 1579181753
    },
    {
        "content": "<p>Finalized and posted: <a href=\"https://medium.com/@shnatsel/smoke-testing-rust-http-clients-b8f2ee5db4e6\" target=\"_blank\" title=\"https://medium.com/@shnatsel/smoke-testing-rust-http-clients-b8f2ee5db4e6\">https://medium.com/@shnatsel/smoke-testing-rust-http-clients-b8f2ee5db4e6</a><br>\nThanks for all the help!</p>",
        "id": 185853742,
        "sender_full_name": "Shnatsel",
        "timestamp": 1579204966
    },
    {
        "content": "<p>Wow, I'm getting some high praise on Reddit! <a href=\"https://www.reddit.com/r/rust/comments/epoloy/ive_smoketested_rust_http_clients_heres_what_i/\" target=\"_blank\" title=\"https://www.reddit.com/r/rust/comments/epoloy/ive_smoketested_rust_http_clients_heres_what_i/\">https://www.reddit.com/r/rust/comments/epoloy/ive_smoketested_rust_http_clients_heres_what_i/</a></p>",
        "id": 185870066,
        "sender_full_name": "Shnatsel",
        "timestamp": 1579214727
    },
    {
        "content": "<p>Hmm, this is having some profound consequences: <a href=\"https://words.steveklabnik.com/a-sad-day-for-rust\" target=\"_blank\" title=\"https://words.steveklabnik.com/a-sad-day-for-rust\">https://words.steveklabnik.com/a-sad-day-for-rust</a><br>\nI'm very much open to input on how I could have done better. I've already solicited feedback elsewhere, but wanted to post here too.</p>",
        "id": 186001300,
        "sender_full_name": "Shnatsel",
        "timestamp": 1579363980
    },
    {
        "content": "<p>I think the tone was harsh but at least it focused on the code.  The harshness was compounded by the follow up from others.</p>",
        "id": 186001665,
        "sender_full_name": "Stuart Small",
        "timestamp": 1579364653
    },
    {
        "content": "<p>For me that was the real problem.  The follow up became really personal and turned into direct attacks</p>",
        "id": 186001668,
        "sender_full_name": "Stuart Small",
        "timestamp": 1579364680
    },
    {
        "content": "<p>Doesn't mean there isn't room to improve</p>",
        "id": 186001794,
        "sender_full_name": "Stuart Small",
        "timestamp": 1579364920
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> I think your post was fair, accurate, and necessary. I don't think you are to blame.</p>",
        "id": 186001889,
        "sender_full_name": "centril",
        "timestamp": 1579365081
    },
    {
        "content": "<p>and I'm sorry for the abuse leveled at you.</p>",
        "id": 186001893,
        "sender_full_name": "centril",
        "timestamp": 1579365096
    },
    {
        "content": "<p>Maybe it would be a good time to talk about guidelines on how to present posts like this?  We've all had issues where other developers have trouble accepting security related bug reports especially when there isn't a clear POC to come along with it.  Hopefully in the future there will be others filing the bugs and writing these posts too.  And guidance goes a long way then</p>",
        "id": 186002086,
        "sender_full_name": "Stuart Small",
        "timestamp": 1579365413
    },
    {
        "content": "<p>I'm glad you brought this up too. Retrospection is such a good and healthy thing, for all of us</p>",
        "id": 186002096,
        "sender_full_name": "Stuart Small",
        "timestamp": 1579365425
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> there is very little abuse levelled at me, actually. I got called a zealot, what, once? For an article with 25,000 views that's <em>nothing.</em><br>\nI am my own worst critic.</p>",
        "id": 186002984,
        "sender_full_name": "Shnatsel",
        "timestamp": 1579366946
    },
    {
        "content": "<p>There's bound to be <em>some</em> abuse and negativity at these exposure levels. It's a simple matter of probability. I have elaborated on it more here: <a href=\"https://www.reddit.com/r/rust/comments/eq11t3/a_sad_day_for_rust/feo2eh4/\" target=\"_blank\" title=\"https://www.reddit.com/r/rust/comments/eq11t3/a_sad_day_for_rust/feo2eh4/\">https://www.reddit.com/r/rust/comments/eq11t3/a_sad_day_for_rust/feo2eh4/</a></p>",
        "id": 186003091,
        "sender_full_name": "Shnatsel",
        "timestamp": 1579367077
    },
    {
        "content": "<p>Yeah I agree wrt. \"probability\"</p>",
        "id": 186003103,
        "sender_full_name": "centril",
        "timestamp": 1579367102
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132722\">@Stuart Small</span> I absolutely agree that we need clear guidelines on what the demarcation and contracts between safe and unsafe Rust should be. But it's already described in detail in the very first chapter of the Nomicon: <a href=\"https://doc.rust-lang.org/nomicon/safe-unsafe-meaning.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/nomicon/safe-unsafe-meaning.html\">https://doc.rust-lang.org/nomicon/safe-unsafe-meaning.html</a></p>",
        "id": 186003272,
        "sender_full_name": "Shnatsel",
        "timestamp": 1579367376
    },
    {
        "content": "<p>I was thinking more of guidelines for the community in approaching security issues than use of unsafe guidelines.  The author had already made it pretty clear where he stands on unsafe use (and a few other software engineering best practices) and I don’t think more documentation of best practices would change that.  I think we should look more at how we can meet maintainers where they are.  </p>\n<p>I think we’ve all run into situations where we’ve reported a vulnerability to a maintainer, company or other engineer in our org and gotten a negative reaction.  Sometimes dismissal, denial or flat out hostility.  It isn’t surprising.  I think most engineers believe they write high quality secure code and unsurprisingly get defense when someone shows up saying otherwise.  When faced with a bug report there are usually pretty clear repro steps it is easier to accept the mistake.  Often security vulnerabilities don’t have those clear steps or they come with a lot of conditionals.  Without POC exploit code, or POC code that relies on a situation the engineer sees as realistic, they might push back or ignore the patch.</p>\n<p>Also there will always be libraries that don’t match what we view as proper security posture.  Either they don’t care (ESR’s add a segfault handlers to silence fuzzer reports), they have other interests (willing to accept the risk of deadlocks for higher throughput ie the hyper example), not viewing the ability to trigger UB through misuse of library APIs as a library bug, or something else.  It is okay if other libraries have a different threat model than we do, but when that happens we should think about how to communicate this difference to the community in a respectful way.</p>\n<p>Part of the objection I saw several people brought up was the heavy editorialize of code quality when reviewing the libraries.  Whether the criticism were right or wrong it rubbed people the wrong way.  We often find ourselves diving into some of the darker, dustier parts of codebases that a lot of people can ignore and this can lead to a lot of cynicism about the code.  Having that come through in writing, especially a long form piece like this, can be really hard to avoid. </p>\n<p>To be fair, when I first read the post when you posted it in here I didn’t see a problem with the writing.  I thought it was an interesting and well written article.  I still don’t think it was the heart of what went wrong but it was a contributing factor.    It was a minor one and an unintentional one but was still part of the chain of events.</p>\n<p>I think out of this we can look at improving on a couple different fronts:</p>\n<ol>\n<li>If clear bugs are found how they can be communicated without causing a stir?    </li>\n</ol>\n<p>I’ll be honest, I’m not even positive on best practices on communicating security issues in open source.  Most of my career has been working within corporate walled gardens and working out on the open is a strange feeling.  Inside a corporation I am a lot less worried about other’s feelings than public posts on the internet.  How can we communicate opinions on quality in a way that doesn’t put people on the defensive?  When should we reach out to a maintainer in private? When should we elevate an issue to a RUSTSEC filing?</p>\n<p>While part of this is problem is how bug reports are communicated, educating the community is another huge part. The lines between soundness error, UB and RCE started getting blurring in some of those comment sections because of some uninformed commenters.  Some educational blog posts on fundamentals to point to could go a long way in stopping mobs forming on reddit.  We take a lot of this for granted but others will find it useful.</p>\n<ol start=\"2\">\n<li>If there is a crate is not designed with security in mind how can this be communicated to the community without generating hostility?</li>\n</ol>\n<p>This is one I’ve been thinking about a lot.  The unsafe issues with actix have been known for a while but haven’t been communicated in the healthiest way.  It became a bit of a meme on reddit which helped more users find out about it but also lead to this problem.  How can we communicate something like this to the community without repeat of what happened?  This will involve talking about how users evaluate dependencies.  Are they checking cargo crev?  What about cargo gieger? Are a series of “closed will not fix” UB issues in the tracker enough to scare people away?  Do users care if their dependencies heavily use unsafe?  I don’t know the answer here but have a couple ideas.</p>",
        "id": 186013542,
        "sender_full_name": "Stuart Small",
        "timestamp": 1579384812
    },
    {
        "content": "<p>Bit of a monologue.  Sorry I dropped off earlier.  I literally got a page right after I sent the earlier message.  Today has been weird.</p>",
        "id": 186013552,
        "sender_full_name": "Stuart Small",
        "timestamp": 1579384843
    },
    {
        "content": "<p>Thanks for sharing your thoughts. I did not have the time to carefully read and fully understand this yet, but I will do so later.</p>",
        "id": 186017609,
        "sender_full_name": "Shnatsel",
        "timestamp": 1579392528
    },
    {
        "content": "<p>this has been bumming me out. mostly because I feel the responses to it have been so bad. Steve's post is probably the best one...</p>",
        "id": 186045140,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1579449428
    },
    {
        "content": "<p>\"unsafety\" seems like a red herring people are diving for enthusiastically, overlooking the real problem IMO was the mob mentality, plastering every GitHub comment with emoji, etc</p>",
        "id": 186045186,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1579449493
    },
    {
        "content": "<p>but everyone is rushing to have a hot take where they identify their particular axe to grind as The Thing That Went Wrong</p>",
        "id": 186045202,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1579449556
    },
    {
        "content": "<p>Yeah, the dogpiling seems like the real issue. And it's sadly incredibly common, basically anytime a specific github issue is on reddit/Orange Website/goes viral on twitter/etc. it seems to happen.</p>\n<p>Github has better tools now than it did 5 years ago, but I'm not sure tooling can be a sufficient solution</p>",
        "id": 186045600,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1579450261
    },
    {
        "content": "<p>I think there's an interesting question of \"are there things that can be done in our unsafety work to discourage dogpiling\", but  I don't have an answer to that.</p>",
        "id": 186045611,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1579450290
    },
    {
        "content": "<p>I totally agree.  If I wanted to point to <em>one thing</em> it was reddit culture and moderation.  I heard one idea of banning posting links to GitHub issues and I really like that idea.  It's small, enforceable and would have direct impact.</p>\n<p>I didn't want to bring any of that because it is outside the scope of this group.  I think we do have things we can do to help though</p>",
        "id": 186045661,
        "sender_full_name": "Stuart Small",
        "timestamp": 1579450359
    },
    {
        "content": "<p>That seems like a really big hammer. It's very useful to be able to share a link to an issue in response to a question someone has!</p>\n<p>It seems like what you want, which isn't possible ATM, is links to github issues from reddit to have a mandatory backoff time before you can comment via that link. You want the roadblock to dogpiling.</p>",
        "id": 186045800,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1579450601
    },
    {
        "content": "<p>s/roadblock/speedbump/</p>",
        "id": 186045802,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1579450610
    },
    {
        "content": "<p>I think a simple thing GitHub could do is remove the non-affirming emoji</p>",
        "id": 186046232,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1579451498
    },
    {
        "content": "<p>because when people come from upboat/downboat-driven sites like Reddit or HN, they use the emoji as if they were on Reddit or HN...</p>",
        "id": 186046272,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1579451530
    },
    {
        "content": "<p>That's another really big hammer, there's lots of valid use cases for those! At work we do lots of voting on things like \"which snacks should we buy for the office\" with github emoji. (This makes me so happy)</p>",
        "id": 186046286,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1579451571
    },
    {
        "content": "<p>haha, ok</p>",
        "id": 186046298,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1579451628
    },
    {
        "content": "<p>Maybe our snack voting is less important :-)</p>",
        "id": 186046359,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1579451743
    },
    {
        "content": "<p>That isn't really what I want.  It is an idea that I saw thrown out that makes sense but I don't know what is best on the moderation front.  There is a working group for that and it'll be best to leave that to them.</p>",
        "id": 186050567,
        "sender_full_name": "Stuart Small",
        "timestamp": 1579459414
    },
    {
        "content": "<p>For me to boils down to one question, what can we do to help prevent mobs forming over security issues?</p>",
        "id": 186050641,
        "sender_full_name": "Stuart Small",
        "timestamp": 1579459515
    },
    {
        "content": "<p>FWIW, it seems like this may all have a happy ending after all: the new maintainer of Actix has reached out to us about fixing the unsoundness and filing RustSec issues for it</p>",
        "id": 186231080,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1579642914
    },
    {
        "content": "<p>Happy is... relative. The old maintainer being driven out of open source makes this bittersweet at best</p>",
        "id": 186244984,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1579654347
    },
    {
        "content": "<p>I'm just glad something good could come of it</p>",
        "id": 186245844,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1579655402
    }
]