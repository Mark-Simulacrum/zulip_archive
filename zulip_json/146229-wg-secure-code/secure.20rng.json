[
    {
        "content": "<p>Is CSRNG in Rust too complicated? <a href=\"https://github.com/rust-random/rand/issues/648\" target=\"_blank\" title=\"https://github.com/rust-random/rand/issues/648\">https://github.com/rust-random/rand/issues/648</a></p>",
        "id": 148298759,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543110018
    },
    {
        "content": "<p>I have followed this project for years and not voiced an opinion</p>",
        "id": 148298768,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543110058
    },
    {
        "content": "<p>but now I'm like... what I want is very simple, and what I am getting I no longer fully understand, and that's a bit frightening</p>",
        "id": 148298775,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543110113
    },
    {
        "content": "<p>I say this all as I deal with a probably unrelated RNG debacle</p>",
        "id": 148298814,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543110129
    },
    {
        "content": "<p>but I'm also asking myself how did aforementioned debacle even happen</p>",
        "id": 148298817,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543110158
    },
    {
        "content": "<p>because ideally I would like to see it never ever happen again</p>",
        "id": 148298822,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543110172
    },
    {
        "content": "<p>tl;dr: I'm not sure the <code>rand</code> API is what Rust cryptography needs</p>",
        "id": 148298829,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543110218
    },
    {
        "content": "<p>conflating the needs of cryptographically secure random number generators and non cryptographically secure number generators, even behind marker traits, at least now seems like a bad idea to me</p>",
        "id": 148298876,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543110305
    },
    {
        "content": "<p>it feels like an attempt to build abstractions where those abstractions aren't useful except to attackers</p>",
        "id": 148298921,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543110365
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132721\">@Tony Arcieri</span> Is water wet?</p>",
        "id": 148300013,
        "sender_full_name": "briansmith",
        "timestamp": 1543112974
    },
    {
        "content": "<p>haha</p>",
        "id": 148300014,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543112992
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133214\">@briansmith</span> should've used <em>ring</em>? <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 148300062,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543113011
    },
    {
        "content": "<p>/me having a bit of trouble with <em>ring</em> as a dependency but perhaps we can take that elsewhere</p>",
        "id": 148300066,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543113059
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132721\">@Tony Arcieri</span> Sure, DM me.</p>",
        "id": 148300075,
        "sender_full_name": "briansmith",
        "timestamp": 1543113093
    },
    {
        "content": "<p>well I spent my night researching what is effectively a vulnerability (albeit in alpha quality software no one is relying on) and so far my conclusions are it is correctly generating random numbers on macOS, but not Linux</p>",
        "id": 148308628,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543130707
    },
    {
        "content": "<p>I am continuing to investigate</p>",
        "id": 148308629,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543130712
    },
    {
        "content": "<p>this is very unfortunate, though</p>",
        "id": 148308634,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543130737
    },
    {
        "content": "<p>and I would like to find a way to prevent this class of bug from ever, ever happening again (at least without a panic)</p>",
        "id": 148308638,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543130755
    },
    {
        "content": "<p>Are you able to provide any information on how usage of the <code>OsRng</code> (I presume it's that) can differ on Linux and macOS? First thing that comes to mind is using <code>fill</code> instead of <code>try_fill</code> and not correctly handling errors, but that seems unreasonable since <code>fill</code> handles things like waiting for an OS generator implicitly.</p>",
        "id": 148312225,
        "sender_full_name": "brycx",
        "timestamp": 1543138483
    },
    {
        "content": "<p>There are other warts, such as the \"give me random bytes\" syscall being equivalent to reading from /dev/urandom as opposed to /dev/random, and you need the latter if you want to seed a cryptographically secure RNG in user-space. This is exacerbated by the fact that if your program running in a sandbox with no access to /dev/random, there is no way to get seed-quality entropy</p>",
        "id": 148317092,
        "sender_full_name": "Shnatsel",
        "timestamp": 1543149047
    },
    {
        "content": "<p>I'm using <code>fill_bytes</code></p>",
        "id": 148325151,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543165370
    },
    {
        "content": "<p>the code in question is here: <a href=\"https://github.com/tendermint/signatory/blob/master/src/ed25519/seed.rs#L44\" target=\"_blank\" title=\"https://github.com/tendermint/signatory/blob/master/src/ed25519/seed.rs#L44\">https://github.com/tendermint/signatory/blob/master/src/ed25519/seed.rs#L44</a></p>",
        "id": 148325163,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543165414
    },
    {
        "content": "<p>more fun: <code>debug</code> builds on Linux seem ok. It's only <code>release</code> builds which are impacted.</p>",
        "id": 148326130,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543167440
    },
    {
        "content": "<p>this is at least no longer looking like the <code>rand</code> crate's fault</p>",
        "id": 148326900,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543169160
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span>  I actually just tried to test that, by having a binary executed in a firejail sandbox with <code>/dev/urandom/</code> and <code>/dev/random</code> blacklisted. When calling another library's generation function (<code>OsRng</code>) there were no errors reported, but when I tried to open <code>/dev/urandom/</code> with <code>std::File</code> it panicked on <code>PermissionDenied</code>. Seems a bit curious, but I'm sure there's something I've overlooked.</p>",
        "id": 148327440,
        "sender_full_name": "brycx",
        "timestamp": 1543170353
    },
    {
        "content": "<p><code>getrandom</code> syscall I assume</p>",
        "id": 148327656,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1543170841
    },
    {
        "content": "<p>Yeah, the sandbox logs do say that getrandom() has been called</p>",
        "id": 148327840,
        "sender_full_name": "brycx",
        "timestamp": 1543171172
    },
    {
        "content": "<p>FWIW it's the same behavior on both <code>debug</code> and <code>release</code>.</p>",
        "id": 148327994,
        "sender_full_name": "brycx",
        "timestamp": 1543171487
    },
    {
        "content": "<p>Failing that it could also be  the <code>AT_RANDOM</code> aux value.</p>",
        "id": 148327997,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1543171502
    },
    {
        "content": "<p>IIUC that only provides a pointer to 16 bytes of random data? I'm generating 32.</p>",
        "id": 148328186,
        "sender_full_name": "brycx",
        "timestamp": 1543171859
    },
    {
        "content": "<p>my issue ended up being an errant <code>debug_assert_eq!</code> which resulted in important code being compiled out of release builds. oops.</p>",
        "id": 148328252,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543171991
    },
    {
        "content": "<p>so code under debug_assert_eq! had side-effects?</p>",
        "id": 148328260,
        "sender_full_name": "Shnatsel",
        "timestamp": 1543172038
    },
    {
        "content": "<p>Did it have noticeable results on the <code>Rng</code>s output?</p>",
        "id": 148328297,
        "sender_full_name": "brycx",
        "timestamp": 1543172044
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> this code is nothing but side effects, heh</p>",
        "id": 148328508,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543172495
    },
    {
        "content": "<p>the RNG was a red herring, it was a bug in the encoding library (<code>subtle-encoding</code>)</p>",
        "id": 148328509,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543172512
    },
    {
        "content": "<p>Ah, I see what you mean.</p>",
        "id": 148328623,
        "sender_full_name": "brycx",
        "timestamp": 1543172694
    },
    {
        "content": "<p>I might look into rewriting the <code>Encoding</code> trait to use iterators, so there's no danger of exposing a zero-initialized buffer like what happened here... except for the part where you can't really \"construct\" an array out of an iterator yet, right? but it'd work for a <code>Vec</code> which does happen to be what was in use here</p>",
        "id": 148336467,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543187775
    },
    {
        "content": "<p>I'm trying to keep the core API <code>no_std</code> friendly</p>",
        "id": 148336470,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543187793
    },
    {
        "content": "<p><a href=\"https://github.com/rust-random/rand/pull/643#issuecomment-439114850\" target=\"_blank\" title=\"https://github.com/rust-random/rand/pull/643#issuecomment-439114850\">https://github.com/rust-random/rand/pull/643#issuecomment-439114850</a></p>",
        "id": 148336524,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543187894
    },
    {
        "content": "<p>something like <code>let buffer: [u8; 32] = mem::secure_randomized()</code> or thereabouts might be interesting</p>",
        "id": 148336528,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543187934
    },
    {
        "content": "<p>possibly with an argument for whether or not to use a blocking or non-blocking CSRNG</p>",
        "id": 148336533,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543187967
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132721\">@Tony Arcieri</span> Could you please link to the code that uses `debug_assert_eq!</p>",
        "id": 148340296,
        "sender_full_name": "briansmith",
        "timestamp": 1543195619
    },
    {
        "content": "<p>In particular, I am very curious about whether putting `debug_assert_eq!</p>",
        "id": 148340304,
        "sender_full_name": "briansmith",
        "timestamp": 1543195630
    },
    {
        "content": "<p>is effectively equivalent to MSVC's <code>__assume()</code> in release builds, which would be insane!</p>",
        "id": 148340311,
        "sender_full_name": "briansmith",
        "timestamp": 1543195662
    },
    {
        "content": "<p>well you can probably guess, it was the side-effectful function which actually did the work, which in 20/20 hindsight is uhh, well rather embarrassing</p>",
        "id": 148341742,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543198447
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133214\">@briansmith</span> <a href=\"https://github.com/iqlusioninc/crates/pull/126\" target=\"_blank\" title=\"https://github.com/iqlusioninc/crates/pull/126\">https://github.com/iqlusioninc/crates/pull/126</a></p>",
        "id": 148341743,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543198452
    },
    {
        "content": "<p>at least it's an interesting case study, although \"secure rng\" is a red herring at this point</p>",
        "id": 148341747,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543198469
    },
    {
        "content": "<p>my takeaways were, per <span class=\"user-mention\" data-user-id=\"133214\">@briansmith</span>'s suggestion, run tests with <code>--release</code></p>",
        "id": 148341752,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543198497
    },
    {
        "content": "<p>and it would be nice to replace the side effects with something more functional so the <code>Vec</code> in this case is never initialized in a bad (in this case all-zero) state</p>",
        "id": 148341761,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543198528
    },
    {
        "content": "<p>which I think is totally doable so long as I'm making a <code>Vec</code>... I want to try to try to change  the <code>no_std</code> parts of the <code>Encode</code> and <code>Decode</code> traits to operate on iterators rather than slices</p>",
        "id": 148341807,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543198589
    },
    {
        "content": "<p>that way when building a <code>Vec</code> I can just <code>collect()</code> the output, rather than making a <code>Vec</code> of zeroes to begin with</p>",
        "id": 148341815,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543198639
    },
    {
        "content": "<p>although back to the \"secure rng\" topic</p>",
        "id": 148341984,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543198931
    },
    {
        "content": "<p>the same thing would be nice for buffers initialized with random data</p>",
        "id": 148341987,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543198952
    },
    {
        "content": "<p>which is what I was suggesting above with something like <code>mem::secure_randomized()</code></p>",
        "id": 148341988,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543198978
    },
    {
        "content": "<p>as opposed to initializing some buffer full of zeroes and calling <code>fill_bytes(&amp;mut buf)</code> or what have you to mutate full of randomness as a side effect</p>",
        "id": 148341998,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543199041
    },
    {
        "content": "<p>given what just happened, suddenly I'm afraid of side effects</p>",
        "id": 148342138,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543199296
    },
    {
        "content": "<p>the more I think about my <code>Encode</code> and <code>Decode</code> traits, the more I think they can be defined in terms of <code>ExactSizeIterator</code></p>",
        "id": 148342519,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543200089
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132721\">@Tony Arcieri</span> I thought about that as well, and in fact the <code>rand</code> crate does have an API <code>() -&gt; T</code> that returns a T with a random value, for certain types of T.</p>",
        "id": 148345218,
        "sender_full_name": "briansmith",
        "timestamp": 1543205709
    },
    {
        "content": "<p>I remember I never added one because usually the type of the function would have to be <code>&lt;const N&gt;() -&gt; [u8; N]</code> and we don't have that capability in the type system yet.</p>",
        "id": 148345279,
        "sender_full_name": "briansmith",
        "timestamp": 1543205872
    },
    {
        "content": "<p>orly</p>",
        "id": 148371349,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543243556
    },
    {
        "content": "<blockquote>\n<p>There are other warts, such as the \"give me random bytes\" syscall being equivalent to reading from /dev/urandom as opposed to /dev/random, and you need the latter if you want to seed a cryptographically secure RNG in user-space. This is exacerbated by the fact that if your program running in a sandbox with no access to /dev/random, there is no way to get seed-quality entropy</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> I thought current wisdom around urandom vs random was that one should always use urandom to avoid blockking: <a href=\"https://www.2uo.de/myths-about-urandom\" target=\"_blank\" title=\"https://www.2uo.de/myths-about-urandom\">https://www.2uo.de/myths-about-urandom</a></p>",
        "id": 148389566,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1543259043
    },
    {
        "content": "<p><code>/dev/random</code> and <code>/dev/urandom</code> are both kind of awful, lol. <code>getrandom()</code> is a lot nicer</p>",
        "id": 148389819,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543259270
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132721\">@Tony Arcieri</span> because you don't need an fd or the open syscall or does it have some additional security properties?</p>",
        "id": 148389899,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1543259308
    },
    {
        "content": "<p>The former</p>",
        "id": 148389927,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1543259333
    },
    {
        "content": "<p>Check out section 3.5 of this paper: <a href=\"https://www.usenix.org/system/files/conference/hotos15/hotos15-paper-corrigan-gibbs.pdf\" target=\"_blank\" title=\"https://www.usenix.org/system/files/conference/hotos15/hotos15-paper-corrigan-gibbs.pdf\">https://www.usenix.org/system/files/conference/hotos15/hotos15-paper-corrigan-gibbs.pdf</a></p>",
        "id": 148389937,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1543259340
    },
    {
        "content": "<p>\"always use <code>/dev/urandom</code>\" covers most bases. then I see \"but select on <code>/dev/random</code> to ensure it's readable before you access <code>/dev/urandom</code> and so forth\"</p>",
        "id": 148389939,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543259342
    },
    {
        "content": "<p>It's one of my favorites</p>",
        "id": 148389942,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1543259343
    },
    {
        "content": "<p>Oh and also blocking, yeah</p>",
        "id": 148389956,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1543259359
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132723\">@Zach Reizner</span> it both eliminates the need to juggle a file descriptor and provides flags with precise semantics so you don't need to resort to cargo cult incantations</p>",
        "id": 148390057,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543259416
    },
    {
        "content": "<p>Oh, and if an attacker can force a host to use <code>/dev/random</code> many times, they can trigger a DoS to everything else that wants to use <code>/dev/random</code> when the entropy counter goes low.</p>",
        "id": 148390083,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1543259439
    },
    {
        "content": "<p>I've seen that wedge a KDC in practice <span class=\"emoji emoji-1f629\" title=\"weary\">:weary:</span></p>",
        "id": 148390104,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543259461
    },
    {
        "content": "<p>It's worse than a DoS since many utilities which provide randomness just assume that <code>open(\"/dev/urandom\")</code> always succeeds</p>",
        "id": 148390110,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1543259465
    },
    {
        "content": "<p>And when it fails, they end up reading bytes from a bad FD, getting no actual randomness</p>",
        "id": 148390128,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1543259482
    },
    {
        "content": "<p>It's basically as bad as accidentally reading from <code>/dev/zero</code></p>",
        "id": 148390144,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1543259497
    },
    {
        "content": "<p>Wow, that's some pretty bad programming. <span class=\"emoji emoji-2639\" title=\"sad\">:sad:</span></p>",
        "id": 148390147,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1543259502
    },
    {
        "content": "<p>Agreed</p>",
        "id": 148390155,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1543259509
    },
    {
        "content": "<p>But such is the world we live in :/</p>",
        "id": 148390164,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1543259520
    },
    {
        "content": "<p><code>ln -fs /dev/zero /dev/urandom</code> <span class=\"emoji emoji-1f608\" title=\"smiling devil\">:smiling_devil:</span></p>",
        "id": 148390206,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543259526
    },
    {
        "content": "<p>Agreed</p>",
        "id": 148390210,
        "sender_full_name": "Zach Reizner",
        "timestamp": 1543259528
    },
    {
        "content": "<p><code>/dev/random</code>'s bizzare notions of entropy have taken down IRS systems before, leading to at least two <a href=\"http://healthcare.gov\" target=\"_blank\" title=\"http://healthcare.gov\">healthcare.gov</a> outages :-(</p>",
        "id": 148400141,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1543268412
    },
    {
        "content": "<p>Last time I checked /dev/random vs /dev/urandom vs hardware RNG debacle was still debated, with each side having valid points <span class=\"emoji emoji-1f615\" title=\"oh no\">:oh_no:</span></p>",
        "id": 148404777,
        "sender_full_name": "Shnatsel",
        "timestamp": 1543272536
    },
    {
        "content": "<p>The link that <span class=\"user-mention\" data-user-id=\"132723\">@Zach Reizner</span> posted earlier (<a href=\"https://www.2uo.de/myths-about-urandom\" target=\"_blank\" title=\"https://www.2uo.de/myths-about-urandom\">https://www.2uo.de/myths-about-urandom</a>) sums it up pretty nicely. TLDR: Once everything is properly initialized, <code>/dev/urandom</code> is just as secure as <code>/dev/random</code>.</p>",
        "id": 148404980,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1543272740
    },
    {
        "content": "<p>The problem is that, before things are initialized, their behavior is different in confusing and dangerous ways.</p>",
        "id": 148404991,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1543272754
    },
    {
        "content": "<p>Which <code>getrandom</code> addresses. The re-seeding behavior of <code>/dev/random</code> is the pointless part.</p>",
        "id": 148405693,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1543273463
    },
    {
        "content": "<p>Right.</p>",
        "id": 148405877,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1543273655
    },
    {
        "content": "<p>(well, pointless under the assumption that the system is secure; in practice, it's possibly useful as a backstop against attacks that manage to learn some of the internal state of the PRNG)</p>",
        "id": 148405943,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1543273692
    },
    {
        "content": "<p>Err, sorry I shouldn't have said re-seeding. Both urandom and random reseed, it's the blocking on \"low entropy\" that's nonsense.</p>",
        "id": 148406151,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1543273938
    },
    {
        "content": "<p>Ah, right. The idea that, once properly initialized, you can dip below the entropy threshold <em>and detect this with code</em> is unfounded.</p>",
        "id": 148406293,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1543274126
    },
    {
        "content": "<p>The entire point of a backstop against insufficient entropy is that we have no formal characterization of how that might happen, which is why we believe these systems to be theoretically sound in the first place.</p>",
        "id": 148406299,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1543274155
    },
    {
        "content": "<p>My favorite problem with /dev/urandom and /dev/random was in some code that closed all open file descriptors manually at a certain point during startup (looped from fd 0 until it got EBADFD from close()), not expecting any libraries to have opened files. Then it opened another file that reused that file descriptor, and the PRNG started reading from that file and nobody noticed for a LONG time.</p>",
        "id": 148407190,
        "sender_full_name": "briansmith",
        "timestamp": 1543275213
    },
    {
        "content": "<p>Oh wow that's juicy.</p>",
        "id": 148407248,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1543275295
    },
    {
        "content": "<p>Python <code>fstat</code>s the file descriptor and checks that <code>(ino, dev)</code> hasn't changed because of this garbage.</p>",
        "id": 148407268,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1543275338
    },
    {
        "content": "<p>What a beautiful hack. How sad that that's necessary.</p>",
        "id": 148407273,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1543275358
    },
    {
        "content": "<p>Alex, I'm always impressed with how the Python stuff adds these kinds of workarounds. I myself would love to turn off the fallback to /dev/urandom in my code to avoid the situation completely.</p>",
        "id": 148407344,
        "sender_full_name": "briansmith",
        "timestamp": 1543275439
    },
    {
        "content": "<p>I presume that once the last version of Linux w/o the syscall isn't supported by Python, that'll be a viable option?</p>",
        "id": 148407513,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1543275629
    },
    {
        "content": "<p>I want to kill non-<code>getrandom</code> paths for pyca/cryptography. I should look at the metrics and figure out how impossible that is.</p>",
        "id": 148407543,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1543275688
    },
    {
        "content": "<p>just use RDRAND [img:trollface]</p>",
        "id": 148740704,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543436870
    },
    {
        "content": "<p>(literally what I'm doing in SGX, but in for a penny, in for a pound there)</p>",
        "id": 148740746,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543436886
    },
    {
        "content": "<p>Oh I think I spot your problem:</p>",
        "id": 148740755,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1543436902
    },
    {
        "content": "<p>You're using SGX.</p>",
        "id": 148740759,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1543436904
    },
    {
        "content": "<p>kinda the way I feel about, you know, the CPU in general, but using RDRAND from regular ol' Linux userspace is bad for virtue signaling</p>",
        "id": 148740761,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543436908
    },
    {
        "content": "<p>haha</p>",
        "id": 148740763,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543436913
    },
    {
        "content": "<p>at least I'm using SGX to talk to HSMs</p>",
        "id": 148740767,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1543436918
    },
    {
        "content": "<p>fair</p>",
        "id": 148740772,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1543436929
    },
    {
        "content": "<p>is anyone interested in working on an RFC for stabilizing an \"OS rng\" lang item and associated <code>std</code>/<code>core</code> API? <a href=\"https://github.com/rust-random/rand/issues/648\" target=\"_blank\" title=\"https://github.com/rust-random/rand/issues/648\">https://github.com/rust-random/rand/issues/648</a></p>",
        "id": 151539427,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1544634550
    },
    {
        "content": "<p>Hmm, why a lang item vs. just an in-tree implementation?</p>",
        "id": 151566611,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1544651714
    },
    {
        "content": "<p>Can you summarize the (long) discussion on that issue? Was the consensus that we should move to <code>std</code>/<code>core</code>?</p>",
        "id": 151567323,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1544652424
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130046\">@Alex Gaynor</span> so if you're on an RTOS or doing bare metal programming on an embedded device, you can leverage the available platform RNG</p>",
        "id": 151567834,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1544652990
    },
    {
        "content": "<p>Why does that require it to be a lang item?</p>",
        "id": 151567849,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1544653022
    },
    {
        "content": "<p>or when I was doing, say, Thales CodeSafe, talk to the SEE/TEE/TPM via their proprietary messaging protocol (wrapped up in SEElib) and get random numbers that way</p>",
        "id": 151567856,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1544653035
    },
    {
        "content": "<p>Hmm, so that'd be applicable to a <code>core</code> solution. I think my (weakly held!) opinion is that we ought to start with a simple <code>std</code> API for tier-1 platforms.</p>",
        "id": 151567860,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1544653045
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132362\">@Joshua Liebow-Feeser</span> well first, because the platform abstraction is already in-tree</p>",
        "id": 151567864,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1544653051
    },
    {
        "content": "<p>and there is no mechanism by which you can provide an alternative implementation in an embedded context</p>",
        "id": 151567873,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1544653067
    },
    {
        "content": "<p>Yeah, I agree with Alex. There's enough complexity to get right even for that.</p>",
        "id": 151567886,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1544653079
    },
    {
        "content": "<p>even if it's, say, Thales providing a more-or-less <code>getrandom()</code>-style API</p>",
        "id": 151567888,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1544653080
    },
    {
        "content": "<p>E.g., what's the blocking semantics? On Linux, what do we do if getrandom isn't available? What do we do if a call fails? What do we do if getrandom isn't available and /dev/urandom can't be opened because we're out of FDs? etc.</p>",
        "id": 151567954,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1544653124
    },
    {
        "content": "<p><code>getrandom()</code> is parameterized around the blocking semantics</p>",
        "id": 151567965,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1544653139
    },
    {
        "content": "<p>I know; I'm just saying that we have to nail all of those details down</p>",
        "id": 151567979,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1544653158
    },
    {
        "content": "<p>if it doesn't exist, you need to \"polyfill\"</p>",
        "id": 151567988,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1544653170
    },
    {
        "content": "<p>which is possible with <code>/dev/random</code> and <code>/dev/urandom</code> on Linux</p>",
        "id": 151567994,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1544653182
    },
    {
        "content": "<p>My ideal API is one which a) blocks completely and, b) aborts the process if there's ever an error.</p>",
        "id": 151567996,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1544653185
    },
    {
        "content": "<p>in a somewhat hackish manner</p>",
        "id": 151567998,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1544653186
    },
    {
        "content": "<p>I know. I'm just saying that it's complex enough that it's probably worth its own RFC. We have to do the same thing on all of the tier-1 platforms.</p>",
        "id": 151568055,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1544653209
    },
    {
        "content": "<p>select-for-read on <code>/dev/random</code> will block until the kernel entropy pool has been seeded (I think)</p>",
        "id": 151568060,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1544653213
    },
    {
        "content": "<blockquote>\n<p>select-for-read on <code>/dev/random</code> will block until the kernel entropy pool has been seeded (I think)</p>\n</blockquote>\n<p>I believe that's correct, although I'd need to double-check.</p>",
        "id": 151568078,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1544653238
    },
    {
        "content": "<p>there's a couple things going on here</p>",
        "id": 151568087,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1544653245
    },
    {
        "content": "<p>one is a stable <code>std</code> or <code>core</code> API</p>",
        "id": 151568093,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1544653251
    },
    {
        "content": "<p>another is a lang item</p>",
        "id": 151568097,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1544653254
    },
    {
        "content": "<p>I'd like both</p>",
        "id": 151568103,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1544653258
    },
    {
        "content": "<p>I agree. However, I think Alex's point is that we can do the former first and then add a lang item later.</p>",
        "id": 151568115,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1544653273
    },
    {
        "content": "<p>but I'd be interested in working on either</p>",
        "id": 151568116,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1544653273
    },
    {
        "content": "<p><a href=\"https://github.com/dhardy/rfcs/blob/system-random/text/0000-system-random.md\" target=\"_blank\" title=\"https://github.com/dhardy/rfcs/blob/system-random/text/0000-system-random.md\">https://github.com/dhardy/rfcs/blob/system-random/text/0000-system-random.md</a></p>",
        "id": 152333064,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1545401809
    },
    {
        "content": "<p>Has this been turned into a PR on the RFCs repo yet?</p>",
        "id": 157073384,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1548726153
    },
    {
        "content": "<p>I don't think so... this is the last update on it I see <a href=\"https://github.com/rust-random/rand/issues/648#issuecomment-451286240\" target=\"_blank\" title=\"https://github.com/rust-random/rand/issues/648#issuecomment-451286240\">https://github.com/rust-random/rand/issues/648#issuecomment-451286240</a></p>",
        "id": 157073795,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1548726748
    },
    {
        "content": "<p>mmmmk</p>",
        "id": 157073799,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1548726758
    },
    {
        "content": "<p>ThreadRng is considered, by documentation,  a safe CSPRNG, however I've always been wary of user-space RNGs (and my understanding is that threadrng is user-space). is it actually safe to use or it's preferable/better/mandatory to use OsRng ?</p>",
        "id": 157233180,
        "sender_full_name": "Gerardo Di Giacomo",
        "timestamp": 1548891475
    },
    {
        "content": "<p>I share these opinions. There is work on a <code>getranndom</code> crate which does what I consider the right thing, which is \"get randomness from the platform\" (i.e. kernel) <a href=\"https://github.com/rust-random/getrandom\" target=\"_blank\" title=\"https://github.com/rust-random/getrandom\">https://github.com/rust-random/getrandom</a></p>",
        "id": 157235314,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1548893836
    },
    {
        "content": "<p>whenever they release it I will switch over (from <code>rand_os</code>)</p>",
        "id": 157235326,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1548893865
    },
    {
        "content": "<p>my main concern has been <code>JitterRng</code></p>",
        "id": 157235328,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1548893874
    },
    {
        "content": "<p>which... ugh</p>",
        "id": 157235333,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1548893879
    },
    {
        "content": "<p>maybe a year ago I suggested Randen</p>",
        "id": 157235395,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1548893931
    },
    {
        "content": "<p>and was told \"it's too new to trust!\" sure fine</p>",
        "id": 157235406,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1548893943
    },
    {
        "content": "<p>but then all of my stuff started breaking because of <code>rand</code> crate changes which manifested as <code>JitterRng</code> breakages</p>",
        "id": 157235453,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1548893976
    },
    {
        "content": "<p>and I'm like \"what the hell is this\"</p>",
        "id": 157235456,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1548893985
    },
    {
        "content": "<p>I spent a few days learning about it and saw it was a Havaged-alike \"CryptoRng\" which creates \"secure randomnness\" by doing a bunch of ad hoc branching on attacker-influenceable values</p>",
        "id": 157235536,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1548894051
    },
    {
        "content": "<p>and then I started reading papers and concluded that entire approach as no basis in cryptography research</p>",
        "id": 157235548,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1548894076
    },
    {
        "content": "<p>people call it \"TRNG\" but that's... not what TRNG means</p>",
        "id": 157235555,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1548894094
    },
    {
        "content": "<p>TRNGs are hardware devices</p>",
        "id": 157235557,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1548894098
    },
    {
        "content": "<p>so anyway tl;dr: Randen is a much better candidate for a <code>CryptoRng</code> than <code>JitterRng</code></p>",
        "id": 157235624,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1548894156
    },
    {
        "content": "<p>Randen has official Rust bindings too, wow. <br>\nThe dependency on hardware-accelerated AES for performance is not great though. Not all x86_64 CPUs have it, which means it cannot be used as a default without runtime RNG selection, and you need some kind of fallback anyway.</p>",
        "id": 157272177,
        "sender_full_name": "Shnatsel",
        "timestamp": 1548942188
    },
    {
        "content": "<p>yes the joys of AES-NI detection and fallback</p>",
        "id": 157294578,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1548960337
    },
    {
        "content": "<blockquote>\n<p>so anyway tl;dr: Randen is a much better candidate for a <code>CryptoRng</code> than <code>JitterRng</code></p>\n</blockquote>\n<p>thanks for the comments. but what about threadrng? :D</p>",
        "id": 157302515,
        "sender_full_name": "Gerardo Di Giacomo",
        "timestamp": 1548965590
    },
    {
        "content": "<p>I've been switching to OsRng</p>",
        "id": 157302546,
        "sender_full_name": "Gerardo Di Giacomo",
        "timestamp": 1548965615
    },
    {
        "content": "<p>but I (security) have to debate with engineering as the documentation says that threadrng is safe to use</p>",
        "id": 157302680,
        "sender_full_name": "Gerardo Di Giacomo",
        "timestamp": 1548965705
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"144034\">@Gerardo Di Giacomo</span> well I think ideally it'd be safe to use, but isn't quite yet, IMO. there's a lot that's in flux right now</p>",
        "id": 157363870,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1549037556
    },
    {
        "content": "<p><a href=\"https://github.com/rust-random/getrandom/issues/21\" target=\"_blank\" title=\"https://github.com/rust-random/getrandom/issues/21\">https://github.com/rust-random/getrandom/issues/21</a></p>",
        "id": 166147408,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1558422075
    }
]