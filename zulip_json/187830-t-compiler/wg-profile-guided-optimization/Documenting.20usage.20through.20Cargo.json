[
    {
        "content": "<p>Nice work on the PGO docs <span class=\"user-mention\" data-user-id=\"124287\">@mw</span>! One thing I was noticing and when testing out locally is that we may want to have more full docs on how to use it with Cargo?</p>",
        "id": 166370490,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1558624645
    },
    {
        "content": "<p>some questions I was left with were:</p>",
        "id": 166370495,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1558624649
    },
    {
        "content": "<p>1. You compile the instrumented binary with <code>-O</code>, right? Like <code>RUSTFLAGS=-Zpgo-gen cargo build --release</code></p>",
        "id": 166370514,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1558624667
    },
    {
        "content": "<p>2. We'll want to recommend that you use <code>--target</code> with <code>pgo-gen</code> because otherwise if you use <code>RUSTFLAGS</code> then everyone's build script will start spewing profiling data everywhere</p>",
        "id": 166370587,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1558624694
    },
    {
        "content": "<p>3. The argument of <code>-Z pgo-gen</code> may want to be documented a bit more? I found that it appeared to be the directory in which all profiling data was placed</p>",
        "id": 166370620,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1558624712
    },
    {
        "content": "<p>4. We probably also want to document smoke-test usage of <code>llvm-profdata</code></p>",
        "id": 166370642,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1558624727
    },
    {
        "content": "<p>5. I think we will want to recommend <code>rustup component add llvm-tools-preview</code> to get the <code>llvm-profdata</code> binary (and how to execute it)</p>",
        "id": 166370667,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1558624745
    },
    {
        "content": "<p>6. What's the use case of multiple <code>*.profraw</code> files? Is the idea that each execution of a binary generates one such file, and then they're all merged into one?</p>",
        "id": 166370697,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1558624781
    },
    {
        "content": "<p>7. We support this on all tier 1 platforms, right? (aka windows/mac/linux)</p>",
        "id": 166370706,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1558624791
    },
    {
        "content": "<p>I also didn't really know how to get confirmation that PGO data was succesfully used, but I was also PGO'ing Cargo itself which is typically I/O bound rather than CPU bound so I wasn't entirely surprised about that</p>",
        "id": 166370816,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1558624843
    },
    {
        "content": "<p>just a minor thing!</p>",
        "id": 166370826,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1558624848
    },
    {
        "content": "<p>so, I was planning on adding documentation to the <a href=\"https://doc.rust-lang.org/stable/rustc/\" target=\"_blank\" title=\"https://doc.rust-lang.org/stable/rustc/\">rustc book</a></p>",
        "id": 166437642,
        "sender_full_name": "mw",
        "timestamp": 1558691379
    },
    {
        "content": "<p>but that's pretty specific to rustc</p>",
        "id": 166437651,
        "sender_full_name": "mw",
        "timestamp": 1558691397
    },
    {
        "content": "<p>I agree that it would make sense to document how to use this with Cargo</p>",
        "id": 166437724,
        "sender_full_name": "mw",
        "timestamp": 1558691418
    },
    {
        "content": "<p>do you have a suggestion on where to put that?</p>",
        "id": 166437737,
        "sender_full_name": "mw",
        "timestamp": 1558691433
    },
    {
        "content": "<p>the <a href=\"https://doc.rust-lang.org/cargo/\" target=\"_blank\" title=\"https://doc.rust-lang.org/cargo/\">cargo book</a> maybe?</p>",
        "id": 166437762,
        "sender_full_name": "mw",
        "timestamp": 1558691462
    },
    {
        "content": "<blockquote>\n<p>6. What's the use case of multiple <code>*.profraw</code> files? Is the idea that each execution of a binary generates one such file, and then they're all merged into one?</p>\n</blockquote>\n<p>Each binary and each shared library create their own <code>.profraw</code> file, so you might get multiple <code>profraw</code> files from a single program invocation.</p>",
        "id": 166438088,
        "sender_full_name": "mw",
        "timestamp": 1558691794
    },
    {
        "content": "<p>otoh, if I understand things correctly, multiple invocations of the same program will keep updating the same <code>profraw</code> files.</p>",
        "id": 166438127,
        "sender_full_name": "mw",
        "timestamp": 1558691851
    },
    {
        "content": "<blockquote>\n<p>2. We'll want to recommend that you use <code>--target</code> with <code>pgo-gen</code> because otherwise if you use <code>RUSTFLAGS</code> then everyone's build script will start spewing profiling data everywhere</p>\n</blockquote>\n<p>Can you tell me more about that? How does this work exactly?</p>",
        "id": 166438451,
        "sender_full_name": "mw",
        "timestamp": 1558692136
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> this is something I also just come across with <code>-Zself-profile</code> where I also don't want the flag to be added for build scripts.</p>",
        "id": 166458958,
        "sender_full_name": "mw",
        "timestamp": 1558708892
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span> eh I don't mind too much where this goes, I just figure it should go somewhere :)</p>",
        "id": 166459634,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1558709377
    },
    {
        "content": "<p>so this is where Cargo is a bit wonky</p>",
        "id": 166459640,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1558709385
    },
    {
        "content": "<p>but if you pass <code>--target $YOUR_HOST</code> it's actually different than not passing <code>--target</code></p>",
        "id": 166459661,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1558709402
    },
    {
        "content": "<p>even though it produces the same binary</p>",
        "id": 166459714,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1558709409
    },
    {
        "content": "<p>it triggers effectively cross compilation logic in Cargo</p>",
        "id": 166459720,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1558709415
    },
    {
        "content": "<p>so <code>RUSTFLAGS</code> is only passed to the target, not the target + host</p>",
        "id": 166459734,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1558709425
    },
    {
        "content": "<p>I wanna write \"makes sense\", but ... <code>:P</code></p>",
        "id": 166460193,
        "sender_full_name": "mw",
        "timestamp": 1558709765
    },
    {
        "content": "<p>a very interesting piece of information though</p>",
        "id": 166460210,
        "sender_full_name": "mw",
        "timestamp": 1558709782
    },
    {
        "content": "<p>I did not know that</p>",
        "id": 166460220,
        "sender_full_name": "mw",
        "timestamp": 1558709789
    },
    {
        "content": "<p>rest assured you're not the only person who's been tripped up by it</p>",
        "id": 166460643,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1558710079
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> <code>rustup component add llvm-tools-preview</code> seems to install <code>llvm-profdata</code> in a kind of obscure path. For example <code>~/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/bin</code>.</p>",
        "id": 166646396,
        "sender_full_name": "mw",
        "timestamp": 1558971466
    },
    {
        "content": "<p>Is there a way to call the tool ergonomically?</p>",
        "id": 166646405,
        "sender_full_name": "mw",
        "timestamp": 1558971480
    },
    {
        "content": "<p><code>rustup which</code> does not seem to work</p>",
        "id": 166646461,
        "sender_full_name": "mw",
        "timestamp": 1558971501
    },
    {
        "content": "<p><code>rustup run nightly llvm-profdata</code> seems work</p>",
        "id": 166646511,
        "sender_full_name": "mw",
        "timestamp": 1558971551
    },
    {
        "content": "<p>would be great if <code>rustup run</code> could just the default toolchain for a given path</p>",
        "id": 166646610,
        "sender_full_name": "mw",
        "timestamp": 1558971627
    },
    {
        "content": "<p>oh, it does <em>not</em> work. It calls whatever is on <code>PATH</code></p>",
        "id": 166646723,
        "sender_full_name": "mw",
        "timestamp": 1558971726
    },
    {
        "content": "<p>Yeah we've never really \"stabilized\" this in one form or another</p>",
        "id": 166715544,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1559049599
    },
    {
        "content": "<p>currently the tools were added mostly for the embedded WG where the idea is that there's otherwise existing tooling which reaches into the sysroot to use these executables</p>",
        "id": 166715628,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1559049621
    },
    {
        "content": "<p>we have historically not wanted to commit to the stability of their location or availability</p>",
        "id": 166715654,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1559049637
    },
    {
        "content": "<p>in that sense it's intentional that they're not the easiest to use, but that's sort of the same for PGO in that it's not really the easiest to use so it may just want to be documented where to find them</p>",
        "id": 166715693,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1559049662
    },
    {
        "content": "<p>OK</p>",
        "id": 166715889,
        "sender_full_name": "mw",
        "timestamp": 1559049769
    },
    {
        "content": "<p>I also found out that all versions of <code>llvm-profdata</code> since LLVM 3.9 seem to work just fine what rustc is currently producing</p>",
        "id": 166715941,
        "sender_full_name": "mw",
        "timestamp": 1559049805
    },
    {
        "content": "<p>so I'm just going to recommend using <code>llvm-profdata</code> from \"a recent LLVM installation\" as a fallback</p>",
        "id": 166716077,
        "sender_full_name": "mw",
        "timestamp": 1559049861
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span> sounds good, it sounds like they've probably put effort into stabilizing it themselves maybe?</p>",
        "id": 166720814,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1559052799
    },
    {
        "content": "<p>maybe. At least I think they are trying to only change it with good reason</p>",
        "id": 166721114,
        "sender_full_name": "mw",
        "timestamp": 1559052982
    }
]