[
    {
        "content": "<p>Hi Rustaceans! After lurking years, I finally got my hands on three small projects, in Rust:</p>\n<ol>\n<li><a href=\"https://gist.github.com/gsurrel/67c7a24b0b86b45a951b52e772ac0f8c\" target=\"_blank\" title=\"https://gist.github.com/gsurrel/67c7a24b0b86b45a951b52e772ac0f8c\">Generate objects according to a probability map for a 20 y.o. game</a></li>\n<li><a href=\"https://gist.github.com/gsurrel/d3b3903260c619814969b9799642a129\" target=\"_blank\" title=\"https://gist.github.com/gsurrel/d3b3903260c619814969b9799642a129\">Draw an SVG image to replicate a measurement sheet for barometric readings</a></li>\n<li><a href=\"https://gist.github.com/gsurrel/77fbd67d9978e3085bd3b6c2d6b9435b\" target=\"_blank\" title=\"https://gist.github.com/gsurrel/77fbd67d9978e3085bd3b6c2d6b9435b\">The biggest one, where I listen <code>dmesg</code> for a newly connected Android device, wait until it's detected by <code>adb</code>, and updates the status when disconnected</a>. It's not finished, but the structure is here. </li>\n</ol>\n<p>I was wondering if you would have advice on making the code more idiomatic, even though both are very small. No need for a full review, though <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 190158462,
        "sender_full_name": "gsurrel",
        "timestamp": 1583835893
    },
    {
        "content": "<p>For 2: you could use <code>&amp;[\"...\"] as &amp;[&amp;str]</code> at <a href=\"https://gist.github.com/gsurrel/d3b3903260c619814969b9799642a129#file-barometer-rs-L27\" target=\"_blank\" title=\"https://gist.github.com/gsurrel/d3b3903260c619814969b9799642a129#file-barometer-rs-L27\">https://gist.github.com/gsurrel/d3b3903260c619814969b9799642a129#file-barometer-rs-L27</a> to avoid an allocation</p>",
        "id": 190158874,
        "sender_full_name": "bjorn3",
        "timestamp": 1583836264
    },
    {
        "content": "<p>For 3: enum variants are normally named CamelCase, not UPPER_SNAKE_CASE.</p>",
        "id": 190158999,
        "sender_full_name": "bjorn3",
        "timestamp": 1583836373
    },
    {
        "content": "<p>For 3: you can read a file using <code>std::fs::read_to_string</code></p>",
        "id": 190159112,
        "sender_full_name": "bjorn3",
        "timestamp": 1583836497
    },
    {
        "content": "<p>Other than that it looks pretty good! You may want to use rustfmt (cargo fmt) and clippy (cargo clippy) though. Rustfmt is a code formatter, while clippy is a code linter.</p>",
        "id": 190159381,
        "sender_full_name": "bjorn3",
        "timestamp": 1583836747
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/122653-zulip/topic/Code.20tips.20and.20review/near/190158999\" title=\"#narrow/stream/122653-zulip/topic/Code.20tips.20and.20review/near/190158999\">said</a>:</p>\n<blockquote>\n<p>For 3: enum variants are normally named CamelCase, not UPPER_SNAKE_CASE.</p>\n</blockquote>\n<p>Oh, I thought the compiler would yell at me for that in the same way it yells for CamelCase crate or variables names :)<br>\nThanks!</p>\n<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/122653-zulip/topic/Code.20tips.20and.20review/near/190159112\" title=\"#narrow/stream/122653-zulip/topic/Code.20tips.20and.20review/near/190159112\">said</a>:</p>\n<blockquote>\n<p>For 3: you can read a file using <code>std::fs::read_to_string</code></p>\n</blockquote>\n<p>I'll investigate that right now. I built it using the <a href=\"https://rust-lang-nursery.github.io/rust-cookbook/os/external.html#continuously-process-child-process-outputs\" target=\"_blank\" title=\"https://rust-lang-nursery.github.io/rust-cookbook/os/external.html#continuously-process-child-process-outputs\">Rust Cookbook</a>, maybe that's why I built it that way. However, it doesn't apply to my reading of the uptime, where I followed <a href=\"https://rust-lang-nursery.github.io/rust-cookbook/file/read-write.html#read-lines-of-strings-from-a-file\" target=\"_blank\" title=\"https://rust-lang-nursery.github.io/rust-cookbook/file/read-write.html#read-lines-of-strings-from-a-file\">this other reciepe</a>.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/122653-zulip/topic/Code.20tips.20and.20review/near/190159381\" title=\"#narrow/stream/122653-zulip/topic/Code.20tips.20and.20review/near/190159381\">said</a>:</p>\n<blockquote>\n<p>Other than that it looks pretty good! You may want to use rustfmt (cargo fmt) and clippy (cargo clippy) though. Rustfmt is a code formatter, while clippy is a code linter.</p>\n</blockquote>\n<p>I know their existence, I've to check how to install them and integrate them into IntelliJ IDEA (I chose this IDE as I'm very used to Android dev., and I like not to learn again shortcuts!)</p>",
        "id": 190160583,
        "sender_full_name": "gsurrel",
        "timestamp": 1583837974
    },
    {
        "content": "<p>Thanks for the tips!</p>",
        "id": 190160589,
        "sender_full_name": "gsurrel",
        "timestamp": 1583837981
    }
]