[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"228912\">@James Munns</span>, <span class=\"user-mention\" data-user-id=\"263083\">@Daniel Egger</span>  (cc <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span>), we've been discussing on the lang team some of what our top priority items ought to be (esp. around the upcoming deadline for Rust 2021 breakage) and I feel like it'd be useful to get the perspective of some folks from embedded. Embedded showed up as a pretty prominent target domain in the Rust Survey, and I'm curious to what extent you have a \"wish list\" of features there.</p>",
        "id": 195446651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588007016
    },
    {
        "content": "<p>I'll add it to the agenda for our next meeting on Tuesday!</p>",
        "id": 195447054,
        "sender_full_name": "James Munns",
        "timestamp": 1588007196
    },
    {
        "content": "<p>But I know Const Generics is going to be pretty high on the list :)</p>",
        "id": 195447089,
        "sender_full_name": "James Munns",
        "timestamp": 1588007216
    },
    {
        "content": "<p>Especially in a heap-less use case, we often have users who need to provide variably sized backing buffers (static or otherwise) for things like queues. generic-array is widely used, at the moment.</p>\n<p>The other one that will come up (my guess) is formatting handling.</p>",
        "id": 195447294,
        "sender_full_name": "James Munns",
        "timestamp": 1588007305
    },
    {
        "content": "<p>Particularly, being able to swap out less dynamic formatters, or disable formatting on panic entirely, is a pretty big ask. Accidentally pulling in a panic handler can take a firmware image from 2K to 16K really fast, and that's a problem if you only have 16K or 32K (or 2K) of space.</p>",
        "id": 195447401,
        "sender_full_name": "James Munns",
        "timestamp": 1588007363
    },
    {
        "content": "<p>Inline ASM is another big one, but I know that's underway</p>",
        "id": 195447462,
        "sender_full_name": "James Munns",
        "timestamp": 1588007396
    },
    {
        "content": "<p>If anyone from the lang team is able to attend, our meeting is tomorrow at 20:00 CEST on matrix, details are here: <a href=\"https://github.com/rust-embedded/wg/issues/447\" title=\"https://github.com/rust-embedded/wg/issues/447\">https://github.com/rust-embedded/wg/issues/447</a></p>",
        "id": 195447577,
        "sender_full_name": "James Munns",
        "timestamp": 1588007450
    },
    {
        "content": "<p>We have some old wish lists, but we're actually getting a bit sore at maintaining them, because they stay open for a very long time (or are a lot of issues to juggle), and we have little upward pressure to exert. I can link to the old lists later.</p>",
        "id": 195447684,
        "sender_full_name": "James Munns",
        "timestamp": 1588007517
    },
    {
        "content": "<p>Given that dynamic format strings are never allowed (unlike C where you can override warnings and pass a dynamic format string to <code>printf</code>-like functions), I'm wondering how hard it would be to teach Rust to leave out all formatting machinery that doesn't get called.</p>",
        "id": 195448025,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588007676
    },
    {
        "content": "<p>Yeah, the issue today is that:</p>\n<ul>\n<li><code>panic()</code> can invoke a lot of formatting code</li>\n<li>it also seems that once ANY formatting code is invoked, LTO cannot consistently strip unused formatting</li>\n</ul>",
        "id": 195448496,
        "sender_full_name": "James Munns",
        "timestamp": 1588007891
    },
    {
        "content": "<p>it's not clear to me what the cost would be if we could accurately \"pay for what we use\".</p>",
        "id": 195448525,
        "sender_full_name": "James Munns",
        "timestamp": 1588007910
    },
    {
        "content": "<p>I have... <a href=\"https://jamesmunns.com/blog/fmt-unreasonably-expensive/\" title=\"https://jamesmunns.com/blog/fmt-unreasonably-expensive/\">thoughts</a> on the best steps forwards. but that's a personal axe to grind of mine.</p>",
        "id": 195448571,
        "sender_full_name": "James Munns",
        "timestamp": 1588007934
    },
    {
        "content": "<p>Another one is stability guarantees around MMIO interactions, e.g. making sure there aren't spurious reads of things. Though that's another separate conversation.</p>",
        "id": 195448683,
        "sender_full_name": "James Munns",
        "timestamp": 1588007995
    },
    {
        "content": "<p>I do think \"pay for what we use\" would help a great deal. If you <em>only</em> had the code to, say, format integers as hex, that's going to be a lot less than 16-32k.</p>",
        "id": 195448693,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588008000
    },
    {
        "content": "<p>It would be good to see! the post I linked has an <a href=\"https://github.com/jamesmunns/tiny-nrf52/\" title=\"https://github.com/jamesmunns/tiny-nrf52/\">associated repository</a>, you likely could look at cargo-bloat/<code>size</code> to see exactly how large each formatter actually is.</p>",
        "id": 195448868,
        "sender_full_name": "James Munns",
        "timestamp": 1588008075
    },
    {
        "content": "<p>Adding a single panic was a +14K diff to the total binary size, but that's not \"pay what you use\".</p>",
        "id": 195448934,
        "sender_full_name": "James Munns",
        "timestamp": 1588008120
    },
    {
        "content": "<p>Total cargo bloat report for the initial state of the repo: <a href=\"https://github.com/jamesmunns/tiny-nrf52/commit/04586a1620ed6a546ff6195aaf7d74e5c0b8e9bd#diff-191136ab3b249e2748060f86c435e260\" title=\"https://github.com/jamesmunns/tiny-nrf52/commit/04586a1620ed6a546ff6195aaf7d74e5c0b8e9bd#diff-191136ab3b249e2748060f86c435e260\">https://github.com/jamesmunns/tiny-nrf52/commit/04586a1620ed6a546ff6195aaf7d74e5c0b8e9bd#diff-191136ab3b249e2748060f86c435e260</a></p>",
        "id": 195449060,
        "sender_full_name": "James Munns",
        "timestamp": 1588008166
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>File  .text   Size            Crate Name\n0.2%   9.7%   812B              std &lt;char as core::fmt::Debug&gt;::fmt\n0.2%   9.4%   790B              std core::str::slice_error_fail\n0.2%   8.7%   728B              std core::fmt::Formatter::pad\n0.2%   7.6%   634B        [Unknown] main\n0.1%   6.6%   550B              std core::fmt::Formatter::pad_integral\n0.1%   6.3%   530B              std core::fmt::write\n0.1%   5.9%   490B              std core::slice::memchr::memchr\n0.1%   4.3%   360B nrf52_hal_common &lt;nrf52_hal_common::uarte::Error as core::fmt::Debug...\n0.1%   4.3%   360B              std core::fmt::num::&lt;impl core::fmt::Debug for usize&gt;::fmt\n</pre></div>",
        "id": 195449140,
        "sender_full_name": "James Munns",
        "timestamp": 1588008212
    },
    {
        "content": "<p><code>nrf52_hal_common::uarte::Error</code> is a valueless enum, for example</p>",
        "id": 195449163,
        "sender_full_name": "James Munns",
        "timestamp": 1588008233
    },
    {
        "content": "<p>considering <code>main</code> is nearly the whole program here, you get an idea of the relative sizes of formatting. As a note, this is before the changes to shrink unicode tables, though those constants are not shown in cargo bloat. (the 14K is 8K of .text and 6K of .rodata)</p>",
        "id": 195449402,
        "sender_full_name": "James Munns",
        "timestamp": 1588008342
    },
    {
        "content": "<p>But, I'm picking on one specific topic.</p>",
        "id": 195449480,
        "sender_full_name": "James Munns",
        "timestamp": 1588008370
    },
    {
        "content": "<p>I think you'll get very few hard blockers, a handful of reasonably complex items that would be QoL improvements (formatting, const generics, inline asm), and a bunch of \"deep cuts\" that are very specific requests.</p>",
        "id": 195449567,
        "sender_full_name": "James Munns",
        "timestamp": 1588008415
    },
    {
        "content": "<p>Gotta run for now, thanks for reaching out <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>!</p>",
        "id": 195449792,
        "sender_full_name": "James Munns",
        "timestamp": 1588008502
    },
    {
        "content": "<p>That's really interesting, it's particularly useful to me to see the link to const generics, it'd be great to have a bit more details of the exact use cases (though I see you cited a few)</p>",
        "id": 195452035,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588009499
    },
    {
        "content": "<p>panic etc doesn't necessarily feel like a <em>lang</em> task but good to know it's such a footgun</p>",
        "id": 195452063,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588009514
    },
    {
        "content": "<p>I remember hearing about it but I don't know that I'd have expected it to make the list</p>",
        "id": 195452095,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588009534
    },
    {
        "content": "<p>Yeah, it would probably be good to clarify we are looking for a <em>lang</em> wishlist, rather than a <em>compiler</em> wishlist. If you have any other good examples of the kind of things you would like to see, that would probably be helpful for us to steer the conversation.</p>\n<p>Also, reminder, the meeting is in about 1 hour (CC <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span>)</p>",
        "id": 195595281,
        "sender_full_name": "James Munns",
        "timestamp": 1588093524
    },
    {
        "content": "<p>I unfortunately have a conflict at that time. :(</p>",
        "id": 195610182,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588100154
    },
    {
        "content": "<p>But I'd love to hear about the results, if you have minutes you can link to here.</p>",
        "id": 195610249,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588100170
    },
    {
        "content": "<p>Will do, I'll post the chat log shortly, and I'll write up a TLDR topic list. We brainstormed today, no prioritization yet.</p>",
        "id": 195610312,
        "sender_full_name": "James Munns",
        "timestamp": 1588100229
    },
    {
        "content": "<p><a href=\"https://github.com/rust-embedded/wg/blob/master/minutes/2020-04-28.md#embedded-lang-item-wish-list\" title=\"https://github.com/rust-embedded/wg/blob/master/minutes/2020-04-28.md#embedded-lang-item-wish-list\">https://github.com/rust-embedded/wg/blob/master/minutes/2020-04-28.md#embedded-lang-item-wish-list</a> ^</p>",
        "id": 195615007,
        "sender_full_name": "James Munns",
        "timestamp": 1588102625
    },
    {
        "content": "<p>Theres also a link to the whole chat log there, if you'd like additional context.</p>",
        "id": 195617711,
        "sender_full_name": "James Munns",
        "timestamp": 1588103850
    },
    {
        "content": "<p>Lemme know if you have any questions by what we mean by any of the items. I hope that helps!</p>",
        "id": 195625140,
        "sender_full_name": "James Munns",
        "timestamp": 1588107092
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 195753523,
        "sender_full_name": "BatmanAoD (Kyle Strand)",
        "timestamp": 1588186188
    }
]