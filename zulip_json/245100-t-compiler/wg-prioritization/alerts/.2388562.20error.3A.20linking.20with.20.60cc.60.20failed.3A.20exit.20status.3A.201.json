[
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"3111\">@WG-prioritization/alerts</span> issue <a href=\"https://github.com/rust-lang/rust/issues/88562\">#88562</a> has been requested for prioritization.</p>\n<h1><a href=\"https://forge.rust-lang.org/compiler/prioritization/procedure.html#assign-priority-to-unprioritized-issues-with-i-prioritize-label\">Procedure</a></h1>\n<ul>\n<li>Priority?</li>\n<li>Regression?</li>\n<li>Notify people/groups?</li>\n<li>Needs <code>I-nominated</code>?</li>\n</ul>",
        "id": 251591386,
        "sender_full_name": "triagebot",
        "timestamp": 1630514782
    },
    {
        "content": "<p>Wow, this is a really bizarre bug.</p>",
        "id": 251602445,
        "sender_full_name": "Noah Lev",
        "timestamp": 1630519230
    },
    {
        "content": "<p>mmm ... a linking error? I'm even confused on what the expected behaviour should be. Should that compile? The code at a first glance doesn't look incorrect</p>",
        "id": 251604394,
        "sender_full_name": "apiraino",
        "timestamp": 1630520001
    },
    {
        "content": "<p>Yeah, I'm not sure either.</p>",
        "id": 251604474,
        "sender_full_name": "Noah Lev",
        "timestamp": 1630520034
    },
    {
        "content": "<p>But it definitely shouldn't be giving a linking error ;)</p>",
        "id": 251604498,
        "sender_full_name": "Noah Lev",
        "timestamp": 1630520042
    },
    {
        "content": "<p>I think at most it's probably <code>P-medium</code> since it hasn't worked since rustc 1.9.</p>",
        "id": 251604646,
        "sender_full_name": "Noah Lev",
        "timestamp": 1630520084
    },
    {
        "content": "<p>I vote for <code>P-medium</code> since it was an ICE and is now a linking error.</p>",
        "id": 251604720,
        "sender_full_name": "Noah Lev",
        "timestamp": 1630520107
    },
    {
        "content": "<p>And the code is pretty short too.</p>",
        "id": 251604732,
        "sender_full_name": "Noah Lev",
        "timestamp": 1630520112
    },
    {
        "content": "<p>afaict I agree with a P-medium</p>",
        "id": 251605395,
        "sender_full_name": "apiraino",
        "timestamp": 1630520366
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"250987\">apiraino</span> <a href=\"#narrow/stream/245100-t-compiler.2Fwg-prioritization.2Falerts/topic/.2388562.20error.3A.20linking.20with.20.60cc.60.20failed.3A.20exit.20status.3A.201/near/251604394\">said</a>:</p>\n<blockquote>\n<p>mmm ... a linking error? I'm even confused on what the expected behaviour should be. Should that compile? The code at a first glance doesn't look incorrect</p>\n</blockquote>\n<p>If the code seems weird, I’d like to see a better <code>Debug</code> implementation for</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Delegate</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">T</span><span class=\"p\">));</span><span class=\"w\"></span>\n</code></pre></div>\n<p>context: <a href=\"https://users.rust-lang.org/t/impl-of-debug-is-not-general-enough-error/64284\">https://users.rust-lang.org/t/impl-of-debug-is-not-general-enough-error/64284</a></p>\n<p><em>Edit:</em> Ah, I’ve read that as “The code at a first glance <strong>does</strong> look incorrect”. To answer the question: yes it’s supposed to compile.</p>",
        "id": 251605455,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1630520390
    },
    {
        "content": "<p>thanks Frank for jumping in :)</p>\n<p>may I ask if this issue is of big impact for you? I don't have a great context on this, a <code>P-medium</code> might not be enough to have it looked soon</p>",
        "id": 251606080,
        "sender_full_name": "apiraino",
        "timestamp": 1630520635
    },
    {
        "content": "<p>I’m not having any impact from this issue personally; as I explained, this came up in an URLO thread. I haven’t explored yet how it can best be worked around. If we can find a good workaround for providing a functionally equivalent <code>Debug</code> implementation for that <code>struct</code>, I don’t care as much about priority.</p>",
        "id": 251606675,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1630520861
    },
    {
        "content": "<p>Alright… now, I’ve got one: using <code>&amp;(self.0 as fn(&amp;'a T))</code> seems to work.</p>",
        "id": 251606977,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1630520977
    },
    {
        "content": "<p>The same workaround isn’t really applicable to more complex types like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>though.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"n\">foo</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"kp\">&amp;</span><span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fmt</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">fmt</span>::<span class=\"n\">Debug</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">fmt</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">fmt</span>::<span class=\"n\">Formatter</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">std</span>::<span class=\"n\">fmt</span>::<span class=\"nb\">Result</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">debug_tuple</span><span class=\"p\">(</span><span class=\"s\">\"Foo\"</span><span class=\"p\">).</span><span class=\"n\">field</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">).</span><span class=\"n\">finish</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 251608367,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1630521559
    },
    {
        "content": "<p>In any case, <code>P-medium</code> seems fine to me <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 251615103,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1630524436
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"280891\">@Frank Steffahn</span> for the additional context :)</p>",
        "id": 251631046,
        "sender_full_name": "apiraino",
        "timestamp": 1630531056
    },
    {
        "content": "<p>Issue <a href=\"https://github.com/rust-lang/rust/issues/88562\">#88562</a>'s prioritization request has been removed.</p>",
        "id": 251631160,
        "sender_full_name": "triagebot",
        "timestamp": 1630531095
    }
]