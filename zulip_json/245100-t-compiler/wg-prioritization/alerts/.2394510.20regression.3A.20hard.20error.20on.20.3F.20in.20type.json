[
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"3111\">@WG-prioritization/alerts</span> issue <a href=\"https://github.com/rust-lang/rust/issues/94510\">#94510</a> has been requested for prioritization.</p>\n<h1><a href=\"https://forge.rust-lang.org/compiler/prioritization/procedure.html#assign-priority-to-unprioritized-issues-with-i-prioritize-label\">Procedure</a></h1>\n<ul>\n<li>Priority?</li>\n<li>Regression?</li>\n<li>Notify people/groups?</li>\n<li>Needs <code>I-nominated</code>?</li>\n</ul>",
        "id": 273726263,
        "sender_full_name": "triagebot",
        "timestamp": 1646176412
    },
    {
        "content": "<p>The regression happens on one crate, last updated in 2018, which - if I'm reading it correctly - is trying to achieve the same thing that the PR <a href=\"https://github.com/rust-lang/rust/issues/92746\">#92746</a> is trying to achieve (i.e. the <code>?</code> operator to handle <code>Option&lt;T&gt;</code> in a more succint way).</p>\n<p>I'm not sure about this, but I think this is not a big regression, there <code>p-medium</code> (or even p-low?)</p>",
        "id": 273951731,
        "sender_full_name": "apiraino",
        "timestamp": 1646303009
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"250987\">@apiraino</span> not exactly that; the issue is from a quite infamous future-compatibility-wise footgun in macros:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$T</span>:<span class=\"nc\">ty</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"w\"> </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$e</span>:<span class=\"nc\">expr</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"w\"> </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>* In this instance: <a href=\"https://docs.rs/fn_block/0.2.1/src/fn_block/lib.rs.html#199-206\">https://docs.rs/fn_block/0.2.1/src/fn_block/lib.rs.html#199-206</a></p>\n<p>This relies on failure to parse certain tokens as a type prefix to happen early enough for that error to \"backtrack\" into the macro-arm picking phase; this used to be the case with <code>o?.method…</code> kind of expressions. <a href=\"https://github.com/rust-lang/rust/issues/92746\">#92746</a> changed stuff so that <code>o?</code> was interpreted as an incorrect <code>Ty</code> candidate, leading to a hard error before the macro-arm picking phase could \"backtrack\".</p>\n<hr>\n<p>The <code>:ty</code> / <code>:expr</code> branch is a quite common \"sad pattern\" that comes to mind when writing macros, I personally encountered it when wanting to unify <code>const_assert_impls!</code> with a classic <code>assert!</code> predicate:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">assert</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">$T</span>:<span class=\"nc\">ty</span><span class=\"w\"> </span>: <span class=\"cp\">$Trait</span>:<span class=\"nc\">path</span><span class=\"w\"> </span><span class=\"cp\">$(,</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"cm\">/* const-assert the impl */</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"cp\">$predicate</span>:<span class=\"nc\">block</span><span class=\"w\"> </span><span class=\"cp\">$(,</span><span class=\"w\"> </span><span class=\"cp\">$msg</span>:<span class=\"nc\">expr</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"cp\">$(,</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"cm\">/* compile-time assertion of a predicate */</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">$predicate</span>:<span class=\"nc\">expr</span><span class=\"w\"> </span><span class=\"cp\">$(,</span><span class=\"w\"> </span><span class=\"cp\">$msg</span>:<span class=\"nc\">expr</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"cp\">$(,</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"cm\">/* runtime check of a predicate */</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<hr>\n<p>With all that said, I'd lean towards saying it deserves to be above <code>p-low</code>, but it should be taken with a grain of salt since I'm not knowledgeable enough of the priority tiers <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 273969056,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1646312759
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span> wow great comment, more than I could expect :) </p>\n<p>As the PR author <a href=\"https://github.com/rust-lang/rust/issues/94510#issuecomment-1056195334\">suggests</a>, it could be wise to revert the change for the moment and then work out a different patch. I'll assign <code>P-medium</code> as I sense this should not reach stable, but maybe does  not warrant  a P-high red flag</p>",
        "id": 273999772,
        "sender_full_name": "apiraino",
        "timestamp": 1646325447
    },
    {
        "content": "<p>Issue <a href=\"https://github.com/rust-lang/rust/issues/94510\">#94510</a>'s prioritization request has been removed.</p>",
        "id": 274001031,
        "sender_full_name": "triagebot",
        "timestamp": 1646325931
    }
]