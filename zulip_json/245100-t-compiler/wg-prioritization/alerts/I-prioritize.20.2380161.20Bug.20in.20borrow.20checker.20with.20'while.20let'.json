[
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"3111\">@WG-prioritization/alerts</span> issue <a href=\"https://github.com/rust-lang/rust/issues/80161\">#80161</a> has been requested for prioritization.</p>\n<h1><a href=\"https://forge.rust-lang.org/compiler/prioritization/procedure.html#assign-priority-to-unprioritized-issues-with-i-prioritize-label\">Procedure</a></h1>\n<ul>\n<li>Priority?</li>\n<li>Regression?</li>\n<li>Notify people/groups?</li>\n<li>Needs <code>I-nominated</code>?</li>\n</ul>",
        "id": 220432637,
        "sender_full_name": "triagebot",
        "timestamp": 1608328656
    },
    {
        "content": "<p>I'm not certain this is a bug, but it does seem very confusing. Even if it isn't a bug, it seems the errors could be improved.</p>",
        "id": 220432713,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608328690
    },
    {
        "content": "<p>P-medium maybe? I don't think there's any reason to make it p-high or p-low</p>",
        "id": 220445412,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608340009
    },
    {
        "content": "<p>I feel like maybe P-high would be better: the code is pretty simple and I don't see why it shouldn't compile.</p>",
        "id": 220451797,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608349184
    },
    {
        "content": "<p>But also: I'm surprised that others haven't run into this.</p>",
        "id": 220451843,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608349219
    },
    {
        "content": "<blockquote>\n<p><strong>camelid:</strong> Based on testing with Godbolt, it doesn't seem like this code has ever compiled.</p>\n</blockquote>",
        "id": 220451962,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608349466
    },
    {
        "content": "<p>So P-medium is probably best after all.</p>",
        "id": 220451963,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608349477
    },
    {
        "content": "<p>Is this even a bug?</p>",
        "id": 220540245,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608503068
    },
    {
        "content": "<p>It seems like such simple code that it's weird that it could cause a borrowck bug.</p>",
        "id": 220540251,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608503095
    },
    {
        "content": "<p>Aren't the worst bugs the bugs you don't expect? x)</p>",
        "id": 220540310,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1608503175
    },
    {
        "content": "<p>I feel like we need input from someone who knows borrowck well. Maybe <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> knows? :)</p>",
        "id": 220540319,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608503213
    },
    {
        "content": "<p>Could this be related to match guards in some way?</p>",
        "id": 220540388,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1608503306
    },
    {
        "content": "<p><del>How so?</del></p>",
        "id": 220540393,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608503319
    },
    {
        "content": "<p>(deleted - wrong topic)</p>",
        "id": 220540394,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608503323
    },
    {
        "content": "<p>Too many issues to prioritize :)</p>",
        "id": 220540409,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608503364
    },
    {
        "content": "<p>I know match guards have some special quirks</p>",
        "id": 220540508,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1608503510
    },
    {
        "content": "<p>Bingo!</p>",
        "id": 220540583,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608503632
    },
    {
        "content": "<p>Removing the deref works?</p>",
        "id": 220540614,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1608503643
    },
    {
        "content": "<p>About to post...</p>",
        "id": 220540625,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608503655
    },
    {
        "content": "<p>Reposting:</p>\n<p>This is interesting: if you change the loop-and-match code to not use match guards, and instead use <code>if</code>-<code>else</code>, you get the same or a very similar borrow-check error to the <code>while let</code> code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(PartialEq, Eq, Clone, Debug)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">ListNode</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">val</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">next</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">ListNode</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">ListNode</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[inline]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">val</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ListNode</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">next</span>: <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">remove_elements</span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">head</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">ListNode</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">val</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">ListNode</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">current</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">head</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">current</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">break</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"o\">*</span><span class=\"n\">current</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">.</span><span class=\"n\">take</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">current</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">head</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>(<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=2e805118d3a15e14b7324678ea73083d\">Playground</a>)</p>\n<p>Errors:</p>\n<div class=\"codehilite\"><pre><span></span><code>   Compiling playground v0.0.1 (/playground)\nerror[E0503]: cannot use `*current` because it was mutably borrowed\n  --&gt; src/lib.rs:18:13\n   |\n18 |             None =&gt; break,\n   |             ^^^^\n   |             |\n   |             use of borrowed `current.0`\n   |             borrow later used here\n19 |             Some(node) =&gt; {\n   |                  ---- borrow of `current.0` occurs here\n\nerror[E0499]: cannot borrow `current.0` as mutable more than once at a time\n  --&gt; src/lib.rs:19:18\n   |\n19 |             Some(node) =&gt; {\n   |                  ^^^^ mutable borrow starts here in previous iteration of loop\n\nerror[E0506]: cannot assign to `*current` because it is borrowed\n  --&gt; src/lib.rs:21:21\n   |\n19 |             Some(node) =&gt; {\n   |                  ---- borrow of `*current` occurs here\n20 |                 if node.val == val {\n21 |                     *current = node.next.take();\n   |                     ^^^^^^^^\n   |                     |\n   |                     assignment to borrowed `*current` occurs here\n   |                     borrow later used here\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0499, E0503, E0506.\nFor more information about an error, try `rustc --explain E0499`.\nerror: could not compile `playground`\n\nTo learn more, run the command again with --verbose.\n</code></pre></div>\n<p>Still not sure if it's a bug though.</p>",
        "id": 220540658,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608503750
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 220540911,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1608504142
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"255061\">Léo Lanteri Thauvin</span> <a href=\"#narrow/stream/245100-t-compiler.2Fwg-prioritization.2Falerts/topic/I-prioritize.20.2380161.20Bug.20in.20borrow.20checker.20with.20'while.20let'/near/220540508\">said</a>:</p>\n<blockquote>\n<p>I know match guards have some special quirks</p>\n</blockquote>\n<p>Maybe related: <a href=\"https://github.com/rust-lang/rust/blob/c609b2eaf323186a1167ec1a9ffa69a7d4a5b1b9/compiler/rustc_mir_build/src/build/matches/mod.rs#L1570-L1649\">https://github.com/rust-lang/rust/blob/c609b2eaf323186a1167ec1a9ffa69a7d4a5b1b9/compiler/rustc_mir_build/src/build/matches/mod.rs#L1570-L1649</a></p>",
        "id": 220541748,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1608505667
    },
    {
        "content": "<p>Maybe <span class=\"user-mention silent\" data-user-id=\"116118\">Matthew Jasper</span> knows</p>",
        "id": 220541873,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1608505825
    },
    {
        "content": "<p>I think a <code>P-medium</code> if we want to keep on the radar somehow. Doesn't look like a huge problematic code</p>\n<p>(personally I tend to change my code if the borrowchecker is not happy - I often can't tell if the ownership rules are misbehaving or rather it's me. Therefore I assume the latter case...)</p>",
        "id": 220780650,
        "sender_full_name": "apiraino",
        "timestamp": 1608722990
    }
]