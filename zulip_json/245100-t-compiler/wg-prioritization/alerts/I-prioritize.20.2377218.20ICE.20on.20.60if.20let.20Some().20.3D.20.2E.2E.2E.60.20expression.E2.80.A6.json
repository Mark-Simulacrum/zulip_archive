[
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"3111\">@WG-prioritization/alerts</span> issue <a href=\"https://github.com/rust-lang/rust/issues/77218\">#77218</a> has been requested for prioritization.</p>\n<h1><a href=\"https://forge.rust-lang.org/compiler/prioritization/procedure.html#assign-priority-to-unprioritized-issues-with-i-prioritize-label\">Procedure</a></h1>\n<ul>\n<li>Priority?</li>\n<li>Regression?</li>\n<li>Notify people/groups?</li>\n<li>Needs <code>I-nominated</code>?</li>\n</ul>",
        "id": 211359153,
        "sender_full_name": "triagebot",
        "timestamp": 1601125418
    },
    {
        "content": "<p>Looks <code>P-high</code> to me, to me it seems like there could be something serious going wrong here</p>",
        "id": 211359268,
        "sender_full_name": "lcnr",
        "timestamp": 1601125573
    },
    {
        "content": "<p>Agree. It's also a regression from stable to nightly</p>",
        "id": 211359274,
        "sender_full_name": "Stu",
        "timestamp": 1601125589
    },
    {
        "content": "<p>The code shouldn’t compile though, right?</p>",
        "id": 211359647,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1601126225
    },
    {
        "content": "<p>No it shouldn't, since the <code>let</code> is missing.<br>\nIf you compile on stable, it will report a normal error</p>",
        "id": 211359658,
        "sender_full_name": "Stu",
        "timestamp": 1601126259
    },
    {
        "content": "<p>And on nightly there’s no error before the ICE?</p>",
        "id": 211359699,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1601126287
    },
    {
        "content": "<p>no</p>",
        "id": 211359701,
        "sender_full_name": "Stu",
        "timestamp": 1601126297
    },
    {
        "content": "<p>Right</p>",
        "id": 211359703,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1601126306
    },
    {
        "content": "<p>+1 for <code>P-high</code> as a fairly bad diagnostic regression</p>",
        "id": 211359718,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1601126390
    },
    {
        "content": "<p>I wonder if we could minimize the example further</p>",
        "id": 211359760,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1601126404
    },
    {
        "content": "<p>I tried to, but I think it has something to do with the lifetimes because my code failed normally without the lifetimes and structs</p>",
        "id": 211359780,
        "sender_full_name": "Stu",
        "timestamp": 1601126462
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"230287\">Stu</span> <a href=\"#narrow/stream/245100-t-compiler.2Fwg-prioritization.2Falerts/topic/I-prioritize.20.2377218.20ICE.20on.20.60if.20let.20Some().20.3D.20.2E.2E.2E.60.20expression.E2.80.A6/near/211359780\">said</a>:</p>\n<blockquote>\n<p>I tried to, but I think it has something to do with the lifetimes because my code failed normally without the lifetimes and structs</p>\n</blockquote>\n<p>hmm, let me look at this again in this case</p>",
        "id": 211359795,
        "sender_full_name": "lcnr",
        "timestamp": 1601126504
    },
    {
        "content": "<p>Sounds plausible</p>",
        "id": 211359797,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1601126505
    },
    {
        "content": "<p>I haven't really tried to minimize it, so go ahead and try yourself</p>",
        "id": 211359843,
        "sender_full_name": "Stu",
        "timestamp": 1601126528
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> Do you think you know the culprit? Or should we go ahead and ping cleanup for bisection?</p>",
        "id": 211359850,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1601126544
    },
    {
        "content": "<p>I have a guess, but still think bisection is useful here</p>",
        "id": 211360234,
        "sender_full_name": "lcnr",
        "timestamp": 1601127151
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"255061\">LeSeulArtichaut</span> <a href=\"#narrow/stream/245100-t-compiler.2Fwg-prioritization.2Falerts/topic/I-prioritize.20.2377218.20ICE.20on.20.60if.20let.20Some().20.3D.20.2E.2E.2E.60.20expression.E2.80.A6/near/211359850\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> Do you think you know the culprit? Or should we go ahead and ping cleanup for bisection?</p>\n</blockquote>\n<p>Currently running a bisection and am getting used to the tool as I am new to it. Would this case need any more config than running it raw against the code produced in this issue - due to if you build on stable it'll error out normally?</p>",
        "id": 211360242,
        "sender_full_name": "James Gill",
        "timestamp": 1601127161
    },
    {
        "content": "<p>I bisected it</p>",
        "id": 211360246,
        "sender_full_name": "Stu",
        "timestamp": 1601127172
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343418\">@James Gill</span> you can use the <code>--prompt</code> parameter to do it interactively. If the ICE happens, <code>Mark as regressed</code>, if normal error, <code>Mark as baseline</code></p>",
        "id": 211360275,
        "sender_full_name": "Stu",
        "timestamp": 1601127238
    },
    {
        "content": "<p>Ahh cool, thanks!</p>",
        "id": 211360329,
        "sender_full_name": "James Gill",
        "timestamp": 1601127280
    },
    {
        "content": "<p>Ah you can also provide <code>--regress=ice</code> flag to check for an ICE</p>",
        "id": 211360821,
        "sender_full_name": "Stu",
        "timestamp": 1601127897
    },
    {
        "content": "<p>would make sense to think about  the possibility to add an extra optional flag to --prompt like a txt file path where its content is a substring of the compilation output. basicly telling bisct-rustc: when this substring is not found in the output then stop and lemme choose regression/baseline/retry else assume X and keep going ? (were X is regressed or baseline)</p>",
        "id": 211360833,
        "sender_full_name": "Nelson J Morais",
        "timestamp": 1601127914
    },
    {
        "content": "<p>i'm also new here and it's time consuming when you do an --end 2020-09-26  --prompt. i still didn't got to my baseline yet <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 211360887,
        "sender_full_name": "Nelson J Morais",
        "timestamp": 1601127980
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"230287\">@Stu</span>  ah looks like --regress=ice will do more or less as i'm sugesting right?</p>",
        "id": 211360964,
        "sender_full_name": "Nelson J Morais",
        "timestamp": 1601128099
    },
    {
        "content": "<p>Yes</p>",
        "id": 211360965,
        "sender_full_name": "Stu",
        "timestamp": 1601128108
    },
    {
        "content": "<p>Also with <code>cargo-bisect-rustc</code> you can set a shell script to do the check for you</p>",
        "id": 211365986,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1601135056
    },
    {
        "content": "<p>Given that ICEs have a different return code than \"normal\" failures, you can automate the process fairly easily</p>",
        "id": 211366004,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1601135089
    },
    {
        "content": "<p>Btw there's a <a class=\"stream\" data-stream-id=\"217417\" href=\"/#narrow/stream/217417-t-compiler.2Fcargo-bisect-rustc\">#t-compiler/cargo-bisect-rustc</a> stream here also</p>",
        "id": 211366112,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1601135198
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"255061\">LeSeulArtichaut</span> <a href=\"#narrow/stream/245100-t-compiler.2Fwg-prioritization.2Falerts/topic/I-prioritize.20.2377218.20ICE.20on.20.60if.20let.20Some().20.3D.20.2E.2E.2E.60.20expression.E2.80.A6/near/211359760\">said</a>:</p>\n<blockquote>\n<p>I wonder if we could minimize the example further</p>\n</blockquote>\n<p>Minimized to:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Cache</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">data</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Cache</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">list_data</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">key</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">reference</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"cm\">/*let*/</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">reference</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">key</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">unimplemented</span><span class=\"o\">!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 211370059,
        "sender_full_name": "Noah Lev",
        "timestamp": 1601140597
    },
    {
        "content": "<p>Issue <a href=\"https://github.com/rust-lang/rust/issues/77218\">#77218</a>'s prioritization request has been removed.</p>",
        "id": 211370136,
        "sender_full_name": "triagebot",
        "timestamp": 1601140699
    },
    {
        "content": "<p>I guess it would be nice if <a href=\"https://github.com/rust-lang/rust/issues/77283\">#77283</a> could get merged before master is promoted to beta (on Tuesday). Should we ping potential reviewers?</p>",
        "id": 212163448,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1601718566
    },
    {
        "content": "<p>from my understanding of that PR, it doesn't fix the ICE just prevents people from using that code that may ICE</p>",
        "id": 212169302,
        "sender_full_name": "DPC",
        "timestamp": 1601728069
    },
    {
        "content": "<p>Well there’s \"to not ICE\" in the PR title x)</p>",
        "id": 212169443,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1601728295
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"255061\">LeSeulArtichaut</span> <a href=\"#narrow/stream/245100-t-compiler.2Fwg-prioritization.2Falerts/topic/I-prioritize.20.2377218.20ICE.20on.20.60if.20let.20Some().20.3D.20.2E.2E.2E.60.20expression.E2.80.A6/near/212163448\">said</a>:</p>\n<blockquote>\n<p>I guess it would be nice if <a href=\"https://github.com/rust-lang/rust/issues/77283\">#77283</a> could get merged before master is promoted to beta (on Tuesday). Should we ping potential reviewers?</p>\n</blockquote>\n<p>I think that would probably be good. Here are the other members of wg-diagnostics:</p>\n<ul>\n<li>JohnTitor</li>\n<li>davidtwco</li>\n<li>oli-obk (lead)</li>\n</ul>",
        "id": 212183115,
        "sender_full_name": "Noah Lev",
        "timestamp": 1601748548
    },
    {
        "content": "<p>Those are <span class=\"user-mention silent\" data-user-id=\"217081\">Yuki Okushi</span> <span class=\"user-mention silent\" data-user-id=\"116107\">davidtwco</span> and <span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> on Zulip, unfortunately they don't seem to be available right now</p>",
        "id": 212183228,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1601748684
    },
    {
        "content": "<p>The code touches typeck though, we might want to ask typecheck experts instead</p>",
        "id": 212183322,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1601748756
    },
    {
        "content": "<p>But anyway I think backporting is perfectly feasible if it's not merged in time</p>",
        "id": 212183407,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1601748883
    },
    {
        "content": "<p>yeah let's not hurry on a review now, it's fine if this doesn't get merged when beta is cut</p>",
        "id": 212188177,
        "sender_full_name": "DPC",
        "timestamp": 1601756382
    }
]