[
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"3111\">@WG-prioritization/alerts</span> issue <a href=\"https://github.com/rust-lang/rust/issues/77912\">#77912</a> has been requested for prioritization.</p>\n<h1><a href=\"https://forge.rust-lang.org/compiler/prioritization/procedure.html#assign-priority-to-unprioritized-issues-with-i-prioritize-label\">Procedure</a></h1>\n<ul>\n<li>Priority?</li>\n<li>Regression?</li>\n<li>Notify people/groups?</li>\n<li>Needs <code>I-nominated</code>?</li>\n</ul>",
        "id": 213204573,
        "sender_full_name": "triagebot",
        "timestamp": 1602616794
    },
    {
        "content": "<p>Issue <a href=\"https://github.com/rust-lang/rust/issues/77912\">#77912</a>'s prioritization request has been removed.</p>",
        "id": 213206910,
        "sender_full_name": "triagebot",
        "timestamp": 1602617965
    },
    {
        "content": "<p>Apparently this is intended behavior :P</p>",
        "id": 213206971,
        "sender_full_name": "Noah Lev",
        "timestamp": 1602617996
    },
    {
        "content": "<p>yeah, it might make sense to ask in #t-lang if there are any objections to inferring lifetimes to <code>'static</code> if all function inputs do not contain any lifetimes</p>",
        "id": 213207161,
        "sender_full_name": "lcnr",
        "timestamp": 1602618086
    },
    {
        "content": "<p>because at least for me that seems like a fine extension of the current rules (edit: nm I don't think so anymore)</p>",
        "id": 213207212,
        "sender_full_name": "lcnr",
        "timestamp": 1602618115
    },
    {
        "content": "<p>one issue are things like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"n\">v</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;*</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 213207297,
        "sender_full_name": "lcnr",
        "timestamp": 1602618151
    },
    {
        "content": "<p>Or maybe we could desugar to:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>?</p>",
        "id": 213207333,
        "sender_full_name": "Noah Lev",
        "timestamp": 1602618175
    },
    {
        "content": "<p>personally I'm ok with it, I occasionally run into the opposite issue actually, when I have <code>fn f(&amp;T) -&gt; &amp;U</code> and <code>&amp;U</code> can be <code>*'static</code> but it's infered to the lifetime of <code>&amp;T</code></p>",
        "id": 213207343,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602618183
    },
    {
        "content": "<p>yeah, that has the same issue for pointers though</p>",
        "id": 213207356,
        "sender_full_name": "lcnr",
        "timestamp": 1602618189
    },
    {
        "content": "<p>Maybe we only desugar if the return value does not use a raw pointer?</p>",
        "id": 213207441,
        "sender_full_name": "Noah Lev",
        "timestamp": 1602618234
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/245100-t-compiler.2Fwg-prioritization.2Falerts/topic/I-prioritize.20.2377912.20Taking.20an.20argument.20hides.20lifetime.20error/near/213207343\">said</a>:</p>\n<blockquote>\n<p>personally I'm ok with it, I occasionally run into the opposite issue actually, when I have <code>fn f(&amp;T) -&gt; &amp;U</code> and <code>&amp;U</code> can be <code>*'static</code> but it's infered to the lifetime of <code>&amp;T</code></p>\n</blockquote>\n<p>also had that a few times myself, but these cases should always be harmless as <code>'static</code> is always longer than the lt of <code>&amp;T</code></p>",
        "id": 213207449,
        "sender_full_name": "lcnr",
        "timestamp": 1602618238
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Camelid</span> <a href=\"#narrow/stream/245100-t-compiler.2Fwg-prioritization.2Falerts/topic/I-prioritize.20.2377912.20Taking.20an.20argument.20hides.20lifetime.20error/near/213207441\">said</a>:</p>\n<blockquote>\n<p>Maybe we only desugar if the return value does not use a raw pointer?</p>\n</blockquote>\n<p>no no no no no</p>",
        "id": 213207509,
        "sender_full_name": "lcnr",
        "timestamp": 1602618257
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Camelid</span> <a href=\"#narrow/stream/245100-t-compiler.2Fwg-prioritization.2Falerts/topic/I-prioritize.20.2377912.20Taking.20an.20argument.20hides.20lifetime.20error/near/213207441\">said</a>:</p>\n<blockquote>\n<p>Maybe we only desugar if the return value does not use a raw pointer?</p>\n</blockquote>\n<p>I feel pretty strongly function types should not depend on the function body</p>",
        "id": 213207510,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602618257
    },
    {
        "content": "<p>this has caused so much trouble for rustdoc</p>",
        "id": 213207517,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602618262
    },
    {
        "content": "<p>this is <em>the</em> reason for <a href=\"https://github.com/rust-lang/rust/issues/75100\">https://github.com/rust-lang/rust/issues/75100</a></p>",
        "id": 213207537,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602618278
    },
    {
        "content": "<p>please don't, as this is relevant for program safety I really feel like we shouldn't use any unintuitive rules here</p>",
        "id": 213207603,
        "sender_full_name": "lcnr",
        "timestamp": 1602618311
    },
    {
        "content": "<p>I guess it just feels confusing to me that the first works and the second does not:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">s</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 213207615,
        "sender_full_name": "Noah Lev",
        "timestamp": 1602618316
    },
    {
        "content": "<p>this would mean that <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/subst/struct.GenericArg.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/subst/struct.GenericArg.html</a> would be a landmine if it didn't contain <code>PhantomData</code></p>",
        "id": 213207733,
        "sender_full_name": "lcnr",
        "timestamp": 1602618364
    },
    {
        "content": "<p>as it uses a <code>NonZeroUsize</code> instead of a pointer</p>",
        "id": 213207747,
        "sender_full_name": "lcnr",
        "timestamp": 1602618374
    },
    {
        "content": "<p>That's beyond my Rust knowledge <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 213207813,
        "sender_full_name": "Noah Lev",
        "timestamp": 1602618412
    },
    {
        "content": "<p>Is there any way to make my example less confusing? If <code>foo</code> used <code>s</code> in the return value, it would make sense, but having the addition of an unused argument change whether the code compiles is just confusing to me.</p>",
        "id": 213207981,
        "sender_full_name": "Noah Lev",
        "timestamp": 1602618485
    },
    {
        "content": "<p>Could someone move this to <a class=\"stream\" data-stream-id=\"213817\" href=\"/#narrow/stream/213817-t-lang\">#t-lang</a>?</p>",
        "id": 213207996,
        "sender_full_name": "Noah Lev",
        "timestamp": 1602618497
    },
    {
        "content": "<p>it's lifetime elision</p>",
        "id": 213208008,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602618504
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nomicon/lifetime-elision.html\">https://doc.rust-lang.org/nomicon/lifetime-elision.html</a></p>",
        "id": 213208021,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602618512
    },
    {
        "content": "<p>I know, it's just confusing to me that it's applied in one case but not another.</p>",
        "id": 213208071,
        "sender_full_name": "Noah Lev",
        "timestamp": 1602618538
    },
    {
        "content": "<p>Likewise, that A works, but B does not:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">s</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"c1\">// A</span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">s</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"c1\">// B</span>\n</code></pre></div>",
        "id": 213208164,
        "sender_full_name": "Noah Lev",
        "timestamp": 1602618593
    },
    {
        "content": "<p>I do agree that this can be confusing</p>",
        "id": 213208218,
        "sender_full_name": "lcnr",
        "timestamp": 1602618604
    },
    {
        "content": "<p>I guess it makes sense from the viewpoint of the compiler, but as a user it is very unintuitive</p>",
        "id": 213208222,
        "sender_full_name": "Noah Lev",
        "timestamp": 1602618606
    },
    {
        "content": "<p>well it's meant to make writing functions easier</p>",
        "id": 213208251,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602618624
    },
    {
        "content": "<p>imagine if you hade to write <code>fn f&lt;'a&gt;(&amp;'a str) -&gt; &amp;'a str{</code> everywhere</p>",
        "id": 213208278,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602618638
    },
    {
        "content": "<p>instead of <code>fn f(&amp;str) -&gt; &amp;str</code></p>",
        "id": 213208297,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602618651
    },
    {
        "content": "<p>I <em>like</em> it, I just want it to be more general</p>",
        "id": 213208334,
        "sender_full_name": "Noah Lev",
        "timestamp": 1602618673
    },
    {
        "content": "<p>the rule is pretty much: \"assign each elided lt in the function args a unique lt param, if there is exactly one elided lifetime there use that one for the return argument\"</p>",
        "id": 213208360,
        "sender_full_name": "lcnr",
        "timestamp": 1602618684
    },
    {
        "content": "<p>Is that rule in the docs?</p>",
        "id": 213208502,
        "sender_full_name": "Noah Lev",
        "timestamp": 1602618756
    },
    {
        "content": "<p>It's helpful :)</p>",
        "id": 213208524,
        "sender_full_name": "Noah Lev",
        "timestamp": 1602618770
    },
    {
        "content": "<p>it's here <a href=\"https://doc.rust-lang.org/nomicon/lifetime-elision.html#lifetime-elision\">https://doc.rust-lang.org/nomicon/lifetime-elision.html#lifetime-elision</a></p>",
        "id": 213208545,
        "sender_full_name": "lcnr",
        "timestamp": 1602618783
    },
    {
        "content": "<p>it might make sense to move this to the actual rust book</p>",
        "id": 213208562,
        "sender_full_name": "lcnr",
        "timestamp": 1602618795
    },
    {
        "content": "<p>A lot of stuff in the nomicon seems like it belongs in the book :)</p>",
        "id": 213208612,
        "sender_full_name": "Noah Lev",
        "timestamp": 1602618837
    },
    {
        "content": "<p>but as the only error case here is: user gets a fairly helpful compiler error to manually add lt params and now uses more than necessary</p>",
        "id": 213208677,
        "sender_full_name": "lcnr",
        "timestamp": 1602618859
    },
    {
        "content": "<p>i don't think that it's worth it</p>",
        "id": 213208687,
        "sender_full_name": "lcnr",
        "timestamp": 1602618867
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Camelid</span> <a href=\"#narrow/stream/245100-t-compiler.2Fwg-prioritization.2Falerts/topic/I-prioritize.20.2377912.20Taking.20an.20argument.20hides.20lifetime.20error/near/213208612\">said</a>:</p>\n<blockquote>\n<p>A lot of stuff in the nomicon seems like it belongs in the book :)</p>\n</blockquote>\n<p>the more info you put into a summary the less of a summary it is</p>",
        "id": 213208761,
        "sender_full_name": "lcnr",
        "timestamp": 1602618916
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/245100-t-compiler.2Fwg-prioritization.2Falerts/topic/I-prioritize.20.2377912.20Taking.20an.20argument.20hides.20lifetime.20error/near/213207297\">said</a>:</p>\n<blockquote>\n<p>one issue are things like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"n\">v</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;*</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n</blockquote>\n<p>I don't quite understand your concern. What stops someone from doing this?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"n\">s</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;*</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 213208883,
        "sender_full_name": "Noah Lev",
        "timestamp": 1602618976
    },
    {
        "content": "<p>It compiles fine, and has the exact same issue</p>",
        "id": 213208899,
        "sender_full_name": "Noah Lev",
        "timestamp": 1602618986
    },
    {
        "content": "<p>considering that the goal of the introductory material is to get people to start using rust I personally prefer to remove everything that is not strictly necessary or explained by compiler errors</p>",
        "id": 213208912,
        "sender_full_name": "lcnr",
        "timestamp": 1602618995
    },
    {
        "content": "<blockquote>\n<p>What stops someone from doing this?</p>\n</blockquote>\n<p>that people write code like this less often</p>",
        "id": 213208946,
        "sender_full_name": "lcnr",
        "timestamp": 1602619016
    },
    {
        "content": "<p>we may want to lint this case</p>",
        "id": 213209041,
        "sender_full_name": "lcnr",
        "timestamp": 1602619075
    },
    {
        "content": "<p>By the way, what is the underlying issue with eliding lifetimes for this?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"n\">v</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;*</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 213209073,
        "sender_full_name": "Noah Lev",
        "timestamp": 1602619082
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/245100-t-compiler.2Fwg-prioritization.2Falerts/topic/I-prioritize.20.2377912.20Taking.20an.20argument.20hides.20lifetime.20error/near/213209041\">said</a>:</p>\n<blockquote>\n<p>we may want to lint this case</p>\n</blockquote>\n<p>The more the merrier! :)</p>",
        "id": 213209105,
        "sender_full_name": "Noah Lev",
        "timestamp": 1602619092
    },
    {
        "content": "<p>yeah <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> do you want to open an issue for this in the rust repo?</p>",
        "id": 213209137,
        "sender_full_name": "lcnr",
        "timestamp": 1602619110
    },
    {
        "content": "<p>Sure, feel free to edit the issue if I get anything wrong :)</p>",
        "id": 213209189,
        "sender_full_name": "Noah Lev",
        "timestamp": 1602619144
    },
    {
        "content": "<blockquote>\n<p>By the way, what is the underlying issue with eliding lifetimes for this?</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 213209264,
        "sender_full_name": "lcnr",
        "timestamp": 1602619190
    },
    {
        "content": "<p>(<code>test</code> has to unsafe anyways, as we could always call it with <code>0 as *const u32</code> but that's beside the point rn)</p>",
        "id": 213209368,
        "sender_full_name": "lcnr",
        "timestamp": 1602619226
    },
    {
        "content": "<p>When casting pointers to references you have to be very careful with the lifetime of this reference to prevent use after frees</p>",
        "id": 213209518,
        "sender_full_name": "lcnr",
        "timestamp": 1602619303
    },
    {
        "content": "<p>very often it is instead helpful to \"remember\" the correct lifetime of pointers by using a newtype with <code>PhantomData</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">WeirdPtr</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ptr</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_marker</span>: <span class=\"nc\">PhantomData</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 213209703,
        "sender_full_name": "lcnr",
        "timestamp": 1602619373
    },
    {
        "content": "<p>Opened <a href=\"https://github.com/rust-lang/rust/issues/77914\">#77914</a></p>",
        "id": 213210310,
        "sender_full_name": "Noah Lev",
        "timestamp": 1602619690
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/245100-t-compiler.2Fwg-prioritization.2Falerts/topic/I-prioritize.20.2377912.20Taking.20an.20argument.20hides.20lifetime.20error/near/213209703\">said</a>:</p>\n<blockquote>\n<p>very often it is instead helpful to \"remember\" the correct lifetime of pointers by using a newtype with <code>PhantomData</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">WeirdPtr</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ptr</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_marker</span>: <span class=\"nc\">PhantomData</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n</blockquote>\n<p>Huh, interesting. I've never quite understood <code>PhantomData</code>. I think I'll go and read up on it so I finally understand it :)</p>",
        "id": 213210406,
        "sender_full_name": "Noah Lev",
        "timestamp": 1602619760
    },
    {
        "content": "<p>Why would you use this special wrapper instead of just using <code>&amp;'a T</code>?</p>",
        "id": 213210437,
        "sender_full_name": "Noah Lev",
        "timestamp": 1602619777
    },
    {
        "content": "<p>&amp;T must always be valid for reads</p>",
        "id": 213210463,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602619794
    },
    {
        "content": "<p>*const T can be invalid as long as you don't dereference it</p>",
        "id": 213210515,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602619806
    },
    {
        "content": "<p>But why would you want to pass around an invalid ptr?</p>",
        "id": 213210539,
        "sender_full_name": "Noah Lev",
        "timestamp": 1602619819
    },
    {
        "content": "<p>I guess I need to do more low-level Rust stuff :)</p>",
        "id": 213210567,
        "sender_full_name": "Noah Lev",
        "timestamp": 1602619843
    },
    {
        "content": "<p>you can also use this to store some data in the lower bits of the pointer in case the pointee has an alignment greater than 1</p>",
        "id": 213210638,
        "sender_full_name": "lcnr",
        "timestamp": 1602619879
    },
    {
        "content": "<p>this is what <code>GenericArg</code> does</p>",
        "id": 213210670,
        "sender_full_name": "lcnr",
        "timestamp": 1602619901
    },
    {
        "content": "<p><a href=\"https://anniecherkaev.com/the-secret-life-of-nan\">https://anniecherkaev.com/the-secret-life-of-nan</a></p>",
        "id": 213210676,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602619905
    },
    {
        "content": "<p>Wow, way over my head <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 213210700,
        "sender_full_name": "Noah Lev",
        "timestamp": 1602619913
    },
    {
        "content": "<p>Oh, I think I've read about that before</p>",
        "id": 213210757,
        "sender_full_name": "Noah Lev",
        "timestamp": 1602619925
    },
    {
        "content": "<p>So this</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">WeirdPtr</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ptr</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_marker</span>: <span class=\"nc\">PhantomData</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>is an optimization to store a reference <em>and</em> some data?</p>",
        "id": 213210878,
        "sender_full_name": "Noah Lev",
        "timestamp": 1602619990
    },
    {
        "content": "<p>it could be</p>",
        "id": 213210896,
        "sender_full_name": "lcnr",
        "timestamp": 1602620002
    },
    {
        "content": "<p>it's a pointer that does not have a <code>restrict dereferencable inbounds</code> LLVM attribute</p>",
        "id": 213210911,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602620012
    },
    {
        "content": "<p>it could also be a shared reference which might get written to somewhere else</p>",
        "id": 213210922,
        "sender_full_name": "lcnr",
        "timestamp": 1602620020
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/245100-t-compiler.2Fwg-prioritization.2Falerts/topic/I-prioritize.20.2377912.20Taking.20an.20argument.20hides.20lifetime.20error/near/213210922\">said</a>:</p>\n<blockquote>\n<p>it could also be a shared reference which might get written to somewhere else</p>\n</blockquote>\n<p>What do you mean?</p>",
        "id": 213210938,
        "sender_full_name": "Noah Lev",
        "timestamp": 1602620037
    },
    {
        "content": "<p><code>*const u32</code> does not have any aliasing restrictions</p>",
        "id": 213211021,
        "sender_full_name": "lcnr",
        "timestamp": 1602620069
    },
    {
        "content": "<p>so you can mutate the value pointed to by a <code>*const u32</code> without causing undefined behavior</p>",
        "id": 213211068,
        "sender_full_name": "lcnr",
        "timestamp": 1602620096
    },
    {
        "content": "<p>well</p>",
        "id": 213211087,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602620109
    },
    {
        "content": "<p>I think you mean <code>*mut T</code>?</p>",
        "id": 213211093,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602620117
    },
    {
        "content": "<p>both</p>",
        "id": 213211097,
        "sender_full_name": "lcnr",
        "timestamp": 1602620122
    },
    {
        "content": "<p>Huh, so is the <code>const</code> part just a note saying \"this shouldn't be mutated, but can be\"?</p>",
        "id": 213211103,
        "sender_full_name": "Noah Lev",
        "timestamp": 1602620127
    },
    {
        "content": "<p>there is close to no difference between <code>*const T</code> and <code>*mut T</code> except for variance</p>",
        "id": 213211126,
        "sender_full_name": "lcnr",
        "timestamp": 1602620145
    },
    {
        "content": "<p>A new term to look up <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 213211143,
        "sender_full_name": "Noah Lev",
        "timestamp": 1602620159
    },
    {
        "content": "<p>yeah, <code>*const T</code> is pretty much only right if the pointee is only meant to be read</p>",
        "id": 213211187,
        "sender_full_name": "lcnr",
        "timestamp": 1602620169
    },
    {
        "content": "<p>It's historically there for documentation purposes mainly, in practice it's for variance too</p>",
        "id": 213211198,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1602620182
    },
    {
        "content": "<p>at least in my experience it is mostly for variance</p>",
        "id": 213211211,
        "sender_full_name": "lcnr",
        "timestamp": 1602620203
    },
    {
        "content": "<p><code>*const T</code> is valid for an owning pointer too</p>",
        "id": 213211215,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1602620205
    },
    {
        "content": "<p>it is so easy to shoot yourself in the foot when having a covariant mutable pointer</p>",
        "id": 213211245,
        "sender_full_name": "lcnr",
        "timestamp": 1602620225
    },
    {
        "content": "<p>So you mean that <code>*const T</code> and <code>*mut T</code> are the same except that <code>*mut T</code> can be passed to a function expecting <code>*const T</code> but not vice versa?</p>",
        "id": 213211254,
        "sender_full_name": "Noah Lev",
        "timestamp": 1602620234
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> I mean that the usage in C code (where the terminology comes from) was for docs (memcpy, etc.)<br>\nNowadays, in Rust, the usage is for variance indeed</p>",
        "id": 213211320,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1602620282
    },
    {
        "content": "<p>no, you can go from <code>*const &amp;'static T</code> to <code>*const &amp;'a T</code> but not from a <code>*mut &amp;'static T</code> to <code>*mut &amp;'a T</code></p>",
        "id": 213211399,
        "sender_full_name": "lcnr",
        "timestamp": 1602620331
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307537\">@Camelid</span> variance is the mechanic that allows to \"shrink lifetimes\" inside a type that would be generic over some lifetime parameter. Which seems like a harmless thing to do, but it isn't always the case: it is unsound to overwrite a long-lived borrow with a short-lived one. Since <code>*mut</code> hints at being used for mutation, it is invariant / it doesn't allow lifetimes to shrink, whereas <code>*const</code> allows it</p>",
        "id": 213211649,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1602620473
    },
    {
        "content": "<p>For more info, see the nomicon chapter about it, or search in <a href=\"http://users.rust-lang.org\">users.rust-lang.org</a> for some detailed posts about the topic</p>",
        "id": 213211701,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1602620513
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/245100-t-compiler.2Fwg-prioritization.2Falerts/topic/I-prioritize.20.2377912.20Taking.20an.20argument.20hides.20lifetime.20error/near/213211399\">said</a>:</p>\n<blockquote>\n<p>no, you can go from <code>*const &amp;'static T</code> to <code>*const &amp;'a T</code> but not from a <code>*mut &amp;'static T</code> to <code>*mut &amp;'a T</code></p>\n</blockquote>\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=6dfe4589c901ce2457553d3cd4e97117\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=6dfe4589c901ce2457553d3cd4e97117</a></p>",
        "id": 213211975,
        "sender_full_name": "lcnr",
        "timestamp": 1602620652
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232018\">Daniel Henry-Mantilla</span> <a href=\"#narrow/stream/245100-t-compiler.2Fwg-prioritization.2Falerts/topic/I-prioritize.20.2377912.20Taking.20an.20argument.20hides.20lifetime.20error/near/213211649\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"307537\">Camelid</span> variance is the mechanic that allows to \"shrink lifetimes\" inside a type that would be generic over some lifetime parameter. Which seems like a harmless thing to do, but it isn't always the case: it is unsound to overwrite a long-lived borrow with a short-lived one. Since <code>*mut</code> hints at being used for mutation, it is invariant / it doesn't allow lifetimes to shrink, whereas <code>*const</code> allows it</p>\n</blockquote>\n<p>That clears it up, thanks :)</p>",
        "id": 213212144,
        "sender_full_name": "Noah Lev",
        "timestamp": 1602620738
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Camelid</span> <a href=\"#narrow/stream/245100-t-compiler.2Fwg-prioritization.2Falerts/topic/I-prioritize.20.2377912.20Taking.20an.20argument.20hides.20lifetime.20error/near/213211254\">said</a>:</p>\n<blockquote>\n<p>So you mean that <code>*const T</code> and <code>*mut T</code> are the same except that <code>*mut T</code> can be passed to a function expecting <code>*const T</code> but not vice versa?</p>\n</blockquote>\n<p>oh, that's actually news for me <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> <code>*mut T</code> does decay to <code>*const T</code>. Thanks <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 213212278,
        "sender_full_name": "lcnr",
        "timestamp": 1602620800
    },
    {
        "content": "<p>I had no idea, I was just guessing <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span></p>",
        "id": 213225656,
        "sender_full_name": "Noah Lev",
        "timestamp": 1602628575
    }
]