[
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"3111\">@WG-prioritization/alerts</span> issue <a href=\"https://github.com/rust-lang/rust/issues/88747\">#88747</a> has been requested for prioritization.</p>\n<h1><a href=\"https://forge.rust-lang.org/compiler/prioritization/procedure.html#assign-priority-to-unprioritized-issues-with-i-prioritize-label\">Procedure</a></h1>\n<ul>\n<li>Priority?</li>\n<li>Regression?</li>\n<li>Notify people/groups?</li>\n<li>Needs <code>I-nominated</code>?</li>\n</ul>",
        "id": 252502642,
        "sender_full_name": "triagebot",
        "timestamp": 1631123018
    },
    {
        "content": "<p>mmm i'd like to bisect this. I would probably assign a <code>P-medium</code>. Though it would be interesting to see why this happens and if the context of this error has more important ramifications.</p>",
        "id": 252516991,
        "sender_full_name": "apiraino",
        "timestamp": 1631128725
    },
    {
        "content": "<p>Regarding bisection: There’s two things that change over time:</p>\n<ol>\n<li>the behavior of “stack overflow” error message vs. “SIGSEGV”, and</li>\n<li>the stack overflow in the first place (which also doesn’t happen in some earlier Rust versions).</li>\n</ol>\n<p>When bisecting the stack overflow, pay attention to the fact that slightly larger expressions (e.g. more <code>#</code>s in the macro) seem to start causing stack overflows at a different point in time (i.e. earlier).</p>",
        "id": 252531374,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1631134566
    },
    {
        "content": "<p>thank you for the insights, always helpful :)</p>",
        "id": 252532658,
        "sender_full_name": "apiraino",
        "timestamp": 1631135063
    },
    {
        "content": "<p>It’s also very RAM-hungry very quickly, especially when adding more <code>#</code>s. Make sure to avoid using an IDE with <code>check</code>-on-save where you cannot easily kill <code>cargo check</code> in case it starts eating too much memory.</p>\n<p>I hadn’t done more than testing different stable versions over time yet.</p>\n<p>I’m not sure if it’s perhaps <em>too</em> RAM-hungry, haven’t done any detailed analysis, but it got my laptop swapping a lot and slowing down significantly (almost freezing) with less than 100'000 tuple entries IIRC, so there might be a separate problem here.</p>",
        "id": 252535908,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1631136427
    },
    {
        "content": "<p>Issue <a href=\"https://github.com/rust-lang/rust/issues/88747\">#88747</a>'s prioritization request has been removed.</p>",
        "id": 253467617,
        "sender_full_name": "triagebot",
        "timestamp": 1631731880
    }
]