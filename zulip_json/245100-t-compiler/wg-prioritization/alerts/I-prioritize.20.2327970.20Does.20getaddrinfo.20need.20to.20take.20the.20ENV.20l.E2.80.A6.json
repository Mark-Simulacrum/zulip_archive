[
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"3111\">@WG-prioritization/alerts</span> issue <a href=\"https://github.com/rust-lang/rust/issues/27970\">#27970</a> has been requested for prioritization.</p>\n<h1><a href=\"https://forge.rust-lang.org/compiler/prioritization/procedure.html#assign-priority-to-unprioritized-issues-with-i-prioritize-label\">Procedure</a></h1>\n<ul>\n<li>Priority?</li>\n<li>Regression?</li>\n<li>Notify people/groups?</li>\n<li>Needs <code>I-nominated</code>?</li>\n</ul>",
        "id": 216474970,
        "sender_full_name": "triagebot",
        "timestamp": 1605191328
    },
    {
        "content": "<p>Oh this one is tricky. On the one hand, multithreading unsoundness. On the other, back-compat. Is there a history of which one we prefer over the other?</p>",
        "id": 216475392,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1605191533
    },
    {
        "content": "<p>I'm not entirely sure about this one. This <a href=\"https://github.com/rust-lang/rust/issues/27970#issuecomment-264624978\">comment</a> and this <a href=\"https://github.com/rust-lang/rust/issues/27970#issuecomment-572578962\">comment</a> seems to imply (or perhaps I am misinterpreting) that this is unsafe <strong>but</strong> documented. </p>\n<p>What should or could be done on a \"T-libs\" level or rather in the implementing crates? If the crate uses <code>localtime_r</code> bypasses the safeguard set by the Rust library (again, this is my understanding).</p>\n<p>I am more inclined to maybe <code>I-nominate</code> this for a discussion</p>",
        "id": 217121013,
        "sender_full_name": "apiraino",
        "timestamp": 1605697694
    },
    {
        "content": "<p>bump, unprioritized</p>",
        "id": 217190422,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605730440
    },
    {
        "content": "<p>I'm not even sure what to do with this one</p>",
        "id": 217193744,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605732037
    },
    {
        "content": "<p>Afaict the unsafety is only caused when interacting with extern code, so the standard library on its own is sound</p>",
        "id": 217194387,
        "sender_full_name": "lcnr",
        "timestamp": 1605732445
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> yep</p>",
        "id": 217194533,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605732514
    },
    {
        "content": "<p>so unsure :)</p>",
        "id": 217194536,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605732517
    },
    {
        "content": "<p>though it does seem like this happens at least somewhat frequently</p>",
        "id": 217194556,
        "sender_full_name": "lcnr",
        "timestamp": 1605732531
    },
    {
        "content": "<p>or much rather, there are unsound apis out there where the unsoundness is hard to trigger</p>",
        "id": 217194625,
        "sender_full_name": "lcnr",
        "timestamp": 1605732575
    },
    {
        "content": "<p>idk, let's just slap <code>P-medium</code> on it and hope it doesn't end up biting us?</p>",
        "id": 217194675,
        "sender_full_name": "lcnr",
        "timestamp": 1605732600
    },
    {
        "content": "<p>Issue <a href=\"https://github.com/rust-lang/rust/issues/27970\">#27970</a>'s prioritization request has been removed.</p>",
        "id": 217197445,
        "sender_full_name": "triagebot",
        "timestamp": 1605733942
    }
]