[
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"3111\">@WG-prioritization/alerts</span> issue <a href=\"https://github.com/rust-lang/rust/issues/74713\">#74713</a> has been requested for prioritization.</p>\n<h1><a href=\"https://forge.rust-lang.org/compiler/prioritization/procedure.html#assign-priority-to-unprioritized-issues-with-i-prioritize-label\">Procedure</a></h1>\n<ul>\n<li>Priority?</li>\n<li>Regression?</li>\n<li>Notify people/groups?</li>\n<li>Needs <code>I-nominated</code>?</li>\n</ul>",
        "id": 204913382,
        "sender_full_name": "triagebot",
        "timestamp": 1595596543
    },
    {
        "content": "<p>ICE on stable hence prioritised</p>",
        "id": 204913395,
        "sender_full_name": "DPC",
        "timestamp": 1595596552
    },
    {
        "content": "<p>This is a slight variation of <a href=\"https://github.com/rust-lang/rust/issues/56445\">#56445</a> and will probably be fixed while working on <code>min_const_generics</code>.</p>\n<p>We can probably either close this as a duplicate or also assign <code>P-high</code> as it is a slightly different example, even if the cause should be identical</p>",
        "id": 204997943,
        "sender_full_name": "lcnr",
        "timestamp": 1595671835
    },
    {
        "content": "<p>IIUC this only happens in a failing path? Or am I missing something?</p>",
        "id": 205068019,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1595798699
    },
    {
        "content": "<p>If this only happens in a failing path then we should probably assign <code>P-medium</code> or even <code>P-low</code> given how old this regression is</p>",
        "id": 205068032,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1595798734
    },
    {
        "content": "<p>it's complicated</p>",
        "id": 205068033,
        "sender_full_name": "lcnr",
        "timestamp": 1595798741
    },
    {
        "content": "<p>so we don't supply the parent generics to arrays in function definitions and where bounds at all, so in this case it can currently never work</p>",
        "id": 205068078,
        "sender_full_name": "lcnr",
        "timestamp": 1595798771
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">bug</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[();</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">3</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>has the same ICE but should theoretically compile rn because we do allow the parent generics in repeat expressions and enum discriminants</p>",
        "id": 205068117,
        "sender_full_name": "lcnr",
        "timestamp": 1595798882
    },
    {
        "content": "<p>So that's plainly a bug with const generics rn</p>",
        "id": 205068139,
        "sender_full_name": "lcnr",
        "timestamp": 1595798899
    },
    {
        "content": "<blockquote>\n<p>has the same ICE but should theoretically compile rn because we do allow the parent generics in repeat expressions and enum discriminants</p>\n</blockquote>\n<p>I'm assuming it should compile with <code>#![feature(const_generics)]</code>?</p>",
        "id": 205068195,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1595799017
    },
    {
        "content": "<p>yeah</p>",
        "id": 205068197,
        "sender_full_name": "lcnr",
        "timestamp": 1595799033
    },
    {
        "content": "<p>I think it should compile even without <code>#![feature(const_generics)]</code></p>",
        "id": 205068212,
        "sender_full_name": "lcnr",
        "timestamp": 1595799084
    },
    {
        "content": "<p>Because it is used for an array?</p>",
        "id": 205068258,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1595799126
    },
    {
        "content": "<blockquote>\n<p>it's complicated</p>\n</blockquote>\n<p>^</p>",
        "id": 205068265,
        "sender_full_name": "lcnr",
        "timestamp": 1595799143
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/245100-t-compiler.2Fwg-prioritization.2Falerts/topic/I-prioritize.20.2374713.20ICE.3A.20escaping.20bound.20vars.20in.20predicate/near/205068265\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>it's complicated</p>\n</blockquote>\n<p>^</p>\n</blockquote>\n<p>I'm not ready for const generics yet then x)</p>",
        "id": 205068269,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1595799169
    },
    {
        "content": "<p>What would you suggest? Do you think this should be <code>P-high</code>?</p>",
        "id": 205068281,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1595799197
    },
    {
        "content": "<p>the repeat length is a concrete value here, so that should just be equal to <code>[(); 3]</code> on stable</p>",
        "id": 205068285,
        "sender_full_name": "lcnr",
        "timestamp": 1595799201
    },
    {
        "content": "<p>Hmm, so without considering how we might fix this, this is still an ICE which is fairly easy to hit so it should be <code>P-high</code></p>",
        "id": 205068334,
        "sender_full_name": "lcnr",
        "timestamp": 1595799275
    },
    {
        "content": "<p>Issue <a href=\"https://github.com/rust-lang/rust/issues/74713\">#74713</a>'s prioritization request has been removed.</p>",
        "id": 205370110,
        "sender_full_name": "triagebot",
        "timestamp": 1596035583
    }
]