[
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"3111\">@WG-prioritization/alerts</span> issue <a href=\"https://github.com/rust-lang/rust/issues/79674\">#79674</a> has been requested for prioritization.</p>\n<h1><a href=\"https://forge.rust-lang.org/compiler/prioritization/procedure.html#assign-priority-to-unprioritized-issues-with-i-prioritize-label\">Procedure</a></h1>\n<ul>\n<li>Priority?</li>\n<li>Regression?</li>\n<li>Notify people/groups?</li>\n<li>Needs <code>I-nominated</code>?</li>\n</ul>",
        "id": 220533365,
        "sender_full_name": "triagebot",
        "timestamp": 1608492494
    },
    {
        "content": "<p>Given this requires a nightly feature, is this a P-low?</p>",
        "id": 220602266,
        "sender_full_name": "rylev",
        "timestamp": 1608568252
    },
    {
        "content": "<p>If it requires nightly features it shouldn't be <code>regression-from-stable-to-stable</code>, and I think we don't prioritize them usually</p>",
        "id": 220602686,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1608568525
    },
    {
        "content": "<p>The label was added by <span class=\"user-mention\" data-user-id=\"217864\">@matthiaskrgr</span> . Shall we remove the regression-from-stable-to-stable label?</p>",
        "id": 220603347,
        "sender_full_name": "rylev",
        "timestamp": 1608568895
    },
    {
        "content": "<p>Yeah, I think so</p>",
        "id": 220603431,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1608568929
    },
    {
        "content": "<p>Issue <a href=\"https://github.com/rust-lang/rust/issues/79674\">#79674</a>'s prioritization request has been removed.</p>",
        "id": 220603452,
        "sender_full_name": "triagebot",
        "timestamp": 1608568943
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"3111\">@WG-prioritization/alerts</span> issue <a href=\"https://github.com/rust-lang/rust/issues/79674\">#79674</a> has been requested for prioritization.</p>\n<h1><a href=\"https://forge.rust-lang.org/compiler/prioritization/procedure.html#assign-priority-to-unprioritized-issues-with-i-prioritize-label\">Procedure</a></h1>\n<ul>\n<li>Priority?</li>\n<li>Regression?</li>\n<li>Notify people/groups?</li>\n<li>Needs <code>I-nominated</code>?</li>\n</ul>",
        "id": 220635626,
        "sender_full_name": "triagebot",
        "timestamp": 1608588023
    },
    {
        "content": "<p>I think we can go with <code>P-low</code> here</p>",
        "id": 220635641,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1608588035
    },
    {
        "content": "<p>Or maybe... Is this valid code with the features enabled?</p>",
        "id": 220635846,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1608588156
    },
    {
        "content": "<p>Perhaps we should wait for <span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> or someone else who knows const generics well enough to tell.</p>",
        "id": 220635922,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608588214
    },
    {
        "content": "<p>I don't think we should really treat this as a stable-to-stable regression.</p>",
        "id": 220635959,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608588237
    },
    {
        "content": "<p>The code doesn't work without nightly features, so it shouldn't be affecting anyone who's actually on stable.</p>",
        "id": 220636029,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608588268
    },
    {
        "content": "<p>Right, but you can reproduce it on stable</p>",
        "id": 220636056,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1608588297
    },
    {
        "content": "<p>So it doesn't \"require\" a nightly compiler to reproduce</p>",
        "id": 220636099,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1608588333
    },
    {
        "content": "<p>Yes, but a lot of things can be reproduced on stable since the compiler will still try to compile something even if it requires features.</p>",
        "id": 220636102,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608588339
    },
    {
        "content": "<p>Anyway we're nitpicking on terminology here :D</p>",
        "id": 220636107,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1608588347
    },
    {
        "content": "<p>But in general we don't prioritize nightly code, right?</p>",
        "id": 220636121,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608588358
    },
    {
        "content": "<p>And this code can't be used on stable even if it didn't ICE.</p>",
        "id": 220636185,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608588381
    },
    {
        "content": "<p>We do prioritize what's going to get to stable in 2 stable releases, i.e. <code>stable-to-nightly-regression</code>s</p>",
        "id": 220636190,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1608588386
    },
    {
        "content": "<p>Well, I forgot that const generics are going to be stabilized soon.</p>",
        "id": 220636216,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608588413
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Camelid</span> <a href=\"#narrow/stream/245100-t-compiler.2Fwg-prioritization.2Falerts/topic/I-prioritize.20.2379674.20ICE.20with.20const.20generics.3A.20asked.20to.20assem.E2.80.A6/near/220636216\">said</a>:</p>\n<blockquote>\n<p>Well, I forgot that const generics are going to be stabilized soon.</p>\n</blockquote>\n<p>Only <code>min_const_generics</code> though</p>",
        "id": 220636231,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1608588426
    },
    {
        "content": "<p>Just curious, can we repro with <code>min_const_generics</code>?</p>",
        "id": 220636251,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1608588446
    },
    {
        "content": "<p>Well, either way, better to err on the side of prioritization.</p>",
        "id": 220636254,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608588450
    },
    {
        "content": "<p>What do you mean?</p>",
        "id": 220636257,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608588453
    },
    {
        "content": "<p>I mean replace the <code>#![feature(const_generics)]</code> in the repro with <code>#![feature(min_const_generics)]</code></p>",
        "id": 220636349,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1608588498
    },
    {
        "content": "<p>And it doesn't compile</p>",
        "id": 220636354,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1608588501
    },
    {
        "content": "<p>It errors but it doesn't ICE.</p>",
        "id": 220636406,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608588545
    },
    {
        "content": "<p>Right</p>",
        "id": 220636425,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1608588557
    },
    {
        "content": "<p>So P-medium?</p>",
        "id": 220636843,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608588724
    },
    {
        "content": "<p>Or even P-low.</p>",
        "id": 220636863,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608588739
    },
    {
        "content": "<p>I'd lean more towards <code>P-low</code> because it gives errors before ICE'ing</p>",
        "id": 220636885,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1608588750
    },
    {
        "content": "<p>But I'm OK with <code>P-medium</code></p>",
        "id": 220636891,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1608588756
    },
    {
        "content": "<p>It does?</p>",
        "id": 220636896,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608588760
    },
    {
        "content": "<p>It doesn't give errors.</p>",
        "id": 220636920,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608588783
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>   Compiling playground v0.0.1 (/playground)\nerror[E0554]: `#![feature]` may not be used on the stable release channel\n --&gt; src/main.rs:1:1\n  |\n1 | #![feature(const_generics)]\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0554]: `#![feature]` may not be used on the stable release channel\n --&gt; src/main.rs:2:1\n  |\n2 | #![feature(const_evaluatable_checked)]\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0554]: `#![feature]` may not be used on the stable release channel\n --&gt; src/main.rs:3:1\n  |\n3 | #![feature(const_fn)]\n  | ^^^^^^^^^^^^^^^^^^^^^\n\nwarning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n --&gt; src/main.rs:1:12\n  |\n1 | #![feature(const_generics)]\n  |            ^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(incomplete_features)]` on by default\n  = note: see issue #44580 &lt;https://github.com/rust-lang/rust/issues/44580&gt; for more information\n\nwarning: the feature `const_evaluatable_checked` is incomplete and may not be safe to use and/or cause compiler crashes\n --&gt; src/main.rs:2:12\n  |\n2 | #![feature(const_evaluatable_checked)]\n  |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: see issue #76560 &lt;https://github.com/rust-lang/rust/issues/76560&gt; for more information\n\nerror: internal compiler error: compiler/rustc_trait_selection/src/traits/select/mod.rs:1473:17: asked to assemble builtin bounds of unexpected type: Placeholder(Placeholder { universe: U1, name: 0 })\n\nthread &#39;rustc&#39; panicked at &#39;Box&lt;Any&gt;&#39;, compiler/rustc_errors/src/lib.rs:945:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\nnote: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&amp;template=ice.md\n\nnote: rustc 1.48.0 (7eac88abb 2020-11-16) running on x86_64-unknown-linux-gnu\n\nnote: compiler flags: -C embed-bitcode=no -C codegen-units=1 -C debuginfo=2 --crate-type bin\n\nnote: some of the compiler flags provided by cargo are hidden\n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0554`.\nerror: could not compile `playground`\n\nTo learn more, run the command again with --verbose.\n</code></pre></div>",
        "id": 220636922,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1608588783
    },
    {
        "content": "<p>Yes, but that's expected.</p>",
        "id": 220636940,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608588800
    },
    {
        "content": "<p>What's your point? :)</p>",
        "id": 220636946,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608588805
    },
    {
        "content": "<p>My point is, if you're a stable user, you won't get confused</p>",
        "id": 220636968,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1608588824
    },
    {
        "content": "<p>Ah, I see.</p>",
        "id": 220636972,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608588829
    },
    {
        "content": "<p>So P-low it is.</p>",
        "id": 220636976,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608588834
    },
    {
        "content": "<p>Issue <a href=\"https://github.com/rust-lang/rust/issues/79674\">#79674</a>'s prioritization request has been removed.</p>",
        "id": 220637039,
        "sender_full_name": "triagebot",
        "timestamp": 1608588861
    },
    {
        "content": "<p>Done!</p>",
        "id": 220637043,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608588865
    },
    {
        "content": "<p>I'll still ping <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> here, in case they want to take a look at the code and tell us if this is supposed to work or not</p>",
        "id": 220637065,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1608588890
    },
    {
        "content": "<p>Only 7 issues left to go!</p>",
        "id": 220637087,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608588903
    },
    {
        "content": "<p>yeah, <code>P-low</code> seems correct to me here</p>",
        "id": 220678277,
        "sender_full_name": "lcnr",
        "timestamp": 1608634593
    }
]