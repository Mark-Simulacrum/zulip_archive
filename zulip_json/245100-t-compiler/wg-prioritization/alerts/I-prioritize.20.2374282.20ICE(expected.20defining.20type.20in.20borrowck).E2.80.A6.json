[
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"3111\">@WG-prioritization/alerts</span> issue <a href=\"https://github.com/rust-lang/rust/issues/74282\">#74282</a> has been requested for prioritization.</p>\n<h1><a href=\"https://forge.rust-lang.org/compiler/prioritization/procedure.html#assign-priority-to-unprioritized-issues-with-i-prioritize-label\">Procedure</a></h1>\n<ul>\n<li>Priority?</li>\n<li>Regression?</li>\n<li>Notify people/groups?</li>\n<li>Needs <code>I-nominated</code>?</li>\n</ul>",
        "id": 220533622,
        "sender_full_name": "triagebot",
        "timestamp": 1608492842
    },
    {
        "content": "<p>This code uses a nightly feature, but it's so simple and the bug is so weird that I feel it should be P-high.</p>",
        "id": 220538014,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608499303
    },
    {
        "content": "<p>Also it's a regression from 1.43.</p>",
        "id": 220538016,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608499311
    },
    {
        "content": "<p>Specifically, this part is really weird:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0308</span><span class=\"p\">]</span>: <span class=\"nc\">mismatched</span><span class=\"w\"> </span><span class=\"n\">types</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">8</span>:<span class=\"mi\">15</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">3</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">   </span><span class=\"k\">type</span> <span class=\"nc\">Closure</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u64</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                  </span><span class=\"o\">----------------</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"n\">opaque</span><span class=\"w\"> </span><span class=\"k\">type</span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"mi\">8</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">       </span><span class=\"n\">Anonymous</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">  </span><span class=\"n\">_______________</span><span class=\"o\">^</span><span class=\"w\"></span>\n<span class=\"mi\">9</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"mi\">3</span><span class=\"w\"></span>\n<span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">_____</span><span class=\"o\">^</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"n\">opaque</span><span class=\"w\"> </span><span class=\"k\">type</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">expected</span><span class=\"w\"> </span><span class=\"n\">opaque</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">                  </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"p\">[</span><span class=\"n\">closure</span><span class=\"o\">@</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">8</span>:<span class=\"mi\">15</span>: <span class=\"mi\">10</span>:<span class=\"mi\">6</span><span class=\"p\">]</span><span class=\"err\">`</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The compiler says it expected <code>impl Fn&lt;()&gt;</code>, but the actual type is <code>impl Fn() -&gt; u64</code> â€“ it's missing the return type?</p>",
        "id": 220538058,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608499353
    },
    {
        "content": "<p><del>we deactive parts of our opaque types handling without the feature gate</del></p>",
        "id": 220538061,
        "sender_full_name": "lcnr",
        "timestamp": 1608499374
    },
    {
        "content": "<p>ah, the <code>impl Fn&lt;()&gt;</code> part is a bit weird</p>",
        "id": 220538064,
        "sender_full_name": "lcnr",
        "timestamp": 1608499394
    },
    {
        "content": "<p>Yeah, and the feature gate (<code>#![feature(type_alias_impl_trait)]</code>) is <strong>enabled</strong> here.</p>",
        "id": 220538071,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608499415
    },
    {
        "content": "<p>It also seems like it's rendering the impl trait wrong: it should be <code>impl Fn()</code></p>",
        "id": 220538074,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608499439
    },
    {
        "content": "<p>(Or something like that)</p>",
        "id": 220538112,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608499445
    },
    {
        "content": "<p>do we have a policy here? I don't think that it makes sense to prioritize errors which require feature gates</p>",
        "id": 220538120,
        "sender_full_name": "lcnr",
        "timestamp": 1608499471
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Camelid</span> <a href=\"#narrow/stream/245100-t-compiler.2Fwg-prioritization.2Falerts/topic/I-prioritize.20.2374282.20ICE(expected.20defining.20type.20in.20borrowck).E2.80.A6/near/220538074\">said</a>:</p>\n<blockquote>\n<p>It also seems like it's rendering the impl trait wrong: it should be <code>impl Fn()</code></p>\n</blockquote>\n<p><code>Fn&lt;()&gt;</code> is how the trait is defined: <a href=\"https://doc.rust-lang.org/std/ops/trait.Fn.html\">https://doc.rust-lang.org/std/ops/trait.Fn.html</a></p>",
        "id": 220538123,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608499496
    },
    {
        "content": "<p>or would say that all of them are <code>P-low</code></p>",
        "id": 220538124,
        "sender_full_name": "lcnr",
        "timestamp": 1608499497
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=c8dde47313b03c4c2b7c6b33d14869af\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=c8dde47313b03c4c2b7c6b33d14869af</a> is more interesting imo</p>",
        "id": 220538132,
        "sender_full_name": "lcnr",
        "timestamp": 1608499520
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/245100-t-compiler.2Fwg-prioritization.2Falerts/topic/I-prioritize.20.2374282.20ICE(expected.20defining.20type.20in.20borrowck).E2.80.A6/near/220538123\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"307537\">Camelid</span> <a href=\"#narrow/stream/245100-t-compiler.2Fwg-prioritization.2Falerts/topic/I-prioritize.20.2374282.20ICE(expected.20defining.20type.20in.20borrowck).E2.80.A6/near/220538074\">said</a>:</p>\n<blockquote>\n<p>It also seems like it's rendering the impl trait wrong: it should be <code>impl Fn()</code></p>\n</blockquote>\n<p><code>Fn&lt;()&gt;</code> is how the trait is defined: <a href=\"https://doc.rust-lang.org/std/ops/trait.Fn.html\">https://doc.rust-lang.org/std/ops/trait.Fn.html</a></p>\n</blockquote>\n<p>which is an unstable implementation detail, so maybe still a bug, but an understandable one</p>",
        "id": 220538133,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608499520
    },
    {
        "content": "<p>but probably also close to <code>P-low</code> imo</p>",
        "id": 220538139,
        "sender_full_name": "lcnr",
        "timestamp": 1608499534
    },
    {
        "content": "<p>Since you and <span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> both seem to think P-low, I'll go with that :)</p>\n<p>We have a big queue of issues to prioritize from <span class=\"user-mention silent\" data-user-id=\"217864\">matthiaskrgr</span>'s work identifying regressions.</p>",
        "id": 220538194,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608499598
    },
    {
        "content": "<p>Issue <a href=\"https://github.com/rust-lang/rust/issues/74282\">#74282</a>'s prioritization request has been removed.</p>",
        "id": 220538211,
        "sender_full_name": "triagebot",
        "timestamp": 1608499638
    }
]