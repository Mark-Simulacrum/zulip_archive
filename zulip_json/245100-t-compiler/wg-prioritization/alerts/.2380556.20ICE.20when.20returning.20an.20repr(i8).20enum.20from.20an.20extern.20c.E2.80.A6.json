[
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"3111\">@WG-prioritization/alerts</span> issue <a href=\"https://github.com/rust-lang/rust/issues/80556\">#80556</a> has been requested for prioritization.</p>\n<h1><a href=\"https://forge.rust-lang.org/compiler/prioritization/procedure.html#assign-priority-to-unprioritized-issues-with-i-prioritize-label\">Procedure</a></h1>\n<ul>\n<li>Priority?</li>\n<li>Regression?</li>\n<li>Notify people/groups?</li>\n<li>Needs <code>I-nominated</code>?</li>\n</ul>",
        "id": 221290804,
        "sender_full_name": "triagebot",
        "timestamp": 1609422095
    },
    {
        "content": "<p>hmm, <code>P-medium</code> or <code>P-high</code> imo.</p>",
        "id": 221290870,
        "sender_full_name": "lcnr",
        "timestamp": 1609422139
    },
    {
        "content": "<p>IIUC the sample provided is trying to cast to an <code>i8</code> a custom <code>Type</code> that should fit the representation, right?</p>",
        "id": 221291349,
        "sender_full_name": "apiraino",
        "timestamp": 1609422787
    },
    {
        "content": "<p>I mean, is the code there legal or should return an error?</p>",
        "id": 221291415,
        "sender_full_name": "apiraino",
        "timestamp": 1609422856
    },
    {
        "content": "<p>also I don't understand if the LLVM error suggests an issue at the llvm level</p>",
        "id": 221291444,
        "sender_full_name": "apiraino",
        "timestamp": 1609422922
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"250987\">apiraino</span> <a href=\"#narrow/stream/245100-t-compiler.2Fwg-prioritization.2Falerts/topic/.2380556.20ICE.20when.20returning.20an.20repr(i8).20enum.20from.20an.20extern.20c.E2.80.A6/near/221291349\">said</a>:</p>\n<blockquote>\n<p>IIUC the sample provided is trying to cast to an <code>i8</code> a custom <code>Type</code> that should fit the representation, right?</p>\n</blockquote>\n<p>does it? the example tries to use an ffi safe enum in an extern function afaict</p>",
        "id": 221291504,
        "sender_full_name": "lcnr",
        "timestamp": 1609422967
    },
    {
        "content": "<p>the issue looks to me like we shouldn't use <code>zeroext</code> for <code>repr(iN)</code> enums</p>",
        "id": 221291517,
        "sender_full_name": "lcnr",
        "timestamp": 1609422999
    },
    {
        "content": "<p>though i am not too familiar with llvm myself</p>",
        "id": 221291522,
        "sender_full_name": "lcnr",
        "timestamp": 1609423010
    },
    {
        "content": "<p>so the issue is during codegen and probably a bug on our side</p>",
        "id": 221291539,
        "sender_full_name": "lcnr",
        "timestamp": 1609423034
    },
    {
        "content": "<p>make sense, thanks for clarifying (am trying to understand the context)</p>",
        "id": 221291716,
        "sender_full_name": "apiraino",
        "timestamp": 1609423246
    },
    {
        "content": "<p>Seems like maybe P-medium because it's been around since 1.24 (according to <span class=\"user-mention silent\" data-user-id=\"217864\">matthiaskrgr</span>).</p>",
        "id": 221329264,
        "sender_full_name": "Noah Lev",
        "timestamp": 1609464863
    },
    {
        "content": "<p>So is this code supposed to compile? It seems like yes.</p>",
        "id": 221329267,
        "sender_full_name": "Noah Lev",
        "timestamp": 1609464881
    },
    {
        "content": "<p>Yea I agree with medium. Rust Enums are usually not used in a FFI API</p>",
        "id": 221329464,
        "sender_full_name": "Stu",
        "timestamp": 1609465218
    },
    {
        "content": "<p>The enum is <code>repr(i8)</code>, which (I think?) means it's FFI-safe.</p>",
        "id": 221366983,
        "sender_full_name": "Noah Lev",
        "timestamp": 1609532192
    },
    {
        "content": "<p>I'm not sure, but even if it is, it's not often used in FFI (I guess), because it can produce invalid values if the FFI function returns an out of bounds number. So a \"constified enum\" or \"newtyped enum\", like bindgen can generate, are more often used.</p>\n<blockquote>\n<p>Use this with caution, creating this in unsafe code (including FFI) with an invalid value will invoke undefined behaviour. You may want to use the newtype enum style instead.</p>\n</blockquote>\n<p>Bindgen also warns about it</p>",
        "id": 221367062,
        "sender_full_name": "Stu",
        "timestamp": 1609532338
    },
    {
        "content": "<p><code>repr(i8)</code> is ffi safe</p>",
        "id": 221367327,
        "sender_full_name": "lcnr",
        "timestamp": 1609532765
    },
    {
        "content": "<p>I would have considered this a <code>P-high</code> but it's been a regression since 1.24... Shall we do <code>P-medium</code>?</p>",
        "id": 221501154,
        "sender_full_name": "rylev",
        "timestamp": 1609750605
    },
    {
        "content": "<p>Yea I think <code>P-medium</code> is fine</p>",
        "id": 221513586,
        "sender_full_name": "Stu",
        "timestamp": 1609759981
    },
    {
        "content": "<p>Issue <a href=\"https://github.com/rust-lang/rust/issues/80556\">#80556</a>'s prioritization request has been removed.</p>",
        "id": 221513821,
        "sender_full_name": "triagebot",
        "timestamp": 1609760166
    }
]