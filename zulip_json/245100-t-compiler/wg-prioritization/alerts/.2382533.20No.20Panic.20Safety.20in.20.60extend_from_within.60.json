[
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"3111\">@WG-prioritization/alerts</span> issue <a href=\"https://github.com/rust-lang/rust/issues/82533\">#82533</a> has been requested for prioritization.</p>\n<h1><a href=\"https://forge.rust-lang.org/compiler/prioritization/procedure.html#assign-priority-to-unprioritized-issues-with-i-prioritize-label\">Procedure</a></h1>\n<ul>\n<li>Priority?</li>\n<li>Regression?</li>\n<li>Notify people/groups?</li>\n<li>Needs <code>I-nominated</code>?</li>\n</ul>",
        "id": 227881017,
        "sender_full_name": "triagebot",
        "timestamp": 1614313740
    },
    {
        "content": "<p>hm ... what's the context of this issue? What's the actionable if (to my understanding by reading Joshua's comment) there's no memory leak?</p>",
        "id": 227895116,
        "sender_full_name": "apiraino",
        "timestamp": 1614327392
    },
    {
        "content": "<p>I guess <span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> meant this <em>is</em> \"just\" a memory leak, it's fully safe.</p>",
        "id": 227907570,
        "sender_full_name": "hyd-dev",
        "timestamp": 1614334785
    },
    {
        "content": "<p>Also IMO it's still called \"panic safety\" (or at least \"unwind safety\") even it's fully safe: <a href=\"https://doc.rust-lang.org/nightly/std/panic/trait.UnwindSafe.html#what-is-unwind-safety\">https://doc.rust-lang.org/nightly/std/panic/trait.UnwindSafe.html#what-is-unwind-safety</a></p>",
        "id": 227907938,
        "sender_full_name": "hyd-dev",
        "timestamp": 1614334992
    },
    {
        "content": "<p>oh now I see, thank you!</p>",
        "id": 227909343,
        "sender_full_name": "apiraino",
        "timestamp": 1614335803
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"374396\">hyd-dev</span> <a href=\"#narrow/stream/245100-t-compiler.2Fwg-prioritization.2Falerts/topic/.2382533.20No.20Panic.20Safety.20in.20.60extend_from_within.60/near/227907938\">said</a>:</p>\n<blockquote>\n<p>Also IMO it's still called \"panic safety\" (or at least \"unwind safety\") even it's fully safe: <a href=\"https://doc.rust-lang.org/nightly/std/panic/trait.UnwindSafe.html#what-is-unwind-safety\">https://doc.rust-lang.org/nightly/std/panic/trait.UnwindSafe.html#what-is-unwind-safety</a></p>\n</blockquote>\n<p>Hmm, I don't think I'd call leaking memory a \"broken logic invariant\" - from what I can tell it's fine to catch the unwind and use the Vec after a panic</p>",
        "id": 227936660,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614350394
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/245100-t-compiler.2Fwg-prioritization.2Falerts/topic/.2382533.20No.20Panic.20Safety.20in.20.60extend_from_within.60/near/227936660\">said</a>:</p>\n<blockquote>\n<p>Hmm, I don't think I'd call leaking memory a \"broken logic invariant\" - from what I can tell it's fine to catch the unwind and use the Vec after a panic</p>\n</blockquote>\n<p>Indeed... OTOH \"resource leaks\" are not considered exception safe in C++: <a href=\"https://en.cppreference.com/w/cpp/language/exceptions#Exception_safety\">https://en.cppreference.com/w/cpp/language/exceptions#Exception_safety</a></p>\n<p>But yes, although \"panics in Rust are currently implemented essentially as a C++ exception under the hood\", memory leak is mentioned in neither the documentation nor the RFC.</p>\n<p>Maybe I just hate memory leaks too much. <span aria-label=\"losing money\" class=\"emoji emoji-1f4b8\" role=\"img\" title=\"losing money\">:losing_money:</span></p>",
        "id": 227940579,
        "sender_full_name": "hyd-dev",
        "timestamp": 1614352080
    },
    {
        "content": "<p>yeah, I don't think C++ is super relevant to Rust's idea of unwind safety</p>",
        "id": 227940820,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614352179
    },
    {
        "content": "<p>I'd still label this <code>P-high</code>. It may be safe, but we don't want to blow up memory in contexts where panics are common.</p>",
        "id": 227946960,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1614354819
    },
    {
        "content": "<p>I don't think panics should be common <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> and if they are I'd expect a lot more things to break than just leaked memory</p>",
        "id": 227948477,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614355415
    },
    {
        "content": "<p>Then maybe we should document this, at least, in very big bold letters, that using panics for anything other than exit situations breaks things. Use <code>std::Result</code> instead.</p>",
        "id": 227952507,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1614356887
    },
    {
        "content": "<p>Sorry, I'm not explaining myself very well. I think catch_unwind is ok to use and won't inherently break things, just that in practice people don't consider it when writing libraries and so it doesn't get tested very well. I do think we should fix this if possible, I just don't think it's high priority.</p>",
        "id": 227953951,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614357416
    },
    {
        "content": "<p><code>P-medium</code>, then? <code>P-low</code> is for things unlikely to get fixed, historically.</p>",
        "id": 227954287,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1614357570
    },
    {
        "content": "<p><code>P-medium</code> seems fine to me.</p>",
        "id": 227982572,
        "sender_full_name": "Noah Lev",
        "timestamp": 1614369061
    },
    {
        "content": "<p>I assigned a Prio, it went to <a href=\"#narrow/stream/245100-t-compiler.2Fwg-prioritization.2Falerts/topic/.2382533.20.60extend_from_within.60.20leaks.20elements.20on.20panic\">this thread</a> due to the issue title modification.</p>",
        "id": 228004628,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1614378059
    }
]