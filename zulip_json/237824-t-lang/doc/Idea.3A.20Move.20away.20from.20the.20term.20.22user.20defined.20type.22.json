[
    {
        "content": "<p>Hello, I think the term \"user-defined type\" (= struct + enum + union) doesn't look very good, because it's hard to define what is \"user\" here (are types in <code>std</code> user defined types? specially, is <code>Box&lt;T&gt;</code> a user defined type?). In compiler this is called Adt. I do think we should move away from this term.</p>",
        "id": 230207318,
        "sender_full_name": "Charles Lew",
        "timestamp": 1615690620
    },
    {
        "content": "<p>is there an example of it being used which results in confusion?</p>",
        "id": 230207600,
        "sender_full_name": "oliver",
        "timestamp": 1615690948
    },
    {
        "content": "<p>I think <code>specified type</code> is generally better overall</p>",
        "id": 230207634,
        "sender_full_name": "oliver",
        "timestamp": 1615690993
    },
    {
        "content": "<p>I believe C++'s standard also uses the term \"user-defined type\" for structs, enums, and unions. It also confusingly uses a similar but different term, \"user-provided types\", for types that are \"truely\" defined by the user, IE. not ones provided by the C++ Standard Library. (IE. it's prior art  for the term, but it's not necessarily the best example).</p>",
        "id": 230207638,
        "sender_full_name": "Connor Horman",
        "timestamp": 1615690997
    },
    {
        "content": "<p>in Rust at least a <code>Vec</code> is also a user-defined type fwiw</p>",
        "id": 230207696,
        "sender_full_name": "oliver",
        "timestamp": 1615691063
    },
    {
        "content": "<p>as opposed to a built-in types which are primitives</p>",
        "id": 230207736,
        "sender_full_name": "oliver",
        "timestamp": 1615691132
    },
    {
        "content": "<p><code>Box&lt;T&gt;</code> I would describe as a generic data type</p>",
        "id": 230207824,
        "sender_full_name": "oliver",
        "timestamp": 1615691258
    },
    {
        "content": "<p>I don't like the term, even if C++ uses it; It's used because I asked what we should call them and that's the answer I was given.</p>",
        "id": 230220580,
        "sender_full_name": "isHavvy",
        "timestamp": 1615707361
    },
    {
        "content": "<p>What about \"composite types\" or \"nominal types\" or something? (I'm not good at naming things in English as it's not my mother tongue)</p>",
        "id": 230257175,
        "sender_full_name": "Charles Lew",
        "timestamp": 1615744235
    },
    {
        "content": "<p>Are type aliases nominal types?</p>",
        "id": 230257285,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615744357
    },
    {
        "content": "<p>'lew types'? <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 230257291,
        "sender_full_name": "oliver",
        "timestamp": 1615744369
    },
    {
        "content": "<p>The reference inconsistently uses all three terms (user-defined, nominal, and composite).  </p>\n<p>I find the definition in the glossary for \"nominal type\" isn't great. </p>\n<p><code>Types that can be referred to by a path directly. Specifically [enums], [structs], [unions], and [trait objects].</code></p>\n<p>But built-in types are also referenced by path.</p>",
        "id": 230257295,
        "sender_full_name": "Eric Huss",
        "timestamp": 1615744373
    },
    {
        "content": "<p>wait, trait objects can be referred to by a path?</p>",
        "id": 230257330,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615744436
    },
    {
        "content": "<p>I guess that makes a bit more sense if you use bare trait objects</p>",
        "id": 230257401,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615744480
    },
    {
        "content": "<p><code>path::to::MyTrait</code></p>",
        "id": 230257402,
        "sender_full_name": "Eric Huss",
        "timestamp": 1615744481
    },
    {
        "content": "<p>with the <code>dyn</code> it looks like a primitive, like <code>*const T</code> (which I guess is not a nominal type by this definition)</p>",
        "id": 230257438,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615744527
    },
    {
        "content": "<p>I was trying to write a slide for a simple overview of all kinds of types in rust. Here's my a little inaccurate summary<br>\nof what i learnt from Rust Reference:</p>",
        "id": 230257515,
        "sender_full_name": "Charles Lew",
        "timestamp": 1615744606
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/pM45mjtH50ZSfhqF678uNro2/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/pM45mjtH50ZSfhqF678uNro2/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/pM45mjtH50ZSfhqF678uNro2/image.png\"></a></div>",
        "id": 230257518,
        "sender_full_name": "Charles Lew",
        "timestamp": 1615744615
    },
    {
        "content": "<p>these labels aren't mutually exclusive</p>",
        "id": 230257581,
        "sender_full_name": "oliver",
        "timestamp": 1615744690
    },
    {
        "content": "<p>oh are they?</p>",
        "id": 230257598,
        "sender_full_name": "Charles Lew",
        "timestamp": 1615744721
    },
    {
        "content": "<p>I wouldn't assume so</p>",
        "id": 230257605,
        "sender_full_name": "oliver",
        "timestamp": 1615744739
    },
    {
        "content": "<p>unless there is indication otherwise which I haven't read [totally possible]</p>",
        "id": 230257618,
        "sender_full_name": "oliver",
        "timestamp": 1615744767
    },
    {
        "content": "<p>for example sequence types are also user-defined types</p>",
        "id": 230257759,
        "sender_full_name": "oliver",
        "timestamp": 1615744874
    },
    {
        "content": "<p>realistically though user-defined types aren't specifically presented in the reference</p>",
        "id": 230257897,
        "sender_full_name": "oliver",
        "timestamp": 1615745003
    },
    {
        "content": "<p>Yea, maybe \"user-defined\" was a bad label to use in that list.  Nominal is probably better?  Those labels were a pretty arbitrary way of just breaking up a big list.</p>",
        "id": 230257900,
        "sender_full_name": "Eric Huss",
        "timestamp": 1615745013
    },
    {
        "content": "<p>I do feel those labels did reveal some commonness of those types... which i why i used red, green, blue to put them into categories.</p>",
        "id": 230258078,
        "sender_full_name": "Charles Lew",
        "timestamp": 1615745193
    },
    {
        "content": "<p>the red categories are built-in as part of the language, the green ones are defined by \"side-effect\" of items, the blue ones are intentionally defined with a item.</p>",
        "id": 230258127,
        "sender_full_name": "Charles Lew",
        "timestamp": 1615745274
    },
    {
        "content": "<p>from the list here: <a href=\"https://doc.rust-lang.org/reference/types.html\">https://doc.rust-lang.org/reference/types.html</a><br>\nI might remove the links and include definitions and leave the interpretation to the reader</p>",
        "id": 230258129,
        "sender_full_name": "oliver",
        "timestamp": 1615745277
    }
]