[
    {
        "content": "<p>Just as a closure expression makes an anonymous type that implements various traits, an async block makes an anonymous type that implements the Future trait (and maybe others?). So does that mean we need a page for them?</p>",
        "id": 227071607,
        "sender_full_name": "isHavvy",
        "timestamp": 1613803104
    },
    {
        "content": "<p>Alternatively, we could rename the <code>Closure types</code> chapter to something that encompasses both closures and futures, although I cannot think of a good name. This is not without merit, since both of them share a lot of details.</p>",
        "id": 227072264,
        "sender_full_name": "isHavvy",
        "timestamp": 1613804118
    },
    {
        "content": "<p>Or we could just say that async blocks create closures. Although I'd want confirmation from the lang team before doing that.</p>",
        "id": 227072321,
        "sender_full_name": "isHavvy",
        "timestamp": 1613804180
    },
    {
        "content": "<p>\"Voldemort types\"? :)</p>",
        "id": 227073995,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613806349
    },
    {
        "content": "<p>Is that term actually used academically, or is it just colloquial usage</p>",
        "id": 227074417,
        "sender_full_name": "isHavvy",
        "timestamp": 1613806878
    },
    {
        "content": "<p>I found a few hits for voldemort types in D, unnameable types and closure types in Rust, and anonymous types in C#, Java, and Go</p>",
        "id": 227074664,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613807185
    },
    {
        "content": "<p>It's not clear to me whether the use of anonymous types is specific to the OO use of this construct, because it's a pretty good choice otherwise</p>",
        "id": 227074688,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613807255
    },
    {
        "content": "<p>The main danger I think is confusing it with structural types (as opposed to nominal types) like the tuple type, or typedefs over a tuple type</p>",
        "id": 227074778,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613807350
    },
    {
        "content": "<p>but at least in C# / Java / Go anonymous types are nominal</p>",
        "id": 227074783,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613807386
    },
    {
        "content": "<p>&lt;deleted; offtopic&gt;</p>",
        "id": 227075812,
        "sender_full_name": "isHavvy",
        "timestamp": 1613808433
    }
]