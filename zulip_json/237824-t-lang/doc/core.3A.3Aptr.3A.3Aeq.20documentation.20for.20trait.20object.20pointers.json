[
    {
        "content": "<p><code>std::ptr::eq</code> claims that it compares <code>*const dyn Trait</code> by address and implementation,</p>\n<blockquote>\n<p>Compares raw pointers for equality.<br>\n...<br>\nTraits are also compared by their implementation.</p>\n</blockquote>\n<p>but this is not always correct (it will never have false positives, but may have false negatives)</p>\n<p>Since vtables are not guaranteed to be unique, two <code>*const dyn Trait</code> that point to the same address, with the same type, may compare unequal if the vtable pointers are different (despite them containing the same functions (they may contain different compilations of the same function))</p>\n<p>Example: <a href=\"https://rust.godbolt.org/z/dhM3v9nz7\">https://rust.godbolt.org/z/dhM3v9nz7</a> (prints <code>false</code> despite <code>y</code> and <code>z</code> both being <code>&amp;dyn T</code> references to <code>x: i32</code>).</p>\n<p>Should the the documentation for <code>std::ptr::eq</code> be changed? For example to something like </p>\n<blockquote>\n<p>Traits are also compared by their implementation <strong>on a best-effort basis (i.e. two pointers that should compare equal may not compare equal, but no two pointers that should not comapre equal will compare equal)</strong></p>\n</blockquote>\n<p>or </p>\n<blockquote>\n<p>Traits are also compared by their <del>implementation</del> <strong>vtable pointer (i.e. two pointers two the same location and type may not compare equal, but no two pointers two different types or locations will compare equal)</strong></p>\n</blockquote>\n<p>?</p>\n<p>(I think this could also be resolved by ensuring that vtable pointers are unique per (type minus lifetimes, trait) pair, but that would be a much bigger change than just documentation.)</p>",
        "id": 273022573,
        "sender_full_name": "Zachary Sample",
        "timestamp": 1645656337
    },
    {
        "content": "<p>This probably would be better for <a class=\"stream\" data-stream-id=\"219381\" href=\"/#narrow/stream/219381-t-libs\">#t-libs</a> rather than <a class=\"stream\" data-stream-id=\"237824\" href=\"/#narrow/stream/237824-t-lang.2Fdoc\">#t-lang/doc</a>.</p>",
        "id": 273024921,
        "sender_full_name": "Connor Horman",
        "timestamp": 1645657729
    },
    {
        "content": "<p>Is there a way for me to move it or should I just copy-paste a new topic there?</p>",
        "id": 273025689,
        "sender_full_name": "Zachary Sample",
        "timestamp": 1645658254
    },
    {
        "content": "<p>AFAIK, the current code generation allows to for comparison to have both false positives and false negatives, since methods can be merged together, and subsequently complete vtable for different types could be merged as well.</p>",
        "id": 273025828,
        "sender_full_name": "tm",
        "timestamp": 1645658339
    },
    {
        "content": "<p>moved to <a href=\"#narrow/stream/219381-t-libs/topic/core.3A.3Aptr.3A.3Aeq.20documentation.20for.20trait.20objects/near/273027035\">https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/core.3A.3Aptr.3A.3Aeq.20documentation.20for.20trait.20objects/near/273027035</a></p>",
        "id": 273028735,
        "sender_full_name": "Zachary Sample",
        "timestamp": 1645660381
    }
]