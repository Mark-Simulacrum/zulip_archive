[
    {
        "content": "<p>The reference and the standard library doc differs vastly on what is a primitive type.</p>\n<p>The reference says the primitive types includes boolean, numeric, textual, and never.<br>\nThe standard library documentation also includes sequence types and pointer types as part of its \"primitive types\" section.</p>\n<p>I wonder what's the best approach to reach some kind of consistency here?</p>",
        "id": 265480991,
        "sender_full_name": "Charles Lew",
        "timestamp": 1639921572
    },
    {
        "content": "<p>If you're referring to the groupings at <a href=\"https://doc.rust-lang.org/nightly/reference/types.html\">https://doc.rust-lang.org/nightly/reference/types.html</a>, I wouldn't put too much weight into those terms.  That was just a rough way to break up a long list of links. </p>\n<p>I think we could consider different labels to use, or different ways to categorize those.  I didn't want to list bool/numeric/str/char/! as \"Other\" or \"Miscellaneous\", but that's what they are (types that didn't fit in any of the other categories).  I also considered a two-level organization (primitive and user-defined), but that seemed overly complicated and fussy to me.</p>",
        "id": 265489392,
        "sender_full_name": "Eric Huss",
        "timestamp": 1639933428
    },
    {
        "content": "<p>Thanks for the explanation. Yes, i was referring to exactly that.  </p>\n<p>When writing books or other educational materials or even just answering technical questions, it would easily become confusing if there's not a single source of truth for things. What's making this even harder is that if we're doing this in another language other than English, and casual naming habits and pronunciation rules leads us to having to make terms for terms.</p>",
        "id": 265491662,
        "sender_full_name": "Charles Lew",
        "timestamp": 1639936527
    },
    {
        "content": "<p>It would be nice if things can just \"settle down\" a bit, so we could communicate the results to other people.</p>",
        "id": 265491808,
        "sender_full_name": "Charles Lew",
        "timestamp": 1639936761
    },
    {
        "content": "<p>Actually, from my own personal point of view, the current classification is mostly just fine; modulo the fact that it is different the standard library documentation.</p>",
        "id": 265491997,
        "sender_full_name": "Charles Lew",
        "timestamp": 1639936946
    },
    {
        "content": "<p>The standard library documentation version is more problematic, since it tries to cover most types, but still leaving \"function item types\", \"closure types\" etc out.</p>",
        "id": 265492072,
        "sender_full_name": "Charles Lew",
        "timestamp": 1639937076
    },
    {
        "content": "<p>Do you happen to know if there is any sort of well-acknowledged definition of what \"primitive\" means?  The only language that I know of that uses it extensively is Java, which has a relatively clear distinction.</p>",
        "id": 265495739,
        "sender_full_name": "Eric Huss",
        "timestamp": 1639941879
    },
    {
        "content": "<p>One basic definition is if you could implement the type yourself as a user of the language.</p>\n<p>So ints, bool, char, slices, arrays, references, pointers, <code>UnsafeCell</code>, and parts of <code>Box</code> are all primitive.</p>\n<p>Things like <code>Option</code>, <code>Result</code>, <code>Cell</code>, <code>AtomicFoo</code>, <code>Vec</code> and so on are <strong>not</strong> primitive, though implementing them might be nightly only because their parts never get stabilized.</p>",
        "id": 265507040,
        "sender_full_name": "Lokathor",
        "timestamp": 1639957381
    },
    {
        "content": "<p>If we get rid of box patterns, what aspects of <code>Box</code> are primitive?</p>",
        "id": 265598626,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1640024031
    },
    {
        "content": "<p>Compiler knowledge about it being a place (i.e., derefmut special cases in borrowck) and derefmove, I think.</p>",
        "id": 265599160,
        "sender_full_name": "simulacrum",
        "timestamp": 1640024305
    },
    {
        "content": "<p>Couldn't you argue that <code>Option</code> is primitive under that definition, since it is special cased in the language (notwithstanding the fact that the implementation is not special cased)?</p>",
        "id": 265602609,
        "sender_full_name": "Connor Horman",
        "timestamp": 1640026280
    },
    {
        "content": "<p>I'm not aware of the special cases for Option.</p>",
        "id": 265603917,
        "sender_full_name": "Lokathor",
        "timestamp": 1640027017
    },
    {
        "content": "<p>The guaranteed layout optimization, and the desugaring of <code>for</code> loops</p>",
        "id": 265605927,
        "sender_full_name": "Connor Horman",
        "timestamp": 1640028286
    },
    {
        "content": "<p>For the latter, something doesn't have to be a primitive just because a language feature treats it as a lang item.</p>",
        "id": 265608204,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1640029711
    },
    {
        "content": "<p>For the former, I personally think we <em>should</em> document and guarantee layout optimization for <em>anything</em> of the form <code>enum X { Y, Z(TypeWithNiche) }</code>.</p>",
        "id": 265608263,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1640029752
    },
    {
        "content": "<p>To the extent we haven't done so already.</p>",
        "id": 265608276,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1640029763
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/237824-t-lang.2Fdoc/topic/Definition.20of.20.22primitive.20type.22/near/265599160\">said</a>:</p>\n<blockquote>\n<p>Compiler knowledge about it being a place (i.e., derefmut special cases in borrowck) and derefmove, I think.</p>\n</blockquote>\n<p>So, to some degree the same things that the deref patterns initiative is attempting to generalize to other types?</p>",
        "id": 265608369,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1640029803
    },
    {
        "content": "<p>I think the derefmut special case is unlikely to directly tie to deref patterns -- I guess it <em>could</em> but there's no direct connection in my mind. DerefMove also seems distinct</p>",
        "id": 265608479,
        "sender_full_name": "simulacrum",
        "timestamp": 1640029886
    },
    {
        "content": "<blockquote>\n<p>For the former, I personally think we <em>should</em> document and guarantee layout optimization for <em>anything</em> of the form <code>enum X { Y, Z(TypeWithNiche) }</code>.</p>\n</blockquote>\n<p>I thought this was already the case.</p>",
        "id": 265609660,
        "sender_full_name": "bjorn3",
        "timestamp": 1640030565
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/237824-t-lang.2Fdoc/topic/Definition.20of.20.22primitive.20type.22/near/265609660\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>For the former, I personally think we <em>should</em> document and guarantee layout optimization for <em>anything</em> of the form <code>enum X { Y, Z(TypeWithNiche) }</code>.</p>\n</blockquote>\n<p>I thought this was already the case.</p>\n</blockquote>\n<p>That's my impression as well, but a handful of times I've heard the suggestion that we don't actually <em>guarantee</em> it for types other than <code>Option</code>.</p>",
        "id": 265609743,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1640030632
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/237824-t-lang.2Fdoc/topic/Definition.20of.20.22primitive.20type.22/near/265608369\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/237824-t-lang.2Fdoc/topic/Definition.20of.20.22primitive.20type.22/near/265599160\">said</a>:</p>\n<blockquote>\n<p>Compiler knowledge about it being a place (i.e., derefmut special cases in borrowck) and derefmove, I think.</p>\n</blockquote>\n<p>So, to some degree the same things that the deref patterns initiative is attempting to generalize to other types?</p>\n</blockquote>\n<p>Deref Patterns would cover <code>box_patterns</code>, rather than these others. DerefMove would cover DerefMove, but Box needs some more magic that's tough to describe in terms of actual library features (I tried in lccc's liballoc, and just ended up making a magic unstable \"DerefPlace\" trait)</p>",
        "id": 265609772,
        "sender_full_name": "Connor Horman",
        "timestamp": 1640030642
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/237824-t-lang.2Fdoc/topic/Definition.20of.20.22primitive.20type.22/near/265609660\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>For the former, I personally think we <em>should</em> document and guarantee layout optimization for <em>anything</em> of the form <code>enum X { Y, Z(TypeWithNiche) }</code>.</p>\n</blockquote>\n<p>I thought this was already the case.</p>\n</blockquote>\n<p>UCG does, but the stdlib docs only guarantee it for Option, and I haven't seen anything lang that extends that guarantee.</p>",
        "id": 265609838,
        "sender_full_name": "Connor Horman",
        "timestamp": 1640030672
    },
    {
        "content": "<p>/me would be happy to do an FCP on a reference PR that documents that guarantee.</p>",
        "id": 265623321,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1640039269
    },
    {
        "content": "<p>I too would like to see it. <br>\nSide note: Would that be the first piece of normative text in the Reference <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span>?</p>",
        "id": 265625001,
        "sender_full_name": "Connor Horman",
        "timestamp": 1640040495
    },
    {
        "content": "<p>(I can probably draft up something for that tomorrow if nobody else does before then)</p>",
        "id": 265625204,
        "sender_full_name": "Connor Horman",
        "timestamp": 1640040619
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"257758\">Connor Horman</span> <a href=\"#narrow/stream/237824-t-lang.2Fdoc/topic/Definition.20of.20.22primitive.20type.22/near/265625001\">said</a>:</p>\n<blockquote>\n<p>I too would like to see it. <br>\nSide note: Would that be the first piece of normative text in the Reference <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span>?</p>\n</blockquote>\n<p>I was under the impression that we had various more-or-less normative text there, to the extent we treat the reference as normative.</p>",
        "id": 265625579,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1640040851
    },
    {
        "content": "<p>The reference itself currently says that it isn't normative</p>\n<blockquote>\n<p>Finally, this book is not normative. It may include details that are specific to rustc itself, and should not be taken as a specification for the Rust language. We intend to produce such a book someday, and until then, the reference is the closest thing we have to one.</p>\n</blockquote>\n<p><a href=\"https://doc.rust-lang.org/nightly/reference/#what-the-reference-is-not\">https://doc.rust-lang.org/nightly/reference/#what-the-reference-is-not</a></p>\n<p>That would be nice to change, or otherwise have a separate normative spec for the language (in either case, I am most certainly willing to work on such).</p>",
        "id": 265629192,
        "sender_full_name": "Connor Horman",
        "timestamp": 1640043585
    },
    {
        "content": "<p>so... wg-specification when?</p>",
        "id": 265629328,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640043694
    },
    {
        "content": "<p>There definately needs to be a Language spec (and, tbh, the stdlib docs could use some tuning to be a spec itself, though I find them sufficiently normative to treat them as such).</p>",
        "id": 265629403,
        "sender_full_name": "Connor Horman",
        "timestamp": 1640043736
    },
    {
        "content": "<p>Might also work to just change that disclaimer on the reference to say \"nothing is normative unless explicitly specified as such\".</p>",
        "id": 265654717,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1640071285
    },
    {
        "content": "<p>I think, given how long UCG has had important info sitting around that has never been RFC'd or added to the Reference or anything similar, that while I would love to have things start becoming more normative, it's probably gonna be \"a whole thing\" to get momentum on.</p>",
        "id": 265655360,
        "sender_full_name": "Lokathor",
        "timestamp": 1640071999
    }
]