[
    {
        "content": "<p>@ehuss I did the research and figured it out. The gist of it is that while other items allow unused const parameters (effectively phantom const parameters), <code>impl</code> does not.</p>",
        "id": 222205599,
        "sender_full_name": "isHavvy",
        "timestamp": 1610253489
    },
    {
        "content": "<p>The previous PR says that its types that allow unconstrained const params, but <code>fn</code> and <code>trait</code> allow them too: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=55a658fb283e0e7dd4b7ffc9a2689b5c\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=55a658fb283e0e7dd4b7ffc9a2689b5c</a></p>",
        "id": 222205616,
        "sender_full_name": "isHavvy",
        "timestamp": 1610253573
    },
    {
        "content": "<p>It doesn't directly affect your current PR, but you may want to add this change to it? I'm willing to r+ your current PR if we want to do this in a separate PR (which I can write if you want)</p>",
        "id": 222205681,
        "sender_full_name": "isHavvy",
        "timestamp": 1610253692
    },
    {
        "content": "<p>Yea, I think the term \"type\" wasn't precise, and I can clarify that.</p>\n<p>The higher question was how should <a href=\"https://github.com/rust-lang/reference/blob/master/src/items/implementations.md#generic-implementations\">https://github.com/rust-lang/reference/blob/master/src/items/implementations.md#generic-implementations</a> be updated?  Just change the second sentence to \"Type and const parameters…must be used at least once…\"?</p>\n<p>It looks like lifetimes don't have to be used in an impl, which is weird.</p>",
        "id": 222205895,
        "sender_full_name": "Eric Huss",
        "timestamp": 1610254125
    },
    {
        "content": "<p>I was uncertain if \"constrained\" is a technical term with specific meaning that is more elaborate than \"used\".</p>",
        "id": 222205949,
        "sender_full_name": "Eric Huss",
        "timestamp": 1610254221
    },
    {
        "content": "<p>I think \"constrained\" does have more meaning.  This example \"uses\" the type parameter in the predicate, but it is still unconstrained:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">S</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nb\">PartialEq</span> <span class=\"p\">{}</span><span class=\"w\">  </span><span class=\"c1\">// ERROR: T is not constrained</span>\n</code></pre></div>",
        "id": 222206084,
        "sender_full_name": "Eric Huss",
        "timestamp": 1610254517
    },
    {
        "content": "<p>So I don't know how to define the word \"constrained\" correctly.</p>",
        "id": 222206090,
        "sender_full_name": "Eric Huss",
        "timestamp": 1610254536
    },
    {
        "content": "<p>Constrained means that the parameter is used to select a specific monomorphization. \"Used\" basically sums it up. If we want to be precise, I'd be okay with a parenthetical \"constrained (used)\" and you know how much I'm normally against them.</p>",
        "id": 222206141,
        "sender_full_name": "isHavvy",
        "timestamp": 1610254618
    },
    {
        "content": "<p><span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 222206155,
        "sender_full_name": "Eric Huss",
        "timestamp": 1610254643
    },
    {
        "content": "<p><code>T</code> doesn't constrain <code>S</code> in your example, because it doesn't, uhhh, connect to <code>S</code> in any way.</p>",
        "id": 222206198,
        "sender_full_name": "isHavvy",
        "timestamp": 1610254706
    },
    {
        "content": "<p>Ah, I see this comment about lifetimes: <code>Disallow unconstrained lifetimes, but only if they appear in assoc types.</code>   I wonder why…</p>",
        "id": 222206214,
        "sender_full_name": "Eric Huss",
        "timestamp": 1610254762
    },
    {
        "content": "<p>The comment also mentions backwards compatibility and unhygenic macros.</p>",
        "id": 222206217,
        "sender_full_name": "isHavvy",
        "timestamp": 1610254799
    },
    {
        "content": "<p>ah..., a footnote <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 222206264,
        "sender_full_name": "Eric Huss",
        "timestamp": 1610254834
    },
    {
        "content": "<p>It's getting pretty late where I am.  I'll try to look at fixing these up tomorrow.</p>",
        "id": 222206275,
        "sender_full_name": "Eric Huss",
        "timestamp": 1610254894
    },
    {
        "content": "<p>If you want, I can send a PR against your branch tonight.</p>",
        "id": 222206321,
        "sender_full_name": "isHavvy",
        "timestamp": 1610254953
    },
    {
        "content": "<p>Yea, if you'd like, that would be great!</p>",
        "id": 222206322,
        "sender_full_name": "Eric Huss",
        "timestamp": 1610254972
    },
    {
        "content": "<p><em>cracks fingers</em></p>",
        "id": 222206520,
        "sender_full_name": "isHavvy",
        "timestamp": 1610255338
    },
    {
        "content": "<p>OMG, _why_ _why_ _why_?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// compiles</span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">HasAssocType</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Struct</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Struct</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// Error: the lifetime parameter `'a` is not constrained by the impl trait, self type, or predicates</span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">HasAssocType</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Struct</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">Struct</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 222210049,
        "sender_full_name": "isHavvy",
        "timestamp": 1610262492
    },
    {
        "content": "<p>In the first case <code>'a</code> is simply unused, so it doesn't matter what the used lifetime is. In the second case it is used but not constrained, so it is unknown what to use.</p>",
        "id": 222213630,
        "sender_full_name": "bjorn3",
        "timestamp": 1610269934
    },
    {
        "content": "<p>So, I kinda had to leave the computer for a bit after I saw that, and actually watched TV for the first time in over a year. I need to add it to my work, but it's now 3am and I'm going to bed. The good news is that most of this work is actually about documenting constraining at all and constants act almost entirely like type parameters, so I see no reason to care about it in the const generics documentation other than that one line which might as well be done with the defining of constraining.</p>",
        "id": 222217566,
        "sender_full_name": "isHavvy",
        "timestamp": 1610277147
    },
    {
        "content": "<p>Just finished my writing on constraining.</p>",
        "id": 222264037,
        "sender_full_name": "isHavvy",
        "timestamp": 1610346859
    }
]