[
    {
        "content": "<p>This term is used in the reference exactly once.  I wonder if it's worth moving away from it... It's a little confusing to beginners when put together with \"expression\"s.</p>",
        "id": 244518755,
        "sender_full_name": "Charles Lew",
        "timestamp": 1625115657
    },
    {
        "content": "<p>Do you have any suggestions to use instead?  \"type expression\" is used in several other languages, so there is some precedent as a term of art.</p>\n<p>The reference isn't generally geared towards beginners.  It is great if it can be written clearly and simply enough for beginners to understand, but that can be difficult with the information-dense nature of a reference.</p>",
        "id": 244576632,
        "sender_full_name": "Eric Huss",
        "timestamp": 1625150298
    },
    {
        "content": "<blockquote>\n<p>The reference isn't generally geared towards beginners.</p>\n</blockquote>\n<p>I know, but i feel reference is in a better position to align Rust terms. (The Rust book is actually a little vague in terms at many perspective)</p>\n<blockquote>\n<p>Do you have any suggestions to use instead?</p>\n</blockquote>\n<p>Not really... I saw the grammar production is just called <code>Type</code>, and RFC 0803 also call it <code>Type</code>.</p>",
        "id": 244654431,
        "sender_full_name": "Charles Lew",
        "timestamp": 1625194060
    },
    {
        "content": "<p>i feel like \"type expression\" might make more sense in languages that have first-class types?</p>",
        "id": 244654499,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1625194130
    },
    {
        "content": "<p>following up on this: it looks like C99 uses \"type name\" for what we call \"type expression\" in the Reference, though if we adopt that, we might want to clarify that it is more general than \"types designated solely by identifiers or keywords\"</p>",
        "id": 245199820,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1625672187
    },
    {
        "content": "<p>I think \"type expression\" is much preferable to \"type name\", which sounds like what rustc calls a \"path\". It's a little jargony but a bit of clarification should be sufficient. \"Type\" alone can sometimes be used to mean an abstract type, e.g. after normalization, or just in some type theory sense, while \"type expression\" is being more explicit about the fact that it is the syntax that is being considered</p>",
        "id": 245266761,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625712032
    },
    {
        "content": "<p>People might ask the question \"if it's a type expression, when will it be evaluated?\"</p>",
        "id": 245267660,
        "sender_full_name": "Charles Lew",
        "timestamp": 1625713477
    },
    {
        "content": "<p>it kind of makes sense, because \"expression\" implies syntax beyond identifiers. too bad we don't exactly have an equivalent to C's concept of \"declarators\"</p>",
        "id": 245268588,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1625714997
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116458\">Charles Lew</span> <a href=\"#narrow/stream/237824-t-lang.2Fdoc/topic/.22Type.20expression.22/near/245267660\">said</a>:</p>\n<blockquote>\n<p>People might ask the question \"if it's a type expression, when will it be evaluated?\"</p>\n</blockquote>\n<p>That's a very good question, and the answer is \"at compile time\". That's type normalization</p>",
        "id": 245270207,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625717285
    },
    {
        "content": "<p>yeah, Rust has type variables (kinda), but not quite first-class types</p>",
        "id": 245270318,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1625717465
    },
    {
        "content": "<p>Anyone who has seen crates like <a href=\"https://docs.rs/typenum/1.13.0/typenum/index.html\"><code>typenum</code></a> or C++ template metaprogramming know that type \"evaluation\" is absolutely a thing that happens and can be nearly as complex as any other programming</p>",
        "id": 245270321,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625717477
    },
    {
        "content": "<p>for the most part, in Rust, you don't seem to get to \"cross the streams\" and have the metaprogramming stuff available at run time</p>",
        "id": 245270439,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1625717633
    },
    {
        "content": "<p>(not counting proc macros, etc. as \"run time\")</p>",
        "id": 245270491,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1625717677
    },
    {
        "content": "<p>That's true, but I don't think that disqualifies them to be called expressions. Const eval even uses actual <em>expression</em> expressions for compile time evaluation, so I think the compile-time/run-time distinction is orthogonal to whether it is an expression or not (which to me is more a syntactic property of whether it has a composed grammar and some kind of evaluation semantics)</p>",
        "id": 245270593,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625717881
    },
    {
        "content": "<p>\"has a syntax that includes punctuation and nesting\" <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 245270792,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1625718158
    },
    {
        "content": "<p>input constraints to type and lifetime inference amount to a declarative programming language, don't they? (maybe an imperfectly formalized one at the momentâ€¦)</p>",
        "id": 245270962,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1625718409
    },
    {
        "content": "<p>oh boy, I can't wait to see a BF interpreter written in lifetime inference <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 245271027,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625718485
    },
    {
        "content": "<p>Polonius uses datalog to encode the lifetime rules. AFAIK datalog is a no-turing complete subset of prolog.</p>",
        "id": 245275519,
        "sender_full_name": "bjorn3",
        "timestamp": 1625724666
    },
    {
        "content": "<p>they said that about the C preprocessor too but <a href=\"http://theorangeduck.com/page/c-preprocessor-turing-complete\">that didn't stop them</a></p>",
        "id": 245289456,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625735766
    }
]