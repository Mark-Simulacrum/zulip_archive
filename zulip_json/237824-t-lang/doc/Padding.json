[
    {
        "content": "<p>Should we describe <em>padding</em> as a type?</p>",
        "id": 209163355,
        "sender_full_name": "isHavvy",
        "timestamp": 1599284791
    },
    {
        "content": "<p>From the perspective of the reference. Padding is like a field added automatically to various other types. It's never nameable of course, but it's still there.</p>",
        "id": 209163462,
        "sender_full_name": "isHavvy",
        "timestamp": 1599285108
    },
    {
        "content": "<p>we could do this -- though I feel it is easier to describe as the gap between where the fields/types are</p>",
        "id": 209167953,
        "sender_full_name": "RalfJ",
        "timestamp": 1599294638
    },
    {
        "content": "<p>that also more intuitively explains why its content is lost on copy</p>",
        "id": 209167955,
        "sender_full_name": "RalfJ",
        "timestamp": 1599294651
    },
    {
        "content": "<p>Hmm, I should try to write a rough draft then. Though not tonight. I'm already past my bedtime.</p>",
        "id": 209170566,
        "sender_full_name": "isHavvy",
        "timestamp": 1599299370
    },
    {
        "content": "<p>When I wrote something similar for a different language, I simply noted that there are two different representations: the <em>object-representation</em> which is the contiguous sequence of bytes that make up an object (which is nothing more than a region of storage allocated for the purposes of representing some value of some type for some lifetime), and the <em>value-representation</em> which are the bytes that determine the value. It doesn't explicitly mention padding, but it notes that object types may have  bytes in the <em>object-representation</em> which do not participate in the <em>value-representation</em>,  and that such bytes may be uninitialized. Rust could likely adopt similar wording, not mentioning padding by a name, but simply saying that some types may have bytes in the <em>object-representation</em> (or the equivalent for rust) that are not used to determine that value, and that they may be uninitialized.</p>",
        "id": 209950816,
        "sender_full_name": "Connor Horman",
        "timestamp": 1600033378
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"257758\">@Connor Horman</span> you mean, something like <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/value-domain.md\">https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/value-domain.md</a> ?</p>",
        "id": 209972600,
        "sender_full_name": "RalfJ",
        "timestamp": 1600068676
    },
    {
        "content": "<p>but given that padding is a thing people coming to Rust already know, and what to know how it works here, I think we have to use the term</p>",
        "id": 209972621,
        "sender_full_name": "RalfJ",
        "timestamp": 1600068709
    },
    {
        "content": "<p>(also, for <code>union</code> types defining the \"value representation\" will likely have to explicitly <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/156\">talk about padding</a> :/ )</p>",
        "id": 209972725,
        "sender_full_name": "RalfJ",
        "timestamp": 1600068777
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/237824-t-lang.2Fdoc/topic/Padding/near/209972600\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"257758\">Connor Horman</span> you mean, something like <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/value-domain.md\">https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/value-domain.md</a> ?</p>\n</blockquote>\n<p>Seems similar in concept. <code>[r]</code> seems to be the <em>object-representation</em>.  </p>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/237824-t-lang.2Fdoc/topic/Padding/near/209972621\">said</a>:</p>\n<blockquote>\n<p>but given that padding is a thing people coming to Rust already know, and what to know how it works here, I think we have to use the term</p>\n</blockquote>\n<p>My point may still be useful, simply with a note (possibly a non-normative note) that such bytes are called \"Padding Bytes\" (I believe that in the specification I mentioned, I did include a non-normative note naming those bytes \"padding bytes\", but only because any further mention was only made in other notes).</p>\n<p>For unions, I used something similar to C++'s active member, which rust could similarily adopt. Rather than being UB to access in inactive member, you can directly access any variant provided it yields a valid value. </p>\n<p>(I also add special cases for zeroed memory, as well as common-initial sequence requirements)</p>",
        "id": 209992160,
        "sender_full_name": "Connor Horman",
        "timestamp": 1600083082
    },
    {
        "content": "<p>ooh let's not use \"active member\". <a href=\"https://doc.rust-lang.org/reference/items/unions.html#reading-and-writing-union-fields\">the reference</a> currently doesn't do it, and it'd be a bad move to add active members into the mix.</p>",
        "id": 210020871,
        "sender_full_name": "Lokathor",
        "timestamp": 1600096908
    },
    {
        "content": "<p>yeah, active members are not a thing in Rust if I have any say in how unions work^^</p>",
        "id": 210032891,
        "sender_full_name": "RalfJ",
        "timestamp": 1600102493
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"257758\">@Connor Horman</span> sure, I didn't mean to imply that padding was normative -- for most types, it is a \"derived notion\".</p>",
        "id": 210032932,
        "sender_full_name": "RalfJ",
        "timestamp": 1600102529
    },
    {
        "content": "<p>however, for unions, I think we have to actually include this definition in the normative part... I wish the value representation of unions is just \"a sequence of bytes of the appropriate length\" (i.e., identical to the object representation), but to reflect what real calling conventions to we'll likely have to say that the value representation has \"gaps\" when there is padding in the field types :/</p>",
        "id": 210033085,
        "sender_full_name": "RalfJ",
        "timestamp": 1600102596
    },
    {
        "content": "<p>I'm way too distracted by Final Fantasy 14, and knowing me, I'll be distracted for a few more months. Connor, since you've done this kind of thing before, do you want to take your hand at writing about padding?</p>\n<p>I also think it's important to name these things so that people can <em>search</em> for them. Obscuring concepts is a bad idea.</p>",
        "id": 210094401,
        "sender_full_name": "isHavvy",
        "timestamp": 1600151490
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296643\">isHavvy</span> <a href=\"#narrow/stream/237824-t-lang.2Fdoc/topic/Padding/near/210094401\">said</a>:</p>\n<blockquote>\n<p>I'm way too distracted by Final Fantasy 14, and knowing me, I'll be distracted for a few more months. Connor, since you've done this kind of thing before, do you want to take your hand at writing about padding?</p>\n<p>I also think it's important to name these things so that people can <em>search</em> for them. Obscuring concepts is a bad idea.</p>\n</blockquote>\n<p>I can certainly try. Is there a particular place I should write the draft, or is just here in the zulip topic fine?</p>\n<p>I do agree naming things are important, but I don't believe that padding is important enough to warrant a normative term, and simply mentioning that it can be called padding in a note is sufficient.</p>",
        "id": 210207457,
        "sender_full_name": "Connor Horman",
        "timestamp": 1600214570
    },
    {
        "content": "<p>A PR against the reference would be best, but failing that, posting it in here works too.</p>",
        "id": 210211327,
        "sender_full_name": "isHavvy",
        "timestamp": 1600218030
    },
    {
        "content": "<p>not sure what exactly you mean by \"normative term\", but IMO it should appear in the glossary</p>",
        "id": 210250985,
        "sender_full_name": "RalfJ",
        "timestamp": 1600257662
    },
    {
        "content": "<p>to teach people this stuff we have to start with what they know, and many have at least heard the term \"padding\" in a C context</p>",
        "id": 210251021,
        "sender_full_name": "RalfJ",
        "timestamp": 1600257691
    },
    {
        "content": "<p>the Rust reference isn't nearly as structured and normative as the C/C++ standard, and IMO that's fine at the current stage</p>",
        "id": 210251060,
        "sender_full_name": "RalfJ",
        "timestamp": 1600257718
    },
    {
        "content": "<p>That's entirely fair. Though I am very interested in rust having a full specification, rather than rust being monolithic system which is simply defined by the sole correct implementation.<br>\nA \"Normative Term\" is simply a term that has meaning assigned by the specification (rather than simply in a note), and therefore can be referenced by it.</p>",
        "id": 210330094,
        "sender_full_name": "Connor Horman",
        "timestamp": 1600297052
    },
    {
        "content": "<p>I think we largely do want to get there some day, but just disagree about the expected time scale to get there.</p>",
        "id": 210334947,
        "sender_full_name": "Lokathor",
        "timestamp": 1600301206
    },
    {
        "content": "<p>yeah I certainly want a full spec for Rust. in my eyes, a \"full spec\" is at least partially a  mathematical document though, not a bunch of plain English. something more <a href=\"https://dl.acm.org/doi/10.1145/3140587.3062363\">like this</a>.</p>",
        "id": 210504257,
        "sender_full_name": "RalfJ",
        "timestamp": 1600427257
    }
]