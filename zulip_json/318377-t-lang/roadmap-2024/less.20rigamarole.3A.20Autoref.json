[
    {
        "content": "<blockquote>\n<p>Autoref, operators, and clones: Generic methods that operate on references sometimes necessitate types like <code>&amp;u32</code>; since <code>u32</code> is <code>Copy</code>, we could automatically make it a reference. We’ve historically had some hesitance to add more reference-producing operations, because it can lead to types the user doesn’t expect (e.g. <code>&amp;&amp;&amp;str</code>). We have some ideas to simplify those cases and avoid unnecessary double-references.</p>\n</blockquote>\n<p>This explanation doesn't make much sense to me. It should probably be re-worded. Josh said that an example is something like <code>foo(arg: &amp;u32)</code> and then calling <code>foo(4)</code>. In this case, the compiler would just act like you'd written <code>foo(&amp;4)</code> instead. However, that doesn't explain what <code>Copy</code> has to do with anything here. If the explanation is something like \"Because the value is Copy then you don't drop it accidentally\", I guess that's fine, but with all the <code>AsRef&lt;str&gt;</code> and <code>AsRef&lt;Path&gt;</code> stuff in the standard library you can already accidentally drop an allocated thing (by passing in a String or PathBuf directly), and the \"fix\" is that you get an error if you try to use the thing you dropped on accident, and then you go back and put in the <code>&amp;</code> that you meant to put.</p>",
        "id": 276229735,
        "sender_full_name": "Lokathor",
        "timestamp": 1647971921
    },
    {
        "content": "<p>I think that's a fair concern; it's not that we <em>couldn't</em> make a reference out of a non-Copy type, it's more that with Copy types this is more likely to arise, and that it feels safer to do with Copy types.</p>",
        "id": 276230537,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647972184
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> who is particularly interested in autoref, and who may have thoughts on better wording there.</p>",
        "id": 276230580,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647972202
    },
    {
        "content": "<p>Certainly the time I've wanted this the most is with a <code>HashMap&lt;K:Copy, V&gt;</code></p>",
        "id": 276230902,
        "sender_full_name": "Lokathor",
        "timestamp": 1647972318
    },
    {
        "content": "<p>Personally, I'm a big fan of the general \"discarding ownership\" idea, even for non-copy things.  Assuming some basic things like<br>\n1) It actually \"moves\" so long as it's written like a move (so <code>let x: String = ...; foo(x);</code> would invalidate <code>x</code> from further use even if <code>foo</code> only took <code>&amp;str</code>)<br>\n2) There are good lints for basic things like \"you can just pass <code>foo(&amp;x)</code>; no need for <code>foo(x.clone())</code>\".</p>",
        "id": 276237444,
        "sender_full_name": "scottmcm",
        "timestamp": 1647974971
    },
    {
        "content": "<p>for me the most common annoyance is getting an <code>&amp;usize</code> out of a match</p>",
        "id": 276277761,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647997805
    },
    {
        "content": "<p>e.g. <code>match &amp;some_struct { Foo { x } }</code></p>",
        "id": 276277818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647997915
    },
    {
        "content": "<p>but another common thing is the <code>x.iter().filter(|x| **x &gt; 3)</code> or stuff like that</p>",
        "id": 276277858,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647997929
    },
    {
        "content": "<p>if we <em>do</em> generalize this to cover things with destructors, then I'd want to make sure that we drop things at \"roughly\" the spot you expect. I.e. for <code>let b = Box::new(...); fn foo(&amp;Box&lt;T&gt;) { ... } foo(b);</code>, I'd expect there to be a destruction scope immediately following the call to <code>foo</code> that handles dropping <code>b</code> (instead of having it be dropped at the end of the scope of the <code>let b</code>).</p>",
        "id": 277434188,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648826450
    },
    {
        "content": "<p><del>wait, my example was not helpful as written. Let me fix.</del> done</p>",
        "id": 277434251,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648826477
    },
    {
        "content": "<p>and in any case, I think we can+should focus on delivering the <em>easy</em> case first: Handle <code>Copy</code> types (or at least types w/o a destructor), and work out the details of what I'm saying above later, after people have already demonstrated that they like the more restricted form of the feature.</p>",
        "id": 277434619,
        "sender_full_name": "pnkfelix",
        "timestamp": 1648826611
    },
    {
        "content": "<p>Yeah, the \"de-sugar\" for a missing <code>&amp;</code> would just be</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">--</span>-&gt; <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>And this pattern works regardless of Copy or not. The fact that doing a <code>drop</code> on a Copy value is pointless doesn't make the pattern not work. That way people don't have to learn two separate situations for \"what this means\".</p>",
        "id": 277508363,
        "sender_full_name": "Lokathor",
        "timestamp": 1648877981
    },
    {
        "content": "<p>Might even be able to just phrase it as <code>foo(x) ---&gt; foo(&amp;{x})</code>.</p>",
        "id": 277508620,
        "sender_full_name": "scottmcm",
        "timestamp": 1648878368
    }
]