[
    {
        "content": "<p>A fun experimental paper from the recent C++ committee mailing - \"Are modules fast?\" (<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1441r1.pdf\" target=\"_blank\" title=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1441r1.pdf\">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1441r1.pdf</a>)</p>",
        "id": 164355909,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1556403056
    },
    {
        "content": "<p>The proposed C++ modules are very similar to our packages and they similarly don't scale to massively parallel builds.</p>",
        "id": 164355981,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1556403160
    },
    {
        "content": "<p>I wonder if Cargo eventually ends up compiling leaf crates multiple times given enough parallelism to compensate deep dependency trees, that would be kind of a reasonable return to the header inclusion model.</p>",
        "id": 164356076,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1556403337
    },
    {
        "content": "<p>Or maybe that's a nonsense, unless builds span multiple machines.</p>",
        "id": 164356546,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1556404103
    },
    {
        "content": "<p>interesting</p>",
        "id": 164460025,
        "sender_full_name": "mw",
        "timestamp": 1556550384
    },
    {
        "content": "<p>FWIW I've often though that Cargo's model of compilation is basically unsuitable for the \"we have infinite parallelism\" compilation model (aka distributed compilation)</p>",
        "id": 164565294,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1556650368
    },
    {
        "content": "<p>My gut is that we would have to rethink quite a lot to really take advantage of infinite parallelism, and all of cargo/rustc/parallelism we have today is really heavily optimized for \"reasonable parallelism on one machine\"</p>",
        "id": 164565351,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1556650420
    },
    {
        "content": "<p>although that is also starting to show wear and tear with lots of cpus and big crate graphs...</p>",
        "id": 164565371,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1556650434
    },
    {
        "content": "<p>I have a machine with 14 physical cores and the difference between C++ compilation and Rust compilation is huge (e.g. in Firefox). Compilation of Rust code doesn't get close to saturating the cores.</p>",
        "id": 164582722,
        "sender_full_name": "njn",
        "timestamp": 1556663660
    },
    {
        "content": "<p>That's my primary motivation for working on pipelining.</p>",
        "id": 164583512,
        "sender_full_name": "njn",
        "timestamp": 1556664350
    },
    {
        "content": "<p>IMO fixing <a href=\"https://github.com/rust-lang/rust/issues/54712#issuecomment-485656192\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54712#issuecomment-485656192\">https://github.com/rust-lang/rust/issues/54712#issuecomment-485656192</a> and <a href=\"https://github.com/rust-lang/rust/issues/58485#issuecomment-485658943\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/58485#issuecomment-485658943\">https://github.com/rust-lang/rust/issues/58485#issuecomment-485658943</a> would provide a better improvement than pipelining</p>",
        "id": 164622405,
        "sender_full_name": "eddyb",
        "timestamp": 1556716743
    },
    {
        "content": "<p>Rust also saturates all the cores during codegen, and ofc during running tests</p>",
        "id": 164622434,
        "sender_full_name": "eddyb",
        "timestamp": 1556716794
    },
    {
        "content": "<p>but this is with incremental. for batch compilation, pipelining should be a clear win</p>",
        "id": 164622500,
        "sender_full_name": "eddyb",
        "timestamp": 1556716833
    },
    {
        "content": "<p>(I assumed you meant \"compiling rustc\" but that's not all the Rust code out there, heh)</p>",
        "id": 164622533,
        "sender_full_name": "eddyb",
        "timestamp": 1556716872
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> your improvements are rustc-specific though I think, right? They're not generally applicable to crate graphs in the large?</p>",
        "id": 164631390,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1556724157
    },
    {
        "content": "<p>that last message from me should've started with \"oops\"</p>",
        "id": 164631431,
        "sender_full_name": "eddyb",
        "timestamp": 1556724195
    },
    {
        "content": "<p>(I had misread what <span class=\"user-mention\" data-user-id=\"120989\">@nnethercote</span> had said. and now I can't edit my messages to make it even clearer)</p>",
        "id": 164631561,
        "sender_full_name": "eddyb",
        "timestamp": 1556724290
    }
]