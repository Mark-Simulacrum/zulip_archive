[
    {
        "content": "<p>The pipelining work is very exciting - I've been thinking/talking about it, but hadn't realized that there had been so much substantial work. I'm interested in extending Buck to support it. What should I be looking at? What caveats are there (aside from \"all very experimental/unstable, expect it to stabilize in some other form\")? Is there anything that's deeply, intrinsically Cargo-specific?</p>",
        "id": 166114738,
        "sender_full_name": "Jeremy Fitzhardinge",
        "timestamp": 1558382101
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"213049\">@Jeremy Fitzhardinge</span> the design currently matches pretty closely with the <a href=\"https://github.com/rust-lang/compiler-team/blob/master/working-groups/pipelining/NOTES.md\" target=\"_blank\" title=\"https://github.com/rust-lang/compiler-team/blob/master/working-groups/pipelining/NOTES.md\">initial notes</a>, nothing is really Cargo specific in the sense that it's just flags in rustc really</p>",
        "id": 166123964,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1558390210
    },
    {
        "content": "<p>Buck may or may not architecturally be ready for the model of pipelined compilation we're using though</p>",
        "id": 166123973,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1558390228
    },
    {
        "content": "<p>which is that halfway through a step's execution it can produce an artifact which is consumed by further steps</p>",
        "id": 166123978,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1558390242
    },
    {
        "content": "<p>so you basically have to watch a process, wait for a signal via stdout that a file is ready, go spawn more work, and then continue to wait for the original process</p>",
        "id": 166123999,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1558390267
    },
    {
        "content": "<p>and then also make sure you synchronize correctly when linking and all that (wait entirely for dependencies rather than just their metadata)</p>",
        "id": 166124010,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1558390285
    },
    {
        "content": "<p>I think I can model it as two separate build actions which internally depend on a single rustc invocation, so each can \"finish\" when the corresponding artifact is ready.</p>",
        "id": 166124639,
        "sender_full_name": "Jeremy Fitzhardinge",
        "timestamp": 1558390908
    },
    {
        "content": "<p>One design change I'd like to see: the <code>artifact</code> message should also have which thing is being emitted rather than having it being implied by the filename extension. eg, <code>{\"artifact\":\"/Users/jsgf/git/cargo/target/release/deps/libsemver-46a2b7dea0b8356b.rmeta\", \"emit\": \"metadata\"}</code>(to match the <code>--emit</code> option).</p>",
        "id": 166124741,
        "sender_full_name": "Jeremy Fitzhardinge",
        "timestamp": 1558391014
    },
    {
        "content": "<p>The \"two action\" model will naturally get the deps right, so long as I make a library build depend on the rmeta, and the link depend on the rlib (and the partial ordering of all the rmeta -&gt; rlib dependencies will make everything else work out).</p>",
        "id": 166124864,
        "sender_full_name": "Jeremy Fitzhardinge",
        "timestamp": 1558391152
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span>  ^</p>",
        "id": 166126039,
        "sender_full_name": "Jeremy Fitzhardinge",
        "timestamp": 1558392228
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"213049\">@Jeremy Fitzhardinge</span> ah yeah this is the original model I implemented in Carog</p>",
        "id": 166127348,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1558393557
    },
    {
        "content": "<p>we ended up not landing it because it was too invasive and had weird repercussions elsewhere in Cargo</p>",
        "id": 166127400,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1558393572
    },
    {
        "content": "<p>but Cargo handles a lot more I think than buck probably does (aka build scripts and such)</p>",
        "id": 166127405,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1558393584
    },
    {
        "content": "<p>we ended up with a model of each action produces some number of outputs</p>",
        "id": 166127409,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1558393595
    },
    {
        "content": "<p>and you depend on an action + an output</p>",
        "id": 166127415,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1558393601
    },
    {
        "content": "<p>(e.g. the edges in the dependency graph are annotated with an output they depend on)</p>",
        "id": 166127418,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1558393609
    },
    {
        "content": "<p>and that way when an output is ready you delete all those edges and then just continuously schedule things that have no dependencies that aren't finished</p>",
        "id": 166127434,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1558393629
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> It would help if build scripts had proper dependencies, then it would be a clean mapping. I'm assuming that Cargo has to maintain a pile of pseudo dependencies to try and sequence <a href=\"http://build.rs\" target=\"_blank\" title=\"http://build.rs\">build.rs</a> builds and execution correctly.</p>",
        "id": 166128627,
        "sender_full_name": "Jeremy Fitzhardinge",
        "timestamp": 1558394833
    },
    {
        "content": "<p>Nah it's more just sequencing compiles appropriately that was the issue</p>",
        "id": 166128654,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1558394863
    },
    {
        "content": "<p>the deps issue is actually quite easy within cargo, this was just making sure we got as much parallelism as we could without tampering with cargo's entire backend</p>",
        "id": 166128702,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1558394884
    },
    {
        "content": "<p>Yeah, but the build depends on running the buildscript for its side-effects, which means that it can't overlap the crate's build. Nor do you really know when it needs rebuilding.</p>",
        "id": 166128894,
        "sender_full_name": "Jeremy Fitzhardinge",
        "timestamp": 1558395074
    }
]