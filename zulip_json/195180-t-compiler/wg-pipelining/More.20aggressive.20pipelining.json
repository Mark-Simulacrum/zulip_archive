[
    {
        "content": "<p>I tried making pipelining more aggressive, by moving metadata generation from after analysis (typeck, borrowck, etc.) to before analysis. This increases the amount of overlap possible. It's basically working (only 3 tests fail in the entire rustc test suite, not sure why yet), but the performance results are disappointing: <a href=\"https://paste.mozilla.org/0qBZWYjv\" target=\"_blank\" title=\"https://paste.mozilla.org/0qBZWYjv\">https://paste.mozilla.org/0qBZWYjv</a></p>",
        "id": 174749169,
        "sender_full_name": "njn",
        "timestamp": 1567469579
    },
    {
        "content": "<p>That shows the effect of the existing pipelining, which has some big speedups like 1.79x, 1.39x, 1.38x, 1.17x.</p>",
        "id": 174749238,
        "sender_full_name": "njn",
        "timestamp": 1567469646
    },
    {
        "content": "<p>It also shows the effect of the more aggressive pipelining, which has much smaller speedups like 1.06x, 1.04x, 1.02x (and the 1.02x is probably indistinguishable from noise)</p>",
        "id": 174749245,
        "sender_full_name": "njn",
        "timestamp": 1567469700
    },
    {
        "content": "<p>I guess in hindsight it's not that surprising; code generation takes a lot longer than analysis</p>",
        "id": 174749259,
        "sender_full_name": "njn",
        "timestamp": 1567469723
    },
    {
        "content": "<p>Also, the more aggressive pipelining slows down some workflows slightly -- the production of type/borrow/other errors is slightly delayed by metadata generation. And that's a common workflow -- think about when you're repeatedly compiling code when working through errors.</p>",
        "id": 174749381,
        "sender_full_name": "njn",
        "timestamp": 1567469932
    },
    {
        "content": "<p>So I think it's probably not worthwhile pursuing further, overall.</p>",
        "id": 174749385,
        "sender_full_name": "njn",
        "timestamp": 1567469945
    },
    {
        "content": "<p>Did you measure how much time was spent doing analysis after metadata generation? I'd expect metadata generation to basically trigger all of it.</p>",
        "id": 174749651,
        "sender_full_name": "Zoxc",
        "timestamp": 1567470434
    },
    {
        "content": "<p>I rearranged things so that metadata generation finished before analysis started. This was non-trivial, given the way the passes are arranged.</p>",
        "id": 174752665,
        "sender_full_name": "njn",
        "timestamp": 1567476206
    },
    {
        "content": "<p>I have filed <a href=\"https://github.com/rust-lang/rust/issues/64112\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64112\">#64112</a> so others can see the code and results.</p>",
        "id": 174756890,
        "sender_full_name": "njn",
        "timestamp": 1567483598
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> ^^^ (in case you haven't already seen it)</p>",
        "id": 174835214,
        "sender_full_name": "njn",
        "timestamp": 1567549557
    },
    {
        "content": "<p>Hm interesting! It may also be the case that the meteadata generation ends up needing all of the analysis anyway, so moving it back may not actually skip any stages of compilation before it's generated</p>",
        "id": 174887905,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1567607860
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@nnethercote</span> it may be worth looking into optimizing metadata at some point</p>",
        "id": 174888046,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1567607954
    },
    {
        "content": "<p>IIRC it's pretty quick but still like megabyte big for a kilobyte crate</p>",
        "id": 174888062,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1567607964
    },
    {
        "content": "<p>so we're probably taking too long to emit it and/or storing way too much in there in one form or another</p>",
        "id": 174888077,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1567607978
    },
    {
        "content": "<p>+1 this would also help with distributed builds-- sending metadata elsewhere is slow today</p>",
        "id": 174898788,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1567614803
    },
    {
        "content": "<p>Just FYI, I'd like to remove metadata and just rely on stored queries instead. We currently store a lot of information in both metadata and the query cache, which is not very efficient.</p>",
        "id": 174902865,
        "sender_full_name": "Zoxc",
        "timestamp": 1567617847
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> I used debugging println statements to verify that metadata generation completes before analysis. It's possible I'm missing some subtlety, but the basic contours seem correct, and the results suggest that things really have changed to some degree.</p>",
        "id": 174920221,
        "sender_full_name": "njn",
        "timestamp": 1567629190
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> What are the filenames for metadata? .rmeta?</p>",
        "id": 174920252,
        "sender_full_name": "njn",
        "timestamp": 1567629220
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@nnethercote</span> yeah <code>*.rmeta</code></p>",
        "id": 174920911,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1567629634
    },
    {
        "content": "<p>and rustc has tons of caches internally</p>",
        "id": 174920919,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1567629639
    },
    {
        "content": "<p>so the time previously spent in analysis may just be shifted to metadata generation now</p>",
        "id": 174920929,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1567629647
    },
    {
        "content": "<p>(maybe)</p>",
        "id": 174920932,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1567629648
    },
    {
        "content": "<p>and the analysis phase, which happens later, just hits all the caches and doesn't actually do anything</p>",
        "id": 174920946,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1567629663
    },
    {
        "content": "<p>right, that's the subtleties/contours I was referring to</p>",
        "id": 174920964,
        "sender_full_name": "njn",
        "timestamp": 1567629673
    },
    {
        "content": "<p>just random guess as to why it may not help much</p>",
        "id": 174920965,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1567629673
    },
    {
        "content": "<p>codegen does take like 10x longer than analysis</p>",
        "id": 174920991,
        "sender_full_name": "njn",
        "timestamp": 1567629688
    },
    {
        "content": "<p>heh that too!</p>",
        "id": 174920999,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1567629701
    }
]