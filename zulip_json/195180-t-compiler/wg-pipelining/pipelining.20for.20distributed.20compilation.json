[
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span></p>",
        "id": 163124954,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1555007094
    },
    {
        "content": "<p>hi! I'm curious what your plans are, so far</p>",
        "id": 163125006,
        "sender_full_name": "eddyb",
        "timestamp": 1555007129
    },
    {
        "content": "<p>you can definitely do codegen \"on the second run\" right now, by relying on incremental caches</p>",
        "id": 163125041,
        "sender_full_name": "eddyb",
        "timestamp": 1555007151
    },
    {
        "content": "<p>and we want to optimize those, going forward</p>",
        "id": 163125086,
        "sender_full_name": "eddyb",
        "timestamp": 1555007164
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> so far my plan was not to use incremental at all because I didn't want the incremental inputs to dirty the cache entries</p>",
        "id": 163125172,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1555007221
    },
    {
        "content": "<p>once parsing is incremental, unchanged sources would probably mean it goes straight to codegen the second time, so you only have the overhead of loading the caches into memory (which is one of the things we want to optimize)</p>",
        "id": 163125183,
        "sender_full_name": "eddyb",
        "timestamp": 1555007227
    },
    {
        "content": "<p>I'm not sure what you're referring to</p>",
        "id": 163125188,
        "sender_full_name": "eddyb",
        "timestamp": 1555007235
    },
    {
        "content": "<p>what are \"incremental inputs\" and what \"cache entries\" would be dirtied?</p>",
        "id": 163125252,
        "sender_full_name": "eddyb",
        "timestamp": 1555007269
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> <span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 163125373,
        "sender_full_name": "eddyb",
        "timestamp": 1555007346
    },
    {
        "content": "<p>so the short version of this is that you tell the tool which command to run and what files it needs in order to run that command on either the local machine or another machine. the naiive behavior is to rerun whenever any of those inputs changes.</p>",
        "id": 163125424,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1555007399
    },
    {
        "content": "<p>if you sync incremental state you could be doing <code>cargo check</code> locally and codegen remotely</p>",
        "id": 163125548,
        "sender_full_name": "eddyb",
        "timestamp": 1555007462
    },
    {
        "content": "<p>potentially very efficiently</p>",
        "id": 163125571,
        "sender_full_name": "eddyb",
        "timestamp": 1555007478
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> I want to avoid potentially doing anything at all locally</p>",
        "id": 163125592,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1555007496
    },
    {
        "content": "<p>my kneejerk reaction is \"that's an antiquated design, you need more integration\", but it might still work</p>",
        "id": 163125613,
        "sender_full_name": "eddyb",
        "timestamp": 1555007514
    },
    {
        "content": "<p>okay, sure, what's the problem then?</p>",
        "id": 163125620,
        "sender_full_name": "eddyb",
        "timestamp": 1555007520
    },
    {
        "content": "<p>naively applying incremental just means some of those commands take less to run</p>",
        "id": 163125688,
        "sender_full_name": "eddyb",
        "timestamp": 1555007545
    },
    {
        "content": "<p>clever use of incremental would result in distributed deduplication of work</p>",
        "id": 163125724,
        "sender_full_name": "eddyb",
        "timestamp": 1555007573
    },
    {
        "content": "<p>kind of like how \"parallel rustc\" does queries, except cross-machine instead of cross-thread</p>",
        "id": 163125743,
        "sender_full_name": "eddyb",
        "timestamp": 1555007586
    },
    {
        "content": "<p>I still don't know what you mean by \"incremental inputs\" or \"cache entires\"</p>",
        "id": 163125777,
        "sender_full_name": "eddyb",
        "timestamp": 1555007621
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> when incremental reruns, it is taking advantage of the results of a previous build</p>",
        "id": 163125889,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1555007694
    },
    {
        "content": "<p>sort of, but less \"results\" and more \"intermediary computations\"</p>",
        "id": 163125923,
        "sender_full_name": "eddyb",
        "timestamp": 1555007721
    },
    {
        "content": "<p>sure</p>",
        "id": 163125932,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1555007727
    },
    {
        "content": "<p>it's really just persisted memoization</p>",
        "id": 163125934,
        "sender_full_name": "eddyb",
        "timestamp": 1555007727
    },
    {
        "content": "<p>almost the same thing as <code>rmeta</code>, but with a newer design</p>",
        "id": 163125963,
        "sender_full_name": "eddyb",
        "timestamp": 1555007761
    },
    {
        "content": "<p>no, the key difference is that the data is different depending on the last thing that you compiled</p>",
        "id": 163126040,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1555007788
    },
    {
        "content": "<p>the result of the previous build cannot be an input to the current build process</p>",
        "id": 163126067,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1555007816
    },
    {
        "content": "<p>wait, what is this even for?</p>",
        "id": 163126092,
        "sender_full_name": "eddyb",
        "timestamp": 1555007833
    },
    {
        "content": "<p><a href=\"https://chromium.googlesource.com/infra/goma/client/\" target=\"_blank\" title=\"https://chromium.googlesource.com/infra/goma/client/\">https://chromium.googlesource.com/infra/goma/client/</a></p>",
        "id": 163126094,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1555007842
    },
    {
        "content": "<p>it seems like you have a different usecase of \"distributed compilation\" in mind</p>",
        "id": 163126111,
        "sender_full_name": "eddyb",
        "timestamp": 1555007866
    },
    {
        "content": "<p>is this 100% batch builds?</p>",
        "id": 163126115,
        "sender_full_name": "eddyb",
        "timestamp": 1555007871
    },
    {
        "content": "<p>can you clarify what you mean by \"batch builds\"?</p>",
        "id": 163126194,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1555007918
    },
    {
        "content": "<p>like, with a strong requirement of starting from scratch every time?</p>",
        "id": 163126196,
        "sender_full_name": "eddyb",
        "timestamp": 1555007920
    },
    {
        "content": "<p>Yes, previous compilation outputs shouldn't affect the results of the current compilation.</p>",
        "id": 163126243,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1555007962
    },
    {
        "content": "<p>okay then that's not at all what I was thinking of, sorry</p>",
        "id": 163126262,
        "sender_full_name": "eddyb",
        "timestamp": 1555007979
    },
    {
        "content": "<p>so why would you even need split compiles? to run codegen on a different machine?</p>",
        "id": 163126334,
        "sender_full_name": "eddyb",
        "timestamp": 1555008006
    },
    {
        "content": "<p>you can still do what I said, you'd just be starting incremental from scratch and using it only once</p>",
        "id": 163126347,
        "sender_full_name": "eddyb",
        "timestamp": 1555008027
    },
    {
        "content": "<p>basically, run <code>rustc --emit=metadata</code> or w/e, in incremental mode, and copy the incremental cache to another machine</p>",
        "id": 163126375,
        "sender_full_name": "eddyb",
        "timestamp": 1555008060
    },
    {
        "content": "<p>you wouldn't be using it across builds, but within one build</p>",
        "id": 163126396,
        "sender_full_name": "eddyb",
        "timestamp": 1555008071
    },
    {
        "content": "<p>(<code>rmeta</code> doesn't have enough information to do codegen, but the incremental caches do)</p>",
        "id": 163126410,
        "sender_full_name": "eddyb",
        "timestamp": 1555008090
    }
]