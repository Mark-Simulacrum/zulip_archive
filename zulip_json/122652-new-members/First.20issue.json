[
    {
        "content": "<p>Hi, I'm looking to start contributing to the compiler, as the compiler team's<br>\nblog post mentioned that fixing some diagnostics bugs is a good place start,<br>\nwould <a href=\"https://github.com/rust-lang/rust/issues/94747\">https://github.com/rust-lang/rust/issues/94747</a> be a sensible first issue? <span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span></p>",
        "id": 275086735,
        "sender_full_name": "Oliver Downard",
        "timestamp": 1647076408
    },
    {
        "content": "<p>You will probably want to tweak the <a href=\"https://github.com/rust-lang/rust/blob/f0c4da49983aa699f715caf681e3154b445fb60b/compiler/rustc_span/src/lev_distance.rs#L58-L91\"><code>find_best_match_for_name</code></a> function. The current algo used is the <a href=\"https://en.wikipedia.org/wiki/Levenshtein_distance\">Levenshtein distance</a>, it's a good one but there are better one like <a href=\"https://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance\">Damerau–Levenshtein distance</a> or the <a href=\"https://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance#Optimal_string_alignment_distance\">Optimal String Alignment Distance</a>.</p>",
        "id": 275087188,
        "sender_full_name": "Urgau",
        "timestamp": 1647077177
    },
    {
        "content": "<p>In your case the problem is most probably the default maximum distance allowed (<a href=\"https://github.com/rust-lang/rust/blob/f0c4da49983aa699f715caf681e3154b445fb60b/compiler/rustc_span/src/lev_distance.rs#L74\"><code>dist</code></a>: <code>cmp::max(lookup.len(), 3) / 3</code>). Who is probably one off. Be aware that the default has probably been carefully chosen to give a maximum of possibilities with a minimum of false positive.</p>",
        "id": 275087396,
        "sender_full_name": "Urgau",
        "timestamp": 1647077589
    },
    {
        "content": "<p>Ah thanks, I figured it'd be something like changing the string difference algo. I'll have a look at the git history and see if there's anything relevant discussion I can find there</p>",
        "id": 275087674,
        "sender_full_name": "Oliver Downard",
        "timestamp": 1647078013
    },
    {
        "content": "<p>I think it is indeed a good first issue. A thing I would explore is increase the <code>dist</code> and run <code>./x.py test src/test/ui --bless</code> to see how the test suite output would change with that change to get an idea of the fallout of such a change.</p>",
        "id": 275567261,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1647459872
    },
    {
        "content": "<p>Ah yeah, I should give that a try as well (I've been over complicating it so far...). I've been having great fun writing a modified Levenshtein to consider substrings, realising that it doesn't work quite right in the cases I'd like and ending up (hopefully) with something that is quite a bit simpler. The tests have been really useful so far for getting the feel for the impact and providing useful test cases I can plug in to my testbench.</p>",
        "id": 275584049,
        "sender_full_name": "Oliver Downard",
        "timestamp": 1647468626
    },
    {
        "content": "<p>Is there a best-practices doc for creating you first issue?</p>",
        "id": 275916284,
        "sender_full_name": "Will",
        "timestamp": 1647705041
    },
    {
        "content": "<p>How does one easily search for proposals to avoid a dupe? I'd like to propose the vec-style \"dict[key] = value\" syntax for hashmaps, but I'm not sure whether it's already been proposed.</p>",
        "id": 275926159,
        "sender_full_name": "Will",
        "timestamp": 1647719162
    },
    {
        "content": "<p>Please don't post feature requests as issues. They are for tracking bugs, cleanup work, and accepted proposals.</p>",
        "id": 275926441,
        "sender_full_name": "Jubilee",
        "timestamp": 1647719524
    },
    {
        "content": "<p>What you are talking about would be an implementation of IndexMut for HashMap.</p>",
        "id": 275926478,
        "sender_full_name": "Jubilee",
        "timestamp": 1647719607
    },
    {
        "content": "<p>There are some non trivial problems with this. I can't recall where this was discussed but there are some good reasons for this not being a thing</p>",
        "id": 275926572,
        "sender_full_name": "mejrs",
        "timestamp": 1647719702
    },
    {
        "content": "<p>e.g. <a href=\"https://github.com/rust-lang/rust/pull/23559\">https://github.com/rust-lang/rust/pull/23559</a></p>",
        "id": 275926669,
        "sender_full_name": "mejrs",
        "timestamp": 1647719879
    },
    {
        "content": "<p>Here's another <a href=\"https://internals.rust-lang.org/t/impl-indexmut-for-hashmap/10963/10\">https://internals.rust-lang.org/t/impl-indexmut-for-hashmap/10963/10</a></p>",
        "id": 275926727,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1647719936
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/122652-new-members/topic/First.20issue/near/275926441\">said</a>:</p>\n<blockquote>\n<p>Please don't post feature requests as issues. They are for tracking bugs, cleanup work, and accepted proposals.</p>\n</blockquote>\n<p>My mistake, does \"first issue\" chat not apply to issues in <code>rust-lang/rfcs/issues</code>?</p>",
        "id": 275926982,
        "sender_full_name": "Will",
        "timestamp": 1647720234
    },
    {
        "content": "<p>Zulip threads are more like GitHub issues: purpose-driven, and generally for a single person, that eventually will be resolved.</p>",
        "id": 275927120,
        "sender_full_name": "Jubilee",
        "timestamp": 1647720380
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120827\">Ben Kimock (Saethlin)</span> <a href=\"#narrow/stream/122652-new-members/topic/First.20issue/near/275926727\">said</a>:</p>\n<blockquote>\n<p>Here's another <a href=\"https://internals.rust-lang.org/t/impl-indexmut-for-hashmap/10963/10\">https://internals.rust-lang.org/t/impl-indexmut-for-hashmap/10963/10</a></p>\n</blockquote>\n<p>I see, it requires <code>IndexAssign</code>.</p>",
        "id": 275927321,
        "sender_full_name": "Will",
        "timestamp": 1647720647
    },
    {
        "content": "<p>Aha, it once was and will be again!</p>",
        "id": 275927538,
        "sender_full_name": "Will",
        "timestamp": 1647721020
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/23559\">https://github.com/rust-lang/rust/pull/23559</a></p>",
        "id": 275927539,
        "sender_full_name": "Will",
        "timestamp": 1647721022
    },
    {
        "content": "<p>In the Rust community, it's so easy to follow the trains of thought and decisions. Kudos!</p>",
        "id": 275927550,
        "sender_full_name": "Will",
        "timestamp": 1647721054
    },
    {
        "content": "<p>There is also the entry api, which is superior for things like this</p>",
        "id": 275927554,
        "sender_full_name": "mejrs",
        "timestamp": 1647721063
    },
    {
        "content": "<p>Wow, this is amazing, thank you!</p>",
        "id": 275927633,
        "sender_full_name": "Will",
        "timestamp": 1647721165
    },
    {
        "content": "<p>hello guys, I'm just starting to contrubute in rust compiler with the goal to became a member of the team. I start to read some issue on github and I like this one <a href=\"https://github.com/rust-lang/rust/issues/95698\">https://github.com/rust-lang/rust/issues/95698</a> do you think that it is a good place to start?</p>",
        "id": 278081982,
        "sender_full_name": "Vincenzo Palazzo",
        "timestamp": 1649277046
    },
    {
        "content": "<p>sure, seems good :) the first steps I'd recommend are to</p>\n<ol>\n<li>build rustc with debug symbols (<code>debug = true</code> in config.toml)</li>\n<li>run it on the MCVE in the issue with GDB</li>\n<li>stop it after it's been running a while and get a backtrace with <code>where</code></li>\n<li>find some function in the callstack that looks right and add a recursion limit check there</li>\n</ol>",
        "id": 278082592,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649277387
    },
    {
        "content": "<p>cool thanks! befrore I would like to finish the dev book related to the contribution guide line, and I will follow your steps, thanks!</p>",
        "id": 278082805,
        "sender_full_name": "Vincenzo Palazzo",
        "timestamp": 1649277492
    },
    {
        "content": "<p>bug I have already compiled rustc with x.py</p>",
        "id": 278083015,
        "sender_full_name": "Vincenzo Palazzo",
        "timestamp": 1649277615
    }
]