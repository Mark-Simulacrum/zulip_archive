[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"453750\">Davydov Daniil</span> has marked this topic as resolved.</p>",
        "id": 259372898,
        "sender_full_name": "Notification Bot",
        "timestamp": 1635419895
    },
    {
        "content": "<p>\"not a lot more syntax\" is particularly important, here, I think.  When C# had the syntax be <code>delegate(string foo) { Console.WriteLine(\"Hello {0}\", foo); }</code> it was super-annoying to have to write that out.  Whereas C#'s new <code>foo =&gt; Console.WriteLine(...)</code>, like Rust's <code>|foo| println!(...)</code>, is so much less obnoxious that places that need it aren't that big of a deal.</p>\n<p>C# does support <code>.Any(foo.Contains)</code>, but it's surprisingly rare that it's applicable.  In Rust it might be even less common, with the need to pass <code>&amp;x</code> or <code>*x</code> in a bunch of places.  TBH the thing I want first is function coercions so that it's always possible to pass <code>.map(foo)</code> instead of sometimes needing <code>.map(|x| foo(x))</code> because of variance or coercions or something.</p>",
        "id": 259433856,
        "sender_full_name": "scottmcm",
        "timestamp": 1635446600
    }
]