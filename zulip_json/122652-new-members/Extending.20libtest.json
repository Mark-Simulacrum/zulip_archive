[
    {
        "content": "<p>Hey! I'm Thijs and I'm working on a project for which I need to add <code>setup()</code> and <code>teardown()</code> functions to each function that is annotated with <code>#[test]</code>. What would be a good way to tackle this problem? To minimalize the amount of modifications that end-users would do, I tought of building upon <code>libtest</code> somehow and creating a custom <code>cargo</code> command that enables these setup and teardown functions automatically, but I haven't been able to find documentation on how to interact with <code>libtest</code> in this way.<br>\nCan anybody provide me with some pointers in the right direction? Thank you!</p>",
        "id": 275266919,
        "sender_full_name": "Thijs",
        "timestamp": 1647277286
    },
    {
        "content": "<p><code>#[test]</code> is implemented in the compiler, not libtest.</p>",
        "id": 275267054,
        "sender_full_name": "bjorn3",
        "timestamp": 1647277336
    },
    {
        "content": "<p>I would suggest looking at using a custom test framework.  You can either use the unstable custom_test_frameworks, or just build your own harness (and set <code>harness=false</code> in Cargo.toml).  I believe there are already several crates on <a href=\"http://crates.io\">crates.io</a> that do this.</p>\n<p>I think getting a change like this done with libtest will be a bit of an uphill challenge, not just technically but on a procedural point of view.  I think a big change like this would usually go through the RFC process which can be a bit difficult.  Also, custom_test_frameworks were specifically started to address new features like this.  Unfortunately there isn't anyone really working on it, or libtest in general.</p>",
        "id": 275275829,
        "sender_full_name": "Eric Huss",
        "timestamp": 1647281237
    },
    {
        "content": "<p>Thank you Eric! I will look into a custom test framework!</p>",
        "id": 275280548,
        "sender_full_name": "Thijs",
        "timestamp": 1647283347
    },
    {
        "content": "<p>Not sure if there's a better place to share this, but here's a great list of open source Rust learning material <br>\n<a href=\"https://doc.rust-lang.org/stable/book/\">The Rust Programming Language</a></p>\n<p><a href=\"https://doc.rust-lang.org/nomicon/index.html\">The Rustonomicon</a></p>\n<p><a href=\"https://doc.rust-lang.org/rust-by-example/\">Rust By Example</a></p>\n<p><a href=\"https://rust-unofficial.github.io/too-many-lists/first-layout.html\">Learning Rust With Entirely Too Many Linked Lists</a></p>\n<p><a href=\"https://lborb.github.io/book/title-page.html\">The Little Book of Rust Books</a></p>\n<p><a href=\"https://rust-lang-nursery.github.io/rust-cookbook/intro.html\">Rust Cookbook</a></p>\n<p><a href=\"https://rustwasm.github.io/docs/book/\">Rust and WebAssembly</a></p>\n<p><a href=\"https://stevedonovan.github.io/rust-gentle-intro/\">A Gentle Introduction to Rust</a></p>\n<p><a href=\"https://learning-rust.github.io/\">Learning Rust</a></p>\n<p><a href=\"https://www.chiark.greenend.org.uk/~ianmdlvl/rust-polyglot/index.html\">Rust for the Polyglot Programmer</a></p>\n<p><a href=\"https://veykril.github.io/tlborm/\">The Little Book of Rust Macros</a></p>\n<p><a href=\"https://cheats.rs/\">Rust Language Cheat Sheet</a></p>\n<p><a href=\"https://rust-cli.github.io/book/index.html\">Rust CLI Book</a></p>\n<p><a href=\"https://www.arewewebyet.org/\">Are we web yet</a></p>\n<p><a href=\"https://fasterthanli.me/articles/a-half-hour-to-learn-rust\">A half an hour to learn Rust</a></p>\n<p><a href=\"https://rustc-dev-guide.rust-lang.org/\">Guide to RustC Development</a></p>\n<p><a href=\"https://www.lurklurk.org/effective-rust/\">Effective Rust</a></p>\n<p><a href=\"https://rust-unofficial.github.io/patterns/intro.html\">Rust Design Patterns</a></p>\n<p><a href=\"https://rust-cli.github.io/book/index.html\">Command Line Applications In Rust</a></p>",
        "id": 275300788,
        "sender_full_name": "Adib Hanna",
        "timestamp": 1647293309
    }
]