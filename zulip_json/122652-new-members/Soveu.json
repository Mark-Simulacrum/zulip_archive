[
    {
        "content": "<p>Hey, I've been mainly sitting on #black-magic on discord, but there were too many links to this place, so here I am.</p>\n<p>My currently biggest achievement: speeding up <code>tinyvec</code> 3 to 10 times in some cases</p>\n<p>On <a href=\"https://github.com/Soveu\">my github</a> you'll mostly find small or unfinished stuff, mainly because I started to learn rust like 4 months ago, let alone contribute to the first crate which was Loka's <code>safe_arch</code><br>\nWith C/C++ background it was a quite smooth transition, considering how many things are done differently here in Rust</p>\n<p>Right at the moment I'm exploring lock-free/parallel data structures<br>\nI'm fresh high school graduate, but I know a bit about binary exploitation and algorithms (got into semi-finals of national high school programming competition)<br>\nI would love to get hired at least for the time before academic year starts, but I still haven't even started writing my resume/CV (mainly because there is little to write just after high school)</p>",
        "id": 206473668,
        "sender_full_name": "Soveu",
        "timestamp": 1597072890
    },
    {
        "content": "<p>That's awesome!</p>",
        "id": 206486379,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597079428
    },
    {
        "content": "<p>I did my PhD on parallel data structures, and I'm always glad to see people working in that area. Happy to talk algorithms and data structures some time. :)</p>",
        "id": 206486422,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597079465
    },
    {
        "content": "<p>Those sound like some impressive performance improvements for tinyvec.</p>",
        "id": 206486461,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597079487
    },
    {
        "content": "<p>Might some of those be applicable to smallvec in the Rust compiler?</p>",
        "id": 206486506,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597079515
    },
    {
        "content": "<p>Also, the Rust compiler has some support for parallel compilation.</p>",
        "id": 206486732,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597079636
    },
    {
        "content": "<p>And if you are interested in a optimization challenge, rayon needs help with scalability past somewhere in the 32 thread range.</p>",
        "id": 206486832,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597079672
    },
    {
        "content": "<p>Well, really it was a really trivial optimization, not to call it dead simple</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">extend</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">iter</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">Item</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>meanwhile <code>push()</code> perform first a check whether tinyvec is inline or on heap, if it has enough space, and then performs the push<br>\nI just changed it to</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">extend</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">iter</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">Item</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">arr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">TinyVec</span>::<span class=\"n\">Inline</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">TinyVec</span>::<span class=\"n\">Heap</span><span class=\"p\">(</span><span class=\"n\">h</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">iter</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">arr</span><span class=\"p\">.</span><span class=\"n\">fill</span><span class=\"p\">(</span><span class=\"n\">iter</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">hint</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"p\">.</span><span class=\"n\">size_hint</span><span class=\"p\">().</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">with_capacity</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">hint</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">.</span><span class=\"n\">drain</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">iter</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">TinyVec</span>::<span class=\"n\">Heap</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>And boom, 3x to 5x boost on iterators (on a synthetic benchmark, but still)</p>",
        "id": 206499058,
        "sender_full_name": "Soveu",
        "timestamp": 1597085879
    },
    {
        "content": "<p>smallvec has this downside that it isn't an enum that you can simply match like tinyvec, but also tinyvec provides its own 100% safe version of arrayvec, which requires the type to be <code>Default</code>, because on <code>drain</code>, <code>pop</code> and similar functions it <code>mem::take</code>s elements, so it isn't as efficient</p>",
        "id": 206499590,
        "sender_full_name": "Soveu",
        "timestamp": 1597086086
    },
    {
        "content": "<p>One big advantage over smallvec is that tinyvec from 1.0 can hold more bytes inline, because it is an enum of <code>(u16, Array)</code> and <code>Vec</code></p>",
        "id": 206500057,
        "sender_full_name": "Soveu",
        "timestamp": 1597086284
    }
]