[
    {
        "content": "<p>This function works; it adapts any iterator into another one that yields every other element:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">evens</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">iter</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">iter</span><span class=\"p\">.</span><span class=\"n\">enumerate</span><span class=\"p\">().</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">i</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">).</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">i</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It bothers me slightly that <code>impl Iterator&lt;Item = T&gt;</code> is duplicated. I thought I could just rewrite it as:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">evens</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">iter</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">iter</span><span class=\"p\">.</span><span class=\"n\">enumerate</span><span class=\"p\">().</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">i</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">).</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">i</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>But that fails with <code>expected type parameter `T`, found struct `std::iter::Map`.</code> Is there a way to factor out the trait specification?</p>",
        "id": 264207461,
        "sender_full_name": "Tim Siegel",
        "timestamp": 1638991793
    },
    {
        "content": "<p>I don't think so, no - the iterator you're accepting and returning have different types</p>",
        "id": 264208463,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1638992200
    },
    {
        "content": "<p>(this would work fine if the function body were just <code>iter</code>)</p>",
        "id": 264208511,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1638992223
    },
    {
        "content": "<p>It might help to understand how functions like filter and map work</p>",
        "id": 264208611,
        "sender_full_name": "Khionu Sybiern",
        "timestamp": 1638992277
    },
    {
        "content": "<p>Also, this function could just be <code>iter.step_by(2)</code><br>\n<a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.step_by\">https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.step_by</a></p>",
        "id": 264208681,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1638992296
    },
    {
        "content": "<p>They're lazily evaluated, so they have to encapsulate the logic in a new object that wraps the former iterator</p>",
        "id": 264208719,
        "sender_full_name": "Khionu Sybiern",
        "timestamp": 1638992322
    },
    {
        "content": "<p>So, <code>iter.filter(...).map(...)</code> returns a <code>Map&lt;Filter&lt;...&gt;&gt;</code> roughly speaking</p>",
        "id": 264208787,
        "sender_full_name": "Khionu Sybiern",
        "timestamp": 1638992356
    },
    {
        "content": "<p>I think my confusion is between trait and type, and so the duplication I was seeing is illusory. They're the same trait, but two different types so two different impl.</p>",
        "id": 264208879,
        "sender_full_name": "Tim Siegel",
        "timestamp": 1638992404
    },
    {
        "content": "<p>Exactly</p>",
        "id": 264208937,
        "sender_full_name": "Khionu Sybiern",
        "timestamp": 1638992420
    },
    {
        "content": "<p>Hmm, I still can't translate it into a where, though? <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=3b59ae3b1a9dd15908ce989d72553055\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=3b59ae3b1a9dd15908ce989d72553055</a></p>",
        "id": 264209236,
        "sender_full_name": "Tim Siegel",
        "timestamp": 1638992549
    },
    {
        "content": "<p><code>expected type parameter `T`, found struct `Map` </code></p>",
        "id": 264209348,
        "sender_full_name": "Tim Siegel",
        "timestamp": 1638992599
    },
    {
        "content": "<p>Your code is not generic over the return type. There is a specific type it always returns,  <code>Map</code>.</p>",
        "id": 264209403,
        "sender_full_name": "Parth Nobel",
        "timestamp": 1638992628
    },
    {
        "content": "<p>Return position impl traits aren't generics, they're automatically filled in opaque type aliases. i.e. they have a concrete fixed value at compilation, but the caller can't name that type.</p>",
        "id": 264209577,
        "sender_full_name": "Parth Nobel",
        "timestamp": 1638992703
    },
    {
        "content": "<p>OK. Very good explanations, thank you!</p>",
        "id": 264209735,
        "sender_full_name": "Tim Siegel",
        "timestamp": 1638992771
    },
    {
        "content": "<p>This gives you API flexibility to change the return type without breaking dependent code, but you still need to have a concrete return type not a generic one.</p>",
        "id": 264209747,
        "sender_full_name": "Parth Nobel",
        "timestamp": 1638992777
    },
    {
        "content": "<p>(here's the version with step_by: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=2cd12c7bedba3b201f5d04e976fdce3d\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=2cd12c7bedba3b201f5d04e976fdce3d</a>)</p>",
        "id": 264209787,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1638992794
    }
]