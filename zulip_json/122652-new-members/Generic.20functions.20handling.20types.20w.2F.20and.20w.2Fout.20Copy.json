[
    {
        "content": "<p>I would like to write generic code supporting <code>Copy</code> and non-<code>Copy</code> types.<br>\nMy current approach is a bit heavy on the boiler plate.</p>\n<p>Here is a minimal example:<br>\nSay I have a struct <code>Things</code> that holds some object(s) <code>T</code> and wants to do things with them that may be implemented without references on <code>Copy</code> objects but using pass-by-reference with non-<code>Copy</code> objects to avoid moving (which is likely to be illegal).</p>\n<p>I'm using <code>/</code> as an example operation that's cheap and implemented on <code>isize</code> but not <code>&amp;isize</code>.<br>\nI may also have <code>/</code> implemented on objects requiring allocation that are preferably passed by reference and not moved.</p>\n<p>So my current approach is to add some boiler plate like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">DivReference</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"c1\">// trait for the function I want to have in both reference and value forms</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">div</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">other</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">DivReference</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">isize</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"c1\">// copy for `Copy` objects</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">div</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">other</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">other</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cm\">/*</span>\n<span class=\"cm\">impl DivReference for ... {</span>\n<span class=\"cm\">    implement some other specializations for the more expensive types</span>\n<span class=\"cm\">    requiring allocation (e.g. things like matrices or polynomials)</span>\n<span class=\"cm\">}</span>\n<span class=\"cm\">*/</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Things</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a</span>: <span class=\"nc\">T</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">b</span>: <span class=\"nc\">T</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"c1\">// some form of generic on `T`</span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Things</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nc\">DivReference</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">my_div</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">DivReference</span>::<span class=\"n\">div</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Is there any good pattern to follow for this sort of generic code?</p>\n<p>Perhaps there is some different approach that accomplishes this aim much more effectively.<br>\nOr perhaps, failing that, there's a way to improve this same basic approach, e.g. implementing a generic that does this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">DivReference</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">isize</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">div</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">other</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">other</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>but for anything with traits <code>std::ops::Div + Copy</code> instead of specifically specifying each particular type I want to support, such as <code>isize</code> above.</p>\n<p>(If you'd like some motivation, elements of matrices or coefficients of polynomials may trivially copy-able numbers, or could themselves be structures like matrices or polynomials. Hence, it's natural for algorithms working on these types to support efficiently handling many different element types.)</p>",
        "id": 269346542,
        "sender_full_name": "chriselrod",
        "timestamp": 1643156851
    },
    {
        "content": "<p>Uhh, <code>impl&lt;'_&gt; Div&lt;&amp;'_ isize&gt; for isize</code> is there, at least.</p>\n<p>From what I've seen it's pretty normal to just add a bunch of those extra impls with macros to make it a bit less annoying.</p>\n<p>(One day we'll hopefully have a bunch of <code>default impl</code>s for <code>Copy</code> stuff so that the impls for references will be there without you needing to write them out explicitly.)</p>",
        "id": 269347863,
        "sender_full_name": "scottmcm",
        "timestamp": 1643157847
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/122652-new-members/topic/Generic.20functions.20handling.20types.20w.2F.20and.20w.2Fout.20Copy/near/269347863\">said</a>:</p>\n<blockquote>\n<p>Uhh, <code>impl&lt;'_&gt; Div&lt;&amp;'_ isize&gt; for isize</code> is there, at least.</p>\n</blockquote>\n<p>Ah, great -- so I should use that for my where clause instead of <code>Div</code> for this particular example, and then there'd be no need for <code>DivReference</code>.</p>\n<p>But more generally, sounds like implementing macros to reduce boiler plate would be a good idea. Thanks!</p>",
        "id": 269348199,
        "sender_full_name": "chriselrod",
        "timestamp": 1643158101
    }
]