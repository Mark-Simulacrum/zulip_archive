[
    {
        "content": "<p>Hi there!<br>\nI'd like to contribute to the rust compiler both as part of my work with <span class=\"user-mention\" data-user-id=\"218578\">@o0Ignition0o - Jeremy Lempereur</span>  and during my free time. Specifically, i want to tackle <a href=\"https://github.com/rust-lang/rust/issues/88065\">https://github.com/rust-lang/rust/issues/88065</a> to improve the error emitted when the user forgets the curly braces around closure body. I still have no clear plan on how to fix it, but i'll find a way<br>\nHopefully i'll find interesting issues to work on next :)</p>",
        "id": 249564563,
        "sender_full_name": "Sasha Pourcelot (she/her)",
        "timestamp": 1629104930
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"388880\">@Sasha Pourcelot (she/her)</span>  Feel free to ping me here! You'll likely want to look at rustc_parser first of all. Thankfully this case triggers an actual AST build failure, which means we can detect it exclusively in the parser, but I also linked to another case in the ticket that doesn't fail parsing, but that triggers multiple other errors. I think we can ideally tackle both cases with the same or similar mechanisms.</p>",
        "id": 249567668,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1629107181
    },
    {
        "content": "<p>The main problem in my eyes is that error recovery autoinserts a stray comma in an effort to make the code make sense, and that's what triggers a bunch of unnecessary errors. Just tackling that might let other parse recovery strategies silence quite a bit of the fallout, but what we <em>really</em> want is to not only detect the failure but try to parse a closure <em>as if</em> it had braces.</p>",
        "id": 249567763,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1629107267
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> thank you for your reply both here and on github! I have read some code in the expression parser, especially the method <code>Parser::parse_closure_expr</code>. I still have no idea of how to fix that though. <br>\nThe other issue about the Ruby syntax is interesting and would be cool to fix as well, except that it would be handled in the type-checking pass instead. I have no idea of how this step works internally, but that will come later.</p>",
        "id": 249573967,
        "sender_full_name": "Sasha Pourcelot (she/her)",
        "timestamp": 1629111522
    },
    {
        "content": "<p>Following up in a new thread for this work :)<br>\n<a href=\"#narrow/stream/147480-t-compiler.2Fwg-diagnostics/topic/Parse.20closure.20missing.20braces.20around.20body\">https://rust-lang.zulipchat.com/#narrow/stream/147480-t-compiler.2Fwg-diagnostics/topic/Parse.20closure.20missing.20braces.20around.20body</a></p>",
        "id": 249574940,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1629112307
    },
    {
        "content": "<p>Hi, I am a new member, and I would like to contribute a new feature to cargo. I have been asked to open discussion on Zulip and submit a corresponding RFC (which I did, at <a href=\"https://github.com/rust-lang/rfcs/pull/3168\">https://github.com/rust-lang/rfcs/pull/3168</a>). I also have a partial implementation working at <a href=\"https://github.com/rust-lang/cargo/pull/9833\">https://github.com/rust-lang/cargo/pull/9833</a></p>\n<p>What is the right protocol to follow now to elicit feedback and get it reviewed?</p>",
        "id": 250611991,
        "sender_full_name": "Matteo Settenvini",
        "timestamp": 1629894246
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"435446\">@Matteo Settenvini</span> The RFC process you're following is on the right track, I believe, although I'm not as familiar with cargo's process. You might want to ping ehuss for guidance.</p>",
        "id": 253743572,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1631886132
    }
]