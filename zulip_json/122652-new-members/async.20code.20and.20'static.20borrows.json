[
    {
        "content": "<p>Hi, I'm using Rocket and Diesel and often have problems with a running queries because those require a 'static borrow.</p>\n<p>For example, this snippet:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">new_token</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">NewAccessToken</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">user_id</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">user</span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">insert_result</span>: <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">AccessTokenData</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">diesel</span>::<span class=\"n\">result</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">db</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">conn</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">diesel</span>::<span class=\"n\">insert_into</span><span class=\"p\">(</span><span class=\"n\">oauth_access_tokens</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">values</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">new_token</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">get_result</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"k\">await</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Results in the following compiler error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0597</span><span class=\"p\">]</span>: <span class=\"err\">`</span><span class=\"n\">user</span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">does</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">live</span><span class=\"w\"> </span><span class=\"n\">long</span><span class=\"w\"> </span><span class=\"n\">enough</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">oauth_rest</span><span class=\"o\">/</span><span class=\"n\">oauth_controller</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">31</span>:<span class=\"mi\">51</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">31</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">           </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">new_token</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">NewAccessToken</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">user_id</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">user</span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                                                     </span><span class=\"o\">^^^^^^^^</span><span class=\"w\"> </span><span class=\"n\">borrowed</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"n\">does</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">live</span><span class=\"w\"> </span><span class=\"n\">long</span><span class=\"w\"> </span><span class=\"n\">enough</span><span class=\"w\"></span>\n<span class=\"mi\">32</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">33</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">           </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">insert_result</span>: <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">AccessTokenData</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">diesel</span>::<span class=\"n\">result</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">db</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">  </span><span class=\"n\">_____________________________________________________________________________</span><span class=\"o\">-</span><span class=\"w\"></span>\n<span class=\"mi\">34</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">             </span><span class=\"p\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">conn</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"mi\">35</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">                 </span><span class=\"n\">diesel</span>::<span class=\"n\">insert_into</span><span class=\"p\">(</span><span class=\"n\">oauth_access_tokens</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"mi\">36</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">                     </span><span class=\"p\">.</span><span class=\"n\">values</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">new_token</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"mi\">37</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">                     </span><span class=\"p\">.</span><span class=\"n\">get_result</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"mi\">38</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">             </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">______________</span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">argument</span><span class=\"w\"> </span><span class=\"n\">requires</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">user</span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">borrowed</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"mi\">54</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">   </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">   </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">user</span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">dropped</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">still</span><span class=\"w\"> </span><span class=\"n\">borrowed</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I could just clone the user id (which is a UUID), but is that the proper solution?</p>",
        "id": 278426734,
        "sender_full_name": "Aaron",
        "timestamp": 1649532924
    },
    {
        "content": "<p>If it's just a single UUID, then cloning it is a perfectly valid solution.</p>",
        "id": 278447646,
        "sender_full_name": "LegionMammal978",
        "timestamp": 1649565181
    },
    {
        "content": "<p>Okido! And what if it was a heavier struct?</p>",
        "id": 278474208,
        "sender_full_name": "Aaron",
        "timestamp": 1649604905
    },
    {
        "content": "<p>If you need don't need access following the query, you can move the data into the closure. Otherwise, you can use a shared-ownership type, such as an <a href=\"https://doc.rust-lang.org/std/rc/struct.Rc.html\"><code>Rc&lt;HeavyStruct&gt;</code></a> or <a href=\"https://doc.rust-lang.org/std/sync/struct.Arc.html\"><code>Arc&lt;HeavyStruct&gt;</code></a> to store your data. If you need to modify it, you also need an interior-mutability type, making the overall container an <code>Rc&lt;RefCell&lt;HeavyStruct&gt;&gt;</code> or <code>Arc&lt;Mutex&lt;HeavyStruct&gt;&gt;</code>.</p>",
        "id": 278480781,
        "sender_full_name": "LegionMammal978",
        "timestamp": 1649612814
    },
    {
        "content": "<p>Which one you need depends on the trait bounds of the closure. If it needs to be <code>Send</code> or <code>Sync</code>, then you need to store it as an <code>Arc&lt;Mutex&lt;...&gt;&gt;</code>; otherwise, an <code>Rc&lt;RefCell&lt;...&gt;&gt;</code> will suffice. The latter has marginally less overhead, and panics instead of deadlocking if you try to take multiple mutable borrows.</p>",
        "id": 278480866,
        "sender_full_name": "LegionMammal978",
        "timestamp": 1649612932
    }
]