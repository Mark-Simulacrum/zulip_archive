[
    {
        "content": "<p>Hi everyone!</p>\n<p>I'm experimenting with representing network packets as rust structs.</p>\n<p>Here's an example packet</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[repr(packed)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Ethernet</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\">  </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">header</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">14</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">body</span>: <span class=\"nc\">T</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I'd like <code>T: ?Sized</code> so that I can represent packets that we don't know the type of as <code>[u8]</code>.<br>\nThat means that <code>T: Copy</code>, because packed fields must not implement <code>Drop</code>, which I think is probably due to creating an unaligned reference?</p>\n<blockquote>\n<p>the last field of a packed struct may only have a dynamically sized type if it does not need drop to be run</p>\n</blockquote>\n<p>But <code>[u8]: !Copy</code>, and I'm not sure why - it seems to fit the semantics! I'd love to find out :)</p>",
        "id": 261313307,
        "sender_full_name": "Aatif Syed",
        "timestamp": 1636752613
    },
    {
        "content": "<p><code>[u8]</code> is not the same as <code>[u8; 14]</code>. <code>[u8; 14]</code> is copy. <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=a1df3b84b5f925915d74fad3e2eb1f4f\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=a1df3b84b5f925915d74fad3e2eb1f4f</a></p>",
        "id": 261314397,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636753204
    },
    {
        "content": "<p>[u8] is \"an unsized region of memory aligned on a byte boundary\"</p>",
        "id": 261314421,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636753220
    },
    {
        "content": "<p>oh hmm I misunderstood your question</p>",
        "id": 261314517,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636753289
    },
    {
        "content": "<p>yeah I'm not sure why it's not copy</p>",
        "id": 261314531,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636753298
    },
    {
        "content": "<p>It's not clone because you can't return an unsized value from a function by value</p>",
        "id": 261314875,
        "sender_full_name": "simulacrum",
        "timestamp": 1636753494
    },
    {
        "content": "<p>And copy: clone</p>",
        "id": 261314919,
        "sender_full_name": "simulacrum",
        "timestamp": 1636753522
    },
    {
        "content": "<p>The higher-level question would be: how can you have a packed struct with a generic last field that allows for a DST?</p>",
        "id": 261315548,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1636753752
    }
]