[
    {
        "content": "<p>I have a JSON response from an API which I want to only partially deserialize (only deserializing one of the subfields if another is a certain value), then cache the result locally (building the dataset requires 306 api calls - so, both speed and courtesy are involved) using bincode.</p>\n<p>The default deserializer works great with bincode, and I got help with a custom deserializer here which works for the JSON (see <a href=\"#narrow/stream/122652-new-members/topic/serde.3A.20JSON.20w.2Fsubfield.20type.20determined.20by.20parent.20field.20flag\">https://rust-lang.zulipchat.com/#narrow/stream/122652-new-members/topic/serde.3A.20JSON.20w.2Fsubfield.20type.20determined.20by.20parent.20field.20flag</a>).</p>\n<p>How can I make sure to run the correct deserializer for each data source? I'm in over my head - I couldn't write the JSON deserializer (why doesn't it need to use a Visitor? The docs make it very clear I need a Visitor, but not _why_ - and obviously I _don't_...), so this is probably something simple with type hints or something.</p>",
        "id": 264766308,
        "sender_full_name": "Michael Clark",
        "timestamp": 1639427695
    },
    {
        "content": "<p>(For reference, this is the code example I wrote in the previous thread: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=eed35aa937bf9c5dc50bb0eba0322819\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=eed35aa937bf9c5dc50bb0eba0322819</a>)</p>\n<p>In that example, I implement Deserialize by passing down to another, <code>#[derive(Deserialize)]</code>'d, implementation which does the partial deser, then handling logic on that. The derive is using Visitor internally. Serde requires you to use a Visitor, but store-bought is fine. I find that pattern easier and clearer rather than writing a visitor-driven implementation; ymmv. This pattern is most useful with a single hard-coded data format; in your case you likely want to go for a hand-written Visitor so it's generic on the input.</p>",
        "id": 264985022,
        "sender_full_name": "Félix Saparelli",
        "timestamp": 1639561539
    },
    {
        "content": "<p>The visitor is one of the reasons I'm not comfortable writing a deserializer :/. I really don't understand the documentation that well yet. Hopefully some day :). I really liked your implementation - so, it won't work for my usecase?</p>",
        "id": 265092446,
        "sender_full_name": "Michael Clark",
        "timestamp": 1639611474
    },
    {
        "content": "<p>Not that I know of. You could work around it by having a wrapped version of the struct that you use for decoding from JSON.</p>",
        "id": 265113114,
        "sender_full_name": "Félix Saparelli",
        "timestamp": 1639631347
    },
    {
        "content": "<p>Here: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=7cf860396308c525358fc0176435d858\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=7cf860396308c525358fc0176435d858</a></p>\n<p>I use toml for the tests because bincode isn't available in the playground, but it will work with every serde data format.</p>",
        "id": 265113401,
        "sender_full_name": "Félix Saparelli",
        "timestamp": 1639631732
    },
    {
        "content": "<p>You also don't need to have Serialize derived on the wrapper struct, now that I think about it</p>",
        "id": 265114187,
        "sender_full_name": "Félix Saparelli",
        "timestamp": 1639632765
    }
]