[
    {
        "content": "<p>Hello,</p>\n<p>I would initially like to help with rust analyzer.</p>\n<p>From an outsider's perspective, it seems that rls makes better use of cargo's help hints to generate code actions. Perhaps there is something I could do in that area to get my feet wet?</p>\n<p>But I would be interested in making <em>any</em> useful contribution that doesn't require deep knowledge of the internals in order to get going, though I am very interested in picking up such knowledge in the long run. The use of functional/persistent data structures to represent the trees, and the incremental computation ideas in salsa are particularly appealing.</p>\n<p>Eventually, I would like to contribute to the compiler itself. My machine runs NixOs. I'm far from being a Nix expert, and working in Nix comes with significant costs, but I'm extremely reluctant give up the direnv + nix-shell combination for isolated development environments. Is anybody here working on the compiler in Nix?</p>",
        "id": 200215971,
        "sender_full_name": "Jacek Generowicz",
        "timestamp": 1591704856
    },
    {
        "content": "<p>See <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0\">https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0</a> in particular for <code>rust-analyzer</code>.</p>\n<blockquote>\n<p>From an outsider's perspective, it seems that rls makes better use of cargo's help hints to generate code actions. Perhaps there is something I could do in that area to get my feet wet?</p>\n</blockquote>\n<p>I think a lot of us haven't used RLS in a while. If you find cases where it's more helpful, you could file issues for them. Besides that, assists are probably are a good place to start. And you can also find some labelled issues on the tracker -- look for <code>E-has-instructions </code> or <code>E-easy</code>.</p>",
        "id": 200216680,
        "sender_full_name": "Laurențiu",
        "timestamp": 1591705370
    },
    {
        "content": "<p>I live in Emacs, but I understand that VSCode is the de-facto standard LSP client, so I should have the ability to try things out in VSCode. The Nix + VSCode + rust-analyzer situation seems a bit broken at the moment: apparently there used to be a <code>nixpkgs.vscode-extensions.matklad.rust-analyzer</code> but it seems to have disappeared. Does anyone have a <code>shell.nix</code> for working on rust-analyzer and testing with VSCode?</p>",
        "id": 200223992,
        "sender_full_name": "Jacek Generowicz",
        "timestamp": 1591708110
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu Nicola</span> in terms of assists, is there a list of desired missing assists, should I look for TODOs in existing assists, or should I just come up with my own ideas? (Sorry, have I accidentally created a new topic with the same title? I'm not familiar with Zulip.)</p>",
        "id": 200250035,
        "sender_full_name": "Jacek Generowicz",
        "timestamp": 1591717980
    },
    {
        "content": "<p>I think we have or had issues for the assists we want, and there might still be some TODOs there (be sure to read the comments, I think a couple of them are partially implemented). But you can bring your own ideas if you miss anything.</p>",
        "id": 200260976,
        "sender_full_name": "Laurențiu",
        "timestamp": 1591722497
    }
]