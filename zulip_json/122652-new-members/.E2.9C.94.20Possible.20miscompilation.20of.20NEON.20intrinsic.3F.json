[
    {
        "content": "<p>Hi everyone, I tried asking on the Discord, but got no replies yet, so I thought I might also try here. I think I am running into a miscompilation, but I would like to make sure I'm not misunderstanding what the intrinsic is supposed to do. In particular, I am talking about the <code>vbslq_f32</code> intrinsic, which according to ARM docs is the following:</p>\n<blockquote>\n<p>Bitwise Select. This instruction sets each bit in the destination SIMD&amp;FP register to the corresponding bit from the first source SIMD&amp;FP register when the original destination bit was 1, otherwise from the second source SIMD&amp;FP register.</p>\n</blockquote>\n<p>So I would expect the following (see also <a href=\"https://godbolt.org/z/sP47jaYT8\">https://godbolt.org/z/sP47jaYT8</a>) to effectively create a <code>copysign</code> for 4 floats at a time, but... it is optimized away completely:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">copysign</span><span class=\"p\">(</span><span class=\"n\">from</span>: <span class=\"nc\">float32x4_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">to</span>: <span class=\"nc\">float32x4_t</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">float32x4_t</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">mask</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vdupq_n_u32</span><span class=\"p\">(</span><span class=\"mh\">0x8000_0000</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">vbslq_f32</span><span class=\"p\">(</span><span class=\"n\">mask</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I tried both <code>aarch64</code> and <code>armv7</code> (the latter being my actual target) and have been getting the same result: <code>copysign</code> just returns <code>to</code></p>",
        "id": 247798186,
        "sender_full_name": "Johannes Mueller-Roemer",
        "timestamp": 1627728388
    },
    {
        "content": "<p>The test in core also seems to only test <code>u32::MAX</code> and <code>0</code> masks , and the resulting code does differ between these two, by returning either <code>from</code> or <code>to</code>. But since it is supposed to be a bitwise select, shouldn't it be possible to combine both inputs?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[simd_test(enable = </span><span class=\"s\">\"neon\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">test_vbslq_f32</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">u32x4</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"kt\">u32</span>::<span class=\"n\">MAX</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u32</span>::<span class=\"n\">MAX</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f32x4</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"kt\">f32</span>::<span class=\"n\">MAX</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f32</span>::<span class=\"n\">MAX</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f32</span>::<span class=\"n\">MAX</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f32</span>::<span class=\"n\">MAX</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f32x4</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"kt\">f32</span>::<span class=\"n\">MIN</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f32</span>::<span class=\"n\">MIN</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f32</span>::<span class=\"n\">MIN</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f32</span>::<span class=\"n\">MIN</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f32x4</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"kt\">f32</span>::<span class=\"n\">MAX</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f32</span>::<span class=\"n\">MIN</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f32</span>::<span class=\"n\">MAX</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f32</span>::<span class=\"n\">MIN</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">r</span>: <span class=\"nc\">f32x4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">transmute</span><span class=\"p\">(</span><span class=\"n\">vbslq_f32</span><span class=\"p\">(</span><span class=\"n\">transmute</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">transmute</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">transmute</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 247799186,
        "sender_full_name": "Johannes Mueller-Roemer",
        "timestamp": 1627730247
    },
    {
        "content": "<p><code>vbslq_f32</code> is defined as <code>simd_select(transmute::&lt;_, int32x4_t&gt;(a), b, c)</code>. This expects <code>simd_select</code> to be a bitwise select. It is however a lane wise select and the first argument is interpreted as lane index.</p>",
        "id": 247799234,
        "sender_full_name": "bjorn3",
        "timestamp": 1627730310
    },
    {
        "content": "<p>So eg <code>simd_select(i32x4(1,4+2,3,2), i32x4(11,12,13,14), i32x4(15,16,17,18))</code> results in <code>i32x4(12,17,14,13)</code>.</p>",
        "id": 247799293,
        "sender_full_name": "bjorn3",
        "timestamp": 1627730407
    },
    {
        "content": "<p>It indeed seems to be the problem described by <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> , as stated by the fact that clang and gcc doesn't generate the same code at all: <a href=\"https://godbolt.org/z/vjE7aG99W\">gobolt</a>.</p>",
        "id": 247799380,
        "sender_full_name": "Urgau",
        "timestamp": 1627730584
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> Thanks, but isn't that incorrect, then? According to ARM's documentation <code>vbslq_f32</code> should behave like</p>\n<div class=\"codehilite\"><pre><span></span><code>CheckFPAdvSIMDEnabled64();\nbits(datasize) operand1;\nbits(datasize) operand3;\nbits(datasize) operand4 = V[n];\n\noperand1 = V[m];\noperand3 = V[d];\nV[d] = operand1 EOR ((operand1 EOR operand4) AND operand3);\n</code></pre></div>\n<p>Which doesn't look like a lane-wise select to me</p>",
        "id": 247799383,
        "sender_full_name": "Johannes Mueller-Roemer",
        "timestamp": 1627730594
    },
    {
        "content": "<p>Correct. This implementation seems to be incorrect.</p>",
        "id": 247799442,
        "sender_full_name": "bjorn3",
        "timestamp": 1627730677
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"327095\">Urgau</span> <a href=\"#narrow/stream/122652-new-members/topic/Possible.20miscompilation.20of.20NEON.20intrinsic.3F/near/247799380\">said</a>:</p>\n<blockquote>\n<p>It indeed seems to be the problem described by <span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> , as stated by the fact that clang and gcc doesn't generate the same code at all: <a href=\"https://godbolt.org/z/vjE7aG99W\">gobolt</a>.</p>\n</blockquote>\n<p>Clang and gcc produce the same code. <code>0x80000000</code> is the same as <code>2147483648</code></p>",
        "id": 247799460,
        "sender_full_name": "bjorn3",
        "timestamp": 1627730734
    },
    {
        "content": "<p>I wanted to say <em>compared to rustc</em></p>",
        "id": 247799507,
        "sender_full_name": "Urgau",
        "timestamp": 1627730809
    },
    {
        "content": "<p>It seems this would affect <em>all</em> <code>vbsl*_*</code> intrinsics, as they all seem to use <code>simd_select</code>. Bug report issue?</p>",
        "id": 247799825,
        "sender_full_name": "Johannes Mueller-Roemer",
        "timestamp": 1627731281
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"429678\">Johannes Mueller-Roemer</span> has marked this topic as resolved.</p>",
        "id": 247800836,
        "sender_full_name": "Notification Bot",
        "timestamp": 1627733021
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"429678\">@Johannes Mueller-Roemer</span> You should probably report the bug to the <a href=\"https://github.com/rust-lang/stdarch\">stdarch</a> repository instead of the rust repository.</p>",
        "id": 247801433,
        "sender_full_name": "Urgau",
        "timestamp": 1627733942
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"327095\">@Urgau</span>  Ah, good point. So I should close <a href=\"https://github.com/rust-lang/rust/issues/87658\">https://github.com/rust-lang/rust/issues/87658</a> and report on the other repository?</p>",
        "id": 247804018,
        "sender_full_name": "Johannes Mueller-Roemer",
        "timestamp": 1627737580
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"429678\">Johannes Mueller-Roemer</span> <a href=\"#narrow/stream/122652-new-members/topic/.E2.9C.94.20Possible.20miscompilation.20of.20NEON.20intrinsic.3F/near/247804018\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"327095\">Urgau</span>  Ah, good point. So I should close <a href=\"https://github.com/rust-lang/rust/issues/87658\">https://github.com/rust-lang/rust/issues/87658</a> and report on the other repository?</p>\n</blockquote>\n<p>Maybe <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> or someone else can move the <a href=\"https://github.com/rust-lang/rust/issues/87658\">issue</a> to the <a href=\"https://github.com/rust-lang/stdarch\">stdarch</a> repository.</p>",
        "id": 247804154,
        "sender_full_name": "Urgau",
        "timestamp": 1627737756
    },
    {
        "content": "<p>I can't move it to stdarch. Seems like you need write permission for the target repo.</p>",
        "id": 247818716,
        "sender_full_name": "bjorn3",
        "timestamp": 1627757032
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span></p>",
        "id": 247849454,
        "sender_full_name": "Urgau",
        "timestamp": 1627809444
    },
    {
        "content": "<p>Done.</p>",
        "id": 247850066,
        "sender_full_name": "Amanieu",
        "timestamp": 1627810399
    }
]