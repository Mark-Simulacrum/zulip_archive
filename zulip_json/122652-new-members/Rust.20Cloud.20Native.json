[
    {
        "content": "<p>Hi everyone! I am Nick Gerace, founder of Rust Cloud Native (<a href=\"https://github.com/rust-cloud-native\">https://github.com/rust-cloud-native</a>), and one of its three \"team\" members alongside <span class=\"user-mention\" data-user-id=\"447713\">@Michal Rostecki (vadorovsky)</span>  and Walther (<a href=\"https://github.com/walther\">https://github.com/walther</a>). <span class=\"user-mention\" data-user-id=\"394977\">@Doc Jones</span> joined our Discord early on and has helped our volunteer-led/owned organization start connecting back with the greater Rust community, which is why I'm here. (Thank you very much Doc!)</p>\n<p>Rust Cloud Native started solely because I did not see an active group to join over the past couple years or so. Admittedly, \"cloud native\" can get overloaded for marketing purposes, but I felt as though it encapsulated technologies my colleagues and I work on daily: infrastructure software, containers, distributed systems, immutable systems, and related components that exist mostly in userspace. I primarily write Go and work with Kubernetes at my day job at SUSE (acquired Rancher Labs) and have seen increasing interest in Rust-related projects making their way into CNCF-related spaces. Ironically, \"memory safety\" appeared to be at the bottom of the list for the <em>why</em> behind this movement (except for projects that would have been written in C/C++). From what I've heard when speaking to folks, the language's speed, binary sizes, emphasis on correctness w.r.t. concurrency, lack of GC,  inclusion of option and result types, functional features, and <em>community</em> have appeared to be <em>much</em> more important.</p>\n<p><em>Disclaimer: SUSE does not own or directly influence any aspect of Rust Cloud Native. It is independently owned and maintained.</em></p>\n<p>With the organization's origin story out of the way, I'd like to focus on what we've done and why we've done it. We have a blog post going into this further that SUSE hosted for us at All Things Open (<a href=\"https://2021.allthingsopen.org/for-suse-working-on-open-source-projects-is-in-our-dna/\">https://2021.allthingsopen.org/for-suse-working-on-open-source-projects-is-in-our-dna/</a>), but I will focus on its overall theme: <strong>speed in exchange for transparency</strong>. My primarily goal was to create a Code of Conduct and host a public repository before doing <em>anything</em> else. I did not want the organization to be created from an ivory tower of well-known Rust engineers, and would be willing to have a slow start as a result. Yes, eventually reality could hit and we would need to have the core team do background legwork to keep the lights on, but my goal was to have community members guide the course of the GitHub organization. This was partially inspired by games that have early access alphas, which can enable developers to hold transparent dialogue while decreasing chances of burning out due to <em>eventually</em> releasing a \"finished\" product. In essence, Rust Cloud Native's \"launch\" was more of a flagpole plant than it was a fully-organized movement: let's have a safe place to discuss where we want this to go.</p>\n<p>As a result, my own personal work on Rancher v2.6 and v2.6.1 had decreased my availability and <span class=\"user-mention\" data-user-id=\"447713\">@Michal Rostecki (vadorovsky)</span> stepped up in the downtime. We now have a membership application (emphasis on \"decreasing chances of burning out\") and are planning meetups with our increasingly active Discord community. We are working on formal governance structure.  There's a lot of good things happening, but at a slow pace.</p>\n<p>Well, <span class=\"user-mention\" data-user-id=\"394977\">@Doc Jones</span> reached out to us over the past week and put a lot of legwork forward for us to attend CTCFT monthly meetings and... be here! Eventually, we aspire to have an official WG representing \"cloud native Rust\" and these are the next logical steps. (Thank you again, Doc).</p>\n<p>I think that's enough for this monster of an introduction. I personally look forward to meeting more folks here, starting dialogue with other cloud native Rust project teams in the ecosystem, and just hanging out. As far as \"we\", the Rust Cloud Native team, goes, I cannot speak for everyone, but I imagine the excitement is the same. Please never hesitate to reach out and thanks for reading.</p>",
        "id": 256256289,
        "sender_full_name": "Nick Gerace",
        "timestamp": 1633444533
    },
    {
        "content": "<p>Wow, this is super exciting! I was on the verge of learning Go so that I could do more Cloud Native work <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>, but it's great to hear that there is movement in the Rust ecosystem <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 256282594,
        "sender_full_name": "Forest Anderson",
        "timestamp": 1633453658
    },
    {
        "content": "<p>Great to hear <span class=\"user-mention\" data-user-id=\"422143\">@Forest Anderson</span> ! I write Go in my day job and like that language for its own merits too. I recommend both! However, there is a lot of Rust movement indeed. kube-rs is a fantastic project (unaffiliated) and it has been <strong>vital </strong>to making headways into the cloud native Rust space. There are more examples on our site: <a href=\"https://rust-cloud-native.github.io/\">https://rust-cloud-native.github.io/</a></p>",
        "id": 256289495,
        "sender_full_name": "Nick Gerace",
        "timestamp": 1633456426
    },
    {
        "content": "<p>Hi! I will join this topic to introduce myself as well.</p>\n<p>I'm Michal, one of members of Rust Cloud Native, although I'm still pretty fresh in switching from Go and C to Rust. I work for SUSE. My pronouns are he/him or they/them.</p>\n<p>I'm helping with RCN mostly because I believe that Rust is the right language to use especially in low-level container projects like runtimes, engines and also anything interacting with eBPF subsystem. Nowadays the major container engines and runtimes are written in Go despite the limitations of that language in regard to system programming - enforced userspace green threads, lack of clone(), fork() etc. So those projects end up being partially written in C. I also can't imagine Go compiler getting an ability to compile BPF programs, which Rust can already do. :) That's why I cheer for projects like aya, youki or krunvm. And that's why Rust is going to be my language of choice for my container-related projects.</p>\n<p>The main Rust project I'm working on now is <a href=\"https://github.com/rancher-sandbox/lockc\">lockc</a> which is trying to harden containers by using <a href=\"https://www.kernel.org/doc/html/latest/bpf/bpf_lsm.html\">eBPF LSM</a> mechanism in the kernel, which allows to write own eBPF programs which act similar to security modules like SELinux or AppArmor. The idea of lockc is to provide securirty policies for containers which would make it harder to \"break out\" from them. <a href=\"https://rancher-sandbox.github.io/lockc/containers-do-not-contain.html\">There is a doc</a> describing what kind of behavior we would like to restrict with lockc. However, it's still in really early stage, not really usable and major features are still going to be implemented. But if there is someone interested in eBPF and container security, feel free to check it out, provide feedback, contribute!</p>",
        "id": 256440591,
        "sender_full_name": "Michal Rostecki (vadorovsky)",
        "timestamp": 1633537585
    }
]