[
    {
        "content": "<p>I have both a new bin, and an existing lib in the one project/Cargo.toml. The lib is cdylib and <a href=\"http://libname.so\">libname.so</a> for... reasons. How do I get the bin to call the lib using dynamic linking?</p>",
        "id": 278637031,
        "sender_full_name": "Bonts",
        "timestamp": 1649726195
    },
    {
        "content": "<p>Cargo is not capable of building cdylibs as a dependency directly.  </p>\n<p>(It would be possible to do some gymnastics from a build script recursively building another project, but recursive cargo doesn't work terribly well.)</p>\n<p>It is kinda possible with the unstable artifact-dependencies (make the cdylib a separate project and as a build-dependency, and then pass the appropriate -l/-L flags), but then you'd need to fish the cdylib out whenever you need it.</p>\n<p>Another option is is to use libloading to load the library manually, depending on what your needs are.</p>",
        "id": 278645113,
        "sender_full_name": "Eric Huss",
        "timestamp": 1649735390
    },
    {
        "content": "<p>Thanks for that info. Looks like I need my bin in a seperate project. So how do I get a Rust bin to link to a Rust cdylib .so? ( Googling usually tells me how to get my Rust bin to link to a C lang .so. )</p>",
        "id": 278647923,
        "sender_full_name": "Bonts",
        "timestamp": 1649738688
    },
    {
        "content": "<p>Maybe I'm not understanding the question.  You can pass <code>-lfoo</code> to <code>rustc</code> to link to a <a href=\"http://libfoo.so\">libfoo.so</a> dylib. I outlined a few different approaches above on how to do that, but none of them are easy with cargo. Cargo is not designed to do that.</p>",
        "id": 278648449,
        "sender_full_name": "Eric Huss",
        "timestamp": 1649739498
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span>  I did not comepletely understand your first answer. Seems like cargo needs more completeness.</p>",
        "id": 278665885,
        "sender_full_name": "Bonts",
        "timestamp": 1649754301
    },
    {
        "content": "<p>Why do you exactly want this? You will get an extra copy of libstd and you won't have a safe interface.</p>",
        "id": 278666306,
        "sender_full_name": "bjorn3",
        "timestamp": 1649754530
    },
    {
        "content": "<p>By the way you can compile a single crate as both rlib and cdylib at the same time by specifying both in the crate-types array of <code>Cargo.toml</code>.</p>",
        "id": 278666469,
        "sender_full_name": "bjorn3",
        "timestamp": 1649754626
    }
]