[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"301348\">@Elinvynia</span> <span class=\"user-mention\" data-user-id=\"219696\">@XAMPPRocky</span> Created a new topic to discuss about Octocrab <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 197730246,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1589565990
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I’m unsure if I should use a static instance (<code>Octocrab::instance</code>), or store the Octocrab client just like how we store the <code>GithubClient</code> today, passing it as context to any function that might need it...</p>",
        "id": 197730257,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1589565994
    },
    {
        "content": "<p>Do you have a preference, or arguments about how it affects performance? I have absolutely no idea of the drawbacks of both approaches</p>",
        "id": 197730372,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1589566052
    },
    {
        "content": "<p>Please don't use the global</p>",
        "id": 197730578,
        "sender_full_name": "simulacrum",
        "timestamp": 1589566148
    },
    {
        "content": "<p>That's just generally more painful in the long run</p>",
        "id": 197730619,
        "sender_full_name": "simulacrum",
        "timestamp": 1589566175
    },
    {
        "content": "<p>Alright</p>",
        "id": 197734490,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1589568009
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255061\">@LeSeulArtichaut</span> <a href=\"https://github.com/LeSeulArtichaut/triagebot\">https://github.com/LeSeulArtichaut/triagebot</a> is this the repo you are working in?</p>",
        "id": 197760479,
        "sender_full_name": "Elinvynia",
        "timestamp": 1589582520
    },
    {
        "content": "<p>Yes, but I haven't pushed anything yet <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 197766508,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1589588872
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219696\">@XAMPPRocky</span> A bit of a stupid question, but how would I actually create the \"diff\" for a PR with octograb?</p>",
        "id": 197817257,
        "sender_full_name": "Elinvynia",
        "timestamp": 1589666458
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"301348\">@Elinvynia</span> I haven’t implemented that API yet so you need to use the HTTP API for now.</p>",
        "id": 197817349,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1589666557
    },
    {
        "content": "<p>You need to set a custom media type. <a href=\"https://developer.github.com/v3/pulls/#custom-media-types\">https://developer.github.com/v3/pulls/#custom-media-types</a></p>",
        "id": 197817426,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1589666675
    },
    {
        "content": "<p>I can also try help implementing some things in Octocrab</p>",
        "id": 197817507,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1589666858
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"301348\">@Elinvynia</span> Okay, I've just pushed to master a API that should allow to get a diff or patch with <code>pulls().get_diff</code> and <code>pulls().get_patch</code>. Try it out, and if there's no bugs I'll release it soon.</p>",
        "id": 197834735,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1589698994
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255061\">@LeSeulArtichaut</span> Thanks for being so helpful, I've reviewed your PRs now. <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 197834741,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1589699020
    },
    {
        "content": "<p>I've just released 0.2.3 which has the get diff and patch methods as well adds the markdown api and the gitignore api.</p>",
        "id": 197840398,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1589708718
    },
    {
        "content": "<p>Is there an easy tool for creating a patch/diff?</p>",
        "id": 197927204,
        "sender_full_name": "Elinvynia",
        "timestamp": 1589805044
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"301348\">@Elinvynia</span> Oh sorry I see what you meant now. You would need to use the Git Data API. <a href=\"https://developer.github.com/v3/git/\">https://developer.github.com/v3/git/</a></p>",
        "id": 197930046,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1589806710
    },
    {
        "content": "<p>You don't create a patch or diff to send, you commit to a branch.</p>",
        "id": 197930405,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1589806872
    },
    {
        "content": "<p>You might have an easier time using <code>git2</code> directly.</p>",
        "id": 197935486,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1589809101
    },
    {
        "content": "<p>git2 probably requires a file system which we ~don't have</p>",
        "id": 197936052,
        "sender_full_name": "simulacrum",
        "timestamp": 1589809373
    },
    {
        "content": "<p>well it can be reset at any point, but we have it</p>",
        "id": 197936889,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1589809738
    },
    {
        "content": "<p>hm okay -- that seems like a road to needing integrity checks all over the place and such, I'd rather avoid it if possible</p>",
        "id": 197938384,
        "sender_full_name": "simulacrum",
        "timestamp": 1589810435
    },
    {
        "content": "<p>I'll think about possible solutions then! Perhaps it opens up an issue with a link to the code? Still easier than us having to find them in the list of ICEs</p>",
        "id": 197959507,
        "sender_full_name": "Elinvynia",
        "timestamp": 1589819085
    },
    {
        "content": "<p>it should be possible to do everything through the github api  I think</p>",
        "id": 197960314,
        "sender_full_name": "simulacrum",
        "timestamp": 1589819399
    },
    {
        "content": "<p>To open a PR with changes purely through the API? I only found how to open a PR between branches</p>",
        "id": 197961112,
        "sender_full_name": "Elinvynia",
        "timestamp": 1589819716
    },
    {
        "content": "<p>well, you'd create a branch via the api and then open a pr with that branch</p>",
        "id": 197966248,
        "sender_full_name": "simulacrum",
        "timestamp": 1589821987
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/L3CDYWh82nhmhRxwM1H2SpJn/Capture-décran-2020-05-18-à-22.11.08.png\">Hehe, I feel lonely</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/L3CDYWh82nhmhRxwM1H2SpJn/Capture-décran-2020-05-18-à-22.11.08.png\" title=\"Hehe, I feel lonely\"><img src=\"/user_uploads/4715/L3CDYWh82nhmhRxwM1H2SpJn/Capture-décran-2020-05-18-à-22.11.08.png\"></a></div>",
        "id": 197991200,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1589833637
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"301348\">@Elinvynia</span> From what I've seen (from my own investigation, I mean), when you create a new file using GitHub's UI, you send a POST request to <a href=\"https://github.com/:owner/:repo/create/:branch/path/to/folder\">https://github.com/:owner/:repo/create/:branch/path/to/folder</a></p>",
        "id": 197991356,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1589833716
    },
    {
        "content": "<p>I'm not sure if we can use that in an automated app though</p>",
        "id": 197991373,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1589833731
    },
    {
        "content": "<p>Here is the form data:</p>\n<div class=\"codehilite\"><pre><span></span><code>authenticity_token:  some_b64_token\nfilename: issue-xxxxx.rs\nnew_filename: ices/issue-xxxxx.rs\ncommit: 3ea91680a5c33079a76bb107ff6861bc38198678\nquick_pull: rust-lang:master\npr:\ncontent_changed: true\nvalue: code goes here\nmessage: commit message\nplaceholder_message: Create issue-xxxxx.rs\ndescription: commit description\nauthor_email: email\n</code></pre></div>",
        "id": 197991457,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1589833783
    },
    {
        "content": "<p>If JavaScript is able to make that commit in the browser's sandbox, then I think it should be possible with triagebot?</p>",
        "id": 197991795,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1589833933
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"301348\">@Elinvynia</span> Nevermind me, there is actually <a href=\"https://developer.github.com/v3/repos/contents/#create-or-update-a-file\">an API endpoint</a> that allows you to create files</p>",
        "id": 197991961,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1589834022
    },
    {
        "content": "<p>There is also an API endpoint to <a href=\"https://developer.github.com/v3/repos/forks/#create-a-fork\">crate a fork</a> but I think we can create that manually and hard-code it into triagebot?</p>",
        "id": 197992185,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1589834127
    },
    {
        "content": "<p><a href=\"https://developer.github.com/v3/git/refs/#create-a-reference\">Here</a> is how you can create a branch, but you'd need to <a href=\"https://developer.github.com/v3/git/refs/#get-a-single-reference\">get the master HEAD commit</a> first</p>",
        "id": 197992478,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1589834282
    },
    {
        "content": "<p>And I think that's all we need, right? <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 197992603,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1589834337
    },
    {
        "content": "<p>Thanks a lot!</p>",
        "id": 197993333,
        "sender_full_name": "Elinvynia",
        "timestamp": 1589834758
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"301348\">Elinvynia</span> <a href=\"#narrow/stream/224082-t-release.2Ftriagebot/topic/Transition.20to.20the.20Octocrab.20GitHub.20API/near/197993333\">said</a>:</p>\n<blockquote>\n<p>Thanks a lot!</p>\n</blockquote>\n<p>You're welcome <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span><br>\nTo be fair though, most of my results don't come from GitHub's doc directly but from StackOverflow posts <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 197993582,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1589834886
    },
    {
        "content": "<p>I'll probably start work on the repositories API soon so hopefully this functionality will be available in a day or two.</p>",
        "id": 198068204,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1589896269
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219696\">@XAMPPRocky</span> Oh, I was going to implement the functionalities we'll need for triagebot. Would you mind accepting a PR with those few functionalities?</p>",
        "id": 198069163,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1589896657
    },
    {
        "content": "<p>Yeah sure.</p>",
        "id": 198069550,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1589896804
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 198069559,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1589896812
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219696\">@XAMPPRocky</span> <span class=\"user-mention\" data-user-id=\"301348\">@Elinvynia</span> I made a small proof-of-concept program, but it created <a href=\"https://github.com/LeSeulArtichaut/glacier/pull/1\">this</a>!</p>",
        "id": 198098887,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1589908731
    },
    {
        "content": "<p>Can you share the proof of concept? I'd be interested in seeing it.</p>",
        "id": 198099111,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1589908817
    },
    {
        "content": "<p>I was going to ;)</p>",
        "id": 198099130,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1589908827
    },
    {
        "content": "<p>However I'm diving into a backtrace</p>",
        "id": 198099150,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1589908836
    },
    {
        "content": "<p>Octocat ran into an issue when deserializing the response to creating the PR</p>",
        "id": 198099205,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1589908865
    },
    {
        "content": "<p><code>Error(\"invalid type: null, expected a string\", line: 1, column: 1657)</code></p>",
        "id": 198099255,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1589908888
    },
    {
        "content": "<p>It's a shame it doesn't give more info, like which field it issued at</p>",
        "id": 198099311,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1589908909
    },
    {
        "content": "<p>Anyway here's the code:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">env</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">octocrab</span>::<span class=\"n\">Octocrab</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">octocrab</span>::<span class=\"n\">params</span>::<span class=\"n\">repos</span>::<span class=\"n\">Reference</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">octocrab</span>::<span class=\"n\">models</span>::<span class=\"n\">Object</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[tokio::main]</span><span class=\"w\"></span>\n<span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">octocrab</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">octocrab</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Octocrab</span>::<span class=\"n\">builder</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">personal_token</span><span class=\"p\">(</span><span class=\"n\">env</span>::<span class=\"n\">var</span><span class=\"p\">(</span><span class=\"s\">&quot;TOKEN&quot;</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">&quot;No GitHub token&quot;</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">build</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">fork</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">octocrab</span><span class=\"p\">.</span><span class=\"n\">repos</span><span class=\"p\">(</span><span class=\"s\">&quot;LeSeulArtichaut&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;glacier&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">base</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">octocrab</span><span class=\"p\">.</span><span class=\"n\">repos</span><span class=\"p\">(</span><span class=\"s\">&quot;LeSeulArtichaut&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;glacier&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">master</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">base</span><span class=\"p\">.</span><span class=\"n\">get_ref</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">Reference</span>::<span class=\"n\">Branch</span><span class=\"p\">(</span><span class=\"s\">&quot;master&quot;</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">())).</span><span class=\"k\">await</span><span class=\"o\">?</span><span class=\"p\">.</span><span class=\"n\">object</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">master</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">Object</span>::<span class=\"n\">Commit</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">sha</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">master</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">sha</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">panic</span><span class=\"o\">!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fork</span><span class=\"p\">.</span><span class=\"n\">create_ref</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">Reference</span>::<span class=\"n\">Branch</span><span class=\"p\">(</span><span class=\"s\">&quot;ice-dummy&quot;</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">()),</span><span class=\"w\"> </span><span class=\"n\">master</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fork</span><span class=\"p\">.</span><span class=\"n\">create_file</span><span class=\"p\">(</span><span class=\"s\">&quot;ices/00000.rs&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;Test creating a file from Octocat&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;fn main() {}&quot;</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">branch</span><span class=\"p\">(</span><span class=\"s\">&quot;ice-dummy&quot;</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">send</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"k\">await</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">base</span><span class=\"p\">.</span><span class=\"n\">pulls</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"s\">&quot;Dummy ICE!&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;ice-dummy&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;master&quot;</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">body</span><span class=\"p\">(</span><span class=\"s\">&quot;This is a fake new catastrophic avalanche of ICE!&quot;</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">send</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"k\">await</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 198099464,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1589908951
    },
    {
        "content": "<p>I would also love that in general for serde_json, its errors are basically useless as is in HTTP apps.</p>",
        "id": 198099595,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1589909017
    },
    {
        "content": "<p>I don't want to compare by hand <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span></p>",
        "id": 198099731,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1589909061
    },
    {
        "content": "<p>Too many fields :D</p>",
        "id": 198099743,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1589909067
    },
    {
        "content": "<p><a href=\"https://docs.rs/serde_path_to_error/0.1.2/serde_path_to_error/\">https://docs.rs/serde_path_to_error/0.1.2/serde_path_to_error/</a></p>",
        "id": 198099760,
        "sender_full_name": "simulacrum",
        "timestamp": 1589909077
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 198099819,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1589909105
    },
    {
        "content": "<p><span aria-label=\"surprise\" class=\"emoji emoji-1f62e\" role=\"img\" title=\"surprise\">:surprise:</span></p>",
        "id": 198099829,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1589909111
    },
    {
        "content": "<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 198099840,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1589909120
    },
    {
        "content": "<p>I'll try that out then</p>",
        "id": 198100036,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1589909188
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255061\">@LeSeulArtichaut</span> That example is great, even in that small example you used the library in a way I didn't think people would.</p>",
        "id": 198100120,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1589909224
    },
    {
        "content": "<p>Well that's the beauty of open-source, right?</p>",
        "id": 198100292,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1589909289
    },
    {
        "content": "<p>Also makes me increasingly confident in the builder pattern approach to the design.</p>",
        "id": 198100370,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1589909328
    },
    {
        "content": "<p>Oh there's another issue I wanted to talk about</p>",
        "id": 198100401,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1589909350
    },
    {
        "content": "<p>Serde deserializes <code>None</code> into a <code>null</code> value</p>",
        "id": 198100421,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1589909360
    },
    {
        "content": "<p>Which doesn't make GitHub happy for certain cases</p>",
        "id": 198100454,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1589909379
    },
    {
        "content": "<p>Oh yeah, but None is not \"don't show up in the json\"</p>",
        "id": 198100470,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1589909388
    },
    {
        "content": "<p>I think we'll need to slap some <code>#[serde(skip_serializing_if = \"Option::is_none\")]</code> everywhere in the lib</p>",
        "id": 198100577,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1589909423
    },
    {
        "content": "<p>Because it triggered me some errors</p>",
        "id": 198100603,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1589909436
    },
    {
        "content": "<p>And I'll probably not be the only one :D</p>",
        "id": 198100622,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1589909448
    },
    {
        "content": "<p>Feel free to add it as you need, I wish there was a way to set that somehow at the struct or library level, since I never want to serialize <code>None</code> as <code>null</code>.</p>",
        "id": 198100699,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1589909492
    },
    {
        "content": "<p>Maybe we can have our own <code>Option</code> type</p>",
        "id": 198100850,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1589909543
    },
    {
        "content": "<p>Which doesn't deserialize as <code>null</code>?</p>",
        "id": 198100871,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1589909553
    },
    {
        "content": "<p>May be interesting <span aria-label=\"nerd\" class=\"emoji emoji-1f913\" role=\"img\" title=\"nerd\">:nerd:</span></p>",
        "id": 198100891,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1589909564
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255061\">@LeSeulArtichaut</span> That would actually be an acceptable alternative. And it's actually easy to implement.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#[derive(Serialize)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[serde(untagged)]</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">MyOption</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"cp\">#[serde(skip)]</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 198101440,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1589909848
    },
    {
        "content": "<p>/me wishes that github api had an actual spec so that we'd know when to do it</p>",
        "id": 198102921,
        "sender_full_name": "simulacrum",
        "timestamp": 1589910595
    },
    {
        "content": "<p>I would personally avoid a custom option type, and much prefer the skip_serializing_if annotations</p>",
        "id": 198102996,
        "sender_full_name": "simulacrum",
        "timestamp": 1589910615
    },
    {
        "content": "<p>Yeah, my solution does mean that it can basically be only used for serialisation, and you lose all of options methods. Thinking on it more the skip_serializing_if noise is fine. Maybe this is another thing a hypothetical proc macro would solve <a href=\"https://github.com/XAMPPRocky/octocrab/issues/11\">XAMPPRocky/octocrab#11</a>.</p>",
        "id": 198104125,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1589911143
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255061\">@LeSeulArtichaut</span> Back to your example, why did you create <code>fork</code> and <code>base</code>rather than using just one of those?</p>",
        "id": 198107016,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1589912478
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255061\">@LeSeulArtichaut</span> Great work! I've been experimenting a bit myself, though I am not as experienced as you.</p>",
        "id": 198112060,
        "sender_full_name": "Elinvynia",
        "timestamp": 1589915026
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"255061\">LeSeulArtichaut</span> Back to your example, why did you create <code>fork</code> and <code>base</code>rather than using just one of those?</p>\n</blockquote>\n<p>Basically, I originally wanted to file a PR against the real rust-lang/glacier repo, but I didn’t want to make any noise so I changed it back to my fork. I let the two variables to make it easy to go back to having the PR agaist another repo.</p>",
        "id": 198112558,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1589915275
    },
    {
        "content": "<p>Ah makes sense.</p>",
        "id": 198123842,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1589920959
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219696\">@XAMPPRocky</span> I'm filing a PR to integrate <code>serde_path_to_error</code> btw</p>",
        "id": 198123881,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1589920988
    },
    {
        "content": "<p><a href=\"https://github.com/XAMPPRocky/octocrab/issues/14\">XAMPPRocky/octocrab#14</a></p>",
        "id": 198124953,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1589921557
    },
    {
        "content": "<p>(Ping <span class=\"user-mention\" data-user-id=\"219696\">@XAMPPRocky</span> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>)</p>",
        "id": 198125943,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1589922027
    },
    {
        "content": "<p>Thanks! I can rebase my branches and get proper errors now :D</p>",
        "id": 198127288,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1589922695
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255061\">@LeSeulArtichaut</span> I created a PR to address the review requests by XAMPP <a href=\"https://github.com/LeSeulArtichaut/octocrab/pull/1\">https://github.com/LeSeulArtichaut/octocrab/pull/1</a></p>",
        "id": 198308108,
        "sender_full_name": "Elinvynia",
        "timestamp": 1590058498
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"301348\">@Elinvynia</span> Thank you very much! To thank you I'll give you a small tip: instead of:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">fmt</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Formatter</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">std</span>::<span class=\"n\">fmt</span>::<span class=\"nb\">Result</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">write_str</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">format</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;refs/{}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">ref_url</span><span class=\"p\">()))</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>You can write:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">fmt</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Formatter</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">std</span>::<span class=\"n\">fmt</span>::<span class=\"nb\">Result</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">write</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;refs/{}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">ref_url</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 198320639,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1590067963
    },
    {
        "content": "<p>Interesting, thanks!</p>",
        "id": 198323195,
        "sender_full_name": "Elinvynia",
        "timestamp": 1590069348
    },
    {
        "content": "<p>Btw <a href=\"https://doc.rust-lang.org/stable/std/macro.write.html\">here are the docs</a></p>",
        "id": 198323364,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1590069427
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219696\">@XAMPPRocky</span> How often are octocrab releases made? I guess it wouldn't be acceptable to use a git dependency</p>",
        "id": 198350094,
        "sender_full_name": "Elinvynia",
        "timestamp": 1590081788
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"301348\">@Elinvynia</span> Use a git dependency and tell me if your code works, and if it does I'll make a release soon.</p>",
        "id": 198350151,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1590081834
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219696\">@XAMPPRocky</span> There is an issue, though:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: failed to select a version for `base64`.\n    ... required by package `postgres-protocol v0.5.1`\n    ... which is depended on by `tokio-postgres v0.5.4`\n    ... which is depended on by `postgres-native-tls v0.3.0`\n    ... which is depended on by `triagebot v0.1.0 (/home/-snip-/projects/triagebot)`\nversions that meet the requirements `= 0.12.0` are: 0.12.0\n\nall possible versions conflict with previously selected packages.\n\n  previously selected package `base64 v0.12.1`\n    ... which is depended on by `octocrab v0.2.3 (https://github.com/XAMPPRocky/octocrab#077e39d3)`\n    ... which is depended on by `triagebot v0.1.0 (/home/-snip-/projects/triagebot)`\n\nfailed to select a version for `base64` which could resolve this conflict\n</code></pre></div>",
        "id": 198354977,
        "sender_full_name": "Elinvynia",
        "timestamp": 1590084213
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"301348\">@Elinvynia</span> Fixed</p>",
        "id": 198355143,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1590084289
    },
    {
        "content": "<p>Thanks, it compiles now!</p>",
        "id": 198355241,
        "sender_full_name": "Elinvynia",
        "timestamp": 1590084331
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"301348\">@Elinvynia</span> But does it run? <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 198356060,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1590084706
    },
    {
        "content": "<p>It might not :D</p>",
        "id": 198356262,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1590084812
    },
    {
        "content": "<p>If we encounter problems with serializing <code>None</code>s or failing to deserialize requests from GitHub</p>",
        "id": 198356304,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1590084840
    },
    {
        "content": "<p>Well, running it is a bit more difficult since that means setting up triagebot locally</p>",
        "id": 198356305,
        "sender_full_name": "Elinvynia",
        "timestamp": 1590084841
    },
    {
        "content": "<p>So far it compiles, at least, using the example by Artichaut with one small tweak (octograb.pulls instead of repo.pulls)</p>",
        "id": 198356395,
        "sender_full_name": "Elinvynia",
        "timestamp": 1590084878
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219696\">@XAMPPRocky</span> Shall I go and mark all <code>Option</code>s in <code>Serialize</code> types as <code>#[serde(skip_serializing_if = \"Option::is_none\")]</code>?</p>",
        "id": 198356473,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1590084932
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"301348\">@Elinvynia</span> What did you use Octocrab for, exactly?</p>",
        "id": 198356558,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1590084964
    },
    {
        "content": "<p>If you just used methods that I used in my example, it should be fine</p>",
        "id": 198356602,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1590084990
    },
    {
        "content": "<p>I hope <span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span></p>",
        "id": 198356616,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1590084999
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255061\">@LeSeulArtichaut</span> Yes, but wait a moment. I'm about to push some code.</p>",
        "id": 198356619,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1590085003
    },
    {
        "content": "<p>Got it</p>",
        "id": 198356642,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1590085017
    },
    {
        "content": "<p>Pushed</p>",
        "id": 198356756,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1590085070
    },
    {
        "content": "<p>Oh actually I think we should have this patch:</p>\n<div class=\"codehilite\"><pre><span></span><code>diff --git a/src/api/pulls/create.rs b/src/api/pulls/create.rs\nindex 7c4c525..3783ec2 100644\n--- a/src/api/pulls/create.rs\n+++ b/src/api/pulls/create.rs\n@@ -7,8 +7,11 @@ pub struct CreatePullRequestBuilder&lt;&#39;octo, &#39;b&gt; {\n     title: String,\n     head: String,\n     base: String,\n+    #[serde(skip_serializing_if = &quot;Option::is_none&quot;)]\n     body: Option&lt;String&gt;,\n+    #[serde(skip_serializing_if = &quot;Option::is_none&quot;)]\n     draft: Option&lt;bool&gt;,\n+    #[serde(skip_serializing_if = &quot;Option::is_none&quot;)]\n     maintainer_can_modify: Option&lt;bool&gt;,\n }\n\ndiff --git a/src/models.rs b/src/models.rs\nindex 47bd694..660ab91 100644\n--- a/src/models.rs\n+++ b/src/models.rs\n@@ -33,7 +33,7 @@ pub struct PullRequest {\n     pub closed_at: Option&lt;chrono::DateTime&lt;chrono::Utc&gt;&gt;,\n     pub mergeable: Option&lt;bool&gt;,\n     pub merged_at: Option&lt;String&gt;,\n-    pub merge_commit_sha: String,\n+    pub merge_commit_sha: Option&lt;String&gt;,\n     pub assignee: Option&lt;User&gt;,\n     pub assignees: Vec&lt;User&gt;,\n     pub requested_reviewers: Vec&lt;User&gt;,\n</code></pre></div>",
        "id": 198357280,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1590085321
    },
    {
        "content": "<p>I forgot to include it in my repos PR</p>",
        "id": 198357341,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1590085331
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255061\">@LeSeulArtichaut</span> Ping me here when you’ve made the PR, and I’ll release with those changes later today.</p>",
        "id": 198357375,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1590085351
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219696\">@XAMPPRocky</span> opened <a href=\"https://github.com/XAMPPRocky/octocrab/issues/16\">XAMPPRocky/octocrab#16</a></p>",
        "id": 198367325,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1590090466
    },
    {
        "content": "<p>That's a solid +226 lines xD</p>",
        "id": 198368663,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1590091081
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255061\">@LeSeulArtichaut</span> <span class=\"user-mention\" data-user-id=\"219696\">@XAMPPRocky</span> I made something that compiles and looks like it could work in my latest commit - <a href=\"https://github.com/rust-lang/triagebot/pull/526\">https://github.com/rust-lang/triagebot/pull/526</a></p>",
        "id": 198375960,
        "sender_full_name": "Elinvynia",
        "timestamp": 1590094379
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"301348\">@Elinvynia</span> The builder struct is unused, so it won’t work as is. I’d recommend adding Octocrab to Context, and using that in your Handler implementation. <a href=\"https://github.com/rust-lang/triagebot/blob/2822adc8be10b5fd46b95fefe240e2b31f6e3e62/src/handlers.rs\">https://github.com/rust-lang/triagebot/blob/2822adc8be10b5fd46b95fefe240e2b31f6e3e62/src/handlers.rs</a></p>",
        "id": 198376756,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1590094792
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"301348\">@Elinvynia</span> I've published 0.3 to <a href=\"http://crates.io\">crates.io</a></p>",
        "id": 198396226,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1590108632
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219696\">@XAMPPRocky</span> Is there a way to check if a branch exists?</p>",
        "id": 198438344,
        "sender_full_name": "Elinvynia",
        "timestamp": 1590152566
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"301348\">@Elinvynia</span> Yes, with <code>Octocrab::repos::get_ref</code>. E.g</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">octocrab</span><span class=\"p\">.</span><span class=\"n\">repos</span><span class=\"p\">(</span><span class=\"s\">&quot;owner&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;repo&quot;</span><span class=\"p\">).</span><span class=\"n\">get_ref</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">Reference</span>::<span class=\"n\">Branch</span><span class=\"p\">(</span><span class=\"s\">&quot;master&quot;</span><span class=\"p\">)).</span><span class=\"n\">is_ok</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"c1\">// branch exists</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 198438760,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1590152844
    },
    {
        "content": "<p>Will it give a specific error if it doesn't exist (rather than for example if ratelimit was reached)</p>",
        "id": 198439449,
        "sender_full_name": "Elinvynia",
        "timestamp": 1590153288
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219696\">@XAMPPRocky</span> Is there a reason you're enabling \"full\" on tokio's features? That brings in things like signal handling which, well, seems like a bit of waste dependency wise :)</p>",
        "id": 198439848,
        "sender_full_name": "simulacrum",
        "timestamp": 1590153550
    },
    {
        "content": "<p>No reason.</p>",
        "id": 198439919,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1590153597
    },
    {
        "content": "<p>Really I shouldn't be pulling in tokio directly at all, I'm only using it in examples and tests.</p>",
        "id": 198440060,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1590153659
    },
    {
        "content": "<p>Would this be an use case for dev dependencies?</p>",
        "id": 198440232,
        "sender_full_name": "Elinvynia",
        "timestamp": 1590153760
    },
    {
        "content": "<p>Ah okay, would be good to fix that :)</p>\n<p>re:the glacier PR, I just left a comment there as well but happy to merge that with a <a href=\"http://crates.io\">crates.io</a> dep for octocrab</p>",
        "id": 198440291,
        "sender_full_name": "simulacrum",
        "timestamp": 1590153806
    },
    {
        "content": "<p>no rush of course</p>",
        "id": 198440294,
        "sender_full_name": "simulacrum",
        "timestamp": 1590153809
    },
    {
        "content": "<p>I'm publishing 0.3.1 that moves tokio to dev-dependencies now.</p>",
        "id": 198441127,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1590154312
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"301348\">@Elinvynia</span> IIRC in my testing create_ref doesn’t error if the ref exists</p>",
        "id": 198441294,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1590154402
    },
    {
        "content": "<p>I will do some testing when I have time later today</p>",
        "id": 198441327,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1590154433
    },
    {
        "content": "<p>Yeah I tried looking into that, and neither GitHub's nor Git's documentation give any real indication on whether it would work or fail.</p>",
        "id": 198441634,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1590154615
    },
    {
        "content": "<p>At least its still better than reddit's API</p>",
        "id": 198441998,
        "sender_full_name": "Elinvynia",
        "timestamp": 1590154823
    },
    {
        "content": "<p><em>documentation is hard</em></p>",
        "id": 198442044,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1590154855
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> Sorry for the stupid question but what does \"r=me\" mean?</p>",
        "id": 198455698,
        "sender_full_name": "Elinvynia",
        "timestamp": 1590161766
    },
    {
        "content": "<p>will merge when whatever I said was done</p>",
        "id": 198455963,
        "sender_full_name": "simulacrum",
        "timestamp": 1590161900
    },
    {
        "content": "<p>I'm going to test creating a branch that exists</p>",
        "id": 198457621,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1590162689
    },
    {
        "content": "<p>Here's the GitHub response if the branch already exists:</p>\n<div class=\"codehilite\"><pre><span></span><code>{\n  &quot;message&quot;: &quot;Reference already exists&quot;,\n  &quot;documentation_url&quot;: &quot;https://developer.github.com/v3/git/refs/#create-a-reference&quot;\n}\n</code></pre></div>\n\n\n<p>Which means octocrab will return an <code>Err(Error::Github)</code>.</p>",
        "id": 198459540,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1590163507
    },
    {
        "content": "<p>Alright, I think I should be able to incorporate that, thanks a lot Artichaut!</p>",
        "id": 198462295,
        "sender_full_name": "Elinvynia",
        "timestamp": 1590164648
    },
    {
        "content": "<p>You're welcome ;)</p>",
        "id": 198462335,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1590164663
    },
    {
        "content": "<p>By the way do you speak French? :P</p>",
        "id": 198462356,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1590164673
    },
    {
        "content": "<p>Unfortunately not :c</p>",
        "id": 198466901,
        "sender_full_name": "Elinvynia",
        "timestamp": 1590166864
    },
    {
        "content": "<p>I thought you did :D</p>",
        "id": 198467166,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1590167002
    },
    {
        "content": "<p>:P</p>",
        "id": 198469592,
        "sender_full_name": "Elinvynia",
        "timestamp": 1590168233
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219696\">@XAMPPRocky</span> What can I help with on octocrab?</p>",
        "id": 198469660,
        "sender_full_name": "Elinvynia",
        "timestamp": 1590168253
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"301348\">@Elinvynia</span> The most helpful thing right now is adding more methods for different endpoints. Generally how I have been doing it is going to <a href=\"https://octokit.github.io/rest.js/v17/\">https://octokit.github.io/rest.js/v17/</a> Picking a section and going through and implementing the different methods.</p>",
        "id": 198470288,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1590168563
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"301348\">@Elinvynia</span> <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> Should we add a page in the wiki for the glacier command?</p>",
        "id": 198471961,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1590169325
    },
    {
        "content": "<p>yes please do!</p>",
        "id": 198471972,
        "sender_full_name": "simulacrum",
        "timestamp": 1590169332
    },
    {
        "content": "<p>Sure!</p>",
        "id": 198472833,
        "sender_full_name": "Elinvynia",
        "timestamp": 1590169791
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219696\">@XAMPPRocky</span> Can I make the error fields public? Right now I can't match on them</p>",
        "id": 198500582,
        "sender_full_name": "Elinvynia",
        "timestamp": 1590185416
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"301348\">@Elinvynia</span> Yeah go ahead, if you could also add <code>#[non_exhaustive]</code> to the struct that’s be great.</p>",
        "id": 198500884,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1590185619
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219696\">@XAMPPRocky</span> Does the <code>instance()</code> work now?</p>",
        "id": 199310742,
        "sender_full_name": "Elinvynia",
        "timestamp": 1590940370
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"301348\">@Elinvynia</span> What do you mean?</p>",
        "id": 199310748,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1590940397
    },
    {
        "content": "<p>The \"build the instance then use it anywhere\"</p>",
        "id": 199310814,
        "sender_full_name": "Elinvynia",
        "timestamp": 1590940541
    },
    {
        "content": "<p>I think <span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> didn't want to use static instances in Triagebot</p>",
        "id": 199310859,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1590940571
    },
    {
        "content": "<p>Yes whenever I've done that sort of thing in the past it's just led to trouble later down the line</p>",
        "id": 199310864,
        "sender_full_name": "simulacrum",
        "timestamp": 1590940593
    },
    {
        "content": "<p>not really entirely sure I feel that it belongs in octocrab either vs. having people roll their own given how relatively easy it is</p>",
        "id": 199310877,
        "sender_full_name": "simulacrum",
        "timestamp": 1590940656
    },
    {
        "content": "<p>Oh I thought the issue was it not working rather than it being a decision to avoid it</p>",
        "id": 199310924,
        "sender_full_name": "Elinvynia",
        "timestamp": 1590940730
    }
]