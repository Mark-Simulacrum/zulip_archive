[
    {
        "content": "<blockquote>\n<p>I think the open questions are around the exact behavior on capture (e.g., marching on String with a @ \"foo\", does that give you a: String, a: &amp;str, or a: &amp;String?)</p>\n</blockquote>",
        "id": 245109692,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1625612933
    },
    {
        "content": "<p>IMO, if there is an @, then it seems intuitive that the type of the variable should match the type of the pattern, i.e., a: &amp;str in the example. Assuming we are matching a value with type &amp;String, then a variable without an @ binding should have the most general type (which also preserves back compat), i.e., a: &amp;String.</p>",
        "id": 245109851,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1625613074
    },
    {
        "content": "<p>What are the arguments for a to have a String type rather than a str type in the @ case?</p>",
        "id": 245109886,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1625613113
    },
    {
        "content": "<p>I believe the primary argument was consistency between the raw binding and the constrained binding.</p>",
        "id": 245109963,
        "sender_full_name": "Connor Horman",
        "timestamp": 1625613164
    },
    {
        "content": "<p>So, </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">string</span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"w\"> </span><span class=\"s\">\"foo\"</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"cm\">/* x has type &amp;str here*/</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"cm\">/* x has type &amp;String here*/</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 245110022,
        "sender_full_name": "Connor Horman",
        "timestamp": 1625613239
    },
    {
        "content": "<p>Is that an implementation concern, or a 'least surprise for the user' concern?</p>",
        "id": 245110650,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1625613766
    },
    {
        "content": "<p>I think user surprise would be my expectation. That said, \"forcing\" the less general type on the user (str in this case) seems a little awkward</p>",
        "id": 245110847,
        "sender_full_name": "simulacrum",
        "timestamp": 1625613962
    },
    {
        "content": "<p>As long as it's possible to control which one you get with additional annotations, it seems logical to just pick an option and use it consistently</p>",
        "id": 245110910,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625614013
    },
    {
        "content": "<p>I don't think there's a reason to let you have that control in the binding</p>",
        "id": 245110928,
        "sender_full_name": "simulacrum",
        "timestamp": 1625614037
    },
    {
        "content": "<p>The original type is the least restrictive</p>",
        "id": 245110937,
        "sender_full_name": "simulacrum",
        "timestamp": 1625614054
    },
    {
        "content": "<p>IMO assigning types from the outside in gives a better result here</p>",
        "id": 245111002,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625614092
    },
    {
        "content": "<p>and you could get the other type with <code>&amp;*(x @ \"foo\") =&gt; ...</code> or such</p>",
        "id": 245111030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625614138
    },
    {
        "content": "<p>Given that the more general type can always be coerced to the less general one, it seems unnecessary to have the option to annotate</p>",
        "id": 245111507,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1625614598
    },
    {
        "content": "<p>As a user, Iâ€™m not sure if it is more surprising for the type to not match the pattern or for the presence of a pattern to affect the type</p>",
        "id": 245111545,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1625614641
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256841\">Nick Cameron</span> <a href=\"#narrow/stream/281601-project-deref-patterns/topic/capture.20type/near/245109851\">said</a>:</p>\n<blockquote>\n<p>IMO, if there is an @, then it seems intuitive that the type of the variable should match the type of the pattern, i.e., a: &amp;str in the example. Assuming we are matching a value with type &amp;String, then a variable without an @ binding should have the most general type (which also preserves back compat), i.e., a: &amp;String.</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">_check</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;&amp;</span><span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">assert!</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p><strong>already</strong> yields:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>error[E0308]: mismatched types\n --&gt; src/lib.rs:4:45\n  |\n4 |         y @ Some(true) =&gt; assert!(y == Some(true)),\n  |                                             ^^^^\n  |                                             |\n  |                                             expected `&amp;bool`, found `bool`\n  |                                             help: consider borrowing here: `&amp;true`\n</code></pre></div>\n<ul>\n<li><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=b2de486225ce0fa0e335431e8a5b2cab\">Playground</a></li>\n</ul>\n<p>This problem was introduced with match binding modes / match ergonomics, so I just want to warn against making other such mistakes in the name of sugar: consistency ought to be more important than excessive sugar / terseness, as shown by C++ footguns.</p>",
        "id": 245445407,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1625838538
    }
]