[
    {
        "content": "<p>Agenda:</p>\n<ul>\n<li>Close closure pretty print <a href=\"https://github.com/rust-lang/rust/pull/77069\">https://github.com/rust-lang/rust/pull/77069</a></li>\n<li>Discuss remaining issues on capture analysis inference variable instead of tuple (<a href=\"https://github.com/sexxi-goose/rust/pull/23\">https://github.com/sexxi-goose/rust/pull/23</a>)</li>\n<li>Discuss any concerns with doing min capture analysis after processing all expressions (i.e. after handling all the callbacks) instead of  minimizing while processing the expressions (during the consume/mutate/borrow callbacks)</li>\n</ul>",
        "id": 211668532,
        "sender_full_name": "Aman Arora",
        "timestamp": 1601406118
    },
    {
        "content": "<p>Discuss if there something that we should keep in mind for migration lints for edition 2021</p>",
        "id": 211710374,
        "sender_full_name": "Aman Arora",
        "timestamp": 1601435215
    },
    {
        "content": "<p>Are we doing zoom?</p>",
        "id": 211932993,
        "sender_full_name": "Aman Arora",
        "timestamp": 1601568018
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 211933294,
        "sender_full_name": "Aman Arora",
        "timestamp": 1601568132
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span>, sorry</p>",
        "id": 211933711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601568306
    },
    {
        "content": "<p>lost track of time</p>",
        "id": 211933714,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601568307
    },
    {
        "content": "<p>Agenda:</p>\n<ul>\n<li>[*] Close closure pretty print <a href=\"https://github.com/rust-lang/rust/pull/77069\">https://github.com/rust-lang/rust/pull/77069</a></li>\n<li>[ ] Discuss remaining issues on capture analysis inference variable instead of tuple (<a href=\"https://github.com/sexxi-goose/rust/pull/23\">https://github.com/sexxi-goose/rust/pull/23</a>)</li>\n<li>[ ] Discuss if there something that we should keep in mind for migration lints for edition 2021</li>\n<li>[ ] Discuss any concerns with doing min capture analysis after processing all expressions (i.e. after handling all the callbacks) instead of  minimizing while processing the expressions (during the consume/mutate/borrow callbacks)</li>\n</ul>",
        "id": 211934008,
        "sender_full_name": "Aman Arora",
        "timestamp": 1601568424
    },
    {
        "content": "<p>Do you want to chat on Zoom?</p>",
        "id": 211934117,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601568472
    },
    {
        "content": "<p>Let's try it, mnight be useful</p>",
        "id": 211934180,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601568485
    },
    {
        "content": "<p>Sure</p>",
        "id": 211934206,
        "sender_full_name": "Aman Arora",
        "timestamp": 1601568498
    },
    {
        "content": "<p>interior-mutability.stderr</p>",
        "id": 211934592,
        "sender_full_name": "Aman Arora",
        "timestamp": 1601568681
    },
    {
        "content": "<p>I think u disconnected</p>",
        "id": 211934798,
        "sender_full_name": "Aman Arora",
        "timestamp": 1601568781
    },
    {
        "content": "<p>btw <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> or <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> would be able to help with this code, <span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> (I'm cc'ing them :)</p>",
        "id": 211940474,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601571391
    },
    {
        "content": "<p>(we're looking a bit at the diagnostics code that is specialized to generators being send<br>\n)</p>",
        "id": 211940495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601571401
    },
    {
        "content": "<p>The error we are seeing is with src/test/ui/async-await/issue-70818.stderr  in <a href=\"https://github.com/sexxi-goose/rust/pull/23\">https://github.com/sexxi-goose/rust/pull/23</a></p>\n<p>To give some background about this PR and closure capture analysis in general: </p>\n<ul>\n<li>Before this PR we would create a tuple of inference variable each infer var corresponding to type of an upvar</li>\n<li>RFC 2229: capturing precise paths so eg: capturing foo.x.y instead of foo, if foo.x.y is the only path starting at foo used in the closure being analyzed. With RFC 2229 the number of upvars and hence the arity of the tuple isn't known</li>\n<li>What we now do with this PR is create a single infer variable and then replace it with a tuple of types once we have figured out number of captured places.</li>\n</ul>",
        "id": 211945044,
        "sender_full_name": "Aman Arora",
        "timestamp": 1601573263
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> what can I help with specifically?</p>",
        "id": 211967378,
        "sender_full_name": "tmandry",
        "timestamp": 1601583024
    },
    {
        "content": "<p>it looks like the generator-specific diagnostics code isn't triggering there anymore, is that what you're trying to solve?</p>",
        "id": 211967444,
        "sender_full_name": "tmandry",
        "timestamp": 1601583073
    },
    {
        "content": "<p>Yea</p>",
        "id": 211967655,
        "sender_full_name": "Aman Arora",
        "timestamp": 1601583151
    },
    {
        "content": "<p>Sorry I was busy earlier, and didn't add enough details. One thing that is probably causing the issue with diagnostics is an extra obligation. </p>\n<p>So from what I understand we have a chain of obligations. <br>\n[Generator] -&gt; [list of captured types] -&gt; Bound</p>\n<p>So for the generator to meet the bound the list of captured types must also meet the bound. With the change we have made, the chain however now looks like</p>\n<p>[Generator] -&gt; [Inference Variable]  -&gt; Bound</p>\n<p>Where the inference variable once resolved turns into a tuple containing the captured types, which in turn sets the obligations on the captured types.</p>\n<p>From our discussion this morning, it might be possible that the added level of indirection results in some conditions to fail and therefore resulting in poor diagnostics here:  <a href=\"https://github.com/sexxi-goose/rust/pull/23/files#diff-b77011eccfaec43053e1271d0c139e66\">https://github.com/sexxi-goose/rust/pull/23/files#diff-b77011eccfaec43053e1271d0c139e66</a></p>",
        "id": 211997282,
        "sender_full_name": "Aman Arora",
        "timestamp": 1601604415
    },
    {
        "content": "<p>I haven't had a change to investigate this possibility and like if I get your thoughts on this. </p>\n<p>Thanks <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 211997296,
        "sender_full_name": "Aman Arora",
        "timestamp": 1601604451
    },
    {
        "content": "<p>Yeah that does sound like a possibility. The conditions for that error message are in this function.. <a href=\"https://github.com/rust-lang/rust/blob/8876ffc9235dade728e1fbc4be4c85415fdd0bcd/compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs#L1265:L1265\"><code>maybe_note_obligation_cause_for_async_await</code></a></p>",
        "id": 212133463,
        "sender_full_name": "tmandry",
        "timestamp": 1601675713
    },
    {
        "content": "<p>First step would be looking at debug logs in that function (and maybe diffing them before/after your change) to figure out what conditions are not being met</p>",
        "id": 212133559,
        "sender_full_name": "tmandry",
        "timestamp": 1601675774
    },
    {
        "content": "<p>Thank you, we'll probably spend some time on it over the weekend, I let you know how it goes <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 212134573,
        "sender_full_name": "Aman Arora",
        "timestamp": 1601676657
    },
    {
        "content": "<p>The code can be cleaned up here, but if the first thing we see is a tuple we ignore it. <br>\n<a href=\"https://github.com/sexxi-goose/rust/pull/23/commits/5648be6b9e982c5277d44934ac6212c4c99dcd09\">https://github.com/sexxi-goose/rust/pull/23/commits/5648be6b9e982c5277d44934ac6212c4c99dcd09</a></p>",
        "id": 212326048,
        "sender_full_name": "Aman Arora",
        "timestamp": 1601916389
    },
    {
        "content": "<p>I'm curious if this code ever runs before typeck? Reason I ask is, it relies on upvars_mentioned which is generated before typeck. After typechk we want to use closure_captures which will contain different (more precise) information. </p>\n<p>by precision I mean if <code>foo.bar.baz</code> is used by the closure, closure will only capture that path and that is what will in closure captures. (upvars_mentioned will only have <code>foo</code>)</p>",
        "id": 212326373,
        "sender_full_name": "Aman Arora",
        "timestamp": 1601916589
    },
    {
        "content": "<p>Actually we do use typeck_results below it, so I'm assuming it should be fine</p>",
        "id": 212327078,
        "sender_full_name": "Aman Arora",
        "timestamp": 1601916932
    }
]