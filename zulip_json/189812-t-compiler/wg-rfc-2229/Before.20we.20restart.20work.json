[
    {
        "content": "<p>Just leaving some notes here/ things it would be nice to have feedback on for once we start work again (no rush). </p>\n<ul>\n<li>\n<p>Order in which we need to finish the issues currently being worked on:<br>\n 1)  <a href=\"https://github.com/rust-lang/project-rfc-2229/issues/15\">https://github.com/rust-lang/project-rfc-2229/issues/15</a> <br>\n 2) <a href=\"https://github.com/rust-lang/project-rfc-2229/issues/4\">https://github.com/rust-lang/project-rfc-2229/issues/4</a> <br>\n 3) <a href=\"https://github.com/rust-lang/project-rfc-2229/issues/7\">https://github.com/rust-lang/project-rfc-2229/issues/7</a><br>\n15 before 4 because we need to pass certain test cases related to information in the compiler output<br>\n4 before 7 because that lets us discard unused captures.</p>\n</li>\n<li>\n<p><a href=\"https://github.com/rust-lang/project-rfc-2229/pull/16\">https://github.com/rust-lang/project-rfc-2229/pull/16</a> contains the details about ignoring <code>let _ = var</code> as a capture.  If this looks good, we should probably open a PR on rust-lang/rust to collect more feedback<br>\nMaybe even this should/needs to be accepted before 7.</p>\n</li>\n<li>\n<p><a href=\"https://github.com/rust-lang/rust/pull/72465\">https://github.com/rust-lang/rust/pull/72465</a> PR relies on upvars instead of paths (which makes sense given the current compiler). In original plan draft it was listed that liveness should use closure captures. I haven't gone through the code in passes/liveness.rs in depth but does our change to use Place affect it and if so what's the impact? </p>\n</li>\n<li>\n<p>Do we need to document the <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/minimal.20capture.20.239.3A.20interesting.20example/near/205673496\">example here</a> somewhere?</p>\n</li>\n</ul>\n<p>Based on the comment here: <a href=\"https://github.com/rust-lang/rfcs/pull/2229#issuecomment-360901580\">https://github.com/rust-lang/rfcs/pull/2229#issuecomment-360901580</a> about doing something like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">NewClosure</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>It feels like such a thing won't be supported because alias_id1 and alias_id2 conflict</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Point</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"mi\">20</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">alias_id1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">c1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">alias_id1</span><span class=\"p\">).</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">alias_id1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">alias_id2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">y</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">alias_id2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">     </span><span class=\"n\">c1</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">c2</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 206075126,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596659935
    },
    {
        "content": "<p>Also <a href=\"https://github.com/rust-lang/rust/pull/74314#issuecomment-660581970\">https://github.com/rust-lang/rust/pull/74314#issuecomment-660581970</a> is on hold which would affect <a href=\"https://github.com/rust-lang/rust/issues/4\">#4</a> timeline.</p>",
        "id": 206218145,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596766535
    }
]