[
    {
        "content": "<p>Regarding the <code>hir_id</code> field of <code>hir::Place</code></p>",
        "id": 199132593,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590744779
    },
    {
        "content": "<p>I should probably review the code and where it is used</p>",
        "id": 199132601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590744785
    },
    {
        "content": "<p>but my belief is that it is used for error reporting</p>",
        "id": 199132815,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590744957
    },
    {
        "content": "<p>I would probably remove it from <code>hir::Place</code> but add a <code>hir::PlaceWithHirId</code> sort of structure, perhaps with a better name =)</p>",
        "id": 199132867,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590744983
    },
    {
        "content": "<p>the other field that this applies to is the <code>span</code> field</p>",
        "id": 199133776,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590745680
    },
    {
        "content": "<p>these are cases where I wish we had a good find-all-references impl :)</p>",
        "id": 199133816,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590745687
    },
    {
        "content": "<p>I guess I would say <code>hir::PlaceInstance</code> or something might be a name for this wrapper structure? or <code>PlaceReference</code>? basically it's <em>some particular reference to a place</em>?</p>",
        "id": 199133859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590745744
    },
    {
        "content": "<p>so the idea would be to have</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">PlaceRef</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">hir_id</span>: <span class=\"nc\">HirId</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">span</span>: <span class=\"nc\">Span</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">place</span>: <span class=\"nc\">Place</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 199133901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590745778
    },
    {
        "content": "<p>and replace various uses of <code>Place</code> with <code>PlaceRef</code></p>",
        "id": 199133921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590745786
    },
    {
        "content": "<p>(the easier way to refactor might be to just rename <code>Place</code> to <code>PlaceRef</code>, fix everything, and then extract out the <code>Place</code> struct again)</p>",
        "id": 199134026,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590745813
    },
    {
        "content": "<p>When would we ever use <code>Place</code> on is own?</p>",
        "id": 199142944,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1590752825
    },
    {
        "content": "<p>When we list out the set of things that a closure captures</p>",
        "id": 199166714,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590764786
    },
    {
        "content": "<p>it seems like that is not tied to any specific usage</p>",
        "id": 199166751,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590764797
    },
    {
        "content": "<p>though I guess it's not <em>harmful</em> to tie it to a specific usage necessarily, might even help with diagnostics</p>",
        "id": 199166775,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590764809
    },
    {
        "content": "<p>i.e., it sort of captures that extra information that we like to keep to help explain to people <em>why</em> a given path is captured</p>",
        "id": 199166818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590764830
    },
    {
        "content": "<p>still, my feeling was that having <code>hir_id</code> and the like would ultimately complicate things</p>",
        "id": 199198370,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590779362
    },
    {
        "content": "<p>it feels like what we want is a notion of \"canonical place\" that we could (e.g.) compare for equality and the like</p>",
        "id": 199198392,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590779375
    },
    {
        "content": "<p>and then (separately) some hir-id or span to cite as \"why it is captured\"</p>",
        "id": 199198403,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590779386
    },
    {
        "content": "<p>I'll take a look over how <code>HirPlace</code>s are used over the next week.</p>",
        "id": 199268504,
        "sender_full_name": "Aman Arora",
        "timestamp": 1590861668
    },
    {
        "content": "<p>When I was discussing projects with @Centril, <a href=\"https://github.com/rust-lang/rfcs/pull/1650\">https://github.com/rust-lang/rfcs/pull/1650</a> and <a href=\"https://github.com/Centril/rfcs/blob/rfc/uniform-generic-bounds/text/0000-uniform-generic-bounds.md\">https://github.com/Centril/rfcs/blob/rfc/uniform-generic-bounds/text/0000-uniform-generic-bounds.md</a> came up as well. I know these aren't accepted RFCs and I don't think they are going to affected by this refactor directly, but I'm not very familiar with the Rust codebase and thought I should bring these up.</p>",
        "id": 199268508,
        "sender_full_name": "Aman Arora",
        "timestamp": 1590861683
    },
    {
        "content": "<p>I don't think that they're relevant to this.</p>",
        "id": 199274634,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1590870511
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  outside of typechk and mir lowering, Place seems to be only be used in clippy and <br>\n(here is how we got to this: <a href=\"https://github.com/sexxi-goose/rust/issues/14#issuecomment-638374305\">https://github.com/sexxi-goose/rust/issues/14#issuecomment-638374305</a>)</p>\n<div class=\"codehilite\"><pre><span></span><code>librustc_mir_build/build/expr/as_place.rs\n69:    crate fn as_place&lt;M&gt;(&amp;mut self, mut block: BasicBlock, expr: M) -&gt; BlockAnd&lt;Place&lt;&#39;tcx&gt;&gt;\n\nlibrustc_mir_build/build/expr/into.rs\n398:                debug_assert!(Category::of(&amp;expr.kind) == Some(Category::Place));\n406:                debug_assert!(Category::of(&amp;expr.kind) == Some(Category::Place));\n415:                debug_assert!(Category::of(&amp;expr.kind) == Some(Category::Place));\n\ntools/clippy/clippy_lints/src/escape.rs\n9:use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, Place, PlaceBase};\n\ntools/clippy/clippy_lints/src/loops.rs\n31:use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, Place, PlaceBase};\n\ntools/clippy/clippy_lints/src/utils/usage.rs\n11:use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, Place, PlaceBase};\n</code></pre></div>",
        "id": 199653238,
        "sender_full_name": "Aman Arora",
        "timestamp": 1591206775
    },
    {
        "content": "<p>Only the uses in Clippy are of  the HIR <code>Place</code>.</p>",
        "id": 199653858,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1591207067
    },
    {
        "content": "<p>I was assuming that Category::Place in mir_build was to indentify lowering HirPlace to MirPlace, because that needs to happen somewhere</p>",
        "id": 199654824,
        "sender_full_name": "Aman Arora",
        "timestamp": 1591207506
    },
    {
        "content": "<p>In the HIR that's being lowered everything is still an <code>hir::Expr</code>. <code>Place</code> is only used for some analysis passes in typeck.</p>",
        "id": 199655319,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1591207637
    },
    {
        "content": "<p>I see, thank you</p>",
        "id": 199655438,
        "sender_full_name": "Aman Arora",
        "timestamp": 1591207686
    },
    {
        "content": "<p>OK, good to know.</p>",
        "id": 199657144,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591208577
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> what did you think about my comments about separating the <code>hir_id</code> field from <code>Place</code>?</p>",
        "id": 199657456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591208747
    },
    {
        "content": "<p>i.e., do you think it makes sense to try and do that?</p>",
        "id": 199657463,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591208752
    },
    {
        "content": "<p>Perhaps. I guess I would work out what the code needs before doing the refactoring. I don't really see having <code>PartialEq</code> helping much because there's still some redundancy in the <code>Place</code> representation (inference variables, different normalization).</p>",
        "id": 199658657,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1591209319
    },
    {
        "content": "<p>It could be nice conceptually.</p>",
        "id": 199658810,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1591209373
    },
    {
        "content": "<p>Yeah, I think it's as much a matter of conceptually isolating them as anything else, good point that PartialEq isn't likely to be literally very helpful without further changes</p>",
        "id": 199664596,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591212308
    },
    {
        "content": "<p>/me grumbles about normalization</p>",
        "id": 199664613,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591212322
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116118\">Matthew Jasper</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/refactoring.20.60hir.3A.3APlace.60.20and.20.60hir_id.60/near/199658657\">said</a>:</p>\n<blockquote>\n<p>Perhaps. I guess I would work out what the code needs before doing the refactoring. I don't really see having <code>PartialEq</code> helping much because there's still some redundancy in the <code>Place</code> representation (inference variables, different normalization).</p>\n</blockquote>\n<p>Can you elaborate a bit more on what <code>PartialEq</code> is and what you mean by normalizations and where might be some good reading material about it?</p>",
        "id": 199695036,
        "sender_full_name": "Aman Arora",
        "timestamp": 1591231815
    },
    {
        "content": "<p><code>PartialEq</code> is <a href=\"https://doc.rust-lang.org/std/cmp/trait.PartialEq.html\">https://doc.rust-lang.org/std/cmp/trait.PartialEq.html</a><br>\nBy normalization I'm referring to how <code>&lt;std::slice::iter::Iter&lt;'a, T&gt; as Iterator&gt;::Item</code> and <code>&amp;'a T</code> are the different representations of the same type. I couldn't find anything particularly helpful explaining this for the compiler.</p>",
        "id": 199784311,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1591292910
    },
    {
        "content": "<p>Is there any part of rustc that currently deals with normalizing exprs to minimal form? Can we get this information from the type checker?</p>",
        "id": 199833420,
        "sender_full_name": "Aman Arora",
        "timestamp": 1591328696
    },
    {
        "content": "<p>Which part of <code>Place</code>s would require type normalization? Though I'm wondering if projections are normalized?</p>\n<div class=\"codehilite\"><pre><span></span><code>fn y(x: &amp;String) {\n    println!(&quot;{}&quot;,x);\n}\n\nfn main() {\n    let x = String::from(&quot;z&quot;);\n\n    y(&amp;(*(&amp;x)));\n}\n</code></pre></div>\n\n\n<p>where <code>(&amp;(*(&amp;x)))</code> can just be <code>&amp;x</code></p>",
        "id": 199833570,
        "sender_full_name": "Aman Arora",
        "timestamp": 1591328994
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 199836346,
        "sender_full_name": "Aman Arora",
        "timestamp": 1591333200
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> so there are a few distinct concepts that have to be separated here</p>",
        "id": 199876929,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591364302
    },
    {
        "content": "<p>what <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> was referring to is more about <em>types</em></p>",
        "id": 199876940,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591364307
    },
    {
        "content": "<p>not <em>expressions</em></p>",
        "id": 199876944,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591364310
    },
    {
        "content": "<p>in particular, HIR places (and MIR places...) embed in some places type information, and that type information can be expressed in various ways that are semantically equivalent but are represented differently</p>",
        "id": 199876993,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591364338
    },
    {
        "content": "<p>associated types are one possible example etc</p>",
        "id": 199877002,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591364343
    },
    {
        "content": "<p>inference variables are another</p>",
        "id": 199877009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591364348
    },
    {
        "content": "<p>I don't think we really have to worry about these details yet, they may become relevant but not for some time</p>",
        "id": 199877048,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591364367
    },
    {
        "content": "<p>that said, there is some documentation I think in the rustc-dev-guide, let me look</p>",
        "id": 199877064,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591364377
    },
    {
        "content": "<p>anyway, as far as \"normalizing\" expressions, that is in fact the role of the HIR place itself, or at least part of it</p>",
        "id": 199877103,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591364398
    },
    {
        "content": "<p>your example didn't quite make sense, because it included <code>&amp;</code> expressions -- we are mainly considered with a subset of expressions that we call \"place expressions\", though I think the term \"path\" is also rather useful</p>",
        "id": 199877190,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591364429
    },
    {
        "content": "<p>these are basically expressions that name \"places\" in memory -- so e.g. a local variable <code>x</code> names a stack slot,</p>",
        "id": 199877217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591364443
    },
    {
        "content": "<p>or a field <code>x.f</code> names a field of some struct that lives somewhere</p>",
        "id": 199877227,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591364450
    },
    {
        "content": "<p>the full form is something like</p>\n<div class=\"codehilite\"><pre><span></span><code>Expr = local variable | Expr . Projection\nProjection = field name | &#39;[&#39; expr &#39;]&#39; | deref\n</code></pre></div>",
        "id": 199877337,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591364510
    },
    {
        "content": "<p>so e.g. <code>(*x).f</code> is a place expression</p>",
        "id": 199877344,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591364516
    },
    {
        "content": "<p>that indicates the point in memory you reach by starting with the pointer <code>x</code>, going to the memory it refers to, and finding the field <code>f</code> there</p>",
        "id": 199877413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591364534
    },
    {
        "content": "<p>note that this place expression is \"normalized\" in that the source code the user wrote was probably <code>x.f</code>and the compiler inserted the <code>*</code> to make <code>(*x).f</code></p>",
        "id": 199877500,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591364588
    },
    {
        "content": "<p>this happens as part of the <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_typeck/expr_use_visitor/struct.ExprUseVisitor.html\"><code>ExprUseVisitor</code></a>, we won't have to reproduce that</p>",
        "id": 199877518,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591364599
    },
    {
        "content": "<p>what I've been talking about in this refactoring is separating out the conceptual <em>place expression</em> (<code>(*x).f</code>) from some particular expression in the source code from which it was created (the <code>x.f</code>, which is identified by the <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_typeck/expr_use_visitor/struct.Place.html#structfield.hir_id\"><code>hir_id</code></a> and <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_typeck/expr_use_visitor/struct.Place.html#structfield.span\"><code>Span</code></a>)</p>",
        "id": 199877799,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591364725
    },
    {
        "content": "<p>I was mostly curious where we used types in Place and also curious if someone wrote that code, will the projections be able to normalize the repeated reference and dereference.</p>\n<p>So from what I can see projections doesn't really store field information, just \"Other\" right now (<a href=\"https://github.com/sexxi-goose/rust/blob/master/src/librustc_typeck/mem_categorization.rs#L362\">https://github.com/sexxi-goose/rust/blob/master/src/librustc_typeck/mem_categorization.rs#L362</a>), and I also previously mentioned that we need to do the categorization for upvars as well (not hard given we already have functions that are going to be doing the heavy lifting)</p>",
        "id": 199909023,
        "sender_full_name": "Aman Arora",
        "timestamp": 1591378137
    },
    {
        "content": "<p>Yes, we are going to have to extend <code>Place</code> to be more complete</p>",
        "id": 199911586,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591379549
    },
    {
        "content": "<p>The current HIR place was designed with limited purposes in mind</p>",
        "id": 199911598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591379558
    },
    {
        "content": "<p>The <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/struct.Place.html\">MIR place</a> is complete</p>",
        "id": 199911606,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591379563
    },
    {
        "content": "<p>So is the plan to start with something like what you have suggested and then move on to bringing things from <code>librustc_mir_build/build/expr</code>?</p>",
        "id": 199999424,
        "sender_full_name": "Aman Arora",
        "timestamp": 1591488769
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> I guess we have to settle into a canonical plan</p>",
        "id": 200132983,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591638688
    },
    {
        "content": "<p>I think probably a good place to start with HIR Place would be to start making it more precise</p>",
        "id": 200133001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591638702
    },
    {
        "content": "<p>that's more important, I think, than the <code>HirId</code> question</p>",
        "id": 200133011,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591638707
    },
    {
        "content": "<p>although that's also a good refactoring</p>",
        "id": 200133020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591638712
    },
    {
        "content": "<p>I'm trying to remember if we have a kind of \"canonical place\" to trackl the plans etc</p>",
        "id": 200133077,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591638728
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> I was looking at the list of places</p>",
        "id": 200246698,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591716733
    },
    {
        "content": "<p>or rather projections</p>",
        "id": 200246707,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591716738
    },
    {
        "content": "<p>I think we probably don't intend to capture individual elements from slices</p>",
        "id": 200246766,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591716755
    },
    {
        "content": "<p>similarly, the way that HIR Place is setup now, I guess that it doesn't retain the \"type\" information for intermediate fields and the like, not sure if this is a problem</p>",
        "id": 200246907,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591716809
    },
    {
        "content": "<p>It's probably not what I would expect.</p>",
        "id": 200246928,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1591716817
    },
    {
        "content": "<p>I think we should start by not capturing slice elements, anyway</p>",
        "id": 200246979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591716839
    },
    {
        "content": "<p>probably just fields/derefs</p>",
        "id": 200247027,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591716843
    },
    {
        "content": "<p>basically I'm thinking about what the projection structure should look like when we're done</p>",
        "id": 200247066,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591716858
    },
    {
        "content": "<p>probably it looks more-or-less the same as MIR indexing, but I guess we don't need as much detail about indices</p>",
        "id": 200247152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591716897
    },
    {
        "content": "<p>e.g., just \"index\" suffices</p>",
        "id": 200247162,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591716900
    },
    {
        "content": "<p>(this is why I brought it up)</p>",
        "id": 200247172,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591716905
    },
    {
        "content": "<p>not sure about downcast</p>",
        "id": 200247188,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591716908
    },
    {
        "content": "<p>I was considering combining it into <code>Field(u32, VariantIdx)</code></p>",
        "id": 200247505,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1591717019
    },
    {
        "content": "<p>what is the <code>u32</code></p>",
        "id": 200247732,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591717092
    },
    {
        "content": "<p>oh, I see</p>",
        "id": 200247769,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591717108
    },
    {
        "content": "<p>The field's index, we don't have a general newtype for it.</p>",
        "id": 200247801,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1591717118
    },
    {
        "content": "<p>MIR has <code>Field</code>.</p>",
        "id": 200247913,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1591717173
    },
    {
        "content": "<p>we could move that our from MIR but it's a relatively minor point</p>",
        "id": 200248262,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591717317
    },
    {
        "content": "<p>what I was wondering about was whether we want to include a <code>Ty</code></p>",
        "id": 200248308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591717324
    },
    {
        "content": "<p>seems like probably yes</p>",
        "id": 200248319,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591717327
    },
    {
        "content": "<p>if we're going to want to (for example) \"intersect\" places</p>",
        "id": 200248347,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591717336
    },
    {
        "content": "<p>but I'm not actually sure</p>",
        "id": 200248378,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591717351
    },
    {
        "content": "<p>i.e., we may never really need to know all the details about the types</p>",
        "id": 200248398,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591717360
    },
    {
        "content": "<p>but it seems like a good guess that we will</p>",
        "id": 200248411,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591717363
    },
    {
        "content": "<p>Probably, and remove existing type from deref because it's now easy to compute.</p>",
        "id": 200248417,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1591717365
    },
    {
        "content": "<p>right</p>",
        "id": 200248429,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591717370
    },
    {
        "content": "<p>I suspect that we will.</p>",
        "id": 200248436,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1591717372
    },
    {
        "content": "<p>me too, especially when we are analyzing what place gets captured</p>",
        "id": 200248462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591717383
    },
    {
        "content": "<p>And I guess remove the final type of the place and add one for the base.</p>",
        "id": 200248578,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1591717428
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116118\">Matthew Jasper</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/refactoring.20.60hir.3A.3APlace.60.20and.20.60hir_id.60/near/200248417\">said</a>:</p>\n<blockquote>\n<p>Probably, and remove existing type from deref because it's now easy to compute.</p>\n</blockquote>\n<p>is this the type that is <em>being</em> derefernced?</p>",
        "id": 200248580,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591717428
    },
    {
        "content": "<p>Yes, it's the pointer type.</p>",
        "id": 200248600,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1591717439
    },
    {
        "content": "<p>the base type is easily computed from context, usually, but maybe it's convenient to include</p>",
        "id": 200248674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591717459
    },
    {
        "content": "<p>seems like we should sketch out what the final struct looks like, we're getting close, and then we can better figure out the steps to take to get there</p>",
        "id": 200248778,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591717505
    },
    {
        "content": "<p>I guess what we currently have is:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">PlaceAndHirId</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"c1\">// You had a better name for this</span>\n<span class=\"w\">    </span><span class=\"n\">place</span>: <span class=\"nc\">Place</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">hir_id</span>: <span class=\"nc\">HirId</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Maybe no Span, since they&#39;re being removed from the Hir</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Place</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">base</span>: <span class=\"nc\">PlaceBase</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">projections</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">Projection</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Projection</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ty</span>: <span class=\"nc\">Ty</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">kind</span>: <span class=\"nc\">ProjectionKind</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">ProjectionKind</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Deref</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">Field</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">VariantIdx</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Index</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Subslice</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 200249624,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1591717810
    },
    {
        "content": "<p>Yeah. I guess the main question is whether the base needs a ty, but I think probably not</p>",
        "id": 200251480,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591718494
    },
    {
        "content": "<p>I'm going to copy that into a note somewhere in the repo</p>",
        "id": 200251518,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591718509
    },
    {
        "content": "<p>PS I'm liking this \"repo to make plans about a major change\" :)</p>",
        "id": 200251543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591718517
    },
    {
        "content": "<p>Just an FYI we currently use span to keep track of liveness (assuming that means lifetimes): <a href=\"https://github.com/sexxi-goose/rust/blob/master/src/librustc_passes/liveness.rs#L481\">https://github.com/sexxi-goose/rust/blob/master/src/librustc_passes/liveness.rs#L481</a></p>",
        "id": 200252344,
        "sender_full_name": "Aman Arora",
        "timestamp": 1591718772
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> <a href=\"https://github.com/rust-lang/project-rfc-2229/blob/master/hir-place-target.md\">https://github.com/rust-lang/project-rfc-2229/blob/master/hir-place-target.md</a></p>",
        "id": 200252461,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591718828
    },
    {
        "content": "<p>feel free to edit or review :)</p>",
        "id": 200252471,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591718832
    },
    {
        "content": "<p>I added some comments and changed the name from <code>PlaceAndHirId</code> to <code>PlaceReference</code></p>",
        "id": 200252508,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591718845
    },
    {
        "content": "<p>but I don't really care, maybe that's less clear</p>",
        "id": 200252524,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591718853
    },
    {
        "content": "<p>actually I like the <code>WithHirId</code> better I think</p>",
        "id": 200252970,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591719018
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281950\">Aman Arora</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/refactoring.20.60hir.3A.3APlace.60.20and.20.60hir_id.60/near/200252344\">said</a>:</p>\n<blockquote>\n<p>Just an FYI we currently use span to keep track of liveness (assuming that means lifetimes): <a href=\"https://github.com/sexxi-goose/rust/blob/master/src/librustc_passes/liveness.rs#L481\">https://github.com/sexxi-goose/rust/blob/master/src/librustc_passes/liveness.rs#L481</a></p>\n</blockquote>\n<p>I think for now we can keep the span</p>",
        "id": 200253327,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591719156
    },
    {
        "content": "<p>it may get factored out</p>",
        "id": 200253340,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591719160
    },
    {
        "content": "<p>relatively minor thing</p>",
        "id": 200253361,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591719167
    },
    {
        "content": "<p>I think we should refactor for the closure map to use Place before we do sexxi-goose#4 (using closure_captures instead upvars_mentioned) mostly because we need span for <code>rust_passes/liveness.rs</code>? This also allows for the span PR to get merged.</p>\n<p>Also can you link to the PR to track removing span from rust_passes?</p>",
        "id": 200284932,
        "sender_full_name": "Aman Arora",
        "timestamp": 1591734171
    },
    {
        "content": "<p>That's potentially a good idea, yeah</p>",
        "id": 200289252,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591736208
    },
    {
        "content": "<p>rather than refactor to some intermediate thing that includes a span, as we discussed, just refactor to a HIR place?</p>",
        "id": 200289291,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591736231
    },
    {
        "content": "<p>Do we then remove lines like these that require span?<br>\n<a href=\"https://github.com/rust-lang/rust/compare/598c363c0c53edd20e00702d4e6185bdd99b1a0c...sexxi-goose:change_upvars_to_typeck_tables_of#diff-ee896dcafc5548c2174f63be76fb0822R490\">https://github.com/rust-lang/rust/compare/598c363c0c53edd20e00702d4e6185bdd99b1a0c...sexxi-goose:change_upvars_to_typeck_tables_of#diff-ee896dcafc5548c2174f63be76fb0822R490</a></p>",
        "id": 200292591,
        "sender_full_name": "Aman Arora",
        "timestamp": 1591737782
    },
    {
        "content": "<p>^ this would depend on if we the refactor before the span PR is merged</p>",
        "id": 200304670,
        "sender_full_name": "Aman Arora",
        "timestamp": 1591745848
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> I'm a bit confused by the question I guess</p>",
        "id": 200473572,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591821714
    },
    {
        "content": "<p>but I think we will always want to have a span (or a <code>hir_id</code>, from which we derive a span) associated with the captured place</p>",
        "id": 200473648,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591821739
    },
    {
        "content": "<p>I guess main question is how long do you think the PR to remove span from Hir will take? </p>\n<p>If we are done the initial refactor to split Place into Place and PlaceHirId before the span PR is merged, and we want to start using Place for closure captures, do we just ignore the lines that require span? </p>\n<p>I think some of the work to use Place in Captures can be done in parallel to making projections more precise</p>",
        "id": 200475234,
        "sender_full_name": "Aman Arora",
        "timestamp": 1591822553
    },
    {
        "content": "<p>Also I forgot to bring this up yesterday, do we want to call Place with hir_id PlaceReference, it might be confusing provided <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/struct.PlaceRef.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/struct.PlaceRef.html</a> exists.</p>",
        "id": 200492345,
        "sender_full_name": "Aman Arora",
        "timestamp": 1591832801
    },
    {
        "content": "<p>You don't need to wait for spans to be removed from HIR. The spans can already be accessed from HirIds using existing API <code>tcx.hir().span(hir_id)</code>.</p>",
        "id": 200511064,
        "sender_full_name": "cjgillot",
        "timestamp": 1591858925
    },
    {
        "content": "<p>Awesome, thank you!</p>",
        "id": 200539815,
        "sender_full_name": "Aman Arora",
        "timestamp": 1591880174
    },
    {
        "content": "<p>So in the doc here: <a href=\"https://github.com/rust-lang/project-rfc-2229/blob/master/hir-place-target.md\">https://github.com/rust-lang/project-rfc-2229/blob/master/hir-place-target.md</a></p>\n<p>We don't have type information within Place itself. Unless I'm missing something it seems if we call <code>cat_res</code> (eg: <a href=\"https://github.com/rust-lang/rust/blob/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src/librustc_typeck/expr_use_visitor.rs#L518\">expr_use_visitor</a>)we won't have any projetions and would loose the type information. </p>\n<p>I think we should leave the type information of the overal/final access as is.</p>",
        "id": 201682365,
        "sender_full_name": "Aman Arora",
        "timestamp": 1592878852
    },
    {
        "content": "<p>Also the changes seem much simpler than we expected (<a href=\"https://github.com/rust-lang/rust/compare/master...sexxi-goose:projection-ty?expand=1\">https://github.com/rust-lang/rust/compare/master...sexxi-goose:projection-ty?expand=1#</a>) </p>\n<p>I think we should add test cases to ensure functional correctness, can you point us to some test cases that test typeinformation  and something that would be good examples to work from?</p>",
        "id": 201682619,
        "sender_full_name": "Aman Arora",
        "timestamp": 1592879236
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  for this one what are your thoughts</p>",
        "id": 201773644,
        "sender_full_name": "Aman Arora",
        "timestamp": 1592941818
    },
    {
        "content": "<p>looing now</p>",
        "id": 201773930,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592941963
    },
    {
        "content": "<p>I'm not sure I understand the first part</p>",
        "id": 201774005,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592942010
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281950\">Aman Arora</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/refactoring.20.60hir.3A.3APlace.60.20and.20.60hir_id.60/near/201682619\">said</a>:</p>\n<blockquote>\n<p>Also the changes seem much simpler than we expected (<a href=\"https://github.com/rust-lang/rust/compare/master...sexxi-goose:projection-ty?expand=1\">https://github.com/rust-lang/rust/compare/master...sexxi-goose:projection-ty?expand=1#</a>) </p>\n</blockquote>\n<p>well I think you're missing a bit of cleanup here</p>",
        "id": 201774113,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592942047
    },
    {
        "content": "<p>So in the document for the suggested Place refactoring, we don't store the type associated with the place anymore. </p>\n<p>i.e. <a href=\"https://github.com/rust-lang/rust/compare/master...sexxi-goose:projection-ty?expand=1#diff-87528b3a624ad671b31f556cce5c612bL96\">https://github.com/rust-lang/rust/compare/master...sexxi-goose:projection-ty?expand=1#diff-87528b3a624ad671b31f556cce5c612bL96</a></p>\n<p>This line should go away</p>",
        "id": 201774155,
        "sender_full_name": "Aman Arora",
        "timestamp": 1592942070
    },
    {
        "content": "<p>the <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_typeck/mem_categorization/enum.ProjectionKind.html#variant.Deref\"><code>ProjectionKind::Deref</code></a> variant no longer needs a <code>Ty</code> I think</p>",
        "id": 201774165,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592942076
    },
    {
        "content": "<p>that <em>used</em> to be the \"type of thing that was being dereferenced\"</p>",
        "id": 201774221,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592942110
    },
    {
        "content": "<p>there is one other thing I think is missing</p>",
        "id": 201774240,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592942117
    },
    {
        "content": "<p>which is that there is a field <code>Place::ty</code></p>",
        "id": 201774284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592942138
    },
    {
        "content": "<p>that stores the overall type of the place</p>",
        "id": 201774305,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592942143
    },
    {
        "content": "<p>But expr_use_visitor calls <code>cat_res</code>, which doesn't have any projections. If we remove <code>ty</code> from Place, then we loose type of the final access</p>",
        "id": 201774332,
        "sender_full_name": "Aman Arora",
        "timestamp": 1592942156
    },
    {
        "content": "<p>no, we don't, it's just that if there are no projections, the type is the type of the <code>PlaceBase</code></p>",
        "id": 201774395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592942173
    },
    {
        "content": "<p>I was about to say that we want to extend <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_typeck/expr_use_visitor/enum.PlaceBase.html\"><code>PlaceBase</code></a> with a type too, I think</p>",
        "id": 201774441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592942194
    },
    {
        "content": "<p>although in most cases it could be recomputed</p>",
        "id": 201774478,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592942213
    },
    {
        "content": "<p>but we'd have to extend it a bit -- notably <code>PlaceBase::Rvalue</code> needs a hir-id (what expression?) and <code>PlaceBase::StaticItem</code> needs a <code>DefId</code></p>",
        "id": 201774511,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592942233
    },
    {
        "content": "<p>maybe easier to just store it</p>",
        "id": 201774537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592942249
    },
    {
        "content": "<p>I'm  little confused here</p>\n<p>When I look at Projection::ty, is that the type after the projection is applied or before the projection is applied</p>",
        "id": 201774542,
        "sender_full_name": "Aman Arora",
        "timestamp": 1592942250
    },
    {
        "content": "<p>I believ that is the final type of the place</p>",
        "id": 201774598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592942279
    },
    {
        "content": "<p>after all projections (if any) have been applied</p>",
        "id": 201774641,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592942284
    },
    {
        "content": "<p>That would be Place::ty</p>",
        "id": 201774681,
        "sender_full_name": "Aman Arora",
        "timestamp": 1592942306
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"sd\">/// *Projections* select parts of the base expression; e.g.,</span>\n<span class=\"sd\">/// in the place expression `a.b.c`, `b` and `c` are projections</span>\n<span class=\"k\">struct</span> <span class=\"nc\">Projection</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// Type of the projection thus far.</span>\n<span class=\"w\">    </span><span class=\"n\">ty</span>: <span class=\"nc\">Ty</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"sd\">///</span>\n<span class=\"w\">    </span><span class=\"n\">kind</span>: <span class=\"nc\">ProjectionKind</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 201774705,
        "sender_full_name": "Aman Arora",
        "timestamp": 1592942325
    },
    {
        "content": "<p>I'm referring to the ty stored with each Projection</p>",
        "id": 201774728,
        "sender_full_name": "Aman Arora",
        "timestamp": 1592942337
    },
    {
        "content": "<p>oh, I expect that to be the type <em>after</em> the projection is applied</p>",
        "id": 201774853,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592942400
    },
    {
        "content": "<p>(but we should definitely document it)</p>",
        "id": 201774919,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592942412
    },
    {
        "content": "<p>I suppose you could make it the type before as well, it'd just surprise me</p>",
        "id": 201774934,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592942423
    },
    {
        "content": "<p>and I'd give it a name like <code>before_ty</code> or something</p>",
        "id": 201774969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592942449
    },
    {
        "content": "<p>I think we can just document it a better</p>",
        "id": 201774976,
        "sender_full_name": "Aman Arora",
        "timestamp": 1592942453
    },
    {
        "content": "<p>Currently we have it set as after the projection, the comment was a little confusing, so I wanted to check that</p>",
        "id": 201775037,
        "sender_full_name": "Aman Arora",
        "timestamp": 1592942483
    },
    {
        "content": "<p>I find it more natural to have the type of the base and the type after each step</p>",
        "id": 201775332,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592942613
    },
    {
        "content": "<p>I think that is also what is in the MIR</p>",
        "id": 201775356,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592942626
    },
    {
        "content": "<p>so if we don't match that expectation I definitely think we should give it a distinctive name</p>",
        "id": 201775368,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592942636
    },
    {
        "content": "<p>Okay so we have Place::base_ty?</p>",
        "id": 201775424,
        "sender_full_name": "Aman Arora",
        "timestamp": 1592942649
    },
    {
        "content": "<p>right -- that said, I can see the logic in doing it as the type <em>before</em></p>",
        "id": 201775451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592942663
    },
    {
        "content": "<p>i.e., it might make some things easier</p>",
        "id": 201775468,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592942674
    },
    {
        "content": "<p>more-or-less the same, just depends on which you kind of want more often, idk</p>",
        "id": 201775495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592942685
    },
    {
        "content": "<p>but overall I think matching MIR place is probably best</p>",
        "id": 201775524,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592942701
    },
    {
        "content": "<p>I think you're right, because projections are generated in the reverse order</p>",
        "id": 201775609,
        "sender_full_name": "Aman Arora",
        "timestamp": 1592942751
    },
    {
        "content": "<p>so to conclude, we are going to</p>\n<ol>\n<li>Add Place::base_ty -- Type information of PlaceBase</li>\n<li>Extending Projection with type information</li>\n<li>Removing type from Place</li>\n<li>Removing ProjectionKind::Deref 's type</li>\n<li>Associating PlaceBase::Rvalue with hir_id ?</li>\n</ol>",
        "id": 201775832,
        "sender_full_name": "azhng",
        "timestamp": 1592942877
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 201775893,
        "sender_full_name": "Aman Arora",
        "timestamp": 1592942898
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281950\">Aman Arora</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/refactoring.20.60hir.3A.3APlace.60.20and.20.60hir_id.60/near/201775609\">said</a>:</p>\n<blockquote>\n<p>I think you're right, because projections are generated in the reverse order</p>\n</blockquote>\n<p>This feels wrong, trying to remeber where I read that projections are in reverse order. I know we call <code>.rev()</code> in clippy</p>",
        "id": 201776281,
        "sender_full_name": "Aman Arora",
        "timestamp": 1592943143
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"282522\">@azhng</span> you don't have to do step 5 necessarily</p>",
        "id": 201776706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592943372
    },
    {
        "content": "<p>the reason to do that would have been to avoid storing <code>base_ty</code></p>",
        "id": 201776732,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592943389
    },
    {
        "content": "<p>i.e., we could compute the base ty by finding the type of the rvalue expression</p>",
        "id": 201776743,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592943398
    },
    {
        "content": "<p>but I think it's not worth it</p>",
        "id": 201776745,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592943401
    },
    {
        "content": "<p>or we can refactor later, either way</p>",
        "id": 201776757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592943407
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>    /// Returns an iterator of the types that have to be dereferenced to access\n    /// the `Place`.\n    ///\n    /// The types are in the reverse order that they are applied. So if\n    /// `x: &amp;*const u32` and the `Place` is `**x`, then the types returned are\n    ///`*const u32` then `&amp;*const u32`.\n    crate fn deref_tys(&amp;self) -&gt; impl Iterator&lt;Item = Ty&lt;&#39;tcx&gt;&gt; + &#39;_ {\n        self.projections.iter().rev().filter_map(|proj| {\n            if let ProjectionKind::Deref(deref_ty) = proj.kind { Some(deref_ty) } else { None }\n        })\n    }\n</code></pre></div>",
        "id": 201776765,
        "sender_full_name": "Aman Arora",
        "timestamp": 1592943412
    },
    {
        "content": "<p>i.e., if we wind up needing the <code>hir_id</code> for some other purpose</p>",
        "id": 201776773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592943417
    },
    {
        "content": "<p>I think projections are \"in order\" indeed</p>",
        "id": 201776792,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592943431
    },
    {
        "content": "<p>Okay yeah they seem to go innermost to outermost</p>",
        "id": 201776812,
        "sender_full_name": "Aman Arora",
        "timestamp": 1592943449
    },
    {
        "content": "<p>Ok that makes sense. Thanks alot</p>",
        "id": 201776900,
        "sender_full_name": "azhng",
        "timestamp": 1592943493
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/refactoring.20.60hir.3A.3APlace.60.20and.20.60hir_id.60/near/201775451\">said</a>:</p>\n<blockquote>\n<p>right -- that said, I can see the logic in doing it as the type <em>before</em></p>\n</blockquote>\n<p>I'm a little confused as to what you meant by this</p>",
        "id": 201776904,
        "sender_full_name": "Aman Arora",
        "timestamp": 1592943497
    },
    {
        "content": "<p>all I meant was this</p>",
        "id": 201776929,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592943514
    },
    {
        "content": "<p>some code might get more convenience that way</p>",
        "id": 201776952,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592943531
    },
    {
        "content": "<p>e.g., if you are looking at a projection, it now becomes trivial to find the type of the place before that projection -- otherwise, you have to look at the projection before in the list, and if you're at the start of the list you have to get <code>base_ty</code>, it's a bit more logic</p>",
        "id": 201776998,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592943558
    },
    {
        "content": "<p>otoh, of course, somethings are harder =)</p>",
        "id": 201777013,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592943569
    },
    {
        "content": "<p>That makes sense. Thank you :)</p>",
        "id": 201777195,
        "sender_full_name": "Aman Arora",
        "timestamp": 1592943640
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  Forgot to ask this, but are there any testcases for types that we can extend to check TypeInformation at each projection?</p>",
        "id": 201778327,
        "sender_full_name": "Aman Arora",
        "timestamp": 1592944144
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> no, there's not really a way to test that</p>",
        "id": 201780804,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592945334
    },
    {
        "content": "<p>sometimes we will do things like setup a special rustc-specific attribute</p>",
        "id": 201780939,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592945398
    },
    {
        "content": "<p>that dumps out special error messages with debug information</p>",
        "id": 201780987,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592945403
    },
    {
        "content": "<p>I'm not sure it's worth it in this case</p>",
        "id": 201780993,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592945406
    },
    {
        "content": "<p>usually that testing will happen as we develop the real feature (which would break if the info was wrong)</p>",
        "id": 201781021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592945419
    },
    {
        "content": "<p>that's fair, thanks</p>",
        "id": 201781128,
        "sender_full_name": "Aman Arora",
        "timestamp": 1592945476
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"282522\">@azhng</span> fyi on the testing</p>",
        "id": 201781155,
        "sender_full_name": "Aman Arora",
        "timestamp": 1592945487
    },
    {
        "content": "<p>Sounds good !</p>",
        "id": 201781184,
        "sender_full_name": "azhng",
        "timestamp": 1592945497
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  Can you confirm <a href=\"https://github.com/rust-lang/project-rfc-2229/pull/13/files\">https://github.com/rust-lang/project-rfc-2229/pull/13/files</a> this is what we expect? The PR for the change is almost ready to be pushed to rust-lang, and we just want to make sure the review goes smoothly</p>",
        "id": 202017197,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593115134
    },
    {
        "content": "<p>Left a comment</p>",
        "id": 202028599,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593121198
    }
]