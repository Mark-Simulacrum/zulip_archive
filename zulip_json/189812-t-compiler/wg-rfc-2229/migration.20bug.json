[
    {
        "content": "<p>Just an update that I'm still investaging the ICE</p>\n<p>So there seems to be two bugs:</p>\n<ul>\n<li>One was Drop check failing</li>\n<li>Something weird is happening in the has_signifciant_dtor check. I tried replacing it with needs_drop and the ICE is still there</li>\n</ul>",
        "id": 244659659,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625201666
    },
    {
        "content": "<p><a href=\"http://csclub.uwaterloo.ca/~a52arora/tokio_error\">http://csclub.uwaterloo.ca/~a52arora/tokio_error</a></p>",
        "id": 244659661,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625201668
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> do you want me to take a look?</p>",
        "id": 244677790,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625217575
    },
    {
        "content": "<p>also, do we have a more minimized repro?</p>",
        "id": 244677794,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625217583
    },
    {
        "content": "<p>I don't have a minimized repro</p>",
        "id": 244678091,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625217762
    },
    {
        "content": "<p>I tried a couple things but so far no luck</p>",
        "id": 244678111,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625217779
    },
    {
        "content": "<p>So I'm wondering <span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> if this is the same bug as <a href=\"https://github.com/rust-lang/rust/issues/84841\">https://github.com/rust-lang/rust/issues/84841</a></p>",
        "id": 244732883,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625246490
    },
    {
        "content": "<p>I might look at that issue, which has a nice minimal repro, and see if I can figure out the problem</p>",
        "id": 244732906,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625246502
    },
    {
        "content": "<p>and then see if it applies to this issue</p>",
        "id": 244732915,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625246507
    },
    {
        "content": "<p>Okay thank you</p>",
        "id": 244733054,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625246561
    },
    {
        "content": "<p>It's possible the bug exists outside of the work we did</p>",
        "id": 244733107,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625246584
    },
    {
        "content": "<p>if it helps I can reduce the reqwest/hyper ICE</p>",
        "id": 244733788,
        "sender_full_name": "lqd",
        "timestamp": 1625246896
    },
    {
        "content": "<p>(I think there was an assumption that the ICE happened during migration for user code that wouldn't compile and I'm not seeing that for reqwest/hyper btw. Maybe this was meant in the context where the migrated code wouldn't compile ?)</p>",
        "id": 244742211,
        "sender_full_name": "lqd",
        "timestamp": 1625251154
    },
    {
        "content": "<p>I had a similar issue within rustc itself which got resolved by  that check</p>\n<p>EDIT: removing that check</p>",
        "id": 244742411,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625251260
    },
    {
        "content": "<p>there you go</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">future</span>::<span class=\"n\">Future</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Runtime</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Runtime</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">block_on</span><span class=\"o\">&lt;</span><span class=\"n\">F</span>: <span class=\"nc\">Future</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_future</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">F</span>::<span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">unimplemented!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">http</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Fut</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_func</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">F</span>: <span class=\"nb\">Fn</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Fut</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Fut</span>: <span class=\"nc\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">rt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Runtime</span><span class=\"w\"> </span><span class=\"p\">{};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">srv</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rt</span><span class=\"p\">.</span><span class=\"n\">block_on</span><span class=\"p\">(</span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">serve</span><span class=\"p\">(</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"fm\">unimplemented!</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">rt</span><span class=\"p\">.</span><span class=\"n\">block_on</span><span class=\"p\">(</span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">srv</span><span class=\"w\"> </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Server</span><span class=\"o\">&lt;</span><span class=\"n\">S</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_marker</span>: <span class=\"nc\">std</span>::<span class=\"n\">marker</span>::<span class=\"n\">PhantomData</span><span class=\"o\">&lt;</span><span class=\"n\">S</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">serve</span><span class=\"o\">&lt;</span><span class=\"n\">S</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_new_service</span>: <span class=\"nc\">S</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Server</span><span class=\"o\">&lt;</span><span class=\"n\">S</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">unimplemented!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 244742635,
        "sender_full_name": "lqd",
        "timestamp": 1625251394
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>rustc +nightly --edition=2018 --crate-type=lib --cap-lints=warn --force-warns rust-2021-compatibility -Zunstable-options main.rs\nthread &#39;rustc&#39; panicked at &#39;index out of bounds: the len is 0 but the index is 21&#39;, /cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.14.0/src/snapshot_vec.rs:199:10\n</code></pre></div>\n<p>during the <code>normalize_generic_arg_after_erasing_regions</code> query as expected</p>",
        "id": 244742686,
        "sender_full_name": "lqd",
        "timestamp": 1625251426
    },
    {
        "content": "<p>does that still ICE with the check removed ?</p>",
        "id": 244742993,
        "sender_full_name": "lqd",
        "timestamp": 1625251566
    },
    {
        "content": "<p>I need to rebuild, gimme sometime</p>",
        "id": 244743119,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625251644
    },
    {
        "content": "<p>I thik it will still in this case</p>",
        "id": 244743238,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625251692
    },
    {
        "content": "<p>I minimized the above from this reqwest/hyper/tokio example <a href=\"https://gist.github.com/lqd/7b94fa10d76ca2ba6c490685f5a3704e\">https://gist.github.com/lqd/7b94fa10d76ca2ba6c490685f5a3704e</a> -- it passes a cargo check, and ICEs with <code>cargo fix --edition</code> (and of course ICEs as well under <code>RUSTFLAGS=\"--cap-lints=warn --force-warns rust-2021-compatibility -Zunstable-options\" cargo +nightly check</code>)</p>",
        "id": 244744923,
        "sender_full_name": "lqd",
        "timestamp": 1625252577
    },
    {
        "content": "<p>The bug is still there even with the check removed</p>",
        "id": 244746412,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625253394
    },
    {
        "content": "<p>Hmm I'm starting to wonder if this has something to do with async closures</p>",
        "id": 244752938,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625257139
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 244753355,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625257397
    },
    {
        "content": "<p>okay this triggers the bug</p>",
        "id": 244753359,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625257401
    },
    {
        "content": "<p>What's interesting is that I dumpted out the types before calling <code>has_significant_dtors</code>/<code>needs_drop</code> (which calls normalizing regions)</p>\n<div class=\"codehilite\"><pre><span></span><code>DEBUG rustc_typeck::check::upvar drop_issue_ty=std::string::String\nDEBUG rustc_typeck::check::upvar drop_issue_ty=std::string::String\nDEBUG rustc_typeck::check::upvar drop_issue_ty=[closure@migrations_1.rs:6:13: 6:28]\n</code></pre></div>",
        "id": 244754775,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625258212
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 244754944,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625258327
    },
    {
        "content": "<p>Same with the example that <code>@lqd</code> shared, we have an async closure or something that contains a asyn closure that is being captured and we are trying to do a needs_drop check on it</p>",
        "id": 244755436,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625258680
    },
    {
        "content": "<p>with -Zverbose the type  of the closure loos llike</p>\n<div class=\"codehilite\"><pre><span></span><code>drop_issue_ty=[f::{closure#0}::{closure#0} closure_kind_ty=i32 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn(()) -&gt; Opaque(DefId(2:12264 ~ core[1bbc]::future::from_generator::{opaque#0}), [[static f::{closure#0}::{closure#1} upvar_tys=(std::string::String) _#17t]]) upvar_tys=(std::string::String)]\n</code></pre></div>",
        "id": 244755844,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625258893
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> I will take a look at this... can you send me some compact instructions for your preferred way to reproduce, or point me at the bugs in question</p>",
        "id": 244827348,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625351436
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> I will take a look at this... can you send me some compact instructions for your preferred way to reproduce, or point me at the bugs in question</p>",
        "id": 244827349,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625351438
    },
    {
        "content": "<p>and we're just running on master, right?</p>",
        "id": 244827355,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625351449
    },
    {
        "content": "<p>Yes I'm doing this on basically master</p>",
        "id": 244827409,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625351529
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 244827412,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625351543
    },
    {
        "content": "<p>This triggers the bug if you enable edition lint and edition 2021</p>",
        "id": 244827418,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625351563
    },
    {
        "content": "<p>-Zunstable-options --force-warns rust-2021-compatibility --edition 2021</p>",
        "id": 244827467,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625351627
    },
    {
        "content": "<p>I don't have access to my laptop right now, so can't copy the exact command</p>",
        "id": 244827507,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625351648
    },
    {
        "content": "<p>that's ok, thanks, perfect</p>",
        "id": 244827510,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625351654
    },
    {
        "content": "<p>I think at least for this testcase you don't need to remove the is_drop check because it errors out before we even reach that check</p>",
        "id": 244827665,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625351951
    },
    {
        "content": "<p>hmm, the problem seems to be <span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> that <code>normalize_erasing_regions</code> doesn't expect to see any inference variables... at least based on a few minutes investigating.</p>",
        "id": 244833792,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625362336
    },
    {
        "content": "<p>Yes, but I dumped out the type being passed to</p>",
        "id": 244833876,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625362555
    },
    {
        "content": "<p>with -Zverbose the type  of the closure loos llike</p>\n<div class=\"codehilite\"><pre><span></span><code>drop_issue_ty=[f::{closure#0}::{closure#0} closure_kind_ty=i32 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn(()) -&gt; Opaque(DefId(2:12264 ~ core[1bbc]::future::from_generator::{opaque#0}), [[static f::{closure#0}::{closure#1} upvar_tys=(std::string::String) _#17t]]) upvar_tys=(std::string::String)]\n</code></pre></div>",
        "id": 244833976,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625362702
    },
    {
        "content": "<p>Yea there is a _t something</p>",
        "id": 244833981,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625362737
    },
    {
        "content": "<p>I think this from a but more complicated version of the test case I initially had</p>",
        "id": 244834038,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625362823
    },
    {
        "content": "<p>I had added a debug! before the call to has_significant_dtor in the compute_2229_migrations_for_drop</p>",
        "id": 244834052,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625362893
    },
    {
        "content": "<p>Because for an ty that we might look at that's the first place where we'd do the check  before doing any sort of precise analysis for drop migration</p>",
        "id": 244834095,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625362977
    },
    {
        "content": "<p>yes, I don't think we expected the types to have unresolved inference variables at this stage; they usually don't, but it is possible</p>",
        "id": 244834346,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625363408
    },
    {
        "content": "<p>I'm pondering -- the right fix is probably to canonicalize, or at least one fix</p>",
        "id": 244834352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625363424
    },
    {
        "content": "<p>certainly we could add an assertion :)</p>",
        "id": 244834354,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625363432
    },
    {
        "content": "<p>but that would just ICE faster</p>",
        "id": 244834355,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625363441
    },
    {
        "content": "<p>(we should do that, though)</p>",
        "id": 244834359,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625363445
    },
    {
        "content": "<p>I also think it's an uninferred  region</p>",
        "id": 244834360,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625363453
    },
    {
        "content": "<p>So Dhruv and Roxane had another error</p>",
        "id": 244834368,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625363483
    },
    {
        "content": "<p>(e.g., an assertion in the <code>normalize_generic_arg_after_erasing_regions</code> query that there are no inference variables)</p>",
        "id": 244834371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625363495
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/DQDA3grRNAIE6MzI98dV1r9m/received_521160225604112.webp\">received_521160225604112.webp</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/DQDA3grRNAIE6MzI98dV1r9m/received_521160225604112.webp\" title=\"received_521160225604112.webp\"><img src=\"/user_uploads/4715/DQDA3grRNAIE6MzI98dV1r9m/received_521160225604112.webp\"></a></div>",
        "id": 244834372,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625363498
    },
    {
        "content": "<p>This shows an uninferred region, but this was cause by the is_drop_implemented check</p>",
        "id": 244834417,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625363537
    },
    {
        "content": "<p>that looks like roughly the same bug</p>",
        "id": 244834418,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625363538
    },
    {
        "content": "<p>Which weirdly enough on my build would stop because of snapshot vec idx of out bounds</p>",
        "id": 244834423,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625363567
    },
    {
        "content": "<p>both bugs seem to be caused by not using canonicalization</p>",
        "id": 244834428,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625363592
    },
    {
        "content": "<p>I see</p>",
        "id": 244834432,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625363603
    },
    {
        "content": "<p><a href=\"https://rustc-dev-guide.rust-lang.org/traits/canonical-queries.html?highlight=canon#canonical-queries\">https://rustc-dev-guide.rust-lang.org/traits/canonical-queries.html?highlight=canon#canonical-queries</a></p>",
        "id": 244834433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625363609
    },
    {
        "content": "<p>that kind of covers the concept</p>",
        "id": 244834436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625363622
    },
    {
        "content": "<p>anyway, the problem is that when you pass a type that may contain inference variables into a query and you make a fresh infcx, that's pretty broken</p>",
        "id": 244834453,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625363640
    },
    {
        "content": "<p>canonicalizaiton is a technique for dealing with that</p>",
        "id": 244834492,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625363648
    },
    {
        "content": "<p>I see</p>",
        "id": 244834494,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625363676
    },
    {
        "content": "<p>at least the <code>type_implements_trait</code> seems to me to be a pre-existing bug</p>",
        "id": 244834495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625363676
    },
    {
        "content": "<p>since it gets called from other parts of typeck and I bet there are ways to break it</p>",
        "id": 244834503,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625363701
    },
    {
        "content": "<p>the usual pattern is to have a method on the tcx that canonicalizes the query argument</p>",
        "id": 244834521,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625363730
    },
    {
        "content": "<p>and then the actual query takes a canonicalized argument</p>",
        "id": 244834522,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625363737
    },
    {
        "content": "<p>here is an example:</p>",
        "id": 244834579,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625363780
    },
    {
        "content": "<p>Okay I see</p>",
        "id": 244834581,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625363781
    },
    {
        "content": "<p>the <code>evaluate_obligation</code> method on <code>InferCtxt</code>: <a href=\"https://github.com/rust-lang/rust/blob/1297cb7f37bc37c6154c0fa4fcf23150c7a80548/compiler/rustc_trait_selection/src/traits/query/evaluate_obligation.rs#L61-L73\">https://github.com/rust-lang/rust/blob/1297cb7f37bc37c6154c0fa4fcf23150c7a80548/compiler/rustc_trait_selection/src/traits/query/evaluate_obligation.rs#L61-L73</a></p>",
        "id": 244834585,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625363802
    },
    {
        "content": "<p>oh, that didn't work</p>",
        "id": 244834587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625363809
    },
    {
        "content": "<p><a href=\"https://github.com/jam1garner/rust/blob/1297cb7f37bc37c6154c0fa4fcf23150c7a80548/compiler/rustc_trait_selection/src/traits/query/evaluate_obligation.rs#L61-L73\">https://github.com/jam1garner/rust/blob/1297cb7f37bc37c6154c0fa4fcf23150c7a80548/compiler/rustc_trait_selection/src/traits/query/evaluate_obligation.rs#L61-L73</a></p>",
        "id": 244834589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625363812
    },
    {
        "content": "<p>not sure why my thing is giving me such random links</p>",
        "id": 244834593,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625363823
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"sd\">/// Evaluate a given predicate, capturing overflow and propagating it back.</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">evaluate_obligation</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">obligation</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">PredicateObligation</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">EvaluationResult</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">OverflowError</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_orig_values</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">OriginalQueryValues</span>::<span class=\"n\">default</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c_pred</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">canonicalize_query</span><span class=\"p\">(</span><span class=\"n\">obligation</span><span class=\"p\">.</span><span class=\"n\">param_env</span><span class=\"p\">.</span><span class=\"n\">and</span><span class=\"p\">(</span><span class=\"n\">obligation</span><span class=\"p\">.</span><span class=\"n\">predicate</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_orig_values</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// Run canonical query. If overflow occurs, rerun from scratch but this time</span>\n<span class=\"w\">        </span><span class=\"c1\">// in standard trait query mode so that overflow is handled appropriately</span>\n<span class=\"w\">        </span><span class=\"c1\">// within `SelectionContext`.</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">evaluate_obligation</span><span class=\"p\">(</span><span class=\"n\">c_pred</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 244834596,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625363830
    },
    {
        "content": "<p>see the call to <code>canonicalize_query</code></p>",
        "id": 244834601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625363839
    },
    {
        "content": "<p>Ah yes</p>",
        "id": 244834605,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625363853
    },
    {
        "content": "<p>meanwhile the query definition:</p>",
        "id": 244834610,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625363867
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">evaluate_obligation</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">tcx</span>: <span class=\"nc\">TyCtxt</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">canonical_goal</span>: <span class=\"nc\">CanonicalPredicateGoal</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">EvaluationResult</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">OverflowError</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"evaluate_obligation(canonical_goal={:#?})\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">canonical_goal</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">infer_ctxt</span><span class=\"p\">().</span><span class=\"n\">enter_with_canonical</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">DUMMY_SP</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"n\">canonical_goal</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">infcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">goal</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_canonical_inference_vars</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"evaluate_obligation: goal={:#?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">goal</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ParamEnvAnd</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">param_env</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">predicate</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">goal</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">selcx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">SelectionContext</span>::<span class=\"n\">with_query_mode</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">infcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">TraitQueryMode</span>::<span class=\"n\">Canonical</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">obligation</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Obligation</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">ObligationCause</span>::<span class=\"n\">dummy</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">param_env</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">predicate</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"n\">selcx</span><span class=\"p\">.</span><span class=\"n\">evaluate_root_obligation</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">obligation</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 244834611,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625363869
    },
    {
        "content": "<p>see it takes a <code>CanonicalPredicateGoal</code></p>",
        "id": 244834619,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625363882
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">CanonicalPredicateGoal</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Canonical</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ty</span>::<span class=\"n\">ParamEnvAnd</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ty</span>::<span class=\"n\">Predicate</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 244834657,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625363888
    },
    {
        "content": "<p>Okay yes</p>",
        "id": 244834662,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625363919
    },
    {
        "content": "<p>basically, with a canonical goal, any unknown inference variables are detected and given a canonical numbering (in the order that they appear)</p>",
        "id": 244834664,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625363926
    },
    {
        "content": "<p>then when you can <code>enter_with_canonical</code>, it will create corresponding variables in the new inference context</p>",
        "id": 244834668,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625363937
    },
    {
        "content": "<p>Okay</p>",
        "id": 244834679,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625363966
    },
    {
        "content": "<p>I am debating; I guess the fix is to apply the same pattern</p>",
        "id": 244834680,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625363968
    },
    {
        "content": "<p>I dont know whether this will be a perf hit, I'd try it first to see</p>",
        "id": 244834682,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625363977
    },
    {
        "content": "<p>hopefully not and/or we can optimize</p>",
        "id": 244834686,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625363986
    },
    {
        "content": "<p>Do we care about this outside of migrations?</p>",
        "id": 244834733,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625364013
    },
    {
        "content": "<p>I think canonicalization is pretty cheap if it doesn't need to be done</p>",
        "id": 244834741,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625364016
    },
    {
        "content": "<p>Like from our respective</p>",
        "id": 244834748,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625364021
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281950\">Aman Arora</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/migration.20bug/near/244834733\">said</a>:</p>\n<blockquote>\n<p>Do we care about this outside of migrations?</p>\n</blockquote>\n<p>well, the code is just kind of wrong</p>",
        "id": 244834753,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625364022
    },
    {
        "content": "<p>we really shouldn't have queries that take a raw, non-canonicalized <code>Ty&lt;'tcx&gt;</code> -- or else they should have assertions that there are no inference variables</p>",
        "id": 244834776,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625364046
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/migration.20bug/near/244834741\">said</a>:</p>\n<blockquote>\n<p>I think canonicalization is pretty cheap if it doesn't need to be done</p>\n</blockquote>\n<p>(yes, there is a fast path)</p>",
        "id": 244834778,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625364061
    },
    {
        "content": "<p>not sure how clear it is to you what I am proposing to do</p>",
        "id": 244834788,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625364082
    },
    {
        "content": "<p>I could potentially prep a PR for this in the morning</p>",
        "id": 244834790,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625364089
    },
    {
        "content": "<p>Hmm needs_drop doesn't seem to have canocalization from what I remember (I'm still away from my laptop, can't check GitHub easily)</p>",
        "id": 244834798,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625364113
    },
    {
        "content": "<p>If it's easier for you to do it that works, I'd still like to understand to some degree what you're proposing</p>",
        "id": 244834853,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625364193
    },
    {
        "content": "<p>My understanding so far is to add a layer in the middle that would canocalize the type argument we pass</p>",
        "id": 244834905,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625364249
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281950\">Aman Arora</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/migration.20bug/near/244834798\">said</a>:</p>\n<blockquote>\n<p>Hmm needs_drop doesn't seem to have canocalization from what I remember (I'm still away from my laptop, can't check GitHub easily)</p>\n</blockquote>\n<p>it doesn't</p>",
        "id": 244834910,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625364262
    },
    {
        "content": "<p>I think it is not meant to be called from type check</p>",
        "id": 244834914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625364270
    },
    {
        "content": "<p>It should have an assertion</p>",
        "id": 244834918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625364287
    },
    {
        "content": "<p>But really I think the problem is not needs-drop</p>",
        "id": 244834920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625364298
    },
    {
        "content": "<p>It's because <code>needs_drop</code> calls</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">erased</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">normalize_erasing_regions</span><span class=\"p\">(</span><span class=\"n\">param_env</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">query_ty</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 244834947,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625364339
    },
    {
        "content": "<p>and <em>that</em> code (eventually) invokes a query (<code>normalize_generic_arg_after_erasing_regions</code>)</p>",
        "id": 244834992,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625364367
    },
    {
        "content": "<p>Ah right and that doesn't implement canocalization?</p>",
        "id": 244834996,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625364386
    },
    {
        "content": "<p>right</p>",
        "id": 244835001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625364398
    },
    {
        "content": "<p>I think we just need to modify this folder:</p>",
        "id": 244835005,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625364411
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">NormalizeAfterErasingRegionsFolder</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">tcx</span>: <span class=\"nc\">TyCtxt</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">param_env</span>: <span class=\"nc\">ty</span>::<span class=\"n\">ParamEnv</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">TypeFolder</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">NormalizeAfterErasingRegionsFolder</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">tcx</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">TyCtxt</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">fold_ty</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ty</span>: <span class=\"nc\">Ty</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Ty</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">param_env</span><span class=\"p\">.</span><span class=\"n\">and</span><span class=\"p\">(</span><span class=\"n\">ty</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">normalize_generic_arg_after_erasing_regions</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">).</span><span class=\"n\">expect_ty</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">fold_const</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">tcx</span> <span class=\"nc\">ty</span>::<span class=\"n\">Const</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">tcx</span> <span class=\"nc\">ty</span>::<span class=\"n\">Const</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">param_env</span><span class=\"p\">.</span><span class=\"n\">and</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">normalize_generic_arg_after_erasing_regions</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">).</span><span class=\"n\">expect_const</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"cp\">#[inline]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">fold_mir_const</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span>: <span class=\"nc\">mir</span>::<span class=\"n\">ConstantKind</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">mir</span>::<span class=\"n\">ConstantKind</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">param_env</span><span class=\"p\">.</span><span class=\"n\">and</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">normalize_mir_const_after_erasing_regions</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 244835006,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625364413
    },
    {
        "content": "<p>maybe i'll take a stab at it right now</p>",
        "id": 244835010,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625364419
    },
    {
        "content": "<p>Okay thank you</p>",
        "id": 244835023,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625364436
    },
    {
        "content": "<p>I'd rather you do it (as you say, good to learn), I just want to make sure it gets done, and I don't want to pressure you all with deadlines :)</p>",
        "id": 244835026,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625364445
    },
    {
        "content": "<p>I'll see if I can do it in a few minutes</p>",
        "id": 244835036,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625364478
    },
    {
        "content": "<p>I can take a stab at it tomorrow</p>",
        "id": 244835037,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625364478
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> ok, I am going to give up for tonight; it's a bit more annoying than I thought. The problem is that the <code>has_significant_drop</code> method is currently defined on <code>TyCtxt</code>, but to invoke canonicalization, it needs to have access to an inference context -- really the problem is that the normalization code does. Probably the easiest fix to <em>this particular</em> bug is to move that method to <code>FnCtxt</code> and to have it use some of the <code>FnCtxt</code> methods to do normalization.</p>",
        "id": 244835438,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625365158
    },
    {
        "content": "<p>The same may be true for <code>type_implements_trait</code> as well</p>",
        "id": 244835446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625365183
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 244835451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625365192
    },
    {
        "content": "<p>Happy to discuss more tomorrow</p>",
        "id": 244835495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625365218
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">has_significant_drop</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;'</span><span class=\"na\">tcx</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">tcx</span>: <span class=\"nc\">TyCtxt</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">param_env</span>: <span class=\"nc\">ty</span>::<span class=\"n\">ParamEnv</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// Avoid querying in simple cases.</span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">needs_drop_components</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">data_layout</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">AlwaysRequiresDrop</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">components</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">query_ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">components</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"c1\">// If we've got a single component, call the query with that</span>\n<span class=\"w\">                    </span><span class=\"c1\">// to increase the chance that we hit the query cache.</span>\n<span class=\"w\">                    </span><span class=\"p\">[</span><span class=\"n\">component_ty</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">component_ty</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// This doesn't depend on regions, so try to minimize distinct</span>\n<span class=\"w\">                </span><span class=\"c1\">// query keys used.</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">erased</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">normalize_erasing_regions</span><span class=\"p\">(</span><span class=\"n\">param_env</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">query_ty</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">has_significant_drop_raw</span><span class=\"p\">(</span><span class=\"n\">param_env</span><span class=\"p\">.</span><span class=\"n\">and</span><span class=\"p\">(</span><span class=\"n\">erased</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>So we have two queries here:</p>\n<ul>\n<li>normalize_erasing_regions</li>\n<li>has_significant_drop_raw</li>\n</ul>\n<p>I'm assuming we want to have both these take a canocalized parameter?</p>",
        "id": 244836215,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625366440
    },
    {
        "content": "<p>well, it depends</p>",
        "id": 244852604,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625394257
    },
    {
        "content": "<p>also, we only invoke <code>has_significant_drop</code> when the lint is enabled, right?</p>",
        "id": 244852617,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625394299
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/migration.20bug/near/244852604\">said</a>:</p>\n<blockquote>\n<p>well, it depends</p>\n</blockquote>\n<p>in principle yes, but if <code>has_significant_drop_raw</code> never creates an inference context, it may not matter</p>",
        "id": 244852706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625394441
    },
    {
        "content": "<p>although I see that it does invoke (e.g.) <code>normalize_erasing_regions</code></p>",
        "id": 244852769,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625394495
    },
    {
        "content": "<p>I am wondering-- at the time that upvar analysis runs, we expect most types to be inferred</p>",
        "id": 244852786,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625394583
    },
    {
        "content": "<p>I see that issue <a href=\"https://github.com/rust-lang/rust/issues/84841\">#84841</a> comes from <code>type_implements_trait</code> being invoked by some of the suggestion-generated code</p>",
        "id": 244852901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625394744
    },
    {
        "content": "<p>also this comment is just wrong</p>",
        "id": 244852976,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625394901
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">///</span>\n<span class=\"sd\">/// NOTE: Always return `false` for a type which needs inference.</span>\n</code></pre></div>",
        "id": 244852978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625394905
    },
    {
        "content": "<p>(from that function)</p>",
        "id": 244852979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625394907
    },
    {
        "content": "<p>heh, lol, most of the callers have this:</p>",
        "id": 244853040,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625394971
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>if ty.has_infer_types() { return }\n</code></pre></div>",
        "id": 244853045,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625394995
    },
    {
        "content": "<p>which is just working around the actual bug</p>",
        "id": 244853048,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625395001
    },
    {
        "content": "<p>but that's not good enough</p>",
        "id": 244853101,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625395084
    },
    {
        "content": "<p>(<code>needs_infer</code> would be more correct)</p>",
        "id": 244853494,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625395762
    },
    {
        "content": "<p>the only annoying one is going to be clippy</p>",
        "id": 244853805,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625396313
    },
    {
        "content": "<p>though at the time clippy reallys there really ought not to be any inference going on</p>",
        "id": 244853812,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625396324
    },
    {
        "content": "<p>I am wondering if we can do a quick workaround to this bug by introducing <code>needs_infer</code> checks and bailing out if that is true</p>",
        "id": 244853821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625396354
    },
    {
        "content": "<p>e.g., you could assume that it has a significant destructor in that case</p>",
        "id": 244853822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625396360
    },
    {
        "content": "<p>then we could file an issue and do the refactoring properly</p>",
        "id": 244853827,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625396377
    },
    {
        "content": "<p>it's going to produce some false positives, but probably not too bad</p>",
        "id": 244853879,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625396411
    },
    {
        "content": "<p>(famous last words)</p>",
        "id": 244853883,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625396415
    },
    {
        "content": "<p>(cc <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> we definitely identified the root cause of <a href=\"https://github.com/rust-lang/rust/issues/84841\">#84841</a>)</p>",
        "id": 244853916,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625396475
    },
    {
        "content": "<p>opened <a href=\"https://github.com/rust-lang/rust/pull/86866\">https://github.com/rust-lang/rust/pull/86866</a></p>",
        "id": 244865220,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625413551
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 244865224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625413559
    },
    {
        "content": "<p>I opted for the repro that <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> found because it didn't involve async closures.</p>",
        "id": 244865263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625413570
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  I'm curious if you tried this on tokio? Like running cargo fix with your build of the compiler</p>",
        "id": 244868860,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625419376
    },
    {
        "content": "<p>Just to make sure there aren't any other issues that got masked by the missing cancolization</p>",
        "id": 244868869,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625419402
    },
    {
        "content": "<p>so, this PR definitely fixes migration on reqwest. It also fixes tokio on the specific commit rylev tested.</p>",
        "id": 244871862,
        "sender_full_name": "lqd",
        "timestamp": 1625424194
    },
    {
        "content": "<p>Thanks great, thanks!</p>",
        "id": 244871870,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625424225
    },
    {
        "content": "<p>at first I tried on master and I think they must have compile errors in some tests or something</p>",
        "id": 244871871,
        "sender_full_name": "lqd",
        "timestamp": 1625424227
    },
    {
        "content": "<p>I see</p>",
        "id": 244871916,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625424254
    },
    {
        "content": "<p>so between this error, maybe some incremental shenanigans, and so on: I also got a weird ICE at some point <code>error: internal compiler error: compiler/rustc_middle/src/ich/impls_ty.rs:94:17: StableHasher: unexpected region '_#3r</code></p>",
        "id": 244871919,
        "sender_full_name": "lqd",
        "timestamp": 1625424274
    },
    {
        "content": "<p>That's possibly an actual issue</p>",
        "id": 244871938,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625424308
    },
    {
        "content": "<p>but on the given commit with everything clean it did migrate successfully.</p>",
        "id": 244871954,
        "sender_full_name": "lqd",
        "timestamp": 1625424322
    },
    {
        "content": "<p>That's the one that gets fixed by removing the check i had mentioned ont eh PR</p>",
        "id": 244871959,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625424326
    },
    {
        "content": "<p>Do you have a traceback?</p>",
        "id": 244871963,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625424338
    },
    {
        "content": "<p>interesting yeah</p>",
        "id": 244871964,
        "sender_full_name": "lqd",
        "timestamp": 1625424339
    },
    {
        "content": "<p>unfortunately no, I was trying to get a full backtrace and then it didn't reappear after cleaning</p>",
        "id": 244871986,
        "sender_full_name": "lqd",
        "timestamp": 1625424363
    },
    {
        "content": "<p>I'll try to get a repro and trace on master</p>",
        "id": 244872016,
        "sender_full_name": "lqd",
        "timestamp": 1625424380
    },
    {
        "content": "<p>if it doesn't on master after cargo clean that should be fine then, at least from prespective of migrations</p>",
        "id": 244872025,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625424399
    },
    {
        "content": "<p>no promises about minimising if there's indeed an issue though, tokio/reqwest (or in general most multi-crate projects) are tough to reduce, just the reqwest case took me hours <span aria-label=\"sweat\" class=\"emoji emoji-1f613\" role=\"img\" title=\"sweat\">:sweat:</span></p>",
        "id": 244872042,
        "sender_full_name": "lqd",
        "timestamp": 1625424449
    },
    {
        "content": "<p>fair enough, thank you for trying ^^</p>",
        "id": 244872049,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625424471
    },
    {
        "content": "<p>I'll investigate this on master where the compile error could be having unfortunate consequences</p>",
        "id": 244872088,
        "sender_full_name": "lqd",
        "timestamp": 1625424487
    },
    {
        "content": "<p>at least try and get a backtrace otherwise we're not going to be able to do much</p>",
        "id": 244872098,
        "sender_full_name": "lqd",
        "timestamp": 1625424521
    },
    {
        "content": "<p>(it was typecking <a href=\"https://github.com/rust-lang/rust/issues/0\">#0</a> [typeck] type-checking <code>task::local::&lt;impl at tokio/src/task/local.rs:625:1: 654:2&gt;::poll</code> )</p>",
        "id": 244872109,
        "sender_full_name": "lqd",
        "timestamp": 1625424558
    },
    {
        "content": "<p>I mention the incremental thing because there are open bugs about queries, and this seems related, rather than solely about migration, as if the <code>type_implements_trait</code> query had incr issues (maybe because of the PR)</p>",
        "id": 244872415,
        "sender_full_name": "lqd",
        "timestamp": 1625425032
    },
    {
        "content": "<p>I'm aware of that but it also feels similar to <br>\n<a href=\"/user_uploads/4715/sbhEWU2u6rm2i6KZTb6Ui8iY/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/sbhEWU2u6rm2i6KZTb6Ui8iY/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/sbhEWU2u6rm2i6KZTb6Ui8iY/image.png\"></a></div>",
        "id": 244872432,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625425082
    },
    {
        "content": "<p>If it doesn't happen on master then it's probably an incremental issue</p>",
        "id": 244872472,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625425100
    },
    {
        "content": "<p>trace on tokio master with incr turned on <a href=\"https://gist.github.com/lqd/007dec5503524d0108ee36299e82ceb4\">https://gist.github.com/lqd/007dec5503524d0108ee36299e82ceb4</a></p>",
        "id": 244872473,
        "sender_full_name": "lqd",
        "timestamp": 1625425114
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"mi\">38</span>:     <span class=\"mh\">0x7f44e3664612</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">rustc_query_system</span>::<span class=\"n\">query</span>::<span class=\"n\">plumbing</span>::<span class=\"n\">get_query</span>::<span class=\"n\">h94ab4effa5701216</span><span class=\"w\"></span>\n<span class=\"w\">                               </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">mnt</span><span class=\"o\">/</span><span class=\"n\">d</span><span class=\"o\">/</span><span class=\"n\">work</span><span class=\"o\">/</span><span class=\"n\">rust</span><span class=\"o\">/</span><span class=\"n\">lqd</span><span class=\"o\">-</span><span class=\"n\">rust</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">rustc_query_system</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">query</span><span class=\"o\">/</span><span class=\"n\">plumbing</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">828</span>:<span class=\"mi\">17</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mi\">39</span>:     <span class=\"mh\">0x7f44e379ff34</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">rustc_query_impl</span>::<span class=\"n\">Queries</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">rustc_middle</span>::<span class=\"n\">ty</span>::<span class=\"n\">query</span>::<span class=\"n\">QueryEngine</span><span class=\"o\">&gt;</span>::<span class=\"n\">type_implements_trait</span>::<span class=\"n\">hfab150c4dff32811</span><span class=\"w\"></span>\n<span class=\"w\">                               </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">mnt</span><span class=\"o\">/</span><span class=\"n\">d</span><span class=\"o\">/</span><span class=\"n\">work</span><span class=\"o\">/</span><span class=\"n\">rust</span><span class=\"o\">/</span><span class=\"n\">lqd</span><span class=\"o\">-</span><span class=\"n\">rust</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">rustc_query_impl</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">plumbing</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">552</span>:<span class=\"mi\">17</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mi\">40</span>:     <span class=\"mh\">0x7f44e2f4579d</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">rustc_middle</span>::<span class=\"n\">ty</span>::<span class=\"n\">query</span>::<span class=\"n\">TyCtxtAt</span>::<span class=\"n\">type_implements_trait</span>::<span class=\"n\">h3f7e1f2c3bdb1bab</span><span class=\"w\"></span>\n<span class=\"w\">                               </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">mnt</span><span class=\"o\">/</span><span class=\"n\">d</span><span class=\"o\">/</span><span class=\"n\">work</span><span class=\"o\">/</span><span class=\"n\">rust</span><span class=\"o\">/</span><span class=\"n\">lqd</span><span class=\"o\">-</span><span class=\"n\">rust</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">rustc_middle</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">ty</span><span class=\"o\">/</span><span class=\"n\">query</span><span class=\"o\">/</span><span class=\"k\">mod</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">207</span>:<span class=\"mi\">17</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mi\">41</span>:     <span class=\"mh\">0x7f44e2f4579d</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">rustc_middle</span>::<span class=\"n\">ty</span>::<span class=\"n\">query</span>::<span class=\"o\">&lt;</span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">rustc_middle</span>::<span class=\"n\">ty</span>::<span class=\"n\">context</span>::<span class=\"n\">TyCtxt</span><span class=\"o\">&gt;</span>::<span class=\"n\">type_implements_trait</span>::<span class=\"n\">h87bf70fd0998a8a7</span><span class=\"w\"></span>\n<span class=\"w\">                               </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">mnt</span><span class=\"o\">/</span><span class=\"n\">d</span><span class=\"o\">/</span><span class=\"n\">work</span><span class=\"o\">/</span><span class=\"n\">rust</span><span class=\"o\">/</span><span class=\"n\">lqd</span><span class=\"o\">-</span><span class=\"n\">rust</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">rustc_middle</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">ty</span><span class=\"o\">/</span><span class=\"n\">query</span><span class=\"o\">/</span><span class=\"k\">mod</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">188</span>:<span class=\"mi\">17</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mi\">42</span>:     <span class=\"mh\">0x7f44e2f4579d</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">rustc_typeck</span>::<span class=\"n\">check</span>::<span class=\"n\">upvar</span>::<span class=\"o\">&lt;</span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">rustc_typeck</span>::<span class=\"n\">check</span>::<span class=\"n\">fn_ctxt</span>::<span class=\"n\">FnCtxt</span><span class=\"o\">&gt;</span>::<span class=\"n\">has_significant_drop_outside_of_captures</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span>::<span class=\"n\">hfaca0405df3839eb</span><span class=\"w\"></span>\n<span class=\"w\">                               </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">mnt</span><span class=\"o\">/</span><span class=\"n\">d</span><span class=\"o\">/</span><span class=\"n\">work</span><span class=\"o\">/</span><span class=\"n\">rust</span><span class=\"o\">/</span><span class=\"n\">lqd</span><span class=\"o\">-</span><span class=\"n\">rust</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">rustc_typeck</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">check</span><span class=\"o\">/</span><span class=\"n\">upvar</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">964</span>:<span class=\"mi\">13</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 244872485,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625425150
    },
    {
        "content": "<p>looks like the same thing</p>",
        "id": 244872489,
        "sender_full_name": "lqd",
        "timestamp": 1625425160
    },
    {
        "content": "<p>Yea issue is within <code>type_implements_trait</code></p>",
        "id": 244872493,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625425171
    },
    {
        "content": "<p>From the presepective of 2229, there is a check that can just be removed since it's not adding value and niko has created an issue to fix that query properly</p>",
        "id": 244872499,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625425200
    },
    {
        "content": "<p>it'll be interesting to see whether that's completely covered by the issue to refactor these queries, since it's about canonicalization, rather than some weirdness about incremental behaviour</p>",
        "id": 244872729,
        "sender_full_name": "lqd",
        "timestamp": 1625425490
    },
    {
        "content": "<p>(tiny update on reproduceability: with incr turned on, the ICE reproduces on tokio <code>0531549b6ea66d22d301044910ddc6a77e8c7f1e</code> not just master, so the latter's compile errors are not related to the issue)</p>",
        "id": 244875213,
        "sender_full_name": "lqd",
        "timestamp": 1625429273
    },
    {
        "content": "<p>thank you for looking into this!</p>",
        "id": 244875592,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625429774
    },
    {
        "content": "<p>Another interesting thing to note is that there seems to be another way to query  if a trait implemetns a type that we are using for the upvar migration: <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_typeck/check/fn_ctxt/struct.FnCtxt.html#method.ty_impls_trait\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_typeck/check/fn_ctxt/struct.FnCtxt.html#method.ty_impls_trait</a></p>",
        "id": 244875663,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625429906
    },
    {
        "content": "<p>I followed the function calls, and this one ends up with evaluate_obligation which from what i understand is a good example oh how conacolization should be done</p>",
        "id": 244875754,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625430055
    },
    {
        "content": "<p>Not sure what is the benefit of looking at one over the other</p>",
        "id": 244875767,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625430069
    },
    {
        "content": "<p>it’s interesting because one of the fixes to the <code>type_implements_trait</code> query that Niko mentioned IIRC was to move it to <code>FnCtxt</code> where this <code>ty_impls_trait</code> exists</p>",
        "id": 244876067,
        "sender_full_name": "lqd",
        "timestamp": 1625430582
    },
    {
        "content": "<p>I'm pretty sure <code>ty_impl_traits</code> was added for abstracting some migration code</p>",
        "id": 244876145,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625430690
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/migration.20bug/near/244876067\">said</a>:</p>\n<blockquote>\n<p>it’s interesting because one of the fixes to the <code>type_implements_trait</code> query that Niko mentioned IIRC was to move it to <code>FnCtxt</code> where this <code>ty_impls_trait</code> exists</p>\n</blockquote>\n<p>the reason it was moved because we need access to infcx</p>",
        "id": 244876373,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625430995
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281950\">Aman Arora</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/migration.20bug/near/244868860\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span>  I'm curious if you tried this on tokio? Like running cargo fix with your build of the compiler</p>\n</blockquote>\n<p><del>nope, give it a try?</del></p>",
        "id": 244879239,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625435447
    },
    {
        "content": "<p>so</p>",
        "id": 244879308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625435553
    },
    {
        "content": "<p>let me double check how I fixed it <em>but</em></p>",
        "id": 244879312,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625435563
    },
    {
        "content": "<p>I think the stable hasher thing may be because we are still executing the query with region variables</p>",
        "id": 244879318,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625435576
    },
    {
        "content": "<p>and I guess they have no stable hash</p>",
        "id": 244879320,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625435581
    },
    {
        "content": "<p>to fix that we would want to introduce some sort of \"wrapper\" around the query I guess</p>",
        "id": 244879329,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625435594
    },
    {
        "content": "<p>my fix was very targeted, I didn't move the function anywhere</p>",
        "id": 244879340,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625435616
    },
    {
        "content": "<p>Isn't that why we set regions to erased in writeback?</p>",
        "id": 244879346,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625435630
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/migration.20bug/near/244879320\">said</a>:</p>\n<blockquote>\n<p>and I guess they have no stable hash</p>\n</blockquote>\n<p>meant to reply to this</p>",
        "id": 244879355,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625435642
    },
    {
        "content": "<p>maybe we do that here too?</p>",
        "id": 244879392,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625435648
    },
    {
        "content": "<p>nvm i remember it causing issues, that's why we changed to resolve_vars_if_possible instead of writeback::Resolver::resolve / fold_ty</p>",
        "id": 244879415,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625435690
    },
    {
        "content": "<p>so</p>",
        "id": 244879431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625435717
    },
    {
        "content": "<p>we shuld probably file another bug, ideally with a distinct repro</p>",
        "id": 244879441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625435751
    },
    {
        "content": "<p>but <a href=\"https://github.com/rust-lang/rust/blob/492ba34a91612005336b8fbcc3cc16447ebc343a/compiler/rustc_trait_selection/src/traits/mod.rs#L564-L571\">this part</a> of my fix is already in the query</p>",
        "id": 244879495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625435796
    },
    {
        "content": "<p>that said, another option would be to mark that query as \"eval always\"</p>",
        "id": 244879502,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625435812
    },
    {
        "content": "<p>I think that will cause it not to do hashing</p>",
        "id": 244879509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625435823
    },
    {
        "content": "<p>and anyway that query just <em>immediately</em> invokes another query</p>",
        "id": 244879515,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625435830
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/migration.20bug/near/244879509\">said</a>:</p>\n<blockquote>\n<p>I think that will cause it not to do hashing</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> can probably confirm this, or <span class=\"user-mention\" data-user-id=\"124287\">@mw</span></p>",
        "id": 244879527,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625435851
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/migration.20bug/near/244879515\">said</a>:</p>\n<blockquote>\n<p>and anyway that query just <em>immediately</em> invokes another query</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/blob/492ba34a91612005336b8fbcc3cc16447ebc343a/compiler/rustc_trait_selection/src/traits/mod.rs#L579\">right here</a></p>",
        "id": 244879531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625435859
    },
    {
        "content": "<p>well, does it...? I forget</p>",
        "id": 244879537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625435873
    },
    {
        "content": "<p>(yes, it does)</p>",
        "id": 244879581,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625435909
    },
    {
        "content": "<p>yea it call eval_obligation_no_overflow</p>",
        "id": 244879588,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625435931
    },
    {
        "content": "<p>yes, and <a href=\"https://github.com/rust-lang/rust/blob/492ba34a91612005336b8fbcc3cc16447ebc343a/compiler/rustc_trait_selection/src/traits/query/evaluate_obligation.rs#L61-L74\">that eventually invokes a query</a></p>",
        "id": 244879596,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625435964
    },
    {
        "content": "<p>I noticed that before and thought \"this is a silly query to cache\"</p>",
        "id": 244879615,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625436002
    },
    {
        "content": "<p>if you have a repro handy, <span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span>, try changing</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">query</span><span class=\"w\"> </span><span class=\"n\">type_implements_trait</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">key</span>: <span class=\"p\">(</span><span class=\"n\">DefId</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Ty</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SubstsRef</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ty</span>::<span class=\"n\">ParamEnv</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">traits</span>::<span class=\"n\">EvaluationResult</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">desc</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"s\">\"evaluating `type_implements_trait` `{:?}`\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">key</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>to </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">query</span><span class=\"w\"> </span><span class=\"n\">type_implements_trait</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">key</span>: <span class=\"p\">(</span><span class=\"n\">DefId</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Ty</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SubstsRef</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ty</span>::<span class=\"n\">ParamEnv</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">traits</span>::<span class=\"n\">EvaluationResult</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">eval_always</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">desc</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"s\">\"evaluating `type_implements_trait` `{:?}`\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">key</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 244879685,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625436035
    },
    {
        "content": "<p>and see if that fixes it</p>",
        "id": 244879687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625436039
    },
    {
        "content": "<p>(do you know what <code>eval_always</code> is?)</p>",
        "id": 244879689,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625436048
    },
    {
        "content": "<p>I'm assuming don't cache and just run the associated method regardless?</p>",
        "id": 244879697,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625436072
    },
    {
        "content": "<p>I think it might actually need to be an 'anon' query</p>",
        "id": 244879708,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1625436095
    },
    {
        "content": "<p>An eval_always query will still hash the key, in order to compute a DepNode</p>",
        "id": 244879716,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1625436115
    },
    {
        "content": "<p>we could just make it not a query at all</p>",
        "id": 244879759,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625436134
    },
    {
        "content": "<p>just make it a method on <code>TyCtxt</code></p>",
        "id": 244879761,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625436139
    },
    {
        "content": "<p>it really doesn't need to be a query</p>",
        "id": 244879765,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625436145
    },
    {
        "content": "<p>I'm assuming we'd still just return can't be solved in case the type contains inference variables? Because if we don't have the type when that method is called we can't make any judgement</p>",
        "id": 244879960,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625436455
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> yes I wouldn't change the code at all</p>",
        "id": 244880167,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625436815
    },
    {
        "content": "<p>I'll do that, is there a guide to setup incremental tests?</p>",
        "id": 244880219,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625436856
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> not sure if there is</p>",
        "id": 244886924,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625449510
    },
    {
        "content": "<p>src/test/incremental is where they live</p>",
        "id": 244886970,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625449568
    },
    {
        "content": "<p>probably a test like this would suffice:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// revisions: rpass1</span>\n\n<span class=\"c1\">// Regression test that `infer_outlives_predicates` can be</span>\n<span class=\"c1\">// used with incremental without an ICE.</span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">T</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 244886975,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625449596
    },
    {
        "content": "<p>that is src/test/incremental/issue-51409.rs</p>",
        "id": 244886976,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625449603
    },
    {
        "content": "<p>the <code>\"revisions\"</code> list includes a name for each time the test will be compield</p>",
        "id": 244886982,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625449625
    },
    {
        "content": "<p>in this case, only once</p>",
        "id": 244886985,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625449629
    },
    {
        "content": "<p>other tests use <code>#[cfg]</code> to change the source in between revisions</p>",
        "id": 244886988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625449643
    },
    {
        "content": "<p>but I bet here just enabling incremental mode at all will suffice</p>",
        "id": 244886990,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625449649
    },
    {
        "content": "<p>Does the problem occur while hashing the query key or while hashing the query result?</p>",
        "id": 244910415,
        "sender_full_name": "mw",
        "timestamp": 1625475445
    },
    {
        "content": "<p>If the problem happens while hashing the result, you should be able to use <code>no_hash</code> (see <a href=\"https://rustc-dev-guide.rust-lang.org/queries/incremental-compilation-in-detail.html#query-modifiers\">rustc-dev-guide</a>). But I cannot judge if that would just <em>hide</em> the underlying problem.</p>",
        "id": 244910682,
        "sender_full_name": "mw",
        "timestamp": 1625475619
    },
    {
        "content": "<p>query key</p>",
        "id": 244917913,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625480234
    },
    {
        "content": "<p>here's the tokio incr ICE (for reference, triggered with the command <code>rustc --crate-name mini_tokio --edition=2018 src/main.rs --crate-type bin --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 -C metadata=d391c846a0d0848a -C extra-filename=-d391c846a0d0848a -C incremental=./incremental</code>)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![warn(rust_2021_compatibility)]</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">future</span>::<span class=\"n\">Future</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">pin</span>::<span class=\"n\">Pin</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">task</span>::<span class=\"p\">{</span><span class=\"n\">Poll</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">LocalSet</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">RunUntil</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_local_set</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">LocalSet</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_future</span>: <span class=\"nc\">F</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">RunUntil</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">project</span><span class=\"o\">&lt;'</span><span class=\"na\">pin</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"bp\">self</span>: <span class=\"nc\">Pin</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">pin</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Projection</span><span class=\"o\">&lt;'</span><span class=\"na\">pin</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">unimplemented!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Projection</span><span class=\"o\">&lt;'</span><span class=\"na\">pin</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">RunUntil</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"o\">&gt;</span>: <span class=\"o\">'</span><span class=\"na\">pin</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">local_set</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">pin</span> <span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">LocalSet</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">future</span>: <span class=\"nc\">Pin</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">pin</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">LocalSet</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">with</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_f</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">unimplemented!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Future</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">RunUntil</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span>::<span class=\"n\">Output</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">poll</span><span class=\"p\">(</span><span class=\"bp\">self</span>: <span class=\"nc\">Pin</span><span class=\"o\">&lt;&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cx</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Poll</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">Output</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">me</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">project</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">me</span><span class=\"p\">.</span><span class=\"n\">local_set</span><span class=\"p\">.</span><span class=\"n\">with</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">waker</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">me</span><span class=\"p\">.</span><span class=\"n\">future</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">poll</span><span class=\"p\">(</span><span class=\"n\">cx</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Poll</span>::<span class=\"n\">Pending</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 244919757,
        "sender_full_name": "lqd",
        "timestamp": 1625481562
    },
    {
        "content": "<p>(just using revisions will not work IMO: the test will need to opt in using <code>-C incremental</code>)</p>",
        "id": 244919948,
        "sender_full_name": "lqd",
        "timestamp": 1625481688
    },
    {
        "content": "<p>OK. I didn't see any PR, I may take a minute to prep one, since this seems like a fairly small change.</p>",
        "id": 244967686,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625513453
    },
    {
        "content": "<p>I'm currently working with Roxane to edit the reference, but can do this probably by tomorrow morning</p>",
        "id": 244967782,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625513534
    },
    {
        "content": "<p>We are done with the Rust reference <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  did you start on the PR or should I go ahead and do that?</p>",
        "id": 244969226,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625514932
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> I did not start</p>",
        "id": 244972833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625517896
    },
    {
        "content": "<p>I could do now potentially, but if you're doing it, I'll hold off</p>",
        "id": 244972841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625517908
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  I can start, we are just removing the query and making it a method on TyCtx right? I don't think the discussion with <code>@mw</code> above resulted in a decision for using no hash</p>",
        "id": 244973495,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625518455
    },
    {
        "content": "<p>Right</p>",
        "id": 244974114,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625518956
    },
    {
        "content": "<p>Just remove the query</p>",
        "id": 244974119,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625518961
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> tcx won't have access to infcx to call the eval obligation</p>",
        "id": 244975351,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625520297
    },
    {
        "content": "<p>wait that doesn't make sense the query was running using infcx</p>",
        "id": 244975393,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625520359
    },
    {
        "content": "<p>yes, the function creates its own infcx</p>",
        "id": 244976126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625521174
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/migration.20bug/near/244976126\">said</a>:</p>\n<blockquote>\n<p>yes, the function creates its own infcx</p>\n</blockquote>\n<p>But if i understand that correctly rustc_middle would've to depend upto rustc_infer and end up causing a circular dependcy</p>",
        "id": 244976629,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625521679
    },
    {
        "content": "<p>does that code depend on any logic that is part of <code>rustc_infer</code>?</p>",
        "id": 244976756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625521796
    },
    {
        "content": "<p>To create the infer_ctxt yes</p>",
        "id": 244976808,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625521813
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_infer/src/infer/mod.rs#L531-L545\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_infer/src/infer/mod.rs#L531-L545</a></p>",
        "id": 244976846,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625521865
    },
    {
        "content": "<p>This is where the code for creating a new infer_ctx within tcx is defined</p>",
        "id": 244976861,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625521882
    },
    {
        "content": "<p>Yes, I see</p>",
        "id": 244976867,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625521886
    },
    {
        "content": "<p>We could just move it into the <code>InferCtxtExt</code> set of methods</p>",
        "id": 244976876,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625521897
    },
    {
        "content": "<p>I don't think it particularly belongs where it is</p>",
        "id": 244976880,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625521903
    },
    {
        "content": "<p>This is kind of annoying :)</p>",
        "id": 244976928,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625521929
    },
    {
        "content": "<p>But that seems ok</p>",
        "id": 244976940,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625521942
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/migration.20bug/near/244976876\">said</a>:</p>\n<blockquote>\n<p>We could just move it into the <code>InferCtxtExt</code> set of methods</p>\n</blockquote>\n<p>This is not implemented for tcx</p>",
        "id": 244976968,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625521983
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_trait_selection/infer/trait.InferCtxtExt.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_trait_selection/infer/trait.InferCtxtExt.html</a></p>",
        "id": 244976983,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625521999
    },
    {
        "content": "<p>did you mean TyCtxtInferExt</p>",
        "id": 244977003,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625522019
    },
    {
        "content": "<p>yes</p>",
        "id": 244977063,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625522058
    },
    {
        "content": "<p>wherever <code>infer_ctxt</code> is defined</p>",
        "id": 244977067,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625522061
    },
    {
        "content": "<p>I bet most callers to <code>type_implements_trait</code> have that imported or available</p>",
        "id": 244977087,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625522095
    },
    {
        "content": "<p>Yes</p>",
        "id": 244977099,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625522104
    },
    {
        "content": "<p>it'd be nice if there were a query mode that is like \"just a normal function\"</p>",
        "id": 244977104,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625522109
    },
    {
        "content": "<p>let me try this, might have some circular rependcy for having to use rustc_traits for the obligation/evaluation result structs</p>",
        "id": 244977131,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625522149
    },
    {
        "content": "<p>the alternative would be to make a rustc_traits extension trait</p>",
        "id": 244977357,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625522402
    },
    {
        "content": "<p>there may even already be one?</p>",
        "id": 244977383,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625522404
    },
    {
        "content": "<p>doens't look that way</p>",
        "id": 244977423,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625522418
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> the <em>other</em> alternative is to make a \"raw\" variant of the query</p>",
        "id": 244977458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625522444
    },
    {
        "content": "<p>and move the logic we want to move (the test) into a wrapper around it</p>",
        "id": 244977462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625522453
    },
    {
        "content": "<p>I'm still trying the TyCtxExt</p>",
        "id": 244977541,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625522540
    },
    {
        "content": "<p>If this doesn't work, I'll try the other approaches</p>",
        "id": 244977554,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625522558
    },
    {
        "content": "<p>So the call to evaluate_obligation is defined wsithin trait selection</p>",
        "id": 244978281,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625523369
    },
    {
        "content": "<p>and trait_selection depends on rustc_infer</p>",
        "id": 244978293,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625523405
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/migration.20bug/near/244977357\">said</a>:</p>\n<blockquote>\n<p>the alternative would be to make a rustc_traits extension trait</p>\n</blockquote>\n<p>This worked <a href=\"https://github.com/rust-lang/rust/pull/86901\">https://github.com/rust-lang/rust/pull/86901</a></p>",
        "id": 245016232,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625564744
    },
    {
        "content": "<p>I tested tokio with </p>\n<div class=\"codehilite\"><pre><span></span><code>cargo +stage1 fix --edition\ncargo +stage1 fix --edition --allow-dirty\n</code></pre></div>\n<p>and will add a test to the PR soon</p>",
        "id": 245016316,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625564792
    },
    {
        "content": "<p>I added a test case, thought idk if it's actually testing the incremental issue</p>",
        "id": 245017452,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625565560
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> cool! Re: the test, were you able to see that it fails without your PR?</p>",
        "id": 245018747,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625566401
    },
    {
        "content": "<p>I didn't try that</p>",
        "id": 245018776,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625566433
    },
    {
        "content": "<p>let me build master</p>",
        "id": 245018826,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625566446
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/migration.20bug/near/244919757\">said</a>:</p>\n<blockquote>\n<p>here's the tokio incr ICE (for reference, triggered with the command <code>rustc --crate-name mini_tokio --edition=2018 src/main.rs --crate-type bin --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 -C metadata=d391c846a0d0848a -C extra-filename=-d391c846a0d0848a -C incremental=./incremental</code>)</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![warn(rust_2021_compatibility)]</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">future</span>::<span class=\"n\">Future</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">pin</span>::<span class=\"n\">Pin</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">task</span>::<span class=\"p\">{</span><span class=\"n\">Poll</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">LocalSet</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">RunUntil</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_local_set</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">LocalSet</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_future</span>: <span class=\"nc\">F</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">RunUntil</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">project</span><span class=\"o\">&lt;'</span><span class=\"na\">pin</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"bp\">self</span>: <span class=\"nc\">Pin</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">pin</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Projection</span><span class=\"o\">&lt;'</span><span class=\"na\">pin</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">unimplemented!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Projection</span><span class=\"o\">&lt;'</span><span class=\"na\">pin</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">RunUntil</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"o\">&gt;</span>: <span class=\"o\">'</span><span class=\"na\">pin</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">local_set</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">pin</span> <span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">LocalSet</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">future</span>: <span class=\"nc\">Pin</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">pin</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">LocalSet</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">with</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_f</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">unimplemented!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Future</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">RunUntil</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span>::<span class=\"n\">Output</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">poll</span><span class=\"p\">(</span><span class=\"bp\">self</span>: <span class=\"nc\">Pin</span><span class=\"o\">&lt;&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cx</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Poll</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">Output</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">me</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">project</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">me</span><span class=\"p\">.</span><span class=\"n\">local_set</span><span class=\"p\">.</span><span class=\"n\">with</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">waker</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">me</span><span class=\"p\">.</span><span class=\"n\">future</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">poll</span><span class=\"p\">(</span><span class=\"n\">cx</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Poll</span>::<span class=\"n\">Pending</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>but it's what <code>@lqd</code> shared above</p>",
        "id": 245018847,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625566467
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> one thing is that I suspect you will have to modify clippy</p>",
        "id": 245019010,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625566609
    },
    {
        "content": "<p>I'm not sure how to test that</p>",
        "id": 245019013,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625566613
    },
    {
        "content": "<p>I only had to modify one spot, locally <code>x.py check clippy</code> passed</p>",
        "id": 245019039,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625566638
    },
    {
        "content": "<p>ok good</p>",
        "id": 245019050,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625566646
    },
    {
        "content": "<p>yes, just one spot</p>",
        "id": 245019052,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625566649
    },
    {
        "content": "<p>Left one comment</p>",
        "id": 245019077,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625566672
    },
    {
        "content": "<p>I suggested a FIXME to add, although you could actually even make the change I suggested (convert this to a method on <code>InferCtxt</code> instead)</p>",
        "id": 245019143,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625566690
    },
    {
        "content": "<p>in the case of clippy, you would just invoke <code>tcx.infer_ctxt(|| ...)</code></p>",
        "id": 245019158,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625566706
    },
    {
        "content": "<p>but I'm happy to land it as is</p>",
        "id": 245019208,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625566754
    },
    {
        "content": "<p>and leave that for future work</p>",
        "id": 245019212,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625566757
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/migration.20bug/near/245019158\">said</a>:</p>\n<blockquote>\n<p>in the case of clippy, you would just invoke <code>tcx.infer_ctxt(|| ...)</code></p>\n</blockquote>\n<p>as in basically create the obligation in clippy and call the query?</p>",
        "id": 245019316,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625566846
    },
    {
        "content": "<p>no</p>",
        "id": 245019356,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625566908
    },
    {
        "content": "<p>I mean, you could do that, but instead: if you made that a method on <code>InferCtxt</code></p>",
        "id": 245019364,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625566919
    },
    {
        "content": "<p>that is, you made <code>type_implements_trait</code> a method on <code>InferCtxt</code></p>",
        "id": 245019408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625566928
    },
    {
        "content": "<p>I checked and every caller in the compiler has an infer ctxt available</p>",
        "id": 245019420,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625566938
    },
    {
        "content": "<p>the only place that <em>doesn't</em> is clippy</p>",
        "id": 245019425,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625566945
    },
    {
        "content": "<p>but it can create one in the same way that this method does</p>",
        "id": 245019456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625566977
    },
    {
        "content": "<p>i see what you mean. I'm fine doing either approaches</p>",
        "id": 245019475,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625566990
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">infer_ctxt</span><span class=\"p\">().</span><span class=\"n\">enter</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">infcx</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">infcx</span><span class=\"p\">.</span><span class=\"n\">evaluate_obligation_no_overflow</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">obligation</span><span class=\"p\">))</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 245019477,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625566993
    },
    {
        "content": "<p>well it <em>is</em> like 3am your time or something :)</p>",
        "id": 245019498,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625567010
    },
    {
        "content": "<p>since we need to figure out to the test, I can make the change before we land</p>",
        "id": 245019504,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625567016
    },
    {
        "content": "<p>I have a change for the test</p>",
        "id": 245019508,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625567023
    },
    {
        "content": "<p>I did some local testing</p>",
        "id": 245019511,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625567028
    },
    {
        "content": "<p>6am <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 245019514,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625567031
    },
    {
        "content": "<p>(a) I reproduced the ICE</p>",
        "id": 245019515,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625567031
    },
    {
        "content": "<p>oh, I thought you were in Vancouver</p>",
        "id": 245019524,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625567041
    },
    {
        "content": "<p>ok :)</p>",
        "id": 245019566,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625567048
    },
    {
        "content": "<p>depending whether you just woke up or have been up all night that's more or less reasonable</p>",
        "id": 245019579,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625567063
    },
    {
        "content": "<p>Not yet <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 245019580,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625567064
    },
    {
        "content": "<p>I'll make the change right now, shouldn't be too bad</p>",
        "id": 245019596,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625567084
    },
    {
        "content": "<p><em>anyway</em> if it's all the same to you I'd rather have it be a method on <code>InferCtxt</code> (and remove the <code>if</code> and the FIXME)</p>",
        "id": 245019599,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625567087
    },
    {
        "content": "<p>I will tweak the test for you</p>",
        "id": 245019609,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625567098
    },
    {
        "content": "<p>The test as is fails on the current master <code>Error: internal compiler error: compiler/rustc_middle/src/ich/impls_ty.rs:94:17: StableHasher: unexpected region '_#3r</code></p>",
        "id": 245019629,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625567109
    },
    {
        "content": "<p>oh, I can't for some reason</p>",
        "id": 245019635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625567116
    },
    {
        "content": "<p>but what you should do is:</p>",
        "id": 245019637,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625567119
    },
    {
        "content": "<p>move it to <code>src/test/incremental</code></p>",
        "id": 245019654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625567132
    },
    {
        "content": "<p>and change the \"header comments\" to</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// edition:2018</span>\n<span class=\"c1\">// revisions: rpass1</span>\n</code></pre></div>",
        "id": 245019662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625567147
    },
    {
        "content": "<p>I tested and that reproduces the problem</p>",
        "id": 245019667,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625567155
    },
    {
        "content": "<p>I'll make the change that you suggested as well</p>",
        "id": 245019712,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625567177
    },
    {
        "content": "<p>shouldn't take long if I'm thinking about it correctly</p>",
        "id": 245019729,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625567188
    },
    {
        "content": "<p>it'd probably be good to add a comment like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// Regression test for #86753. The `type_implements_trait` query (since moved to a method)</span>\n<span class=\"c1\">// was encountering an ICE during incremental testing when hashing its arguments.</span>\n</code></pre></div>",
        "id": 245019732,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625567189
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281950\">Aman Arora</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/migration.20bug/near/245019729\">said</a>:</p>\n<blockquote>\n<p>shouldn't take long if I'm thinking about it correctly</p>\n</blockquote>\n<p>it should be pretty easy I think</p>",
        "id": 245019747,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625567194
    },
    {
        "content": "<p>oh so the <code>src/test/incremental</code> tests have some behaviour that is specific to this location</p>",
        "id": 245020052,
        "sender_full_name": "lqd",
        "timestamp": 1625567418
    },
    {
        "content": "<p>they enable incremental testing</p>",
        "id": 245020067,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625567433
    },
    {
        "content": "<p>if you'd move the same test to where it's right now it wouldn't work</p>",
        "id": 245020075,
        "sender_full_name": "lqd",
        "timestamp": 1625567437
    },
    {
        "content": "<p>right that's what I meant</p>",
        "id": 245020083,
        "sender_full_name": "lqd",
        "timestamp": 1625567440
    },
    {
        "content": "<p>yes</p>",
        "id": 245020091,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625567447
    },
    {
        "content": "<p>we should fix that</p>",
        "id": 245020096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625567449
    },
    {
        "content": "<p>that is not super clear if you don't know about it</p>",
        "id": 245020099,
        "sender_full_name": "lqd",
        "timestamp": 1625567453
    },
    {
        "content": "<p>we've been moving away from having \"modes\" based on directories</p>",
        "id": 245020106,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625567456
    },
    {
        "content": "<p>but I believe the incremental tests are still special</p>",
        "id": 245020119,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625567466
    },
    {
        "content": "<p>in particular, they re-interpret the \"revisions\" parameter</p>",
        "id": 245020131,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625567475
    },
    {
        "content": "<p>we should probably change that to <code>incremental-revisions</code> or something</p>",
        "id": 245020144,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625567483
    },
    {
        "content": "<p>and then make it so that any test can be made incremental</p>",
        "id": 245020157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625567492
    },
    {
        "content": "<p>(should file a bug...)</p>",
        "id": 245020166,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625567499
    },
    {
        "content": "<p>sorry for the noise then, but at least we've learned something</p>",
        "id": 245020196,
        "sender_full_name": "lqd",
        "timestamp": 1625567522
    },
    {
        "content": "<p>I definitely prefer having \"no modes\", so that tests can be grouped based on what they test</p>",
        "id": 245020211,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625567523
    },
    {
        "content": "<p>check build passed locally so I've pushed the change, still running the tests locally</p>",
        "id": 245022857,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625569353
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_typeck/check/fn_ctxt/struct.FnCtxt.html#method.ty_impls_trait\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_typeck/check/fn_ctxt/struct.FnCtxt.html#method.ty_impls_trait</a></p>",
        "id": 245022881,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625569375
    },
    {
        "content": "<p>I suppose this duplicate method should also be removed</p>",
        "id": 245022894,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625569385
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> I'm leaving a few nits</p>",
        "id": 245023413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625569795
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281950\">Aman Arora</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/migration.20bug/near/245022894\">said</a>:</p>\n<blockquote>\n<p>I suppose this duplicate method should also be removed</p>\n</blockquote>\n<p>ah, hmm, good point :)</p>",
        "id": 245023551,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625569873
    },
    {
        "content": "<p>it looks ever so slightly different (it takes a <code>cause</code>, for example)</p>",
        "id": 245023570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625569887
    },
    {
        "content": "<p>Okay fixing this as well</p>",
        "id": 245025682,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625571299
    },
    {
        "content": "<p>So I'm usure what part of the code resulted in this changed lint being outputted</p>",
        "id": 245050530,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625583447
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/86901#issuecomment-874693797\">https://github.com/rust-lang/rust/pull/86901#issuecomment-874693797</a></p>",
        "id": 245050578,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625583467
    },
    {
        "content": "<p>The solution is almost correct it should be <code>Option::&lt;_&gt;::from()</code></p>",
        "id": 245050716,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625583511
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> that code calls <code>type_implements_trait</code>; I expect the difference is that the function is now working correctly</p>",
        "id": 245058341,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625586560
    },
    {
        "content": "<p>instead of giving an artificial limit</p>",
        "id": 245058351,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625586564
    },
    {
        "content": "<p>I would just bless the output</p>",
        "id": 245058358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625586569
    },
    {
        "content": "<p>I was going to tell you that for some reason I cannot push to your repo</p>",
        "id": 245058397,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625586587
    },
    {
        "content": "<p>I'll run with bless</p>",
        "id": 245058439,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625586601
    },
    {
        "content": "<p>why would depnode size change? <a href=\"https://github.com/rust-lang/rust/pull/86901\">https://github.com/rust-lang/rust/pull/86901</a></p>",
        "id": 245084712,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625598388
    },
    {
        "content": "<p>I also don't see the issue on my local build, i ran <code>x test --stage 2</code></p>",
        "id": 245084738,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625598403
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> if we change the set of queries, it can affect the size of the depnode</p>",
        "id": 245089881,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625600905
    },
    {
        "content": "<p>I don't know why you don't see the issue though</p>",
        "id": 245089894,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625600911
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> I bet it depends on the architecture</p>",
        "id": 245091469,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625601715
    },
    {
        "content": "<p>I think it might be because i have debug asserertions off</p>",
        "id": 245091562,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625601749
    },
    {
        "content": "<p>well i have the line commented out, so its whatever the default is in Config.toml</p>",
        "id": 245091589,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625601767
    },
    {
        "content": "<p>I pushed the change based on the error that showed up hopefully it makkes the thing compile</p>",
        "id": 245091902,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625601947
    },
    {
        "content": "<p>ok, I'm trying locally too</p>",
        "id": 245092398,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625602201
    },
    {
        "content": "<p>do I have access to rust repo?</p>",
        "id": 245092432,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625602204
    },
    {
        "content": "<p>(if not, can you give it to me)</p>",
        "id": 245092458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625602210
    },
    {
        "content": "<p>okay done</p>",
        "id": 245092696,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625602369
    }
]