[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> reading <a href=\"https://github.com/rust-lang/rust/issues/88476\">#88476</a>, I'm wondering if we should tweak the capture rules:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">rc</span>::<span class=\"n\">Rc</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"n\">Rc</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Drop</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">drop</span><span class=\"p\">(</span><span class=\"bp\">self</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"n\">Rc</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Specifically, if we see a move capture, it seems like we should truncate at any struct that defines a destructor, else we are just guaranteeing the user an error later, right?</p>",
        "id": 251241211,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630335088
    },
    {
        "content": "<p>In other words, rather than fixing this by introducing a migration, maybe the bug is the new closure capture rule in this case</p>",
        "id": 251241266,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630335115
    },
    {
        "content": "<p>Right, they might just write fresh code like that</p>",
        "id": 251241466,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630335184
    },
    {
        "content": "<p>Sounds good</p>",
        "id": 251241476,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630335187
    },
    {
        "content": "<p>I'll make a new PR probably tonight</p>",
        "id": 251241517,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630335199
    },
    {
        "content": "<p>That would require tweaking the Rust reference PR, too</p>",
        "id": 251241529,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630335206
    },
    {
        "content": "<p>Yes</p>",
        "id": 251241552,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630335215
    },
    {
        "content": "<p>Need to do the same for the reference change</p>",
        "id": 251241575,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630335227
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/88431\">#88431</a></p>",
        "id": 251241668,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630335252
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I remember now why I didn't quite do that. </p>\n<p>I was trying to avoid adding extra rules to capture analysis. Not sure ergonomically but from understanding what's going on it might be overall for a lint to suggest use <code>let _ = ... </code> instead of just doing that truncation</p>",
        "id": 251253363,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630340057
    },
    {
        "content": "<p>Or an improvement that we can make in the future is store \"Truncation reason\" as part of capture analysis. So that when we do throw a borrow error we can inform the user that the capture is not to complete precision because xyz reason</p>",
        "id": 251253525,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630340149
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281950\">Aman Arora</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/issue.20.2388476.20.2F.20pr.20.2388477/near/251253363\">said</a>:</p>\n<blockquote>\n<p>I was trying to avoid adding extra rules to capture analysis. Not sure ergonomically but from understanding what's going on it might be overall for a lint to suggest use <code>let _ = ... </code> instead of just doing that truncation</p>\n</blockquote>\n<p>This seems worth discussing. I definitely see the point that it's a kind of subtle extra rule, but the alternative seems to be generating a capture that we know will create an error, which doesn't sit right with me either.</p>",
        "id": 251402696,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630423138
    },
    {
        "content": "<p>There are sort of two approaches in my head: a) borrow checker lint provides the <code>let _ =&amp;x</code> suggestion along with the error msg, or b) we truncate in capture analysis.  Regardless both result in the same capture</p>",
        "id": 251403369,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630423380
    },
    {
        "content": "<p>a) is an overall less ergonomic option, <br>\nb) we probably should improve borrow check error messages to account for truncation to better educate people of why the precision is not what they'd expect</p>",
        "id": 251403607,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630423464
    },
    {
        "content": "<p>Yes, I think that adding notes to error messages around truncation is probably a good idea regardless</p>",
        "id": 251403703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630423502
    },
    {
        "content": "<p>I can create a PR for truncation in capture analysis tonight and we can implement the notes around truncation in a separate PR</p>",
        "id": 251403948,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630423580
    },
    {
        "content": "<p>I'm thinking about that</p>",
        "id": 251404112,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630423663
    },
    {
        "content": "<p>I imagine what we would want to do is something like:</p>",
        "id": 251404130,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630423669
    },
    {
        "content": "<ul>\n<li>the closure captures <code>foo</code> but accesses <code>foo.bar</code></li>\n<li>there is an access to <code>foo.baz</code> that generates an error</li>\n<li>we note and explain why the closure capture was truncated</li>\n</ul>",
        "id": 251404239,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630423698
    },
    {
        "content": "<p>we <em>might</em> skip the middle part and just always add an explanation;</p>",
        "id": 251404266,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630423709
    },
    {
        "content": "<p>e.g., whenever we highlight \"X is captured beacuse of this access\" we could explain that truncation occurred and why</p>",
        "id": 251404293,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630423722
    },
    {
        "content": "<p>it'd require tracking that of course, or recomputing it</p>",
        "id": 251404316,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630423730
    },
    {
        "content": "<p>Yeah something like that</p>",
        "id": 251404404,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630423764
    },
    {
        "content": "<p>I think the challenge might be to pass this information within the borrow checker</p>",
        "id": 251404553,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630423814
    },
    {
        "content": "<p>I remember when Chris implemented the 2229 borrow message changes, getting relevant information/context passed around was hard</p>",
        "id": 251404678,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630423873
    },
    {
        "content": "<p>I've been thinking <span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> more about this and I'm feeling uncertain</p>",
        "id": 251431064,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630433838
    },
    {
        "content": "<p>we had some discussion in the lang team and I realized that the error only occurs when the field in question is not Copy (duh)</p>",
        "id": 251431086,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630433849
    },
    {
        "content": "<p>I'm starting to think maybe I prefer to just give a nice suggestion</p>",
        "id": 251431106,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630433857
    },
    {
        "content": "<p>I have to kind of write up the various examples</p>",
        "id": 251431119,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630433863
    },
    {
        "content": "<p>FWIW part of my worry is that in my experience the error about moving out of type implementing drop is <em>already</em> kinda annoying to run into (often it is a \"false positive\" in the sense that I <em>do</em> actually want to move out, not run the dtor), so seeing it more often is even more annoying</p>",
        "id": 251431344,
        "sender_full_name": "simulacrum",
        "timestamp": 1630433948
    },
    {
        "content": "<p>Yes. I'm not thrilled.</p>",
        "id": 251431620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630434045
    },
    {
        "content": "<p>I want to write up a few examples I guess</p>",
        "id": 251431671,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630434062
    },
    {
        "content": "<p>if we always capture all of a value that implements <code>Drop</code>, we are closer to today's behavior, for sure</p>",
        "id": 251431767,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630434092
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/issue.20.2388476.20.2F.20pr.20.2388477/near/251431344\">said</a>:</p>\n<blockquote>\n<p>FWIW part of my worry is that in my experience the error about moving out of type implementing drop is <em>already</em> kinda annoying to run into (often it is a \"false positive\" in the sense that I <em>do</em> actually want to move out, not run the dtor), so seeing it more often is even more annoying</p>\n</blockquote>\n<p>side note, I wonder if we should try to \"fix\" this</p>",
        "id": 251431939,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630434149
    },
    {
        "content": "<p>I'm not 100% sure how :) I imagine some kind of operator that moves-and-forgets</p>",
        "id": 251431967,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630434162
    },
    {
        "content": "<p>We will only capture completely only of it's by move capture, use still gets precision via a  by ref use</p>",
        "id": 251432193,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630434241
    },
    {
        "content": "<p>the example I was pondering is something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Character</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">hp</span>: <span class=\"kt\">u32</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Drop</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Character</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">character</span><span class=\"p\">.</span><span class=\"n\">hp</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 251432463,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630434327
    },
    {
        "content": "<p>which could require <code>let hp = character.hp</code> outside the closure if we change the rules to \"always truncate when moving a struct that implements <code>Drop</code>\"</p>",
        "id": 251432562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630434359
    },
    {
        "content": "<p>Does the borrow checker treat that as a move or copy</p>",
        "id": 251432570,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630434363
    },
    {
        "content": "<p>I believe this will capture <code>character.hp</code> today, which is a copy</p>",
        "id": 251432682,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630434382
    },
    {
        "content": "<p>and hence would compile</p>",
        "id": 251432691,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630434384
    },
    {
        "content": "<p>by \"today\" I mean \"in Rust 2021 as presently implemented on master\"</p>",
        "id": 251432718,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630434393
    },
    {
        "content": "<p>Ah I see the what you were referring to</p>",
        "id": 251432841,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630434434
    },
    {
        "content": "<p>One problem with truncation during capture analysis is that \"Type impls Drop\" is an approximation during that stage</p>",
        "id": 251433044,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630434508
    },
    {
        "content": "<p>Having written it out, though, I see some value to the rules capturing all of <code>character</code> and saying \"because <code>Character</code> implements Drop\"</p>",
        "id": 251433052,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630434511
    },
    {
        "content": "<p>How so ? We always know if a struct implements drop</p>",
        "id": 251433090,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630434526
    },
    {
        "content": "<p>At least that what I understood about how we were using the trait/obligation code</p>",
        "id": 251433252,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630434598
    },
    {
        "content": "<p>Eg the recent change me made around the overflow, the actual crate didn't need the recursion limit override to compile if I recall correctly</p>",
        "id": 251433528,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630434673
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> checking whether a particular struct implements <code>Drop</code> is easy</p>",
        "id": 251439165,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630436616
    },
    {
        "content": "<p>in this case, we would be looking at a field projection <code>(.0)</code></p>",
        "id": 251439181,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630436624
    },
    {
        "content": "<p>so we would have a particular struct in mind</p>",
        "id": 251439199,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630436630
    },
    {
        "content": "<p>(the owner of that field)</p>",
        "id": 251439213,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630436634
    },
    {
        "content": "<p>I'm thinking about  the accuracy of<code>type_implements_trait</code></p>",
        "id": 251440493,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630437052
    },
    {
        "content": "<p>I could've completely misunderstood but I feel like everytime that function has been discussed there have been some amt of possilbility of false negatives</p>",
        "id": 251440757,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630437137
    },
    {
        "content": "<p>my point is that you don't need that function</p>",
        "id": 251440818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630437160
    },
    {
        "content": "<p>Ah just check if destructor is there?</p>",
        "id": 251440855,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630437175
    },
    {
        "content": "<p>Right</p>",
        "id": 251440884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630437185
    },
    {
        "content": "<p>I totally forgot that was a thing <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 251440949,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630437217
    },
    {
        "content": "<p>Now I'm wondering why I have the check using traits in the lint <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 251440993,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630437241
    },
    {
        "content": "<p>But okay yea I agree we can easily/confidently check for drop</p>",
        "id": 251441083,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630437271
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  I read through the document, and it makes sense. I'll update my PR to handle the Copy case</p>",
        "id": 251742241,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630599600
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> good, add a test too please</p>",
        "id": 251750956,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630602960
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/88477/files\">https://github.com/rust-lang/rust/pull/88477/files</a> updated</p>",
        "id": 251842858,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630658416
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/88477\">https://github.com/rust-lang/rust/pull/88477</a></p>\n<p>This is ready for review <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 252370849,
        "sender_full_name": "Aman Arora",
        "timestamp": 1631048230
    },
    {
        "content": "<p>r+</p>",
        "id": 252370919,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631048269
    },
    {
        "content": "<p>thanks!</p>",
        "id": 252370928,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631048271
    },
    {
        "content": "<p>what's the process of beta backprort?</p>",
        "id": 252407755,
        "sender_full_name": "Aman Arora",
        "timestamp": 1631078272
    },
    {
        "content": "<p>The beta backport process is described here: <a href=\"https://forge.rust-lang.org/release/backporting.html#beta-backporting-in-rust-langrust\">https://forge.rust-lang.org/release/backporting.html#beta-backporting-in-rust-langrust</a></p>",
        "id": 252478012,
        "sender_full_name": "Eric Huss",
        "timestamp": 1631113855
    }
]