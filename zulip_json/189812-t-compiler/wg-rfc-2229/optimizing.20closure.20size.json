[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281950\">Aman Arora</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/status.20sync/near/242037584\">said</a>:</p>\n<blockquote>\n<p>One interesting possibility though is if we have an immutable ref, then any precise path starting at that would also be an immutable ref and therefore we should be able to capture that ref on its own</p>\n</blockquote>\n<p>Ah, this is interesting <span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span></p>",
        "id": 242632965,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623691929
    },
    {
        "content": "<p>I'm debating about it</p>",
        "id": 242632981,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623691934
    },
    {
        "content": "<p>OK, it seems right</p>",
        "id": 242632995,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623691943
    },
    {
        "content": "<p>The idea is specifically that we are borrowing the referent of a shared ref</p>",
        "id": 242633018,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623691954
    },
    {
        "content": "<p>Do you have any idea how often that might apply? It seems simple enough to test</p>",
        "id": 242633035,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623691963
    },
    {
        "content": "<p>Can you open an issue to track it?</p>",
        "id": 242633089,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623691987
    },
    {
        "content": "<p>I'll create an issue</p>",
        "id": 242633833,
        "sender_full_name": "Aman Arora",
        "timestamp": 1623692337
    },
    {
        "content": "<p>Also it will either be a referant or a copy, and in either cases copying the root vraiable completely would be cheaper</p>",
        "id": 242639971,
        "sender_full_name": "Aman Arora",
        "timestamp": 1623695221
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> this isn't true for e.g. <code>&amp;u8</code>, right?</p>",
        "id": 242812407,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623799678
    },
    {
        "content": "<p>Well not for &amp;u8, because the it's still the size of a reference, but if it was u8 it would be cheaper -- but that's not the optimizaiton I'm suggesting.</p>\n<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=253a347e4d588920f334d956a5e513b4\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=253a347e4d588920f334d956a5e513b4</a></p>\n<p>In this example closure captures an &amp;u8 and the size of the closure is 8 bytes, which is size of the reference.</p>",
        "id": 242818275,
        "sender_full_name": "Aman Arora",
        "timestamp": 1623804937
    },
    {
        "content": "<p>The only time we will have a ByValue(Copy) in case of x.y.z (where x is some shared ref) is in case of a move closure. </p>\n<p>In such a case there is a possiblity that copying x.y.z is cheaper than copying x</p>",
        "id": 242818551,
        "sender_full_name": "Aman Arora",
        "timestamp": 1623805186
    },
    {
        "content": "<p><a href=\"https://hackmd.io/hpjgfcwaSK20uFtZibwhIw\">https://hackmd.io/hpjgfcwaSK20uFtZibwhIw</a></p>",
        "id": 242936192,
        "sender_full_name": "Aman Arora",
        "timestamp": 1623874276
    },
    {
        "content": "<p>This worked hillariously well </p>\n<p><a href=\"https://docs.google.com/spreadsheets/d/1zOOeTFz4AvprEVsiPNFlkt4x_93N7WQe2uv2pX3BzXQ/edit?usp=sharing\">https://docs.google.com/spreadsheets/d/1zOOeTFz4AvprEVsiPNFlkt4x_93N7WQe2uv2pX3BzXQ/edit?usp=sharing</a></p>",
        "id": 243626759,
        "sender_full_name": "Aman Arora",
        "timestamp": 1624440591
    },
    {
        "content": "<p>I haven't done a baseline compare again, but don't expect any major changes in the overall trend</p>",
        "id": 243626852,
        "sender_full_name": "Aman Arora",
        "timestamp": 1624440635
    },
    {
        "content": "<p>for comparison this was the original: <a href=\"https://docs.google.com/spreadsheets/d/1zNWWvTQ9kd0TDraNY_55HFDbHMaBl1NZn8chi30_M4g/edit#gid=845050938\">https://docs.google.com/spreadsheets/d/1zNWWvTQ9kd0TDraNY_55HFDbHMaBl1NZn8chi30_M4g/edit#gid=845050938</a></p>",
        "id": 243626876,
        "sender_full_name": "Aman Arora",
        "timestamp": 1624440650
    },
    {
        "content": "<p>I did the run on <code>syn</code> crate and we had no increase after the optimization.</p>",
        "id": 243627023,
        "sender_full_name": "Aman Arora",
        "timestamp": 1624440747
    },
    {
        "content": "<p>Cargo doesn't seem to build for me locally on latest nightly, but CI seems to be passing on the cargo repo so I need to look into that</p>",
        "id": 243627080,
        "sender_full_name": "Aman Arora",
        "timestamp": 1624440784
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> this is the \"just capture the base reference\" optimization?</p>",
        "id": 243697328,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624474786
    },
    {
        "content": "<p>that's awesome news!</p>",
        "id": 243697350,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624474792
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/optimizing.20closure.20size/near/243697328\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"281950\">Aman Arora</span> this is the \"just capture the base reference\" optimization?</p>\n</blockquote>\n<p>yes</p>",
        "id": 243697416,
        "sender_full_name": "Aman Arora",
        "timestamp": 1624474810
    },
    {
        "content": "<p>I'm running a base line again right now, hopefully we will have data before we meet.</p>",
        "id": 243697472,
        "sender_full_name": "Aman Arora",
        "timestamp": 1624474837
    },
    {
        "content": "<p>Here is the base line i did again today: <a href=\"https://docs.google.com/spreadsheets/d/1U5vaXu490wn8Ae1LB1mSfoP_EZrGRHbUU6ADbeY8bn4/edit#gid=545238654\">https://docs.google.com/spreadsheets/d/1U5vaXu490wn8Ae1LB1mSfoP_EZrGRHbUU6ADbeY8bn4/edit#gid=545238654</a></p>",
        "id": 243700852,
        "sender_full_name": "Aman Arora",
        "timestamp": 1624476610
    },
    {
        "content": "<p>There is a one off eerror that I'm not sure about</p>",
        "id": 243700861,
        "sender_full_name": "Aman Arora",
        "timestamp": 1624476618
    },
    {
        "content": "<p>So the optimization didn't work on the edge case for the reason <code>'a must outlive 'static</code>. The implementation is doing what we expected it to I checked that by dumping the capture ananlysis.</p>\n<p>To understand what's happneing I wrote this which doesn't seem to work pre optimization:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">B</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">MyStruct</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">b</span>: <span class=\"nc\">B</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">m</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">MyStruct</span><span class=\"o\">&lt;'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">FnMut</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">m</span><span class=\"p\">.</span><span class=\"n\">a</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">c</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 244093160,
        "sender_full_name": "Aman Arora",
        "timestamp": 1624841419
    },
    {
        "content": "<p>I suppose I do not understand lifetimes well enough to figure out why it's failng, but I get the same error</p>\n<div class=\"codehilite\"><pre><span></span><code>17 |     c\n   |     ^ returning this value requires that `&#39;a` must outlive `&#39;static`\n   |\n   = help: consider replacing `&#39;a` with `&#39;static`\n</code></pre></div>",
        "id": 244093186,
        "sender_full_name": "Aman Arora",
        "timestamp": 1624841466
    },
    {
        "content": "<p>capture analysis shows that what's being captured is <code>m[Deref,(0, 0)] -&gt; ImmBorrow</code></p>",
        "id": 244093255,
        "sender_full_name": "Aman Arora",
        "timestamp": 1624841587
    },
    {
        "content": "<p>Is the reason that we are captuing a reference toa reference and so the life time of the capture is lifetime of the root variable = 'a?</p>",
        "id": 244093269,
        "sender_full_name": "Aman Arora",
        "timestamp": 1624841641
    },
    {
        "content": "<p>In which case the solution might be if we have a shared ref as the type of the captured place then captured the reference ByValue (I assume this would be a Copy because shared ref and therefore the same size other than in case of function pointers)</p>",
        "id": 244093329,
        "sender_full_name": "Aman Arora",
        "timestamp": 1624841729
    },
    {
        "content": "<p>Yes, I think we discussed this last week, <span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> ?</p>",
        "id": 244155856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624891664
    },
    {
        "content": "<p>That we only want to remove <em>trailing fields</em></p>",
        "id": 244155886,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624891677
    },
    {
        "content": "<p>and not trailing derefs</p>",
        "id": 244155892,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624891680
    },
    {
        "content": "<p>Ah right, my bad</p>",
        "id": 244173652,
        "sender_full_name": "Aman Arora",
        "timestamp": 1624899244
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <br>\nPR for the profile command: <a href=\"https://github.com/rust-lang/rust/pull/86695\">https://github.com/rust-lang/rust/pull/86695</a></p>",
        "id": 244185797,
        "sender_full_name": "Aman Arora",
        "timestamp": 1624904583
    },
    {
        "content": "<p>PR for the optimization: <a href=\"https://github.com/rust-lang/rust/pull/86701\">https://github.com/rust-lang/rust/pull/86701</a></p>",
        "id": 244205102,
        "sender_full_name": "Aman Arora",
        "timestamp": 1624914650
    }
]