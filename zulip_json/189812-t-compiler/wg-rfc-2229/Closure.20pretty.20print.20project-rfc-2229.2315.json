[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  is there a way of checking if it is safe to access typechk tables? </p>\n<p>This fails if an error is thrown from typechk because of a cycle<br>\n<a href=\"https://github.com/rust-lang/rust/commit/c1afd5f84ed88daf895a2e07ef1359ef3c408265#diff-e1e954c4fe23b5f47284eac19ad57a69R496\">https://github.com/rust-lang/rust/commit/c1afd5f84ed88daf895a2e07ef1359ef3c408265#diff-e1e954c4fe23b5f47284eac19ad57a69R496</a> </p>\n<p>eg: <a href=\"https://github.com/rust-lang/rust/commit/ba290defd4aa68cdf2453787465212a6df23e362\">https://github.com/rust-lang/rust/commit/ba290defd4aa68cdf2453787465212a6df23e362</a></p>\n<p>This is for <a href=\"https://github.com/rust-lang/project-rfc-2229/issues/15\">https://github.com/rust-lang/project-rfc-2229/issues/15</a>, which niko suggested we should do before <a href=\"https://github.com/rust-lang/project-rfc-2229/issues/4\">https://github.com/rust-lang/project-rfc-2229/issues/4</a> since it might require an MCP or at least pinging <code>@Esteban Küber</code></p>",
        "id": 207093303,
        "sender_full_name": "Aman Arora",
        "timestamp": 1597617445
    },
    {
        "content": "<p>ughhhhh</p>",
        "id": 207093309,
        "sender_full_name": "eddyb",
        "timestamp": 1597617473
    },
    {
        "content": "<p>I hate Zulip</p>",
        "id": 207093312,
        "sender_full_name": "eddyb",
        "timestamp": 1597617481
    },
    {
        "content": "<p>I just nuked 50 mentions just to get here</p>",
        "id": 207093350,
        "sender_full_name": "eddyb",
        "timestamp": 1597617487
    },
    {
        "content": "<p>woops</p>",
        "id": 207093352,
        "sender_full_name": "Aman Arora",
        "timestamp": 1597617507
    },
    {
        "content": "<p>you should never query anything as needy as typeck from printing</p>",
        "id": 207093357,
        "sender_full_name": "eddyb",
        "timestamp": 1597617530
    },
    {
        "content": "<p>it will just never end up well</p>",
        "id": 207093360,
        "sender_full_name": "eddyb",
        "timestamp": 1597617536
    },
    {
        "content": "<p>printing captures in the closure type was a mistake anyway</p>",
        "id": 207093365,
        "sender_full_name": "eddyb",
        "timestamp": 1597617555
    },
    {
        "content": "<p>Do you suggest just removing it?</p>",
        "id": 207093373,
        "sender_full_name": "Aman Arora",
        "timestamp": 1597617585
    },
    {
        "content": "<p>I'd talk it over with <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 207093375,
        "sender_full_name": "eddyb",
        "timestamp": 1597617596
    },
    {
        "content": "<p>Aight, I'll bring it up tomorrow, thanks</p>",
        "id": 207093418,
        "sender_full_name": "Aman Arora",
        "timestamp": 1597617614
    },
    {
        "content": "<p>the current way closures are printed is far from ideal for many reasons, the only problem with just printing <code>mod::nested_mod::function::{closure}</code> is disambiguating multiple closures, but maybe there's a way to throw that in there nicely</p>",
        "id": 207093430,
        "sender_full_name": "eddyb",
        "timestamp": 1597617687
    },
    {
        "content": "<p>e.g. <code>{closure at file.rs:LL:CC}</code></p>",
        "id": 207093433,
        "sender_full_name": "eddyb",
        "timestamp": 1597617701
    },
    {
        "content": "<p>we already have to print closure path components e.g. if you have any definition inside a closure</p>",
        "id": 207093478,
        "sender_full_name": "eddyb",
        "timestamp": 1597617726
    },
    {
        "content": "<p>as for problems the current strategy creates: <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> had trouble trying to debug polymorphization due to how the generics of the parent not being printed at all</p>",
        "id": 207093492,
        "sender_full_name": "eddyb",
        "timestamp": 1597617777
    },
    {
        "content": "<p>What do you mean by generics of the parent?</p>",
        "id": 207093513,
        "sender_full_name": "Aman Arora",
        "timestamp": 1597617827
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/tupled.20upvar.20types.20.2357482/near/207093433\">said</a>:</p>\n<blockquote>\n<p>e.g. <code>{closure at file.rs:LL:CC}</code></p>\n</blockquote>\n<p><del>Does span have this information</del></p>",
        "id": 207093583,
        "sender_full_name": "Aman Arora",
        "timestamp": 1597617890
    },
    {
        "content": "<p>It does seem to print that <code>return type of closure is [closure@$DIR/issue-53432-nested-closure-outlives-borrowed-value.rs:4:9: 4:15]</code></p>",
        "id": 207093602,
        "sender_full_name": "Aman Arora",
        "timestamp": 1597617947
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> yeah but it's not printing <code>mod::nested_mod::function::</code> or whatever</p>",
        "id": 207121495,
        "sender_full_name": "eddyb",
        "timestamp": 1597655494
    },
    {
        "content": "<p>as for generics of the parent I mean the X, Y, Z in <code>function::&lt;X, Y, Z&gt;::{closure}</code></p>",
        "id": 207121528,
        "sender_full_name": "eddyb",
        "timestamp": 1597655518
    },
    {
        "content": "<p>without printing the parent path, you can't really print the substs for parent generics anywhere</p>",
        "id": 207121576,
        "sender_full_name": "eddyb",
        "timestamp": 1597655538
    },
    {
        "content": "<p>I see what you mean</p>",
        "id": 207157444,
        "sender_full_name": "Aman Arora",
        "timestamp": 1597678021
    },
    {
        "content": "<p>Moved the discussion to it's own topic.</p>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <br>\nFor <a href=\"https://github.com/rust-lang/project-rfc-2229/issues/15\">https://github.com/rust-lang/project-rfc-2229/issues/15</a> we would need access to typechk tables to print precise closure captures. It's possible than an error is thrown from within typechk which would results in a cycle.</p>",
        "id": 207185284,
        "sender_full_name": "Aman Arora",
        "timestamp": 1597691617
    },
    {
        "content": "<p>yes</p>",
        "id": 207509905,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597920748
    },
    {
        "content": "<p>this is kind of a general problem</p>",
        "id": 207509915,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597920755
    },
    {
        "content": "<p>I kind of think we should not print precise close captures</p>",
        "id": 207509918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597920768
    },
    {
        "content": "<p>I think it's too much info for humans anyway</p>",
        "id": 207509921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597920772
    },
    {
        "content": "<p>(of course it's nice for debugging to be able to get info out)</p>",
        "id": 207509930,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597920786
    },
    {
        "content": "<p>I guess I can look at the issue</p>",
        "id": 207509935,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597920796
    },
    {
        "content": "<p>it may be that we want a <code>-Zverbose</code> thing that targets the debugging use case</p>",
        "id": 207509948,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597920810
    },
    {
        "content": "<p>I do think that <em>in general</em> it'd be nice if \"type prettyprinting\" (i.e., non-debug-output) allowed us to pass down context</p>",
        "id": 207509975,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597920833
    },
    {
        "content": "<p>rather than relying on <code>Display</code> impl</p>",
        "id": 207509980,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597920840
    },
    {
        "content": "<p>but .. it's complex. we used to have that and <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> heroically moved us to the current setup, idk. there's no perfect setup it seems like.</p>",
        "id": 207510033,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597920864
    },
    {
        "content": "<p>did you want me to try and draw up a specific proposal <span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> ? I'd like to get <span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span>'s take I guess. I think that what I would consider is pretty printing closures like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>[closure@$DIR/closure-reform-bad.rs:10:13: 10:50]\n</code></pre></div>\n\n\n<p>and then, if we have <code>-Zverbose</code>, maybe include the generics (all of them):</p>\n<div class=\"codehilite\"><pre><span></span><code>[closure@$DIR/closure-reform-bad.rs:10:13: 10:50&lt;T1, T2, T3&gt;]\n</code></pre></div>",
        "id": 207510157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597920967
    },
    {
        "content": "<p>this would also help with <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span>'s case of not being able to see the generics</p>",
        "id": 207510179,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597920980
    },
    {
        "content": "<p>I don't love the <code>[closure@path:span]</code> text but I would probably not want to change it now to minimize disruption</p>",
        "id": 207510204,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597921010
    },
    {
        "content": "<p>I can write something up probably by tomorrow morning. I haven't worked with generics in rustc, so I'm not sure about the feasibility -- how do we get that information? For this to work that information should not be coming from typeck results</p>",
        "id": 207534726,
        "sender_full_name": "Aman Arora",
        "timestamp": 1597936847
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> <br>\n<a href=\"https://hackmd.io/@eoq0XxJhSJ6VzuZCQM0OgA/rkuwlV3zP\">https://hackmd.io/@eoq0XxJhSJ6VzuZCQM0OgA/rkuwlV3zP</a> </p>\n<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span>  can you verify if that is what you meant by generics from the parent.</p>",
        "id": 207555065,
        "sender_full_name": "Aman Arora",
        "timestamp": 1597946942
    },
    {
        "content": "<p>That looks like what I’d expect. </p>\n<p>I’ve not been following this work closely but if the upvars will still be in the substitutions of the closure, then seeing those in some form would be helpful (e.g. I’ve had issues with closures in the upvar tuple referring to generic parameters that I didn’t expect but you can’t see that from the pretty printing).</p>",
        "id": 207555616,
        "sender_full_name": "davidtwco",
        "timestamp": 1597947253
    },
    {
        "content": "<p>Once typechk is complete the <code>ClosureSubsts</code> will have the tuple of capture types. Before that it will only be a single inference variable.</p>",
        "id": 207555860,
        "sender_full_name": "Aman Arora",
        "timestamp": 1597947391
    },
    {
        "content": "<p>(Diff b/w upvar and captures is that captures is the precise path being captured eg p.x, whereas upvars in the root variable eg: p)</p>",
        "id": 207555959,
        "sender_full_name": "Aman Arora",
        "timestamp": 1597947453
    },
    {
        "content": "<p>That makes sense - I’d find it valuable to have those shown, in whatever form they end up taking (i.e. any circumstance where I can find that two types aren’t equal and if I print them can’t see that difference, it’s frustrating)</p>",
        "id": 207556176,
        "sender_full_name": "davidtwco",
        "timestamp": 1597947546
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281950\">Aman Arora</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/Closure.20pretty.20print.20project-rfc-2229.2315/near/207555860\">said</a>:</p>\n<blockquote>\n<p>Once typechk is complete the <code>ClosureSubsts</code> will have the tuple of capture types. Before that it will only be a single inference variable.</p>\n</blockquote>\n<p>Though the proposal is to not print that information (what's being captured and their type), but seems like it is already lacking information</p>",
        "id": 207556178,
        "sender_full_name": "Aman Arora",
        "timestamp": 1597947548
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span>  do you have a example of what all information you want to be outputted? I'm not sure what type information is currently missing</p>",
        "id": 207557471,
        "sender_full_name": "Aman Arora",
        "timestamp": 1597948288
    },
    {
        "content": "<p>I’m not sure if this is helpful - but <a href=\"#narrow/stream/216091-t-compiler.2Fwg-polymorphization/topic/symbol.20mangling.20v0.20.E2.9C.95.20polymorphisation/near/206152008\">this thread</a> describes my debugging of a scenario where I had two substitutions (from closures, IIRC) that printed the exact same yet hashed differently and don’t equal each other - hopefully that helps (later messages in that thread describe an another problem and can be ignored).</p>",
        "id": 207558119,
        "sender_full_name": "davidtwco",
        "timestamp": 1597948617
    },
    {
        "content": "<p>In that circumstance, a closure in the upvar tuple had different parent substitutions but I had no way of knowing that from the way it got printed.</p>",
        "id": 207558321,
        "sender_full_name": "davidtwco",
        "timestamp": 1597948723
    },
    {
        "content": "<p>So I’d like to be able to see the contents of the upvar tuple (or capture tuple) and the parent substitutions - so that the way a tuple is printed isn’t a black box - if that makes sense?</p>",
        "id": 207558550,
        "sender_full_name": "davidtwco",
        "timestamp": 1597948837
    },
    {
        "content": "<p>I think I sort of get it, I'm trying to write out a minimal example just to confirm I understand things correctly</p>",
        "id": 207559750,
        "sender_full_name": "Aman Arora",
        "timestamp": 1597949456
    },
    {
        "content": "<p>Actually I don't think I do, the example you have doesn't have generics -- so not sure what subsitutions other than captures are being referred there.</p>\n<p>I have this: <br>\n<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=8ec09dda4f374be5df37433bbc5c8cdc\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=8ec09dda4f374be5df37433bbc5c8cdc</a></p>\n<p>Curious if cg and cf are considered the same type or not because of different parent generics</p>",
        "id": 207562047,
        "sender_full_name": "Aman Arora",
        "timestamp": 1597950619
    },
    {
        "content": "<p>I don’t know that the exact case I spoke about could arise without polymorphization, so it might not be worth constructing a example. Something like <code>[closure@$DIR/$FOO.rs:XX:YY XX:YY (capture tuple) &lt;parent generics&gt;]</code> is basically all I’m talking about.</p>",
        "id": 207567360,
        "sender_full_name": "davidtwco",
        "timestamp": 1597953452
    },
    {
        "content": "<p>So we do need to keep capture information. I'd add that type information won't be availble before typechk is complete i.e. until typeck results are written back and all the inference variables are resolved. </p>\n<p>I'm still in the favour of using <code>-Zverbose</code> to print capture information mostly because a) the capture information is not particularly useful for end users b) capture information &gt; upvar information. And significantly greater if a closure captures several fields from a structure.</p>\n<p>Following is mostly related to implementation:</p>\n<p>We wanted to keep changes to the output separate from the changing tuple of inference variables to single inference variable ([#4]), but I think we should be doing this ideally with/after [#4]/[#7]. ([#7]: is closure caputre using places) </p>\n<p>Reasons:</p>\n<ul>\n<li>Once [#4] is implemented (ignoring the test output for a min), we can deduce if typechk is done or not based on if the ClosureSubsts contains an InferenceVariable or a Tuple. If typechk is complete then we print information based on closure captures otherwise we print information from upvar_mentioned and don't include any type information. </li>\n<li>Before [#7] is implemented (and maybe even minimal capture), there is no way for us to check if the code to print the precise information is working correctly. So eg: before [#7] is implemented we don't know if our code to print <code>p.x</code> is correct or not,  and might cause problems.</li>\n</ul>\n<p>Overall we do this in three parts:</p>\n<ol>\n<li>Add parent generics, that is agnostic of any work done/will be done for 2229, so ideally any changes we plan on making should not impact this. </li>\n<li>Along with [#4]: print type information only after typechk. If type information is not available, just print the list of upvars_mentioned (root variables). </li>\n<li>Finish [#7] and maybe [#9], print precise capture information (including types) after typechk.</li>\n</ol>\n<p>Questions I have:</p>\n<ul>\n<li>For (1), when is information about generics avaiable? Are we sure we won't enter into a typechk cycle.</li>\n<li>For (2), Does the fact that we have access to a <code>ty::Closure(def_id, susbts)</code> ensure that we have finished the pass in librustc where we gather information about upvars? (My guess would be yes, based on where closures are created, but I'd like to confirm)</li>\n</ul>\n<p>[#4]: <a href=\"https://github.com/rust-lang/project-rfc-2229/issues/4\">https://github.com/rust-lang/project-rfc-2229/issues/4</a><br>\n[#7]: <a href=\"https://github.com/rust-lang/project-rfc-2229/issues/7\">https://github.com/rust-lang/project-rfc-2229/issues/7</a><br>\n[#9]: <a href=\"https://github.com/rust-lang/project-rfc-2229/issues/9\">https://github.com/rust-lang/project-rfc-2229/issues/9</a></p>",
        "id": 207570458,
        "sender_full_name": "Aman Arora",
        "timestamp": 1597955263
    },
    {
        "content": "<p>If this sounds reasonable, let me know and I'll update the proposal</p>",
        "id": 207571588,
        "sender_full_name": "Aman Arora",
        "timestamp": 1597955860
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> normally paths are printed <code>foo::Bar::&lt;T&gt;::baz::&lt;U&gt;</code></p>",
        "id": 207741777,
        "sender_full_name": "eddyb",
        "timestamp": 1598129696
    },
    {
        "content": "<p>the <code>[closure]</code> printing is <em>very weird</em> compared to the rest of the system</p>",
        "id": 207741786,
        "sender_full_name": "eddyb",
        "timestamp": 1598129718
    },
    {
        "content": "<p>try printing the type of something declared inside a closure. you will see what I mean</p>",
        "id": 207741789,
        "sender_full_name": "eddyb",
        "timestamp": 1598129731
    },
    {
        "content": "<p>I would expect <code>f::&lt;String&gt;::{closure @ src/main.rs:3:13: 3:33}</code> <em>maybe</em></p>",
        "id": 207741793,
        "sender_full_name": "eddyb",
        "timestamp": 1598129749
    },
    {
        "content": "<p>and IMO that should be the default?</p>",
        "id": 207741808,
        "sender_full_name": "eddyb",
        "timestamp": 1598129762
    },
    {
        "content": "<p>but I'm not sure how much file info to obscure. if it's in the same file as the parent then it feels silly to even print the file name</p>",
        "id": 207741840,
        "sender_full_name": "eddyb",
        "timestamp": 1598129786
    },
    {
        "content": "<p><code>f::&lt;String&gt;::{closure@3:13: 3:33}</code> is probably fine? not sure. harder to just \"click\" on (in editors with that support)</p>",
        "id": 207741847,
        "sender_full_name": "eddyb",
        "timestamp": 1598129814
    },
    {
        "content": "<p>but also type errors will effectively never contain anything other than generics</p>",
        "id": 207741856,
        "sender_full_name": "eddyb",
        "timestamp": 1598129846
    },
    {
        "content": "<blockquote>\n<p>I don't love the [closure@path:span] text but I would probably not want to change it now to minimize disruption</p>\n</blockquote>\n<p>From this, I feel like adding path will be for later</p>",
        "id": 207741858,
        "sender_full_name": "Aman Arora",
        "timestamp": 1598129855
    },
    {
        "content": "<p>and we can detect that the closure has fully generic parent generics</p>",
        "id": 207741859,
        "sender_full_name": "eddyb",
        "timestamp": 1598129856
    },
    {
        "content": "<p>so we can make a decision based on that, not just <code>-Zverbose</code></p>",
        "id": 207741871,
        "sender_full_name": "eddyb",
        "timestamp": 1598129877
    },
    {
        "content": "<p>maybe <code>-Zverbose</code> forces the format but otherwise it's based on <code>closure_substs.parent_substs() == Substs::identity_for(tcx, tcx.closure_base_def_id(closure_def_id))</code></p>",
        "id": 207741924,
        "sender_full_name": "eddyb",
        "timestamp": 1598129940
    },
    {
        "content": "<p>I just got back home, I'll give these a read in about half-one hour</p>",
        "id": 207741944,
        "sender_full_name": "Aman Arora",
        "timestamp": 1598129998
    },
    {
        "content": "<p>so that we always print all of the information when it's not entirely predictable</p>",
        "id": 207741989,
        "sender_full_name": "eddyb",
        "timestamp": 1598130020
    },
    {
        "content": "<p>Sorry I got occuppied with some stuff.</p>",
        "id": 207754243,
        "sender_full_name": "Aman Arora",
        "timestamp": 1598154086
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/Closure.20pretty.20print.20project-rfc-2229.2315/near/207741789\">said</a>:</p>\n<blockquote>\n<p>try printing the type of something declared inside a closure. you will see what I mean</p>\n</blockquote>\n<p>I wasn't able to replicate what you were going for here</p>",
        "id": 207754253,
        "sender_full_name": "Aman Arora",
        "timestamp": 1598154114
    },
    {
        "content": "<p>But I think I know what you want, something like output of <a href=\"https://doc.rust-lang.org/std/any/fn.type_name.html\">https://doc.rust-lang.org/std/any/fn.type_name.html</a></p>",
        "id": 207754296,
        "sender_full_name": "Aman Arora",
        "timestamp": 1598154156
    },
    {
        "content": "<p>So for the closure <code>cg</code> <del>https://repl.it/repls/BlaringPushyDeclaration#src/temp.rs</del> <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=b51f9755dae2b733ae8a8bce7a5398e5\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=b51f9755dae2b733ae8a8bce7a5398e5</a>,</p>\n<p>we get <code>main::temp::temp1::Test&lt;&amp;str&gt;::g&lt;i32&gt;::{{closure}}</code></p>",
        "id": 207754303,
        "sender_full_name": "Aman Arora",
        "timestamp": 1598154195
    },
    {
        "content": "<p>Catching up, but old relevant ticket about closure printing: <a href=\"https://github.com/rust-lang/rust/issues/19939\">https://github.com/rust-lang/rust/issues/19939</a></p>",
        "id": 208179733,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1598506641
    },
    {
        "content": "<p>looking</p>",
        "id": 208180061,
        "sender_full_name": "Aman Arora",
        "timestamp": 1598507116
    },
    {
        "content": "<p>If I understand correctly, all closures are unboxed now? </p>\n<p>What's interesting is that if I go put this line a piece of code that is more involved, I get a much cleaner output. Eg check <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=33a65b0995a38063e49fd01c630ac333\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=33a65b0995a38063e49fd01c630ac333</a></p>",
        "id": 208180342,
        "sender_full_name": "Aman Arora",
        "timestamp": 1598507453
    },
    {
        "content": "<p>Actually never mind, in my other test I copied the code sample as is from the issue and the error I was seeing was the comment in the issue and not something the compiler was outputting. <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>\n<p>I think the issue can be closed, the only improvement we can do is that we report both the error about param missing name and the fact that we were expecting unit type and got closure at the same time. Benefit of this would be that the user can go fix their code at once.</p>",
        "id": 208180482,
        "sender_full_name": "Aman Arora",
        "timestamp": 1598507650
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> just <code>|| { struct Foo; let () = Foo; }</code> should be enough, sorry I didn't give an example</p>",
        "id": 208331609,
        "sender_full_name": "eddyb",
        "timestamp": 1598614865
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=ce86ba032761dda95cb24afd1860c39f\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=ce86ba032761dda95cb24afd1860c39f</a></p>",
        "id": 208331649,
        "sender_full_name": "eddyb",
        "timestamp": 1598614895
    },
    {
        "content": "<p>that prints <code>main::{{closure}}#0::Foo</code></p>",
        "id": 208331920,
        "sender_full_name": "eddyb",
        "timestamp": 1598615062
    },
    {
        "content": "<p>I guess your example is better because it observes the case when there's generics of the parent being applied)</p>",
        "id": 208332036,
        "sender_full_name": "eddyb",
        "timestamp": 1598615140
    },
    {
        "content": "<p>although <code>type_name</code> uses a special printer which avoids most of the \"fancy\" printing codepaths</p>",
        "id": 208332648,
        "sender_full_name": "eddyb",
        "timestamp": 1598615540
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <br>\nSorry I got occupied a little last couple of days. I get what you mean now. </p>\n<p>From what I understand is, printing the path to the closure when printing a type defined within it, is already implemented, which can then be reused here.</p>\n<p>Also curious if we will even print type of the closure not near it, mostly wondering other than needing to print generics nicely do we need actually print the path? </p>\n<hr>\n<p>Regarding <a href=\"https://github.com/rust-lang/rust/issues/70334#issuecomment-682483007\">https://github.com/rust-lang/rust/issues/70334#issuecomment-682483007</a>, If I understand correctly, it feels like most of this will be in a different part of the codebase. </p>\n<p>Also, the main goal of changing how closure print as part of 2229 is to make sure that we have tests passing when we change the capture tuple to be an inference variable and also to making sure the information is correct once we start capturing paths to member fields.</p>",
        "id": 208526298,
        "sender_full_name": "Aman Arora",
        "timestamp": 1598857963
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/Closure.20pretty.20print.20project-rfc-2229.2315/near/208332648\">said</a>:</p>\n<blockquote>\n<p>although <code>type_name</code> uses a special printer which avoids most of the \"fancy\" printing codepaths</p>\n</blockquote>\n<p>What do you mean by _fancy_ here?</p>",
        "id": 208777282,
        "sender_full_name": "Aman Arora",
        "timestamp": 1599019404
    },
    {
        "content": "<p>Davidtwco suggested that we use a different flag than verbose to do verbose printing for closures<br>\n<a href=\"https://github.com/rust-lang/rust/pull/77069#discussion_r493458704\">https://github.com/rust-lang/rust/pull/77069#discussion_r493458704</a></p>\n<p>I'm fine either way, what are your thoughts <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 211507871,
        "sender_full_name": "Aman Arora",
        "timestamp": 1601306853
    }
]