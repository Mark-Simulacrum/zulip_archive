[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> -- are you all planning on getting started here? I'm wondering if we should try to find a time to sync up, perhaps with <span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span>,  and discuss what is required. I didn't find time to write out instructions, but I did find time to at least <em>start</em> reading into the work required :)</p>",
        "id": 196231736,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588621972
    },
    {
        "content": "<p>We all just got done with our internships and our catching up on learning Rust. We'd like to get some plan ready soon, so that we can schedule other school work around it.</p>",
        "id": 196249213,
        "sender_full_name": "Aman Arora",
        "timestamp": 1588632391
    },
    {
        "content": "<p>OK, so, there is a certain amount of \"Background reading\" or watching that might make sense --</p>",
        "id": 196290549,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588674620
    },
    {
        "content": "<p>I remember <span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> and I recorded some videos --</p>",
        "id": 196290558,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588674632
    },
    {
        "content": "<p>but I guess they are likely out of date</p>",
        "id": 196290563,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588674636
    },
    {
        "content": "<p>I wonder if, to get started, we ought to try and schedule a \"walk through\" session</p>",
        "id": 196290571,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588674649
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> where are you all located? what time zone, in particular? are you comfortable with spoken English or do you prefer written?</p>",
        "id": 196290593,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588674670
    },
    {
        "content": "<p>I was thinking I will try to prepare a compiler team major change proposal here later today</p>",
        "id": 196324642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588692791
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/starting.20up.20work.20again/near/196290558\" title=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/starting.20up.20work.20again/near/196290558\">said</a>:</p>\n<blockquote>\n<p>I remember <span class=\"user-mention silent\" data-user-id=\"128294\">blitzerr</span> and I recorded some videos --</p>\n</blockquote>\n<p>I can try to find those <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 196325575,
        "sender_full_name": "blitzerr",
        "timestamp": 1588693198
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/starting.20up.20work.20again/near/196324642\" title=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/starting.20up.20work.20again/near/196324642\">said</a>:</p>\n<blockquote>\n<p>I was thinking I will try to prepare a compiler team major change proposal here later today</p>\n</blockquote>\n<p>Awesome !!</p>",
        "id": 196325642,
        "sender_full_name": "blitzerr",
        "timestamp": 1588693215
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  We are in Canada, Eastern Timzone (UTCâˆ’04:00). I'm conformable with both written and spoken English.  <span class=\"user-mention\" data-user-id=\"281952\">@Chris Pardy</span>  is one of my teammates and might be able to join in as well.</p>",
        "id": 196339336,
        "sender_full_name": "Aman Arora",
        "timestamp": 1588699605
    },
    {
        "content": "<p>I was thinking that it'd be kind of nice if we can get some other \"semi-experienced\" compiler person in here</p>",
        "id": 196339391,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588699634
    },
    {
        "content": "<p>like, I'd be happy to work out the plan, but my availability is often low,</p>",
        "id": 196339418,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588699646
    },
    {
        "content": "<p>so I'm thinking about trying to draft someone to help answer questions that arise and surface the harder ones to me</p>",
        "id": 196339437,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588699660
    },
    {
        "content": "<p>That's fair, we'd appreciate all the help we can get.  Thank you :)</p>",
        "id": 196339555,
        "sender_full_name": "Aman Arora",
        "timestamp": 1588699705
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/starting.20up.20work.20again/near/196290558\" title=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/starting.20up.20work.20again/near/196290558\">said</a>:</p>\n<blockquote>\n<p>I remember <span class=\"user-mention silent\" data-user-id=\"128294\">blitzerr</span> and I recorded some videos --</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  They can be found <a href=\"https://www.youtube.com/playlist?list=PL85XCvVPmGQh__bxYIxaVifbIOajnrNcQ&amp;disable_polymer=true\" title=\"https://www.youtube.com/playlist?list=PL85XCvVPmGQh__bxYIxaVifbIOajnrNcQ&amp;disable_polymer=true\">here</a></p>",
        "id": 196340397,
        "sender_full_name": "blitzerr",
        "timestamp": 1588700150
    },
    {
        "content": "<p>So let's shoot to have some synchronous discussion on this next week</p>",
        "id": 196689582,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588795547
    },
    {
        "content": "<p>But I think I\"m definitely going to need a bit of a \"co-lead\"  here -- someone to keep track of what's going on, etc</p>",
        "id": 196689703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588795582
    },
    {
        "content": "<p>I'm not sure who would be best suited for it :)</p>",
        "id": 196689714,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588795587
    },
    {
        "content": "<p>I'm going to reach out a bit about that</p>",
        "id": 196689784,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588795618
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> <span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> <span class=\"user-mention\" data-user-id=\"281952\">@Chris Pardy</span> here is a <a href=\"https://doodle.com/poll/cyxmz746z5xq2b8x\" title=\"https://doodle.com/poll/cyxmz746z5xq2b8x\">doodle poll</a> with possible times to meet next week. Those all more-or-less work for me. It'd be good to get a sense for which ones work for you. (Just for a one-off meeting to get synchronized initially.)</p>",
        "id": 196690325,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588795873
    },
    {
        "content": "<p>Also, I started working out a <a href=\"https://hackmd.io/HNEgTkPlTuy6cb9v29rzIQ\" title=\"https://hackmd.io/HNEgTkPlTuy6cb9v29rzIQ\">plan</a>, which you can read here</p>",
        "id": 196700269,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588800541
    },
    {
        "content": "<p>I'll try to dress it up a bit and move it to an MCP, I need to look a bit further down the line to think about the steps after these refactorings, didn't quite get that far</p>",
        "id": 196700327,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588800574
    },
    {
        "content": "<p>I'd lke to do that and then maybe try to tempt some people to co-lead the effort</p>",
        "id": 196700345,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588800583
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span>, <span class=\"user-mention\" data-user-id=\"281952\">@Chris Pardy</span> I also want to raise two questions</p>\n<ul>\n<li>what is your experience level with compilers, Rust, and/or rustc?</li>\n<li>if we decide that this effort is not going to work out, are you interested in alternative projects? Or does it have to be this change :)</li>\n</ul>\n<p>To be clear, I really want this change to go through, but I also don't want to \"resurrect\" it only to have it stall out again, so I want to be sure we have the bandwidth to support you folks.</p>",
        "id": 196700507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588800637
    },
    {
        "content": "<p>We are still beginners in Rust, we have fair amount of experience with C++ and memory management from school and for some of us from internships as well. </p>\n<p>All of us have taken a course on Operating System and a beginners one on Compilers. Some of us have taken course on type theory as well. </p>\n<p>I just finished an internship on MSVC, I was working with type information. </p>\n<p>We haven't looked through rustc codebase yet, but our plan was to do some E-easy/E-mentor labelled issues on Github.</p>\n<p>We had previously talked to centril and discussed couple different projects with out team and this one (2229) won unanimously. That said we are open to similar ideas and I can discuss interest and feasibility with our team</p>",
        "id": 196704725,
        "sender_full_name": "Aman Arora",
        "timestamp": 1588802941
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> ok -- in the plan I wrote-up, the first issues are actually quite easy as well, as i inclinded some links to the rustc-dev-guide to help explain some of the underlying concepts.</p>",
        "id": 196708334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588805694
    },
    {
        "content": "<p>OK, I forgot to make a decision here!</p>",
        "id": 196910795,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588952120
    },
    {
        "content": "<p><a href=\"https://calendar.google.com/event?action=TEMPLATE&amp;tmeid=MDZvbGpjbzRvZW5iNmZ1aGZhcTAzMjRkb2ggNnU1cnJ0Y2U2bHJ0djA3cGZpM2RhbWdqdXNAZw&amp;tmsrc=6u5rrtce6lrtv07pfi3damgjus%40group.calendar.google.com\" title=\"https://calendar.google.com/event?action=TEMPLATE&amp;tmeid=MDZvbGpjbzRvZW5iNmZ1aGZhcTAzMjRkb2ggNnU1cnJ0Y2U2bHJ0djA3cGZpM2RhbWdqdXNAZw&amp;tmsrc=6u5rrtce6lrtv07pfi3damgjus%40group.calendar.google.com\">Calendar event created</a> -- meeting time is Tuesday May 12 at 15:00 US Eastern time. There is a Zoom URL attached, since I think it'd be useful to start with Zoom (maybe?)</p>",
        "id": 196911244,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588952289
    },
    {
        "content": "<p>I can add folks to the event if you send me your e-mails (privmsg is fine..)</p>",
        "id": 196911373,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588952357
    },
    {
        "content": "<p>(Er, no, I grabbed them from Zulip)</p>",
        "id": 196911528,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588952412
    },
    {
        "content": "<p>I just issued a Major Change Proposal: <a href=\"https://github.com/rust-lang/compiler-team/issues/292\" title=\"https://github.com/rust-lang/compiler-team/issues/292\">https://github.com/rust-lang/compiler-team/issues/292</a></p>",
        "id": 196945664,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588969162
    },
    {
        "content": "<p>I also thought more about the overall plan and tried to sketch out more details in the hackmd</p>",
        "id": 196945690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588969173
    },
    {
        "content": "<p>you might want to follow along with <a class=\"stream-topic\" data-stream-id=\"233931\" href=\"/#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/RFC.202229.20implementation.20plan.20compiler-team.23292\">#t-compiler/major changes &gt; RFC 2229 implementation plan compiler-team#292</a></p>",
        "id": 196945712,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588969192
    },
    {
        "content": "<p>Thank you, will go through the discussion there</p>",
        "id": 196945864,
        "sender_full_name": "Aman Arora",
        "timestamp": 1588969263
    },
    {
        "content": "<p>Thanks a lot <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 196962368,
        "sender_full_name": "blitzerr",
        "timestamp": 1588981316
    },
    {
        "content": "<p>Hey all -- so the call is coming up soon</p>",
        "id": 197321765,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589309789
    },
    {
        "content": "<p>I may be a minute or two late</p>",
        "id": 197321780,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589309796
    },
    {
        "content": "<p>No worries</p>",
        "id": 197322020,
        "sender_full_name": "blitzerr",
        "timestamp": 1589309892
    },
    {
        "content": "<p>the hackmd doc I've been editing btw : <a href=\"https://hackmd.io/5N94DPFWQwCbjfYPMXFyGA\">https://hackmd.io/5N94DPFWQwCbjfYPMXFyGA</a></p>",
        "id": 197330240,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589313605
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ,  can you upload the video from out Zoom meeting? It will be great to go over with our team over the weekend</p>",
        "id": 197615225,
        "sender_full_name": "Aman Arora",
        "timestamp": 1589488993
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> yep!</p>",
        "id": 197621988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589492489
    },
    {
        "content": "<p>thank you</p>",
        "id": 197622192,
        "sender_full_name": "Aman Arora",
        "timestamp": 1589492618
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> it is uploading and processing but <a href=\"https://youtu.be/41pnkSS6MzY\">will be available here</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"41pnkSS6MzY\" href=\"https://youtu.be/41pnkSS6MzY\"><img src=\"https://i.ytimg.com/vi/41pnkSS6MzY/default.jpg\"></a></div>",
        "id": 197622304,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589492657
    },
    {
        "content": "<p>awesome</p>",
        "id": 197622323,
        "sender_full_name": "Aman Arora",
        "timestamp": 1589492672
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> indicated they'd like to follow along</p>",
        "id": 197695989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589551649
    },
    {
        "content": "<p>btw, <a href=\"https://github.com/rust-lang/rustc-dev-guide/issues/704\">https://github.com/rust-lang/rustc-dev-guide/issues/704</a></p>",
        "id": 197706322,
        "sender_full_name": "mark-i-m",
        "timestamp": 1589555540
    },
    {
        "content": "<p>Thanks a lot <span class=\"user-mention\" data-user-id=\"198054\">@mark-i-m</span></p>",
        "id": 197708916,
        "sender_full_name": "blitzerr",
        "timestamp": 1589556560
    },
    {
        "content": "<p>Hey <span class=\"user-group-mention\" data-user-group-id=\"1175\">@WG-rfc-2229</span> -- i've updated this user group to include <span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span>, <span class=\"user-mention\" data-user-id=\"281952\">@Chris Pardy</span>, and <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span></p>",
        "id": 197967495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589822615
    },
    {
        "content": "<p>It already included <span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> and .. somebody else whose name I already forgot, sorry .. if y'all are interested, great! If not, maybe you want to remove yourselves.</p>",
        "id": 197967614,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589822654
    },
    {
        "content": "<p>I'm going to update the team repository as well</p>",
        "id": 197967621,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589822659
    },
    {
        "content": "<p>But I wanted to discuss a bit how to organize ourselves</p>",
        "id": 197967635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589822665
    },
    {
        "content": "<p>Should we setup a sync time? <span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> et al. are you planning to get started on some PRs?</p>",
        "id": 197967655,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589822676
    },
    {
        "content": "<p>To update the team repository, I will need github usernames for everyone who wants to be listed as part of the group</p>",
        "id": 197967702,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589822699
    },
    {
        "content": "<p>Hi my github's <code>arora-aman</code> and <span class=\"user-mention\" data-user-id=\"281952\">@Chris Pardy</span>  's is <code>ChrisPardy</code>.  We'll try get back to you next week about a plan/schedule</p>",
        "id": 197985310,
        "sender_full_name": "Aman Arora",
        "timestamp": 1589830609
    },
    {
        "content": "<p>Status update: We are trying to get most of the initial refactor work PRs out by the next week. We can sync once we are ready to begin work on refactoring upvars to capture HIR Places.</p>",
        "id": 198714867,
        "sender_full_name": "Aman Arora",
        "timestamp": 1590459300
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> great! I just saw <a href=\"https://github.com/sexxi-goose/rust/pull/3\">https://github.com/sexxi-goose/rust/pull/3</a> but I'm not sure if you were looking for feedback from me there</p>",
        "id": 198762701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590500387
    },
    {
        "content": "<p>There's <a href=\"https://github.com/rust-lang/rust/issues/72591\">#72591</a></p>",
        "id": 198765027,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1590501385
    },
    {
        "content": "<p>ah, excellent</p>",
        "id": 198765661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590501676
    },
    {
        "content": "<p>The prs on our fork are for us to review amongst ourselves before we open a PR on rust-lang</p>",
        "id": 198772454,
        "sender_full_name": "Aman Arora",
        "timestamp": 1590504462
    },
    {
        "content": "<p>Just to check that I'm understanding things correctly, If we store HIR Place in the upvars query and we just use <code>hir_id</code> from Place  in the capture list , we'll end up with what we have today? </p>\n<p>HIR place: <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_typeck/expr_use_visitor/struct.Place.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_typeck/expr_use_visitor/struct.Place.html</a></p>\n<p>However to get the minimal capture from this, if we have Place a, Place b in my upvars, with projections P_a_0 ... P_a_n and P_b_0 .... P_b_m, then if for some i &gt; 0 (P_a_i, ..., P_a_n) == (P_b_0, ..., P_b_m) then we select b, else we keep both? (for n &gt; m)</p>",
        "id": 198854080,
        "sender_full_name": "Aman Arora",
        "timestamp": 1590561238
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 198854718,
        "sender_full_name": "Aman Arora",
        "timestamp": 1590561920
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> I don't quite understand the question</p>",
        "id": 198902266,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590590985
    },
    {
        "content": "<p>The first one is to understand how HIR Place and HIR id work. <br>\nFor 2229 going forward we want to use HIR Place instead of id to list mentioned upvars and paths captured by the closure.  <br>\nIf I understand how the relation between Place and id work then, if instead of using HIR place for captured paths, instead I use a set of Hir ids which I get from Place::hir_id, the implementation will be same as the current non-2229 rustc? </p>\n<p>Second one is to understand how projections work and if are some corner cases/subtle things about them. </p>\n<p>So based on the HIR Place doc a.b.c will have [a.b.c, a.b] as the set of projections? </p>\n<p>If that is the case then to do a minimal captured Places (capturing a.b when closure mentions a.b.c and a.b) as part of 2229,  can we look at the list of projections to make the decision?</p>",
        "id": 198918814,
        "sender_full_name": "Aman Arora",
        "timestamp": 1590597820
    },
    {
        "content": "<p>Oh, hmm, I hadn't actually noticed that a HIR Place has a <code>hir_id</code></p>",
        "id": 198920387,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590598545
    },
    {
        "content": "<p>I think that's a slight problem</p>",
        "id": 198920394,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590598549
    },
    {
        "content": "<p>I wonder if we could refactor it out</p>",
        "id": 198920460,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590598565
    },
    {
        "content": "<p>We have to make some changes to HIR place anyway</p>",
        "id": 198920490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590598578
    },
    {
        "content": "<p>So, to back up</p>",
        "id": 198920503,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590598582
    },
    {
        "content": "<p>I believe the old table directly stored a <code>HirId</code>-- actually I'd have to dobule check -- but in any case that id was the id <strong>of the local variable</strong> that was captured</p>",
        "id": 198920581,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590598617
    },
    {
        "content": "<p>this id is also present in a HIR place, but not in the <code>hir_id</code> field</p>",
        "id": 198920606,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590598630
    },
    {
        "content": "<p>if you look at the <code>base</code> field (of type <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_typeck/expr_use_visitor/enum.PlaceBase.html\"><code>PlaceBase</code></a>) you will see that it has a variant <code>Local(HirId)</code></p>",
        "id": 198920638,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590598651
    },
    {
        "content": "<p>this would be the hir-id of the variable</p>",
        "id": 198920659,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590598658
    },
    {
        "content": "<p>in contrast, the <code>hir_id</code> field on a <code>Place</code> is, I believe, the id of some <em>use</em> of the variable</p>",
        "id": 198920690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590598674
    },
    {
        "content": "<p>the difference is roughly</p>",
        "id": 198920706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590598679
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">22</span><span class=\"p\">;</span><span class=\"w\">  </span><span class=\"c1\">// the `x` here `HirId` N, let&#39;s say</span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// this might have `HirId` N1</span>\n</code></pre></div>",
        "id": 198920810,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590598713
    },
    {
        "content": "<p>we would construct a <code>Place</code> for the <code>x</code> in <code>use(x)</code>, but the <code>hir_id</code> would be N1</p>",
        "id": 198920848,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590598732
    },
    {
        "content": "<p>whereas the <code>HirId</code> stored in the <code>base</code> field would be <code>N</code> (and that's the one we want)</p>",
        "id": 198920880,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590598746
    },
    {
        "content": "<p>the reason I was not happy to see that <code>Place</code> has a <code>hir_id</code> is because it therefore refers to <em>some specific reference to the place</em> versus <em>the place itself</em></p>",
        "id": 198920930,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590598771
    },
    {
        "content": "<p>in other words, we want to capture <code>x</code> (or <code>*x</code>, or whatever)</p>",
        "id": 198920943,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590598781
    },
    {
        "content": "<p>but we don't want to necessarily tie that to some expression in the code</p>",
        "id": 198920964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590598793
    },
    {
        "content": "<p>With the current setup, if you have <code>|| use(x.foo, x.foo)</code>, then the <code>Place</code> for <code>x.foo</code> would be different depending on which <code>x.foo</code> it was (each has a distinct id in the tree)</p>",
        "id": 198921090,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590598831
    },
    {
        "content": "<p>but we just want to refer to the \"concept\" of <code>x.foo</code>, distinct from any particular expression that it derived from</p>",
        "id": 198921120,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590598845
    },
    {
        "content": "<p>anyway we can fix this, not a big thing</p>",
        "id": 198921142,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590598859
    },
    {
        "content": "<p>How do the projections in Place help with this</p>",
        "id": 198921150,
        "sender_full_name": "Aman Arora",
        "timestamp": 1590598861
    },
    {
        "content": "<p>(but it might be a step we need to take)</p>",
        "id": 198921168,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590598866
    },
    {
        "content": "<p>I have to run, have a meeting, more later, but the projections express the <code>.foo</code> part</p>",
        "id": 198921188,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590598876
    },
    {
        "content": "<p>the \"base\" captures the start of the expression (<code>x</code>), the projections the things we add on</p>",
        "id": 198921217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590598886
    },
    {
        "content": "<p>Can we not just rely on base + projections to get the path?</p>",
        "id": 198921232,
        "sender_full_name": "Aman Arora",
        "timestamp": 1590598895
    },
    {
        "content": "<p>Though I think we need to update the typechk categorization code to generate projetions for upvars <a href=\"https://github.com/sexxi-goose/rust/blob/master/src/librustc_typeck/mem_categorization.rs#L486\">https://github.com/sexxi-goose/rust/blob/master/src/librustc_typeck/mem_categorization.rs#L486</a></p>",
        "id": 198921402,
        "sender_full_name": "Aman Arora",
        "timestamp": 1590598952
    },
    {
        "content": "<p>That will be done by <code>cat_projection</code>/<code>cat_pattern</code> if needed.</p>",
        "id": 198922264,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1590599302
    },
    {
        "content": "<p>Okay yeah that's what I was thinking, though might have to make sure we don't do such computation twice.  Because currently at some point later we are probably computing how to read the  path to the actual member</p>",
        "id": 198922468,
        "sender_full_name": "Aman Arora",
        "timestamp": 1590599413
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Did you mean using PlaceBase::Upvar and then access the UpvarPath?  Also should we be using Projections for minimal capture or is there a better way? As far as I can see projections are only being used for linting</p>",
        "id": 199050909,
        "sender_full_name": "Aman Arora",
        "timestamp": 1590685743
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> Presently projections are not used for much in that structure, but this will change (and indeed the projection structure will have to be fleshed out, as it's currently rather imprecise)</p>",
        "id": 199077542,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590696058
    },
    {
        "content": "<p>Whether we use <code>PlaceBase::Upvar</code> ... well ... <em>probably</em> yes but that's an interesting question</p>",
        "id": 199077657,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590696088
    },
    {
        "content": "<p>I guess mostly a terminology question</p>",
        "id": 199077680,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590696096
    },
    {
        "content": "<p>I guess I would propose \"capture\" be the term for \"some field of the closure\" (which references some path/\"place expression\" in the creator)</p>",
        "id": 199077831,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590696128
    },
    {
        "content": "<p>and in that case \"upvar\" maybe yes refers explicitly to the root variable that is the start of those paths...</p>",
        "id": 199077899,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590696153
    },
    {
        "content": "<p>Just to confirm: <br>\n1) Going forward we have two terminology -- Upvar (these are what are mentioned in the closure) and Captures that be the Paths and places that will be captured. <br>\n2) <code>HirId</code> we get from upvars_mentioned refers to accessing the exact member. <br>\n3)  typechk/check/upvars works with expr_use_visitor and mem_categorization to create Places and then uses the HirId associated with the place to keep to track of captures.<br>\n4) Currently, PlaceBase::Local are the local variables and arguments to the closure and PlaceBase::Upvar are the captured variables?</p>\n<p>If 2 and 3 are correct then, (from <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/expr_use_visitor.rs#L542\">https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/expr_use_visitor.rs#L542</a>)</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">upvars</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">().</span><span class=\"n\">upvars_mentioned</span><span class=\"p\">(</span><span class=\"n\">closure_def_id</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">var_id</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">upvars</span><span class=\"p\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">upvar_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span>::<span class=\"n\">UpvarId</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">var_path</span>: <span class=\"nc\">ty</span>::<span class=\"n\">UpvarPath</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">hir_id</span>: <span class=\"nc\">var_id</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">closure_expr_id</span>: <span class=\"nc\">closure_def_id</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>Doesn't this actually give us the path to the member variable? </p>\n<p>Also do you have any thoughts how HIR Place should be modified to <br>\n1) Handle the hir_id differences? Are we just going to remove the field? <br>\n2) Improve projections<br>\n3) For naming convention do we add PlaceBase::Captured of just do a rename PlaceBase::Upvar -&gt; PlaceBase::Captured</p>",
        "id": 199105600,
        "sender_full_name": "Aman Arora",
        "timestamp": 1590716696
    },
    {
        "content": "<p>1) yes.<br>\n2) The HirId in <code>upvars_mentioned</code> refers to the local declaration (<code>hir::PatKind::Binding</code>), not the exact path.<br>\n3) <code>upvars</code> probably won't use that <code>HirId</code>, except possibly for diagnostic information. It will primarily use the base and projections of the place.<br>\n4) Yes</p>\n<p>1) The field is used by <br>\n2) Yes<br>\n3) No, we keep <code>PlaceBase::Upvar</code>, this is the code that's determining what the captures are</p>",
        "id": 199121426,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1590737134
    },
    {
        "content": "<p>I think that to refactor <code>hir::Place</code>...</p>",
        "id": 199132567,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590744745
    },
    {
        "content": "<p>well, let's move that to its own topic</p>",
        "id": 199132573,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590744753
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span>  can you give an example for how the local declaration (<code>hir::PatKind::Binding</code>) would look like?</p>",
        "id": 199188198,
        "sender_full_name": "Aman Arora",
        "timestamp": 1590774626
    },
    {
        "content": "<p>To give an example of everything:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">my_var</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">456</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"n\">my_var</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p><code>my_var</code> in the <code>let</code> binding would be represented as</p>\n<div class=\"codehilite\"><pre><span></span><code>hir::Pat {\n    hir_id: /* some Id */,\n    span: /* span of my_var in the binding */,\n    kind: PatKind::Binding(\n       BindingAnnotation::Unannotated,\n       /* the same HirId (this is only different in or-patterns) */,\n       &quot;my_var&quot;,\n        None,\n    )\n}\n</code></pre></div>\n\n\n<p>In the closure the <code>ExprUseVisitor</code> would call <code>cosume(place, ConsumeMode::Copy)</code> on it's delegate and <code>place</code> would be:</p>\n<div class=\"codehilite\"><pre><span></span><code>Place {\n    hir_id: /* HirId of the expression `my_var.0` within the closure */,\n    span: /* Span of `my_var.0` within the closure */,\n    ty: &quot;i32&quot;,\n    base: PlaceBase::Upvar(UpvarId { UpvarPath { hir_id: /* HirId described above * }, closure_expr_id: /* LocalDefId of the closure */ }),\n    projections: [Projection::Other]. // This will become something like `Projection::Field(0)`.\n}\n</code></pre></div>",
        "id": 199190813,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1590775729
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 199198241,
        "sender_full_name": "Aman Arora",
        "timestamp": 1590779300
    },
    {
        "content": "<p>So we were working on using <code>closure_captures</code> instead of <code>upvars_mentioned</code>, once the type chk part is done. Green lit places here -&gt; <a href=\"https://hackmd.io/HNEgTkPlTuy6cb9v29rzIQ\">https://hackmd.io/HNEgTkPlTuy6cb9v29rzIQ</a> </p>\n<p>We noticed that <code>upvars_mentioned</code> returns an Option&lt;IndexMap&gt; where as ClosureCapture returns the map directly. It doens't really cause a problem becuase the captures map an just be empty. </p>\n<p>Just curious about the differences -- Is the reason behind this because the query returning an Option related to lazy eval?</p>",
        "id": 199705491,
        "sender_full_name": "Aman Arora",
        "timestamp": 1591246806
    },
    {
        "content": "<p>I'm not sure why it returns an <code>Option</code> actually</p>",
        "id": 199736305,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591272212
    },
    {
        "content": "<p>oh it's an <code>Option&lt;&amp;IndexMap&gt;</code> -- the reason then is because returning <code>None</code> avoids allocating any memory from the arena for an empty index map</p>",
        "id": 199736529,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591272331
    },
    {
        "content": "<p>if the query returned <code>Option&lt;IndexMap&gt;</code> then there would be no real advantage to the <code>Option</code></p>",
        "id": 199736550,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591272353
    },
    {
        "content": "<p>I'm curious as to how borrowing works for member fields outside of closures? I understand that closures itself represent information for more than itself (variable/paramater that is a closure) and hence is complicated. </p>\n<p>From the surface it feels like we are adding a bunch of analysis (eg Field), that is already happening outside the context of closures.</p>",
        "id": 201345866,
        "sender_full_name": "Aman Arora",
        "timestamp": 1592532364
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> hmm i'm not sure if I understand the question exactly</p>",
        "id": 201392732,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592574815
    },
    {
        "content": "<p>one of the interesting things here is that</p>",
        "id": 201392855,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592574866
    },
    {
        "content": "<p>if by \"how borrowing works\" you are referring to the \"borrow check\", i.e., the part of the compiler that determines when borrows are legal</p>",
        "id": 201392895,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592574884
    },
    {
        "content": "<p>we shouldn't have to make any changes there at all, except perhaps for error reporting</p>",
        "id": 201392905,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592574893
    },
    {
        "content": "<p>instead we will change how the closure itself is <em>desugared</em> -- i.e., what MIR we construct</p>",
        "id": 201392933,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592574912
    },
    {
        "content": "<p>I'm curious as to how we deal with member fields outside the context of closures? Why did we not need ProjectionKind::Field or something equivalent before this RFC in HIR ?</p>",
        "id": 201427510,
        "sender_full_name": "Aman Arora",
        "timestamp": 1592592623
    },
    {
        "content": "<p>Borrow checking works on MIR and <code>ProjectionElem</code> has a variant for fields.</p>",
        "id": 201430051,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592594246
    },
    {
        "content": "<p>Why are we making Projections more precise? Is it to support only capturing a.b when a.b.c and a.b both were mentioned?</p>",
        "id": 201431126,
        "sender_full_name": "Aman Arora",
        "timestamp": 1592594928
    },
    {
        "content": "<p>They need to be able to express the places that we can capture, period</p>",
        "id": 201488077,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592674124
    },
    {
        "content": "<p>right now, they only carry as much information as they had to in order to figure out which <strong>local variables</strong> needed to be captured</p>",
        "id": 201488086,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592674146
    },
    {
        "content": "<p>they can't express e.g. <code>a.b.c</code> (iirc)</p>",
        "id": 201488090,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592674155
    },
    {
        "content": "<p>I understand that bit, but how do we express those Places(a.b.c) outside of the context of closure today in hir?</p>",
        "id": 201489780,
        "sender_full_name": "Aman Arora",
        "timestamp": 1592676610
    },
    {
        "content": "<p>eg:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\">  </span><span class=\"n\">Point</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"mi\">40</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// Error here</span>\n\n<span class=\"o\">*</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 201489919,
        "sender_full_name": "Aman Arora",
        "timestamp": 1592676808
    },
    {
        "content": "<p>How do we express <code>p.x</code> in HIR here?</p>",
        "id": 201489933,
        "sender_full_name": "Aman Arora",
        "timestamp": 1592676828
    },
    {
        "content": "<p>Do we not need to be precise here, because:</p>\n<ul>\n<li>Place in MIR will be built from the hir::Expr directly and</li>\n<li>m here(in the example abovce) just holds information about p.x and we can just use the expr in MIR, whereas if it were something </li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// Error here</span>\n\n<span class=\"n\">m</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>Then m can store info about multiple different captured variables and we need to be smarter than just store the hir::Expr?</p>",
        "id": 201490262,
        "sender_full_name": "Aman Arora",
        "timestamp": 1592677222
    },
    {
        "content": "<p>and by smarter I mean use hir::Place</p>",
        "id": 201499872,
        "sender_full_name": "Aman Arora",
        "timestamp": 1592690358
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281950\">Aman Arora</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/starting.20up.20work.20again/near/201489780\">said</a>:</p>\n<blockquote>\n<p>I understand that bit, but how do we express those Places(a.b.c) outside of the context of closure today in hir?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> Ah. So. Those things are HIR <strong>expressions</strong> -- and certainly they can express anything that Rust can express. <em>However,</em> as an expression, they are very connected to \"what the user wrote in a particular place\", and don't capture the more \"abstract concept\" that a HIR place does. We don't presently have a way to describe \"some place\" in HIR, only in MIR, in part because we've never needed it in HIR before (well, this is not quite true, we <em>used</em> to have a data structure that served that role, but it was removed when we introduced the MIR-based borrow checker because it was no longer needed; and anyway it was clunky)</p>",
        "id": 201616575,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592838019
    },
    {
        "content": "<p>Among other things, HIR expressions are not canonicalized, so something like <code>a.b</code> may have auto-derefs etc that make it equivalent to the place <code>(*a).b</code> but that is not captured in HIR (the HIR is constructed before we know about those auto-derefs; we use it to <em>figure out</em> where auto-derefs are needed). The HIR also doesn't have type information or other stuff like that -- e.g., it stores a field name, but not the field's <code>DefId</code>. We use the HIR to figure out all that sort of thing as well.</p>",
        "id": 201616887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592838143
    },
    {
        "content": "<p>We store \"extra information\" about the HIR (what we figured out, basically) in side-tables found in the <code>TypeckTables</code> and indexed by the <code>HirId</code></p>",
        "id": 201616917,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592838162
    },
    {
        "content": "<p>But the idea of the HIR place data structure is basically to represent the \"output\" of that analysis and to capture the \"abstract notion\" of a place expression</p>",
        "id": 201616953,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592838180
    },
    {
        "content": "<p>Does that help, <span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> ?</p>",
        "id": 201616961,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592838185
    },
    {
        "content": "<p>I guess to answer your more direct question:</p>\n<blockquote>\n<p>Do we not need to be precise here, because:</p>\n<ul>\n<li>Place in MIR will be built from the hir::Expr directly and</li>\n</ul>\n</blockquote>\n<p>Yes</p>\n<blockquote>\n<ul>\n<li>m here(in the example abovce) just holds information about p.x </li>\n</ul>\n</blockquote>\n<p>I'm not sure what this means but <code>m</code> is a variable of type <code>&amp;mut i32</code> or something like that. The compiler doesn't know of any particular relationship between it and <code>p.x</code> -- of course, during borrow check, we do compute and understand something about this relationship, but at the stages of compilation we are talking about here, we don't (and we don't need to).</p>\n<blockquote>\n<p>and we can just use the expr in MIR, whereas if it were something </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// Error here</span>\n\n<span class=\"n\">m</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>Then m can store info about multiple different captured variables and we need to be smarter than just store the hir::Expr?</p>\n</blockquote>\n<p>In this case, <code>m</code> would be a closure variable. The \"MIR\" you get from that particular bit of code looks something like (i.e., this is how the MIR would think of it):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ClosureStruct22</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">p</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>In particular, the body of the closure is nowhere to be seen, and the <code>|| ...</code> expression just constructs a data structure that looks much like a struct.</p>",
        "id": 201617761,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592838541
    },
    {
        "content": "<p>What we will change is that the MIR would look more like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ClosureStruct22</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">px</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 201617849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592838600
    },
    {
        "content": "<p>That helps a lot, thank you :)</p>",
        "id": 201624628,
        "sender_full_name": "Aman Arora",
        "timestamp": 1592841550
    },
    {
        "content": "<blockquote>\n<p>The HIR also doesn't have type information or other stuff like that -- e.g., it stores a field name, but not the field's DefId. We use the HIR to figure out all that sort of thing as well.</p>\n</blockquote>\n<p>Do we ever compute information related to fields that are in the middle? So for <code>a.b.c</code> do we compute what  type of <code>a.b</code> is, in typeck?</p>\n<p>Asking that because it might be good to document for <a href=\"https://github.com/rust-lang/project-rfc-2229/issues/5\">#5</a>, if just need to rewire the interfaces so that we store the type information in the projections, or if need to compute that information?</p>",
        "id": 201644053,
        "sender_full_name": "Aman Arora",
        "timestamp": 1592850966
    },
    {
        "content": "<p>we do compute that, and it is stored in those typeck tables</p>",
        "id": 201644156,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592851032
    },
    {
        "content": "<p>you'll find that the code is already passing it around</p>",
        "id": 201644192,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592851049
    },
    {
        "content": "<p>it's just that it gets discarded right now</p>",
        "id": 201644199,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592851054
    },
    {
        "content": "<p>that is, right now, the only place the \"type\" is stored is in the <code>Place</code> data structure</p>",
        "id": 201644213,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592851064
    },
    {
        "content": "<p>instead, we would store it alongside the \"base\" and each \"projection\"</p>",
        "id": 201644228,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592851074
    },
    {
        "content": "<p>Okay that's what it looked like, thanks</p>",
        "id": 201644284,
        "sender_full_name": "Aman Arora",
        "timestamp": 1592851087
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/starting.20up.20work.20again/near/201644213\">said</a>:</p>\n<blockquote>\n<p>that is, right now, the only place the \"type\" is stored is in the <code>Place</code> data structure</p>\n</blockquote>\n<p>(and then it gets discarded when a projection is added, and the new place encodes the new final type)</p>",
        "id": 201644285,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592851087
    },
    {
        "content": "<p>okay, thanks</p>",
        "id": 201644324,
        "sender_full_name": "Aman Arora",
        "timestamp": 1592851113
    }
]