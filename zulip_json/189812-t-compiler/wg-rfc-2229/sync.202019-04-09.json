[
    {
        "content": "<p>Hey all <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 162934554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554833038
    },
    {
        "content": "<p>cc <span class=\"user-group-mention\" data-user-group-id=\"1175\">@WG-rfc-2229</span></p>",
        "id": 162934600,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554833045
    },
    {
        "content": "<p>hello</p>",
        "id": 162934635,
        "sender_full_name": "ange",
        "timestamp": 1554833064
    },
    {
        "content": "<p>I didn't do anything since last time except hang out at a cabin on Punta del Diablo</p>",
        "id": 162934676,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554833109
    },
    {
        "content": "<p>Hopefully some good food :D</p>",
        "id": 162934721,
        "sender_full_name": "blitzerr",
        "timestamp": 1554833141
    },
    {
        "content": "<p>but I was just starting to go through <span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span>'s list of free variables</p>",
        "id": 162934725,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554833148
    },
    {
        "content": "<p>I won't be able to make it to the meeting today. Sorry guys</p>",
        "id": 162934735,
        "sender_full_name": "blitzerr",
        "timestamp": 1554833155
    },
    {
        "content": "<blockquote>\n<p>Hopefully some good food :D</p>\n</blockquote>\n<p>well, it's not so veggie friendly there, but we ate well :)</p>",
        "id": 162934738,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554833158
    },
    {
        "content": "<p>I will read it async, if Niko can drive it today ?</p>",
        "id": 162934840,
        "sender_full_name": "blitzerr",
        "timestamp": 1554833217
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> any input on <a href=\"https://paper.dropbox.com/doc/Upvar-Paths--Aa7C6aefXL6RNSXHuUu8jncVAg-PNRgk22ryKq1n3Wq3FXAO\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/Upvar-Paths--Aa7C6aefXL6RNSXHuUu8jncVAg-PNRgk22ryKq1n3Wq3FXAO\">https://paper.dropbox.com/doc/Upvar-Paths--Aa7C6aefXL6RNSXHuUu8jncVAg-PNRgk22ryKq1n3Wq3FXAO</a> would be most appreciated, fwiw</p>",
        "id": 162935804,
        "sender_full_name": "ange",
        "timestamp": 1554833854
    },
    {
        "content": "<p>OK. Sorry, I was supposed to drive, but there is a contractor here and they pulled me away from sething</p>",
        "id": 162935828,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554833874
    },
    {
        "content": "<p>back now</p>",
        "id": 162935832,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554833876
    },
    {
        "content": "<p>np :-)</p>",
        "id": 162935882,
        "sender_full_name": "ange",
        "timestamp": 1554833887
    },
    {
        "content": "<p>I'll take a look at this</p>",
        "id": 162935891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554833896
    },
    {
        "content": "<p>the upvar paths proposal</p>",
        "id": 162935900,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554833900
    },
    {
        "content": "<p>let me just do that now</p>",
        "id": 162935902,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554833902
    },
    {
        "content": "<p>cool</p>",
        "id": 162935929,
        "sender_full_name": "ange",
        "timestamp": 1554833919
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127677\">@ange</span> I'll just leave some comments in the dropbox paper</p>",
        "id": 162935983,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554833962
    },
    {
        "content": "<p>mostly requests for clarification :)</p>",
        "id": 162935986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554833965
    },
    {
        "content": "<p>sure</p>",
        "id": 162936008,
        "sender_full_name": "ange",
        "timestamp": 1554833978
    },
    {
        "content": "<p>fwiw, I'm mostly concerned about the MIR borrow checker ramifications, as I guess I'll need to spend some time on it to get a handle on the bigger picture</p>",
        "id": 162936241,
        "sender_full_name": "ange",
        "timestamp": 1554834104
    },
    {
        "content": "<p>i.e. whether temporaries are (a) needed (b) a good idea</p>",
        "id": 162936345,
        "sender_full_name": "ange",
        "timestamp": 1554834149
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127677\">@ange</span> one question I have</p>",
        "id": 162936421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554834225
    },
    {
        "content": "<p>in the branch you have</p>",
        "id": 162936426,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554834228
    },
    {
        "content": "<p>is there some kind of \"output\" -- i.e., I'm trying to figure out what information we can glean before we go through all the work of changing codegen</p>",
        "id": 162936489,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554834256
    },
    {
        "content": "<p>I guess I'd be interested to have a list of closures and, for each one, the set of paths that wind up being computed</p>",
        "id": 162936500,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554834273
    },
    {
        "content": "<p>umm, yah, see <a href=\"https://github.com/aoikonomopoulos/rust/commit/04ec3f7ced8d8f2bdeade78c4574515f917536a7\" target=\"_blank\" title=\"https://github.com/aoikonomopoulos/rust/commit/04ec3f7ced8d8f2bdeade78c4574515f917536a7\">https://github.com/aoikonomopoulos/rust/commit/04ec3f7ced8d8f2bdeade78c4574515f917536a7</a></p>",
        "id": 162936502,
        "sender_full_name": "ange",
        "timestamp": 1554834276
    },
    {
        "content": "<p>ok, I see</p>",
        "id": 162936517,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554834291
    },
    {
        "content": "<p>though I haven't posted examples</p>",
        "id": 162936520,
        "sender_full_name": "ange",
        "timestamp": 1554834293
    },
    {
        "content": "<p>yeah, so, probably a good thing to do (as a start)</p>",
        "id": 162936554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554834321
    },
    {
        "content": "<p>would be to come up with a good list of tricky examples</p>",
        "id": 162936562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554834326
    },
    {
        "content": "<p>basically try to write-up interesting test cases</p>",
        "id": 162936566,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554834331
    },
    {
        "content": "<p>this is useful no matter what we do</p>",
        "id": 162936575,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554834338
    },
    {
        "content": "<p>(and probably should be added to the roadmap as a work item)</p>",
        "id": 162936585,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554834350
    },
    {
        "content": "<p>my current ideas are in the <a href=\"https://github.com/aoikonomopoulos/rust/commit/04ec3f7ced8d8f2bdeade78c4574515f917536a7\" target=\"_blank\" title=\"https://github.com/aoikonomopoulos/rust/commit/04ec3f7ced8d8f2bdeade78c4574515f917536a7\">testing section</a></p>",
        "id": 162936669,
        "sender_full_name": "ange",
        "timestamp": 1554834383
    },
    {
        "content": "<p>I'm more worried about getting things so wrong that I'd have to start over, which is why I'm more concerned with getting an end-to-end example working first</p>",
        "id": 162936708,
        "sender_full_name": "ange",
        "timestamp": 1554834417
    },
    {
        "content": "<p>i.e. get a very simple example of capturing a field sorta working</p>",
        "id": 162936772,
        "sender_full_name": "ange",
        "timestamp": 1554834463
    },
    {
        "content": "<p>ok, I added test cases to the roadmap, I think it's roughly the same as what you had</p>",
        "id": 162936868,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554834502
    },
    {
        "content": "<p>I'd feel more comfortable building on something that is unlikely to be swept away by reality</p>",
        "id": 162936874,
        "sender_full_name": "ange",
        "timestamp": 1554834508
    },
    {
        "content": "<p>great</p>",
        "id": 162936882,
        "sender_full_name": "ange",
        "timestamp": 1554834515
    },
    {
        "content": "<p>I just thikn it'd be good to be creating the <code>.rs</code> files</p>",
        "id": 162936888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554834519
    },
    {
        "content": "<p>we don't have to make them work yet :)</p>",
        "id": 162936897,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554834524
    },
    {
        "content": "<p>anyway, I guess I will have to review your code in a bit more depth</p>",
        "id": 162936906,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554834534
    },
    {
        "content": "<p>I agree that convering the MIR will be some work</p>",
        "id": 162936943,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554834557
    },
    {
        "content": "<p>it may not be <em>that</em> bad</p>",
        "id": 162936953,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554834562
    },
    {
        "content": "<p>at my level of understanding of the rustc internals, I would be relying on the debug output to verify I'm exercising the path I think I'm exercising in a testcase :-)</p>",
        "id": 162936954,
        "sender_full_name": "ange",
        "timestamp": 1554834563
    },
    {
        "content": "<p>a lot of that, I think, is diagnostics ..</p>",
        "id": 162936961,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554834569
    },
    {
        "content": "<p>would temporaries be at all applicable?</p>",
        "id": 162936977,
        "sender_full_name": "ange",
        "timestamp": 1554834582
    },
    {
        "content": "<p>basically what happens there is that when you access (e.g.) the upvar <code>x</code> in MIR, it gets converted to <code>this.foo</code></p>",
        "id": 162936981,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554834587
    },
    {
        "content": "<p>i.e. for capturing <code>x.y</code>, do</p>\n<div class=\"codehilite\"><pre><span></span>let t1 = &amp;x.y;\nenv.0 = t1;\n</pre></div>",
        "id": 162937077,
        "sender_full_name": "ange",
        "timestamp": 1554834623
    },
    {
        "content": "<p>well I meant more from the inside of the closure</p>",
        "id": 162937132,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554834664
    },
    {
        "content": "<p>but that's also true :)</p>",
        "id": 162937136,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554834667
    },
    {
        "content": "<p>so I guess we will need to think about how to generalize that</p>",
        "id": 162937144,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554834677
    },
    {
        "content": "<p>so that instead of intercepting at the <em>upvar</em>, we intercept at the full captured path</p>",
        "id": 162937149,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554834686
    },
    {
        "content": "<p>that's gonna be the tricky bit</p>",
        "id": 162937159,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554834694
    },
    {
        "content": "<p>right. what currently concerns me for the inside of the closure is rewriting the access to trim the path</p>",
        "id": 162937163,
        "sender_full_name": "ange",
        "timestamp": 1554834695
    },
    {
        "content": "<blockquote>\n<p>well I meant more from the inside of the closure</p>\n</blockquote>\n<p>well, if it means we might not have to touch 200+ upvar references...</p>",
        "id": 162937255,
        "sender_full_name": "ange",
        "timestamp": 1554834742
    },
    {
        "content": "<p>to be clear, that's the reason I'm asking about temporaries. would they be at all viable?</p>",
        "id": 162937342,
        "sender_full_name": "ange",
        "timestamp": 1554834814
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127677\">@ange</span> sorry, how would temporaries help exactly?</p>",
        "id": 162945629,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554840657
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> well, if you could have one upvar for each captured variable/field, perhaps consumers of upvars would not need to be updated (or at least, not as many consumers would)</p>",
        "id": 162945875,
        "sender_full_name": "ange",
        "timestamp": 1554840871
    },
    {
        "content": "<p>The challenge I think is that right now an upvar always maps 1-to-1 with some user variable and we're going to have to change that assumption. In any case, I'm feeling a bit unsure about what the concrete steps ought to be to move forward with this refactoring. I think there may be value though in trying to land code that just <em>figures out</em> which paths should be captured, even if we haven't plumbed that all the way through -- particularly if you're going to have to stop working on this at some point (didn't you mention <span class=\"user-mention\" data-user-id=\"127677\">@ange</span> that you might run out of time?)</p>",
        "id": 162946521,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554841414
    },
    {
        "content": "<p>but maybe it makes sense to wait and only land code when we have something end-to-end working</p>",
        "id": 162946537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554841426
    },
    {
        "content": "<p>I expect I can get a decent-looking PR ready that just dumps the capture paths when requested (what's missing is testcases I guess). personally, I wouldn't feel comfortable submitting it for inclusion ATM though, as I'm not even sure the <code>cmt_</code>-based code will be enough (and might need to be significantly rewritten)</p>",
        "id": 162947261,
        "sender_full_name": "ange",
        "timestamp": 1554841943
    },
    {
        "content": "<p>in any case, I can try to always have some mergeable branch on github</p>",
        "id": 162947314,
        "sender_full_name": "ange",
        "timestamp": 1554841987
    },
    {
        "content": "<p>ATM I'm more worried about work going to waste because the approach might prove to be a dead end</p>",
        "id": 162947417,
        "sender_full_name": "ange",
        "timestamp": 1554842051
    },
    {
        "content": "<p>which is why I'm mostly trying to look ahead to the end-to-end functionality</p>",
        "id": 162947486,
        "sender_full_name": "ange",
        "timestamp": 1554842104
    },
    {
        "content": "<p>I guess I'll try to investigate it myself and see where I get ¯\\_(ツ)_/¯</p>",
        "id": 162947607,
        "sender_full_name": "ange",
        "timestamp": 1554842191
    },
    {
        "content": "<p>any and all input is more than welcome of course</p>",
        "id": 162947675,
        "sender_full_name": "ange",
        "timestamp": 1554842239
    },
    {
        "content": "<p>OK, so: the MIR borrow checker adjustments don't seem too bad after all. Things would be easier if <code>UpvarId</code> contained the path too, but non-invasive way to do it introduces lots of cloning (as <code>UpvarId</code> is <code>Copy</code>).</p>\n<p>Alternatively, we could try making <code>UpvarId</code> an index and hold the non-<code>Copy</code> Upvar (which also contains the path) in a table</p>",
        "id": 163025672,
        "sender_full_name": "ange",
        "timestamp": 1554917260
    },
    {
        "content": "<p>I'm guessing all this cloning is an antipattern for rustc, even if the number of upvars is likely to be small in practice</p>",
        "id": 163025755,
        "sender_full_name": "ange",
        "timestamp": 1554917302
    },
    {
        "content": "<p>that said, I see the following difficulty: <code>mem_categorization.rs</code> wants to build an <code>UpvarId</code> to store in <code>NoteClosureEnv</code>/<code>NoteUpvarRef</code>. At that point, we don't have any path information available (indeed, we make use of <code>cmt_</code> to deduce the path information). We can't straightforwardly backpatch the path either, as the <code>cmt_</code> code starts from <code>Def::Upvar</code>. I guess we could add an optional path throughout, but this feels pretty icky.</p>\n<p>Technically, we can start with an empty path (i.e. <code>(x, [])</code> means \"here we're capturing <code>x</code> in its entirety\") and then refine the path in <code>upvar.rs</code>. One problem here is that later calls to the <code>cmt_</code> functions will still start from the <code>Def::Upvar</code>. I suppose we could use a <code>adjust_upvar_captures</code> as a side-table in <code>cat_upvar</code> in later calls to the <code>cmt_</code> code? Nope. When looking at a <code>Def::Upvar</code>, we have no way of telling what the replacement <code>UpvarId</code> is.</p>",
        "id": 163025868,
        "sender_full_name": "ange",
        "timestamp": 1554917394
    },
    {
        "content": "<p>Wondering if there's a modifying visitor for the HIR...</p>",
        "id": 163026131,
        "sender_full_name": "ange",
        "timestamp": 1554917531
    },
    {
        "content": "<p>other than <code>hair/cx</code> that is :-)</p>",
        "id": 163026357,
        "sender_full_name": "ange",
        "timestamp": 1554917691
    },
    {
        "content": "<p>huh, I can't find existing code that modifies the HIR. AFAIU, modifying the HIR is needed for commuting the path of an upvar access within the closure body, i.e. convert:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"c1\">// Capture x</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">cl</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">env</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">y</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>to</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"c1\">// Capture x.y</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">cl</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">env</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 163083430,
        "sender_full_name": "ange",
        "timestamp": 1554974124
    },
    {
        "content": "<p>FWIW, updated the <a href=\"https://paper.dropbox.com/doc/Upvar-Paths--Aa7C6aefXL6RNSXHuUu8jncVAg-PNRgk22ryKq1n3Wq3FXAO\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/Upvar-Paths--Aa7C6aefXL6RNSXHuUu8jncVAg-PNRgk22ryKq1n3Wq3FXAO\">paper doc</a> with notes on what I worked on / found out this week</p>",
        "id": 163407420,
        "sender_full_name": "ange",
        "timestamp": 1555355414
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127677\">@ange</span> we never mutate the HIR, we just built up \"Side tables\"</p>",
        "id": 163409685,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555357316
    },
    {
        "content": "<p>Yah, see the \"Capture paths of an Upvar, not the variable itself\" section in the paper doc (unfortunately only allows two levels of headings so can't link directly)</p>",
        "id": 163410727,
        "sender_full_name": "ange",
        "timestamp": 1555358091
    },
    {
        "content": "<p>Will try to clean up the doc before tomorrow's sync up</p>",
        "id": 163410771,
        "sender_full_name": "ange",
        "timestamp": 1555358117
    }
]