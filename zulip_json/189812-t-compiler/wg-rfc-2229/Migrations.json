[
    {
        "content": "<p>Created this issue with AssertUnwindSafe <a href=\"https://github.com/rust-lang/project-rfc-2229/issues/29\">https://github.com/rust-lang/project-rfc-2229/issues/29</a></p>",
        "id": 218185279,
        "sender_full_name": "Aman Arora",
        "timestamp": 1606604519
    },
    {
        "content": "<p>This can be handled with the approach of adding <code>let wrapper = wrapper</code>, but I think this particular case could be good to keep track, or we might want to special case this and directly operate on the wrapper itself</p>",
        "id": 218185401,
        "sender_full_name": "Aman Arora",
        "timestamp": 1606604711
    },
    {
        "content": "<p>This might be a more common pattern than originally expected <a href=\"https://github.com/rust-lang/project-rfc-2229/issues/29#issuecomment-738631655\">https://github.com/rust-lang/project-rfc-2229/issues/29#issuecomment-738631655</a></p>",
        "id": 218805218,
        "sender_full_name": "Aman Arora",
        "timestamp": 1607071018
    },
    {
        "content": "<p>really interesting</p>",
        "id": 219399917,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607548955
    },
    {
        "content": "<p>I do wonder if <code>move</code> closures should just capture local variables</p>",
        "id": 219399938,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607548970
    },
    {
        "content": "<p>since patterns like that seem to have no decent workaround to me</p>",
        "id": 219399972,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607548986
    },
    {
        "content": "<p>Same, I was thinking maybe another keyword like <code>no_disjoint</code>, that is used similar to the move keyboard, just to be more explicit than having a difference in behaviors. </p>\n<p>Though I'm not sure what the keyword should, or if should be adding a keyword</p>",
        "id": 219404543,
        "sender_full_name": "Aman Arora",
        "timestamp": 1607550975
    },
    {
        "content": "<p>I personally would prefer avoiding adding keywords to the language but I think it's a cleaner solution that let x = x patterns or having move closures not capture disjoint paths.</p>",
        "id": 219404634,
        "sender_full_name": "Aman Arora",
        "timestamp": 1607551031
    },
    {
        "content": "<p>so kind of like </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">no_disjoint</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\">   </span><span class=\"c1\">// p is captured here</span>\n</code></pre></div>",
        "id": 219406142,
        "sender_full_name": "Aman Arora",
        "timestamp": 1607551724
    },
    {
        "content": "<p>It'll have to be discussed. I don't think <code>no_disjoint</code> is quite right :)</p>",
        "id": 219417948,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607559064
    },
    {
        "content": "<p>but I might imagine something like explicit capture clauses</p>",
        "id": 219417957,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607559072
    },
    {
        "content": "<p>Yeah, that was the first one that came to my mind. But yes, I think being explicit is probably the best way to avoid confusion</p>",
        "id": 219418603,
        "sender_full_name": "Aman Arora",
        "timestamp": 1607559621
    },
    {
        "content": "<p>Got initial migrations working for example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(capture_disjoint_fields)]</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">String</span>::<span class=\"n\">new</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">new</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">t1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">String</span>::<span class=\"n\">new</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">new</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">t2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">String</span>::<span class=\"n\">new</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">new</span><span class=\"p\">());</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_t</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_t1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">t1</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_t2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">t2</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">c</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>\n<p>That's the first one in the screenshot and the second one is similar but <code>String::new</code> -&gt; <code>0i32</code>, just to ensure <code>needs_drop</code> is working)<br>\n<a href=\"user_uploads/4715/dgc1FnwswhN6AIM7Y4IcFI5H/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"user_uploads/4715/dgc1FnwswhN6AIM7Y4IcFI5H/image.png\" title=\"image.png\"><img src=\"user_uploads/4715/dgc1FnwswhN6AIM7Y4IcFI5H/image.png\"></a></div>",
        "id": 219958224,
        "sender_full_name": "Aman Arora",
        "timestamp": 1608027121
    },
    {
        "content": "<p>From the initla implementation one thing that I didn't expect was this needed to be done post-writeback, <code>needs_drop</code> seems to rely on that. This means that we want to explictly visit closures because closures that don't capture anything because of only using wild cardsÂ will get missed if we just read closure_min_captures</p>",
        "id": 219958374,
        "sender_full_name": "Aman Arora",
        "timestamp": 1608027209
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> Hmm, interesting, I'm surprised that <code>needs_drop</code> requires it although I can imagine reasons it might be true</p>",
        "id": 219961470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1608029157
    },
    {
        "content": "<p>We can <strong>probably</strong> refactor it</p>",
        "id": 219961529,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1608029174
    },
    {
        "content": "<p>Do you have some more details of what went wrong?</p>",
        "id": 219961533,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1608029178
    },
    {
        "content": "<p>Also, super exciting!</p>",
        "id": 219961540,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1608029181
    },
    {
        "content": "<p>well I think it needs the type to get folded than really writeback</p>",
        "id": 219961553,
        "sender_full_name": "Aman Arora",
        "timestamp": 1608029188
    },
    {
        "content": "<p>I haven't pushed a fix yet that does this during writeback</p>",
        "id": 219961597,
        "sender_full_name": "Aman Arora",
        "timestamp": 1608029220
    },
    {
        "content": "<p><a href=\"https://github.com/sexxi-goose/rust/pull/40\">https://github.com/sexxi-goose/rust/pull/40</a></p>",
        "id": 219961601,
        "sender_full_name": "Aman Arora",
        "timestamp": 1608029223
    },
    {
        "content": "<p>but here were are my comments of what wasn't working</p>",
        "id": 219961618,
        "sender_full_name": "Aman Arora",
        "timestamp": 1608029234
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281950\">Aman Arora</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/Migrations/near/219961553\">said</a>:</p>\n<blockquote>\n<p>well I think it needs the type to get folded than really writeback</p>\n</blockquote>\n<p>this sounds likely</p>",
        "id": 219961812,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1608029373
    },
    {
        "content": "<p>What is the condition we want to trigger the migrations? </p>\n<p>I'm currently doing feature and an env variable is set for testing</p>",
        "id": 220176790,
        "sender_full_name": "Aman Arora",
        "timestamp": 1608154880
    },
    {
        "content": "<p>I was thinking if the feature is set and the edition is 2018 for pushing to upstream</p>",
        "id": 220176825,
        "sender_full_name": "Aman Arora",
        "timestamp": 1608154896
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> the migration should be a lint and we should trigger based on whether the lint is enabled</p>",
        "id": 220228957,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1608202409
    },
    {
        "content": "<p>you can test this from within the typeck code ...</p>",
        "id": 220229003,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1608202442
    }
]