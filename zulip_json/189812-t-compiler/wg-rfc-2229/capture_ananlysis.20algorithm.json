[
    {
        "content": "<p>I think we also need to include handling of closure and Fn trait analysis as part of the algorithm</p>",
        "id": 245277450,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625726877
    },
    {
        "content": "<p>What do you think about: If after the ananlyis there is a place with mode = ByValue then the closure must be FnOnce. And if some place has UniqueImmBorrow/MutBorrow then the closure must be FnMut.</p>",
        "id": 245277535,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625726970
    },
    {
        "content": "<p>Also i think our copy rule might be wrong.</p>\n<p>Consider this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Point</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>\n<p>After just the collection phase we'd see p.x -&gt; ByValue before (ByValue &gt; MutBorrow), and we'd borrow p.x by ImmRef which would cause the first statement in the closure to fail.</p>",
        "id": 245277787,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625727208
    },
    {
        "content": "<p>Simplest solution to this might just be to ignore ByValue mode for Copy types</p>",
        "id": 245278573,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625727937
    },
    {
        "content": "<p>In case it's a move closure then we want to have a ByValue mode for Copy types for the case where the user returns the thing, which should get handled based on the last rule of the move_x_from method</p>",
        "id": 245278673,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625728018
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281950\">Aman Arora</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/capture_ananlysis.20algorithm/near/245277535\">said</a>:</p>\n<blockquote>\n<p>What do you think about: If after the ananlyis there is a place with mode = ByValue then the closure must be FnOnce. And if some place has UniqueImmBorrow/MutBorrow then the closure must be FnMut.</p>\n</blockquote>\n<p>This sounds right.</p>",
        "id": 245347812,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625766840
    },
    {
        "content": "<p>Wait</p>",
        "id": 245347816,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625766842
    },
    {
        "content": "<p>It doesn't :)</p>",
        "id": 245347857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625766845
    },
    {
        "content": "<p>We should select the initial mode not by looking at the <em>final result</em> but based on the result <em>before</em> we apply any mapping</p>",
        "id": 245347915,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625766881
    },
    {
        "content": "<p>The problem is that you can have move closures that are <code>Fn</code>, for example, but they will have <code>ByValue</code> captures</p>",
        "id": 245347964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625766897
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/capture_ananlysis.20algorithm/near/245347915\">said</a>:</p>\n<blockquote>\n<p>We should select the initial mode not by looking at the <em>final result</em> but based on the result <em>before</em> we apply any mapping</p>\n</blockquote>\n<p>Yes</p>",
        "id": 245348023,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625766917
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281950\">Aman Arora</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/capture_ananlysis.20algorithm/near/245277787\">said</a>:</p>\n<blockquote>\n<p>Also i think our copy rule might be wrong.<br>\n...<br>\nAfter just the collection phase we'd see p.x -&gt; ByValue before (ByValue &gt; MutBorrow), and we'd borrow p.x by ImmRef which would cause the first statement in the closure to fail.</p>\n</blockquote>\n<p>I don't think this is correct</p>",
        "id": 245348031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625766922
    },
    {
        "content": "<p>Or at least, not if we do the mapping of <code>ByValue(copy)</code> to <code>ref</code></p>",
        "id": 245348067,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625766939
    },
    {
        "content": "<p>in that case, we would see two accesses to <code>p.x</code>: one by mut ref and one by shared ref, and we would pick the mut ref</p>",
        "id": 245348153,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625766965
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/capture_ananlysis.20algorithm/near/245348067\">said</a>:</p>\n<blockquote>\n<p>Or at least, not if we do the mapping of <code>ByValue(copy)</code> to <code>ref</code></p>\n</blockquote>\n<p>based on ho w we sdescribed the algorithm that happens after having collecting the places, I'm trying to see if we can avoid adding rules during. the collection phase</p>",
        "id": 245348199,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625766992
    },
    {
        "content": "<p>sure, but</p>",
        "id": 245348221,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625767004
    },
    {
        "content": "<p>it happens <em>before</em> we do minimization, right?</p>",
        "id": 245348230,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625767011
    },
    {
        "content": "<p>This would happen before minizaiton yes</p>",
        "id": 245348278,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625767036
    },
    {
        "content": "<p>right so I think the raw input is</p>\n<div class=\"codehilite\"><pre><span></span><code>(ByValue, `p.x`: u32)\n(MutRef, `p.x`: u32)\n</code></pre></div>",
        "id": 245348333,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625767077
    },
    {
        "content": "<p>Yes</p>",
        "id": 245348384,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625767086
    },
    {
        "content": "<p>we would map the first entry to <code>(ref, p.x:u32)</code> but leave the second one alone</p>",
        "id": 245348390,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625767093
    },
    {
        "content": "<p>and then <em>during minimization</em>, we would coallesce those into <code>(mut-ref, p.x)</code>, right?</p>",
        "id": 245348417,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625767114
    },
    {
        "content": "<p>I see what you mean by minimzation, right now if see two exact same places we pick the higher mode right away</p>",
        "id": 245348606,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625767206
    },
    {
        "content": "<p>I see</p>",
        "id": 245348678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625767232
    },
    {
        "content": "<p>I wasn't expecting that</p>",
        "id": 245348682,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625767235
    },
    {
        "content": "<p>So the data that will collected before we start processing is <code>p.x</code> ByValue</p>",
        "id": 245348709,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625767251
    },
    {
        "content": "<p>Yes</p>",
        "id": 245348730,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625767258
    },
    {
        "content": "<p>So that doesn't work :)</p>",
        "id": 245348738,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625767260
    },
    {
        "content": "<p>we have to do this map before any coallescing is done</p>",
        "id": 245348747,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625767265
    },
    {
        "content": "<p>Since Copy + ByValue = Ref, we can just ignore that as an entry early on</p>",
        "id": 245348855,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625767321
    },
    {
        "content": "<p>because no escalation would happen</p>",
        "id": 245348955,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625767351
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/86995\">https://github.com/rust-lang/rust/pull/86995</a></p>",
        "id": 245415892,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625819836
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> nice, I left a few comments, but this looks really good. Cool that it didn't change any of the results.</p>",
        "id": 245422639,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625824001
    },
    {
        "content": "<p>(Except perhaps the new cases)</p>",
        "id": 245422648,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625824010
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> I'm still wondering why we can't just convert \"copy\" to \"ref\" very early on</p>",
        "id": 245542824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625913490
    },
    {
        "content": "<p>As an example, in the delegate, when we get a call to <code>consume</code>...</p>",
        "id": 245542829,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625913502
    },
    {
        "content": "<p>I am thinking it might be nice if those callbacks immediately deferred to a central callback like:</p>",
        "id": 245542837,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625913539
    },
    {
        "content": "<p><code>record_closure_capture(place, mode)</code></p>",
        "id": 245542841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625913545
    },
    {
        "content": "<p>and we could easily check in <code>consume</code> \"is this a consume of a copy place? if so, convert to ref\"</p>",
        "id": 245542844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625913564
    },
    {
        "content": "<p>that feels like it would simplify the handling there</p>",
        "id": 245542848,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625913582
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/capture_ananlysis.20algorithm/near/245542824\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"281950\">Aman Arora</span> I'm still wondering why we can't just convert \"copy\" to \"ref\" very early on</p>\n</blockquote>\n<p>No real reason, the benefit of not doing it is we store less data and proocess less data, the benefit of doing it would be explictness.</p>",
        "id": 245562461,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625938492
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/capture_ananlysis.20algorithm/near/245542848\">said</a>:</p>\n<blockquote>\n<p>that feels like it would simplify the handling there</p>\n</blockquote>\n<p>We don't really have to deal with them outside ignoring them right now</p>",
        "id": 245562480,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625938537
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/capture_ananlysis.20algorithm/near/245542841\">said</a>:</p>\n<blockquote>\n<p><code>record_closure_capture(place, mode)</code></p>\n</blockquote>\n<p>Does it mean we remove the initializing step, and the fact that we have somewhat of a map? That stores place -&gt; max(use). And rather have just a vecotr of (place, mode) pairs</p>",
        "id": 245562539,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625938596
    },
    {
        "content": "<p>No, although that would indeed map to the \"formal\" model more  closely, but that's not what I meant</p>",
        "id": 245600800,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626000236
    },
    {
        "content": "<p>maybe I have to read the code in non-diff form</p>",
        "id": 245600838,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626000246
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281950\">Aman Arora</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/capture_ananlysis.20algorithm/near/245562461\">said</a>:</p>\n<blockquote>\n<p>No real reason, the benefit of not doing it is we store less data and proocess less data, the benefit of doing it would be explictness.</p>\n</blockquote>\n<p>Why do we store less data? That surprises me. The main thing I'm interested in here is \"obviously correct\"</p>",
        "id": 245601121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626000781
    },
    {
        "content": "<p>We might be talking about slightly different things</p>",
        "id": 245601125,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626000790
    },
    {
        "content": "<p>I'm not talking about the fact that in the code we do a \"first step\" of compressing all instances of the same place into one entry, by using a map instead of a vector</p>",
        "id": 245601130,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626000809
    },
    {
        "content": "<p>(though we should discuss that; I think it's probably the right thing to do but i'd like to 1000% convince myself it's equivalent to the non-map version)</p>",
        "id": 245601132,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626000829
    },
    {
        "content": "<p>I'm just talking about the way the code is structured -- I think I would find it simpler if we removed the idea of a \"Copy\" mode of access and <em>just</em> had <code>ref</code>, <code>ref mut</code>, and <code>move</code></p>",
        "id": 245601178,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626000870
    },
    {
        "content": "<p>the only reasno, I think, not to do that is that the \"expression use visitor\" currently produces \"by-value\" also for <code>Copy</code> types, but we can do that mapping ourselves</p>",
        "id": 245601190,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626000904
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/capture_ananlysis.20algorithm/near/245601178\">said</a>:</p>\n<blockquote>\n<p>I'm just talking about the way the code is structured -- I think I would find it simpler if we removed the idea of a \"Copy\" mode of access and <em>just</em> had <code>ref</code>, <code>ref mut</code>, and <code>move</code></p>\n</blockquote>\n<p>Ah yes, I was talking about convering to a vec instead of a map. I could've probably organized my thoughts a bit better.</p>",
        "id": 245615320,
        "sender_full_name": "Aman Arora",
        "timestamp": 1626021693
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/capture_ananlysis.20algorithm/near/245601190\">said</a>:</p>\n<blockquote>\n<p>the only reasno, I think, not to do that is that the \"expression use visitor\" currently produces \"by-value\" also for <code>Copy</code> types, but we can do that mapping ourselves</p>\n</blockquote>\n<p>So I created this PR where ExprUseVisitor would do the mapping: <a href=\"https://github.com/rust-lang/rust/pull/87069\">https://github.com/rust-lang/rust/pull/87069</a></p>\n<p>it didnt seem to affect clippy or any exisiting tests</p>",
        "id": 245625133,
        "sender_full_name": "Aman Arora",
        "timestamp": 1626035628
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> I left some comments. I'm actually not opposed to the approach in <a href=\"https://github.com/rust-lang/rust/issues/87069\">#87069</a> either, given that clippy is unaffected, but then let's remove the <code>CaptureMode</code> argument altogether and document that behavior.</p>",
        "id": 245735455,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626117883
    },
    {
        "content": "<p>Yea that's what I was thinking</p>",
        "id": 245735807,
        "sender_full_name": "Aman Arora",
        "timestamp": 1626118040
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> do you plan to update to remove <code>ConsumeMode</code> and document that <code>consume</code> is only invoked on moves that are not known to be copies?</p>",
        "id": 245865177,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626199969
    },
    {
        "content": "<p>Yea, I pan on doing that tonight</p>",
        "id": 245865225,
        "sender_full_name": "Aman Arora",
        "timestamp": 1626199996
    },
    {
        "content": "<p>Plan*</p>",
        "id": 245865230,
        "sender_full_name": "Aman Arora",
        "timestamp": 1626199999
    },
    {
        "content": "<p>Great</p>",
        "id": 245865669,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626200209
    },
    {
        "content": "<p>updated</p>",
        "id": 245923697,
        "sender_full_name": "Aman Arora",
        "timestamp": 1626243841
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> <a href=\"https://github.com/rust-lang/rust/pull/87069#pullrequestreview-706347504\">https://github.com/rust-lang/rust/pull/87069#pullrequestreview-706347504</a></p>",
        "id": 245968123,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626273189
    },
    {
        "content": "<p>left 2 minor suggestions -- I think!</p>",
        "id": 245968146,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626273199
    },
    {
        "content": "<p>updated</p>",
        "id": 246051820,
        "sender_full_name": "Aman Arora",
        "timestamp": 1626324876
    }
]