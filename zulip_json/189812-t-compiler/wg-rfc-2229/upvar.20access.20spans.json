[
    {
        "content": "<p>Looks like <a href=\"https://github.com/rust-lang/project-rfc-2229/issues/6\">#6</a> will be blocked until we get <code>closure_captures</code> to use <code>PlaceUnique</code>. </p>\n<p>This is because the <code>span</code> stored within <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/struct.Upvar.html\">Upvar</a> points to the expression   for the access where as the <code>hir_id</code> in closure_captures (both key and within the value) store hir_id to the variable. <a href=\"https://github.com/rust-lang/rust/pull/72591/files#diff-193820a23727493def60049c0b6af47eL119\">creating closure_catures</a>.</p>\n<p>With recent changes made to track unused variables in closures, certain tests are failing because we have the wrong span (<code>tcx.hir().span(var_hir_id)</code>) and therefore we indicate the wrong error line.</p>\n<p>Eg: <a href=\"https://github.com/rust-lang/rust/pull/72465/files#diff-acaa1896213b8b463386a5f83cb038c3\">https://github.com/rust-lang/rust/pull/72465/files#diff-acaa1896213b8b463386a5f83cb038c3</a></p>\n<p><a href=\"/user_uploads/4715/TAaWJ2tL6ENe4eQ84LOqjR5P/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/TAaWJ2tL6ENe4eQ84LOqjR5P/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/TAaWJ2tL6ENe4eQ84LOqjR5P/image.png\"></a></div>",
        "id": 201182297,
        "sender_full_name": "Aman Arora",
        "timestamp": 1592418675
    },
    {
        "content": "<p><code>PlaceUnique</code> would contain the hir_id of the expression so we can use that to get the correct span</p>",
        "id": 201182572,
        "sender_full_name": "Aman Arora",
        "timestamp": 1592418825
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> hmm</p>",
        "id": 201184736,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592419864
    },
    {
        "content": "<p>I'm not sure I understand yet</p>",
        "id": 201184750,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592419870
    },
    {
        "content": "<p>ok ok I see</p>",
        "id": 201184800,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592419897
    },
    {
        "content": "<p>so</p>",
        "id": 201184802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592419898
    },
    {
        "content": "<p>you should be able to get the definition span</p>",
        "id": 201184819,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592419903
    },
    {
        "content": "<p>No we would be about to get the expression span, so <code>foo.x</code>  instead of <code> let foo = ...</code></p>",
        "id": 201185084,
        "sender_full_name": "Aman Arora",
        "timestamp": 1592420020
    },
    {
        "content": "<p>sorry, I got interrupted</p>",
        "id": 201185119,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592420033
    },
    {
        "content": "<p>so, if you have the <code>hir_id</code> of the acess to <code>foo</code>.. you <em>can</em> get to the declaration span</p>",
        "id": 201185218,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592420055
    },
    {
        "content": "<p>but it might be kind of annoying</p>",
        "id": 201185237,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592420069
    },
    {
        "content": "<p>there is some table or other that stores \"what is the hir-id of the variable this was resolved to by name resolution\"</p>",
        "id": 201185251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592420080
    },
    {
        "content": "<p>that said</p>",
        "id": 201185289,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592420103
    },
    {
        "content": "<p>I guess I'm confused</p>",
        "id": 201185301,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592420108
    },
    {
        "content": "<p>don't you have the upvar id or something?</p>",
        "id": 201185313,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592420113
    },
    {
        "content": "<p>er, wait, is the problem that you are <em>now</em> getting the declaration span</p>",
        "id": 201185355,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592420137
    },
    {
        "content": "<p>and you <em>want</em> the access span?</p>",
        "id": 201185357,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592420140
    },
    {
        "content": "<p>maybe I had this backwards</p>",
        "id": 201185359,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592420142
    },
    {
        "content": "<p>I guess that's what your diff suggests</p>",
        "id": 201185371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592420149
    },
    {
        "content": "<p>Yes we want the access span for expression within the closure</p>",
        "id": 201185620,
        "sender_full_name": "Aman Arora",
        "timestamp": 1592420279
    },
    {
        "content": "<p>ok ok</p>",
        "id": 201185779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592420351
    },
    {
        "content": "<p>ok so</p>",
        "id": 201185791,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592420358
    },
    {
        "content": "<p>I see</p>",
        "id": 201185794,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592420359
    },
    {
        "content": "<p>so you are saying that</p>",
        "id": 201185797,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592420361
    },
    {
        "content": "<p>using <code>upvars_mentioned</code> was getting you the <em>access</em> span</p>",
        "id": 201185811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592420369
    },
    {
        "content": "<p>but using <code>closure_captures</code> is getting you the definition span?</p>",
        "id": 201185824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592420376
    },
    {
        "content": "<p>you <em>can</em> get an access span</p>",
        "id": 201185832,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592420380
    },
    {
        "content": "<p>well I wonder if the way we do it now</p>",
        "id": 201185995,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592420437
    },
    {
        "content": "<p>is by checking the upvar list</p>",
        "id": 201186016,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592420451
    },
    {
        "content": "<p>I'm not sure how, I'm trying to avoid accesing upvars_mentioned</p>",
        "id": 201186027,
        "sender_full_name": "Aman Arora",
        "timestamp": 1592420455
    },
    {
        "content": "<p>btw I changed the topic for these messages</p>",
        "id": 201186111,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592420497
    },
    {
        "content": "<p>Feels like it defeats the purpose of switiching over the closure_captures, also because once we start using Place we will have expr_id</p>",
        "id": 201186114,
        "sender_full_name": "Aman Arora",
        "timestamp": 1592420499
    },
    {
        "content": "<p>yah so you are saying</p>",
        "id": 201186135,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592420510
    },
    {
        "content": "<p>I agree that the best strategy is probably to modify closure-captures <em>first</em></p>",
        "id": 201186149,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592420519
    },
    {
        "content": "<p>to record also access information</p>",
        "id": 201186190,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592420523
    },
    {
        "content": "<p>and then do the switch to use closure-captures</p>",
        "id": 201186202,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592420528
    },
    {
        "content": "<p>is that what you are proposing?</p>",
        "id": 201186209,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592420532
    },
    {
        "content": "<p>Yup</p>",
        "id": 201186216,
        "sender_full_name": "Aman Arora",
        "timestamp": 1592420536
    },
    {
        "content": "<p>I'll double check but looking through <code>TypeckTables</code> I didn't see anything in there for just this purpose, which surprised me a bit</p>",
        "id": 201186265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592420562
    },
    {
        "content": "<p>I thought we kept a bit of information on \"why we chose to capture the variable in this way\"</p>",
        "id": 201186286,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592420574
    },
    {
        "content": "<p>but maybe not</p>",
        "id": 201186296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592420578
    },
    {
        "content": "<p>yeah I can't find it</p>",
        "id": 201186843,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592420854
    },
    {
        "content": "<p>I'll update the issue with context and mark it blocked on closure_captures refactor</p>",
        "id": 201186961,
        "sender_full_name": "Aman Arora",
        "timestamp": 1592420906
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  We had discussed that closure captures look like </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">ClosureCapture</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// captured variable</span>\n<span class=\"w\">    </span><span class=\"n\">hir_id</span>: <span class=\"nc\">HirId</span><span class=\"p\">,</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">upvar_id</span>: <span class=\"nc\">UpvarId</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// maybe this can go away</span>\n\n<span class=\"w\">    </span><span class=\"c1\">//// some representative use we can cite for error messages</span>\n<span class=\"w\">    </span><span class=\"n\">span</span>: <span class=\"nc\">Span</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>as documented <a href=\"https://hackmd.io/BVFNLHnvSrG-d4MAshjmew\">here</a></p>\n<p>I think we can have </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">//  Place contains UpvarId for PlaceBase::Upvar</span>\n<span class=\"c1\">// This gives us access to Span from hir_id</span>\n<span class=\"c1\">// UpvarId contains the local var id that points to its declaration</span>\n<span class=\"k\">struct</span> <span class=\"nc\">ClosureCaptureWithId</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">captured_place</span>: <span class=\"nc\">PlaceWIthHirId</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// this so that we don&#39;t have to generate the list of Place everytime we only need that.</span>\n<span class=\"k\">struct</span> <span class=\"nc\">ClosureCapture</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">captured_place</span>: <span class=\"nc\">Place</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 201665079,
        "sender_full_name": "Aman Arora",
        "timestamp": 1592862420
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> this sounds right, although it raises the question if the \"closure capture\" structs are even necessary.</p>",
        "id": 201666663,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592863403
    },
    {
        "content": "<p>I was debating just a type alias, but decided to do it this way because <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/struct.Upvar.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/struct.Upvar.html</a>  , <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/def_id/struct.LocalDefId.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/def_id/struct.LocalDefId.html</a> and some other structs that I looked at, were essentially a single field. </p>\n<p>My assumption was that this is to be future-proof, in case we decide to add more information. But as the current code stands type alias seems like a good option.</p>",
        "id": 201667335,
        "sender_full_name": "Aman Arora",
        "timestamp": 1592863794
    },
    {
        "content": "<p>Actually scratch that, that's probably to provide member functions</p>",
        "id": 201667832,
        "sender_full_name": "Aman Arora",
        "timestamp": 1592864099
    }
]