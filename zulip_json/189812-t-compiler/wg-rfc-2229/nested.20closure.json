[
    {
        "content": "<p>In case of nested closures we see <a href=\"https://github.com/sexxi-goose/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/compiler/rustc_mir_build/src/build/expr/as_rvalue.rs#L415-L418\">this assertion</a> fail</p>\n<p>I think the problem here is that this <a href=\"https://github.com/sexxi-goose/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/compiler/rustc_mir_build/src/build/expr/as_rvalue.rs#L386-L443\">code</a><br>\nexpexts Field projections to be only in case of nested closures</p>\n<ul>\n<li>\n<p>When a closure is encountered we would see VarRef with  projections= [] (in ByValue) or VarRef with projections = [Deref] (ByRef). We have VarRef here because for the parent body (assume function) these are local variables that are being captured. In this case we don't access <code>upvars_mutbs</code></p>\n</li>\n<li>\n<p>When a nested closure is encountered we have UpvarRef and projections are [..., Field] or [..., Field, Deref] and it makes sense that we <a href=\"https://github.com/sexxi-goose/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/compiler/rustc_mir_build/src/build/expr/as_rvalue.rs#L406-L412\">expect</a> the base to be Local(1) because the parent is a closure. And then we know the field index &lt;= upvar_mutbls.len()</p>\n</li>\n</ul>",
        "id": 217612315,
        "sender_full_name": "Aman Arora",
        "timestamp": 1606128075
    },
    {
        "content": "<p>Though I'm kind of wondering why anything is working</p>",
        "id": 217612350,
        "sender_full_name": "Aman Arora",
        "timestamp": 1606128106
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281950\">Aman Arora</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/nested.20closure/near/217612350\">said</a>:</p>\n<blockquote>\n<p>Though I'm kind of wondering why anything is working</p>\n</blockquote>\n<p>Okay yeah so all of the working test cases don't mutate the capture, so that's why things looked like were working</p>",
        "id": 217721867,
        "sender_full_name": "Aman Arora",
        "timestamp": 1606203684
    },
    {
        "content": "<p>Okay so the mutability issue wasn't that bad to solve</p>",
        "id": 217724075,
        "sender_full_name": "Aman Arora",
        "timestamp": 1606205916
    },
    {
        "content": "<p>Nested will also need to have another step, since the borrow checker relies on the fact that  Field projections imply a nested closure</p>",
        "id": 217727475,
        "sender_full_name": "Aman Arora",
        "timestamp": 1606208677
    }
]