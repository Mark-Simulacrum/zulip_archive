[
    {
        "content": "<p>I thought I saw a new regression that <span class=\"user-mention\" data-user-id=\"307184\">@rocksand</span>  claimed, but otherwise, I think we're largely on top of the issues?</p>",
        "id": 250673371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629921270
    },
    {
        "content": "<p>I _think_ so</p>",
        "id": 250673525,
        "sender_full_name": "Aman Arora",
        "timestamp": 1629921345
    },
    {
        "content": "<p>Yes, I think this is the last bug issue which does not have a open PR yet. I will try to have a fix tonight</p>",
        "id": 250673545,
        "sender_full_name": "rocksand",
        "timestamp": 1629921353
    },
    {
        "content": "<p>Only thing left is the insig dtors</p>",
        "id": 250673549,
        "sender_full_name": "Aman Arora",
        "timestamp": 1629921354
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307184\">@rocksand</span> do you know the cause?</p>",
        "id": 250674600,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629921805
    },
    {
        "content": "<p>I haven‚Äôt looked at it yet, but it seemed related to a previous issue I solved: <a href=\"https://github.com/rust-lang/rust/issues/87988\">https://github.com/rust-lang/rust/issues/87988</a>. Probably another missing edge case in the match pattern code üò©</p>",
        "id": 250675005,
        "sender_full_name": "rocksand",
        "timestamp": 1629921977
    },
    {
        "content": "<p>It's most likely that we are ignoring the capture because the only match case we have is  a constant</p>",
        "id": 250675596,
        "sender_full_name": "Aman Arora",
        "timestamp": 1629922210
    },
    {
        "content": "<p>The problem is that the code is incorrect but we somehow get to MIR build</p>",
        "id": 250675628,
        "sender_full_name": "Aman Arora",
        "timestamp": 1629922225
    },
    {
        "content": "<p>If I remove the closure: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=e4e3a0a44729fbb118eeb3db25be2726\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=e4e3a0a44729fbb118eeb3db25be2726</a></p>",
        "id": 250675647,
        "sender_full_name": "Aman Arora",
        "timestamp": 1629922234
    },
    {
        "content": "<p>Ah exhaustiveness checking probably hapens after MIR build</p>",
        "id": 250675669,
        "sender_full_name": "Aman Arora",
        "timestamp": 1629922247
    },
    {
        "content": "<p>I mean we ignore the capture because of a missing edge case. It‚Äôs a struct so we should capture the match discriminant, and my guess is we don‚Äôt right now</p>",
        "id": 250676251,
        "sender_full_name": "rocksand",
        "timestamp": 1629922536
    },
    {
        "content": "<p>Exhaustiveness checking happens before MIR build</p>",
        "id": 250679605,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629924160
    },
    {
        "content": "<p>But it's based on THIR</p>",
        "id": 250679611,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629924163
    },
    {
        "content": "<p>Is this the issue <a href=\"https://github.com/rust-lang/rust/issues/88331\">https://github.com/rust-lang/rust/issues/88331</a> ?</p>",
        "id": 250679663,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629924199
    },
    {
        "content": "<p>Yes</p>",
        "id": 250679682,
        "sender_full_name": "Aman Arora",
        "timestamp": 1629924209
    },
    {
        "content": "<p>Yes, seems clearly like the problem is that don't consider matching a constant a read?</p>",
        "id": 250679712,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629924233
    },
    {
        "content": "<p>I think so</p>",
        "id": 250679766,
        "sender_full_name": "Aman Arora",
        "timestamp": 1629924249
    },
    {
        "content": "<p>I haven't gotten a chance to go look at debug logs</p>",
        "id": 250679807,
        "sender_full_name": "Aman Arora",
        "timestamp": 1629924273
    },
    {
        "content": "<p>I think we need to account for the Adt fields too</p>",
        "id": 250698415,
        "sender_full_name": "rocksand",
        "timestamp": 1629934872
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307184\">@rocksand</span> what do you mean by the ADT fields?</p>",
        "id": 250698609,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629934970
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307184\">rocksand</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/regression.20roundup/near/250676251\">said</a>:</p>\n<blockquote>\n<p>It‚Äôs a struct so we should capture the match discriminant, and my guess is we don‚Äôt right now</p>\n</blockquote>\n<p>I don't quite understand this -- what do you mean by \"match discriminant\"?</p>",
        "id": 250698646,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629934992
    },
    {
        "content": "<p>Sorry, I meant VariantDef fields <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.VariantDef.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.VariantDef.html</a></p>",
        "id": 250698758,
        "sender_full_name": "rocksand",
        "timestamp": 1629935063
    },
    {
        "content": "<p>By match discreminant I mean the place we are comparing the patterns with</p>",
        "id": 250698794,
        "sender_full_name": "rocksand",
        "timestamp": 1629935095
    },
    {
        "content": "<p>I thought it was called the match discreminant but maybe I have got it wrong all along</p>",
        "id": 250698825,
        "sender_full_name": "rocksand",
        "timestamp": 1629935121
    },
    {
        "content": "<p>So I was thinking about adt fields. Assuming the match contains all cases, we don't really care about fields of an adt unless they create a binding.</p>",
        "id": 250698995,
        "sender_full_name": "Aman Arora",
        "timestamp": 1629935235
    },
    {
        "content": "<p>Well until the const case showed up</p>",
        "id": 250699020,
        "sender_full_name": "Aman Arora",
        "timestamp": 1629935260
    },
    {
        "content": "<p>If we have only one variant, but that variant contains any field then there are more that one case to be compared to</p>",
        "id": 250699028,
        "sender_full_name": "rocksand",
        "timestamp": 1629935265
    },
    {
        "content": "<p>Yes but then they will create a binding</p>",
        "id": 250699047,
        "sender_full_name": "Aman Arora",
        "timestamp": 1629935279
    },
    {
        "content": "<p>I think they do unless we have const</p>",
        "id": 250699116,
        "sender_full_name": "rocksand",
        "timestamp": 1629935300
    },
    {
        "content": "<p>Yea we currently don't process const I think?</p>",
        "id": 250699177,
        "sender_full_name": "Aman Arora",
        "timestamp": 1629935348
    },
    {
        "content": "<p>Nvm that's a patkind const is THIR</p>",
        "id": 250699400,
        "sender_full_name": "Aman Arora",
        "timestamp": 1629935503
    },
    {
        "content": "<p>We see constant as a path in HIR</p>",
        "id": 250699423,
        "sender_full_name": "Aman Arora",
        "timestamp": 1629935521
    },
    {
        "content": "<p>If I replace <code>Opcode(0x1) =&gt; unimplemented!()</code> with we have 2 patterns <code>Lit</code> and <code>TupleStruct</code>,  while if I use the const there is only one pattern and it's a Path</p>",
        "id": 250699487,
        "sender_full_name": "rocksand",
        "timestamp": 1629935542
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307184\">@rocksand</span> did you ever have time to investigate? if not, I can spend some time today-- I'd really like to make sure we have PRs up for everything by today.</p>",
        "id": 250918545,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630064347
    },
    {
        "content": "<p>I worked on it yesterday. I still need to add better comments but this was my idea to solve the issue <a href=\"https://github.com/rust-lang/rust/pull/88390\">https://github.com/rust-lang/rust/pull/88390</a></p>",
        "id": 250924564,
        "sender_full_name": "rocksand",
        "timestamp": 1630067795
    },
    {
        "content": "<p>this doesn't <em>seem</em> right to me</p>",
        "id": 250945814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630076901
    },
    {
        "content": "<p>oh, wait</p>",
        "id": 250945886,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630076938
    },
    {
        "content": "<p>I am beginning to see :)</p>",
        "id": 250945936,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630076958
    },
    {
        "content": "<p>I will have to pull this</p>",
        "id": 250949321,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630078374
    },
    {
        "content": "<p>Another potential solution, I think, would be to look at/change how we ‚Äúprocess‚Äù const so we get don‚Äôt just get a PatKind that is Path</p>",
        "id": 250954164,
        "sender_full_name": "rocksand",
        "timestamp": 1630080467
    },
    {
        "content": "<p>I don't think we can decide if A::B is an associated type or constant until after typechk though</p>",
        "id": 250956623,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630081482
    },
    {
        "content": "<p>Outside of assuming that a path in match arm is most likely a constant than a type</p>",
        "id": 250956884,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630081589
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/88372\">https://github.com/rust-lang/rust/issues/88372</a></p>",
        "id": 250965150,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630085177
    },
    {
        "content": "<p>I won't be able to get to this until late evening/tomorrow morning</p>",
        "id": 250965183,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630085193
    },
    {
        "content": "<p>going to look a bit at <span class=\"user-mention\" data-user-id=\"307184\">@rocksand</span>'s PR now</p>",
        "id": 250984202,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630093057
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307184\">@rocksand</span> so this is the code that converts from patterns to \"THIR\" patterns:</p>\n<p><a href=\"https://github.com/rust-lang/rust/blob/110a9b3b1ca1fddd34a3ecb8ec47fd8bb5ca7424/compiler/rustc_mir_build/src/thir/pattern/mod.rs?plain=1#L448-L462\">https://github.com/rust-lang/rust/blob/110a9b3b1ca1fddd34a3ecb8ec47fd8bb5ca7424/compiler/rustc_mir_build/src/thir/pattern/mod.rs?plain=1#L448-L462</a></p>",
        "id": 250985135,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630093461
    },
    {
        "content": "<p>most notably, this seems to be the case of constants:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">is_associated_const</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Res</span>::<span class=\"n\">Def</span><span class=\"p\">(</span><span class=\"n\">DefKind</span>::<span class=\"n\">Const</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">def_id</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Res</span>::<span class=\"n\">Def</span><span class=\"p\">(</span><span class=\"n\">DefKind</span>::<span class=\"n\">AssocConst</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">def_id</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">),</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 250985168,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630093478
    },
    {
        "content": "<p>I suppose we should have this information from typechk by the time we run capture analysis?</p>",
        "id": 250985402,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630093574
    },
    {
        "content": "<p>I think I'd like the code to look a bit more like that</p>",
        "id": 250985403,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630093574
    },
    {
        "content": "<p>I might push some commits to the branch</p>",
        "id": 250985413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630093581
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281950\">Aman Arora</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/regression.20roundup/near/250985402\">said</a>:</p>\n<blockquote>\n<p>I suppose we should have this information from typechk by the time we run capture analysis?</p>\n</blockquote>\n<p>yes</p>",
        "id": 250985614,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630093679
    },
    {
        "content": "<p>Though I think we still need the fields check</p>",
        "id": 250985737,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630093720
    },
    {
        "content": "<p>what do you mean by \"the fields check?\"</p>",
        "id": 250985799,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630093750
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">A</span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 250985807,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630093753
    },
    {
        "content": "<p>That the class has non 0 fields</p>",
        "id": 250985847,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630093774
    },
    {
        "content": "<p>Hmm, I see.</p>",
        "id": 250986189,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630093916
    },
    {
        "content": "<p>I guess a \"zero-sized type\" could be exempt</p>",
        "id": 250986444,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630094028
    },
    {
        "content": "<p>but I'm not sure if that's the behavior we want</p>",
        "id": 250986471,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630094042
    },
    {
        "content": "<p>annoyingly pattern lowering is in a bit of flux, too</p>",
        "id": 250986534,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630094052
    },
    {
        "content": "<p>Right now zst don't seem to cause a borrow conflict</p>",
        "id": 250986710,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630094152
    },
    {
        "content": "<p>Which is understandable</p>",
        "id": 250986713,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630094156
    },
    {
        "content": "<p>At least that's what I remember when I tested it couple days ago</p>",
        "id": 250986792,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630094182
    },
    {
        "content": "<p>That seems likely</p>",
        "id": 250986876,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630094233
    },
    {
        "content": "<p>I'm thinking about this</p>",
        "id": 250986891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630094244
    },
    {
        "content": "<p>what we <em>really</em> want is to use the THIR pattern lowering code</p>",
        "id": 250986903,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630094250
    },
    {
        "content": "<p>Yes</p>",
        "id": 250986920,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630094261
    },
    {
        "content": "<p>I feel like there is probably far too code/logic duplication</p>",
        "id": 250986955,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630094278
    },
    {
        "content": "<p>It might be hard to fix though</p>",
        "id": 250987015,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630094291
    },
    {
        "content": "<p>I'm wondering if we can factor out that logic a bit</p>",
        "id": 250987068,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630094316
    },
    {
        "content": "<p>Like what we are doing here is essentially what some later stage of the compiler does to figure out if borrow needs to happen or not</p>",
        "id": 250987073,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630094316
    },
    {
        "content": "<p>If my understanding is correct<br>\n90% Typechk -&gt; capture analysis -&gt; write out typechk results -&gt; thir lowering.</p>\n<p>We might need significant refactor to support utilize their lowering</p>\n<p>Because it's possible that we have closure that contains a match where a block associated with an arm contains a closure and we'll end up in some weird boundary b/w thir and hir</p>",
        "id": 250987848,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630094659
    },
    {
        "content": "<p>well</p>",
        "id": 250989066,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630095228
    },
    {
        "content": "<p>it's actually not <em>that</em> hard for us to do</p>",
        "id": 250989084,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630095238
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">crate</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">pat_from_hir</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">tcx</span>: <span class=\"nc\">TyCtxt</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">param_env</span>: <span class=\"nc\">ty</span>::<span class=\"n\">ParamEnv</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">typeck_results</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">ty</span>::<span class=\"n\">TypeckResults</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">pat</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">tcx</span> <span class=\"nc\">hir</span>::<span class=\"n\">Pat</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Pat</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 250989139,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630095251
    },
    {
        "content": "<p>Oh that's awesome</p>",
        "id": 250989198,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630095284
    },
    {
        "content": "<p>I don't love that we're going to wind up re-doing it later</p>",
        "id": 250989314,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630095345
    },
    {
        "content": "<p>but....maybe ok</p>",
        "id": 250989329,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630095351
    },
    {
        "content": "<p>Oh true</p>",
        "id": 250989387,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630095366
    },
    {
        "content": "<p>actually</p>",
        "id": 250989400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630095376
    },
    {
        "content": "<p>if we <em>wanted</em> we could cache it</p>",
        "id": 250989406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630095380
    },
    {
        "content": "<p>in the <code>TypeckResults</code></p>",
        "id": 250989412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630095382
    },
    {
        "content": "<p>I'm not sure that it'll be a perf problem</p>",
        "id": 250989430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630095394
    },
    {
        "content": "<p>we actually already lower patterns more than once</p>",
        "id": 250989613,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630095506
    },
    {
        "content": "<p>once in <code>check_match</code> and then again in MIR build</p>",
        "id": 250989644,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630095525
    },
    {
        "content": "<p>If we have some struct that contains a closure?</p>\n<p>Like</p>\n<div class=\"codehilite\"><pre><span></span><code>match x {\nA::B(f, y) =&gt; f(y)\n}\n</code></pre></div>\n<p>Would we ever end up in a situation where it's expecting type of a closure, but it hasn't been resolved?</p>",
        "id": 250989661,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630095531
    },
    {
        "content": "<p>Because the typechk tables in that function call are complete</p>",
        "id": 250989701,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630095556
    },
    {
        "content": "<p>no, we already enforce a DAG across closures</p>",
        "id": 250989704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630095557
    },
    {
        "content": "<p>Also the typechk tables we have during closure analysis is MaybeTypechk tables and we can't just read types out of them</p>",
        "id": 250989789,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630095597
    },
    {
        "content": "<p>for this to work, we would have to make rustc_typeck depend on rustc_mir_build</p>",
        "id": 250989887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630095628
    },
    {
        "content": "<p>We read types out using fcx.node_ty which does maybe resolve</p>",
        "id": 250989913,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630095645
    },
    {
        "content": "<p>yeah, that's true</p>",
        "id": 250989933,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630095661
    },
    {
        "content": "<p>still, it's definitely <em>doable</em></p>",
        "id": 250989954,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630095673
    },
    {
        "content": "<p>That feels wrong ... Also a possible cyclic dependency</p>",
        "id": 250989958,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630095674
    },
    {
        "content": "<p>no, it's not a cyclic dependency</p>",
        "id": 250989968,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630095681
    },
    {
        "content": "<p>it's not really wrong</p>",
        "id": 250989973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630095683
    },
    {
        "content": "<p>it is sort of wrong that THIR construction is in rustc_mir_build</p>",
        "id": 250989986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630095690
    },
    {
        "content": "<p>we could factor it out into a crate of its own</p>",
        "id": 250990020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630095712
    },
    {
        "content": "<p>alternatively</p>",
        "id": 250990075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630095725
    },
    {
        "content": "<p>we could maybe build some sort of query for this</p>",
        "id": 250990089,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630095731
    },
    {
        "content": "<p>that is:</p>",
        "id": 250990114,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630095745
    },
    {
        "content": "<p>what we have is a reference to a constant</p>",
        "id": 250990121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630095748
    },
    {
        "content": "<p>For the short term do we want to merge Roxane's changes and maybe do the refactoring later?</p>",
        "id": 250990123,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630095750
    },
    {
        "content": "<p>I'm testing a diff to the patern matching code that (imo) simplifies it</p>",
        "id": 250990148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630095767
    },
    {
        "content": "<p>that is, a patch to <span class=\"user-mention\" data-user-id=\"307184\">@rocksand</span>'s PR</p>",
        "id": 250990171,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630095780
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281950\">Aman Arora</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/regression.20roundup/near/250990123\">said</a>:</p>\n<blockquote>\n<p>For the short term do we want to merge Roxane's changes and maybe do the refactoring later?</p>\n</blockquote>\n<p>yes, probably</p>",
        "id": 250990192,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630095793
    },
    {
        "content": "<p>I'm not sure we want to do it at all :)</p>",
        "id": 250990204,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630095800
    },
    {
        "content": "<p>or at least, I think there's something to be improved</p>",
        "id": 250990216,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630095807
    },
    {
        "content": "<p>just not 100% sure what it is</p>",
        "id": 250990224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630095810
    },
    {
        "content": "<p>Okay</p>",
        "id": 250991010,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630096174
    },
    {
        "content": "<p>pushed the commit</p>",
        "id": 250991273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630096281
    },
    {
        "content": "<p>it seems to work locally</p>",
        "id": 250991278,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630096283
    },
    {
        "content": "<p>and it mkes sense to me</p>",
        "id": 250991293,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630096290
    },
    {
        "content": "<p>it doesn't handle the zero-sized type, though, and I don't see the logic around non-exhaustiveness</p>",
        "id": 250991307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630096300
    },
    {
        "content": "<p>maybe that didn't land yet?</p>",
        "id": 250991314,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630096303
    },
    {
        "content": "<p>I remember r+'ing it I thought</p>",
        "id": 250991316,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630096306
    },
    {
        "content": "<p>Probably didn't merge yet?</p>",
        "id": 250991344,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630096321
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/88280\">https://github.com/rust-lang/rust/pull/88280</a></p>",
        "id": 250992307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630096802
    },
    {
        "content": "<p>guess not</p>",
        "id": 250992319,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630096803
    },
    {
        "content": "<p>take a look at <a href=\"https://github.com/rust-lang/rust/pull/88390/files#diff-7e389c2ca4db213dcaee698d12a364e7e39f77179a0da1c6578e1ffc9187a9e2\">these diffs</a></p>",
        "id": 250992423,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630096845
    },
    {
        "content": "<p>Looking</p>",
        "id": 250992536,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630096910
    },
    {
        "content": "<p>minor nit</p>",
        "id": 250992873,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630097047
    },
    {
        "content": "<p>are we not checking for ZST scenario?</p>",
        "id": 250992887,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630097054
    },
    {
        "content": "<p>I'm not checking :)</p>",
        "id": 250993074,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630097157
    },
    {
        "content": "<p>Can you leave a fixme?</p>",
        "id": 250993208,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630097215
    },
    {
        "content": "<p>yep</p>",
        "id": 250993228,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630097224
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 250993238,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630097230
    },
    {
        "content": "<p>Left a comment about the <code>needs_to_be_read = is_multivariant_adt(place_ty);</code> we want <code>|=</code></p>",
        "id": 250994197,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630097738
    },
    {
        "content": "<p>ah yeah</p>",
        "id": 250996473,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630098776
    },
    {
        "content": "<p>so ok I r+'d the PR</p>",
        "id": 251004565,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630103361
    },
    {
        "content": "<p>but we do have to decide if we want to deal with ZSTs etc</p>",
        "id": 251004582,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630103374
    },
    {
        "content": "<p>I think we should. Though I'm not sure if capturing or not capturing makes any difference?</p>\n<p>Like I might have not tested it properly but I think I was able to read the variable while having a &amp;Mut reference to it</p>",
        "id": 251006220,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630104557
    },
    {
        "content": "<p>The impact might be compiler performance because we are tracking more data</p>",
        "id": 251006323,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630104622
    },
    {
        "content": "<p>I'm of mixed minds about it</p>",
        "id": 251008278,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630106057
    },
    {
        "content": "<p>we should definitely match the const behavior</p>",
        "id": 251008289,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630106065
    },
    {
        "content": "<p>I don't love that behavior :P</p>",
        "id": 251008295,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630106072
    },
    {
        "content": "<p>but I'm not sure whether there are privacy considerations</p>",
        "id": 251008304,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630106078
    },
    {
        "content": "<p>e.g. non-exhaustive is still a factor</p>",
        "id": 251008331,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630106100
    },
    {
        "content": "<p>just testing for \"is it zero sized\" doesn't seem right</p>",
        "id": 251008349,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630106112
    },
    {
        "content": "<p>so I think I might rather fix it by trying to adapt the lowering code</p>",
        "id": 251008370,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630106126
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/regression.20roundup/near/251008370\">said</a>:</p>\n<blockquote>\n<p>so I think I might rather fix it by trying to adapt the lowering code</p>\n</blockquote>\n<p>I'm not sure what do you mean by this. I'm also not entirely aware of all the nitty-gritty details that are around ZST/patterns, so from that prespective using extistng code to ensure correctness/consistency seems like a good idea to me, but that might be too hard.</p>",
        "id": 251025034,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630122861
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 251153303,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630265961
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281950\">Aman Arora</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/regression.20roundup/near/250965150\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/issues/88372\">https://github.com/rust-lang/rust/issues/88372</a></p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/pull/88466/files\">https://github.com/rust-lang/rust/pull/88466/files</a></p>",
        "id": 251153314,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630265982
    },
    {
        "content": "<p>Open issues:</p>\n<ul>\n<li>Capture analysis fixup (<a href=\"https://github.com/rust-lang/rust/issues/88372\">#88372</a>): PR open <a href=\"https://github.com/rust-lang/rust/issues/88466\">#88466</a></li>\n<li>Lifetimes/ref in move error (<a href=\"https://github.com/rust-lang/rust/issues/88431\">#88431</a>)</li>\n<li>Macro migration issue (<a href=\"https://github.com/rust-lang/rust/issues/88440\">#88440</a>)</li>\n<li>Variant of <a href=\"https://github.com/rust-lang/rust/issues/88114\">#88114</a> (<a href=\"https://github.com/rust-lang/rust/issues/88444\">#88444</a>)</li>\n</ul>",
        "id": 251153879,
        "sender_full_name": "Aman Arora",
        "timestamp": 1630266626
    }
]