[
    {
        "content": "<p>Hey <span class=\"user-group-mention\" data-user-group-id=\"1175\">@WG-rfc-2229</span></p>",
        "id": 238533938,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620849197
    },
    {
        "content": "<p>hello</p>",
        "id": 238534017,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620849235
    },
    {
        "content": "<p>Hi</p>",
        "id": 238534184,
        "sender_full_name": "rocksand",
        "timestamp": 1620849298
    },
    {
        "content": "<p>Did you get a chance to review the blogpost</p>",
        "id": 238534292,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620849343
    },
    {
        "content": "<p>no!</p>",
        "id": 238534315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620849352
    },
    {
        "content": "<p>I totally forgot</p>",
        "id": 238534319,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620849354
    },
    {
        "content": "<p>where is it?</p>",
        "id": 238534323,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620849355
    },
    {
        "content": "<p>i can review quickly</p>",
        "id": 238534345,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620849362
    },
    {
        "content": "<p>do you think we can sync over zulip today?</p>",
        "id": 238534402,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620849374
    },
    {
        "content": "<p>well, I could do zoom too, doesn' matter</p>",
        "id": 238534431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620849384
    },
    {
        "content": "<p>I added one request for some comments to <a href=\"https://github.com/rust-lang/rust/pull/84152\">https://github.com/rust-lang/rust/pull/84152</a> (cc <span class=\"user-mention\" data-user-id=\"282466\">@Dhruv Jauhar</span>)</p>",
        "id": 238534482,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620849407
    },
    {
        "content": "<p>Upto you <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 238534485,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620849408
    },
    {
        "content": "<p>let's try zulip, I'm kin dof zoom'd out</p>",
        "id": 238534515,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620849422
    },
    {
        "content": "<p>I have lost the link the blogpost somehow, one min looking for it <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 238534605,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620849461
    },
    {
        "content": "<p><a href=\"https://hackmd.io/g0odgclDSaODOvBSZntltg\">https://hackmd.io/g0odgclDSaODOvBSZntltg</a></p>",
        "id": 238534628,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620849475
    },
    {
        "content": "<p>reading</p>",
        "id": 238534763,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620849521
    },
    {
        "content": "<p>ok</p>",
        "id": 238535943,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620849969
    },
    {
        "content": "<p>I'm thinking, <span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> -- I feel like this post belongs on the main rust blog</p>",
        "id": 238535969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620849980
    },
    {
        "content": "<p>not Inside Rust</p>",
        "id": 238535977,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620849986
    },
    {
        "content": "<p>I thik it's audience is \"all rust users'</p>",
        "id": 238535992,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620849995
    },
    {
        "content": "<p>not 'rust developers and hackers'</p>",
        "id": 238536004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620850003
    },
    {
        "content": "<p>Yes that's what we were thinking too</p>",
        "id": 238536013,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620850006
    },
    {
        "content": "<p>it's quite good; I think it could be improved somewhat to spell out the contxt and narrative for people</p>",
        "id": 238536051,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620850023
    },
    {
        "content": "<p>some of the migration content at the end might be a bit confusing</p>",
        "id": 238536077,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620850034
    },
    {
        "content": "<p>I wasn't sure how much detail we wanted to go into because it started getting pretty long</p>",
        "id": 238536123,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620850053
    },
    {
        "content": "<p>But I can try add more context</p>",
        "id": 238536133,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620850058
    },
    {
        "content": "<p>so</p>",
        "id": 238536418,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620850158
    },
    {
        "content": "<p>I don't think it needs a lot of words</p>",
        "id": 238536427,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620850161
    },
    {
        "content": "<p>I think an intro paragraph like:</p>",
        "id": 238536445,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620850179
    },
    {
        "content": "<p>One of the major features of the <a href=\"http://...\">upcoming Rust 2021 Edition</a> is a change to how Rust closures work. This change makes them more precise, eliminating common borrow check errors. The change does involve some (minor) change to Rust semantics, so it is tied to the Rust 2021 edition. Like any Edition migration, we have also created lints that will warn you of upcoming changes and suggest precise edits to preserve the semantics of your code. This blog post will explain the new feature and also tell you how you can try it out today on nightly if you like.</p>",
        "id": 238536742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620850308
    },
    {
        "content": "<p>would give everybody the \"big picture\" they need to get oriented</p>",
        "id": 238536783,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620850323
    },
    {
        "content": "<p>I could proabbly make some edits to the parts about the precise semantics of what gets captured</p>",
        "id": 238537010,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620850441
    },
    {
        "content": "<p>on the other hand</p>",
        "id": 238537016,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620850443
    },
    {
        "content": "<p>I kind of think that is boring for a blog post</p>",
        "id": 238537060,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620850449
    },
    {
        "content": "<p>I think what I would suggest is</p>",
        "id": 238537079,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620850453
    },
    {
        "content": "<p>maybe we should turn those sections into a PR against the rust reference?</p>",
        "id": 238537102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620850464
    },
    {
        "content": "<p>and then the blog post can link to that PR</p>",
        "id": 238537114,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620850469
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/reference/\">Rust reference repo</a></p>",
        "id": 238537160,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620850491
    },
    {
        "content": "<p>WDYT?</p>",
        "id": 238537162,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620850492
    },
    {
        "content": "<p>That's an interesting idea</p>",
        "id": 238537275,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620850535
    },
    {
        "content": "<p>From a new comer's prespective, I'm wondering if having some degree of TLDR for each of the sections is a good idea</p>",
        "id": 238537396,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620850573
    },
    {
        "content": "<p>I don't understand :)</p>",
        "id": 238537450,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620850599
    },
    {
        "content": "<p>So that in case they run into some issue ,they have an idea that it has to do with the feature and not something else that did do wrong</p>",
        "id": 238537454,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620850603
    },
    {
        "content": "<p>which sections?</p>",
        "id": 238537487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620850618
    },
    {
        "content": "<p>I think the capture precision one -- since they are the edge cases</p>",
        "id": 238537512,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620850637
    },
    {
        "content": "<p>I left some comments there</p>",
        "id": 238537834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620850768
    },
    {
        "content": "<p>i think there is also something missing, or maybe we didn't implement it</p>",
        "id": 238537847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620850775
    },
    {
        "content": "<p>maybe my summary is even wrong, I forget</p>",
        "id": 238537874,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620850788
    },
    {
        "content": "<p>there's <em>some</em> rule about <code>&amp;mut</code> references</p>",
        "id": 238537949,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620850807
    },
    {
        "content": "<p>what is it</p>",
        "id": 238537955,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620850808
    },
    {
        "content": "<p>One sec</p>",
        "id": 238537998,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620850830
    },
    {
        "content": "<blockquote>\n<p>This change to closure captures will most likely increase the size of any closure that uses it (since we can now capture many disjoint paths whereas before they could all be caputured by just the root variable). Changes in memory footprint will need to be profiled. We are also looking for user feedback, so please try this feature out :).</p>\n</blockquote>",
        "id": 238538047,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620850854
    },
    {
        "content": "<p>I think this overstates the case, too</p>",
        "id": 238538066,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620850860
    },
    {
        "content": "<p>we did measure and found that it had very little effect, I think we can say that</p>",
        "id": 238538107,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620850871
    },
    {
        "content": "<p>is there a way for people to get data?</p>",
        "id": 238538136,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620850884
    },
    {
        "content": "<p>we might \"crowdsource\" by having them post their data into an internals thread or google spreadsheet or something</p>",
        "id": 238538167,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620850896
    },
    {
        "content": "<p>that'd be useful</p>",
        "id": 238538177,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620850898
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/82007\">https://github.com/rust-lang/rust/pull/82007</a></p>",
        "id": 238538211,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620850916
    },
    {
        "content": "<p>oh right</p>",
        "id": 238538284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620850935
    },
    {
        "content": "<p>this was specific to move closures</p>",
        "id": 238538287,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620850938
    },
    {
        "content": "<p>where sometimes a \"move closure\" still winds up capturing by mut ref</p>",
        "id": 238538295,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620850945
    },
    {
        "content": "<p>Yes</p>",
        "id": 238538314,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620850951
    },
    {
        "content": "<p>yeah that's worth calling out</p>",
        "id": 238538323,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620850956
    },
    {
        "content": "<p>I still think the blog post should be pretty vague</p>",
        "id": 238538347,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620850968
    },
    {
        "content": "<p>Because we won't be moving use-by-ref in a non move closure</p>",
        "id": 238538355,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620850971
    },
    {
        "content": "<p>and reference a PR with the full details</p>",
        "id": 238538367,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620850975
    },
    {
        "content": "<p>Okay</p>",
        "id": 238538417,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620851000
    },
    {
        "content": "<p>something like \"the precise path that gets captured is typically the full path that is used, but there are cases where we will only capture a prefix of the path. See [this pending PR to the Rust reference] for the full details.\"</p>",
        "id": 238538426,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620851004
    },
    {
        "content": "<p>ok, cool, this is great</p>",
        "id": 238538528,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620851045
    },
    {
        "content": "<p>----- Closure size -----</p>",
        "id": 238538554,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620851057
    },
    {
        "content": "<p>So I looked into some of the increases and some of them I don't have an answer why there is an increase</p>",
        "id": 238538629,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620851091
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/cargo/blob/master/crates/cargo-util/src/paths.rs#L409-L413\">https://github.com/rust-lang/cargo/blob/master/crates/cargo-util/src/paths.rs#L409-L413</a></p>",
        "id": 238538638,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620851097
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/cargo/blob/master/src/cargo/core/compiler/fingerprint.rs#L736-L742\">https://github.com/rust-lang/cargo/blob/master/src/cargo/core/compiler/fingerprint.rs#L736-L742</a></p>",
        "id": 238538659,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620851103
    },
    {
        "content": "<p>In both cases closure sizes goes from 8 -&gt; 16</p>",
        "id": 238538678,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620851112
    },
    {
        "content": "<p>hmm</p>",
        "id": 238538729,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620851133
    },
    {
        "content": "<p>those are curious</p>",
        "id": 238538733,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620851134
    },
    {
        "content": "<p>i wonder</p>",
        "id": 238538752,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620851143
    },
    {
        "content": "<p>i have a <em>thought</em></p>",
        "id": 238538779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620851155
    },
    {
        "content": "<p>could we be capturing a fat pointer somehow?</p>",
        "id": 238538802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620851162
    },
    {
        "content": "<p>they are both calls to <code>Path::display</code>...</p>",
        "id": 238538864,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620851181
    },
    {
        "content": "<p>...that sholdn't matter</p>",
        "id": 238538893,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620851191
    },
    {
        "content": "<p>yes, i think there are some other cases to display</p>",
        "id": 238538912,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620851199
    },
    {
        "content": "<p>i bet if you dumped the MIR it'd be obvious</p>",
        "id": 238538922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620851203
    },
    {
        "content": "<p>Okay, I'll try that</p>",
        "id": 238538947,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620851212
    },
    {
        "content": "<p>you know about <code>-Zdump-mir=create_dir_all</code></p>",
        "id": 238538957,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620851218
    },
    {
        "content": "<p>Didn't think of that</p>",
        "id": 238538960,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620851219
    },
    {
        "content": "<p>and stuff like that?</p>",
        "id": 238538963,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620851220
    },
    {
        "content": "<p>I know dump-mir yea</p>",
        "id": 238539007,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620851235
    },
    {
        "content": "<p>then we also have the exemplar for our optimizaiton that we were talking about</p>",
        "id": 238539049,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620851257
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/cargo/blob/master/src/cargo/core/resolver/features.rs#L132-L151\">https://github.com/rust-lang/cargo/blob/master/src/cargo/core/resolver/features.rs#L132-L151</a></p>",
        "id": 238539062,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620851263
    },
    {
        "content": "<p>wait what's that</p>",
        "id": 238539242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620851342
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281950\">Aman Arora</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/meeting.202021-05-12/near/238539049\">said</a>:</p>\n<blockquote>\n<p>then we also have the exemplar for our optimizaiton that we were talking about</p>\n</blockquote>\n<p>I don't understand this :)</p>",
        "id": 238539322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620851378
    },
    {
        "content": "<p>every field is captured and the closure size increases significantly</p>",
        "id": 238539425,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620851406
    },
    {
        "content": "<p>oh, I see</p>",
        "id": 238539492,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620851433
    },
    {
        "content": "<p>and the idea is that we could recognize that and just capture <code>opts</code></p>",
        "id": 238539548,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620851457
    },
    {
        "content": "<p>that seems nice, if we found even one instance :)</p>",
        "id": 238539669,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620851512
    },
    {
        "content": "<p>Yes</p>",
        "id": 238539684,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620851518
    },
    {
        "content": "<p>it's not <em>that</em> hard to do, I imagine</p>",
        "id": 238539687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620851519
    },
    {
        "content": "<p>I don't think so, we already do something similar in migrations</p>",
        "id": 238539750,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620851533
    },
    {
        "content": "<p>we already have the mechanism to capture prefixes</p>",
        "id": 238539763,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620851537
    },
    {
        "content": "<p>yes, and that</p>",
        "id": 238539775,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620851542
    },
    {
        "content": "<p>I was thinking maybe I try implement this and compare graphs. Might be quicker than verifiying each closure. Cargo seemed to have a couple of those display() increases</p>",
        "id": 238539847,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620851583
    },
    {
        "content": "<p>The clsoure size here goes from 40 to 48</p>",
        "id": 238540044,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620851647
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/cargo/blob/master/src/cargo/core/compiler/unit_dependencies.rs#L787-L809\">https://github.com/rust-lang/cargo/blob/master/src/cargo/core/compiler/unit_dependencies.rs#L787-L809</a><br>\nI'm not sure why</p>",
        "id": 238540053,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620851651
    },
    {
        "content": "<p>we use self entirely in the closure<br>\nI\"ll probalby dump out the capture analysis for this</p>",
        "id": 238540162,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620851698
    },
    {
        "content": "<p>yeah</p>",
        "id": 238540189,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620851707
    },
    {
        "content": "<p>there might be some bugs lurking here</p>",
        "id": 238540199,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620851713
    },
    {
        "content": "<p>I agree that is curious</p>",
        "id": 238540225,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620851722
    },
    {
        "content": "<p>good idea to do some deep dives</p>",
        "id": 238540263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620851738
    },
    {
        "content": "<p>One issue with size is that we can't handle generics</p>",
        "id": 238540350,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620851767
    },
    {
        "content": "<p>what do you mean?</p>",
        "id": 238540388,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620851788
    },
    {
        "content": "<p>So if a closure is present within a function body that is generic over sometype T, layout computaiton fails</p>",
        "id": 238540397,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620851792
    },
    {
        "content": "<p><em>oh</em></p>",
        "id": 238540409,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620851798
    },
    {
        "content": "<p><a href=\"http://csclub.uwaterloo.ca/~a52arora/compiler_size\">http://csclub.uwaterloo.ca/~a52arora/compiler_size</a></p>",
        "id": 238540413,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620851802
    },
    {
        "content": "<p>Search for \"Failed\"</p>",
        "id": 238540423,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620851806
    },
    {
        "content": "<p>you mean you can't measure the size of (generic) closures because you are measuring them pre-monomorphization</p>",
        "id": 238540439,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620851814
    },
    {
        "content": "<p>I thinnk so</p>",
        "id": 238540542,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620851875
    },
    {
        "content": "<p>So I have moved this to mir_build instead of typeck</p>",
        "id": 238540624,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620851892
    },
    {
        "content": "<p>because i was running into some typeck erorrs</p>",
        "id": 238540644,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620851904
    },
    {
        "content": "<p>And that was suggested in compiler-help</p>",
        "id": 238540664,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620851912
    },
    {
        "content": "<p>I am wondering if we could move it to the monomorphizaion time</p>",
        "id": 238540807,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620851993
    },
    {
        "content": "<p>e.g., during codegen</p>",
        "id": 238540811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620851997
    },
    {
        "content": "<p>or the collector</p>",
        "id": 238540813,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620851999
    },
    {
        "content": "<p>then we could dump out every closure <em>in practice</em></p>",
        "id": 238540872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620852007
    },
    {
        "content": "<p>I could give you some tips on that</p>",
        "id": 238540915,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620852029
    },
    {
        "content": "<p>I'm not sure where that code would be</p>",
        "id": 238540922,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620852033
    },
    {
        "content": "<p>thank you, that would be helpful</p>",
        "id": 238540948,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620852050
    },
    {
        "content": "<p>i'm pulling up the code</p>",
        "id": 238540978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620852065
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_mir/src/monomorphize/collector.rs#L1-L2\">the collector</a></p>",
        "id": 238541010,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620852085
    },
    {
        "content": "<p>I'm trying to find the \"right place to put some code\"</p>",
        "id": 238541093,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620852124
    },
    {
        "content": "<p>i get 404</p>",
        "id": 238541122,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620852127
    },
    {
        "content": "<p>on that link</p>",
        "id": 238541134,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620852133
    },
    {
        "content": "<p>so you do</p>",
        "id": 238541157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620852141
    },
    {
        "content": "<p>try it now</p>",
        "id": 238541194,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620852159
    },
    {
        "content": "<p>you may want to intercept at <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_mir/src/monomorphize/collector.rs#L1011-L1018\">the <code>create_fn_mono_item</code> function</a></p>",
        "id": 238541315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620852231
    },
    {
        "content": "<p>that gets invoked each time we decide to generate code for a particular monomorphiztion</p>",
        "id": 238541408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620852257
    },
    {
        "content": "<p>right</p>",
        "id": 238541432,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620852269
    },
    {
        "content": "<p>you could check if the <code>Instance</code> refers to a closure</p>",
        "id": 238541473,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620852295
    },
    {
        "content": "<p>I'm assuming that would also give us the ty and the sustsituions</p>",
        "id": 238541513,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620852312
    },
    {
        "content": "<p>the Closure ty *</p>",
        "id": 238541599,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620852352
    },
    {
        "content": "<p>right</p>",
        "id": 238541619,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620852360
    },
    {
        "content": "<p>so an <code>Instance</code>...</p>",
        "id": 238541680,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620852371
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.Instance.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.Instance.html</a></p>",
        "id": 238541698,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620852383
    },
    {
        "content": "<p>you would be lookin for a <code>InstanceDef::Item</code></p>",
        "id": 238541733,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620852403
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/instance/enum.InstanceDef.html#variant.Item\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/instance/enum.InstanceDef.html#variant.Item</a></p>",
        "id": 238541734,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620852404
    },
    {
        "content": "<p>which basically has a <code>DefId</code> in there</p>",
        "id": 238541744,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620852412
    },
    {
        "content": "<p>honestly just call <code>def_id</code> method</p>",
        "id": 238541782,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620852425
    },
    {
        "content": "<p>and use <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/context/struct.TyCtxt.html#method.is_closure\"><code>is_closure</code></a> to test what it is</p>",
        "id": 238541867,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620852461
    },
    {
        "content": "<p>so something like <code>if tcx.is_closure(instance.def_id())</code></p>",
        "id": 238541946,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620852488
    },
    {
        "content": "<p>We would still need access to the typeckresults, which we won't have in case this is a downstream crate</p>",
        "id": 238541949,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620852491
    },
    {
        "content": "<p>just do it for local closures</p>",
        "id": 238541974,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620852501
    },
    {
        "content": "<p>okay</p>",
        "id": 238541987,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620852507
    },
    {
        "content": "<p><code>if instance.def_id().is_local() &amp;&amp; ...</code></p>",
        "id": 238542000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620852513
    },
    {
        "content": "<p>makes sense</p>",
        "id": 238542034,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620852526
    },
    {
        "content": "<p>I suppose if we are supposed to see an increase we will see it regardless</p>",
        "id": 238542079,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620852549
    },
    {
        "content": "<p>regardless of the substituted type</p>",
        "id": 238542112,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620852561
    },
    {
        "content": "<p>not necessarily</p>",
        "id": 238542262,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620852628
    },
    {
        "content": "<p>maybe? I'm not sure :)</p>",
        "id": 238542285,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620852639
    },
    {
        "content": "<p>I wouldn't be surprised if there were edge cases</p>",
        "id": 238542298,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620852644
    },
    {
        "content": "<p>fair enough, I was assuming all the generics conform to some trait. Maybe copy vs non-copy type</p>",
        "id": 238542384,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620852690
    },
    {
        "content": "<p>We'll find out haha</p>",
        "id": 238542401,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620852697
    },
    {
        "content": "<p>yep</p>",
        "id": 238542822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620852871
    },
    {
        "content": "<p>i think connecting at monomorphization time would be the easiest</p>",
        "id": 238542844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620852879
    },
    {
        "content": "<p>and it also might be good because</p>",
        "id": 238542857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620852884
    },
    {
        "content": "<p>maybe some change looks small but is big inpractice</p>",
        "id": 238542873,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620852892
    },
    {
        "content": "<p>fair enough</p>",
        "id": 238542944,
        "sender_full_name": "Aman Arora",
        "timestamp": 1620852921
    },
    {
        "content": "<p>I'd like some help to figure out how in <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_middle/src/ty/instance.rs#L527\">polymorphise</a> I get <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_mir/src/monomorphize/polymorphize.rs#L34\">unused generics</a> without reworking or duplicating a lot of the code for the two closure tys (before and after the feature)</p>",
        "id": 240095561,
        "sender_full_name": "Aman Arora",
        "timestamp": 1621882693
    },
    {
        "content": "<p>they may not have a lot of time to do so, but the expert in polymorphization is <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span></p>",
        "id": 240102935,
        "sender_full_name": "lqd",
        "timestamp": 1621885995
    },
    {
        "content": "<p>I don't have huge amounts of time right now, and I'm a little rusty (pun not intended), but I'll help where I can.</p>",
        "id": 240103177,
        "sender_full_name": "davidtwco",
        "timestamp": 1621886106
    },
    {
        "content": "<p>(quality pun <span aria-label=\"fire\" class=\"emoji emoji-1f525\" role=\"img\" title=\"fire\">:fire:</span>)</p>",
        "id": 240103480,
        "sender_full_name": "lqd",
        "timestamp": 1621886278
    },
    {
        "content": "<p>The current issue that I'm running into is that when I try compute the size of a closure in mir_build, we run into some closures that have generics they inherit from their parents that have not being monomorphised.</p>",
        "id": 240106801,
        "sender_full_name": "Aman Arora",
        "timestamp": 1621887858
    },
    {
        "content": "<p>Outside of how data is pipelined right now for the same def_id, I have another <code>ty::Closure</code>, that I'd like to profile the size of. And this represents the closure after the capture disjoint fields feature</p>",
        "id": 240106934,
        "sender_full_name": "Aman Arora",
        "timestamp": 1621887933
    },
    {
        "content": "<p>I'm tyring to figure out if there is a nice way to figure out the size of this closure without having to completely change how the data is pipelined.</p>",
        "id": 240107020,
        "sender_full_name": "Aman Arora",
        "timestamp": 1621887970
    },
    {
        "content": "<p>Sorry, didn't have time to respond to this last night, I'm not sure I exactly understand your problem - polymorphization's analysis presently determines whether a function/closure/generator/etc has generics which go unused - is your issue that the analysis is doing that incorrectly for some case, or that you need to modify the polymorphization logic to support RFC 2229's improvements to closure captures?</p>",
        "id": 240183664,
        "sender_full_name": "davidtwco",
        "timestamp": 1621947878
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116107\">davidtwco</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/meeting.202021-05-12/near/240183664\">said</a>:</p>\n<blockquote>\n<p>Sorry, didn't have time to respond to this last night, I'm not sure I exactly understand your problem - polymorphization's analysis presently determines whether a function/closure/generator/etc has generics which go unused - is your issue that the analysis is doing that incorrectly for some case, or that you need to modify the polymorphization logic to support RFC 2229's improvements to closure captures?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span>  I should've shared what I was trying. </p>\n<p><a href=\"https://github.com/sexxi-goose/rust/blob/7c8ac231481d302c6a66691fa8f6bb6ef9a9c49b/compiler/rustc_mir/src/monomorphize/collector.rs#L1017-L1026\">https://github.com/sexxi-goose/rust/blob/7c8ac231481d302c6a66691fa8f6bb6ef9a9c49b/compiler/rustc_mir/src/monomorphize/collector.rs#L1017-L1026</a></p>\n<p>So here old=pre feature new=post feature</p>\n<p>Even when the feature flag is not set, we compute the type of closure post feature and store it in TypeckResults. Currently the polymorhypishm passes around the def id to do most of the communicaiton. Is there a simpler way than to duplicate a lot of the code so that I can monomorphise the new closure type and get the size of it.</p>",
        "id": 240222878,
        "sender_full_name": "Aman Arora",
        "timestamp": 1621963962
    },
    {
        "content": "<p>Right now I get </p>\n<div class=\"codehilite\"><pre><span></span><code>0, Failed Unknown(impl FnMut(B, T) -&gt; B),  ....\n</code></pre></div>\n<p>and also </p>\n<div class=\"codehilite\"><pre><span></span><code>error: internal compiler error: compiler/rustc_traits/src/normalize_erasing_regions.rs:54:32: could not fully normalize `[closure@library/core/src/iter/traits/iterator.rs:250:13: 250:33]`\n</code></pre></div>",
        "id": 240223224,
        "sender_full_name": "Aman Arora",
        "timestamp": 1621964092
    }
]