[
    {
        "content": "<p>Hey all. Perhaps overwhelming description of open issues, implementation work, thoughts on my end <a href=\"https://paper.dropbox.com/doc/Upvar-Paths--Aa7C6aefXL6RNSXHuUu8jncVAg-PNRgk22ryKq1n3Wq3FXAO\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/Upvar-Paths--Aa7C6aefXL6RNSXHuUu8jncVAg-PNRgk22ryKq1n3Wq3FXAO\">here</a></p>",
        "id": 163490553,
        "sender_full_name": "ange",
        "timestamp": 1555436725
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> hey all</p>",
        "id": 163491174,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555437209
    },
    {
        "content": "<p>cc <span class=\"user-group-mention\" data-user-group-id=\"1175\">@WG-rfc-2229</span> -- brief sync</p>",
        "id": 163491178,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555437217
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> mentioned to me that they'll be busy for the next little bit owing to work stuff</p>",
        "id": 163491190,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555437233
    },
    {
        "content": "<p>I'll talk a look at what you wrote <span class=\"user-mention\" data-user-id=\"127677\">@ange</span>, and I'm hoping today to leave some notes on the freevars stuff</p>",
        "id": 163491253,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555437253
    },
    {
        "content": "<p>cool</p>",
        "id": 163491267,
        "sender_full_name": "ange",
        "timestamp": 1555437275
    },
    {
        "content": "<p>I'll be around to for clarifications/questions the next half hour or so</p>",
        "id": 163491286,
        "sender_full_name": "ange",
        "timestamp": 1555437292
    },
    {
        "content": "<p>async works too</p>",
        "id": 163491313,
        "sender_full_name": "ange",
        "timestamp": 1555437318
    },
    {
        "content": "<blockquote>\n<p>Hey all. Perhaps overwhelming description of open issues, implementation work, thoughts on my end <a href=\"https://paper.dropbox.com/doc/Upvar-Paths--Aa7C6aefXL6RNSXHuUu8jncVAg-PNRgk22ryKq1n3Wq3FXAO\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/Upvar-Paths--Aa7C6aefXL6RNSXHuUu8jncVAg-PNRgk22ryKq1n3Wq3FXAO\">here</a></p>\n</blockquote>\n<p>I see the <a href=\"https://paper.dropbox.com/doc/Upvar-Paths--AbX~sZfMQ9xWqxGhRpzf4teuAg-PNRgk22ryKq1n3Wq3FXAO#:uid=018734600287208144069502&amp;h2=Apr-16th-2019:\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/Upvar-Paths--AbX~sZfMQ9xWqxGhRpzf4teuAg-PNRgk22ryKq1n3Wq3FXAO#:uid=018734600287208144069502&amp;h2=Apr-16th-2019:\">notes from today</a> -- did you add material to the other sections, <span class=\"user-mention\" data-user-id=\"127677\">@ange</span>?</p>",
        "id": 163491834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555437664
    },
    {
        "content": "<p>yah</p>",
        "id": 163491967,
        "sender_full_name": "ange",
        "timestamp": 1555437742
    },
    {
        "content": "<p>I honestly don't know how to best do updates in such a doc; I think currently the easiest way might be for you to browse the history, the edits should be clustered together</p>",
        "id": 163492033,
        "sender_full_name": "ange",
        "timestamp": 1555437788
    },
    {
        "content": "<p>I tried to add open issues at some places, but really almost every section has something appended to it</p>",
        "id": 163492093,
        "sender_full_name": "ange",
        "timestamp": 1555437836
    },
    {
        "content": "<p>I'm thinking that the most effective way to progress here is probably to schedule some time for us to do a deep dive chat</p>",
        "id": 163492177,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555437870
    },
    {
        "content": "<p>I feel like I have to focus on this problem for 1-2h :)</p>",
        "id": 163492191,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555437880
    },
    {
        "content": "<p>What time zone are you in, <span class=\"user-mention\" data-user-id=\"127677\">@ange</span> ?</p>",
        "id": 163492223,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555437901
    },
    {
        "content": "<blockquote>\n<p>I feel like I have to focus on this problem for 1-2h :)</p>\n</blockquote>\n<p>Makes sense. Whatever time you can spend on it...</p>",
        "id": 163492244,
        "sender_full_name": "ange",
        "timestamp": 1555437912
    },
    {
        "content": "<p>currently EEST</p>",
        "id": 163492251,
        "sender_full_name": "ange",
        "timestamp": 1555437917
    },
    {
        "content": "<p>I don't know what EEST is :)</p>",
        "id": 163492365,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555437979
    },
    {
        "content": "<p>Ah, ok, Greek time ;)</p>",
        "id": 163492380,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555437991
    },
    {
        "content": "<p>sorry, eastern europe summer time</p>",
        "id": 163492385,
        "sender_full_name": "ange",
        "timestamp": 1555437996
    },
    {
        "content": "<p>yah</p>",
        "id": 163492387,
        "sender_full_name": "ange",
        "timestamp": 1555437998
    },
    {
        "content": "<p>OK, so, I could probably dedicate some time Friday morning (my time) -- say at 09:00 UTC-04:00</p>",
        "id": 163492741,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555438238
    },
    {
        "content": "<p>I'm afraid I can't do Friday this week, traveling to attend a wedding</p>",
        "id": 163492802,
        "sender_full_name": "ange",
        "timestamp": 1555438301
    },
    {
        "content": "<p>(so western hemisphere Thursday morning probably won't work for me either)</p>",
        "id": 163492878,
        "sender_full_name": "ange",
        "timestamp": 1555438341
    },
    {
        "content": "<p>fwiw, I can do up to 1am EEST if that would be helpful</p>",
        "id": 163493094,
        "sender_full_name": "ange",
        "timestamp": 1555438503
    },
    {
        "content": "<p>(currently on vacation :P)</p>",
        "id": 163493244,
        "sender_full_name": "ange",
        "timestamp": 1555438613
    },
    {
        "content": "<p>what about next Tuesday?</p>",
        "id": 163493724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555438968
    },
    {
        "content": "<p>sure</p>",
        "id": 163493740,
        "sender_full_name": "ange",
        "timestamp": 1555438981
    },
    {
        "content": "<p>ok let me add something to the compiler team calendar -- 10:30 UTC-04:00 (17:30 EEST, if I'm not mistaken) work for you?</p>",
        "id": 163493879,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555439071
    },
    {
        "content": "<p>yah, that's fine. one point though</p>",
        "id": 163493898,
        "sender_full_name": "ange",
        "timestamp": 1555439094
    },
    {
        "content": "<p>yep</p>",
        "id": 163493921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555439113
    },
    {
        "content": "<p>I'll only have like 3-4 free days after that to wrap up - going back to work full time in May, so dunno how much time I'll have to spend</p>",
        "id": 163493923,
        "sender_full_name": "ange",
        "timestamp": 1555439120
    },
    {
        "content": "<p>but I think this is a useful discussion to have regardless</p>",
        "id": 163493933,
        "sender_full_name": "ange",
        "timestamp": 1555439130
    },
    {
        "content": "<p>agreed</p>",
        "id": 163493942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555439134
    },
    {
        "content": "<p>for this WG</p>",
        "id": 163493944,
        "sender_full_name": "ange",
        "timestamp": 1555439134
    },
    {
        "content": "<p>zulip?</p>",
        "id": 163493950,
        "sender_full_name": "ange",
        "timestamp": 1555439142
    },
    {
        "content": "<p>Yeah</p>",
        "id": 163493955,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555439145
    },
    {
        "content": "<blockquote>\n<p>I'll only have like 3-4 free days after that to wrap up - going back to work full time in May, so dunno how much time I'll have to spend</p>\n</blockquote>\n<p>I don't really have much time before that, I fear :(</p>",
        "id": 163494015,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555439166
    },
    {
        "content": "<p>that's quite alright :-)</p>",
        "id": 163494026,
        "sender_full_name": "ange",
        "timestamp": 1555439177
    },
    {
        "content": "<p>glad I don't need to set up zoom :-)</p>",
        "id": 163494033,
        "sender_full_name": "ange",
        "timestamp": 1555439194
    },
    {
        "content": "<p>I hope I can figure out some issues on my own till then, or at least tie up some loose ends</p>",
        "id": 163494055,
        "sender_full_name": "ange",
        "timestamp": 1555439217
    },
    {
        "content": "<p>I'll see if I can carve out some time for \"pre-thinking\" and to review your notes in more detail</p>",
        "id": 163494702,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555439660
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> just a suggestion, it might make sense to skim the dropbox paper first if you haven't already. No need to worry about duplication of questions though I'll figure that out after the fact</p>",
        "id": 163995207,
        "sender_full_name": "ange",
        "timestamp": 1556030076
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"127677\">@ange</span> -- sounds good, I've been writing some notes already</p>",
        "id": 163995282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556030132
    },
    {
        "content": "<p>cool</p>",
        "id": 163995322,
        "sender_full_name": "ange",
        "timestamp": 1556030158
    },
    {
        "content": "<p>umm yah, AFAICT the <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=860e6666c49cd6334634f6fe942857d6\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=860e6666c49cd6334634f6fe942857d6\">example</a> you're putting forward is not addressed in the RFC</p>",
        "id": 163995745,
        "sender_full_name": "ange",
        "timestamp": 1556030474
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127677\">@ange</span> ok so it's probably good for us to elaborate our goals a bit</p>",
        "id": 163995758,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556030489
    },
    {
        "content": "<p>one part of it I think should be to raise up interesting lang design questions :)</p>",
        "id": 163995763,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556030495
    },
    {
        "content": "<p>but we should also talk about what the impl in rustc will need</p>",
        "id": 163995771,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556030504
    },
    {
        "content": "<p>sure</p>",
        "id": 163995778,
        "sender_full_name": "ange",
        "timestamp": 1556030511
    },
    {
        "content": "<p>I was wondering -- why did you extend <code>Rvalue</code>, was there a particular motivating example</p>",
        "id": 163995784,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556030518
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> there was, but it's been so long I don't really remember -- I'll have to get back to you on that</p>",
        "id": 163995847,
        "sender_full_name": "ange",
        "timestamp": 1556030544
    },
    {
        "content": "<p>it could also be that I was confused re: what the RFC required (e.g. my commit message mentions indexing), so maybe it's a red herring, I would suggest tabling this until I can give a definitive example (or not)</p>",
        "id": 163995922,
        "sender_full_name": "ange",
        "timestamp": 1556030631
    },
    {
        "content": "<p>re: the pointer overwrite example above, this feels like a definitional thing (i.e. could go either way if one were starting from scratch), but it seems we might need to pick between backwards compat regarding that and special treatment of box?</p>",
        "id": 163996087,
        "sender_full_name": "ange",
        "timestamp": 1556030721
    },
    {
        "content": "<p>Well, <em>strict</em> backwards compatibility may not be a concern</p>",
        "id": 163996122,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556030747
    },
    {
        "content": "<p>e.g., my example that I gave <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=5c5c43b4e1f0b123681b8b48783d6546\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=5c5c43b4e1f0b123681b8b48783d6546\">would not compile today</a></p>",
        "id": 163996130,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556030755
    },
    {
        "content": "<p>I was skimming your notes about drop and so forth</p>",
        "id": 163996303,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556030837
    },
    {
        "content": "<p>what would be the considerations for lax backwards compatibility? user astonishment?</p>",
        "id": 163996309,
        "sender_full_name": "ange",
        "timestamp": 1556030843
    },
    {
        "content": "<p>My concern is user astonishment, yes</p>",
        "id": 163996324,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556030855
    },
    {
        "content": "<p>I general I think that -- unless you have a <code>move</code> closure -- the variables in the surrounding stack frame and those in the closure should not \"go out of sync\"</p>",
        "id": 163996404,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556030889
    },
    {
        "content": "<p>i.e., if the code compiles, then the same path in both places should yield same value</p>",
        "id": 163996429,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556030906
    },
    {
        "content": "<p>But this is a bit of a \"design decision\", worth surfacing</p>",
        "id": 163996442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556030916
    },
    {
        "content": "<p>(Still, that is -- I think -- a useful invariant that Rust maintains today, and it is by design that it does so)</p>",
        "id": 163996468,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556030939
    },
    {
        "content": "<p>(in the past, we considered \"auto-inferring\" <code>move</code> annotations on closures, for example, but opted against it for this reason -- and because we can't always do so)</p>",
        "id": 163996490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556030953
    },
    {
        "content": "<p>well, if closures are defined to be minimal, this feels like a teachability thing, i.e. a \"but beware of references\" paragraph somewhere. but I guess that's something to get wider feedback on</p>",
        "id": 163996505,
        "sender_full_name": "ange",
        "timestamp": 1556030967
    },
    {
        "content": "<p>ah</p>",
        "id": 163996519,
        "sender_full_name": "ange",
        "timestamp": 1556030979
    },
    {
        "content": "<p>so I suspect that you added the rvalue feedback because</p>",
        "id": 163996728,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556031094
    },
    {
        "content": "<p>of overloaded index and deref operators</p>",
        "id": 163996736,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556031105
    },
    {
        "content": "<p>i.e., if we have <code>some_vec[3].foo</code>, we will probably give back a cmt that roughly corresponds to this desugared version:</p>\n<div class=\"codehilite\"><pre><span></span>tmp = Index::index(&amp;some_vec, 3);\n&amp;(*tmp).foo\n</pre></div>\n\n\n<p>i.e., this \"temporary\" is the rvalue</p>",
        "id": 163996834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556031154
    },
    {
        "content": "<p>but then again that seems .. sort of ok .. in that there is <em>also</em> a borrow of <code>some_vec</code>, and indeed we probably need to capture the whole vec for this reason</p>",
        "id": 163996896,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556031205
    },
    {
        "content": "<p>but I guess that if we had a notion of \"pure\" overloaded ops, we would have trouble</p>",
        "id": 163996911,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556031217
    },
    {
        "content": "<p>yah. it's just that the RFC explicitly specifies that indexing is impure, so it could be that I was just confused</p>",
        "id": 163996913,
        "sender_full_name": "ange",
        "timestamp": 1556031218
    },
    {
        "content": "<p>and so perhaps you were motivated by (e.g.) <code>Box</code></p>",
        "id": 163996930,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556031228
    },
    {
        "content": "<p>that does ring a bell, but I do know I didn't have any <code>Box</code> testcases back then -- perhaps I was just trying to code ahead</p>",
        "id": 163997035,
        "sender_full_name": "ange",
        "timestamp": 1556031271
    },
    {
        "content": "<p>I keep learning about both rustc and rust semantics, so I wouldn't read too much into my implementation choices from 3 weeks back</p>",
        "id": 163997097,
        "sender_full_name": "ange",
        "timestamp": 1556031327
    },
    {
        "content": "<p>it appears you <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/upvar.20path/near/161461243\" title=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/upvar.20path/near/161461243\">asked me about it here</a></p>",
        "id": 163997133,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556031360
    },
    {
        "content": "<p>it looks like you were concerned about <code>foo.bar[x].baz</code></p>",
        "id": 163997230,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556031417
    },
    {
        "content": "<p>in such a case, we probably want to borrow <code>&amp;foo.bar</code></p>",
        "id": 163997250,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556031427
    },
    {
        "content": "<p><em>however</em>, I would expect that the current code will give you <em>two</em> callbacks</p>",
        "id": 163997262,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556031434
    },
    {
        "content": "<p>one for <code>foo.bar</code> and one for <code>(rvalue).baz</code>, something like that</p>",
        "id": 163997275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556031448
    },
    {
        "content": "<p>right, I remember now, I wanted to look past the indexing from right to left</p>",
        "id": 163997304,
        "sender_full_name": "ange",
        "timestamp": 1556031475
    },
    {
        "content": "<p>hmm. I'm not sure that's the case then, but it could be that I hadn't instrumented all the delegate callbacks back then, so I misunderstood and thought that was necessary</p>",
        "id": 163997387,
        "sender_full_name": "ange",
        "timestamp": 1556031514
    },
    {
        "content": "<p>I can try and verify whether that's the case or not</p>",
        "id": 163997398,
        "sender_full_name": "ange",
        "timestamp": 1556031525
    },
    {
        "content": "<p>it's possible the code doesn't, but it seems like it'd be a gaping hole in the old borrow check</p>",
        "id": 163997405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556031531
    },
    {
        "content": "<p>which..of course..is possible, there were numerous bugs :)</p>",
        "id": 163997412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556031536
    },
    {
        "content": "<p>In any case, I do think it's worth us looking a bit to the future</p>",
        "id": 163997488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556031587
    },
    {
        "content": "<p>I would say it's extraordinarily more likely that I didn't really under which circumstances each callback was called (I'm still not 100% sure I get all call paths)</p>",
        "id": 163997494,
        "sender_full_name": "ange",
        "timestamp": 1556031593
    },
    {
        "content": "<p>The existing upvar code is based on this <code>ExprUseVisitor</code>, which is shared by typeck and the old, AST-based borrowck</p>",
        "id": 163997532,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556031603
    },
    {
        "content": "<p>right</p>",
        "id": 163997570,
        "sender_full_name": "ange",
        "timestamp": 1556031609
    },
    {
        "content": "<p>(as well as two other pieces of code, both of which I think are outdated in a fashion similar to borrow check)</p>",
        "id": 163997628,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556031649
    },
    {
        "content": "<p>my general feeling is that it makes sense to rewrite expr-use-visitor to be cleaner and more tailored to the needs of upvarck</p>",
        "id": 163997683,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556031668
    },
    {
        "content": "<p>this would probably include creating a new data structure that would replace cmt for this purpose</p>",
        "id": 163997721,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556031696
    },
    {
        "content": "<p>probably this is the <code>CapturePath</code> that you had talked about</p>",
        "id": 163997741,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556031709
    },
    {
        "content": "<blockquote>\n<p>my general feeling is that it makes sense to rewrite expr-use-visitor to be cleaner and more tailored to the needs of upvarck</p>\n</blockquote>\n<p>the integration with <a href=\"http://upvar.rs\" target=\"_blank\" title=\"http://upvar.rs\">upvar.rs</a> has always been a bit crufty</p>",
        "id": 163997820,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556031735
    },
    {
        "content": "<p>what parts of <code>ExprUseVisitor</code> strike you as redundant for <code>upvar.rs</code>?</p>",
        "id": 163997831,
        "sender_full_name": "ange",
        "timestamp": 1556031743
    },
    {
        "content": "<p>it's not so much that they are <em>redundant</em> as <em>superfluous</em></p>",
        "id": 163997891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556031787
    },
    {
        "content": "<p>i.e., unnecessary</p>",
        "id": 163997900,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556031793
    },
    {
        "content": "<p>but here are some examples</p>",
        "id": 163997911,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556031803
    },
    {
        "content": "<p>for one thing, the ExprUseVisitor tries to \"desugar\" references to upvars</p>",
        "id": 163997924,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556031818
    },
    {
        "content": "<p>this is kind of awkward for us</p>",
        "id": 163997932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556031824
    },
    {
        "content": "<p>we have to \"resugar\" those references by intercepting the \"notes\" that are attached to cmts</p>",
        "id": 163997948,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556031838
    },
    {
        "content": "<p>I guess in general the <code>ExprUseVisitor</code> is doing more desugaring than I think we truly want</p>",
        "id": 163998005,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556031852
    },
    {
        "content": "<p>the case of <code>Rvalue</code> is another such example</p>",
        "id": 163998022,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556031864
    },
    {
        "content": "<p>right, AFAIU this is needed for borrowck, though I'm totally unclear on the details</p>",
        "id": 163998027,
        "sender_full_name": "ange",
        "timestamp": 1556031869
    },
    {
        "content": "<p>that said, we do want it to do <em>some</em> amount of -- at least normalization</p>",
        "id": 163998031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556031873
    },
    {
        "content": "<p>yes, it is, but if we made a split copy of the code that was tailored to the needs of <a href=\"http://upvar.rs\" target=\"_blank\" title=\"http://upvar.rs\">upvar.rs</a>, it could be simpler</p>",
        "id": 163998039,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556031884
    },
    {
        "content": "<p>that's my general point</p>",
        "id": 163998041,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556031886
    },
    {
        "content": "<p>hmm</p>",
        "id": 163998052,
        "sender_full_name": "ange",
        "timestamp": 1556031894
    },
    {
        "content": "<p>also relevant here is looking -- as you were starting to do -- at the code which comes after</p>",
        "id": 163998088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556031912
    },
    {
        "content": "<p>it's a fair point - do you think it would make sense to reuse <code>cmt_</code> and aim to trim it when upvar becomes the sole user?</p>",
        "id": 163998094,
        "sender_full_name": "ange",
        "timestamp": 1556031919
    },
    {
        "content": "<blockquote>\n<p>yes, it is, but if we made a split copy of the code that was tailored to the needs of <a href=\"http://upvar.rs\" target=\"_blank\" title=\"http://upvar.rs\">upvar.rs</a>, it could be simpler</p>\n</blockquote>\n<p>( in general, I think re-using and sharing code is good, but since the old borrowck is going to be deleted, it won't be shared anymore )</p>",
        "id": 163998112,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556031933
    },
    {
        "content": "<blockquote>\n<p>it's a fair point - do you think it would make sense to reuse <code>cmt_</code> and aim to trim it when upvar becomes the sole user?</p>\n</blockquote>\n<p>I do not, I would rewrite that code from scratch</p>",
        "id": 163998122,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556031942
    },
    {
        "content": "<p>it's quite old</p>",
        "id": 163998124,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556031943
    },
    {
        "content": "<p>you can tell by the naming conventions ;)</p>",
        "id": 163998128,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556031949
    },
    {
        "content": "<p>I feel like what we want is something much closer to the HIR</p>",
        "id": 163998223,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556031995
    },
    {
        "content": "<p>well, \"old\" is not <em>necessarily</em> bad in my book :-) but as there are specific changes to be made, sure</p>",
        "id": 163998286,
        "sender_full_name": "ange",
        "timestamp": 1556032034
    },
    {
        "content": "<p>that is, we want simpler paths that are much closer to the what the user wrote. But it's interesting to think about just what bits of extra info we <em>do</em> need</p>",
        "id": 163998287,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556032034
    },
    {
        "content": "<blockquote>\n<p>well, \"old\" is not <em>necessarily</em> bad in my book :-) but as there are specific changes to be made, sure</p>\n</blockquote>\n<p>no, I agree, but</p>",
        "id": 163998370,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556032084
    },
    {
        "content": "<p>I think I get where you're coming from here - this might be an opportunity to reduce some of the technical debt in the compiler and, if so, we should take it</p>",
        "id": 163998388,
        "sender_full_name": "ange",
        "timestamp": 1556032099
    },
    {
        "content": "<p>yes, basically that</p>",
        "id": 163998399,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556032105
    },
    {
        "content": "<p>so, let's imagine that we created a <code>CapturePath</code> like type</p>",
        "id": 163998415,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556032120
    },
    {
        "content": "<p>I think it would be fairly simple, probably reasonably similar to the MIR Place</p>",
        "id": 163998434,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556032138
    },
    {
        "content": "<p>personally, I'd be much more comfortable doing that if I had extensive tests that fully exercise the code though (so, in my mind, that would be a mostly complete end to end implementation of the RFC)</p>",
        "id": 163998442,
        "sender_full_name": "ange",
        "timestamp": 1556032142
    },
    {
        "content": "<p>(though the new MIR place that we're trying to move to, not the current one)</p>",
        "id": 163998457,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556032149
    },
    {
        "content": "<p>I haven't looked at MIR Place 2.0 yet</p>",
        "id": 163998491,
        "sender_full_name": "ange",
        "timestamp": 1556032187
    },
    {
        "content": "<p>It's not that complex, it's basically a re-oriented data structure that is better optimized for going <em>forward</em></p>",
        "id": 163998565,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556032214
    },
    {
        "content": "<p>that's what we need for this RFC, yah</p>",
        "id": 163998602,
        "sender_full_name": "ange",
        "timestamp": 1556032257
    },
    {
        "content": "<p>the main change is that you have (sort of) <code>(CapturePathBase, Vec&lt;CapturePathExtension&gt;)</code></p>",
        "id": 163998644,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556032294
    },
    {
        "content": "<p>where <code>CapturePathExtension</code> is like deref, field, index</p>",
        "id": 163998654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556032303
    },
    {
        "content": "<p>why index?</p>",
        "id": 163998720,
        "sender_full_name": "ange",
        "timestamp": 1556032337
    },
    {
        "content": "<blockquote>\n<p>personally, I'd be much more comfortable doing that if I had extensive tests that fully exercise the code though (so, in my mind, that would be a mostly complete end to end implementation of the RFC)</p>\n</blockquote>\n<p>I do think we should think about tests here -- but of course we don't have any tests for this new feature, since it doesn't exist. What we <em>do</em> have (for the old code) is borrow check tests, that show it is \"detecting\" the mutations, borrows, etc at least a lot of the time. So this is probably what we'd have to reproduce.</p>",
        "id": 163998727,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556032348
    },
    {
        "content": "<p>But that's good anyway</p>",
        "id": 163998734,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556032356
    },
    {
        "content": "<p>because those tests exist for simple fns, but not necessarily for closures</p>",
        "id": 163998742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556032362
    },
    {
        "content": "<p>(and indeed creating a thorough test suite is I think a key part of the work to be done)</p>",
        "id": 163998759,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556032380
    },
    {
        "content": "<blockquote>\n<p>why index?</p>\n</blockquote>\n<p>you're correct that for capture paths it could be excluded</p>",
        "id": 163998779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556032389
    },
    {
        "content": "<p>it is part of the \"generality\"</p>",
        "id": 163998786,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556032397
    },
    {
        "content": "<p>that is, it is part of MIR</p>",
        "id": 163998794,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556032406
    },
    {
        "content": "<p>I only meant, this would be one argument for going with <code>cmt_</code>, then rewriting after we're comfortable it mostly works -- but that's probably me being unsafe about my knowledge of rustc</p>",
        "id": 163998817,
        "sender_full_name": "ange",
        "timestamp": 1556032423
    },
    {
        "content": "<blockquote>\n<p>that is, it is part of MIR</p>\n</blockquote>\n<p>Oh you were describing Place 2.0? OK</p>",
        "id": 163998883,
        "sender_full_name": "ange",
        "timestamp": 1556032445
    },
    {
        "content": "<p>I see. Well, it seems to have a \"base case\" problem -- how are we confident that it mostly works :)</p>",
        "id": 163998897,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556032455
    },
    {
        "content": "<p>In any case, the next question</p>",
        "id": 163998914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556032475
    },
    {
        "content": "<p>presume we <em>had</em> this notion of capture-path</p>",
        "id": 163998917,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556032480
    },
    {
        "content": "<p>Well, currently I'm trying to extend my testcases to exercise all paths in <code>upvar.rs </code>:-)</p>",
        "id": 163998935,
        "sender_full_name": "ange",
        "timestamp": 1556032490
    },
    {
        "content": "<p>so, to talk about the tests for a moemnt</p>",
        "id": 163998961,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556032515
    },
    {
        "content": "<blockquote>\n<p>Well, currently I'm trying to extend my testcases to exercise all paths in <code>upvar.rs </code>:-)</p>\n</blockquote>\n<p>(I know path coverage isn't enough)</p>",
        "id": 163998966,
        "sender_full_name": "ange",
        "timestamp": 1556032519
    },
    {
        "content": "<p>esp .give as your time is limited :)</p>",
        "id": 163998969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556032523
    },
    {
        "content": "<p>I think a really great think we could focus on right now</p>",
        "id": 163998978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556032528
    },
    {
        "content": "<p>is trying to map out the scenarios that make sure we have tests covering them and expected outcomes</p>",
        "id": 163998990,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556032543
    },
    {
        "content": "<p>I'm trying to think what the \"matrix\" looks like</p>",
        "id": 163999059,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556032565
    },
    {
        "content": "<p>(it seems like you've been doing a lot of that work)</p>",
        "id": 163999081,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556032582
    },
    {
        "content": "<p>basically I think some of the key \"unresolved questions\" of the RFC were around the specifics of the \"capture\" algorithm</p>",
        "id": 163999091,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556032599
    },
    {
        "content": "<p>(though the hardest one to answer are the potential changes to drop order)</p>",
        "id": 163999104,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556032610
    },
    {
        "content": "<blockquote>\n<p>(it seems like you've been doing a lot of that work)</p>\n</blockquote>\n<p>most of what I have is in <a href=\"https://github.com/aoikonomopoulos/rust/blob/b44513e3b7fb25c370fb91e5271f30701bbb09fe/src/test/ui/closures/closure-partial-captures.rs\" target=\"_blank\" title=\"https://github.com/aoikonomopoulos/rust/blob/b44513e3b7fb25c370fb91e5271f30701bbb09fe/src/test/ui/closures/closure-partial-captures.rs\">https://github.com/aoikonomopoulos/rust/blob/b44513e3b7fb25c370fb91e5271f30701bbb09fe/src/test/ui/closures/closure-partial-captures.rs</a> fwiw</p>",
        "id": 163999151,
        "sender_full_name": "ange",
        "timestamp": 1556032659
    },
    {
        "content": "<p>great</p>",
        "id": 163999297,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556032755
    },
    {
        "content": "<blockquote>\n<p>I think a really great think we could focus on right now</p>\n</blockquote>\n<p>Agreed, though I would add that having a less fuzzy implementation plan for the next steps would make this much easier for people to work on piecemeal</p>",
        "id": 163999299,
        "sender_full_name": "ange",
        "timestamp": 1556032759
    },
    {
        "content": "<p>yes, it's worth trying to talk out that plan a bit more</p>",
        "id": 163999307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556032772
    },
    {
        "content": "<p>one nice thing about this refactoring that I'm sort of pitching, of course, is that we can refactor <a href=\"http://upvar.rs\" target=\"_blank\" title=\"http://upvar.rs\">upvar.rs</a> <em>as it is now</em> (without supporting (yet) RFC 2229) and use our test suite and crater to check for problems</p>",
        "id": 163999402,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556032809
    },
    {
        "content": "<p>that should shake out most of the bugs</p>",
        "id": 163999408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556032818
    },
    {
        "content": "<p>(and help us grow our test suite, since any bugs we find with crater that weren't detected by our tests are good candidates for unit tests)</p>",
        "id": 163999428,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556032837
    },
    {
        "content": "<p>anyway, the next question I think is what canges downstream</p>",
        "id": 163999481,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556032870
    },
    {
        "content": "<p>as you highlight in your doc, there are lots of places where we talk about \"upvars\" =)</p>",
        "id": 163999492,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556032883
    },
    {
        "content": "<p>The most immediate thing would be that we have to alter HAIR construction -- right now, the upvars are always individual variables. We would presumably load use the capture path to construct a more precise result.</p>",
        "id": 163999768,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556033061
    },
    {
        "content": "<blockquote>\n<p>The most immediate thing would be that we have to alter HAIR construction -- right now, the upvars are always individual variables. We would presumably load use the capture path to construct a more precise result.</p>\n</blockquote>\n<p>So, I have this relevant note in the doc:<br>\nAlternatively, we could do the rewriting of both the capturing and the accessing during translation to HAIR or MIR. This would mean changing the number of upvar captures after type/borrow checking though. The implementation might end up a bit more involved and there’s less of a safety net.</p>",
        "id": 163999933,
        "sender_full_name": "ange",
        "timestamp": 1556033186
    },
    {
        "content": "<p>I don't really think we should change the basic shape of how things work today</p>",
        "id": 164000064,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556033279
    },
    {
        "content": "<p>They are this way for a reason :)</p>",
        "id": 164000106,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556033283
    },
    {
        "content": "<p>That is, I think that HAIR should make explicit the paths that it accesses</p>",
        "id": 164000126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556033299
    },
    {
        "content": "<p>MIR construction really wouldn't have to change at all</p>",
        "id": 164000143,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556033315
    },
    {
        "content": "<p>Well, that's not quite true</p>",
        "id": 164000161,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556033332
    },
    {
        "content": "<p>The complex bit is now so much constructing the closure</p>",
        "id": 164000170,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556033338
    },
    {
        "content": "<p>The complex bit is constructing the closure <em>body</em></p>",
        "id": 164000187,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556033351
    },
    {
        "content": "<p>in particular, right now, we can intercept just the root local variable access</p>",
        "id": 164000209,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556033367
    },
    {
        "content": "<p>and translate it to an upvar access</p>",
        "id": 164000214,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556033372
    },
    {
        "content": "<p>ok, so the fundamental issue I'm worried about here is that we can change what's captured in <code>upvar.rs</code>, but we can't change what's used until HAIR translation, so how will type checking work?</p>",
        "id": 164000219,
        "sender_full_name": "ange",
        "timestamp": 1556033375
    },
    {
        "content": "<p>but we now have to intercept arbitrary points</p>",
        "id": 164000223,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556033376
    },
    {
        "content": "<p>right</p>",
        "id": 164000232,
        "sender_full_name": "ange",
        "timestamp": 1556033387
    },
    {
        "content": "<blockquote>\n<p>ok, so the fundamental issue I'm worried about here is that we can change what's captured in <code>upvar.rs</code>, but we can't change what's used until HAIR translation, so how will type checking work?</p>\n</blockquote>\n<p>I don't quite understand this concern</p>",
        "id": 164000240,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556033397
    },
    {
        "content": "<blockquote>\n<p>but we now have to intercept arbitrary points</p>\n</blockquote>\n<p>so we need some form of data structure that lists out those points, I think</p>",
        "id": 164000307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556033408
    },
    {
        "content": "<p>it's basically what you just said, I think</p>",
        "id": 164000313,
        "sender_full_name": "ange",
        "timestamp": 1556033414
    },
    {
        "content": "<p>this seems relevant to the capture-path design, as well</p>",
        "id": 164000318,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556033418
    },
    {
        "content": "<p>would the expr adjustments work?</p>",
        "id": 164000328,
        "sender_full_name": "ange",
        "timestamp": 1556033431
    },
    {
        "content": "<p>I mean, with a new adjustment type</p>",
        "id": 164000343,
        "sender_full_name": "ange",
        "timestamp": 1556033448
    },
    {
        "content": "<p>i.e., if we keep the basic model of expr-use-visitor, then we're going to be getting various callbacks saying \"this capture-path is accessed at this point\"</p>",
        "id": 164000377,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556033481
    },
    {
        "content": "<p>we need to be able to revisit those points and say \"map point X to upvar U\"</p>",
        "id": 164000397,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556033507
    },
    {
        "content": "<p>right. and we don't know what we want to rewrite it to until we've visited the whole closure body</p>",
        "id": 164000398,
        "sender_full_name": "ange",
        "timestamp": 1556033508
    },
    {
        "content": "<p>right</p>",
        "id": 164000403,
        "sender_full_name": "ange",
        "timestamp": 1556033516
    },
    {
        "content": "<p>well</p>",
        "id": 164000459,
        "sender_full_name": "ange",
        "timestamp": 1556033526
    },
    {
        "content": "<p>yeah; I mean one thing we might do is just revisit the body again once we've got the answer, but we might also remember the points we need and adjust it as we go. that's an interesting question.</p>",
        "id": 164000475,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556033541
    },
    {
        "content": "<p>I would say it's \"map point X to upvar U + some sub path\"</p>",
        "id": 164000486,
        "sender_full_name": "ange",
        "timestamp": 1556033553
    },
    {
        "content": "<p>no, I wouldn't say that</p>",
        "id": 164000495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556033569
    },
    {
        "content": "<p>both would be possible perhaps</p>",
        "id": 164000506,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556033584
    },
    {
        "content": "<p>but I think that e.g. if we have <code>a.b.c.d</code>, and we wind up deciding to capture <code>a.b</code></p>",
        "id": 164000517,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556033596
    },
    {
        "content": "<p>ok, but in the general case there will be some subpath, no?</p>",
        "id": 164000519,
        "sender_full_name": "ange",
        "timestamp": 1556033603
    },
    {
        "content": "<p>we should not map <code>a.b.c.d</code> to \"<code>a.b</code> + c.d`</p>",
        "id": 164000523,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556033607
    },
    {
        "content": "<p>we should instead remap the <code>a.b</code> location</p>",
        "id": 164000533,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556033623
    },
    {
        "content": "<p>i.e., if the input is something like:</p>\n<ul>\n<li>Node 0: <code>d</code><ul>\n<li>Node 1: <code>c</code><ul>\n<li>Node 2: <code>b</code><ul>\n<li>Node 3: <code>a</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>we could map node 0 to <code>upvar 0 + c.d</code></p>",
        "id": 164000606,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556033655
    },
    {
        "content": "<p>I think we're saying the same thing? you would convert that to <code>env.0.c.d</code></p>",
        "id": 164000611,
        "sender_full_name": "ange",
        "timestamp": 1556033662
    },
    {
        "content": "<p>or we could map node 2 to upvar 0</p>",
        "id": 164000615,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556033665
    },
    {
        "content": "<p>right</p>",
        "id": 164000637,
        "sender_full_name": "ange",
        "timestamp": 1556033687
    },
    {
        "content": "<blockquote>\n<p>I think we're saying the same thing? you would convert that to <code>env.0.c.d</code></p>\n</blockquote>\n<p>the point is, the data structure that does the mapping is a map of <code>NodeId -&gt; UpvarId</code> or something</p>",
        "id": 164000638,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556033688
    },
    {
        "content": "<p>it doesn't know anything about the \"suffix\"</p>",
        "id": 164000644,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556033697
    },
    {
        "content": "<p>ah I see what you mean, yah</p>",
        "id": 164000656,
        "sender_full_name": "ange",
        "timestamp": 1556033704
    },
    {
        "content": "<p>you asked about adjustments:</p>",
        "id": 164000672,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556033716
    },
    {
        "content": "<p>one interesting question is whether we would ever capture \"mid adjustment\"</p>",
        "id": 164000681,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556033721
    },
    {
        "content": "<p>heh</p>",
        "id": 164000696,
        "sender_full_name": "ange",
        "timestamp": 1556033734
    },
    {
        "content": "<p>it'd be nice if we didn't :)</p>",
        "id": 164000704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556033742
    },
    {
        "content": "<p>I'll take your word for it :-)</p>",
        "id": 164000722,
        "sender_full_name": "ange",
        "timestamp": 1556033760
    },
    {
        "content": "<p>that it's even possible, in fact</p>",
        "id": 164000784,
        "sender_full_name": "ange",
        "timestamp": 1556033778
    },
    {
        "content": "<p>well I mean a simple example would be something like <code>x.y</code> -- if <code>x: &amp;mut Foo</code>, then this has an \"adjustment\" like <code>(*x).y</code></p>",
        "id": 164000808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556033808
    },
    {
        "content": "<p>you could imagine us choosing to capture <code>*x</code></p>",
        "id": 164000815,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556033817
    },
    {
        "content": "<p>e.g., if there is also a use of <code>*x</code> but not <code>x</code> itself</p>",
        "id": 164000842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556033830
    },
    {
        "content": "<p>ugh</p>",
        "id": 164000852,
        "sender_full_name": "ange",
        "timestamp": 1556033844
    },
    {
        "content": "<p>but I .. think we could probably \"equally well\" choose <code>x</code>, in terms of whether the <em>user</em> cares</p>",
        "id": 164000853,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556033844
    },
    {
        "content": "<p>so we might want to take that into account or something</p>",
        "id": 164000878,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556033861
    },
    {
        "content": "<p>(although it might not be so bad if we did intercept mid-adjustment)</p>",
        "id": 164000891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556033874
    },
    {
        "content": "<p>still, it sounds like a pain</p>",
        "id": 164000898,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556033877
    },
    {
        "content": "<p>that warrants a TODO at the very least, yah</p>",
        "id": 164000899,
        "sender_full_name": "ange",
        "timestamp": 1556033877
    },
    {
        "content": "<p>anyway, assuming we handle that</p>",
        "id": 164001028,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556033953
    },
    {
        "content": "<p>I think that MIR construction wouldnt' have to change much, if at all</p>",
        "id": 164001042,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556033961
    },
    {
        "content": "<p>the work is mostly going to be handled in the HIR -&gt; HAIR lowering</p>",
        "id": 164001057,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556033968
    },
    {
        "content": "<p>now, MIR <em>borrow check</em>, on the other hand, may need to change, but I think primarily around the diagnostics</p>",
        "id": 164001132,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556034003
    },
    {
        "content": "<p>this is going to be somewhat non-trivial, likely</p>",
        "id": 164001152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556034009
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>I think we're saying the same thing? you would convert that to <code>env.0.c.d</code></p>\n</blockquote>\n<p>the point is, the data structure that does the mapping is a map of <code>NodeId -&gt; UpvarId</code> or something</p>\n</blockquote>\n<p>Hmm. How do you build that up, exactly? To decide what node you want to rewrite, you need to have seen all paths first, no?</p>",
        "id": 164001160,
        "sender_full_name": "ange",
        "timestamp": 1556034014
    },
    {
        "content": "<blockquote>\n<p>the work is mostly going to be handled in the HIR -&gt; HAIR lowering</p>\n</blockquote>\n<p>How will this work, exactly? AFAIU, if we change the Upvar but only do the rewriting of the access in the HAIR translation, won't the types mismatch in the meantime?</p>",
        "id": 164001175,
        "sender_full_name": "ange",
        "timestamp": 1556034030
    },
    {
        "content": "<blockquote>\n<p>Hmm. How do you build that up, exactly? To decide what node you want to rewrite, you need to have seen all paths first, no?</p>\n</blockquote>\n<p>Yes, we either have to walk the body again to build the map, or else we have to keep enough data from the first walk that we can build it</p>",
        "id": 164001205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556034057
    },
    {
        "content": "<p>there is a bit of tension here in that the \"capture path\" would like to be \"disconnected\" from the specific place it appears <em>sometimes</em> but not always</p>",
        "id": 164001276,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556034099
    },
    {
        "content": "<p>i.e., if the capture-path included the id of the HIR it was built from or whatever, that might help us to construct the \"upvar map\" incrementally</p>",
        "id": 164001353,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556034129
    },
    {
        "content": "<blockquote>\n<p>there is a bit of tension here in that the \"capture path\" would like to be \"disconnected\" from the specific place it appears <em>sometimes</em> but not always</p>\n</blockquote>\n<p>right. it seems to be mostly logistics though</p>",
        "id": 164001355,
        "sender_full_name": "ange",
        "timestamp": 1556034130
    },
    {
        "content": "<p>but I'm unpersuaded that is what we want, I think I would definitely consider a second walk</p>",
        "id": 164001368,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556034146
    },
    {
        "content": "<p>I guess i'm not really sure</p>",
        "id": 164001396,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556034170
    },
    {
        "content": "<p>but yeah it feels like \"logistics\"</p>",
        "id": 164001409,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556034175
    },
    {
        "content": "<p>this is all sounding decidedly non-trivial :)</p>",
        "id": 164001450,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556034196
    },
    {
        "content": "<p>not .. NLL-level of complexity, but like it will require a <del>bit</del> lot more attention from an experiented mentor than we've had thus far</p>",
        "id": 164001483,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556034223
    },
    {
        "content": "<p>well. yah</p>",
        "id": 164001489,
        "sender_full_name": "ange",
        "timestamp": 1556034228
    },
    {
        "content": "<p>yah, that seems to be a significant consideration</p>",
        "id": 164001558,
        "sender_full_name": "ange",
        "timestamp": 1556034265
    },
    {
        "content": "<p>(the next interesting thing is to think about the incremental steps)</p>",
        "id": 164001563,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556034269
    },
    {
        "content": "<p>anyway, I have to run now and get myself some lunch</p>",
        "id": 164001574,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556034278
    },
    {
        "content": "<p>kk</p>",
        "id": 164001581,
        "sender_full_name": "ange",
        "timestamp": 1556034290
    },
    {
        "content": "<p>I think the clear take-away thus far is:</p>\n<ul>\n<li>we need to dig more into this plan</li>\n<li>we need tests =) and we should think about what form they should take</li>\n<li>have to think about how to schedule the bandwidth</li>\n</ul>",
        "id": 164001626,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556034321
    },
    {
        "content": "<p>(this feels like it would be a good candidate for the rustc design meeting, while i'm at it)</p>",
        "id": 164001638,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556034338
    },
    {
        "content": "<p>specifically talking about the details of how the capturing ought to work and so forth</p>",
        "id": 164001650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556034354
    },
    {
        "content": "<p>an open question on my end is how this would work if you want to rewrite the accesses during HAIR conversion. AFAIU, there would be a type mismatch in the meantime and doesn't type checking happen on the HIR?</p>",
        "id": 164001708,
        "sender_full_name": "ange",
        "timestamp": 1556034369
    },
    {
        "content": "<p>well, it's good that the tests seem to be somewhat actionable at least :-)</p>",
        "id": 164001753,
        "sender_full_name": "ange",
        "timestamp": 1556034416
    },
    {
        "content": "<blockquote>\n<p>an open question on my end is how this would work if you want to rewrite the accesses during HAIR conversion. AFAIU, there would be a type mismatch in the meantime and doesn't type checking happen on the HIR?</p>\n</blockquote>\n<p>type mismatch where and how? I don't yet see the problem you are concerned about =)</p>",
        "id": 164003168,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556035325
    },
    {
        "content": "<p>Lemme try to explain: my concern is that we'll need to<br>\n1. change the number of upvars in <code>upvar.rs</code> (e.g. when two fields of a struct are captured rather than the struct) and, of course their types. I presume this would happen in <code>closure_analyze</code> in the same file.<br>\n2. change what is referenced in the closure body, as we talked about above. AFAIU you're suggesting we do that during HAIR conversion.<br>\nSo the scenario I'm concerned about is that we do 1, then run type checking (for the HIR) but at that point what upvar does the closure body reference? The previous one. Hmm. Oh I see, typeck doesn't need to look at the captured upvars mentioned in <code>TypeckTables</code> at all</p>",
        "id": 164004543,
        "sender_full_name": "ange",
        "timestamp": 1556036273
    },
    {
        "content": "<p>so both capturing the upvars deduced in <code>upvar.rs</code>and rewriting the accesses to them would take place during HAIR conversion, that makes sense</p>",
        "id": 164004709,
        "sender_full_name": "ange",
        "timestamp": 1556036382
    },
    {
        "content": "<p>So, after this, I'm still unclear on \"Respecting drop order\", \"Moving out of drop\" and what exactly \" &amp;&lt;Box&lt;_&gt; as Deref&gt;::deref(&amp;box_foo).b\" (from the RFC) would be used for -- not sure whether you want to spend any cycles on that given the other open questions though</p>",
        "id": 164005563,
        "sender_full_name": "ange",
        "timestamp": 1556036843
    },
    {
        "content": "<p>so, first of all, upvar analysis takes place <strong>after</strong> type-checking</p>",
        "id": 164013130,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556042204
    },
    {
        "content": "<p>that is, we're making all of these decisions after type-checking is complete</p>",
        "id": 164013138,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556042213
    },
    {
        "content": "<p>second, we're not really going to <em>change</em> what is referenced in the closure body -- well, it depends on your POV I guess, but we're going to be adding side annotations</p>",
        "id": 164013190,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556042253
    },
    {
        "content": "<p>but I guess you put it together, I see :)</p>",
        "id": 164013205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556042270
    },
    {
        "content": "<blockquote>\n<p>So, after this, I'm still unclear on \"Respecting drop order\", \"Moving out of drop\" and what exactly \" &amp;&lt;Box&lt;_&gt; as Deref&gt;::deref(&amp;box_foo).b\" (from the RFC) would be used for -- not sure whether you want to spend any cycles on that given the other open questions though</p>\n</blockquote>\n<p>well I think it'd be good to come up with some canonical examples</p>",
        "id": 164013266,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556042285
    },
    {
        "content": "<p>not sure if you mean that you are not sure on what the canonical examples would be?</p>",
        "id": 164013281,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556042298
    },
    {
        "content": "<p>So <span class=\"user-group-mention\" data-user-group-id=\"1175\">@WG-rfc-2229</span> -- it's our usual sync time <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> </p>\n<p>As you can see above, <span class=\"user-mention\" data-user-id=\"127677\">@ange</span> and I spent some time already going through the \"upvar conversion\".</p>",
        "id": 164013324,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556042339
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> I'm assumign you're still occupied?</p>",
        "id": 164013329,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556042342
    },
    {
        "content": "<p>I think you pinged the wrong people.</p>",
        "id": 164013357,
        "sender_full_name": "davidtwco",
        "timestamp": 1556042356
    },
    {
        "content": "<p>Ah, so I did</p>",
        "id": 164013363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556042362
    },
    {
        "content": "<p>Sorry!</p>",
        "id": 164013367,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556042364
    },
    {
        "content": "<p>I was thinking \"didn't we just do that?\"..</p>",
        "id": 164013391,
        "sender_full_name": "davidtwco",
        "timestamp": 1556042382
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1175\">@WG-rfc-2229</span> is indeed what I meant =)</p>",
        "id": 164013404,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556042391
    },
    {
        "content": "<blockquote>\n<p>so, first of all, upvar analysis takes place <strong>after</strong> type-checking</p>\n</blockquote>\n<p>Oh that's right. I got confused because <code>ty.needs_drop</code> was complaining about inference types/regions, but that must have been because in my exploratory hack I was only lifting the specific type, but of course for this to work, writeback needs to have happened first. I think.</p>",
        "id": 164020416,
        "sender_full_name": "ange",
        "timestamp": 1556046864
    },
    {
        "content": "<blockquote>\n<p>not sure if you mean that you are not sure on what the canonical examples would be?</p>\n</blockquote>\n<p>I thought the canonical examples could be the ones inline in the dropbox paper? If not, then no, I'm not sure what they would be</p>",
        "id": 164020489,
        "sender_full_name": "ange",
        "timestamp": 1556046921
    },
    {
        "content": "<blockquote>\n<p>So <span class=\"user-group-mention\" data-user-group-id=\"1175\">@WG-rfc-2229</span> -- it's our usual sync time <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> </p>\n</blockquote>\n<p>Sorry for not being here, something came up</p>",
        "id": 164020529,
        "sender_full_name": "ange",
        "timestamp": 1556046960
    },
    {
        "content": "<blockquote>\n<p>(this feels like it would be a good candidate for the rustc design meeting, while i'm at it)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> is this a thing that's going to happen? AFAIU, other than maybe looking at more testcases, I'm not sure what I should try to look at the next few days, if anything</p>",
        "id": 164021271,
        "sender_full_name": "ange",
        "timestamp": 1556047403
    },
    {
        "content": "<p>(no pressure of course, I can just, you know, not work during vacation, that sounds healthy)</p>",
        "id": 164021301,
        "sender_full_name": "ange",
        "timestamp": 1556047438
    },
    {
        "content": "<p>the rustc design meeting will hopefully happen -- though there are some details to hammer out</p>",
        "id": 164032893,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556056059
    },
    {
        "content": "<p>discussing <em>this idea</em> there is not going to happen without more work :)</p>",
        "id": 164032906,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556056071
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <br>\nI am here. Will be able to do something over the weekend going forward. Any updates for me ? Did we make some progress on the test failures.</p>",
        "id": 164037915,
        "sender_full_name": "blitzerr",
        "timestamp": 1556061011
    },
    {
        "content": "<blockquote>\n<p>discussing <em>this idea</em> there is not going to happen without more work :)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> well kindly let me know if there's anything I can help with in that direction then :-)</p>",
        "id": 164058728,
        "sender_full_name": "ange",
        "timestamp": 1556088986
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> I never did figure out the test failure thing, but I <em>would</em> really like to get that PR of yours landed.</p>",
        "id": 164292988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556308541
    },
    {
        "content": "<p>So it'd be nice to carve out some time for that</p>",
        "id": 164292993,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556308549
    },
    {
        "content": "<p>Sounds good. <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 164293182,
        "sender_full_name": "blitzerr",
        "timestamp": 1556308698
    }
]