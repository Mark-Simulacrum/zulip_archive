[
    {
        "content": "<p>Should we have a meeting today?</p>",
        "id": 209433541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599593716
    },
    {
        "content": "<p>I can update on things</p>\n<ul>\n<li>We started prototyping the closure printing. We can print starting at a function level, so something like <code>f&lt;T&gt;::closure#0 (types of captures)</code>. Need to look into how to get information about modules printing. </li>\n</ul>\n<p>I just realised that might be because it's non ambigious. So if two mods had the function <code>f</code> it might print the modules. </p>\n<ul>\n<li>I'll ping wg-diagnostics today to look at the closure print proposal</li>\n</ul>",
        "id": 209433756,
        "sender_full_name": "Aman Arora",
        "timestamp": 1599593844
    },
    {
        "content": "<p>OK. One thing I wanted to mention:</p>",
        "id": 209433866,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599593903
    },
    {
        "content": "<p>Since implementing this feature is goin to require an edition</p>",
        "id": 209433884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599593918
    },
    {
        "content": "<p>It'd be really great if we could get it done by the end of the year</p>",
        "id": 209433925,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599593932
    },
    {
        "content": "<p>I was thinking about \"what it's going to take to do that\"</p>",
        "id": 209433961,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599593942
    },
    {
        "content": "<p>I don't mean <em>everything</em>, I mean \"something that works when feature gate is enabled\"</p>",
        "id": 209433982,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599593951
    },
    {
        "content": "<p>it seems like we're not <em>that</em> far away really but maybe we should be making sure we're working hard towards that MVP</p>",
        "id": 209434003,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599593968
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/meeting.202020-09-08/near/209433925\">said</a>:</p>\n<blockquote>\n<p>It'd be really great if we could get it done by the end of the year</p>\n</blockquote>\n<p>That would be ideal for us too, since it puts us in a decent shape for our final term</p>",
        "id": 209434029,
        "sender_full_name": "Aman Arora",
        "timestamp": 1599593980
    },
    {
        "content": "<p>I also don't know what your collective timing constraints are anyway</p>",
        "id": 209434035,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599593983
    },
    {
        "content": "<p>yeah, I figured</p>",
        "id": 209434041,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599593986
    },
    {
        "content": "<p>it's still a few months away so seems quite doable to me but I think we don't want to waste <em>too</em> much time iterating</p>",
        "id": 209434130,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599594021
    },
    {
        "content": "<p>I can probably get more time constraints hopefully by the end of the month, once everyone is a bit adjusted with the term</p>",
        "id": 209434169,
        "sender_full_name": "Aman Arora",
        "timestamp": 1599594043
    },
    {
        "content": "<p>ok, so, apart from how we print closures, what's the next step in your mind</p>",
        "id": 209434245,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599594089
    },
    {
        "content": "<p>It definitely feels doable. This is what I see so far</p>\n<ul>\n<li>Closure printing </li>\n<li>Inference variable instead of tuple of inference </li>\n<li>Validate the bridge + min borrowing</li>\n<li>Remove the bridge and use new closure captures</li>\n<li>MIR lowering</li>\n</ul>",
        "id": 209434384,
        "sender_full_name": "Aman Arora",
        "timestamp": 1599594147
    },
    {
        "content": "<p>MIR Lowering feels like it might go before \"remove the bridge\"</p>",
        "id": 209434459,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599594190
    },
    {
        "content": "<p>Or maybe I'm confused</p>",
        "id": 209434475,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599594200
    },
    {
        "content": "<p>Remove the bridge is to not use closure_captures and upvars_capture_map and rather use places everywhere</p>",
        "id": 209434509,
        "sender_full_name": "Aman Arora",
        "timestamp": 1599594222
    },
    {
        "content": "<p>The first two steps definitely make sense, and I think we should move fairly quickly towards them</p>",
        "id": 209434514,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599594224
    },
    {
        "content": "<p>Right, it seems like that will require MIR lowering is what I mean I think</p>",
        "id": 209434585,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599594245
    },
    {
        "content": "<p>What does \"Validate min borrowing\" mean?</p>",
        "id": 209434611,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599594261
    },
    {
        "content": "<p>I should have had them separate</p>",
        "id": 209434649,
        "sender_full_name": "Aman Arora",
        "timestamp": 1599594281
    },
    {
        "content": "<p>Bridge is essentially doing new capture analysis and using them to constuct old structs</p>",
        "id": 209434713,
        "sender_full_name": "Aman Arora",
        "timestamp": 1599594304
    },
    {
        "content": "<p>so validate that</p>",
        "id": 209434729,
        "sender_full_name": "Aman Arora",
        "timestamp": 1599594309
    },
    {
        "content": "<p>right--</p>",
        "id": 209434764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599594325
    },
    {
        "content": "<p>Then implement min borrowing as part of the bridge/capture analysis</p>",
        "id": 209434788,
        "sender_full_name": "Aman Arora",
        "timestamp": 1599594338
    },
    {
        "content": "<p>(and as we discussed, if the feature gate is not present, we'll add in the \"uses\" from <code>upvars_mentioned</code>)</p>",
        "id": 209434792,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599594342
    },
    {
        "content": "<p>and make sure that works too</p>",
        "id": 209434793,
        "sender_full_name": "Aman Arora",
        "timestamp": 1599594342
    },
    {
        "content": "<p>Yeah</p>",
        "id": 209434808,
        "sender_full_name": "Aman Arora",
        "timestamp": 1599594354
    },
    {
        "content": "<p>ok, so, I guess I see some amount of \"parallelization\" that may be possible</p>",
        "id": 209434863,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599594366
    },
    {
        "content": "<p>not sure how many of you there still are :)</p>",
        "id": 209434885,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599594379
    },
    {
        "content": "<p>since I mainly talk to you :)</p>",
        "id": 209434891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599594383
    },
    {
        "content": "<p>but it seems like we might be able to split out</p>",
        "id": 209434904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599594391
    },
    {
        "content": "<p>basically the MIR lowering part of the equation from min borrowing</p>",
        "id": 209434924,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599594408
    },
    {
        "content": "<p>the idea being something like:</p>",
        "id": 209434943,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599594420
    },
    {
        "content": "<ul>\n<li>introduce the bridge</li>\n</ul>",
        "id": 209434945,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599594422
    },
    {
        "content": "<p>Others are still working, I'm just kinda of doing the PM and  discussions happen. </p>\n<p>There is some degree of depenedence on the first three</p>",
        "id": 209434982,
        "sender_full_name": "Aman Arora",
        "timestamp": 1599594448
    },
    {
        "content": "<ul>\n<li>generate the new data structure, but add in \"dummy\" uses when feature-gate is not enabled, or otherwise tweak things so that the \"places\" that are captured are always local variables</li>\n</ul>",
        "id": 209434997,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599594456
    },
    {
        "content": "<p>essentially my hope would be that you can push on the MIR lowering and new data structure work in parallel with the \"min capture\", with that min capture work being gated behind the feature gate</p>",
        "id": 209435068,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599594487
    },
    {
        "content": "<ul>\n<li>So closure printing is mostly for test cases for the inference tuple </li>\n<li>We need the tuple inference to finish the bridge in the <code>let _ = x</code> case. This is because closure substs won't have the same size as closure_captures</li>\n</ul>",
        "id": 209435085,
        "sender_full_name": "Aman Arora",
        "timestamp": 1599594496
    },
    {
        "content": "<p>yeah, we gotta do those first two steps</p>",
        "id": 209435112,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599594511
    },
    {
        "content": "<p>I think I have a clearish vision for the most part until the bridge. Some doubt on the auto trait stuff on the tuple inference, still need to revisit that.</p>",
        "id": 209435240,
        "sender_full_name": "Aman Arora",
        "timestamp": 1599594598
    },
    {
        "content": "<p>OK. well, let's not worry too much, but I do think there may be some opportuniy to be doing the MIR work while having a separate set of people tweaking the 'minimal captures'</p>",
        "id": 209435352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599594659
    },
    {
        "content": "<p>I guess that's fair, also since it's feature gated, we can reduce the number of initial testacses to allow us to parallelize</p>",
        "id": 209435482,
        "sender_full_name": "Aman Arora",
        "timestamp": 1599594724
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281950\">Aman Arora</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/meeting.202020-09-08/near/209435240\">said</a>:</p>\n<blockquote>\n<p>I think I have a clearish vision for the most part until the bridge. Some doubt on the auto trait stuff on the tuple inference, still need to revisit that.</p>\n</blockquote>\n<p>regarding this</p>",
        "id": 209435524,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599594748
    },
    {
        "content": "<p>I think the doubt is basically whether</p>",
        "id": 209435537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599594753
    },
    {
        "content": "<p>well whether the trait code ought to decide that things are ambiguous if you have an unresolved inference variable (i.e., tuple arity not yet known)</p>",
        "id": 209435570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599594777
    },
    {
        "content": "<p>or whether it should just recurse on the inference variable itself?</p>",
        "id": 209435589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599594788
    },
    {
        "content": "<p>i.e., it has to produce a list of component types, and it can either produce a list with the <em>elements of the tuple</em> (if we know that yet) or produce a list <em>with the tuple itself</em></p>",
        "id": 209435625,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599594808
    },
    {
        "content": "<p>is that the thing you are having doubts about?</p>",
        "id": 209435632,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599594815
    },
    {
        "content": "<p>/me reading</p>",
        "id": 209435646,
        "sender_full_name": "Aman Arora",
        "timestamp": 1599594824
    },
    {
        "content": "<p>My take is that the latter is more elegant, but leads to worse diagnostics, and the former ought to be equivalent, so maybe we should just do that.</p>",
        "id": 209435662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599594830
    },
    {
        "content": "<p>(We could fix the diganostics but I don't think it's worth it right now, it is a fine thing to leave as a FIXME)</p>",
        "id": 209435720,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599594845
    },
    {
        "content": "<p>Kind of, mostly because there were comments about diagnostics issues in previous attempt(s)</p>",
        "id": 209435773,
        "sender_full_name": "Aman Arora",
        "timestamp": 1599594883
    },
    {
        "content": "<p>Yeah, this is because of the interaction I'm describing</p>",
        "id": 209435818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599594905
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/meeting.202020-09-08/near/209435720\">said</a>:</p>\n<blockquote>\n<p>(We could fix the diganostics but I don't think it's worth it right now, it is a fine thing to leave as a FIXME)</p>\n</blockquote>\n<p>I guess that works</p>",
        "id": 209435860,
        "sender_full_name": "Aman Arora",
        "timestamp": 1599594940
    },
    {
        "content": "<p>I'm not really sure which is the 'cleaner' approach anyway</p>",
        "id": 209436273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599595157
    },
    {
        "content": "<p>We might get a better picture once rest of the bugs in that implementation are fixed</p>",
        "id": 209436540,
        "sender_full_name": "Aman Arora",
        "timestamp": 1599595295
    },
    {
        "content": "<p>pinged wg-diagnostics for <a href=\"https://github.com/rust-lang/project-rfc-2229/pull/17\">https://github.com/rust-lang/project-rfc-2229/pull/17</a></p>",
        "id": 209436863,
        "sender_full_name": "Aman Arora",
        "timestamp": 1599595433
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 209439236,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599596569
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> </p>\n<p>So I made the changes as they exist in the RFC, here are some of the new tests I added just to test printing: <a href=\"https://github.com/sexxi-goose/rust/pull/22/commits/ef27f397d3df8df1b261554f92b8ffe6981389b7\">https://github.com/sexxi-goose/rust/pull/22/commits/ef27f397d3df8df1b261554f92b8ffe6981389b7</a></p>\n<p>I kind of agree with <span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> 's comment here: <a href=\"https://github.com/rust-lang/project-rfc-2229/pull/17#discussion_r485298631\">https://github.com/rust-lang/project-rfc-2229/pull/17#discussion_r485298631</a><br>\nthat maybe we want the span for non verbose diagnostics.</p>\n<p>We probably also want to discuss if we want closure_signature and kind being printed in case they aren't inferred yet. </p>\n<p>I would like to update the proposal: <a href=\"https://github.com/rust-lang/project-rfc-2229/compare/closure_print_proposal...proposal_update?expand=1\">https://github.com/rust-lang/project-rfc-2229/compare/closure_print_proposal...proposal_update?expand=1</a><br>\nThe changes are: </p>\n<ul>\n<li>Closure stay similar to before in -Zverbose (If we want DefPaths with span we can do that as a side, as it it allows us to continue on other 2229 tasks)</li>\n<li>Closure signature/kind won't be printed unless capture analysis is done</li>\n<li>Document that the paths might get trimmed in the case that they aren't ambiguous</li>\n</ul>",
        "id": 209918395,
        "sender_full_name": "Aman Arora",
        "timestamp": 1599982053
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> I agree with <span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> that the span seems more \"actionable\" than just a number</p>",
        "id": 210059423,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600115666
    },
    {
        "content": "<p>I'm not sure what you mean though about closure signature/kind being printed -- do we print those today?</p>",
        "id": 210059521,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600115720
    },
    {
        "content": "<p>If -Zverbose is set, yes</p>",
        "id": 210059535,
        "sender_full_name": "Aman Arora",
        "timestamp": 1600115730
    },
    {
        "content": "<p>oh, with <code>-Zverbose</code>, ok</p>",
        "id": 210059547,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600115737
    },
    {
        "content": "<p>But if capture analysis can't be verified as finished, not sure if we should be printing them either</p>",
        "id": 210059635,
        "sender_full_name": "Aman Arora",
        "timestamp": 1600115766
    },
    {
        "content": "<p>I would just expect that with <code>-Zverbose</code> we would dump the raw substitutions</p>",
        "id": 210059782,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600115851
    },
    {
        "content": "<p>which will include that information if it's around</p>",
        "id": 210059790,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600115855
    },
    {
        "content": "<p>though in \"type\" form</p>",
        "id": 210059804,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600115860
    },
    {
        "content": "<p><a href=\"https://github.com/sexxi-goose/rust/pull/22/commits/ef27f397d3df8df1b261554f92b8ffe6981389b7#diff-2499607df6be6b59080f652be2ff4042R12\">https://github.com/sexxi-goose/rust/pull/22/commits/ef27f397d3df8df1b261554f92b8ffe6981389b7#diff-2499607df6be6b59080f652be2ff4042R12</a><br>\nEg here it isn't available</p>",
        "id": 210059838,
        "sender_full_name": "Aman Arora",
        "timestamp": 1600115874
    },
    {
        "content": "<p>I guess that's a bit harder for folks to read who are debugging the compiler but I think it'll be ok</p>",
        "id": 210059839,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600115874
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/meeting.202020-09-08/near/210059804\">said</a>:</p>\n<blockquote>\n<p>though in \"type\" form</p>\n</blockquote>\n<p>we will only do this after typeck, because before that it's an inference variable</p>",
        "id": 210060440,
        "sender_full_name": "Aman Arora",
        "timestamp": 1600116144
    },
    {
        "content": "<p>yeah, and it seems like that just falls out</p>",
        "id": 210060587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600116233
    },
    {
        "content": "<p>That's why I suggest we go with <code>substs=(unavailable)</code> until typeck writeback is complete</p>",
        "id": 210060764,
        "sender_full_name": "Aman Arora",
        "timestamp": 1600116327
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> that seems fine</p>",
        "id": 210062590,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600117186
    },
    {
        "content": "<p>except for one nit</p>",
        "id": 210062600,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600117193
    },
    {
        "content": "<p>I do't think it's \"until writeback is complete\"</p>",
        "id": 210062608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600117201
    },
    {
        "content": "<p>I guess I just think it's \"substs={:?}\" with the type</p>",
        "id": 210062671,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600117217
    },
    {
        "content": "<p>which may be an inference variable</p>",
        "id": 210062676,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600117220
    },
    {
        "content": "<p>checking \"if this is complete\" is always really fraught in our query system</p>",
        "id": 210062704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600117243
    },
    {
        "content": "<p>I dn't think we have any logic for that right now, do we?</p>",
        "id": 210062713,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600117250
    },
    {
        "content": "<p>that might print parent subts, which might be too much</p>",
        "id": 210062725,
        "sender_full_name": "Aman Arora",
        "timestamp": 1600117259
    },
    {
        "content": "<p>hmm, ok</p>",
        "id": 210062780,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600117297
    },
    {
        "content": "<p>that might be too much, or it might be quite useful :)</p>",
        "id": 210062797,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600117306
    },
    {
        "content": "<p>I guess <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> was giving examples I think whre it was useful, right?</p>",
        "id": 210062808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600117315
    },
    {
        "content": "<p>that said, I am ok with printing whatever</p>",
        "id": 210062834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600117322
    },
    {
        "content": "<p>that is, if we want to inspect and if we see an inference variable we print \"unavailable\" or whatever, seems fine</p>",
        "id": 210062906,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600117343
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/meeting.202020-09-08/near/210062808\">said</a>:</p>\n<blockquote>\n<p>I guess <span class=\"user-mention silent\" data-user-id=\"116107\">davidtwco</span> was giving examples I think whre it was useful, right?</p>\n</blockquote>\n<p>we can print path for verbose that will cover what we need</p>",
        "id": 210062921,
        "sender_full_name": "Aman Arora",
        "timestamp": 1600117347
    },
    {
        "content": "<p>like it will be much nicer to read</p>",
        "id": 210062994,
        "sender_full_name": "Aman Arora",
        "timestamp": 1600117404
    },
    {
        "content": "<p><a href=\"https://github.com/sexxi-goose/rust/pull/22/commits/ef27f397d3df8df1b261554f92b8ffe6981389b7#diff-2499607df6be6b59080f652be2ff4042R12\">https://github.com/sexxi-goose/rust/pull/22/commits/ef27f397d3df8df1b261554f92b8ffe6981389b7#diff-2499607df6be6b59080f652be2ff4042R12</a></p>",
        "id": 210063011,
        "sender_full_name": "Aman Arora",
        "timestamp": 1600117414
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/meeting.202020-09-08/near/210062713\">said</a>:</p>\n<blockquote>\n<p>I dn't think we have any logic for that right now, do we?</p>\n</blockquote>\n<p>currently we just check if upvar_tys is a Tuple</p>",
        "id": 210063037,
        "sender_full_name": "Aman Arora",
        "timestamp": 1600117433
    },
    {
        "content": "<p>which won't  be true going once we use inference variable</p>",
        "id": 210063119,
        "sender_full_name": "Aman Arora",
        "timestamp": 1600117462
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281950\">Aman Arora</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/meeting.202020-09-08/near/210063119\">said</a>:</p>\n<blockquote>\n<p>which won't  be true going once we use inference variable</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_middle/src/ty/sty.rs#L369-L371\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_middle/src/ty/sty.rs#L369-L371</a></p>",
        "id": 210066432,
        "sender_full_name": "Aman Arora",
        "timestamp": 1600119446
    },
    {
        "content": "<p>I think even the goal with the current one is that it doesn't print unless things have been substituted. However it doesn't behave that way yet</p>",
        "id": 210066663,
        "sender_full_name": "Aman Arora",
        "timestamp": 1600119591
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281950\">Aman Arora</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/meeting.202020-09-08/near/210063037\">said</a>:</p>\n<blockquote>\n<p>currently we just check if upvar_tys is a Tuple</p>\n</blockquote>\n<p>yeah that's fine too</p>",
        "id": 210068337,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600120769
    }
]