[
    {
        "content": "<p>Hey y'all, sorry for the late notice but I can't make a sync meeting today. Do you want to chat over Zulip async or try to reschedule for another day?</p>",
        "id": 204535115,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595330026
    },
    {
        "content": "<p>We can go for Zulip async</p>",
        "id": 204582824,
        "sender_full_name": "Aman Arora",
        "timestamp": 1595355304
    },
    {
        "content": "<p>Status:</p>\n<ul>\n<li>\n<p><a href=\"https://github.com/rust-lang/project-rfc-2229/issues/7\">https://github.com/rust-lang/project-rfc-2229/issues/7</a><br>\nWe have been prototyping using places for storing capture information. <br>\nCurrently instead of replacing old structures with the new one, we are creating a bridge. So we generate the new structure and use it to build the old structures. We ran into some issues with the MIR build having errors.<br>\nWe got some tips this week on how to do things properly (use env variable to decide on which impl to use) and compile rustc using old style and debug our new thing on a smaller peice of code). We will be trying this out today/tomorrow. <br>\nThis (hopefully) explains the bridge for capture analysis a little better: <a href=\"https://github.com/rust-lang/project-rfc-2229/blob/progress/progress.md#capture-analysis\">https://github.com/rust-lang/project-rfc-2229/blob/progress/progress.md#capture-analysis</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/rust-lang/project-rfc-2229/issues/4\">https://github.com/rust-lang/project-rfc-2229/issues/4</a><br>\nAlso working on replacing tuple of inference variables that would later represent types of captured paths with a single inference variable that then get replaces with a tuple of types of captured paths. Seems to be going well, we can compile parts of the changes now. We have some questions about is_valid and I have asked it on the tupled upvars thread</p>\n</li>\n<li>\n<p>We have started on drafting sort of a RFC2229 doc you had mentioned last meeting. <a href=\"https://github.com/rust-lang/project-rfc-2229/blob/progress/progress.md\">https://github.com/rust-lang/project-rfc-2229/blob/progress/progress.md</a></p>\n</li>\n<li>\n<p>I wrote my thoughts on documenting minimal capture here: <a href=\"https://github.com/rust-lang/project-rfc-2229/issues/9\">https://github.com/rust-lang/project-rfc-2229/issues/9</a><br>\nIf we go the trie/prefix tree route, answering questions like if a path is captured will come dwn to if for a given path there is some prefix that was captured.</p>\n</li>\n<li>\n<p>We should probably have the <a href=\"https://github.com/rust-lang/rust/issues/53488\">tracking issue</a> just point to the <a href=\"https://github.com/rust-lang/project-rfc-2229/projects/1\">project board</a></p>\n</li>\n</ul>",
        "id": 204585537,
        "sender_full_name": "Aman Arora",
        "timestamp": 1595356626
    },
    {
        "content": "<p>Actually I am around a bit after all</p>",
        "id": 204593100,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595360184
    },
    {
        "content": "<p>Regarding the bridge: OK, that sounds reasonable. One thing to note is that we are <em>always</em> going to have to support the current mode of 'just capture the root variable'. My expectation is that we'll phase in this new RFC along an edition boundary, so we'll still have to support the old mode. But I think this isn't a problem, it comes down to the question of \"truncating\" the place to just the root variable, as you already noted.</p>",
        "id": 204593541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595360390
    },
    {
        "content": "<p>You wrote:</p>\n<blockquote>\n<p>Keep closure_captures as it allows us to answer questions like if a root variable is part of a captured path quickly</p>\n</blockquote>\n<p>I'm not sure if you meant for this to be a permanent step or just temporary? I am assuming temporary.</p>",
        "id": 204593620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595360415
    },
    {
        "content": "<blockquote>\n<p>We have some questions about is_valid and I have asked it on the tupled upvars thread</p>\n</blockquote>\n<p>Answered on <a class=\"stream-topic\" data-stream-id=\"189812\" href=\"/#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/tupled.20upvar.20types.20.2357482\">#t-compiler/wg-rfc-2229 &gt; tupled upvar types #57482</a></p>",
        "id": 204594214,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595360679
    },
    {
        "content": "<blockquote>\n<p>I wrote my thoughts on documenting minimal capture here: <a href=\"https://github.com/rust-lang/project-rfc-2229/issues/9\">https://github.com/rust-lang/project-rfc-2229/issues/9</a></p>\n</blockquote>\n<p>I would definitely try to keep the structure as simple as posible. As you suggested, hashing the \"base\" of the place and switching to a vector after that may be a good idea, though another decent approach might be just keeping a plain vector, or a sorted vector.</p>",
        "id": 204594481,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595360793
    },
    {
        "content": "<blockquote>\n<p>We will capture rect.top_left.x as mutable borrow and rect.top_left as immutable borrow. Overall we want to capture rect.top_left as mutable borrow. This would be similar as handling different kinds of use of the same place.</p>\n</blockquote>",
        "id": 204594535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595360826
    },
    {
        "content": "<p>That sounds right, and it's an interesting example</p>",
        "id": 204594543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595360831
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/meeting.202020-07-21/near/204593620\">said</a>:</p>\n<blockquote>\n<p>You wrote:</p>\n<blockquote>\n<p>Keep closure_captures as it allows us to answer questions like if a root variable is part of a captured path quickly</p>\n</blockquote>\n<p>I'm not sure if you meant for this to be a permanent step or just temporary? I am assuming temporary.</p>\n</blockquote>\n<p>I haven't completely looked at each part of the code that relies on this but depending on how the final strcuture looks like (to quicky ans questions abt paths) we might want this an initial check</p>",
        "id": 204594610,
        "sender_full_name": "Aman Arora",
        "timestamp": 1595360876
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/meeting.202020-07-21/near/204594481\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>I wrote my thoughts on documenting minimal capture here: <a href=\"https://github.com/rust-lang/project-rfc-2229/issues/9\">https://github.com/rust-lang/project-rfc-2229/issues/9</a></p>\n</blockquote>\n<p>I would definitely try to keep the structure as simple as posible. As you suggested, hashing the \"base\" of the place and switching to a vector after that may be a good idea, though another decent approach might be just keeping a plain vector, or a sorted vector.</p>\n</blockquote>\n<p>Okay this probably then eliminate closure_captures</p>",
        "id": 204594690,
        "sender_full_name": "Aman Arora",
        "timestamp": 1595360906
    },
    {
        "content": "<p>I think we probably just want one data structure</p>",
        "id": 204595217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595361188
    },
    {
        "content": "<p>but we should make it efficient</p>",
        "id": 204595226,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595361194
    },
    {
        "content": "<p>well, I mean, as efficient as we have to :)</p>",
        "id": 204595241,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595361204
    },
    {
        "content": "<p>I'd start with <em>simple</em> then worry about <em>efficient</em></p>",
        "id": 204595255,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595361211
    },
    {
        "content": "<p>Okay I think that's all I have, we'll try fixing the closure_capture stuff by the end of this week</p>",
        "id": 204596029,
        "sender_full_name": "Aman Arora",
        "timestamp": 1595361614
    },
    {
        "content": "<p>Looking at the project board we seem to be in a nice position in terms of analysis after the current two in-work changes.</p>",
        "id": 204596153,
        "sender_full_name": "Aman Arora",
        "timestamp": 1595361666
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/meeting.202020-07-21/near/204593541\">said</a>:</p>\n<blockquote>\n<p>Regarding the bridge: OK, that sounds reasonable. One thing to note is that we are <em>always</em> going to have to support the current mode of 'just capture the root variable'. My expectation is that we'll phase in this new RFC along an edition boundary, so we'll still have to support the old mode. But I think this isn't a problem, it comes down to the question of \"truncating\" the place to just the root variable, as you already noted.</p>\n</blockquote>\n<p>We can't just drop projections,  it is used to figure out UniqueImmBorrow <br>\n<a href=\"https://github.com/rust-lang/rust/blob/222d2508375a363be7a4f6ded3c9bd7be0803d19/src/librustc_typeck/check/upvar.rs#L322\">https://github.com/rust-lang/rust/blob/222d2508375a363be7a4f6ded3c9bd7be0803d19/src/librustc_typeck/check/upvar.rs#L322</a></p>",
        "id": 205064007,
        "sender_full_name": "Aman Arora",
        "timestamp": 1595791426
    },
    {
        "content": "<p>Continuing this discussion in the thread we have been using for storing capture information using Places. <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/Typecheck.20tables.20using.20Places/near/205085676\">https://rust-lang.zulipchat.com/#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/Typecheck.20tables.20using.20Places/near/205085676</a></p>",
        "id": 205085789,
        "sender_full_name": "Aman Arora",
        "timestamp": 1595832284
    }
]