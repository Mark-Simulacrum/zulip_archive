[
    {
        "content": "<p>One case that arose:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// crate A</span>\n<span class=\"cp\">#[non_exhastive]</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// crate B</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Foo</span>::<span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"> </span><span class=\"c1\">// does this capture `foo` or not?</span>\n</code></pre></div>",
        "id": 249769818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629229881
    },
    {
        "content": "<p>with <code>#[non_exhaustive]</code> for sure, we don't want adding variants to change behavior</p>",
        "id": 249769849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629229904
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307184\">@rocksand</span> <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 249769857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629229909
    },
    {
        "content": "<p>Currently we won't capture it andit's kind of similar to what happens outside the closure</p>",
        "id": 249770624,
        "sender_full_name": "Aman Arora",
        "timestamp": 1629230268
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=bbc9bdb1ff126a86e2bff1cc612a17c1\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=bbc9bdb1ff126a86e2bff1cc612a17c1</a></p>",
        "id": 249770633,
        "sender_full_name": "Aman Arora",
        "timestamp": 1629230272
    },
    {
        "content": "<p>in the <code>valid</code> testcase even though we are testing against an enum variant the variable is not borrowed</p>",
        "id": 249770792,
        "sender_full_name": "Aman Arora",
        "timestamp": 1629230339
    },
    {
        "content": "<p>Adding another variant will affect the match block it self i.e. depending on if the match has a wild <code>_</code> match or not, the actual match block would  need to be updated.</p>",
        "id": 249771026,
        "sender_full_name": "Aman Arora",
        "timestamp": 1629230435
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> if you try that <em>across crates</em>, you will find that <code>valid</code> does not compile</p>",
        "id": 249773381,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629231488
    },
    {
        "content": "<p>and it requires an <code>_</code></p>",
        "id": 249773418,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629231506
    },
    {
        "content": "<p>but I am not sure about the other cases</p>",
        "id": 249773461,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629231529
    },
    {
        "content": "<p>kind of looks like a bug to me all around :)</p>",
        "id": 249773472,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629231537
    },
    {
        "content": "<p>If I understand correctly non-exhaustive handles crate boundary as a separate case? Because we'd have to match the behavior accordingly</p>",
        "id": 249773653,
        "sender_full_name": "Aman Arora",
        "timestamp": 1629231621
    },
    {
        "content": "<p>yes, the idea is that <em>other crates</em> have to assume you may add cases in the future</p>",
        "id": 249773706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629231659
    },
    {
        "content": "<p>you do not</p>",
        "id": 249773707,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629231660
    },
    {
        "content": "<p>this is to accommodate semver across crates</p>",
        "id": 249773748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629231682
    },
    {
        "content": "<p>i.e., if you are issuing a new release, you can deal with the new variants, but others still have to compile against your enum</p>",
        "id": 249773779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629231702
    },
    {
        "content": "<p>So if I understand correctly, we expect ´non-exaustive’ to be treated the same as multi variants</p>",
        "id": 249781901,
        "sender_full_name": "rocksand",
        "timestamp": 1629235972
    },
    {
        "content": "<p>Iff the enum is defined in another crate</p>",
        "id": 249782292,
        "sender_full_name": "Aman Arora",
        "timestamp": 1629236190
    },
    {
        "content": "<p>I think adt_def.did.is_local() should be good enough for that</p>",
        "id": 249782392,
        "sender_full_name": "Aman Arora",
        "timestamp": 1629236266
    },
    {
        "content": "<p>yes-- but there was some further discussion of whether we should be distinguishing \"multivariant\" from \"univariant\" enums at all</p>",
        "id": 249782541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629236351
    },
    {
        "content": "<p>I think we should mimic the behavior of what is outside the closures</p>",
        "id": 249782590,
        "sender_full_name": "Aman Arora",
        "timestamp": 1629236398
    },
    {
        "content": "<p>I agree we want consistency across them for the most part</p>",
        "id": 249782989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629236651
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> do you know if there is a place I can find a wide range of match statements? I think it may be useful to test out the current pattern matching code and to find any inconsistencies between behavior inside and outside closures. It’s been hard to come up with edge cases</p>",
        "id": 249783999,
        "sender_full_name": "rocksand",
        "timestamp": 1629237312
    },
    {
        "content": "<p>I'm not sure what would be the best source :(</p>",
        "id": 249784482,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629237627
    },
    {
        "content": "<p>Do we have tests for <code>..</code> patterns with 2229?</p>",
        "id": 249784753,
        "sender_full_name": "Aman Arora",
        "timestamp": 1629237832
    },
    {
        "content": "<p>I am not sure, I’ll check once I get home</p>",
        "id": 249785161,
        "sender_full_name": "rocksand",
        "timestamp": 1629238084
    },
    {
        "content": "<p>I should also check whether we have general pattern matching ui tests. It would be a good set of tests to use</p>",
        "id": 249785308,
        "sender_full_name": "rocksand",
        "timestamp": 1629238192
    },
    {
        "content": "<p>Created a ticket to track this issue: <a href=\"https://github.com/rust-lang/project-rfc-2229/issues/59\">https://github.com/rust-lang/project-rfc-2229/issues/59</a></p>",
        "id": 249932415,
        "sender_full_name": "rocksand",
        "timestamp": 1629337799
    },
    {
        "content": "<p>I opened a PR <a href=\"https://github.com/rust-lang/rust/pull/88280\">https://github.com/rust-lang/rust/pull/88280</a></p>",
        "id": 250437044,
        "sender_full_name": "rocksand",
        "timestamp": 1629773209
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ^</p>",
        "id": 250437045,
        "sender_full_name": "rocksand",
        "timestamp": 1629773219
    },
    {
        "content": "<p>r+</p>",
        "id": 250533038,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629832065
    }
]