[
    {
        "content": "<p>I realized <span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> that changing the capture behavior of <code>let _ = a</code> could be a breaking change in a <code>move</code> closure, as it could alter when the destructor of <code>a</code> runs -- i.e., it would run when the closure is dropped today, but if we change <code>let _ = a</code> to not capture, then it would run when <code>a</code> is dropped.</p>",
        "id": 209370402,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599562172
    },
    {
        "content": "<p>right, I should've thought of that. I could be completely wrong here but I feel like <code>let _ = p</code>  might be used more than <code>let y = p.y</code> within a closure for code relying on p  being dropped once the closure is dropped. Though I guess adding <code>drop(p)</code> at the end of the closure body will be more explicit way of denoting what's going on.</p>",
        "id": 209376707,
        "sender_full_name": "Aman Arora",
        "timestamp": 1599566769
    },
    {
        "content": "<p>So I'm thinking about how we get around it once 2229 is implemented, because it kind of conflicts with how we are doing capture analysis - based on use instead of variables appearing within the closure. Here is kind of my thought process:</p>\n<ul>\n<li>We see what we missing from <code>upvars_mentioned</code> and make up for it. But that will means post-2229 following won't still be accepted (since we won't have information on fields).</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Point</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"mi\">20</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">y</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>(It doesn't work today either, so we won't be necessarily breaking things, but yet 2229 will be incomplete).</p>\n<ul>\n<li>I looked up logs for mem_cat and expr_use_visitor, is it me or does <a href=\"http://csclub.uwaterloo.ca/~a52arora/playground/let_pattern/mem_cat3\">this</a> seems excessive for </li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Point</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">y</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Point</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>We do see the expression being processed, we just ignore it because the <code>pat</code> in <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/struct.Local.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/struct.Local.html</a> is <code>Wild</code>.</p>\n<p>Even if we do start processing pat Wild in ExprUseVisitor, I'm not sure how we modify the delegate without typing it to Closures.  (Clippy uses expr use visitor).  </p>\n<p>I was thinking along the lines of adding <code>consume_if_move_closure()</code> or something around the lines of passing some closure into euv that allows for conditional consumes. Second approach might be better, for the first one we can put <code>assert!(false)</code> in non closures -- but I don't necessarily like that approach.</p>",
        "id": 209393889,
        "sender_full_name": "Aman Arora",
        "timestamp": 1599575366
    },
    {
        "content": "<p>Well, if we don't have the feature gate enabled,we can certainly just iterate over <code>upvars_mentioned</code> and add a \"base access\" of \"read\" to the local variables -- but actually this only matters for <code>move</code> closures, I believe.</p>",
        "id": 209418189,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599586070
    },
    {
        "content": "<p>So we could say:</p>\n<ul>\n<li>If the feature gate is not enabled</li>\n<li>and this is a move closure</li>\n<li>then it moves all the <code>upvars_mentioned</code>, skip the rest of the analysis</li>\n</ul>\n<p>Otherwise, we do the analysis based on the <code>ExprUseVisitor</code></p>",
        "id": 209418264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599586100
    },
    {
        "content": "<p>That may well be what we want</p>",
        "id": 209418294,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599586113
    },
    {
        "content": "<p>So essentially it will end up looking like: <a href=\"https://github.com/rust-lang/rust/compare/62392966a3937362146d7228444c8d843d97285...sexxi-goose:use_places_aman\">https://github.com/rust-lang/rust/compare/62392966a3937362146d7228444c8d843d97285...sexxi-goose:use_places_aman</a></p>",
        "id": 209418352,
        "sender_full_name": "Aman Arora",
        "timestamp": 1599586148
    },
    {
        "content": "<p>With a feature flag instead of env variable</p>",
        "id": 209418406,
        "sender_full_name": "Aman Arora",
        "timestamp": 1599586174
    },
    {
        "content": "<p>and hopefully much lower code duplication</p>",
        "id": 209418438,
        "sender_full_name": "Aman Arora",
        "timestamp": 1599586188
    },
    {
        "content": "<p>Probably :)</p>",
        "id": 209420841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599587369
    },
    {
        "content": "<p>that's a big diff but I'm guessing yes</p>",
        "id": 209420888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599587398
    },
    {
        "content": "<p>That was initial hacking we sort of did to verify things, so was a lot of copy all paste all</p>",
        "id": 209421521,
        "sender_full_name": "Aman Arora",
        "timestamp": 1599587671
    },
    {
        "content": "<p>Actually this would also remove the weird things we would have to do in infer borrow kind to pretend we are capturing the root variable</p>",
        "id": 209422541,
        "sender_full_name": "Aman Arora",
        "timestamp": 1599588136
    },
    {
        "content": "<p>So the way I picture this:</p>\n<ul>\n<li>if feature flag not set init the capture information for root variables </li>\n<li>do the new capture analysis. Now since we have already initialized based on root variable, the minimum capture analysis (only b is captured when b.c and b are captured) will result in only capturing the root variable</li>\n</ul>",
        "id": 209422895,
        "sender_full_name": "Aman Arora",
        "timestamp": 1599588354
    },
    {
        "content": "<p>Ah, interesting</p>",
        "id": 209423820,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599588844
    },
    {
        "content": "<p>Yeah, ok, that makes sense. Just setting any use at all will ultimately force that root use to be the same as today I suppose</p>",
        "id": 209423874,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599588885
    },
    {
        "content": "<p>Yup</p>",
        "id": 209423886,
        "sender_full_name": "Aman Arora",
        "timestamp": 1599588895
    },
    {
        "content": "<p>Do we want to allow the fn ptr coercion with this?</p>",
        "id": 209424428,
        "sender_full_name": "Aman Arora",
        "timestamp": 1599589161
    },
    {
        "content": "<p>not sure what you mean</p>",
        "id": 209432651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599593249
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/TMSK2q3yoaZn0S5JxtIXX324/image.png\">image.png</a> <br>\nThis bit</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/TMSK2q3yoaZn0S5JxtIXX324/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/TMSK2q3yoaZn0S5JxtIXX324/image.png\"></a></div>",
        "id": 209433024,
        "sender_full_name": "Aman Arora",
        "timestamp": 1599593437
    },
    {
        "content": "<p>So allow such code because c doesn't really capture anything</p>",
        "id": 209433129,
        "sender_full_name": "Aman Arora",
        "timestamp": 1599593509
    },
    {
        "content": "<p>well</p>",
        "id": 209433295,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599593593
    },
    {
        "content": "<p>Right so I think we said</p>",
        "id": 209433305,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599593601
    },
    {
        "content": "<p>OK, I remember</p>",
        "id": 209433340,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599593627
    },
    {
        "content": "<p>I think we should <em>start</em> with <em>coercions are decided based on whether upvars are <strong>mentioned</strong></em></p>",
        "id": 209433397,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599593643
    },
    {
        "content": "<blockquote>\n<p>For coercing a closure to FnPtr, instead of relying on upvars_mentioned in typechk we will accept such code in typechk while setting a no-capture obligation that will be validated in trait selection post capture analysis.</p>\n</blockquote>",
        "id": 209433400,
        "sender_full_name": "Aman Arora",
        "timestamp": 1599593644
    },
    {
        "content": "<p>yes, but eventually we might adopt that sol'n</p>",
        "id": 209433439,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599593668
    },
    {
        "content": "<p>I think it's not worth doing that up front</p>",
        "id": 209433474,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1599593677
    },
    {
        "content": "<p>Yeah, that's what I was thinking. Especially since we are kind of really tying the relaxation with 2229 feature flag</p>",
        "id": 209433527,
        "sender_full_name": "Aman Arora",
        "timestamp": 1599593708
    },
    {
        "content": "<p>I cleaned up the existing code, and it looks like: <a href=\"https://github.com/rust-lang/rust/compare/master...sexxi-goose:use_places_new?expand=1\">https://github.com/rust-lang/rust/compare/master...sexxi-goose:use_places_new?expand=1</a>. </p>\n<p>This still needs some polishing, but should give a high level idea. </p>\n<p>For the most part it would look like this, major change would be around <code>set_closure_captures</code> turning into the minimal capture analysis and check for which new analysis will be based on a feature flag instead of env variable.</p>\n<p>I ran the test suite with old analysis and all of them passed for stage0</p>",
        "id": 209973480,
        "sender_full_name": "Aman Arora",
        "timestamp": 1600069413
    },
    {
        "content": "<p>I'll do more testing stage1 and checking the new analysis results over the next week</p>",
        "id": 209973516,
        "sender_full_name": "Aman Arora",
        "timestamp": 1600069442
    },
    {
        "content": "<p>I'm reading this diff, <span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span>, is there a particular part you wanted to draw my attention to?</p>",
        "id": 210059755,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600115837
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/compare/master...sexxi-goose:use_places_new?expand=1#diff-a7b1a49c68b1a1ce388558eee4f3514aR118-R131\">https://github.com/rust-lang/rust/compare/master...sexxi-goose:use_places_new?expand=1#diff-a7b1a49c68b1a1ce388558eee4f3514aR118-R131</a></p>\n<p>Just to kind of give an idea of how the old analysis wil be managed along, not too much code after all :)</p>",
        "id": 210060099,
        "sender_full_name": "Aman Arora",
        "timestamp": 1600115991
    }
]