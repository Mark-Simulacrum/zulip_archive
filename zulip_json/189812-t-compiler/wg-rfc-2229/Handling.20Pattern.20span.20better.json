[
    {
        "content": "<p>So last couple meetings I had mentioned that we there was a change that recently pushed to master to handle spans around Pattern expressionsin a better way.  PR that added this is <a href=\"https://github.com/rust-lang/rust/pull/75933/files#diff-1f18144176a6e44f905262991bed987098348cdbd688ac76f8c915ec91b7fd58R316-R319\">here</a></p>\n<p>But the main idea behind this is that in the case of Patterns we rely on the upvars_mentioned span instead of the span of the pattern itself. This works today because entities in upvars_mentioned are the same as those in closure_captures.</p>\n<p>However, this won't help us with precise capture. </p>\n<p>The main reason behind this is the Place that we look at for capturing the precise is the pattern part and not the discriminant for the pattern match. (rightly so)</p>",
        "id": 213963187,
        "sender_full_name": "Aman Arora",
        "timestamp": 1603219695
    },
    {
        "content": "<p>If we look at the pattern expression the output as expected would look like (<a href=\"https://github.com/sexxi-goose/rust/commit/08f33f2cedf6d1a20cd5c020acfdf34ea0c98969\">https://github.com/sexxi-goose/rust/commit/08f33f2cedf6d1a20cd5c020acfdf34ea0c98969</a>)</p>\n<p>We have a hack kind of around it, but it creates incorrect associations. When we call consume for a pattern in ExprUseVisitor we modify the PlaceWithHirId to point to the disciminant and not the pattern. </p>\n<p><a href=\"https://github.com/sexxi-goose/rust/commit/dafa9d16d8cbc19e0c5ac4d656c146e58ba1c5cc\">https://github.com/sexxi-goose/rust/commit/dafa9d16d8cbc19e0c5ac4d656c146e58ba1c5cc</a></p>",
        "id": 213963642,
        "sender_full_name": "Aman Arora",
        "timestamp": 1603219913
    },
    {
        "content": "<p>IMO the proper way would be to probably introduce a notion of patterns in the ExperUseVisitor Delegate, but not sure if we want that either.</p>",
        "id": 213964063,
        "sender_full_name": "Aman Arora",
        "timestamp": 1603220099
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 213964124,
        "sender_full_name": "Aman Arora",
        "timestamp": 1603220128
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> I'm having a bit of trouble following this</p>",
        "id": 213964774,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603220431
    },
    {
        "content": "<p>the problem is that the span of the \"move\" comes from the binding in the pattern</p>",
        "id": 213964850,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603220466
    },
    {
        "content": "<p>and not the expression that is being moved out of?</p>",
        "id": 213964859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603220470
    },
    {
        "content": "<p>so e.g. <code>let p = y</code> would wind up with a span of <code>p</code>, but we would prefer the span to be <code>y</code>?</p>",
        "id": 213964910,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603220488
    },
    {
        "content": "<p>and yet it can also happen that you have <code>let (p, ..) = x</code> which would move just <code>x.0</code></p>",
        "id": 213964965,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603220512
    },
    {
        "content": "<p>That's fair actually</p>",
        "id": 213965095,
        "sender_full_name": "Aman Arora",
        "timestamp": 1603220560
    },
    {
        "content": "<p>Actually I guess it makes sense today, because the struct is captured in its entirety</p>",
        "id": 213965137,
        "sender_full_name": "Aman Arora",
        "timestamp": 1603220582
    },
    {
        "content": "<p>Well, I think that underlining the pattern binding makes \"sense\" but <em>is</em> confusing</p>",
        "id": 213965233,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603220627
    },
    {
        "content": "<p>especially in the common case of <code>let y = x</code></p>",
        "id": 213965251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603220635
    },
    {
        "content": "<p>(I guess I'm not entirely sure how common that case is)</p>",
        "id": 213965306,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603220649
    },
    {
        "content": "<p>it does seem to me that underlining the expression being matched might be clearer</p>",
        "id": 213965334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603220665
    },
    {
        "content": "<p>Yeah</p>",
        "id": 213965387,
        "sender_full_name": "Aman Arora",
        "timestamp": 1603220690
    },
    {
        "content": "<p>This code is also part of handling match arms, so those will be affected too</p>",
        "id": 213965716,
        "sender_full_name": "Aman Arora",
        "timestamp": 1603220828
    },
    {
        "content": "<p>Actually nvm, those don't create bindings, so that will be fine</p>",
        "id": 213965757,
        "sender_full_name": "Aman Arora",
        "timestamp": 1603220846
    },
    {
        "content": "<p>I guess <span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> I'd have to dig a bit into the code, is the problem that the<code>ExprUseVisitor</code> isn't passing down a kind of \"separate span\" here?</p>",
        "id": 213966200,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603221022
    },
    {
        "content": "<p>but just giving a <code>PlaceWithHirId</code> that identifies the pattern?</p>",
        "id": 213966219,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603221031
    },
    {
        "content": "<p>gimme a min, lemme point to it</p>",
        "id": 213966307,
        "sender_full_name": "Aman Arora",
        "timestamp": 1603221079
    },
    {
        "content": "<p><a href=\"https://github.com/sexxi-goose/rust/blob/use_places_new/compiler/rustc_typeck/src/expr_use_visitor.rs#L506\">https://github.com/sexxi-goose/rust/blob/use_places_new/compiler/rustc_typeck/src/expr_use_visitor.rs#L506</a></p>",
        "id": 213966501,
        "sender_full_name": "Aman Arora",
        "timestamp": 1603221157
    },
    {
        "content": "<p>So the discr_place is the one that's on RHS</p>",
        "id": 213966562,
        "sender_full_name": "Aman Arora",
        "timestamp": 1603221188
    },
    {
        "content": "<p>we essentially pass that to mem_cat to apply projections as required based on the pattern,  when mem_cat applies the projections it changes the expression pointed to within the PlaceWithHirId  to be that of the pattern so the arm/destruct pattern etc</p>",
        "id": 213966713,
        "sender_full_name": "Aman Arora",
        "timestamp": 1603221259
    },
    {
        "content": "<p>Only in case of a match block do we actually call the delgate on that place </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"n\">hir</span>::<span class=\"n\">ExprKind</span>::<span class=\"n\">Match</span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">discr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arms</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">discr_place</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">return_if_err</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">mc</span><span class=\"p\">.</span><span class=\"n\">cat_expr</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">discr</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">borrow_expr</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">discr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ty</span>::<span class=\"n\">ImmBorrow</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"c1\">// treatment of the discriminant is handled while walking the arms.</span>\n<span class=\"w\">                </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">arm</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">arms</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">walk_arm</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">discr_place</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arm</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>(walk_arm calls walk_pat)</p>",
        "id": 213966817,
        "sender_full_name": "Aman Arora",
        "timestamp": 1603221332
    },
    {
        "content": "<p>yeah</p>",
        "id": 213971461,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603223765
    },
    {
        "content": "<p>so we could modify the <code>Delegate</code> interface</p>",
        "id": 213971515,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603223805
    },
    {
        "content": "<p>so that it can take an optional \"extra\" span</p>",
        "id": 213971537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603223817
    },
    {
        "content": "<p>or has extra methods</p>",
        "id": 213971543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603223820
    },
    {
        "content": "<p>e.g., <code>consume_pattern(place, span)</code></p>",
        "id": 213971561,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603223830
    },
    {
        "content": "<p>and then we could thread down the span of the <code>discr</code></p>",
        "id": 213971584,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603223844
    },
    {
        "content": "<p>match is an interesting one too</p>",
        "id": 213971600,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603223857
    },
    {
        "content": "<p>I'll make that an expr_id, because that makes it easy to integrate it with the Capture information structure</p>",
        "id": 213971675,
        "sender_full_name": "Aman Arora",
        "timestamp": 1603223884
    },
    {
        "content": "<p>e.g., if you have <code>match x { (_, b) =&gt; </code>, what do we want underlined :)</p>",
        "id": 213971685,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603223887
    },
    {
        "content": "<p>Right now it will do x, because that's how things are setup</p>",
        "id": 213971719,
        "sender_full_name": "Aman Arora",
        "timestamp": 1603223908
    },
    {
        "content": "<p>Actually no, today it will point to the first/last use of x in the closure, AFAIK, unless x is moved</p>",
        "id": 213971789,
        "sender_full_name": "Aman Arora",
        "timestamp": 1603223946
    },
    {
        "content": "<p>since for ByRef Capture we look at upvars_mentioned</p>",
        "id": 213971845,
        "sender_full_name": "Aman Arora",
        "timestamp": 1603223973
    },
    {
        "content": "<p>if you can modify the interface so that it <em>always</em> takes a place and an expr-id</p>",
        "id": 213972052,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603224062
    },
    {
        "content": "<p>and sometimes they have the same hir-id</p>",
        "id": 213972061,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603224066
    },
    {
        "content": "<p>and sometimes they don't</p>",
        "id": 213972063,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603224068
    },
    {
        "content": "<p>that might be the most elegant</p>",
        "id": 213972070,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603224073
    },
    {
        "content": "<p>i.e., for patterns they do not</p>",
        "id": 213972102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603224092
    },
    {
        "content": "<p>but for expressions they would</p>",
        "id": 213972109,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603224095
    },
    {
        "content": "<p>it'd be nice if the code didn't have a lot of ifs, is what i'm getting at</p>",
        "id": 213972130,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603224103
    },
    {
        "content": "<p>I think that can work. I think this should be done before the capture analysis PR since the interface change would affect clippy</p>",
        "id": 213972166,
        "sender_full_name": "Aman Arora",
        "timestamp": 1603224122
    },
    {
        "content": "<p>but instead it was like \"here is the <code>HirId</code> of the thing that ought to be reported to the user as the use\"</p>",
        "id": 213972222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603224133
    },
    {
        "content": "<p>Sounds good</p>",
        "id": 213972629,
        "sender_full_name": "Aman Arora",
        "timestamp": 1603224355
    },
    {
        "content": "<p>cc: <span class=\"user-mention\" data-user-id=\"282558\">@Dhruv Jauhar</span></p>",
        "id": 213978176,
        "sender_full_name": "Aman Arora",
        "timestamp": 1603227282
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/project-rfc-2229/issues/20\">https://github.com/rust-lang/project-rfc-2229/issues/20</a></p>",
        "id": 213991057,
        "sender_full_name": "Aman Arora",
        "timestamp": 1603235843
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/78662\">https://github.com/rust-lang/rust/pull/78662</a> is up</p>",
        "id": 215287712,
        "sender_full_name": "Aman Arora",
        "timestamp": 1604303994
    },
    {
        "content": "<p>left a few wording nits but looks good</p>",
        "id": 215318146,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604323936
    },
    {
        "content": "<p>Dhruv pushed a fixup <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 215562588,
        "sender_full_name": "Aman Arora",
        "timestamp": 1604485143
    }
]