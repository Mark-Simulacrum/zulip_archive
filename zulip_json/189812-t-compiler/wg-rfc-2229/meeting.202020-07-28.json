[
    {
        "content": "<p>1) This is going to be the last week of work we do before resuming late August, we entering the final exam period at our university. (Sorry, I should have probably should've brought this earlier, just didn't realize it's almost August). Current working branches:</p>\n<ul>\n<li>\n<p>Capture information bridge: <a href=\"https://github.com/sexxi-goose/rust/tree/use_places_aman\">https://github.com/sexxi-goose/rust/tree/use_places_aman</a>. <br>\nTo use the bridge you need the environment variable SG_NEW, to log results/ extra details for old/new style capture analysis have SG_VERBOSE env variable.</p>\n</li>\n<li>\n<p>Tupled upvars <a href=\"https://github.com/rust-lang/rust/issues/57482\">#57482</a>: <a href=\"https://github.com/sexxi-goose/rust/pull/21#pullrequestreview-456934982\">https://github.com/sexxi-goose/rust/pull/21#pullrequestreview-456934982</a></p>\n</li>\n</ul>\n<p>2) The bridge works for most cases.  Issues we ran into last couple weeks are listed here <a href=\"#narrow/stream/122651-general/topic/Debugging.20broken.20MIR/near/205158453\">https://rust-lang.zulipchat.com/#narrow/stream/122651-general/topic/Debugging.20broken.20MIR/near/205158453</a><br>\nWe still need to make Rvalue more precise. Consider the following code</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">X</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">str1</span>: <span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">str1</span>: <span class=\"nc\">format</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;x&quot;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">c</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>We see the following place being used within the closure </p>\n<div class=\"codehilite\"><pre><span></span><code>Not upvar: PlaceWithHirId { hir_id: HirId { owner: DefId(0:3 ~ drop_move[317d]::main[0]), local_id: 43 }, place: Place { base_ty: (), base: Rvalue, projections: [] } }\n</code></pre></div>\n\n\n<ul>\n<li>\n<p>Rvalues currently get ignored because we don't know what gets captured. This comes back to having an expression hir id or something stored with the Rvalue.</p>\n</li>\n<li>\n<p>Since we start capture_information and fill it up as we see Places being used, we are unable to infer the type of the closure.</p>\n</li>\n<li>complete error message here: <a href=\"http://csclub.uwaterloo.ca/~a52arora/test_suite/drop_move.log\">http://csclub.uwaterloo.ca/~a52arora/test_suite/drop_move.log</a></li>\n</ul>\n<p>3) Tupled upvars: Tests are failing.<br>\n<a href=\"https://github.com/sexxi-goose/rust/pull/21#pullrequestreview-456934982\">https://github.com/sexxi-goose/rust/pull/21#pullrequestreview-456934982</a></p>\n<ul>\n<li>Some places need to still check is_valid or the infcx to ensure if we need to be reading the upars tuple from the subs</li>\n<li>\n<p>Expected FnPtr found closure.<br>\n<code>substs_a.as_closure().upvar_tys().next().is_none()</code> from <a href=\"https://github.com/sexxi-goose/rust/blob/master/src/librustc_typeck/check/coercion.rs#L775\">here</a><br>\nfeels like would return true even if there was one captured variable.  We weren't able to find time to look into each failing case, so it is possible there is a mistake in the changes we made to this.</p>\n</li>\n<li>\n<p>Errors with traits not having solutions</p>\n</li>\n</ul>",
        "id": 205279507,
        "sender_full_name": "Aman Arora",
        "timestamp": 1595964395
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> I just realized I missed our last meeting and never got back to you on this</p>",
        "id": 205519866,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596136164
    },
    {
        "content": "<p>I didn't realize the exam period was coming up either :)</p>",
        "id": 205519898,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596136188
    },
    {
        "content": "<p>do you want to maybe find a time to chat tomorrow (friday) to kind of \"braindump\" final status? not sure if it's necessary, maybe if I pour over the links above, that'll be enough</p>",
        "id": 205519976,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596136208
    },
    {
        "content": "<p>Sure, I'm in a meeting rn, I'll get back in abt an hour</p>",
        "id": 205520062,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596136266
    },
    {
        "content": "<p>How about 3pm tomorrow?</p>",
        "id": 205527948,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596140590
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 205531072,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596142396
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> ok</p>",
        "id": 205534203,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596144122
    },
    {
        "content": "<p>I have updated the calendar event for tomorrow</p>",
        "id": 205534266,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596144180
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> do we plan to chat on zulip or zoom?</p>",
        "id": 205628161,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596221716
    },
    {
        "content": "<p>I'm fine with either, whatever you're more comfortable with</p>",
        "id": 205628326,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596221786
    },
    {
        "content": "<p>let's do Zulip if that works for you</p>",
        "id": 205628377,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596221822
    },
    {
        "content": "<p>I guess I'll make a new topic</p>",
        "id": 205628382,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596221825
    }
]