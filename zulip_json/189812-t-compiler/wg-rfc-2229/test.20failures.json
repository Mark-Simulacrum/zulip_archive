[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> based on our discussion  we want to inspect the self type <a href=\"https://github.com/rust-lang/rust/blob/f22dca0a1bef4141e75326caacc3cd59f3d5be8e/src/librustc/traits/select.rs#L2886\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/f22dca0a1bef4141e75326caacc3cd59f3d5be8e/src/librustc/traits/select.rs#L2886\">here</a>.</p>",
        "id": 160211482,
        "sender_full_name": "blitzerr",
        "timestamp": 1551975140
    },
    {
        "content": "<p>But when I print the debug logs <br>\n<code>debug!(\"vtable_auto_impl: nested={:?}\", nested);</code><br>\ndoesn't get printed. So, are we sure that's the code path that is executed in the test ?</p>",
        "id": 160211617,
        "sender_full_name": "blitzerr",
        "timestamp": 1551975232
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> good question =) remind me what the test is, again?</p>",
        "id": 160217383,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551978830
    },
    {
        "content": "<p>I could be wrong of course</p>",
        "id": 160217386,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551978837
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <br>\n<a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/not-clone-closure.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/not-clone-closure.rs\">https://github.com/rust-lang/rust/blob/master/src/test/ui/not-clone-closure.rs</a></p>",
        "id": 160217527,
        "sender_full_name": "blitzerr",
        "timestamp": 1551978945
    },
    {
        "content": "<p>I was tracking the call stack <a href=\"https://paper.dropbox.com/doc/UI-tests-failing--AY3k7qd76AgO_i03iNl0wTcbAg-X96kJW6agXuvx36GPxmcg\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/UI-tests-failing--AY3k7qd76AgO_i03iNl0wTcbAg-X96kJW6agXuvx36GPxmcg\">here</a></p>",
        "id": 160217591,
        "sender_full_name": "blitzerr",
        "timestamp": 1551978980
    },
    {
        "content": "<p>That is in progress ..</p>",
        "id": 160217642,
        "sender_full_name": "blitzerr",
        "timestamp": 1551979036
    },
    {
        "content": "<p>Ah, <span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span>, yeah, that's a slightly different path</p>",
        "id": 160220894,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551981530
    },
    {
        "content": "<p>same root problem though</p>",
        "id": 160220899,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551981533
    },
    {
        "content": "<p>But the trait here is <code>Clone</code>, not an auto trait</p>",
        "id": 160220907,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551981540
    },
    {
        "content": "<p>the \"constituent types\" callback in that case is <a href=\"https://github.com/rust-lang/rust/blob/f22dca0a1bef4141e75326caacc3cd59f3d5be8e/src/librustc/traits/select.rs#L2460-L2463\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/f22dca0a1bef4141e75326caacc3cd59f3d5be8e/src/librustc/traits/select.rs#L2460-L2463\">here</a></p>",
        "id": 160220956,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551981595
    },
    {
        "content": "<p>and we wind up <a href=\"https://github.com/rust-lang/rust/blob/f22dca0a1bef4141e75326caacc3cd59f3d5be8e/src/librustc/traits/select.rs#L1629\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/f22dca0a1bef4141e75326caacc3cd59f3d5be8e/src/librustc/traits/select.rs#L1629\">assembling the candidates here</a></p>",
        "id": 160221038,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551981618
    },
    {
        "content": "<p>so we will wind up <a href=\"https://github.com/rust-lang/rust/blob/f22dca0a1bef4141e75326caacc3cd59f3d5be8e/src/librustc/traits/select.rs#L2707\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/f22dca0a1bef4141e75326caacc3cd59f3d5be8e/src/librustc/traits/select.rs#L2707\">doing the \"confirmation step\" here</a></p>",
        "id": 160221081,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551981654
    },
    {
        "content": "<p>and hence the <code>cause</code> that we want to alter is <a href=\"https://github.com/rust-lang/rust/blob/f22dca0a1bef4141e75326caacc3cd59f3d5be8e/src/librustc/traits/select.rs#L2836\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/f22dca0a1bef4141e75326caacc3cd59f3d5be8e/src/librustc/traits/select.rs#L2836\">on this line</a></p>",
        "id": 160221111,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551981684
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  Got it, thanks a lot. I will get on this today.</p>",
        "id": 160252341,
        "sender_full_name": "blitzerr",
        "timestamp": 1552005480
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  is there a reason we should not unwrap the tuple <a href=\"https://github.com/blitzerr/rust/blob/64d0145d19e5eeed73d877186ccf12345ba02f95/src/librustc/traits/select.rs#L2440\" target=\"_blank\" title=\"https://github.com/blitzerr/rust/blob/64d0145d19e5eeed73d877186ccf12345ba02f95/src/librustc/traits/select.rs#L2440\">here</a> rather than return a (vec![], bool,) tuple and then based on that call the <code>obligation.cause.clone()</code> as mentioned <a href=\"https://paper.dropbox.com/doc/RFC-2229-Roadmap--AY0fhzLGTN5T9sKY213U6a65Ag-cJKrePDCZR54T5kVbuoQk#:uid=916240896182703889444600&amp;h2=Error-message\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/RFC-2229-Roadmap--AY0fhzLGTN5T9sKY213U6a65Ag-cJKrePDCZR54T5kVbuoQk#:uid=916240896182703889444600&amp;h2=Error-message\">here</a> under the bullet point with  <strong> <em>green</em> </strong> background which was the cleanest as we discussed ?</p>",
        "id": 160379148,
        "sender_full_name": "blitzerr",
        "timestamp": 1552157678
    },
    {
        "content": "<p>In terms of code I replaced</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">is_copy_trait</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">is_clone_trait</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Where</span><span class=\"p\">(</span><span class=\"n\">ty</span>::<span class=\"n\">Binder</span>::<span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"n\">substs</span><span class=\"p\">.</span><span class=\"n\">upvar_tuple_ty</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">())])))</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>with</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">is_copy_trait</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">is_clone_trait</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">upvars</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">substs</span><span class=\"p\">.</span><span class=\"n\">upvar_tuple_ty</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ty</span>::<span class=\"n\">Tuple</span><span class=\"p\">(</span><span class=\"n\">tys</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">tys</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">bug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;A tuple was expected but found : {:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"n\">Where</span><span class=\"p\">(</span><span class=\"n\">ty</span>::<span class=\"n\">Binder</span>::<span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">upvars</span><span class=\"p\">.</span><span class=\"n\">to_vec</span><span class=\"p\">()))</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>in <code>fn copy_clone_conditions()</code> under the <code>ty::Closure(def_id, substs) =&gt; {</code> match condition</p>",
        "id": 160397532,
        "sender_full_name": "blitzerr",
        "timestamp": 1552190223
    },
    {
        "content": "<p>and I get this error</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0308</span><span class=\"p\">]</span>: <span class=\"nc\">mismatched</span><span class=\"w\"> </span><span class=\"n\">types</span><span class=\"o\">============================&gt;</span><span class=\"w\">        </span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"mi\">107</span><span class=\"o\">/</span><span class=\"mi\">125</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">librustc</span><span class=\"o\">/</span><span class=\"n\">traits</span><span class=\"o\">/</span><span class=\"n\">select</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">2443</span>:<span class=\"mi\">25</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">2443</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">                         </span><span class=\"n\">ty</span>::<span class=\"n\">Tuple</span><span class=\"p\">(</span><span class=\"n\">tys</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">tys</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\">                         </span><span class=\"o\">^^^^^^^^^^^^^^</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"err\">`</span><span class=\"n\">ty</span>::<span class=\"n\">TyS</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"err\">`</span><span class=\"n\">ty</span>::<span class=\"n\">sty</span>::<span class=\"n\">TyKind</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">expected</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"n\">ty</span>::<span class=\"n\">TyS</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"n\">ty</span>::<span class=\"n\">sty</span>::<span class=\"n\">TyKind</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Want to make sure this is okay before I proceed further.  File from the branch without the recent changes <a href=\"https://github.com/blitzerr/rust/blob/64d0145d19e5eeed73d877186ccf12345ba02f95/src/librustc/traits/select.rs#L2440\" target=\"_blank\" title=\"https://github.com/blitzerr/rust/blob/64d0145d19e5eeed73d877186ccf12345ba02f95/src/librustc/traits/select.rs#L2440\">here</a></p>",
        "id": 160397800,
        "sender_full_name": "blitzerr",
        "timestamp": 1552190692
    },
    {
        "content": "<p>Otherwise as we discussed, we will have to change </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">enum</span> <span class=\"nc\">BuiltinImplConditions</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"mi\">314</span><span class=\"w\">     </span><span class=\"sd\">/// The impl is conditional on T1,T2,.. : Trait</span>\n<span class=\"w\"> </span><span class=\"mi\">315</span><span class=\"w\">     </span><span class=\"n\">Where</span><span class=\"p\">(</span><span class=\"n\">ty</span>::<span class=\"n\">Binder</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">Ty</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"mi\">316</span><span class=\"w\">     </span><span class=\"sd\">/// There is no built-in impl. There may be some other</span>\n<span class=\"w\"> </span><span class=\"mi\">317</span><span class=\"w\">     </span><span class=\"sd\">/// candidate (a where-clause or user-defined impl).</span>\n<span class=\"w\"> </span><span class=\"mi\">318</span><span class=\"w\">     </span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"mi\">319</span><span class=\"w\">     </span><span class=\"sd\">/// It is unknown whether there is an impl.</span>\n<span class=\"w\"> </span><span class=\"mi\">320</span><span class=\"w\">     </span><span class=\"n\">Ambiguous</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"mi\">321</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>to</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">Where</span><span class=\"p\">(</span><span class=\"n\">ty</span>::<span class=\"n\">Binder</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">Ty</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Which one do you agree with more ?</p>",
        "id": 160398062,
        "sender_full_name": "blitzerr",
        "timestamp": 1552191150
    },
    {
        "content": "<blockquote>\n<p>and I get this error</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> not sure if this helps, but the error seems to be because <code>match substs.upvar_tuple_ty(def_id, self.tcx())</code> should be <code>match substs.upvar_tuple_ty(def_id, self.tcx()).sty</code> instead?</p>",
        "id": 160435325,
        "sender_full_name": "ange",
        "timestamp": 1552256428
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"127677\">@ange</span>  that definitely solves the error.</p>",
        "id": 160442479,
        "sender_full_name": "blitzerr",
        "timestamp": 1552266503
    },
    {
        "content": "<p>Was I reading it wrong - the error message </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">note</span>: <span class=\"nc\">expected</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"n\">ty</span>::<span class=\"n\">TyS</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"n\">ty</span>::<span class=\"n\">sty</span>::<span class=\"n\">TyKind</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>should be </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">note</span>: <span class=\"nc\">expected</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"n\">ty</span>::<span class=\"n\">sty</span>::<span class=\"n\">TyKind</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"n\">ty</span>::<span class=\"n\">TyS</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>?</p>",
        "id": 160443888,
        "sender_full_name": "blitzerr",
        "timestamp": 1552267849
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  Apparently this does not solve the problem.So I will get back to returning the (vec, bool) and give that a shot</p>",
        "id": 160449176,
        "sender_full_name": "blitzerr",
        "timestamp": 1552276187
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> can one link to a specific line of the Roadmap document somehow?</p>",
        "id": 160483092,
        "sender_full_name": "ange",
        "timestamp": 1552314565
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127677\">@ange</span>  Unfortunately, links can only be generated for headings (H1/H2) not for a line of text</p>",
        "id": 160497367,
        "sender_full_name": "blitzerr",
        "timestamp": 1552323884
    },
    {
        "content": "<p>ok. I was going to ask re: the two options for fixing the ui change in <code>not-clone-closure.rs</code>. Would adding a <code>Synthetic</code> flag to the <code>Ty</code> be viable alternative? Returning an extra bool from <code>constituent_types_for_ty</code> seems a bit ugly. Special-casing the closure-tuple case in <code>confirm_auto_impl_candidate</code> feels a bit awkward. That said, I doubt there'd be any more synthetic types in the future, so there's that :-)</p>",
        "id": 160497916,
        "sender_full_name": "ange",
        "timestamp": 1552324260
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> just a question for the next time the subject comes up</p>",
        "id": 160497961,
        "sender_full_name": "ange",
        "timestamp": 1552324285
    },
    {
        "content": "<p>Ty is a central datastructure and putting things in it, that's not required for the entire duration is a waste. In our case, it needs to span across a couple function calls.</p>",
        "id": 160498586,
        "sender_full_name": "blitzerr",
        "timestamp": 1552324676
    },
    {
        "content": "<p>I agree that if there's no other applicable use, it makes sense to keep the change localized. space-wise there shouldn't be an issue (only half of the flag bits are currently used), but there's the mental load to think of, true</p>",
        "id": 160498869,
        "sender_full_name": "ange",
        "timestamp": 1552324880
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127677\">@ange</span>  ya, that's the idea.</p>",
        "id": 160499246,
        "sender_full_name": "blitzerr",
        "timestamp": 1552325156
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  After implementing what we discussed for both <code>confirm_auto_impl_candidate</code> and <code>confirm_builtin_candidate</code>, it solved the two tests I was eyeing (ui/not-clone-closure.rs and ui/closures/closure-move-sync.rs) but overall it has led to an increase in failures. For all the failures please look <a href=\"https://paper.dropbox.com/doc/UI-tests-failing--AZHjpemHBuQGurG0bc40B_h5Ag-X96kJW6agXuvx36GPxmcg\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/UI-tests-failing--AZHjpemHBuQGurG0bc40B_h5Ag-X96kJW6agXuvx36GPxmcg\">here</a>. The test failures are handled by the last two commits. The compilation for changes in <code>select.rs</code> is extremely slow (takes an hour on my system), so the progress is slow.</p>",
        "id": 160534457,
        "sender_full_name": "blitzerr",
        "timestamp": 1552354303
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> sorry I got a bit overwhelmed as usual, trying to catch up here</p>",
        "id": 160714119,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552501368
    },
    {
        "content": "<p>I requested access to that paper doc btw</p>",
        "id": 160714152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552501398
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <br>\nYou should have access now. Sorry about that.</p>",
        "id": 160739880,
        "sender_full_name": "blitzerr",
        "timestamp": 1552522925
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> where can I find your code?</p>",
        "id": 161282219,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553109705
    },
    {
        "content": "<p>Great, I'm doing a local build now</p>",
        "id": 161282703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553110081
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> so I started doing some investigation. The first test case I looked at, <code>src/test/ui/closure-move-sync.rs</code> -- your branch produces the same output as nightly</p>",
        "id": 161283704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553110828
    },
    {
        "content": "<p>oh, maybe I misunderstood the doc</p>",
        "id": 161283766,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553110884
    },
    {
        "content": "<p>OK, so, maybe I'll leave some comments in the doc</p>",
        "id": 161283906,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553110966
    },
    {
        "content": "<p>ok, it's not duplicate prevention</p>",
        "id": 161284782,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553111547
    },
    {
        "content": "<p>if I edit the <code>not-send-sync.rs</code> test case like so:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(generators)]</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">cell</span>::<span class=\"n\">Cell</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">assert_sync</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Sync</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">assert_send</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Send</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">assert_sync</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">//~^ ERROR: E0277</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Cell</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kr\">yield</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">});</span><span class=\"w\"></span>\n\n<span class=\"c1\">//    let a = Cell::new(2);</span>\n<span class=\"c1\">//    assert_send(|| {</span>\n<span class=\"c1\">//        //~^ ERROR: E0277</span>\n<span class=\"c1\">//        drop(&amp;a);</span>\n<span class=\"c1\">//        yield;</span>\n<span class=\"c1\">//    });</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>then we no longer get errors :(</p>",
        "id": 161284826,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553111578
    },
    {
        "content": "<p>curious</p>",
        "id": 161284836,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553111583
    },
    {
        "content": "<p>also curious, running with <code>RUST_LOG=rustc::traits</code> winds up with an ICE :(</p>",
        "id": 161285329,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553111939
    },
    {
        "content": "<p>I ran it with RUST_LOG=rustc::traits::select and it was fine. I will try that and see.</p>",
        "id": 161289764,
        "sender_full_name": "blitzerr",
        "timestamp": 1553114892
    },
    {
        "content": "<p>On this topic, <span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> --</p>",
        "id": 161460850,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553270734
    },
    {
        "content": "<p>what I wanted to do but didn't find time to do</p>",
        "id": 161460855,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553270740
    },
    {
        "content": "<p>well, first of all, I presume you are able to reproduce that the above test case (with the second case commented out) passes, right?</p>",
        "id": 161460867,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553270756
    },
    {
        "content": "<p>so what I had started to do was reverting some of your commits one by one</p>",
        "id": 161460886,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553270762
    },
    {
        "content": "<p>basically trying to bisect where the failure came from</p>",
        "id": 161460922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553270766
    },
    {
        "content": "<p>e.g., you changed things to return a tuple</p>",
        "id": 161460929,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553270774
    },
    {
        "content": "<p>that is, the (vec, bool) tuple</p>",
        "id": 161460932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553270779
    },
    {
        "content": "<p>I changed all the cases to have the bool be \"false\"</p>",
        "id": 161460948,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553270788
    },
    {
        "content": "<p>and the test <em>still</em> was (incorrectly) passing</p>",
        "id": 161460955,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553270795
    },
    {
        "content": "<p>so yeah I would suggest you do some of this \"quasi-bisection\"</p>",
        "id": 161460964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553270809
    },
    {
        "content": "<p>since I'm a bit confused as to what is going on</p>",
        "id": 161460980,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553270816
    },
    {
        "content": "<p>this btw is a case where using the <code>-i</code> really helps</p>",
        "id": 161461004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553270829
    },
    {
        "content": "<p>because rebuilding the compiler can be (relatively) swift</p>",
        "id": 161461008,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553270831
    },
    {
        "content": "<p>if you're having trouble with that, we can discuss :)</p>",
        "id": 161461010,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553270838
    },
    {
        "content": "<p>Sure <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I will do that dissection. Haven't found time since my last comment on the paper doc. <br>\nI do use -i always. <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 161461210,
        "sender_full_name": "blitzerr",
        "timestamp": 1553270968
    },
    {
        "content": "<p>well, specifically I mean in conjunction with <code>--keep-stage</code>, as well</p>",
        "id": 161461240,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553270987
    },
    {
        "content": "<p>This branch is old and so didn't need to sync from mainline</p>",
        "id": 161461255,
        "sender_full_name": "blitzerr",
        "timestamp": 1553270995
    },
    {
        "content": "<p>Keep stage is a test specific flag right ?</p>",
        "id": 161461330,
        "sender_full_name": "blitzerr",
        "timestamp": 1553271014
    },
    {
        "content": "<p>By that I mean you use it as ./x.py test ...</p>",
        "id": 161461356,
        "sender_full_name": "blitzerr",
        "timestamp": 1553271037
    },
    {
        "content": "<p>no, keep-stage is a super hack</p>",
        "id": 161461965,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553271394
    },
    {
        "content": "<p>that avoids rebuilding libraries</p>",
        "id": 161461968,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553271397
    },
    {
        "content": "<p>which can have a big impact on total turnaround time</p>",
        "id": 161461978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553271402
    },
    {
        "content": "<p>there are two workflows</p>",
        "id": 161461981,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553271407
    },
    {
        "content": "<p><a href=\"https://rust-lang.github.io/rustc-guide/how-to-build-and-run.html#suggested-workflows-for-faster-builds-of-the-compiler\" target=\"_blank\" title=\"https://rust-lang.github.io/rustc-guide/how-to-build-and-run.html#suggested-workflows-for-faster-builds-of-the-compiler\">one workflow is documented here</a>, but there's another option that may be better</p>",
        "id": 161462064,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553271481
    },
    {
        "content": "<p>I should open a PR for that in rustc-guide</p>",
        "id": 161462113,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553271487
    },
    {
        "content": "<p>the basic idea would be to do</p>\n<div class=\"codehilite\"><pre><span></span>./x.py build -i src/libstd # first build\n./x.py build -i --keep-stage 1 src/libstd # later builds\n</pre></div>",
        "id": 161462142,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553271516
    },
    {
        "content": "<p>then you can just run the test by running <code>rustc</code> by hand on the test file</p>",
        "id": 161462151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553271528
    },
    {
        "content": "<p>that's what I do anyway</p>",
        "id": 161462153,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553271530
    },
    {
        "content": "<p>I don't really use the test runner when I'm debugging an individual test</p>",
        "id": 161462168,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553271541
    },
    {
        "content": "<blockquote>\n<p>I should open a PR for that in rustc-guide</p>\n</blockquote>\n<p>ps, if you wanted to open a PR amending the section that talks about using <code>--stage 1</code> to talk about that workflow, i'd be appreciative :)</p>",
        "id": 161462191,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553271559
    },
    {
        "content": "<p>not sure if it requires detailed edits to surrounding text though</p>",
        "id": 161462200,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553271567
    },
    {
        "content": "<p>the main thing is that the <code>--stage 1</code> flow can be <em>a bit faster</em> sometimes, particularly on the initial build, but it also sometimes fails in weird ways that the one above would not</p>",
        "id": 161462213,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553271587
    },
    {
        "content": "<p>so probably better to just recommend the second one</p>",
        "id": 161462219,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553271596
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  I will open a PR</p>",
        "id": 161462559,
        "sender_full_name": "blitzerr",
        "timestamp": 1553271809
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  In my branch, there two commits that were exclusively for fixing the test errors. I changed them both to return false in all the cases and the <code>not-send-sync.rs</code> still fails. I will go further down the rabbit hole tomorrow and figure out the provenance of the error.</p>",
        "id": 161731572,
        "sender_full_name": "blitzerr",
        "timestamp": 1553575867
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> fwiw, I haven't forgotten about this. did a loop to get the test results for every commit so I can read up and get some idea of what started failing when, hopefully on friday</p>",
        "id": 162418540,
        "sender_full_name": "ange",
        "timestamp": 1554289562
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127677\">@ange</span>  thanks a lot. Let me know if anything is not clear in the doc or commits</p>",
        "id": 162578524,
        "sender_full_name": "blitzerr",
        "timestamp": 1554420090
    },
    {
        "content": "<p>So, re: the <code>ui/generator/not-send-sync.rs</code> testcase, this is the summary of the differences in the compiler output for the commits in this branch:</p>\n<div class=\"codehilite\"><pre><span></span>for sha in 75a369c5b1 e9faf40169 7fa36f4f63 8b32d92153 61a1d2c75d 59a6a0c400 8568565465 136a711012 4a02c5b487 64d0145d19 662e0a8396 7567a314b6; do echo &quot;--- $sha ---&quot;; grep  -e &#39;required because.*`(&#39; -e &#39;\\[E0277&#39; not-send-sync-results/${sha}.out; done\n--- 75a369c5b1 ---\nerror[E0277]: `std::cell::Cell&lt;i32&gt;` cannot be shared between threads safely\nerror[E0277]: `std::cell::Cell&lt;i32&gt;` cannot be shared between threads safely\n--- e9faf40169 ---\nerror[E0277]: `std::cell::Cell&lt;i32&gt;` cannot be shared between threads safely\nerror[E0277]: `std::cell::Cell&lt;i32&gt;` cannot be shared between threads safely\n--- 7fa36f4f63 ---\nerror[E0277]: `std::cell::Cell&lt;i32&gt;` cannot be shared between threads safely\n   = note: required because it appears within the type `(&amp;std::cell::Cell&lt;i32&gt;,)`\n--- 8b32d92153 ---\nerror[E0277]: `std::cell::Cell&lt;i32&gt;` cannot be shared between threads safely\n   = note: required because it appears within the type `(&amp;std::cell::Cell&lt;i32&gt;,)`\n--- 61a1d2c75d ---\nerror[E0277]: `std::cell::Cell&lt;i32&gt;` cannot be shared between threads safely\n   = note: required because it appears within the type `(&amp;std::cell::Cell&lt;i32&gt;,)`\n--- 59a6a0c400 ---\nerror[E0277]: `std::cell::Cell&lt;i32&gt;` cannot be shared between threads safely\n   = note: required because it appears within the type `(&amp;std::cell::Cell&lt;i32&gt;,)`\n--- 8568565465 ---\nerror[E0277]: `std::cell::Cell&lt;i32&gt;` cannot be shared between threads safely\n   = note: required because it appears within the type `(&amp;std::cell::Cell&lt;i32&gt;,)`\n--- 136a711012 ---\nerror[E0277]: `std::cell::Cell&lt;i32&gt;` cannot be shared between threads safely\n   = note: required because it appears within the type `(&amp;std::cell::Cell&lt;i32&gt;,)`\n--- 4a02c5b487 ---\n--- 64d0145d19 ---\nerror[E0277]: `std::cell::Cell&lt;i32&gt;` cannot be shared between threads safely\n   = note: required because it appears within the type `(&amp;std::cell::Cell&lt;i32&gt;,)`\n--- 662e0a8396 ---\nerror[E0277]: `std::cell::Cell&lt;i32&gt;` cannot be shared between threads safely\n   = note: required because it appears within the type `(&amp;std::cell::Cell&lt;i32&gt;,)`\n--- 7567a314b6 ---\nerror[E0277]: `std::cell::Cell&lt;i32&gt;` cannot be shared between threads safely\n</pre></div>\n\n\n<p>(4a02c5b487 is blank cause it failed to build)</p>",
        "id": 162719412,
        "sender_full_name": "ange",
        "timestamp": 1554582965
    },
    {
        "content": "<p>unfortunately I'm visiting friends in berlin and traveling back home tomorrow, so couldn't really get into the actual error. I did capture the debug output when compiling the testcase though, so normalizing and diffing the debug logs might give some good clues as to where unexpected divergences in the output arise <span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span></p>",
        "id": 162719564,
        "sender_full_name": "ange",
        "timestamp": 1554583211
    },
    {
        "content": "<p>I should add that I had accidentally built in a rust source tree without the correct config.toml, so got only minimal debugging output. tried to rebuild again but kept running into seemingly unrelated segfaults. threw out llvm (only other variable and also where the segfault was manifesting) and now waiting for it to hopefully go through...</p>",
        "id": 162933191,
        "sender_full_name": "ange",
        "timestamp": 1554832196
    },
    {
        "content": "<p>FWIW, the first differences that seem significant in the debug output, when compiling <code>ui/generator/not-send-sync.rs</code> with <code>e9faf40169</code> vs <code>7567a314b6</code> are</p>\n<div class=\"codehilite\"><pre><span></span>rustc::traits::select: builtin_bound: nested=Binder(([], false))\nrustc::traits::select: builtin_bound: nested=Binder(([{integer}], false))\nena::unify: TyVidEqKey: created new key: TyVidEqKey { vid: _#13t, phantom: PhantomData }\nena::unify: TyVid: created new key: _#13t\nrustc::infer::type_variable: new_var(index=_#13t, diverging=false, origin=ClosureSynthetic(src/test/ui/generator/not-send-sync.rs:9:17: 13:6)\n</pre></div>\n\n\n<p>The first two lines are simply the addition of the boolean, the last three lines are completely absent in the earlier commit (for which the testcase passes).</p>\n<p>This results in <code>GeneratorSubsts { substs: [(), (), _, _] }</code> that have one extra <code>, _</code>, this in turn results in an extra obligation predicate. This of course spills over the rest of the diff, until we get to the unification, where (surprisingly?) there's one less call into ena in the later commit (the one that has the extra <code>_</code>). Ah, this seems to be balanced by an extra call to ena that appears much later. Then at ~85% of the diff I'm losing track of the differences, until we eventually get the shared error message for the second closure. Recall, with the later commit, we're losing the error message for the first closure. Then the earlier (correct) commit enters <code>process_obligations</code> 3 more times, does some unification and spits out the error message. This could be a diff artifact though.</p>",
        "id": 163140223,
        "sender_full_name": "ange",
        "timestamp": 1555019481
    },
    {
        "content": "<p>This all seems in order to me, AFAICT with the addition of the tuple there should be one extra type variable. Dunno if <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> sees any smoking guns in the above cc: <span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span></p>",
        "id": 163140312,
        "sender_full_name": "ange",
        "timestamp": 1555019561
    },
    {
        "content": "<p>hmm</p>",
        "id": 163409760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555357355
    },
    {
        "content": "<p>I guess I gotta re-test locally</p>",
        "id": 163409767,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555357362
    },
    {
        "content": "<p>To be clear, the issue is there, it's just that the differences I could track in the debug output seem to be accounted for by the change introduced in the patch</p>",
        "id": 163412187,
        "sender_full_name": "ange",
        "timestamp": 1555359173
    },
    {
        "content": "<p>Ok, I'm trying to remember the status now :)</p>",
        "id": 164562605,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556648602
    },
    {
        "content": "<p>Ah, right, I vaguely recall -- we added some logic to suppress some duplicate lines</p>",
        "id": 164562646,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556648626
    },
    {
        "content": "<p>and we wound up masking errors intead</p>",
        "id": 164562653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556648631
    },
    {
        "content": "<p>although from what I can tell</p>",
        "id": 164562825,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556648706
    },
    {
        "content": "<p>the test maybe just started failing due to th change itself</p>",
        "id": 164562840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556648717
    },
    {
        "content": "<blockquote>\n<p>Ah, right, I vaguely recall -- we added some logic to suppress some duplicate lines</p>\n</blockquote>\n<p>and not so much as a result of this lgoic</p>",
        "id": 164562848,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556648723
    },
    {
        "content": "<p>I remember I had a doc. Let me find that. It had the failures</p>",
        "id": 164562940,
        "sender_full_name": "blitzerr",
        "timestamp": 1556648764
    },
    {
        "content": "<p><a href=\"https://paper.dropbox.com/doc/UI-tests-failing-X96kJW6agXuvx36GPxmcg\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/UI-tests-failing-X96kJW6agXuvx36GPxmcg\">https://paper.dropbox.com/doc/UI-tests-failing-X96kJW6agXuvx36GPxmcg</a></p>",
        "id": 164562953,
        "sender_full_name": "blitzerr",
        "timestamp": 1556648770
    },
    {
        "content": "<p>That is possible.</p>",
        "id": 164563050,
        "sender_full_name": "blitzerr",
        "timestamp": 1556648845
    },
    {
        "content": "<p>We never ran the tests with the incremental changes</p>",
        "id": 164563078,
        "sender_full_name": "blitzerr",
        "timestamp": 1556648861
    },
    {
        "content": "<p>I'm digging in</p>",
        "id": 164563184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556648913
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> I may have found the problem, testing a fix now</p>",
        "id": 164572799,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556655356
    },
    {
        "content": "<p>the tl;dr is that, in your branch, you have lost the \"witness\" when enumerating the constituent types for generators:</p>\n<p><a href=\"https://github.com/rust-lang/rust/blob/5b7baa53c91d7c33b925fc8aec553e3521548a07/src/librustc/traits/select.rs#L2601\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/5b7baa53c91d7c33b925fc8aec553e3521548a07/src/librustc/traits/select.rs#L2601\">https://github.com/rust-lang/rust/blob/5b7baa53c91d7c33b925fc8aec553e3521548a07/src/librustc/traits/select.rs#L2601</a></p>",
        "id": 164573081,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556655522
    },
    {
        "content": "<p>(that's the master code, not your branch)</p>",
        "id": 164573104,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556655535
    },
    {
        "content": "<p>this witness, in particular, carries the types of local variables in the generator that are live across yields</p>",
        "id": 164573134,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556655550
    },
    {
        "content": "<p>which is <em>exactly</em> what this test is testing</p>",
        "id": 164573136,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556655554
    },
    {
        "content": "<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span>  <span aria-label=\"crab\" class=\"emoji emoji-1f980\" role=\"img\" title=\"crab\">:crab:</span></p>",
        "id": 164573139,
        "sender_full_name": "blitzerr",
        "timestamp": 1556655558
    },
    {
        "content": "<p>building a branch locally now to see if this fixes the problem, but I strongly suspect it will</p>",
        "id": 164573167,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556655573
    },
    {
        "content": "<p>Ohh man !</p>",
        "id": 164573528,
        "sender_full_name": "blitzerr",
        "timestamp": 1556655830
    },
    {
        "content": "<p>You mean in one of  my commits, I just removed it ?</p>",
        "id": 164573588,
        "sender_full_name": "blitzerr",
        "timestamp": 1556655847
    },
    {
        "content": "<p>yeah</p>",
        "id": 164573598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556655859
    },
    {
        "content": "<p>copy-n-paste bug, basically :)</p>",
        "id": 164573610,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556655866
    },
    {
        "content": "<p>ok, it seems to work</p>",
        "id": 164573612,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556655869
    },
    {
        "content": "<p>lol</p>",
        "id": 164573635,
        "sender_full_name": "blitzerr",
        "timestamp": 1556655884
    },
    {
        "content": "<blockquote>\n<p>ok, it seems to work</p>\n</blockquote>\n<p>That is great</p>",
        "id": 164573649,
        "sender_full_name": "blitzerr",
        "timestamp": 1556655898
    },
    {
        "content": "<p>I pushed a commit to your branch</p>",
        "id": 164573653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556655901
    },
    {
        "content": "<p>I'm starting a full test run now, but it'll probably be a while :)</p>",
        "id": 164573681,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556655921
    },
    {
        "content": "<p>Based on missing the witness part, it should only fail generator tests right ?</p>",
        "id": 164574071,
        "sender_full_name": "blitzerr",
        "timestamp": 1556656217
    },
    {
        "content": "<p>But what about the closure tests ?</p>",
        "id": 164574081,
        "sender_full_name": "blitzerr",
        "timestamp": 1556656231
    },
    {
        "content": "<p>It might be a good idea to try some of the tests mentioned in <a href=\"https://paper.dropbox.com/doc/UI-tests-failing-X96kJW6agXuvx36GPxmcg\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/UI-tests-failing-X96kJW6agXuvx36GPxmcg\">here</a> before running the full ui suite ? What do you think ?</p>",
        "id": 164574120,
        "sender_full_name": "blitzerr",
        "timestamp": 1556656278
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 164574248,
        "sender_full_name": "blitzerr",
        "timestamp": 1556656382
    },
    {
        "content": "<p>there are still plenty of errors in the ui test suite</p>",
        "id": 164574783,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556656859
    },
    {
        "content": "<p>I'm running with --bless and will look in a bit more detail</p>",
        "id": 164574798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556656876
    },
    {
        "content": "<p>the good news is that, with <code>--bless</code>, the tests<br>\n pass</p>",
        "id": 164574806,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556656889
    },
    {
        "content": "<p>that is, we are still generating the same set of errors we did before</p>",
        "id": 164574810,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556656895
    },
    {
        "content": "<p>but it does seem like we're not <em>quite</em> getting the 'backtrace\" data right</p>",
        "id": 164574908,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556656957
    },
    {
        "content": "<p>so doesn't bless changes the output accordingly ?</p>",
        "id": 164574925,
        "sender_full_name": "blitzerr",
        "timestamp": 1556656978
    },
    {
        "content": "<p>Then the tests will pass unless we introduced a crash ? Is that understanding right ?</p>",
        "id": 164574955,
        "sender_full_name": "blitzerr",
        "timestamp": 1556657005
    },
    {
        "content": "<blockquote>\n<p>so doesn't bless changes the output accordingly ?</p>\n</blockquote>\n<p>bless updates the reference files, but not the <code>//~ ERROR</code> anotations</p>",
        "id": 164577216,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556658691
    },
    {
        "content": "<p>so you have to still get the same <em>number</em> of errors, but the text can change</p>",
        "id": 164577222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556658701
    },
    {
        "content": "<p>I (personaly) always run with <code>--bless</code>, but then I just use <code>git diff</code> to compare output</p>",
        "id": 164577238,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556658717
    },
    {
        "content": "<p>I see. Makes sense.</p>",
        "id": 164577599,
        "sender_full_name": "blitzerr",
        "timestamp": 1556658992
    },
    {
        "content": "<p>It's always helpful to know people's workflow</p>",
        "id": 164577617,
        "sender_full_name": "blitzerr",
        "timestamp": 1556659010
    },
    {
        "content": "<p>this is partly because I the emacs integration w/ git is really great</p>",
        "id": 164577624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556659019
    },
    {
        "content": "<p>so it's easy to browse the list of files w/ diffs etc</p>",
        "id": 164577637,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556659026
    },
    {
        "content": "<p>Waaatt ? You don't use vs-code with rust analyzer ? <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 164577806,
        "sender_full_name": "blitzerr",
        "timestamp": 1556659181
    },
    {
        "content": "<p>I have interated r-a into emacs, at least on my local machine ... still need to do that on my linux desktop that I use for rustc...</p>",
        "id": 164578141,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556659427
    },
    {
        "content": "<p>They didn't have integration steps for vim, so I just use bare-bones vim for rustc</p>",
        "id": 164578327,
        "sender_full_name": "blitzerr",
        "timestamp": 1556659535
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <br>\nCurious if the entire suite of test passed with your changes ?</p>",
        "id": 164627251,
        "sender_full_name": "blitzerr",
        "timestamp": 1556720922
    },
    {
        "content": "<p>no, there are plenty of failures, I've not had time to dig into 'em</p>",
        "id": 164635055,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556727193
    },
    {
        "content": "<p>I pushed a change as you suggested that fixed a few test cases. We still have 68 failed tests. They have this symptoms.</p>",
        "id": 165443133,
        "sender_full_name": "blitzerr",
        "timestamp": 1557630567
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"o\">----</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">ui</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">ui</span><span class=\"o\">/</span><span class=\"n\">feature</span><span class=\"o\">-</span><span class=\"n\">gates</span><span class=\"o\">/</span><span class=\"n\">feature</span><span class=\"o\">-</span><span class=\"n\">gate</span><span class=\"o\">-</span><span class=\"n\">trivial_bounds</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"> </span><span class=\"o\">----</span><span class=\"w\"></span>\n<span class=\"n\">diff</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">stderr</span>:\n\n<span class=\"mi\">107</span><span class=\"w\"> </span><span class=\"n\">LL</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"mi\">108</span><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">^</span><span class=\"w\"> </span><span class=\"n\">doesn</span><span class=\"na\">&#39;t</span><span class=\"w\"> </span><span class=\"n\">have</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"n\">known</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"o\">-</span><span class=\"n\">time</span><span class=\"w\"></span>\n<span class=\"mi\">109</span><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"o\">-</span><span class=\"w\">      </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">help</span>: <span class=\"nc\">within</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">Dst</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">dyn</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">&#39;static</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">marker</span>::<span class=\"nb\">Sized</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">implemented</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"p\">(</span><span class=\"n\">dyn</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">&#39;static</span><span class=\"p\">)</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">      </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">help</span>: <span class=\"nc\">the</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">marker</span>::<span class=\"nb\">Sized</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">implemented</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"p\">(</span><span class=\"n\">dyn</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">&#39;static</span><span class=\"p\">)</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"mi\">111</span><span class=\"w\">    </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">to</span><span class=\"w\"> </span><span class=\"n\">learn</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">visit</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">https</span>:<span class=\"c1\">//doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait&gt;</span>\n<span class=\"o\">-</span><span class=\"w\">      </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">required</span><span class=\"w\"> </span><span class=\"n\">because</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">appears</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"n\">Dst</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">dyn</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">&#39;static</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"mi\">113</span><span class=\"w\">    </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">help</span>: <span class=\"nc\">see</span><span class=\"w\"> </span><span class=\"n\">issue</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"mi\">48214</span><span class=\"w\"></span>\n<span class=\"mi\">114</span><span class=\"w\">    </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">help</span>: <span class=\"nc\">add</span><span class=\"w\"> </span><span class=\"cp\">#![feature(trivial_bounds)]</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">crate</span><span class=\"w\"> </span><span class=\"n\">attributes</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">enable</span><span class=\"w\"></span>\n<span class=\"mi\">115</span><span class=\"w\"></span>\n</pre></div>",
        "id": 165443135,
        "sender_full_name": "blitzerr",
        "timestamp": 1557630576
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"o\">----</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">ui</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">ui</span><span class=\"o\">/</span><span class=\"kr\">unsized</span><span class=\"o\">-</span><span class=\"n\">locals</span><span class=\"o\">/</span><span class=\"n\">issue</span><span class=\"o\">-</span><span class=\"mi\">50940</span><span class=\"o\">-</span><span class=\"n\">with</span><span class=\"o\">-</span><span class=\"n\">feature</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"> </span><span class=\"o\">----</span><span class=\"w\"></span>\n<span class=\"n\">diff</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">stderr</span>:\n\n<span class=\"mi\">4</span><span class=\"w\">   </span><span class=\"n\">LL</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">A</span><span class=\"o\">&lt;</span><span class=\"kt\">str</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"mi\">5</span><span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"o\">^</span><span class=\"w\"> </span><span class=\"n\">doesn</span><span class=\"na\">&#39;t</span><span class=\"w\"> </span><span class=\"n\">have</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"n\">known</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"o\">-</span><span class=\"n\">time</span><span class=\"w\"></span>\n<span class=\"mi\">6</span><span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"o\">-</span><span class=\"w\">      </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">help</span>: <span class=\"nc\">within</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">main</span>::<span class=\"n\">A</span><span class=\"o\">&lt;</span><span class=\"kt\">str</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">marker</span>::<span class=\"nb\">Sized</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">implemented</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"kt\">str</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">      </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">help</span>: <span class=\"nc\">the</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">marker</span>::<span class=\"nb\">Sized</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">implemented</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"kt\">str</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"mi\">8</span><span class=\"w\">      </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">to</span><span class=\"w\"> </span><span class=\"n\">learn</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">visit</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">https</span>:<span class=\"c1\">//doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait&gt;</span>\n<span class=\"o\">-</span><span class=\"w\">      </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">required</span><span class=\"w\"> </span><span class=\"n\">because</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">appears</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"n\">main</span>::<span class=\"n\">A</span><span class=\"o\">&lt;</span><span class=\"kt\">str</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"mi\">10</span><span class=\"w\">     </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">the</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">of</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">have</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">statically</span><span class=\"w\"> </span><span class=\"n\">known</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"></span>\n<span class=\"mi\">11</span><span class=\"w\"></span>\n<span class=\"mi\">12</span><span class=\"w\">  </span><span class=\"n\">error</span>: <span class=\"nc\">aborting</span><span class=\"w\"> </span><span class=\"n\">due</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">previous</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"></span>\n</pre></div>",
        "id": 165443227,
        "sender_full_name": "blitzerr",
        "timestamp": 1557630624
    },
    {
        "content": "<p>Those two are similar. Some of the other ones are</p>",
        "id": 165443268,
        "sender_full_name": "blitzerr",
        "timestamp": 1557630688
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"o\">----</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">ui</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">ui</span><span class=\"o\">/</span><span class=\"n\">suggestions</span><span class=\"o\">/</span><span class=\"n\">path</span><span class=\"o\">-</span><span class=\"n\">by</span><span class=\"o\">-</span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"> </span><span class=\"o\">----</span><span class=\"w\"></span>\n<span class=\"n\">diff</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">stderr</span>:\n\n<span class=\"mi\">2</span><span class=\"w\">     </span><span class=\"o\">-</span>-&gt; <span class=\"cp\">$DIR</span><span class=\"o\">/</span><span class=\"n\">path</span><span class=\"o\">-</span><span class=\"n\">by</span><span class=\"o\">-</span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">3</span>:<span class=\"mi\">6</span><span class=\"w\"></span>\n<span class=\"mi\">3</span><span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">4</span><span class=\"w\">   </span><span class=\"n\">LL</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">p</span>: <span class=\"nc\">Path</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"o\">-</span><span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\">      </span><span class=\"o\">^</span><span class=\"w\"> </span><span class=\"n\">borrow</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">Path</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">instead</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\">      </span><span class=\"o\">^</span><span class=\"w\"> </span><span class=\"n\">doesn</span><span class=\"na\">&#39;t</span><span class=\"w\"> </span><span class=\"n\">have</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"n\">known</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"o\">-</span><span class=\"n\">time</span><span class=\"w\"></span>\n<span class=\"mi\">6</span><span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"o\">-</span><span class=\"w\">      </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">help</span>: <span class=\"nc\">within</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">path</span>::<span class=\"n\">Path</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">marker</span>::<span class=\"nb\">Sized</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">implemented</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">]</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">      </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">help</span>: <span class=\"nc\">the</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">marker</span>::<span class=\"nb\">Sized</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">implemented</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">]</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"mi\">8</span><span class=\"w\">      </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">to</span><span class=\"w\"> </span><span class=\"n\">learn</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">visit</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">https</span>:<span class=\"c1\">//doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait&gt;</span>\n<span class=\"o\">-</span><span class=\"w\">      </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">required</span><span class=\"w\"> </span><span class=\"n\">because</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">appears</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">path</span>::<span class=\"n\">Path</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"mi\">10</span><span class=\"w\">     </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">all</span><span class=\"w\"> </span><span class=\"n\">local</span><span class=\"w\"> </span><span class=\"n\">variables</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">have</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">statically</span><span class=\"w\"> </span><span class=\"n\">known</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"></span>\n<span class=\"mi\">11</span><span class=\"w\">     </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">help</span>: <span class=\"nc\">unsized</span><span class=\"w\"> </span><span class=\"n\">locals</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">gated</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">unstable</span><span class=\"w\"> </span><span class=\"n\">feature</span><span class=\"w\"></span>\n<span class=\"mi\">12</span><span class=\"w\"></span>\n</pre></div>",
        "id": 165443270,
        "sender_full_name": "blitzerr",
        "timestamp": 1557630694
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"o\">----</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">ui</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">ui</span><span class=\"o\">/</span><span class=\"n\">traits</span><span class=\"o\">/</span><span class=\"k\">trait</span><span class=\"o\">-</span><span class=\"n\">suggest</span><span class=\"o\">-</span><span class=\"k\">where</span><span class=\"o\">-</span><span class=\"n\">clause</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"> </span><span class=\"o\">----</span><span class=\"w\"></span>\n<span class=\"n\">diff</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">stderr</span>:\n\n<span class=\"mi\">15</span><span class=\"w\">  </span><span class=\"n\">LL</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">Misc</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"mi\">16</span><span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"o\">^^^^^^^^^^^^^^^^^^^^^^^</span><span class=\"w\"> </span><span class=\"n\">doesn</span><span class=\"na\">&#39;t</span><span class=\"w\"> </span><span class=\"n\">have</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"n\">known</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"o\">-</span><span class=\"n\">time</span><span class=\"w\"></span>\n<span class=\"mi\">17</span><span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"o\">-</span><span class=\"w\">      </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">help</span>: <span class=\"nc\">within</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">Misc</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">marker</span>::<span class=\"nb\">Sized</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">implemented</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">U</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">      </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">help</span>: <span class=\"nc\">the</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">marker</span>::<span class=\"nb\">Sized</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">implemented</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">U</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"mi\">19</span><span class=\"w\">     </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">to</span><span class=\"w\"> </span><span class=\"n\">learn</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">visit</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">https</span>:<span class=\"c1\">//doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait&gt;</span>\n<span class=\"mi\">20</span><span class=\"w\">     </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">help</span>: <span class=\"nc\">consider</span><span class=\"w\"> </span><span class=\"n\">adding</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">U</span>: <span class=\"nc\">std</span>::<span class=\"n\">marker</span>::<span class=\"nb\">Sized</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">bound</span><span class=\"w\"></span>\n<span class=\"o\">-</span><span class=\"w\">      </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">required</span><span class=\"w\"> </span><span class=\"n\">because</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">appears</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"n\">Misc</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"mi\">22</span><span class=\"w\">     </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">required</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"mi\">23</span><span class=\"w\"></span>\n<span class=\"mi\">24</span><span class=\"w\">  </span><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0277</span><span class=\"p\">]</span>: <span class=\"nc\">the</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">bound</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"kt\">u64</span>: <span class=\"nc\">std</span>::<span class=\"n\">convert</span>::<span class=\"nb\">From</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">satisfied</span><span class=\"w\"></span>\n</pre></div>",
        "id": 165443324,
        "sender_full_name": "blitzerr",
        "timestamp": 1557630731
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  <span aria-label=\"point of information\" class=\"emoji emoji-261d\" role=\"img\" title=\"point of information\">:point_of_information:</span></p>",
        "id": 165443337,
        "sender_full_name": "blitzerr",
        "timestamp": 1557630750
    },
    {
        "content": "<p>Tracking details <a href=\"https://paper.dropbox.com/doc/UI-tests-failing--Ac8CJDkVgakYmE9LncnFnUXMAg-X96kJW6agXuvx36GPxmcg#:h2=May-12\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/UI-tests-failing--Ac8CJDkVgakYmE9LncnFnUXMAg-X96kJW6agXuvx36GPxmcg#:h2=May-12\">here</a></p>",
        "id": 165475672,
        "sender_full_name": "blitzerr",
        "timestamp": 1557685903
    },
    {
        "content": "<p>I created another <a href=\"https://github.com/blitzerr/rust/commits/upvar-tys-squashed\" target=\"_blank\" title=\"https://github.com/blitzerr/rust/commits/upvar-tys-squashed\">branch</a> with all chanegs squashed into 1. Maybe that will be better to locate changes that caused errors.</p>",
        "id": 165491308,
        "sender_full_name": "blitzerr",
        "timestamp": 1557712092
    },
    {
        "content": "<p>Also I don't see <code>ppaux.rs</code> anymore in the <a href=\"https://github.com/rust-lang/rust/tree/master/src/librustc/util\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/tree/master/src/librustc/util\">rust-mainline</a>. So merging will be interesting <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 165491546,
        "sender_full_name": "blitzerr",
        "timestamp": 1557712482
    },
    {
        "content": "<p>lol uh yeah I think <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> did some rewrite</p>",
        "id": 165550704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557769306
    },
    {
        "content": "<p>sounds like progress, <span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span></p>",
        "id": 165550794,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557769342
    },
    {
        "content": "<p>these all seem to have to do with the \"within\" text... hmmm...</p>",
        "id": 165550818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557769353
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> most ppaux changes should be made against <code>src/librustc/ty/print/pretty.rs</code> now</p>",
        "id": 165550876,
        "sender_full_name": "eddyb",
        "timestamp": 1557769400
    },
    {
        "content": "<p>Ya a lot of them have to do with <code>within</code> context</p>",
        "id": 165550985,
        "sender_full_name": "blitzerr",
        "timestamp": 1557769463
    },
    {
        "content": "<p>Thanks a lot <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> . Will keep that in mind about ppaux. <code>pretty</code> sounds like a better name for it</p>",
        "id": 165551040,
        "sender_full_name": "blitzerr",
        "timestamp": 1557769515
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  Do you know where the <code>within</code> text comes from  ?</p>",
        "id": 165551135,
        "sender_full_name": "blitzerr",
        "timestamp": 1557769571
    },
    {
        "content": "<p>Also, you can look at the squashed branch, it should give us a better coverage of actual change as we did, un-did and re-did a few changes</p>",
        "id": 165551172,
        "sender_full_name": "blitzerr",
        "timestamp": 1557769619
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <br>\nIf you have some pointers on the next set of failures, then let me know. I plan on making some progress this weekend.</p>",
        "id": 165913544,
        "sender_full_name": "blitzerr",
        "timestamp": 1558109576
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> let me take a look</p>",
        "id": 165919005,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558113767
    },
    {
        "content": "<p>Thank you sir. <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 165919485,
        "sender_full_name": "blitzerr",
        "timestamp": 1558114085
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> wait, where did you push those commits?</p>",
        "id": 165922919,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558116555
    },
    {
        "content": "<p>I pulled from your branch but I still see 1000+ failures</p>",
        "id": 165922936,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558116562
    },
    {
        "content": "<p>oh, I see, d'oh</p>",
        "id": 165922945,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558116574
    },
    {
        "content": "<blockquote>\n<p>Ya a lot of them have to do with <code>within</code> context</p>\n</blockquote>\n<p>you asked where that text comes from -- the answer is <a href=\"https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src/librustc/traits/error_reporting.rs#L634-L637\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/b982867a7349f84c17317599b59aeb5a7d8a83be/src/librustc/traits/error_reporting.rs#L634-L637\">this line in the trait error-reporting code</a>, I believe.</p>",
        "id": 165923138,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558116710
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> I...might have found your problem. Running a quick test now.</p>",
        "id": 165924069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558117346
    },
    {
        "content": "<p>Awesome !</p>",
        "id": 165930537,
        "sender_full_name": "blitzerr",
        "timestamp": 1558122134
    },
    {
        "content": "<p>Thank you, thank you</p>",
        "id": 165930550,
        "sender_full_name": "blitzerr",
        "timestamp": 1558122147
    },
    {
        "content": "<p>it looks like I was correct</p>",
        "id": 165931769,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558123249
    },
    {
        "content": "<p>but the bug was in 2 places</p>",
        "id": 165931774,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558123251
    },
    {
        "content": "<p>re-running the test at the moment</p>",
        "id": 165931797,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558123270
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>modified   src/librustc/traits/select.rs\n<span class=\"gu\">@@ -2770,7 +2770,7 @@ impl&lt;&#39;cx, &#39;gcx, &#39;tcx&gt; SelectionContext&lt;&#39;cx, &#39;gcx, &#39;tcx&gt; {</span>\n                 ),\n             };\n\n<span class=\"gd\">-            let cause = if is_closure_tuple {</span>\n<span class=\"gi\">+            let cause = if !is_closure_tuple {</span>\n                 obligation.derived_cause(BuiltinDerivedObligation)\n             } else {\n                 obligation.cause.clone()\n<span class=\"gu\">@@ -2829,7 +2829,7 @@ impl&lt;&#39;cx, &#39;gcx, &#39;tcx&gt; SelectionContext&lt;&#39;cx, &#39;gcx, &#39;tcx&gt; {</span>\n     ) -&gt; VtableAutoImplData&lt;PredicateObligation&lt;&#39;tcx&gt;&gt; {\n         debug!(&quot;vtable_auto_impl: nested={:?}&quot;, nested);\n\n<span class=\"gd\">-        let cause = if is_upvar_tuple_ty {</span>\n<span class=\"gi\">+        let cause = if !is_upvar_tuple_ty {</span>\n             obligation.derived_cause(BuiltinDerivedObligation)\n         } else {\n             obligation.cause.clone()\n</pre></div>",
        "id": 165931799,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558123275
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> can you give me perm to write to that branch?</p>",
        "id": 165933265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558124432
    },
    {
        "content": "<p>or else open a PR or something?</p>",
        "id": 165933268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558124436
    },
    {
        "content": "<p>we appear to be down to 9 diffs</p>",
        "id": 165933306,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558124470
    },
    {
        "content": "<p>those 9 diffs I don't quite understand yet</p>",
        "id": 165933310,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558124474
    },
    {
        "content": "<p><em>oh</em> I...think maybe I do</p>",
        "id": 165933342,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558124503
    },
    {
        "content": "<p>but I don't know how to fix it</p>",
        "id": 165933387,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558124522
    },
    {
        "content": "<p>You have pushed chnages to my branch before. Is it not working this time ?</p>",
        "id": 165933410,
        "sender_full_name": "blitzerr",
        "timestamp": 1558124530
    },
    {
        "content": "<p>*changes</p>",
        "id": 165933417,
        "sender_full_name": "blitzerr",
        "timestamp": 1558124535
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  Which branch are you trying to write to <code>upvar-tuple</code> or <code>upvar-tys-squashed</code> ?</p>",
        "id": 165933560,
        "sender_full_name": "blitzerr",
        "timestamp": 1558124653
    },
    {
        "content": "<p>upvar-tys-squashed</p>",
        "id": 165933600,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558124701
    },
    {
        "content": "<p>which would no longer be squashed :)</p>",
        "id": 165933615,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558124709
    },
    {
        "content": "<p>I can force push to upvar-tuple if you want</p>",
        "id": 165933622,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558124719
    },
    {
        "content": "<p>I think maybe you have an open PR for that?</p>",
        "id": 165933629,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558124725
    },
    {
        "content": "<p>Ya, maybe I will just create a  new PR <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 165933654,
        "sender_full_name": "blitzerr",
        "timestamp": 1558124756
    },
    {
        "content": "<p>Do you prefer to have one squashed PR or incremental commits ? What would be easier for you to review ? <br>\n<span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 165933756,
        "sender_full_name": "blitzerr",
        "timestamp": 1558124825
    },
    {
        "content": "<p>mmm I mean commits are good unless they are revising one another</p>",
        "id": 165933875,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558124912
    },
    {
        "content": "<p>in cases like this what I usually do is to squash to 1 commit</p>",
        "id": 165933881,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558124920
    },
    {
        "content": "<p>and then maybe, just before opening the PR, try to break that 1 commit into steps if I can</p>",
        "id": 165933889,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558124930
    },
    {
        "content": "<p>really it doesn't matter <em>that</em> much in this case</p>",
        "id": 165933894,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558124942
    },
    {
        "content": "<p>The changes here were/are revising each other a lot <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 165934023,
        "sender_full_name": "blitzerr",
        "timestamp": 1558125046
    },
    {
        "content": "<p>Sounds good.</p>",
        "id": 165934047,
        "sender_full_name": "blitzerr",
        "timestamp": 1558125068
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  Let me know which branch you end up pushing and I will take them all and create one PR. If you have some idea for the remaining 9 that you would like me to explore, let me know.</p>",
        "id": 165934145,
        "sender_full_name": "blitzerr",
        "timestamp": 1558125145
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> for now I just pushed to upvar-tys-squashed on nikomatsakis/rust</p>",
        "id": 165934217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558125227
    },
    {
        "content": "<p>those 9 failures are here:</p>",
        "id": 165934221,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558125234
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>modified   src/test/ui/closures/closure-move-sync.stderr\n<span class=\"gu\">@@ -6,7 +6,7 @@ LL |     let t = thread::spawn(|| {</span>\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::sync::mpsc::Receiver&lt;()&gt;`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&amp;std::sync::mpsc::Receiver&lt;()&gt;`\n<span class=\"gd\">-   = note: required because it appears within the type `[closure@$DIR/closure-move-sync.rs:6:27: 9:6 recv:&amp;std::sync::mpsc::Receiver&lt;()&gt;]`</span>\n<span class=\"gi\">+   = note: required because it appears within the type `(&amp;std::sync::mpsc::Receiver&lt;()&gt;,)`</span>\n    = note: required by `std::thread::spawn`\n\n error[E0277]: `std::sync::mpsc::Sender&lt;()&gt;` cannot be shared between threads safely\n<span class=\"gu\">@@ -17,7 +17,7 @@ LL |     thread::spawn(|| tx.send(()).unwrap());</span>\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::sync::mpsc::Sender&lt;()&gt;`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&amp;std::sync::mpsc::Sender&lt;()&gt;`\n<span class=\"gd\">-   = note: required because it appears within the type `[closure@$DIR/closure-move-sync.rs:18:19: 18:42 tx:&amp;std::sync::mpsc::Sender&lt;()&gt;]`</span>\n<span class=\"gi\">+   = note: required because it appears within the type `(&amp;std::sync::mpsc::Sender&lt;()&gt;,)`</span>\n    = note: required by `std::thread::spawn`\n\n error: aborting due to 2 previous errors\n</pre></div>",
        "id": 165934281,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558125264
    },
    {
        "content": "<p>that's an example</p>",
        "id": 165934285,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558125267
    },
    {
        "content": "<p>I think what is happening is that the \"causal chain\" is getting messed up</p>",
        "id": 165934291,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558125274
    },
    {
        "content": "<p>in particular, before you inserted those booleans, we used to have a chain like:</p>",
        "id": 165934299,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558125287
    },
    {
        "content": "<ul>\n<li>closure type with upvar tuple (U1, U2, .. Un)</li>\n<li>upvar tuple type</li>\n<li>Ui for some i</li>\n</ul>",
        "id": 165934315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558125302
    },
    {
        "content": "<p>I think that, at least sometimes, we are now getting</p>\n<ul>\n<li>upvar tuple type</li>\n<li>Ui for some i</li>\n</ul>\n<p>and losing the closure type</p>",
        "id": 165934352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558125336
    },
    {
        "content": "<p>I don't quite understand why</p>",
        "id": 165934354,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558125339
    },
    {
        "content": "<p>I can maybe poke at a bit more, but if I had to guess, I would guess that some code in <a href=\"http://select.rs\" target=\"_blank\" title=\"http://select.rs\">select.rs</a> is taking the \"self type\",  idk</p>",
        "id": 165934428,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558125369
    },
    {
        "content": "<p>er, sorry, building a chain from the self type (which is a tuple)</p>",
        "id": 165934462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558125390
    },
    {
        "content": "<p>I see.</p>",
        "id": 165934470,
        "sender_full_name": "blitzerr",
        "timestamp": 1558125395
    },
    {
        "content": "<p>there is one failure that doesn't fit that template</p>",
        "id": 165934620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558125496
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>modified   src/test/ui/mismatched_types/issue-36053-2.stderr\n<span class=\"gu\">@@ -1,3 +1,11 @@</span>\n<span class=\"gi\">+error[E0631]: type mismatch in closure arguments</span>\n<span class=\"gi\">+  --&gt; $DIR/issue-36053-2.rs:7:32</span>\n<span class=\"gi\">+   |</span>\n<span class=\"gi\">+LL |     once::&lt;&amp;str&gt;(&quot;str&quot;).fuse().filter(|a: &amp;str| true).count();</span>\n<span class=\"gi\">+   |                                ^^^^^^ -------------- found signature of `for&lt;&#39;r&gt; fn(&amp;&#39;r str) -&gt; _`</span>\n<span class=\"gi\">+   |                                |</span>\n<span class=\"gi\">+   |                                expected signature of `for&lt;&#39;r&gt; fn(&amp;&#39;r &amp;str) -&gt; _`</span>\n<span class=\"gi\">+</span>\n error[E0599]: no method named `count` found for type `std::iter::Filter&lt;std::iter::Fuse&lt;std::iter::Once&lt;&amp;str&gt;&gt;, [closure@$DIR/issue-36053-2.rs:7:39: 7:53]&gt;` in the current scope\n   --&gt; $DIR/issue-36053-2.rs:7:55\n    |\n<span class=\"gu\">@@ -8,14 +16,6 @@ LL |     once::&lt;&amp;str&gt;(&quot;str&quot;).fuse().filter(|a: &amp;str| true).count();</span>\n            `&amp;mut std::iter::Filter&lt;std::iter::Fuse&lt;std::iter::Once&lt;&amp;str&gt;&gt;, [closure@$DIR/issue-36053-2.rs:7:39: 7:53]&gt; : std::iter::Iterator`\n            `std::iter::Filter&lt;std::iter::Fuse&lt;std::iter::Once&lt;&amp;str&gt;&gt;, [closure@$DIR/issue-36053-2.rs:7:39: 7:53]&gt; : std::iter::Iterator`\n\n<span class=\"gd\">-error[E0631]: type mismatch in closure arguments</span>\n<span class=\"gd\">-  --&gt; $DIR/issue-36053-2.rs:7:32</span>\n<span class=\"gd\">-   |</span>\n<span class=\"gd\">-LL |     once::&lt;&amp;str&gt;(&quot;str&quot;).fuse().filter(|a: &amp;str| true).count();</span>\n<span class=\"gd\">-   |                                ^^^^^^ -------------- found signature of `for&lt;&#39;r&gt; fn(&amp;&#39;r str) -&gt; _`</span>\n<span class=\"gd\">-   |                                |</span>\n<span class=\"gd\">-   |                                expected signature of `for&lt;&#39;r&gt; fn(&amp;&#39;r &amp;str) -&gt; _`</span>\n<span class=\"gd\">-</span>\n error: aborting due to 2 previous errors\n\n Some errors occurred: E0599, E0631.\n</pre></div>",
        "id": 165934625,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558125500
    },
    {
        "content": "<p>no idewhat's going on there</p>",
        "id": 165934631,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558125507
    },
    {
        "content": "<p>oh, I guess just the <em>ordering</em> of the errors changed</p>",
        "id": 165934654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558125527
    },
    {
        "content": "<p>that's probably a non-issue</p>",
        "id": 165934660,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558125530
    },
    {
        "content": "<p>The read and the green looks exactly the same.</p>",
        "id": 165934817,
        "sender_full_name": "blitzerr",
        "timestamp": 1558125647
    },
    {
        "content": "<p>*red</p>",
        "id": 165934819,
        "sender_full_name": "blitzerr",
        "timestamp": 1558125652
    },
    {
        "content": "<p>So, looks like we re-ordered the error messages</p>",
        "id": 165934849,
        "sender_full_name": "blitzerr",
        "timestamp": 1558125678
    },
    {
        "content": "<p>yeah I think that test is probably fine</p>",
        "id": 165935682,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558126289
    },
    {
        "content": "<p>so that leaves the other 8</p>",
        "id": 165935684,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558126293
    },
    {
        "content": "<p>Okay, that a great reduction in numbers. Thank a lot</p>",
        "id": 165935834,
        "sender_full_name": "blitzerr",
        "timestamp": 1558126392
    },
    {
        "content": "<p>so we're down to 8</p>",
        "id": 167321096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559671884
    },
    {
        "content": "<p>the question is</p>",
        "id": 167321101,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559671886
    },
    {
        "content": "<p>should we try to fix those first</p>",
        "id": 167321107,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559671888
    },
    {
        "content": "<p>or rebase first :)</p>",
        "id": 167321112,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559671891
    },
    {
        "content": "<p>were you able to investigate at all?</p>",
        "id": 167321133,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559671907
    },
    {
        "content": "<p>the errors I am seeing all seem to be that the closure type</p>",
        "id": 167321208,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559671928
    },
    {
        "content": "<p>is replaced with a tuple</p>",
        "id": 167321230,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559671930
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>modified   src/test/ui/closures/closure-move-sync.stderr\n<span class=\"gu\">@@ -6,7 +6,7 @@ LL |     let t = thread::spawn(|| {</span>\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::sync::mpsc::Receiver&lt;()&gt;`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&amp;std::sync::mpsc::Receiver&lt;()&gt;`\n<span class=\"gd\">-   = note: required because it appears within the type `[closure@$DIR/closure-move-sync.rs:6:27: 9:6 recv:&amp;std::sync::mpsc::Receiver&lt;()&gt;]`</span>\n<span class=\"gi\">+   = note: required because it appears within the type `(&amp;std::sync::mpsc::Receiver&lt;()&gt;,)`</span>\n    = note: required by `std::thread::spawn`\n\n error[E0277]: `std::sync::mpsc::Sender&lt;()&gt;` cannot be shared between threads safely\n<span class=\"gu\">@@ -17,7 +17,7 @@ LL |     thread::spawn(|| tx.send(()).unwrap());</span>\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::sync::mpsc::Sender&lt;()&gt;`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&amp;std::sync::mpsc::Sender&lt;()&gt;`\n<span class=\"gd\">-   = note: required because it appears within the type `[closure@$DIR/closure-move-sync.rs:18:19: 18:42 tx:&amp;std::sync::mpsc::Sender&lt;()&gt;]`</span>\n<span class=\"gi\">+   = note: required because it appears within the type `(&amp;std::sync::mpsc::Sender&lt;()&gt;,)`</span>\n    = note: required by `std::thread::spawn`\n\n error: aborting due to 2 previous errors\n</pre></div>",
        "id": 167321246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559671938
    },
    {
        "content": "<p>stuff like that</p>",
        "id": 167321250,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559671942
    },
    {
        "content": "<p>seems pretty specific</p>",
        "id": 167321252,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559671946
    },
    {
        "content": "<p>Maybe fixing them first might be good idea then we know that the code is perfect based of off one commit.</p>",
        "id": 167321264,
        "sender_full_name": "blitzerr",
        "timestamp": 1559671958
    },
    {
        "content": "<p>yeah, can't hurt</p>",
        "id": 167321280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559671964
    },
    {
        "content": "<p>Any failures after that are merge related issues.</p>",
        "id": 167321327,
        "sender_full_name": "blitzerr",
        "timestamp": 1559671974
    },
    {
        "content": "<p>My two cents</p>",
        "id": 167321337,
        "sender_full_name": "blitzerr",
        "timestamp": 1559671980
    },
    {
        "content": "<p>ok well I inserted some debug!</p>",
        "id": 167321765,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559672198
    },
    {
        "content": "<p>I'm going to try and take a look at this in the background as I do other things</p>",
        "id": 167321770,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559672204
    },
    {
        "content": "<p>So assuming that merge is all that is left, which I plan to finish this week if we get all the tests fixed, what should be the next steps ?</p>",
        "id": 167321853,
        "sender_full_name": "blitzerr",
        "timestamp": 1559672268
    },
    {
        "content": "<p>not sure, let's re-evaluate then</p>",
        "id": 167322648,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559672695
    },
    {
        "content": "<p>I think the freevars refactorings are still needed</p>",
        "id": 167322674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559672707
    },
    {
        "content": "<p>I haven't quite figured out the impact of <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>'s changes though</p>",
        "id": 167322681,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559672713
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span>  was working on that.</p>",
        "id": 167322745,
        "sender_full_name": "blitzerr",
        "timestamp": 1559672748
    },
    {
        "content": "<p>well I think I see the bug, basically the change I suggested is kind of flawed</p>",
        "id": 167323050,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559672912
    },
    {
        "content": "<p>specifically this idea:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">cause</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">is_closure_tuple</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">obligation</span><span class=\"p\">.</span><span class=\"n\">derived_cause</span><span class=\"p\">(</span><span class=\"n\">BuiltinDerivedObligation</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">obligation</span><span class=\"p\">.</span><span class=\"n\">cause</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">};</span><span class=\"w\"></span>\n</pre></div>",
        "id": 167323144,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559672986
    },
    {
        "content": "<p>doesn't work out because of what <code>derived_cause</code> does</p>",
        "id": 167323159,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559673000
    },
    {
        "content": "<p>the idea was that we have a complete chain that looks like</p>\n<ul>\n<li>closure</li>\n<li>upvar tuple</li>\n<li>upvar type</li>\n</ul>",
        "id": 167323252,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559673031
    },
    {
        "content": "<p>and we want to remove the \"upvar tuple\" from the chain</p>",
        "id": 167323261,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559673038
    },
    {
        "content": "<p>ah hmm</p>",
        "id": 167323307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559673061
    },
    {
        "content": "<p>so basically if you walk through the fix I suggested it winds up creating the wrong chain</p>",
        "id": 167323454,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559673128
    },
    {
        "content": "<p>I think a better fix might be something like this:</p>",
        "id": 167323468,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559673134
    },
    {
        "content": "<p>(sorry, had to do a quick meeting)</p>",
        "id": 167325036,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559674160
    },
    {
        "content": "<p>introduce a new variant <code>ObligationCauseCode::HiddenDerivedObligation</code></p>",
        "id": 167325048,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559674177
    },
    {
        "content": "<p>and then have the code above be like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">cause</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">is_closure_tuple</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">obligation</span><span class=\"p\">.</span><span class=\"n\">derived_cause</span><span class=\"p\">(</span><span class=\"n\">BuiltinDerivedObligation</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">obligation</span><span class=\"p\">.</span><span class=\"n\">derived_cause</span><span class=\"p\">(</span><span class=\"n\">HiddenDerivedObligation</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">};</span><span class=\"w\"></span>\n</pre></div>",
        "id": 167325070,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559674194
    },
    {
        "content": "<p>and then modify <a href=\"https://github.com/rust-lang/rust/blob/acda261de83475cf6cbc607d570153bb864ee7be/src/librustc/traits/error_reporting.rs#L1622-L1635\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/acda261de83475cf6cbc607d570153bb864ee7be/src/librustc/traits/error_reporting.rs#L1622-L1635\">this code here</a> to make a <code>HiddenDerivedObligation</code> just recurse to its parents and print nothing</p>",
        "id": 167325219,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559674272
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> does that <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> look like something you'd be game to try?</p>",
        "id": 167325241,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559674288
    },
    {
        "content": "<p>Sounds good <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> . Will give that a shot. Thanks for looking into it and suggesting the fix.</p>",
        "id": 167329069,
        "sender_full_name": "blitzerr",
        "timestamp": 1559677067
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <br>\nI made the change you <a href=\"https://github.com/blitzerr/rust/commit/d728f1f1584fe933dd6eb8f95bcb95729e736478#diff-0e12890ad498e250783f40f88a8b8ec6R1562\" target=\"_blank\" title=\"https://github.com/blitzerr/rust/commit/d728f1f1584fe933dd6eb8f95bcb95729e736478#diff-0e12890ad498e250783f40f88a8b8ec6R1562\">suggested</a>. But the problem is not solved.</p>",
        "id": 167667325,
        "sender_full_name": "blitzerr",
        "timestamp": 1560027305
    },
    {
        "content": "<p>Changes are <a href=\"https://github.com/blitzerr/rust/commits/upvar-tys-squashed\" target=\"_blank\" title=\"https://github.com/blitzerr/rust/commits/upvar-tys-squashed\">here</a>. What you said makes complete sense but recursing there is not giving us what we want.  It still generates the note as stated by <a href=\"https://github.com/blitzerr/rust/commit/d728f1f1584fe933dd6eb8f95bcb95729e736478#diff-0e12890ad498e250783f40f88a8b8ec6R1551\" target=\"_blank\" title=\"https://github.com/blitzerr/rust/commit/d728f1f1584fe933dd6eb8f95bcb95729e736478#diff-0e12890ad498e250783f40f88a8b8ec6R1551\">this line</a>. Would if make sense to check for type <a href=\"https://github.com/blitzerr/rust/commit/d728f1f1584fe933dd6eb8f95bcb95729e736478#diff-0e12890ad498e250783f40f88a8b8ec6L1550\" target=\"_blank\" title=\"https://github.com/blitzerr/rust/commit/d728f1f1584fe933dd6eb8f95bcb95729e736478#diff-0e12890ad498e250783f40f88a8b8ec6L1550\">here</a> and then skip the err.note if it is upvar_tuple ? Its definitely not elegant.</p>",
        "id": 167667539,
        "sender_full_name": "blitzerr",
        "timestamp": 1560027622
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> I think you have to modify <a href=\"https://github.com/blitzerr/rust/blob/d728f1f1584fe933dd6eb8f95bcb95729e736478/src/librustc/traits/select.rs#L2832\" target=\"_blank\" title=\"https://github.com/blitzerr/rust/blob/d728f1f1584fe933dd6eb8f95bcb95729e736478/src/librustc/traits/select.rs#L2832\">these lines</a> in the same way. From:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">cause</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">is_upvar_tuple_ty</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">obligation</span><span class=\"p\">.</span><span class=\"n\">derived_cause</span><span class=\"p\">(</span><span class=\"n\">BuiltinDerivedObligation</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">obligation</span><span class=\"p\">.</span><span class=\"n\">cause</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>to</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">cause</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">is_upvar_tuple_ty</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">obligation</span><span class=\"p\">.</span><span class=\"n\">derived_cause</span><span class=\"p\">(</span><span class=\"n\">BuiltinDerivedObligation</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">obligation</span><span class=\"p\">.</span><span class=\"n\">derived_cause</span><span class=\"p\">(</span><span class=\"n\">HiddenDerivedObligation</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>also, we should probably rename the <code>is_upvar_tupel_ty</code> etc to <code>hide_derived_obligation</code> or something</p>",
        "id": 167798197,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560202100
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"o\">----</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">ui</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">ui</span><span class=\"o\">/</span><span class=\"n\">closures</span><span class=\"o\">/</span><span class=\"n\">closure</span><span class=\"o\">-</span><span class=\"k\">move</span><span class=\"o\">-</span><span class=\"n\">sync</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"> </span><span class=\"o\">----</span><span class=\"w\"></span>\n<span class=\"n\">diff</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">stderr</span>:\n\n<span class=\"mi\">6</span><span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">7</span><span class=\"w\">      </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">help</span>: <span class=\"nc\">the</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">marker</span>::<span class=\"nb\">Sync</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">implemented</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">mpsc</span>::<span class=\"n\">Receiver</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"mi\">8</span><span class=\"w\">      </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">required</span><span class=\"w\"> </span><span class=\"n\">because</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">requirements</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">marker</span>::<span class=\"nb\">Send</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">&amp;</span><span class=\"n\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">mpsc</span>::<span class=\"n\">Receiver</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"o\">-</span><span class=\"w\">      </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">required</span><span class=\"w\"> </span><span class=\"n\">because</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">appears</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"p\">[</span><span class=\"n\">closure</span><span class=\"o\">@</span><span class=\"cp\">$DIR</span><span class=\"o\">/</span><span class=\"n\">closure</span><span class=\"o\">-</span><span class=\"k\">move</span><span class=\"o\">-</span><span class=\"n\">sync</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">6</span>:<span class=\"mi\">27</span>: <span class=\"mi\">9</span>:<span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"n\">recv</span>:<span class=\"kp\">&amp;</span><span class=\"nc\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">mpsc</span>::<span class=\"n\">Receiver</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">]</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">      </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">required</span><span class=\"w\"> </span><span class=\"n\">because</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">appears</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">mpsc</span>::<span class=\"n\">Receiver</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">,)</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"mi\">10</span><span class=\"w\">     </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">required</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">thread</span>::<span class=\"n\">spawn</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"mi\">11</span><span class=\"w\"></span>\n<span class=\"mi\">12</span><span class=\"w\">  </span><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0277</span><span class=\"p\">]</span>: <span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">mpsc</span>::<span class=\"n\">Sender</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">cannot</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">shared</span><span class=\"w\"> </span><span class=\"n\">between</span><span class=\"w\"> </span><span class=\"n\">threads</span><span class=\"w\"> </span><span class=\"n\">safely</span><span class=\"w\"></span>\n\n<span class=\"mi\">17</span><span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">18</span><span class=\"w\">     </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">help</span>: <span class=\"nc\">the</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">marker</span>::<span class=\"nb\">Sync</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">implemented</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">mpsc</span>::<span class=\"n\">Sender</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"mi\">19</span><span class=\"w\">     </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">required</span><span class=\"w\"> </span><span class=\"n\">because</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">requirements</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">marker</span>::<span class=\"nb\">Send</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">&amp;</span><span class=\"n\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">mpsc</span>::<span class=\"n\">Sender</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"o\">-</span><span class=\"w\">      </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">required</span><span class=\"w\"> </span><span class=\"n\">because</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">appears</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"p\">[</span><span class=\"n\">closure</span><span class=\"o\">@</span><span class=\"cp\">$DIR</span><span class=\"o\">/</span><span class=\"n\">closure</span><span class=\"o\">-</span><span class=\"k\">move</span><span class=\"o\">-</span><span class=\"n\">sync</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">18</span>:<span class=\"mi\">19</span>: <span class=\"mi\">18</span>:<span class=\"mi\">42</span><span class=\"w\"> </span><span class=\"n\">tx</span>:<span class=\"kp\">&amp;</span><span class=\"nc\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">mpsc</span>::<span class=\"n\">Sender</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">]</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">      </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">required</span><span class=\"w\"> </span><span class=\"n\">because</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">appears</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">mpsc</span>::<span class=\"n\">Sender</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">,)</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"mi\">21</span><span class=\"w\">     </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">required</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">thread</span>::<span class=\"n\">spawn</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"mi\">22</span><span class=\"w\"></span>\n<span class=\"mi\">23</span><span class=\"w\">  </span><span class=\"n\">error</span>: <span class=\"nc\">aborting</span><span class=\"w\"> </span><span class=\"n\">due</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">previous</span><span class=\"w\"> </span><span class=\"n\">errors</span><span class=\"w\"></span>\n</pre></div>",
        "id": 167815069,
        "sender_full_name": "blitzerr",
        "timestamp": 1560222534
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"o\">---</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">librustc</span><span class=\"o\">/</span><span class=\"n\">traits</span><span class=\"o\">/</span><span class=\"n\">select</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"></span>\n<span class=\"o\">+++</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">librustc</span><span class=\"o\">/</span><span class=\"n\">traits</span><span class=\"o\">/</span><span class=\"n\">select</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"></span>\n<span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">2829</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mi\">2829</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;cx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;gcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">SelectionContext</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;cx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;gcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">VtableAutoImplData</span><span class=\"o\">&lt;</span><span class=\"n\">PredicateObligation</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;vtable_auto_impl: nested={:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">nested</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"o\">-</span><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">cause</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">is_upvar_tuple_ty</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"o\">-</span><span class=\"w\">            </span><span class=\"n\">obligation</span><span class=\"p\">.</span><span class=\"n\">derived_cause</span><span class=\"p\">(</span><span class=\"n\">BuiltinDerivedObligation</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">cause</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">is_upvar_tuple_ty</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">            </span><span class=\"n\">obligation</span><span class=\"p\">.</span><span class=\"n\">derived_cause</span><span class=\"p\">(</span><span class=\"n\">HiddenDerivedObligation</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"o\">-</span><span class=\"w\">            </span><span class=\"n\">obligation</span><span class=\"p\">.</span><span class=\"n\">cause</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">            </span><span class=\"n\">obligation</span><span class=\"p\">.</span><span class=\"n\">derived_cause</span><span class=\"p\">(</span><span class=\"n\">BuiltinDerivedObligation</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">obligations</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">collect_predicates_for_types</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">             </span><span class=\"n\">obligation</span><span class=\"p\">.</span><span class=\"n\">param_env</span><span class=\"p\">,</span><span class=\"w\"></span>\n</pre></div>",
        "id": 167815088,
        "sender_full_name": "blitzerr",
        "timestamp": 1560222571
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  Unfortunately it does not fixes it.</p>",
        "id": 167815617,
        "sender_full_name": "blitzerr",
        "timestamp": 1560223233
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> is this pushed to your branch?</p>",
        "id": 167872474,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560274948
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  This last bit of change that you suggested yesterday is not pushed to my branch.</p>",
        "id": 167872939,
        "sender_full_name": "blitzerr",
        "timestamp": 1560275328
    },
    {
        "content": "<p>can you push it?</p>",
        "id": 167872966,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560275347
    },
    {
        "content": "<p>But the things that I did over the weekend is.</p>",
        "id": 167872967,
        "sender_full_name": "blitzerr",
        "timestamp": 1560275347
    },
    {
        "content": "<p>Give me a few minutes. I will push it</p>",
        "id": 167873008,
        "sender_full_name": "blitzerr",
        "timestamp": 1560275402
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  Its pushed to branch <code>upvar-tys-squashed</code></p>",
        "id": 167874095,
        "sender_full_name": "blitzerr",
        "timestamp": 1560276075
    },
    {
        "content": "<p><a href=\"https://github.com/blitzerr/rust/commits/upvar-tys-squashed\" target=\"_blank\" title=\"https://github.com/blitzerr/rust/commits/upvar-tys-squashed\">https://github.com/blitzerr/rust/commits/upvar-tys-squashed</a></p>",
        "id": 167874221,
        "sender_full_name": "blitzerr",
        "timestamp": 1560276131
    },
    {
        "content": "<p>ok</p>",
        "id": 167874508,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560276309
    },
    {
        "content": "<p>I'm starting a build now</p>",
        "id": 167874547,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560276338
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  how did it go ?</p>",
        "id": 167905119,
        "sender_full_name": "blitzerr",
        "timestamp": 1560301203
    },
    {
        "content": "<p>I reproduced your errors but didn't get a chance to look more deeply yet</p>",
        "id": 167949879,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560348238
    },
    {
        "content": "<p>did a little digging</p>",
        "id": 170501264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562717548
    },
    {
        "content": "<p><em>somehow</em> the cause is \"off by one\"</p>",
        "id": 170501269,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562717555
    },
    {
        "content": "<p>I see e.g. that the obligation causes are like:</p>\n<ul>\n<li>cause_code=BuiltinDerivedObligation(DerivedObligationCause { parent_trait_ref: Binder(&lt;(&amp;std::sync::mpsc::Sender&lt;()&gt;,) as std::marker::Send&gt;),</li>\n<li>cause_code=HiddenDerivedObligation(DerivedObligationCause { parent_trait_ref: Binder(&lt;[closure@closure-move-sync.rs:18:19: 18:42 tx:_] as std::marker::Send&gt;)</li>\n<li>cause_code=ItemObligation(DefId(1/0:340 ~ std[7eac]::thread[0]::spawn[0]))</li>\n</ul>",
        "id": 170501299,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562717616
    },
    {
        "content": "<p>the hidden one should be the <em>tuple</em></p>",
        "id": 170501305,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562717625
    },
    {
        "content": "<p>wait, no, that's wrong. The problem is more in the <code>note_obligation_cause_code</code> --</p>",
        "id": 170526229,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562751348
    },
    {
        "content": "<p>when it prints out the (e.g.) \"builtin derived obligation\", it is printing the <em>self type</em> from the <em>parent</em></p>",
        "id": 170526339,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562751436
    },
    {
        "content": "<p>but that's the one we want to <em>skip</em></p>",
        "id": 170526345,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562751448
    },
    {
        "content": "<p>so <span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> what needs to happen is that in <a href=\"https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src/librustc/traits/error_reporting.rs#L1625-L1629\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src/librustc/traits/error_reporting.rs#L1625-L1629\">roughly this code here</a>, we need to not necessarily print the type from the <code>parent_trait_ref</code> -- we need to look at the <code>parent_code</code> and, if it is a <code>HiddenDerivedObligation</code>, then we need to iterate to <em>its</em> parent</p>",
        "id": 170526537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562751609
    },
    {
        "content": "<p>Thanks a lot <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> . I will give this a shot.</p>",
        "id": 170543056,
        "sender_full_name": "blitzerr",
        "timestamp": 1562766729
    },
    {
        "content": "<p>Cool :)</p>",
        "id": 170565024,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562782152
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 171006488,
        "sender_full_name": "blitzerr",
        "timestamp": 1563296895
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> did it work? :)</p>",
        "id": 171702755,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1564069690
    },
    {
        "content": "<p>Sorry for the delay, <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> . Unfortunately it didn't</p>",
        "id": 171901266,
        "sender_full_name": "blitzerr",
        "timestamp": 1564342596
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">           </span><span class=\"n\">ObligationCauseCode</span>::<span class=\"n\">BuiltinDerivedObligation</span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ObligationCauseCode</span>::<span class=\"n\">HiddenDerivedObligation</span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">idata</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">parent_code</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">err</span><span class=\"p\">.</span><span class=\"n\">note</span><span class=\"p\">(</span><span class=\"s\">&quot;Test Note: Found hidden type. So skipping ..&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">parent_trait_ref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">resolve_type_vars_if_possible</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">idata</span><span class=\"p\">.</span><span class=\"n\">parent_trait_ref</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">parent_predicate</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">parent_trait_ref</span><span class=\"p\">.</span><span class=\"n\">to_predicate</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">note_obligation_cause_code</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                                    </span><span class=\"o\">&amp;</span><span class=\"n\">parent_predicate</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                                    </span><span class=\"o\">&amp;</span><span class=\"n\">idata</span><span class=\"p\">.</span><span class=\"n\">parent_code</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                                    </span><span class=\"n\">obligated_types</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">parent_trait_ref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">resolve_type_vars_if_possible</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">parent_trait_ref</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">parent_predicate</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">parent_trait_ref</span><span class=\"p\">.</span><span class=\"n\">to_predicate</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">parent_trait_ref</span><span class=\"p\">.</span><span class=\"n\">skip_binder</span><span class=\"p\">().</span><span class=\"n\">self_ty</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">err</span><span class=\"p\">.</span><span class=\"n\">note</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">format</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;required because it appears within the type `{}`&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">obligated_types</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">ty</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">is_recursive_obligation</span><span class=\"p\">(</span><span class=\"n\">obligated_types</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">parent_code</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">note_obligation_cause_code</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                                    </span><span class=\"o\">&amp;</span><span class=\"n\">parent_predicate</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                                    </span><span class=\"o\">&amp;</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">parent_code</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                                    </span><span class=\"n\">obligated_types</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">ObligationCauseCode</span>::<span class=\"n\">HiddenDerivedObligation</span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ObligationCauseCode</span>::<span class=\"n\">HiddenDerivedObligation</span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">idata</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">parent_code</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">err</span><span class=\"p\">.</span><span class=\"n\">note</span><span class=\"p\">(</span><span class=\"s\">&quot;Test Note: ObligationCauseCode::HiddenDerivedObligation ..&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">parent_trait_ref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">resolve_type_vars_if_possible</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">idata</span><span class=\"p\">.</span><span class=\"n\">parent_trait_ref</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">parent_predicate</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">parent_trait_ref</span><span class=\"p\">.</span><span class=\"n\">to_predicate</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">note_obligation_cause_code</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                                    </span><span class=\"o\">&amp;</span><span class=\"n\">parent_predicate</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                                    </span><span class=\"o\">&amp;</span><span class=\"n\">idata</span><span class=\"p\">.</span><span class=\"n\">parent_code</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                                    </span><span class=\"n\">obligated_types</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 171901273,
        "sender_full_name": "blitzerr",
        "timestamp": 1564342614
    },
    {
        "content": "<p>That's the change I made in <code> fn note_obligation_cause_code</code>.</p>",
        "id": 171901284,
        "sender_full_name": "blitzerr",
        "timestamp": 1564342646
    },
    {
        "content": "<p>The output after the <code>test err.notes</code> are:</p>",
        "id": 171901290,
        "sender_full_name": "blitzerr",
        "timestamp": 1564342667
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>\n</pre></div>",
        "id": 171901291,
        "sender_full_name": "blitzerr",
        "timestamp": 1564342673
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 172061791,
        "sender_full_name": "blitzerr",
        "timestamp": 1564510084
    },
    {
        "content": "<blockquote>\n<p>Sorry for the delay, <span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> . Unfortunately it didn't</p>\n</blockquote>\n<p>I see <span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> that this didn't work, eh? Did you push the changes by any chance?</p>",
        "id": 174254493,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1566929467
    },
    {
        "content": "<p>hi <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 174254513,
        "sender_full_name": "blitzerr",
        "timestamp": 1566929484
    },
    {
        "content": "<p>The changes are pushed</p>",
        "id": 174254528,
        "sender_full_name": "blitzerr",
        "timestamp": 1566929500
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  Please find them here : <a href=\"https://github.com/blitzerr/rust/commit/2af330a80b5fce8dd0761cae6bf041c445c783e0\" target=\"_blank\" title=\"https://github.com/blitzerr/rust/commit/2af330a80b5fce8dd0761cae6bf041c445c783e0\">https://github.com/blitzerr/rust/commit/2af330a80b5fce8dd0761cae6bf041c445c783e0</a></p>",
        "id": 174254663,
        "sender_full_name": "blitzerr",
        "timestamp": 1566929585
    },
    {
        "content": "<p>ok, I'm running locally :)</p>",
        "id": 174254666,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1566929586
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> so I see a lot of tests with a new note:</p>\n<div class=\"codehilite\"><pre><span></span>+   = note: ExprAssignable + MatchExpr etc.\n</pre></div>",
        "id": 174256601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1566930941
    },
    {
        "content": "<p>ugh but also some other discrepancies</p>",
        "id": 174256702,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1566930989
    },
    {
        "content": "<p>man this so annoying</p>",
        "id": 174256706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1566930992
    },
    {
        "content": "<p>My RUSTC_LOG was not working so I added test logs to <code>err.note(\"</code></p>",
        "id": 174256744,
        "sender_full_name": "blitzerr",
        "timestamp": 1566931017
    },
    {
        "content": "<p>ok yes I see that</p>",
        "id": 174256762,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1566931031
    },
    {
        "content": "<p>To track the control flow. Sorry about that.</p>",
        "id": 174256764,
        "sender_full_name": "blitzerr",
        "timestamp": 1566931032
    },
    {
        "content": "<p>I think it's <code>RUST_LOG</code></p>",
        "id": 174256766,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1566931036
    },
    {
        "content": "<p>since your branch is so old</p>",
        "id": 174256769,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1566931038
    },
    {
        "content": "<p>in any case, i'm removing those and re-running :)</p>",
        "id": 174256800,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1566931063
    },
    {
        "content": "<p>The latest failed tests are tracked <a href=\"https://paper.dropbox.com/doc/UI-tests-failing--AjqkMY48CYSmyR0Tt_9mopdkAg-X96kJW6agXuvx36GPxmcg\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/UI-tests-failing--AjqkMY48CYSmyR0Tt_9mopdkAg-X96kJW6agXuvx36GPxmcg\">here</a></p>",
        "id": 174257343,
        "sender_full_name": "blitzerr",
        "timestamp": 1566931369
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  <span aria-label=\"point of information\" class=\"emoji emoji-261d\" role=\"img\" title=\"point of information\">:point_of_information:</span></p>",
        "id": 174257350,
        "sender_full_name": "blitzerr",
        "timestamp": 1566931379
    },
    {
        "content": "<p>The way I was looking at it is to get it to just print </p>\n<div class=\"codehilite\"><pre><span></span>-           = note: required because it appears within the type `[closure@$DIR/closure-move-sync.rs:6:27: 9:6 recv:&amp;std::sync::mpsc::Receiver&lt;()&gt;]```\nsomehow\n</pre></div>",
        "id": 174257411,
        "sender_full_name": "blitzerr",
        "timestamp": 1566931429
    },
    {
        "content": "<p>In the latest one:</p>\n<div class=\"codehilite\"><pre><span></span>+           = note: required because it appears within the type `(&amp;std::sync::mpsc::Receiver&lt;()&gt;,)`\n</pre></div>\n\n\n<p>this is gone</p>",
        "id": 174257505,
        "sender_full_name": "blitzerr",
        "timestamp": 1566931480
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> all fixed now ? <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 174366950,
        "sender_full_name": "blitzerr",
        "timestamp": 1567002069
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <br>\nFollowing up from today's compiler meeting, you suggest that we merge to the latest master and then fix things - was that you thinking out loud or you wanted me to try that. The issue is that the merge will bring in new issues and we won't know whether the cause is the refactoring or the merging.<br>\nWhat do you think ?</p>",
        "id": 175539091,
        "sender_full_name": "blitzerr",
        "timestamp": 1568301451
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> well I don't think we should <em>literally</em> merge</p>",
        "id": 175569655,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568321165
    },
    {
        "content": "<p>However, I do think we've lost a lot of momentum over these test failures and ultimately I don't think they're that big of a deal</p>",
        "id": 175569668,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568321185
    },
    {
        "content": "<p>So I think what I would recommend is to take the PR and try to \"rebase\" the key commits over to master</p>",
        "id": 175569677,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568321195
    },
    {
        "content": "<p>effectively, re-implement</p>",
        "id": 175569682,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568321203
    },
    {
        "content": "<p>I guess I have to review the diff / history to see what that means exactly</p>",
        "id": 175569735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568321235
    },
    {
        "content": "<p>but at this point it seems like the right approach to me</p>",
        "id": 175569748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568321248
    }
]