[
    {
        "content": "<p>PS, <span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span>, let me know if there are reviews and things I can do to help -- I'm largely AFK this week. but if you point me at stuff I can try to make time.</p>",
        "id": 221224859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1609345817
    },
    {
        "content": "<p>1) So I had updated the PR for mutability, but we still need to not use the hack. I wasn't able to figure that out.  <a href=\"https://github.com/rust-lang/rust/pull/80092\">https://github.com/rust-lang/rust/pull/80092</a></p>\n<p>There was a merged conflict because of some change last night, I'll try push a fixup today.<br>\n2) We'll be creating a PR for the first pass of migrations and for  precise diagnostics when reporting Closure type today, so I'll send them here, Iet me know if u want me to @-ping you</p>\n<p>3) So needs_drop is implemented as a query and if I understand correctly if I add another query for figuring out non standard drops, we would probably end up storing results somewhere. <br>\n4) I implemented the precision path pass for mgirations I think  our non_standard_needs_drop would need support Drop implemented for ty and ty needs drop.</p>\n<p>Eg:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">A</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Drop</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">B</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">C</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">a</span>: <span class=\"nc\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">B</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Drop</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">c</span>: <span class=\"nc\">C</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">closure</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"c1\">// move c.a;</span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Now here when we do the precise path we see that the only type within <code>c</code> that implements Drop has been captured but C still implemnets drop itself and then </p>\n<p>a)  That would run at a different time now<br>\nb) Assuming this class exists for use with closures, depending on how /what expectations the Drops are written,  there might be difference in behavior.</p>",
        "id": 221251164,
        "sender_full_name": "Aman Arora",
        "timestamp": 1609366339
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/80629\">https://github.com/rust-lang/rust/pull/80629</a></p>",
        "id": 221416405,
        "sender_full_name": "Aman Arora",
        "timestamp": 1609620120
    },
    {
        "content": "<p>I added this PR (<a href=\"https://github.com/rust-lang/rust/pull/80635\">https://github.com/rust-lang/rust/pull/80635</a>) which allows us to show precise path in diagnostics message related to closure kind selection decision</p>",
        "id": 221429484,
        "sender_full_name": "rocksand",
        "timestamp": 1609641224
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281950\">Aman Arora</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/reviews.20or.20other.20things/near/221251164\">said</a>:</p>\n<blockquote>\n<p>3) So needs_drop is implemented as a query and if I understand correctly if I add another query for figuring out non standard drops, we would probably end up storing results somewhere. <br>\n</p>\n</blockquote>\n<p>I gave some more thought on insignificant dtors. <br>\nSay we have <code>struct Foo&lt;T&gt;{ v: Vec&lt;T&gt;, s: String }</code> and <code>foo: F</code>. Now say the closure only needs to capture <code>foo.s</code>. We see that <code>foo.v</code> is defined in stdlib and therefore we would've marked the dtor as insignificant. </p>\n<p>What happens <code>T</code> implements <code>Drop</code>. Then the dtor of foo.v becomes somewhat significant because it will be triggered when <code>foo.v</code> is dropped.</p>\n<p>So one way around this _might_ be if this is an insignificant dtor we look at the substs for this type and see if any of the Generic Args have a significant dtor</p>\n<blockquote>\n<p>4) I implemented the precision path pass for mgirations I think  our non_standard_needs_drop would need support Drop implemented for ty and ty needs drop.</p>\n</blockquote>\n<p>I fixed this. I got help from @_LÃ©o Lanteri Thauvin|255061. I just check for if a drop is implemented for ty and if so is it fully captured.</p>",
        "id": 221756829,
        "sender_full_name": "Aman Arora",
        "timestamp": 1609932416
    },
    {
        "content": "<p>This might be fringe, but I was imagining a case where drop order changing with only std types would have a very observable effect.</p>\n<div class=\"codehilite\"><pre><span></span><code>use std::fs::File;\nuse std::io::{BufWriter, Write};\n\nstruct Foo {\n    bw1: BufWriter&lt;File&gt;,\n    bw2: BufWriter&lt;File&gt;,\n}\n\nfn main() {\n    let file1 = File::create(&quot;foo.bin&quot;).unwrap();\n    let file2 = File::create(&quot;foo.bin&quot;).unwrap();\n\n    let mut foo = Foo {\n        bw1: BufWriter::new(file1),\n        bw2: BufWriter::new(file2),\n    };\n\n    foo.bw1.write_all(&amp;[0]).unwrap();\n    foo.bw2.write_all(&amp;[1]).unwrap();\n\n    let _c = move || {\n        println!(&quot;{}&quot;, foo.bw2.capacity());\n    };\n}\n</code></pre></div>\n<p>If I understand correctly, the file contents would be <code>1</code> without RFC-2229 and <code>0</code> with RFC-2229.</p>\n<p>Not suggesting drop order shouldn't change. Just showing that a type being in std isn't enough to say that its drop isn't significant. But you probably already know that. Have an extra example in that case. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 221927228,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1610016276
    },
    {
        "content": "<p>thank you for bringing this up, I personally hadn't thought of this. I'll take this into account and discuss it with the rest of the working-group. I'll try to remember to update you about the decision we make. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 221933085,
        "sender_full_name": "Aman Arora",
        "timestamp": 1610020471
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ready when you are. We are waiting to be let in</p>",
        "id": 222089518,
        "sender_full_name": "Aman Arora",
        "timestamp": 1610121793
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306073\">Tyson Nottingham</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/reviews.20or.20other.20things/near/221927228\">said</a>:</p>\n<blockquote>\n<p>This might be fringe, but I was imagining a case where drop order changing with only std types would have a very observable effect.</p>\n<div class=\"codehilite\"><pre><span></span><code>use std::fs::File;\nuse std::io::{BufWriter, Write};\n\nstruct Foo {\n    bw1: BufWriter&lt;File&gt;,\n    bw2: BufWriter&lt;File&gt;,\n}\n\nfn main() {\n    let file1 = File::create(&quot;foo.bin&quot;).unwrap();\n    let file2 = File::create(&quot;foo.bin&quot;).unwrap();\n\n    let mut foo = Foo {\n        bw1: BufWriter::new(file1),\n        bw2: BufWriter::new(file2),\n    };\n\n    foo.bw1.write_all(&amp;[0]).unwrap();\n    foo.bw2.write_all(&amp;[1]).unwrap();\n\n    let _c = move || {\n        println!(&quot;{}&quot;, foo.bw2.capacity());\n    };\n}\n</code></pre></div>\n<p>If I understand correctly, the file contents would be <code>1</code> without RFC-2229 and <code>0</code> with RFC-2229.</p>\n<p>Not suggesting drop order shouldn't change. Just showing that a type being in std isn't enough to say that its drop isn't significant. But you probably already know that. Have an extra example in that case. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n</blockquote>\n<p>So the issue really was that I misunderstood if we wanted to label all types as having a significant destructor. We plan on only doing so for only some types in the stdlib. We'll essentially run the lint and select types that only clean up memory and whose change in Drop order won't have any effects on user code.</p>",
        "id": 222094803,
        "sender_full_name": "Aman Arora",
        "timestamp": 1610124277
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I forgot to link the PRs:</p>\n<ul>\n<li>First pass for lint: <a href=\"https://github.com/rust-lang/rust/pull/80629\">https://github.com/rust-lang/rust/pull/80629</a></li>\n<li>Improve diagnostics when closure doesn't meet trait bound: <a href=\"https://github.com/rust-lang/rust/pull/80635\">https://github.com/rust-lang/rust/pull/80635</a></li>\n</ul>\n<p>Also if u can give me an idea of your availability for sync meetings?</p>",
        "id": 222451043,
        "sender_full_name": "Aman Arora",
        "timestamp": 1610466982
    },
    {
        "content": "<p>Fix mutability/move closures: <a href=\"https://github.com/rust-lang/rust/pull/80092\">https://github.com/rust-lang/rust/pull/80092</a></p>",
        "id": 222485606,
        "sender_full_name": "Aman Arora",
        "timestamp": 1610481328
    },
    {
        "content": "<p>Also let me know if u want me to ping you on github for these</p>",
        "id": 222485672,
        "sender_full_name": "Aman Arora",
        "timestamp": 1610481358
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> I left a comment on <a href=\"https://github.com/rust-lang/rust/issues/80629\">#80629</a></p>",
        "id": 222975403,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1610795308
    },
    {
        "content": "<p>I have some thoughts on test cases, but I'm going to move to a distinct topic</p>",
        "id": 222975406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1610795315
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/reviews.20or.20other.20things/near/222975403\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"281950\">Aman Arora</span> I left a comment on <a href=\"https://github.com/rust-lang/rust/issues/80629\">#80629</a></p>\n</blockquote>\n<p>Sorry for the delay, this has been updated</p>",
        "id": 223321478,
        "sender_full_name": "Aman Arora",
        "timestamp": 1611106425
    },
    {
        "content": "<p>Chris created a PR for the initial set of diagnostics in the borrow checker: <a href=\"https://github.com/rust-lang/rust/pull/81062\">https://github.com/rust-lang/rust/pull/81062</a></p>",
        "id": 223323747,
        "sender_full_name": "Aman Arora",
        "timestamp": 1611108537
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span>, you asked:</p>\n<blockquote>\n<p>Should I update the lint PR right now or leave it until we decide on a concrete migration macro? <a href=\"https://github.com/rust-lang/rust/issues/80629\">#80629</a></p>\n</blockquote>\n<p>I think we should update it to generate <code>drop((&amp;x, .., &amp;z))</code> and consider adding a macro later.</p>\n<blockquote>\n<p>I should remove the ByValue capture parts from <a href=\"https://github.com/rust-lang/rust/issues/80092\">#80092</a></p>\n</blockquote>\n<p>I'm not sure what the question is :)</p>",
        "id": 223878820,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611570831
    },
    {
        "content": "<p>Also, I left reviews on the two PRs cited. I'll take a look at <a href=\"https://github.com/rust-lang/rust/issues/80629\">#80629</a> and <a href=\"https://github.com/rust-lang/rust/issues/80092\">#80092</a> later on</p>",
        "id": 223883317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611573813
    },
    {
        "content": "<p>80092 implements the old by move capture strategy</p>",
        "id": 223920416,
        "sender_full_name": "Aman Arora",
        "timestamp": 1611591435
    },
    {
        "content": "<p>To not capture detefs</p>",
        "id": 223920445,
        "sender_full_name": "Aman Arora",
        "timestamp": 1611591445
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  updated the old PR</p>",
        "id": 224016893,
        "sender_full_name": "Aman Arora",
        "timestamp": 1611654706
    },
    {
        "content": "<p>I was thinking I should probably remove the part from <a href=\"https://github.com/rust-lang/rust/issues/80092\">#80092</a> that implements removing the derefs in case of by value capture before it goes in and then we implement reborrow directly</p>",
        "id": 224017014,
        "sender_full_name": "Aman Arora",
        "timestamp": 1611654776
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> there was a merge conflict can u r+ this again: <a href=\"https://github.com/rust-lang/rust/pull/80629\">https://github.com/rust-lang/rust/pull/80629</a>?</p>",
        "id": 224536565,
        "sender_full_name": "Aman Arora",
        "timestamp": 1611955939
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I have the PR for handling patterns ready to be reviewed: <a href=\"https://github.com/rust-lang/rust/pull/82536\">https://github.com/rust-lang/rust/pull/82536</a></p>",
        "id": 227857702,
        "sender_full_name": "rocksand",
        "timestamp": 1614296005
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307184\">@rocksand</span> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 227944104,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614353595
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307184\">@rocksand</span> just so you know, I've been reading the PR slowly</p>",
        "id": 228283207,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614623859
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  are you joining the sync?</p>",
        "id": 228667928,
        "sender_full_name": "Aman Arora",
        "timestamp": 1614805457
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> I am</p>",
        "id": 228667950,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614805466
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I finally had some time to address all the comments you left on my PR</p>",
        "id": 228903743,
        "sender_full_name": "rocksand",
        "timestamp": 1614925278
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  can you upload the sync video?</p>",
        "id": 229010715,
        "sender_full_name": "Aman Arora",
        "timestamp": 1614972532
    },
    {
        "content": "<p>yes</p>",
        "id": 229011768,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614972940
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307184\">@rocksand</span> I will try to review today!</p>",
        "id": 229011779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614972946
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/82878\">https://github.com/rust-lang/rust/pull/82878</a><br>\nPR for repr packed</p>",
        "id": 229220410,
        "sender_full_name": "Aman Arora",
        "timestamp": 1615153657
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/reviews.20or.20other.20things/near/229011779\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"307184\">rocksand</span> I will try to review today!</p>\n</blockquote>\n<p>reviewed</p>",
        "id": 229314436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615216543
    },
    {
        "content": "<p>Thanks, I addressed all of your comments</p>",
        "id": 229395234,
        "sender_full_name": "rocksand",
        "timestamp": 1615245977
    },
    {
        "content": "<p>Pr for getting rid of old data structures <br>\n<a href=\"https://github.com/rust-lang/rust/pull/82951\">https://github.com/rust-lang/rust/pull/82951</a></p>",
        "id": 229553087,
        "sender_full_name": "Jennifer Wills",
        "timestamp": 1615323683
    },
    {
        "content": "<p>nice!</p>",
        "id": 229553500,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615323830
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  are we doing a sync today, the meeting doesn't seem to be on my calendar</p>",
        "id": 229744179,
        "sender_full_name": "Aman Arora",
        "timestamp": 1615410240
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> hmmm</p>",
        "id": 229857065,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615473033
    },
    {
        "content": "<p>what time?</p>",
        "id": 229857083,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615473039
    },
    {
        "content": "<p>I have availability</p>",
        "id": 229857091,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615473042
    },
    {
        "content": "<p>would <time datetime=\"2021-03-11T21:00:00Z\">2021-03-11T16:00:00-05:00</time> work?</p>",
        "id": 229858757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615473631
    },
    {
        "content": "<p>Works for me</p>",
        "id": 229883614,
        "sender_full_name": "rocksand",
        "timestamp": 1615481426
    },
    {
        "content": "<p>I don't think I'll be able to make it</p>",
        "id": 229884232,
        "sender_full_name": "Aman Arora",
        "timestamp": 1615481638
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> <span class=\"user-mention\" data-user-id=\"307184\">@rocksand</span> I could also do <time datetime=\"2021-03-11T18:30:00Z\">2021-03-11T13:30:00-05:00</time></p>",
        "id": 229893562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615484461
    },
    {
        "content": "<p>but only for 30 min</p>",
        "id": 229893588,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615484469
    },
    {
        "content": "<p>actually i'm fairly flexible, 14:30pm would also be ok (we share a timezone, don't we?)</p>",
        "id": 229893628,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615484490
    },
    {
        "content": "<p>Anytime works for me. Yes, I believe we are in the same timezone. Aman and I are in EST</p>",
        "id": 229901224,
        "sender_full_name": "rocksand",
        "timestamp": 1615487348
    },
    {
        "content": "<p>Those can work for me (woops I had forgot to hit send)</p>",
        "id": 229902083,
        "sender_full_name": "Aman Arora",
        "timestamp": 1615487654
    },
    {
        "content": "<p>Let's meet at 2:30, since it's late for 1:30</p>",
        "id": 229903214,
        "sender_full_name": "Aman Arora",
        "timestamp": 1615488043
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  are you avaiable?</p>",
        "id": 229911480,
        "sender_full_name": "Aman Arora",
        "timestamp": 1615491201
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> yeah gimme a second</p>",
        "id": 229911528,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615491226
    },
    {
        "content": "<p>zoom?</p>",
        "id": 229911712,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615491281
    },
    {
        "content": "<p>yea, can you send a link?</p>",
        "id": 229911742,
        "sender_full_name": "Aman Arora",
        "timestamp": 1615491293
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  I open a PR last night for the bug that was filed last week: <a href=\"https://github.com/rust-lang/rust/pull/83364\">https://github.com/rust-lang/rust/pull/83364</a></p>",
        "id": 231362855,
        "sender_full_name": "Aman Arora",
        "timestamp": 1616438512
    },
    {
        "content": "<p>r+'d</p>",
        "id": 231647311,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616597610
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I had to do a find and repace search to fix some of the failing tests (some tests are architecture dependent) and I ended up also modifying some tests that output to <code>.html</code> files. I am not very familiar with those tests so I just wanted to double check with you on whether I should be modifying those files or not. This is one of the html file I modified for instance: <a href=\"https://github.com/rust-lang/rust/blob/f0254759ca020673823fa39f07b0558f43ee27a2/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.closure/closure.main-%7Bclosure%231%7D.-------.InstrumentCoverage.0.html\">https://github.com/rust-lang/rust/blob/f0254759ca020673823fa39f07b0558f43ee27a2/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.closure/closure.main-%7Bclosure%231%7D.-------.InstrumentCoverage.0.html</a></p>",
        "id": 232113892,
        "sender_full_name": "rocksand",
        "timestamp": 1616874763
    },
    {
        "content": "<p>I'm not really familiar with that file tbh</p>",
        "id": 232196560,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616969053
    },
    {
        "content": "<p>hmm</p>",
        "id": 232196561,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616969055
    },
    {
        "content": "<p><a href=\"https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/f0254759ca020673823fa39f07b0558f43ee27a2/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.closure/closure.main-{closure%231}.-------.InstrumentCoverage.0.html\">here is the rendered form</a></p>",
        "id": 232196630,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616969138
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  I addressed the comments you left on my PR. Let me know if I can go ahead and approve it <a href=\"https://github.com/rust-lang/rust/pull/83521\">https://github.com/rust-lang/rust/pull/83521</a></p>",
        "id": 232462935,
        "sender_full_name": "rocksand",
        "timestamp": 1617124519
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307184\">@rocksand</span> awesome</p>",
        "id": 232626841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617209843
    },
    {
        "content": "<p>rustfix migrations: <a href=\"https://github.com/rust-lang/rust/pull/83757\">https://github.com/rust-lang/rust/pull/83757</a></p>",
        "id": 232823856,
        "sender_full_name": "Aman Arora",
        "timestamp": 1617310603
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> very nice</p>",
        "id": 232830246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617313939
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> have we tested the rustfmt output?</p>",
        "id": 232830350,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617314008
    },
    {
        "content": "<p>I forgot, doing it now</p>",
        "id": 232830495,
        "sender_full_name": "Aman Arora",
        "timestamp": 1617314081
    },
    {
        "content": "<p>It doesn't <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span><br>\nAdding some extra logic, shouldn't be rust</p>\n<p>This is what is looks like after fmt right now</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">test7_drop_non_drop_aggregate_need_migration</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">String</span>::<span class=\"n\">new</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">new</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"k\">i32</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">t</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">//~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`</span>\n<span class=\"w\">            </span><span class=\"c1\">//~| HELP: `let _ = &amp;t` causes `t` to be fully captured</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_t</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">c</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 232831660,
        "sender_full_name": "Aman Arora",
        "timestamp": 1617314706
    },
    {
        "content": "<p>i got to work, I'll update the PR by tomorrow morning</p>",
        "id": 232837699,
        "sender_full_name": "Aman Arora",
        "timestamp": 1617318502
    },
    {
        "content": "<p>Updated PR with the block fix and your suggestion for the new wording as well</p>",
        "id": 232848926,
        "sender_full_name": "Aman Arora",
        "timestamp": 1617327224
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> r+'d</p>",
        "id": 232948307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617395637
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 232948394,
        "sender_full_name": "Aman Arora",
        "timestamp": 1617395655
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  The auto traits and clone trait migrations PR is now up: <a href=\"https://github.com/rust-lang/rust/pull/84730\">https://github.com/rust-lang/rust/pull/84730</a></p>",
        "id": 236767826,
        "sender_full_name": "rocksand",
        "timestamp": 1619742298
    },
    {
        "content": "<p>First draft for the blog: <a href=\"https://hackmd.io/g0odgclDSaODOvBSZntltg\">https://hackmd.io/g0odgclDSaODOvBSZntltg</a></p>",
        "id": 236770234,
        "sender_full_name": "Aman Arora",
        "timestamp": 1619744336
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307184\">@rocksand</span> very nice!</p>",
        "id": 236831818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619788444
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  I have the fix for issue 85435 up for review (<a href=\"https://github.com/rust-lang/rust/pull/85724\">https://github.com/rust-lang/rust/pull/85724</a>). I still need to wait for PR <a href=\"https://github.com/rust-lang/rust/pull/85564\">https://github.com/rust-lang/rust/pull/85564</a> to merge into master before I can remove the readded feature gate though</p>",
        "id": 240338374,
        "sender_full_name": "rocksand",
        "timestamp": 1622041254
    },
    {
        "content": "<p>I'm a bit confused <span class=\"user-mention\" data-user-id=\"307184\">@rocksand</span></p>",
        "id": 240346364,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622044164
    },
    {
        "content": "<p>The PR looks ok, but it sounds like there is another underlying bug?</p>",
        "id": 240346416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622044195
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/86445/files\">https://github.com/rust-lang/rust/pull/86445/files</a><br>\n<span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  box fix pr</p>",
        "id": 243206691,
        "sender_full_name": "Aman Arora",
        "timestamp": 1624049136
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> I left a review, I have a few questions</p>",
        "id": 243394351,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624287276
    },
    {
        "content": "<p>updated the PR</p>",
        "id": 243476563,
        "sender_full_name": "Aman Arora",
        "timestamp": 1624343485
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  The auto traits migration fix is up for review <a href=\"https://github.com/rust-lang/rust/pull/86869\">https://github.com/rust-lang/rust/pull/86869</a></p>",
        "id": 244942765,
        "sender_full_name": "rocksand",
        "timestamp": 1625495401
    },
    {
        "content": "<p>FYI I have two open PRs that still needing review:</p>\n<p>1)  I realized that the profile closures flag doesn't work as expected if the feature is enabled. I have created a fixup PR here: <a href=\"https://github.com/rust-lang/rust/pull/86818\">https://github.com/rust-lang/rust/pull/86818</a>.</p>\n<p>Do you think we should talk about this flag and optimization someone can make based on the profile in the edition guide? I have what i was thinking written down here: <a href=\"https://github.com/rust-lang/edition-guide/pull/246#discussion_r663139817\">https://github.com/rust-lang/edition-guide/pull/246#discussion_r663139817</a></p>\n<p>2) PR for the optimization: <a href=\"https://github.com/rust-lang/rust/pull/86701\">https://github.com/rust-lang/rust/pull/86701</a></p>",
        "id": 244969406,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625515084
    },
    {
        "content": "<p>Also for the lang team update, what all should we let them know outside of optimizaiton and -Zprofile-closures</p>",
        "id": 244969426,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625515099
    },
    {
        "content": "<p>I'll take a look at <a href=\"https://github.com/rust-lang/rust/issues/86701\">#86701</a></p>",
        "id": 244974212,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625519052
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> left a few nits with some comments.</p>",
        "id": 244974725,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625519571
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  The migration lint improvement PR is up for review: <a href=\"https://github.com/rust-lang/rust/pull/86965\">https://github.com/rust-lang/rust/pull/86965</a></p>",
        "id": 245376082,
        "sender_full_name": "rocksand",
        "timestamp": 1625780490
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307184\">@rocksand</span> r+, looks great!</p>",
        "id": 245422619,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625823986
    },
    {
        "content": "<p>I probably won't be available this week</p>",
        "id": 245619016,
        "sender_full_name": "Aman Arora",
        "timestamp": 1626026257
    },
    {
        "content": "<p>OK, let's cancel the meeting</p>",
        "id": 245735506,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626117908
    },
    {
        "content": "<p>We're in good shape from what I can tell</p>",
        "id": 245735525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626117916
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"282558\">@Dhruv Jauhar</span> started looking into insignificant destructors. There are some places within the compiler that'd require migration. Is there way to automatically apply the lint suggest to the entire compiler automatically, just to get an idea of what's affected?</p>",
        "id": 245736073,
        "sender_full_name": "Aman Arora",
        "timestamp": 1626118166
    },
    {
        "content": "<p>Right now the compile would stop at the crate that requires migration</p>",
        "id": 245736136,
        "sender_full_name": "Aman Arora",
        "timestamp": 1626118196
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> I don't know if there's a way to migrate all the crates; <span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> might know</p>",
        "id": 245744821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626122256
    },
    {
        "content": "<p>I'm not sure what is being asked. If you want to try to run <code>cargo fix</code> on rustc itself to test-drive some fixes, it's a little awkward right now (<code>./x.py test</code> is kinda broken). You can probably run something like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>RUSTFLAGS_NOT_BOOTSTRAP=&quot;-Wrust_2021_incompatible_closure_captures&quot; CARGOFLAGS_NOT_BOOTSTRAP=&quot;--lib&quot; ./x.py fix  --stage=1\n</code></pre></div>",
        "id": 245754312,
        "sender_full_name": "Eric Huss",
        "timestamp": 1626126241
    },
    {
        "content": "<p>Thank you! </p>\n<p>cc <span class=\"user-mention\" data-user-id=\"282466\">@Dhruv Jauhar</span></p>",
        "id": 245754397,
        "sender_full_name": "Aman Arora",
        "timestamp": 1626126301
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  Someone found an ICE in pattern matching when the feature is enabled. I have opened up a PR to fix the issue <a href=\"https://github.com/rust-lang/rust/pull/87161\">https://github.com/rust-lang/rust/pull/87161</a></p>",
        "id": 246116200,
        "sender_full_name": "rocksand",
        "timestamp": 1626365065
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"307184\">@rocksand</span>  is there a time before noon that works as a meeting time?</p>",
        "id": 246147304,
        "sender_full_name": "Aman Arora",
        "timestamp": 1626379085
    },
    {
        "content": "<p>Might be hard for me to meet at the current meeting time</p>",
        "id": 246147345,
        "sender_full_name": "Aman Arora",
        "timestamp": 1626379103
    },
    {
        "content": "<p>Any day works for me</p>",
        "id": 246148662,
        "sender_full_name": "rocksand",
        "timestamp": 1626379727
    },
    {
        "content": "<p>hmm</p>",
        "id": 246160194,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626385220
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> do you mean East Coast time?</p>",
        "id": 246160209,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626385234
    },
    {
        "content": "<p>Yes noon east coast time</p>",
        "id": 246160246,
        "sender_full_name": "Aman Arora",
        "timestamp": 1626385256
    },
    {
        "content": "<p>let me check my calendar</p>",
        "id": 246160280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626385282
    },
    {
        "content": "<p>I could do 11</p>",
        "id": 246160297,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626385306
    },
    {
        "content": "<p>That works for me</p>",
        "id": 246160299,
        "sender_full_name": "Aman Arora",
        "timestamp": 1626385312
    },
    {
        "content": "<p>Thank you</p>",
        "id": 246160363,
        "sender_full_name": "Aman Arora",
        "timestamp": 1626385337
    },
    {
        "content": "<p>Ok. I'm going to delete the existing calendar event and create a new one, I think, that has the Zoom URL attached</p>",
        "id": 246160367,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626385341
    },
    {
        "content": "<p>I'll put it on the compiler team calendar, too</p>",
        "id": 246160371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626385347
    },
    {
        "content": "<p>Sounds good</p>",
        "id": 246160379,
        "sender_full_name": "Aman Arora",
        "timestamp": 1626385355
    },
    {
        "content": "<p>I've also deleted Aug 4/11 as I will be on PTO</p>",
        "id": 246160651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626385541
    },
    {
        "content": "<p>Okay</p>",
        "id": 246160751,
        "sender_full_name": "Aman Arora",
        "timestamp": 1626385580
    },
    {
        "content": "<p>btw, we have a weekly time, but just in case, I've created a <a href=\"https://calendly.com/nikomatsakis/office-hours\">office hours</a> system</p>",
        "id": 246160817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626385640
    },
    {
        "content": "<p>Awesome</p>",
        "id": 246160949,
        "sender_full_name": "Aman Arora",
        "timestamp": 1626385721
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  Have you had the chance to take a look at my rust reference PR yet? <a href=\"https://github.com/rust-lang/reference/pull/1059\">https://github.com/rust-lang/reference/pull/1059</a> Also, <span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> and I were wondering if the plan was still to release a blog post about RFC2229</p>",
        "id": 246473089,
        "sender_full_name": "rocksand",
        "timestamp": 1626709800
    },
    {
        "content": "<p>No, let me take a look</p>",
        "id": 246473155,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626709816
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307184\">@rocksand</span> this looks good; normally we don't land reference PRs until the thing is stabilized. One comment is that it'd be nice to include the \"formal algorithm\" that we came up with in our last meeting.</p>",
        "id": 246473448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626709968
    },
    {
        "content": "<p>Left a review.</p>",
        "id": 246473505,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626709998
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/reviews.20or.20other.20things/near/246473448\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"307184\">rocksand</span> this looks good; normally we don't land reference PRs until the thing is stabilized. One comment is that it'd be nice to include the \"formal algorithm\" that we came up with in our last meeting.</p>\n</blockquote>\n<p>Good point, I'll add that to the PR</p>",
        "id": 246474190,
        "sender_full_name": "rocksand",
        "timestamp": 1626710327
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/reviews.20or.20other.20things/near/246473505\">said</a>:</p>\n<blockquote>\n<p>Left a review.</p>\n</blockquote>\n<p>I have updated the PR. <a href=\"https://github.com/rust-lang/reference/pull/1059\">https://github.com/rust-lang/reference/pull/1059</a></p>\n<p>There is a testcase failing because it needs edition 2021 and im not sure how to get around it needing unstable options</p>",
        "id": 246560794,
        "sender_full_name": "Aman Arora",
        "timestamp": 1626771935
    },
    {
        "content": "<p>Not sure if it helps review but I added two commits</p>\n<ul>\n<li>First verbatim copy/paste of the algorithm</li>\n<li>Seconds edits that I made on top</li>\n</ul>",
        "id": 246560946,
        "sender_full_name": "Aman Arora",
        "timestamp": 1626772049
    },
    {
        "content": "<p>Pr for the <a href=\"https://github.com/rust-lang/rust/issues/87378\">#87378</a> <a href=\"https://github.com/rust-lang/rust/pull/87469\">https://github.com/rust-lang/rust/pull/87469</a></p>",
        "id": 247166243,
        "sender_full_name": "Aman Arora",
        "timestamp": 1627279553
    },
    {
        "content": "<p>r+'d</p>",
        "id": 247196931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627303731
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  I fixed the tidy error on my PR: <a href=\"https://github.com/rust-lang/rust/pull/87554\">https://github.com/rust-lang/rust/pull/87554</a></p>",
        "id": 247607766,
        "sender_full_name": "rocksand",
        "timestamp": 1627576443
    },
    {
        "content": "<p>I'll trigger bors</p>",
        "id": 247608151,
        "sender_full_name": "lqd",
        "timestamp": 1627576601
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> cc <span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> <br>\nThere are a few PRs that need review:</p>\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust/pull/88039\">https://github.com/rust-lang/rust/pull/88039</a> -&gt; fix for <a href=\"https://github.com/rust-lang/rust/issues/87987\">ICE: unwrap on an Err PlaceBuilder</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/pull/87996\">https://github.com/rust-lang/rust/pull/87996</a> -&gt; fix for <a href=\"https://github.com/rust-lang/rust/issues/87988\">ICE: error with const in 2021 closure capture</a></li>\n</ul>\n<p>Also, there are a few things which I think may be worth discussing at our next meeting:</p>\n<ul>\n<li>Going over <a href=\"https://github.com/rust-lang/rust/blob/2e61659bd1f3998520abc77f5459c529083a7a3d/compiler/rustc_typeck/src/expr_use_visitor.rs#L243-L289\">all the cases that require a match discriminant to be read</a>. A lot of recent ICEs involved this part of the code, so I think it would be nice to double check that we are not missing any other edge cases.</li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/87814\">Issue 87814</a> -&gt; I am not sure we have diagnosed the root caused yet</li>\n<li><a href=\"https://github.com/rust-lang/project-rfc-2229/issues/57\">Issue 57</a> -&gt; How to handle lint warning inconsistencies with let statement wildcards</li>\n</ul>",
        "id": 249485818,
        "sender_full_name": "rocksand",
        "timestamp": 1628989969
    },
    {
        "content": "<p>I also created a spreadsheet where I went through all public stblib that implements Drop and classified them as sig/insig: <a href=\"https://docs.google.com/spreadsheets/d/19edb9r5lo2UqMrCOVjV0fwcSdS-R7qvKNL76q7tO8VA/edit?usp=sharing\">https://docs.google.com/spreadsheets/d/19edb9r5lo2UqMrCOVjV0fwcSdS-R7qvKNL76q7tO8VA/edit?usp=sharing</a></p>",
        "id": 249737983,
        "sender_full_name": "Aman Arora",
        "timestamp": 1629215253
    },
    {
        "content": "<p>Another thing we should go over is all the diffenret kind of patterns and look for any edge cases, couple bugs thtat came around recenely had different uses of patterns  that we hadn't considered before</p>",
        "id": 249738132,
        "sender_full_name": "Aman Arora",
        "timestamp": 1629215315
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281950\">Aman Arora</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/reviews.20or.20other.20things/near/249737983\">said</a>:</p>\n<blockquote>\n<p>I also created a spreadsheet where I went through all public stblib that implements Drop and classified them as sig/insig: <a href=\"https://docs.google.com/spreadsheets/d/19edb9r5lo2UqMrCOVjV0fwcSdS-R7qvKNL76q7tO8VA/edit?usp=sharing\">https://docs.google.com/spreadsheets/d/19edb9r5lo2UqMrCOVjV0fwcSdS-R7qvKNL76q7tO8VA/edit?usp=sharing</a></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  we have this pending as well</p>",
        "id": 250426825,
        "sender_full_name": "Aman Arora",
        "timestamp": 1629762480
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> right insig dtor never got applied. Can you take a look at confirm that this categorization looks alright</p>",
        "id": 253909971,
        "sender_full_name": "Aman Arora",
        "timestamp": 1632018459
    },
    {
        "content": "<p>PR should be quick after that</p>",
        "id": 253909974,
        "sender_full_name": "Aman Arora",
        "timestamp": 1632018467
    },
    {
        "content": "<p>Hm, I didn't look at the impl, but we properly handle that <code>Vec&lt;MutexGuard&gt;</code> is significant even if Vec is marked, right?</p>",
        "id": 253910119,
        "sender_full_name": "simulacrum",
        "timestamp": 1632018629
    },
    {
        "content": "<p>At a glance all the insignificant types look good to me</p>",
        "id": 253910128,
        "sender_full_name": "simulacrum",
        "timestamp": 1632018654
    },
    {
        "content": "<p>(my guess is that we'll find more as we start migrating, but we can get a PR up and then add to it - I'm hoping to get rustc migrated tomorrow fully, which will get us some good data as well)</p>",
        "id": 253910166,
        "sender_full_name": "simulacrum",
        "timestamp": 1632018718
    },
    {
        "content": "<p>Sure I'll create a PR</p>",
        "id": 253910407,
        "sender_full_name": "Aman Arora",
        "timestamp": 1632018972
    },
    {
        "content": "<p>And yes if a type generic but the type param is significant we handle the specialized type as significan</p>",
        "id": 253910439,
        "sender_full_name": "Aman Arora",
        "timestamp": 1632019028
    },
    {
        "content": "<p>Great!</p>",
        "id": 253916015,
        "sender_full_name": "simulacrum",
        "timestamp": 1632025119
    },
    {
        "content": "<p>One corner case that i sort of noticed was Hashmap actually uses hashbrown as the underlying map, and doesn't iteself define a Drop impl</p>",
        "id": 254026229,
        "sender_full_name": "Aman Arora",
        "timestamp": 1632132745
    },
    {
        "content": "<p>Vec also has RawVec as the actual drop, I think? We should be able to make the same assumption though, and mark Vec/HashMap directly, I think</p>",
        "id": 254036049,
        "sender_full_name": "simulacrum",
        "timestamp": 1632138296
    },
    {
        "content": "<p>My kind of concern here is hashbrown sort of lies outside of stdlib (or atleast that's how I understand it). But other than that I can add an early exit where if Type T needs drop but not a significant drop we exit early.</p>\n<p>Right now it will also check any sub feilds so eg in case of Vec both Vec and RawVec drop need to marked insignificant and I kind of like the expliteness of this</p>",
        "id": 254102687,
        "sender_full_name": "Aman Arora",
        "timestamp": 1632165270
    },
    {
        "content": "<p>HashMap should never have a significant drop, and in any case, this is just a hint for a particular rustc version, right? If in the future some type <em>does</em> become significant, we can change this, and the only thing that it affects is migration/lint behaviors</p>",
        "id": 254136292,
        "sender_full_name": "simulacrum",
        "timestamp": 1632181757
    },
    {
        "content": "<blockquote>\n<p>Right now it will also check any sub feilds so eg in case of Vec both Vec and RawVec drop need to marked insignificant and I kind of like the expliteness of this</p>\n</blockquote>\n<p>This seems like a bad idea -- e.g., String is definitely insignificant, even though it's fields may not be</p>",
        "id": 254136323,
        "sender_full_name": "simulacrum",
        "timestamp": 1632181790
    },
    {
        "content": "<p>and it'll cause trouble with e.g. hashbrown</p>",
        "id": 254136373,
        "sender_full_name": "simulacrum",
        "timestamp": 1632181806
    },
    {
        "content": "<p>String is just vec&lt;u8&gt; but I'll add early exit in case of insig dtor</p>",
        "id": 254136429,
        "sender_full_name": "Aman Arora",
        "timestamp": 1632181859
    },
    {
        "content": "<p>Thanks! Yeah, String is not the best example. I was thinking more of cases where you're e.g. wrapping a mutexguard and you happen to know that this one <em>is</em> insignificant. I could imagine us placing it on the stdout/stderrlocks, for example (though probably not: in practice, those are pretty unlikely to come up and <em>could</em> be important). but some library might have this.</p>\n<p>(I partially care about this because I do think that the insignificance may become important for other features down the line)</p>",
        "id": 254137680,
        "sender_full_name": "simulacrum",
        "timestamp": 1632182784
    },
    {
        "content": "<p>Just sort of an update on where I'm at:  I tried implementing this sort of early exit, but it ended up conflicting the part that handles the part where drop becomes significant when provided type parameter has a significant drop. </p>\n<p>Basically \"SomeStruct&lt;Mutex&gt; is significant\" gets handled when we look at the fields of an SomeStruct try analayse the fields and at one point one of the fields uses the type parameter T; and this runs kind of runs recurssively</p>",
        "id": 254168943,
        "sender_full_name": "Aman Arora",
        "timestamp": 1632211068
    },
    {
        "content": "<p>Also another thing to discuss would be to move how we annonate insignificant dtors. Right now it's done by looking at the attributes of the drop method in the Drop impl and I like the motivation of keeping it close to the source.</p>\n<p>However if we look at HashMap it doesn't iteself define Drop, but uses hashbrown as a field which has the drop impl. So we don't have anything to annonate. I tried adding just an empty Drop impl but that prevents us from moving some fields out. I suggest we annoate the struct </p>\n<p>so something like </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[rustc_insigificant_dtor]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">S</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I prefer annoating the Drop but I rather have one way of doing it across all types.</p>",
        "id": 254169493,
        "sender_full_name": "Aman Arora",
        "timestamp": 1632211334
    },
    {
        "content": "<p>Okay figuring out the first problem wasn't too bad (assuming I did it right). I have created a PR here: <a href=\"https://github.com/rust-lang/rust/pull/89144\">https://github.com/rust-lang/rust/pull/89144</a>. I was getting a random test for reserved prefix failing locally hopefully it's fine on CI</p>",
        "id": 254176495,
        "sender_full_name": "Aman Arora",
        "timestamp": 1632215533
    },
    {
        "content": "<blockquote>\n<p>One thing missing from this PR is tagging HashMap as insigificant destructor as that needs some discussion.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> This has to do with the fact that HashMap forwards to HashBrown?</p>",
        "id": 254181978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632218453
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yes</p>",
        "id": 254226960,
        "sender_full_name": "Aman Arora",
        "timestamp": 1632238293
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> I don't quite understand your concern</p>",
        "id": 254239279,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632242727
    },
    {
        "content": "<p>is the concern that HashBrown's implementation is outside of our control?</p>",
        "id": 254239303,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632242736
    },
    {
        "content": "<p>We do have a newtype, I assume</p>",
        "id": 254239322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632242744
    },
    {
        "content": "<p>yeah, we do</p>",
        "id": 254239506,
        "sender_full_name": "simulacrum",
        "timestamp": 1632242804
    },
    {
        "content": "<p>I feel like we can be confident that HashBrown will not introduce side effects into its destructor</p>",
        "id": 254241788,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632243629
    },
    {
        "content": "<p>Problem is that we can't annotate hash map, since we don't define a drop impl</p>",
        "id": 254242024,
        "sender_full_name": "Aman Arora",
        "timestamp": 1632243714
    },
    {
        "content": "<p>So I was suggesting that we annotate the struct definition with attribute instead of drop impl. (I'd prefer the latter, but rather have all parts of the code do it the same way)</p>",
        "id": 254242406,
        "sender_full_name": "Aman Arora",
        "timestamp": 1632243840
    },
    {
        "content": "<p>yeah, probably struct definition is the right thing, even if it's a bit off</p>",
        "id": 254242621,
        "sender_full_name": "simulacrum",
        "timestamp": 1632243899
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> oh, I see</p>",
        "id": 254252002,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632247695
    },
    {
        "content": "<p>Yes, I agree that makes sense</p>",
        "id": 254252014,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632247698
    },
    {
        "content": "<p>we could of course add a dummy drop impl</p>",
        "id": 254252040,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632247709
    },
    {
        "content": "<p>but that seems silly :)</p>",
        "id": 254252046,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632247712
    },
    {
        "content": "<p>I tried that, we run into can't move out of struct</p>",
        "id": 254252114,
        "sender_full_name": "Aman Arora",
        "timestamp": 1632247739
    },
    {
        "content": "<p>it'd be a breaking change, yeah</p>",
        "id": 254252134,
        "sender_full_name": "simulacrum",
        "timestamp": 1632247745
    },
    {
        "content": "<p>well, not a breaking change externally I imagine</p>",
        "id": 254252158,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632247756
    },
    {
        "content": "<p>but anyway, that's fine</p>",
        "id": 254252185,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632247765
    },
    {
        "content": "<p>There is also this that we need to handle: <a href=\"https://github.com/rust-lang/project-rfc-2229/issues/42\">https://github.com/rust-lang/project-rfc-2229/issues/42</a></p>",
        "id": 254274722,
        "sender_full_name": "Aman Arora",
        "timestamp": 1632256941
    },
    {
        "content": "<p>updated <a href=\"https://github.com/rust-lang/rust/pull/89144\">https://github.com/rust-lang/rust/pull/89144</a></p>",
        "id": 254338468,
        "sender_full_name": "Aman Arora",
        "timestamp": 1632302368
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/89282\">https://github.com/rust-lang/rust/pull/89282</a> Fixes another ICE when attempting to resolve PlaceBuilders</p>",
        "id": 254954966,
        "sender_full_name": "rocksand",
        "timestamp": 1632684106
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> There is a PR open for the ICE that was reported recently: <a href=\"https://github.com/rust-lang/rust/pull/89648\">https://github.com/rust-lang/rust/pull/89648</a></p>",
        "id": 256691169,
        "sender_full_name": "Aman Arora",
        "timestamp": 1633671473
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> there's a PR open for the ICE in lint, can you take a look</p>",
        "id": 259040232,
        "sender_full_name": "Aman Arora",
        "timestamp": 1635210548
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/90218#issuecomment-951455939\">https://github.com/rust-lang/rust/pull/90218#issuecomment-951455939</a></p>",
        "id": 259040235,
        "sender_full_name": "Aman Arora",
        "timestamp": 1635210557
    }
]