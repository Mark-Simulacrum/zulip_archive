[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  I noticed some issues around providing warning for the <code>Clone</code> trait. We get back a lot of positives, especially on closures for which we don't actively attempt to clone. For instance this code, will trigger a warning:</p>\n<div class=\"codehilite\"><pre><span></span><code>struct Foo(i32);\nimpl Drop for Foo {\n    fn drop(&amp;mut self) {\n        println!(&quot;{:?} dropped&quot;, self.0);\n    }\n}\nfn test5_significant_drop_non_drop_aggregate() {\n    let t = (Foo(0), 0i32);\n\n    let c = || {\n        let _t = t.1;\n    };\n\n    c();\n}\n</code></pre></div>\n<p>My question is, do we want to provide this many warnings? As it is right now, the warnings could lead to a lot of clutter because many of those warnings are unlikely to be useful to the user.</p>",
        "id": 235261190,
        "sender_full_name": "rocksand",
        "timestamp": 1618872392
    },
    {
        "content": "<p>I am realizing now that I just pasted the wrong snippet of code <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 235293257,
        "sender_full_name": "rocksand",
        "timestamp": 1618899727
    },
    {
        "content": "<p>I meant something like this:<br>\n‘’’<br>\nstruct Foo(Bar, i32);<br>\nimpl Clone for Foo { ...}</p>\n<p>fn main() {<br>\nlet t = Foo(Bar(0), 0);<br>\nlet c = || {<br>\nlet t = t.0;<br>\n}<br>\n}<br>\n‘’’</p>",
        "id": 235293862,
        "sender_full_name": "rocksand",
        "timestamp": 1618900184
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307184\">@rocksand</span> interesting that the warnings are so common</p>",
        "id": 235356083,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618930231
    },
    {
        "content": "<p>is it only <code>Clone</code> that has so many false warnings?</p>",
        "id": 235356109,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618930243
    },
    {
        "content": "<p>hmm</p>",
        "id": 235356121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618930248
    },
    {
        "content": "<p>I have some thoughts on how we could narrow it down</p>",
        "id": 235356127,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618930252
    },
    {
        "content": "<p>I was able to add <code>send_trait()</code> but I am struggling with adding <code>unwind_safe_trait()</code> and <code>unwind_safe_ref_trait()</code>. When I call the unwind safe functions it doesn't give me back any DefId. I am not sure what else I need to do apart from adding <code>#[lang = ...]</code> in this file <a href=\"https://github.com/rust-lang/rust/blob/master/library/std/src/panic.rs#L139\">https://github.com/rust-lang/rust/blob/master/library/std/src/panic.rs#L139</a></p>",
        "id": 235755180,
        "sender_full_name": "rocksand",
        "timestamp": 1619128864
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307184\">@rocksand</span> can you send me your branch?</p>",
        "id": 235844198,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619186171
    },
    {
        "content": "<p>Here is the branch: <a href=\"https://github.com/sexxi-goose/rust/tree/rox-auto-trait\">https://github.com/sexxi-goose/rust/tree/rox-auto-trait</a></p>",
        "id": 235861160,
        "sender_full_name": "rocksand",
        "timestamp": 1619191719
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307184\">@rocksand</span> one thought I had is that this is in libstd; in some cases, libstd may not be available</p>",
        "id": 236235214,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619467738
    },
    {
        "content": "<p>in general you should try to do something sensible if the lang-iteam is not present</p>",
        "id": 236235255,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619467764
    },
    {
        "content": "<p>see e.g. <a href=\"https://github.com/sexxi-goose/rust/commit/e7c0f4c66302a3f1c158eed0590943b67ccba349#r50028344\">this comment</a></p>",
        "id": 236235422,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619467838
    },
    {
        "content": "<p>basically something like this</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">unwind_safe_obligation_should_hold</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">lang_items</span><span class=\"p\">().</span><span class=\"n\">unwind_safe_trait</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">unwind_safe</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">ty_contains_trait</span><span class=\"p\">(</span><span class=\"n\">ty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">cause</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">unwind_safe</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">unwrap_or</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 236235466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619467861
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  Are you familiar with this error? I can't seem to figure out what I need to do to solve the errors. <a href=\"https://github.com/rust-lang/rust/pull/84730#issuecomment-829720950\">https://github.com/rust-lang/rust/pull/84730#issuecomment-829720950</a></p>",
        "id": 237712179,
        "sender_full_name": "rocksand",
        "timestamp": 1620327808
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307184\">@rocksand</span> I thnk you need this;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[cfg_attr(not(test), lang = </span><span class=\"s\">\"unwind_safe\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n</code></pre></div>\n<p>the reason is that when you are running tests, it builds a second copy of the stdlib, and in that copy you want to omit the traits</p>",
        "id": 237857988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620407502
    },
    {
        "content": "<p>kind of a hack</p>",
        "id": 237857997,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620407506
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  I tried doing that but as a result I get an error at a different location:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0522]: definition of an unknown language item: `unwind_safe`\n   --&gt; library/std/src/panic.rs:136:23\n    |\n136 | #[cfg_attr(not(test), lang = &quot;unwind_safe&quot;)]\n    |                       ^^^^^^^^^^^^^^^^^^^^ definition of unknown language item `unwind_safe`\n\nerror: aborting due to previous error\n</code></pre></div>",
        "id": 237899848,
        "sender_full_name": "rocksand",
        "timestamp": 1620426732
    },
    {
        "content": "<p><em>that</em> sounds like a bootstrap problem</p>",
        "id": 237983245,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620506546
    },
    {
        "content": "<p>maybe this, <span class=\"user-mention\" data-user-id=\"307184\">@rocksand</span> ?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[cfg_attr(all(not(test), not(bootstrap)), lang = </span><span class=\"s\">\"unwind_safe\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 237983270,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620506574
    },
    {
        "content": "<p>bootstrap is when the compiler builds itself with the current beta; since the lang item isn't in the current beta, this gets an error</p>",
        "id": 237983281,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620506591
    },
    {
        "content": "<p>so this says to skip that attribute</p>",
        "id": 237983283,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620506602
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  Oh ok, I couldn't figure out how to combine both <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> Your suggestion worked! I think I addressed all the comments you left on my PR</p>",
        "id": 238053950,
        "sender_full_name": "rocksand",
        "timestamp": 1620586670
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307184\">@rocksand</span> left a few more comments</p>",
        "id": 238141569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620653329
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  Just added the helper function. Let me know if there is any thing you would like me to change</p>",
        "id": 238356884,
        "sender_full_name": "rocksand",
        "timestamp": 1620756393
    }
]