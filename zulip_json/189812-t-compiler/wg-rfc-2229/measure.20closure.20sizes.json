[
    {
        "content": "<p>Hey <span class=\"user-group-mention\" data-user-group-id=\"1175\">@WG-rfc-2229</span>, we were discussing the question of how to measure closure sizes, and <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> suggested that instead of soliciting people to send in their measurements, we may want to just run the measurements <em>ourselves</em> using crater.</p>",
        "id": 245228558,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625685203
    },
    {
        "content": "<p>I'm not sure how hard that is, I've never modified crater myself, <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> can perhaps weigh in</p>",
        "id": 245228574,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625685214
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span>, does the <code>-Z</code> flag today generate a file as output, or dump to stderr?</p>",
        "id": 245228606,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625685232
    },
    {
        "content": "<p>a file</p>",
        "id": 245228619,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625685241
    },
    {
        "content": "<p>so we have just collect all closure_profile_*.csv</p>",
        "id": 245228678,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625685251
    },
    {
        "content": "<p>OK. We <em>may</em> find it easier if we dump it to stdout, though we could readily do that at the end of process.</p>",
        "id": 245228787,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625685329
    },
    {
        "content": "<p>Just beacuse that data is then collected in the logs, which I guess we can scrape.</p>",
        "id": 245228807,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625685341
    },
    {
        "content": "<p>I am going to write up some notes later today</p>",
        "id": 245229685,
        "sender_full_name": "simulacrum",
        "timestamp": 1625685767
    },
    {
        "content": "<p>that won't be hard</p>",
        "id": 245229691,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625685770
    },
    {
        "content": "<p>that was for outputitng to stdout ^</p>",
        "id": 245229712,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625685781
    },
    {
        "content": "<p>I don't think it'll be too hard</p>",
        "id": 245229789,
        "sender_full_name": "simulacrum",
        "timestamp": 1625685815
    },
    {
        "content": "<p>Do we have a rough idea of how much data it is per crate?</p>",
        "id": 245229831,
        "sender_full_name": "simulacrum",
        "timestamp": 1625685835
    },
    {
        "content": "<p>Most crates under 100 lines</p>",
        "id": 245230012,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625685920
    },
    {
        "content": "<p>Cargo serde syn were all closer to 50 than 100</p>",
        "id": 245230147,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625685973
    },
    {
        "content": "<p>compiler + stdlib + rustdoc + any dependencies that we have from <a href=\"http://crates.io\">crates.io</a> were together &lt; 20k lines</p>",
        "id": 245230329,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625686062
    },
    {
        "content": "<p>oh that sounds very small, great</p>",
        "id": 245254196,
        "sender_full_name": "simulacrum",
        "timestamp": 1625699582
    },
    {
        "content": "<p>I think in that case I would just dump to stdout with a known prefix (e.g., e93ae495ec -- we'll need to grep for it) before each line.</p>\n<p>It probably makes sense to try and include the number of records so that we know we missed stuff, too</p>",
        "id": 245254330,
        "sender_full_name": "simulacrum",
        "timestamp": 1625699692
    },
    {
        "content": "<p>stderr might actually work better</p>",
        "id": 245254347,
        "sender_full_name": "simulacrum",
        "timestamp": 1625699707
    },
    {
        "content": "<p>but you can do a mini-crater with a high priority to test the idea -- <a href=\"https://github.com/rust-lang/crater/blob/master/docs/bot-usage.md#available-crate-selections\">https://github.com/rust-lang/crater/blob/master/docs/bot-usage.md#available-crate-selections</a> with list:cargo or something might work well. I think we'll only want to emit on workspace crates, we can probably look for cap-lints to figure out when to emit or so.</p>",
        "id": 245254453,
        "sender_full_name": "simulacrum",
        "timestamp": 1625699782
    },
    {
        "content": "<p>once we have a run done, we can use the all logs tarball to easily get the logs and analyze them as needed; see the available tarballs for the last beta run here - <a href=\"https://crater-reports.s3.amazonaws.com/beta-1.54-1/downloads.html\">https://crater-reports.s3.amazonaws.com/beta-1.54-1/downloads.html</a> -- those will be available for your runs too.</p>",
        "id": 245254515,
        "sender_full_name": "simulacrum",
        "timestamp": 1625699842
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> With this we shouldn't have to modify crater at all which will streamline the process a lot</p>",
        "id": 245254546,
        "sender_full_name": "simulacrum",
        "timestamp": 1625699874
    },
    {
        "content": "<p>if we do end up needing to modify it, my guess is the easy thing will be to temporarily bump the limits of lines/bytes emitted per log up, and then we can just go with this. That would be nearly trivial.</p>",
        "id": 245254602,
        "sender_full_name": "simulacrum",
        "timestamp": 1625699911
    },
    {
        "content": "<p>Let me know if I can provide further hints/help here!</p>",
        "id": 245254618,
        "sender_full_name": "simulacrum",
        "timestamp": 1625699927
    },
    {
        "content": "<p>I'll try this tomorrow, thanks</p>",
        "id": 245266839,
        "sender_full_name": "Aman Arora",
        "timestamp": 1625712209
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281950\">Aman Arora</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/measure.20closure.20sizes/near/245230147\">said</a>:</p>\n<blockquote>\n<p>Cargo serde syn were all closer to 50 than 100</p>\n</blockquote>\n<p>I think I confused some stat within the closure profile to the actual numbers. cargo is closer to 2k lines of output, serder_derive was 150ish</p>",
        "id": 245618936,
        "sender_full_name": "Aman Arora",
        "timestamp": 1626026129
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> did you mean -Zprofile-closures on both start and end toolchains for <a href=\"https://github.com/rust-lang/rust/pull/87066#issuecomment-877847095\">https://github.com/rust-lang/rust/pull/87066#issuecomment-877847095</a>?</p>",
        "id": 245702432,
        "sender_full_name": "simulacrum",
        "timestamp": 1626103606
    },
    {
        "content": "<p>Or does it give comparative results?</p>",
        "id": 245702448,
        "sender_full_name": "simulacrum",
        "timestamp": 1626103613
    },
    {
        "content": "<p>-Zprofile-closures compares on its own. So it will compute the size before and size after 2229 is enabled within the same compile</p>",
        "id": 245702550,
        "sender_full_name": "Aman Arora",
        "timestamp": 1626103669
    },
    {
        "content": "<p>OK, great</p>",
        "id": 245702564,
        "sender_full_name": "simulacrum",
        "timestamp": 1626103674
    },
    {
        "content": "<p>That should run in ~4-5 hours, I believe, and we'll see if it works then</p>",
        "id": 245702695,
        "sender_full_name": "simulacrum",
        "timestamp": 1626103712
    },
    {
        "content": "<p>So the test failed (also on master it seems)</p>\n<p>One thing I realized that in our full run we'd a lot of duplicate information because we are using RUSTFLAGS. </p>\n<p>Since all dependencies would also emit data, so if two crate have the same dependency the data from it will be emitted multiple times</p>",
        "id": 245755729,
        "sender_full_name": "Aman Arora",
        "timestamp": 1626127144
    },
    {
        "content": "<p>Hm</p>",
        "id": 246272511,
        "sender_full_name": "simulacrum",
        "timestamp": 1626466253
    },
    {
        "content": "<p><a href=\"https://crater-reports.s3.amazonaws.com/pr-87066-1/try%238a4c071f46be56484e9723bd8f1e5eea08177963%2Brustflags=-Zprofile-closures/reg/cargo-0.54.0/log.txt\">https://crater-reports.s3.amazonaws.com/pr-87066-1/try%238a4c071f46be56484e9723bd8f1e5eea08177963%2Brustflags=-Zprofile-closures/reg/cargo-0.54.0/log.txt</a> looks like it also hit the 100KB limit and might've been externally killed as a result, I'm not quite sure</p>",
        "id": 246272554,
        "sender_full_name": "simulacrum",
        "timestamp": 1626466277
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/crater/blob/master/config.toml#L32-L33\">https://github.com/rust-lang/crater/blob/master/config.toml#L32-L33</a> -- looks like I remembered wrong, that's probably just coincidental</p>",
        "id": 246272587,
        "sender_full_name": "simulacrum",
        "timestamp": 1626466305
    },
    {
        "content": "<p>In any case <span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> I'd suggest we try again, but remove everything except a hash of the location of the closure -- that'll be much smaller than the full line info debug print</p>",
        "id": 246272677,
        "sender_full_name": "simulacrum",
        "timestamp": 1626466346
    },
    {
        "content": "<p>Can we take the hash and go back to the original closure locatiot?</p>",
        "id": 246272725,
        "sender_full_name": "Aman Arora",
        "timestamp": 1626466378
    },
    {
        "content": "<p>Location*</p>",
        "id": 246272732,
        "sender_full_name": "Aman Arora",
        "timestamp": 1626466382
    },
    {
        "content": "<p>Also should I just skip printing if both before and after are 0?</p>",
        "id": 246272756,
        "sender_full_name": "Aman Arora",
        "timestamp": 1626466400
    },
    {
        "content": "<p>I think I'd not skip printing any closures</p>",
        "id": 246272794,
        "sender_full_name": "simulacrum",
        "timestamp": 1626466433
    },
    {
        "content": "<p>that'll skew our results a little.</p>",
        "id": 246272803,
        "sender_full_name": "simulacrum",
        "timestamp": 1626466438
    },
    {
        "content": "<p>Fair enough</p>",
        "id": 246272852,
        "sender_full_name": "Aman Arora",
        "timestamp": 1626466448
    },
    {
        "content": "<p>We can't take the hash, but ultimately, if anything looks notable we can rerun that particular crate locally</p>",
        "id": 246272856,
        "sender_full_name": "simulacrum",
        "timestamp": 1626466455
    },
    {
        "content": "<p>the hash is only really so we can deduplicate across crates, I think</p>",
        "id": 246272870,
        "sender_full_name": "simulacrum",
        "timestamp": 1626466467
    },
    {
        "content": "<p>Looking at the last beta run, it seems like libc compiles fine</p>",
        "id": 246272900,
        "sender_full_name": "simulacrum",
        "timestamp": 1626466485
    },
    {
        "content": "<p>serde_derive does too.</p>",
        "id": 246272958,
        "sender_full_name": "simulacrum",
        "timestamp": 1626466527
    },
    {
        "content": "<p>So we might try some other crates.</p>",
        "id": 246272976,
        "sender_full_name": "simulacrum",
        "timestamp": 1626466538
    },
    {
        "content": "<p>I'm not sure if we want to deduplicate based on span. The closure can be within a generic function and then type parameters might have different sizes</p>",
        "id": 246273049,
        "sender_full_name": "Aman Arora",
        "timestamp": 1626466567
    },
    {
        "content": "<p>Hm</p>",
        "id": 246273289,
        "sender_full_name": "simulacrum",
        "timestamp": 1626466706
    },
    {
        "content": "<p>I imagine we could put <em>something</em> in the hash to make it unique</p>",
        "id": 246273302,
        "sender_full_name": "simulacrum",
        "timestamp": 1626466722
    },
    {
        "content": "<p>I guess ultimately it doesn't matter too much wrt to deduplication, we can likely just skip the hash too. This is really for broad analysis, which if it has duplicates will just weight more widely used projects more heavily</p>",
        "id": 246273368,
        "sender_full_name": "simulacrum",
        "timestamp": 1626466761
    },
    {
        "content": "<p>which seems OK</p>",
        "id": 246273373,
        "sender_full_name": "simulacrum",
        "timestamp": 1626466765
    },
    {
        "content": "<p>I'd assume ty::Instance used for codegen in MIR is somewhat unique? Or deduplicated to some degree</p>",
        "id": 246273492,
        "sender_full_name": "Aman Arora",
        "timestamp": 1626466818
    },
    {
        "content": "<p>codegen would already have generics instantiated, I think, so it should be pretty close to a good thing to hash, I'd imagine</p>",
        "id": 246273564,
        "sender_full_name": "simulacrum",
        "timestamp": 1626466879
    },
    {
        "content": "<p>(You'd want the stable hash, I believe, not the regular hash impl)</p>",
        "id": 246273579,
        "sender_full_name": "simulacrum",
        "timestamp": 1626466890
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> as well</p>",
        "id": 246273586,
        "sender_full_name": "simulacrum",
        "timestamp": 1626466896
    },
    {
        "content": "<p>This all sounds right</p>",
        "id": 246308208,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626503022
    },
    {
        "content": "<p>I have pushed a change to output the stable hash. In the change i pushed I also reduced the size of the prefix a bit</p>\n<p><a href=\"/user_uploads/4715/kQP7BE_ZqLCfq85KePtByh53/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/kQP7BE_ZqLCfq85KePtByh53/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/kQP7BE_ZqLCfq85KePtByh53/image.png\"></a></div>",
        "id": 246483957,
        "sender_full_name": "Aman Arora",
        "timestamp": 1626714954
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> can you restart the crater run please? Thank you</p>",
        "id": 246733199,
        "sender_full_name": "Aman Arora",
        "timestamp": 1626880059
    },
    {
        "content": "<p>will do later today</p>",
        "id": 246733304,
        "sender_full_name": "simulacrum",
        "timestamp": 1626880094
    }
]