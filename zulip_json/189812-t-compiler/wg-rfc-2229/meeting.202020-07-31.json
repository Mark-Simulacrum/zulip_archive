[
    {
        "content": "<p>Howdy...</p>",
        "id": 205628393,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596221831
    },
    {
        "content": "<p>Doing good, haha</p>",
        "id": 205628457,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596221874
    },
    {
        "content": "<p>How're you</p>",
        "id": 205628467,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596221878
    },
    {
        "content": "<p>Just pulling in things I sent on Tuesday</p>\n<p>1) This is going to be the last week of work we do before resuming late August, we entering the final exam period at our university. (Sorry, I should have probably should've brought this earlier, just didn't realize it's almost August). Current working branches:</p>\n<p>Capture information bridge: <a href=\"https://github.com/sexxi-goose/rust/tree/use_places_aman\">https://github.com/sexxi-goose/rust/tree/use_places_aman</a>.<br>\nTo use the bridge you need the environment variable SG_NEW, to log results/ extra details for old/new style capture analysis have SG_VERBOSE env variable.</p>\n<p>Tupled upvars <a href=\"https://github.com/rust-lang/rust/issues/57482\">#57482</a>: <a href=\"https://github.com/sexxi-goose/rust/pull/21#pullrequestreview-456934982\">https://github.com/sexxi-goose/rust/pull/21#pullrequestreview-456934982</a></p>\n<p>2) The bridge works for most cases. Issues we ran into last couple weeks are listed here <a href=\"#narrow/stream/122651-general/topic/Debugging.20broken.20MIR/near/205158453\">https://rust-lang.zulipchat.com/#narrow/stream/122651-general/topic/Debugging.20broken.20MIR/near/205158453</a><br>\nWe still need to make Rvalue more precise. Consider the following code</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">X</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">str1</span>: <span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">str1</span>: <span class=\"nc\">format</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;x&quot;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">c</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>We see the following place being used within the closure</p>\n<p>Not upvar: PlaceWithHirId { hir_id: HirId { owner: DefId(0:3 ~ drop_move[317d]::main[0]), local_id: 43 }, place: Place { base_ty: (), base: Rvalue, projections: [] } }<br>\nRvalues currently get ignored because we don't know what gets captured. This comes back to having an expression hir id or something stored with the Rvalue.</p>\n<p>Since we start capture_information and fill it up as we see Places being used, we are unable to infer the type of the closure.</p>\n<p>complete error message here: <a href=\"http://csclub.uwaterloo.ca/~a52arora/test_suite/drop_move.log\">http://csclub.uwaterloo.ca/~a52arora/test_suite/drop_move.log</a><br>\n3) Tupled upvars: Tests are failing.<br>\n<a href=\"https://github.com/sexxi-goose/rust/pull/21#pullrequestreview-456934982\">https://github.com/sexxi-goose/rust/pull/21#pullrequestreview-456934982</a></p>\n<p>Some places need to still check is_valid or the infcx to ensure if we need to be reading the upars tuple from the subs<br>\nExpected FnPtr found closure.<br>\nsubsts_a.as_closure().upvar_tys().next().is_none() from here<br>\nfeels like would return true even if there was one captured variable. We weren't able to find time to look into each failing case, so it is possible there is a mistake in the changes we made to this.</p>\n<p>Errors with traits not having solutions</p>",
        "id": 205628567,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596221922
    },
    {
        "content": "<p>reading again</p>",
        "id": 205628855,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596222104
    },
    {
        "content": "<p>so ... that example is a bit weird</p>",
        "id": 205628987,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596222173
    },
    {
        "content": "<p>can you easily tell what happens if you do <code>let _x = x;</code> in the closure?</p>",
        "id": 205629030,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596222200
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/meeting.202020-07-31/near/205629030\">said</a>:</p>\n<blockquote>\n<p>can you easily tell what happens if you do <code>let _x = x;</code> in the closure?</p>\n</blockquote>\n<p>it works fine</p>",
        "id": 205629047,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596222213
    },
    {
        "content": "<p>in particular, <code>let _ = ...</code> has the effect of <em>ignoring</em> the result</p>",
        "id": 205629054,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596222215
    },
    {
        "content": "<p>so actually it might be legit to say that this closure captures nothing</p>",
        "id": 205629079,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596222233
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/meeting.202020-07-31/near/205629054\">said</a>:</p>\n<blockquote>\n<p>in particular, <code>let _ = ...</code> has the effect of <em>ignoring</em> the result</p>\n</blockquote>\n<p>Yeah I think that is why it is an Rvalue instead of an Upvar PlaceBase</p>",
        "id": 205629084,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596222236
    },
    {
        "content": "<p>though I don't fully understand the rvalue</p>",
        "id": 205629139,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596222252
    },
    {
        "content": "<p>(I'm a bit surprised you get any callback at all)</p>",
        "id": 205629158,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596222269
    },
    {
        "content": "<p>we do because InferBorrowKind is called in with all Places, regardless of PlaceBase</p>",
        "id": 205629244,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596222321
    },
    {
        "content": "<p>let's turn to tupled upvars for a sec</p>",
        "id": 205629280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596222346
    },
    {
        "content": "<p>and come back to 2</p>",
        "id": 205629283,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596222348
    },
    {
        "content": "<p>you wrote that tests are failing</p>",
        "id": 205629371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596222383
    },
    {
        "content": "<p>So things compile, but we still need to dig down and put more checks in places that currently are expecting that to be a tuple</p>",
        "id": 205629385,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596222392
    },
    {
        "content": "<p>I see, they are listed in the comment?</p>",
        "id": 205629403,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596222407
    },
    {
        "content": "<p>Yeah</p>",
        "id": 205629408,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596222412
    },
    {
        "content": "<p>side note, if you have to stop for the rest of august, do you plan to just pick up these PRs again then?</p>",
        "id": 205629420,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596222425
    },
    {
        "content": "<p>ok, so, some of them are ICEs</p>",
        "id": 205629438,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596222444
    },
    {
        "content": "<p>There are ceratin erros around expecting FnPtr and some were also around two closures even with same signature or something around that lines will have differernt types</p>",
        "id": 205629446,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596222449
    },
    {
        "content": "<p>this is from <a href=\"https://github.com/sexxi-goose/rust/pull/21/files\">https://github.com/sexxi-goose/rust/pull/21/files</a> the diff there?</p>",
        "id": 205629482,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596222479
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/meeting.202020-07-31/near/205629420\">said</a>:</p>\n<blockquote>\n<p>side note, if you have to stop for the rest of august, do you plan to just pick up these PRs again then?</p>\n</blockquote>\n<p>Yeah, we will probably begin digging around again starting last week of August.</p>",
        "id": 205629555,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596222507
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/meeting.202020-07-31/near/205629482\">said</a>:</p>\n<blockquote>\n<p>this is from <a href=\"https://github.com/sexxi-goose/rust/pull/21/files\">https://github.com/sexxi-goose/rust/pull/21/files</a> the diff there?</p>\n</blockquote>\n<p>yeah that's the one</p>",
        "id": 205629578,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596222533
    },
    {
        "content": "<p>this PR looks a touch more involved than I expected</p>",
        "id": 205629634,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596222576
    },
    {
        "content": "<p>not in a bad way necessarily</p>",
        "id": 205629648,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596222590
    },
    {
        "content": "<p>I didn't expect <code>SplitGeneratorVarSubsts</code> to become generic, for example</p>",
        "id": 205629703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596222604
    },
    {
        "content": "<p>though I can maybe imagine why</p>",
        "id": 205629706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596222606
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/meeting.202020-07-31/near/205629703\">said</a>:</p>\n<blockquote>\n<p>I didn't expect <code>SplitGeneratorVarSubsts</code> to become generic, for example</p>\n</blockquote>\n<p>This includes eddyb's changes</p>",
        "id": 205629730,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596222631
    },
    {
        "content": "<p>oh, ok</p>",
        "id": 205629778,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596222671
    },
    {
        "content": "<p>so what is the problem with adding a helper function <code>upvar_types</code>...? oh, I see</p>",
        "id": 205629805,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596222686
    },
    {
        "content": "<p>because it would require an inference context?</p>",
        "id": 205629813,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596222692
    },
    {
        "content": "<p>in that case we should just make it <code>self.infcx.upvar_tys(...)</code></p>",
        "id": 205629838,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596222708
    },
    {
        "content": "<p>I suppose</p>",
        "id": 205629845,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596222714
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/compare/44eff5fd7e490c0e7fb32b5fa5df7fd4e6d0633f...sexxi-goose:use_tuple_inference_for_closures\">https://github.com/rust-lang/rust/compare/44eff5fd7e490c0e7fb32b5fa5df7fd4e6d0633f...sexxi-goose:use_tuple_inference_for_closures</a></p>\n<p>This is just our changes</p>",
        "id": 205629906,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596222727
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/meeting.202020-07-31/near/205629838\">said</a>:</p>\n<blockquote>\n<p>in that case we should just make it <code>self.infcx.upvar_tys(...)</code></p>\n</blockquote>\n<p>That's the plan, I discussed this offline with Roxane, I'll leave a comment there so we don't forget</p>",
        "id": 205629935,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596222748
    },
    {
        "content": "<p>ok</p>",
        "id": 205629985,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596222777
    },
    {
        "content": "<p>I'm skimming the diff</p>",
        "id": 205630160,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596222876
    },
    {
        "content": "<p>leaving a few comments here and there</p>",
        "id": 205630344,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596222975
    },
    {
        "content": "<p>I guess that the ICEs are bugs</p>",
        "id": 205630361,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596222984
    },
    {
        "content": "<p>Thank you</p>",
        "id": 205630366,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596222986
    },
    {
        "content": "<p>I'm not sure about the stderr diffs</p>",
        "id": 205630367,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596222988
    },
    {
        "content": "<p>so far though I'm not seeing anything obvious</p>",
        "id": 205630469,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223061
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>9      = note: expected fn pointer `for&lt;&#39;r&gt; fn(&amp;&#39;r str)`\n-                    found closure `[closure@$DIR/closure-reform-bad.rs:10:13: 10:50 string:_]`\n+                    found closure `[closure@$DIR/closure-reform-bad.rs:10:13: 10:50]`\n</code></pre></div>",
        "id": 205630471,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596223065
    },
    {
        "content": "<p>I guess I can finish this up at a different time</p>",
        "id": 205630474,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223067
    },
    {
        "content": "<p>yeah, ok, so that stderr looks --- not unexpeted</p>",
        "id": 205630490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223079
    },
    {
        "content": "<p>I think it's fine</p>",
        "id": 205630492,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223081
    },
    {
        "content": "<p>This is one of the errors. what does the string:_ mean?</p>",
        "id": 205630508,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596223082
    },
    {
        "content": "<p>what that means is</p>",
        "id": 205630547,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223092
    },
    {
        "content": "<p>that's supposed to be printing the type of each field corresponding to an upvar</p>",
        "id": 205630564,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223105
    },
    {
        "content": "<p>in this case, it's saying, we have a field for <code>string:_</code> but we don't know what its type is</p>",
        "id": 205630579,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223115
    },
    {
        "content": "<p>you <em>could</em> fix the diffs by having the \"fallback\" for not knowing the upvar tys be</p>",
        "id": 205630599,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223129
    },
    {
        "content": "<p>to walk over the \"mentioned upvars\" and print \"X: _\" for each one</p>",
        "id": 205630618,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223139
    },
    {
        "content": "<p>but that's not going to be accurate forever</p>",
        "id": 205630623,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223143
    },
    {
        "content": "<p>That's true</p>",
        "id": 205630636,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596223156
    },
    {
        "content": "<p>tbh I sort of doubt that any user ever gets value from printing the upvars</p>",
        "id": 205630637,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223156
    },
    {
        "content": "<p>compiler hackers maybe sometimes</p>",
        "id": 205630654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223169
    },
    {
        "content": "<p>True</p>",
        "id": 205630655,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596223169
    },
    {
        "content": "<p>but I think most users are just going to be overwhelmed by that messy type :)</p>",
        "id": 205630671,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223179
    },
    {
        "content": "<p>so I could see a case for not printing upvars <em>at all</em> without <code>-Zverbose</code></p>",
        "id": 205630699,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223201
    },
    {
        "content": "<p>that would probably be something I would do in a preliminary PR, it might require an MCP or at least pinging <span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span></p>",
        "id": 205630767,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223218
    },
    {
        "content": "<p>That's true, I think for people working on compiler can check <code>RUSTC_LOGS=rustc_typechk::check::upvar</code></p>",
        "id": 205630780,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596223227
    },
    {
        "content": "<p>we usually use the <code>-Zverbose</code>  option to enable kind of \"debug printouts\" of types</p>",
        "id": 205630810,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223246
    },
    {
        "content": "<p>I at least use it a lot when debugging</p>",
        "id": 205630819,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223250
    },
    {
        "content": "<p>but honestly I can't recall ever making use of those upvar types in a closure</p>",
        "id": 205630844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223266
    },
    {
        "content": "<p>though I could imagine it being useful at some point</p>",
        "id": 205630849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223273
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/meeting.202020-07-31/near/205630767\">said</a>:</p>\n<blockquote>\n<p>that would probably be something I would do in a preliminary PR, it might require an MCP or at least pinging <span class=\"user-mention silent\" data-user-id=\"119031\">Esteban Küber</span></p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/project-rfc-2229/issues/15\">https://github.com/rust-lang/project-rfc-2229/issues/15</a></p>",
        "id": 205631146,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596223440
    },
    {
        "content": "<p>anyway the point is</p>",
        "id": 205631153,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223442
    },
    {
        "content": "<p>I'll add some more details later to the issue</p>",
        "id": 205631195,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596223450
    },
    {
        "content": "<p>any stderr output that just consists of <code>foo:_</code> not appearing in a closure type</p>",
        "id": 205631209,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223456
    },
    {
        "content": "<p>is probably good to be removed</p>",
        "id": 205631215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223459
    },
    {
        "content": "<p>That makes sense</p>",
        "id": 205631230,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596223467
    },
    {
        "content": "<p>I guess the diff looks good</p>",
        "id": 205631301,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223517
    },
    {
        "content": "<p>obviously <em>something</em> is wrong :)</p>",
        "id": 205631308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223522
    },
    {
        "content": "<p>Yup haha</p>",
        "id": 205631316,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596223532
    },
    {
        "content": "<p>I'd probably have to run it</p>",
        "id": 205631323,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223536
    },
    {
        "content": "<p>If u just want the builg logs they are here from the latest run: <a href=\"http://csclub.uwaterloo.ca/~jgwills/rust-builds/log_6265f764-3401-41f2-addd-d24060ac4cd5\">http://csclub.uwaterloo.ca/~jgwills/rust-builds/log_6265f764-3401-41f2-addd-d24060ac4cd5</a></p>",
        "id": 205631412,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596223571
    },
    {
        "content": "<p>I think we will just have to dig down the backtrack and figure out the ICEs</p>",
        "id": 205631488,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596223619
    },
    {
        "content": "<p>One that is done I think mostly we will have the FnPtr and no solution errors</p>",
        "id": 205631511,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596223633
    },
    {
        "content": "<blockquote>\n<p>17:     0x7f4ceb1faa70 - rustc_trait_selection::traits::wf::WfPredicates::compute::h1a97f636c2bd6c3b</p>\n</blockquote>",
        "id": 205631567,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223668
    },
    {
        "content": "<p>oh</p>",
        "id": 205631656,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223713
    },
    {
        "content": "<p>I see the bug</p>",
        "id": 205631660,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223714
    },
    {
        "content": "<p>actually I think that my suggested diffs will fix it</p>",
        "id": 205631672,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223720
    },
    {
        "content": "<p>but let me explain</p>",
        "id": 205631675,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223722
    },
    {
        "content": "<p>so you have this code</p>",
        "id": 205631701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223730
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">infcx</span><span class=\"p\">.</span><span class=\"n\">shallow_resolve</span><span class=\"p\">(</span><span class=\"n\">substs</span><span class=\"p\">.</span><span class=\"n\">as_closure</span><span class=\"p\">().</span><span class=\"n\">upvar_tuple_ty</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ty</span>::<span class=\"n\">Infer</span><span class=\"p\">(</span><span class=\"n\">ty</span>::<span class=\"n\">TyVar</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"c1\">// Not yet resolved.</span>\n<span class=\"w\">                        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">compute</span><span class=\"p\">(</span><span class=\"n\">ty</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">upvar_ty</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">substs</span><span class=\"p\">.</span><span class=\"n\">as_closure</span><span class=\"p\">().</span><span class=\"n\">upvar_tys</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 205631708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223732
    },
    {
        "content": "<p>the problem here is that <code>substs.as_closure().upvar_tuple_ty()</code> is going to return a <code>TyInfer</code></p>",
        "id": 205631731,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223748
    },
    {
        "content": "<p>you then invoke <code>shallow_resolve</code>, which resolves to a tuple</p>",
        "id": 205631743,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223754
    },
    {
        "content": "<p>but you ignore this tupld and instead call <code>upvar_tys</code> again</p>",
        "id": 205631756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223765
    },
    {
        "content": "<p>that is going to match on the (unresolved) <code>upvar_tuple_ty</code> and fail</p>",
        "id": 205631770,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223776
    },
    {
        "content": "<p>so you <em>could</em> write it like</p>",
        "id": 205631777,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223782
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">infcx</span><span class=\"p\">.</span><span class=\"n\">shallow_resolve</span><span class=\"p\">(</span><span class=\"n\">substs</span><span class=\"p\">.</span><span class=\"n\">as_closure</span><span class=\"p\">().</span><span class=\"n\">upvar_tuple_ty</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ty</span>::<span class=\"n\">Infer</span><span class=\"p\">(</span><span class=\"n\">ty</span>::<span class=\"n\">TyVar</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ty</span>::<span class=\"n\">Tuple</span><span class=\"p\">(</span><span class=\"n\">tys</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">upvar_ty</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">tys</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">bug</span><span class=\"o\">!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 205631865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223814
    },
    {
        "content": "<p>but of course that's a mess and you should have a helper</p>",
        "id": 205631876,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223820
    },
    {
        "content": "<p>but also</p>",
        "id": 205631884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223825
    },
    {
        "content": "<p>my suggested fix was just to do <code>self.compute(substs.as_closure().upvar_tuple_ty());</code></p>",
        "id": 205631896,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223835
    },
    {
        "content": "<p>in a lot of places, that will \"just work\"</p>",
        "id": 205631913,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223847
    },
    {
        "content": "<p>e.g., in this case, if you look, when you recurse and encounter a <code>ty::Infer</code>...</p>",
        "id": 205631930,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223856
    },
    {
        "content": "<p><a href=\"https://github.com/sexxi-goose/rust/blob/4d39e854cbecf3fab9067ff4e0356c899703c438/src/librustc_trait_selection/traits/wf.rs#L593\">that is this line</a></p>",
        "id": 205631941,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223862
    },
    {
        "content": "<p>all it does is to resolve the the variable and and keep going</p>",
        "id": 205631972,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223878
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/meeting.202020-07-31/near/205631865\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">infcx</span><span class=\"p\">.</span><span class=\"n\">shallow_resolve</span><span class=\"p\">(</span><span class=\"n\">substs</span><span class=\"p\">.</span><span class=\"n\">as_closure</span><span class=\"p\">().</span><span class=\"n\">upvar_tuple_ty</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ty</span>::<span class=\"n\">Infer</span><span class=\"p\">(</span><span class=\"n\">ty</span>::<span class=\"n\">TyVar</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ty</span>::<span class=\"n\">Tuple</span><span class=\"p\">(</span><span class=\"n\">tys</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">upvar_ty</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">tys</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">bug</span><span class=\"o\">!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n</blockquote>\n<p>Maybe add this to the infcx api as the upvars_ty?</p>",
        "id": 205631973,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596223879
    },
    {
        "content": "<p>yes, something like that</p>",
        "id": 205631984,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223889
    },
    {
        "content": "<p>but I think I'd still prefer my fix</p>",
        "id": 205632000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223900
    },
    {
        "content": "<p>it feels a bit \"cleaner\" to move all the logic for \"incompletely inferred\" to one place</p>",
        "id": 205632018,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223914
    },
    {
        "content": "<p>I think that makes sense</p>",
        "id": 205632069,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596223923
    },
    {
        "content": "<p>the idea is that 99% of the time the handling for a tuple is the same as the handling for iterating over the elements and handling each one</p>",
        "id": 205632080,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223935
    },
    {
        "content": "<p>there may be some exceptions but in most of the code that's true</p>",
        "id": 205632096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223945
    },
    {
        "content": "<p>so instead of iterating over the upvars and processing each upvar type</p>",
        "id": 205632105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223953
    },
    {
        "content": "<p>you just process the tuple type</p>",
        "id": 205632110,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223956
    },
    {
        "content": "<p>Sounds good, thank you</p>",
        "id": 205632129,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596223967
    },
    {
        "content": "<p>(and maybe that is not yet inferred, and you deal with that)</p>",
        "id": 205632134,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223970
    },
    {
        "content": "<p>(but the code is already managing that)</p>",
        "id": 205632144,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223975
    },
    {
        "content": "<p>the only case I can remember where this doesn't work is</p>",
        "id": 205632151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223982
    },
    {
        "content": "<p>in the trait selection code</p>",
        "id": 205632161,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223987
    },
    {
        "content": "<p>and it actually works there too</p>",
        "id": 205632166,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223991
    },
    {
        "content": "<p>but it disturbs the error message output</p>",
        "id": 205632182,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596223997
    },
    {
        "content": "<p>because we keep a \"backtrace\"</p>",
        "id": 205632193,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596224005
    },
    {
        "content": "<p>and so you wind up seeing the tuple in the backtrace</p>",
        "id": 205632199,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596224010
    },
    {
        "content": "<p>which is a bit \"surprising\", like, what tuple is that?</p>",
        "id": 205632208,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596224016
    },
    {
        "content": "<p>(though probably most people wouldn't even notice)</p>",
        "id": 205632397,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596224091
    },
    {
        "content": "<p>but that is what stopped us last time</p>",
        "id": 205632414,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596224101
    },
    {
        "content": "<p>I see, I did read about that bit in the issue</p>",
        "id": 205632495,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596224128
    },
    {
        "content": "<p>Will probably make more sense to me when I see it happen, but I get sort of a general idea</p>",
        "id": 205632646,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596224180
    },
    {
        "content": "<p>ok</p>",
        "id": 205632752,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596224262
    },
    {
        "content": "<p>For the RValue concern from earlier I modified the code to be <code>let _x = x</code> and we get called with 3 Places into the closure</p>",
        "id": 205632764,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596224271
    },
    {
        "content": "<p>so... I'm not sure if there's more we should discuss now</p>",
        "id": 205632765,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596224271
    },
    {
        "content": "<p>I guess it's ok to let things sit for a few weeks</p>",
        "id": 205632772,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596224277
    },
    {
        "content": "<p><a href=\"http://csclub.uwaterloo.ca/~a52arora/test_suite/drop_move1.log\">http://csclub.uwaterloo.ca/~a52arora/test_suite/drop_move1.log</a></p>",
        "id": 205632775,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596224279
    },
    {
        "content": "<p>jfyi I'm going to be on vacation Aug 21 - Aug 25</p>",
        "id": 205632826,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596224289
    },
    {
        "content": "<p>is that from the example you gave earlier?</p>",
        "id": 205632845,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596224299
    },
    {
        "content": "<p>Thanks for letting me know</p>",
        "id": 205632863,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596224311
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/meeting.202020-07-31/near/205632845\">said</a>:</p>\n<blockquote>\n<p>is that from the example you gave earlier?</p>\n</blockquote>\n<p>yes</p>",
        "id": 205632871,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596224317
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/meeting.202020-07-31/near/205629030\">said</a>:</p>\n<blockquote>\n<p>can you easily tell what happens if you do <code>let _x = x;</code> in the closure?</p>\n</blockquote>\n<p>basically did this</p>",
        "id": 205632893,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596224334
    },
    {
        "content": "<p>src file: <a href=\"http://csclub.uwaterloo.ca/~a52arora/test_suite/drop_move.rs\">http://csclub.uwaterloo.ca/~a52arora/test_suite/drop_move.rs</a></p>",
        "id": 205632904,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596224341
    },
    {
        "content": "<p>OK</p>",
        "id": 205632933,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596224356
    },
    {
        "content": "<p>so, that looks \"right\" to me</p>",
        "id": 205632974,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596224372
    },
    {
        "content": "<p>I .. think ?</p>",
        "id": 205633001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596224381
    },
    {
        "content": "<p>yeah</p>",
        "id": 205633006,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596224382
    },
    {
        "content": "<p>what is the output for <code>let _ = x</code> again?</p>",
        "id": 205633011,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596224387
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/meeting.202020-07-31/near/205633011\">said</a>:</p>\n<blockquote>\n<p>what is the output for <code>let _ = x</code> again?</p>\n</blockquote>\n<p><a href=\"http://csclub.uwaterloo.ca/~a52arora/test_suite/drop_move.log\">http://csclub.uwaterloo.ca/~a52arora/test_suite/drop_move.log</a></p>",
        "id": 205633087,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596224407
    },
    {
        "content": "<p>OK</p>",
        "id": 205633175,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596224449
    },
    {
        "content": "<p>that's interesting also because</p>",
        "id": 205633216,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596224468
    },
    {
        "content": "<p>I saw you have some logic that is just testing \"does it mention any upvars\"</p>",
        "id": 205633233,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596224476
    },
    {
        "content": "<p>why do we get 3 calls into InferBorrowKind::Delegate from expr use visitor, I would've not expected the PlaceBase::Local</p>",
        "id": 205633245,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596224483
    },
    {
        "content": "<p>but this is an example where it <em>does</em> mention upvars <em>but</em> doesn't necessarily capture them</p>",
        "id": 205633248,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596224485
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/meeting.202020-07-31/near/205633233\">said</a>:</p>\n<blockquote>\n<p>I saw you have some logic that is just testing \"does it mention any upvars\"</p>\n</blockquote>\n<p>It is looking for PlaceBase::Upvar to figure out</p>",
        "id": 205633294,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596224509
    },
    {
        "content": "<p>though I think that's ok, we can still use \"doesn't mention upvars\" as the over-approximation for when a closure can be coerced to a <code>fn</code> pointer</p>",
        "id": 205633298,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596224512
    },
    {
        "content": "<p>anyway, mmm, regarding the callbacks you get</p>",
        "id": 205633379,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596224536
    },
    {
        "content": "<p>I only see one thing dumped in the log, which is the \"consume rvalue\"</p>",
        "id": 205633400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596224544
    },
    {
        "content": "<p>I suspect that <em>this</em> call comes from something totally unexpected</p>",
        "id": 205633414,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596224556
    },
    {
        "content": "<p>notice that you also get it with <code>let _x = x</code></p>",
        "id": 205633451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596224572
    },
    {
        "content": "<blockquote>\n<p>Not upvar: PlaceWithHirId { hir_id: HirId { owner: DefId(0:3 ~ drop_move[317d]::main[0]), local_id: 43 }, place: Place { base_ty: (), base: Rvalue, projections: [] } }</p>\n</blockquote>",
        "id": 205633457,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596224573
    },
    {
        "content": "<p>I think what's happening there is that the type of the <code>let ...;</code> statement is just <code>()</code></p>",
        "id": 205633478,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596224585
    },
    {
        "content": "<p>and we are consuming that type</p>",
        "id": 205633487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596224592
    },
    {
        "content": "<p>or something silly like that</p>",
        "id": 205633493,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596224595
    },
    {
        "content": "<p>maybe it's the return value from the closure, idk</p>",
        "id": 205633501,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596224599
    },
    {
        "content": "<p>I think you're not actually getting any callbacks for the <code>let _ = x</code></p>",
        "id": 205633523,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596224615
    },
    {
        "content": "<p>however</p>",
        "id": 205633526,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596224619
    },
    {
        "content": "<p>I think what happened <em>before</em></p>",
        "id": 205633532,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596224623
    },
    {
        "content": "<p>is that we \"pre-initialized\" the kind of capture we do for each variable to be at least \"by shared ref\"</p>",
        "id": 205633569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596224641
    },
    {
        "content": "<p>and then we \"tightened\" those based on what accesses we saw</p>",
        "id": 205633624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596224651
    },
    {
        "content": "<p>let me check again the code, but this would make us capture <code>x</code> because it was <em>mentioned</em> even though there was never really any <em>use</em> of it</p>",
        "id": 205633659,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596224671
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/meeting.202020-07-31/near/205633569\">said</a>:</p>\n<blockquote>\n<p>is that we \"pre-initialized\" the kind of capture we do for each variable to be at least \"by shared ref\"</p>\n</blockquote>\n<p>It's captured by value.</p>\n<p><a href=\"http://csclub.uwaterloo.ca/~a52arora/test_suite/drop_move_og.log\">http://csclub.uwaterloo.ca/~a52arora/test_suite/drop_move_og.log</a></p>\n<p>This is the log using the original capture analysis</p>",
        "id": 205633838,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596224746
    },
    {
        "content": "<p>that's a bit surprising</p>",
        "id": 205633968,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596224796
    },
    {
        "content": "<p>I mean we haven't really changed the expr use visitor, right?</p>",
        "id": 205634000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596224807
    },
    {
        "content": "<p>except to track in a bit more detail which places are captured</p>",
        "id": 205634016,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596224814
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/meeting.202020-07-31/near/205634000\">said</a>:</p>\n<blockquote>\n<p>I mean we haven't really changed the expr use visitor, right?</p>\n</blockquote>\n<p>Nope</p>",
        "id": 205634018,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596224815
    },
    {
        "content": "<p>do you have a dump of the callbacks we get during upvar analysis?</p>",
        "id": 205634025,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596224821
    },
    {
        "content": "<p>Give me a second I can do that</p>",
        "id": 205634045,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596224831
    },
    {
        "content": "<p><a href=\"http://csclub.uwaterloo.ca/~a52arora/test_suite/drop_move_og.log\">http://csclub.uwaterloo.ca/~a52arora/test_suite/drop_move_og.log</a></p>",
        "id": 205634095,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596224866
    },
    {
        "content": "<p>that said, <a href=\"https://github.com/sexxi-goose/rust/blob/4d39e854cbecf3fab9067ff4e0356c899703c438/src/librustc_typeck/check/upvar.rs#L126-L135\">here is the loop I was talking about</a></p>",
        "id": 205634160,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596224890
    },
    {
        "content": "<p>ok so</p>",
        "id": 205634200,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596224921
    },
    {
        "content": "<blockquote>\n<p>[DEBUG rustc_typeck:<span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span>:upvar] adjust_upvar_borrow_kind_for_consume(place_with_id=PlaceWithHirId { hir_id: HirId { owner: DefId(0:3 ~ drop_move[317d]::main[0]), local_id: 43 }, place: Place { base_ty: (), base: Rvalue, projections: [] } }, mode=Copy)</p>\n</blockquote>",
        "id": 205634201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596224922
    },
    {
        "content": "<p>that's the rvalue</p>",
        "id": 205634205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596224925
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/meeting.202020-07-31/near/205634160\">said</a>:</p>\n<blockquote>\n<p>that said, <a href=\"https://github.com/sexxi-goose/rust/blob/4d39e854cbecf3fab9067ff4e0356c899703c438/src/librustc_typeck/check/upvar.rs#L126-L135\">here is the loop I was talking about</a></p>\n</blockquote>\n<p>Yeah we initialize based on mentioend</p>",
        "id": 205634247,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596224952
    },
    {
        "content": "<p>ah, but we do get this call</p>",
        "id": 205634291,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596224973
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>[DEBUG rustc_typeck::check::upvar] adjust_upvar_borrow_kind_for_consume(place_with_id=PlaceWithHirId { hir_id: HirId { owner: DefId(0:3 ~ drop_move[317d]::main[0]), local_id: 39 }, place: Place { base_ty: X, base: Upvar(UpvarId(HirId { owner: DefId(0:3 ~ drop_move[317d]::main[0]), local_id: 1 };`x`;DefId(0:4 ~ drop_move[317d]::main[0]::{{closure}}[0]))), projections: [] } }, mode=Move)\n</code></pre></div>",
        "id": 205634297,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596224975
    },
    {
        "content": "<p>can you dump the same logs but in the new mode?</p>",
        "id": 205634314,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596224980
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/meeting.202020-07-31/near/205634291\">said</a>:</p>\n<blockquote>\n<p>ah, but we do get this call</p>\n</blockquote>\n<p>Sorry this is using <code>let _x = x</code><br>\nand not <code>let _ = x</code></p>",
        "id": 205634388,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596225002
    },
    {
        "content": "<p>lemme fix that</p>",
        "id": 205634415,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596225007
    },
    {
        "content": "<p>oh, ok</p>",
        "id": 205634425,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596225010
    },
    {
        "content": "<p>thanks</p>",
        "id": 205634428,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596225012
    },
    {
        "content": "<p>also, I want to look briefly at your branch..</p>",
        "id": 205634449,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596225024
    },
    {
        "content": "<p>original: <a href=\"http://csclub.uwaterloo.ca/~a52arora/test_suite/drop_move_og.log\">http://csclub.uwaterloo.ca/~a52arora/test_suite/drop_move_og.log</a><br>\nnew: <a href=\"http://csclub.uwaterloo.ca/~a52arora/test_suite/drop_move.log\">http://csclub.uwaterloo.ca/~a52arora/test_suite/drop_move.log</a></p>",
        "id": 205634516,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596225053
    },
    {
        "content": "<p>how come I don't see <code>rustc_typeck::check::upvar</code> logs in the \"new\"?</p>",
        "id": 205634569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596225078
    },
    {
        "content": "<p>that said, I think I see what I expect</p>",
        "id": 205634578,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596225083
    },
    {
        "content": "<p>also, I think you were wrong before -- maybe you were confusing <code>let _x = x</code> for <code>let _ = x</code></p>",
        "id": 205634605,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596225097
    },
    {
        "content": "<p>i.e., we <em>do</em> capture by shared ref</p>",
        "id": 205634617,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596225100
    },
    {
        "content": "<p>original</p>",
        "id": 205634634,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596225107
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>upvar_capture_map: {\n    UpvarId(HirId { owner: DefId(0:3 ~ drop_move[317d]::main[0]), local_id: 1 };`x`;DefId(0:4 ~ drop_move[317d]::main[0]::{{closure}}[0])): ByRef(\n        UpvarBorrow(ImmBorrow, &#39;_#17r),\n    ),\n}\n</code></pre></div>",
        "id": 205634639,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596225109
    },
    {
        "content": "<p>(see the <code>ImmBorrow</code>?)</p>",
        "id": 205634650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596225117
    },
    {
        "content": "<p>so I think my hypothesis is correct</p>",
        "id": 205634695,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596225125
    },
    {
        "content": "<p>and I <em>think</em> the new code is actually more correct here</p>",
        "id": 205634706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596225136
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/meeting.202020-07-31/near/205634569\">said</a>:</p>\n<blockquote>\n<p>how come I don't see <code>rustc_typeck::check::upvar</code> logs in the \"new\"?</p>\n</blockquote>\n<p>fixed</p>",
        "id": 205634716,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596225141
    },
    {
        "content": "<p>ok, yep, now it looks like I expect</p>",
        "id": 205634739,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596225156
    },
    {
        "content": "<p>so do you see what's going on? not sure if I explained clearly :)</p>",
        "id": 205634751,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596225162
    },
    {
        "content": "<p>I understand that the new code is able to recognize nothing is being used</p>",
        "id": 205634776,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596225182
    },
    {
        "content": "<p>Because it doens't rely on upvars_mentioned to init but expr use/capture ananlysis</p>",
        "id": 205634811,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596225204
    },
    {
        "content": "<p>right,</p>",
        "id": 205634919,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596225257
    },
    {
        "content": "<p>and the old code kind of \"accidentally\" captures here</p>",
        "id": 205634926,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596225262
    },
    {
        "content": "<p>because we \"seed\" the capture mode with shared borrow for everything that's mentioned</p>",
        "id": 205634960,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596225286
    },
    {
        "content": "<p>if we seeded the capture mode with \"no use\"</p>",
        "id": 205634968,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596225291
    },
    {
        "content": "<p>then it would <em>also</em> not capture <code>x</code></p>",
        "id": 205634976,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596225297
    },
    {
        "content": "<p>but in effect your new code, because it derives all the captures from the uses, is doing that</p>",
        "id": 205634998,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596225311
    },
    {
        "content": "<p>this is another thing that we <em>could</em> fix with a preliminary PR that modifies the old code to capture less, but I probably wouldn't, seems like more work than it's worth</p>",
        "id": 205635080,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596225363
    },
    {
        "content": "<p>Complete guess here but</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Point</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"mi\">20</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"n\">c</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 205635112,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596225368
    },
    {
        "content": "<p>(the only advantage would be isolating out that particular effect from other effects)</p>",
        "id": 205635116,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596225371
    },
    {
        "content": "<p>I can probably just run but feels like this would error out, today</p>",
        "id": 205635140,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596225395
    },
    {
        "content": "<p>yes I believe that will error today</p>",
        "id": 205635154,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596225411
    },
    {
        "content": "<p>for the reasons we mentioned</p>",
        "id": 205635156,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596225414
    },
    {
        "content": "<p>but it arguably shouldn't, even today</p>",
        "id": 205635163,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596225421
    },
    {
        "content": "<p>and it <em>definitely</em> shouldn't with RFC 2229</p>",
        "id": 205635174,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596225429
    },
    {
        "content": "<p>(both because there is no use, and because the \"use\" is a disjoint path)</p>",
        "id": 205635205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596225459
    },
    {
        "content": "<p>this is exciting</p>",
        "id": 205635228,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596225476
    },
    {
        "content": "<p>the idea to create the data structure and then build the old ones from it is quite clever btw</p>",
        "id": 205635274,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596225485
    },
    {
        "content": "<p>I never thought of that :)</p>",
        "id": 205635279,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596225488
    },
    {
        "content": "<p>Haha yeah</p>",
        "id": 205635307,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596225509
    },
    {
        "content": "<p>Actually now to land this we need to get the tuple upvars merged, because those are initalized using upvars_mentioned too</p>",
        "id": 205635383,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596225573
    },
    {
        "content": "<p>and since even with this bridge we don't have the correct number of captures, we are going to have issues</p>",
        "id": 205635463,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596225603
    },
    {
        "content": "<p>And for closure that don't have capture in this case we just mark them as <code>Fn</code> I guess</p>",
        "id": 205635526,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596225637
    },
    {
        "content": "<p>well</p>",
        "id": 205635590,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596225678
    },
    {
        "content": "<p>so I think we can land the bridge and just capture less</p>",
        "id": 205635603,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596225691
    },
    {
        "content": "<p>that seems ok</p>",
        "id": 205635607,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596225692
    },
    {
        "content": "<p>I think the msot interesting part, which I hadn't anticipated, is that the coercions are decided based on <em>upvars mentioned</em></p>",
        "id": 205635624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596225706
    },
    {
        "content": "<p>which is an overapproximation</p>",
        "id": 205635632,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596225711
    },
    {
        "content": "<p>but I think that's ok</p>",
        "id": 205635635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596225712
    },
    {
        "content": "<p>we should be taking some notes though, it is significant for attempts to specify the language</p>",
        "id": 205635647,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596225719
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/meeting.202020-07-31/near/205635624\">said</a>:</p>\n<blockquote>\n<p>I think the msot interesting part, which I hadn't anticipated, is that the coercions are decided based on <em>upvars mentioned</em></p>\n</blockquote>\n<p>Actually not sure what the best way to resolve this would be, because that code runs before the capture analysis.</p>",
        "id": 205635753,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596225790
    },
    {
        "content": "<p>we should make a file in the repo where we track \"lang spec\" that we are evolving</p>",
        "id": 205635762,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596225796
    },
    {
        "content": "<p>I think you resolved it correctly</p>",
        "id": 205635771,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596225803
    },
    {
        "content": "<p>I just want to note it</p>",
        "id": 205635775,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596225806
    },
    {
        "content": "<p>I mean this <code>let _ = x</code> thing is really an edge-case</p>",
        "id": 205635793,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596225820
    },
    {
        "content": "<p>Other than changing the order in which things happen, but I don't have enough context on why they happen in that order today to make any valuable comments</p>",
        "id": 205635801,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596225822
    },
    {
        "content": "<p>that said</p>",
        "id": 205635806,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596225825
    },
    {
        "content": "<p>I think we could perhaps refine this later</p>",
        "id": 205635813,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596225830
    },
    {
        "content": "<p>i.e., we could say that closures can <em>always</em> be coerced to <code>fn</code> pointers <em>but</em></p>",
        "id": 205635827,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596225838
    },
    {
        "content": "<p>it creates an \"no capture obligation\"</p>",
        "id": 205635838,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596225842
    },
    {
        "content": "<p>that goes itno the trait system and which we resolve later once we know the upvars</p>",
        "id": 205635885,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596225850
    },
    {
        "content": "<p>that would work out fine</p>",
        "id": 205635888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596225852
    },
    {
        "content": "<p>I guess that's a better approach really, but maybe we should open an issue to represent it</p>",
        "id": 205635924,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596225875
    },
    {
        "content": "<p>for now I would go with the upvars-mentioned approach</p>",
        "id": 205635932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596225879
    },
    {
        "content": "<p>it's not the interesting probelm</p>",
        "id": 205635938,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596225882
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/meeting.202020-07-31/near/205635885\">said</a>:</p>\n<blockquote>\n<p>that goes itno the trait system and which we resolve later once we know the upvars</p>\n</blockquote>\n<p>Would there be no upvars if we coerce it to a fn ptr?</p>",
        "id": 205636116,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596226001
    },
    {
        "content": "<p>right</p>",
        "id": 205636135,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596226017
    },
    {
        "content": "<p>you can't make a function pointer if there are upvars</p>",
        "id": 205636138,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596226022
    },
    {
        "content": "<p>beacuse a function pointer doesn't carry any environment</p>",
        "id": 205636153,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596226027
    },
    {
        "content": "<p>so it has no state</p>",
        "id": 205636157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596226029
    },
    {
        "content": "<p>OOOOH</p>",
        "id": 205636205,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596226076
    },
    {
        "content": "<p>I see</p>",
        "id": 205636214,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596226080
    },
    {
        "content": "<p>we start by saying that this will be an fn Ptr for all closures</p>",
        "id": 205636265,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596226091
    },
    {
        "content": "<p>and then resolve it later in TraitSelction</p>",
        "id": 205636271,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596226097
    },
    {
        "content": "<p>to see if that assumption was correct else revert it to just being a closure?</p>",
        "id": 205636299,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596226123
    },
    {
        "content": "<p>Or something along these lines?</p>",
        "id": 205636307,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596226130
    },
    {
        "content": "<p>yeah</p>",
        "id": 205636331,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596226147
    },
    {
        "content": "<p>we would have to add a new kind of predicate</p>",
        "id": 205636336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596226153
    },
    {
        "content": "<p>similar to <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/enum.PredicateAtom.html#variant.ClosureKind\"><code>ClosureKind</code></a> today</p>",
        "id": 205636371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596226200
    },
    {
        "content": "<p>it would be like <code>ClosureNoUpvars(DefId, SubstsRef&lt;'tcx&gt;)</code></p>",
        "id": 205636431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596226215
    },
    {
        "content": "<p>and basically so long as the upvars are not inferred, we couldn't prove it to be true</p>",
        "id": 205636450,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596226231
    },
    {
        "content": "<p>but once the upvars are known, we can</p>",
        "id": 205636453,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596226233
    },
    {
        "content": "<p>you can't always do this trick, because it would cause us to do more coercions, which might alter the control-flow in other ways,</p>",
        "id": 205636479,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596226257
    },
    {
        "content": "<p>but I think in this case it would be fine</p>",
        "id": 205636483,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596226261
    },
    {
        "content": "<p>because if the coercion doesn't fire, you're going to get an error anyway</p>",
        "id": 205636490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596226267
    },
    {
        "content": "<p>so it's not like it's going to change how code compiles</p>",
        "id": 205636510,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596226275
    },
    {
        "content": "<p>But we wouldn't know we are in this case until we have done the capture analysis</p>",
        "id": 205636549,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596226300
    },
    {
        "content": "<p>I feel like I'm missing something</p>",
        "id": 205636650,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596226352
    },
    {
        "content": "<p>My understanding was we start with ClosureNoUpvars(defId)</p>\n<p>we do capture analysis and turn that into ClosureKind(def id, substs) in trait selection if we have upvars and FnPtr if it doesn't</p>",
        "id": 205636728,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596226421
    },
    {
        "content": "<p>no</p>",
        "id": 205636806,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596226460
    },
    {
        "content": "<p>what you're missing is how the \"fulfillment context\" works</p>",
        "id": 205636817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596226469
    },
    {
        "content": "<p>which is part of the trait system implementation sort of</p>",
        "id": 205636822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596226475
    },
    {
        "content": "<p>it basically has a llist of \"obligations\" (predicates that must be proven true)</p>",
        "id": 205636831,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596226482
    },
    {
        "content": "<p>the id eawould be that we do the coercion and we add this obligation into that list</p>",
        "id": 205636849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596226494
    },
    {
        "content": "<p>and it just stays there</p>",
        "id": 205636851,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596226497
    },
    {
        "content": "<p>already we have code that tries to prove things in the list true and stops if they contain uninferred variables</p>",
        "id": 205636871,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596226512
    },
    {
        "content": "<p>at some point, we would do the upvar inference -- this can happen while there are still things in that list, it's ok</p>",
        "id": 205636885,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596226522
    },
    {
        "content": "<p>well, we may error out today, I'm not sure, but I think not</p>",
        "id": 205636895,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596226531
    },
    {
        "content": "<p>if we do, we could stop ourselves from doing so :P</p>",
        "id": 205636906,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596226536
    },
    {
        "content": "<p>then, once upvar inference is done, we go back and check that we can prove the predicate <em>now</em></p>",
        "id": 205636918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596226549
    },
    {
        "content": "<p>we could also do this without the fulfilmment context, and just keep a list somewhere</p>",
        "id": 205636940,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596226558
    },
    {
        "content": "<p>of closures that we assumed to capture nothing</p>",
        "id": 205636984,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596226563
    },
    {
        "content": "<p>i.e., in the <code>FnCtxt</code></p>",
        "id": 205636994,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596226567
    },
    {
        "content": "<p>and then after upvar inference we go back over that list</p>",
        "id": 205637001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596226571
    },
    {
        "content": "<p>that's probably better really</p>",
        "id": 205637016,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596226578
    },
    {
        "content": "<p>no need to abuse the trait system</p>",
        "id": 205637021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596226581
    },
    {
        "content": "<p>(well, it depends, eventually, i'd like to move coercions and things into the trait system as predicates, and then it would make sense)</p>",
        "id": 205637051,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596226597
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/meeting.202020-07-31/near/205636984\">said</a>:</p>\n<blockquote>\n<p>of closures that we assumed to capture nothing</p>\n</blockquote>\n<p>That would only work for upvars_mentioned being None. I guess what I'm missing is how we are making this assumption for something like</p>\n<div class=\"codehilite\"><pre><span></span><code>|| {\n    let _ = x;\n}\n</code></pre></div>\n\n\n<p>before the capture analysis</p>",
        "id": 205637176,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596226686
    },
    {
        "content": "<p>well if you had some code like this</p>",
        "id": 205637201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596226708
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p</span>: <span class=\"nc\">fn</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 205637220,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596226717
    },
    {
        "content": "<p>the <code>let p: fn() = c</code> is going to need to decide whether the coercion is legal</p>",
        "id": 205637228,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596226726
    },
    {
        "content": "<p><em>today</em> it checks upvar's mentioned and decides immediately</p>",
        "id": 205637237,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596226732
    },
    {
        "content": "<p>what I would propose is that it says \"yes, tentatively legal\" and then records the closure for later to check</p>",
        "id": 205637254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596226745
    },
    {
        "content": "<p>then we do the type-check, we run the upvar inference, and after that, we can go back and verify</p>",
        "id": 205637267,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596226754
    },
    {
        "content": "<p>the user can't really tell the difference except for the order in which errors are emitted, basically</p>",
        "id": 205637281,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596226764
    },
    {
        "content": "<p>(we could still check upvars-mentioned too, of course, as an optimiztion)</p>",
        "id": 205637296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596226783
    },
    {
        "content": "<p>(but not worth it, this is an edge case)</p>",
        "id": 205637303,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596226789
    },
    {
        "content": "<p>Okay I mis understood what coercion was doing</p>",
        "id": 205637311,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596226799
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/meeting.202020-07-31/near/205637220\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p</span>: <span class=\"nc\">fn</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n</blockquote>\n<p>Should this generate a warning for the user?</p>",
        "id": 205637522,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596226923
    },
    {
        "content": "<p>I don't think so</p>",
        "id": 205637653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596227013
    },
    {
        "content": "<p>you mean because they sort of <em>almost capture</em> <code>x</code>?</p>",
        "id": 205637669,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596227024
    },
    {
        "content": "<p>I was thinking from an unsued capture yeah</p>",
        "id": 205637686,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596227033
    },
    {
        "content": "<p>well, my thinking is that there may be macros or things</p>",
        "id": 205637745,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596227045
    },
    {
        "content": "<p>where you generate <code>let _ = ...</code> intentionally so as not to capture</p>",
        "id": 205637768,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596227058
    },
    {
        "content": "<p>something that happens</p>",
        "id": 205637774,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596227061
    },
    {
        "content": "<p>i.e., for whatever reason, you have to generate a line for every variable, but you only want to capture some of them</p>",
        "id": 205637790,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596227071
    },
    {
        "content": "<p>Ah</p>",
        "id": 205637792,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596227072
    },
    {
        "content": "<p>I mean it's totally theoretical...</p>",
        "id": 205637810,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596227081
    },
    {
        "content": "<p>...anyway, a lint might also be ok, I don't have a strong opinion</p>",
        "id": 205637816,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596227088
    },
    {
        "content": "<p>(a macro could disable the lint)</p>",
        "id": 205637825,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596227093
    },
    {
        "content": "<p>ok, so, seems like we cleared up various things, anything else?</p>",
        "id": 205637923,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596227160
    },
    {
        "content": "<p>I guess that's fair</p>",
        "id": 205637924,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596227160
    },
    {
        "content": "<p>this was a long meeting but it was productive :)</p>",
        "id": 205637962,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596227164
    },
    {
        "content": "<p>I wish you all good luck on your exams btw! <span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span></p>",
        "id": 205637973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596227172
    },
    {
        "content": "<p>Yup, thank you :)</p>",
        "id": 205637975,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596227173
    },
    {
        "content": "<p>I'll start a doc, with some of the details we dicussed today</p>",
        "id": 205638040,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596227226
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281950\">Aman Arora</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/meeting.202020-07-31/near/205638040\">said</a>:</p>\n<blockquote>\n<p>I'll start a doc, with some of the details we dicussed today</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/project-rfc-2229/pull/16\">https://github.com/rust-lang/project-rfc-2229/pull/16</a></p>",
        "id": 205647214,
        "sender_full_name": "Aman Arora",
        "timestamp": 1596233673
    }
]