[
    {
        "content": "<p>typechk depends on rustc_middle for ty. rustc_middle::Ty is responsible for defining the <code>TypeckTables</code>. Now the <code>TypeckTables</code> would depend on rustc_typeck Place etc. </p>\n<p>I thought about moving the Place, PlaceBase, etc. along with UpvarPath/Id definitions from librustc_middle  to rustc_hir because there counterparts for mir are defined in rustc_mir. However we depend on <code>rustc_middle::ty::Ty</code> for   the type information.  This would look somthing like <a href=\"https://github.com/sexxi-goose/rust/commit/c942ee4d9c06adc6f1c76ecedeb82c059f474320\">this</a> ( I later realised that Ty coming from rustc_middle).</p>\n<p>hir equivalent of <code>Ty</code> seems a bit more simpler and I'm not sure if there is something that connects those two dots easily.</p>\n<p>I think librustc_middle/hir might be the place to move, though I'm not sure what exactly is it's purpose compared to librustc_hir, it seems like it supports the hir() queries.</p>",
        "id": 201692794,
        "sender_full_name": "Aman Arora",
        "timestamp": 1592895446
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  what do you think is the best place to move Place and related structs and enums so as to remove the circular dependency</p>",
        "id": 201772686,
        "sender_full_name": "Aman Arora",
        "timestamp": 1592941377
    },
    {
        "content": "<p>I would probably move to rustc_middle</p>",
        "id": 201772843,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592941449
    },
    {
        "content": "<p>it's true that the MIR equivalents are defined alongside the MIR, but that is partly because they are <em>used in</em> the MIR</p>",
        "id": 201772865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592941466
    },
    {
        "content": "<p>i.e., to construct MIR, you build places</p>",
        "id": 201772887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592941472
    },
    {
        "content": "<p>whereas the HIR place is used for analysis of the HIR afterwards</p>",
        "id": 201772897,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592941479
    },
    {
        "content": "<p>I'm not sure what <em>subdirectory</em> makes sense</p>",
        "id": 201772948,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592941505
    },
    {
        "content": "<p>What's the purpose of rustc_middle/hir?</p>",
        "id": 201772964,
        "sender_full_name": "Aman Arora",
        "timestamp": 1592941512
    },
    {
        "content": "<p>people have been moving things around and I'm not 100% sure what ended up where, let me look</p>",
        "id": 201772998,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592941532
    },
    {
        "content": "<p>OK</p>",
        "id": 201773198,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592941613
    },
    {
        "content": "<p>well</p>",
        "id": 201773201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592941614
    },
    {
        "content": "<p>I <em>think</em> it defines some details about HIR that aren't available in librusc_hir yet</p>",
        "id": 201773274,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592941656
    },
    {
        "content": "<p>e.g., the query providers</p>",
        "id": 201773281,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592941661
    },
    {
        "content": "<p>I'm not sure if there's a good diagram or something that shows all the current rustc crates, it'd be a nice thing to have</p>",
        "id": 201773316,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592941679
    },
    {
        "content": "<p>but in any case librustc_middle is where the rustc queries are defined</p>",
        "id": 201773370,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592941694
    },
    {
        "content": "<p>so anything it depends on can't use queries</p>",
        "id": 201773389,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592941702
    },
    {
        "content": "<p>Yeah, I'm not sure if it makes sense to define analysis structs there and impleent them in typeck</p>",
        "id": 201773393,
        "sender_full_name": "Aman Arora",
        "timestamp": 1592941705
    },
    {
        "content": "<p>it does</p>",
        "id": 201773404,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592941712
    },
    {
        "content": "<p>that's the common pattern</p>",
        "id": 201773407,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592941714
    },
    {
        "content": "<p>basically, things that have to be in the inputs/outputs from queries <em>have</em> to go in librustc_middle</p>",
        "id": 201773438,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592941732
    },
    {
        "content": "<p>well or in some dependency of it, so that it can access them</p>",
        "id": 201773465,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592941741
    },
    {
        "content": "<p>I think it would be ok to put the place definitions and the like in hir/place.rs or something</p>",
        "id": 201773516,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592941775
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/Circular.20Dependency/near/201773438\">said</a>:</p>\n<blockquote>\n<p>basically, things that have to be in the inputs/outputs from queries <em>have</em> to go in librustc_middle</p>\n</blockquote>\n<p>That's fair</p>",
        "id": 201773550,
        "sender_full_name": "Aman Arora",
        "timestamp": 1592941792
    },
    {
        "content": "<p>I think for <a href=\"https://github.com/rust-lang/rust/pull/72591/files#diff-b9ef879826d6f88fc687506d6bbf9ceaL889\">this here</a> we need  ClosureCaptures to be an IndexMap(at the very least IndexSet).</p>\n<p>We can construct an upvar id easier isntead of the within the match and then use <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TypeckTables.html#structfield.upvar_capture_map\"><code>typeck_tables::upvar_capture_map</code></a> to see if we capture that id, but we would still need an index <a href=\"https://github.com/rust-lang/rust/pull/72591/files#diff-b9ef879826d6f88fc687506d6bbf9ceaR978\">here</a></p>",
        "id": 201912838,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593038749
    },
    {
        "content": "<p>Actually we can't do that because the same variable hir_id is assocaited with multiple PlaceWithHirId and we would need sort of a multimap</p>",
        "id": 201913557,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593039303
    },
    {
        "content": "<p>We need a better way to index actually because <code>let y = || foo(p.x, p.y)</code> will have same var_hir_id pointing to definition of <code>p</code></p>",
        "id": 201914020,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593039605
    },
    {
        "content": "<p>We also want to be smart about which PlaceWithHirId we keep for the the same Place, eg:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">format</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;Something&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">c</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 201914745,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593040146
    },
    {
        "content": "<p>Nvm those will be two places, because of the ref</p>",
        "id": 201914937,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593040324
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281950\">Aman Arora</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/Typecheck.20tables.20using.20Places/near/201912838\">said</a>:</p>\n<blockquote>\n<p>We can construct an upvar id easier isntead of the within the match and then use <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TypeckTables.html#structfield.upvar_capture_map\"><code>typeck_tables::upvar_capture_map</code></a> to see if we capture that id, but we would still need an index <a href=\"https://github.com/rust-lang/rust/pull/72591/files#diff-b9ef879826d6f88fc687506d6bbf9ceaR978\">here</a></p>\n</blockquote>\n<p>We would the index <a href=\"https://github.com/sexxi-goose/rust/blob/c3dc8c455cee65db8928913da029725046c14a1b/src/librustc_mir_build/hair/cx/expr.rs#L978\">here</a> *</p>",
        "id": 201919875,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593044506
    },
    {
        "content": "<p>uh...ok... so you're saying \"we need to define an ordering\"</p>",
        "id": 202028129,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593120913
    },
    {
        "content": "<p>I agree</p>",
        "id": 202028131,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593120914
    },
    {
        "content": "<p>FxIndexSet seems fine</p>",
        "id": 202028137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593120918
    },
    {
        "content": "<p>I guess before we didn't need an ordering because we get a vec of free vars and <em>that</em> was the ordering?</p>",
        "id": 202028166,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593120938
    },
    {
        "content": "<p>we could also use a <code>Vec</code> and do linear search</p>",
        "id": 202028177,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593120943
    },
    {
        "content": "<p>but a <code>FxIndexSet</code> is probably better</p>",
        "id": 202028185,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593120950
    },
    {
        "content": "<p>I'm concerned from a perf prespective (when using Vec) and also with FixedIndexSet, there might be issues if the same place is entered twice. In case of WithHirId, it won't matter but when it's just the raw Place it might have some impact</p>",
        "id": 202028272,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593120993
    },
    {
        "content": "<p>What is the key in the set?</p>",
        "id": 202028659,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593121211
    },
    {
        "content": "<p>Vec perf is probably faster except for really large closures .. but then potentially much slower :)</p>",
        "id": 202028682,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593121227
    },
    {
        "content": "<p>depends how much we actually do \"lookups by key\"</p>",
        "id": 202028689,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593121232
    },
    {
        "content": "<p>anyway I would use a <code>FxIndexSet</code></p>",
        "id": 202028724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593121250
    },
    {
        "content": "<p>but I don't quite understand the concern about the same place being entered twice</p>",
        "id": 202028744,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593121259
    },
    {
        "content": "<p>Would it not affect the associated indecies?</p>",
        "id": 202028791,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593121287
    },
    {
        "content": "<p>When I insert the same place the second time, it will switch the index over associated with the second insert.</p>",
        "id": 202028905,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593121329
    },
    {
        "content": "<p>I'm not sure how index set handles that, but you can always check if it is already present</p>",
        "id": 202029252,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593121528
    },
    {
        "content": "<p>I <em>think</em> if you overwrite an existing key though the index doesn't change</p>",
        "id": 202029275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593121541
    },
    {
        "content": "<p><a href=\"https://docs.rs/indexmap/1.4.0/indexmap/set/struct.IndexSet.html#method.insert\">docs here</a></p>",
        "id": 202029446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593121661
    },
    {
        "content": "<p>The that's used so is either UpvarId{ closure_def_id, var_id} or var_hir_id</p>",
        "id": 202029447,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593121663
    },
    {
        "content": "<blockquote>\n<p>If an equivalent item already exists in the set, it returns false leaving the original value in the set and without altering its insertion order. Otherwise, it inserts the new item and returns true.</p>\n</blockquote>",
        "id": 202029465,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593121675
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281950\">Aman Arora</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/Typecheck.20tables.20using.20Places/near/202029447\">said</a>:</p>\n<blockquote>\n<p>The that's used so is either UpvarId{ closure_def_id, var_id} or var_hir_id</p>\n</blockquote>\n<p>This would cause conficts if we have two places that have the same variable hir id</p>",
        "id": 202029555,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593121724
    },
    {
        "content": "<p>So if I understand correctly </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Point</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">x</span>: <span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">z</span>: <span class=\"mi\">20</span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{} {}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">y</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>If hir_id of the deifinition of p is <code>hir_p</code>, then the place for <br>\np.x -&gt; { expr_id, PlaceBase::Upvar_id(closure_hir, hir_p), {Deref, Field(x)} }<br>\np.y -&gt; { expr_id, PlaceBase::Upvar_id(closure_hir, hir_p), {Deref, Field(y)} }</p>\n<p>Where the place base is Upvar_id is going to be the same and we might make wrong decisions</p>",
        "id": 202030004,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593122032
    },
    {
        "content": "<p>More like we might loose some capture information. We probably want some kind multimap.</p>",
        "id": 202030135,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593122094
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/Typecheck.20tables.20using.20Places/near/202029465\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>If an equivalent item already exists in the set, it returns false leaving the original value in the set and without altering its insertion order. Otherwise, it inserts the new item and returns true.</p>\n</blockquote>\n</blockquote>\n<p>Actually that might alter the actual indecies of the rest.  Eg: { 'A', 'B', 'C', 'A', 'D'}. we expect 'D' to be idx 4, but it will be 3 now, because index map has no gaps.</p>\n<div class=\"codehilite\"><pre><span></span><code>Indices\nThe values are indexed in a compact range without holes in the range 0..self.len(). For example, the method .get_full looks up the index for a value, and the method .get_index looks up the value by index.\n</code></pre></div>\n\n\n<p>There are places where we use <code>.zip()</code> to put things together.  I've have looked deeply into how the other information that is being zipped together is constructed, we might have to make sure that all information is constructed from the same closure_captures or something that resemles similar ordered structure</p>",
        "id": 202030649,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593122381
    },
    {
        "content": "<p>Eg: <a href=\"https://github.com/sexxi-goose/rust/commit/f3424988c0c54d87e6e8564602d9b62af09ffd5d#diff-4f4ea23fbd57ab1f20ef778c887ab80bR931\">here</a></p>",
        "id": 202031043,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593122578
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> what hir-id do you envision as the \"key\" for this set?</p>",
        "id": 202031239,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593122649
    },
    {
        "content": "<p>and why?</p>",
        "id": 202031245,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593122657
    },
    {
        "content": "<p>like, where are we doing looksup by key?</p>",
        "id": 202031265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593122661
    },
    {
        "content": "<p>I don't understand the index set concerns</p>",
        "id": 202031356,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593122702
    },
    {
        "content": "<p>as long as you don't remove things from the set, I believe that the indices will be assigned just fine,</p>",
        "id": 202031386,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593122715
    },
    {
        "content": "<p>but I guess we should step back and better understand what exactly you are trying to do in this PR because I feel a bit confused</p>",
        "id": 202031444,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593122739
    },
    {
        "content": "<p>maybe we can return to this example you gave:</p>",
        "id": 202031450,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593122744
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Point</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"nb\">drop</span><span class=\"p\">((</span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">y</span><span class=\"p\">));</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 202031500,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593122762
    },
    {
        "content": "<p>so here <em>today</em> we could just capture <code>p</code></p>",
        "id": 202031552,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593122769
    },
    {
        "content": "<p>I expect that after whatever Pr you are preparing, the same will be true</p>",
        "id": 202031557,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593122774
    },
    {
        "content": "<p>but we may have a data structure that <em>could accommodate</em> capturing <code>p.x</code> and <code>p.y</code> separately in the future</p>",
        "id": 202031588,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593122787
    },
    {
        "content": "<p>let's start there and confirm I'm correct about that :)</p>",
        "id": 202031602,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593122795
    },
    {
        "content": "<p>I think that is correct</p>",
        "id": 202031726,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593122885
    },
    {
        "content": "<p>We at somepoint need to modify what UpvarId looks like I think</p>",
        "id": 202031746,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593122898
    },
    {
        "content": "<p>My index concerns are mostly for the fact that we use zip() and I haven't followed the chain enough to be sure that what we expect to pair using <code>zip</code> will happen correctly, but I can see it potenitally being an issue.</p>\n<p>use of zip: <a href=\"https://github.com/sexxi-goose/rust/commit/f3424988c0c54d87e6e8564602d9b62af09ffd5d#diff-4f4ea23fbd57ab1f20ef778c887ab80bR931\">https://github.com/sexxi-goose/rust/commit/f3424988c0c54d87e6e8564602d9b62af09ffd5d#diff-4f4ea23fbd57ab1f20ef778c887ab80bR931</a></p>",
        "id": 202031817,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593122984
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/Typecheck.20tables.20using.20Places/near/202031265\">said</a>:</p>\n<blockquote>\n<p>like, where are we doing looksup by key?</p>\n</blockquote>\n<p>Here we do lookup using the key: <a href=\"https://github.com/sexxi-goose/rust/blob/c3dc8c455cee65db8928913da029725046c14a1b/src/librustc_mir_build/hair/cx/expr.rs#L889\">https://github.com/sexxi-goose/rust/blob/c3dc8c455cee65db8928913da029725046c14a1b/src/librustc_mir_build/hair/cx/expr.rs#L889</a></p>\n<p>We can get around this by creating an UpvarId and quering if we have borrow kind info on it. But we also need the index, which I think FxIndexSet shall suffice</p>",
        "id": 202031953,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593123105
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281950\">Aman Arora</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/Typecheck.20tables.20using.20Places/near/202031817\">said</a>:</p>\n<blockquote>\n<p>use of zip: <a href=\"https://github.com/sexxi-goose/rust/commit/f3424988c0c54d87e6e8564602d9b62af09ffd5d#diff-4f4ea23fbd57ab1f20ef778c887ab80bR931\">https://github.com/sexxi-goose/rust/commit/f3424988c0c54d87e6e8564602d9b62af09ffd5d#diff-4f4ea23fbd57ab1f20ef778c887ab80bR931</a></p>\n</blockquote>\n<p>OK, this use of zip should be ok -- in particular, that list of <code>places</code> ought to be generated precisely by iterating over the same <code>closure_captures</code> set</p>",
        "id": 202032134,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593123241
    },
    {
        "content": "<p>I mean that may not be the case on your branch today</p>",
        "id": 202032174,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593123247
    },
    {
        "content": "<p>but it should be the case</p>",
        "id": 202032203,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593123274
    },
    {
        "content": "<p>these links you're sending me, are they your branch?</p>",
        "id": 202032230,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593123292
    },
    {
        "content": "<p>or are those master</p>",
        "id": 202032232,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593123296
    },
    {
        "content": "<p>also sheesh why didn't we write comments on <a href=\"https://github.com/sexxi-goose/rust/blob/c3dc8c455cee65db8928913da029725046c14a1b/src/librustc_mir_build/hair/cx/expr.rs#L880\">this fn</a> :P</p>",
        "id": 202032275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593123325
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/Typecheck.20tables.20using.20Places/near/202032230\">said</a>:</p>\n<blockquote>\n<p>these links you're sending me, are they your branch?</p>\n</blockquote>\n<p>These are on our branch but are about a week old. We realised this while working on some issues over the last couple days.</p>",
        "id": 202032419,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593123417
    },
    {
        "content": "<p>OK, so, it's sort of ill-documented (sigh) but the <code>HirId</code> there appears to be the hir-id of the captured variable in the closure's owner</p>",
        "id": 202032439,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593123434
    },
    {
        "content": "<p>no</p>",
        "id": 202032467,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593123459
    },
    {
        "content": "<p>that...is maybe wrong? or maybe right. :)</p>",
        "id": 202032475,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593123465
    },
    {
        "content": "<p>I can't tell</p>",
        "id": 202032482,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593123468
    },
    {
        "content": "<p>/me goes to find where that table is constructed</p>",
        "id": 202032548,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593123488
    },
    {
        "content": "<p>If we are quering using the UpvarId then it's that of the declaration</p>",
        "id": 202032590,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593123516
    },
    {
        "content": "<p>ok, I think it is correct</p>",
        "id": 202032645,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593123556
    },
    {
        "content": "<p>the hir-id that is the key is the hir-id of the captured variable</p>",
        "id": 202032661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593123572
    },
    {
        "content": "<p>so I guess we should discuss what we expect this data structure to eventually be. You are thinking a <code>FxIndexSet&lt;PlaceWithHirId&gt;</code>?</p>",
        "id": 202032724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593123603
    },
    {
        "content": "<p>it doesn't at present encode <em>why</em>  a given place is captured</p>",
        "id": 202032766,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593123644
    },
    {
        "content": "<p>or rather why a given <em>variable</em> is captured</p>",
        "id": 202032771,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593123650
    },
    {
        "content": "<p>it just stores the <code>UpvarId</code></p>",
        "id": 202032774,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593123655
    },
    {
        "content": "<p>and then a different map, the <code>upvar_capture_map</code>, stores the <em>capture kind</em></p>",
        "id": 202032797,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593123675
    },
    {
        "content": "<p>gimme a min</p>",
        "id": 202032906,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593123766
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 202032907,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593123766
    },
    {
        "content": "<p>to find the <em>span of the use</em> you have to go back to the <code>upvars_mentioned</code> query today</p>",
        "id": 202032920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593123772
    },
    {
        "content": "<p>(I believe this is correct, feel free to contradict me :)</p>",
        "id": 202032937,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593123783
    },
    {
        "content": "<p>I think that I might expect to refactor all the different fields above to something like this</p>",
        "id": 202032954,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593123803
    },
    {
        "content": "<p>Yeah, we can look up on the capture kind map to check if the variable was captured, PlaceWithHirId has the hir_id of the expr, assuming I understand what the span of the node represents <a href=\"https://github.com/sexxi-goose/rust/pull/18/files#diff-87528b3a624ad671b31f556cce5c612bR536\">here</a> correctly</p>",
        "id": 202033042,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593123856
    },
    {
        "content": "<p><code>FxIndexMap&lt;hir::Place, CaptureInfo&gt;</code> where you have</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">CaptureInfo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// the id of some use that caused us to pick the capture-mode below</span>\n<span class=\"w\">    </span><span class=\"n\">example_use_at</span>: <span class=\"nc\">HirId</span><span class=\"p\">,</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"sd\">/// captured mode we selected</span>\n<span class=\"w\">    </span><span class=\"n\">capture_mode</span>: <span class=\"nc\">Mode</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 202033086,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593123898
    },
    {
        "content": "<p>however, that may not be the most convenient at this moment</p>",
        "id": 202033099,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593123910
    },
    {
        "content": "<p>precisely because of <a href=\"https://github.com/sexxi-goose/rust/blob/c3dc8c455cee65db8928913da029725046c14a1b/src/librustc_mir_build/hair/cx/expr.rs#L889\">the code you referenced earlier that does lookup via the key</a></p>",
        "id": 202033133,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593123943
    },
    {
        "content": "<p>what that code is doing, btw, is constructing the \"HAIR\", which is an intermediate step between HIR and MIR</p>",
        "id": 202033153,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593123956
    },
    {
        "content": "<p>we are eventually going to want to change how it works</p>",
        "id": 202033176,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593123962
    },
    {
        "content": "<p>but the idea is something like this</p>",
        "id": 202033203,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593123965
    },
    {
        "content": "<p>so <a href=\"https://github.com/sexxi-goose/rust/blob/c3dc8c455cee65db8928913da029725046c14a1b/src/librustc_mir_build/hair/cx/expr.rs#L787\">convert_path_expr</a> gets invoked on some path like <code>a</code> or <code>a::b</code> etc</p>",
        "id": 202033242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593124007
    },
    {
        "content": "<p>(ah interesting I forgot that we used the term path for this...)</p>",
        "id": 202033258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593124018
    },
    {
        "content": "<p>in particular it does <em>not</em> get invoked on something like <code>a.b</code>, that's a compound expression like</p>\n<ul>\n<li>Field (<code>b</code>)<br>\n    * Path (<code>a</code>)</li>\n</ul>",
        "id": 202033293,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593124043
    },
    {
        "content": "<p>so in our case it's basically being invoked on the variable variable that is at the start of a place expression</p>",
        "id": 202033317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593124060
    },
    {
        "content": "<p>which is why we end up in the <a href=\"https://github.com/sexxi-goose/rust/blob/c3dc8c455cee65db8928913da029725046c14a1b/src/librustc_mir_build/hair/cx/expr.rs#L874\"><code>Res::Local</code></a> arm of the match here</p>",
        "id": 202033338,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593124080
    },
    {
        "content": "<p>i.e., this is a reference to some local variable</p>",
        "id": 202033381,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593124085
    },
    {
        "content": "<p>so then we check <a href=\"https://github.com/sexxi-goose/rust/blob/c3dc8c455cee65db8928913da029725046c14a1b/src/librustc_mir_build/hair/cx/expr.rs#L885\">is this local variable actually something we captured from some parent function</a>?</p>",
        "id": 202033413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593124108
    },
    {
        "content": "<p>that will only be true if we are currently in a closure</p>",
        "id": 202033425,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593124114
    },
    {
        "content": "<p>otherwise, we'll get <code>upvar_index = None</code></p>",
        "id": 202033434,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593124124
    },
    {
        "content": "<p>make sense so far?</p>",
        "id": 202033440,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593124127
    },
    {
        "content": "<p>I understand the last bit, give me a second to go through the prev ones as well</p>",
        "id": 202033471,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593124151
    },
    {
        "content": "<p>Yeah so far so good</p>",
        "id": 202033528,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593124192
    },
    {
        "content": "<p><a href=\"https://github.com/sexxi-goose/rust/blob/c3dc8c455cee65db8928913da029725046c14a1b/src/librustc_mir_build/hair/cx/expr.rs#L901\">in the case that this *is* an upvar</a>,</p>",
        "id": 202033586,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593124204
    },
    {
        "content": "<p>we're going to build a \"HAIR\" expression that converts from <code>a</code> to something like <code>self.a</code></p>",
        "id": 202033625,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593124232
    },
    {
        "content": "<p>where <code>self</code> is the hidden self that represents the closure struct itself</p>",
        "id": 202033644,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593124244
    },
    {
        "content": "<p>if this closure implements <code>Fn</code>/<code>FnMut</code>, it will take <code>&amp;self</code>/<code>&amp;mut self</code>, so the expression is more like <code>(*self).a</code></p>",
        "id": 202033666,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593124262
    },
    {
        "content": "<p>you see that <a href=\"https://github.com/sexxi-goose/rust/blob/c3dc8c455cee65db8928913da029725046c14a1b/src/librustc_mir_build/hair/cx/expr.rs#L930-L943\">here</a>, where we build <code>*self</code></p>",
        "id": 202033709,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593124306
    },
    {
        "content": "<p>but if it is <code>FnOnce</code> (<a href=\"https://github.com/sexxi-goose/rust/blob/c3dc8c455cee65db8928913da029725046c14a1b/src/librustc_mir_build/hair/cx/expr.rs#L965-L970\">here</a>), we just build <code>self</code></p>",
        "id": 202033765,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593124324
    },
    {
        "content": "<p>then we <a href=\"https://github.com/sexxi-goose/rust/blob/c3dc8c455cee65db8928913da029725046c14a1b/src/librustc_mir_build/hair/cx/expr.rs#L976-L978\">wrap that in a field access</a></p>",
        "id": 202033780,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593124338
    },
    {
        "content": "<p>make sense?</p>",
        "id": 202033781,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593124340
    },
    {
        "content": "<p>Yeah that makes sense</p>",
        "id": 202033803,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593124371
    },
    {
        "content": "<p>so basically given something like <code>let x = 2; let y= || drop(x);</code>, if we are generating the HAIR for the closure <code>|| drop(x)</code>, we will generate HAIR that looks like <code>|| drop((*self).x)</code></p>",
        "id": 202033815,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593124377
    },
    {
        "content": "<p>yup</p>",
        "id": 202033831,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593124393
    },
    {
        "content": "<p>ok, so, anyway, the reason I explained all that is to say that</p>",
        "id": 202033834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593124394
    },
    {
        "content": "<p>the lookup we are doing is, given the variable id for <code>x</code>, we want to find the capture information</p>",
        "id": 202033838,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593124405
    },
    {
        "content": "<p>if we use the <code>Place</code> as the key</p>",
        "id": 202033842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593124413
    },
    {
        "content": "<p>we can still do that, but we have to construct a <code>Place</code> for <code>x</code></p>",
        "id": 202033849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593124418
    },
    {
        "content": "<p>this isn't super hard I guess, we get the type of <code>x</code> <a href=\"https://github.com/sexxi-goose/rust/blob/c3dc8c455cee65db8928913da029725046c14a1b/src/librustc_mir_build/hair/cx/expr.rs#L924\">here</a></p>",
        "id": 202033872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593124433
    },
    {
        "content": "<p>so it would be a place like <code>Place { base: PlaceBase::Local(var_hir_id), base_ty: var_ty, projections: vec![] }</code> or whatever</p>",
        "id": 202033922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593124450
    },
    {
        "content": "<p>(this is relying on the fact that we are only ever going to generate places as keys that are local variables)</p>",
        "id": 202033936,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593124464
    },
    {
        "content": "<p>and this incidentally is <em>exactly</em> why I wanted to separate <code>PlaceWithHirId</code> from <code>Place</code></p>",
        "id": 202033960,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593124484
    },
    {
        "content": "<p>because here we want to refer to the \"place expression\" in the abstract, not tied to some particular location in the code</p>",
        "id": 202033969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593124496
    },
    {
        "content": "<p>make sense?</p>",
        "id": 202033988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593124517
    },
    {
        "content": "<p>Give me a min</p>",
        "id": 202033995,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593124525
    },
    {
        "content": "<p>(fyi I'm going to have to sign off in a minute, getting to be dinner time here)</p>",
        "id": 202034020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593124547
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/Typecheck.20tables.20using.20Places/near/202033086\">said</a>:</p>\n<blockquote>\n<p><code>FxIndexMap&lt;hir::Place, CaptureInfo&gt;</code> where you have</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">CaptureInfo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// the id of some use that caused us to pick the capture-mode below</span>\n<span class=\"w\">    </span><span class=\"n\">example_use_at</span>: <span class=\"nc\">HirId</span><span class=\"p\">,</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"sd\">/// captured mode we selected</span>\n<span class=\"w\">    </span><span class=\"n\">capture_mode</span>: <span class=\"nc\">Mode</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n</blockquote>\n<p>I like this and actually if we have another set of information which is this + local variables, then we can just filter on PlaceBase</p>",
        "id": 202034115,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593124628
    },
    {
        "content": "<p>I'm not sure I understand what you mean by \"this + local variables\"</p>",
        "id": 202034213,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593124709
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/Typecheck.20tables.20using.20Places/near/202034020\">said</a>:</p>\n<blockquote>\n<p>(fyi I'm going to have to sign off in a minute, getting to be dinner time here)</p>\n</blockquote>\n<p>We can continue this tomorrow or next week</p>",
        "id": 202034232,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593124724
    },
    {
        "content": "<p>anyway, I think that having talked it out, I feel pretty good about using that setup that you just quoted, which I think will integrate just fine with the code above to generate the key we need etc</p>",
        "id": 202034235,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593124730
    },
    {
        "content": "<p>ok, I'm going to run, hopefully this makes sense :)</p>",
        "id": 202034243,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593124740
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/Typecheck.20tables.20using.20Places/near/202034213\">said</a>:</p>\n<blockquote>\n<p>I'm not sure I understand what you mean by \"this + local variables\"</p>\n</blockquote>\n<p>I mean if we have a map/list of  Places that the closure access, so that would be local variables/captures/ statics etc.  and we can just filter on PlaceBase, and it's Local and Upvar do work. And Place would also contain ids within it.</p>",
        "id": 202034356,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593124809
    },
    {
        "content": "<p>Sorry for the long post. </p>\n<p>TL;DR -- I don't think we are generating precise enough Place/generating Place on the correct expression.  What are your thoughts on using HirId of Expr as key to getting associated Place, making quering the ClosureCapture map easier.</p>\n<p>Within TypeCheckTables related to closures we currently currently have:</p>\n<ul>\n<li><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TypeckTables.html#structfield.closure_kind_origins\">closure_kind_origins</a>: Records the reasons that we picked the kind of each closure; not all closures are present in the map.</li>\n<li><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TypeckTables.html#structfield.upvar_capture_map\">upvar_capture_map</a>: CaptureKind</li>\n<li><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TypeckTables.html#structfield.closure_captures\">closure_captures</a>: Given the closure ID this map provides the list of UpvarIDs used by it. The upvarID contains the HIR node ID and it also contains the full path leading to the member of the struct or tuple that is used instead of the entire variable.</li>\n</ul>\n<p>The documentation is conflicting about the var_path in UpvarId, <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.UpvarId.html\n[expr_use_visitor#walk_captures]:%20https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/expr_use_visitor.rs#L543\">UpvarId</a> documentation says </p>\n<blockquote>\n<p>Upvars do not get their own <code>NodeId</code>. Instead, we use the pair of the original var ID (that is, the root variable that is referenced by the upvar) and the ID of the closure expression.</p>\n</blockquote>\n<p>However based on <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_passes/upvars.rs.html#82\">https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_passes/upvars.rs.html#82</a> -- which is then used to construct closure_captures</p>\n<p>and </p>\n<blockquote>\n<p>nikomatsakis: in particular it does not get invoked on something like a.b, that's a compound expression like</p>\n<p>Field (b)</p>\n<ul>\n<li>Path (a)<br>\nnikomatsakis: so in our case it's basically being invoked on the variable variable that is at the start of a place expression</li>\n</ul>\n<p>nikomatsakis: which is why we end up in the Res::Local arm of the match here</p>\n<p>nikomatsakis: i.e., this is a reference to some local variable</p>\n</blockquote>\n<p>That we store the root variable and not the actual path in our tables today. </p>\n<p>This derailed from what I wanted to mention</p>\n<ul>\n<li>I don't think closure_kind_origins need to change</li>\n<li>We probably want upvar_capture_map and closure_captures to change to something like what you suggested, but more easily queriable, because we might not have access to the Place everywhere -- the current suggestion might require computing projections again and PartialEq might not be correct in all place. I like the quering span/hir_id for the place rather than having a compelete composites (PlaceWithHirId).</li>\n<li>What I was thinking and trying to express with the \"this + local variables\" was that, what do you think about storing information in a way that expresses all the <code>Place</code>s that a closure can access. These would be the params/local variables or captured values. Do closures think of static variables as captures or still as static values? I'd assume the former, but I can be wrong.</li>\n</ul>\n<p>That said looking into how upvars_mentioned is created, I think that would require changes too because we don't express the actual fields -- to be able to generate a Place that expresses the access (eg: a.b.c) precisely.</p>\n<p>This will cause a problem in <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/expr_use_visitor.rs#L543\">expr_use_visitor#walk-captures</a>, as it generates places for borrow/consume direcrly from upvars_mentioned. Or we can make walk_captures(rename to walk_closures), walk all the expressions within the closure and make decisions.</p>\n<p>From what I have looked at so far, anything that's been used today for generating information related to closures, I don't see anything that expresses the precise kind of access other than HirExpr, which currently is ignored in walk_captures.</p>\n<p>Also if we use HirExpr or the HirId associated with the HirExpr, can we have map that to a Place to make querying even easier? I understand  normalization might be an issue and this might not depict the state clearly, but I think we will have the issue when using Place as a key aswell.</p>",
        "id": 202043776,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593134406
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> </p>\n<p>So, I'm not sure to what extent you are trying to solve the <em>immediate</em> problem (where the place is always a variable) versus preparing for the future (where the place may not be a variable). I'm not sure the best way to handle the future. I think it'd be fine if, for the current stage where it's always a variable, we index the map by the <code>HirId</code>.</p>\n<p>I sort of suspect that the \"right\" data structure for the future might be a kind of tree. The trick is that we we have a HIR expression like <code>a.b.c</code> and some 'prefix' of it needs to be replaced by a reference to an upvar, but that prefix isn't always just the local variable anymore. I was kind of putting off thinking about the best way to do that matching but I think it will probably require changes to the <code>closure_captures</code> map ultimately.</p>",
        "id": 202139625,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593203808
    },
    {
        "content": "<blockquote>\n<p>That said looking into how upvars_mentioned is created, I think that would require changes too because we don't express the actual fields -- to be able to generate a Place that expresses the access (eg: a.b.c) precisely.</p>\n</blockquote>\n<p>I don't really understand what this means though. I don't expect <code>upvars_mentioned</code> to ever change in any way from what it does now -- just return a list of variables.</p>",
        "id": 202139656,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593203837
    },
    {
        "content": "<p>Regarding the documentation, I agree it is out of date, I think that code changed. I believe we used to have more than one id for upvars, but it got refactored and cleaned up at some point to just use the <code>HirId</code> from the enclosing function.</p>",
        "id": 202139688,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593203864
    },
    {
        "content": "<blockquote>\n<p>This will cause a problem in expr_use_visitor#walk-captures, as it generates places for borrow/consume direcrly from upvars_mentioned. Or we can make walk_captures(rename to walk_closures), walk all the expressions within the closure and make decisions.</p>\n</blockquote>\n<p>I think this is ok -- the expr use visitor is going to be the thing that we use to figure out which places we capture in the first place.</p>",
        "id": 202139801,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593203934
    },
    {
        "content": "<blockquote>\n<p>I don't think we are generating precise enough Place/generating Place on the correct expression.</p>\n</blockquote>",
        "id": 202139833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593203959
    },
    {
        "content": "<p>by this are you just pointing out that the HIR <code>Place</code>  as defined today doesn't contain all the information we will eventually need (i.e., it is missing specifics about many kinds of projections)?</p>",
        "id": 202139867,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593203983
    },
    {
        "content": "<p>or something else</p>",
        "id": 202139869,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593203984
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/Typecheck.20tables.20using.20Places/near/202139867\">said</a>:</p>\n<blockquote>\n<p>by this are you just pointing out that the HIR <code>Place</code>  as defined today doesn't contain all the information we will eventually need (i.e., it is missing specifics about many kinds of projections)?</p>\n</blockquote>\n<p>With this I meant that we currently call cat_res from expr_use_visitor on the variable hir_id today that returns a Place that points just to the root variable.</p>",
        "id": 202140052,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593204106
    },
    {
        "content": "<p>is that a problem?</p>",
        "id": 202140589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593204454
    },
    {
        "content": "<p>If I understand correctly we are saying categorize(a), and we need to find a way of saying categorize(a.b.c) .</p>\n<p>Basically we need to modify expr_use_visitor to walk the tree and this confirms that: </p>\n<blockquote>\n<p>I think this is ok -- the expr use visitor is going to be the thing that we use to figure out which places we capture in the first place.</p>\n</blockquote>",
        "id": 202141131,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593204810
    },
    {
        "content": "<p>Basically no where that I have seen so far until the typechk layer we really store something that expresses (outside of an actualy expression) the actual access <code>a.b.c</code> and therfore it won't be categorized as <code>a.b.c</code>.</p>",
        "id": 202141461,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593204986
    },
    {
        "content": "<p>Hmm, so <a href=\"https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src/librustc_typeck/mem_categorization.rs#L387-L391\">this code in the <code>mem_categorizaton</code> module</a> is the one that creates a <code>Place</code> that refers to a field</p>",
        "id": 202141587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593205069
    },
    {
        "content": "<p>But when we see a closure expr, we woul call <a href=\"https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src/librustc_typeck/expr_use_visitor.rs#L310\">https://github.com/rust-lang/rust/blob/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772/src/librustc_typeck/expr_use_visitor.rs#L310</a></p>",
        "id": 202141694,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593205123
    },
    {
        "content": "<p>Yes. We'll eventually be changing that.</p>",
        "id": 202141757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593205169
    },
    {
        "content": "<p>it will not use <code>upvars_mentioned</code>, I don't think, it will probably use <code>self.mc.tables.closure_captures</code></p>",
        "id": 202141787,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593205194
    },
    {
        "content": "<p>Yeah, that's what i was getting at. That part needs to be reworked as well.</p>",
        "id": 202141796,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593205199
    },
    {
        "content": "<p>and indeed we could rewrite it now I guess</p>",
        "id": 202141855,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593205213
    },
    {
        "content": "<p>though i'm not sure if <code>self.mc.tables</code> etc will be updated at the right time</p>",
        "id": 202141890,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593205229
    },
    {
        "content": "<p>Right before this gets called, we currently generate closure_capture in check/upvars.rs</p>",
        "id": 202141943,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593205262
    },
    {
        "content": "<p>OK</p>",
        "id": 202141956,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593205272
    },
    {
        "content": "<p>Makes sense since we are reading other similar state</p>",
        "id": 202141969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593205280
    },
    {
        "content": "<p>e.g. the \"capture modes\" etc</p>",
        "id": 202141977,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593205284
    },
    {
        "content": "<p>so yeah, we'll rewrite that to read from the \"in-progress tables\" that we're generating</p>",
        "id": 202141986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593205293
    },
    {
        "content": "<p>which will make use of the <code>Place</code> that we record for each captured upvar</p>",
        "id": 202142012,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593205310
    },
    {
        "content": "<p>do you see a problem with that?</p>",
        "id": 202142040,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593205322
    },
    {
        "content": "<p>I don't think that works because currently it's generated using upvars_mentioend.</p>\n<p>I was hoping to generate it on the fly based on the delegate callback from expr_use_visitor</p>",
        "id": 202142205,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593205432
    },
    {
        "content": "<p>So something like this: <a href=\"https://github.com/rust-lang/rust/compare/master...sexxi-goose:closure_capture_places#diff-193820a23727493def60049c0b6af47eR468\">https://github.com/rust-lang/rust/compare/master...sexxi-goose:closure_capture_places#diff-193820a23727493def60049c0b6af47eR468</a></p>",
        "id": 202142212,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593205436
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281950\">Aman Arora</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/Typecheck.20tables.20using.20Places/near/202142205\">said</a>:</p>\n<blockquote>\n<p>I don't think that works because currently it's generated using upvars_mentioend.</p>\n</blockquote>\n<p>I was presuming we would change that. Are you saying that changing it to not use upvars_mentioned won't work?</p>",
        "id": 202142317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593205492
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281950\">Aman Arora</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/Typecheck.20tables.20using.20Places/near/202142212\">said</a>:</p>\n<blockquote>\n<p>So something like this: <a href=\"https://github.com/rust-lang/rust/compare/master...sexxi-goose:closure_capture_places#diff-193820a23727493def60049c0b6af47eR468\">https://github.com/rust-lang/rust/compare/master...sexxi-goose:closure_capture_places#diff-193820a23727493def60049c0b6af47eR468</a></p>\n</blockquote>\n<p>that...looks wrong to me</p>",
        "id": 202142355,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593205525
    },
    {
        "content": "<p>well, not <em>wrong</em></p>",
        "id": 202142365,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593205530
    },
    {
        "content": "<p>We would have to change it to not sure upvars_mentioned, but we can't use closure_captures directly</p>",
        "id": 202142366,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593205530
    },
    {
        "content": "<p>but premature :)</p>",
        "id": 202142370,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593205533
    },
    {
        "content": "<p>what I mean is</p>",
        "id": 202142399,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593205550
    },
    {
        "content": "<p>I think we need to collect all the places, so that is right</p>",
        "id": 202142407,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593205558
    },
    {
        "content": "<p>oh, I see, <code>self.closure_captures</code>... well, maybe right yeah :)</p>",
        "id": 202142451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593205567
    },
    {
        "content": "<p>I've not given a ton of thought to how we're going to do the \"collecting and collating\" of places</p>",
        "id": 202142471,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593205586
    },
    {
        "content": "<p>but I feel like we don't have to do that yet</p>",
        "id": 202142484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593205595
    },
    {
        "content": "<p>I sort of expected us to just synthesize the contents of the new <code>closure_captures</code> field at the same place that we currently generate the \"capture modes\" and what not for the closure</p>",
        "id": 202142556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593205652
    },
    {
        "content": "<p>I guess <a href=\"https://github.com/sexxi-goose/rust/blob/047c71caba37df9cb7d81962fea19b8525cdcd7a/src/librustc_typeck/check/upvar.rs#L153\">around here</a></p>",
        "id": 202142641,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593205685
    },
    {
        "content": "<p>Yup, by that point we would've walked the closure</p>",
        "id": 202142699,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593205723
    },
    {
        "content": "<p>basically <a href=\"https://github.com/sexxi-goose/rust/blob/047c71caba37df9cb7d81962fea19b8525cdcd7a/src/librustc_typeck/check/upvar.rs#L175\">this line</a> I guess but we would do it differently, creating the new data structure</p>",
        "id": 202142710,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593205732
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281950\">Aman Arora</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/Typecheck.20tables.20using.20Places/near/202142699\">said</a>:</p>\n<blockquote>\n<p>Yup, by that point we would've walked the closure</p>\n</blockquote>\n<p>I don't think so</p>",
        "id": 202142729,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593205743
    },
    {
        "content": "<p>we will have walked the <em>body</em> of the closure</p>",
        "id": 202142744,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593205747
    },
    {
        "content": "<p>but not the closure expression itself, which is part of the owner's body</p>",
        "id": 202142751,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593205754
    },
    {
        "content": "<p>we do the inference \"inside out\", no?</p>",
        "id": 202142759,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593205764
    },
    {
        "content": "<p>that's what <a href=\"https://github.com/sexxi-goose/rust/blob/047c71caba37df9cb7d81962fea19b8525cdcd7a/src/librustc_typeck/check/upvar.rs#L58-L74\">this visitor</a> does -- it just walks the body of the fn and analyzes closures within</p>",
        "id": 202142864,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593205821
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>    fn visit_expr(&amp;mut self, expr: &amp;&#39;tcx hir::Expr&lt;&#39;tcx&gt;) {\n        if let hir::ExprKind::Closure(cc, _, body_id, _, _) = expr.kind {\n            let body = self.fcx.tcx.hir().body(body_id);\n            self.visit_body(body);\n            self.fcx.analyze_closure(expr.hir_id, expr.span, body, cc);\n        }\n\n        intravisit::walk_expr(self, expr);\n    }\n</code></pre></div>",
        "id": 202142868,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593205827
    },
    {
        "content": "<p>yeah, but at this point we are not using the expr-use-visitor at all</p>",
        "id": 202142880,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593205836
    },
    {
        "content": "<p>that's just a regular visitor</p>",
        "id": 202142885,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593205844
    },
    {
        "content": "<p>the ExprUseVisitor is invoked <a href=\"https://github.com/sexxi-goose/rust/blob/047c71caba37df9cb7d81962fea19b8525cdcd7a/src/librustc_typeck/check/upvar.rs#L145-L152\">here</a></p>",
        "id": 202142900,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593205860
    },
    {
        "content": "<p>Yeah, but the at the this line: <a href=\"https://github.com/sexxi-goose/rust/blob/047c71caba37df9cb7d81962fea19b8525cdcd7a/src/librustc_typeck/check/upvar.rs#L153\">https://github.com/sexxi-goose/rust/blob/047c71caba37df9cb7d81962fea19b8525cdcd7a/src/librustc_typeck/check/upvar.rs#L153</a></p>",
        "id": 202142912,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593205870
    },
    {
        "content": "<p>which is part of this call:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>        self.fcx.analyze_closure(expr.hir_id, expr.span, body, cc);\n</code></pre></div>\n\n\n</blockquote>",
        "id": 202142915,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593205873
    },
    {
        "content": "<p>we consume the body of the closure</p>",
        "id": 202142925,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593205882
    },
    {
        "content": "<p>yes?</p>",
        "id": 202142933,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593205888
    },
    {
        "content": "<p>would that not being traverssing the closure body</p>",
        "id": 202142939,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593205893
    },
    {
        "content": "<p>yes, but that doesn't invoke walk_captures</p>",
        "id": 202142951,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593205902
    },
    {
        "content": "<p>and the body tells us what's being captures?</p>",
        "id": 202142956,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593205905
    },
    {
        "content": "<p>yes</p>",
        "id": 202142962,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593205909
    },
    {
        "content": "<p>so e.g. if we have</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 202143038,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593205939
    },
    {
        "content": "<p>in the outer walk, we will walk the body, and we will first encounter c1, which walks its body, which encounters c2</p>",
        "id": 202143062,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593205957
    },
    {
        "content": "<p>then we will analyze the body of c2, which is <code>{ drop(a); }</code></p>",
        "id": 202143069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593205963
    },
    {
        "content": "<p>we'll see that it uses <code>a</code> etc</p>",
        "id": 202143102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593205977
    },
    {
        "content": "<p>when it's done, we'll fill in the <code>TypeckTables</code> with information about <code>c2</code> -- in particular, we would fill in this new <code>closure_captures</code> hashmap we are talking about</p>",
        "id": 202143135,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593205994
    },
    {
        "content": "<p>so that it records the <code>Place</code> for <code>a</code> etc</p>",
        "id": 202143163,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593206005
    },
    {
        "content": "<p>then we would continue with that outer visit. now that we have visited the body of c1, we would analyze the body.</p>",
        "id": 202143189,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593206026
    },
    {
        "content": "<p>the body of c1 is <code>{ let c2 = || /* opaque */; }</code></p>",
        "id": 202143206,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593206040
    },
    {
        "content": "<p>at <em>this</em> point, as we walk the <code>|| ...</code> expression,</p>",
        "id": 202143260,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593206051
    },
    {
        "content": "<p><em>that</em> is where the <code>ExprUseVisitor</code> code that invokes <code>walk_captures</code> gets invoked</p>",
        "id": 202143282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593206065
    },
    {
        "content": "<p>the idea is that the closure expression corresponds to creating the closure structure, so its accesses are to \"capture\" the various upvars that it refers to</p>",
        "id": 202143312,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593206085
    },
    {
        "content": "<p>I see</p>",
        "id": 202143314,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593206086
    },
    {
        "content": "<p>but by this time the <code>closure_captures</code> data for <code>c2</code> is available to us (but not <code>c1</code>, but we don't need it yet)</p>",
        "id": 202143346,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593206106
    },
    {
        "content": "<p>in fact, we'll never use the data for <code>c1</code></p>",
        "id": 202143359,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593206112
    },
    {
        "content": "<p>it's only relevant for nested closures</p>",
        "id": 202143366,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593206117
    },
    {
        "content": "<p>I mean, we will use it when we build the MIR etc</p>",
        "id": 202143370,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593206122
    },
    {
        "content": "<p>but not during this analysis :)</p>",
        "id": 202143378,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593206126
    },
    {
        "content": "<p>this is because we never analyze the body of the outer function, since it doesn't capture anything</p>",
        "id": 202143400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593206143
    },
    {
        "content": "<p>Give me a couple mins to process some of this</p>",
        "id": 202143547,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593206186
    },
    {
        "content": "<p>Overall the flow would be </p>\n<ul>\n<li>instravist on foo, see a closure expr c1</li>\n<li>Visits the body of c1 // (2)</li>\n<li>instravisit on c1, sees a closure expr c2</li>\n<li>Visits the body c2  // (1)</li>\n<li>analyses the closure c2  and hence the captures (1')</li>\n<li>c2 intravisit finishes</li>\n<li>analyses the closure c1 and hence the captures (2')</li>\n<li>c1 intravisit finishes </li>\n<li>foo intravisit finishes</li>\n</ul>",
        "id": 202143994,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593206424
    },
    {
        "content": "<p>When I say intravisit finishes it's for parts we are concerned with atm, analyse would be expr_use_visitor</p>",
        "id": 202144014,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593206442
    },
    {
        "content": "<p>So somewhere at (1) or (1') line below we will figure out that c2 is consuming a.</p>",
        "id": 202144407,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593206688
    },
    {
        "content": "<p>1' would make more sense because we are categorizing the use in there.</p>",
        "id": 202144481,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593206736
    },
    {
        "content": "<p>that sounds right</p>",
        "id": 202144974,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593207030
    },
    {
        "content": "<p>something like this, with nesting :)</p>\n<div class=\"codehilite\"><pre><span></span><code>| visit body of foo\n| | visit body of c1\n| | | visit closure c2\n| | | | visit body of c2 (does nothing)\n| | | | analyze body of c2, producing closure_captures[c2]\n| | analyze body of c1, reading closure_captures[c2], producing closure_captures[c1]\n</code></pre></div>",
        "id": 202145182,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593207152
    },
    {
        "content": "<p>Okay, I has an incorrect understanding of how we were walking. </p>\n<p>Basically walk_captures is called for the the closure c2 from c1. By the time we call anaylse closure on <code>c1</code>  <a href=\"https://github.com/sexxi-goose/rust/blob/047c71caba37df9cb7d81962fea19b8525cdcd7a/src/librustc_typeck/check/upvar.rs#L69\">here</a> we would've processed the closure_captures on c2</p>",
        "id": 202145241,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593207208
    },
    {
        "content": "<p>yes</p>",
        "id": 202145381,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593207332
    },
    {
        "content": "<p>exactly</p>",
        "id": 202145392,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593207343
    },
    {
        "content": "<p>(it's subtle indeed)</p>",
        "id": 202145395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593207353
    },
    {
        "content": "<p>And similar thing happens here: </p>\n<p><a href=\"https://github.com/sexxi-goose/rust/blob/047c71caba37df9cb7d81962fea19b8525cdcd7a/src/librustc_typeck/check/upvar.rs#L112\">https://github.com/sexxi-goose/rust/blob/047c71caba37df9cb7d81962fea19b8525cdcd7a/src/librustc_typeck/check/upvar.rs#L112</a></p>\n<p>We initialize all upvars based on information from closure expression (I'm assuming if it's marked mut or move). Then when we walk the tree we consume or borrow each expr and if we say another closure within we must have already processed it, so we can read information about it directly from typeck tables</p>",
        "id": 202146227,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593207932
    },
    {
        "content": "<p>Where technically we can use closure_captures again</p>",
        "id": 202146253,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593207948
    },
    {
        "content": "<p>right</p>",
        "id": 202146328,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593207981
    },
    {
        "content": "<p>so <em>that</em> logic may have to change sooner or later</p>",
        "id": 202146338,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593207988
    },
    {
        "content": "<p>So I expect atleast <a href=\"https://github.com/rust-lang/project-rfc-2229/issues/5\">#5</a> (Type info in projections) to have a PR open next week, fair likehood on getting <a href=\"https://github.com/rust-lang/project-rfc-2229/issues/2\">#2</a>/#1 (field, index, subslice) done soon as well. That basically means we have <a href=\"https://github.com/rust-lang/project-rfc-2229/issues/7\">#7</a> as our main next ticket. This will be followed by <a href=\"https://github.com/rust-lang/project-rfc-2229/issues/4\">#4</a></p>",
        "id": 202146721,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593208267
    },
    {
        "content": "<p>great</p>",
        "id": 202146759,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593208306
    },
    {
        "content": "<p>in general, this flow is working for you all? (I.e., you're getting answers to your questions in a timely fashion :)</p>",
        "id": 202146813,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593208324
    },
    {
        "content": "<p>Yeah, I think this going way better than we could've asked for, thank you so much</p>",
        "id": 202146843,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593208348
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281950\">Aman Arora</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/Typecheck.20tables.20using.20Places/near/202146721\">said</a>:</p>\n<blockquote>\n<p>So I expect atleast <a href=\"https://github.com/rust-lang/project-rfc-2229/issues/5\">#5</a> (Type info in projections) to have a PR open next week, fair likehood on getting <a href=\"https://github.com/rust-lang/project-rfc-2229/issues/2\">#2</a>/#1 (field, index, subslice) done soon as well. That basically means we have <a href=\"https://github.com/rust-lang/project-rfc-2229/issues/7\">#7</a> as our main next ticket. This will be followed by <a href=\"https://github.com/rust-lang/project-rfc-2229/issues/4\">#4</a></p>\n</blockquote>\n<p>My point with that was that we should probably decide how the key  and the typechk tables look sooner than later</p>",
        "id": 202146888,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593208379
    },
    {
        "content": "<p>why don't we discuss that in the next sync meeting...?</p>",
        "id": 202146911,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593208396
    },
    {
        "content": "<p>Yup</p>",
        "id": 202146927,
        "sender_full_name": "Aman Arora",
        "timestamp": 1593208407
    },
    {
        "content": "<p>Currently when we initials the upvars_capture_map (upvarid -&gt; capture kind), the capture kind is initialized with a new region for each root variable. </p>\n<p>Now <br>\na) We will be initializing capture information as well process expressions in InferBorrowKind<br>\nb) if I understand correctly we will be creating a new Region for ecah of the different Place that use the same root variable. How does the origin fit in with that when we call </p>\n<div class=\"codehilite\"><pre><span></span><code>let origin = UpvarRegion(upvar_id, access_span);\nlet upvar_region = self.next_region_var(origin);\n</code></pre></div>\n\n\n<p>because now multiple places share the same upvar_id. </p>\n<p>This is where I plan on init'ing capture_info for each capture: <a href=\"https://github.com/rust-lang/rust/commit/6efe37e3926f23a2b57eeb96f4ed2fe854002bcf#diff-193820a23727493def60049c0b6af47eR603\">https://github.com/rust-lang/rust/commit/6efe37e3926f23a2b57eeb96f4ed2fe854002bcf#diff-193820a23727493def60049c0b6af47eR603</a><br>\n(note this is just a very initial draft sort of)</p>",
        "id": 203251831,
        "sender_full_name": "Aman Arora",
        "timestamp": 1594204148
    },
    {
        "content": "<p>Hmm, I'm not sure if those regions are still relevant, to be honest. Also, why do you say that multiple places share the same <code>upvar_id</code>?</p>",
        "id": 203271590,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594217359
    },
    {
        "content": "<p>I guess I have to look into <code>upvar_region</code> but I wouldn't be surprised if it can be removed</p>",
        "id": 203271618,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594217384
    },
    {
        "content": "<p>UpvarId is basically (def Id, root var hir Id). So captured places like a.b, a.b.c, a.x will have the same UpvarId because same root variable (assuming all of these were captured in the same closure)</p>",
        "id": 203289315,
        "sender_full_name": "Aman Arora",
        "timestamp": 1594225402
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/Typecheck.20tables.20using.20Places/near/203271618\">said</a>:</p>\n<blockquote>\n<p>I guess I have to look into <code>upvar_region</code> but I wouldn't be surprised if it can be removed</p>\n</blockquote>\n<p>We use region for defining capture via borrow: <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.UpvarBorrow.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.UpvarBorrow.html</a></p>",
        "id": 203311250,
        "sender_full_name": "Aman Arora",
        "timestamp": 1594236453
    },
    {
        "content": "<p>though we overwrite it when finishing typeck: <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/check/writeback.rs#L328\">https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/check/writeback.rs#L328</a></p>",
        "id": 203311937,
        "sender_full_name": "Aman Arora",
        "timestamp": 1594236801
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281950\">Aman Arora</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/Typecheck.20tables.20using.20Places/near/203289315\">said</a>:</p>\n<blockquote>\n<p>UpvarId is basically (def Id, root var hir Id). So captured places like a.b, a.b.c, a.x will have the same UpvarId because same root variable (assuming all of these were captured in the same closure)</p>\n</blockquote>\n<p>it is not obvious to me that we will still be using upvar-id by the time we finish this change, I guess</p>",
        "id": 203328413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594245152
    },
    {
        "content": "<p>I'm not even sure if we need it <em>now</em>, it might be something we could refactor away with relative ease</p>",
        "id": 203328433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594245175
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281950\">Aman Arora</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/Typecheck.20tables.20using.20Places/near/203311937\">said</a>:</p>\n<blockquote>\n<p>though we overwrite it when finishing typeck: <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/check/writeback.rs#L328\">https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/check/writeback.rs#L328</a></p>\n</blockquote>\n<p>exactly, this is why I was saying I'm not sure how imp't it is</p>",
        "id": 203328477,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594245191
    },
    {
        "content": "<p>we may still need it for a bit</p>",
        "id": 203328486,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594245202
    },
    {
        "content": "<p>Currently we're trying to build the capture_information in parallel and see if can slowly remove the existing structures</p>",
        "id": 203328624,
        "sender_full_name": "Aman Arora",
        "timestamp": 1594245289
    },
    {
        "content": "<p>So maybe that will answer that bit</p>",
        "id": 203328651,
        "sender_full_name": "Aman Arora",
        "timestamp": 1594245303
    },
    {
        "content": "<p>OK, let me know if there are any further questions</p>",
        "id": 203401666,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594309008
    },
    {
        "content": "<p>Will do, thanks</p>",
        "id": 203424507,
        "sender_full_name": "Aman Arora",
        "timestamp": 1594320709
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281950\">Aman Arora</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/meeting.202020-07-21/near/205064007\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/meeting.202020-07-21/near/204593541\">said</a>:</p>\n<blockquote>\n<p>Regarding the bridge: OK, that sounds reasonable. One thing to note is that we are <em>always</em> going to have to support the current mode of 'just capture the root variable'. My expectation is that we'll phase in this new RFC along an edition boundary, so we'll still have to support the old mode. But I think this isn't a problem, it comes down to the question of \"truncating\" the place to just the root variable, as you already noted.</p>\n</blockquote>\n<p>We can't just drop projections,  it is used to figure out UniqueImmBorrow <br>\n<a href=\"https://github.com/rust-lang/rust/blob/222d2508375a363be7a4f6ded3c9bd7be0803d19/src/librustc_typeck/check/upvar.rs#L322\">https://github.com/rust-lang/rust/blob/222d2508375a363be7a4f6ded3c9bd7be0803d19/src/librustc_typeck/check/upvar.rs#L322</a></p>\n</blockquote>\n<p>(Semi-hacky) work around could be when we drop the projections and how we read from the capture information that is currently being built in InferBorrowKind. </p>\n<ul>\n<li>So if we need to read the capture information when handling a Place, we read using a Place that doesn't contain projections</li>\n<li>When we update the capture information we add after dropping the place.</li>\n</ul>\n<p>This mimics what the current behaviour is because we currently store information with var hir id as the key and use Place within InferBorrowKind without ever modifying it</p>",
        "id": 205085676,
        "sender_full_name": "Aman Arora",
        "timestamp": 1595832216
    },
    {
        "content": "<p>I'm not sure what's the best way to go about it, but whatever we do it doesn't seem too difficult to \"reduce\" a use to the base variable -- but you're right that we have to examine the projections at some point in order to determine the \"capture mode\"</p>",
        "id": 205145014,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595870752
    }
]