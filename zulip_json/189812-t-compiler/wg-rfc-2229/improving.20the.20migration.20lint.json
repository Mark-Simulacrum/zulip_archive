[
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"310399\">@Mara</span> was pointing out to me that the quality of the messages you get when migrating could be improved -- basically right now they don't give as much explanation as one might like. I was talking to <span class=\"user-mention\" data-user-id=\"423254\">@Katherine Philip</span> who might be interested in working to help fix that (I thought it'd be good to start helping others get involved in this effort).</p>",
        "id": 244434251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625064265
    },
    {
        "content": "<blockquote>\n<p>messages you get</p>\n</blockquote>\n<p>important question here though is how often people actually get to see these messages. ideally it'd just be an internal detail to <code>cargo fix --edition</code> when migrating. but i think some users might want to (or have to) look at the messages to understand the migration, or check 'manually' what needs to be migrated.</p>",
        "id": 244435254,
        "sender_full_name": "Mara",
        "timestamp": 1625064619
    },
    {
        "content": "<p>I do think some folks will want to manually migrate (or are forced to e.g. due to macros etc)</p>",
        "id": 244436648,
        "sender_full_name": "simulacrum",
        "timestamp": 1625065112
    },
    {
        "content": "<p>What does this message look like at the moment?</p>",
        "id": 244453623,
        "sender_full_name": "Katherine Philip",
        "timestamp": 1625071765
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"423254\">@Katherine Philip</span> You can find examples of what they look like here: <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/closures/2229_closure_analysis/migrations/\">https://github.com/rust-lang/rust/blob/master/src/test/ui/closures/2229_closure_analysis/migrations/</a></p>",
        "id": 244469329,
        "sender_full_name": "rocksand",
        "timestamp": 1625078248
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"423254\">@Katherine Philip</span> I will try to file an issue with some specific tests and examples of what we'd like them to say</p>",
        "id": 244475947,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625081577
    },
    {
        "content": "<p>or perhaps <span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> or <span class=\"user-mention\" data-user-id=\"307184\">@rocksand</span> can take a stab at that</p>",
        "id": 244475962,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625081586
    },
    {
        "content": "<p>Here is an <a href=\"https://github.com/rust-lang/rust/blob/868c702d0c9a471a28fb55f0148eb1e3e8b1dcc5/src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop_attr_migrations.stderr#L1-L27\">example message</a></p>",
        "id": 244476020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625081625
    },
    {
        "content": "<p>currently, for example, it says \"drop order will change in Rust 2021\", but that's a bit terse</p>",
        "id": 244476124,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625081666
    },
    {
        "content": "<p>probably though a good starting step <span class=\"user-mention\" data-user-id=\"423254\">@Katherine Philip</span> is to read <a href=\"https://hackmd.io/NzREH22HTFq1kefIFG0XSw\">this draft blog post</a>  that explains the feature and the migration and why it is necessary</p>",
        "id": 244476182,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625081698
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error: changes to closure capture in Rust 2021 will affect when destructors run\n  --&gt; $DIR/insignificant_drop_attr_migrations.rs:38:13\n   |\nLL |       let c = || {\n   |   .  .  .  .  ^^ closure is created here\nLL | |         let _t = t.0;\n   | |.                 --- in Rust 2018, closure captures all of `t`, but in Rust 2021, it only captures `t.0`\n   | ...\nLL | }\n   | - in Rust 2021, `t.1` will be dropped here, instead of being dropped when the closure is dropped\n</code></pre></div>",
        "id": 244476529,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625081879
    },
    {
        "content": "<p>something like that, maybe?</p>",
        "id": 244476548,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625081883
    },
    {
        "content": "<p>I think we have all the info we would need to generate that</p>",
        "id": 244476635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625081913
    },
    {
        "content": "<p>there are other cases too, I imagine they would follow a similar template</p>",
        "id": 244476664,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625081929
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/improving.20the.20migration.20lint/near/244475962\">said</a>:</p>\n<blockquote>\n<p>or perhaps <span class=\"user-mention silent\" data-user-id=\"281950\">Aman Arora</span> or <span class=\"user-mention silent\" data-user-id=\"307184\">rocksand</span> can take a stab at that</p>\n</blockquote>\n<p>I have no preference</p>",
        "id": 244509181,
        "sender_full_name": "rocksand",
        "timestamp": 1625102995
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"423254\">@Katherine Philip</span> Do you want me to take a stab at improving the lint or are you working on it?</p>",
        "id": 245038657,
        "sender_full_name": "rocksand",
        "timestamp": 1625578286
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307184\">@rocksand</span> I've been away for the holiday weekend, sorry! I haven't really started yet, feel free to take over</p>",
        "id": 245057018,
        "sender_full_name": "Katherine Philip",
        "timestamp": 1625586022
    },
    {
        "content": "<p>Ok, I'll take a stab at it then</p>",
        "id": 245062325,
        "sender_full_name": "rocksand",
        "timestamp": 1625588026
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  I wanted to get your opinion on the following lints before I open a PR for review.<br>\nDrop migration lint:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: changes to closure capture in Rust 2021 will affect drop order\n  --&gt; $DIR/significant_drop.rs:163:21\n   |\nLL |               let c = || {\n   |  _____________________^\nLL | |\nLL | |\nLL | |\nLL | |                 tuple.0;\n   | |                 ------- in Rust 2018, closure captures all of `tuple`, but in Rust 2021, it only captures `tuple.0`\nLL | |\nLL | |             };\n   | |_____________^\n...\nLL |           }\n   |           - in Rust 2018, `tuple` would be dropped here, but in Rust 2021, only `tuple.0` would be dropped here alongside the closure\n</code></pre></div>\n<p>Auto traits migration lint:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: changes to closure capture in Rust 2021 will affect `Send` trait implementation for closure\n  --&gt; $DIR/auto_traits.rs:14:19\n   |\nLL |       thread::spawn(move || unsafe {\n   |  ___________________^\nLL | |\nLL | |\nLL | |\nLL | |         *fptr.0 = 20;\n   | |         ------- in Rust 2018, closure captures all of `fptr`, but in Rust 2021, it only captures `fptr.0`\nLL | |\nLL | |     });\n   | |     ^ in Rust 2018, this closure would implement `Send` as `fptr` implements `Send`, but in Rust 2021, this closure would no longer implement `Send` as `fptr.0` does not implement `Send`\n   | |_____|\n</code></pre></div>",
        "id": 245206508,
        "sender_full_name": "rocksand",
        "timestamp": 1625675102
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307184\">@rocksand</span> this looks great! My only suggestion would be to change the \"overall span\" for the lint from tagging the <em>entire</em> closure to just the closure <em>header</em>. I think <span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> would know if there is any convenient way to do that.</p>",
        "id": 245228758,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625685308
    },
    {
        "content": "<p>There's <code>guess_head_span</code>, but I believe we have now a more principled way of doing that.</p>",
        "id": 245228952,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1625685405
    },
    {
        "content": "<p>I would also make the field access be the primary span and the span pointing at the closure secondary</p>",
        "id": 245229003,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1625685436
    },
    {
        "content": "<p>The output would then look like</p>\n<div class=\"codehilite\"><pre><span></span><code>error: changes to closure capture in Rust 2021 will affect drop order\n  --&gt; $DIR/significant_drop.rs:163:21\n   |\nLL |             let c = || {\n   |                     --\nLL |\nLL |\nLL |\nLL |                 tuple.0;\n   |                 ^^^^^^^ in Rust 2018, closure captures all of `tuple`, but in Rust 2021, it only captures `tuple.0`\n...\nLL |         }\n   |         - in Rust 2018, `tuple` would be dropped here, but in Rust 2021, only `tuple.0` would be dropped here alongside the closure\n\nerror: changes to closure capture in Rust 2021 will affect `Send` trait implementation for closure\n  --&gt; $DIR/auto_traits.rs:14:19\n   |\nLL |     thread::spawn(move || unsafe {\n   |                   -------------- in Rust 2018, this closure would implement `Send` as `fptr` implements `Send`, but in Rust 2021, this closure would no longer implement `Send` as `fptr.0` does not implement `Send`\nLL |\nLL |\nLL |\nLL |         *fptr.0 = 20;\n   |         ^^^^^^^ in Rust 2018, closure captures all of `fptr`, but in Rust 2021, it only captures `fptr.0`\n</code></pre></div>\n<p>I have to say that for the case where the closure is more than one line, I personally somewhat prefer the multiline span, but for the case where closure is entirely in a single line, I would likely prefer to point only to the header</p>\n<div class=\"codehilite\"><pre><span></span><code>error: changes to closure capture in Rust 2021 will affect `Send` trait implementation for closure\n  --&gt; $DIR/auto_traits.rs:14:19\n   |\nLL |     thread::spawn(move || unsafe { *fptr.0 = 20;\n   |                   --------------   ^^^^^^^ in Rust 2018, closure captures all of `fptr`, but in Rust 2021, it only captures `fptr.0`\n   |                   |\n   |                   in Rust 2018, this closure would implement `Send` as `fptr` implements `Send`, but in Rust 2021, this closure would no longer implement `Send` as `fptr.0` does not implement `Send`\n</code></pre></div>\n<p>although I don't think it is terrible if we don't:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: changes to closure capture in Rust 2021 will affect `Send` trait implementation for closure\n  --&gt; $DIR/auto_traits.rs:14:19\n   |\nLL |     thread::spawn(move || unsafe { *fptr.0 = 20; }\n   |                   -----------------^^^^^^^--------\n   |                   |                |\n   |                   |                in Rust 2018, closure captures all of `fptr`, but in Rust 2021, it only captures `fptr.0`\n   |                   in Rust 2018, this closure would implement `Send` as `fptr` implements `Send`, but in Rust 2021, this closure would no longer implement `Send` as `fptr.0` does not implement `Send`\n</code></pre></div>",
        "id": 245243103,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1625692558
    },
    {
        "content": "<p>Ok, I'll try that</p>",
        "id": 245244860,
        "sender_full_name": "rocksand",
        "timestamp": 1625693397
    }
]