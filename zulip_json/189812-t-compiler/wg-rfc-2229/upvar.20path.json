[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> would it be ok if I started taking a look at Step 3 of the <a href=\"https://paper.dropbox.com/doc/RFC-2229-Roadmap-cJKrePDCZR54T5kVbuoQk\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/RFC-2229-Roadmap-cJKrePDCZR54T5kVbuoQk\">Roadmap</a> since it's kinda orthogonal? lots to learn there for me, I guess</p>",
        "id": 160498220,
        "sender_full_name": "ange",
        "timestamp": 1552324440
    },
    {
        "content": "<p>Is there a sub section (A, B, ..) that particularly interests you in step 3 ?</p>",
        "id": 160499776,
        "sender_full_name": "blitzerr",
        "timestamp": 1552325466
    },
    {
        "content": "<p>B and C I guess?</p>",
        "id": 160500699,
        "sender_full_name": "ange",
        "timestamp": 1552326241
    },
    {
        "content": "<p>B if I had to choose</p>",
        "id": 160500764,
        "sender_full_name": "ange",
        "timestamp": 1552326276
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 160500950,
        "sender_full_name": "blitzerr",
        "timestamp": 1552326422
    },
    {
        "content": "<p>OK, so, this is positively infested with FIXMEs, but, for this source:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(rustc_attrs)]</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Quux</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">z</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">w</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">quux</span>: <span class=\"nc\">Quux</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">cl</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"nc\">where</span><span class=\"w\"> </span><span class=\"n\">F</span>: <span class=\"nb\">FnMut</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">cl</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[rustc_dump_closure_captures]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">quux</span>: <span class=\"nc\">Quux</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">z</span>: <span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">w</span>: <span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"p\">.</span><span class=\"n\">quux</span><span class=\"p\">.</span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"p\">.</span><span class=\"n\">quux</span><span class=\"p\">.</span><span class=\"n\">z</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>I now get</p>\n<div class=\"codehilite\"><pre><span></span>error: closure capture paths: Upvar local mut y (id=53) [&quot;Deref Deref&quot;]\n  --&gt; example-annotated.rs:25:9\n   |\n25 |       foo(|| {\n   |  _________^\n26 | |         y += 1;\n27 | |         x + y + bar.quux.w + bar.quux.z\n28 | |     });\n   | |_____^\n\nerror: closure capture paths: Upvar local bar (id=56) [&quot;Deref Deref Field(quux) Field(w)&quot;, &quot;Deref Deref Field(quux) Field(z)&quot;]\n  --&gt; example-annotated.rs:25:9\n   |\n25 |       foo(|| {\n   |  _________^\n26 | |         y += 1;\n27 | |         x + y + bar.quux.w + bar.quux.z\n28 | |     });\n   | |_____^\n\nerror: closure capture paths: Upvar local x (id=50) [&quot;Deref Deref&quot;]\n  --&gt; example-annotated.rs:25:9\n   |\n25 |       foo(|| {\n   |  _________^\n26 | |         y += 1;\n27 | |         x + y + bar.quux.w + bar.quux.z\n28 | |     });\n   | |_____^\n\nerror: aborting due to 3 previous errors\n</pre></div>",
        "id": 160954668,
        "sender_full_name": "ange",
        "timestamp": 1552748353
    },
    {
        "content": "<p>(this is by walking the <code>cmt_</code> linked-list in <code>adjust_upvar_borrow_captures_for_consume</code> FWIW)</p>",
        "id": 160954750,
        "sender_full_name": "ange",
        "timestamp": 1552748430
    },
    {
        "content": "<p>Will need to take a close look at the usage of <code>NoteClosureEnv</code> and <code>NoteUpvarRef</code> to get rid of the synthetic Derefs</p>",
        "id": 160954820,
        "sender_full_name": "ange",
        "timestamp": 1552748525
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> FWIW, it doesn't seem viable to keep the paths in <code>UpvarId</code> (needs to be <code>Copy</code>). Currently, I just added a separate map from <code>UpvarId</code> -&gt; paths</p>",
        "id": 160954911,
        "sender_full_name": "ange",
        "timestamp": 1552748730
    },
    {
        "content": "<p>Oh, nice</p>",
        "id": 161092055,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552940030
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> since you're answering questions... I'm doing some exploratory coding trying to reuse the <code>cmt_</code> machinery to track paths to accesses. one issue is that, when there's indexing, you get a <code>Categorization::Rvalue</code> that you can't look past (so that e.g. you can tell that when you have <code>foo.bar[x].quux</code>, the capture path is <code>foo.bar</code>. I'm looking into extending the <code>Rvalue</code> to record the \"base\" <code>cmt_</code>, not sure if that's the best approach?</p>",
        "id": 161461243,
        "sender_full_name": "ange",
        "timestamp": 1553270987
    },
    {
        "content": "<p>hmm</p>",
        "id": 161461322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553271009
    },
    {
        "content": "<p>I think you only get cat-rvalue <em>some</em> of the time</p>",
        "id": 161461340,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553271026
    },
    {
        "content": "<p>specifically, when there is an <code>Index</code> impl</p>",
        "id": 161461349,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553271033
    },
    {
        "content": "<p>do you also get it for indexing into a slice?</p>",
        "id": 161461358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553271042
    },
    {
        "content": "<p>fair enough, only tried with vecs so far</p>",
        "id": 161461367,
        "sender_full_name": "ange",
        "timestamp": 1553271050
    },
    {
        "content": "<p>put another way, we may not want to or be able to do better than that</p>",
        "id": 161461370,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553271052
    },
    {
        "content": "<p>I actually sort of forget what the RFC said here</p>",
        "id": 161461385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553271062
    },
    {
        "content": "<p>but there is this question of when the code in the <code>Deref</code> or <code>Index</code> impl executes</p>",
        "id": 161461423,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553271086
    },
    {
        "content": "<p>at closure creation time -- or at closure execution time</p>",
        "id": 161461434,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553271098
    },
    {
        "content": "<p>actually, <em>indexing in particular</em> is tricky here</p>",
        "id": 161461438,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553271104
    },
    {
        "content": "<p>AFAIU, the RFC defines a minimal capture like I described, i.e. can't look past indexing, but still can determine something more accurate than <code>foo</code> in the above example</p>",
        "id": 161461443,
        "sender_full_name": "ange",
        "timestamp": 1553271107
    },
    {
        "content": "<p>like, maybe the index doesn't exist yet :)</p>",
        "id": 161461447,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553271111
    },
    {
        "content": "<p>I see, I see, I didn't read closely enough</p>",
        "id": 161461500,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553271125
    },
    {
        "content": "<p>we may want to make a second path, similar to the one that builds cmts</p>",
        "id": 161461543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553271162
    },
    {
        "content": "<p>sure, the issue here isn't about the indexing, I'm asking about the implementation for determining the path up to (but not including) the indexing</p>",
        "id": 161461548,
        "sender_full_name": "ange",
        "timestamp": 1553271171
    },
    {
        "content": "<p>but taht does seem mildly unfortunate</p>",
        "id": 161461554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553271173
    },
    {
        "content": "<p>yes, I understand better now</p>",
        "id": 161461579,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553271189
    },
    {
        "content": "<p>the problem is that the cmt is really oriented around the <em>final value</em></p>",
        "id": 161461585,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553271195
    },
    {
        "content": "<p>and what we need is more like \"start from the beginning and work your way there\"</p>",
        "id": 161461590,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553271203
    },
    {
        "content": "<p>yah</p>",
        "id": 161461598,
        "sender_full_name": "ange",
        "timestamp": 1553271209
    },
    {
        "content": "<p>I'd have to look into the code</p>",
        "id": 161461623,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553271228
    },
    {
        "content": "<p>a bit more clsoely</p>",
        "id": 161461632,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553271231
    },
    {
        "content": "<p>that said, I'm trying to figure out if it would be simple enough to extend the <code>cmt_</code> to build up a chain in all cases we need</p>",
        "id": 161461636,
        "sender_full_name": "ange",
        "timestamp": 1553271235
    },
    {
        "content": "<p>one option is, yes, to extend the cmt</p>",
        "id": 161461664,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553271243
    },
    {
        "content": "<p>the other would be to include enough info that we can re-create the cmt for the indexed path</p>",
        "id": 161461706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553271253
    },
    {
        "content": "<p>no worries, hope I'll have a better understanding of the issues till tuesday</p>",
        "id": 161461707,
        "sender_full_name": "ange",
        "timestamp": 1553271253
    },
    {
        "content": "<p>there is a slightly larger bit of context</p>",
        "id": 161461717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553271263
    },
    {
        "content": "<p>in a side-table?</p>",
        "id": 161461725,
        "sender_full_name": "ange",
        "timestamp": 1553271269
    },
    {
        "content": "<p>which is that, as the AST-based borrow check goes away,</p>",
        "id": 161461730,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553271273
    },
    {
        "content": "<p>we should be able to refactor the mem-categorization code heavily</p>",
        "id": 161461746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553271287
    },
    {
        "content": "<p>unfortuantely it still has other uses</p>",
        "id": 161461754,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553271292
    },
    {
        "content": "<p>but basically I think it's due for a bit of a revamp</p>",
        "id": 161461760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553271298
    },
    {
        "content": "<p>it will (afaik) only be used at that point to do upvar-capture-related computation</p>",
        "id": 161461802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553271315
    },
    {
        "content": "<p>so we might want to just think about rewriting it</p>",
        "id": 161461807,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553271319
    },
    {
        "content": "<p>to be cleaner and to have these new goals in mind</p>",
        "id": 161461826,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553271330
    },
    {
        "content": "<p>and then the old mem-cat code can hang around and get \"garbage collected\" when the AST-based borrowck goes away</p>",
        "id": 161461853,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553271347
    },
    {
        "content": "<p>fair; not sure I grasp enough of the big picture yet to decide on whether this should be done as part of this implementation effort</p>",
        "id": 161461859,
        "sender_full_name": "ange",
        "timestamp": 1553271350
    },
    {
        "content": "<p>but I'd want to check on whether there are other uses first, I may be forgetting something</p>",
        "id": 161461871,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553271359
    },
    {
        "content": "<p>at least one thing I can think of relates to generators</p>",
        "id": 161461926,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553271366
    },
    {
        "content": "<p>(which is similar-<em>ish</em> to the upvar capture problem)</p>",
        "id": 161461945,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553271380
    },
    {
        "content": "<p>Notes on reusing <code>mem_categorization.rs</code> for this:<br>\n- recording the \"previous\" <code>cmt_</code> in the <code>Rvalue</code> seems to work in principle (when eyeballing the results; I'm sure there would be plenty of bugs to be found on closer examination)<br>\n- a rudimentary sanity check of \"did we record at least one path for each key in <code>upvar_capture_map</code>\" doesn't trigger when building the compiler and going through the ui test suite. unfortunately can't go any further than that, as I based this exploration on the <code>upvar-tuple</code> branch, so there's some undiagnosed failures there</p>\n<p>Another implementation issue lies around the corner: AFAIU, we need to track the minimal necessary access type per <code>(upvar, path) </code> (for this exploratory coding side-quest, I just separately stored the observed paths for each <code>UpvarId</code>). This would mean sticking the paths in <code>UpvarId</code>. <code>UpvarId</code>, however, needs to be <code>Copy</code> for a bunch of reasons, and the paths are dynamic both in number and in length.</p>\n<p>What's more, if each <code>UpvarId</code> now contains a path (a path is currently a <code>Vec</code> of the provisionally named <code>CapturePathComponent</code>s), that'll probably require non-trivial modifications at every use site, roughly: (1) <code>expr_use_visitor..walk_captures</code> (2) <code>mem_categorization...cat_upvar</code> (3) hair conversion</p>",
        "id": 161598769,
        "sender_full_name": "ange",
        "timestamp": 1553464725
    },
    {
        "content": "<p>I should add that I'm going to have effectively zero time after May 1st, so I'm interested in making quick progress in this, if we can decide on the most promising implementation strategy (e.g. I'm open to trying my hand at a rewrite/fork of <code>cmt_</code> to narrow its scope)</p>",
        "id": 161598859,
        "sender_full_name": "ange",
        "timestamp": 1553464837
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127677\">@ange</span>  I am extremely sorry I have been distracted with travel and now something in day to day.</p>",
        "id": 161726512,
        "sender_full_name": "blitzerr",
        "timestamp": 1553569725
    },
    {
        "content": "<p>If it is okay with you, can you please share your branch and then describe your problem/ concerns / approaches or proposals in a paper doc?<br>\nSometimes it better to read through a concise doc rather than chat messages back and forth or I will try to read the chat to understand</p>",
        "id": 161726587,
        "sender_full_name": "blitzerr",
        "timestamp": 1553569805
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> no worries, I'm also on the road till thursday. I hope the comment above will be enough for today's discussion. started porting the exploratory code on top of latest master, but that's WIP that I won't have time to finish today</p>",
        "id": 161755851,
        "sender_full_name": "ange",
        "timestamp": 1553603106
    },
    {
        "content": "<p>started looking at the MIR side, to get some better understanding of how things fit together</p>",
        "id": 162087576,
        "sender_full_name": "ange",
        "timestamp": 1553897311
    },
    {
        "content": "<p>might inform implementation choices for how to record paths, etc</p>",
        "id": 162087591,
        "sender_full_name": "ange",
        "timestamp": 1553897338
    },
    {
        "content": "<p>FWIW, put up some notes on what I've been looking up <a href=\"https://paper.dropbox.com/doc/Upvar-Paths--Aa7C6aefXL6RNSXHuUu8jncVAg-PNRgk22ryKq1n3Wq3FXAO\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/Upvar-Paths--Aa7C6aefXL6RNSXHuUu8jncVAg-PNRgk22ryKq1n3Wq3FXAO\">here</a>. They refer to this <a href=\"https://github.com/aoikonomopoulos/rust/commits/throwaway-upvar-tuple\" target=\"_blank\" title=\"https://github.com/aoikonomopoulos/rust/commits/throwaway-upvar-tuple\">exploratory branch</a> cc <span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> <span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span>  <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>, in case anyone wants to take a look</p>",
        "id": 162854536,
        "sender_full_name": "ange",
        "timestamp": 1554757139
    }
]