[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> oh dear :) that .. I'm not sure if we should worry about that or not.</p>",
        "id": 254286931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632262776
    },
    {
        "content": "<p>let's break that out</p>",
        "id": 254286951,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632262791
    },
    {
        "content": "<p>Yea not this PR for sure</p>",
        "id": 254286986,
        "sender_full_name": "Aman Arora",
        "timestamp": 1632262802
    },
    {
        "content": "<p>Foo</p>",
        "id": 254287008,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632262806
    },
    {
        "content": "<p>Bar</p>",
        "id": 254287035,
        "sender_full_name": "Aman Arora",
        "timestamp": 1632262820
    },
    {
        "content": "<p>yeah so</p>",
        "id": 254287043,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632262827
    },
    {
        "content": "<p>the other point is that we <em>could</em> optimize cases like that</p>",
        "id": 254287058,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632262839
    },
    {
        "content": "<p>we could <em>also</em> sort the captures, right?</p>",
        "id": 254287074,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632262851
    },
    {
        "content": "<p>so that we capture in the order in which fields are declared in the struct?</p>",
        "id": 254287081,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632262861
    },
    {
        "content": "<p>I think I would prefer to do that</p>",
        "id": 254287088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632262865
    },
    {
        "content": "<p>that is, make the drop order match</p>",
        "id": 254287097,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632262871
    },
    {
        "content": "<p>Yea I think that should be doable</p>",
        "id": 254287211,
        "sender_full_name": "Aman Arora",
        "timestamp": 1632262924
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> do you think you'd have time to prep that PR?</p>",
        "id": 254297622,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632269968
    },
    {
        "content": "<p>I can potentially do it if necessary, time is of the essence here :)</p>",
        "id": 254297628,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632269975
    },
    {
        "content": "<p>Also, we should do a final sweep of the repo issues!</p>",
        "id": 254297644,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632269987
    },
    {
        "content": "<p>I've been a bit distracted but this is making me nervous :)</p>",
        "id": 254297658,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632269994
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> If you can take this that'd be great, don't think I'll be able to wrap this and the other one tonight</p>",
        "id": 254297731,
        "sender_full_name": "Aman Arora",
        "timestamp": 1632270035
    },
    {
        "content": "<p>k</p>",
        "id": 254297738,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632270045
    },
    {
        "content": "<p>Thank you</p>",
        "id": 254297751,
        "sender_full_name": "Aman Arora",
        "timestamp": 1632270059
    },
    {
        "content": "<p>If we have something like </p>\n<div class=\"codehilite\"><pre><span></span><code>let c = || {\n     let _ = &amp;a; // introduced by migration\n\n      use(b);\n\n       let _ = a; // just something that made us migrate\n}\n</code></pre></div>\n<p>Pre migration the closure was Closure(captures=(b, a)),</p>\n<p>post migration code was Closure(captures(a,b)).</p>\n<p>So post migration ignoring any disjoint capture, the drop order could change.</p>",
        "id": 254343736,
        "sender_full_name": "Aman Arora",
        "timestamp": 1632305274
    },
    {
        "content": "<p>I don't feel we really <em>defined</em> drop order with respect to things captured by a closure</p>",
        "id": 254379258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632321820
    },
    {
        "content": "<p>I'd be surprised if this comes up as a source of bugs</p>",
        "id": 254379294,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632321834
    },
    {
        "content": "<p>Ok</p>",
        "id": 254391810,
        "sender_full_name": "Aman Arora",
        "timestamp": 1632326507
    },
    {
        "content": "<p>so the drop order for closure fields is explicitly undefined:</p>\n<p><a href=\"https://rust-lang.github.io/rfcs/1857-stabilize-drop-order.html#allowed-unspecified-behavior\">https://rust-lang.github.io/rfcs/1857-stabilize-drop-order.html#allowed-unspecified-behavior</a></p>",
        "id": 254557723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632412042
    },
    {
        "content": "<p>Sounds good</p>",
        "id": 254570335,
        "sender_full_name": "Aman Arora",
        "timestamp": 1632417018
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> so I looked at this code with <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> this morning</p>",
        "id": 254577262,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632419858
    },
    {
        "content": "<p>If we <em>did</em> want to keep the drop order consistent, I think that what we would do is...</p>",
        "id": 254577295,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632419871
    },
    {
        "content": "<p>...sort the captures, first by the \"first use of the relevant variable\" and then secondarily by \"field order in the struct\"...</p>",
        "id": 254577379,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632419888
    },
    {
        "content": "<p>...at this point:</p>",
        "id": 254577405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632419898
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/15d9ba0133ce0b35348e1c8367afe00aec841ffa/compiler/rustc_typeck/src/check/upvar.rs?plain=1#L604\">https://github.com/rust-lang/rust/blob/15d9ba0133ce0b35348e1c8367afe00aec841ffa/compiler/rustc_typeck/src/check/upvar.rs?plain=1#L604</a></p>",
        "id": 254577493,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632419932
    },
    {
        "content": "<p>We use a Index map so the first part is dealt with and the second one is not bad, just need to write a comparator</p>",
        "id": 254577499,
        "sender_full_name": "Aman Arora",
        "timestamp": 1632419934
    },
    {
        "content": "<p>does that sound right?</p>",
        "id": 254577500,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632419935
    },
    {
        "content": "<p>ah, so we already sort by the base variable?</p>",
        "id": 254577537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632419947
    },
    {
        "content": "<p>I think so</p>",
        "id": 254577553,
        "sender_full_name": "Aman Arora",
        "timestamp": 1632419956
    },
    {
        "content": "<p>And yes that's where want to sort</p>",
        "id": 254577675,
        "sender_full_name": "Aman Arora",
        "timestamp": 1632420002
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/15d9ba0133ce0b35348e1c8367afe00aec841ffa/compiler/rustc_middle/src/ty/closure.rs?plain=1#L84-L95\">relevant type definitions</a></p>",
        "id": 254577820,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632420029
    },
    {
        "content": "<p>so you're saying the <code>RootVariableMinCaptureList</code> is already ordered by \"order of appearance\", ok, that helps</p>",
        "id": 254577890,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632420050
    },
    {
        "content": "<p>Yes</p>",
        "id": 254577941,
        "sender_full_name": "Aman Arora",
        "timestamp": 1632420070
    },
    {
        "content": "<p>And the intermediate map where we collect information during expr use visitor is also index map so we are guaranteed  correct order</p>",
        "id": 254578123,
        "sender_full_name": "Aman Arora",
        "timestamp": 1632420134
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/VBepcQjSRSchR3cddc2DEbE2/Screenshot_20210923-110131.png\">Screenshot_20210923-110131.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/VBepcQjSRSchR3cddc2DEbE2/Screenshot_20210923-110131.png\" title=\"Screenshot_20210923-110131.png\"><img src=\"/user_uploads/4715/VBepcQjSRSchR3cddc2DEbE2/Screenshot_20210923-110131.png\"></a></div>",
        "id": 254578148,
        "sender_full_name": "Aman Arora",
        "timestamp": 1632420148
    },
    {
        "content": "<p>InferredCaptureMap</p>",
        "id": 254578190,
        "sender_full_name": "Aman Arora",
        "timestamp": 1632420165
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> I'm going to poke at this some more</p>",
        "id": 254587598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632423906
    },
    {
        "content": "<p>I think I have a good picture for what needs to be done and sometime tonight, if you want me to finish it</p>",
        "id": 254587696,
        "sender_full_name": "Aman Arora",
        "timestamp": 1632423950
    },
    {
        "content": "<p>I'm playing around with some test cases to make sure I understand what I'm doing before I write any code but I think I'm almost there.</p>",
        "id": 254587791,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632423975
    },
    {
        "content": "<p>Here is the simplest example: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=7ede536d4f60239ed61335c2ea241c59\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=7ede536d4f60239ed61335c2ea241c59</a></p>\n<p>Changing b/w edition 2018 and 2015 will change the output</p>",
        "id": 254587958,
        "sender_full_name": "Aman Arora",
        "timestamp": 1632424059
    },
    {
        "content": "<p>Hmm, I'm happy for one of you two to write the PR :)</p>",
        "id": 254588514,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632424271
    },
    {
        "content": "<p>Some notes that are in my head that might be helpful:</p>\n<ul>\n<li>We need tto iterate over the (variable, captured_places_vec) in the min capture map</li>\n<li>On the vector call sort with the following compartor:<br>\n    - Iterate while place1.projections[i] == place2.projections[i] (note that at any point if the set of projections applied is same for both places, assuming same root variable the type after projections are applied will be the same and hence the type of projection applied after will also be the same)<br>\n    - If it's a Deref projection then both must be deref projections and hence same<br>\n    - So really we have disparity  it must be a field projection<br>\n    - return ordering mased on field index</li>\n</ul>",
        "id": 254588571,
        "sender_full_name": "Aman Arora",
        "timestamp": 1632424299
    },
    {
        "content": "<p>I think you can probably use <code>sort_by_key</code> and just return <code>&amp;p.projections</code></p>",
        "id": 254588674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632424337
    },
    {
        "content": "<p>Can it compare vectors <span aria-label=\"open mouth\" class=\"emoji emoji-1f62e\" role=\"img\" title=\"open mouth\">:open_mouth:</span></p>",
        "id": 254588719,
        "sender_full_name": "Aman Arora",
        "timestamp": 1632424368
    },
    {
        "content": "<p>If so then that would work</p>",
        "id": 254588742,
        "sender_full_name": "Aman Arora",
        "timestamp": 1632424383
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/drop.20order.2C.20use.20order.20rust-lang.2Fproject-rfc-2229.2342/near/254588674\">said</a>:</p>\n<blockquote>\n<p>I think you can probably use <code>sort_by_key</code> and just return <code>&amp;p.projections</code></p>\n</blockquote>\n<p>Unless I'm misunderstanding what you're saying, that's conceptually what we want but <code>Projection</code> doesn't impl <code>Ord</code>.</p>",
        "id": 254589843,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632424872
    },
    {
        "content": "<p>I think I have it working.</p>",
        "id": 254593048,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632426144
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/XNBCJ6Fu67U86gsZIe0Jr1uw/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/XNBCJ6Fu67U86gsZIe0Jr1uw/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/XNBCJ6Fu67U86gsZIe0Jr1uw/image.png\"></a></div><p>teh good codez</p>",
        "id": 254593098,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632426168
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/EVRYfVRoFNmxtk-HLtLavxri/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/EVRYfVRoFNmxtk-HLtLavxri/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/EVRYfVRoFNmxtk-HLtLavxri/image.png\"></a></div>",
        "id": 254593197,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632426203
    },
    {
        "content": "<p>Shouldn't deref, deref return Ordering::Equal</p>",
        "id": 254593716,
        "sender_full_name": "Aman Arora",
        "timestamp": 1632426428
    },
    {
        "content": "<p>Acutally that seems not correct</p>",
        "id": 254593872,
        "sender_full_name": "Aman Arora",
        "timestamp": 1632426493
    },
    {
        "content": "<p>We should never be comparing Deref to anything but a Deref. </p>\n<p>At any point when we are comparing a two projections, they must be of the same kind. </p>\n<p>Because we would be comparing those only if the projections applied to the root variable before it are all the same. Making the type of the place with projections applied same for both of them.</p>",
        "id": 254593892,
        "sender_full_name": "Aman Arora",
        "timestamp": 1632426504
    },
    {
        "content": "<p>If we have field indexes that are equal we want to continue instead of return ord.cmp() because that will return ordering::Equal</p>",
        "id": 254593995,
        "sender_full_name": "Aman Arora",
        "timestamp": 1632426553
    },
    {
        "content": "<blockquote>\n<p>At any point when we are comparing a two projections, they must be of the same kind.</p>\n</blockquote>\n<p>Ah, ok. That makes this quite a bit easier then.</p>",
        "id": 254594397,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632426743
    },
    {
        "content": "<p>Are <code>Deref</code> and <code>Field</code> the only <code>ProjectionKind</code>s we need to handle? I'm trying to write a test case that triggers <code>Index</code> and <code>Subslice</code> but it looks like we just capture the whole local instead of <code>local[0]</code> or whatever. Perhaps I'm just not being creative enough <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 254596035,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632427456
    },
    {
        "content": "<p>Yes we only care about those two</p>",
        "id": 254596075,
        "sender_full_name": "Aman Arora",
        "timestamp": 1632427472
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 254596101,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632427485
    },
    {
        "content": "<p>Borrow checker doesn't allow precision over index/slices so we just truncate them here as well</p>",
        "id": 254596124,
        "sender_full_name": "Aman Arora",
        "timestamp": 1632427497
    },
    {
        "content": "<p>Ah, makes sense. This is not a part of the compiler I'm super familiar with.</p>",
        "id": 254596373,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632427588
    },
    {
        "content": "<p>Let me know if you have any other questions</p>",
        "id": 254597051,
        "sender_full_name": "Aman Arora",
        "timestamp": 1632427908
    },
    {
        "content": "<p>Will do. Thanks so much!! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 254597456,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632428066
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/89208\">https://github.com/rust-lang/rust/pull/89208</a></p>",
        "id": 254612578,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632434584
    },
    {
        "content": "<p>Left some comments <br>\n<span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/drop.20order.2C.20use.20order.20rust-lang.2Fproject-rfc-2229.2342/near/254612578\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/pull/89208\">https://github.com/rust-lang/rust/pull/89208</a></p>\n</blockquote>\n<p>left some minor comments</p>",
        "id": 254614521,
        "sender_full_name": "Aman Arora",
        "timestamp": 1632435554
    },
    {
        "content": "<p>Looks good otherwise <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 254614674,
        "sender_full_name": "Aman Arora",
        "timestamp": 1632435633
    }
]