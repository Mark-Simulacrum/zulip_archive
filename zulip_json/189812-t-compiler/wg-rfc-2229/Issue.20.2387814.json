[
    {
        "content": "<p>I took a look at issue <a href=\"https://github.com/rust-lang/rust/issues/87814\">https://github.com/rust-lang/rust/issues/87814</a> and I think the underlying issue may not be a result of our changes for RFC2229, but instead something to do with using `as Result&lt;(),_&gt;. I have a <a href=\"https://github.com/rust-lang/rust/issues/87814#issuecomment-894487391\">comment here</a> summarizing my thought process.<br>\nAny thoughts? <span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 248661059,
        "sender_full_name": "rocksand",
        "timestamp": 1628280027
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307184\">@rocksand</span> I looked into it a bit. It seems that when using <code>as Result</code>, the typeck result of <code>subpat</code>(the _ in <code>Error(_)</code>) is a type var which makes <code>resolve_type_vars_or_error</code> return <code>Err</code>. But if <code>as Result</code> is removed, the typeck result of <code>subpat</code> is <code>()</code> rather than <code>_</code>, then it works fine. Is this expected? Or it's a bug in the type var resolving?</p>",
        "id": 248821681,
        "sender_full_name": "Donough Liu",
        "timestamp": 1628500434
    },
    {
        "content": "<p>I am not very familiar with this part of the code, so I am not sure</p>",
        "id": 248926710,
        "sender_full_name": "rocksand",
        "timestamp": 1628555489
    },
    {
        "content": "<p>I'm reading here</p>",
        "id": 249736256,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629214506
    },
    {
        "content": "<p>Hmm</p>",
        "id": 249736493,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629214610
    },
    {
        "content": "<p>The problem might be the ordering of when cast results are compared versus upvar inference</p>",
        "id": 249736517,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629214622
    },
    {
        "content": "<p>also maybe unrelated but when MIR is generated but is MIR for <code>let x: T = &lt;expr&gt;</code> and <code>&lt;expr&gt; as T</code> similar? i.e. do they both count as type ascription?</p>",
        "id": 249736760,
        "sender_full_name": "Aman Arora",
        "timestamp": 1629214719
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 249737955,
        "sender_full_name": "Aman Arora",
        "timestamp": 1629215240
    },
    {
        "content": "<p>neither is type ascription, but they do behave pretty similarly</p>",
        "id": 249740109,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629216157
    },
    {
        "content": "<p>Okay, thanks</p>",
        "id": 249740459,
        "sender_full_name": "Aman Arora",
        "timestamp": 1629216302
    },
    {
        "content": "<p>What's considered type ascription?</p>",
        "id": 249740519,
        "sender_full_name": "Aman Arora",
        "timestamp": 1629216325
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281950\">@Aman Arora</span> type ascription usually just means expressions of the form <code>e: T</code></p>",
        "id": 249773516,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629231561
    },
    {
        "content": "<p>which are an unstable feature</p>",
        "id": 249773521,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629231565
    },
    {
        "content": "<p>Ah I see, thanks</p>",
        "id": 249773534,
        "sender_full_name": "Aman Arora",
        "timestamp": 1629231574
    },
    {
        "content": "<p>By ordering, you mean the ordering of the checks in cat_pattern?</p>",
        "id": 249782467,
        "sender_full_name": "rocksand",
        "timestamp": 1629236292
    },
    {
        "content": "<p>I think my hypothesis about ordering was wrong</p>",
        "id": 249782564,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629236371
    },
    {
        "content": "<p>I started reading into the code and it didn't seem to line up</p>",
        "id": 249782574,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629236383
    },
    {
        "content": "<p>I didn't get far eough to decide if I like that PR or not yet though</p>",
        "id": 249782584,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629236390
    },
    {
        "content": "<p>Ok, is my assumption correct though?Â´cat_patternâ€™ should only fail if we expect a failure to arise somewhere else in the code? Because if that is correct either the input to â€˜cat_patternâ€™ is wrong or the checks done inside the method are wrongâ€¦ ðŸ¤”</p>",
        "id": 249783047,
        "sender_full_name": "rocksand",
        "timestamp": 1629236701
    },
    {
        "content": "<p>Yes, your assumption is I believe correct</p>",
        "id": 249783768,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629237180
    },
    {
        "content": "<p>which is why I'm not sure about that PR</p>",
        "id": 249783779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629237186
    },
    {
        "content": "<p>I think the early exit can be split into another PR that uses a different interface for the caller to say \"early exit\"</p>",
        "id": 249783937,
        "sender_full_name": "Aman Arora",
        "timestamp": 1629237261
    },
    {
        "content": "<p>Returning result from the callback conflicts with the result from actually processing the patterns</p>",
        "id": 249784038,
        "sender_full_name": "Aman Arora",
        "timestamp": 1629237351
    },
    {
        "content": "<p>So I think I have an idea why <a href=\"https://github.com/rust-lang/rust/issues/87814\">#87814</a> and <a href=\"https://github.com/rust-lang/rust/issues/88118\">#88118</a> </p>\n<p>We don't handle <code>ExprKind::Cast</code> properly <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_typeck/src/mem_categorization.rs#L364\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_typeck/src/mem_categorization.rs#L364</a></p>",
        "id": 249932839,
        "sender_full_name": "Aman Arora",
        "timestamp": 1629338269
    },
    {
        "content": "<p><code>cat_rvalue</code> really is a dummy place that says Rvalue that came from this expr</p>",
        "id": 249932901,
        "sender_full_name": "Aman Arora",
        "timestamp": 1629338329
    },
    {
        "content": "<p>Well more like Rvalue with diagnostics from this expr</p>",
        "id": 249932930,
        "sender_full_name": "Aman Arora",
        "timestamp": 1629338381
    },
    {
        "content": "<p>nvm it is handled here: <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_typeck/src/expr_use_visitor.rs#L398-L400\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_typeck/src/expr_use_visitor.rs#L398-L400</a></p>",
        "id": 249933442,
        "sender_full_name": "Aman Arora",
        "timestamp": 1629338846
    },
    {
        "content": "<p>Is there any reason against just removing the <code>ty.is_ty_var()</code> from <a href=\"https://github.com/rust-lang/rust/blame/master/compiler/rustc_typeck/src/mem_categorization.rs#L146\">here</a> or attempting to work around that check in cat_pattern?</p>",
        "id": 250109162,
        "sender_full_name": "rocksand",
        "timestamp": 1629461222
    },
    {
        "content": "<p>Removing that check would mean we'd try construct a place without knowing it's type</p>",
        "id": 250143238,
        "sender_full_name": "Aman Arora",
        "timestamp": 1629478258
    },
    {
        "content": "<p>Hmm actually not sure if that's really an issue because write back will resolve the types</p>",
        "id": 250143328,
        "sender_full_name": "Aman Arora",
        "timestamp": 1629478302
    },
    {
        "content": "<p>That said it feels like we should've resolved most of the types by the time we get to closure analysis since it's like at the very end of typechk</p>",
        "id": 250143419,
        "sender_full_name": "Aman Arora",
        "timestamp": 1629478334
    },
    {
        "content": "<p>Also missing/uninferred type errors can also come in other parts of the code: <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_typeck/src/expr_use_visitor.rs#L398-L400\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_typeck/src/expr_use_visitor.rs#L398-L400</a></p>",
        "id": 250143525,
        "sender_full_name": "Aman Arora",
        "timestamp": 1629478388
    },
    {
        "content": "<p>So we'd need to figure out a better way of handling these</p>",
        "id": 250143542,
        "sender_full_name": "Aman Arora",
        "timestamp": 1629478400
    },
    {
        "content": "<p>We do actually get the type regardless of the check. It knows that the type is Wild</p>",
        "id": 250146965,
        "sender_full_name": "rocksand",
        "timestamp": 1629480153
    },
    {
        "content": "<p>Maybe there should be somethjng along the line that we donâ€™t care whether itâ€™s a var or not as long at the type is Wildâ€¦. ðŸ¤”</p>",
        "id": 250147029,
        "sender_full_name": "rocksand",
        "timestamp": 1629480193
    },
    {
        "content": "<p>Okay, the early exit change is reverted.</p>",
        "id": 250229567,
        "sender_full_name": "Donough Liu",
        "timestamp": 1629568764
    },
    {
        "content": "<p>I don't like the PR either. But currently, this is the only solution I can do with my knowledge of rustc's code base.</p>",
        "id": 250230412,
        "sender_full_name": "Donough Liu",
        "timestamp": 1629570001
    },
    {
        "content": "<p>This is problem would be solved (I guess) in another way by hinting the type inference context that the <code>_</code> in <code>Err(()) as Result&lt;(), _&gt;</code> actually has a type <code>()</code> during type coercion.</p>",
        "id": 250230550,
        "sender_full_name": "Donough Liu",
        "timestamp": 1629570128
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"294318\">@Donough Liu</span> reverted where?</p>",
        "id": 250370209,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629733600
    },
    {
        "content": "<p>Reverted a commit on an open PR: <a href=\"https://github.com/rust-lang/rust/pull/87879\">https://github.com/rust-lang/rust/pull/87879</a></p>",
        "id": 250371898,
        "sender_full_name": "Donough Liu",
        "timestamp": 1629734379
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 250372004,
        "sender_full_name": "Donough Liu",
        "timestamp": 1629734406
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"294318\">@Donough Liu</span> ok! I was just going to look into that PR in more detail</p>",
        "id": 250377452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629736862
    },
    {
        "content": "<p>I think what's bothering me a bit is \"why did typeck fail\"??</p>",
        "id": 250377488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629736883
    },
    {
        "content": "<p>I tried pushing closure analysis to even further below in typechk (after regionchk -- which is incorrect) but still we didn't resolve the types</p>",
        "id": 250377648,
        "sender_full_name": "Aman Arora",
        "timestamp": 1629736944
    },
    {
        "content": "<p>I'm going to dig in a bit right now</p>",
        "id": 250377735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629736984
    },
    {
        "content": "<p>The issue is the same with <a href=\"https://github.com/rust-lang/rust/issues/88118\">#88118</a> where we fail to resolve the type of the function param</p>",
        "id": 250377764,
        "sender_full_name": "Aman Arora",
        "timestamp": 1629736994
    },
    {
        "content": "<p>As a sanity check I tried using rust builds from earlier this year to see if something changed outside of 2229, but that didn't help</p>",
        "id": 250377911,
        "sender_full_name": "Aman Arora",
        "timestamp": 1629737060
    },
    {
        "content": "<p>OK</p>",
        "id": 250377980,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629737102
    },
    {
        "content": "<p>I was wondering what was wrong with <a href=\"https://github.com/rust-lang/rust/issues/88118\">#88118</a>, good to know that they seem similar</p>",
        "id": 250378015,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629737112
    },
    {
        "content": "<p>I think the reason <a href=\"https://github.com/rust-lang/rust/issues/87814\">#87814</a> fails is that the coercion result of <code>Err(()) as Result&lt;(), _&gt;</code> is <code>Result&lt;(), _&gt;</code> rather than <code>Result&lt;(), ()&gt;</code>, which makes type var resolving failed. The commit that introduces the regression just propagates the error rather than silently ignores it. The code uses <code>cat_pattern</code> before this commit just swallows the error and continue.</p>",
        "id": 250388011,
        "sender_full_name": "Donough Liu",
        "timestamp": 1629741628
    },
    {
        "content": "<p><code>Result&lt;(), _&gt;</code> is valid because the only part of type information missing from <code>Err(())</code> is the type of the <code>Ok</code> case.</p>\n<p>We can see that it works as expected: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=d721faa40b5216614fec41ef78a3c970\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=d721faa40b5216614fec41ef78a3c970</a></p>",
        "id": 250388631,
        "sender_full_name": "Aman Arora",
        "timestamp": 1629741942
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281950\">Aman Arora</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/Issue.20.2387814/near/250388631\">said</a>:</p>\n<blockquote>\n<p><code>Result&lt;(), _&gt;</code> is valid because the only part of type information missing from <code>Err(())</code> is the type of the <code>Ok</code> case.</p>\n<p>We can see that it works as expected: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=d721faa40b5216614fec41ef78a3c970\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=d721faa40b5216614fec41ef78a3c970</a></p>\n</blockquote>\n<p>It's valid. But at the stage of calling <code>cat_pattern</code>, I just cannot resolve the <code>_</code> to <code>()</code>.</p>",
        "id": 250389004,
        "sender_full_name": "Donough Liu",
        "timestamp": 1629742124
    },
    {
        "content": "<p>At least I didn't find a way to do this.</p>",
        "id": 250389118,
        "sender_full_name": "Donough Liu",
        "timestamp": 1629742197
    },
    {
        "content": "<p>And I guess the issue <a href=\"https://github.com/rust-lang/rust/issues/88118\">#88118</a> is also the same. <span aria-label=\"mask\" class=\"emoji emoji-1f637\" role=\"img\" title=\"mask\">:mask:</span></p>",
        "id": 250389297,
        "sender_full_name": "Donough Liu",
        "timestamp": 1629742275
    },
    {
        "content": "<p>I'm still investigating</p>",
        "id": 250392765,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629743634
    },
    {
        "content": "<p>I don't quite get what's going on yet</p>",
        "id": 250392772,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629743638
    },
    {
        "content": "<p>I see most of the links, but it seems like there's enough type information</p>",
        "id": 250392830,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629743649
    },
    {
        "content": "<p>I'm not sure how <a href=\"https://github.com/rust-lang/rust/issues/88118\">#88118</a> is related yet</p>",
        "id": 250392864,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629743663
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/189812-t-compiler.2Fwg-rfc-2229/topic/Issue.20.2387814/near/250392864\">said</a>:</p>\n<blockquote>\n<p>I'm not sure how <a href=\"https://github.com/rust-lang/rust/issues/88118\">#88118</a> is related yet</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/blob/6aa9937a768bf13e5f7bd0ee6dd8579403b39058/compiler/rustc_typeck/src/expr_use_visitor.rs#L127\">https://github.com/rust-lang/rust/blob/6aa9937a768bf13e5f7bd0ee6dd8579403b39058/compiler/rustc_typeck/src/expr_use_visitor.rs#L127</a></p>\n<p>We get an Ty::Infer here and we end up exiting early instead of capturing <code>handler</code></p>",
        "id": 250394841,
        "sender_full_name": "Aman Arora",
        "timestamp": 1629744582
    },
    {
        "content": "<p>ok</p>",
        "id": 250395059,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629744670
    },
    {
        "content": "<p>I found the bug for <a href=\"https://github.com/rust-lang/rust/issues/87814\">#87814</a></p>",
        "id": 250395066,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629744676
    },
    {
        "content": "<p>let me see if <a href=\"https://github.com/rust-lang/rust/issues/88118\">#88118</a> is fixed too</p>",
        "id": 250395073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629744684
    },
    {
        "content": "<p>yes, it is</p>",
        "id": 250395127,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629744706
    },
    {
        "content": "<p>The problem is this:</p>",
        "id": 250395148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629744718
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/compiler/rustc_typeck/src/check/mod.rs b/compiler/rustc_typeck/src/check/mod.rs</span>\n<span class=\"gh\">index ad7e96e2833..ff6cb35a752 100644</span>\n<span class=\"gd\">--- a/compiler/rustc_typeck/src/check/mod.rs</span>\n<span class=\"gi\">+++ b/compiler/rustc_typeck/src/check/mod.rs</span>\n<span class=\"gu\">@@ -446,11 +446,12 @@ fn typeck_with_fallback&lt;'tcx&gt;(</span>\n             fcx\n         };\n\n<span class=\"gd\">-        fcx.type_inference_fallback();</span>\n<span class=\"gi\">+        let fallback_has_occurred = fcx.type_inference_fallback();</span>\n\n         // Even though coercion casts provide type hints, we check casts after fallback for\n         // backwards compatibility. This makes fallback a stronger type hint than a cast coercion.\n         fcx.check_casts();\n<span class=\"gi\">+        fcx.select_obligations_where_possible(fallback_has_occurred, |_| {});</span>\n\n         // Closure and generator analysis may run after fallback\n         // because they don't constrain other type variables.\n</code></pre></div>",
        "id": 250395229,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629744743
    },
    {
        "content": "<p>or rather, the fix</p>",
        "id": 250395233,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629744747
    },
    {
        "content": "<p>so what happens here is that the type checker has some internal state of \"stuff I need to prove at some point\" (which we call 'obligations')</p>",
        "id": 250395282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629744771
    },
    {
        "content": "<p>some of those are \"subtype obligations\", which have the form: T1 &lt;: T2</p>",
        "id": 250395300,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629744778
    },
    {
        "content": "<p>i.e., T1 is assignable to T2</p>",
        "id": 250395313,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629744783
    },
    {
        "content": "<p>in the case of this <strong>particular</strong> example</p>",
        "id": 250395333,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629744792
    },
    {
        "content": "<p>because of how coercion, subtyping, etc work</p>",
        "id": 250395346,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629744800
    },
    {
        "content": "<p>we would up where there was one crucial link in the form of a subtype obligation</p>",
        "id": 250395373,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629744812
    },
    {
        "content": "<p>Thank you so much for finding this!</p>",
        "id": 250395518,
        "sender_full_name": "Aman Arora",
        "timestamp": 1629744880
    },
    {
        "content": "<p>basically you had some variables like:</p>\n<ul>\n<li><code>Result&lt;_, ()&gt;</code> cast to <code>Result&lt;(), #15t&gt;</code> (which is a \"deferred cast\" that gets checked by <code>check_casts</code>)</li>\n<li><code>Result&lt;_, #15t&gt;</code> subtype of <code>Result&lt;(), #18t&gt;</code> (this obligation can be proven once <a href=\"https://github.com/rust-lang/rust/issues/15\">#15</a> is known to be <code>()</code>)</li>\n</ul>",
        "id": 250395529,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629744886
    },
    {
        "content": "<p>the <code>Result&lt;(), _#18t&gt;</code> is what the upvar code would see</p>",
        "id": 250395568,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629744902
    },
    {
        "content": "<p>so if we <em>just</em> did <code>check_casts</code></p>",
        "id": 250395584,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629744907
    },
    {
        "content": "<p>we set <code>_#15t</code> to <code>()</code> but we never processed that subtype obligation</p>",
        "id": 250395601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629744917
    },
    {
        "content": "<p>so <code>_#18t</code> remained unchanged</p>",
        "id": 250395609,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629744924
    },
    {
        "content": "<p>really, calling <code>check_casts</code> <em>after</em> type inference fallback is pretty bogus</p>",
        "id": 250395627,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629744937
    },
    {
        "content": "<p>we're not supposed to do any subtyping or other things after fallback</p>",
        "id": 250395649,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629744945
    },
    {
        "content": "<p>...but I don't want to change that now :)</p>",
        "id": 250395683,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629744961
    },
    {
        "content": "<p>and this fix seems fine</p>",
        "id": 250395704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629744964
    },
    {
        "content": "<p>I guess I'll open a PR</p>",
        "id": 250395732,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629744971
    },
    {
        "content": "<p>Thank you</p>",
        "id": 250395745,
        "sender_full_name": "Aman Arora",
        "timestamp": 1629744977
    },
    {
        "content": "<p>yeah that was a tricky one :)</p>",
        "id": 250395756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629744984
    },
    {
        "content": "<p>Thank you : <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 250395859,
        "sender_full_name": "rocksand",
        "timestamp": 1629745046
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/88266\">https://github.com/rust-lang/rust/pull/88266</a></p>",
        "id": 250398954,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629746417
    }
]