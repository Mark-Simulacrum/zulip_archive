[
    {
        "content": "<p>Am I right in thinking that there's no way to remove a line in a suggestion?<br>\ncc <span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span></p>",
        "id": 157040000,
        "sender_full_name": "davidtwco",
        "timestamp": 1548694996
    },
    {
        "content": "<p>You need a span that goes from the beginning on the line to be removed to the beginning of the next one, replacing with empty string</p>",
        "id": 157040230,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1548695174
    },
    {
        "content": "<p>I thought that might work, but I was struggling at a glance to figure out how to get that with the APIs on <code>SourceMap</code>?</p>",
        "id": 157040264,
        "sender_full_name": "davidtwco",
        "timestamp": 1548695206
    },
    {
        "content": "<p>That will do what you want but might get you in tricky span offset calculation waters</p>",
        "id": 157040266,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1548695206
    },
    {
        "content": "<p>What span do you available?</p>",
        "id": 157040286,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1548695235
    },
    {
        "content": "<p>*have</p>",
        "id": 157040291,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1548695242
    },
    {
        "content": "<p>I'm looking at <a href=\"https://github.com/rust-lang/rust/issues/52891\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52891\">#52891</a>. I've got the span for <code>issue_52891::a</code> in <code>use issue_52891::a;</code>.</p>",
        "id": 157040313,
        "sender_full_name": "davidtwco",
        "timestamp": 1548695275
    },
    {
        "content": "<p>I noticed that if I got a <code>SourceFile</code> for the <code>Span</code> then I could call <code>line_begin_pos</code>.</p>",
        "id": 157040380,
        "sender_full_name": "davidtwco",
        "timestamp": 1548695313
    },
    {
        "content": "<p>And I could get one of those from <code>lookup_byte_offset</code> using either of <code>.hi()</code> or <code>.lo()</code>.</p>",
        "id": 157040418,
        "sender_full_name": "davidtwco",
        "timestamp": 1548695347
    },
    {
        "content": "<p>Yep that's what I'd do</p>",
        "id": 157040437,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1548695379
    },
    {
        "content": "<p>There's a method to consume backwards until a certain condition is true</p>",
        "id": 157040449,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1548695399
    },
    {
        "content": "<p>Passed in as q closure</p>",
        "id": 157040498,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1548695405
    },
    {
        "content": "<p>I think it's used to get the <code>pub</code> span somewhere</p>",
        "id": 157040517,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1548695425
    },
    {
        "content": "<p>It's a hack</p>",
        "id": 157040520,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1548695427
    },
    {
        "content": "<p>But it works <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 157040523,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1548695435
    },
    {
        "content": "<p>I figured I'd be able to do something like that if it went forwards by looking for <code>\\n</code>.</p>",
        "id": 157040528,
        "sender_full_name": "davidtwco",
        "timestamp": 1548695445
    },
    {
        "content": "<p>or <code>EOF</code> I guess.</p>",
        "id": 157040536,
        "sender_full_name": "davidtwco",
        "timestamp": 1548695454
    },
    {
        "content": "<p>Or maybe I could take one <code>BytePos</code> away from the <code>line_begin_pos</code> of the next line. Might be a straight forward variation on <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/syntax_pos/lib.rs.html#1074-1077\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/syntax_pos/lib.rs.html#1074-1077\">the <code>line_begin_pos</code> function</a> but that may not work for reasons I'm not aware of.</p>",
        "id": 157040674,
        "sender_full_name": "davidtwco",
        "timestamp": 1548695578
    },
    {
        "content": "<p>If you try to remove from here to next <code>\\n</code>, the things to account for are multiline strings (they are evil) and <code>Eof</code></p>",
        "id": 157041437,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1548696245
    },
    {
        "content": "<p>also one could write</p>\n<div class=\"codehilite\"><pre><span></span>use\nfoo::bar:Baz\nas\nQux\n;\n</pre></div>\n\n\n<p>and you should be able to account for that :-/</p>",
        "id": 157041468,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1548696282
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> ^</p>",
        "id": 157041510,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1548696336
    },
    {
        "content": "<p>I expected that would be the <code>Span</code> of the <code>Item</code> that represents the use statement - but I've not been able to find a way to get at that from where this error is reported.</p>",
        "id": 157041599,
        "sender_full_name": "davidtwco",
        "timestamp": 1548696395
    },
    {
        "content": "<p>I think that the <code>Qux</code> in the example above is a Spanned Ident, so if present you should use that for the tentative end of it</p>",
        "id": 157041650,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1548696449
    },
    {
        "content": "<p>Also, I know there were prior PRs dealing with this were the <code>;</code> was sometimes included and sometimes not</p>",
        "id": 157041662,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1548696468
    },
    {
        "content": "<p>I think that (having an <code>Item</code>) would be necessary as well to distinguish between <code>use foo:{a, b};</code> and <code>use foo::a;</code></p>",
        "id": 157041664,
        "sender_full_name": "davidtwco",
        "timestamp": 1548696474
    },
    {
        "content": "<p>yep</p>",
        "id": 157041717,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1548696498
    },
    {
        "content": "<p>So I know what <code>Span</code> to suggest - the line (or multiple lines) or just the <code>binding_span</code> I have.</p>",
        "id": 157041720,
        "sender_full_name": "davidtwco",
        "timestamp": 1548696501
    },
    {
        "content": "<p>Makes sense</p>",
        "id": 157041733,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1548696524
    },
    {
        "content": "<p>I've not been able to find an example in that file of getting an <code>Item</code> from a <code>NodeId</code> - the <code>Resolver</code> doesn't really need to do that.</p>",
        "id": 157041753,
        "sender_full_name": "davidtwco",
        "timestamp": 1548696558
    }
]