[
    {
        "content": "<p>I keep forgetting to write this down so I'll take this stroll to do so.</p>",
        "id": 277553565,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1648936087
    },
    {
        "content": "<p>I think there's an opportunity to introduce a new attribute that acts like on_unimplemented but for type errors instead of traits.</p>",
        "id": 277553573,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1648936131
    },
    {
        "content": "<p>We have checks in rustc to convert some std types to others, but making an attribute lowers the barrier to entry to add new ones and makes things like \"call .chars()\" possible without touching the reporting code. What do people think?</p>",
        "id": 277553646,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1648936223
    },
    {
        "content": "<p>While at it, I was playing around with the idea of Perma unstable attribute for on_unimplemented, where the compilers only assurance is that it'll be present and not cause compile errors regardless of what's passed to it, and if used correctly it will affect the compiler output. Just realized that it could remain a compiler internal and have a blessed crate that provides those assurances.</p>",
        "id": 277553725,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1648936367
    },
    {
        "content": "<p>Between these two things, then we'd have a positive answer to <a href=\"https://users.rust-lang.org/t/rustc-output-filter-plugins/73741\">https://users.rust-lang.org/t/rustc-output-filter-plugins/73741</a></p>",
        "id": 277553744,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1648936393
    }
]