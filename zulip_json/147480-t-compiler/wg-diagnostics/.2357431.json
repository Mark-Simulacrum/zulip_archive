[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> let's use this thread to discuss</p>",
        "id": 161377137,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1553195457
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"214307\">@Saleem Jaffer</span></p>",
        "id": 161394665,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1553201582
    },
    {
        "content": "<p>sure</p>",
        "id": 161394679,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1553201586
    },
    {
        "content": "<p>as I told you, I've practically no time until march 31st</p>",
        "id": 161394699,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1553201603
    },
    {
        "content": "<p>anyway ...</p>",
        "id": 161394724,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1553201624
    },
    {
        "content": "<p>have you read the issue and understood it properly?</p>",
        "id": 161394735,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1553201636
    },
    {
        "content": "<p>do you have a test case?</p>",
        "id": 161394746,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1553201642
    },
    {
        "content": "<p>I think I had even some code on a branch here</p>",
        "id": 161394786,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1553201648
    },
    {
        "content": "<p>and a test too</p>",
        "id": 161394787,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1553201651
    },
    {
        "content": "<blockquote>\n<p>as I told you, I've practically no time until march 31st</p>\n</blockquote>\n<p>regardless of this, I'm going to try to help you solving this issue</p>",
        "id": 161394807,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1553201684
    },
    {
        "content": "<p>but unfortunately I may be very unresponsive</p>",
        "id": 161394814,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1553201694
    },
    {
        "content": "<blockquote>\n<p>have you read the issue and understood it properly?</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/issues/57431#issuecomment-475298180\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57431#issuecomment-475298180\">https://github.com/rust-lang/rust/issues/57431#issuecomment-475298180</a> is my understanding of the issue.</p>\n<blockquote>\n<p>do you have a test case?</p>\n</blockquote>\n<p>I have used a sample case in the above mentioned link.</p>\n<p>I am a rust noob, just fixed a couple of PRs  in the rust-lang repo. So I'm not really sure how to get started with this issue. But I'm willing to spend time to sort this one out. </p>\n<blockquote>\n<p>but unfortunately I may be very unresponsive</p>\n</blockquote>\n<p>We'll do our best :)</p>",
        "id": 161417400,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1553225956
    },
    {
        "content": "<p>I think librustc_mir/borrow_check/mutability_errors.rs is where I should be looking at?</p>",
        "id": 161432249,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1553246642
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> <a href=\"https://github.com/rust-lang/rust/issues/57431#issuecomment-477004455\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57431#issuecomment-477004455\">https://github.com/rust-lang/rust/issues/57431#issuecomment-477004455</a> This is as far as I have been able to fund. I can figure out hacky solutions to fix this for <code>&amp;mut mut</code>, but can't find a clean way. Any pointers as to what I should be doing?</p>",
        "id": 162393851,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1554260449
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/59699\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/59699\">https://github.com/rust-lang/rust/pull/59699</a></p>",
        "id": 162544793,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1554396681
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214307\">@Saleem Jaffer</span> I'm back</p>",
        "id": 162547700,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554398546
    },
    {
        "content": "<p>we need to improve the PR</p>",
        "id": 162547714,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554398557
    },
    {
        "content": "<p>let me give you some pointers ...</p>",
        "id": 162547720,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554398562
    },
    {
        "content": "<p>sorry for the long delay</p>",
        "id": 162547728,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554398570
    },
    {
        "content": "<p>I'm starting to come back again :)</p>",
        "id": 162547738,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554398575
    },
    {
        "content": "<p>so <span class=\"user-mention\" data-user-id=\"214307\">@Saleem Jaffer</span>, thanks for your work on this</p>",
        "id": 162558436,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554405155
    },
    {
        "content": "<p>and sorry for not being around</p>",
        "id": 162558441,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554405161
    },
    {
        "content": "<p>about the PR, we don't want to emit a help dialog and then search for the <code>&amp;mut</code> text to get rid of it :)</p>",
        "id": 162558483,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554405188
    },
    {
        "content": "<p>so from this code</p>",
        "id": 162558699,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554405339
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">X</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">mutate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">c</span>: <span class=\"kt\">bool</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">term</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ref_term</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">term</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"n\">X</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ref_term</span><span class=\"p\">.</span><span class=\"n\">mutate</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 162558704,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554405342
    },
    {
        "content": "<p>the then part of the expression <code>&amp;mut term</code> is coercing to a <code>&amp;*</code></p>",
        "id": 162558821,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554405397
    },
    {
        "content": "<p>so it can match the type of the else part <code>&amp;X</code></p>",
        "id": 162558970,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554405491
    },
    {
        "content": "<p>so our code thinks that you're holding an immutable borrow but the code aimed to be a mutable borrow</p>",
        "id": 162559042,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554405553
    },
    {
        "content": "<p>so it suggest to add mutability to something that is already mutable and that's the useless tip that the compiler is giving</p>",
        "id": 162559069,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554405574
    },
    {
        "content": "<p>so the idea is to track those autogenerated coercions and in the code you're changing that and not emit the help</p>",
        "id": 162559073,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554405576
    },
    {
        "content": "<p>maybe we can add a flag here <a href=\"https://github.com/rust-lang/rust/blob/52980d0fb39134a26f73b39b384407e010fc3af5/src/librustc_mir/hair/cx/expr.rs#L134-L139\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/52980d0fb39134a26f73b39b384407e010fc3af5/src/librustc_mir/hair/cx/expr.rs#L134-L139\">https://github.com/rust-lang/rust/blob/52980d0fb39134a26f73b39b384407e010fc3af5/src/librustc_mir/hair/cx/expr.rs#L134-L139</a></p>",
        "id": 162559552,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554405921
    },
    {
        "content": "<p>Should I change <code>rustc::mir::ExprKind::Borrow</code>  from:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">Borrow</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">borrow_kind</span>: <span class=\"nc\">BorrowKind</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">arg</span>: <span class=\"nc\">ExprRef</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>to </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">Borrow</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">borrow_kind</span>: <span class=\"nc\">BorrowKind</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">arg</span>: <span class=\"nc\">ExprRef</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">coerced_mut_immut</span>: <span class=\"nc\">Bool</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">},</span><span class=\"w\"></span>\n</pre></div>",
        "id": 162600444,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1554449580
    },
    {
        "content": "<p>yes, maybe use a <code>auto_gen: bool</code> field</p>",
        "id": 162627629,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554474248
    },
    {
        "content": "<p>The <code>auto-gen</code> has any special meaning? Or does it denote a coercion only?</p>",
        "id": 162628284,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1554474706
    },
    {
        "content": "<p>no no, was suggesting a name</p>",
        "id": 162628402,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554474765
    },
    {
        "content": "<p>or maybe just <code>coerced</code></p>",
        "id": 162628409,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554474771
    },
    {
        "content": "<p>Cool, I'll have to make the change to all the places where <code>ExprKind::Borrow</code> is created. Will get back to you if I am stuck.</p>",
        "id": 162628585,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1554474882
    },
    {
        "content": "<p>You may want to double-check whether the field belogs on <code>ExprKind::Borrow</code> itself, or if it should be attached to the <code>BorrowKind</code> variant(s). I haven't followed the conversation 100%; I just know that we have the <code>allow_two_phase</code> field on <code>BorrowKind::Mut</code>, and that is somewhat similar (in that it is meant to track where the borrow came from, in a somewhat abstract manner)</p>",
        "id": 162628817,
        "sender_full_name": "pnkfelix",
        "timestamp": 1554475066
    },
    {
        "content": "<p>also: are you sure you need to add the field? Why not just stop issuing the suggestion when the <code>borrow_kind</code> is already a <code>BorrowKind::Mut</code>?</p>",
        "id": 162628930,
        "sender_full_name": "pnkfelix",
        "timestamp": 1554475157
    },
    {
        "content": "<p>(just thinking out loud. There may be an obvious reason that doesn't work that I haven't noticed.)</p>",
        "id": 162628959,
        "sender_full_name": "pnkfelix",
        "timestamp": 1554475187
    },
    {
        "content": "<p>The <code>borrow_kind</code> turns out to be a <code>BorrowKind::Shared</code> in the case of a coercion from <code>&amp;mut term</code> to <code>&amp; term</code>. Maybe that's why we can't use it?</p>",
        "id": 162630238,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1554476114
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> exactly, the borrowkind is shared</p>",
        "id": 162630461,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554476266
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214307\">@Saleem Jaffer</span> play with that and check it out just in case because I kind of forgot about it :)</p>",
        "id": 162630503,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554476282
    },
    {
        "content": "<p>would be nice to be 100% sure about it</p>",
        "id": 162630537,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554476293
    },
    {
        "content": "<p>I was looking briefly into this ~ 2 months ago and I'm not 100% sure anymore</p>",
        "id": 162630553,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554476310
    },
    {
        "content": "<p>Hmm. I was assuming that the code was looking at whatever borrow corresponded to the <code>&amp;mut term</code>.</p>",
        "id": 162630763,
        "sender_full_name": "pnkfelix",
        "timestamp": 1554476450
    },
    {
        "content": "<p>But obviously its not looking at that. It might be good to double-check whether the thing corresponding to <code>&amp;mut term</code> is actually available for you to inspectr.</p>",
        "id": 162630816,
        "sender_full_name": "pnkfelix",
        "timestamp": 1554476495
    },
    {
        "content": "<p>(because we are clearly <em>somehow</em> tracking down <code>&amp;mut term</code>, somewhere, eventually, in order to generate the undesirable message...)</p>",
        "id": 162630913,
        "sender_full_name": "pnkfelix",
        "timestamp": 1554476545
    },
    {
        "content": "<p>but in any case, this does answer my question about why you aren't doing \"the obvious thing\"</p>",
        "id": 162630939,
        "sender_full_name": "pnkfelix",
        "timestamp": 1554476575
    },
    {
        "content": "<p>Isn't the problem of this that at mir level you really have an inmutable borrow?</p>",
        "id": 162631085,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554476676
    },
    {
        "content": "<p>because of the coercion</p>",
        "id": 162631099,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554476687
    },
    {
        "content": "<p>oh, maybe</p>",
        "id": 162631109,
        "sender_full_name": "pnkfelix",
        "timestamp": 1554476699
    },
    {
        "content": "<p>actually it gets the <code>&amp;mut</code> part in the suggestion from the code</p>",
        "id": 162631120,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554476704
    },
    {
        "content": "<p>ugh I forgot</p>",
        "id": 162631161,
        "sender_full_name": "pnkfelix",
        "timestamp": 1554476730
    },
    {
        "content": "<p><span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> <span aria-label=\"panda\" class=\"emoji emoji-1f43c\" role=\"img\" title=\"panda\">:panda:</span></p>",
        "id": 162631176,
        "sender_full_name": "pnkfelix",
        "timestamp": 1554476744
    },
    {
        "content": "<p>Yeah it does not know about <code>BorrowKind</code>, it just knows the span</p>",
        "id": 162631191,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1554476758
    },
    {
        "content": "<blockquote>\n<p>actually it gets the <code>&amp;mut</code> part in the suggestion from the code</p>\n</blockquote>\n<p>this is why if you do <code>&amp; /* something */ mut</code> you would get that into the suggestion :)</p>",
        "id": 162631195,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554476760
    },
    {
        "content": "<p>okay then. I'm still wary of plugging this into MIR, but I also do not have an immediate alternative suggestion</p>",
        "id": 162631316,
        "sender_full_name": "pnkfelix",
        "timestamp": 1554476833
    },
    {
        "content": "<p>In order to  figure out that it is a coercion I will have to look into <code>hir_expr</code> which is a <code>hir::Expr</code> because only that structure has original type.</p>",
        "id": 162635100,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1554479520
    },
    {
        "content": "<blockquote>\n<p>In order to  figure out that it is a coercion I will have to look into <code>hir_expr</code> which is a <code>hir::Expr</code> because only that structure has original type.</p>\n</blockquote>\n<p>won't the place I told you be enough? if not why?</p>",
        "id": 162639733,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554483291
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/52980d0fb39134a26f73b39b384407e010fc3af5/src/librustc_mir/hair/cx/expr.rs#L134-L139\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/52980d0fb39134a26f73b39b384407e010fc3af5/src/librustc_mir/hair/cx/expr.rs#L134-L139\">https://github.com/rust-lang/rust/blob/52980d0fb39134a26f73b39b384407e010fc3af5/src/librustc_mir/hair/cx/expr.rs#L134-L139</a></p>",
        "id": 162639749,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554483307
    },
    {
        "content": "<p>there you know that is an auto borrow</p>",
        "id": 162639776,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554483340
    },
    {
        "content": "<p>Does an <code>AutoBorrow</code> always imply a coercion from <code>&amp;mut</code>  to <code>&amp;*</code>?</p>",
        "id": 162656671,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1554495118
    },
    {
        "content": "<p>no, you'll have to check <code>m</code> and <code>expr.ty</code></p>",
        "id": 162657326,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1554495605
    },
    {
        "content": "<p>Or check the types later when the diagnostic is emitted</p>",
        "id": 162657373,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1554495631
    },
    {
        "content": "<p>In this case <code>m</code> is <code>Immutable</code> and <code>expr.ty</code> is <code>X</code> (struct name)</p>",
        "id": 162657555,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1554495787
    },
    {
        "content": "<p>So, <code>m</code> seems to the coerced type.</p>",
        "id": 162657666,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1554495852
    },
    {
        "content": "<p>OK, I think that you should just mark all auto borrows here and do the rest in the diagnostic. Getting the original reference type is enough hassle that I don't think that it should be in the HAIR lowering.</p>",
        "id": 162658964,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1554496852
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 162689552,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1554535970
    },
    {
        "content": "<p><a href=\"https://github.com/saleemjaffer/rust/blob/3752b3d3a56bf3eabb588b7d595cd1f8accc0286/src/librustc_mir/borrow_check/mod.rs#L1775-L1783\" target=\"_blank\" title=\"https://github.com/saleemjaffer/rust/blob/3752b3d3a56bf3eabb588b7d595cd1f8accc0286/src/librustc_mir/borrow_check/mod.rs#L1775-L1783\">https://github.com/saleemjaffer/rust/blob/3752b3d3a56bf3eabb588b7d595cd1f8accc0286/src/librustc_mir/borrow_check/mod.rs#L1775-L1783</a></p>\n<p>This is the function which calls <code>report_mutability_errors</code>, which then actually emits the help diagnostic.</p>\n<p>The function does not have access to <code>hair::Expr</code>which has the <code>ExprKind</code>. So I think we should be setting the <code>is_coerced</code> flag at a <code>rustc::mir::Borrowkind</code>.  <code>BorrowKind</code> can be either a <code>Shared</code>, <code>Shallow</code>, <code> Unique</code> or <code>Mut</code>.  I'm not really sure when <code>Shallow</code> and <code>Unique</code> are applicable. But for now I am changing <code>Shared</code> to a </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">Shared</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">is_coerced</span>: <span class=\"kt\">bool</span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Finally in </p>\n<div class=\"codehilite\"><pre><span></span>fn check_access_permissions(\n        &amp;mut self,\n        (place, span): (&amp;Place&lt;&#39;tcx&gt;, Span),\n        kind: ReadOrWrite,\n        is_local_mutation_allowed: LocalMutationIsAllowed,\n        flow_state: &amp;Flows&lt;&#39;cx, &#39;gcx, &#39;tcx&gt;,\n        location: Location,\n    ) -&gt; bool {\n</pre></div>\n\n\n<p>we can check if <code>kind</code> is a Borrow,  and check if <code>BorrowKind</code> has <code>is_coerced</code> set to true. If it is true we will not emit the help diagnostic.</p>\n<p>How does this sound?</p>",
        "id": 162689742,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1554536293
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> What do you think of the above idea?</p>",
        "id": 162808817,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1554723459
    },
    {
        "content": "<p>I am actually a bit confused. </p>\n<p><a href=\"https://github.com/rust-lang/rust/blob/3750348daff89741e3153e0e120aa70a45ff5b68/src/librustc_mir/borrow_check/mutability_errors.rs#L28-L35\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/3750348daff89741e3153e0e120aa70a45ff5b68/src/librustc_mir/borrow_check/mutability_errors.rs#L28-L35\">This</a> is the function which emits the error as well as the suggestion for <code>&amp;mut mut</code>.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">            </span><span class=\"n\">Place</span>::<span class=\"n\">Projection</span><span class=\"p\">(</span><span class=\"k\">box</span><span class=\"w\"> </span><span class=\"n\">Projection</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">base</span>: <span class=\"nc\">Place</span>::<span class=\"n\">Base</span><span class=\"p\">(</span><span class=\"n\">PlaceBase</span>::<span class=\"n\">Local</span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">elem</span>: <span class=\"nc\">ProjectionElem</span>::<span class=\"n\">Deref</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">mir</span><span class=\"p\">.</span><span class=\"n\">local_decls</span><span class=\"p\">[</span><span class=\"o\">*</span><span class=\"n\">local</span><span class=\"p\">].</span><span class=\"n\">is_user_variable</span><span class=\"p\">.</span><span class=\"n\">is_some</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">local_decl</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">mir</span><span class=\"p\">.</span><span class=\"n\">local_decls</span><span class=\"p\">[</span><span class=\"o\">*</span><span class=\"n\">local</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">dbg</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">local_decl</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">suggestion</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">local_decl</span><span class=\"p\">.</span><span class=\"n\">is_user_variable</span><span class=\"p\">.</span><span class=\"n\">as_ref</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">ClearCrossCrate</span>::<span class=\"n\">Set</span><span class=\"p\">(</span><span class=\"n\">mir</span>::<span class=\"n\">BindingForm</span>::<span class=\"n\">ImplicitSelf</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">suggest_ampmut_self</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">infcx</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">local_decl</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">                    </span><span class=\"n\">ClearCrossCrate</span>::<span class=\"n\">Set</span><span class=\"p\">(</span><span class=\"n\">mir</span>::<span class=\"n\">BindingForm</span>::<span class=\"n\">Var</span><span class=\"p\">(</span><span class=\"n\">mir</span>::<span class=\"n\">VarBindingForm</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">binding_mode</span>: <span class=\"nc\">ty</span>::<span class=\"n\">BindingMode</span>::<span class=\"n\">BindByValue</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">opt_ty_info</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">..</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}))</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">suggest_ampmut</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">infcx</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">mir</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"o\">*</span><span class=\"n\">local</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">local_decl</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"o\">*</span><span class=\"n\">opt_ty_info</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">)),</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p><code>suggest_ampmut</code> suggests the code to be changed as <code>&amp;mut mut term</code>. </p>\n<p>The only way I can think of fixing this is by changing  <code>binding_mode</code> in</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">ClearCrossCrate</span>::<span class=\"n\">Set</span><span class=\"p\">(</span><span class=\"n\">mir</span>::<span class=\"n\">BindingForm</span>::<span class=\"n\">Var</span><span class=\"p\">(</span><span class=\"n\">mir</span>::<span class=\"n\">VarBindingForm</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">binding_mode</span>: <span class=\"nc\">ty</span>::<span class=\"n\">BindingMode</span>::<span class=\"n\">BindByValue</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">opt_ty_info</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p><code>binding_mode</code> holds a <code>Mutability</code> defined in <code>hir::Mutability</code></p>\n<p>We were thinking of changing the <code>BorrowKind</code> in <code>mir</code>, but looks like we have to change <code>hir::Mutability</code>. </p>\n<p>Am I right?</p>",
        "id": 162815342,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1554729107
    },
    {
        "content": "<p>I guess we would need something like ....</p>",
        "id": 162819250,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554731960
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">BindingMode</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">BindByReference</span><span class=\"p\">(</span><span class=\"n\">Mutability</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">BindByValue</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">auto_gen</span>: <span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">mutability</span>: <span class=\"nc\">Mutability</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 162819323,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554732003
    },
    {
        "content": "<p>or something like that</p>",
        "id": 162819337,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554732006
    },
    {
        "content": "<p>but at the same time doesn't sound great</p>",
        "id": 162819343,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554732014
    },
    {
        "content": "<p>Yup</p>",
        "id": 162819348,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1554732021
    },
    {
        "content": "<p>We would be changing hir</p>",
        "id": 162819359,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1554732030
    },
    {
        "content": "<p>and it will make <code>BindingMode</code> size be increase the size</p>",
        "id": 162819366,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554732042
    },
    {
        "content": "<p>/cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 162819375,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554732056
    },
    {
        "content": "<p>Is the size increase by adding a bool an issue? Noob doubt.</p>",
        "id": 162820713,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1554732989
    },
    {
        "content": "<p>yes, the size of that enum uses 1 byte for the tag (to define which variant are we talking about), then both of them use <code>Mutability</code>, so the size of that right now is the byte for the tag and the size of <code>Mutability</code> and you need to consider padding</p>",
        "id": 162821663,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554733647
    },
    {
        "content": "<p>let me check exactly what is <code>Mutability</code> to consider the padding</p>",
        "id": 162821749,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554733692
    },
    {
        "content": "<p>hey back</p>",
        "id": 162822934,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554734542
    },
    {
        "content": "<p>so in the first case the size is 2 bytes and if you add that bool is 4 bytes</p>",
        "id": 162822964,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554734561
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/std/mem/fn.size_of.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/std/mem/fn.size_of.html\">https://doc.rust-lang.org/std/mem/fn.size_of.html</a></p>",
        "id": 162822985,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554734578
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/std/mem/fn.align_of.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/std/mem/fn.align_of.html\">https://doc.rust-lang.org/std/mem/fn.align_of.html</a></p>",
        "id": 162822998,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554734584
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214307\">@Saleem Jaffer</span> was looking for some resources for you to check :)</p>",
        "id": 162823049,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554734608
    },
    {
        "content": "<p>but is basically 1 byte for tag of the main enum and 1 byte for tag for the inner enum</p>",
        "id": 162823128,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554734646
    },
    {
        "content": "<p>and when you add a bool you have another byte and also one more as padding</p>",
        "id": 162823157,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554734670
    },
    {
        "content": "<p>Thanks :)</p>",
        "id": 162823214,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1554734718
    },
    {
        "content": "<p>Coming from web development background a few extra bytes in a struct don’t make a difference for web apps :D</p>",
        "id": 162823315,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1554734776
    },
    {
        "content": "<p>So how do we proceed with this? Do we wait for <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> to suggest an approach?</p>",
        "id": 162823381,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1554734830
    },
    {
        "content": "<p>I'd start by trying to add that field and make the thing work</p>",
        "id": 162828848,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554738496
    },
    {
        "content": "<p>then we can discuss on the PR</p>",
        "id": 162828857,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554738502
    },
    {
        "content": "<p>but based on the actual code would be better I guess</p>",
        "id": 162828870,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554738512
    },
    {
        "content": "<p>Cool! I’ll start making the changes.</p>",
        "id": 162829823,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1554739098
    },
    {
        "content": "<blockquote>\n<p>Coming from web development background a few extra bytes in a struct don’t make a difference for web apps :D</p>\n</blockquote>\n<p>yep, I'm not sure in this case if it will make a difference, would need to see where is <code>BindingMode</code> used and how impacts the size of the things that use it and then see if that ends adding a significant amount of memory to the overall process</p>",
        "id": 162836998,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554744023
    },
    {
        "content": "<p>Oh hi <span class=\"user-mention\" data-user-id=\"214307\">@Saleem Jaffer</span> and <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> --</p>",
        "id": 162919949,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554822816
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> is definitely right that increasing the size of <code>BindingMode</code> will increase memory usage, though it's a bit hard to say by how much</p>",
        "id": 162919968,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554822834
    },
    {
        "content": "<p>Hello <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 162920039,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1554822871
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I wonder if we can just place that boolean field somewhere else with less undesirable effects</p>",
        "id": 162920096,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554822925
    },
    {
        "content": "<p>Well, I'm not really clear on that</p>",
        "id": 162920205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554822983
    },
    {
        "content": "<p>What does this boolean represent exactly?</p>",
        "id": 162920220,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554822992
    },
    {
        "content": "<p>Anyway, maybe there is another place for it, but I guess I wouldn't stress about it too much</p>",
        "id": 162920268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554823034
    },
    {
        "content": "<p>so ... it is saying that the borrow was auto generated</p>",
        "id": 162920592,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554823224
    },
    {
        "content": "<p>passing this <a href=\"https://github.com/rust-lang/rust/blob/52980d0fb39134a26f73b39b384407e010fc3af5/src/librustc_mir/hair/cx/expr.rs#L134-L139\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/52980d0fb39134a26f73b39b384407e010fc3af5/src/librustc_mir/hair/cx/expr.rs#L134-L139\">https://github.com/rust-lang/rust/blob/52980d0fb39134a26f73b39b384407e010fc3af5/src/librustc_mir/hair/cx/expr.rs#L134-L139</a> info down I'd say :)</p>",
        "id": 162920614,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554823240
    },
    {
        "content": "<p>so for more extra context, you wrote something like <code>&amp;mut something</code></p>",
        "id": 162920666,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554823265
    },
    {
        "content": "<p>but you have <code>&amp;*(&amp;mut something)</code></p>",
        "id": 162920811,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554823349
    },
    {
        "content": "<p>This what what I have been able to understand so far after some debugging. </p>\n<p>For a match statement, we go through each of the arms and try to coerce each one. The <code>expected_type</code> is <code>_</code> for each of the arms initially. Finally we infer the right type(not sure how).  All This seems to happen in <code>typeck::check::coercion</code>. </p>\n<p>What I am stuck at is: how do I revisit the arm and marked <code>coerced </code> as <code>true</code>?</p>",
        "id": 163071530,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1554960573
    },
    {
        "content": "<blockquote>\n<p>What I am stuck at is: how do I revisit the arm and marked coerced  as true?</p>\n</blockquote>\n<ul>\n<li>What I am stuck at is: How do I revisit the arm and mark coerced  as true?</li>\n</ul>",
        "id": 163075533,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1554966174
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 163079123,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1554970007
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/d21bebe18d6851f52ddcc404e875260560599521/src/librustc_typeck/check/mod.rs#L2244\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/d21bebe18d6851f52ddcc404e875260560599521/src/librustc_typeck/check/mod.rs#L2244\">https://github.com/rust-lang/rust/blob/d21bebe18d6851f52ddcc404e875260560599521/src/librustc_typeck/check/mod.rs#L2244</a></p>\n<p>Looks like this is where we should be setting <code>coerced</code> to <code>true</code>.</p>",
        "id": 163084967,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1554975546
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/d21bebe18d6851f52ddcc404e875260560599521/src/librustc_typeck/check/coercion.rs#L939\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/d21bebe18d6851f52ddcc404e875260560599521/src/librustc_typeck/check/coercion.rs#L939\">This</a> calls the above function.</p>",
        "id": 163085398,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1554976015
    },
    {
        "content": "<p>Somehow I feel I am on the right track, but am not able to figure out the last bit <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 163085888,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1554976443
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">apply_adjustments</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">expr</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">hir</span>::<span class=\"n\">Expr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">adj</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">Adjustment</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;apply_adjustments(expr={:?}, adj={:?})&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">expr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">adj</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">adj</span><span class=\"p\">.</span><span class=\"n\">is_empty</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tables</span><span class=\"p\">.</span><span class=\"n\">borrow_mut</span><span class=\"p\">().</span><span class=\"n\">adjustments_mut</span><span class=\"p\">().</span><span class=\"n\">entry</span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">hir_id</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Entry</span>::<span class=\"n\">Vacant</span><span class=\"p\">(</span><span class=\"n\">entry</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">entry</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">adj</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Entry</span>::<span class=\"n\">Occupied</span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">entry</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot; - composing on top of {:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">entry</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">entry</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">()[..],</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">adj</span><span class=\"p\">[..])</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"c1\">// Applying any adjustment on top of a NeverToAny</span>\n<span class=\"w\">                    </span><span class=\"c1\">// is a valid NeverToAny adjustment, because it can&#39;t</span>\n<span class=\"w\">                    </span><span class=\"c1\">// be reached.</span>\n<span class=\"w\">                    </span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Adjustment</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">kind</span>: <span class=\"nc\">Adjust</span>::<span class=\"n\">NeverToAny</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">}],</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">Adjustment</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">kind</span>: <span class=\"nc\">Adjust</span>::<span class=\"n\">Deref</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">Adjustment</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">kind</span>: <span class=\"nc\">Adjust</span>::<span class=\"n\">Borrow</span><span class=\"p\">(</span><span class=\"n\">AutoBorrow</span>::<span class=\"n\">Ref</span><span class=\"p\">(..)),</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">Adjustment</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">kind</span>: <span class=\"nc\">Adjust</span>::<span class=\"n\">Deref</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"c1\">// Any following adjustments are allowed.</span>\n<span class=\"w\">                    </span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"c1\">// A reborrow has no effect before a dereference.</span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"c1\">// FIXME: currently we never try to compose autoderefs</span>\n<span class=\"w\">                    </span><span class=\"c1\">// and ReifyFnPointer/UnsafeFnPointer, but we could.</span>\n<span class=\"w\">                    </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">bug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;while adjusting {:?}, can&#39;t compose {:?} and {:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                             </span><span class=\"n\">expr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">entry</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">adj</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"o\">*</span><span class=\"n\">entry</span><span class=\"p\">.</span><span class=\"n\">get_mut</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">adj</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Should we change the <code>adj</code> in <code>apply_adjustments</code> to a <code>mut Vec&lt;Adjustment&lt;'tcx&gt;&gt;</code> and then change the <code>Adjustment</code>?</p>",
        "id": 163087167,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1554977740
    },
    {
        "content": "<p>the <code>adj</code> for <code>&amp;mut term</code> is </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Deref</span><span class=\"p\">(</span><span class=\"nb\">None</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">X</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Borrow</span><span class=\"p\">(</span><span class=\"n\">Ref</span><span class=\"p\">(</span><span class=\"na\">&#39;_</span><span class=\"err\">#</span><span class=\"mi\">5</span><span class=\"n\">r</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Immutable</span><span class=\"p\">))</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">X</span><span class=\"w\"></span>\n<span class=\"p\">]</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>I think we have to change:</p>\n<div class=\"codehilite\"><pre><span></span>pub enum AutoBorrowMutability {\n    Mutable { allow_two_phase_borrow: AllowTwoPhase },\n    Immutable,\n}\n</pre></div>\n\n\n<p>to </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">AutoBorrowMutability</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Mutable</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">allow_two_phase_borrow</span>: <span class=\"nc\">AllowTwoPhase</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Immutable</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">coerced</span>: <span class=\"kt\">bool</span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 163088930,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1554979600
    },
    {
        "content": "<p>The only problem with this is that <a href=\"https://github.com/rust-lang/rust/blob/d21bebe18d6851f52ddcc404e875260560599521/src/librustc_mir/borrow_check/mutability_errors.rs#L28-L35\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/d21bebe18d6851f52ddcc404e875260560599521/src/librustc_mir/borrow_check/mutability_errors.rs#L28-L35\">the function</a> that actually reports the error and the help suggestion does not have access to <code>Adjustment</code>.</p>",
        "id": 163089732,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1554980470
    },
    {
        "content": "<p>I'd need to investigate this, /cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ^^^</p>",
        "id": 163097570,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1554988296
    },
    {
        "content": "<p>Do let me know if you need some work from my end.</p>",
        "id": 163189141,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1555075755
    },
    {
        "content": "<p>Do let me know if you need some work from my end.</p>",
        "id": 163211268,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1555091312
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> can you review this when you have a couple of minutes? ^^^</p>",
        "id": 163381888,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555336880
    },
    {
        "content": "<p>OK, I'm around</p>",
        "id": 163394764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555346114
    },
    {
        "content": "<blockquote>\n<p>Looks like this is where we should be setting <code>coerced</code> to <code>true</code>.</p>\n</blockquote>\n<p>this is correct</p>",
        "id": 163395488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555346740
    },
    {
        "content": "<p>OK, so I spent some time catching up with the issue</p>",
        "id": 163397616,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555348315
    },
    {
        "content": "<p>and I think I remember a bit what is happening here</p>",
        "id": 163397618,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555348319
    },
    {
        "content": "<p>but I'm still not 100% sure what approach <span class=\"user-mention\" data-user-id=\"214307\">@Saleem Jaffer</span> is taking here</p>",
        "id": 163397673,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555348343
    },
    {
        "content": "<p>we're trying to avoid the <code>help</code> message, I see</p>",
        "id": 163397694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555348378
    },
    {
        "content": "<p>I'm not 100% clear on why adjustments / coercions are part of this</p>",
        "id": 163397903,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555348535
    },
    {
        "content": "<p>Ah, I guess it's because we want to know whether a given <code>&amp;</code> in MIR is actually \"synthetic\" or corresponds to something the user actually <em>wrote</em>?</p>",
        "id": 163398011,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555348605
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> -- where in the code is the <code>help</code> text getting generated exactly?</p>",
        "id": 163398026,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555348618
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> -- where in the code is the <code>help</code> text getting generated exactly?</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/blob/9217fe0e2f04d61dd29c9aaebee2c993705e1d26/src/librustc_mir/borrow_check/mutability_errors.rs#L385-L395\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/9217fe0e2f04d61dd29c9aaebee2c993705e1d26/src/librustc_mir/borrow_check/mutability_errors.rs#L385-L395\">https://github.com/rust-lang/rust/blob/9217fe0e2f04d61dd29c9aaebee2c993705e1d26/src/librustc_mir/borrow_check/mutability_errors.rs#L385-L395</a></p>",
        "id": 163399158,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1555349539
    },
    {
        "content": "<blockquote>\n<p>Ah, I guess it's because we want to know whether a given <code>&amp;</code> in MIR is actually \"synthetic\" or corresponds to something the user actually <em>wrote</em>?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  Yes, we need to know if the <code>&amp;</code> is actually a <code>&amp;</code>, or a <code>&amp;mut</code> coerced to a <code>&amp;</code>. </p>\n<p>We need to know this so that we can suppress the help text.</p>\n<p>If we know that we are dealing with a <code>&amp;mut</code> coerced to a <code>&amp;</code>,  we can stop emitting the help text.</p>",
        "id": 163399250,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1555349634
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span>  Are the details I have mentioned clear, or should I be more elaborate?</p>",
        "id": 163472169,
        "sender_full_name": "Saleem Jaffer",
        "timestamp": 1555423646
    },
    {
        "content": "<p>I think what you've said is clear, <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> have probably not seen your message yet :)</p>",
        "id": 163473010,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1555424268
    },
    {
        "content": "<p>I've picked this one up and starting working it again - I'm updating my progress as I go along in the issue <a href=\"https://github.com/rust-lang/rust/issues/57431\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57431\">https://github.com/rust-lang/rust/issues/57431</a></p>",
        "id": 189252536,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1582834723
    },
    {
        "content": "<p>If anyone sees anything there that is off base or going in the wrong direction, please let me know!</p>",
        "id": 189252549,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1582834738
    }
]