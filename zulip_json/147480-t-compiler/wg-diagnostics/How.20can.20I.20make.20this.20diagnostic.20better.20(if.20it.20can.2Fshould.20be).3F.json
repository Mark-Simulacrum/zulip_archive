[
    {
        "content": "<p>Hey there! I started to work on <a href=\"https://github.com/rust-lang/rust/issues/78941\">#78491</a>, which basically makes a diagnostic more readable by changing the suggestion to be verbose. However, I feel that the following result isn't quite desirable:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: functions in `extern` blocks cannot have qualifiers\n --&gt; &lt;anon&gt;:2:11\n  |\n1 | extern &quot;C&quot; {\n  | ---------- in this `extern` block\n2 |     async fn calleth();\n  |              ^^^^^^^\n  |\nhelp: remove the qualifiers\n  |\n2 |     fn calleth();\n  |     ^^\n\nerror: aborting due to previous error\n</code></pre></div>\n<p>Does anyone here have any suggestions on how to improve this (if needed)?</p>\n<p>(p.s. I hope this is the right stream for this, if not, I can continue discussion in t-compiler)</p>",
        "id": 216820944,
        "sender_full_name": "James",
        "timestamp": 1605483380
    },
    {
        "content": "<p>Note that the previous diagnostic was this:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: functions in `extern` blocks cannot have qualifiers\n --&gt; src/lib.rs:2:14\n  |\n1 | extern &quot;C&quot; {\n  | ---------- in this `extern` block\n2 |     async fn calleth();\n  |     ---------^^^^^^^\n  |     |\n  |     help: remove the qualifiers: `fn`\n\nerror: aborting due to previous error\n\nerror: could not compile `playground`\n\nTo learn more, run the command again with --verbose.\n</code></pre></div>",
        "id": 216821055,
        "sender_full_name": "James",
        "timestamp": 1605483595
    },
    {
        "content": "<p>To me, the new diagnostic implies that you should remove the <code>fn</code> rather than implying that the snippet is what it should be. Perhaps I could change the diagnostic to not be verbose but have the message be something like \"remove the qualifiers: <code>async</code>\", if that's possible? I'm new to rustc contribution so I'm not quite sure if/how this should be improved.</p>",
        "id": 216821347,
        "sender_full_name": "James",
        "timestamp": 1605484086
    },
    {
        "content": "<p>I liked it before :/</p>",
        "id": 216827868,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605494686
    },
    {
        "content": "<p>although it would be more clear to say <code>fn calleth()</code> I think</p>",
        "id": 216827875,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605494707
    },
    {
        "content": "<p>What part of the diagnostic be changed to say <code>fn calleth()</code>?</p>",
        "id": 216827932,
        "sender_full_name": "James",
        "timestamp": 1605494792
    },
    {
        "content": "<p>the one that says just <code>fn</code> currently</p>",
        "id": 216827952,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605494855
    },
    {
        "content": "<p>it makes it seem like you should remove <em>both</em> <code>async</code> and the name</p>",
        "id": 216827955,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605494869
    },
    {
        "content": "<p>So you mean like this? (or the other new diagnostic?)</p>\n<div class=\"codehilite\"><pre><span></span><code>error: functions in `extern` blocks cannot have qualifiers\n --&gt; src/lib.rs:2:14\n  |\n1 | extern &quot;C&quot; {\n  | ---------- in this `extern` block\n2 |     async fn calleth();\n  |     ---------^^^^^^^\n  |     |\n  |     help: remove the qualifiers: `fn calleth();`\n\nerror: aborting due to previous error\n\nerror: could not compile `playground`\n\nTo learn more, run the command again with --verbose.\n</code></pre></div>",
        "id": 216829259,
        "sender_full_name": "James",
        "timestamp": 1605496627
    },
    {
        "content": "<p>yeah, that's what I was imagining</p>",
        "id": 216829344,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605496740
    },
    {
        "content": "<p>Ok. How would I implement that? I know where the diagnostic is located (rustc_ast_passes) but I'm not sure how I'd get that to work.</p>",
        "id": 216829643,
        "sender_full_name": "James",
        "timestamp": 1605497191
    },
    {
        "content": "<p>Actually, I'll just mess around and see if I can get it to work first. If that doesn't work, I'll seek further help.</p>",
        "id": 216829665,
        "sender_full_name": "James",
        "timestamp": 1605497275
    },
    {
        "content": "<p>There's a better way to do this, right? I just want to get the code at that span. I know the span is valid because it's the beginning of one valid span to the end of another valid span.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">format</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"fn {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">session</span><span class=\"p\">.</span><span class=\"n\">source_map</span><span class=\"p\">().</span><span class=\"n\">span_to_snippet</span><span class=\"p\">(</span><span class=\"n\">ident</span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"p\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"n\">span</span><span class=\"p\">.</span><span class=\"n\">shrink_to_hi</span><span class=\"p\">())).</span><span class=\"n\">unwrap</span><span class=\"p\">())</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It works, but I just feel like I have ruined something sacred with my unclean, un-fully-researched-and-vetted code</p>\n<div class=\"codehilite\"><pre><span></span><code>error: functions in `extern` blocks cannot have qualifiers\n --&gt; &lt;anon&gt;:2:11\n  |\n1 | extern &quot;C&quot; {\n  | ---------- in this `extern` block\n2 |     async fn calleth();\n  |     ---------^^^^^^^\n  |     |\n  |     help: remove the qualifiers: `fn calleth();`\n\nerror: aborting due to previous error\n</code></pre></div>",
        "id": 216831654,
        "sender_full_name": "James",
        "timestamp": 1605500847
    },
    {
        "content": "<p>Or well, I guess that's kind of XY-problem-y. I need to find a way to get a <code>String</code> from the state I have in <code>rustc_ast_passes::ast_validation::AstValidator::check_foreign_fn_headerless</code> that goes from the beginning of <code>fn</code> up to and including the semicolon</p>",
        "id": 216831953,
        "sender_full_name": "James",
        "timestamp": 1605501329
    },
    {
        "content": "<p>It looks like the reviewer decided that wasn't what was best, so I'm reverting back to the diagnostic that was first shown (which was what was suggested by the reviewer). <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 216960904,
        "sender_full_name": "James",
        "timestamp": 1605581342
    },
    {
        "content": "<p>oh actually it turned out mostly the same</p>",
        "id": 216961006,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605581470
    },
    {
        "content": "<p>because you have span_suggestion_verbose it shows the original code:</p>\n<div class=\"codehilite\"><pre><span></span><code>help: remove the qualifiers\n   |\nLL |         fn fe4();\n   |         ^^\n</code></pre></div>",
        "id": 216961021,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605581492
    },
    {
        "content": "<p>which looks fine to me</p>",
        "id": 216961024,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605581495
    },
    {
        "content": "<p>true</p>",
        "id": 216961356,
        "sender_full_name": "James",
        "timestamp": 1605581915
    }
]