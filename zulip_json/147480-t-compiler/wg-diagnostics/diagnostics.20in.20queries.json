[
    {
        "content": "<p>Diagnostics in queries cannot, by their very design, be adjusted to reflect the query call site. There may be multiple call sites after all. This is a problem for constants. We want to report detailed errors on constants. The first time we report a diagnostic, we want the full diagnostic, but all subsequent evaluations of the constant can just report something like the \"referenced constant has errors\" instead of repeating the entire diagnostic. My proposal is to make the <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/interpret/error/struct.InterpErrorInfo.html\">InterpErrorInfo</a> type have interior mutability. We then add convenience functionality on top of it for reporting it as an error. After reporting it as an error, it replaces itself with the \"AlreadyReported\" variant, which future report attempts will silently allow. In order to not cause problems with the query engine, we will make the error type hash itself as a ZST (and always compare as equal with itself, even if it is not). We don't have to worry about serialization, as the const eval queries don't get serialized if they had errors. </p>\n<p>Doing this should improve all of our const eval error reporting problems around some of the errors being lints and the diagnostics generally not referring to the error site but to the declaration site.</p>\n<p>cc <span class=\"user-group-mention\" data-user-group-id=\"1187\">@WG-diagnostics</span> <span class=\"user-group-mention\" data-user-group-id=\"1916\">@WG-const-eval</span> <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span></p>\n<p>Right now, our diagnostics look like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">warning</span>: <span class=\"nc\">any</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"n\">will</span><span class=\"w\"> </span><span class=\"n\">cause</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">3</span>:<span class=\"mi\">18</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">FOO</span>: <span class=\"kt\">i32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">-----------------^^^-</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">                  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">                  </span><span class=\"n\">attempt</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">divide</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"mi\">1_</span><span class=\"k\">i32</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">zero</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"n\">note</span>: <span class=\"nc\">the</span><span class=\"w\"> </span><span class=\"n\">lint</span><span class=\"w\"> </span><span class=\"n\">level</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">defined</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">1</span>:<span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"cp\">#[warn(const_err)]</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">        </span><span class=\"o\">^^^^^^^^^</span><span class=\"w\"></span>\n\n<span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0080</span><span class=\"p\">]</span>: <span class=\"nc\">erroneous</span><span class=\"w\"> </span><span class=\"n\">constant</span><span class=\"w\"> </span><span class=\"n\">used</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">6</span>:<span class=\"mi\">13</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FOO</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">             </span><span class=\"o\">^^^</span><span class=\"w\"> </span><span class=\"n\">referenced</span><span class=\"w\"> </span><span class=\"n\">constant</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">errors</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and with my suggestion we would get</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0080]: erroneous constant used\n --&gt; src/main.rs:3:18\n  |\n3 | const FOO: i32 = 1/0;\n  | -----------------^^^-\n  |                  |\n  |                  attempt to divide `1_i32` by zero\n  |\n --&gt; src/main.rs:6:13\n  |\n6 |     let x = FOO;\n  |             ^^^ constant used here\n</code></pre></div>\n<p>With further uses reporting just </p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0080]: erroneous constant used\n --&gt; src/main.rs:6:13\n  |\n6 |     let x = FOO;\n  |             ^^^ referenced constant has errors\n</code></pre></div>",
        "id": 229183123,
        "sender_full_name": "oli",
        "timestamp": 1615119329
    },
    {
        "content": "<p>That sounds reasonable but I am concerned about queries returning values that have internal mutability. There's no precedent for them, is there?</p>",
        "id": 229201321,
        "sender_full_name": "Esteban KÃ¼ber",
        "timestamp": 1615136003
    },
    {
        "content": "<p>is there a reason you're caching the whole error in the query system? could you have an untracked field on TyCtxt or something that sees if the diagnostic has already been reported, and only cache the info you need to generate the diagnostic?</p>",
        "id": 229201497,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1615136175
    },
    {
        "content": "<p>That will cause problems if the query result is loaded from disk</p>",
        "id": 229213674,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1615147219
    },
    {
        "content": "<p>Wait, nvm, I misunderstood you</p>",
        "id": 229213766,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1615147317
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/147480-t-compiler.2Fwg-diagnostics/topic/diagnostics.20in.20queries/near/229201497\">said</a>:</p>\n<blockquote>\n<p>is there a reason you're caching the whole error in the query system? could you have an untracked field on TyCtxt or something that sees if the diagnostic has already been reported, and only cache the info you need to generate the diagnostic?</p>\n</blockquote>\n<p>Since it's just for diagnostics, this sounds a lot like what we already have for diagnostic deduplication (and is a very similar use case). That sounds a lot better, as we aren't inventing a new thing</p>",
        "id": 229286220,
        "sender_full_name": "oli",
        "timestamp": 1615204301
    },
    {
        "content": "<p>FWIW, currently <code>InterpErrorInfo</code> is not returned from the query but consumed inside the query (and IIRC implementing the traits required for it to be returned from the query is tricky or impossible)</p>",
        "id": 230152866,
        "sender_full_name": "RalfJ",
        "timestamp": 1615630177
    }
]