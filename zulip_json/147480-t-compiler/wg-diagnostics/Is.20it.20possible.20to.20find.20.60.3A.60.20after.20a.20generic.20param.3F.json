[
    {
        "content": "<p>Is there a way to differentiate between  <code>foo</code> and <code>bar</code> here?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>:<span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>to produce correct suggestions I need to know whatever <code>:</code> is there...</p>",
        "id": 278480706,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1649612712
    },
    {
        "content": "<p>that's legal?</p>",
        "id": 278480767,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649612782
    },
    {
        "content": "<p>yes</p>",
        "id": 278480785,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1649612828
    },
    {
        "content": "<p>For context, I'm working with <code>hir::Generics</code> here</p>",
        "id": 278480797,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1649612851
    },
    {
        "content": "<p>I see it's in the <a href=\"https://doc.rust-lang.org/reference/items/generics.html\">reference</a> too. I wonder why it is allowed?</p>",
        "id": 278480853,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649612896
    },
    {
        "content": "<p>generic const exprs is abusing the syntax as a stand in for <code>evaluatable { CONST EXPRESSION }</code> i think</p>",
        "id": 278481562,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1649613790
    },
    {
        "content": "<p>it might also be there for macros</p>",
        "id": 278481564,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1649613795
    },
    {
        "content": "<p>I think that there might be a difference on the span for the param and the name of the param, even though there's an empty bound</p>",
        "id": 278484285,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1649617529
    },
    {
        "content": "<p>and if there isn't, you could... change the parser so there is</p>",
        "id": 278484301,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1649617552
    },
    {
        "content": "<p>If you want to stay completely in HIR, you could look for a corresponding <code>WhereBoundPredicate</code> with no <code>bounds</code>: <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/struct.WhereBoundPredicate.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/struct.WhereBoundPredicate.html</a></p>",
        "id": 278484613,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1649617915
    },
    {
        "content": "<p>If it bounds slice is empty then it corresponds to <code>where Ty:</code></p>",
        "id": 278484657,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1649617928
    },
    {
        "content": "<p>which (at least I'm 30% sure) is what <code>&lt;T:&gt;</code> desugars into --&gt; <code>&lt;T&gt; .. where T:</code></p>",
        "id": 278484664,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1649617945
    },
    {
        "content": "<p><code>WhereBoundPredicate</code> even has <code>is_param_bound</code> to make that filtering for the <code>T</code> param even quicker :)</p>",
        "id": 278484698,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1649617996
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"426609\">Michael Goulet (compiler-errors)</span> <a href=\"#narrow/stream/147480-t-compiler.2Fwg-diagnostics/topic/Is.20it.20possible.20to.20find.20.60.3A.60.20after.20a.20generic.20param.3F/near/278484664\">said</a>:</p>\n<blockquote>\n<p>which (at least I'm 30% sure) is what <code>&lt;T:&gt;</code> desugars into --&gt; <code>&lt;T&gt; .. where T:</code></p>\n</blockquote>\n<p>It doesn't seem to</p>\n<p>This is what I've got:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>:<span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">t</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Generics</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">params</span>: <span class=\"p\">[</span><span class=\"n\">GenericParam</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">hir_id</span>: <span class=\"nc\">HirId</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">owner</span>: <span class=\"nc\">DefId</span><span class=\"p\">(</span><span class=\"mi\">0</span>:<span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"p\">[</span><span class=\"mi\">92</span><span class=\"n\">cd</span><span class=\"p\">]</span>::<span class=\"n\">foo</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">local_id</span>: <span class=\"mi\">11</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">name</span>: <span class=\"nc\">Plain</span><span class=\"p\">(</span><span class=\"n\">T</span>#<span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">bounds</span>: <span class=\"p\">[],</span><span class=\"w\"> </span><span class=\"n\">span</span>: <span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">1</span>:<span class=\"mi\">8</span>: <span class=\"mi\">1</span>:<span class=\"mi\">9</span><span class=\"w\"> </span><span class=\"p\">(</span>#<span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">pure_wrt_drop</span>: <span class=\"nc\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">kind</span>: <span class=\"nc\">Type</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">default</span>: <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">synthetic</span>: <span class=\"nc\">false</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}],</span><span class=\"w\"> </span><span class=\"n\">where_clause</span>: <span class=\"nc\">WhereClause</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">predicates</span>: <span class=\"p\">[],</span><span class=\"w\"> </span><span class=\"n\">span</span>: <span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">1</span>:<span class=\"mi\">17</span>: <span class=\"mi\">1</span>:<span class=\"mi\">17</span><span class=\"w\"> </span><span class=\"p\">(</span>#<span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">span</span>: <span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">1</span>:<span class=\"mi\">7</span>: <span class=\"mi\">1</span>:<span class=\"mi\">11</span><span class=\"w\"> </span><span class=\"p\">(</span>#<span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<blockquote>\n<p>WhereClause { predicates: []</p>\n</blockquote>",
        "id": 278487810,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1649622137
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119031\">Esteban Küber</span> <a href=\"#narrow/stream/147480-t-compiler.2Fwg-diagnostics/topic/Is.20it.20possible.20to.20find.20.60.3A.60.20after.20a.20generic.20param.3F/near/278484285\">said</a>:</p>\n<blockquote>\n<p>I think that there might be a difference on the span for the param and the name of the param, even though there's an empty bound</p>\n</blockquote>\n<p>(first is <code>&lt;T:&gt;</code> second is <code>&lt;T&gt;</code>)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Generics</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">params</span>: <span class=\"p\">[</span><span class=\"n\">GenericParam</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">hir_id</span>: <span class=\"nc\">HirId</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">owner</span>: <span class=\"nc\">DefId</span><span class=\"p\">(</span><span class=\"mi\">0</span>:<span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"p\">[</span><span class=\"mi\">92</span><span class=\"n\">cd</span><span class=\"p\">]</span>::<span class=\"n\">foo</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">local_id</span>: <span class=\"mi\">11</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">name</span>: <span class=\"nc\">Plain</span><span class=\"p\">(</span><span class=\"n\">T</span>#<span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">bounds</span>: <span class=\"p\">[],</span><span class=\"w\"> </span><span class=\"n\">span</span>: <span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">1</span>:<span class=\"mi\">8</span>: <span class=\"mi\">1</span>:<span class=\"mi\">9</span><span class=\"w\"> </span><span class=\"p\">(</span>#<span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">pure_wrt_drop</span>: <span class=\"nc\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">kind</span>: <span class=\"nc\">Type</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">default</span>: <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">synthetic</span>: <span class=\"nc\">false</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}],</span><span class=\"w\"> </span><span class=\"n\">where_clause</span>: <span class=\"nc\">WhereClause</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">predicates</span>: <span class=\"p\">[],</span><span class=\"w\"> </span><span class=\"n\">span</span>: <span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">1</span>:<span class=\"mi\">17</span>: <span class=\"mi\">1</span>:<span class=\"mi\">17</span><span class=\"w\"> </span><span class=\"p\">(</span>#<span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">span</span>: <span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">1</span>:<span class=\"mi\">7</span>: <span class=\"mi\">1</span>:<span class=\"mi\">11</span><span class=\"w\"> </span><span class=\"p\">(</span>#<span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">Generics</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">params</span>: <span class=\"p\">[</span><span class=\"n\">GenericParam</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">hir_id</span>: <span class=\"nc\">HirId</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">owner</span>: <span class=\"nc\">DefId</span><span class=\"p\">(</span><span class=\"mi\">0</span>:<span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"p\">[</span><span class=\"mi\">92</span><span class=\"n\">cd</span><span class=\"p\">]</span>::<span class=\"n\">foo</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">local_id</span>: <span class=\"mi\">11</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">name</span>: <span class=\"nc\">Plain</span><span class=\"p\">(</span><span class=\"n\">T</span>#<span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">bounds</span>: <span class=\"p\">[],</span><span class=\"w\"> </span><span class=\"n\">span</span>: <span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">1</span>:<span class=\"mi\">8</span>: <span class=\"mi\">1</span>:<span class=\"mi\">9</span><span class=\"w\"> </span><span class=\"p\">(</span>#<span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">pure_wrt_drop</span>: <span class=\"nc\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">kind</span>: <span class=\"nc\">Type</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">default</span>: <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">synthetic</span>: <span class=\"nc\">false</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}],</span><span class=\"w\"> </span><span class=\"n\">where_clause</span>: <span class=\"nc\">WhereClause</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">predicates</span>: <span class=\"p\">[],</span><span class=\"w\"> </span><span class=\"n\">span</span>: <span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">1</span>:<span class=\"mi\">16</span>: <span class=\"mi\">1</span>:<span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"p\">(</span>#<span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">span</span>: <span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">1</span>:<span class=\"mi\">7</span>: <span class=\"mi\">1</span>:<span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"p\">(</span>#<span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>As far as I see the only difference that I can spot is that <code>Generics</code> have different span (because it is either <code>&lt;T:&gt;</code> or <code>&lt;T&gt;</code>) and <code>WhereClause</code> has different span (because it points after <code>)</code> that is after the generics)</p>",
        "id": 278488092,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1649622544
    },
    {
        "content": "<p>Huh, it seems like <code>:</code> is not included in any spans ever. This is <code>hit::Generics</code> for the following function:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>:<span class=\"nb\">Clone</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">t</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Generics {\n  params: [\n     GenericParam {\n       hir_id: HirId { owner: DefId(0:3 ~ t[92cd]::foo), local_id: 13 },\n       name: Plain(T#0),\n       bounds: [\n         Trait(PolyTraitRef {\n           bound_generic_params: [],\n           trait_ref: TraitRef {\n             path: Path {\n               span: ./t.rs:1:10: 1:15 (#0),\n               res: Def(Trait, DefId(2:2685 ~ core[501d]::clone::Clone)),\n               segments: [PathSegment { ident: Clone#0, hir_id: Some(HirId { owner: DefId(0:3 ~ t[92cd]::foo), local_id: 11 }), res: Some(Def(Trait, DefId(2:2685 ~ core[501d]::clone::Clone))), args: None, infer_args: false }]\n              },\n             hir_ref_id: HirId { owner: DefId(0:3 ~ t[92cd]::foo), local_id: 12 }\n           },\n           span: ./t.rs:1:10: 1:15 (#0)\n         }, None)\n       ],\n       span: ./t.rs:1:8: 1:9 (#0),\n       pure_wrt_drop: false,\n       kind: Type { default: None, synthetic: false }\n     }\n  ],\n  where_clause: WhereClause { predicates: [], span: ./t.rs:1:22: 1:22 (#0) }, span: ./t.rs:1:7: 1:16 (#0)\n}\n</code></pre></div>\n<p>The <code>:</code> should be in <code>1:9 1:10</code></p>",
        "id": 278488664,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1649623342
    },
    {
        "content": "<p>(btw it's such a pain to format debug output uhhh)</p>",
        "id": 278488680,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1649623385
    },
    {
        "content": "<p>I'm not really sure what exactly to change here, to allow for <code>:</code> detection</p>",
        "id": 278488780,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1649623514
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"273349\">Waffle Lapkin</span> <a href=\"#narrow/stream/147480-t-compiler.2Fwg-diagnostics/topic/Is.20it.20possible.20to.20find.20.60.3A.60.20after.20a.20generic.20param.3F/near/278488680\">said</a>:</p>\n<blockquote>\n<p>(btw it's such a pain to format debug output uhhh)</p>\n</blockquote>\n<p>(I usually use <code>:#?</code>, does that work?)</p>",
        "id": 278489538,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1649624447
    },
    {
        "content": "<p>Possibly use <code>https://doc.rust-lang.org/nightly/nightly-rustc/rustc_span/source_map/struct.SourceMap.html#method.next_point</code> on the span of the generic?</p>",
        "id": 278489557,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1649624479
    },
    {
        "content": "<p>just curious, what are you trying to do this for? Knowing when to add <code>: Bound</code>?</p>",
        "id": 278489569,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1649624499
    },
    {
        "content": "<p>(also filed <a href=\"https://github.com/rust-lang/rust/issues/95898\">#95898</a> because we treat <code>T:</code> incorrectly in other places, hehe)</p>",
        "id": 278490021,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1649625120
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"426609\">Michael Goulet (compiler-errors)</span> <a href=\"#narrow/stream/147480-t-compiler.2Fwg-diagnostics/topic/Is.20it.20possible.20to.20find.20.60.3A.60.20after.20a.20generic.20param.3F/near/278489569\">said</a>:</p>\n<blockquote>\n<p>just curious, what are you trying to do this for? Knowing when to add <code>: Bound</code>?</p>\n</blockquote>\n<p>Yep. We currently do weird stuff like suggesting</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Copy</span>:<span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">g</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Copy</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 278571759,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1649691113
    },
    {
        "content": "<p>The <code>g</code> case I've fixed but the <code>f</code> case is a little bit more tricky</p>",
        "id": 278571926,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1649691170
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"426609\">Michael Goulet (compiler-errors)</span> <a href=\"#narrow/stream/147480-t-compiler.2Fwg-diagnostics/topic/Is.20it.20possible.20to.20find.20.60.3A.60.20after.20a.20generic.20param.3F/near/278489538\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"273349\">Waffle Lapkin</span> <a href=\"#narrow/stream/147480-t-compiler.2Fwg-diagnostics/topic/Is.20it.20possible.20to.20find.20.60.3A.60.20after.20a.20generic.20param.3F/near/278488680\">said</a>:</p>\n<blockquote>\n<p>(btw it's such a pain to format debug output uhhh)</p>\n</blockquote>\n<p>(I usually use <code>:#?</code>, does that work?)</p>\n</blockquote>\n<p>(it does, but for this I need to recompile everything :\") )</p>",
        "id": 278583054,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1649695859
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"426609\">Michael Goulet (compiler-errors)</span> <a href=\"#narrow/stream/147480-t-compiler.2Fwg-diagnostics/topic/Is.20it.20possible.20to.20find.20.60.3A.60.20after.20a.20generic.20param.3F/near/278489557\">said</a>:</p>\n<blockquote>\n<p>Possibly use <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_span/source_map/struct.SourceMap.html#method.next_point\"><code>SourceMap::next_point</code></a> on the span of the generic?</p>\n</blockquote>\n<p>Am I missing something or is it broken? <a href=\"/user_uploads/4715/j9ybkyQuIhA6yWD5shxgQiDI/2022-04-12_09-03.png\">2022-04-12_09-03.png</a> <code>next_point</code> calls <code>find_width_of_character_at_span</code> with an empty span, in which case <code>find_width_of_character_at_span</code> always returns 1</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/j9ybkyQuIhA6yWD5shxgQiDI/2022-04-12_09-03.png\" title=\"2022-04-12_09-03.png\"><img src=\"/user_uploads/4715/j9ybkyQuIhA6yWD5shxgQiDI/2022-04-12_09-03.png\"></a></div>",
        "id": 278648800,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1649739914
    },
    {
        "content": "<p>My hacky solution currently looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">colon_sp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">source_map</span><span class=\"p\">.</span><span class=\"n\">span_extend_while</span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">c</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"sc\">','</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"sc\">'&gt;'</span><span class=\"p\">).</span><span class=\"n\">ok</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">colon_text</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">colon_sp</span><span class=\"p\">.</span><span class=\"n\">and_then</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">sp</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">source_map</span><span class=\"p\">.</span><span class=\"n\">span_to_snippet</span><span class=\"p\">(</span><span class=\"n\">sp</span><span class=\"p\">).</span><span class=\"n\">ok</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">suggest_colon</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">colon_text</span><span class=\"p\">.</span><span class=\"n\">as_deref</span><span class=\"p\">().</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">text</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">text</span><span class=\"p\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"sc\">':'</span><span class=\"p\">)).</span><span class=\"n\">unwrap_or</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 278649568,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1649740999
    },
    {
        "content": "<p>In the end I come up with the following:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// hir::GenericParam&lt;'_&gt;</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">colon_span_for_suggestions</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">source_map</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">SourceMap</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Span</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">sp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">source_map</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">span_extend_while</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"p\">.</span><span class=\"n\">shrink_to_hi</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">c</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">is_whitespace</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"sc\">':'</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">ok</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">snippet</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">source_map</span><span class=\"p\">.</span><span class=\"n\">span_to_snippet</span><span class=\"p\">(</span><span class=\"n\">sp</span><span class=\"p\">).</span><span class=\"n\">ok</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">snippet</span><span class=\"p\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"sc\">':'</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">colon_sp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sp</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">with_lo</span><span class=\"p\">(</span><span class=\"n\">BytePos</span><span class=\"p\">(</span><span class=\"n\">sp</span><span class=\"p\">.</span><span class=\"n\">lo</span><span class=\"p\">().</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">with_hi</span><span class=\"p\">(</span><span class=\"n\">BytePos</span><span class=\"p\">(</span><span class=\"n\">sp</span><span class=\"p\">.</span><span class=\"n\">lo</span><span class=\"p\">().</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"sc\">':'</span><span class=\"p\">.</span><span class=\"n\">len_utf8</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">));</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">colon_sp</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 278656118,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1649747781
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/95970\">https://github.com/rust-lang/rust/pull/95970</a></p>",
        "id": 278668256,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1649755779
    }
]