[
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"1187\">@WG-diagnostics</span> <span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span> . Let's talk about replacing numeric error codes with string names. This happens in <a href=\"https://github.com/rust-lang/rust/issues/67086\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/67086\">#67086</a>. Please pick a time at  <a href=\"https://terminplaner4.dfn.de/KlpwSW4AuBoCofUS\" target=\"_blank\" title=\"https://terminplaner4.dfn.de/KlpwSW4AuBoCofUS\">https://terminplaner4.dfn.de/KlpwSW4AuBoCofUS</a> I'll leave a more detailed explanation of the things to discuss below</p>",
        "id": 186994414,
        "sender_full_name": "oli",
        "timestamp": 1580396380
    },
    {
        "content": "<p>Done! Also: it's very likely I won't be around on zulip so don't hesitate to ping me on discord.</p>",
        "id": 186995079,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1580396756
    },
    {
        "content": "<ol>\n<li>Do we want to expose names instead of numbers to users? That can also be done by just creating an id-&gt;name map that is used before printing the error.</li>\n<li>I had the feeling everyone is d'accord with nixing numeric codes and using (edit: removed \"nice\".  Sorry, I didn't mean to immediately add a judgement about opinions here) string names just like we have lint names. <a href=\"https://github.com/rust-lang/rust/pull/67086#issuecomment-562571752\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/67086#issuecomment-562571752\">This feeling is obviously wrong</a>. So let's talk about the points here. <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> mentioned it being hard to grep/tidy for. Maybe something like <code>error_id!(some_name)</code> would alleviate this concern?</li>\n<li>Should we check that an error name is only used once? Apparently we don't have this check anymore since quite some time and haven't had a problem with it. Does anyone think we should reintroduce such a check?</li>\n</ol>",
        "id": 186996027,
        "sender_full_name": "oli",
        "timestamp": 1580397273
    },
    {
        "content": "<p>no, no, I'm totally on board with nice names</p>",
        "id": 186996146,
        "sender_full_name": "simulacrum",
        "timestamp": 1580397348
    },
    {
        "content": "<p>I am opposed to <code>\"E0303\"</code> vs. <code>E0303</code> where the first is actually restricted to that tight format</p>",
        "id": 186996232,
        "sender_full_name": "simulacrum",
        "timestamp": 1580397381
    },
    {
        "content": "<p>right, but we need some intermediate step before moving to full names</p>",
        "id": 186996265,
        "sender_full_name": "oli",
        "timestamp": 1580397403
    },
    {
        "content": "<p>otherwise we'll never get it merged</p>",
        "id": 186996274,
        "sender_full_name": "oli",
        "timestamp": 1580397413
    },
    {
        "content": "<p>if we did <code>error_id!(E0303)</code> this would still work as the macro could take an <code>ident</code> fragment</p>",
        "id": 186996345,
        "sender_full_name": "oli",
        "timestamp": 1580397446
    },
    {
        "content": "<p>yes, I think <code>error_id!</code> macro is a good idea</p>",
        "id": 186996364,
        "sender_full_name": "simulacrum",
        "timestamp": 1580397460
    },
    {
        "content": "<p>(makes the lint checking easier too)</p>",
        "id": 186996378,
        "sender_full_name": "simulacrum",
        "timestamp": 1580397469
    },
    {
        "content": "<p>I am fine with moving to \"E0303\" as an intermediate step (to be \"quickly\" replaced)</p>",
        "id": 186996496,
        "sender_full_name": "simulacrum",
        "timestamp": 1580397516
    },
    {
        "content": "<p>so basically all the use sites at macro call sites that were changed from <code>E0303</code> could in fact stay as they are and internally call <code>error_id!</code> on the value, and all the non-macro call sites could just use <code>error_id!</code>.</p>",
        "id": 186996532,
        "sender_full_name": "oli",
        "timestamp": 1580397538
    },
    {
        "content": "<p>yep, and (in theory) we can also make the macro accept either</p>",
        "id": 186996572,
        "sender_full_name": "simulacrum",
        "timestamp": 1580397566
    },
    {
        "content": "<p>i.e. internally we map <code>this_is_a_nice_name</code> to E0303 for now</p>",
        "id": 186996598,
        "sender_full_name": "simulacrum",
        "timestamp": 1580397582
    },
    {
        "content": "<p>oh</p>",
        "id": 186996609,
        "sender_full_name": "oli",
        "timestamp": 1580397588
    },
    {
        "content": "<p>hmm, interesting</p>",
        "id": 186996616,
        "sender_full_name": "oli",
        "timestamp": 1580397592
    },
    {
        "content": "<p>(or vice versa)</p>",
        "id": 186996621,
        "sender_full_name": "simulacrum",
        "timestamp": 1580397597
    },
    {
        "content": "<p>or, as another straw man, we make the macro accept symbols (i.e., <code>sym::</code></p>",
        "id": 186996695,
        "sender_full_name": "simulacrum",
        "timestamp": 1580397618
    },
    {
        "content": "<p>and then intern the current ids</p>",
        "id": 186996712,
        "sender_full_name": "simulacrum",
        "timestamp": 1580397627
    },
    {
        "content": "<p>hehe</p>",
        "id": 186996718,
        "sender_full_name": "oli",
        "timestamp": 1580397631
    },
    {
        "content": "<p>nice</p>",
        "id": 186996722,
        "sender_full_name": "oli",
        "timestamp": 1580397634
    },
    {
        "content": "<p>that way it's all the same type and so forth and super easy to migrate to any string</p>",
        "id": 186996746,
        "sender_full_name": "simulacrum",
        "timestamp": 1580397655
    },
    {
        "content": "<p>ah not sure if we have symbols available in <code>librustc_error</code></p>",
        "id": 186996754,
        "sender_full_name": "oli",
        "timestamp": 1580397662
    },
    {
        "content": "<p>yea doesn't look like it</p>",
        "id": 186996912,
        "sender_full_name": "oli",
        "timestamp": 1580397750
    },
    {
        "content": "<p>sure we do?</p>",
        "id": 186996941,
        "sender_full_name": "simulacrum",
        "timestamp": 1580397773
    },
    {
        "content": "<p>depends on librustc_span</p>",
        "id": 186996958,
        "sender_full_name": "simulacrum",
        "timestamp": 1580397784
    },
    {
        "content": "<p>which has sym (used to by syntax_pos)</p>",
        "id": 186996985,
        "sender_full_name": "simulacrum",
        "timestamp": 1580397796
    },
    {
        "content": "<p>ah so it does</p>",
        "id": 186997019,
        "sender_full_name": "oli",
        "timestamp": 1580397823
    },
    {
        "content": "<p>Do we have a proposal on the format for the new codes?</p>",
        "id": 187005675,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1580402864
    },
    {
        "content": "<p>nope, I would have assumed \"like lints\"</p>",
        "id": 187005796,
        "sender_full_name": "oli",
        "timestamp": 1580402917
    },
    {
        "content": "<p>My main concerns are that by having a string code that might prove suboptimal we can't really change it afterwards, that the output will be less consistent (ie where do I look for the start of the message) that there's duplication between the message and the code. I feel that it'd be a bigger benefit to try and get --teach working everywhere than try and improve the \"error code as non-semantic pointer to docs\" problem</p>",
        "id": 187005990,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1580403029
    },
    {
        "content": "<p>But I acknowledge that none of these are big issues</p>",
        "id": 187006009,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1580403042
    },
    {
        "content": "<p>We might have problems dealing with I line docs for a while though</p>",
        "id": 187006023,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1580403056
    },
    {
        "content": "<p>I feel no general pressure to do these changes <em>now</em> rather than later, so if you think there's some benefit to delaying, let's do that</p>",
        "id": 187006059,
        "sender_full_name": "oli",
        "timestamp": 1580403079
    },
    {
        "content": "<p>I don't think <code>sym::the_code</code> is a good idea</p>",
        "id": 187039071,
        "sender_full_name": "centril",
        "timestamp": 1580423922
    },
    {
        "content": "<p>It forces recompilation of <code>rustc_span</code> if you want to add a new error code</p>",
        "id": 187039089,
        "sender_full_name": "centril",
        "timestamp": 1580423937
    },
    {
        "content": "<p>which is basically recompiling the whole compiler</p>",
        "id": 187039095,
        "sender_full_name": "centril",
        "timestamp": 1580423946
    },
    {
        "content": "<p>regarding <code>error_id!</code>.. we already have <code>error_code!</code> in <code>rustc_errors</code>... what's the difference beyond <code>code</code> -&gt; <code>id</code> ?</p>",
        "id": 187039124,
        "sender_full_name": "centril",
        "timestamp": 1580423979
    },
    {
        "content": "<p>er, yeah, error_code would be the macro used I guess</p>",
        "id": 187039136,
        "sender_full_name": "simulacrum",
        "timestamp": 1580423990
    },
    {
        "content": "<p>(as a side note, I just did goto definition on a proc macro and it <em>worked</em> with RLA and I am speechless)</p>",
        "id": 187039208,
        "sender_full_name": "simulacrum",
        "timestamp": 1580424025
    },
    {
        "content": "<p>regardless, I think the issue of recompiling everything when adding a new symbol are not too interesting, i.e, we can make it work (there's no actual reason all symbols need to be in the same place, for example)</p>",
        "id": 187039245,
        "sender_full_name": "simulacrum",
        "timestamp": 1580424073
    },
    {
        "content": "<p>just the macro today requires that</p>",
        "id": 187039254,
        "sender_full_name": "simulacrum",
        "timestamp": 1580424084
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> ^---</p>",
        "id": 187039264,
        "sender_full_name": "centril",
        "timestamp": 1580424098
    },
    {
        "content": "<p>but I think that should be fixed first though</p>",
        "id": 187039281,
        "sender_full_name": "centril",
        "timestamp": 1580424120
    },
    {
        "content": "<p>but it could be pretty easily written I think to not need that, we'd need some constants that we update (offsets, basically); but it would only need to be updated every so often - we could give ourselves some \"margin\" so to speak</p>",
        "id": 187039325,
        "sender_full_name": "simulacrum",
        "timestamp": 1580424127
    },
    {
        "content": "<p>we shouldn't regress dev UX in the interim</p>",
        "id": 187039326,
        "sender_full_name": "centril",
        "timestamp": 1580424128
    },
    {
        "content": "<p>my understanding is that we add error codes like very rarely</p>",
        "id": 187039348,
        "sender_full_name": "simulacrum",
        "timestamp": 1580424149
    },
    {
        "content": "<p>I mostly don't add error codes cause I just avoid error codes</p>",
        "id": 187039373,
        "sender_full_name": "centril",
        "timestamp": 1580424184
    },
    {
        "content": "<p>but I fairly frequently do add new errors</p>",
        "id": 187039378,
        "sender_full_name": "centril",
        "timestamp": 1580424190
    },
    {
        "content": "<p>in any case, if we truly want to prevent typos, the way to do it is a global list</p>",
        "id": 187039389,
        "sender_full_name": "simulacrum",
        "timestamp": 1580424209
    },
    {
        "content": "<p>(and compiler or tidy-checking afterwards)</p>",
        "id": 187039409,
        "sender_full_name": "simulacrum",
        "timestamp": 1580424237
    },
    {
        "content": "<p>I think my idealized version would be something like this:</p>\n<ul>\n<li>We have <code>category::error_name</code> based errors. You do not have to register these codes in e.g. a crate that <code>rustc_parser</code> depends upon. For example: <code>syntax::missing_comma</code></li>\n<li>We relate error codes to descriptions dynamically (with files that are loaded at runtime) such that error descriptions can be translated.</li>\n</ul>",
        "id": 187039512,
        "sender_full_name": "centril",
        "timestamp": 1580424323
    },
    {
        "content": "<p>That is, descriptions would not be part of the <code>rustc</code> program</p>",
        "id": 187039561,
        "sender_full_name": "centril",
        "timestamp": 1580424362
    },
    {
        "content": "<p>I don't personally see cause for the latter (it can be in a crate that is a dependency of say, rustc_driver or even <code>rustc</code> the binary crate).</p>\n<p>The first, though, seems to match what I'm thinking with symbols</p>",
        "id": 187039627,
        "sender_full_name": "simulacrum",
        "timestamp": 1580424420
    },
    {
        "content": "<p>Although it is worth noting that an advantage of error codes is that they are short, which makes them stick out less in typical error messages, whereas <code>syntax::missing_comma</code> is not short.</p>",
        "id": 187039649,
        "sender_full_name": "centril",
        "timestamp": 1580424447
    },
    {
        "content": "<p>I think that's in practice something we could fix separately</p>",
        "id": 187039669,
        "sender_full_name": "simulacrum",
        "timestamp": 1580424468
    },
    {
        "content": "<p>e.g. Cargo could learn to not show error codes</p>",
        "id": 187039715,
        "sender_full_name": "simulacrum",
        "timestamp": 1580424485
    },
    {
        "content": "<p>(well, Cargo could learn to tell rustc to not show error codes)</p>",
        "id": 187039724,
        "sender_full_name": "simulacrum",
        "timestamp": 1580424495
    },
    {
        "content": "<p>I still feel like for 99% of errors they're not useful</p>",
        "id": 187039734,
        "sender_full_name": "simulacrum",
        "timestamp": 1580424508
    },
    {
        "content": "<p>(e.g., I have no idea how we can elaborate on missing comma :)</p>",
        "id": 187039749,
        "sender_full_name": "simulacrum",
        "timestamp": 1580424522
    },
    {
        "content": "<p>fwiw, missing comma is a fairly simple error</p>",
        "id": 187039766,
        "sender_full_name": "centril",
        "timestamp": 1580424543
    },
    {
        "content": "<p>there are much more complicated ones in terms of understanding</p>",
        "id": 187039775,
        "sender_full_name": "centril",
        "timestamp": 1580424553
    },
    {
        "content": "<p>(looking at you, async-await errors...)</p>",
        "id": 187039787,
        "sender_full_name": "centril",
        "timestamp": 1580424571
    },
    {
        "content": "<p>sure, yes</p>",
        "id": 187039806,
        "sender_full_name": "simulacrum",
        "timestamp": 1580424593
    },
    {
        "content": "<blockquote>\n<p>I don't personally see cause for the latter (it can be in a crate that is a dependency of say, rustc_driver or even rustc the binary crate).</p>\n</blockquote>\n<p>That's the current state; <code>rustc_error_codes</code> is only a dep of <code>rustc_driver</code></p>",
        "id": 187039907,
        "sender_full_name": "centril",
        "timestamp": 1580424646
    },
    {
        "content": "<p>But moving them to dynamically loaded \"text files\" would be even later \"linking\"</p>",
        "id": 187039923,
        "sender_full_name": "centril",
        "timestamp": 1580424668
    },
    {
        "content": "<p>My point is that in most cases we don't need an error code (so adding it can be costly from compiletime perspective) and when we do, it can be long, because you're (more) likely to look at it.</p>",
        "id": 187039928,
        "sender_full_name": "simulacrum",
        "timestamp": 1580424671
    },
    {
        "content": "<p>such that you can swap out descriptions at runtime</p>",
        "id": 187039934,
        "sender_full_name": "centril",
        "timestamp": 1580424680
    },
    {
        "content": "<p>I am against text files that we load at runtime in rustc, though not the idea in general. If we do that, we might as well just not include them in rustc and have a error code index (HTML/Markdown) like we do today, nixing <code>rustc --explain</code>.</p>",
        "id": 187039964,
        "sender_full_name": "simulacrum",
        "timestamp": 1580424721
    },
    {
        "content": "<p>Haven't we been hearing that error codes are commonly useful?</p>",
        "id": 187040004,
        "sender_full_name": "centril",
        "timestamp": 1580424725
    },
    {
        "content": "<p>We have heard that error codes are useful, yes, but that's not the assertion I'm making</p>",
        "id": 187040026,
        "sender_full_name": "simulacrum",
        "timestamp": 1580424744
    },
    {
        "content": "<p>I don't understand the difference in the distinction</p>",
        "id": 187040054,
        "sender_full_name": "centril",
        "timestamp": 1580424774
    },
    {
        "content": "<p>I'm saying <em>most</em> errors probably don't benefit from one. Those that do, are harder to fix -- i.e., you need to look at the error for a bit -- so having eye travel across a longer error code isn't a problem.</p>",
        "id": 187040073,
        "sender_full_name": "simulacrum",
        "timestamp": 1580424789
    },
    {
        "content": "<p>Hmm; I don't feel confident in making a statistical judgement like that</p>",
        "id": 187040101,
        "sender_full_name": "centril",
        "timestamp": 1580424818
    },
    {
        "content": "<p>Remember, we are biased \"language experts\"</p>",
        "id": 187040125,
        "sender_full_name": "centril",
        "timestamp": 1580424837
    },
    {
        "content": "<p>hm, I don't really see that being related, in the sense that all I'm saying is that <code>error[a very long code that is quite long]: foo</code> isn't great, yes</p>",
        "id": 187040238,
        "sender_full_name": "simulacrum",
        "timestamp": 1580424926
    },
    {
        "content": "<p>but it's also true that such errors are ones you look at for a while anyway</p>",
        "id": 187040252,
        "sender_full_name": "simulacrum",
        "timestamp": 1580424940
    },
    {
        "content": "<p>but okay, let's presume I'm wrong</p>",
        "id": 187040280,
        "sender_full_name": "simulacrum",
        "timestamp": 1580424959
    },
    {
        "content": "<blockquote>\n<p>I am against text files that we load at runtime in rustc, though not the idea in general. If we do that, we might as well just not include them in rustc and have a error code index (HTML/Markdown) like we do today, nixing rustc --explain.</p>\n</blockquote>\n<p>Can you elaborate on why? It seems to me that error descriptions are only ever needed when there's an error, which is a slow path, so perf shouldn't be an issue. Also, what's the plan for internationalization otherwise (maybe there isn't one?)</p>",
        "id": 187040363,
        "sender_full_name": "centril",
        "timestamp": 1580425004
    },
    {
        "content": "<p>Seems we both agree that we need to keep error code length under wraps or they start losing their value <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 187040446,
        "sender_full_name": "centril",
        "timestamp": 1580425073
    },
    {
        "content": "<p>There is no known plan for internationalization, to my knowledge. I think using it as an argument is odd, it's too far out, and there's no known plan.</p>\n<p>It's not about slowness. It's about the fact that \"many files on disk\" fits poorly with (for example) distros</p>",
        "id": 187040507,
        "sender_full_name": "simulacrum",
        "timestamp": 1580425099
    },
    {
        "content": "<p>Finding a naming scheme that achieves that is a tough nut though</p>",
        "id": 187040509,
        "sender_full_name": "centril",
        "timestamp": 1580425105
    },
    {
        "content": "<p>I would be interested in hearing from <span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span>  re. descriptions and translation</p>",
        "id": 187040571,
        "sender_full_name": "centril",
        "timestamp": 1580425167
    },
    {
        "content": "<p>What if we move the error code to a note?</p>",
        "id": 187040585,
        "sender_full_name": "simulacrum",
        "timestamp": 1580425178
    },
    {
        "content": "<p>then it can be a link, even</p>",
        "id": 187040594,
        "sender_full_name": "simulacrum",
        "timestamp": 1580425183
    },
    {
        "content": "<p>or at least length is no longer an issue</p>",
        "id": 187040616,
        "sender_full_name": "simulacrum",
        "timestamp": 1580425197
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> hmm, can you try a sample error from today and adjust it?</p>",
        "id": 187040673,
        "sender_full_name": "centril",
        "timestamp": 1580425208
    },
    {
        "content": "<p>I'm confused</p>",
        "id": 187040679,
        "sender_full_name": "simulacrum",
        "timestamp": 1580425219
    },
    {
        "content": "<p>you mean like paste an example of how it looks?</p>",
        "id": 187040687,
        "sender_full_name": "simulacrum",
        "timestamp": 1580425225
    },
    {
        "content": "<p>and how you would change it with your \"move to a note\"</p>",
        "id": 187040693,
        "sender_full_name": "centril",
        "timestamp": 1580425238
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n --&gt; src/main.rs:4:13\n  |\n3 |     let a = &amp;mut x;\n  |             ------ mutable borrow occurs here\n4 |     let b = &amp;x;\n  |             ^^ immutable borrow occurs here\n5 |     *a = 3;\n  |     ------ mutable borrow later used here\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>error[borrow_check::double_mutable]: cannot borrow `x` as immutable because it is also borrowed as mutable\n --&gt; src/main.rs:4:13\n  |\n3 |     let a = &amp;mut x;\n  |             ------ mutable borrow occurs here\n4 |     let b = &amp;x;\n  |             ^^ immutable borrow occurs here\n5 |     *a = 3;\n  |     ------ mutable borrow later used here\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>error: cannot borrow `x` as immutable because it is also borrowed as mutable\n --&gt; src/main.rs:4:13\n  |\n3 |     let a = &amp;mut x;\n  |             ------ mutable borrow occurs here\n4 |     let b = &amp;x;\n  |             ^^ immutable borrow occurs here\n5 |     *a = 3;\n  |     ------ mutable borrow later used here\n\n    help: longer explanation can be viewed via `rustc --explain borrow_check::double_mutable`\n</pre></div>",
        "id": 187040858,
        "sender_full_name": "simulacrum",
        "timestamp": 1580425363
    },
    {
        "content": "<p><code>error[borrow_check::double_mutable]:</code> could probably be <code>error[borrow::double_mut]:</code></p>",
        "id": 187040984,
        "sender_full_name": "centril",
        "timestamp": 1580425448
    },
    {
        "content": "<p>last one looks good though</p>",
        "id": 187040991,
        "sender_full_name": "centril",
        "timestamp": 1580425456
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>    help: use `rustc --explain borrow_check::double_mutable` for a longer explanation\n    help: longer explanation can be viewed via `rustc --explain borrow_check::double_mutable`\n</pre></div>",
        "id": 187041082,
        "sender_full_name": "centril",
        "timestamp": 1580425522
    },
    {
        "content": "<p>yeah, the last one is my option for 'here is how we avoid all problems with length' basically</p>",
        "id": 187041105,
        "sender_full_name": "simulacrum",
        "timestamp": 1580425556
    },
    {
        "content": "<p>(and get the advantage that it's easier to drop/edit/etc, in theory)</p>",
        "id": 187041157,
        "sender_full_name": "simulacrum",
        "timestamp": 1580425569
    },
    {
        "content": "<p>too bad we can't hyperlink terminal texts lol</p>",
        "id": 187041181,
        "sender_full_name": "centril",
        "timestamp": 1580425600
    },
    {
        "content": "<p>such an outdated medium :D</p>",
        "id": 187041190,
        "sender_full_name": "centril",
        "timestamp": 1580425610
    },
    {
        "content": "<p>hm, well, we can, I think</p>",
        "id": 187041234,
        "sender_full_name": "simulacrum",
        "timestamp": 1580425658
    },
    {
        "content": "<p>or at least on some platforms</p>",
        "id": 187041239,
        "sender_full_name": "simulacrum",
        "timestamp": 1580425662
    },
    {
        "content": "<p>but rustc should probably not be doing that</p>",
        "id": 187041249,
        "sender_full_name": "simulacrum",
        "timestamp": 1580425672
    },
    {
        "content": "<p>So I like your third snippet; I think that's what we should do</p>",
        "id": 187041367,
        "sender_full_name": "centril",
        "timestamp": 1580425767
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> from me fwiw</p>",
        "id": 187041561,
        "sender_full_name": "simulacrum",
        "timestamp": 1580425956
    },
    {
        "content": "<p>that seems like a move we can do fairly independently</p>",
        "id": 187041592,
        "sender_full_name": "centril",
        "timestamp": 1580425986
    },
    {
        "content": "<p>though it will need:</p>\n<ol>\n<li>adjustements to tests so that they don't mention error codes</li>\n<li>p=100 to avoid bitrot :D</li>\n</ol>",
        "id": 187041635,
        "sender_full_name": "centril",
        "timestamp": 1580426019
    },
    {
        "content": "<p>we can do 1. first and separately</p>",
        "id": 187041653,
        "sender_full_name": "centril",
        "timestamp": 1580426034
    },
    {
        "content": "<p>When the code is constant-length its easy to skim past it when its not relevant to you</p>",
        "id": 187050631,
        "sender_full_name": "nagisa",
        "timestamp": 1580435386
    },
    {
        "content": "<p>long names will invariably be… variable</p>",
        "id": 187050649,
        "sender_full_name": "nagisa",
        "timestamp": 1580435402
    },
    {
        "content": "<p>So if I understood correctly, we'll go for string representation as an intermediate step. Then I'll finish my PR.</p>",
        "id": 187901869,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1581418799
    },
    {
        "content": "<p>So I just decided to try to take up this PR, should I hold off on working on it until this change is made (or decided to be not made)? <a href=\"https://github.com/rust-lang/rust/issues/44710#issuecomment-588453311\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/44710#issuecomment-588453311\">https://github.com/rust-lang/rust/issues/44710#issuecomment-588453311</a></p>",
        "id": 188656014,
        "sender_full_name": "Jake Vossen",
        "timestamp": 1582218000
    },
    {
        "content": "<p>I would also be willing to help with the transition if you need it</p>",
        "id": 188656091,
        "sender_full_name": "Jake Vossen",
        "timestamp": 1582218017
    },
    {
        "content": "<p>I think we're not yet ready to move of numeric error codes</p>",
        "id": 188676831,
        "sender_full_name": "simulacrum",
        "timestamp": 1582232185
    },
    {
        "content": "<p>My comment is totally outdated now too...</p>",
        "id": 188676859,
        "sender_full_name": "simulacrum",
        "timestamp": 1582232212
    },
    {
        "content": "<p>Alright, I will go ahead with work on that issue then</p>",
        "id": 188690665,
        "sender_full_name": "Jake Vossen",
        "timestamp": 1582241780
    }
]