[
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span></p>",
        "id": 198496763,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590182782
    },
    {
        "content": "<p>I think part of why I find the new output confusing is because the <code>expected fn(...)</code> and <code>you might want to borrow this type parameter</code> labels overlap</p>",
        "id": 198496800,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590182814
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>LL |     fn get_relation(&amp;self) -&gt; To;\n   |     -----------------------------\n   |     |                         |\n   |     |                         you might want to borrow this type parameter in the trait to make it match the `impl`\n   |     expected `fn(&amp;Article) -&gt; &amp;ProofReader`\n</code></pre></div>",
        "id": 198496813,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590182827
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>LL |     fn get_relation(&amp;self) -&gt; To;\n   |     --                        --\n   |     |                         |\n   |     |                         you might want to borrow this type parameter in the trait to make it match the `impl`\n   |     expected `fn(&amp;Article) -&gt; &amp;ProofReader`\n</code></pre></div>",
        "id": 198496863,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590182863
    },
    {
        "content": "<p>I wonder if even that change would help a bit</p>",
        "id": 198496874,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590182869
    },
    {
        "content": "<p>I would probably remove this highlight, too</p>\n<div class=\"codehilite\"><pre><span></span><code>LL | pub trait HaveRelationship&lt;To&gt; {\n   |                            -- this type parameter might not have a lifetime compatible with the `impl`\n</code></pre></div>",
        "id": 198496949,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590182900
    },
    {
        "content": "<p>because there's really nothing <em>wrong</em> with that type parameter</p>",
        "id": 198496960,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590182908
    },
    {
        "content": "<p>the problem is more about how the function is declared (and perhaps the value for that type parameter given in the impl)</p>",
        "id": 198496984,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590182923
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>LL |     fn get_relation(&amp;self) -&gt; To;\n   |     --                        -- maybe you want `&amp;To` instead?\n   |     |\n   |     trait contains `fn(&amp;Article) -&gt; &amp;ProofReader`\n...\nLL |     fn get_relation(&amp;self) -&gt; &amp;ProofReader {\n   |     ^^ but impl contains`fn(&amp;Article) -&gt; &amp;ProofReader`\n   |\n   = note: expected `fn(&amp;Article) -&gt; &amp;ProofReader`\n              found `fn(&amp;Article) -&gt; &amp;ProofReader`\n   = note: the lifetime requirements from the `trait` could not be satisfied by the `impl`\n   = help: verify the lifetime relationships in the `trait` and `impl` between the `self` argument, the other inputs and its output\n</code></pre></div>",
        "id": 198497109,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590183006
    },
    {
        "content": "<p>hmm, not great, but I'm trying to mix and match between our two :)</p>",
        "id": 198497130,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590183016
    },
    {
        "content": "<p>I guess I have to look at the code to see just how much we've figured out</p>",
        "id": 198497164,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590183043
    },
    {
        "content": "<p>How specific are those issues you're seeing?</p>",
        "id": 198497170,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590183047
    },
    {
        "content": "<p>Is it always in the <em>return value</em></p>",
        "id": 198497177,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590183053
    },
    {
        "content": "<p>if we specialize a bit more we might be able to do</p>",
        "id": 198497178,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590183057
    },
    {
        "content": "<p>something where we focus on the return value:</p>\n<div class=\"codehilite\"><pre><span></span><code>LL |     fn get_relation(&amp;self) -&gt; To;\n   |                               -- trait returns `To` maybe you want `&amp;To` instead?\n...\nLL |     fn get_relation(&amp;self) -&gt; &amp;ProofReader {\n   |                               ^^^^^^^^^^ but impl returns borrowed reference\n   |\n   = note: expected `fn(&amp;Article) -&gt; &amp;ProofReader`\n              found `fn(&amp;Article) -&gt; &amp;ProofReader`\n   = note: the lifetime requirements from the `trait` could not be satisfied by the `impl`\n   = help: verify the lifetime relationships in the `trait` and `impl` between the `self` argument, the other inputs and its output\n</code></pre></div>\n\n\n<p>not quite that phrasing. Anyway, if we looked for a case where you:</p>\n<ul>\n<li>return a reference with a late-bound lifetime</li>\n<li>the trait returns a type parameter</li>\n</ul>\n<p>is that the case you're seeing frequently? It seems like we ought to be able to say something at least <em>somewhat</em> clear</p>",
        "id": 198497363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590183186
    },
    {
        "content": "<p>The reason I pointed at <code>To</code> is because I want to convey that <code>To == &amp;ProofReader</code>, while what you likely want is <code>To == ProofReader</code></p>",
        "id": 198497371,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1590183195
    },
    {
        "content": "<p>ah right, that's the pattern, that the impl has <code>ProofReader&lt;&amp;Foo&gt;</code></p>",
        "id": 198497387,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590183212
    },
    {
        "content": "<p>but that is only a single possible solution</p>",
        "id": 198497394,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1590183216
    },
    {
        "content": "<p>yeah, it's hard to know what people want of course,</p>",
        "id": 198497412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590183237
    },
    {
        "content": "<p>I <em>suspect</em> that they want <code>ProofReader&lt;Foo&gt;</code></p>",
        "id": 198497462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590183252
    },
    {
        "content": "<p>and the <code>&amp;</code> in the trait/impl methods</p>",
        "id": 198497466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590183257
    },
    {
        "content": "<p>but hard to know</p>",
        "id": 198497467,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590183259
    },
    {
        "content": "<p>This is a recent report: <a href=\"https://github.com/rust-lang/rust/issues/72106\">https://github.com/rust-lang/rust/issues/72106</a></p>",
        "id": 198497500,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1590183303
    },
    {
        "content": "<p>so, apart from the challenge of implementing...</p>",
        "id": 198497508,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590183308
    },
    {
        "content": "<p>do you have a list of the issues</p>",
        "id": 198497515,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590183317
    },
    {
        "content": "<p>maybe skimming them might help to understand what users are wanting</p>",
        "id": 198497525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590183326
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span>: <span class=\"nb\">Sized</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">value</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"kt\">str</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">value</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"kt\">str</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">value</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>Basically when implementing something for <code>&amp;T</code> on a trait that originally was meant to be impld in <code>T</code></p>",
        "id": 198497603,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1590183375
    },
    {
        "content": "<p>Yeah.</p>",
        "id": 198497609,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590183380
    },
    {
        "content": "<p>I can't quite tell what the user wanted in this case</p>",
        "id": 198497619,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590183388
    },
    {
        "content": "<p>or <a href=\"https://github.com/rust-lang/rust/issues/66406\">https://github.com/rust-lang/rust/issues/66406</a> :)</p>",
        "id": 198497673,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590183442
    },
    {
        "content": "<p>I guess that in <a href=\"https://github.com/rust-lang/rust/issues/72106\">#72106</a></p>",
        "id": 198497694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590183464
    },
    {
        "content": "<p>they probably wanted</p>",
        "id": 198497695,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590183466
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>impl&lt;&#39;a&gt; Foo for &amp;&#39;a str {\n    fn foo(value: &amp;str) -&gt; &amp;&#39;a str {\n    }\n}\n</code></pre></div>\n\n\n<p>but of course that code can never work</p>",
        "id": 198497750,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590183487
    },
    {
        "content": "<p>in other words, there isn't really a correct fix except for \"use <code>String</code>\" :)</p>",
        "id": 198497765,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590183502
    },
    {
        "content": "<p>well ok or maybe </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">FromSql</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;input</span><span class=\"o\">&gt;</span>: <span class=\"nb\">Sized</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">column_result</span><span class=\"p\">(</span><span class=\"n\">value</span>: <span class=\"nc\">ValueRef</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;input</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">FromSqlResult</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 198497792,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590183534
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;input</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">FromSql</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;input</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"na\">&#39;input</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">column_result</span><span class=\"p\">(</span><span class=\"n\">value</span>: <span class=\"nc\">ValueRef</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;input</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">FromSqlResult</span><span class=\"o\">&lt;&amp;</span><span class=\"na\">&#39;input</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">as_str</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 198497838,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590183562
    },
    {
        "content": "<p>it depends a bit how it's going to be used</p>",
        "id": 198497846,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590183567
    },
    {
        "content": "<p>but I <em>suspect</em> that the latter pattern would lead them down a dead-end</p>",
        "id": 198497860,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590183575
    },
    {
        "content": "<p>so maybe we cna't really suggest for them how to fix, just try to help them understand the <em>problem</em></p>",
        "id": 198497880,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590183587
    },
    {
        "content": "<p>and I think a big part of it is that lifetime elision is triggering at the <em>method</em> level</p>",
        "id": 198497895,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590183594
    },
    {
        "content": "<p>it's not only elision, but its interaction with the lifetimes received from the trait</p>",
        "id": 198497986,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1590183639
    },
    {
        "content": "<p>This was one of the WIP outputs <a href=\"https://user-images.githubusercontent.com/1606434/71327837-80b7b580-24c2-11ea-834f-73e43d1a1116.png\">https://user-images.githubusercontent.com/1606434/71327837-80b7b580-24c2-11ea-834f-73e43d1a1116.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://user-images.githubusercontent.com/1606434/71327837-80b7b580-24c2-11ea-834f-73e43d1a1116.png\"><img src=\"https://user-images.githubusercontent.com/1606434/71327837-80b7b580-24c2-11ea-834f-73e43d1a1116.png\"></a></div>",
        "id": 198498033,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1590183678
    },
    {
        "content": "<p>which worked well _for that specific case_</p>",
        "id": 198498077,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1590183705
    },
    {
        "content": "<p>for the last case trying to apply the same approach it would look like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span>: <span class=\"nb\">Sized</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">value</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">value</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">value</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 198498192,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1590183775
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>pub trait FromSql: Sized {\n    fn column_result(value: ValueRef&lt;&#39;_&gt;) -&gt; FromSqlResult&lt;Self&gt;;\n}\n\nimpl FromSql for &amp;str {\n                 ---- the trait signature returns data borrowed from here\n    fn column_result(value: ValueRef&lt;&#39;_&gt;) -&gt; FromSqlResult&lt;&amp;str&gt; {\n                                                           ^ defaults to data borrowed from `value`\n        value.as_str()\n    }\n}\n</code></pre></div>",
        "id": 198498235,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590183814
    },
    {
        "content": "<p>heh I don't <em>quite</em> know how easy/hard that would be, I'm just noodling  I guess</p>",
        "id": 198498245,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590183826
    },
    {
        "content": "<p>with a help being something like</p>\n<p>= help: either alter the trait to return borrowed data<br>\n= help: or try adding explicit lifetime names</p>",
        "id": 198498314,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590183851
    },
    {
        "content": "<p>honestly probably just \"try adding explicit lifetime names\" is the best advice we can give people</p>",
        "id": 198498328,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590183862
    },
    {
        "content": "<p><span aria-label=\"crab\" class=\"emoji emoji-1f980\" role=\"img\" title=\"crab\">:crab:</span>ZWJ<span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span>‍♀️</p>",
        "id": 198498393,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1590183920
    },
    {
        "content": "<p>...</p>",
        "id": 198498405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590183930
    },
    {
        "content": "<p>Should we keep the \"expected/found\" format?<br>\nIf we do, to avoid the issue with overlapping labels I can move the \"borrow this\" to its own <code>note</code></p>",
        "id": 198498573,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1590184025
    },
    {
        "content": "<p>it seems like a key part of the confusion</p>",
        "id": 198498699,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590184100
    },
    {
        "content": "<p>is also that those two strings are equal</p>",
        "id": 198498707,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590184106
    },
    {
        "content": "<p>And we'd need to change \"you might want to borrow this type parameter in the trait to make it match the <code>impl</code>\" to something closer to \"consider borrowing this type parameter\"</p>",
        "id": 198498728,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1590184120
    },
    {
        "content": "<p>I really feel like we want to somehow explain that the signature as written is causing it to borrow data frm one of the arguments</p>",
        "id": 198498810,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590184179
    },
    {
        "content": "<p>yep, it's also part of a larger problem of the lifetime names being local to the trait/impl<br>\nyou can easily swap them by accident and get weird lifetime errors</p>",
        "id": 198498814,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1590184181
    },
    {
        "content": "<p>though how <em>exactly</em> to word that</p>",
        "id": 198498881,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590184204
    },
    {
        "content": "<p>it seems like something we ought to be able to detect though</p>",
        "id": 198498891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590184218
    },
    {
        "content": "<p>What about</p>\n<div class=\"codehilite\"><pre><span></span><code>error: `impl` item signature doesn&#39;t match `trait` item signature\n  --&gt; $DIR/trait-param-without-lifetime-constraint.rs:14:5\n   |\nLL |     fn get_relation(&amp;self) -&gt; To;\n   |     ----------------------------- expected `fn(&amp;Article) -&gt; &amp;ProofReader`\n...\nLL |     fn get_relation(&amp;self) -&gt; &amp;ProofReader {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found `fn(&amp;Article) -&gt; &amp;ProofReader`\n   |\n   = note: expected `fn(&amp;Article) -&gt; &amp;ProofReader`\n              found `fn(&amp;Article) -&gt; &amp;ProofReader`\nhelp: the lifetime requirements from the `impl` do not correspond to the requirements in the `trait`\n   |\nLL |     fn get_relation(&amp;self) -&gt; To;\n   |                               -- consider borrowing this type parameter in the trait\n</code></pre></div>",
        "id": 198499021,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1590184318
    },
    {
        "content": "<p>definitely an improvement</p>",
        "id": 198499094,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590184347
    },
    {
        "content": "<p>I guess if you wanted to land that for now I'd r+</p>",
        "id": 198499109,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590184359
    },
    {
        "content": "<p>and we can see what happens to the bug reports ;)</p>",
        "id": 198499117,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590184365
    },
    {
        "content": "<p>I'm pretty happy with the progress we've made over the last few years, there's still more to fix <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 198499149,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1590184393
    }
]