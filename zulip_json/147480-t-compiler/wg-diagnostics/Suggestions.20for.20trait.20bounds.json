[
    {
        "content": "<p>I took at stab at resolving <a href=\"https://github.com/rust-lang/rust/issues/93927\">#93927</a> and a few related issues. The issue at hand is there are multiple code paths for generating trait bounds suggestions. In the specific case of binary operators, there's a code path with more helpful / specific suggestions (e.g. <code>A: Add&lt;B, Output = C&gt;</code> instead of just <code>A: Add&lt;_&gt;</code>). However the more specific suggestion is incorrect in a number of cases, and using the more common suggestion code path is correct (but less helpful).</p>\n<ol>\n<li>Does my proposed fix of just using the main suggestion code path seem reasonable? </li>\n<li>Should I look at moving the op-specific logic from <code>suggest_constraining_param</code> into <code>suggest_restricting_param_bound</code>, or is anyone else currently looking at making better such suggestions?</li>\n</ol>",
        "id": 272011019,
        "sender_full_name": "Will Crichton",
        "timestamp": 1644947008
    },
    {
        "content": "<p>I think both 1. and 2. are good,  but as always depends on the details. Can you open a PR with 1. (Since you seem to already have implemented it) so we can see the ui test fallout?</p>",
        "id": 272013729,
        "sender_full_name": "oli",
        "timestamp": 1644948180
    },
    {
        "content": "<p>Ok, I have filed a PR. <a href=\"https://github.com/rust-lang/rust/pull/94034/\">https://github.com/rust-lang/rust/pull/94034/</a></p>\n<p>I believe that 2. can be addressed by improving <code>FnCtxt::lookup_op_method</code> and <code>FnCtxt::obligation_for_method</code> to include an <code>Output=</code> bound in the generated obligation. But I'm not actually sure how that works mechanically -- how do you represent associated type equality bounds in a <code>SubstsRef</code>?</p>",
        "id": 272050072,
        "sender_full_name": "Will Crichton",
        "timestamp": 1644965740
    },
    {
        "content": "<p>Associated type bounds are their own obligation: PredicateKind::Projection</p>",
        "id": 272050584,
        "sender_full_name": "oli",
        "timestamp": 1644966031
    }
]