[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> there is definitely a plan for internationalization :)</p>",
        "id": 187042515,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1580426659
    },
    {
        "content": "<p>is that plan concrete implementation wise though? My impression is that we have broad strokes (e.g., maybe even what platform to use) but not the details.</p>",
        "id": 187042568,
        "sender_full_name": "simulacrum",
        "timestamp": 1580426720
    },
    {
        "content": "<p>Once we have diagnostics structs as listed in the issue then it should be easy ish to add i18n based on various json files or something that key off of the text error code or something</p>",
        "id": 187042639,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1580426767
    },
    {
        "content": "<p>This assumes there's a human-understandable \"error code\" like <code>object-safety-generics</code> that we can key off of but if we decide against codes then we can still use this internally</p>",
        "id": 187042675,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1580426816
    },
    {
        "content": "<p>(split off into new topic)</p>",
        "id": 187042687,
        "sender_full_name": "simulacrum",
        "timestamp": 1580426836
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> there are some open questions but in this case I think it's _mostly_ clear implementation wise what we can do</p>",
        "id": 187042703,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1580426857
    },
    {
        "content": "<p>We don't even necessarily need to pull in Fluent</p>",
        "id": 187042712,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1580426868
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> hm, okay</p>",
        "id": 187042769,
        "sender_full_name": "simulacrum",
        "timestamp": 1580426904
    },
    {
        "content": "<p>that's farther than I thought we were</p>",
        "id": 187042775,
        "sender_full_name": "simulacrum",
        "timestamp": 1580426918
    },
    {
        "content": "<p>Error i18n is blocked on y'all implementing the diagnostics derive</p>",
        "id": 187042797,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1580426949
    },
    {
        "content": "<p>error index i18n isn't blocked on anything someone just needs to do it, also it would make sense to hold off until after we figure out error codes</p>",
        "id": 187042829,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1580426985
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> note that this is only a plan, no implementation</p>",
        "id": 187042842,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1580427000
    },
    {
        "content": "<p>But please loop me in on PRs implementing the diagnostics derive so I can ensure it's compatible with this</p>",
        "id": 187042910,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1580427022
    },
    {
        "content": "<p>I was going to do it myself but I keep not having time lol</p>",
        "id": 187042924,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1580427037
    },
    {
        "content": "<p>yeah, this also all sounds mostly compatible</p>",
        "id": 187042984,
        "sender_full_name": "simulacrum",
        "timestamp": 1580427097
    },
    {
        "content": "<p>I continue to be skeptical about the \"many files on disk\", but of course the final artifacts can bundle things up if needed</p>",
        "id": 187043067,
        "sender_full_name": "simulacrum",
        "timestamp": 1580427146
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> did you have thoughts re. translation of error descriptions though? (i.e. the <code>.md</code> files we have today)</p>",
        "id": 187043107,
        "sender_full_name": "centril",
        "timestamp": 1580427183
    },
    {
        "content": "<p>these: <a href=\"https://github.com/rust-lang/rust/tree/master/src/librustc_error_codes/error_codes\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/tree/master/src/librustc_error_codes/error_codes\">https://github.com/rust-lang/rust/tree/master/src/librustc_error_codes/error_codes</a></p>",
        "id": 187043126,
        "sender_full_name": "centril",
        "timestamp": 1580427217
    },
    {
        "content": "<p>As long as there's something to key off of this is quite easy.</p>",
        "id": 187043283,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1580427356
    },
    {
        "content": "<p>Again, some open questions.</p>",
        "id": 187043328,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1580427368
    },
    {
        "content": "<p>it's basically just a string code that is linked up via a rustc_driver hashmap to descriptions</p>",
        "id": 187043354,
        "sender_full_name": "centril",
        "timestamp": 1580427403
    },
    {
        "content": "<p>it's very isolated</p>",
        "id": 187043359,
        "sender_full_name": "centril",
        "timestamp": 1580427415
    },
    {
        "content": "<p>but I was wondering re. the linking aspect; e.g. how do we store the translations and how does rustc load them?</p>",
        "id": 187043394,
        "sender_full_name": "centril",
        "timestamp": 1580427458
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_errors/registry/struct.Registry.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_errors/registry/struct.Registry.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_errors/registry/struct.Registry.html</a></p>",
        "id": 187043478,
        "sender_full_name": "centril",
        "timestamp": 1580427527
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> rustup component, basically json files or something. which specific format depends on what works with Pontoon and what can support the detail we need. I think for error codes the json format is fine.</p>",
        "id": 187043600,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1580427634
    },
    {
        "content": "<p>Could also bake it in, but at least to start with a rustup component makes sense to me</p>",
        "id": 187043615,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1580427663
    },
    {
        "content": "<p>For diagnostics we may need to use a format a bit more powerful than json</p>",
        "id": 187043624,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1580427683
    },
    {
        "content": "<p>Maybe.</p>",
        "id": 187043627,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1580427692
    },
    {
        "content": "<p>Either way these files are never hand generated</p>",
        "id": 187043635,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1580427701
    },
    {
        "content": "<p>Er, handwritten</p>",
        "id": 187043644,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1580427711
    },
    {
        "content": "<p>Or read by humans.</p>",
        "id": 187043687,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1580427724
    },
    {
        "content": "<p>Error descriptions are basically just a long string, so it requires nothing technically complicated beyond that I think</p>",
        "id": 187043702,
        "sender_full_name": "centril",
        "timestamp": 1580427739
    },
    {
        "content": "<p>I continue to think the linking aspect is not too interesting :)</p>",
        "id": 187043704,
        "sender_full_name": "simulacrum",
        "timestamp": 1580427742
    },
    {
        "content": "<p>like, we can definitely do it</p>",
        "id": 187043710,
        "sender_full_name": "simulacrum",
        "timestamp": 1580427750
    },
    {
        "content": "<p>I personally favor the existing solution as being just fine</p>",
        "id": 187043726,
        "sender_full_name": "simulacrum",
        "timestamp": 1580427768
    },
    {
        "content": "<p>I agree in the sense that it's not complicated</p>",
        "id": 187043736,
        "sender_full_name": "centril",
        "timestamp": 1580427775
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span>  I suspect the error descriptions are the most readily translatable asset we have</p>",
        "id": 187043759,
        "sender_full_name": "centril",
        "timestamp": 1580427798
    },
    {
        "content": "<p>since it's so simple</p>",
        "id": 187043764,
        "sender_full_name": "centril",
        "timestamp": 1580427801
    },
    {
        "content": "<p>Yes those are the easiest</p>",
        "id": 187043783,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1580427823
    },
    {
        "content": "<p>basically you need to swap out a string for another string</p>",
        "id": 187043786,
        "sender_full_name": "centril",
        "timestamp": 1580427827
    },
    {
        "content": "<p>I actually started doing them at one point lol and then left it</p>",
        "id": 187043790,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1580427834
    },
    {
        "content": "<p>It's not hard tbh</p>",
        "id": 187043832,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1580427843
    },
    {
        "content": "<p>Like if you want me to jot down a full plan in an issue I can</p>",
        "id": 187043848,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1580427860
    },
    {
        "content": "<p>yea; if we setup some infra I bet people will come and do it</p>",
        "id": 187043850,
        "sender_full_name": "centril",
        "timestamp": 1580427864
    },
    {
        "content": "<p>there's a bunch of initial work that needs to be done</p>",
        "id": 187043863,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1580427878
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> in rustup?</p>",
        "id": 187043885,
        "sender_full_name": "centril",
        "timestamp": 1580427909
    },
    {
        "content": "<p>Okay one question: presumably y'all still want to write these as MD files yes? So we should be generating the English json files via some step which Pontoon can then consume</p>",
        "id": 187043903,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1580427928
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> also in rustc so it knows how to load these etc</p>",
        "id": 187043912,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1580427942
    },
    {
        "content": "<p>For all of this there are two options: forcing rustc users to write things in the json/whatever format, or using what we use today and having an autogenrtation step</p>",
        "id": 187043991,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1580427994
    },
    {
        "content": "<p>MD files is a pretty new (but nice!) thing -- they used to be hard-coded strings in the <code>errors.rs</code> files</p>",
        "id": 187043992,
        "sender_full_name": "centril",
        "timestamp": 1580427998
    },
    {
        "content": "<p>Both work, it's up to y'all</p>",
        "id": 187043996,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1580428001
    },
    {
        "content": "<p>I know! I wrote half of them :)</p>",
        "id": 187044003,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1580428011
    },
    {
        "content": "<p>:D</p>",
        "id": 187044010,
        "sender_full_name": "centril",
        "timestamp": 1580428015
    },
    {
        "content": "<blockquote>\n<p>also in rustc so it knows how to load these etc</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span>  could we start with a dumb <code>-Z</code> flag perhaps?</p>",
        "id": 187044025,
        "sender_full_name": "centril",
        "timestamp": 1580428028
    },
    {
        "content": "<p>and no rustup support initially</p>",
        "id": 187044046,
        "sender_full_name": "centril",
        "timestamp": 1580428054
    },
    {
        "content": "<p>Yes</p>",
        "id": 187044049,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1580428058
    },
    {
        "content": "<p>If y'all want I can file a bunch of concrete issues</p>",
        "id": 187044072,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1580428078
    },
    {
        "content": "<p>And a meta issue and a plan or whatever</p>",
        "id": 187044114,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1580428084
    },
    {
        "content": "<p>sounds helpful <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 187044120,
        "sender_full_name": "centril",
        "timestamp": 1580428090
    },
    {
        "content": "<p>Don't have bandwidth to do this myself but I can watch and help</p>",
        "id": 187044127,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1580428094
    },
    {
        "content": "<p>I was mostly waiting for diagnostics derive to happen first</p>",
        "id": 187044135,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1580428109
    },
    {
        "content": "<p>For short diagnostics we may not be able to have a sensible generation step and diagnostics writers may need to write text for the diagnostic in a file fwiw</p>",
        "id": 187044199,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1580428178
    },
    {
        "content": "<p>But maybe not</p>",
        "id": 187044275,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1580428227
    },
    {
        "content": "<p>maybe we can hard-code the English strings in the struct to make the diagnostics dev UX less \"jumpy\"</p>",
        "id": 187044295,
        "sender_full_name": "centril",
        "timestamp": 1580428263
    },
    {
        "content": "<p>also to facilitate the move</p>",
        "id": 187044300,
        "sender_full_name": "centril",
        "timestamp": 1580428270
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> we can hardcode provided there's a way to extract it in a structured format, which is trickier for structs</p>",
        "id": 187044396,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1580428336
    },
    {
        "content": "<p>That said it's possible to just use a basic parse script for this. Annoying</p>",
        "id": 187044411,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1580428361
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> I'm interested in implementing diagnostic translation and pushing forward with any prerequisite work that needs to be done for that (e.g. more development on the diagnostics derive, or getting it used more widely, etc.). </p>\n<p>I've read as much of the previous discussion about this as I've been able to find here on Zulip and on internals and using Fluent as <span class=\"user-mention silent\" data-user-id=\"132040\">Manish Goregaokar</span>  has suggested seems like the right approach and I'd be happy to work on it - myself or in collaboration with <span class=\"user-mention silent\" data-user-id=\"132040\">Manish Goregaokar</span> (if you're still interested in doing implementation and have the bandwidth).</p>\n<p>I'm pretty sure our current status is that we have no translation and we've got a diagnostics-derive that's used in one or two diagnostics, but I haven't really kept up with whether we're still looking to go down a diagnostics-derive route (not seen much recent discussion about longer-term plans for diagnostic infrastructure).</p>",
        "id": 276138582,
        "sender_full_name": "davidtwco",
        "timestamp": 1647918024
    },
    {
        "content": "<p>I don't have time to work on this but I can provide guidance</p>",
        "id": 276138630,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1647918068
    },
    {
        "content": "<p>I think yes, the plan is that everything switches to the diagnostics derive, which is then augmented to allow its strings to be Fluent strings</p>",
        "id": 276138652,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1647918102
    },
    {
        "content": "<p>I would love to see this done but am super time constrained at this time. I can help with reviews, of course.</p>",
        "id": 276138672,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1647918122
    },
    {
        "content": "<p>Would it be necessary to have the derives in place? Or just harder until then?</p>",
        "id": 276138737,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1647918223
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119031\">Esteban Küber</span> <a href=\"#narrow/stream/147480-t-compiler.2Fwg-diagnostics/topic/translation/near/276138737\">said</a>:</p>\n<blockquote>\n<p>Would it be necessary to have the derives in place? Or just harder until then?</p>\n</blockquote>\n<p>Based on my what little I've read about Fluent and how we'd want to structure our diagnostic messages to work with it: I think it could be possible to stick with something like the current diagnostic API and replace the current message strings with corresponding identifiers (e.g. \"lifetime doesn't live long enough\" -&gt; <code>diag::lifetime_does_not_live_long_enough</code>). Each of these would map to Fluent identifiers.</p>\n<p>I think the primary difficulty would just be providing a way to give the additional information that would normally be string interpolation - type names, names for language concepts (\"this function/struct/enum is..\") or whether something is plural, etc. I can think of some ways to do this so I don't think it would be a problem. Some diagnostics are going to be easier than others depending on how incrementally we build up a error message but that was always going to be a issue.</p>\n<p>I think the derive makes parts of that a little easier just because the struct fields are basically bundling all that additional information together by default. But I wouldn't be surprised if the derive could be <em>more</em> work because it's a lot more refactoring of where we emit diagnostics and the structure of that code, but I don't mind doing it if it's what we want for diagnostics longer-term anyway (i.e. there are other additional benefits we could derive from it (pun intended)).</p>",
        "id": 276139457,
        "sender_full_name": "davidtwco",
        "timestamp": 1647919153
    },
    {
        "content": "<p>One thing that will be more painful is that we will have to expand the code for every pluralization combination, being way more explicit than we are now.</p>",
        "id": 276143622,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1647924807
    },
    {
        "content": "<p>I'm not sure what you mean by expand the code - I expect that pluralization would look something like computing a <code>numberOfElements</code> variable (or whatever makes sense in the context) and that being provided as one of the \"variables\" to the diagnostic, so that some Fluent like that below would work?</p>\n<div class=\"codehilite\" data-code-language=\"fluent\"><pre><span></span><code>enum-variant-suggestion-note =\n    there is an enum variant {$suggestionVariant}{$otherVariantCount -&gt;\n        [one] and one other\n       *[other] and {$otherVariantCount} others\n    }\n</code></pre></div>\n<p>I think we'd do less handling of plurals in the compiler than we do now, I think we'd more often just be providing a count or something like that to Fluent and it would do that part?</p>",
        "id": 276145321,
        "sender_full_name": "davidtwco",
        "timestamp": 1647927007
    },
    {
        "content": "<p>I think we should indeed focus on the derives. Expanding the usage of those derives only after we have translation set up.</p>",
        "id": 276146416,
        "sender_full_name": "oli",
        "timestamp": 1647928530
    },
    {
        "content": "<p>We can punt on json formats and rustc interface discussions by just letting you do whatever you feel works and a -Z flag as suggested earlier in the thread</p>",
        "id": 276146637,
        "sender_full_name": "oli",
        "timestamp": 1647928816
    },
    {
        "content": "<p>If you can make use of existing data formats that some tools are capable of processing, that would be helpful tho</p>",
        "id": 276146720,
        "sender_full_name": "oli",
        "timestamp": 1647928859
    },
    {
        "content": "<p>Also maybe step 0 would be to write a -Z flag that dumps all diagnostic structs' information in a way that existing tools can use</p>",
        "id": 276146788,
        "sender_full_name": "oli",
        "timestamp": 1647928922
    },
    {
        "content": "<p>Alright, I'll do some experimentation on implementing translation as part of the derive machinery and see what that ends up looking like and we can discuss from there.</p>",
        "id": 276147152,
        "sender_full_name": "davidtwco",
        "timestamp": 1647929367
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> i think the derives give us the structure we need anyway</p>",
        "id": 276211353,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1647964772
    },
    {
        "content": "<p>like, the work of splitting it into strings with inputs is needed there anyway</p>",
        "id": 276211392,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1647964787
    },
    {
        "content": "<p>Fair</p>",
        "id": 276217062,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1647966855
    },
    {
        "content": "<p><strong>Progress update:</strong> </p>\n<p>In my local changes: all of the diagnostic APIs can now take a identifier for a Fluent message instead of just a error message, and if they do so, then that will go through Fluent translation (mapping it to the actual string from the Fluent resource). I always load the English Fluent resource and that acts as a fallback if the user doesn't provide a preferred locale. That means that we can have partially complete translations and we'll fallback on English when we are missing a message. I haven't provided a mechanism for the user to provide a preferred locale and for the compiler to load that yet, so it just always uses the fallback right now (i.e. the same output as we currently have). </p>\n<p>I have to modify the normal diagnostic API in order to change the diagnostic derive because it just generates calls to the normal API, so it has to be able to understand translatable diagnostics in some way. I've added a concept of \"args\" to a diagnostic, which will be how we'll provide the variables to Fluent that would normally be interpolated. I intend for the fields of the struct to just all be provided as arguments by default, which should make the diagnostic derive quite ergonomic.</p>\n<p>So, this is roughly what we'd have right now:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(SessionDiagnostic)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[error = </span><span class=\"s\">\"E0062\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">FieldMultiplySpecifiedInInitializer</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[message = </span><span class=\"s\">\"field `{ident}` specified more than once\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[label = </span><span class=\"s\">\"used more than once\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">span</span>: <span class=\"nc\">Span</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[label = </span><span class=\"s\">\"first use of `{ident}`\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">prev_span</span>: <span class=\"nc\">Span</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">ident</span>: <span class=\"nc\">Ident</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>which translates to..</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ident</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">struct_span_err</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">sess</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">span</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E0062</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"field `{ident}` specified more than once\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">span_label</span><span class=\"p\">(</span><span class=\"n\">span</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"used more than once\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">span_label</span><span class=\"p\">(</span><span class=\"n\">prev_span</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"first use of `{ident}`\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>And what we'd end up with is:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(SessionDiagnostic)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[error = </span><span class=\"s\">\"E0062\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"cp\">#[slug = </span><span class=\"s\">\"typeck-field-multiply-specified-in-initializer\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">FieldMultiplySpecifiedInInitializer</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[message]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[label]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">span</span>: <span class=\"nc\">Span</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[label = </span><span class=\"s\">\"previous-use-label\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">prev_span</span>: <span class=\"nc\">Span</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">ident</span>: <span class=\"nc\">Ident</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>which translates to..</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ident</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">struct_span_err</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">sess</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">span</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E0062</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">DiagnosticMessage</span>::<span class=\"n\">fluent</span><span class=\"p\">(</span><span class=\"s\">\"typeck-field-multiply-specified-in-initializer\"</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">span_label</span><span class=\"p\">(</span><span class=\"n\">span</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">DiagnosticMessage</span>::<span class=\"n\">fluent_attr</span><span class=\"p\">(</span><span class=\"s\">\"typeck-field-multiply-specified-in-initializer\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"label\"</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">span_label</span><span class=\"p\">(</span><span class=\"n\">prev_span</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">DiagnosticMessage</span>::<span class=\"n\">fluent_attr</span><span class=\"p\">(</span><span class=\"s\">\"typeck-field-multiply-specified-in-initializer\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"previous-use-label\"</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">arg</span><span class=\"p\">(</span><span class=\"s\">\"ident\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ident</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>with the following Fluent (args like <code>ident</code> are scoped to the individual diagnostic, they don't leak to others):</p>\n<div class=\"codehilite\" data-code-language=\"fluent\"><pre><span></span><code>typeck-field-multiply-specified-in-initializer = {$ident} specified more than once\n    .label = used more than once\n    .previous-use-label = first use of {$ident}\n</code></pre></div>\n<p>(note, help, suggestion, etc will all be attributes on the primary Fluent message, by default with <code>.note</code>, <code>.help</code>, <code>.suggestion</code> names, but the attribute can give it another name if there are multiple of one kind of subdiagnostic)</p>\n<p>This should be sufficient to enable all of the flexibility that translations require and we should be able to simplify some of the APIs that the macro generates once we have only translated diagnostics (<code>DiagnosticMessage</code> is necessary to support both the don't-translate-me and translate-me strings).  We could also add <code>#[no_arg]</code> attributes if we didn't want a field provided to Fluent. If we like it, then I'd probably make this the only way that the diagnostic derive works - you can only implement translatable diagnostics when using the derive.</p>\n<p>We've got a lot of errors that don't have codes, I think that's less desirable when there are translations because you want to be able to search for an error in a language-independent way, and the current codes are a bit of a pain to add, so I've been planning to go about this in a way that would make the slugs potential successors to error codes in future if we wanted that.</p>\n<p>I haven't actually made changes to the diagnostic derive yet, but that's what I'll work on next. Then I'll add a way to load a Fluent file via <code>-Z</code> flag that I'll use for some tests. That's probably sufficient for landing an initial patch, because then we can start parallelizing the switching to diagnostic derive everywhere if there aren't objections to it. We'll probably end up having some small rework as we learn more about how we need to provide the variables to Fluent for translations to work, but I suspect that's inevitable, shouldn't be anything too major. </p>\n<p>After all that, I'll start thinking about how we want to ship/load translations so that I can implement that part, and then we can think about setting up infrastructure for doing translations and updating them before releases, etc (in collaboration with the relevant teams, etc - that's a while away anyway).  We'll also need to work out how this affects downstream projects like rustfmt, clippy and rustdoc who use the diagnostic infrastructure of rustc in some places.</p>\n<p>If there are other changes to diagnostics (like changes to error codes) that we want to do, then this might be a good opportunity to do them if we're going to try switch to the derive.</p>\n<p>I haven't done anything with standard data formats or dumping the diagnostic struct informations because I don't think it's necessary for this, but that's something we can still do in future.</p>",
        "id": 276718206,
        "sender_full_name": "davidtwco",
        "timestamp": 1648290077
    },
    {
        "content": "<p>There are a lot of errors without error codes. There was some previous discussion on replacing error codes with stringly names like your slugs. Maybe for fluent we should just ignore error codes entirely and instead document the slug together with the error code?</p>",
        "id": 276719418,
        "sender_full_name": "oli",
        "timestamp": 1648291875
    },
    {
        "content": "<p>On the derive part, you could generate the slug from the struct name, as it seems like those will be very redundant in a lot of cases</p>",
        "id": 276719467,
        "sender_full_name": "oli",
        "timestamp": 1648291925
    },
    {
        "content": "<p>There are a lot of diagnostics API calls, can we do your changes in a way that allow incremental introduction? Or did you make it generic to just keep accepting the previous calls?</p>",
        "id": 276719650,
        "sender_full_name": "oli",
        "timestamp": 1648292240
    },
    {
        "content": "<p>I was aware of the previous discussion about error slugs, I think that makes sense as an approach, so could do a switch to slugs at the same time as doing translation if we wanted and we could also generate the slugs from the type names (though we probably want a prefix like <code>typeck</code> or <code>borrowck</code>). </p>\n<p>I accept all previous calls right now, nothing has changed for existing diagnostics. We could add translation to them one-by-one right now by rewriting them like in the example above or by changing them to the diagnostic derive (once I’ve made the necessary changes to the derive). My expectation has been that we’ll do it incrementally using the derive.</p>",
        "id": 276722679,
        "sender_full_name": "davidtwco",
        "timestamp": 1648296203
    },
    {
        "content": "<p>I haven’t tried to make the API ergonomic for Fluent diagnostics because a) that’s harder to do while keeping all existing diagnostic calls working and b) I assumed we’d be generating them from the derive primarily anyway.</p>",
        "id": 276722772,
        "sender_full_name": "davidtwco",
        "timestamp": 1648296347
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> amazing! Do you think it is good to require people to name their attrs manually or do you think we can get away with <code>typeck-field-multiply-blah.span.message, .span.label, .prev_span.label</code> (etc). I prefer what you have now (explicit names are good, they represent a stability contract with the fluent files). but worth calling out</p>\n<p>and yeah, as <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> said i think we want to eventually have stringy slug names; and I agree with his suggestion: ignore the codes; use stringy slug names, as if we were working in the awesome new world of stringy codes. At _some point_ we do a pass over the stringy codes and make sure they have good names, and cut over to them (with some JS in the error index that performs redirects).</p>",
        "id": 276799325,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1648403357
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> As far as ergonomics are concerned I think it's okay to declare that Fluent diagnostics _must_ use the derive, and we can see what edge cases pop up.</p>",
        "id": 276799337,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1648403399
    },
    {
        "content": "<p>Oh, also, as far as the actual mechanism of translation/etc, I suggest we have a separate repo that is linked to <a href=\"http://pontoon.rust-lang.org\">pontoon.rust-lang.org</a>, and that repo contains the translated stuff, which rust-lang/rust subtrees, and we perform periodic syncs. Pontoon likes to make commits directly so it may not be great to work off of rust-lang/rust, though I suppose we could have it commit to a branch.</p>\n<p>From the technical side all we need to make this work is having English .ftl files in a folder somewhere.</p>\n<p>We'd have to build more robust translation teams though. The website teams are smallish and harder to contact, I suspect we may need to make a separate zulip for translators so we can have language channels and a way to contact them when there's new stuff to be translated</p>",
        "id": 276799453,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1648403532
    },
    {
        "content": "<p>We'll likely have to resurrect the l10n team under community to manage translators</p>",
        "id": 276799557,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1648403680
    },
    {
        "content": "<p>For _distribution_ folks will have to figure stuff out. We probably can just ship all the FTL files bundled into source if we want.</p>",
        "id": 276799581,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1648403728
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132040\">Manish Goregaokar</span> <a href=\"#narrow/stream/147480-t-compiler.2Fwg-diagnostics/topic/translation/near/276799325\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116107\">davidtwco</span> amazing! Do you think it is good to require people to name their attrs manually or do you think we can get away with <code>typeck-field-multiply-blah.span.message, .span.label, .prev_span.label</code> (etc). I prefer what you have now (explicit names are good, they represent a stability contract with the fluent files). but worth calling out</p>\n</blockquote>\n<p>I like having default Fluent attributes (<code>.label</code>, <code>.note</code>, <code>.help</code>, <code>.suggestion</code>) that map to derive attributes (<code>#[label]</code>, <code>#[note]</code>, <code>#[help]</code>, <code>#[suggestion]</code>) with the ability to provide a different attribute name when multiple subdiagnostics of the same kind are required. We could implement it so that it looks for Fluent attributes of the form <code>{diagnostic-slug}.{span-field-name}.{subdiag-kind}</code> automatically, but it would be a little bit more work and at least right now, having not written any translatable diagnostics with the derive, I think I like having the explicitness a little more.</p>",
        "id": 276818606,
        "sender_full_name": "davidtwco",
        "timestamp": 1648431417
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> sounds good.</p>",
        "id": 276884272,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1648478945
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/95512\">https://github.com/rust-lang/rust/pull/95512</a> is a draft pull request with the translation infrastructure</p>",
        "id": 277271882,
        "sender_full_name": "davidtwco",
        "timestamp": 1648729333
    },
    {
        "content": "<p>It needs a rebase but it's late and I'm tired so I'll do that tomorrow.</p>",
        "id": 277271896,
        "sender_full_name": "davidtwco",
        "timestamp": 1648729344
    },
    {
        "content": "<p>@davidtwco i need to get back to it but by my preliminary pass lgtm</p>",
        "id": 277553497,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1648936016
    },
    {
        "content": "<p>Opened a dev guide PR to update the page it had on <code>SessionDiagnostic</code>: <a href=\"https://github.com/rust-lang/rustc-dev-guide/pull/1333\">https://github.com/rust-lang/rustc-dev-guide/pull/1333</a></p>",
        "id": 277684918,
        "sender_full_name": "davidtwco",
        "timestamp": 1649051549
    },
    {
        "content": "<p>I've not written too much about the best practices on what sorts of information should be in fields so that the diagnostic can actually be translated because I don't have much experience with that first-hand yet, so would appreciate comments along those lines.</p>",
        "id": 277684937,
        "sender_full_name": "davidtwco",
        "timestamp": 1649051602
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/95512\">#95512</a> has landed, <a href=\"https://github.com/rust-lang/dev-guide/issues/1333\">dev-guide#1333</a> has been updated now following that, going to make a pull request addressing some comments that <span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> made just as the PR was being merged and then I'll probably port some more diagnostics to <code>SessionDiagnostic</code> and see what pain points that runs into.</p>",
        "id": 277969681,
        "sender_full_name": "davidtwco",
        "timestamp": 1649213741
    }
]