[
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> So when you run \"cargo build\" from a place other than the workspace root, the diagnostics print file paths that are relative to the root, whcih means terminal stuff like \"click on the file to open it in your editor\" doesn't work. What do folks think about making it so that cargo passes a relative path to rustc, one that can be pathdiff'd before printing diagnostics? I feel like there should be an issue for this already but I can't find one, so I'm asking here first</p>",
        "id": 252502661,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1631123026
    },
    {
        "content": "<p>I think it's reasonable to add, but wouldn't personally love it because my terminal/editor deals with it (it does global path search instead of assuming the path is rooted where you are) so it would look longer for no personal benefit</p>",
        "id": 252503975,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1631123573
    },
    {
        "content": "<p>But I'll get over it. Cargo should pass in info about the workspace (and the crates and their versions as well)</p>",
        "id": 252504053,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1631123604
    },
    {
        "content": "<p>I'm going to file a cargo bug</p>",
        "id": 252504726,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1631123874
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/cargo/issues/9887\">https://github.com/rust-lang/cargo/issues/9887</a> and <a href=\"https://github.com/rust-lang/rust/issues/88754\">https://github.com/rust-lang/rust/issues/88754</a></p>",
        "id": 252506162,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1631124367
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> this would involve adding a stable flag to rustc, does this need an MCP?</p>",
        "id": 252506213,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1631124385
    },
    {
        "content": "<p>Why do we need a new flag?</p>",
        "id": 252506252,
        "sender_full_name": "simulacrum",
        "timestamp": 1631124403
    },
    {
        "content": "<p>(woudl you be able to help me push this on the compiler side? i'm happy to implement)</p>",
        "id": 252506265,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1631124406
    },
    {
        "content": "<p>I believe so, but can't it start as a Z?</p>",
        "id": 252506273,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1631124408
    },
    {
        "content": "<p>remap-path-prefix seems like it should work, no? There was also some recent discussion about a diagnostic-specific version, IIRC</p>",
        "id": 252506304,
        "sender_full_name": "simulacrum",
        "timestamp": 1631124423
    },
    {
        "content": "<p>i don't think remap-path-prefix does what we want here?</p>",
        "id": 252506352,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1631124445
    },
    {
        "content": "<p>also remap-path-prefix affects the binary</p>",
        "id": 252506394,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1631124458
    },
    {
        "content": "<p>which would mean that <code>cargo build</code> from different folders would result in rebuilds</p>",
        "id": 252506425,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1631124470
    },
    {
        "content": "<p>Let me try to find the discussion I was thinking of</p>",
        "id": 252506655,
        "sender_full_name": "simulacrum",
        "timestamp": 1631124545
    },
    {
        "content": "<p>cc <a href=\"https://github.com/rust-lang/rust/issues/73740\">https://github.com/rust-lang/rust/issues/73740</a>, and I think <a href=\"https://github.com/rust-lang/rust/issues/87745\">https://github.com/rust-lang/rust/issues/87745</a> is the issue I was thinking of</p>",
        "id": 252507092,
        "sender_full_name": "simulacrum",
        "timestamp": 1631124665
    },
    {
        "content": "<p>I think the discussion suggests you could do something like <code>--remap-path-prefix .=$(pwd)</code> in RUSTFLAGS? Where <code>.</code> would be rustc's cwd, and pwd would be the (nested) location you're invoking from</p>",
        "id": 252507340,
        "sender_full_name": "simulacrum",
        "timestamp": 1631124782
    },
    {
        "content": "<p>but with regards to paths in diagnostics <em>only</em>, I'm less sure</p>",
        "id": 252507629,
        "sender_full_name": "simulacrum",
        "timestamp": 1631124894
    },
    {
        "content": "<blockquote>\n<p><code>--remap-path-prefix .=$(pwd)</code></p>\n</blockquote>\n<p>I guess this would rather be <code>.=../../</code></p>",
        "id": 252507705,
        "sender_full_name": "simulacrum",
        "timestamp": 1631124922
    },
    {
        "content": "<p>yeah remap-path-prefix is a no-go here</p>",
        "id": 252508017,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1631125052
    },
    {
        "content": "<p>whatever we use here _cannot_ touch the binary</p>",
        "id": 252508051,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1631125065
    },
    {
        "content": "<p>remap-path-prefix exists primarily for reproducible builds, so almost by definition it is about touching the binary</p>",
        "id": 252508148,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1631125090
    },
    {
        "content": "<p>I guess you'd want something like \"diagnostic-cwd\"</p>",
        "id": 252508467,
        "sender_full_name": "simulacrum",
        "timestamp": 1631125207
    },
    {
        "content": "<p>but it feels pretty painful</p>",
        "id": 252508504,
        "sender_full_name": "simulacrum",
        "timestamp": 1631125222
    },
    {
        "content": "<p>ew</p>",
        "id": 252508873,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1631125361
    },
    {
        "content": "<p>yeah</p>",
        "id": 252508882,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1631125362
    },
    {
        "content": "<p>also i suspect that would have to be special cased in incremental build stuff</p>",
        "id": 252508926,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1631125378
    },
    {
        "content": "<p>--diagnostic-cwd= is a good normal flag name though</p>",
        "id": 252508978,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1631125399
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> it can start with a -Z, but then cargo can't use it right?</p>",
        "id": 252509065,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1631125428
    },
    {
        "content": "<p>I do think something like a compiler MCP is necessary -- particularly around interactions with remap-path-prefix, for example</p>",
        "id": 252509582,
        "sender_full_name": "simulacrum",
        "timestamp": 1631125609
    },
    {
        "content": "<p>(which goes first, etc)</p>",
        "id": 252509627,
        "sender_full_name": "simulacrum",
        "timestamp": 1631125630
    },
    {
        "content": "<p>Cargo can't use -Z flags on stable, yes</p>",
        "id": 252509655,
        "sender_full_name": "simulacrum",
        "timestamp": 1631125641
    },
    {
        "content": "<p>Cargo doesn't know how to format the error messages. It directly extracts the field containing the already rendered message from the error message json, so it can't remap on it's own.</p>",
        "id": 252513804,
        "sender_full_name": "bjorn3",
        "timestamp": 1631127434
    },
    {
        "content": "<p>I think <code>--diagnostic-cwd</code> is also a bad idea as it requires a recompilation of every crate that had an error.</p>",
        "id": 252514065,
        "sender_full_name": "bjorn3",
        "timestamp": 1631127545
    },
    {
        "content": "<p>Or do you mean that it would be used to map it to a special path that cargo can search-and-replace in the error messages?</p>",
        "id": 252514145,
        "sender_full_name": "bjorn3",
        "timestamp": 1631127589
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> why would it require a recompilation of every crate?</p>",
        "id": 252526949,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1631132641
    },
    {
        "content": "<p>the whole _point_ is that it affects diagnostics and only diagnostics</p>",
        "id": 252527019,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1631132655
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> the suggestion is for rustc to have this flag, and for cargo to set it</p>",
        "id": 252527041,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1631132674
    },
    {
        "content": "<p>cargo doesn't need to understand the error format</p>",
        "id": 252527054,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1631132682
    },
    {
        "content": "<p>If you change the current directory, the value of this flag would change, right? Thus requiring a recompilation.</p>",
        "id": 252530860,
        "sender_full_name": "bjorn3",
        "timestamp": 1631134330
    }
]