[
    {
        "content": "<p>Started a thread on internationalization in <a href=\"https://internals.rust-lang.org/t/translating-the-compiler/10376\" target=\"_blank\" title=\"https://internals.rust-lang.org/t/translating-the-compiler/10376\">https://internals.rust-lang.org/t/translating-the-compiler/10376</a> , thought  y'all would be interested</p>",
        "id": 167630643,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1559963113
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> i don't understand what you mean when you say our diagnostics system isn't ready for this</p>",
        "id": 167659788,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560014800
    },
    {
        "content": "<p>This wouldn't even be plumbed through diagnostics in the first place, this is _largely_ just changing the strings that get fed to diagnostics</p>",
        "id": 167659800,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560014847
    },
    {
        "content": "<p>We do a lot of string tweaking by hand. We would need to stop doing that</p>",
        "id": 167659876,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1560014955
    },
    {
        "content": "<p>Not only with plural handling but also combining substrings all over the place</p>",
        "id": 167659884,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1560014982
    },
    {
        "content": "<p>Q</p>",
        "id": 167659968,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1560015053
    },
    {
        "content": "<p>I'm not opposed to the idea, I just think that keeping the high quality of errors, improving existing errors and keeping them translation friendly will be a lot of work</p>",
        "id": 167659991,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1560015104
    },
    {
        "content": "<p>For which we don't have the manpower today</p>",
        "id": 167659994,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1560015116
    },
    {
        "content": "<p>But there are some things that can be done in the meantime (glossary, extending error codes, cleaning up logic) that will be improvements even we don't start translating rustc yet</p>",
        "id": 167660061,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1560015180
    },
    {
        "content": "<blockquote>\n<p>Not only with plural handling but also combining substrings all over the place<br>\nWe do a lot of string tweaking by hand.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span>  This is part of what I saw a year ago when I looked at how difficult it would be to translate <code>rustc</code>'s generated messages to a wide set of other languages (particularly non-European ones).</p>",
        "id": 167665873,
        "sender_full_name": "Tom Phinney",
        "timestamp": 1560025033
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> <span class=\"user-mention\" data-user-id=\"132894\">@Tom Phinney</span> fluent has good support for doing this kind of thing, though</p>",
        "id": 167665998,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560025258
    },
    {
        "content": "<p>Again, it's precisely designed for this kind of thing</p>",
        "id": 167666009,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560025287
    },
    {
        "content": "<p>Fluent totally does substring combination and selection</p>",
        "id": 167666040,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560025323
    },
    {
        "content": "<p>Variables are quite powerful</p>",
        "id": 167666057,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560025330
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132894\">@Tom Phinney</span> this is super tricky to do in a format! based system but fluent is better</p>",
        "id": 167666070,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560025386
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span>  For plurals, nominative vs genitive vs accusative case (in Roman languages), etc. I think <span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> 's concern is that there's a lot of ad hoc string assembly that would have to be rationalized in a way that removes English-language dependence.</p>",
        "id": 167666072,
        "sender_full_name": "Tom Phinney",
        "timestamp": 1560025391
    },
    {
        "content": "<p>You can do casing</p>",
        "id": 167666076,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560025401
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> <span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span>  So perhaps we can start with the places that have mostly string literals that are not formatted at all but just <code>.to_string()</code>ed</p>",
        "id": 167666087,
        "sender_full_name": "centril",
        "timestamp": 1560025425
    },
    {
        "content": "<p>I don't think we need to</p>",
        "id": 167666138,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560025452
    },
    {
        "content": "<p>Bt</p>",
        "id": 167666140,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560025456
    },
    {
        "content": "<p>Brb</p>",
        "id": 167666141,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560025458
    },
    {
        "content": "<p>wg-diagnostics has a plan to move diagnostics out of the happy path and more into structs that can be rendered</p>",
        "id": 167666159,
        "sender_full_name": "centril",
        "timestamp": 1560025503
    },
    {
        "content": "<p>it seems to me that after you've moved something into a struct, there should be no strings in the happy path, and so you can internationalize the renderer</p>",
        "id": 167666169,
        "sender_full_name": "centril",
        "timestamp": 1560025536
    },
    {
        "content": "<p>Okay so</p>",
        "id": 167666197,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560025563
    },
    {
        "content": "<p>Arbitrary substringing/etc is something Fluent does quite well. The main concern is that these cases may not be as parallelizeable</p>",
        "id": 167666218,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560025599
    },
    {
        "content": "<p>like, if we get a bunch of people converting things to translation strings, they may not know how to do these. which is fine. it's not hard to document and teach, but even without that it's fine</p>",
        "id": 167666229,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560025629
    },
    {
        "content": "<p>I don't recall any real \"blockers\" in what I saw in <code>rustc</code>'s code when I examined it a year ago, but it will take more time than simply reworking message text with argument insertion, which <code>Fluent</code> and <code>Pontoon</code> seem to actually handle quite well.</p>",
        "id": 167666235,
        "sender_full_name": "Tom Phinney",
        "timestamp": 1560025649
    },
    {
        "content": "<p>renderable structs would be nice, like that's basically a 1:1 mapping to a fluent id + variables</p>",
        "id": 167666240,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560025673
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132894\">@Tom Phinney</span> I'm not sure what you mean</p>",
        "id": 167666242,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560025681
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> there's <a href=\"https://github.com/rust-lang/rust/issues/51528\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51528\">https://github.com/rust-lang/rust/issues/51528</a> if you haven't seen that issue yet.</p>",
        "id": 167666283,
        "sender_full_name": "centril",
        "timestamp": 1560025684
    },
    {
        "content": "<p>it doesn't have to be _just_ argument insertion. you can do argument selection too</p>",
        "id": 167666286,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560025693
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> one thing that might make sense is to focus on a small subset of errors somewhere in the compiler to get a feeling for it</p>",
        "id": 167666291,
        "sender_full_name": "centril",
        "timestamp": 1560025723
    },
    {
        "content": "<p>and to get the interface in place</p>",
        "id": 167666292,
        "sender_full_name": "centril",
        "timestamp": 1560025730
    },
    {
        "content": "<p>sure</p>",
        "id": 167666293,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560025734
    },
    {
        "content": "<p>e.g. the traits needed and whatnot</p>",
        "id": 167666296,
        "sender_full_name": "centril",
        "timestamp": 1560025737
    },
    {
        "content": "<p>that's kind of ... the plan?</p>",
        "id": 167666297,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560025738
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span>  :P</p>",
        "id": 167666308,
        "sender_full_name": "centril",
        "timestamp": 1560025747
    },
    {
        "content": "<p>i feel like people are assuming i want to do this all at once?</p>",
        "id": 167666309,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560025750
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> no</p>",
        "id": 167666311,
        "sender_full_name": "centril",
        "timestamp": 1560025762
    },
    {
        "content": "<p>but I think perhaps it would be best to not be incremental at the start</p>",
        "id": 167666314,
        "sender_full_name": "centril",
        "timestamp": 1560025776
    },
    {
        "content": "<p>like, of course we need to get the framework set up first. and then get translation strings in, slowly, growing the framework where necessary</p>",
        "id": 167666315,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560025777
    },
    {
        "content": "<p>what do you mean?</p>",
        "id": 167666317,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560025789
    },
    {
        "content": "<p>just do a small bit and figure out the framework, and then stop; don't do more for a while</p>",
        "id": 167666344,
        "sender_full_name": "centril",
        "timestamp": 1560025802
    },
    {
        "content": "<p>and then figure out how this meshes with wg-diagnostics's plan to have error structs</p>",
        "id": 167666374,
        "sender_full_name": "centril",
        "timestamp": 1560025819
    },
    {
        "content": "<p>that's not \"not be incremental\" means :)</p>",
        "id": 167666375,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560025820
    },
    {
        "content": "<p>I think the thing I jumped at is, it's gonna be a lot of work and it will cause churn. The intermediate steps are gonna be ugly, but it's something we need to do.</p>",
        "id": 167666381,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1560025830
    },
    {
        "content": "<p>I don't think the intermediate steps will be ugly?</p>",
        "id": 167666382,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560025850
    },
    {
        "content": "<p>It's pretty smooth to migrate</p>",
        "id": 167666389,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560025858
    },
    {
        "content": "<p>Once we have error structs it'll be much more easy, but it is a bigger undertaking than I originally expected</p>",
        "id": 167666403,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1560025873
    },
    {
        "content": "<p>once you replace a string with a <code>text!()</code> invocation (or whatever), that's it.</p>",
        "id": 167666406,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560025882
    },
    {
        "content": "<p>oh, for error structs</p>",
        "id": 167666407,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560025887
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> Yes, do you realize now how much technical debt y'all have added? ;)</p>",
        "id": 167666409,
        "sender_full_name": "centril",
        "timestamp": 1560025898
    },
    {
        "content": "<p>can you give examples of what you mean by the error struct?</p>",
        "id": 167666412,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560025903
    },
    {
        "content": "<p>is it something like</p>",
        "id": 167666413,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560025917
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> like so: <a href=\"https://github.com/rust-lang/rust/issues/61132\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61132\">https://github.com/rust-lang/rust/issues/61132</a></p>",
        "id": 167666462,
        "sender_full_name": "centril",
        "timestamp": 1560025941
    },
    {
        "content": "<p>MoveOutOfBorrowError {<br>\n  original: Span,<br>\n  new: Span,<br>\n  ty: Ty,<br>\n  // some other crap<br>\n}</p>",
        "id": 167666464,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560025943
    },
    {
        "content": "<p>Yes</p>",
        "id": 167666468,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1560025952
    },
    {
        "content": "<p>got it</p>",
        "id": 167666469,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560025953
    },
    {
        "content": "<p>okay so</p>",
        "id": 167666471,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560025956
    },
    {
        "content": "<p>this is good, actually</p>",
        "id": 167666472,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560025962
    },
    {
        "content": "<p>All encompassing every variable that would affect output</p>",
        "id": 167666473,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1560025965
    },
    {
        "content": "<p>this makes stuff much nicer!</p>",
        "id": 167666486,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560025995
    },
    {
        "content": "<p>we can transition to error structs, and in the process transition to fluent</p>",
        "id": 167666487,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560026015
    },
    {
        "content": "<p>@centril actually the part I'm struggling with is some borrow errors that have different codes but are fundamentally the same thing <span aria-label=\"smile\" class=\"emoji emoji-263a\" role=\"img\" title=\"smile\">:smile:</span>️</p>",
        "id": 167666490,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1560026028
    },
    {
        "content": "<p>yea, I think we can bootstrap all of these changes simultaneously</p>",
        "id": 167666491,
        "sender_full_name": "oli",
        "timestamp": 1560026029
    },
    {
        "content": "<p>in an independent way, e.g. you can move something to an error struct, and you can _also_ move that error struct to Fluent if you _want_, but you don't have to</p>",
        "id": 167666493,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560026038
    },
    {
        "content": "<p>Yep</p>",
        "id": 167666538,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1560026045
    },
    {
        "content": "<p>That sounds good to me</p>",
        "id": 167666540,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1560026050
    },
    {
        "content": "<p>might even move some parts to struct reporting just for fluent, others just for annotate-rs</p>",
        "id": 167666541,
        "sender_full_name": "oli",
        "timestamp": 1560026055
    },
    {
        "content": "<p>as in?</p>",
        "id": 167666548,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560026076
    },
    {
        "content": "<p>whatever contributors focus on. and at some point we'll have everything moved</p>",
        "id": 167666549,
        "sender_full_name": "oli",
        "timestamp": 1560026078
    },
    {
        "content": "<p>Right; this sounds good... connecting fluent at once is probably a good idea because then you also figure out what sessions and context data need to be passed as well</p>",
        "id": 167666554,
        "sender_full_name": "centril",
        "timestamp": 1560026088
    },
    {
        "content": "<p>no like, there don't need to be conflicts of interest</p>",
        "id": 167666555,
        "sender_full_name": "oli",
        "timestamp": 1560026090
    },
    {
        "content": "<p>I should attend the WG diagnostics meetings lol, I didn't notice this go by and this is kinda amazing</p>",
        "id": 167666556,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560026093
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> i think fluent will largely work based off of globals so it's fine</p>",
        "id": 167666567,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560026111
    },
    {
        "content": "<p>It's just that it's a large effort to address all the different error processing sections of <code>rustc</code>. That's why a small starter sample, as <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> advises, is almost certainly the way to proceed.</p>",
        "id": 167666571,
        "sender_full_name": "Tom Phinney",
        "timestamp": 1560026127
    },
    {
        "content": "<p>ouch.. globals... that is heartbreaking <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 167666573,
        "sender_full_name": "centril",
        "timestamp": 1560026144
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132894\">@Tom Phinney</span> i don't think i ever suggested doing it all at once, people keep assumign that</p>",
        "id": 167666574,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560026154
    },
    {
        "content": "<p>of course it's going to be incremental</p>",
        "id": 167666575,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560026159
    },
    {
        "content": "<p>but I do believe it's _doable_</p>",
        "id": 167666621,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560026170
    },
    {
        "content": "<p>the concerns you were bringing up were that it's not</p>",
        "id": 167666622,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560026177
    },
    {
        "content": "<p>I think Tom is just reaffirming what we're all saying ;)</p>",
        "id": 167666625,
        "sender_full_name": "centril",
        "timestamp": 1560026180
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> doesn't have to be globals, it's just easier with globals. we can stick stuff in Sess instead</p>",
        "id": 167666627,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560026196
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> Using <code>Sess</code> seems preferable</p>",
        "id": 167666631,
        "sender_full_name": "centril",
        "timestamp": 1560026212
    },
    {
        "content": "<p>Cool we'll do that</p>",
        "id": 167666633,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560026220
    },
    {
        "content": "<p>I've thought all along that it was doable and worth doing. It's just going to be a lot worse than making Fluent versions of error strings and their arguments.</p>",
        "id": 167666645,
        "sender_full_name": "Tom Phinney",
        "timestamp": 1560026241
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">AsError</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// ParseSess, Session or `TyCtxt`</span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Session</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">to_error</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">session</span>: <span class=\"nc\">Self</span>::<span class=\"n\">Session</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">DiagnosticBuilder</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">emit</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">to_error</span><span class=\"p\">().</span><span class=\"n\">emit</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p><span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> this is even adapted to just that ^^</p>",
        "id": 167666647,
        "sender_full_name": "centril",
        "timestamp": 1560026249
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132894\">@Tom Phinney</span> I don't know what you mean by that</p>",
        "id": 167666649,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560026256
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132894\">@Tom Phinney</span> i mean, the plumbing for this is obviously going to be a bunch of work</p>",
        "id": 167666698,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560026300
    },
    {
        "content": "<p>the plumbing should be almost conflict free though</p>",
        "id": 167666703,
        "sender_full_name": "oli",
        "timestamp": 1560026319
    },
    {
        "content": "<p>as in?</p>",
        "id": 167666707,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560026323
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> yep!</p>",
        "id": 167666709,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560026331
    },
    {
        "content": "<p>like no bitrot because it's all new stuff</p>",
        "id": 167666710,
        "sender_full_name": "oli",
        "timestamp": 1560026336
    },
    {
        "content": "<p>that's why i suggested the session lol</p>",
        "id": 167666711,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560026338
    },
    {
        "content": "<p>yeah</p>",
        "id": 167666718,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560026345
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> Could you summarize this informal mini-meeting in the roadmap issue?</p>",
        "id": 167666728,
        "sender_full_name": "centril",
        "timestamp": 1560026380
    },
    {
        "content": "<p>so i think once we have some error structs, what i can do is start figuring out how best to add fluent to that.</p>",
        "id": 167666729,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560026389
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> There's a lot of detailed code path analysis and transforming that will be required. In many cases existing generation of error message fragments is intermixed with other code.</p>",
        "id": 167666731,
        "sender_full_name": "Tom Phinney",
        "timestamp": 1560026400
    },
    {
        "content": "<p>yep; very good <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 167666759,
        "sender_full_name": "centril",
        "timestamp": 1560026402
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132894\">@Tom Phinney</span> as in?</p>",
        "id": 167666781,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560026417
    },
    {
        "content": "<p>oh, like the borrow errors where an entire sentence is split across spans</p>",
        "id": 167666786,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560026438
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132894\">@Tom Phinney</span> I think this just means that there's a lot of diagnostics logic intermingled with the happy path</p>",
        "id": 167666787,
        "sender_full_name": "centril",
        "timestamp": 1560026438
    },
    {
        "content": "<p>that is a problem that we want to fix independent of internationalization</p>",
        "id": 167666791,
        "sender_full_name": "centril",
        "timestamp": 1560026456
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132894\">@Tom Phinney</span> we're trying to get rid of these <em>anyway</em> <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 167666792,
        "sender_full_name": "oli",
        "timestamp": 1560026456
    },
    {
        "content": "<p>yep</p>",
        "id": 167666795,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560026460
    },
    {
        "content": "<p>any fluent changes could at first focus on the easy ones</p>",
        "id": 167666808,
        "sender_full_name": "oli",
        "timestamp": 1560026482
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> hmm; I do think we might have some error structs somewhere in typeck/infer/coercions</p>",
        "id": 167666812,
        "sender_full_name": "centril",
        "timestamp": 1560026505
    },
    {
        "content": "<p>already, that is</p>",
        "id": 167666815,
        "sender_full_name": "centril",
        "timestamp": 1560026510
    },
    {
        "content": "<p>as <span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> said, once there are some structs, only do the fluent stuff for these</p>",
        "id": 167666817,
        "sender_full_name": "oli",
        "timestamp": 1560026514
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span>  is correct, both in the source of the complexity and the need to fix it (eventually). It's over a year since I looked at this task. WRT \"As in?\", now you're taxing my memory.</p>",
        "id": 167666863,
        "sender_full_name": "Tom Phinney",
        "timestamp": 1560026536
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132894\">@Tom Phinney</span> fwiw such split-sentence diagnostics are awkward _anyway_ in English. Fortunately all languages have recursion, so you can pretty much always construct a correct-but-awkward sentence that does this.</p>",
        "id": 167666866,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560026563
    },
    {
        "content": "<p>(recursion the linguistic concept)</p>",
        "id": 167666869,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560026583
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> Finnish is even recursively enumerable <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 167666878,
        "sender_full_name": "centril",
        "timestamp": 1560026592
    },
    {
        "content": "<p>the ordering isn't dependent on the language, it's dependent on the way we wish to present the error</p>",
        "id": 167666879,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560026592
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> I mean, i want to wait until we've got AsError being used :)</p>",
        "id": 167666929,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560026650
    },
    {
        "content": "<p>bc then i can just fuck with AsError</p>",
        "id": 167666930,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560026655
    },
    {
        "content": "<p>Fair =)</p>",
        "id": 167666932,
        "sender_full_name": "centril",
        "timestamp": 1560026661
    },
    {
        "content": "<p>It seems that we all agree this is a task worth doing, and that the needed restructuring will reduce some of <code>rustc</code>'s technical debt. How do we start?</p>",
        "id": 167666933,
        "sender_full_name": "Tom Phinney",
        "timestamp": 1560026667
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132894\">@Tom Phinney</span> right now there's an on-going cleanup effort in e.g. the parser</p>",
        "id": 167666935,
        "sender_full_name": "centril",
        "timestamp": 1560026698
    },
    {
        "content": "<p>we are moving some stuff to <code>diagnostics.rs</code> files and such</p>",
        "id": 167666947,
        "sender_full_name": "centril",
        "timestamp": 1560026707
    },
    {
        "content": "<p>you can join in to clean up the happy path</p>",
        "id": 167666948,
        "sender_full_name": "centril",
        "timestamp": 1560026715
    },
    {
        "content": "<p>I think a cool design would basically be a #[derive(AsError)]</p>",
        "id": 167666953,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560026735
    },
    {
        "content": "<p>but this WG is pretty new</p>",
        "id": 167666954,
        "sender_full_name": "centril",
        "timestamp": 1560026737
    },
    {
        "content": "<p>this is useful anyway</p>",
        "id": 167666957,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560026743
    },
    {
        "content": "<p>but this is super easy to adapt to Fluent</p>",
        "id": 167666959,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560026752
    },
    {
        "content": "<p>uh</p>",
        "id": 167666962,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560026755
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> yea that's very nice; probably you probably need some customizations for different phases of the compiler and the associated type for the session</p>",
        "id": 167667011,
        "sender_full_name": "centril",
        "timestamp": 1560026770
    },
    {
        "content": "<p>argh too bad we don't have anonymous structs this derive would be more fun to write</p>",
        "id": 167667018,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560026798
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> maybe a design inspired by snafu / failure?</p>",
        "id": 167667019,
        "sender_full_name": "centril",
        "timestamp": 1560026799
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> do you mean structural records?</p>",
        "id": 167667022,
        "sender_full_name": "centril",
        "timestamp": 1560026822
    },
    {
        "content": "<p>yes</p>",
        "id": 167667037,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560026870
    },
    {
        "content": "<p>oh hold on i got it</p>",
        "id": 167667038,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560026872
    },
    {
        "content": "<p>Shame-less plug: <a href=\"https://github.com/rust-lang/rfcs/pull/2584\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/pull/2584\">https://github.com/rust-lang/rfcs/pull/2584</a> =P</p>",
        "id": 167667085,
        "sender_full_name": "centril",
        "timestamp": 1560026887
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>#[derive(AsError)]\n#[error = &quot;Cannot move out of borrow in {ty}&quot;, span]\n#[note = &quot;First borrwed here&quot;, other_span]\n#[code = E12345]\nstruct MoveOutOfBorrowError {\n    ty: Ty,\n    span: Span,\n    other_span: Span,\n}\n</pre></div>",
        "id": 167667089,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560026918
    },
    {
        "content": "<p>how does that look</p>",
        "id": 167667090,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560026926
    },
    {
        "content": "<p>if we have this, it becomes extremely simple to migrate to fluent</p>",
        "id": 167667095,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560026943
    },
    {
        "content": "<p>in fact, we can do most of it in an automated way</p>",
        "id": 167667102,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560026950
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span>  hmm; but why are we baking the English strings into this? this is the pre-migrated version?</p>",
        "id": 167667106,
        "sender_full_name": "centril",
        "timestamp": 1560026966
    },
    {
        "content": "<p>Yes</p>",
        "id": 167667109,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560026980
    },
    {
        "content": "<p>one step at a time</p>",
        "id": 167667110,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560026982
    },
    {
        "content": "<p>Ah yes; this is very nice</p>",
        "id": 167667112,
        "sender_full_name": "centril",
        "timestamp": 1560026989
    },
    {
        "content": "<p>migrating this to fluent is extremely simple, you write a script that finds these, extracts the strings, converts them to fluent's format, and replaces them with ids.</p>",
        "id": 167667164,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560027008
    },
    {
        "content": "<p>more tricky if you got control flow in there but most errors don't have that</p>",
        "id": 167667168,
        "sender_full_name": "centril",
        "timestamp": 1560027026
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[derive(AsError)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[fluent = </span><span class=\"s\">&quot;borrowck-move-out-of-borrow&quot;</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"cp\">#[error = 1, span]</span><span class=\"w\"></span>\n<span class=\"cp\">#[note = 1, other_span]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">MoveOutOfBorrowError</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ty</span>: <span class=\"nc\">Ty</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">span</span>: <span class=\"nc\">Span</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">other_span</span>: <span class=\"nc\">Span</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// borrowck.ftl</span>\n<span class=\"n\">borrowck</span><span class=\"o\">-</span><span class=\"k\">move</span><span class=\"o\">-</span><span class=\"n\">out</span><span class=\"o\">-</span><span class=\"n\">of</span><span class=\"o\">-</span><span class=\"n\">borrow</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">error1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Cannot</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">borrow</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cp\">$ty</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">note1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">First</span><span class=\"w\"> </span><span class=\"n\">borrowed</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"w\"></span>\n</pre></div>",
        "id": 167667190,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560027108
    },
    {
        "content": "<p>Those would be manually impld anyway</p>",
        "id": 167667223,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560027122
    },
    {
        "content": "<p>though actually since fluent has selection support a lot of what would originally be a manual impl of AsError could become a derive in the fluent world</p>",
        "id": 167667245,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560027166
    },
    {
        "content": "<p>(I'm on the fence about doing <code>borrowck-move-out-of-borrow.error1</code> vs <code>borrowck-move-out-of-borrow-error1</code>, I'd have to look at Pontoon's interface for the two. Also the numbering/whatever. We can figure that out later)</p>",
        "id": 167667258,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560027217
    },
    {
        "content": "<p>Yeah this is neat; Are the <code>#[note ..]</code>s in sequence there? can you add more?</p>",
        "id": 167667301,
        "sender_full_name": "centril",
        "timestamp": 1560027243
    },
    {
        "content": "<p>yes</p>",
        "id": 167667308,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560027248
    },
    {
        "content": "<p>or does fluent control the order?</p>",
        "id": 167667309,
        "sender_full_name": "centril",
        "timestamp": 1560027250
    },
    {
        "content": "<p>that's why i numbered it</p>",
        "id": 167667312,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560027260
    },
    {
        "content": "<p>so you can add a note2</p>",
        "id": 167667313,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560027266
    },
    {
        "content": "<p>the precise way you identify different notes will need to be figured out :)</p>",
        "id": 167667314,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560027276
    },
    {
        "content": "<p>numbering is one valid but ugly way to do it</p>",
        "id": 167667315,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560027288
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> aah; I was thinking that the attribute order in Rust would be the order perhaps :P</p>",
        "id": 167667316,
        "sender_full_name": "centril",
        "timestamp": 1560027289
    },
    {
        "content": "<p>_shrug_</p>",
        "id": 167667317,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560027296
    },
    {
        "content": "<p>so i18n best practices are to rename the key when things change, usually by adding a number, so numbering may not be great here</p>",
        "id": 167667335,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560027333
    },
    {
        "content": "<p>(this way tooling like Pontoon notices the change)</p>",
        "id": 167667337,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560027342
    },
    {
        "content": "<p>another way to do it is to write your own tooling that keeps a watch on the locales/en-US folder</p>",
        "id": 167667338,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560027359
    },
    {
        "content": "<p>that's not our problem now</p>",
        "id": 167667383,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560027367
    },
    {
        "content": "<p>okay, so I'll first jot down this custom derive design on the issue</p>",
        "id": 167667384,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560027378
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> can you send me an invite to the diagnostics meetings?</p>",
        "id": 167667387,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560027389
    },
    {
        "content": "<p>will do</p>",
        "id": 167667390,
        "sender_full_name": "oli",
        "timestamp": 1560027401
    },
    {
        "content": "<p>thx</p>",
        "id": 167667391,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560027405
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> you should add wg-diagnostics to the t-compiler google calendar</p>",
        "id": 167667405,
        "sender_full_name": "centril",
        "timestamp": 1560027448
    },
    {
        "content": "<p>we don't have a regular meeting</p>",
        "id": 167667408,
        "sender_full_name": "oli",
        "timestamp": 1560027460
    },
    {
        "content": "<p>yeah but add them to the calendar when you have meetings</p>",
        "id": 167667410,
        "sender_full_name": "centril",
        "timestamp": 1560027474
    },
    {
        "content": "<p>ok</p>",
        "id": 167667414,
        "sender_full_name": "oli",
        "timestamp": 1560027479
    },
    {
        "content": "<p>its a great way to get an overview</p>",
        "id": 167667415,
        "sender_full_name": "centril",
        "timestamp": 1560027480
    },
    {
        "content": "<p>thanks</p>",
        "id": 167667458,
        "sender_full_name": "centril",
        "timestamp": 1560027486
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> one idea for the custom derive: If you leave out <code>#[fluent = \"$key\"]</code> then infer the <code>$key</code> by hyphenating the struct's name</p>",
        "id": 167667612,
        "sender_full_name": "centril",
        "timestamp": 1560027772
    },
    {
        "content": "<p>nah, we'd need the explicit key in order to rename the key if things change</p>",
        "id": 167667628,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560027795
    },
    {
        "content": "<p>but the autogeneration could be done that way</p>",
        "id": 167667635,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560027814
    },
    {
        "content": "<p>i don't think we need to figure this out right now, but y'all _should_ figure out what the AsError custom derive should look like</p>",
        "id": 167667716,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560027911
    },
    {
        "content": "<p>it may be better to make it a rustc attribute, not custom derive</p>",
        "id": 167667718,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560027922
    },
    {
        "content": "<p>(that way we can give the derive some arguments itself, e.g. <code>#[aserror(TyCtxt)]</code> for different session levels)</p>",
        "id": 167667766,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560027968
    },
    {
        "content": "<p>Seems like something you can provide via helper attributes to the derive?</p>",
        "id": 167667789,
        "sender_full_name": "centril",
        "timestamp": 1560028064
    },
    {
        "content": "<p>yeah.</p>",
        "id": 167667841,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560028116
    },
    {
        "content": "<p>_shrug_</p>",
        "id": 167667842,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560028118
    },
    {
        "content": "<p>y'all should pick a design for the custom derive</p>",
        "id": 167667844,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560028124
    },
    {
        "content": "<p>i don't have much of an opinion, i'll make sure whatever y'all pick is compatible with moving to fluent later</p>",
        "id": 167667856,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560028143
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I'm wondering whether <code>ParseSess</code>, <code>Session</code>, and <code>TyCtxt</code>  have some sort of common trait we can create that would facilitate generating the code for those custom derives</p>",
        "id": 167668338,
        "sender_full_name": "centril",
        "timestamp": 1560028877
    },
    {
        "content": "<p>Such that you can have <code>type Session: SessionLike;</code></p>",
        "id": 167668346,
        "sender_full_name": "centril",
        "timestamp": 1560028897
    },
    {
        "content": "<p>Back from working on my house with a contractor for six hours. <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span>  would you send me an invite to any planned meetings on internationalization of diagnostics? I have a lot of time conflicts this summer but I'll attend if I can, or catch up on zulip later.</p>",
        "id": 167679148,
        "sender_full_name": "Tom Phinney",
        "timestamp": 1560047880
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132894\">@Tom Phinney</span> there aren't any planned meetings for diagnostics internationalization, we decided to do a bunch of other cleanups first</p>",
        "id": 167680540,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560050341
    },
    {
        "content": "<p>i don't think we'll be having meetings for i18n</p>",
        "id": 167680550,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560050365
    },
    {
        "content": "<p>we have a clear plan already</p>",
        "id": 167680551,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560050369
    },
    {
        "content": "<p>i'll let you know when we start doing that though</p>",
        "id": 167680552,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1560050377
    }
]