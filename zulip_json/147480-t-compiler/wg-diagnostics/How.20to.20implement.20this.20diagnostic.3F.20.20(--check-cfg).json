[
    {
        "content": "<p>Hello, all. I'm working on implementing this draft RFC: <a href=\"https://github.com/sivadeilra/rfcs/blob/user/ardavis/checked_cfg/text/0000-conditional-compilation-checking.md\">https://github.com/sivadeilra/rfcs/blob/user/ardavis/checked_cfg/text/0000-conditional-compilation-checking.md</a></p>\n<p>I have the functionality working, but what's the best way to report diagnostics for this? This RFC specs checking <code>#[cfg(...)]</code> conditions against a list of valid options. So when we're evaluating <code>#[cfg(...)]</code> attributes, the code correctly detects invalid names, like misspelling a feature name. </p>\n<p>Should this report a warning, like Ennnn?  Should it report a lint?</p>\n<p>If it should be a warning, that's easy for me to implement (I've already implemented that). But can warnings be controlled through <code>#![allow(...)]</code>, etc.? If warnings cannot be managed, then this might not be the best way to report diagnostics for this feature. Then again, since this feature is already an opt-in feature (you enable it by passing flags on the command line, which Cargo will do automatically), then maybe that's perfectly fine.</p>\n<p>If the best thing is a lint, like <code>invalid_cfg_name</code> or some such, then how do I do that? I see the mechanisms for reporting an \"early\" lint, but these appear to attach a delayed error to a particular AST node. The trouble is, if <code>#[cfg(...)]</code> evaluates to \"don't include this\", then that AST node gets dropped, and there's no good place to hang the diagnostic.</p>",
        "id": 216635753,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1605284973
    },
    {
        "content": "<p>One thing that could work is to attach it to the parent node</p>",
        "id": 216636156,
        "sender_full_name": "oli",
        "timestamp": 1605285128
    },
    {
        "content": "<p>Would that be the span that the error report points to? Or would it still have the correct span of the <code>#[cfg]</code> attribute?</p>",
        "id": 216636303,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1605285188
    },
    {
        "content": "<p>I think it is reasonable to expect <code>#[allow(invalid_cfg_name)]#[cfg(...)]some_item</code> not to work, but require you to use <code>#![allow(invalid_cfg_name)]</code> (note the bang) or attach it to an outer node</p>",
        "id": 216636321,
        "sender_full_name": "oli",
        "timestamp": 1605285192
    },
    {
        "content": "<p>the span would stay correct, that is independent</p>",
        "id": 216636354,
        "sender_full_name": "oli",
        "timestamp": 1605285200
    },
    {
        "content": "<p>we need the node to figure out <code>#[allow]</code> attributes and such</p>",
        "id": 216636390,
        "sender_full_name": "oli",
        "timestamp": 1605285211
    },
    {
        "content": "<p>I guess the only problem could be nested cfgs</p>",
        "id": 216636445,
        "sender_full_name": "oli",
        "timestamp": 1605285233
    },
    {
        "content": "<p>gotta try this out... writing some code that emits an early lint within something that gets cfg-ed out</p>",
        "id": 216636565,
        "sender_full_name": "oli",
        "timestamp": 1605285264
    },
    {
        "content": "<p>Right, agreed. Would you have a second to look at my current branch?  <a href=\"https://github.com/sivadeilra/rust/commits/user/ardavis/check_cfg\">https://github.com/sivadeilra/rust/commits/user/ardavis/check_cfg</a></p>\n<p>There are 2 commits. The most recent (1976a0a) converts the diagnostics to use lints, but I haven't yet figured out how to do this \"correctly\", so that the lints are controllable using <code>#![allow(...)]</code>.</p>",
        "id": 216637541,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1605285620
    },
    {
        "content": "<p>I think you'll want to add a new variant to <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint_defs/enum.BuiltinLintDiagnostics.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint_defs/enum.BuiltinLintDiagnostics.html</a> and use <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_session/parse/struct.ParseSess.html#method.buffer_lint_with_diagnostic\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_session/parse/struct.ParseSess.html#method.buffer_lint_with_diagnostic</a></p>",
        "id": 216723232,
        "sender_full_name": "oli",
        "timestamp": 1605353026
    }
]