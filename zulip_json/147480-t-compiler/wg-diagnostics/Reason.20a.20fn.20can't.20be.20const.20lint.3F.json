[
    {
        "content": "<p>I was reading <a href=\"https://blog.darklang.com/first-thoughts-on-rust-vs-ocaml/\">this article</a> when I came across this section:</p>\n<blockquote>\n<p>Programming in Rust reminds me a lot of programming in C++: you add a const to one function, and then you have to follow that const around the entire codebase until you finally get to the place where you learn it actually can't be const, and so fuck you.</p>\n</blockquote>\n<p>This was originally an analogy for something else in rust but it made me think... would it be possible to make some kind of clippy lint that would run on <code>const</code>-marked functions that don't compile as const which would kind of do the \"follwoing the const around\" step for you? It would stop when it reached the first non-const function called from another crate. I have no idea how feasible this is at all or what would be required, so it's just a thought. What do people think?</p>",
        "id": 215711292,
        "sender_full_name": "Restioson",
        "timestamp": 1604583209
    },
    {
        "content": "<p>Someone on the rust community discord said this of it:</p>\n<blockquote>\n<p>the process of running it seems simple enough, go through each function call in the function body, trace the function to its body, and recursively do the same thing again, if the function is 100% not const-able mark it as wrong and exit early with an error.</p>\n</blockquote>",
        "id": 215711512,
        "sender_full_name": "Restioson",
        "timestamp": 1604583304
    },
    {
        "content": "<p>maybe something for <a class=\"stream\" data-stream-id=\"146212\" href=\"/#narrow/stream/146212-t-compiler.2Fconst-eval\">#t-compiler/const-eval</a></p>",
        "id": 215725333,
        "sender_full_name": "Mara",
        "timestamp": 1604589393
    },
    {
        "content": "<p>we do have a lint that suggests you to make functions const fn that could be const fn</p>",
        "id": 215725655,
        "sender_full_name": "oli",
        "timestamp": 1604589542
    },
    {
        "content": "<p>(in clippy that is)</p>",
        "id": 215725670,
        "sender_full_name": "oli",
        "timestamp": 1604589549
    },
    {
        "content": "<p>it's false positive free I think, but has lots of false negatives (so it may not tell you about a function, even i fthat funciton could be const fn)</p>",
        "id": 215725729,
        "sender_full_name": "oli",
        "timestamp": 1604589576
    },
    {
        "content": "<p>oh... I misunderstood the original post</p>",
        "id": 215726826,
        "sender_full_name": "oli",
        "timestamp": 1604589995
    },
    {
        "content": "<p>ok, this is more <a class=\"stream\" data-stream-id=\"147480\" href=\"/#narrow/stream/147480-t-compiler.2Fwg-diagnostics\">#t-compiler/wg-diagnostics</a> so I'm moving it there</p>",
        "id": 215726864,
        "sender_full_name": "oli",
        "timestamp": 1604590012
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"257328\" href=\"/#narrow/stream/257328-clippy/topic/Reason.20a.20fn.20can.27t.20be.20const.20lint.3F\">#clippy &gt; Reason a fn can't be const lint?</a> by <span class=\"user-mention silent\" data-user-id=\"124288\">oli</span></p>",
        "id": 215726904,
        "sender_full_name": "Notification Bot",
        "timestamp": 1604590030
    },
    {
        "content": "<p>So... basically, when we report an error in a const fn because you called a non-const-fn, we may want to figure out why that function is not const fn other than not having a <code>const</code> attached to it</p>",
        "id": 215727083,
        "sender_full_name": "oli",
        "timestamp": 1604590092
    },
    {
        "content": "<p>and if there are functions in the call graph that can't be const fn, we tell you about that</p>",
        "id": 215727202,
        "sender_full_name": "oli",
        "timestamp": 1604590147
    },
    {
        "content": "<p>ah, apologies for not putting it here. i wasnt sure where to put it originally so thanks for moving it!</p>",
        "id": 215751047,
        "sender_full_name": "Restioson",
        "timestamp": 1604599352
    },
    {
        "content": "<p>i suppose aside from the function in the call graph not being able to be const, it could also just be out of your control to make const (out of your crate)</p>",
        "id": 215751114,
        "sender_full_name": "Restioson",
        "timestamp": 1604599389
    }
]