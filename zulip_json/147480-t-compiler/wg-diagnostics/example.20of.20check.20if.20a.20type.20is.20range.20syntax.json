[
    {
        "content": "<p>Hey, is there an example of checking if a path represents a type that can be used with range syntax?</p>\n<p>It was mentioned in <a href=\"https://github.com/rust-lang/rust/pull/76222\">https://github.com/rust-lang/rust/pull/76222</a> that I could ask here</p>",
        "id": 208997230,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1599151813
    },
    {
        "content": "<p>also let me know if there is a better stream than this for this question</p>",
        "id": 208998133,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1599152205
    },
    {
        "content": "<p>You're in <code>typeck</code>, right?</p>",
        "id": 209009382,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1599157332
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> yep!</p>",
        "id": 209009427,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1599157359
    },
    {
        "content": "<p>The way to do it is to check that the <code>Ty&lt;'_&gt;</code> you have implements a trait in particular: <code>PartialOrd</code> <a href=\"https://doc.rust-lang.org/std/ops/struct.Range.html\">https://doc.rust-lang.org/std/ops/struct.Range.html</a></p>",
        "id": 209009534,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1599157420
    },
    {
        "content": "<p>I think that check is sufficient... (need to reread the docs for <code>Range</code>)</p>",
        "id": 209009561,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1599157434
    },
    {
        "content": "<p>to do so you need to create a new <code>PredicateObligation</code> for that type with the <code>self_ty</code> being your <code>Ty&lt;'_&gt;</code></p>",
        "id": 209009646,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1599157457
    },
    {
        "content": "<p>you can see roughly what it takes here <a href=\"https://github.com/rust-lang/rust/blob/9e5f7d5631b8f4009ac1c693e585d4b7108d4275/compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs#L443-L477\">https://github.com/rust-lang/rust/blob/9e5f7d5631b8f4009ac1c693e585d4b7108d4275/compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs#L443-L477</a></p>",
        "id": 209009888,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1599157570
    },
    {
        "content": "<p>in <code>typeck</code> you might need to procure an inference context yourself (now that I think about it I'm not sure you'll be _able_ to do so in <code>typeck</code>)</p>",
        "id": 209010013,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1599157623
    },
    {
        "content": "<p>the alternative is to just check that <code>Ty&lt;'_&gt;</code> is one of the integer types <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 209010084,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1599157670
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> I think the ask from jonas is just about range syntax, is there any easy way to check if a type is exactly equal to one of these types? <a href=\"https://doc.rust-lang.org/reference/expressions/range-expr.html\">https://doc.rust-lang.org/reference/expressions/range-expr.html</a></p>",
        "id": 209010192,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1599157713
    },
    {
        "content": "<p>ah! I see what you're doing...</p>",
        "id": 209010243,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1599157737
    },
    {
        "content": "<p>ok, that's easier</p>",
        "id": 209010255,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1599157742
    },
    {
        "content": "<p>We have an internal attribute you can use: <code>#[rustc_diagnostic_item = \"range_type\"]</code></p>",
        "id": 209010345,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1599157791
    },
    {
        "content": "<p><code>option_type</code> is one of them</p>",
        "id": 209010366,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1599157799
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/3e16d4af7f6b0524434e758331a7cb3013a69791/library/core/src/option.rs#L143\">https://github.com/rust-lang/rust/blob/3e16d4af7f6b0524434e758331a7cb3013a69791/library/core/src/option.rs#L143</a></p>",
        "id": 209010439,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1599157818
    },
    {
        "content": "<p>which tags them so that you can ask for their <code>DefId</code> afterwards</p>",
        "id": 209010469,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1599157831
    },
    {
        "content": "<p>like we do here: <a href=\"https://github.com/rust-lang/rust/blob/9e5f7d5631b8f4009ac1c693e585d4b7108d4275/compiler/rustc_mir/src/borrow_check/diagnostics/move_errors.rs#L397\">https://github.com/rust-lang/rust/blob/9e5f7d5631b8f4009ac1c693e585d4b7108d4275/compiler/rustc_mir/src/borrow_check/diagnostics/move_errors.rs#L397</a></p>",
        "id": 209010532,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1599157865
    },
    {
        "content": "<p>so you can just tag all of the types with <code>rustc_diagnostic_item</code> and then get them from the <code>TyTcx</code></p>",
        "id": 209010639,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1599157918
    },
    {
        "content": "<p>that should work in every stage :)</p>",
        "id": 209010697,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1599157931
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119031\">Esteban Küber</span> <a href=\"#narrow/stream/147480-t-compiler.2Fwg-diagnostics/topic/example.20of.20check.20if.20a.20type.20is.20range.20syntax/near/209010345\">said</a>:</p>\n<blockquote>\n<p>We have an internal attribute you can use: <code>#[rustc_diagnostic_item = \"range_type\"]</code></p>\n</blockquote>\n<p>ah nice, I figured anything that has a special syntax we could add something like this. is_diagnostic_item seems perrrfect</p>\n<p>I wonder, as i have done anything that changes rustc and std, does making a change across both still work correctly with just a stage1 compiler?</p>\n<p>btw, I really appreciate how much detailed help you and <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> are giving me!!</p>",
        "id": 209010933,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1599158046
    },
    {
        "content": "<p>Oh also Range* are lang_items, i might just use that</p>",
        "id": 209011307,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1599158229
    },
    {
        "content": "<p>it lives! <a href=\"https://github.com/rust-lang/rust/pull/76222\">https://github.com/rust-lang/rust/pull/76222</a></p>\n<p>(when I did this, im pretty sure I got a diagnostic that is specific to TyKind, does rustc have special diagnostics for its own codebase?)</p>\n<p>i really do appreciate the help <span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> and <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> ! hopefully I can figure out the other issue and start getting more familiar with rustc</p>",
        "id": 209022935,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1599163573
    },
    {
        "content": "<blockquote>\n<p>does making a change across both still work correctly with just a stage1 compiler?</p>\n</blockquote>\n<p>Yes</p>\n<blockquote>\n<p>Oh also Range* are lang_items, i might just use that</p>\n</blockquote>\n<p>Perfect, that will do the trick.</p>\n<blockquote>\n<p>does rustc have special diagnostics for its own codebase?)</p>\n</blockquote>\n<p>Not sure I understand the question :)</p>",
        "id": 209023185,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1599163720
    },
    {
        "content": "<p>yeah, rustc has some internal lints</p>",
        "id": 209023246,
        "sender_full_name": "lcnr",
        "timestamp": 1599163757
    },
    {
        "content": "<p>Ah, I understand what you're asking, yes, we have internal lints :)</p>",
        "id": 209023417,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1599163845
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> once a pr is approved, how does it get merged?</p>",
        "id": 209410996,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1599582443
    },
    {
        "content": "<p>Once it receives an r+ by a member, a bit picks it up as part of a roll-up and merges it</p>",
        "id": 209411113,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1599582489
    }
]