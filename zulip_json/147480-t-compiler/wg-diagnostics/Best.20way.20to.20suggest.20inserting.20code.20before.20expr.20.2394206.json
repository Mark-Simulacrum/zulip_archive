[
    {
        "content": "<p>What is the best way to suggest inserting a snippet of code in front (the line above) an expression?</p>\n<p>E.g. if I have code like </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">y</span><span class=\"p\">.</span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"c1\">// ^ insert code here</span>\n<span class=\"w\">        </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>And I a want to suggest inserting something in front of the <code>match</code> like so:</p>\n<div class=\"codehilite\"><pre><span></span><code>help: move `x.y` in front of the `match`\n   |\nLL +     let value = x.y;\nLL ~     match value.z {\n   |           ~~~~~\n</code></pre></div>\n<p>How would I best produce a suggestion that says \"insert this line in front of the match\"?</p>\n<p>This came up in <a href=\"https://github.com/rust-lang/rust/issues/94206\">#94206</a>, but I wondered how to best do that myself sometimes before.</p>",
        "id": 275347241,
        "sender_full_name": "flip1995",
        "timestamp": 1647335926
    },
    {
        "content": "<p>My guess would have been to insert a snippet at the start of the line of the match and add a \\n at the end of the snippet</p>",
        "id": 275348468,
        "sender_full_name": "oli",
        "timestamp": 1647336580
    },
    {
        "content": "<p>Not sure the diagnostic renderer handles this well though</p>",
        "id": 275348484,
        "sender_full_name": "oli",
        "timestamp": 1647336592
    },
    {
        "content": "<p>I would span over the <code>match x.y.z {</code> and include the <code>match x.y.z {</code> in the suggested string. Clippy does that for <a href=\"https://rust-lang.github.io/rust-clippy/master/index.html\"><code>branches_sharing_code</code></a> and the <a href=\"https://github.com/rust-lang/rust-clippy/blob/master/tests/ui/branches_sharing_code/shared_at_top.stderr\">output</a> looks like the example output <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 275350420,
        "sender_full_name": "xFrednet",
        "timestamp": 1647337815
    },
    {
        "content": "<p>How would I get the span of the start of the line of the match? It would pretty much be an empty span. Does <code>expr.span.until(expr.span)</code> work?</p>\n<blockquote>\n<p>I would span over the <code>match x.y.z {</code> and include the <code>match x.y.z {</code> in the suggested string. </p>\n</blockquote>\n<p>That's how it is currently done. But since the <code>x.y</code> is replaced by the local it runs in a edge case with <code>match (x.y.z, true)</code>, where the <code>(</code> is then removed. In this case you can't just include the <code>match</code> verbatim, because you also have to modify the scrutinee.</p>",
        "id": 275350868,
        "sender_full_name": "flip1995",
        "timestamp": 1647338076
    },
    {
        "content": "<p>Ahh okay, The suggestion could only span over the <code>match</code> keyword excluding the scrutinee, but the suggesting might look a bit weird as a result as it will include the original scrutinee <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 275351112,
        "sender_full_name": "xFrednet",
        "timestamp": 1647338195
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_span/struct.Span.html#method.shrink_to_lo\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_span/struct.Span.html#method.shrink_to_lo</a> gives you a span pointing before its first character</p>",
        "id": 275361407,
        "sender_full_name": "oli",
        "timestamp": 1647344708
    },
    {
        "content": "<p>A <code>multipart_suggestion</code> receiving a span for the <code>match_expr.span.shrink_to_lo()</code> and another for <code>x.y</code> should support everything working well. There's a (hacky) method whose name I don't recall now to get the indentation preceding the current span and you can use that as part of the snippet for <code>let value = x.y;\\n{}</code> so that the match doesn't change positions, but that is something that you can skip and rely on <code>rustfmt</code> to fix for the user.</p>",
        "id": 275574598,
        "sender_full_name": "Esteban KÃ¼ber",
        "timestamp": 1647463502
    },
    {
        "content": "<p>Thanks, this is how it is done now. I wanted to ask if there is a better way to deal with the indentation. Clippy has a uility called <code>indent_of(span)</code> that gets the indentation, that can then be used with <code>\" \".repeat(indent)</code> to keep the <code>match</code> indentation. So that should work now. <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 275623665,
        "sender_full_name": "flip1995",
        "timestamp": 1647508251
    }
]