[
    {
        "content": "<p>Since I implemented backtrace pruning for Miri, simple examples often produce a one-frame backtrace. It looks a bit silly next to the span it is a backtrace to. But it also isn't entirely fair to omit it from the diagnostic, because it includes the name of the function that the error span is in.</p>\n<p>Is there a way, or could someone (me?) add a way to include the information in the span diagnostic? Currently I see</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">5</span>:<span class=\"mi\">23</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n</code></pre></div>\n<p>And I would like to see something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">inside</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">main</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">5</span>:<span class=\"mi\">23</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n</code></pre></div>\n<p>but I'm not too picky about the exact placement.</p>",
        "id": 275747211,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1647564118
    },
    {
        "content": "<p>This is not currently supported in the API, but you could modify Diagnostic to add a field for this. What I would do instead is make that message part of the main message or note that is being shown (to avoid breaking any tools consuming the json)</p>",
        "id": 275749026,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1647565832
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/84373\">#84373</a> allows to annotate spans with the enclosing <code>item</code>'s <code>DefId</code>. The first objective was incremental compilation, but the same infra can be used to know which in which item the span originated.</p>",
        "id": 275791007,
        "sender_full_name": "cjgillot",
        "timestamp": 1647603808
    },
    {
        "content": "<p>Note: this annotation is not enabled by default, since it has a perf impact and that it is currently tied to incr comp.</p>",
        "id": 275791074,
        "sender_full_name": "cjgillot",
        "timestamp": 1647603845
    },
    {
        "content": "<p>Oh! I hadn't thought of that <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 275851586,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1647631692
    },
    {
        "content": "<p>How would one turn on the annotation?</p>",
        "id": 275857354,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1647634721
    },
    {
        "content": "<p>The annotation is accessible using <code>Span::parent</code>.<br>\nYou'd need:</p>\n<ul>\n<li>to decouple the annotation from the incr comp feature. That means removing special handling based on <code>span.parent</code> in the <code>HashStable</code>, <code>Encodable</code> and <code>Decodable</code> impls for <code>Span</code>, and gate them on `incr-relative-spans| cmd-line flag instead;</li>\n<li>to use <code>Span::parent</code> to get an <code>Option&lt;LocalDefId&gt;</code> which points to the defining item, and use <code>tcx.item_name</code> to get the containing item's name.</li>\n</ul>",
        "id": 275869928,
        "sender_full_name": "cjgillot",
        "timestamp": 1647642249
    }
]