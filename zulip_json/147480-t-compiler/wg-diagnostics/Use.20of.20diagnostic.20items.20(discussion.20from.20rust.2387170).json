[
    {
        "content": "<p>Hey, there has been a discussion in <a href=\"https://github.com/rust-lang/rust/issues/87170\">rust#87170</a> if each function should really have it's own diagnostic item. This is a breakdown of the main points:</p>\n<p>The topic was initially (to my knowledge) raised <a href=\"#narrow/stream/147480-t-compiler.2Fwg-diagnostics/topic/Diagnostic.20Item.20Naming.20Convention.3F/near/225024603\">here</a> by <span class=\"user-mention\" data-user-id=\"360405\">@Cameron Steffen</span> who suggested to have a util function like <code>is_diagnostic_assoc_item(did, sym::Iterator, sym::map)</code> to find methods for diagnostic items.</p>\n<p>It was the suggested to add diagnostic items to some modules like <code>cmp</code>, <code>mem</code> and <code>iter</code> to not have a diagnostic item for each function in them. This raised a concern that this would work against the idea of diagnostic items as they would be used again to build paths which we want to avoid. (See <a href=\"https://github.com/rust-lang/rust/issues/87170\">rust#87170</a> for a more detailed breakdown)</p>\n<p>I then suggested to not use a system based on diagnostic items but instead reuse the path resolution already present in rust that is normally used:</p>\n<blockquote>\n<p>My understanding is that paths in use statements resolve to the original <code>DefId</code> even if the item has been reexported. This would allow the usage of these for diagnostics without knowing the internal design of these crates. Example: <code>lookup(\"std::iter::repeat\")</code> would return the <code>DefId</code>for <code>core::iter::sources::repeat::repeat</code> as that is also the function that is being called when the user uses <code>use std::iter::repeat</code>.</p>\n<p>Has there been any previous discussions about a concept like this?</p>\n</blockquote>\n<p>cc: <span class=\"user-mention\" data-user-id=\"360405\">@Cameron Steffen</span>, <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> and <span class=\"user-group-mention\" data-user-group-id=\"3456\">@T-clippy</span></p>",
        "id": 246219798,
        "sender_full_name": "xFrednet",
        "timestamp": 1626440726
    },
    {
        "content": "<p>I think there is agreement to not add diag items for associated items of traits and structs.</p>",
        "id": 246219976,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1626440836
    },
    {
        "content": "<p>I don't know how we could do it without diagnostic items. The DefId of an item at Clippy compile-time is not the same as the DefId at Clippy run-time.</p>",
        "id": 246220050,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1626440882
    },
    {
        "content": "<p>I think we gave up on the \"just let name resolution figure it out\" scheme, as no one knows how to make name resolution do that</p>",
        "id": 246220150,
        "sender_full_name": "oli",
        "timestamp": 1626440935
    },
    {
        "content": "<p>I think runtime name resolution is too costly anyways. You're doing X resolutions * Y nodes.</p>",
        "id": 246220408,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1626441078
    },
    {
        "content": "<p>we could probably cache it. We used to do a path resolution, and it was fast enough</p>",
        "id": 246220457,
        "sender_full_name": "oli",
        "timestamp": 1626441118
    },
    {
        "content": "<p>A similar resolution has to be done currently as well, it would surprise me if that would make a big difference to use runtime name resolution. And that's not taking caching into a count</p>",
        "id": 246220681,
        "sender_full_name": "xFrednet",
        "timestamp": 1626441242
    },
    {
        "content": "<p>We're doing 1 or 2 <code>tcx.parent</code> calls which is not as much as traversing a path of 10 elements or so.</p>",
        "id": 246221181,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1626441501
    },
    {
        "content": "<p>caching SGTM</p>",
        "id": 246221259,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1626441544
    },
    {
        "content": "<p>it would be nice if there were some way for Clippy to cache data without adding a feature to rustc</p>",
        "id": 246221336,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1626441595
    },
    {
        "content": "<p>I'll see if I can somehow dig up how paths are resolved in an accessible manner to Clippy. I would say we can look at performance/caching then <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 246222117,
        "sender_full_name": "xFrednet",
        "timestamp": 1626441965
    },
    {
        "content": "<p>maybe some day we should rewrite clippy on top of rust analyzer <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 246222250,
        "sender_full_name": "oli",
        "timestamp": 1626442050
    },
    {
        "content": "<p>Clippy's homegrown path resolution is <code>path_to_res</code>. I suspect we would ultimately still have something like that rather than hooking into rustc's name resolution.</p>",
        "id": 246222464,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1626442157
    },
    {
        "content": "<p>Could you explain why <span class=\"user-mention\" data-user-id=\"360405\">@Cameron Steffen</span>, wouldn't it be better to reuse the same code that rustc uses? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 246222794,
        "sender_full_name": "xFrednet",
        "timestamp": 1626442313
    },
    {
        "content": "<p>I suppose, but I looked at it one time and got scared</p>",
        "id": 246222904,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1626442356
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"369415\">xFrednet</span> <a href=\"#narrow/stream/147480-t-compiler.2Fwg-diagnostics/topic/Use.20of.20diagnostic.20items.20.28discussion.20from.20rust.2387170.29/near/246222794\">said</a>:</p>\n<blockquote>\n<p>Could you explain why <span class=\"user-mention silent\" data-user-id=\"360405\">Cameron Steffen</span>, wouldn't it be better to reuse the same code that rustc uses? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>\n<p>it may not be possible at all, it's deeply entangled in the compiler and not usable afterwards as rustdoc has painfully found out</p>",
        "id": 246222979,
        "sender_full_name": "oli",
        "timestamp": 1626442401
    },
    {
        "content": "<p>so... if you do anything here, coordinate with rustdoc</p>",
        "id": 246222999,
        "sender_full_name": "oli",
        "timestamp": 1626442408
    },
    {
        "content": "<p>I think it's very complex because it has to work with paths to items that are not yet seen/compiled</p>",
        "id": 246223016,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1626442418
    },
    {
        "content": "<p>Okay, it seem's like I've underestimated the complexity of the system again <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> I'll have a look at it, also how rustdoc does it, thank you for the pointers! <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 246223377,
        "sender_full_name": "xFrednet",
        "timestamp": 1626442593
    },
    {
        "content": "<p>Soo we could basically throw <code>path_to_res</code> into a query right?</p>",
        "id": 246223450,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1626442630
    },
    {
        "content": "<p><code>&amp;[Symbol] -&gt; Option&lt;DefId&gt;</code></p>",
        "id": 246223477,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1626442646
    },
    {
        "content": "<p>or Res, whatever</p>",
        "id": 246223505,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1626442666
    },
    {
        "content": "<p><code>path_to_res</code> is the wrong thing. It resolves to the absolute path. Which can change randomly between platforms and when libstd is changed</p>",
        "id": 246223511,
        "sender_full_name": "oli",
        "timestamp": 1626442668
    },
    {
        "content": "<p>that's why we moved to diagnostic items</p>",
        "id": 246223528,
        "sender_full_name": "oli",
        "timestamp": 1626442676
    },
    {
        "content": "<p>No <code>path_to_res</code> works with non-absolute paths. We have both.</p>",
        "id": 246223713,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1626442768
    },
    {
        "content": "<p>The idea would be to use the path that is exposed to the user like: <code>std::iter::repeat</code> even if that ends up somewhere completely different</p>",
        "id": 246223938,
        "sender_full_name": "xFrednet",
        "timestamp": 1626442874
    },
    {
        "content": "<p>right</p>",
        "id": 246223990,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1626442902
    },
    {
        "content": "<p>Please do not clone the resolver</p>",
        "id": 246243379,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626451556
    },
    {
        "content": "<p>It causes ICEs, I've spent like 6 months trying to fix it unsuccessfully</p>",
        "id": 246243433,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626451571
    },
    {
        "content": "<p>Either resolve things ahead of time (which is hard because all the APIs are different and you don't have access to a tcx) or use diagnostic items or whatever</p>",
        "id": 246243511,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626451613
    },
    {
        "content": "<p>I was hoping that we could reuse the resolver somehow. From the feedback here and on GH it seems like diagnostic items are a way better solution (and that's probably why the decision was made to introduce them^^). I'll still look a bit into it and toy around with it, but it seems like that is not worth to pursue, especially if it could produce avoidable ICEs</p>",
        "id": 246247461,
        "sender_full_name": "xFrednet",
        "timestamp": 1626453490
    }
]