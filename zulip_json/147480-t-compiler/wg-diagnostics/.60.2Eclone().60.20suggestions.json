[
    {
        "content": "<p>Hey! I'm working on improving suggestions for moved-out errors for cases like these:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">duplicate</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">t</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Currently we only suggest adding <code>T: Copy</code> bound, however sometime it's a better solution to use <code>.clone()</code> instead. So, I want to add a suggestion like this:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>help: Alternatively, consider cloning the value\n  |\n2 |     [t.clone(), t];\n  |       ++++++++\n</code></pre></div>\n<p>And I have a couple of questions about this</p>\n<ol>\n<li>Is this ok? Wouldn't it make the error too big?</li>\n</ol>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>example</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>   error[E0382]: use of moved value: `t`\n --&gt; t.rs:2:9\n  |\n1 | fn duplicate&lt;T&gt;(t: T) {\n  |                 - move occurs because `t` has type `T`, which does not implement the `Copy` trait\n2 |     [t, t];\n  |      -  ^ value used here after move\n  |      |\n  |      value moved here\n  |\nhelp: consider restricting type parameter `T`\n  |\n1 | fn duplicate&lt;T: Copy&gt;(t: T) {\n  |               ++++++\nhelp: Alternatively, consider cloning the value\n  |\n2 |     [t.clone(), t];\n  |       ++++++++\n</code></pre></div>\n</div></div>\n<ol start=\"2\">\n<li>How to test this with rustfix? it applies both suggestions, but only one of them should be applied</li>\n</ol>",
        "id": 274398128,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1646663126
    },
    {
        "content": "<p>are there any other errors that have multiple \"helps\" for a single error?</p>",
        "id": 274402130,
        "sender_full_name": "bstrie",
        "timestamp": 1646664820
    },
    {
        "content": "<ol>\n<li>Not sure about the \"too big\" part. You would also have to add a suggestion to add a <code>T: Clone</code> bound in order to be able to call <code>.clone()</code>.  I think the question should be more about whether it adds useful information, rather than whether it is too long. This is of course a trait off. I don't really have an answer to it though.</li>\n<li><code>rustfix</code> is not (fully?) able to apply multi-part suggestions at the moment. See <a href=\"https://github.com/rust-lang/rustfix/issues/141\">rustfix#141</a> and <a href=\"https://github.com/rust-lang/rust/issues/53934\">#53934</a>. The TL;DR of this is: it is not clear if all parts of a multipart suggestion should be applied or which of the multple suggestions should be applied. The later would be true for your planned suggestion.</li>\n</ol>",
        "id": 274404182,
        "sender_full_name": "flip1995",
        "timestamp": 1646665593
    },
    {
        "content": "<p>It's unfortunate that our current input for rustfix is insufficient for properly processing multiple suggestions in all cases.</p>",
        "id": 274431543,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1646675929
    },
    {
        "content": "<p>What have been previously done in similar cases? I see the following options:</p>\n<ol>\n<li>Do not show both suggestions at the same time (eg choose <code>.clone()</code> if the type is already <code>Clone</code> or if it can't be <code>Copy</code>)</li>\n<li>Make both suggestions not machine applicable </li>\n<li>Make one of the suggestions not machine applicable (will this make <code>rustfix</code> apply only the machine applicable one?)</li>\n</ol>",
        "id": 274432080,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1646676106
    },
    {
        "content": "<blockquote>\n<p>Make one of the suggestions not machine applicable (will this make rustfix apply only the machine applicable one?)</p>\n</blockquote>\n<p>This one will work, I've done this before I think. Though I think that getting only one of the fixups to show would probably be best...</p>",
        "id": 274442363,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1646680185
    },
    {
        "content": "<p>On the side, I don't know if adding <code>: Copy</code> bound to a generic should ever be MachineApplicable, since it changes what type the function accepts.</p>",
        "id": 274442397,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1646680201
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256342\">bstrie</span> <a href=\"#narrow/stream/147480-t-compiler.2Fwg-diagnostics/topic/.60.2Eclone.28.29.60.20suggestions/near/274402130\">said</a>:</p>\n<blockquote>\n<p>are there any other errors that have multiple \"helps\" for a single error?</p>\n</blockquote>\n<p>Yes, there are a few.</p>",
        "id": 274778046,
        "sender_full_name": "Esteban K端ber",
        "timestamp": 1646875330
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"273349\">@Waffle Lapkin</span> what I would do is twofold:</p>\n<p>Handle the following case by suggesting only <code>t.clone()</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>fn duplicate&lt;T: Clone&gt;(t: T) {\n    [t, t];\n}\n</code></pre></div>\n<p>and in the case you're working on:</p>\n<div class=\"codehilite\"><pre><span></span><code>help: alternatively, consider cloning the value\n  |\n1 ~ fn duplicate&lt;T: Clone&gt;(t: T) {\n2 ~     [t.clone(), t];\n</code></pre></div>\n<p>(Although the later might not look as good if the .clone() call is too far apart from the trait bound and might confuse people, in that case maybe having two separate suggestions might work better:)</p>\n<div class=\"codehilite\"><pre><span></span><code>help: alternatively, consider making the value cloneable...\n  |\n1 | fn duplicate&lt;T: Clone&gt;(t: T) {\n  |               ++++++++\nhelp: ...and cloning the value\n  |\n2 |     [t.clone(), t];\n  |       ++++++++\n</code></pre></div>\n<p>I'm fine with the verbosity of these examples.</p>",
        "id": 274778372,
        "sender_full_name": "Esteban K端ber",
        "timestamp": 1646875626
    },
    {
        "content": "<blockquote>\n<p>How to test this with rustfix? it applies both suggestions, but only one of them should be applied</p>\n</blockquote>\n<p>Either let all the suggestions be applied (which is fine usually), or rely exclusively on the visual .stderr output <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 274778460,
        "sender_full_name": "Esteban K端ber",
        "timestamp": 1646875686
    },
    {
        "content": "<p>I did <code>.clone()</code> and <code>: Clone</code> in separate suggestions because it was easier at the moment, but it can be merged with a little refactoring.</p>",
        "id": 274808236,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1646903761
    },
    {
        "content": "<p>The main problem I'm currently having is code like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">duplicate</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Clone</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">t</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">t</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>If I understand correctly, the only thing I have at the moment of reporting the error is span of <code>t</code> inside of <code>S{}</code>. My naive <code>span.shrink_to_hi(), \".clone()\"</code> suggests <code>S { t.clone() }</code> which is problematic.</p>\n<p><span class=\"user-mention\" data-user-id=\"426609\">@Michael Goulet (compiler-errors)</span> hinted me that there is a function that makes similar suggestions: <a href=\"https://github.com/rust-lang/rust/blob/2f8d1a835b4e7feaf625f74d0d5cb9b84dbc845a/compiler/rustc_typeck/src/check/demand.rs#L507\"><code>maybe_get_struct_pattern_shorthand_field</code></a>, but it needs HIR (<code>&amp;hir::Expr&lt;'_&gt;</code>) and I can't find any way how can I get it from span/the information I have about moves.</p>",
        "id": 274809028,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1646904264
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"273349\">@Waffle Lapkin</span>  Do you have a piece of code to show me? Do you no longer have an expr or HirId at hand? If you don't, an invalid suggestion _might_ be fine, depending on how often this happens. Ideally we would change the code to make the expr or parent expr available.</p>",
        "id": 275574258,
        "sender_full_name": "Esteban K端ber",
        "timestamp": 1647463320
    },
    {
        "content": "<p>I think they're making changes in <code>rustc_borrowck/src/diagnostics/conflict_errors.rs</code>, so there's no HIR information available, just a span. I think it may be difficult to pipe HIR information into the MIR body because of the not-1:1 correlation between MIR statements and HIR exprs...</p>",
        "id": 275576222,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1647464321
    },
    {
        "content": "<p>I wonder if we could at least mark MIR assignment statements with a flag that signifies if it originated from a struct-pattern shorthand, though that might be overkill for use in only one fixup in borrowck.</p>",
        "id": 275576237,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1647464327
    },
    {
        "content": "<p>Perhaps instead of a suggestion, the diagnostic could just use a note that describes something like \"use <code>clone</code> on this expression\"? though I'm not sure if span_notes of that nature are discouraged in favor for a span_suggestion, even if it's incorrect sometimes.</p>",
        "id": 275576603,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1647464466
    },
    {
        "content": "<p>(also I'm curious if other suggestions in <code>report_use_of_moved_or_uninitialized</code> are similarly broken when it comes to struct field shorthand...)</p>",
        "id": 275576850,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1647464573
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"426609\">Michael Goulet (compiler-errors)</span> <a href=\"#narrow/stream/147480-t-compiler.2Fwg-diagnostics/topic/.60.2Eclone.28.29.60.20suggestions/near/275576850\">said</a>:</p>\n<blockquote>\n<p>(also I'm curious if other suggestions in <code>report_use_of_moved_or_uninitialized</code> are similarly broken when it comes to struct field shorthand...)</p>\n</blockquote>\n<p>Very likely. We fix them as they come up (if we can)</p>",
        "id": 275578792,
        "sender_full_name": "Esteban K端ber",
        "timestamp": 1647465554
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"426609\">Michael Goulet (compiler-errors)</span> <a href=\"#narrow/stream/147480-t-compiler.2Fwg-diagnostics/topic/.60.2Eclone.28.29.60.20suggestions/near/275576603\">said</a>:</p>\n<blockquote>\n<p>Perhaps instead of a suggestion, the diagnostic could just use a note that describes something like \"use <code>clone</code> on this expression\"? though I'm not sure if span_notes of that nature are discouraged in favor for a span_suggestion, even if it's incorrect sometimes.</p>\n</blockquote>\n<p>We could, but I think for those cases lets provide a structured suggestion marked as MaybeIncorrect</p>",
        "id": 275578822,
        "sender_full_name": "Esteban K端ber",
        "timestamp": 1647465583
    },
    {
        "content": "<p>I do see that there's a <code>mir_hir_id</code> there available, but don't know what it's pointing at</p>",
        "id": 275578905,
        "sender_full_name": "Esteban K端ber",
        "timestamp": 1647465613
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119031\">Esteban K端ber</span> <a href=\"#narrow/stream/147480-t-compiler.2Fwg-diagnostics/topic/.60.2Eclone.28.29.60.20suggestions/near/275574258\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"273349\">Waffle Lapkin</span>  Do you have a piece of code to show me? Do you no longer have an expr or HirId at hand? If you don't, an invalid suggestion _might_ be fine, depending on how often this happens. Ideally we would change the code to make the expr or parent expr available.</p>\n</blockquote>\n<p>I can make a WIP PR to show you what I've for so far, though ideally <a href=\"https://github.com/rust-lang/rust/pull/94698\">https://github.com/rust-lang/rust/pull/94698</a> should be merged first</p>",
        "id": 275586475,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1647470473
    },
    {
        "content": "<p>I've made a PR: <a href=\"https://github.com/rust-lang/rust/pull/95115\">https://github.com/rust-lang/rust/pull/95115</a>!</p>",
        "id": 275916174,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1647704848
    },
    {
        "content": "<p><em>oh no, I forgot to check tidy</em></p>",
        "id": 275916441,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1647705285
    }
]