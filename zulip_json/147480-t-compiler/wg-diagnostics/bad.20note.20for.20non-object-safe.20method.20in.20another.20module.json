[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Example</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">query</span><span class=\"o\">&lt;</span><span class=\"n\">Q</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">q</span>: <span class=\"nc\">Q</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Example</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">query</span><span class=\"o\">&lt;</span><span class=\"n\">Q</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">Q</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">unimplemented</span><span class=\"o\">!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">mod</span> <span class=\"nn\">nested</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">super</span>::<span class=\"n\">Example</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">example</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mf\">1.</span><span class=\"n\">query</span>::<span class=\"o\">&lt;</span><span class=\"nb\">ToString</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"s\">&quot;&quot;</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>error: the `query` method cannot be invoked on a trait object\n  --&gt; src/lib.rs:14:11\n   |\n14 |         1.query::&lt;ToString&gt;(&quot;&quot;)\n   |           ^^^^^\n   |\n   = note: another candidate was found in the following trait, perhaps add a `use` for it:\n           `use crate::Example;`\n</pre></div>\n\n\n<p>The error message is good, but the <code>note</code> is not — that's the trait we are already using.</p>",
        "id": 167319134,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1559670637
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> should I file this?</p>",
        "id": 167319179,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1559670665
    },
    {
        "content": "<p>Actually, <em>is</em> the error correct? <code>1</code> isn't a trait object.</p>",
        "id": 167319301,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1559670729
    },
    {
        "content": "<p>I think that the _error_ might be correct, in that <code>rustc</code> correctly complains, but the exposed message is incorrect</p>",
        "id": 167319662,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1559670994
    },
    {
        "content": "<p>go ahead and file</p>",
        "id": 167319675,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1559670999
    },
    {
        "content": "<p>we either have to make this compile _or_ handle the case in the emitted diagnostic</p>",
        "id": 167319698,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1559671018
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> just realized the problem. It's not that <code>i32</code> is a trait object, is that <code>ToString</code> is.<br>\n<a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=091474ba4cbe4a91a5f731427e31dbc4\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=091474ba4cbe4a91a5f731427e31dbc4\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=091474ba4cbe4a91a5f731427e31dbc4</a></p>",
        "id": 167319844,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1559671117
    },
    {
        "content": "<p>So yes, the error is \"correct\", but we need to differentiate the problem originating from <code>self</code> and from type arguments</p>",
        "id": 167319906,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1559671178
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span>  Should I file as two things? One for the note and one for distinguishing?</p>",
        "id": 167321002,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1559671814
    },
    {
        "content": "<p>Na, just one ticket should be fine</p>",
        "id": 167323489,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1559673148
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/61525\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61525\">https://github.com/rust-lang/rust/issues/61525</a></p>\n<p>Thanks!</p>",
        "id": 167324870,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1559674059
    }
]