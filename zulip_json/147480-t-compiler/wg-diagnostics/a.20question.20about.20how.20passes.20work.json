[
    {
        "content": "<p>I was looking into <a href=\"https://github.com/rust-lang/rust/issues/75906\">https://github.com/rust-lang/rust/issues/75906</a> and <a href=\"https://github.com/rust-lang/rust/issues/75907\">https://github.com/rust-lang/rust/issues/75907</a><br>\nlooking into the how these errors work. My understanding is that the \"bad\" error happens during resolution, but the better one (realizing its a private field) happens during typeck, which happens AFTER resolution (well, i assume typeck now \"queries\" rustc_resolve). If this is true, then how can this error be improved?</p>",
        "id": 209002499,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1599154078
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"257428\">@Gus Wynn</span> I would suggest recording additional information in <code>struct_constructors</code>: <a href=\"https://github.com/rust-lang/rust/blob/08deb863bdebfcbbb71c18acf903eca84f1df4e7/compiler/rustc_resolve/src/build_reduced_graph.rs#L815\">https://github.com/rust-lang/rust/blob/08deb863bdebfcbbb71c18acf903eca84f1df4e7/compiler/rustc_resolve/src/build_reduced_graph.rs#L815</a></p>\n<p>Specifically, I would suggest recording the fields from the constructor</p>",
        "id": 209005854,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1599155628
    },
    {
        "content": "<p>You can then modify the error-reporting code to determine the first inaccessible field: <a href=\"https://github.com/rust-lang/rust/blob/08deb863bdebfcbbb71c18acf903eca84f1df4e7/compiler/rustc_resolve/src/late/diagnostics.rs#L747-L756\">https://github.com/rust-lang/rust/blob/08deb863bdebfcbbb71c18acf903eca84f1df4e7/compiler/rustc_resolve/src/late/diagnostics.rs#L747-L756</a></p>",
        "id": 209005958,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1599155677
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> ah interesting, thanks for the pointers, ill see if i can come up with anything</p>",
        "id": 209006059,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1599155736
    },
    {
        "content": "<p>Changing the error message will take more work, since it's constructed before that code is invoked</p>",
        "id": 209006302,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1599155844
    },
    {
        "content": "<p>feel free to ping me if you have any questions</p>",
        "id": 209006328,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1599155859
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> wait why will constructing the error message be difficult? is the error used in 747-756 the wrong span?</p>",
        "id": 209006501,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1599155930
    },
    {
        "content": "<p>The 'private fields' messages is added from <code>smart_resolve_context_dependent_help</code>, which is called with an existing <code>DiagnosticBuilder</code></p>",
        "id": 209006610,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1599155990
    },
    {
        "content": "<p>I think you'll need to modify <code>smart_resolve_report_errors</code> to construct a different <code>base_msg</code></p>",
        "id": 209006797,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1599156073
    },
    {
        "content": "<p>Ah okay, sounds like my plan is to 1. understand what i need to add to struct_constructors and 2. figure out how to build a new diagnostic</p>",
        "id": 209007003,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1599156169
    },
    {
        "content": "<p>Building an entire new diagnostic shouldn't be necessary - you'll just need to adjust the construction code</p>",
        "id": 209007063,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1599156200
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/08deb863bdebfcbbb71c18acf903eca84f1df4e7/compiler/rustc_resolve/src/late/diagnostics.rs#L123-L174\">https://github.com/rust-lang/rust/blob/08deb863bdebfcbbb71c18acf903eca84f1df4e7/compiler/rustc_resolve/src/late/diagnostics.rs#L123-L174</a></p>",
        "id": 209007111,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1599156229
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> - is there a good way of overwriting the main message of a <code>DiagnosticBuilder</code> after it's been constructed?</p>",
        "id": 209007212,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1599156267
    },
    {
        "content": "<p>it looks like the <code>message</code> field is public, but overwriting that seems a little hacky</p>",
        "id": 209007310,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1599156324
    },
    {
        "content": "<p>Omg, VariantData has .fields, which returns StructField's, which have the span's I need, i am continually impressed with rustc's ability to just put spans everywhere</p>",
        "id": 209008923,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1599157086
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> a _good_ way, no. You can overwrite it and is hacky... I've done it a handful of times.</p>",
        "id": 209009160,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1599157217
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> I started looking at this again, I can't really figure out how to get the spans of <em>usages</em> of the fields (so the span of fy in <code>Bar(fy = ...</code></p>\n<p>Looking into src/late/diagnostics.rs and src/late.rs, it seems like i actually need to pass the bindings here: <a href=\"https://github.com/rust-lang/rust/blob/5099914a16a215794ad243df0cc7a05d91d168e0/compiler/rustc_resolve/src/late.rs#L1543\">https://github.com/rust-lang/rust/blob/5099914a16a215794ad243df0cc7a05d91d168e0/compiler/rustc_resolve/src/late.rs#L1543</a> down through the call stack to make it to smart_resolve_report_errors </p>\n<p>does that make sense?<br>\nalso, this brings up 2 questions</p>\n<ol>\n<li>how do I know which of the bindings is private? i.e., how do I compare the Ident to the struct_constructors</li>\n<li>what is different about Struct's that makes them not hit this error, whereas TupleStruct's do?</li>\n</ol>",
        "id": 209425527,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1599589709
    },
    {
        "content": "<p>Separately, I might play around with this: <a href=\"https://github.com/rust-lang/rust/blob/08deb863bdebfcbbb71c18acf903eca84f1df4e7/compiler/rustc_privacy/src/lib.rs#L1105-L1150\">https://github.com/rust-lang/rust/blob/08deb863bdebfcbbb71c18acf903eca84f1df4e7/compiler/rustc_privacy/src/lib.rs#L1105-L1150</a> and see if I can make this work for TupleStructs instead</p>",
        "id": 209426051,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1599589982
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"257428\">@Gus Wynn</span> I think you'll want to pass down the second field of <code>PatKind::TupleStruct</code></p>",
        "id": 209435969,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1599594986
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> yeah so in visit_pat if its a tuple struct i call...<code>self.visit_pat(the internal pat)</code> right?</p>",
        "id": 209436029,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1599595034
    },
    {
        "content": "<p>I don't think you need to add any new calls to <code>visit_pat</code></p>",
        "id": 209436086,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1599595071
    },
    {
        "content": "<p>I think you'll want to attach additional information to <code>PathSource</code></p>",
        "id": 209436167,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1599595091
    },
    {
        "content": "<p>which gets passed down to <code>smart_resolve_report_errors</code></p>",
        "id": 209436205,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1599595115
    },
    {
        "content": "<p>What makes this somewhat tricky is the fact that you mentioned earlier - tuple structs and named structs are handled differently</p>",
        "id": 209436249,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1599595144
    },
    {
        "content": "<p>I'm not sure why, but it looks like the visibility of the internal 'constructor' for tuple structs is determined by looking at the fields</p>",
        "id": 209436305,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1599595181
    },
    {
        "content": "<p>while for named structs, the constructor always has the same visibility as the struct itself, and field privacy is checked after resolution</p>",
        "id": 209436382,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1599595206
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> oh im a bit confused, what makes it not possible to do this in the same place as structs (in rustc_privacy, in NamePrivacyVisitor)?</p>",
        "id": 209436393,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1599595213
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/147480-t-compiler.2Fwg-diagnostics/topic/a.20question.20about.20how.20passes.20work/near/209436305\">said</a>:</p>\n<blockquote>\n<p>I'm not sure why, but it looks like the visibility of the internal 'constructor' for tuple structs is determined by looking at the fields</p>\n</blockquote>\n<p>hmm interesting, ill look into this</p>",
        "id": 209436417,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1599595233
    },
    {
        "content": "<p>ideally, you would be able to check it there</p>",
        "id": 209436460,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1599595254
    },
    {
        "content": "<p>I'm not sure why tuple structs have their constructor visibility handling done this way</p>",
        "id": 209436493,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1599595273
    },
    {
        "content": "<p>It looks like this inconsistency actually results in user-observable differences: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=e364e3402b9dae0bbc244907e9a38538\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=e364e3402b9dae0bbc244907e9a38538</a></p>",
        "id": 209436894,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1599595442
    },
    {
        "content": "<p>You can pattern-match a named struct with private fields by using the wildcard pattern <code>..</code></p>",
        "id": 209436961,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1599595473
    },
    {
        "content": "<p>since the constructor has the same visibility as the struct itself</p>",
        "id": 209436987,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1599595484
    },
    {
        "content": "<p>However, you cannot do this for tuple structs</p>",
        "id": 209436999,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1599595490
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> interesting...<br>\nI may play around with NamePrivacyVisitor for a bit more, then try out the PathSource technique</p>",
        "id": 209437121,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1599595553
    },
    {
        "content": "<p>Changing this would require an FCP (if not an RFC), so I think we're stuck with the existing resolver logic for the time being</p>",
        "id": 209437135,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1599595557
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"257428\">@Gus Wynn</span> I don't think <code>NamePrivacyVisitor</code> will ever get run on the relevant code</p>",
        "id": 209437245,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1599595587
    },
    {
        "content": "<p>oh interesting...damn i have a lot to learn about rustc</p>",
        "id": 209437302,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1599595622
    },
    {
        "content": "<p><code>NamePrivacyVisitor</code> gets run after type-checking (you can see this by noting how it uses <code>rustc_middle::ty::Ty</code>)</p>",
        "id": 209437321,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1599595634
    },
    {
        "content": "<p>However, the tuple struct error occurs during resolution, which means that type-checking will never run for the enclosing function</p>",
        "id": 209437369,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1599595665
    },
    {
        "content": "<p>or if it does, it will not produce a useful result</p>",
        "id": 209437382,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1599595674
    },
    {
        "content": "<p>Ahhh so that explains it, that this difference between TupleStructs and Structs is that the constructor is actually resolvable in rustc_resolve for Struct's for not TupleStructs, i had it backwards somehow</p>",
        "id": 209437523,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1599595734
    },
    {
        "content": "<p>yeah</p>",
        "id": 209437547,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1599595747
    },
    {
        "content": "<p>I'm going to open an issue to get more details about why this inconsistency exists</p>",
        "id": 209437575,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1599595760
    },
    {
        "content": "<p>nice, will be interesting to know is there is a reason more than \"this is how it was implemented\"</p>",
        "id": 209437815,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1599595862
    },
    {
        "content": "<p>opened <a href=\"https://github.com/rust-lang/rust/issues/76494\">https://github.com/rust-lang/rust/issues/76494</a></p>",
        "id": 209438388,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1599596144
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"257428\">@Gus Wynn</span> Supporting the full set of possibilities (e.g. <code>let TupleStruct(a, ..) = foo</code>) could be tricky. If you don't want to deal with that, I think it would be fine for your PR to only handle the case where all fields are named (e.g. <code>let foo = TupleStruct(a, b, c)</code> and <code>let TupleStruct(a, b, c) = foo</code>)</p>",
        "id": 209439266,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1599596584
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> yeah I figured, I am currently at \"ok now match up the Vec&lt;P&lt;Pat&gt; with the fields and their resolved visibility</p>",
        "id": 209439605,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1599596744
    },
    {
        "content": "<p>oh jeez PathSource is Copy, i wanted a Vec of Idents for all the fields <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span> may just go with the first non-pub one</p>",
        "id": 209443893,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1599598944
    },
    {
        "content": "<p>set_primary_message, replace_span_with, and .code all let sneak by with an easier adjustment to the diagnostic code!<br>\n<a href=\"https://github.com/rust-lang/rust/pull/76499\">https://github.com/rust-lang/rust/pull/76499</a></p>\n<p>This, while hard for me while I get my bearings, has been a great way to get ramped up</p>",
        "id": 209451384,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1599603659
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> <span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> no rush, but if you find time, do you mind looking at the way I setup the span_label in <a href=\"https://github.com/rust-lang/rust/pull/76499\">https://github.com/rust-lang/rust/pull/76499</a> and seeing if there is a better way? Thanks!</p>",
        "id": 209576364,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1599690543
    }
]