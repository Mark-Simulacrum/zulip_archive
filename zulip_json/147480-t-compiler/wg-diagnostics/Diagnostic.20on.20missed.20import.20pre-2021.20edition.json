[
    {
        "content": "<p>It was suggested in <a href=\"https://github.com/rust-lang/rust/issues/90157\">#90157</a> that rustc emit a note in case someone tries to use one of <code>TryFrom</code>, <code>TryInto</code>, <code>FromIterator</code> without Edition 2021 without having imported it. Is this something we want?<br>\nIf so, I've looked at the steps that would need to be taken to do this; it seems that the easy case is the one of a failed <code>.try_into()</code> call, since this happens during type checking and we can check if any of the suggested traits to import have the <code>TryInto</code> <code>rustc_diagnostic</code>. On the other hand, in the case of someone trying to name one of these traits, this seems slightly more difficult; the necessary information seems only to be available in <code>rustc_resolve::diagnostics::lookup_import_candidates_from_module</code>. Is attaching a <code>note: Option&lt;String&gt;</code> field to <code>diagnostics::ImportSuggestions</code> that could carry an arbitrary additional note associated with that suggestion to the point where the error is emitted the right idea?</p>",
        "id": 258796124,
        "sender_full_name": "Jake",
        "timestamp": 1634953232
    },
    {
        "content": "<p>Adding the <code>Option&lt;String&gt;</code> sounds reasonable</p>",
        "id": 258901878,
        "sender_full_name": "Esteban KÃ¼ber",
        "timestamp": 1635114577
    },
    {
        "content": "<p>I've started working on this; essentially, I'm just calling into <code>self.cstore().item_attributes(did, self.sess)</code> in <code>lookup_import_candidates_from_module</code> for the appropriate <code>DefId</code>s (specifically those that are arriving at L866). This causes ICEs in a couple of tests, for example <code>ui/const-generics/invalid-enum.rs</code> at <code>'Failed to get crate data for crate0', compiler/rustc_metadata/src/creader.rs:148:32</code>. Now I can fix this without too much of an issue (just ignore those cases where this would ICE), but why is it possible for a path to resolve to a <code>DefId</code> for which we can't get the crate metadata?</p>",
        "id": 258927774,
        "sender_full_name": "Jake",
        "timestamp": 1635149183
    },
    {
        "content": "<p>That ICE is occurring when you try to lookup something from the current crate in the crate  store</p>",
        "id": 259013224,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1635192462
    },
    {
        "content": "<p>If you have the HIR available, you can use the <code>attrs</code> method for same-crate DefIds: <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/hir/map/struct.Map.html#method.attrs\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/hir/map/struct.Map.html#method.attrs</a></p>",
        "id": 259013596,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1635192616
    },
    {
        "content": "<p>Ahh, that makes sense. This is in <code>rustc_resolve</code>, so I don't expect to have the HIR available. That being said, it doesn't matter, I'll just ignore local <code>DefId</code>s. This will cause the note to not be reported for anyone editing <code>libcore</code>, but I assume we don't particularly care</p>",
        "id": 259031948,
        "sender_full_name": "Jake",
        "timestamp": 1635202880
    },
    {
        "content": "<p>yeah, that seems fine</p>",
        "id": 259040035,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1635210316
    }
]