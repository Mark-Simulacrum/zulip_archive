[
    {
        "content": "<p>Hi everyone, I hope you are all doing well. I am a computer science student interested in contributing to the Rust community. Specifically, my mentor (Will Crichton) and I would like to implement telemetry for <code>rustc</code>. </p>\n<p>Similar work was done at Google where they found that dependency-related bugs were both the majority of all errors developers found (more than 40%) as well as the one that took the longest to fix. Here is a link to the study if you would like to take a look: <a href=\"https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/42184.pdf\" target=\"_blank\" title=\"https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/42184.pdf\">https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/42184.pdf</a> </p>\n<p>We are very interested in conducting a similar study for Rust. What are the most common errors? How long does it take to solve them? Etc. </p>\n<p>I saw that telemetry was removed from <code>rustup</code> last year as part of a simplification effort (<a href=\"https://github.com/rust-lang/rustup/pull/1642/commits\" target=\"_blank\" title=\"https://github.com/rust-lang/rustup/pull/1642/commits\">https://github.com/rust-lang/rustup/pull/1642/commits</a>). The feature was never made visible for users, it didn't function correctly on Windows, and it only performed local analysis. I would love to bring it to <code>rustc</code> (fully-functional!) as we think this analysis would be very useful for language developers.</p>\n<p>What do you think about this functionality? Where do you think it would be more appropriate to deploy this tool? I am considering adding it to <code>rustc</code>. What would you suggest?</p>",
        "id": 188600042,
        "sender_full_name": "Georgia Sampaio",
        "timestamp": 1582158093
    },
    {
        "content": "<p>I don't think we would want to include HTTP (or w/e) communication in the compiler itself, as even if it's \"benign\" people would likely not be too happy with that</p>",
        "id": 188600197,
        "sender_full_name": "simulacrum",
        "timestamp": 1582158268
    },
    {
        "content": "<p>We were also considering adding it on to RLS, though it seems there are rumors to deprecate it altogether</p>",
        "id": 188600306,
        "sender_full_name": "Georgia Sampaio",
        "timestamp": 1582158407
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> where do you think it would be more appropriate to add it to?</p>",
        "id": 188600379,
        "sender_full_name": "Georgia Sampaio",
        "timestamp": 1582158489
    },
    {
        "content": "<p>rust-analyzer, the pseudo-successor, or RLS might be a better fit, but would be very much not a representative sampling, I think.</p>",
        "id": 188600399,
        "sender_full_name": "simulacrum",
        "timestamp": 1582158526
    },
    {
        "content": "<p>Do we have a sense of where the study by Google drew its data from?</p>",
        "id": 188600413,
        "sender_full_name": "simulacrum",
        "timestamp": 1582158542
    },
    {
        "content": "<p>I personally think that perhaps sticking it inside rustc as a optional thing to spit out into something like .rustup which we could ask users to upload as part of a survey could work. e.g., land it today, it accumulates over time, and then we ask in the next survey that people who are using Rust give us the blob</p>",
        "id": 188600499,
        "sender_full_name": "simulacrum",
        "timestamp": 1582158632
    },
    {
        "content": "<p>They keep persistent logs of each build. \"The results of all builds in Googleâ€™s cloud-based build system are saved in persistent logs describing the result of each build (succeeded or failed) and the errors produced by all compiles during the build. These logs are the main source of data for this study. We analyzed build logs to extract information about build sessions, success/failure ratios, and error messages.\"</p>",
        "id": 188600519,
        "sender_full_name": "Georgia Sampaio",
        "timestamp": 1582158671
    },
    {
        "content": "<p>hm, yeah, so they have a unique advantage in sampling internal data</p>",
        "id": 188600527,
        "sender_full_name": "simulacrum",
        "timestamp": 1582158697
    },
    {
        "content": "<p>That's what we had initially thought about! Adding it to rustc and asking users to opt-in if they want to</p>",
        "id": 188600575,
        "sender_full_name": "Georgia Sampaio",
        "timestamp": 1582158730
    },
    {
        "content": "<p>Thanks for your comments, @simulacrum. I would love to hear the opinion of others as well! :-)</p>",
        "id": 188600678,
        "sender_full_name": "Georgia Sampaio",
        "timestamp": 1582158855
    },
    {
        "content": "<p>I think rustc might not be quite the right place -- e.g., rustup might be a bit better maybe -- mostly because it's better suited to this sort of end-user analysis I think</p>",
        "id": 188600693,
        "sender_full_name": "simulacrum",
        "timestamp": 1582158880
    },
    {
        "content": "<p>rustc would likely not want the baggage</p>",
        "id": 188600695,
        "sender_full_name": "simulacrum",
        "timestamp": 1582158885
    },
    {
        "content": "<p>on the other hand, we would likely want to omit the raw content of the spans -- I imagine people may be wary if they're working in a non-open source environment</p>",
        "id": 188600940,
        "sender_full_name": "simulacrum",
        "timestamp": 1582159211
    },
    {
        "content": "<p>that might be easier inside rustc</p>",
        "id": 188600967,
        "sender_full_name": "simulacrum",
        "timestamp": 1582159271
    },
    {
        "content": "<p>Can you explain a bit more what you mean when you say that <code>rustc</code> would likely not want the baggage?</p>",
        "id": 188601046,
        "sender_full_name": "Georgia Sampaio",
        "timestamp": 1582159403
    },
    {
        "content": "<p>I think that it'd require <code>rustc</code> <code>cargo</code> and perhaps <code>rustup</code> to work together for this kind of work.  E.g. <code>rustc</code> will have to, ultimately, produce the sanitised information necessary for analysis.  <code>cargo</code> probably has to aggregate it, manage opt-in, etc. on a crate level; and then either <code>cargo</code> or <code>rustup</code> will end up responsible for uploading that to an analysis service</p>",
        "id": 188616657,
        "sender_full_name": "Daniel Silverstone",
        "timestamp": 1582185267
    }
]