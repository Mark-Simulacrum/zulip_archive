[
    {
        "content": "<p>Hello! I'm looking for help fixing the tests for <a href=\"https://github.com/rust-lang/rust/pull/76098\">this pr</a> if anyone would be willing to help out, it would be much appreciated!</p>",
        "id": 212439081,
        "sender_full_name": "Cass",
        "timestamp": 1601995945
    },
    {
        "content": "<p>More specifically, it looks like tests are failing because <code>::1</code> is being parsed as different than <code>::0.0.0.1</code>, and I'm not sure why</p>",
        "id": 212439604,
        "sender_full_name": "Cass",
        "timestamp": 1601996165
    },
    {
        "content": "<p>More generally, i don't feel confident in my ability to write tests for <code>ip</code> because of the use of both macros and bit shifting, which are not things i'm super comfortable with</p>",
        "id": 212440428,
        "sender_full_name": "Cass",
        "timestamp": 1601996500
    },
    {
        "content": "<p>Whenever I write macro based code, I pull this out: <a href=\"https://cheats.rs/#macros-attributes\">https://cheats.rs/#macros-attributes</a><br>\nI usually wind up uncertain enough I have to read <a href=\"https://doc.rust-lang.org/reference/macros-by-example.html\">https://doc.rust-lang.org/reference/macros-by-example.html</a><br>\nAnd <a href=\"https://doc.rust-lang.org/book/ch19-06-macros.html\">https://doc.rust-lang.org/book/ch19-06-macros.html</a> is a good introduction to macros.</p>",
        "id": 212479623,
        "sender_full_name": "Jubilee",
        "timestamp": 1602015329
    },
    {
        "content": "<p>That said, you can also direct any more specific questions for me.<br>\nWhich tests are we fixing up?</p>\n<div class=\"codehilite\"><pre><span></span><code>failures:\n    [ui] ui/consts/std/net/ipv6.rs\n</code></pre></div>\n\n\n<p>Ah, I see.</p>\n<div class=\"codehilite\"><pre><span></span><code>---- [ui] ui/consts/std/net/ipv6.rs stdout ----\n\nerror: test run failed!\nstatus: exit code: 101\ncommand: &quot;/checkout/obj/build/x86_64-unknown-linux-gnu/test/ui/consts/std/net/ipv6/a&quot;\nstdout:\n------------------------------------------\n\n------------------------------------------\nstderr:\n------------------------------------------\nthread &#39;main&#39; panicked at &#39;assertion failed: IS_LOOPBACK&#39;, /checkout/src/test/ui/consts/std/net/ipv6.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\n------------------------------------------\n</code></pre></div>\n\n\n<p>Hmmm.</p>",
        "id": 212480235,
        "sender_full_name": "Jubilee",
        "timestamp": 1602015583
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">IS_LOOPBACK</span><span class=\"w\"> </span>: <span class=\"kt\">bool</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">IP_ADDRESS</span><span class=\"p\">.</span><span class=\"n\">is_loopback</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">IS_LOOPBACK</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>So, you notice how these tests are split between the UI test suite and typical Rust <code>#[test]</code> tests?  This failing test is a <code>// run-pass</code> test which is basically no different from an ordinary <code>#[test]</code> except that it takes extra time to compile and run and is often a little harder to setup, diagnose, and fix. So really, this means that this <code>src/test/ui/consts/std/net/ipv6.rs</code> test doesn't need to be in the UI test suite. It should be in the library tests. See <a href=\"https://github.com/rust-lang/rust/issues/76268\">https://github.com/rust-lang/rust/issues/76268</a> for a bigger explanation if you so desire.</p>\n<p>This will help us a <em>little</em> because then you can also split up all these distinct assertions into separate <code>#[test]</code> functions. Right now, if <em>any</em> of those asserts fails, the entire test here fails, but we want to know which assertions fail. At the very least, we want to be able to move these into a pile of things that don't fail and separate out the ones that do fail.</p>\n<p><strong>EDIT:</strong> Oh, reading more closely, I can see that that has already partially happened and some of the tests already live in <code>library/std/src/net/ip/tests.rs</code>. You should finish removing the run-pass test file from <code>ui</code> then, and make sure that all the tests are in the library.</p>",
        "id": 212483061,
        "sender_full_name": "Jubilee",
        "timestamp": 1602016960
    },
    {
        "content": "<p>currently building your branch. woof, did I really have to rebuild LLVM? Ah well.</p>",
        "id": 212486809,
        "sender_full_name": "Jubilee",
        "timestamp": 1602018903
    },
    {
        "content": "<p>hi! <span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> thank you so much for getting back to me :) i do see what you're talking about in terms of there being tests in both <code>src/test/ui/consts/std/net</code> and <code>library/std/src/net/ip</code>, but if I am understanding correctly...in my terminal output there isn't any failing UI tests, and the only ones that fail are coming from <code>net::ip::tests</code> which...i would assume is <code>library/std/src/net/ip/tests.rs</code> and not <code>src/test/ui/consts/std/net/ipv(4|6).rs</code></p>",
        "id": 212489046,
        "sender_full_name": "Cass",
        "timestamp": 1602020170
    },
    {
        "content": "<p>i'm only getting six failing tests</p>\n<div class=\"codehilite\"><pre><span></span><code>failures:\n    net::ip::tests::ip_properties\n    net::ip::tests::ipv6_addr_to_string\n    net::ip::tests::ipv6_const\n    net::ip::tests::ipv6_from_contructors\n    net::ip::tests::ipv6_properties\n</code></pre></div>",
        "id": 212489083,
        "sender_full_name": "Cass",
        "timestamp": 1602020191
    },
    {
        "content": "<p>oh weird i see a ui test failed in CI</p>",
        "id": 212489199,
        "sender_full_name": "Cass",
        "timestamp": 1602020253
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/212497-t-compiler.2Fhelp-wanted/topic/fix.20tests.20for.20.2376098/near/212479623\">said</a>:</p>\n<blockquote>\n<p>Whenever I write macro based code, I pull this out: <a href=\"https://cheats.rs/#macros-attributes\">https://cheats.rs/#macros-attributes</a></p>\n</blockquote>\n<p>This is so cool!</p>",
        "id": 212492780,
        "sender_full_name": "Noah Lev",
        "timestamp": 1602022397
    },
    {
        "content": "<p>Yeah, the UI tests will fail in CI, which is all I had to go on.</p>",
        "id": 212495492,
        "sender_full_name": "Jubilee",
        "timestamp": 1602024450
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> gotcha gotcha. i just pushed a change that fixed a couple of the unit tests but some are still broken. specifically:</p>\n<div class=\"codehilite\" data-code-language=\"Terminfo\"><pre><span></span><code><span class=\"nt\">failures:</span>\n\n<span class=\"nt\">----</span><span class=\"na\"> net::ip::tests::ip_properties stdout ----</span>\n<span class=\"na\">thread '&lt;unnamed&gt;' panicked at 'assertion failed: !ip!(\"fe80:ffff::\").is_global()'</span><span class=\"p\">,</span> <span class=\"nc\">library/std/src/net/ip/tests.rs:302:5</span>\n\n<span class=\"nt\">----</span><span class=\"na\"> net::ip::tests::ipv6_properties stdout ----</span>\n<span class=\"na\">thread '&lt;unnamed&gt;' panicked at 'assertion failed: !ip!(\"fe80:ffff::\").is_global()'</span><span class=\"p\">,</span> <span class=\"nc\">library/std/src/net/ip/tests.rs:608:5</span>\n\n\n<span class=\"nt\">failures:</span>\n<span class=\"err\">    net::ip::tests::ip_properties</span>\n<span class=\"err\">    net::ip::tests::ipv6_properties</span>\n</code></pre></div>\n\n<p>i'm <em>pretty</em> sure these are failing because of my main change, which was to modify the behavior of <code>is_unicast_link_local</code></p>",
        "id": 212496847,
        "sender_full_name": "Cass",
        "timestamp": 1602025608
    },
    {
        "content": "<p>the issue that was preventing stabilization for a while was that</p>",
        "id": 212496891,
        "sender_full_name": "Cass",
        "timestamp": 1602025674
    },
    {
        "content": "<p>hang on lemme find the docs</p>",
        "id": 212496893,
        "sender_full_name": "Cass",
        "timestamp": 1602025676
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/library/std/src/net/ip.rs#L1214-L1262\">here</a> is the behavior of the current <code>is_unicast_link_local_strict</code>, which was promoted to <code>is_unicast_link_local</code> per the discussion <a href=\"https://github.com/rust-lang/rust/pull/76098#issuecomment-686901980\">here</a> and the old <code>is_unicast_link_local</code> was removed</p>",
        "id": 212497083,
        "sender_full_name": "Cass",
        "timestamp": 1602025811
    },
    {
        "content": "<p>i <em>suspect</em> but am completely unsure that i should change something in <a href=\"https://github.com/rust-lang/rust/blob/master/library/std/src/net/ip/tests.rs#L257-L261\">these lines</a> to modify how we're checking global-ness</p>",
        "id": 212497287,
        "sender_full_name": "Cass",
        "timestamp": 1602025967
    },
    {
        "content": "<p>because the address that's failing (<code>fe80::ffff::</code>) would have passed the check for the <em>old</em> <code>is_unicast_link_local</code> but should fail the <em>new</em> <code>is_unicast_link_local</code></p>",
        "id": 212497341,
        "sender_full_name": "Cass",
        "timestamp": 1602026005
    },
    {
        "content": "<p>hmm.</p>",
        "id": 212497381,
        "sender_full_name": "Jubilee",
        "timestamp": 1602026039
    },
    {
        "content": "<p>what command were you running tests with, btw?</p>",
        "id": 212497712,
        "sender_full_name": "Jubilee",
        "timestamp": 1602026315
    },
    {
        "content": "<p><code>./x.py test library/std</code></p>",
        "id": 212502285,
        "sender_full_name": "Cass",
        "timestamp": 1602029985
    },
    {
        "content": "<p>Okay, so it looks like the real trouble with macros is with grasping the <code>check!</code> macro?</p>",
        "id": 212502973,
        "sender_full_name": "Jubilee",
        "timestamp": 1602030657
    },
    {
        "content": "<p>i think? honestly i'm so lost that i'm not even sure where exactly i'm lost. but starting there would be great <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 212503513,
        "sender_full_name": "Cass",
        "timestamp": 1602031221
    },
    {
        "content": "<p>i can see tho that as far as i can tell the tests that are <a href=\"https://github.com/rust-lang/rust/runs/1217681449?check_suite_focus=true#step:23:1962\">failing in CI</a> are the same ones that are failing on my machine</p>",
        "id": 212503603,
        "sender_full_name": "Cass",
        "timestamp": 1602031347
    },
    {
        "content": "<p>ok so here's my understanding</p>",
        "id": 212503683,
        "sender_full_name": "Cass",
        "timestamp": 1602031455
    },
    {
        "content": "<p>the <code>check!</code> macro is called without any arguments, which calls itself again with <code>0</code> for the second arg</p>",
        "id": 212503688,
        "sender_full_name": "Cass",
        "timestamp": 1602031472
    },
    {
        "content": "<p>then, a bunch of masks are defined e.g. <code>let unspec: u8 = 1 &lt;&lt; 0;</code></p>",
        "id": 212503711,
        "sender_full_name": "Cass",
        "timestamp": 1602031514
    },
    {
        "content": "<p>then the input mask (in our case <code>00000000</code> is bitwise-anded with the various masks that were defined to determine if the ip address fits a given rule or not (e.g. it's globally routable)</p>",
        "id": 212503733,
        "sender_full_name": "Cass",
        "timestamp": 1602031561
    },
    {
        "content": "<p>so...i think the behavior itself is correct, but the test is what's wrong</p>",
        "id": 212503781,
        "sender_full_name": "Cass",
        "timestamp": 1602031571
    },
    {
        "content": "<p>so if i adjust the mask for <code>global</code>, it should reflect by passing the test</p>",
        "id": 212503788,
        "sender_full_name": "Cass",
        "timestamp": 1602031584
    },
    {
        "content": "<p>WAIT</p>",
        "id": 212503804,
        "sender_full_name": "Cass",
        "timestamp": 1602031622
    },
    {
        "content": "<p>i think it's actually even simpler than that</p>",
        "id": 212503812,
        "sender_full_name": "Cass",
        "timestamp": 1602031627
    },
    {
        "content": "<p>because i think...technically...<code>fe80:ffff::</code> is globally routable</p>",
        "id": 212503818,
        "sender_full_name": "Cass",
        "timestamp": 1602031639
    },
    {
        "content": "<p>so it's failing because we don't specify that that should be the case</p>",
        "id": 212503821,
        "sender_full_name": "Cass",
        "timestamp": 1602031650
    },
    {
        "content": "<p>because what's happening is that it's getting flagged as unicast_global</p>",
        "id": 212503880,
        "sender_full_name": "Cass",
        "timestamp": 1602031699
    },
    {
        "content": "<p>because of the change to is_unicast_link_local</p>",
        "id": 212503891,
        "sender_full_name": "Cass",
        "timestamp": 1602031719
    },
    {
        "content": "<p>Okay, so... </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">unicast_link_local</span>: <span class=\"kt\">u16</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">//        0b010000</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">unicast_link_local_strict</span>: <span class=\"kt\">u16</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// 0b100000</span>\n\n<span class=\"c1\">// Later on, we BitOr the two https://doc.rust-lang.org/nightly/core/ops/trait.BitOr.html</span>\n<span class=\"w\">  </span><span class=\"n\">unicast_link_local</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">unicast_link_local_strict</span><span class=\"w\"> </span><span class=\"c1\">// 0b110000</span>\n</code></pre></div>\n\n<p>and then THAT is fed in as the mask.<br>\nYou can see this better formatted here if you run it:<br>\n<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=ab0378f9e3c33170e75cccbf0d5702c5\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=ab0378f9e3c33170e75cccbf0d5702c5</a></p>",
        "id": 212504104,
        "sender_full_name": "Jubilee",
        "timestamp": 1602032035
    },
    {
        "content": "<p>So it appears that removing the BitOr there is what is breaking the test.</p>",
        "id": 212504189,
        "sender_full_name": "Jubilee",
        "timestamp": 1602032155
    },
    {
        "content": "<p>oh gotcha ok. i think what i need to do is actually patch the test cases (duh), i kind of just blindly removed that stuff and hoped for the best</p>",
        "id": 212505710,
        "sender_full_name": "Cass",
        "timestamp": 1602033768
    },
    {
        "content": "<p>I'm confused though, isn't this wrong?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">check</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"s\">\"fe80:ffff::\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"mh\">0xfe</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x80</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xff</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xff</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">unicast_link_local</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>Isn't this what's cited as an example of what's not accepted?<br>\nI guess I'm just restating what you already said.</p>",
        "id": 212505806,
        "sender_full_name": "Jubilee",
        "timestamp": 1602033871
    },
    {
        "content": "<p>a hexadecimal digit encompasses a nybble<br>\ntwo hexadecimal digits encompass a byte<br>\n4 hexadecimal digits are 2 bytes<br>\n<code>x:</code> is up to 4 hex digits, so up to 2 bytes<br>\nthe unicast link local address specifies the first 64 bits, or 8 bytes<br>\nso FE80:0000:0000:0000 is spoken for.</p>",
        "id": 212506084,
        "sender_full_name": "Jubilee",
        "timestamp": 1602034224
    },
    {
        "content": "<p>I guess that's why the BitOr was used... to make it deliberately more permissive in the relaxed case.<br>\nYeah, you need to make sure the test cases are Actually Correct, unfortunately.<br>\nFeel free to ask any additional questions, though I am not an expert on <a href=\"https://tools.ietf.org/html/rfc4291\">https://tools.ietf.org/html/rfc4291</a> tbqh.</p>",
        "id": 212506223,
        "sender_full_name": "Jubilee",
        "timestamp": 1602034434
    },
    {
        "content": "<p>For note: a macro is kind of like a <code>match</code> statement in some ways: it doesn't hit the branch where it calls itself with the <code>0</code> mask here because it's actually being called with a mask.</p>\n<p>The macro takes what inputs are given to it and, after performing the \"matching\" on the inputs to determine what arm it actually  expands into, it expands, turning them into \"arguments\" to its \"function\". It expands into the first example that fits the arm definitions, and that can have some trippy consequences but usually it's fairly explicit how it goes. Especially here, in a \"relatively\" \"simple\" macro (scare quotes in full effect) that \"only\" up to a maximum of one time.</p>",
        "id": 212506401,
        "sender_full_name": "Jubilee",
        "timestamp": 1602034626
    },
    {
        "content": "<p>okay here's a question for you -- and thank you by the way for being so helpful! -- a lot of these test cases are <em>specifically</em> to check the more relaxed behavior. should i...just delete those? i feel guilty deleting test cases but they're kind of useless. i suppose i could change them to check <code>global</code> instead of <code>unicast_link_local</code>to kind of...invert the test cases</p>",
        "id": 212510532,
        "sender_full_name": "Cass",
        "timestamp": 1602039624
    },
    {
        "content": "<p>Yes, I suggest adding test cases that verify that the relaxed behavior is rejected,  which the <code>check</code> macro may not support. I do not know the exact details of the <code>is_global</code> check and how it should be, if there are things which fall into neither numeric range then they obviously should not be <code>true</code> for either.</p>",
        "id": 212513422,
        "sender_full_name": "Jubilee",
        "timestamp": 1602043776
    },
    {
        "content": "<p>But yes, you are simply permitted to delete test cases that are irrelevant. If you want you can simply note in the commit message that you deleted it <strong>because</strong> it was irrelevant.</p>",
        "id": 212513488,
        "sender_full_name": "Jubilee",
        "timestamp": 1602043860
    },
    {
        "content": "<p>Gotcha -- so what I decided to do was to invert the checks so that it verifies that the relaxed behavior is rejected, which is a property of the <code>check</code> macro if <code>unicast_link_local</code> is unspecified -- it'll automatically verify an address is <em>not</em> <code>unicast_link_local</code>. I feel comfortable doing this by bitwise-or'ing <code>global</code> with <code>unicast_global</code>, because there were already existing test cases using this technique. I'll mention this in my commit message.</p>",
        "id": 212577396,
        "sender_full_name": "Cass",
        "timestamp": 1602085167
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"337739\">Cass</span> <a href=\"#narrow/stream/212497-t-compiler.2Fhelp-wanted/topic/fix.20tests.20for.20.2376098/near/212503818\">said</a>:</p>\n<blockquote>\n<p>because i think...technically...<code>fe80:ffff::</code> is globally routable</p>\n</blockquote>\n<p>A later RFC also specifies the whole of fe80::/10 for link-local unicast: <a href=\"https://tools.ietf.org/html/rfc5156#section-2.4\">https://tools.ietf.org/html/rfc5156#section-2.4</a></p>",
        "id": 212613062,
        "sender_full_name": "NeoRaider",
        "timestamp": 1602101443
    },
    {
        "content": "<p>FWIW, this is also what the Linux kernel implements, and IN6_IS_ADDR_LINKLOCAL() of the C standard library</p>",
        "id": 212613142,
        "sender_full_name": "NeoRaider",
        "timestamp": 1602101480
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"294290\">@NeoRaider</span> this is def worth bringing up in the PR bc i don't...think that's the current implementation</p>",
        "id": 212771027,
        "sender_full_name": "Cass",
        "timestamp": 1602209458
    },
    {
        "content": "<p>like my implementation, i mean</p>",
        "id": 212771043,
        "sender_full_name": "Cass",
        "timestamp": 1602209483
    }
]