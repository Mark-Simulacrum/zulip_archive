[
    {
        "content": "<p>Please do not market a generic \"aarch64-apple-darwin\" target as true support, as it is extremely likely that Apple DTKs are running on an ARM64E (ARMv8.3/4) platform.</p>",
        "id": 202943302,
        "sender_full_name": "aspen",
        "timestamp": 1593992714
    },
    {
        "content": "<p>This sounds like a semantics argument that isn't likely to improve anything, so I'd encourage you to reframe your point to be actionable and constructive.</p>",
        "id": 202943433,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593992912
    },
    {
        "content": "<p>When you compile to <code>x86_64-apple-darwin</code>, we target a core2 processor by default. I assume that the same will happen here — <code>aarch64-apple-darwin</code> will target the intersection of whatever processor ships in the first commercial machine and what LLVM supports.</p>",
        "id": 202943444,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593992983
    },
    {
        "content": "<p>That's the problem, upstream, and by extension rust LLVM <strong><em>does not support PAC or ARMv8.3</em></strong></p>",
        "id": 202943493,
        "sender_full_name": "aspen",
        "timestamp": 1593993034
    },
    {
        "content": "<p>and god knows whenever it'll be upstreamed.</p>",
        "id": 202943497,
        "sender_full_name": "aspen",
        "timestamp": 1593993056
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"312033\">@aspen</span>'s point is that newer machines will refuse to run old code</p>",
        "id": 202943503,
        "sender_full_name": "eddyb",
        "timestamp": 1593993079
    },
    {
        "content": "<p>^^^^</p>",
        "id": 202943506,
        "sender_full_name": "aspen",
        "timestamp": 1593993087
    },
    {
        "content": "<p>I've ran into this problem while using Rust to make iOS tweaks.</p>",
        "id": 202943508,
        "sender_full_name": "aspen",
        "timestamp": 1593993098
    },
    {
        "content": "<p>do we actually know that this will be the case on macOS or could it be mobile-only?</p>",
        "id": 202943511,
        "sender_full_name": "eddyb",
        "timestamp": 1593993106
    },
    {
        "content": "<p>Judging from the fact that the DTK has an ARMv8.3 processor (A12Z bionic), it is very likely</p>",
        "id": 202943549,
        "sender_full_name": "aspen",
        "timestamp": 1593993127
    },
    {
        "content": "<p>For example, if Rust is ever used for libraries on ARM macOS</p>",
        "id": 202943570,
        "sender_full_name": "aspen",
        "timestamp": 1593993205
    },
    {
        "content": "<p>An arm64 object/library cannot be linked to an arm64e binary.</p>",
        "id": 202943572,
        "sender_full_name": "aspen",
        "timestamp": 1593993218
    },
    {
        "content": "<p>but surely the OS can <em>choose</em> whether it allows code that doesn't do pointer authentication or w/e, to run?</p>",
        "id": 202943576,
        "sender_full_name": "eddyb",
        "timestamp": 1593993221
    },
    {
        "content": "<p>my understanding is that it's like code signing</p>",
        "id": 202943577,
        "sender_full_name": "eddyb",
        "timestamp": 1593993233
    },
    {
        "content": "<p>For example, if I try to call a signed pointer from a arm64 library on iOS</p>",
        "id": 202943617,
        "sender_full_name": "aspen",
        "timestamp": 1593993256
    },
    {
        "content": "<p>similarly, iOS disallows any JITs other than the one in WebKit, but macOS doesn't have such a rule</p>",
        "id": 202943618,
        "sender_full_name": "eddyb",
        "timestamp": 1593993256
    },
    {
        "content": "<p>It segfaults.</p>",
        "id": 202943619,
        "sender_full_name": "aspen",
        "timestamp": 1593993259
    },
    {
        "content": "<p>In additional, clang/lld will refuse to link an arm64 object with an arm64e object, and vice versa.</p>",
        "id": 202943622,
        "sender_full_name": "aspen",
        "timestamp": 1593993288
    },
    {
        "content": "<p>okay that's more interesting</p>",
        "id": 202943627,
        "sender_full_name": "eddyb",
        "timestamp": 1593993304
    },
    {
        "content": "<p>do we know whether aarch64 macOS machines are going to use the <code>e</code> variant?</p>",
        "id": 202943635,
        "sender_full_name": "eddyb",
        "timestamp": 1593993337
    },
    {
        "content": "<p>I mean, someone would probably need to run <code>file</code> on a Big Sur ARM system library to find out</p>",
        "id": 202943674,
        "sender_full_name": "aspen",
        "timestamp": 1593993372
    },
    {
        "content": "<p>AFAICT, <span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> getting something to run suggests that's not the case</p>",
        "id": 202943676,
        "sender_full_name": "eddyb",
        "timestamp": 1593993377
    },
    {
        "content": "<p>A lone binary can run.</p>",
        "id": 202943678,
        "sender_full_name": "aspen",
        "timestamp": 1593993384
    },
    {
        "content": "<p>The problem comes in when you want to interface with e-variant programs.</p>",
        "id": 202943682,
        "sender_full_name": "aspen",
        "timestamp": 1593993400
    },
    {
        "content": "<p>Such as using a Rust library from something else.</p>",
        "id": 202943685,
        "sender_full_name": "aspen",
        "timestamp": 1593993412
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>% find Safari.app -perm +111 -type f -print0 | xargs -0 file\nSafari.app/Contents/MacOS/Safari:                                                                                                             Mach-O universal binary with 2 architectures: [x86_64:Mach-O 64-bit executable x86_64] [arm64e:Mach-O 64-bit executable arm64e]\nSafari.app/Contents/MacOS/Safari (for architecture x86_64): Mach-O 64-bit executable x86_64\nSafari.app/Contents/MacOS/Safari (for architecture arm64e): Mach-O 64-bit executable arm64e\nSafari.app/Contents/PlugIns/CacheDeleteExtension.appex/Contents/MacOS/CacheDeleteExtension:                                                   Mach-O universal binary with 2 architectures: [x86_64:Mach-O 64-bit executable x86_64] [arm64e:Mach-O 64-bit executable arm64e]\nSafari.app/Contents/PlugIns/CacheDeleteExtension.appex/Contents/MacOS/CacheDeleteExtension (for architecture x86_64):   Mach-O 64-bit executable x86_64\nSafari.app/Contents/PlugIns/CacheDeleteExtension.appex/Contents/MacOS/CacheDeleteExtension (for architecture arm64e):   Mach-O 64-bit executable arm64e\nSafari.app/Contents/PlugIns/SafariQuickLookPreview.appex/Contents/MacOS/SafariQuickLookPreview:                                               Mach-O universal binary with 2 architectures: [x86_64:Mach-O 64-bit executable x86_64] [arm64e:Mach-O 64-bit executable arm64e]\nSafari.app/Contents/PlugIns/SafariQuickLookPreview.appex/Contents/MacOS/SafariQuickLookPreview (for architecture x86_64):   Mach-O 64-bit executable x86_64\nSafari.app/Contents/PlugIns/SafariQuickLookPreview.appex/Contents/MacOS/SafariQuickLookPreview (for architecture arm64e):   Mach-O 64-bit executable arm64e\nSafari.app/Contents/PlugIns/DiagnosticExtension.appex/Contents/MacOS/DiagnosticExtension:                                                     Mach-O universal binary with 2 architectures: [x86_64:Mach-O 64-bit executable x86_64] [arm64e:Mach-O 64-bit executable arm64e]\nSafari.app/Contents/PlugIns/DiagnosticExtension.appex/Contents/MacOS/DiagnosticExtension (for architecture x86_64): Mach-O 64-bit executable x86_64\nSafari.app/Contents/PlugIns/DiagnosticExtension.appex/Contents/MacOS/DiagnosticExtension (for architecture arm64e): Mach-O 64-bit executable arm64e\nSafari.app/Contents/PlugIns/Safari.wkbundle/Contents/MacOS/Safari:                                                                            Mach-O universal binary with 2 architectures: [x86_64:Mach-O 64-bit bundle x86_64] [arm64e:Mach-O 64-bit bundle arm64e]\nSafari.app/Contents/PlugIns/Safari.wkbundle/Contents/MacOS/Safari (for architecture x86_64):    Mach-O 64-bit bundle x86_64\nSafari.app/Contents/PlugIns/Safari.wkbundle/Contents/MacOS/Safari (for architecture arm64e):    Mach-O 64-bit bundle arm64e\nSafari.app/Contents/Resources/appdiagnose:                                                                                                    Mach-O universal binary with 2 architectures: [x86_64:Mach-O 64-bit executable x86_64] [arm64e:Mach-O 64-bit executable arm64e]\nSafari.app/Contents/Resources/appdiagnose (for architecture x86_64):    Mach-O 64-bit executable x86_64\nSafari.app/Contents/Resources/appdiagnose (for architecture arm64e):    Mach-O 64-bit executable arm64e\nSafari.app/Contents/XPCServices/com.apple.Safari.SandboxBroker.xpc/Contents/MacOS/com.apple.Safari.SandboxBroker:                             Mach-O universal binary with 2 architectures: [x86_64:Mach-O 64-bit executable x86_64] [arm64e:Mach-O 64-bit executable arm64e]\nSafari.app/Contents/XPCServices/com.apple.Safari.SandboxBroker.xpc/Contents/MacOS/com.apple.Safari.SandboxBroker (for architecture x86_64): Mach-O 64-bit executable x86_64\nSafari.app/Contents/XPCServices/com.apple.Safari.SandboxBroker.xpc/Contents/MacOS/com.apple.Safari.SandboxBroker (for architecture arm64e): Mach-O 64-bit executable arm64e\nSafari.app/Contents/XPCServices/com.apple.WebKit.WebContent.Safari.xpc/Contents/MacOS/com.apple.WebKit.WebContent.Safari:                     Mach-O universal binary with 2 architectures: [x86_64:Mach-O 64-bit executable x86_64] [arm64e:Mach-O 64-bit executable arm64e]\nSafari.app/Contents/XPCServices/com.apple.WebKit.WebContent.Safari.xpc/Contents/MacOS/com.apple.WebKit.WebContent.Safari (for architecture x86_64): Mach-O 64-bit executable x86_64\nSafari.app/Contents/XPCServices/com.apple.WebKit.WebContent.Safari.xpc/Contents/MacOS/com.apple.WebKit.WebContent.Safari (for architecture arm64e): Mach-O 64-bit executable arm64e\nSafari.app/Contents/XPCServices/com.apple.Safari.BrowserDataImportingService.xpc/Contents/MacOS/com.apple.Safari.BrowserDataImportingService: Mach-O universal binary with 2 architectures: [x86_64:Mach-O 64-bit executable x86_64] [arm64e:Mach-O 64-bit executable arm64e]\nSafari.app/Contents/XPCServices/com.apple.Safari.BrowserDataImportingService.xpc/Contents/MacOS/com.apple.Safari.BrowserDataImportingService (for architecture x86_64): Mach-O 64-bit executable x86_64\nSafari.app/Contents/XPCServices/com.apple.Safari.BrowserDataImportingService.xpc/Contents/MacOS/com.apple.Safari.BrowserDataImportingService (for architecture arm64e): Mach-O 64-bit executable arm64e\n</code></pre></div>",
        "id": 202944328,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593994583
    },
    {
        "content": "<p>Yup, that's ARM64E.</p>",
        "id": 202944361,
        "sender_full_name": "aspen",
        "timestamp": 1593994679
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>% file /Applications/Xcode-beta.app/Contents/Developer/usr/bin/lldb\n/Applications/Xcode-beta.app/Contents/Developer/usr/bin/lldb: Mach-O universal binary with 2 architectures: [x86_64:Mach-O 64-bit executable x86_64] [arm64:Mach-O 64-bit executable arm64]\n/Applications/Xcode-beta.app/Contents/Developer/usr/bin/lldb (for architecture x86_64): Mach-O 64-bit executable x86_64\n/Applications/Xcode-beta.app/Contents/Developer/usr/bin/lldb (for architecture arm64):  Mach-O 64-bit executable arm64\n</code></pre></div>",
        "id": 202944967,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593995815
    },
    {
        "content": "<p>System binaries are arm64e, but xcode is arm64? Strange.</p>\n<p>I bet that LLDB will segfault if you try to attach to an arm64e process, like safari.</p>",
        "id": 202944982,
        "sender_full_name": "aspen",
        "timestamp": 1593995877
    },
    {
        "content": "<p>this feels like it's like \"signed apps\"</p>",
        "id": 202945104,
        "sender_full_name": "eddyb",
        "timestamp": 1593996078
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> what about frameworks?</p>",
        "id": 202945107,
        "sender_full_name": "eddyb",
        "timestamp": 1593996089
    },
    {
        "content": "<p>arm64e = apple's ABI + ARMv8.3 + PAC</p>",
        "id": 202945117,
        "sender_full_name": "aspen",
        "timestamp": 1593996109
    },
    {
        "content": "<p>if both Safari and <code>lldb</code> work, wouldn't that mean both arm64 and arm64e versions of system frameworks exist?</p>",
        "id": 202945159,
        "sender_full_name": "eddyb",
        "timestamp": 1593996127
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"242791\" href=\"/#narrow/stream/242791-t-infra/topic/aarch64-apple-darwin.20isn.27t.20true.20support\">#t-infra &gt; aarch64-apple-darwin isn't true support</a> by <span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span></p>",
        "id": 202945168,
        "sender_full_name": "Notification Bot",
        "timestamp": 1593996183
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 202945171,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593996199
    },
    {
        "content": "<p>Looks like everything in <code>/System/Library/Frameworks</code> is <code>arm64e</code> (or <code>x86_64</code> or <code>x86_64h</code>)</p>",
        "id": 202945412,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593996612
    },
    {
        "content": "<p>x86_64h is catalyst</p>",
        "id": 202945416,
        "sender_full_name": "aspen",
        "timestamp": 1593996640
    },
    {
        "content": "<p>so if the executable is <code>arm64</code>, the protection features are turned off?</p>",
        "id": 202945463,
        "sender_full_name": "eddyb",
        "timestamp": 1593996724
    },
    {
        "content": "<p>and <code>arm64e</code> code can interop with <code>arm64</code> code without crashing</p>",
        "id": 202945466,
        "sender_full_name": "eddyb",
        "timestamp": 1593996738
    },
    {
        "content": "<p>more like \"it's not even aware of the protection features\"</p>",
        "id": 202945467,
        "sender_full_name": "aspen",
        "timestamp": 1593996743
    },
    {
        "content": "<p>I mean the CPU isn't checking stuff. because if it was and it worked, I don't see why an <code>arm64e</code> executable would have trouble running <code>arm64</code> code</p>",
        "id": 202945486,
        "sender_full_name": "eddyb",
        "timestamp": 1593996816
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/242906-t-compiler.2Farm/topic/aarch64-apple-darwin.20isn't.20true.20support/near/202945466\">said</a>:</p>\n<blockquote>\n<p>and <code>arm64e</code> code can interop with <code>arm64</code> code without crashing</p>\n</blockquote>\n<p>not at first glance:</p>\n<div class=\"codehilite\"><pre><span></span><code>% file target/debug/libmath.dylib\ntarget/debug/libmath.dylib: Mach-O 64-bit dynamically linked shared library arm64\n\n% cc -arch arm64e host.c -L target/debug/ -lmath -o host\n\n% ./host\nzsh: killed     ./host\n</code></pre></div>",
        "id": 202945532,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593996870
    },
    {
        "content": "<p>Check my code for dumb mistakes though:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#[no_mangle]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;C&quot;</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">math_add</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u8</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdio.h&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;inttypes.h&gt;</span><span class=\"cp\"></span>\n\n<span class=\"kt\">uint8_t</span> <span class=\"nf\">math_add</span><span class=\"p\">(</span><span class=\"kt\">uint8_t</span><span class=\"p\">,</span> <span class=\"kt\">uint8_t</span><span class=\"p\">);</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;-&gt; %&quot;</span> <span class=\"n\">PRIu8</span> <span class=\"s\">&quot;</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">math_add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">));</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 202945546,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593996947
    },
    {
        "content": "<p>can you get a segfault type</p>",
        "id": 202945590,
        "sender_full_name": "aspen",
        "timestamp": 1593997006
    },
    {
        "content": "<p>i mean is it segfaulting?</p>",
        "id": 202945596,
        "sender_full_name": "aspen",
        "timestamp": 1593997049
    },
    {
        "content": "<p>attach a debugger</p>",
        "id": 202945597,
        "sender_full_name": "aspen",
        "timestamp": 1593997052
    },
    {
        "content": "<p>it should be something like \"EXEC_BAD_ACCESS (SIGSEGV)\"/\"KERN_INVALID_ADDRESS\"</p>",
        "id": 202945641,
        "sender_full_name": "aspen",
        "timestamp": 1593997093
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> I meant specifically in the context of <code>arm64</code> binary using <code>arm64e</code> library</p>",
        "id": 202945701,
        "sender_full_name": "eddyb",
        "timestamp": 1593997219
    },
    {
        "content": "<p>i.e. where the process <em>doesn't</em> start in <code>e</code> mode</p>",
        "id": 202945703,
        "sender_full_name": "eddyb",
        "timestamp": 1593997225
    },
    {
        "content": "<p>I suspect you can call back and forth between <code>arm64e</code> and <code>arm64</code> code, but <em>only</em> in that situation</p>",
        "id": 202945711,
        "sender_full_name": "eddyb",
        "timestamp": 1593997256
    },
    {
        "content": "<p>also I wonder why <code>zsh</code> doesn't say how the process died, <code>fish</code> does (but on Linux, idk if that makes a difference)</p>",
        "id": 202945722,
        "sender_full_name": "eddyb",
        "timestamp": 1593997297
    },
    {
        "content": "<p>I will note, it's possible to call arm64e from arm64 if you run ptrauth_strip on all function pointers</p>",
        "id": 202945768,
        "sender_full_name": "aspen",
        "timestamp": 1593997342
    },
    {
        "content": "<p>ptrauth_strip compiles down to some weird instruction IIRC</p>",
        "id": 202945771,
        "sender_full_name": "aspen",
        "timestamp": 1593997357
    },
    {
        "content": "<p>but Rust <code>arm64</code> executables will call into <code>libSystem</code> (which is presumably <code>arm64e</code>) without that, so presumably <code>ptrauth_strip</code> only makes a difference if the process started in <code>arm64e</code> mode?</p>",
        "id": 202945792,
        "sender_full_name": "eddyb",
        "timestamp": 1593997435
    },
    {
        "content": "<p>Yes.</p>",
        "id": 202945830,
        "sender_full_name": "aspen",
        "timestamp": 1593997444
    },
    {
        "content": "<p>thanks, that makes sense</p>",
        "id": 202945833,
        "sender_full_name": "eddyb",
        "timestamp": 1593997450
    },
    {
        "content": "<p>In theory it'd be possible to make rustc add this special instruction to everything? Idk</p>",
        "id": 202945837,
        "sender_full_name": "aspen",
        "timestamp": 1593997465
    },
    {
        "content": "<p><code>extern \"arm64e\" fn(...)</code> pointers? :P</p>",
        "id": 202945838,
        "sender_full_name": "eddyb",
        "timestamp": 1593997486
    },
    {
        "content": "<p>(just kidding, if we did it, it'd have to be on all non-Rust <code>fn</code> pointers, presumably including all FFI)</p>",
        "id": 202945847,
        "sender_full_name": "eddyb",
        "timestamp": 1593997524
    },
    {
        "content": "<p>yeah you'd just have to vomit it all over every external function pointer</p>",
        "id": 202945853,
        "sender_full_name": "aspen",
        "timestamp": 1593997556
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>(lldb) target create &quot;./host&quot;\nCurrent executable set to &#39;mix-arm64-and-arm64e/host&#39; (arm64e).\n(lldb) r\nerror: process exited with status -1 (no such process.)\n</code></pre></div>\n\n\n<p>That's it <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 202945911,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593997662
    },
    {
        "content": "<p>that must be what <span class=\"user-mention\" data-user-id=\"312033\">@aspen</span> was saying earlier that you can't use that <code>lldb</code> to debug <code>arm64e</code> executables</p>",
        "id": 202945966,
        "sender_full_name": "eddyb",
        "timestamp": 1593997771
    },
    {
        "content": "<p>I wonder of \"no such process\" is what the kernel is erroring with when <code>lldb</code> tries to attach, lol</p>",
        "id": 202945971,
        "sender_full_name": "eddyb",
        "timestamp": 1593997788
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>% cc -arch arm64e host.c target/debug/libmath.a -o host\nld: warning: ignoring file target/debug/libmath.a, building for macOS-arm64e but attempting to link with file built for unknown-arm64\nUndefined symbols for architecture arm64e:\n  &quot;_math_add&quot;, referenced from:\n      _main in host-a593da.o\nld: symbol(s) not found for architecture arm64e\n</code></pre></div>",
        "id": 202945973,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593997799
    },
    {
        "content": "<p>yuup there's your \"can't cross-link\" error</p>",
        "id": 202946025,
        "sender_full_name": "aspen",
        "timestamp": 1593997840
    },
    {
        "content": "<p>The good news is that we should be able to have a separate target for the two worlds. Especially since you can <code>lipo</code> them together anyway.</p>",
        "id": 202946027,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593997842
    },
    {
        "content": "<p>you can change the cpu subtype via hex editor to see the segfault</p>",
        "id": 202946029,
        "sender_full_name": "aspen",
        "timestamp": 1593997851
    },
    {
        "content": "<p>wait why did it work earlier?</p>",
        "id": 202946030,
        "sender_full_name": "eddyb",
        "timestamp": 1593997860
    },
    {
        "content": "<p>with the dylib? I guess it doesn't eagerly check?</p>",
        "id": 202946043,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593997881
    },
    {
        "content": "<p>oooh, <code>cdylib</code> vs <code>staticlib</code></p>",
        "id": 202946051,
        "sender_full_name": "eddyb",
        "timestamp": 1593997905
    },
    {
        "content": "<p>yeah</p>",
        "id": 202946097,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593997928
    },
    {
        "content": "<p>you shouldn't need <code>lipo</code>, if you can generate an <code>arm64e</code> library you should be able to link it into either <code>arm64</code> or <code>arm64e</code></p>",
        "id": 202946109,
        "sender_full_name": "eddyb",
        "timestamp": 1593997987
    },
    {
        "content": "<p>e.g. you can try an <code>arm64e</code> C library linked into an <code>arm64</code> Rust binary, in your example setup</p>",
        "id": 202946120,
        "sender_full_name": "eddyb",
        "timestamp": 1593998026
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> Just catching up on this. To answer your question about “Will macOS have a e variant?” Apple has said that they will eventually open things like PAC to user space code but initially it’s going to be restricted to Apple’s Apps.</p>",
        "id": 202965384,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1594024908
    },
    {
        "content": "<p>ah so we shouldn't even bother for now lol</p>",
        "id": 202966269,
        "sender_full_name": "eddyb",
        "timestamp": 1594025601
    },
    {
        "content": "<p><a href=\"https://developer.apple.com/documentation/security/preparing_your_app_to_work_with_pointer_authentication\">https://developer.apple.com/documentation/security/preparing_your_app_to_work_with_pointer_authentication</a></p>\n<blockquote>\n<p>Important</p>\n<p>App Store Connect and Testflight don’t yet accept submissions with an arm64e slice. Xcode removes this slice from your app bundle when you upload it.</p>\n</blockquote>",
        "id": 202985537,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594040712
    },
    {
        "content": "<p>(i have my own reasons for wanting arm64e support, unrelated to Apple Silicon macs)</p>",
        "id": 202993718,
        "sender_full_name": "aspen",
        "timestamp": 1594044298
    },
    {
        "content": "<p><a href=\"https://twitter.com/jckarter/status/1280209930885017600\">https://twitter.com/jckarter/status/1280209930885017600</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/jckarter/status/1280209930885017600\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/1251258044106723328/O5MSYSy-_normal.jpg\"></a><p><a href=\"https://twitter.com/JakeGoulding\">@JakeGoulding</a> <a href=\"https://twitter.com/luxx4x\">@luxx4x</a> <a href=\"https://twitter.com/indirect\">@indirect</a> I think it'd still be more frustrating than rewarding right now to try to chase arm64e support to interop with Apple C/Swift ABIs right now, since they're still in flux. It could be interesting to mess with to starting working out a good ptrauth ABI for rust though</p><span>- Joe Groff (@jckarter)</span></div></div>",
        "id": 203025652,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594060890
    },
    {
        "content": "<p><a href=\"https://twitter.com/jckarter/status/1280211570182615040\">https://twitter.com/jckarter/status/1280211570182615040</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/jckarter/status/1280211570182615040\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/1251258044106723328/O5MSYSy-_normal.jpg\"></a><p><a href=\"https://twitter.com/JakeGoulding\">@JakeGoulding</a> <a href=\"https://twitter.com/luxx4x\">@luxx4x</a> <a href=\"https://twitter.com/indirect\">@indirect</a> Yeah, non-system binaries should still only be arm64 for the time being</p><span>- Joe Groff (@jckarter)</span></div></div>",
        "id": 203026283,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594061238
    }
]