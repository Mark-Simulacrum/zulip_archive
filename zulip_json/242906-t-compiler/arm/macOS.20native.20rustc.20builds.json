[
    {
        "content": "<p>Now that we have a Silicon-based stage1 compiler that can produce Silicon-native programs, it seems like it's time to try and get rustc to compile itself on-device.</p>",
        "id": 202899508,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593912734
    },
    {
        "content": "<p>Current problem: Somehow <code>cc .... files-from-libbacktrace</code> produces <em>x86_64</em> code, but if I run the exact same command, it produces <code>arm64</code></p>",
        "id": 202899571,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593912940
    },
    {
        "content": "<p>Well, <code>cargo build</code> of backtrace-rs has the same problem, so that's nice</p>",
        "id": 202900115,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593914113
    },
    {
        "content": "<p>I feel like I saw that as well, maybe something somewhere in the chain is running under rosetta and becoming convinced it's on intel?</p>",
        "id": 202904014,
        "sender_full_name": "Andr√© Arko",
        "timestamp": 1593921881
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> looks like the target needs one more update, to the macos version:</p>\n<div class=\"codehilite\"><pre><span></span><code>          ld: warning: object file (/var/folders/9q/h77qyzbx4sxbj7ph4m_fgxx80000gn/T/rustc0ujFLc/libbacktrace_sys-73640f972bd0168e.rlib(sort.o)) was built for newer macOS version (11.5) than being linked (11.0)\n</code></pre></div>",
        "id": 202905437,
        "sender_full_name": "Andr√© Arko",
        "timestamp": 1593924762
    },
    {
        "content": "<p>I am also seeing what you noted about libbacktrace being x86_64:</p>\n<div class=\"codehilite\"><pre><span></span><code>= note: ld: warning: ignoring file /var/folders/9q/h77qyzbx4sxbj7ph4m_fgxx80000gn/T/rustc0ujFLc/libansi_colours-ab88f2e043978cc3.rlib, building for macOS-arm64 but attempting to link with file built for unknown-x86_64\n</code></pre></div>",
        "id": 202905707,
        "sender_full_name": "Andr√© Arko",
        "timestamp": 1593925232
    },
    {
        "content": "<p>as well as (strangely) onig, libgit2, and ansi_colors</p>",
        "id": 202905711,
        "sender_full_name": "Andr√© Arko",
        "timestamp": 1593925263
    },
    {
        "content": "<p>the rest seem fine</p>",
        "id": 202905716,
        "sender_full_name": "Andr√© Arko",
        "timestamp": 1593925273
    },
    {
        "content": "<p>The target needs more complicated updates. There‚Äôs logic that picks SDK and stuff based on environment variables. It doesn‚Äôt take arch into account now, but it should. when it‚Äôs aarch it should pick a higher default.</p>",
        "id": 202914612,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593943222
    },
    {
        "content": "<p>All of those packages probably use the cc crate, which will need some update.</p>",
        "id": 202914623,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593943273
    },
    {
        "content": "<p>Wow. I think that <code>cc</code> is smart enough to see if any of the parent processes are <code>x86_64</code> then it should build for x86_64 too.</p>",
        "id": 202919074,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593950698
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">std</span>::<span class=\"n\">process</span>::<span class=\"n\">Command</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">&quot;cc&quot;</span><span class=\"p\">).</span><span class=\"n\">arg</span><span class=\"p\">(</span><span class=\"s\">&quot;--verbose&quot;</span><span class=\"p\">).</span><span class=\"n\">status</span><span class=\"p\">().</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">&quot;Can&#39;t run&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code>% cargo run\n\nApple clang version 12.0.0 (clang-1200.0.22.19)\nTarget: x86_64-apple-darwin20.0.0\nThread model: posix\nInstalledDir: /Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin\n\n% cargo run --target x86_64-apple-darwin\n\nApple clang version 12.0.0 (clang-1200.0.22.19)\nTarget: x86_64-apple-darwin20.0.0\nThread model: posix\nInstalledDir: /Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin\n</code></pre></div>",
        "id": 202919144,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593950824
    },
    {
        "content": "<p>I think what this means is that we should always pass <code>-arch XXX</code> when targeting x86_64 or arm64. That will help with cross compiling as well.</p>",
        "id": 202920696,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593953793
    },
    {
        "content": "<p>Alright, got a on-device bootstrapped version with <code>CFLAGS='-arch arm64' ../../x.py build --stage 1 --warnings warn</code></p>",
        "id": 202920872,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593954122
    },
    {
        "content": "<p>And I've been able to build cargo and rustup (and clippy, accidentally)</p>",
        "id": 202926805,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593964531
    },
    {
        "content": "<p>feeling pretty good.</p>",
        "id": 202926855,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593964622
    },
    {
        "content": "<p>A warning</p>\n<div class=\"codehilite\"><pre><span></span><code>warning: /Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib: archive member: /Users/shep/rust/silicon/pure-native/build/aarch64-apple-darwin/stage0-rustc/aarch64-apple-darwin/release/build/rustc_llvm-a0401e12d2902923/out/librustllvm.a(PassWrapper.o) offset in archive not a multiple of 8 (must be since member is an 64-bit object file)\n</code></pre></div>",
        "id": 202931311,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593971820
    },
    {
        "content": "<p>Heh, just noticed that my previous output showed both cases were the x86_64. Here's the correct output:</p>\n<div class=\"codehilite\"><pre><span></span><code>% cargo run\n   Compiling foo v0.1.0 (/Users/shep/foo)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.67s\n     Running `target/debug/foo`\nApple clang version 12.0.0 (clang-1200.0.22.19)\nTarget: arm64-apple-darwin20.0.0\nThread model: posix\nInstalledDir: /Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin\n\n% RUSTFLAGS=&#39;-C link-arg=-arch -C link_arg=x86_64&#39; cargo run --target x86_64-apple-darwin\n   Compiling foo v0.1.0 (/Users/shep/foo)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.30s\n     Running `target/x86_64-apple-darwin/debug/foo`\nApple clang version 12.0.0 (clang-1200.0.22.19)\nTarget: x86_64-apple-darwin20.0.0\nThread model: posix\nInstalledDir: /Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin\n</code></pre></div>",
        "id": 202931513,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593972221
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/242906-t-compiler.2Farm/topic/macOS.20native.20rustc.20builds/near/202919074\">said</a>:</p>\n<blockquote>\n<p>Wow. I think that <code>cc</code> is smart enough to see if any of the parent processes are <code>x86_64</code> then it should build for x86_64 too.</p>\n</blockquote>\n<p>Yes, I noticed this when I was running iTerm2 as an x86_64 build. <code>uname -m</code> returns <code>x86_64</code> ü§Ø. I have since ported iTerm2 to arm64 to solve that problem :)</p>",
        "id": 202940239,
        "sender_full_name": "Stuart Carnie",
        "timestamp": 1593986693
    },
    {
        "content": "<p>yep, processes inside rosetta are completely sure they are on x86 hardware heh</p>",
        "id": 202951442,
        "sender_full_name": "Andr√© Arko",
        "timestamp": 1594007556
    },
    {
        "content": "<p>I don't think it's a matter of just Rosetta. If an x86_64 process starts an aarch64 process, the same happens:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"p\">{</span><span class=\"n\">process</span>::<span class=\"n\">Command</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">env</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">env</span>::<span class=\"n\">args_os</span><span class=\"p\">().</span><span class=\"n\">skip</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">next_platform</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">eprintln</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;Starting a {}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">next_platform</span><span class=\"p\">.</span><span class=\"n\">to_str</span><span class=\"p\">().</span><span class=\"n\">unwrap_or_default</span><span class=\"p\">());</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">exe_path</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">env</span>::<span class=\"n\">current_dir</span><span class=\"p\">().</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">&quot;No current dir&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">exe_path</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"s\">&quot;target&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">exe_path</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">next_platform</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">exe_path</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"s\">&quot;debug&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">exe_path</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"s\">&quot;foo&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">Command</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">exe_path</span><span class=\"p\">).</span><span class=\"n\">args</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">).</span><span class=\"n\">status</span><span class=\"p\">().</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">&quot;Can&#39;t run child process&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\">  </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Command</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">&quot;cc&quot;</span><span class=\"p\">).</span><span class=\"n\">arg</span><span class=\"p\">(</span><span class=\"s\">&quot;--verbose&quot;</span><span class=\"p\">).</span><span class=\"n\">status</span><span class=\"p\">().</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">&quot;Can&#39;t run cc&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code>% ./target/x86_64-apple-darwin/debug/foo aarch64-apple-darwin\nStarting a aarch64-apple-darwin\nApple clang version 12.0.0 (clang-1200.0.22.19)\nTarget: x86_64-apple-darwin20.0.0\nThread model: posix\nInstalledDir: /Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin\n\n% ./target/aarch64-apple-darwin/debug/foo aarch64-apple-darwin  aarch64-apple-darwin  aarch64-apple-darwin  aarch64-apple-darwin  aarch64-apple-darwin\nStarting a aarch64-apple-darwin\nStarting a aarch64-apple-darwin\nStarting a aarch64-apple-darwin\nStarting a aarch64-apple-darwin\nStarting a aarch64-apple-darwin\nApple clang version 12.0.0 (clang-1200.0.22.19)\nTarget: arm64-apple-darwin20.0.0\nThread model: posix\nInstalledDir: /Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin\n\n% ./target/x86_64-apple-darwin/debug/foo aarch64-apple-darwin  aarch64-apple-darwin  aarch64-apple-darwin  aarch64-apple-darwin  aarch64-apple-darwin\nStarting a aarch64-apple-darwin\nStarting a aarch64-apple-darwin\nStarting a aarch64-apple-darwin\nStarting a aarch64-apple-darwin\nStarting a aarch64-apple-darwin\nApple clang version 12.0.0 (clang-1200.0.22.19)\nTarget: x86_64-apple-darwin20.0.0\nThread model: posix\nInstalledDir: /Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin\n</code></pre></div>",
        "id": 202978200,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594035616
    },
    {
        "content": "<p>It is interesting that <code>uname</code> has the same behavior</p>",
        "id": 202978380,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594035819
    }
]