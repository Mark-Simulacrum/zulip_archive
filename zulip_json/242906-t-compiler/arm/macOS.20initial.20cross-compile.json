[
    {
        "content": "<p>I was able to build <code>dev</code> successfully with <code>python3 x.py build --target ./aarch64-apple-darwin.json</code></p>",
        "id": 202524094,
        "sender_full_name": "André Arko",
        "timestamp": 1593569831
    },
    {
        "content": "<p>then it dies when trying to build stage0, because aarch64-apple-darwin isn't in the listed triples</p>",
        "id": 202524099,
        "sender_full_name": "André Arko",
        "timestamp": 1593569845
    },
    {
        "content": "<p>My understanding is that we will want to:</p>\n<ol>\n<li>Update LLVM to a new version</li>\n<li>Compile Rust with the new LLVM (probably on / targeting x86_64 still) </li>\n<li>Create a new target </li>\n<li>Attempt to compile for that target</li>\n</ol>\n<p>/cc <span class=\"user-mention\" data-user-id=\"317220\">@André Arko</span></p>",
        "id": 202524113,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593569861
    },
    {
        "content": "<p>well, in some good news, x86_64 nightly works just fine</p>",
        "id": 202524169,
        "sender_full_name": "André Arko",
        "timestamp": 1593569903
    },
    {
        "content": "<p>so I am trying to use the x86_64 as the bootstrap to build from source</p>",
        "id": 202524187,
        "sender_full_name": "André Arko",
        "timestamp": 1593569931
    },
    {
        "content": "<p>and that works!</p>",
        "id": 202524194,
        "sender_full_name": "André Arko",
        "timestamp": 1593569939
    },
    {
        "content": "<p>Are you familiar with <a href=\"https://rustc-dev-guide.rust-lang.org/\">https://rustc-dev-guide.rust-lang.org/</a> ?</p>",
        "id": 202524202,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593569950
    },
    {
        "content": "<p>but apparently the --target json file doesn't get propagated to the stage0 build command</p>",
        "id": 202524203,
        "sender_full_name": "André Arko",
        "timestamp": 1593569952
    },
    {
        "content": "<p>I am...somewhat familiar with it</p>",
        "id": 202524299,
        "sender_full_name": "André Arko",
        "timestamp": 1593570015
    },
    {
        "content": "<p>I have built rust from source a bunch of times in the past, for MacOS in the pre-rustup days, and for avr more recently</p>",
        "id": 202524312,
        "sender_full_name": "André Arko",
        "timestamp": 1593570034
    },
    {
        "content": "<p>You'll want to follow <a href=\"https://rustc-dev-guide.rust-lang.org/backend/updating-llvm.html\">https://rustc-dev-guide.rust-lang.org/backend/updating-llvm.html</a></p>",
        "id": 202524359,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593570092
    },
    {
        "content": "<p>You won't need to follow the full process to start with; I tend to just to update my local checkout to some version of LLVM master and get that to compile.</p>",
        "id": 202524421,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593570164
    },
    {
        "content": "<p>a good thing about that is that many people are interested in keeping LLVM up-to-date</p>",
        "id": 202524444,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593570214
    },
    {
        "content": "<p>so getting help on it and getting any changes needed merged _should_ be straightforward.</p>",
        "id": 202524500,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593570249
    },
    {
        "content": "<p>See also <a class=\"stream\" data-stream-id=\"187780\" href=\"/#narrow/stream/187780-t-compiler.2Fwg-llvm\">#t-compiler/wg-llvm</a></p>",
        "id": 202524521,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593570270
    },
    {
        "content": "<p>do I want the latest from the rust fork, or the latest from the main LLVM?</p>",
        "id": 202524522,
        "sender_full_name": "André Arko",
        "timestamp": 1593570271
    },
    {
        "content": "<p>I'd <em>assume</em> main LLVM, <em>assuming</em> that it contains patches from Apple already. It's also possible you might need to pull from <a href=\"https://github.com/apple/llvm-project\">Apple's fork of LLVM</a>.</p>",
        "id": 202524601,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593570356
    },
    {
        "content": "<p>haha ok</p>",
        "id": 202524626,
        "sender_full_name": "André Arko",
        "timestamp": 1593570362
    },
    {
        "content": "<p>You might have to wrangle changes to LLVM APIs that have been updated as well. They break things reasonably frequently as they release new versions.</p>",
        "id": 202524722,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593570427
    },
    {
        "content": "<p>one thing that bites me frequently — once you've set <code>src/llvm-project</code> to some proper commit, you need to go back out of <code>llvm-project</code> and commit the submodule changes in the <code>rust</code> repository</p>",
        "id": 202524842,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593570509
    },
    {
        "content": "<p>Otherwise <code>x.py</code> will checkout a different commit than what you think is building and you will be very confused.</p>",
        "id": 202524869,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593570541
    },
    {
        "content": "<p>ahhh yes that is very good advice <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 202524904,
        "sender_full_name": "André Arko",
        "timestamp": 1593570580
    },
    {
        "content": "<p>I'm about to head for bed, but I think if you have any general questions, you can also pop into <a class=\"stream\" data-stream-id=\"182449\" href=\"/#narrow/stream/182449-t-compiler.2Fhelp\">#t-compiler/help</a> for a lot of this beginning process.</p>",
        "id": 202525090,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593570754
    },
    {
        "content": "<p>great, thanks!</p>",
        "id": 202525185,
        "sender_full_name": "André Arko",
        "timestamp": 1593570857
    },
    {
        "content": "<p>I <em>think</em> the next step is to build a stage1 / stage2 compiler with the new LLVM, then  configure the build system to use that as the bootstrapping rustc (instead of the beta release), then try to perform the cross-compile build</p>",
        "id": 202525196,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593570866
    },
    {
        "content": "<p>since I was able to compile pre-stage0 without updating LLVM, do you know if there is anything that depends on commits after the rust llvm?</p>",
        "id": 202525230,
        "sender_full_name": "André Arko",
        "timestamp": 1593570907
    },
    {
        "content": "<p>yeah, that makes sense</p>",
        "id": 202525236,
        "sender_full_name": "André Arko",
        "timestamp": 1593570915
    },
    {
        "content": "<p>I'm mostly just wondering how badly it will hurt to try to use nightly to bootstrap rust-lang HEAD by adding source level support for the target, and... who knows? maybe it's worth trying before updating all of LLVM</p>",
        "id": 202525267,
        "sender_full_name": "André Arko",
        "timestamp": 1593570958
    },
    {
        "content": "<p>thanks for the advice!</p>",
        "id": 202525307,
        "sender_full_name": "André Arko",
        "timestamp": 1593570963
    },
    {
        "content": "<p>even if updated LLVM turns out to not be required, you were right about needing to add the target and then compile a full x86 copy that can be used to build the arm64 copy, I think <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 202527543,
        "sender_full_name": "André Arko",
        "timestamp": 1593574135
    },
    {
        "content": "<p>so I think I made it to an actual platform issue?</p>",
        "id": 202540317,
        "sender_full_name": "André Arko",
        "timestamp": 1593590082
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0412]: cannot find type `c_char` in the crate root\n  --&gt; /Users/andre/.cargo/registry/src/github.com-1ecc6299db9ec823/libc-0.2.71/src/unix/mod.rs:45:29\n   |\n6  | pub type c_schar = i8;\n   | ---------------------- similarly named type alias `c_schar` defined here\n...\n45 |         pub gr_name: *mut ::c_char,\n   |                             ^^^^^^ help: a type alias with a similar name exists: `c_schar`\n</code></pre></div>",
        "id": 202540334,
        "sender_full_name": "André Arko",
        "timestamp": 1593590100
    },
    {
        "content": "<p>my steps so far are:</p>\n<ol>\n<li>add aarch64-apple-darwin as a platform</li>\n<li>build on x86_64, for x86_64, and copy the results to aarch64</li>\n<li>use config.toml to point at stage0 cargo and stage2 rustc </li>\n<li>python x.py build</li>\n</ol>",
        "id": 202540437,
        "sender_full_name": "André Arko",
        "timestamp": 1593590168
    },
    {
        "content": "<p>Yes, that makes sense. Libc defines many basic types. C’s <code>char</code> is one of the most interesting because it can be signed, unsigned, or <em>neither</em>. It’s a strange quirk of history. </p>\n<p>You’ll need to figure out what it should be and edit the libc crate. My guess is it will be the same as x86_64. You can probably just guess for a little while as well.</p>",
        "id": 202554573,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593600490
    },
    {
        "content": "<p>I’m not sure how you can use a local fork of libc in the build process though.</p>",
        "id": 202554637,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593600554
    },
    {
        "content": "<p>Although it looks like libc should <a href=\"https://github.com/rust-lang/libc/blob/d791c50036f4faf64d5fa33a0ff7307ba09591ab/src/unix/bsd/mod.rs#L869-L871\">just be checking for if it's <code>macos</code></a></p>",
        "id": 202555788,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593601449
    },
    {
        "content": "<p>And it's defined as </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">c_char</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 202555822,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593601488
    },
    {
        "content": "<p>How is your target defined? Is it not called macos?</p>",
        "id": 202555874,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593601549
    },
    {
        "content": "<p>I basically zombied together a target from the existing x86_64-apple-darwin and the aarch64-apple-ios targets, but maybe I'm doing it wrong <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 202597014,
        "sender_full_name": "André Arko",
        "timestamp": 1593623872
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/compare/master...indirect:aarch64-apple-darwin\">https://github.com/rust-lang/rust/compare/master...indirect:aarch64-apple-darwin</a></p>",
        "id": 202597021,
        "sender_full_name": "André Arko",
        "timestamp": 1593623878
    },
    {
        "content": "<p>ah yep my bad! the target_os should be macos looks like</p>",
        "id": 202597121,
        "sender_full_name": "André Arko",
        "timestamp": 1593623936
    },
    {
        "content": "<p>based on <a href=\"https://github.com/indirect/rust/blob/2a047ec496cdca548780612a32fc139a1f9d94a6/src/librustc_target/spec/x86_64_apple_darwin.rs#L26\">https://github.com/indirect/rust/blob/2a047ec496cdca548780612a32fc139a1f9d94a6/src/librustc_target/spec/x86_64_apple_darwin.rs#L26</a></p>",
        "id": 202597159,
        "sender_full_name": "André Arko",
        "timestamp": 1593623961
    },
    {
        "content": "<p>The mix-and-match process is about what I'd expect. Filling out exactly what should be in that target will take some knowledge (that I don't have) as well as some experimentation, I'm sure.</p>",
        "id": 202599620,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593625148
    },
    {
        "content": "<p>One thing to throw out there is <a href=\"https://github.com/rust-lang/rust/pull/73903\">https://github.com/rust-lang/rust/pull/73903</a></p>",
        "id": 202599649,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593625160
    },
    {
        "content": "<p>I don't know if it's directly relevant, but it's in the area.</p>",
        "id": 202599685,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593625188
    },
    {
        "content": "<p>ah yeah, thanks</p>",
        "id": 202599696,
        "sender_full_name": "André Arko",
        "timestamp": 1593625192
    },
    {
        "content": "<p>one thing you probably do know is how to better set up a bootstrapping chain</p>",
        "id": 202599758,
        "sender_full_name": "André Arko",
        "timestamp": 1593625206
    },
    {
        "content": "<p>so I have a new commit that changes the target</p>",
        "id": 202599791,
        "sender_full_name": "André Arko",
        "timestamp": 1593625221
    },
    {
        "content": "<p>so now I need to make x.py use the x86_64 rustc to build... I guess an updated x86_64 rustc, with the new target def?</p>",
        "id": 202599922,
        "sender_full_name": "André Arko",
        "timestamp": 1593625295
    },
    {
        "content": "<p>I assume you followed the defaults and got a <code>build</code> directory?</p>",
        "id": 202600027,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593625330
    },
    {
        "content": "<p>yeah, so far I have scp'ed the <code>build</code> directory from my x86 laptop over to the DTK</p>",
        "id": 202600158,
        "sender_full_name": "André Arko",
        "timestamp": 1593625409
    },
    {
        "content": "<p>feels like I should be able to do better than that, but I don't know how, heh</p>",
        "id": 202600261,
        "sender_full_name": "André Arko",
        "timestamp": 1593625445
    },
    {
        "content": "<p>So you have a <code>build/x86_64-apple-darwin/stage0/bin/rustc</code> ?</p>",
        "id": 202600424,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593625525
    },
    {
        "content": "<p>yep</p>",
        "id": 202600436,
        "sender_full_name": "André Arko",
        "timestamp": 1593625535
    },
    {
        "content": "<p>(and stage1, stage2)</p>",
        "id": 202600445,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593625544
    },
    {
        "content": "<p>And if you run <code>build/x86_64-apple-darwin/stage1/bin/rustc --print target-list</code>, do you see your newly-defined target?</p>",
        "id": 202600594,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593625606
    },
    {
        "content": "<p>well, I see that it exists... but now I need to update it <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 202600652,
        "sender_full_name": "André Arko",
        "timestamp": 1593625633
    },
    {
        "content": "<p>maybe I just need to compile a new stage1 on my laptop and copy it over again heh</p>",
        "id": 202600673,
        "sender_full_name": "André Arko",
        "timestamp": 1593625643
    },
    {
        "content": "<p>so, in _general_, you can put the target as a JSON file</p>",
        "id": 202600768,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593625684
    },
    {
        "content": "<p>And load it, you don't need to rebuild</p>",
        "id": 202600791,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593625693
    },
    {
        "content": "<p>right, the catch is that cargo doesn't forward the json file later in the build</p>",
        "id": 202600805,
        "sender_full_name": "André Arko",
        "timestamp": 1593625701
    },
    {
        "content": "<p>when I was pairing with steve last night, the json file was enough to build the bootstrap/dev step, but not enough to build any steps past that, I think</p>",
        "id": 202600930,
        "sender_full_name": "André Arko",
        "timestamp": 1593625776
    },
    {
        "content": "<p>I can reproduce the exact error, if that would help</p>",
        "id": 202600965,
        "sender_full_name": "André Arko",
        "timestamp": 1593625795
    },
    {
        "content": "<p>I trust you <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> Might be worth asking about the error and details in <a class=\"stream\" data-stream-id=\"182449\" href=\"/#narrow/stream/182449-t-compiler.2Fhelp\">#t-compiler/help</a> , but rebuilding is a passable thing for now.</p>",
        "id": 202601164,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593625894
    },
    {
        "content": "<p>Are you performing incremental builds of rustc?</p>",
        "id": 202601186,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593625904
    },
    {
        "content": "<p>That saves a lot of time.</p>",
        "id": 202601192,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593625911
    },
    {
        "content": "<p>oh that's a very good idea, a new stage 1 is taking a very long time</p>",
        "id": 202601403,
        "sender_full_name": "André Arko",
        "timestamp": 1593626029
    },
    {
        "content": "<p><code>./x.py -i ...</code></p>",
        "id": 202601463,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593626045
    },
    {
        "content": "<p>Once that's done, you can attempt to use your <code>build/x86_64-apple-darwin/stage1/bin/rustc</code> to cross-compile a program for the new target.</p>",
        "id": 202601559,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593626108
    },
    {
        "content": "<p>I'd start with just trying <code>..../rustc --target ... hello.rs</code></p>",
        "id": 202601606,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593626131
    },
    {
        "content": "<p>what! you mean rustc itself might be an ambitious first program! <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 202601644,
        "sender_full_name": "André Arko",
        "timestamp": 1593626156
    },
    {
        "content": "<p>yesssssssss</p>",
        "id": 202601691,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593626164
    },
    {
        "content": "<p>this will require that you have the various libraries installed, so I don't know if you want to do that on your x86 machine or the DTK.</p>",
        "id": 202601766,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593626209
    },
    {
        "content": "<p>Circling back to the bootstrapping question... config.toml has a few related things:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">build-dir</span> <span class=\"o\">=</span> <span class=\"s\">&quot;build&quot;</span>\n<span class=\"n\">cargo</span> <span class=\"o\">=</span> <span class=\"s\">&quot;/path/to/cargo&quot;</span>\n<span class=\"n\">rustc</span> <span class=\"o\">=</span> <span class=\"s\">&quot;/path/to/bin/rustc&quot;</span>\n</code></pre></div>",
        "id": 202602243,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593626455
    },
    {
        "content": "<p>so you'd probably want to create a second directory (to avoid clobbering), then point that <code>rustc</code> to your <code>stage1/bin/rustc</code>.</p>",
        "id": 202602330,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593626495
    },
    {
        "content": "<p>You might _also_ need to set</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\"># In addition to the build triple, other triples to produce full compiler</span>\n<span class=\"c1\"># toolchains for. Each of these triples will be bootstrapped from the build</span>\n<span class=\"c1\"># triple and then will continue to bootstrap themselves. This platform must</span>\n<span class=\"c1\"># currently be able to run all of the triples provided here.</span>\n<span class=\"c1\">#host = [&quot;x86_64-unknown-linux-gnu&quot;]   # defaults to just the build triple</span>\n</code></pre></div>\n\n\n<p>Presumably to contain your new target name</p>",
        "id": 202602532,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593626590
    },
    {
        "content": "<p>then you should have a <code>build/newtarget/stage1</code></p>",
        "id": 202602583,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593626619
    },
    {
        "content": "<p>But if I'm reading the comment correctly, you'd <em>have</em> to run this on the DTK as that's the only machine that could run the x86_64 and arm code</p>",
        "id": 202602689,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593626659
    },
    {
        "content": "<p>yeah, that makes sense, I think</p>",
        "id": 202608065,
        "sender_full_name": "André Arko",
        "timestamp": 1593629144
    },
    {
        "content": "<p>and if rust already had support for this triple, just setting <code>build</code> would probably suffice to bootstrap</p>",
        "id": 202608124,
        "sender_full_name": "André Arko",
        "timestamp": 1593629163
    },
    {
        "content": "<p>do you happen to know why stage0 cargo appears to have statically linked openssl, but stage2 cargo has dynamically linked it?</p>",
        "id": 202608179,
        "sender_full_name": "André Arko",
        "timestamp": 1593629204
    },
    {
        "content": "<p>(trying to use config.toml to manually point to rustc and cargo that include my target)</p>",
        "id": 202608249,
        "sender_full_name": "André Arko",
        "timestamp": 1593629251
    },
    {
        "content": "<p>and I'm seeing these differing results from the stage0 and stage2 cargos:</p>",
        "id": 202608284,
        "sender_full_name": "André Arko",
        "timestamp": 1593629272
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>❯ ../x86_64-apple-darwin/stage2-tools/x86_64-apple-darwin/release/cargo --version\ndyld: Library not loaded: /usr/local/opt/openssl@1.1/lib/libssl.1.1.dylib\n  Referenced from: /Users/andre/src/rust-lang/rust/../x86_64-apple-darwin/stage2-tools/x86_64-apple-darwin/release/cargo\n  Reason: no suitable image found.  Did find:\n    /usr/local/opt/openssl@1.1/lib/libssl.1.1.dylib: mach-o, but wrong architecture\n    /usr/local/Cellar/openssl@1.1/1.1.1g/lib/libssl.1.1.dylib: mach-o, but wrong architecture\nzsh: abort      ../x86_64-apple-darwin/stage2-tools/x86_64-apple-darwin/release/cargo\n❯ ../x86_64-apple-darwin/stage0/bin/cargo --version\ncargo 1.45.0-beta (744bd1fbb 2020-06-15)\n</code></pre></div>",
        "id": 202608361,
        "sender_full_name": "André Arko",
        "timestamp": 1593629294
    },
    {
        "content": "<p>(the DTK has, reasonably IMO, brewed openssl in aarch64 and not x86_64)</p>",
        "id": 202608418,
        "sender_full_name": "André Arko",
        "timestamp": 1593629323
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\"># Indicates whether the native libraries linked into Cargo will be statically</span>\n<span class=\"c1\"># linked or not.</span>\n<span class=\"c1\">#cargo-native-static = false</span>\n</code></pre></div>",
        "id": 202608796,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593629524
    },
    {
        "content": "<p>maybe just change that in config.toml?</p>",
        "id": 202608815,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593629536
    },
    {
        "content": "<p>I don't know the <em>why</em> though</p>",
        "id": 202608834,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593629550
    },
    {
        "content": "<p>oooo yes thank you</p>",
        "id": 202609192,
        "sender_full_name": "André Arko",
        "timestamp": 1593629768
    },
    {
        "content": "<p>I guess if you're building locally it's fine to dynamic-link to keep sizes down and whatnot</p>",
        "id": 202609236,
        "sender_full_name": "André Arko",
        "timestamp": 1593629804
    },
    {
        "content": "<p>and if you're building for binary distribution (like for stage0!) you want static linking, so it works on other machines</p>",
        "id": 202609264,
        "sender_full_name": "André Arko",
        "timestamp": 1593629825
    },
    {
        "content": "<p>time for some more compiling <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 202609303,
        "sender_full_name": "André Arko",
        "timestamp": 1593629847
    },
    {
        "content": "<p>also, generally stage0 == the most recent beta.</p>",
        "id": 202610061,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593630176
    },
    {
        "content": "<p>in your case, you've got a few stage0 in play</p>",
        "id": 202610101,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593630193
    },
    {
        "content": "<p>yep, I am slowly figuring this out :)</p>",
        "id": 202610253,
        "sender_full_name": "André Arko",
        "timestamp": 1593630247
    },
    {
        "content": "<p>I think what is currently happening is:</p>\n<ol>\n<li>edit targets on intel mac</li>\n<li>compile stage2 rustc that knows about new targets</li>\n<li>copy that rustc over to DTK, and use it as stage0</li>\n</ol>",
        "id": 202610347,
        "sender_full_name": "André Arko",
        "timestamp": 1593630302
    },
    {
        "content": "<p>I guess I could be copying stage1 over, it probably doesn't matter if rustc for x86 is compiled by rustc that knows about arm64</p>",
        "id": 202610442,
        "sender_full_name": "André Arko",
        "timestamp": 1593630352
    },
    {
        "content": "<p>I would love to better understand how cargo works with this... it seems like <code>x.py build</code> only creates rustc, and I have to manually <code>x.py build cargo</code> to also get the cargo I can use for stage0 on the DTK, does that sound right to you?</p>",
        "id": 202610576,
        "sender_full_name": "André Arko",
        "timestamp": 1593630419
    },
    {
        "content": "<p>And you can probably just build stage1.</p>",
        "id": 202610652,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593630451
    },
    {
        "content": "<p>yep, just figured that out above :)</p>",
        "id": 202610761,
        "sender_full_name": "André Arko",
        "timestamp": 1593630483
    },
    {
        "content": "<p>You might even be able to skip building cargo; I don't see why you'd need it at all to start with, or couldn't use the x86_64 cargo as well</p>",
        "id": 202610824,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593630503
    },
    {
        "content": "<p>right, sorry, this is about the x86_64 cargo</p>",
        "id": 202610858,
        "sender_full_name": "André Arko",
        "timestamp": 1593630519
    },
    {
        "content": "<p>on the intel mac, I am building a rustc that knows about the new target</p>",
        "id": 202610892,
        "sender_full_name": "André Arko",
        "timestamp": 1593630537
    },
    {
        "content": "<p>copying that to DTK to use as stage0 rustc</p>",
        "id": 202610914,
        "sender_full_name": "André Arko",
        "timestamp": 1593630546
    },
    {
        "content": "<p>but I also need a cargo that knows about the new target</p>",
        "id": 202610925,
        "sender_full_name": "André Arko",
        "timestamp": 1593630553
    },
    {
        "content": "<p>to use as the stage0 cargo</p>",
        "id": 202610932,
        "sender_full_name": "André Arko",
        "timestamp": 1593630557
    },
    {
        "content": "<p>something like <code>./x.py build -i --stage 1 src/libtest</code></p>",
        "id": 202610946,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593630562
    },
    {
        "content": "<blockquote>\n<p>a cargo that knows about the new target</p>\n</blockquote>\n<p>Why's that?</p>",
        "id": 202610987,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593630587
    },
    {
        "content": "<p>because when I try to run <code>x.py build</code> on the DTK with a cargo that doesn't know about the new target, it fails with a cargo command that errors about not having the target :)</p>",
        "id": 202611057,
        "sender_full_name": "André Arko",
        "timestamp": 1593630613
    },
    {
        "content": "<p>hmm. I didn't think that cargo knew about the targets at all, delegating off to rustc.</p>",
        "id": 202611094,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593630635
    },
    {
        "content": "<p>hmm, interesting! I will look more closely as soon as this rustc finishes building</p>",
        "id": 202611140,
        "sender_full_name": "André Arko",
        "timestamp": 1593630662
    },
    {
        "content": "<p>Cargo first runs <code>rustc -vV</code> to learn the host target and then runs <code>rustc - --crate-name ___ --print=file-names --crate-type bin --crate-type rlib --crate-type dylib --crate-type cdylib --crate-type staticlib --crate-type proc-macro --print=sysroot --print=cfg</code> to learn everything else, including all enabled cfgs, which crate types are supported, how certain crate types get named. (eg <code>lib___.so</code> vs <code>___.dll</code> and <code>___</code> vs <code>___.exe</code>)</p>",
        "id": 202611537,
        "sender_full_name": "bjorn3",
        "timestamp": 1593630843
    },
    {
        "content": "<p>ahh, yep, I faked myself out by trying to run the failing cargo command directly, which meant it was using the wrong rustc, and no longer knew about my target. thanks!</p>",
        "id": 202614952,
        "sender_full_name": "André Arko",
        "timestamp": 1593632487
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> okay I could use advice now <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> I have:</p>\n<ol>\n<li>added <code>aarch64-apple-darwin</code> and built stage1 on intel</li>\n<li>copied all of stage1 to DTK</li>\n<li>set config.toml thusly:</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code>cargo = &quot;/Users/andre/.rustup/toolchains/nightly-x86_64-apple-darwin/bin/cargo&quot;\nrustc = &quot;/Users/andre/stage1/bin/rustc&quot;\nrustfmt = &quot;/Users/andre/.rustup/toolchains/nightly-x86_64-apple-darwin/bin/rustfmt&quot;\n</code></pre></div>\n\n\n<p>got a giant pile of cc/ld output about bad architectures: <a href=\"https://gist.github.com/indirect/d41d11e89d315edd553760c9689e4226\">https://gist.github.com/indirect/d41d11e89d315edd553760c9689e4226</a></p>",
        "id": 202616917,
        "sender_full_name": "André Arko",
        "timestamp": 1593633513
    },
    {
        "content": "<p>(fwiw, I get the same error when I try to build without <code>-i</code>)</p>",
        "id": 202617127,
        "sender_full_name": "André Arko",
        "timestamp": 1593633608
    },
    {
        "content": "<blockquote>\n<p>symbol(s) not found for architecture x86_64</p>\n</blockquote>",
        "id": 202617299,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593633701
    },
    {
        "content": "<p>so you have an x86 rustc and you are trying to build an arm rustc, skipping the hello world?</p>",
        "id": 202617400,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593633742
    },
    {
        "content": "<blockquote>\n<p>Building stage0 std artifacts (aarch64-apple-darwin -&gt; aarch64-apple-darwin)</p>\n</blockquote>",
        "id": 202617534,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593633819
    },
    {
        "content": "<p>hm</p>",
        "id": 202617546,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593633826
    },
    {
        "content": "<p>I'd make sure that the files you've built are the appropriate arch. Something like <code>file /Users/andre/src/rust-lang/rust/build/aarch64-apple-darwin/stage0-std/aarch64-apple-darwin/release/deps/std-5a6e16530e74c59e.10hfa5qunoz4t80m.rcgu.o</code></p>",
        "id": 202617744,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593633956
    },
    {
        "content": "<p>I have things like <code>Mach-O 64-bit object x86_64</code></p>",
        "id": 202617851,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593634011
    },
    {
        "content": "<p>presumably yours should be different</p>",
        "id": 202617868,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593634021
    },
    {
        "content": "<p>oh right, I totally meant to start with hello world <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span>🏻‍♂️</p>",
        "id": 202618090,
        "sender_full_name": "André Arko",
        "timestamp": 1593634161
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>❯ ~/stage1/bin/rustc hello.rs --target aarch64-apple-darwin\nerror[E0463]: can&#39;t find crate for `std`\n  |\n  = note: the `aarch64-apple-darwin` target may not be installed\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0463`.\n</code></pre></div>",
        "id": 202618105,
        "sender_full_name": "André Arko",
        "timestamp": 1593634171
    },
    {
        "content": "<p>hmmmm does that mean I didn't build std on my intel mac to copy over</p>",
        "id": 202618170,
        "sender_full_name": "André Arko",
        "timestamp": 1593634201
    },
    {
        "content": "<p>my files do seem to be the right arch:</p>",
        "id": 202618319,
        "sender_full_name": "André Arko",
        "timestamp": 1593634264
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>❯ file /Users/andre/src/rust-lang/rust/build/aarch64-apple-darwin/stage0-std/aarch64-apple-darwin/release/deps/std-5a6e16530e74c59e.10hfa5qunoz4t80m.rcgu.o\n/Users/andre/src/rust-lang/rust/build/aarch64-apple-darwin/stage0-std/aarch64-apple-darwin/release/deps/std-5a6e16530e74c59e.10hfa5qunoz4t80m.rcgu.o: Mach-O 64-bit object arm64\n</code></pre></div>",
        "id": 202618322,
        "sender_full_name": "André Arko",
        "timestamp": 1593634266
    },
    {
        "content": "<p>Is there a stdlib and is it the right type?</p>\n<div class=\"codehilite\"><pre><span></span><code>% file build/x86_64-apple-darwin/stage1/lib/rustlib/x86_64-apple-darwin/lib/libstd-f48968273f376cb7.dylib\nbuild/x86_64-apple-darwin/stage1/lib/rustlib/x86_64-apple-darwin/lib/libstd-f48968273f376cb7.dylib: Mach-O 64-bit dynamically linked shared library x86_64\n</code></pre></div>",
        "id": 202618756,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593634484
    },
    {
        "content": "<p>yes, it looks right:</p>\n<div class=\"codehilite\"><pre><span></span><code>❯ file ~/stage1/lib/rustlib/x86_64-apple-darwin/lib/libstd-a6381669d6483006.dylib\n/Users/andre/stage1/lib/rustlib/x86_64-apple-darwin/lib/libstd-a6381669d6483006.dylib: Mach-O 64-bit dynamically linked shared library x86_64\n</code></pre></div>",
        "id": 202619057,
        "sender_full_name": "André Arko",
        "timestamp": 1593634643
    },
    {
        "content": "<p>Ah, yours should be arm64</p>",
        "id": 202620902,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593635758
    },
    {
        "content": "<p>Maybe in a sibling directory from what I pasted?</p>",
        "id": 202621080,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593635847
    },
    {
        "content": "<p>oh sorry, backing all the way up to \"can I compile <a href=\"http://hello.rs\">hello.rs</a> for the new aarch64-apple-darwin target\"</p>",
        "id": 202622362,
        "sender_full_name": "André Arko",
        "timestamp": 1593636598
    },
    {
        "content": "<p>I have copied stage1 (with the new target) from intel mac to DTK</p>",
        "id": 202622500,
        "sender_full_name": "André Arko",
        "timestamp": 1593636687
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>❯ cat hello.rs\nfn main() { println!(&quot;Hello World!&quot;); }\n❯ ~/stage1/bin/rustc hello.rs\n❯ ./hello\nHello World!\n❯ file hello\nhello: Mach-O 64-bit executable x86_64\n❯ ~/stage1/bin/rustc hello.rs --target aarch64-apple-darwin\nerror[E0463]: can&#39;t find crate for `std`\n  |\n  = note: the `aarch64-apple-darwin` target may not be installed\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0463`.\n</code></pre></div>",
        "id": 202622527,
        "sender_full_name": "André Arko",
        "timestamp": 1593636710
    },
    {
        "content": "<p>so I guess this makes sense because my copied stage1 has a std for x86_64</p>",
        "id": 202622757,
        "sender_full_name": "André Arko",
        "timestamp": 1593636848
    },
    {
        "content": "<p>but not for aarch64</p>",
        "id": 202622764,
        "sender_full_name": "André Arko",
        "timestamp": 1593636854
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 202623070,
        "sender_full_name": "André Arko",
        "timestamp": 1593637027
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 202623127,
        "sender_full_name": "André Arko",
        "timestamp": 1593637057
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 202623207,
        "sender_full_name": "André Arko",
        "timestamp": 1593637083
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 202623302,
        "sender_full_name": "André Arko",
        "timestamp": 1593637133
    },
    {
        "content": "<p>so maybe now my goal is to use the intel rustc to build an aarch64 std?</p>",
        "id": 202623516,
        "sender_full_name": "André Arko",
        "timestamp": 1593637254
    },
    {
        "content": "<p>oh that is literally the crate that fails <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 202623669,
        "sender_full_name": "André Arko",
        "timestamp": 1593637335
    },
    {
        "content": "<p>I guess now I get your earlier question, heh</p>",
        "id": 202623786,
        "sender_full_name": "André Arko",
        "timestamp": 1593637420
    },
    {
        "content": "<p>I don't have anything in stage1 for aarch64, just a bunch of empty folders:</p>",
        "id": 202623993,
        "sender_full_name": "André Arko",
        "timestamp": 1593637544
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>❯ find build/aarch64-apple-darwin/stage1 -type file\n</code></pre></div>",
        "id": 202623998,
        "sender_full_name": "André Arko",
        "timestamp": 1593637547
    },
    {
        "content": "<p>I guess now I am looped back around to <code>python x.py build -i --stage 1 --target aarch64-apple-darwin</code> and that giant error from before: <a href=\"https://gist.githubusercontent.com/indirect/d41d11e89d315edd553760c9689e4226/raw/d5a4aac799e12889db457c830e46c5aa66f5ec50/gistfile1.txt\">https://gist.githubusercontent.com/indirect/d41d11e89d315edd553760c9689e4226/raw/d5a4aac799e12889db457c830e46c5aa66f5ec50/gistfile1.txt</a></p>",
        "id": 202624607,
        "sender_full_name": "André Arko",
        "timestamp": 1593637890
    },
    {
        "content": "<p>not sure where to go from here :)</p>",
        "id": 202624615,
        "sender_full_name": "André Arko",
        "timestamp": 1593637900
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>     ld: warning: ignoring file /Users/andre/src/rust-lang/rust/build/aarch64-apple-darwin/stage0-std/aarch64-apple-darwin/release/deps/std-5a6e16530e74c59e.2kfncgnake9pkvcr.rcgu.o, building for macOS-x86_64 but attempting to link with file built for unknown-arm64\n</code></pre></div>\n\n\n</blockquote>",
        "id": 202628230,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593640204
    },
    {
        "content": "<p>hmmmmmmm</p>",
        "id": 202628294,
        "sender_full_name": "André Arko",
        "timestamp": 1593640257
    },
    {
        "content": "<p>maybe I mixed and matched configs and target options</p>",
        "id": 202628360,
        "sender_full_name": "André Arko",
        "timestamp": 1593640314
    },
    {
        "content": "<p>no, I guess not</p>",
        "id": 202628535,
        "sender_full_name": "André Arko",
        "timestamp": 1593640439
    },
    {
        "content": "<p>why is it saying <code>building for macOS-x86_64 but attempting to link with file built for unknown-arm64</code> when I run <code>x.py build --stage 1 --target aarch64-apple-darwin</code></p>",
        "id": 202628623,
        "sender_full_name": "André Arko",
        "timestamp": 1593640487
    },
    {
        "content": "<p>maybe something still wrong with the target definition? but I don't know what</p>",
        "id": 202628657,
        "sender_full_name": "André Arko",
        "timestamp": 1593640517
    },
    {
        "content": "<p>Have you compiled a native C hello world?</p>",
        "id": 202634429,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593645165
    },
    {
        "content": "<p>Sadly, I think that people without the DTK aren’t allowed to look at the docs or download the Xcode that allows cross compiling.</p>",
        "id": 202634705,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593645407
    },
    {
        "content": "<p>(I’d love to be proven wrong about that)</p>",
        "id": 202634721,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593645430
    },
    {
        "content": "<p>You can download the cross compiling Xcode without the DTK</p>",
        "id": 202634848,
        "sender_full_name": "David Jensenius",
        "timestamp": 1593645571
    },
    {
        "content": "<p>Aha: <code>$(CC) main.c -o arm_app -target arm64-apple-macos11</code></p>",
        "id": 202636873,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593647427
    },
    {
        "content": "<p>I kind of hope that <code>cc</code> would default to targeting the native platform</p>",
        "id": 202637657,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593648215
    },
    {
        "content": "<p>Could be worth doing a <code>cc hello.c</code> and checking that it produces an arm executable</p>",
        "id": 202637721,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593648252
    },
    {
        "content": "<p>\"built for unknown-arm64\" is also suspicious.</p>",
        "id": 202638185,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593648618
    },
    {
        "content": "<p>ah yeah good point</p>",
        "id": 202639006,
        "sender_full_name": "André Arko",
        "timestamp": 1593649340
    },
    {
        "content": "<p>it does work reasonably:</p>\n<div class=\"codehilite\"><pre><span></span><code>❯ /Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang -arch arm64 -isysroot /Applications/Xcode-beta.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX11.0.sdk hello.c -o hello\n❯ file hello\nhello: Mach-O 64-bit executable arm64\n❯ ./hello\nHello, World!%\n</code></pre></div>",
        "id": 202639527,
        "sender_full_name": "André Arko",
        "timestamp": 1593649871
    },
    {
        "content": "<p>without passing -target</p>",
        "id": 202639541,
        "sender_full_name": "André Arko",
        "timestamp": 1593649885
    },
    {
        "content": "<p>(although $CC contains -arch arm64)</p>",
        "id": 202639548,
        "sender_full_name": "André Arko",
        "timestamp": 1593649894
    },
    {
        "content": "<p>I wonder if you need to add that arch to what rust uses as cc</p>",
        "id": 202641559,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593652732
    },
    {
        "content": "<p>I'm trying to install the Xcode 12 beta myself, even though I won't be able to run anything. I can just feel that I'm gonna regret this decision.</p>",
        "id": 202643259,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593655173
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/242906-t-compiler.2Farm/topic/macOS.20initial.20cross-compile/near/202641559\">said</a>:</p>\n<blockquote>\n<p>I wonder if you need to add that arch to what rust uses as cc</p>\n</blockquote>\n<p>how do I edit rust's CC?</p>",
        "id": 202643715,
        "sender_full_name": "André Arko",
        "timestamp": 1593655764
    },
    {
        "content": "<p>in config.toml, there are platform specific sections, like <code>[target.x86_64-apple-darwin]</code>. You can specify the linker there</p>",
        "id": 202643776,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593655824
    },
    {
        "content": "<p>ahh, ok... let's see...</p>",
        "id": 202643809,
        "sender_full_name": "André Arko",
        "timestamp": 1593655903
    },
    {
        "content": "<p>You could try </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">[target.whatever-you-picked]</span>\n<span class=\"n\">linker</span> <span class=\"o\">=</span> <span class=\"s\">&quot;cc -arch arm64&quot;</span>\n</code></pre></div>",
        "id": 202643857,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593655924
    },
    {
        "content": "<p>wouldn't the linker be ld?</p>",
        "id": 202643865,
        "sender_full_name": "André Arko",
        "timestamp": 1593655939
    },
    {
        "content": "<p>I know nothing <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 202643867,
        "sender_full_name": "André Arko",
        "timestamp": 1593655944
    },
    {
        "content": "<p>oh I see, the default is cc</p>",
        "id": 202643870,
        "sender_full_name": "André Arko",
        "timestamp": 1593655954
    },
    {
        "content": "<p>however, that <em>feels</em> suspicious to have arguments in there. You <em>may</em> need to write a little shell script that takes all the args it's passed and adds <code>-arch ...</code> and calls <code>cc</code></p>",
        "id": 202643884,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593655985
    },
    {
        "content": "<p><code>cc</code> will call <code>ld</code></p>",
        "id": 202643887,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593655996
    },
    {
        "content": "<p>got it</p>",
        "id": 202643889,
        "sender_full_name": "André Arko",
        "timestamp": 1593655999
    },
    {
        "content": "<p>(cc will call clang which calls clang which calls ld, I think)</p>",
        "id": 202643900,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593656018
    },
    {
        "content": "<p>if I'm going to use options I might as well throw the entire $CC in there right</p>",
        "id": 202643904,
        "sender_full_name": "André Arko",
        "timestamp": 1593656025
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>/Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang -arch arm64 -isysroot /Applications/Xcode-beta.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX11.0.sdk\n</code></pre></div>",
        "id": 202643908,
        "sender_full_name": "André Arko",
        "timestamp": 1593656039
    },
    {
        "content": "<p>ohhh yeah you're right, it passes that as the option -C to rustc</p>",
        "id": 202643960,
        "sender_full_name": "André Arko",
        "timestamp": 1593656092
    },
    {
        "content": "<p>I don't have a good answer for that; so try one way and then the other if it doesn't work ;-)</p>",
        "id": 202643962,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593656097
    },
    {
        "content": "<p>flags are not gonna work haha</p>",
        "id": 202643963,
        "sender_full_name": "André Arko",
        "timestamp": 1593656098
    },
    {
        "content": "<p>a little bash or zsh will go a long way</p>",
        "id": 202643973,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593656118
    },
    {
        "content": "<p>I'm a little surprised there's not a linker flags option</p>",
        "id": 202643978,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593656129
    },
    {
        "content": "<p>!!</p>",
        "id": 202644045,
        "sender_full_name": "André Arko",
        "timestamp": 1593656225
    },
    {
        "content": "<p>you were right!</p>",
        "id": 202644046,
        "sender_full_name": "André Arko",
        "timestamp": 1593656228
    },
    {
        "content": "<p>new error</p>",
        "id": 202644047,
        "sender_full_name": "André Arko",
        "timestamp": 1593656230
    },
    {
        "content": "<p><code>ld: warning: ignoring file /Users/andre/stage1/lib/rustlib/x86_64-apple-darwin/lib/libcore-196e45adfb362f8f.rlib, building for macOS-arm64 but attempting to link with file built for unknown-x86_64\nld: entry point (_main) undefined. for architecture arm64</code></p>",
        "id": 202644049,
        "sender_full_name": "André Arko",
        "timestamp": 1593656232
    },
    {
        "content": "<p>which honestly might just be cached artifacts</p>",
        "id": 202644070,
        "sender_full_name": "André Arko",
        "timestamp": 1593656279
    },
    {
        "content": "<p>Kinda what I was wondering</p>",
        "id": 202644110,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593656293
    },
    {
        "content": "<p>haha I guess not</p>",
        "id": 202644121,
        "sender_full_name": "André Arko",
        "timestamp": 1593656326
    },
    {
        "content": "<p>darn</p>",
        "id": 202644122,
        "sender_full_name": "André Arko",
        "timestamp": 1593656327
    },
    {
        "content": "<p>that does feel like progress though</p>",
        "id": 202644167,
        "sender_full_name": "André Arko",
        "timestamp": 1593656385
    },
    {
        "content": "<p>so I get that same error even if I <code>rm -rf build</code> and start again from scratch</p>",
        "id": 202644261,
        "sender_full_name": "André Arko",
        "timestamp": 1593656487
    },
    {
        "content": "<p>You rebuilt llvm that quick?</p>",
        "id": 202644275,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593656512
    },
    {
        "content": "<p>no, it fails during bootstrap</p>",
        "id": 202644350,
        "sender_full_name": "André Arko",
        "timestamp": 1593656589
    },
    {
        "content": "<p>(if using my cc_arm64 script)</p>",
        "id": 202644354,
        "sender_full_name": "André Arko",
        "timestamp": 1593656599
    },
    {
        "content": "<p>it does not fail during bootstrap if I leave it set to the default cc</p>",
        "id": 202644357,
        "sender_full_name": "André Arko",
        "timestamp": 1593656609
    },
    {
        "content": "<p>I have never gotten to the llvm building step on the DTK, that happens after the stage0 failure I'm seeing</p>",
        "id": 202644371,
        "sender_full_name": "André Arko",
        "timestamp": 1593656639
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/I2sNWR3pA4FTUOx-3ELFyrp1/CleanShot-2020-07-01-at-19.25.212x.jpg\">CleanShot-2020-07-01-at-19.25.212x.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/I2sNWR3pA4FTUOx-3ELFyrp1/CleanShot-2020-07-01-at-19.25.212x.jpg\" title=\"CleanShot-2020-07-01-at-19.25.212x.jpg\"><img src=\"/user_uploads/4715/I2sNWR3pA4FTUOx-3ELFyrp1/CleanShot-2020-07-01-at-19.25.212x.jpg\"></a></div>",
        "id": 202644518,
        "sender_full_name": "André Arko",
        "timestamp": 1593656795
    },
    {
        "content": "<p>my new idea is that maybe rosetta is messing us up</p>",
        "id": 202644937,
        "sender_full_name": "André Arko",
        "timestamp": 1593657384
    },
    {
        "content": "<p>and if we run the x86_64 rustc via rosetta, it can only ever produce x86_86 rustc</p>",
        "id": 202644945,
        "sender_full_name": "André Arko",
        "timestamp": 1593657407
    },
    {
        "content": "<p>It’s possible; but that would be highly unexpected.</p>",
        "id": 202645242,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593657889
    },
    {
        "content": "<p>I feel like the bootstrap shouldn’t be built for the target (arm)</p>",
        "id": 202675134,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593688728
    },
    {
        "content": "<p>I wonder if you should start by setting host to x86</p>",
        "id": 202675164,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593688762
    },
    {
        "content": "<p>And only make arm an additional target</p>",
        "id": 202675183,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593688786
    },
    {
        "content": "<p>Can you share the output of <code>rustc -Z unstable-options --print target-spec-json</code> ?</p>",
        "id": 202676994,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593690409
    },
    {
        "content": "<p>Curious what your fully-resolved options are</p>",
        "id": 202677010,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593690425
    },
    {
        "content": "<p>I think I found the source of that jemalloc warning <a href=\"/user_uploads/4715/yLgm66B2vl_jomsZRcabOULt/Screenshot-2020-07-02-at-15.52.53.png\">Screenshot-2020-07-02-at-15.52.53.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/yLgm66B2vl_jomsZRcabOULt/Screenshot-2020-07-02-at-15.52.53.png\" title=\"Screenshot-2020-07-02-at-15.52.53.png\"><img src=\"/user_uploads/4715/yLgm66B2vl_jomsZRcabOULt/Screenshot-2020-07-02-at-15.52.53.png\"></a></div>",
        "id": 202691726,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1593698354
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"317220\">@André Arko</span> If you haven't already watched it I would recommend watching Apple's video on porting your app to Apple Silicon. He mentions a couple of the errors you're saying you're getting. <a href=\"https://developer.apple.com/videos/play/wwdc2020/10214/\">https://developer.apple.com/videos/play/wwdc2020/10214/</a></p>",
        "id": 202691915,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1593698420
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> here's the target spec:</p>",
        "id": 202744629,
        "sender_full_name": "André Arko",
        "timestamp": 1593723991
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>❯ rustc -Z unstable-options --print target-spec-json\n&lt;jemalloc&gt;: Unsupported system page size\n{\n  &quot;abi-return-struct-as-int&quot;: true,\n  &quot;arch&quot;: &quot;x86_64&quot;,\n  &quot;archive-format&quot;: &quot;darwin&quot;,\n  &quot;cpu&quot;: &quot;core2&quot;,\n  &quot;data-layout&quot;: &quot;e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128&quot;,\n  &quot;dll-suffix&quot;: &quot;.dylib&quot;,\n  &quot;dynamic-linking&quot;: true,\n  &quot;eliminate-frame-pointer&quot;: false,\n  &quot;emit-debug-gdb-scripts&quot;: false,\n  &quot;env&quot;: &quot;&quot;,\n  &quot;executables&quot;: true,\n  &quot;function-sections&quot;: false,\n  &quot;has-elf-tls&quot;: true,\n  &quot;has-rpath&quot;: true,\n  &quot;is-builtin&quot;: true,\n  &quot;is-like-osx&quot;: true,\n  &quot;link-env&quot;: [\n    &quot;ZERO_AR_DATE=1&quot;\n  ],\n  &quot;link-env-remove&quot;: [\n    &quot;IPHONEOS_DEPLOYMENT_TARGET&quot;\n  ],\n  &quot;linker-flavor&quot;: &quot;gcc&quot;,\n  &quot;llvm-target&quot;: &quot;x86_64-apple-macosx10.7.0&quot;,\n  &quot;max-atomic-width&quot;: 128,\n  &quot;os&quot;: &quot;macos&quot;,\n  &quot;pre-link-args&quot;: {\n    &quot;gcc&quot;: [\n      &quot;-m64&quot;\n    ]\n  },\n  &quot;stack-probes&quot;: true,\n  &quot;target-c-int-width&quot;: &quot;32&quot;,\n  &quot;target-endian&quot;: &quot;little&quot;,\n  &quot;target-family&quot;: &quot;unix&quot;,\n  &quot;target-mcount&quot;: &quot;\\u0001mcount&quot;,\n  &quot;target-pointer-width&quot;: &quot;64&quot;,\n  &quot;vendor&quot;: &quot;apple&quot;\n}\n</code></pre></div>",
        "id": 202744630,
        "sender_full_name": "André Arko",
        "timestamp": 1593723994
    },
    {
        "content": "<p>wait... what</p>",
        "id": 202744677,
        "sender_full_name": "André Arko",
        "timestamp": 1593724038
    },
    {
        "content": "<p>heh</p>",
        "id": 202744686,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593724048
    },
    {
        "content": "<p>that is clearly wrong</p>",
        "id": 202744689,
        "sender_full_name": "André Arko",
        "timestamp": 1593724050
    },
    {
        "content": "<p>omg I just ran it on my laptop maybe <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span>🏻‍♂️</p>",
        "id": 202744697,
        "sender_full_name": "André Arko",
        "timestamp": 1593724061
    },
    {
        "content": "<p>okay! good/bad news</p>",
        "id": 202744827,
        "sender_full_name": "André Arko",
        "timestamp": 1593724137
    },
    {
        "content": "<p>this is the stage1 rustc I built on x86_64</p>",
        "id": 202744843,
        "sender_full_name": "André Arko",
        "timestamp": 1593724151
    },
    {
        "content": "<p>so when I run it, it thinks it's running on x86_64</p>",
        "id": 202744856,
        "sender_full_name": "André Arko",
        "timestamp": 1593724162
    },
    {
        "content": "<p>but it does know about the target I added:</p>",
        "id": 202744869,
        "sender_full_name": "André Arko",
        "timestamp": 1593724171
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>❯ ~/stage1/bin/rustc -Z unstable-options --print target-spec-json --target aarch64-apple-darwin\n{\n  &quot;abi-blacklist&quot;: [\n    &quot;stdcall&quot;,\n    &quot;fastcall&quot;,\n    &quot;vectorcall&quot;,\n    &quot;thiscall&quot;,\n    &quot;win64&quot;,\n    &quot;sysv64&quot;\n  ],\n  &quot;abi-return-struct-as-int&quot;: true,\n  &quot;arch&quot;: &quot;aarch64&quot;,\n  &quot;archive-format&quot;: &quot;darwin&quot;,\n  &quot;data-layout&quot;: &quot;e-m:o-i64:64-i128:128-n32:64-S128&quot;,\n  &quot;dll-suffix&quot;: &quot;.dylib&quot;,\n  &quot;dynamic-linking&quot;: true,\n  &quot;eliminate-frame-pointer&quot;: false,\n  &quot;emit-debug-gdb-scripts&quot;: false,\n  &quot;env&quot;: &quot;&quot;,\n  &quot;executables&quot;: true,\n  &quot;features&quot;: &quot;+neon,+fp-armv8,+apple-a7&quot;,\n  &quot;function-sections&quot;: false,\n  &quot;has-elf-tls&quot;: true,\n  &quot;has-rpath&quot;: true,\n  &quot;is-builtin&quot;: true,\n  &quot;is-like-osx&quot;: true,\n  &quot;link-env&quot;: [\n    &quot;ZERO_AR_DATE=1&quot;\n  ],\n  &quot;linker-flavor&quot;: &quot;gcc&quot;,\n  &quot;llvm-target&quot;: &quot;aarch64-apple-macosx10.7.0&quot;,\n  &quot;max-atomic-width&quot;: 128,\n  &quot;os&quot;: &quot;macos&quot;,\n  &quot;target-c-int-width&quot;: &quot;32&quot;,\n  &quot;target-endian&quot;: &quot;little&quot;,\n  &quot;target-family&quot;: &quot;unix&quot;,\n  &quot;target-pointer-width&quot;: &quot;64&quot;,\n  &quot;vendor&quot;: &quot;apple&quot;\n}\n</code></pre></div>",
        "id": 202744875,
        "sender_full_name": "André Arko",
        "timestamp": 1593724174
    },
    {
        "content": "<p>default target when running rustc via rosetta is definitely x86:</p>",
        "id": 202744948,
        "sender_full_name": "André Arko",
        "timestamp": 1593724218
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>❯ ~/stage1/bin/rustc -Z unstable-options --print target-spec-json\n{\n  &quot;abi-return-struct-as-int&quot;: true,\n  &quot;arch&quot;: &quot;x86_64&quot;,\n  &quot;archive-format&quot;: &quot;darwin&quot;,\n  &quot;cpu&quot;: &quot;core2&quot;,\n  &quot;data-layout&quot;: &quot;e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128&quot;,\n  &quot;dll-suffix&quot;: &quot;.dylib&quot;,\n  &quot;dynamic-linking&quot;: true,\n  &quot;eliminate-frame-pointer&quot;: false,\n  &quot;emit-debug-gdb-scripts&quot;: false,\n  &quot;env&quot;: &quot;&quot;,\n  &quot;executables&quot;: true,\n  &quot;function-sections&quot;: false,\n  &quot;has-elf-tls&quot;: true,\n  &quot;has-rpath&quot;: true,\n  &quot;is-builtin&quot;: true,\n  &quot;is-like-osx&quot;: true,\n  &quot;link-env&quot;: [\n    &quot;ZERO_AR_DATE=1&quot;\n  ],\n  &quot;link-env-remove&quot;: [\n    &quot;IPHONEOS_DEPLOYMENT_TARGET&quot;\n  ],\n  &quot;linker-flavor&quot;: &quot;gcc&quot;,\n  &quot;llvm-target&quot;: &quot;x86_64-apple-macosx10.7.0&quot;,\n  &quot;max-atomic-width&quot;: 128,\n  &quot;os&quot;: &quot;macos&quot;,\n  &quot;pre-link-args&quot;: {\n    &quot;gcc&quot;: [\n      &quot;-m64&quot;\n    ]\n  },\n  &quot;stack-probes&quot;: true,\n  &quot;target-c-int-width&quot;: &quot;32&quot;,\n  &quot;target-endian&quot;: &quot;little&quot;,\n  &quot;target-family&quot;: &quot;unix&quot;,\n  &quot;target-mcount&quot;: &quot;\\u0001mcount&quot;,\n  &quot;target-pointer-width&quot;: &quot;64&quot;,\n  &quot;vendor&quot;: &quot;apple&quot;\n}\n</code></pre></div>",
        "id": 202744955,
        "sender_full_name": "André Arko",
        "timestamp": 1593724222
    },
    {
        "content": "<p>so the default being wrong is probably some of the problem</p>",
        "id": 202745918,
        "sender_full_name": "André Arko",
        "timestamp": 1593724784
    },
    {
        "content": "<p>I guess I've been trying to build an x86 rust from an x86 rust, but on arm64 :P</p>",
        "id": 202745979,
        "sender_full_name": "André Arko",
        "timestamp": 1593724804
    },
    {
        "content": "<p>That makes sense. Much like code running in a VM doesn’t know it’s a VM (usually)</p>",
        "id": 202747021,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593725520
    }
]