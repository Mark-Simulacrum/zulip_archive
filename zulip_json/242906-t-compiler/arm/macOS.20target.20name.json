[
    {
        "content": "<p>One bikeshed that needs to be figured out is the name of the target. <code>aarch64-apple-darwin</code>/<code>aarch64-apple-macos</code>? I feel continuing using <code>darwin</code> would be incorrect since we have separate targets for iOS and tvOS which I believe both run darwin under the hood and their naming scheme is <code>apple-&lt;platform&gt;</code>.</p>",
        "id": 202540446,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1593590181
    },
    {
        "content": "<p>iOS and tvOS are both \"descendants\" of darwin already</p>",
        "id": 202540503,
        "sender_full_name": "André Arko",
        "timestamp": 1593590256
    },
    {
        "content": "<p>That's what I said is it not?</p>",
        "id": 202540565,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1593590286
    },
    {
        "content": "<p>well, it's a little more complicated than that, there's an iOS target for x86_64 macOS, I assume to run in the iOS simulator</p>",
        "id": 202540597,
        "sender_full_name": "André Arko",
        "timestamp": 1593590309
    },
    {
        "content": "<p>oh, sorry, I meant the _rust targets_ are descendants of the darwin target</p>",
        "id": 202540618,
        "sender_full_name": "André Arko",
        "timestamp": 1593590334
    },
    {
        "content": "<p>there's already a hierarchy, so it doesn't seem weird to call \"darwin\" the default/base, and require you to specify if you want a config that inherits from that but adds more specific bits</p>",
        "id": 202540664,
        "sender_full_name": "André Arko",
        "timestamp": 1593590387
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"317220\">André Arko</span> <a href=\"#narrow/stream/242906-t-compiler.2Farm/topic/macOS/near/202540597\">said</a>:</p>\n<blockquote>\n<p>well, it's a little more complicated than that, there's an iOS target for x86_64 macOS, I assume to run in the iOS simulator</p>\n</blockquote>\n<p>Do you mean <code>x86_64-apple-ios-macabi</code>? I believe that's for running catalyst apps.</p>",
        "id": 202540759,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1593590424
    },
    {
        "content": "<p>oh! that would make more sense than the simulator <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 202540782,
        "sender_full_name": "André Arko",
        "timestamp": 1593590438
    },
    {
        "content": "<p>but yes, \"iOS except on macOS\" makes the hierarchy weird for sure</p>",
        "id": 202540866,
        "sender_full_name": "André Arko",
        "timestamp": 1593590501
    },
    {
        "content": "<p>Added this discussion as an unresolved question.</p>",
        "id": 202555578,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593601291
    },
    {
        "content": "<p>Note that there's also discussion on <a href=\"https://github.com/rust-lang/rust/issues/73628#issuecomment-648499092\">what the  chip architecture should be called </a></p>",
        "id": 202557049,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593602606
    },
    {
        "content": "<p><code>file</code> evidently states \"Mach-O 64-bit object <strong>arm64</strong>\"</p>",
        "id": 202618583,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593634398
    },
    {
        "content": "<p>arm64 is definitely apple's name for it, and then arm64e is their name for their latest arm v8 extensions</p>",
        "id": 202618745,
        "sender_full_name": "André Arko",
        "timestamp": 1593634479
    },
    {
        "content": "<p>where aarch64 is \"everyone but apple\"'s name for it, and they don't have a name for Apple's latest extensions ¯\\_(ツ)_/¯</p>",
        "id": 202618799,
        "sender_full_name": "André Arko",
        "timestamp": 1593634509
    },
    {
        "content": "<p>And then we have</p>\n<div class=\"codehilite\"><pre><span></span><code>% cc -arch arm64 hello.c --verbose\nApple clang version 12.0.0 (clang-1200.0.22.19)\nTarget: aarch64-apple-darwin19.5.0\n</code></pre></div>",
        "id": 202643426,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593655407
    },
    {
        "content": "<p>And <code>-triple arm64-apple-macosx10.15.0</code></p>",
        "id": 202643505,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593655535
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> on the DTK, that comes out as:</p>\n<div class=\"codehilite\"><pre><span></span><code>❯ cc -arch arm64 hello.c --verbose\nApple clang version 12.0.0 (clang-1200.0.22.19)\nTarget: aarch64-apple-darwin20.0.0\n</code></pre></div>",
        "id": 202643627,
        "sender_full_name": "André Arko",
        "timestamp": 1593655684
    },
    {
        "content": "<p>(for whatever that's worth)</p>",
        "id": 202643639,
        "sender_full_name": "André Arko",
        "timestamp": 1593655725
    },
    {
        "content": "<p>Pointer authentication isn't an Apple-specific extension.</p>",
        "id": 202765630,
        "sender_full_name": "comex",
        "timestamp": 1593747021
    },
    {
        "content": "<p>I believe Pointer Authentication is also not available as an extension to users yet</p>",
        "id": 202773404,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1593759176
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>/usr/bin/git (for architecture arm64e): Mach-O 64-bit executable arm64e\n</code></pre></div>",
        "id": 202898038,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593909874
    },
    {
        "content": "<p><a href=\"https://tenfourfox.blogspot.com/2020/06/the-super-duper-universal-binary.html\">This points out</a> that there are quite a lot of architecture-specific targets that macOS could target (not as many as AVR!). Even just restricted to new ARM Macs,  I don't think it makes sense to try and have a target for each possible thing. I wonder if target features would be appropriate to use.</p>\n<p>E.g., <code>aarch64-apple-darwin</code> creates <code>arm64</code>. In the future,  <code>aarch64-apple-darwin</code> + <code>target_features=something</code> creates <code>arm64e</code>.</p>",
        "id": 203091041,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594121488
    },
    {
        "content": "<p>I think an x86_64h slice could be produced today via <code>-Ctarget-cpu=haswell</code></p>",
        "id": 203092137,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594122388
    },
    {
        "content": "<p>Which kind of \"could\"?</p>\n<div class=\"codehilite\"><pre><span></span><code>% cargo rustc -- -Ctarget-cpu=haswell\n   Compiling hh v0.1.0 (/private/tmp/hh)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.26s\n\n% file target/debug/hh\ntarget/debug/hh: Mach-O 64-bit executable x86_64\n</code></pre></div>",
        "id": 203097825,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594126469
    },
    {
        "content": "<p>That should work, no? If you tell lipo that it's <code>x86_64h</code>?</p>",
        "id": 203098043,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594126604
    },
    {
        "content": "<p>but if it's <code>x86_64h</code>, it should say so, yeah?</p>\n<div class=\"codehilite\"><pre><span></span><code>% echo &#39;int main() { return 0; }&#39; &gt; main.c\n% cc -arch x86_64h main.c -o main\n% file main\nmain: Mach-O 64-bit executable x86_64h\n</code></pre></div>",
        "id": 203101431,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594128422
    },
    {
        "content": "<p>Are there any differences beyond the Mach-O arch, and using instructions available on Haswell? I know the former isn't done by the rustc flag above, but does it do anything beyond allowing lipo to autodetect the target?</p>",
        "id": 203102075,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594128713
    },
    {
        "content": "<p>I do not have that level of knowledge. I can say that <em>some</em> binaries shipped by Apple on the DTK are both:</p>\n<div class=\"codehilite\"><pre><span></span><code> % file /Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/12.0.0/lib/darwin/libclang_rt.ubsan_osx_dynamic.dylib\n/Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/12.0.0/lib/darwin/libclang_rt.ubsan_osx_dynamic.dylib: Mach-O universal binary with 4 architectures: [x86_64:Mach-O 64-bit dynamically linked shared library x86_64] [x86_64h:Mach-O 64-bit dynamically linked shared library x86_64h] [arm64:Mach-O 64-bit dynamically linked shared library arm64] [arm64e:Mach-O 64-bit dynamically linked shared library arm64e]\n/Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/12.0.0/lib/darwin/libclang_rt.ubsan_osx_dynamic.dylib (for architecture x86_64):  Mach-O 64-bit dynamically linked shared library x86_64\n/Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/12.0.0/lib/darwin/libclang_rt.ubsan_osx_dynamic.dylib (for architecture x86_64h): Mach-O 64-bit dynamically linked shared library x86_64h\n/Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/12.0.0/lib/darwin/libclang_rt.ubsan_osx_dynamic.dylib (for architecture arm64):   Mach-O 64-bit dynamically linked shared library arm64\n/Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/12.0.0/lib/darwin/libclang_rt.ubsan_osx_dynamic.dylib (for architecture arm64e):  Mach-O 64-bit dynamically linked shared library arm64e\n</code></pre></div>",
        "id": 203106734,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594130777
    },
    {
        "content": "<p>not that rust needs to support every single one of these, but there at at least 17 (!) architectures available if we are including subtypes like x86_64h: <a href=\"https://tenfourfox.blogspot.com/2020/06/the-super-duper-universal-binary.html\">https://tenfourfox.blogspot.com/2020/06/the-super-duper-universal-binary.html</a></p>",
        "id": 203663784,
        "sender_full_name": "André Arko",
        "timestamp": 1594592271
    },
    {
        "content": "<p>and in fact llvm canonically supports triples for at least 9 of the arm subtypes on apple-darwin: <a href=\"https://github.com/llvm/llvm-project/blob/master/llvm/test/CodeGen/ARM/MachO-subtypes.ll\">https://github.com/llvm/llvm-project/blob/master/llvm/test/CodeGen/ARM/MachO-subtypes.ll</a></p>",
        "id": 203663858,
        "sender_full_name": "André Arko",
        "timestamp": 1594592381
    },
    {
        "content": "<p>does rust intend for its triples to correspond to llvm triples, or are they unrelated/mapped in some way?</p>",
        "id": 203663929,
        "sender_full_name": "André Arko",
        "timestamp": 1594592504
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"317220\">@André Arko</span> has that article been updated since I posted it earlier?</p>",
        "id": 203664048,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594592693
    },
    {
        "content": "<p>it has not, I posted it again in response to the statement \"has not been updated on intel yet\", which seems completely different than the article's \"is deliberately different for programs that have not been rebuilt against the Xcode 12 SDK\"</p>",
        "id": 203664060,
        "sender_full_name": "André Arko",
        "timestamp": 1594592747
    },
    {
        "content": "<p>wait, oh no, I read \"that article\" to mean the one about macOS 10.16 vs 11.0</p>",
        "id": 203664105,
        "sender_full_name": "André Arko",
        "timestamp": 1594592798
    },
    {
        "content": "<p>this is the thread about targets <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 203664109,
        "sender_full_name": "André Arko",
        "timestamp": 1594592804
    },
    {
        "content": "<p>sorry!</p>",
        "id": 203664111,
        "sender_full_name": "André Arko",
        "timestamp": 1594592820
    },
    {
        "content": "<p>I 100% missed that you posted that link :O</p>",
        "id": 203664116,
        "sender_full_name": "André Arko",
        "timestamp": 1594592826
    },
    {
        "content": "<p>based on the clang docs, it seems like they have adopted a specific \"triple\" convention to resolve the issue: <a href=\"https://clang.llvm.org/docs/CrossCompilation.html\">https://clang.llvm.org/docs/CrossCompilation.html</a></p>",
        "id": 203664126,
        "sender_full_name": "André Arko",
        "timestamp": 1594592869
    },
    {
        "content": "<p>&lt;arch&gt;&lt;sub&gt;-&lt;vendor&gt;-&lt;sys&gt;-&lt;abi&gt;</p>",
        "id": 203664129,
        "sender_full_name": "André Arko",
        "timestamp": 1594592875
    },
    {
        "content": "<p>I have no idea whether rustc is aiming for clang-like triple support, llvm-like-arch-support, or some third thing, though :)</p>",
        "id": 203664237,
        "sender_full_name": "André Arko",
        "timestamp": 1594593036
    },
    {
        "content": "<p>Stating the obvious, I love how “triple” isn’t.</p>",
        "id": 203665391,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594595078
    },
    {
        "content": "<p>yep, that's why I had to put \"triple\" in double quotes <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 203666123,
        "sender_full_name": "André Arko",
        "timestamp": 1594596328
    },
    {
        "content": "<p>I wonder what the &lt;sub&gt; vs &lt;abi&gt; fight looks like</p>",
        "id": 203667476,
        "sender_full_name": "eddyb",
        "timestamp": 1594598705
    },
    {
        "content": "<p>like what counts as which? a lot of old 32-bit ARM stuff used &lt;abi&gt; didn't it</p>",
        "id": 203667480,
        "sender_full_name": "eddyb",
        "timestamp": 1594598719
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> according to the page, sub is strictly for things like \"v7\" as in in \"armv7\", and ABI is strictly for things like \"android\" or \"macho\" or \"elf\" as in \"linux-android\"</p>",
        "id": 203667830,
        "sender_full_name": "André Arko",
        "timestamp": 1594599350
    },
    {
        "content": "<p>(clang also apparently tracks OS types \"darwin\", \"macosx\", and \"ios\" separately, although I'm assuming that the latter 2 inherit from the former)</p>",
        "id": 203668027,
        "sender_full_name": "André Arko",
        "timestamp": 1594599633
    },
    {
        "content": "<p>oh christ, also tvOS and watchOS</p>",
        "id": 203668051,
        "sender_full_name": "André Arko",
        "timestamp": 1594599694
    },
    {
        "content": "<p>okay I was misremembering what old ARM stuff did</p>",
        "id": 203668144,
        "sender_full_name": "eddyb",
        "timestamp": 1594599842
    },
    {
        "content": "<p>RISC-V also uses &lt;sub&gt;, for extensions, right?</p>",
        "id": 203668168,
        "sender_full_name": "eddyb",
        "timestamp": 1594599857
    },
    {
        "content": "<p>/me weeps about Apple not moving to RV64 instead, but that's probably a few years out at best</p>",
        "id": 203668174,
        "sender_full_name": "eddyb",
        "timestamp": 1594599890
    },
    {
        "content": "<p>so reading about arm64e, it's actually a combination of armv8.3 (the aarch64 subtype) and arm64e (the ABI)</p>",
        "id": 203668190,
        "sender_full_name": "André Arko",
        "timestamp": 1594599943
    },
    {
        "content": "<p>yeah that part had me suspicious when I heard it changes ABI</p>",
        "id": 203668239,
        "sender_full_name": "eddyb",
        "timestamp": 1594599986
    },
    {
        "content": "<p>at the moment it seems like llvm has intrinsic support for neither the arch subtype or the ABI</p>",
        "id": 203668240,
        "sender_full_name": "André Arko",
        "timestamp": 1594599990
    },
    {
        "content": "<p>See lots of discussion in <a class=\"stream-topic\" data-stream-id=\"242906\" href=\"/#narrow/stream/242906-t-compiler.2Farm/topic/aarch64-apple-darwin.20isn.27t.20true.20support\">#t-compiler/arm &gt; aarch64-apple-darwin isn't true support</a> about <code>arm64e</code></p>",
        "id": 203668241,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594600000
    },
    {
        "content": "<p>yes</p>",
        "id": 203668244,
        "sender_full_name": "André Arko",
        "timestamp": 1594600017
    },
    {
        "content": "<p>I read it</p>",
        "id": 203668245,
        "sender_full_name": "André Arko",
        "timestamp": 1594600019
    },
    {
        "content": "<p><code>aarch64-apple-macos-ptrauth</code></p>",
        "id": 203668251,
        "sender_full_name": "eddyb",
        "timestamp": 1594600039
    },
    {
        "content": "<p>was mostly just thinking aloud about how aarch64 is supposed to handle the ongoing ARMvX.Y subtypes</p>",
        "id": 203668255,
        "sender_full_name": "André Arko",
        "timestamp": 1594600061
    },
    {
        "content": "<p>hackily, I'm guessing</p>",
        "id": 203668257,
        "sender_full_name": "eddyb",
        "timestamp": 1594600071
    },
    {
        "content": "<p>I tried looking at the LLVM code for parsing that stuff and got so turned around and confused I gave up</p>",
        "id": 203668297,
        "sender_full_name": "eddyb",
        "timestamp": 1594600088
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> (don't forget, macos is too specific, and ptrauth is present in ios/ipados/tvos/watchos too)</p>",
        "id": 203668298,
        "sender_full_name": "André Arko",
        "timestamp": 1594600089
    },
    {
        "content": "<p>sure, each has its own triple with a different OS :P</p>",
        "id": 203668301,
        "sender_full_name": "eddyb",
        "timestamp": 1594600098
    },
    {
        "content": "<p>sort of</p>",
        "id": 203668307,
        "sender_full_name": "André Arko",
        "timestamp": 1594600106
    },
    {
        "content": "<p>ipados is still entirely part of ios and doesn't have an os string llvm recognizes, tvos is a separate string but returns true for llvm's \"is_ios\" check, watchos is a separate string and not is_ios</p>",
        "id": 203668316,
        "sender_full_name": "André Arko",
        "timestamp": 1594600144
    },
    {
        "content": "<p>(can you tell I've been reading a bunch of llvm guts today)</p>",
        "id": 203668326,
        "sender_full_name": "André Arko",
        "timestamp": 1594600173
    },
    {
        "content": "<p>We could call our target <code>aarch64-apple-darwin-arm64</code> and then have <code>-arm64e</code> later</p>",
        "id": 203668461,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594600373
    },
    {
        "content": "<p>I can't stop reading ipados as \"IPA DOS\"</p>",
        "id": 203668467,
        "sender_full_name": "eddyb",
        "timestamp": 1594600400
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> honestly at this moment it seems fine to have <code>aarch64-apple-darwin</code>, and if we need to overload specific behaviors onto macos, or ios, or tvos, or watchos, we can do that. and leaving the aarch64 ABI to imply arm64 also seems correct to me. I dunno how LLVM handles aarch64 subtypes. It doesn't seem to have any version subtypes despite messages that say LLVM already supports ARMv8.3. ¯\\_(ツ)_/¯</p>",
        "id": 203668826,
        "sender_full_name": "André Arko",
        "timestamp": 1594600963
    },
    {
        "content": "<p>I think there's a few pieces.</p>\n<p>AIUI, upstream LLVM doesn't support arm64e yet; that's still in Apple's fork.</p>\n<p>I also expect some parts of this to be covered by features instead of a separate cpu / arch.</p>",
        "id": 203668978,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594601262
    },
    {
        "content": "<p>(<a href=\"https://stackoverflow.com/a/35061913/155423\">useful for exploring those</a>)</p>",
        "id": 203669024,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594601301
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"317220\">@André Arko</span> oh I forgot to bring up how <code>i686</code> should be <code>x86_32.6</code> or something :P</p>",
        "id": 203673416,
        "sender_full_name": "eddyb",
        "timestamp": 1594608641
    },
    {
        "content": "<p>I actually don't have a good suggestion</p>",
        "id": 203673418,
        "sender_full_name": "eddyb",
        "timestamp": 1594608646
    },
    {
        "content": "<p>lol amazing</p>",
        "id": 203673788,
        "sender_full_name": "André Arko",
        "timestamp": 1594609244
    },
    {
        "content": "<p>I mean there actually is a target <code>aarch64_32</code> for little-endian ARM chips</p>",
        "id": 203673790,
        "sender_full_name": "André Arko",
        "timestamp": 1594609259
    },
    {
        "content": "<p>(big endian? whatever the non-default is)</p>",
        "id": 203673797,
        "sender_full_name": "André Arko",
        "timestamp": 1594609278
    },
    {
        "content": "<p>That target is 64bit with 32 bit pointers, I believe. Much like the same for x86_64</p>\n<p>The big endian versions use “be”</p>",
        "id": 203703274,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594639529
    },
    {
        "content": "<p>e.g.</p>\n<div class=\"codehilite\"><pre><span></span><code>  Registered Targets:\n    aarch64    - AArch64 (little endian)\n    aarch64_32 - AArch64 (little endian ILP32)\n    aarch64_be - AArch64 (big endian)\n    arm        - ARM\n    arm64      - ARM64 (little endian)\n    arm64_32   - ARM64 (little endian ILP32)\n    armeb      - ARM (big endian)\n</code></pre></div>",
        "id": 203707283,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594642623
    },
    {
        "content": "<p>you mean x32? (for x64 + 32-bit pointers)</p>",
        "id": 203708139,
        "sender_full_name": "eddyb",
        "timestamp": 1594643159
    },
    {
        "content": "<blockquote>\n<p><code>armeb</code></p>\n</blockquote>\n<p>this must be a cruel joke <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 203708220,
        "sender_full_name": "eddyb",
        "timestamp": 1594643194
    },
    {
        "content": "<p>Yes, I was not attempting to name what the actual thing was, just drawing the analogy .</p>",
        "id": 203708295,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594643272
    },
    {
        "content": "<p>(just wanted to confirm it's that :P)</p>",
        "id": 203708391,
        "sender_full_name": "eddyb",
        "timestamp": 1594643308
    },
    {
        "content": "<p>I guess a name with \"64_32\" in it is more useful than x32</p>",
        "id": 203708403,
        "sender_full_name": "eddyb",
        "timestamp": 1594643316
    },
    {
        "content": "<p>like this is just weird:</p>\n<ul>\n<li>x64 == x86_64</li>\n<li>x32 != x86_64 (more like x86_64_32 or x64_32)</li>\n</ul>",
        "id": 203708471,
        "sender_full_name": "eddyb",
        "timestamp": 1594643375
    }
]