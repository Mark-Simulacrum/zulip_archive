[
    {
        "content": "<p>Bitfields compatible with C have been under discussion in <a href=\"https://github.com/rust-lang/rfcs/issues/3113\">rfcs#3113</a>.<br>\nIn <a href=\"https://github.com/rust-lang/rfcs/pull/3113#discussion_r663330513\">this comment</a> I outline some of the requirements for  Rust imposed by both C and specific processor architectures and quote a few lines of the AAPCS. The last line I quote mystifies me, though, because the context of wanting cross-lang compatibility suggests exporting, but this... kinda says \"don't\"? So I have concluded I don't know what \"export\" means in this context and how we should translate that to Rust. The full paragraph is</p>\n<blockquote>\n<p>The AAPCS does not allow exported interfaces to contain packed structures or bit-fields. However a scheme for laying out packed bit-fields can be achieved by reducing the alignment, A, in the above rules to below that of the natural container type. ARMCC uses an alignment of A=8 in these cases, but GCC uses an alignment of A=1.</p>\n</blockquote>\n<p>And it is found in <a href=\"https://developer.arm.com/documentation/ihi0042/j/?lang=en#aapcs32-section7-1-7\">Procedure Call Standard for the ArmÂ® Architecture - Arm C and C++ Language Mappings - Data Types - Bitfields</a>, which apparently on the GH rst version is <a href=\"https://github.com/ARM-software/abi-aa/blob/main/aapcs32/aapcs32.rst#id8\">Section 8.1.7</a></p>\n<p>Apparently similar verbiage is present here in <a href=\"https://github.com/ARM-software/abi-aa/blob/main/aapcs64/aapcs64.rst#bit-fields\">aapcs64.rst Section 8.1.8</a>.</p>",
        "id": 247047059,
        "sender_full_name": "Jubilee",
        "timestamp": 1627086743
    },
    {
        "content": "<p>This confused me too, so I asked around, and it seems that we both missed the intention here: exported interfaces cannot contain \"packed {structures or bit-fields}\" (my brackets).</p>\n<p>Normal C bitfields <em>are allowed</em> in exported interfaces. That surprised me because I'm used to applying extreme caution around any code that cares about C bitfield layout, but AAPCS(64) does indeed specify the algorithm. I don't know if this will be true for all ABIs Rust works with, though.</p>\n<p>Informally, an \"exported interface\" is one that obeys the argument passing rules from AAPCS(64). A compiler is allowed to deviate from those rules, for example, for each function for which the compiler has control over all the call sites. In C, that loosely means <code>static</code> functions whose addresses cannot leak outside the module, though I've never noticed a C compiler making use of that. JIT compilers do it routinely.</p>\n<p>For our purposes, I think any Rust-C communication has to go through an \"exported interface\", so no \"packed bit-fields\" in <code>repr(C)</code>, but normal bitfields are fine.</p>",
        "id": 252185971,
        "sender_full_name": "Jacob Bramley",
        "timestamp": 1630939701
    },
    {
        "content": "<p>...hm, so <code>#[repr(packed)]</code> is incompatible with <code>#[repr(C)]</code>? That seems like something we already knew, but it's good to formally know.</p>",
        "id": 252554474,
        "sender_full_name": "Jubilee",
        "timestamp": 1631147852
    },
    {
        "content": "<p>Thank you very much!</p>",
        "id": 252556321,
        "sender_full_name": "Jubilee",
        "timestamp": 1631149448
    },
    {
        "content": "<p>I would come to that conclusion, yes. In particular, <code>__attribute((packed))__</code> seems to mean different things to different C compilers (with a concrete example in AAPCS(64) for packed bitfields), so it's impossible for Rust to be consistent with all of them.</p>",
        "id": 252591339,
        "sender_full_name": "Jacob Bramley",
        "timestamp": 1631177145
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Rust</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a</span>: <span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">b</span>: <span class=\"kt\">u16</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[repr(C)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">C</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a</span>: <span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">b</span>: <span class=\"kt\">u16</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[repr(packed)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Packed</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a</span>: <span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">b</span>: <span class=\"kt\">u16</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[repr(C, packed)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">PackedC</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a</span>: <span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">b</span>: <span class=\"kt\">u16</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">Rust</span><span class=\"o\">&gt;</span><span class=\"p\">());</span><span class=\"w\"> </span><span class=\"c1\">// 4</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">C</span><span class=\"o\">&gt;</span><span class=\"p\">());</span><span class=\"w\"> </span><span class=\"c1\">// 4</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">Packed</span><span class=\"o\">&gt;</span><span class=\"p\">());</span><span class=\"w\"> </span><span class=\"c1\">// 3</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">PackedC</span><span class=\"o\">&gt;</span><span class=\"p\">());</span><span class=\"w\"> </span><span class=\"c1\">// 3</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It appears we have an attribute combo to ban, then.</p>",
        "id": 253528106,
        "sender_full_name": "Jubilee",
        "timestamp": 1631767248
    },
    {
        "content": "<p>We probably would be okay with making sure it can't leak, but currently...</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[repr(C, packed)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">PackedC</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a</span>: <span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">b</span>: <span class=\"kt\">u16</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[no_mangle]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">exposed_illegal_struct</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">PackedC</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">PackedC</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">a</span>: <span class=\"kt\">u8</span>::<span class=\"n\">MAX</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kt\">u16</span>::<span class=\"n\">MAX</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 253528669,
        "sender_full_name": "Jubilee",
        "timestamp": 1631767808
    },
    {
        "content": "<p>Filed <a href=\"https://github.com/rust-lang/rust/issues/89003\">#89003</a>.</p>",
        "id": 253548093,
        "sender_full_name": "Jubilee",
        "timestamp": 1631781965
    }
]