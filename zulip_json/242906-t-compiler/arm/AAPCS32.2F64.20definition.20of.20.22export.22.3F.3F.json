[
    {
        "content": "<p>Bitfields compatible with C have been under discussion in <a href=\"https://github.com/rust-lang/rfcs/issues/3113\">rfcs#3113</a>.<br>\nIn <a href=\"https://github.com/rust-lang/rfcs/pull/3113#discussion_r663330513\">this comment</a> I outline some of the requirements for  Rust imposed by both C and specific processor architectures and quote a few lines of the AAPCS. The last line I quote mystifies me, though, because the context of wanting cross-lang compatibility suggests exporting, but this... kinda says \"don't\"? So I have concluded I don't know what \"export\" means in this context and how we should translate that to Rust. The full paragraph is</p>\n<blockquote>\n<p>The AAPCS does not allow exported interfaces to contain packed structures or bit-fields. However a scheme for laying out packed bit-fields can be achieved by reducing the alignment, A, in the above rules to below that of the natural container type. ARMCC uses an alignment of A=8 in these cases, but GCC uses an alignment of A=1.</p>\n</blockquote>\n<p>And it is found in <a href=\"https://developer.arm.com/documentation/ihi0042/j/?lang=en#aapcs32-section7-1-7\">Procedure Call Standard for the ArmÂ® Architecture - Arm C and C++ Language Mappings - Data Types - Bitfields</a>, which apparently on the GH rst version is <a href=\"https://github.com/ARM-software/abi-aa/blob/main/aapcs32/aapcs32.rst#id8\">Section 8.1.7</a></p>\n<p>Apparently similar verbiage is present here in <a href=\"https://github.com/ARM-software/abi-aa/blob/main/aapcs64/aapcs64.rst#bit-fields\">aapcs64.rst Section 8.1.8</a>.</p>",
        "id": 247047059,
        "sender_full_name": "Jubilee",
        "timestamp": 1627086743
    }
]