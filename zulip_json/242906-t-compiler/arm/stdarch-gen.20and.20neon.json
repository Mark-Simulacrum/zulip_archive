[
    {
        "content": "<p>I have recently been looking at alternatives to stdarch-gen for generating the neon intrinsics (and potentially other future intrinsics) with less manual work (i.e. the writing of neon.spec). This has included looking at changing llvm tablegen to emit rust and using clang and extracting llvm functions from the ir.<br>\nGiven the recent pull requests by <span class=\"user-mention\" data-user-id=\"353056\">@Sparrow Li</span>  and <span class=\"user-mention\" data-user-id=\"353941\">@surechen</span>  it's looking like it could be less work to finish the neon intrinsics with the existing stdarch-gen.<br>\nI'm reaching out to see if there is a desire to continue on with something that's a little more automated for neon, when we come to look at SVE it might be worth looking at something with a little less manual work, or to offer time to work on the remaining ones with the existing generator.</p>",
        "id": 232263786,
        "sender_full_name": "Jamie Cunliffe",
        "timestamp": 1617022960
    },
    {
        "content": "<p>I think moving towards more automation is a good thing.</p>\n<ul>\n<li>I also looked at using TableGen in the past but found it impractical since a lot of the generated intrinsics simply call a <code>__builtin_</code> which is then lowered to LLVM IR using custom code in Clang.</li>\n<li>Something easier to do is to automatically generate tests with random inputs and then compare the results to that of the equivalent C code.</li>\n</ul>",
        "id": 232338758,
        "sender_full_name": "Amanieu",
        "timestamp": 1617053099
    },
    {
        "content": "<p>SVE intrinsics are complicated to support because the  SVE types don't behave like normal types: they have an unknown size at compile time but can still be passed around by value unlike Rust DSTs. This also applies to the RISC-V vector extension.</p>",
        "id": 232339153,
        "sender_full_name": "Amanieu",
        "timestamp": 1617053273
    },
    {
        "content": "<p>We've been talking about SVE types a little, and what we might need to do to support them. My instinct is some <code>CpuSized</code> trait alongside <code>Sized</code>, but it needs more thought that I've given it. We're far from producing an RFC or anything like that, but have you already done some work in this area?</p>",
        "id": 232403626,
        "sender_full_name": "Jacob Bramley",
        "timestamp": 1617100028
    },
    {
        "content": "<p>My thoughts on SVE intrinsics are somewhere along the lines of: \"I really hope LLVM auto-vectorization is good enough so that I don't have to deal with trying to implement this.\"</p>",
        "id": 232412669,
        "sender_full_name": "Amanieu",
        "timestamp": 1617105460
    },
    {
        "content": "<p>SVE types lie somewhere between <code>Sized</code> types and DSTs. I think they should be mostly treated as DSTs by the type system, just with some additional capabilities such as being passed around by value. This would most likely be implemented using special compiler support rather than with a trait.</p>",
        "id": 232412896,
        "sender_full_name": "Amanieu",
        "timestamp": 1617105605
    },
    {
        "content": "<p>The calls to the builtins could be problematic, I remember seeing a header in LLVM that had an enum with a arm_neon_builtin name with a comment with a llvm.arm.neon.* function so my first thought was to use that to generate a bunch of links for the builtins, however, it looks like that header is built from llvm/include/llvm/IR/IntrinsicsAArch64.td (there is also an arm version of that). But I haven't actually tried any of that yet, it was the next thing I was going to investigate in a little more detail.</p>",
        "id": 232577210,
        "sender_full_name": "Jamie Cunliffe",
        "timestamp": 1617191837
    },
    {
        "content": "<p>That is incomplete, a lot of builtin lowering happens in C++ code in <code>clang/lib/CodeGen/CGBuiltin.cpp</code>.</p>",
        "id": 232595298,
        "sender_full_name": "Amanieu",
        "timestamp": 1617198960
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"399135\">Jacob Bramley</span> <a href=\"#narrow/stream/242906-t-compiler.2Farm/topic/stdarch-gen.20and.20neon/near/232403626\">said</a>:</p>\n<blockquote>\n<p>We've been talking about SVE types a little, and what we might need to do to support them. My instinct is some <code>CpuSized</code> trait alongside <code>Sized</code>, but it needs more thought that I've given it. We're far from producing an RFC or anything like that, but have you already done some work in this area?</p>\n</blockquote>\n<p>For the <code>std::simd</code> prototype, we've had a lot of success implementing a const generic interface. By the time it becomes practical to push forward with SVE in Rust, it might be simpler to take a more direct tack and use such instead, and it would reduce the amount of (additional) compiler magic that would be required.</p>",
        "id": 235024725,
        "sender_full_name": "Jubilee",
        "timestamp": 1618699670
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/242906-t-compiler.2Farm/topic/stdarch-gen.20and.20neon/near/235024725\">said</a>:</p>\n<blockquote>\n<p>For the <code>std::simd</code> prototype, we've had a lot of success implementing a const generic interface. By the time it becomes practical to push forward with SVE in Rust, it might be simpler to take a more direct tack and use such instead, and it would reduce the amount of (additional) compiler magic that would be required.</p>\n</blockquote>\n<p>Hmmm, I'm unsure how this would work, since the size isn't a const.</p>",
        "id": 235042191,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618719770
    },
    {
        "content": "<p>depends on what is expected~<br>\nif it's the exact same binary being moved from machine to machine and running fine, that's one thing, but that might be hard to square with Rust's existing problems w/r/t ABI.<br>\nif it's the same source working between machines, that's much easier.</p>",
        "id": 235042561,
        "sender_full_name": "Jubilee",
        "timestamp": 1618720263
    },
    {
        "content": "<p>alternately, and only half a joke: higher ranked trait bounds on integers, clearly.</p>",
        "id": 235042582,
        "sender_full_name": "Jubilee",
        "timestamp": 1618720310
    },
    {
        "content": "<p>I think it has to be the former, unfortunately. distributing $N versions of $application just to account for different SVE widths is pretty much a nightmare. also, a big part of \"the point\" of SVE is that the size is not known at compile time</p>",
        "id": 235043207,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618721104
    },
    {
        "content": "<p>unfortunately this just... doesn't really work well with rust.</p>",
        "id": 235043226,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618721127
    },
    {
        "content": "<p>Also note that even on the same machine, the vector length might vary from one run to the next. It's possible for the OS to artificially limit it (<a href=\"https://www.kernel.org/doc/Documentation/arm64/sve.txt\">like this on Linux</a>). I think it's best to treat the size as constrained-unknown by default.</p>",
        "id": 236475718,
        "sender_full_name": "Jacob Bramley",
        "timestamp": 1619601826
    },
    {
        "content": "<p>oh _wild_</p>",
        "id": 236553774,
        "sender_full_name": "Jubilee",
        "timestamp": 1619633665
    }
]