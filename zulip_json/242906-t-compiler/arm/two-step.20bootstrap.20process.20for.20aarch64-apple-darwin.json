[
    {
        "content": "<p>also that's an interesting problem, I didn't notice the two-step process before. I guess there's not much to do there until the changes are upstreamed, presumably there's no way to get the new target to be accepted if using a single build dir (and a stage2 build)? but also the split build dir approach allows rebuilding only <code>silicon/cross</code>, kind of like <code>--keep-stage</code> (but not unsound/broken)</p>",
        "id": 204296906,
        "sender_full_name": "eddyb",
        "timestamp": 1595071706
    },
    {
        "content": "<p>I landed <a href=\"https://github.com/rust-lang/rust/pull/74251\">Teach bootstrap about target files vs target triples</a>, which did allow for me to cross-compile rustc in a single step, but then the created rustc failed when it tried to generate code as it couldn't find the host information.</p>",
        "id": 204297317,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595072452
    },
    {
        "content": "<p>uh oh</p>",
        "id": 204297435,
        "sender_full_name": "eddyb",
        "timestamp": 1595072650
    },
    {
        "content": "<p><a href=\"#narrow/stream/242906-t-compiler.2Farm/topic/macOS.20cross-compile.20from.20x86_64/near/202831455\">This is the error we got</a></p>\n<div class=\"codehilite\"><pre><span></span><code>‚ùØ ./stage1/bin/rustc hello.rs\nerror: Error loading target specification: Could not find specification for target &quot;/Users/shep/Projects/rust/silicon/aarch64-apple-darwin.json&quot;. Use `--print target-list` for a list of built-in targets\n</code></pre></div>",
        "id": 204297438,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595072656
    },
    {
        "content": "<p>is that with a JSON target spec file? or by changing <code>rustc_target::spec</code>?</p>",
        "id": 204297440,
        "sender_full_name": "eddyb",
        "timestamp": 1595072671
    },
    {
        "content": "<p>I don't think we support anything other than the latter for the host, but it might be possible to make it work (I just haven't heard of this being attempted before)</p>",
        "id": 204297449,
        "sender_full_name": "eddyb",
        "timestamp": 1595072726
    },
    {
        "content": "<p>I was attempting to use the JSON spec to avoid requiring the double-compiler-cross-compile-bootstrap.</p>",
        "id": 204297510,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595072806
    },
    {
        "content": "<p>I expect that the next change would be to modify <a href=\"https://github.com/rust-lang/rust/blob/f844ea1e561475e6023282ef167e76bc973773ef/src/librustc_session/session.rs#L1123\">code around here</a> to support some new <code>-Z --host-target-override myfile.json</code></p>",
        "id": 204297573,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595072958
    },
    {
        "content": "<p>hmm. if we had landed it as a built-in target, it would be in beta by now (but I don't know what the requirements and stability implications are around that)</p>",
        "id": 204297574,
        "sender_full_name": "eddyb",
        "timestamp": 1595072959
    },
    {
        "content": "<p>we could still backport a new target to the beta, to make this easier (assuming that's all that's needed)</p>",
        "id": 204297578,
        "sender_full_name": "eddyb",
        "timestamp": 1595073000
    },
    {
        "content": "<p>I haven't wanted to submit the target as a PR because <a href=\"https://github.com/shepmaster/rust/commit/62b2959dbac948e48f58d8bb867ebb10f80258a0#diff-02a1b29cb34a30a3ad2cd10b19b7b578R10-R11\">it requires forcibly linking to zlib</a>, as mentioned in another thread.</p>",
        "id": 204297633,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595073062
    },
    {
        "content": "<p>ahhhh fun</p>",
        "id": 204297636,
        "sender_full_name": "eddyb",
        "timestamp": 1595073078
    },
    {
        "content": "<p>I would've thought that's also doable through <code>RUSTFLAGS</code> but maybe not that specific \"post link flags\" aspect</p>",
        "id": 204297644,
        "sender_full_name": "eddyb",
        "timestamp": 1595073109
    },
    {
        "content": "<p>also wow GitHub likes to do something very weird for that kind of link</p>",
        "id": 204297683,
        "sender_full_name": "eddyb",
        "timestamp": 1595073147
    },
    {
        "content": "<p>(scroll down a bit after refreshing to see it)</p>",
        "id": 204297687,
        "sender_full_name": "eddyb",
        "timestamp": 1595073161
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> anyway if the static zlib stuff gets fixed on beta, maybe you can coordinate with <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> to get this target in as well into that beta build</p>",
        "id": 204297744,
        "sender_full_name": "eddyb",
        "timestamp": 1595073258
    },
    {
        "content": "<p>(but again I have no idea what kind of approval would be needed for a new builtin target, or if we have a way to make it unstable for now - technically possible, but idk if the plumbing has been implemented)</p>",
        "id": 204297753,
        "sender_full_name": "eddyb",
        "timestamp": 1595073301
    },
    {
        "content": "<p>I think that <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> has mentioned that they'd be open to beta backport of the target due to the relative interest for the target in general.</p>",
        "id": 204297768,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595073350
    },
    {
        "content": "<p>nice :D</p>",
        "id": 204297769,
        "sender_full_name": "eddyb",
        "timestamp": 1595073358
    },
    {
        "content": "<p>I'm also hoping for a <a href=\"https://github.com/shepmaster/rust/commit/c25d9fa4b1ba3fade7d6a435e0161fc8abbc8087\">new release of libc</a> so the two dependent crates can be updated to stable releases.</p>",
        "id": 204297812,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595073408
    },
    {
        "content": "<p>as for making things work with a JSON file, I don't see how we could do that without serializing the actual contents and ignoring the file path. maybe we do that already to some extent? unsure exactly how all that works atm</p>",
        "id": 204297817,
        "sender_full_name": "eddyb",
        "timestamp": 1595073426
    },
    {
        "content": "<p>Yeah, if we're not testing it on ci IMO it's fine to backport to beta, doesn't really matter. We can remove it before it hits stable if there's any concerns there too.</p>",
        "id": 204297819,
        "sender_full_name": "simulacrum",
        "timestamp": 1595073429
    },
    {
        "content": "<p>I wonder if (lack of) stability of targets and their names should be discussed on the tiers RFC</p>",
        "id": 204297868,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595073535
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/two-step.20bootstrap.20process.20for.20aarch64-apple-darwin/near/204297817\">said</a>:</p>\n<blockquote>\n<p>as for making things work with a JSON file, I don't see how we could do that without serializing the actual contents and ignoring the file path. maybe we do that already to some extent? unsure exactly how all that works atm</p>\n</blockquote>\n<p>Why wouldn't a permanently unstable command line option, like <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/two-step.20bootstrap.20process.20for.20aarch64-apple-darwin/near/204297573\">I suggested earlier</a>, be a viable option?</p>",
        "id": 204297932,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595073659
    },
    {
        "content": "<p>seems like it would require the file to always exist, and that flag to be always passed?</p>",
        "id": 204297939,
        "sender_full_name": "eddyb",
        "timestamp": 1595073686
    },
    {
        "content": "<p>like there's no doubt it could work, I just don't see it being ergonomic</p>",
        "id": 204297944,
        "sender_full_name": "eddyb",
        "timestamp": 1595073704
    },
    {
        "content": "<p>Yes, and I think that's appropriate. AFAICT, this is only useful during initial exploratory testing of cross-compiling <code>rustc</code> to a new platform.</p>",
        "id": 204297988,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595073751
    },
    {
        "content": "<p>oh wait I was thinking about rlibs but rustc itself would have to know about it heh</p>",
        "id": 204297990,
        "sender_full_name": "eddyb",
        "timestamp": 1595073752
    },
    {
        "content": "<p>like, when it starts up. I wonder why this doesn't \"just work\" with <code>rustc_target::spec</code> being modified</p>",
        "id": 204297995,
        "sender_full_name": "eddyb",
        "timestamp": 1595073777
    },
    {
        "content": "<p>I guess it remembers the file path?</p>",
        "id": 204297998,
        "sender_full_name": "eddyb",
        "timestamp": 1595073785
    },
    {
        "content": "<p>instead of the triple</p>",
        "id": 204298000,
        "sender_full_name": "eddyb",
        "timestamp": 1595073794
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/two-step.20bootstrap.20process.20for.20aarch64-apple-darwin/near/204297998\">said</a>:</p>\n<blockquote>\n<p>I guess it remembers the file path?</p>\n</blockquote>\n<p>Yes, <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/two-step.20bootstrap.20process.20for.20aarch64-apple-darwin/near/204297438\">the error message</a> seems to suggest that.</p>",
        "id": 204298005,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595073818
    },
    {
        "content": "<p>maybe the simplest workaround is similar to what you did to <code>src/bootstrap</code>, but for the compiler's hardcoded host target</p>",
        "id": 204298044,
        "sender_full_name": "eddyb",
        "timestamp": 1595073854
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> like, here: <a href=\"https://github.com/rust-lang/rust/blob/master/src/bootstrap/builder.rs#L1250\">https://github.com/rust-lang/rust/blob/master/src/bootstrap/builder.rs#L1250</a></p>",
        "id": 204298061,
        "sender_full_name": "eddyb",
        "timestamp": 1595073941
    },
    {
        "content": "<p>although that looks like it already passes the triple and not the file? confusing</p>",
        "id": 204298107,
        "sender_full_name": "eddyb",
        "timestamp": 1595073980
    },
    {
        "content": "<p>yeah you literally changed that lol</p>",
        "id": 204298114,
        "sender_full_name": "eddyb",
        "timestamp": 1595074009
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> was the error before or after the <code>src/bootstrap</code> changes?</p>",
        "id": 204298123,
        "sender_full_name": "eddyb",
        "timestamp": 1595074053
    },
    {
        "content": "<p>to be clear: this is the only place I could find where the information is passed in <a href=\"https://github.com/rust-lang/rust/blob/d3df8512d2c2afc6d2e7d8b5b951dd7f2ad77b02/src/librustc_session/config.rs#L568-L578\">https://github.com/rust-lang/rust/blob/d3df8512d2c2afc6d2e7d8b5b951dd7f2ad77b02/src/librustc_session/config.rs#L568-L578</a></p>",
        "id": 204298228,
        "sender_full_name": "eddyb",
        "timestamp": 1595074232
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> btw can we move this topic somewhere else? maybe <a class=\"stream\" data-stream-id=\"242906\" href=\"/#narrow/stream/242906-t-compiler.2Farm\">#t-compiler/arm</a>? I just noticed we're in the MCP stream oops</p>",
        "id": 204298232,
        "sender_full_name": "eddyb",
        "timestamp": 1595074254
    },
    {
        "content": "<p>I haven't tested cross-compiling with only the JSON spec file with the most recent set of bootstrap changes. I'd expect that the error will have changed from <code>cant find target /path/to/my-target.json</code> to <code>cant find target my-target</code>. That is, the triple is passed, but rustc still wouldn't know about it.</p>",
        "id": 204298233,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595074260
    },
    {
        "content": "<p>if you change <code>rustc_target::spec</code> <em>and</em> use a JSON file, both beta and the built compiler should work, I think?</p>",
        "id": 204298241,
        "sender_full_name": "eddyb",
        "timestamp": 1595074311
    },
    {
        "content": "<p>since the compiler you just built will look in <code>rustc_target::spec</code> for the triple</p>",
        "id": 204298283,
        "sender_full_name": "eddyb",
        "timestamp": 1595074327
    },
    {
        "content": "<p>but idk if anything else will break</p>",
        "id": 204298293,
        "sender_full_name": "eddyb",
        "timestamp": 1595074363
    },
    {
        "content": "<p>Ah, making <em>both</em> changes at the same time; I didn't get that.</p>",
        "id": 204298297,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595074385
    },
    {
        "content": "<p>sorry, I assumed (without checking) that the fork includes <a href=\"https://github.com/shepmaster/rust/commit/62b2959dbac948e48f58d8bb867ebb10f80258a0#diff-02a1b29cb34a30a3ad2cd10b19b7b578R10-R11\">this commit</a></p>",
        "id": 204298301,
        "sender_full_name": "eddyb",
        "timestamp": 1595074422
    },
    {
        "content": "<p>(and that the bootstrap changes were only to get beta to use the target JSON file)</p>",
        "id": 204298341,
        "sender_full_name": "eddyb",
        "timestamp": 1595074447
    },
    {
        "content": "<p>Well, that's certainly worth trying, as it would reduce the total cross-compile time from 1.5 hours to 1 hour (at least until the target is available in beta). It might also allow me to cheat and have the <code>-lz</code> hack in the JSON file but not in <code>rustc_target</code>, which would make me feel better about merging it sooner.</p>",
        "id": 204298412,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595074655
    },
    {
        "content": "<p>heh, good idea</p>",
        "id": 204298414,
        "sender_full_name": "eddyb",
        "timestamp": 1595074670
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> okay this might be silly, but there's nothing (at the OS level, I guess) stopping <code>--target</code> or an env var from taking in an entire JSON object, is there :P</p>",
        "id": 204298454,
        "sender_full_name": "eddyb",
        "timestamp": 1595074718
    },
    {
        "content": "<p>could be really compact if it refers to some other triple as the base, and just changes a field or two</p>",
        "id": 204298462,
        "sender_full_name": "eddyb",
        "timestamp": 1595074770
    },
    {
        "content": "<p>Hm on Windows there's a really rather low command line length limit, but you could always use the file-with-arguments syntax to work around that</p>",
        "id": 204298463,
        "sender_full_name": "simulacrum",
        "timestamp": 1595074774
    },
    {
        "content": "<p>/me grumbles</p>",
        "id": 204298467,
        "sender_full_name": "eddyb",
        "timestamp": 1595074801
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> anyway what I was thinking was more on the lines of <code>src/bootstrap</code> passing an entire JSON string in an env var to the <code>rustc</code> build (i.e. for an <code>env!(\"...\")</code>)</p>",
        "id": 204298514,
        "sender_full_name": "eddyb",
        "timestamp": 1595074844
    },
    {
        "content": "<p>Yeah I'd personally be fine with that</p>",
        "id": 204298527,
        "sender_full_name": "simulacrum",
        "timestamp": 1595074867
    },
    {
        "content": "<p>we can avoid it this time, I think, but it could be a fun way to make ad-hoc rustc's that only know of their host target spec that way</p>",
        "id": 204298538,
        "sender_full_name": "eddyb",
        "timestamp": 1595074906
    },
    {
        "content": "<p>like a \"go fast\" <code>rustc</code> specialized to the latest Intel or AMD CPUs etc.</p>",
        "id": 204298584,
        "sender_full_name": "eddyb",
        "timestamp": 1595074958
    },
    {
        "content": "<p>Or ARM CPUs... <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 204298593,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595075000
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> oh also it's possible <code>rustc</code> didn't pass <code>host_triple()</code> through the \"load this is it's a file path\" codepath</p>",
        "id": 204298601,
        "sender_full_name": "eddyb",
        "timestamp": 1595075024
    },
    {
        "content": "<p>ahahaha yes <a href=\"https://github.com/rust-lang/rust/blob/d3df8512d2c2afc6d2e7d8b5b951dd7f2ad77b02/src/librustc_session/config.rs#L1383-L1394\">https://github.com/rust-lang/rust/blob/d3df8512d2c2afc6d2e7d8b5b951dd7f2ad77b02/src/librustc_session/config.rs#L1383-L1394</a></p>",
        "id": 204298618,
        "sender_full_name": "eddyb",
        "timestamp": 1595075042
    },
    {
        "content": "<p>it doesn't treat <code>host_triple()</code> as a default for <code>--target</code>, but rather only as a non-file triple</p>",
        "id": 204298659,
        "sender_full_name": "eddyb",
        "timestamp": 1595075090
    },
    {
        "content": "<p><code>match Some(matches.opt_str(\"target\").unwrap_or(host_triple()))</code> might be enough for a quick test</p>",
        "id": 204298668,
        "sender_full_name": "eddyb",
        "timestamp": 1595075136
    },
    {
        "content": "<p>(with <code>src/bootstrap</code> changed to pass the path instead of the triple, to <code>CFG_COMPILER_HOST_TRIPLE</code>)</p>",
        "id": 204298709,
        "sender_full_name": "eddyb",
        "timestamp": 1595075179
    },
    {
        "content": "<p>We hacked it <a href=\"#narrow/stream/242906-t-compiler.2Farm/topic/macOS.20cross-compile.20from.20x86_64/near/202832680\">to forcibly use it as a path</a>. It didn't work, but I don't recall why.</p>",
        "id": 204298713,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595075195
    },
    {
        "content": "<p>awww, alright</p>",
        "id": 204298719,
        "sender_full_name": "eddyb",
        "timestamp": 1595075227
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"233931\" href=\"/#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/two-step.20bootstrap.20process.20for.20aarch64-apple-darwin\">#t-compiler/major changes &gt; two-step bootstrap process for aarch64-apple-darwin</a> by <span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span></p>",
        "id": 204300858,
        "sender_full_name": "Notification Bot",
        "timestamp": 1595079262
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">                </span><span class=\"c1\">// search for a file named `target_triple`.json in RUST_TARGET_PATH</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">target_triple</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">target</span><span class=\"p\">.</span><span class=\"n\">push_str</span><span class=\"p\">(</span><span class=\"s\">&quot;.json&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">PathBuf</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">target_path</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">env</span>::<span class=\"n\">var_os</span><span class=\"p\">(</span><span class=\"s\">&quot;RUST_TARGET_PATH&quot;</span><span class=\"p\">).</span><span class=\"n\">unwrap_or_default</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>Hmm. Maybe this already worked?</p>",
        "id": 204304508,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595085739
    },
    {
        "content": "<p>huh never heard of that env var before</p>",
        "id": 204306274,
        "sender_full_name": "eddyb",
        "timestamp": 1595088542
    },
    {
        "content": "<p>The length limit also exists on Unixes.</p>",
        "id": 204313377,
        "sender_full_name": "nagisa",
        "timestamp": 1595098889
    },
    {
        "content": "<p>The entire environment + args mustn't be larger than 2MB on a typically configured linux IIRC</p>",
        "id": 204313432,
        "sender_full_name": "nagisa",
        "timestamp": 1595098947
    },
    {
        "content": "<p>Doh. Something's putting the hash in there so it doesn't match:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0461]: couldn&#39;t find crate `std` with expected target triple aarch64-apple-darwin\n  |\n  = note: the following crate versions were found:\n          crate `std`, target triple aarch64-apple-darwin-1752181066458373883: /Users/shep/crossed-one/usr/local/lib/rustlib/aarch64-apple-darwin/lib/libstd-11e5fe59d2e3c43b.rlib\n          crate `std`, target triple aarch64-apple-darwin-1752181066458373883: /Users/shep/crossed-one/usr/local/lib/rustlib/aarch64-apple-darwin/lib/libstd-11e5fe59d2e3c43b.dylib\n</code></pre></div>",
        "id": 204313983,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595099975
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> hmmmmm maybe try with <code>--host</code> pointing to the file and <code>--target</code> just using the triple name?</p>",
        "id": 204323737,
        "sender_full_name": "eddyb",
        "timestamp": 1595117511
    },
    {
        "content": "<p>since the compiler that will process the <code>--target</code> triple should recognize the triple by name</p>",
        "id": 204323779,
        "sender_full_name": "eddyb",
        "timestamp": 1595117541
    },
    {
        "content": "<p>Something like</p>\n<div class=\"codehilite\"><pre><span></span><code>../../x.py install -i --stage 1 --host ../aarch64-apple-darwin.json --target aarch64-apple-darwin,x86_64-apple-darwin\n</code></pre></div>\n\n\n<p>(plus all my other gunk)</p>",
        "id": 204323788,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595117639
    },
    {
        "content": "<p>yeah. assuming it's not what you're already doing</p>",
        "id": 204323831,
        "sender_full_name": "eddyb",
        "timestamp": 1595117675
    },
    {
        "content": "<p>I did have the JSON file in both locations.</p>",
        "id": 204323838,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595117702
    },
    {
        "content": "<p>I'll give that a try and see if it's a 3, 30, or 60 minute build....</p>",
        "id": 204323848,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595117738
    },
    {
        "content": "<p>2 minute, which makes me think that the thing that needed to be rebuilt probably wasnt</p>",
        "id": 204323916,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595117847
    },
    {
        "content": "<p>Oh, maybe it did!</p>",
        "id": 204323966,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595117928
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>% rustc +one-step hello.rs\n\n% file hello\nhello: Mach-O 64-bit executable arm64\n\n% ./hello\nHi\n</code></pre></div>",
        "id": 204323977,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595117958
    },
    {
        "content": "<p>Course, to be sure I gotta blow away the directory and build from scratch.</p>",
        "id": 204324040,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595118054
    },
    {
        "content": "<p>TBQH, I don't understand why this specific invocation works, but I'm happy to use it either way.</p>",
        "id": 204324193,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595118332
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> presumably it hashes the <code>--target</code> flag, not the triple name or the JSON contents</p>",
        "id": 204324263,
        "sender_full_name": "eddyb",
        "timestamp": 1595118439
    },
    {
        "content": "<p>you only ever needed the JSON for the beta compiler which at most gets passed the <code>x.py</code> <code>--host</code> flag as <code>--target</code>, unless you're running <code>x.py build --stage 0 --target ...</code> I guess? (which you're not)</p>",
        "id": 204324312,
        "sender_full_name": "eddyb",
        "timestamp": 1595118521
    },
    {
        "content": "<p>once the new compiler is built it can build core/std etc. without the JSON file, since it contains the <code>rustc_target::spec</code> change</p>",
        "id": 204324334,
        "sender_full_name": "eddyb",
        "timestamp": 1595118582
    },
    {
        "content": "<p>wait, I said \"hashes\". I think it just stores the string (in the <code>.rmeta</code>, <code>.rlib</code> or <code>.dylib</code>)</p>",
        "id": 204324341,
        "sender_full_name": "eddyb",
        "timestamp": 1595118602
    },
    {
        "content": "<p>It's nice you think I understand what the stages mean enough to construct an arbitrary <code>x.py</code> command and it to work.</p>",
        "id": 204324380,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595118621
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/242906-t-compiler.2Farm/topic/two-step.20bootstrap.20process.20for.20aarch64-apple-darwin/near/204324341\">said</a>:</p>\n<blockquote>\n<p>wait, I said \"hashes\". I think it just stores the string (in the <code>.rmeta</code>, <code>.rlib</code> or <code>.dylib</code>)</p>\n</blockquote>\n<p>I actually went looking for that using objdump in the rlib; any clues on where I'd look?</p>",
        "id": 204324394,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595118664
    },
    {
        "content": "<p>you need to extract the <code>rmeta</code> from the <code>rlib</code> first</p>",
        "id": 204324402,
        "sender_full_name": "eddyb",
        "timestamp": 1595118682
    },
    {
        "content": "<p>after that... it's either at the very start or very end, I forget</p>",
        "id": 204324408,
        "sender_full_name": "eddyb",
        "timestamp": 1595118702
    },
    {
        "content": "<p>but you should be able to grep the whole <code>rlib</code> archive for the <code>$target.json</code> file name I guess? as an easy confirmation. since nothing is compressed</p>",
        "id": 204324453,
        "sender_full_name": "eddyb",
        "timestamp": 1595118741
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>a:&gt;BL1\nNRP+\n&#39;7,A\n;/Users/shep/Projects/rust/silicon/aarch64-apple-darwin.json\n-11e5fe59d2e3c43b\n</code></pre></div>",
        "id": 204324513,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595118857
    },
    {
        "content": "<p>vs.</p>\n<div class=\"codehilite\"><pre><span></span><code>a:&gt;BL1\nNRP+\n&#39;7,A\naarch64-apple-darwin\n-4030be7cd8f35bb4\nITw5\n</code></pre></div>",
        "id": 204324524,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595118905
    },
    {
        "content": "<p>heh I'm glad it's as readable as that</p>",
        "id": 204324527,
        "sender_full_name": "eddyb",
        "timestamp": 1595118918
    },
    {
        "content": "<p><code>strings</code> is pretty magical</p>",
        "id": 204324531,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595118933
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/242906-t-compiler.2Farm/topic/two-step.20bootstrap.20process.20for.20aarch64-apple-darwin/near/204324040\">said</a>:</p>\n<blockquote>\n<p>Course, to be sure I gotta blow away the directory and build from scratch.</p>\n</blockquote>\n<p>0:32:49 and 50% battery</p>",
        "id": 204325238,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595120349
    },
    {
        "content": "<p>a bit surprised Apple doesn't offer a cloud-like solution where you rent a build server running their CPUs</p>",
        "id": 204325570,
        "sender_full_name": "eddyb",
        "timestamp": 1595120997
    },
    {
        "content": "<p>then again it'd probably cost an arm and a leg</p>",
        "id": 204325614,
        "sender_full_name": "eddyb",
        "timestamp": 1595121025
    },
    {
        "content": "<p>/me sees missed pun opportunity and realizes caffeine is in order</p>",
        "id": 204325676,
        "sender_full_name": "eddyb",
        "timestamp": 1595121145
    },
    {
        "content": "<p>I am disappointed to learn recently that it's now properly \"Arm\" and I've been typing \"ARM\" for the longest while. means you pun is that much more achievable.</p>",
        "id": 204325763,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595121318
    },
    {
        "content": "<p>I think it used to be ARM but now it's Arm Holdings</p>",
        "id": 204325819,
        "sender_full_name": "eddyb",
        "timestamp": 1595121396
    },
    {
        "content": "<p>that looks far too specific to be accidental tbh</p>",
        "id": 204325822,
        "sender_full_name": "eddyb",
        "timestamp": 1595121408
    },
    {
        "content": "<p>Just write Acorn Risc Machines :)</p>",
        "id": 204335389,
        "sender_full_name": "bjorn3",
        "timestamp": 1595139766
    }
]