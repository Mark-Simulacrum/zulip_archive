[
    {
        "content": "<p>Hello, I've been trying to use the Apple LLVM with rustc to get arm64e compilation in rust.<br>\nThe problem is, libstd and friends get built with <code>-arch arm64</code> rather than <code>-arch arm64e</code>, and I have no clue where it's getting the <code>-arch</code> parameter from, it's obviously not from the spec's <code>llvm_target</code>.</p>",
        "id": 203880879,
        "sender_full_name": "aspen",
        "timestamp": 1594757222
    },
    {
        "content": "<p>C/C++ code, or Rust? AFAIK there's no place for <code>-arch</code> to exist, we just use the LLVM APIs to set these things, without synthesizing textual arguments (but I could be wrong?)</p>",
        "id": 203884912,
        "sender_full_name": "eddyb",
        "timestamp": 1594759114
    },
    {
        "content": "<p>All I know is that the libstd libraries end up being compiled as arm64 when the llvm target is arm64e-apple-ios</p>",
        "id": 203885038,
        "sender_full_name": "aspen",
        "timestamp": 1594759174
    },
    {
        "content": "<p>i'll get logs in a bit</p>",
        "id": 203885046,
        "sender_full_name": "aspen",
        "timestamp": 1594759179
    },
    {
        "content": "<p>if it's not literally \"-arch\", it's either the LLVM triple, and/or the LLVM featureset</p>",
        "id": 203885127,
        "sender_full_name": "eddyb",
        "timestamp": 1594759204
    },
    {
        "content": "<p>weird</p>",
        "id": 203885144,
        "sender_full_name": "aspen",
        "timestamp": 1594759215
    },
    {
        "content": "<p>I would expect changing <code>llvm_target</code> to be enough, but that's assuming <code>arm64e</code> means anything to LLVM - it might not</p>",
        "id": 203885238,
        "sender_full_name": "eddyb",
        "timestamp": 1594759266
    },
    {
        "content": "<p>(e.g. Clang might be translating <code>arm64e</code> into a set of target features to enable)</p>",
        "id": 203885273,
        "sender_full_name": "eddyb",
        "timestamp": 1594759286
    },
    {
        "content": "<p>I'm using the <code>apple/llvm-project</code> LLVM 10 branch</p>",
        "id": 203885279,
        "sender_full_name": "aspen",
        "timestamp": 1594759289
    },
    {
        "content": "<p>which very explicitly has an <code>arm64e-apple-ios</code> triple</p>",
        "id": 203885298,
        "sender_full_name": "aspen",
        "timestamp": 1594759299
    },
    {
        "content": "<p>sure, but I mean it might not be LLVM who interprets that</p>",
        "id": 203885308,
        "sender_full_name": "eddyb",
        "timestamp": 1594759305
    },
    {
        "content": "<p>hm</p>",
        "id": 203885315,
        "sender_full_name": "aspen",
        "timestamp": 1594759309
    },
    {
        "content": "<p>e.g. LLVM might just ignore the <code>e</code> and expect a dozen target features to be passed</p>",
        "id": 203885338,
        "sender_full_name": "eddyb",
        "timestamp": 1594759319
    },
    {
        "content": "<p>I think I've seen code in LLVM that just ignores stuff you throw onto the end of one of the triple fields</p>",
        "id": 203885407,
        "sender_full_name": "eddyb",
        "timestamp": 1594759339
    },
    {
        "content": "<p>anyway, cc <span class=\"user-mention\" data-user-id=\"124289\">@Hanna Kruppe</span>, I remember looking through LLVM and not finding much useful</p>",
        "id": 203885433,
        "sender_full_name": "eddyb",
        "timestamp": 1594759361
    },
    {
        "content": "<p>if you have a local checkout of the Apple LLVM, you might be able to search around for arm64e, especially in <code>llvm/lib</code> (i.e. ignore tests)</p>",
        "id": 203885480,
        "sender_full_name": "eddyb",
        "timestamp": 1594759390
    },
    {
        "content": "<p>in the end all that matters is that it generates BRAA/BLRAA instructions for rust programs</p>",
        "id": 203885484,
        "sender_full_name": "aspen",
        "timestamp": 1594759394
    },
    {
        "content": "<p>sure, we just don't know what controls that in LLVM</p>",
        "id": 203885520,
        "sender_full_name": "eddyb",
        "timestamp": 1594759416
    },
    {
        "content": "<p>at most you have a Clang flag that you can trust, but Clang can do arbitrarily much work to turn that into LLVM configuration</p>",
        "id": 203885609,
        "sender_full_name": "eddyb",
        "timestamp": 1594759445
    },
    {
        "content": "<p>arm64e only appears once in clang, in a test</p>",
        "id": 203885613,
        "sender_full_name": "aspen",
        "timestamp": 1594759446
    },
    {
        "content": "<p>wait DAMMIT</p>",
        "id": 203885653,
        "sender_full_name": "aspen",
        "timestamp": 1594759471
    },
    {
        "content": "<p>an easy way to check would be to look at LLVM IR generated by Clang when you pass that triple</p>",
        "id": 203885661,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1594759477
    },
    {
        "content": "<p>this is the wrong llvm i've been grepping in</p>",
        "id": 203885662,
        "sender_full_name": "aspen",
        "timestamp": 1594759477
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312033\">@aspen</span> actually, can you do something like <code>echo - | clang -s -emit-llvm -o foo.ll -x c -</code> and make it arm64e?</p>",
        "id": 203885669,
        "sender_full_name": "eddyb",
        "timestamp": 1594759480
    },
    {
        "content": "<p>I should've suggested this weeks ago Q_Q</p>",
        "id": 203885688,
        "sender_full_name": "eddyb",
        "timestamp": 1594759495
    },
    {
        "content": "<p>half the point of arm64e is BLRAA/BRAA instructions</p>",
        "id": 203885689,
        "sender_full_name": "aspen",
        "timestamp": 1594759496
    },
    {
        "content": "<p>and <span class=\"user-mention\" data-user-id=\"124289\">@Hanna Kruppe</span> said before I did, damn</p>",
        "id": 203885710,
        "sender_full_name": "eddyb",
        "timestamp": 1594759509
    },
    {
        "content": "<p>pointer authentication fails and results in a segfault if you try to run an arm64 program as arm64e</p>",
        "id": 203885729,
        "sender_full_name": "aspen",
        "timestamp": 1594759521
    },
    {
        "content": "<p>I forgot that the LLVM IR dumps tend to have a lot of the LLVM configuration in them</p>",
        "id": 203885733,
        "sender_full_name": "eddyb",
        "timestamp": 1594759522
    },
    {
        "content": "<p>yeah but we don't care about the machine code, we care about how Clang configures LLVM</p>",
        "id": 203885770,
        "sender_full_name": "eddyb",
        "timestamp": 1594759546
    },
    {
        "content": "<p>i've tried a bunch of things:</p>\n<ul>\n<li>changing the llvm triple in the IR</li>\n<li>adding XPACI instructions to the ASM</li>\n</ul>",
        "id": 203885776,
        "sender_full_name": "aspen",
        "timestamp": 1594759548
    },
    {
        "content": "<p>(since we have to replicate what Clang does, through the LLVM API)</p>",
        "id": 203885848,
        "sender_full_name": "eddyb",
        "timestamp": 1594759577
    },
    {
        "content": "<p>so anyway if you can get me an arm64e otherwise-empty <code>foo.ll</code> from that command, it might be useful</p>",
        "id": 203885883,
        "sender_full_name": "eddyb",
        "timestamp": 1594759601
    },
    {
        "content": "<p>clang: error: -emit-llvm cannot be used when linking</p>",
        "id": 203885944,
        "sender_full_name": "aspen",
        "timestamp": 1594759635
    },
    {
        "content": "<p>uhhh is it <code>-S</code> for assembly?</p>",
        "id": 203885966,
        "sender_full_name": "eddyb",
        "timestamp": 1594759645
    },
    {
        "content": "<p>or maybe <code>-c</code> and <code>-s</code></p>",
        "id": 203885988,
        "sender_full_name": "eddyb",
        "timestamp": 1594759652
    },
    {
        "content": "<p>-c ought to work</p>",
        "id": 203886014,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1594759667
    },
    {
        "content": "<p>sorry, I tend to rely on godbolt for most of this nowdays</p>",
        "id": 203886021,
        "sender_full_name": "eddyb",
        "timestamp": 1594759670
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@Hanna Kruppe</span> doesn't it create <code>.bc</code> w/o the assembly flag?</p>",
        "id": 203886049,
        "sender_full_name": "eddyb",
        "timestamp": 1594759682
    },
    {
        "content": "<p>oh right, ugh</p>",
        "id": 203886103,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1594759695
    },
    {
        "content": "<p>bad default imo</p>",
        "id": 203886119,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1594759703
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>; ModuleID = &#39;-&#39;\nsource_filename = &quot;-&quot;\ntarget datalayout = &quot;e-m:o-i64:64-i128:128-n32:64-S128&quot;\ntarget triple = &quot;arm64e-apple-ios7.0.0&quot;\n\n!llvm.module.flags = !{!0, !1, !2}\n!llvm.ident = !{!3}\n\n!0 = !{i32 2, !&quot;SDK Version&quot;, [2 x i32] [i32 10, i32 14]}\n!1 = !{i32 1, !&quot;wchar_size&quot;, i32 4}\n!2 = !{i32 7, !&quot;PIC Level&quot;, i32 2}\n!3 = !{!&quot;Apple LLVM version 10.0.1 (clang-1001.0.46.4)&quot;}\n</code></pre></div>",
        "id": 203886149,
        "sender_full_name": "aspen",
        "timestamp": 1594759714
    },
    {
        "content": "<p>oh and you can do the same with <code>echo - | rustc --crate-type=lib --emit=llvm-ir -o bar.ll -</code>, so we can compare what's wrong</p>",
        "id": 203886157,
        "sender_full_name": "eddyb",
        "timestamp": 1594759718
    },
    {
        "content": "<p>huh weird, does the LLVM IR dump omit target features?</p>",
        "id": 203886190,
        "sender_full_name": "eddyb",
        "timestamp": 1594759736
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>❯ echo - | clang -arch arm64e --target=arm64e-apple-ios -S -emit-llvm -o foo.ll -x c -\nclang: warning: using sysroot for &#39;MacOSX&#39; but targeting &#39;iPhone&#39; [-Wincompatible-sysroot]\n</code></pre></div>",
        "id": 203886207,
        "sender_full_name": "aspen",
        "timestamp": 1594759749
    },
    {
        "content": "<p>It doesn't include target features implied by the triple</p>",
        "id": 203886217,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1594759755
    },
    {
        "content": "<p>So seems like the triple is all we should need</p>",
        "id": 203886240,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1594759766
    },
    {
        "content": "<p>so that would suggest the triple is enough?</p>",
        "id": 203886243,
        "sender_full_name": "eddyb",
        "timestamp": 1594759767
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312033\">@aspen</span> but you have <code>llvm_target: \"arm64e-apple-ios7.0.0\"</code>, right?</p>",
        "id": 203886345,
        "sender_full_name": "eddyb",
        "timestamp": 1594759803
    },
    {
        "content": "<p>since you said you tried that and it didn't work</p>",
        "id": 203886364,
        "sender_full_name": "eddyb",
        "timestamp": 1594759811
    },
    {
        "content": "<p>I hope it's not the <code>\"SDK Version\"</code> :P</p>",
        "id": 203886403,
        "sender_full_name": "eddyb",
        "timestamp": 1594759836
    },
    {
        "content": "<p>the problem was libstd being built for arm64, while other things were being built for arm64e</p>",
        "id": 203886486,
        "sender_full_name": "aspen",
        "timestamp": 1594759884
    },
    {
        "content": "<p>i'm doing a build rn to test</p>",
        "id": 203886657,
        "sender_full_name": "aspen",
        "timestamp": 1594759952
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>❯ rg -j6 -p -F &quot;arm64e&quot; src/llvm-project/clang\nsrc/llvm-project/clang/test/CodeGenObjCXX/synthesized-property-cleanup.mm\n1:// RUN: %clang_cc1 -triple arm64e-apple-ios13.0 -debug-info-kind=standalone -fobjc-arc -fsanitize=nullability-return \\\n</code></pre></div>",
        "id": 203886828,
        "sender_full_name": "aspen",
        "timestamp": 1594760035
    },
    {
        "content": "<p>how do you run <code>x.py</code>?</p>",
        "id": 203886888,
        "sender_full_name": "eddyb",
        "timestamp": 1594760047
    },
    {
        "content": "<p><code>./x.py build</code></p>",
        "id": 203886933,
        "sender_full_name": "aspen",
        "timestamp": 1594760067
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312033\">aspen</span> <a href=\"#narrow/stream/242906-t-compiler.2Farm/topic/arm64e.20rustc.20using.20Apple.20LLVM/near/203886486\">said</a>:</p>\n<blockquote>\n<p>the problem was libstd being built for arm64, while other things were being built for arm64e</p>\n</blockquote>\n<p>okay this wasn't clear at all, this is a real crucial bit</p>",
        "id": 203886942,
        "sender_full_name": "eddyb",
        "timestamp": 1594760072
    },
    {
        "content": "<p>with a config.toml</p>",
        "id": 203886946,
        "sender_full_name": "aspen",
        "timestamp": 1594760074
    },
    {
        "content": "<p>did you check things like <code>libcore-*.rlib</code>?</p>",
        "id": 203886976,
        "sender_full_name": "eddyb",
        "timestamp": 1594760091
    },
    {
        "content": "<p>and how are you checking that they're arm64 or arm64e?</p>",
        "id": 203887015,
        "sender_full_name": "eddyb",
        "timestamp": 1594760108
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/242906-t-compiler.2Farm/topic/arm64e.20rustc.20using.20Apple.20LLVM/near/203887015\">said</a>:</p>\n<blockquote>\n<p>and how are you checking that they're arm64 or arm64e?</p>\n</blockquote>\n<p>the linker errors if you try to link arm64 to arm64e</p>",
        "id": 203887045,
        "sender_full_name": "aspen",
        "timestamp": 1594760123
    },
    {
        "content": "<p>like I'm thinking maybe you're using/looking at the wrong libstd and that's why. but I find it hard to believe that it'd happen</p>",
        "id": 203887060,
        "sender_full_name": "eddyb",
        "timestamp": 1594760133
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312033\">@aspen</span> okay so it could be C/C++ code and not Rust code that's causing that, right?</p>",
        "id": 203887101,
        "sender_full_name": "eddyb",
        "timestamp": 1594760153
    },
    {
        "content": "<p>possibly</p>",
        "id": 203887119,
        "sender_full_name": "aspen",
        "timestamp": 1594760159
    },
    {
        "content": "<p>maybe <code>rm -rf build/*/stage1-std</code> and run <code>x.py build --stage 1 src/libstd -vv</code></p>",
        "id": 203887212,
        "sender_full_name": "eddyb",
        "timestamp": 1594760202
    },
    {
        "content": "<p>maybe it will just show the <code>arm64-</code> offender</p>",
        "id": 203887262,
        "sender_full_name": "eddyb",
        "timestamp": 1594760236
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>❯ rg -j6 -p -F &quot;arm64e&quot; llvm/lib\nllvm/lib/Support/Triple.cpp\n402:    .Case(&quot;arm64e&quot;, Triple::aarch64)\n566:  if (SubArchName == &quot;arm64e&quot;)\n\nllvm/lib/Support/ARMTargetParser.cpp\n281:  else if (A.startswith(&quot;arm64e&quot;))\n\nllvm/lib/Object/MachOObjectFile.cpp\n2566:      return &quot;Mach-O arm64e&quot;;\n2694:        *ArchFlag = &quot;arm64e&quot;;\n2695:      return Triple(&quot;arm64e-apple-darwin&quot;);\n2746:      &quot;armv7s&quot;, &quot;arm64&quot;,  &quot;arm64e&quot;,   &quot;arm64_32&quot;,&quot;ppc&quot;,    &quot;ppc64&quot;,\n\nllvm/lib/LTO/LTOCodeGenerator.cpp\n368:    else if (Triple.getArchName() == &quot;arm64e&quot;)\n\nllvm/lib/LTO/LTOModule.cpp\n224:    else if (Triple.getArchName() == &quot;arm64e&quot;)\n\nllvm/lib/BinaryFormat/MachO.cpp\n61:  if (T.getArchName() == &quot;arm64e&quot;)\n\nllvm/lib/Target/AArch64/MCTargetDesc/AArch64MCTargetDesc.cpp\n56:    if (TT.getArchName() == &quot;arm64e&quot;)\n\nllvm/lib/Target/AArch64/AArch64ISelLowering.cpp\n5607:      Subtarget-&gt;getTargetTriple().getArchName() == &quot;arm64e&quot;) {\n\nllvm/lib/Target/AArch64/AArch64FrameLowering.cpp\n909:      report_fatal_error(&quot;arm64e LR authentication requires ptrauth&quot;);\n1427:        report_fatal_error(&quot;arm64e LR authentication requires ptrauth&quot;);\n\nllvm/lib/Target/AArch64/AArch64TargetMachine.cpp\n222:  if (CPU.empty() &amp;&amp; TT.getArchName() == &quot;arm64e&quot;)\n303:      TT.getArchName() != &quot;arm64e&quot; &amp;&amp;\n</code></pre></div>",
        "id": 203887270,
        "sender_full_name": "aspen",
        "timestamp": 1594760240
    },
    {
        "content": "<p>or <code>aarch64-</code></p>",
        "id": 203887272,
        "sender_full_name": "eddyb",
        "timestamp": 1594760243
    },
    {
        "content": "<p>okay that grep is useful, thanks! most of that stuff isn't in upstream LLVM, I think specifically the <code>llvm/lib/Target/AArch64</code> parts matter most</p>",
        "id": 203887370,
        "sender_full_name": "eddyb",
        "timestamp": 1594760286
    },
    {
        "content": "<p>so between that and what <span class=\"user-mention\" data-user-id=\"124289\">@Hanna Kruppe</span> said, it <em>should</em> just be the triple</p>",
        "id": 203887395,
        "sender_full_name": "eddyb",
        "timestamp": 1594760302
    },
    {
        "content": "<p>yeah this stuff is apparently MEANT to be upstreamed but ha that ain't happening for a while</p>",
        "id": 203887398,
        "sender_full_name": "aspen",
        "timestamp": 1594760304
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>  // arm64e requires v8.3a and only runs on vortex and later CPUs.\n  if (Triple.getArchName() == &quot;arm64e&quot;) {\n    // Honor -mcpu as long it doesn&#39;t specify an older CPU than &quot;vortex&quot;.\n    if (CPU.size() &amp;&amp; (CPU != &quot;cyclone&quot;))\n      return CPU;\n\n    // Otherwise default to &quot;vortex&quot;.\n    return &quot;vortex&quot;;\n  }\n</code></pre></div>",
        "id": 203887405,
        "sender_full_name": "aspen",
        "timestamp": 1594760308
    },
    {
        "content": "<p>and the problem being limited to libstd makes me think it's cc-rs all over again</p>",
        "id": 203887494,
        "sender_full_name": "eddyb",
        "timestamp": 1594760368
    },
    {
        "content": "<p>same</p>",
        "id": 203887512,
        "sender_full_name": "aspen",
        "timestamp": 1594760379
    },
    {
        "content": "<p>i'm going to try to patch everything to use my cc-rs which I added arm64e stuff too</p>",
        "id": 203887625,
        "sender_full_name": "aspen",
        "timestamp": 1594760411
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312033\">@aspen</span> oh one way you can dig deeper into this is <code>build/*/stage1-std/arm64e-.../release/build</code> (or <code>stage2-std</code>, whichever you have built for the target) should contain the native dependencies that may have been built by <code>cc-rs</code></p>",
        "id": 203887660,
        "sender_full_name": "eddyb",
        "timestamp": 1594760435
    },
    {
        "content": "<p>i made the target <code>aarch64-apple-ios-armv83</code> because it was easier than trying to get cc-rs to cooperate</p>",
        "id": 203887686,
        "sender_full_name": "aspen",
        "timestamp": 1594760455
    },
    {
        "content": "<p>the rust target name*</p>",
        "id": 203887692,
        "sender_full_name": "aspen",
        "timestamp": 1594760461
    },
    {
        "content": "<p>and so you can <code>file</code> each static library or w/e you find in there until you find the wrong one</p>",
        "id": 203887712,
        "sender_full_name": "eddyb",
        "timestamp": 1594760473
    },
    {
        "content": "<p>oh that's probably the reason, heh</p>",
        "id": 203887732,
        "sender_full_name": "eddyb",
        "timestamp": 1594760485
    },
    {
        "content": "<p>so rustc's use of LLVM is probably fine</p>",
        "id": 203887740,
        "sender_full_name": "eddyb",
        "timestamp": 1594760495
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312033\">@aspen</span> for me, <code>file build/*/stage*-std/*/release/build/*/out/*.o</code> shows a lot of x86-64 ELFs</p>",
        "id": 203888091,
        "sender_full_name": "eddyb",
        "timestamp": 1594760665
    },
    {
        "content": "<p>so that's probably what you want to check</p>",
        "id": 203888103,
        "sender_full_name": "eddyb",
        "timestamp": 1594760672
    },
    {
        "content": "<p>And you set that triple in the target?</p>",
        "id": 203888319,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594760776
    },
    {
        "content": "<p>also, most of the files are in this directory, for me:<br>\n<code>build/x86_64-unknown-linux-gnu/stage1-std/x86_64-unknown-linux-gnu/release/build/compiler_builtins-40c9c6172d2c78d4/out/</code><br>\nso if I look at this file:<br>\n<code>build/x86_64-unknown-linux-gnu/stage1-std/x86_64-unknown-linux-gnu/release/build/compiler_builtins-40c9c6172d2c78d4/output</code><br>\nI can see all of the <code>clang</code> invocations</p>",
        "id": 203888327,
        "sender_full_name": "eddyb",
        "timestamp": 1594760781
    },
    {
        "content": "<p>and that they all pass <code>--target=x86_64-unknown-linux-gnu</code></p>",
        "id": 203888376,
        "sender_full_name": "eddyb",
        "timestamp": 1594760813
    },
    {
        "content": "<p>so you'll probably find your problem there</p>",
        "id": 203888384,
        "sender_full_name": "eddyb",
        "timestamp": 1594760819
    },
    {
        "content": "<p>e.g. something like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gi\">+pub fn target() -&gt; TargetResult {</span>\n<span class=\"gi\">+    let mut base = super::apple_base::opts();</span>\n<span class=\"gi\">+    base.cpu = &quot;apple-a12&quot;.to_string();</span>\n<span class=\"gi\">+    base.max_atomic_width = Some(128);</span>\n<span class=\"gi\">+    base.eliminate_frame_pointer = false;</span>\n<span class=\"gi\">+    base.pre_link_args.insert(LinkerFlavor::Gcc, vec![&quot;-arch&quot;.to_string(), &quot;arm64&quot;.to_string()]);</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+    // This is a hack; why doesn&#39;t this get picked up?</span>\n<span class=\"gi\">+    base.post_link_args.insert(LinkerFlavor::Gcc, vec![&quot;-lz&quot;.to_string()]);</span>\n<span class=\"gi\">+    base.link_env_remove.extend(super::apple_base::macos_link_env_remove());</span>\n<span class=\"gi\">+    base.stack_probes = true;</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+    // Clang automatically chooses a more specific target based on</span>\n<span class=\"gi\">+    // MACOSX_DEPLOYMENT_TARGET.  To enable cross-language LTO to work</span>\n<span class=\"gi\">+    // correctly, we do too.</span>\n<span class=\"gi\">+    let arch = &quot;aarch64&quot;;</span>\n<span class=\"gi\">+    let llvm_target = super::apple_base::macos_llvm_target(&amp;arch);</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+    Ok(Target {</span>\n<span class=\"gi\">+        llvm_target: &quot;MY_TRIPLE_HERE&quot;,</span>\n<span class=\"gi\">+        target_endian: &quot;little&quot;.to_string(),</span>\n<span class=\"gi\">+        target_pointer_width: &quot;64&quot;.to_string(),</span>\n<span class=\"gi\">+        target_c_int_width: &quot;32&quot;.to_string(),</span>\n<span class=\"gi\">+        data_layout: &quot;FIXME&quot;.to_string(),</span>\n<span class=\"gi\">+        arch: arch.to_string(),</span>\n<span class=\"gi\">+        target_os: &quot;macos&quot;.to_string(),</span>\n<span class=\"gi\">+        target_env: String::new(),</span>\n<span class=\"gi\">+        target_vendor: &quot;apple&quot;.to_string(),</span>\n<span class=\"gi\">+        linker_flavor: LinkerFlavor::Gcc,</span>\n<span class=\"gi\">+        options: TargetOptions { target_mcount: &quot;\\u{1}mcount&quot;.to_string(), ..base },</span>\n<span class=\"gi\">+    })</span>\n<span class=\"gi\">+}</span>\n</code></pre></div>",
        "id": 203888436,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594760850
    },
    {
        "content": "<p>data layout is same according to llvm IR</p>",
        "id": 203888561,
        "sender_full_name": "aspen",
        "timestamp": 1594760901
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">super</span>::<span class=\"n\">apple_sdk_base</span>::<span class=\"p\">{</span><span class=\"n\">opts</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">AppleOS</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Arch</span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">crate</span>::<span class=\"n\">spec</span>::<span class=\"p\">{</span><span class=\"n\">LinkerFlavor</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Target</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">TargetOptions</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">TargetResult</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">target</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">TargetResult</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">base</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">opts</span><span class=\"p\">(</span><span class=\"n\">Arch</span>::<span class=\"n\">Arm64e</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">AppleOS</span>::<span class=\"n\">iOS</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">Target</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">llvm_target</span>: <span class=\"s\">&quot;arm64e-apple-ios&quot;</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">target_endian</span>: <span class=\"s\">&quot;little&quot;</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">target_pointer_width</span>: <span class=\"s\">&quot;64&quot;</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">target_c_int_width</span>: <span class=\"s\">&quot;32&quot;</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">data_layout</span>: <span class=\"s\">&quot;e-m:o-i64:64-i128:128-n32:64-S128&quot;</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">arch</span>: <span class=\"s\">&quot;aarch64&quot;</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">target_os</span>: <span class=\"s\">&quot;ios&quot;</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">target_env</span>: <span class=\"nb\">String</span>::<span class=\"n\">new</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">target_vendor</span>: <span class=\"s\">&quot;apple&quot;</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">linker_flavor</span>: <span class=\"nc\">LinkerFlavor</span>::<span class=\"n\">Gcc</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">options</span>: <span class=\"nc\">TargetOptions</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">features</span>: <span class=\"s\">&quot;+neon,+fp-armv8,+apple-a12&quot;</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">eliminate_frame_pointer</span>: <span class=\"nc\">false</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">max_atomic_width</span>: <span class=\"nc\">Some</span><span class=\"p\">(</span><span class=\"mi\">128</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">unsupported_abis</span>: <span class=\"nc\">super</span>::<span class=\"n\">arm_base</span>::<span class=\"n\">unsupported_abis</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">forces_embed_bitcode</span>: <span class=\"nc\">true</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// Taken from a clang build on Xcode 11.4.1.</span>\n<span class=\"w\">            </span><span class=\"c1\">// These arguments are not actually invoked - they just have</span>\n<span class=\"w\">            </span><span class=\"c1\">// to look right to pass App Store validation.</span>\n<span class=\"w\">            </span><span class=\"n\">bitcode_llvm_cmdline</span>: <span class=\"s\">&quot;-triple</span><span class=\"se\">\\0</span><span class=\"s\">\\</span>\n<span class=\"s\">                arm64e-apple-ios7.0.0</span><span class=\"se\">\\0</span><span class=\"s\">\\</span>\n<span class=\"s\">                -emit-obj</span><span class=\"se\">\\0</span><span class=\"s\">\\</span>\n<span class=\"s\">                -disable-llvm-passes</span><span class=\"se\">\\0</span><span class=\"s\">\\</span>\n<span class=\"s\">                -target-abi</span><span class=\"se\">\\0</span><span class=\"s\">\\</span>\n<span class=\"s\">                darwinpcs</span><span class=\"se\">\\0</span><span class=\"s\">\\</span>\n<span class=\"s\">                -Os</span><span class=\"se\">\\0</span><span class=\"s\">&quot;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">..</span><span class=\"n\">base</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 203888596,
        "sender_full_name": "aspen",
        "timestamp": 1594760924
    },
    {
        "content": "<p>yeah no I'd bet money on this being <code>cc-rs</code></p>",
        "id": 203888723,
        "sender_full_name": "eddyb",
        "timestamp": 1594760995
    },
    {
        "content": "<p>especially since the only clue in the Rust target is at the very end</p>",
        "id": 203888770,
        "sender_full_name": "eddyb",
        "timestamp": 1594761004
    },
    {
        "content": "<p>and if <code>cc-rs</code> doesn't know about it, there's no way it would generate <code>--target=arm64e-...</code> clang invocations</p>",
        "id": 203888807,
        "sender_full_name": "eddyb",
        "timestamp": 1594761025
    },
    {
        "content": "<p>partially off topic but I am actually wearing a hoodie that has \"ARM64E\" printed on the left arm right now</p>",
        "id": 203888827,
        "sender_full_name": "aspen",
        "timestamp": 1594761040
    },
    {
        "content": "<p>lol</p>",
        "id": 203888836,
        "sender_full_name": "aspen",
        "timestamp": 1594761043
    },
    {
        "content": "<p>try the <code>file build/*/stage*-std/*/release/build/*/out/*.o</code> command and I bet you'll see that it's those</p>",
        "id": 203888855,
        "sender_full_name": "eddyb",
        "timestamp": 1594761054
    },
    {
        "content": "<p><a href=\"https://github.com/shepmaster/rust/blob/silicon/silicon/README.md#troubleshooting\">https://github.com/shepmaster/rust/blob/silicon/silicon/README.md#troubleshooting</a></p>",
        "id": 203889440,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594761363
    },
    {
        "content": "<p>sorry this might take a while</p>",
        "id": 203889450,
        "sender_full_name": "aspen",
        "timestamp": 1594761369
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton/cc-rs/commit/c9a3544f5aa492cea77901609a5658a896341ffe\">https://github.com/alexcrichton/cc-rs/commit/c9a3544f5aa492cea77901609a5658a896341ffe</a></p>",
        "id": 203889476,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594761393
    },
    {
        "content": "<p>also btw i'm trying to build for arm64e on iOS, not macOS</p>",
        "id": 203889488,
        "sender_full_name": "aspen",
        "timestamp": 1594761400
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/libc/commit/8c2daaea67da75f4b4234cf116432a1ab49c72c6\">https://github.com/rust-lang/libc/commit/8c2daaea67da75f4b4234cf116432a1ab49c72c6</a></p>",
        "id": 203889521,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594761426
    },
    {
        "content": "<p>but thanks it's probably still useful</p>",
        "id": 203889525,
        "sender_full_name": "aspen",
        "timestamp": 1594761428
    },
    {
        "content": "<p>woops i accidentally did <code>gfind -name Cargo.toml -delete</code> instead of <code>gfind -name Cargo.lock -delete</code></p>",
        "id": 203891609,
        "sender_full_name": "aspen",
        "timestamp": 1594762581
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312033\">aspen</span> <a href=\"#narrow/stream/242906-t-compiler.2Farm/topic/arm64e.20rustc.20using.20Apple.20LLVM/near/203889450\">said</a>:</p>\n<blockquote>\n<p>sorry this might take a while</p>\n</blockquote>\n<p>ah I thought you just had a build laying around</p>",
        "id": 203892945,
        "sender_full_name": "eddyb",
        "timestamp": 1594763512
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0597]: `queries` does not live long enough\n   --&gt; src/librustc_interface/queries.rs:386:21\n    |\n386 |         let ret = f(&amp;queries);\n    |                     ^^^^^^^^ borrowed value does not live long enough\n...\n397 |     }\n    |     -\n    |     |\n    |     `queries` dropped here while still borrowed\n    |     borrow might be used here, when `queries` is dropped and runs the destructor for type `queries::Queries&lt;&#39;_&gt;`\n``` i didn&#39;t even touch this file\n</code></pre></div>",
        "id": 203898137,
        "sender_full_name": "aspen",
        "timestamp": 1594767249
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/242906-t-compiler.2Farm/topic/arm64e.20rustc.20using.20Apple.20LLVM/near/203892945\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"312033\">aspen</span> <a href=\"#narrow/stream/242906-t-compiler.2Farm/topic/arm64e.20rustc.20using.20Apple.20LLVM/near/203889450\">said</a>:</p>\n<blockquote>\n<p>sorry this might take a while</p>\n</blockquote>\n<p>ah I thought you just had a build laying around</p>\n</blockquote>\n<p>no it's been a while since i tried this and i wanna have a serious go at it</p>",
        "id": 203898157,
        "sender_full_name": "aspen",
        "timestamp": 1594767268
    },
    {
        "content": "<p>uhh how did you get that error?</p>",
        "id": 203902217,
        "sender_full_name": "eddyb",
        "timestamp": 1594770500
    },
    {
        "content": "<p>I mean, what command do you use, and/or what flags in <code>config.toml</code> (or <code>RUSTFLAGS</code>)?</p>",
        "id": 203902238,
        "sender_full_name": "eddyb",
        "timestamp": 1594770526
    },
    {
        "content": "<p>i'm pretty sure i messed up my repo</p>",
        "id": 203902412,
        "sender_full_name": "aspen",
        "timestamp": 1594770706
    },
    {
        "content": "<p>is there any way to regenerate all lockfiles?</p>",
        "id": 203904077,
        "sender_full_name": "aspen",
        "timestamp": 1594772266
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312033\">@aspen</span> what do you mean all? there's only one, at the top level</p>",
        "id": 203905137,
        "sender_full_name": "eddyb",
        "timestamp": 1594773125
    },
    {
        "content": "<p>woops my bad, i discovered that lol</p>",
        "id": 203905143,
        "sender_full_name": "aspen",
        "timestamp": 1594773136
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/242906-t-compiler.2Farm/topic/arm64e.20rustc.20using.20Apple.20LLVM/near/203905137\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"312033\">aspen</span> what do you mean all? there's only one, at the top level</p>\n</blockquote>\n<p>still getting the error</p>",
        "id": 203906147,
        "sender_full_name": "aspen",
        "timestamp": 1594774151
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">[llvm]</span>\n<span class=\"n\">optimize</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n<span class=\"n\">ccache</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n<span class=\"n\">ninja</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n<span class=\"n\">targets</span> <span class=\"o\">=</span> <span class=\"s\">&quot;AArch64;X86&quot;</span>\n<span class=\"n\">experimental-targets</span> <span class=\"o\">=</span> <span class=\"s\">&quot;&quot;</span>\n\n<span class=\"k\">[build]</span>\n<span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"k\">[&quot;aarch64-apple-ios-armv83&quot;]</span>\n<span class=\"n\">docs</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>\n\n<span class=\"k\">[install]</span>\n<span class=\"n\">prefix</span> <span class=\"o\">=</span> <span class=\"s\">&quot;/home/aleister/Builds/rust-arm64e&quot;</span>\n<span class=\"n\">sysconfdir</span> <span class=\"o\">=</span> <span class=\"s\">&quot;etc&quot;</span>\n<span class=\"n\">localstatedir</span> <span class=\"o\">=</span> <span class=\"s\">&quot;var/lib&quot;</span>\n\n<span class=\"k\">[rust]</span>\n<span class=\"n\">optimize</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n<span class=\"n\">incremental</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n<span class=\"n\">parallel-compiler</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n</code></pre></div>",
        "id": 203906155,
        "sender_full_name": "aspen",
        "timestamp": 1594774163
    },
    {
        "content": "<p>oh lmao</p>",
        "id": 203906169,
        "sender_full_name": "eddyb",
        "timestamp": 1594774195
    },
    {
        "content": "<p>turn off <code>parallel-compiler</code></p>",
        "id": 203906170,
        "sender_full_name": "eddyb",
        "timestamp": 1594774201
    },
    {
        "content": "<p>I wonder if we lost the ability to CI that (cc <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span>)</p>",
        "id": 203906214,
        "sender_full_name": "eddyb",
        "timestamp": 1594774219
    },
    {
        "content": "<p>it's not production-ready anyway</p>",
        "id": 203906219,
        "sender_full_name": "eddyb",
        "timestamp": 1594774230
    },
    {
        "content": "<p>oh, oof</p>",
        "id": 203906224,
        "sender_full_name": "aspen",
        "timestamp": 1594774243
    },
    {
        "content": "<p>(and <code>optimize = true</code> is the default anyway btw, you only need <code>incremental = true</code>)</p>",
        "id": 203906235,
        "sender_full_name": "eddyb",
        "timestamp": 1594774251
    },
    {
        "content": "<p>same for <code>optimize = true</code> for <code>[llvm]</code></p>",
        "id": 203906241,
        "sender_full_name": "eddyb",
        "timestamp": 1594774262
    },
    {
        "content": "<p>it's on ci pretty sure</p>",
        "id": 203906247,
        "sender_full_name": "simulacrum",
        "timestamp": 1594774277
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> </p>\n<div class=\"codehilite\"><pre><span></span><code> error: failed to add native library /Users/aleister/Code/rust/build/x86_64-apple-darwin/stage2-std/aarch64-apple-ios-armv83/release/build/compiler_builtins-48f236aac7ca5deb/out/libcompiler-rt.a: file too small to be an archive\n\nerror: aborting due to previous error\n\nThe following warnings were emitted during compilation:\n\nwarning: warning: /Library/Developer/CommandLineTools/usr/bin/ranlib: archive library: /Users/aleister/Code/rust/build/x86_64-apple-darwin/stage2-std/aarch64-apple-ios-armv83/release/build/compiler_builtins-48f236aac7ca5deb/out/libcompiler-rt.a will be fat and ar(1) will not be able to operate on it\n\nerror: could not compile `compiler_builtins`.\n\nTo learn more, run the command again with --verbose.\n</code></pre></div>",
        "id": 203907615,
        "sender_full_name": "aspen",
        "timestamp": 1594775784
    },
    {
        "content": "<p>uh oh</p>",
        "id": 203907632,
        "sender_full_name": "eddyb",
        "timestamp": 1594775809
    },
    {
        "content": "<p>I have no idea how to deal with that. cc <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span></p>",
        "id": 203907638,
        "sender_full_name": "eddyb",
        "timestamp": 1594775821
    },
    {
        "content": "<p>also lovely spam of <code>'vortex' is not a recognized processor for this target (ignoring processor)</code></p>",
        "id": 203907728,
        "sender_full_name": "aspen",
        "timestamp": 1594775894
    },
    {
        "content": "<p>like 3k lines of just that</p>",
        "id": 203907736,
        "sender_full_name": "aspen",
        "timestamp": 1594775906
    },
    {
        "content": "<p>for <code>vortex</code> its being set in either target definition or via <code>-Ctarget-cpu</code>.</p>",
        "id": 203908661,
        "sender_full_name": "nagisa",
        "timestamp": 1594777193
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>file too small to be an archive\n</code></pre></div>\n\n\n<p>is almost certainly the outcome from the <code>ranlib</code> warning.</p>",
        "id": 203908806,
        "sender_full_name": "nagisa",
        "timestamp": 1594777328
    },
    {
        "content": "<p>you can try asking rustc to use the external archiver one that supports fat archives.</p>",
        "id": 203908824,
        "sender_full_name": "nagisa",
        "timestamp": 1594777368
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/55235\">https://github.com/rust-lang/rust/issues/55235</a> possibly is what you're hitting.</p>",
        "id": 203908946,
        "sender_full_name": "nagisa",
        "timestamp": 1594777522
    },
    {
        "content": "<p>looks like we might have removed the option to use the external archiver though</p>",
        "id": 203909051,
        "sender_full_name": "nagisa",
        "timestamp": 1594777650
    },
    {
        "content": "<p>We’re using the LLVM’s one.</p>",
        "id": 203909065,
        "sender_full_name": "nagisa",
        "timestamp": 1594777667
    },
    {
        "content": "<p>that’s <code>llvm::Archive</code> set of APIs.</p>",
        "id": 203909118,
        "sender_full_name": "nagisa",
        "timestamp": 1594777701
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error: build failed\ncommand did not execute successfully: &quot;/Users/aleister/Code/rust/build/x86_64-apple-darwin/stage0/bin/cargo&quot; &quot;build&quot; &quot;--target&quot; &quot;aarch64-apple-ios-armv83&quot; &quot;-Zbinary-dep-depinfo&quot; &quot;-j&quot; &quot;6&quot; &quot;--release&quot; &quot;--features&quot; &quot;panic-unwind compiler-builtins-c&quot; &quot;--manifest-path&quot; &quot;/Users/aleister/Code/rust/src/libtest/Cargo.toml&quot; &quot;--message-format&quot; &quot;json-render-diagnostics&quot;\nexpected success, got: exit code: 101\nfailed to run: /Users/aleister/Code/rust/build/bootstrap/debug/bootstrap build\nBuild completed unsuccessfully in 0:27:46\n</code></pre></div>",
        "id": 203909127,
        "sender_full_name": "aspen",
        "timestamp": 1594777721
    },
    {
        "content": "<p>Semi-unrelated, but is it possible to get Rust to dynamically link against an external LLVM?</p>",
        "id": 203909658,
        "sender_full_name": "aspen",
        "timestamp": 1594778428
    },
    {
        "content": "<p>Would be convenient for package managers.</p>",
        "id": 203909662,
        "sender_full_name": "aspen",
        "timestamp": 1594778440
    },
    {
        "content": "<p>yes.</p>",
        "id": 203909689,
        "sender_full_name": "nagisa",
        "timestamp": 1594778491
    },
    {
        "content": "<p>how?</p>",
        "id": 203909743,
        "sender_full_name": "aspen",
        "timestamp": 1594778527
    },
    {
        "content": "<p>specify <code>llvm-config</code> in config.toml. I think that’s it? Might be something more.</p>",
        "id": 203909749,
        "sender_full_name": "nagisa",
        "timestamp": 1594778535
    },
    {
        "content": "<p><code>llvm.link-shared = true</code> too.</p>",
        "id": 203909775,
        "sender_full_name": "nagisa",
        "timestamp": 1594778594
    },
    {
        "content": "<p>ah, nice</p>",
        "id": 203909995,
        "sender_full_name": "aspen",
        "timestamp": 1594778905
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> alright, i got the infamous libstd error</p>",
        "id": 203911240,
        "sender_full_name": "aspen",
        "timestamp": 1594780543
    },
    {
        "content": "<p><a href=\"https://ghostbin.co/paste/dwyfq\">https://ghostbin.co/paste/dwyfq</a></p>",
        "id": 203911293,
        "sender_full_name": "aspen",
        "timestamp": 1594780587
    },
    {
        "content": "<p>it's big so i had to bin it</p>",
        "id": 203911296,
        "sender_full_name": "aspen",
        "timestamp": 1594780593
    },
    {
        "content": "<p>uh oh</p>",
        "id": 203911319,
        "sender_full_name": "eddyb",
        "timestamp": 1594780640
    },
    {
        "content": "<p>hmm it looks like the <code>.rlib</code>s may be marked with the wrong arch?</p>",
        "id": 203911375,
        "sender_full_name": "eddyb",
        "timestamp": 1594780694
    },
    {
        "content": "<p>and here's the output of that file command: <a href=\"https://ghostbin.co/paste/ja6mw\">https://ghostbin.co/paste/ja6mw</a></p>",
        "id": 203911381,
        "sender_full_name": "aspen",
        "timestamp": 1594780706
    },
    {
        "content": "<p>huh</p>",
        "id": 203911416,
        "sender_full_name": "eddyb",
        "timestamp": 1594780767
    },
    {
        "content": "<p>so that's compiled correctly</p>",
        "id": 203911421,
        "sender_full_name": "eddyb",
        "timestamp": 1594780776
    },
    {
        "content": "<p>weird</p>",
        "id": 203911489,
        "sender_full_name": "aspen",
        "timestamp": 1594780831
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312033\">@aspen</span> okay what about <code>file build/x86_64-apple-darwin/stage2-std/aarch64-apple-ios-armv83/release/deps/libcore-*.rlib</code>?</p>",
        "id": 203911490,
        "sender_full_name": "eddyb",
        "timestamp": 1594780831
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <code>build/x86_64-apple-darwin/stage2-std/aarch64-apple-ios-armv83/release/deps/libcore-6060273b593c2b48.rlib: current ar archive</code></p>\n<p>that's it</p>",
        "id": 203911626,
        "sender_full_name": "aspen",
        "timestamp": 1594781047
    },
    {
        "content": "<p>disappointing :P</p>",
        "id": 203911629,
        "sender_full_name": "eddyb",
        "timestamp": 1594781060
    },
    {
        "content": "<p>you can try <code>ar tv</code> on it</p>",
        "id": 203911636,
        "sender_full_name": "eddyb",
        "timestamp": 1594781073
    },
    {
        "content": "<p>maybe that lists obj file arch</p>",
        "id": 203911639,
        "sender_full_name": "eddyb",
        "timestamp": 1594781080
    },
    {
        "content": "<p><a href=\"https://ghostbin.co/paste/pj7e3\">https://ghostbin.co/paste/pj7e3</a></p>",
        "id": 203911703,
        "sender_full_name": "aspen",
        "timestamp": 1594781177
    },
    {
        "content": "<p>nope it's just basically ls -la</p>",
        "id": 203911705,
        "sender_full_name": "aspen",
        "timestamp": 1594781185
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> ```<br>\n❯ lipo -info  build/x86_64-apple-darwin/stage2-std/aarch64-apple-ios-armv83/release/deps/libcore-6060273b593c2b48.rlib<br>\nNon-fat file: build/x86_64-apple-darwin/stage2-std/aarch64-apple-ios-armv83/release/deps/libcore-6060273b593c2b48.rlib is architecture: arm64</p>\n<div class=\"codehilite\"><pre><span></span><code>\n</code></pre></div>",
        "id": 203911724,
        "sender_full_name": "aspen",
        "timestamp": 1594781236
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312033\">@aspen</span> okay stackoverflow says <code>lipo -info</code> might work</p>",
        "id": 203911725,
        "sender_full_name": "eddyb",
        "timestamp": 1594781236
    },
    {
        "content": "<p>lol</p>",
        "id": 203911727,
        "sender_full_name": "eddyb",
        "timestamp": 1594781240
    },
    {
        "content": "<p>okay so we create the <code>ar</code> incorrectly, I'm guessing? no idea what determines that though</p>",
        "id": 203911788,
        "sender_full_name": "eddyb",
        "timestamp": 1594781293
    },
    {
        "content": "<p>wait</p>",
        "id": 203911789,
        "sender_full_name": "eddyb",
        "timestamp": 1594781293
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312033\">@aspen</span> <code>ar x core-6060273b593c2b48.11ngxyrhxgjdepis.rcgu.o build/x86_64-apple-darwin/stage2-std/aarch64-apple-ios-armv83/release/deps/libcore-6060273b593c2b48.rlib</code> maybe? the order might be swapped</p>",
        "id": 203911820,
        "sender_full_name": "eddyb",
        "timestamp": 1594781383
    },
    {
        "content": "<p>and then <code>file</code> the <code>.o</code></p>",
        "id": 203911829,
        "sender_full_name": "eddyb",
        "timestamp": 1594781390
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>❯ file core-6060273b593c2b48.11ngxyrhxgjdepis.rcgu.o\ncore-6060273b593c2b48.11ngxyrhxgjdepis.rcgu.o: Mach-O 64-bit object arm64\n</code></pre></div>",
        "id": 203911876,
        "sender_full_name": "aspen",
        "timestamp": 1594781435
    },
    {
        "content": "<p>so we're not passing the right LLVM target :/</p>",
        "id": 203911887,
        "sender_full_name": "eddyb",
        "timestamp": 1594781470
    },
    {
        "content": "<p><code>llvm_target: \"arm64e-apple-ios\".to_string(),</code></p>",
        "id": 203911952,
        "sender_full_name": "aspen",
        "timestamp": 1594781548
    },
    {
        "content": "<p>yet if I do <code>-arch arm64e --target=arm64e-apple-ios</code> with the Apple clang, it generates a proper arm64e binary</p>",
        "id": 203911961,
        "sender_full_name": "aspen",
        "timestamp": 1594781576
    },
    {
        "content": "<p>does it work without <code>-arch arm64e</code>?</p>",
        "id": 203911967,
        "sender_full_name": "eddyb",
        "timestamp": 1594781593
    },
    {
        "content": "<p>dunno never tried it</p>",
        "id": 203911968,
        "sender_full_name": "aspen",
        "timestamp": 1594781598
    },
    {
        "content": "<p>maybe it passes <code>-arch</code> to LLVM in a way we don't</p>",
        "id": 203911970,
        "sender_full_name": "eddyb",
        "timestamp": 1594781604
    },
    {
        "content": "<p>but i should've modified cc-rs to pass that</p>",
        "id": 203911972,
        "sender_full_name": "aspen",
        "timestamp": 1594781604
    },
    {
        "content": "<p>should be easy to try on an empty file</p>",
        "id": 203911983,
        "sender_full_name": "eddyb",
        "timestamp": 1594781617
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"p\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"s\">&quot;darwin&quot;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"p\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"s\">&quot;ios&quot;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"p\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"s\">&quot;x86_64&quot;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">cmd</span><span class=\"p\">.</span><span class=\"n\">args</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"s\">&quot;-arch&quot;</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">cmd</span><span class=\"p\">.</span><span class=\"n\">args</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"s\">&quot;x86_64&quot;</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"p\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"s\">&quot;aarch64&quot;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">cmd</span><span class=\"p\">.</span><span class=\"n\">args</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"s\">&quot;-arch&quot;</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">abi</span><span class=\"p\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"s\">&quot;armv83&quot;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"n\">cmd</span><span class=\"p\">.</span><span class=\"n\">args</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"s\">&quot;arm64e&quot;</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"n\">cmd</span><span class=\"p\">.</span><span class=\"n\">args</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"s\">&quot;arm64&quot;</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 203912051,
        "sender_full_name": "aspen",
        "timestamp": 1594781723
    },
    {
        "content": "<p>let me eprintln the abi</p>",
        "id": 203912058,
        "sender_full_name": "aspen",
        "timestamp": 1594781744
    },
    {
        "content": "<p><code>ABI is armv83</code> ok good</p>",
        "id": 203912318,
        "sender_full_name": "aspen",
        "timestamp": 1594782048
    },
    {
        "content": "<p>oop i might've found the problem</p>",
        "id": 203912397,
        "sender_full_name": "aspen",
        "timestamp": 1594782180
    },
    {
        "content": "<p>cc-rs as expected</p>",
        "id": 203912398,
        "sender_full_name": "aspen",
        "timestamp": 1594782182
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">            </span><span class=\"s\">&quot;arm64&quot;</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">&quot;aarch64&quot;</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">abi</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s\">&quot;armv83&quot;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">ArchSpec</span>::<span class=\"n\">Device</span><span class=\"p\">(</span><span class=\"s\">&quot;arm64e&quot;</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">ArchSpec</span>::<span class=\"n\">Device</span><span class=\"p\">(</span><span class=\"s\">&quot;arm64&quot;</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">},</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 203912461,
        "sender_full_name": "aspen",
        "timestamp": 1594782288
    },
    {
        "content": "<p>ok that should work</p>",
        "id": 203912464,
        "sender_full_name": "aspen",
        "timestamp": 1594782291
    },
    {
        "content": "<p>actually,</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">cmd</span><span class=\"p\">.</span><span class=\"n\">args</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"s\">&quot;--triple=arm64e-apple-ios&quot;</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"n\">ArchSpec</span>::<span class=\"n\">Device</span><span class=\"p\">(</span><span class=\"s\">&quot;arm64e&quot;</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 203912688,
        "sender_full_name": "aspen",
        "timestamp": 1594782630
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> it errors with that despite me not being able to find arm64 by itself in an entire -vvv log</p>",
        "id": 203976737,
        "sender_full_name": "aspen",
        "timestamp": 1594829562
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/8M0MUuVXWRVr91oHd8UturnI/build.log\">build.log</a></p>",
        "id": 203976880,
        "sender_full_name": "aspen",
        "timestamp": 1594829614
    },
    {
        "content": "<p>wait a seconddd<br>\nwhat's this</p>\n<div class=\"codehilite\"><pre><span></span><code>   Compiling std v0.0.0 (/Users/aleister/Code/rust/src/libstd)\n     Running `CARGO=/Users/aleister/Code/rust/build/x86_64-apple-darwin/stage0/bin/cargo CARGO_MANIFEST_DIR=/Users/aleister/Code/cc-rs CARGO_PKG_AUTHORS=&#39;Alex Crichton &lt;alex@alexcrichton.com&gt;&#39; CARGO_PKG_DESCRIPTION=&#39;A build-time dependency for Cargo build scripts to assist in invoking the native\nC compiler to compile native C code into a static archive to be linked into Rust\ncode.\n&#39; CARGO_PKG\n</code></pre></div>",
        "id": 203976908,
        "sender_full_name": "aspen",
        "timestamp": 1594829631
    },
    {
        "content": "<p>wait nvm that's just a package description that wrapped lmao</p>",
        "id": 203977044,
        "sender_full_name": "aspen",
        "timestamp": 1594829680
    },
    {
        "content": "<p>Do I need to edit libc or compiler_builtins?</p>",
        "id": 203977327,
        "sender_full_name": "aspen",
        "timestamp": 1594829837
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> got any idea on what's going on with this mess?</p>",
        "id": 204039698,
        "sender_full_name": "aspen",
        "timestamp": 1594868513
    },
    {
        "content": "<p>Not without spending time to look into this.</p>",
        "id": 204072566,
        "sender_full_name": "nagisa",
        "timestamp": 1594900097
    },
    {
        "content": "<p>alright</p>",
        "id": 204073001,
        "sender_full_name": "aspen",
        "timestamp": 1594900445
    },
    {
        "content": "<p>any way I can help figure this out?</p>",
        "id": 204092234,
        "sender_full_name": "aspen",
        "timestamp": 1594910274
    },
    {
        "content": "<p>So wait, how are rlibs generated?</p>",
        "id": 204247862,
        "sender_full_name": "aspen",
        "timestamp": 1595013684
    },
    {
        "content": "<p>What's responsible for compiling and packing their objects specifically?</p>",
        "id": 204247877,
        "sender_full_name": "aspen",
        "timestamp": 1595013693
    },
    {
        "content": "<p>The backend (rustc_codegen_llvm) is responsible for emitting object files and packing them into an ar archive. This is then given the <code>.rlib</code> extension.</p>",
        "id": 204248228,
        "sender_full_name": "bjorn3",
        "timestamp": 1595013862
    },
    {
        "content": "<p>Hm, why are the emitted object files ending up being <code>arm64</code> rather than <code>arm64e</code> even tho a -vvv build shows all <code>-arch arm64e</code> and no <code>-arch arm64</code></p>",
        "id": 204248273,
        "sender_full_name": "aspen",
        "timestamp": 1595013904
    },
    {
        "content": "<p>Are the rustc generated object files <code>arm64</code> or the object files originating from a C compiler?</p>",
        "id": 204248390,
        "sender_full_name": "bjorn3",
        "timestamp": 1595013969
    },
    {
        "content": "<p>the object files within the rlibs</p>",
        "id": 204248414,
        "sender_full_name": "aspen",
        "timestamp": 1595013993
    },
    {
        "content": "<p>this results in compiling rustc to fail</p>",
        "id": 204248419,
        "sender_full_name": "aspen",
        "timestamp": 1595013998
    },
    {
        "content": "<p>Do the object files in question have the <code>.rcgu.o</code> extension?</p>",
        "id": 204248427,
        "sender_full_name": "bjorn3",
        "timestamp": 1595014004
    },
    {
        "content": "<p>yes</p>",
        "id": 204248440,
        "sender_full_name": "aspen",
        "timestamp": 1595014019
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>❯ file core-6060273b593c2b48.11ngxyrhxgjdepis.rcgu.o\ncore-6060273b593c2b48.11ngxyrhxgjdepis.rcgu.o: Mach-O 64-bit object arm64\n</code></pre></div>",
        "id": 204248447,
        "sender_full_name": "aspen",
        "timestamp": 1595014022
    },
    {
        "content": "<p>What is the target spec?</p>",
        "id": 204248474,
        "sender_full_name": "bjorn3",
        "timestamp": 1595014056
    },
    {
        "content": "<p><code>arm64e-apple-ios</code><br>\nI am compiling rustc using the Apple LLVM, where this IS a valid triple (on Apple clang, you can do <code>-arch arm64e --target arm64e-apple-ios</code></p>",
        "id": 204248538,
        "sender_full_name": "aspen",
        "timestamp": 1595014086
    },
    {
        "content": "<p>What is the definition in librustc_target?</p>",
        "id": 204248652,
        "sender_full_name": "bjorn3",
        "timestamp": 1595014198
    },
    {
        "content": "<p>that IS it</p>",
        "id": 204248704,
        "sender_full_name": "aspen",
        "timestamp": 1595014208
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span>  <a href=\"https://github.com/Crabapple-iOS/rust/blob/arm64e-apple-ios/src/librustc_target/spec/aarch64_apple_ios_armv83.rs\">https://github.com/Crabapple-iOS/rust/blob/arm64e-apple-ios/src/librustc_target/spec/aarch64_apple_ios_armv83.rs</a></p>",
        "id": 204248750,
        "sender_full_name": "aspen",
        "timestamp": 1595014250
    },
    {
        "content": "<p>If you are using apples LLVM fork it seems that it should work: <a href=\"https://github.com/apple/llvm-project/pull/1297\">https://github.com/apple/llvm-project/pull/1297</a></p>",
        "id": 204249090,
        "sender_full_name": "bjorn3",
        "timestamp": 1595014446
    },
    {
        "content": "<p>yes</p>",
        "id": 204249123,
        "sender_full_name": "aspen",
        "timestamp": 1595014476
    },
    {
        "content": "<p>i suspect i may need to edit libc or compiler_builtins</p>",
        "id": 204249132,
        "sender_full_name": "aspen",
        "timestamp": 1595014489
    },
    {
        "content": "<p>wait</p>",
        "id": 204249152,
        "sender_full_name": "aspen",
        "timestamp": 1595014506
    },
    {
        "content": "<p>that's  newer branch</p>",
        "id": 204249153,
        "sender_full_name": "aspen",
        "timestamp": 1595014511
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> that's clang code tho?</p>",
        "id": 204249310,
        "sender_full_name": "aspen",
        "timestamp": 1595014621
    },
    {
        "content": "<p>Oops. I traced the transitive caller back to a piece of code that adds <code>-arch</code> as LLVM arg together with the return value of that function.</p>",
        "id": 204252736,
        "sender_full_name": "bjorn3",
        "timestamp": 1595016671
    },
    {
        "content": "<p>Hm?</p>",
        "id": 204252775,
        "sender_full_name": "aspen",
        "timestamp": 1595016707
    },
    {
        "content": "<p>well i still added it locally</p>",
        "id": 204252777,
        "sender_full_name": "aspen",
        "timestamp": 1595016711
    },
    {
        "content": "<p>Have you set <code>options.llvm_args</code> in the target spec?</p>",
        "id": 204252936,
        "sender_full_name": "bjorn3",
        "timestamp": 1595016771
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span>  nope but <code>LinkArgs</code> is set</p>",
        "id": 204253179,
        "sender_full_name": "aspen",
        "timestamp": 1595016881
    },
    {
        "content": "<p>Try setting <code>options.llvm_args</code> to <code>vec![\"-arch\".to_string(), \"arm64e\".to_string()]</code>.</p>",
        "id": 204253390,
        "sender_full_name": "bjorn3",
        "timestamp": 1595017022
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> </p>\n<div class=\"codehilite\"><pre><span></span><code>rustc: Unknown command line argument &#39;-arch&#39;.  Try: &#39;rustc --help&#39;\nrustc: Did you mean &#39;-h&#39;?\nrustc: Unknown command line argument &#39;arm64e&#39;.  Try: &#39;rustc --help&#39;\nrustc: Unknown command line argument &#39;--target&#39;.  Try: &#39;rustc --help&#39;\nrustc: Did you mean &#39;--stats&#39;?\nrustc: Unknown command line argument &#39;arm64e-apple-ios&#39;.  Try: &#39;rustc --help&#39;\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">            </span><span class=\"n\">llvm_args</span>: <span class=\"nc\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"s\">&quot;-arch&quot;</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"s\">&quot;arm64e&quot;</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"s\">&quot;--target&quot;</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"s\">&quot;arm64e-apple-ios&quot;</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">],</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204255152,
        "sender_full_name": "aspen",
        "timestamp": 1595017755
    },
    {
        "content": "<p>That was a linker arg, not an LLVM arch. Oops. <a href=\"https://github.com/llvm/llvm-project/blob/42170b3b4e1f7d30b377a3da07c354feae9b852e/clang/lib/Driver/ToolChains/Darwin.cpp#L162\">https://github.com/llvm/llvm-project/blob/42170b3b4e1f7d30b377a3da07c354feae9b852e/clang/lib/Driver/ToolChains/Darwin.cpp#L162</a></p>",
        "id": 204255467,
        "sender_full_name": "bjorn3",
        "timestamp": 1595017909
    },
    {
        "content": "<p>I was just doing the exact args you pass to clang.</p>",
        "id": 204255631,
        "sender_full_name": "aspen",
        "timestamp": 1595017976
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/242906-t-compiler.2Farm/topic/arm64e.20rustc.20using.20Apple.20LLVM/near/204255467\">said</a>:</p>\n<blockquote>\n<p>That was a linker arg, not an LLVM arch. Oops. <a href=\"https://github.com/llvm/llvm-project/blob/42170b3b4e1f7d30b377a3da07c354feae9b852e/clang/lib/Driver/ToolChains/Darwin.cpp#L162\">https://github.com/llvm/llvm-project/blob/42170b3b4e1f7d30b377a3da07c354feae9b852e/clang/lib/Driver/ToolChains/Darwin.cpp#L162</a></p>\n</blockquote>\n<p>wait what'd you mean</p>",
        "id": 204267305,
        "sender_full_name": "aspen",
        "timestamp": 1595025318
    },
    {
        "content": "<p>I genuinely cannot think of why the object files would be generated as arm64.</p>",
        "id": 204318713,
        "sender_full_name": "aspen",
        "timestamp": 1595107868
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> I'm really sorry to ping again, but I can't find anyone else who might be able to help with this.</p>",
        "id": 204318903,
        "sender_full_name": "aspen",
        "timestamp": 1595108192
    },
    {
        "content": "<p>I think it's in codegen_llvm, actually.</p>",
        "id": 204319120,
        "sender_full_name": "aspen",
        "timestamp": 1595108549
    },
    {
        "content": "<p>all stage2-std objects are being built as arm64.</p>",
        "id": 204320378,
        "sender_full_name": "aspen",
        "timestamp": 1595110659
    },
    {
        "content": "<p>I’m not really in a position to help. I lack context for one and I’ve no idea about how Apple's toolchain operates, though I do know that it has some particularities unique to the platform.</p>",
        "id": 204322288,
        "sender_full_name": "nagisa",
        "timestamp": 1595114484
    },
    {
        "content": "<p>I would suggest you take the compiler at whatever stage you end up failing on and try building objects for most trivial rust files and verify they do things you expect.</p>",
        "id": 204322336,
        "sender_full_name": "nagisa",
        "timestamp": 1595114543
    },
    {
        "content": "<p>I wouldn’t be super surprised if you needed some additional cpu features or something along those lines set.</p>",
        "id": 204322342,
        "sender_full_name": "nagisa",
        "timestamp": 1595114591
    },
    {
        "content": "<p>being able to experiment with those kinds of things directly on the CLI would make your roundtrip times significantly shorter.</p>",
        "id": 204322347,
        "sender_full_name": "nagisa",
        "timestamp": 1595114618
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> um I think i found the issue... it's <code>-c</code> in the cc command</p>",
        "id": 204323605,
        "sender_full_name": "aspen",
        "timestamp": 1595117226
    },
    {
        "content": "<p>plausible, I guess. I doubt the plain object files will contain within them the architecture/target they're for.</p>",
        "id": 204323616,
        "sender_full_name": "nagisa",
        "timestamp": 1595117279
    },
    {
        "content": "<p>and when its archived the archiver could be making a best effort guess?</p>",
        "id": 204323655,
        "sender_full_name": "nagisa",
        "timestamp": 1595117300
    },
    {
        "content": "<p>As usual, it all boils down to cc-rs.</p>",
        "id": 204323670,
        "sender_full_name": "aspen",
        "timestamp": 1595117346
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> new error!</p>\n<div class=\"codehilite\"><pre><span></span><code>running: &quot;cc&quot; &quot;-O3&quot; &quot;-fPIC&quot; &quot;-arch&quot; &quot;arm64e&quot; &quot;--target=arm64e-apple-ios&quot; &quot;-arch&quot; &quot;arm64e&quot; &quot;-miphoneos-version-min=7.0&quot; &quot;-isysroot&quot; &quot;/Library/Developer/CommandLineTools/SDKs/iPhoneOS13.4.sdk&quot; &quot;-fembed-bitcode&quot; &quot;-fPIC&quot; &quot;-arch&quot; &quot;arm64e&quot; &quot;--target=arm64e-apple-ios&quot; &quot;-arch&quot; &quot;arm64e&quot; &quot;-miphoneos-version-min=7.0&quot; &quot;-isysroot&quot; &quot;/Library/Developer/CommandLineTools/SDKs/iPhoneOS13.4.sdk&quot; &quot;-fembed-bitcode&quot; &quot;-fno-builtin&quot; &quot;-fvisibility=hidden&quot; &quot;-ffreestanding&quot; &quot;-fomit-frame-pointer&quot; &quot;-DVISIBILITY_HIDDEN&quot; &quot;-o&quot; &quot;/Users/aleister/Code/rust/build/x86_64-apple-darwin/stage2-std/aarch64-apple-ios-armv83/release/build/compiler_builtins-651650f79ef2454c/out/absvdi2.o&quot; &quot;/Users/aleister/Code/rust/src/llvm-project/compiler-rt/lib/builtins/absvdi2.c&quot;\ncargo:warning=Undefined symbols for architecture arm64e:\ncargo:warning=  &quot;___compilerrt_abort_impl&quot;, referenced from:\ncargo:warning=      ___absvdi2 in absvdi2-de6259.o\ncargo:warning=  &quot;_main&quot;, referenced from:\ncargo:warning=     implicit entry/start for main executable\ncargo:warning=ld: symbol(s) not found for architecture arm64e\n</code></pre></div>",
        "id": 204323980,
        "sender_full_name": "aspen",
        "timestamp": 1595117965
    },
    {
        "content": "<p>Well… now that you removed the <code>-c</code> its trying to build an actual executable binary I think.</p>",
        "id": 204324102,
        "sender_full_name": "nagisa",
        "timestamp": 1595118158
    },
    {
        "content": "<p>which is probably… wrong.</p>",
        "id": 204324107,
        "sender_full_name": "nagisa",
        "timestamp": 1595118169
    },
    {
        "content": "<p>wait, what's -c do?</p>",
        "id": 204324109,
        "sender_full_name": "aspen",
        "timestamp": 1595118170
    },
    {
        "content": "<p>It makes the C compiler to stop after assembling (i.e. outputs an <code>.o</code> file)</p>",
        "id": 204324117,
        "sender_full_name": "nagisa",
        "timestamp": 1595118186
    },
    {
        "content": "<p>I suspect that what you might want to look into is not removing the <code>-c</code> but rather looking into where these <code>.o</code> files are archived into an <code>.a</code> (a static library)</p>",
        "id": 204324127,
        "sender_full_name": "nagisa",
        "timestamp": 1595118227
    },
    {
        "content": "<p>i thought .a's were just archives of .o's and nothing more</p>",
        "id": 204324203,
        "sender_full_name": "aspen",
        "timestamp": 1595118361
    },
    {
        "content": "<p>well \"just archives\" are just that, but they also (probably?) contain some metadata about their contents.</p>",
        "id": 204324250,
        "sender_full_name": "nagisa",
        "timestamp": 1595118410
    },
    {
        "content": "<p>Including, most likely the architecture these object files are meant for.</p>",
        "id": 204324314,
        "sender_full_name": "nagisa",
        "timestamp": 1595118523
    },
    {
        "content": "<p>that's my guess anyway.</p>",
        "id": 204324322,
        "sender_full_name": "nagisa",
        "timestamp": 1595118549
    },
    {
        "content": "<p>hm i looked, that's <code>ranlib</code>'s territory, setting arches</p>",
        "id": 204324375,
        "sender_full_name": "aspen",
        "timestamp": 1595118604
    },
    {
        "content": "<p>or well, <code>libtool</code></p>",
        "id": 204324393,
        "sender_full_name": "aspen",
        "timestamp": 1595118663
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> this is weird</p>\n<div class=\"codehilite\"><pre><span></span><code>❯ lipo -info &quot;/Users/aleister/Code/rust/build/x86_64-apple-darwin/stage2-std/aarch64-apple-ios-armv83/release/build/compiler_builtins-651650f79ef2454c/out/libcompiler-rt.a&quot;\nNon-fat file: /Users/aleister/Code/rust/build/x86_64-apple-darwin/stage2-std/aarch64-apple-ios-armv83/release/build/compiler_builtins-651650f79ef2454c/out/libcompiler-rt.a is architecture: arm64e\n</code></pre></div>",
        "id": 204353992,
        "sender_full_name": "aspen",
        "timestamp": 1595170160
    },
    {
        "content": "<p>oh hm, it's libstd and friends that are compiled wrong</p>",
        "id": 204354006,
        "sender_full_name": "aspen",
        "timestamp": 1595170198
    },
    {
        "content": "<p>How are <code>.rcgu.o</code> files created?</p>",
        "id": 204354074,
        "sender_full_name": "aspen",
        "timestamp": 1595170313
    },
    {
        "content": "<p>The object file write code is at <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_codegen_llvm/back/write.rs\">https://github.com/rust-lang/rust/blob/master/src/librustc_codegen_llvm/back/write.rs</a></p>",
        "id": 204354236,
        "sender_full_name": "bjorn3",
        "timestamp": 1595170463
    },
    {
        "content": "<p>thanks<br>\nsince it's just the libstd <code>.rcgu.o</code> files that are arm64</p>",
        "id": 204354242,
        "sender_full_name": "aspen",
        "timestamp": 1595170490
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> do you know why only libstd's .o files would be the wrong arch?</p>",
        "id": 204354372,
        "sender_full_name": "aspen",
        "timestamp": 1595170590
    },
    {
        "content": "<p>libcore is wrong too, right?</p>",
        "id": 204354383,
        "sender_full_name": "bjorn3",
        "timestamp": 1595170628
    },
    {
        "content": "<p>libcompiler-rt.a is correct, as it is created by the C compiler.</p>",
        "id": 204354387,
        "sender_full_name": "bjorn3",
        "timestamp": 1595170650
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/242906-t-compiler.2Farm/topic/arm64e.20rustc.20using.20Apple.20LLVM/near/204354383\">said</a>:</p>\n<blockquote>\n<p>libcore is wrong too, right?</p>\n</blockquote>\n<p>think so</p>",
        "id": 204354396,
        "sender_full_name": "aspen",
        "timestamp": 1595170680
    },
    {
        "content": "<p>I've tried using printlns to see if the correct triple gets passed, and it is?</p>",
        "id": 204354437,
        "sender_full_name": "aspen",
        "timestamp": 1595170692
    },
    {
        "content": "<p>and I'm using the Apple LLVM for this</p>",
        "id": 204354439,
        "sender_full_name": "aspen",
        "timestamp": 1595170700
    },
    {
        "content": "<p>rather than the rust LLVM</p>",
        "id": 204354441,
        "sender_full_name": "aspen",
        "timestamp": 1595170706
    },
    {
        "content": "<p>wait a sec</p>",
        "id": 204354819,
        "sender_full_name": "aspen",
        "timestamp": 1595171066
    },
    {
        "content": "<p>My llvm-project submodule was on the wrong branch? SOmehow?</p>",
        "id": 204355191,
        "sender_full_name": "aspen",
        "timestamp": 1595171404
    },
    {
        "content": "<p>You need to commit the submodule changes in the Rust repo.</p>",
        "id": 204355588,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595171916
    },
    {
        "content": "<p>Checkout the commit you want in llvm-project, then cd back up out of it and commit the llvm directory.</p>",
        "id": 204355890,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595172452
    },
    {
        "content": "<p>The build system resets the sub modules back to the checked in version.</p>",
        "id": 204355931,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595172484
    },
    {
        "content": "<p><code>aarch64-apple-ios-armv83</code> compiled succesfully</p>",
        "id": 204358137,
        "sender_full_name": "aspen",
        "timestamp": 1595175275
    },
    {
        "content": "<p>FWIW, <a href=\"https://github.com/rust-lang/rustc-dev-guide/pull/805\">https://github.com/rust-lang/rustc-dev-guide/pull/805</a></p>",
        "id": 204361900,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595180375
    },
    {
        "content": "<p>ha, nice</p>",
        "id": 204361954,
        "sender_full_name": "aspen",
        "timestamp": 1595180406
    },
    {
        "content": "<p>sadly this will have to stay in a fork rn, due to the fact that it uses an entirely different LLVM</p>",
        "id": 204361958,
        "sender_full_name": "aspen",
        "timestamp": 1595180418
    },
    {
        "content": "<p>yup. That's the way the AVR port was for 3-4 years</p>",
        "id": 204361967,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595180453
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312033\">@aspen</span> wait so this was entirely due to using non-Apple LLVM, the entire time?</p>",
        "id": 204362234,
        "sender_full_name": "eddyb",
        "timestamp": 1595180817
    },
    {
        "content": "<p>kind of a footgun, I wish git submodules weren't such a mess. if they were integrated better with switching branches, rebasing, etc. then <code>x.py</code> wouldn't have to forcefully update them and trash your work :/</p>",
        "id": 204362302,
        "sender_full_name": "eddyb",
        "timestamp": 1595180891
    },
    {
        "content": "<p>also, a commit in the outer repo isn't strictly necessary, but <code>git add src/llvm-project</code> is the minimum necessary</p>",
        "id": 204362310,
        "sender_full_name": "eddyb",
        "timestamp": 1595180916
    },
    {
        "content": "<p>Not doing a commit seems like another footgun waiting to go off.</p>",
        "id": 204362330,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595180970
    },
    {
        "content": "<p>the difference is once you do <code>git add</code>, it looks as if it's committed already to anything that's not actively trying to destroy changes</p>",
        "id": 204362392,
        "sender_full_name": "eddyb",
        "timestamp": 1595181072
    },
    {
        "content": "<p>like something would have to use <code>git reset</code> to undo that and that's a big nono to put in a tool that isn't a <code>git</code> frontend</p>",
        "id": 204362476,
        "sender_full_name": "eddyb",
        "timestamp": 1595181180
    },
    {
        "content": "<p>anyway yeah, commit is best, just saying it starts working at <code>git add</code> and beyond that it's your choice how permanent it is</p>",
        "id": 204362600,
        "sender_full_name": "eddyb",
        "timestamp": 1595181266
    },
    {
        "content": "<p>When working on AVR, my Rust branch was usually about 30-odd <code>git commit -m 'add cherry-picks'</code>. Easy enough to squash when I was done.</p>",
        "id": 204362669,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595181306
    },
    {
        "content": "<p>(this means you don't have to make a dozen \"outer\" commits if you're testing a dozen versions of <code>src/llvm-project</code>, such as when tweaking things around)</p>",
        "id": 204362674,
        "sender_full_name": "eddyb",
        "timestamp": 1595181312
    },
    {
        "content": "<p>then again, I kinda learned this the hard way so maybe nobody should listen to me :P</p>",
        "id": 204362739,
        "sender_full_name": "eddyb",
        "timestamp": 1595181364
    },
    {
        "content": "<p>I think everyone touching LLVM learns that your local changes are checked out in the hard way.</p>",
        "id": 204362760,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595181419
    },
    {
        "content": "<p>I'm just mad submodules don't have sane enough defaults to make this a non-problem <em>sigh</em></p>",
        "id": 204362773,
        "sender_full_name": "eddyb",
        "timestamp": 1595181468
    },
    {
        "content": "<p>I guess there is one alternative... have <code>x.py</code> iterate through <code>git reflog</code> and look for a past \"outer\" commit which is responsible for the current state of the submodule, suggesting that it's <em>stale</em>, as opposed to <em>locally modified</em></p>",
        "id": 204362892,
        "sender_full_name": "eddyb",
        "timestamp": 1595181559
    },
    {
        "content": "<p>but that's more of a form of protest than a reasonable path to go down</p>",
        "id": 204362910,
        "sender_full_name": "eddyb",
        "timestamp": 1595181592
    },
    {
        "content": "<p>And whatever is happening with clippy / rustfmt (I forget which) with subtrees</p>",
        "id": 204364087,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595182617
    },
    {
        "content": "<p>just clippy for now, but it's so much better omg</p>",
        "id": 204364234,
        "sender_full_name": "eddyb",
        "timestamp": 1595182906
    },
    {
        "content": "<p>submodules should be considered an anti-pattern for \"downstream\" code that depends on often-changing details of the parent repo</p>",
        "id": 204364283,
        "sender_full_name": "eddyb",
        "timestamp": 1595182968
    },
    {
        "content": "<p>whereas LLVM would be \"upstream\" I guess</p>",
        "id": 204364295,
        "sender_full_name": "eddyb",
        "timestamp": 1595182996
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/242906-t-compiler.2Farm/topic/arm64e.20rustc.20using.20Apple.20LLVM/near/204362234\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"312033\">aspen</span> wait so this was entirely due to using non-Apple LLVM, the entire time?</p>\n</blockquote>\n<p>yeah pretty much</p>",
        "id": 204373906,
        "sender_full_name": "aspen",
        "timestamp": 1595198460
    },
    {
        "content": "<p>i'd changed the branch</p>",
        "id": 204373908,
        "sender_full_name": "aspen",
        "timestamp": 1595198463
    },
    {
        "content": "<p>and I'd thought I'd changed it properly</p>",
        "id": 204373910,
        "sender_full_name": "aspen",
        "timestamp": 1595198470
    },
    {
        "content": "<p>but a <code>git reset --hard</code> proved me otherwise</p>",
        "id": 204373911,
        "sender_full_name": "aspen",
        "timestamp": 1595198489
    },
    {
        "content": "<p>Here's the Rust patch: <a href=\"https://github.com/luxxxxy/Rust-iOS-Nightlies/blob/master/patches/rust.diff\">https://github.com/luxxxxy/Rust-iOS-Nightlies/blob/master/patches/rust.diff</a><br>\nThe LLVM patch: <a href=\"https://github.com/luxxxxy/Rust-iOS-Nightlies/blob/master/patches/llvm.diff\">https://github.com/luxxxxy/Rust-iOS-Nightlies/blob/master/patches/llvm.diff</a></p>\n<p>neither of these can ever be actually PR'd lmao</p>",
        "id": 204373915,
        "sender_full_name": "aspen",
        "timestamp": 1595198509
    },
    {
        "content": "<p>Not as-is maybe, but it’s a good start to when llvm upstream gets support.</p>",
        "id": 204376058,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595202596
    },
    {
        "content": "<p>yeah but then someone will probably try to name it <code>aarch64e</code> or something stupid like that</p>",
        "id": 204376603,
        "sender_full_name": "aspen",
        "timestamp": 1595203661
    },
    {
        "content": "<p>... wait does the LLVM IR need to have PAC instructions?</p>",
        "id": 204377457,
        "sender_full_name": "aspen",
        "timestamp": 1595205237
    },
    {
        "content": "<p>t-compiler/llvm thread: <a href=\"#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/How.20to.20get.20rustc.20to.20generate.20LLVM.20IR.20differently.3F/near/204378955\">https://rust-lang.zulipchat.com/#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/How.20to.20get.20rustc.20to.20generate.20LLVM.20IR.20differently.3F/near/204378955</a></p>",
        "id": 204379006,
        "sender_full_name": "aspen",
        "timestamp": 1595208160
    },
    {
        "content": "<p>I will be getting a transition kit on the 11th <span aria-label=\"confetti\" class=\"emoji emoji-1f38a\" role=\"img\" title=\"confetti\">:confetti:</span></p>",
        "id": 204813867,
        "sender_full_name": "Steve Klabnik",
        "timestamp": 1595518674
    },
    {
        "content": "<p>hello from... a computer</p>",
        "id": 205660663,
        "sender_full_name": "Steve Klabnik",
        "timestamp": 1596250827
    },
    {
        "content": "<p>I am interested in trying to work on this if there's anything you all need help with!</p>",
        "id": 205660668,
        "sender_full_name": "Steve Klabnik",
        "timestamp": 1596250844
    },
    {
        "content": "<p>There’s been a fair amount of work in <a href=\"#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/Pointer.20authentication.20support.20in.20Rust's.20LLVM.20codegen\">this stream</a>.</p>",
        "id": 205695155,
        "sender_full_name": "nagisa",
        "timestamp": 1596310560
    },
    {
        "content": "<p>It's also worth pointing out that one arbitrary Apple developer said \"don't even worry about trying to do this yet\" (specifically for arm64<strong>e</strong>, so it seems likely that this won't be any kind of requirement for the first release of Intel Macs.</p>",
        "id": 205749701,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1596413084
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> Apple the company has announced they are not going to provide arm64e to users yet.</p>",
        "id": 205769874,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1596442869
    },
    {
        "content": "<p><a href=\"https://developer.apple.com/documentation/security/preparing_your_app_to_work_with_pointer_authentication\">https://developer.apple.com/documentation/security/preparing_your_app_to_work_with_pointer_authentication</a></p>\n<blockquote>\n<p>App Store Connect and Testflight don’t yet accept submissions with an arm64e slice. Xcode removes this slice from your app bundle when you upload it.</p>\n</blockquote>",
        "id": 205770065,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1596443019
    },
    {
        "content": "<p>You can build apps with it right now though, you just can’t distribute them on Apple’s platforms.</p>",
        "id": 205770297,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1596443184
    }
]