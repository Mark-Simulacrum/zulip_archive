[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> Hi, I'm trying the steps on a DTK soonish. A small note on the building instructions on the readme page: any reasons against <code>xcrun -show-sdk-path</code> for the sdk path? and on a simimlar note: is the 11.5 deployment target intentional? or was 10.15.5 the intended deployment target and this is just a typo?</p>",
        "id": 203656889,
        "sender_full_name": "Dominik Wagner",
        "timestamp": 1594581647
    },
    {
        "content": "<p>You mean using that tool like <code>ENV=$(xcrun...)</code>?</p>",
        "id": 203657065,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594581966
    },
    {
        "content": "<p>And in my latest version, (<a href=\"https://github.com/shepmaster/rust/blob/silicon/silicon/README.md\">https://github.com/shepmaster/rust/blob/silicon/silicon/README.md</a>) I switched to <code>11.0</code></p>",
        "id": 203657095,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594582046
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> Yes, or with backticks. (forgot to double the backticks here to escape them)</p>",
        "id": 203657681,
        "sender_full_name": "Dominik Wagner",
        "timestamp": 1594583076
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> oh - should i go <code>silicon</code> and not <code>silicon-bootstrap</code>?</p>",
        "id": 203657700,
        "sender_full_name": "Dominik Wagner",
        "timestamp": 1594583145
    },
    {
        "content": "<p>I’ve stopped using backticks like that due to them not being nestable. But sure. </p>\n<p>The reason is that I didn’t know about it. I’ll try that the next time I’m at a computer.</p>",
        "id": 203657776,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594583266
    },
    {
        "content": "<p>Yeah, try the silicon branch. Slightly smaller steps.</p>",
        "id": 203657856,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594583379
    },
    {
        "content": "<p>As time progresses, the instructions should shrink to zero, ideally.</p>",
        "id": 203657912,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594583431
    },
    {
        "content": "<p>Ah, the forks of the other two projects aren't needed anymore? nice.</p>",
        "id": 203657926,
        "sender_full_name": "Dominik Wagner",
        "timestamp": 1594583463
    },
    {
        "content": "<p>Waiting for libc to release a new version, then will bump then in the compiler, then will add the target, then will get the target in the bootstrap compiler, then the entire first section can disappear.</p>",
        "id": 203657941,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594583517
    },
    {
        "content": "<p>If you want to support cross compiling, leaving the DEPLOYMENT_TARGET at 10.15.5 is probably best. Especially because Apple currently still isn't fully canonically at 11.0 but still at 10.16 for the current Big Sur Intel Betas.</p>",
        "id": 203659487,
        "sender_full_name": "Dominik Wagner",
        "timestamp": 1594585549
    },
    {
        "content": "<p>(not at building the cross compiler yet, but I see you have some of your paths hardcoded into the config.toml) (cargo, rustc and rustfmt) - maybe <code>$ROOT</code> as base works in those paths too?</p>",
        "id": 203659640,
        "sender_full_name": "Dominik Wagner",
        "timestamp": 1594585743
    },
    {
        "content": "<blockquote>\n<p>because Apple currently still isn't fully canonically at 11.0 but still at 10.16 for the current Big Sur Intel Betas.</p>\n</blockquote>\n<p>Can you explain more about this?</p>",
        "id": 203659781,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594585999
    },
    {
        "content": "<blockquote>\n<p>maybe <code>$ROOT</code> as base works in those paths too?</p>\n</blockquote>\n<p>Another thing I had no knowledge about!</p>",
        "id": 203659790,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594586025
    },
    {
        "content": "<p>Although I only see </p>\n<div class=\"codehilite\"><pre><span></span><code>../src/bootstrap/bootstrap.py\n926:    build.build_dir = os.path.abspath(build_dir.replace(&quot;$ROOT&quot;, build.rust_root))\n</code></pre></div>",
        "id": 203659846,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594586100
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/242906-t-compiler.2Farm/topic/macOS.20following.20the.20cross-compile.20instructions/near/203659790\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>maybe <code>$ROOT</code> as base works in those paths too?</p>\n</blockquote>\n<p>Another thing I had no knowledge about!</p>\n</blockquote>\n<p>Just from looking in the <code>config.toml</code> i see in the build directory line that you can use <code>$ROOT</code> to specifiy the repo root. Don't know if that is supported on other vars as well. However, somehow injecting this without having to have an absolute path with your home would be nice.</p>",
        "id": 203659899,
        "sender_full_name": "Dominik Wagner",
        "timestamp": 1594586171
    },
    {
        "content": "<p>Sure, but it's also a tradeoff — this isn't usually a thing that people do / do while collaborating with others.</p>\n<p>Another option would be to not check in the config.toml but instead pass arguments to <code>configure</code></p>",
        "id": 203659982,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594586306
    },
    {
        "content": "<p>then could do more shell magic to be relative but become absolute</p>",
        "id": 203659994,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594586339
    },
    {
        "content": "<p>I mostly didn't do that because I was editing the configs more rapidly. Now though, it could probably be changed.</p>",
        "id": 203660100,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594586507
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/242906-t-compiler.2Farm/topic/macOS.20following.20the.20cross-compile.20instructions/near/203659781\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>because Apple currently still isn't fully canonically at 11.0 but still at 10.16 for the current Big Sur Intel Betas.</p>\n</blockquote>\n<p>Can you explain more about this?</p>\n</blockquote>\n<p>Well, it is probably targetted that macOS Big Sur will report 11.0 on all platforms for the final release. However, in the current beta on intel there are API's and Tools that report 10.16 still.</p>",
        "id": 203660252,
        "sender_full_name": "Dominik Wagner",
        "timestamp": 1594586746
    },
    {
        "content": "<p><a href=\"#narrow/stream/242906-t-compiler.2Farm/topic/macOS/near/203066123\">That's deliberate</a>, but seems like a reason to correctly use 11.</p>",
        "id": 203660457,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594587071
    },
    {
        "content": "<p>okay - intel compile step 1 on macOS 10.15.5 finished <code>Build completed successfully in 1:03:33</code></p>",
        "id": 203660534,
        "sender_full_name": "Dominik Wagner",
        "timestamp": 1594587186
    },
    {
        "content": "<p>following the instructions on the DTK seems to need me change the build and host triple manually first</p>",
        "id": 203660543,
        "sender_full_name": "Dominik Wagner",
        "timestamp": 1594587240
    },
    {
        "content": "<p>You are performing the two initial cross-compiler steps on the DTK itself?</p>",
        "id": 203660638,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594587346
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/242906-t-compiler.2Farm/topic/macOS.20following.20the.20cross-compile.20instructions/near/203660457\">said</a>:</p>\n<blockquote>\n<p><a href=\"#narrow/stream/242906-t-compiler.2Farm/topic/macOS/near/203066123\">That's deliberate</a>, but seems like a reason to correctly use 11.</p>\n</blockquote>\n<p>might be. haven't tried on intel macOS 11 beta 2 yet if that works. However, for my version of SubEthaEdit I still had to choose 10.6 in the availability macros to work on the beta 2.</p>",
        "id": 203660684,
        "sender_full_name": "Dominik Wagner",
        "timestamp": 1594587393
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/242906-t-compiler.2Farm/topic/macOS.20following.20the.20cross-compile.20instructions/near/203660638\">said</a>:</p>\n<blockquote>\n<p>You are performing the two initial cross-compiler steps on the DTK itself?</p>\n</blockquote>\n<p>Trying to too, as you wrote this is untested. So might be helpful.</p>",
        "id": 203660690,
        "sender_full_name": "Dominik Wagner",
        "timestamp": 1594587414
    },
    {
        "content": "<p>Looks like <code>xcrun -sdk macosx11.0 --show-sdk-path</code> is the right invocation.</p>",
        "id": 203660711,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594587476
    },
    {
        "content": "<blockquote>\n<p>tried on intel macOS 11 beta 2</p>\n</blockquote>\n<p>FWIW, all my cross-compiling is done from x86_64 10.15.5 with the Xcode beta</p>",
        "id": 203660804,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594587548
    },
    {
        "content": "<p>okay, my cross compiling is done from 10.15.5 with the beta 2 of the universal xcode</p>",
        "id": 203660816,
        "sender_full_name": "Dominik Wagner",
        "timestamp": 1594587577
    },
    {
        "content": "<p>and i started cross-compiling from the <code>silicon-bootstrap</code> branch so i continue that. The DTK compile tries the <code>silicon</code> branch.</p>",
        "id": 203660879,
        "sender_full_name": "Dominik Wagner",
        "timestamp": 1594587658
    },
    {
        "content": "<p>which seems to produce some <code>&lt;jemalloc&gt;: Unsupported system page size</code> errors, and might be doomed because of rosetta not supporting the native page size?</p>",
        "id": 203660938,
        "sender_full_name": "Dominik Wagner",
        "timestamp": 1594587732
    },
    {
        "content": "<p>Should ultimately be fine; it's just that jemalloc uses a pagesize they haven't enabled yet. I don't know why it works, honestly, but you will probably be fine.</p>",
        "id": 203660967,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594587818
    },
    {
        "content": "<p>ah, missing cmake? - <code>brew install cmake</code> coming</p>",
        "id": 203661097,
        "sender_full_name": "Dominik Wagner",
        "timestamp": 1594588018
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"317220\">@André Arko</span> mentioned there was some trickery with cmake...</p>",
        "id": 203661192,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594588171
    },
    {
        "content": "<p>but I don't see why the x86_64 version wouldn't work.</p>",
        "id": 203661194,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594588184
    },
    {
        "content": "<p>hmmm - cross compile also failing at cmake </p>\n<div class=\"codehilite\"><pre><span></span><code>make: *** <span class=\"o\">[</span>all<span class=\"o\">]</span> Error <span class=\"m\">2</span>\nthread <span class=\"s1\">&#39;main&#39;</span> panicked at <span class=\"s1\">&#39;</span>\n<span class=\"s1\">command did not execute successfully, got: exit code: 2</span>\n\n<span class=\"s1\">build script failed, must exit now&#39;</span>, /Users/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/cmake-0.1.42/src/lib.rs:861:5\nnote: run with <span class=\"sb\">`</span><span class=\"nv\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"m\">1</span><span class=\"sb\">`</span> environment variable to display a backtrace\n    finished in <span class=\"m\">50</span>.826\nfailed to run: /Users/dom/Data/github/rust-silicon/silicon/cross/build/bootstrap/debug/bootstrap install -i --stage <span class=\"m\">1</span> --host aarch64-apple-darwin --target aarch64-apple-darwin,x86_64-apple-darwin --warnings warn src/librustc src/libstd cargo\nBuild completed unsuccessfully in <span class=\"m\">0</span>:20:18\n</code></pre></div>",
        "id": 203661314,
        "sender_full_name": "Dominik Wagner",
        "timestamp": 1594588332
    },
    {
        "content": "<p><code>brew install cmake</code> seems to have done the trick on the DTK for the bootstrapping compiler though.</p>",
        "id": 203661337,
        "sender_full_name": "Dominik Wagner",
        "timestamp": 1594588399
    },
    {
        "content": "<p>here's the backtrace if that is any help (intel, building the cross compiler step)</p>\n<div class=\"codehilite\"><pre><span></span><code>make: *** [all] Error 2\nthread &#39;main&#39; panicked at &#39;\ncommand did not execute successfully, got: exit code: 2\n\nbuild script failed, must exit now&#39;, /Users/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/cmake-0.1.42/src/lib.rs:861:5\nstack backtrace:\n   0: &lt;std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display&gt;::fmt\n   1: core::fmt::write\n   2: std::io::Write::write_fmt\n   3: std::sys_common::backtrace::print\n   4: std::panicking::default_hook::{{closure}}\n   5: std::panicking::default_hook\n   6: std::panicking::rust_panic_with_hook\n   7: rust_begin_unwind\n   8: std::panicking::begin_panic_fmt\n   9: cmake::fail\n             at /Users/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/cmake-0.1.42/src/lib.rs:861\n  10: cmake::run\n             at /Users/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/cmake-0.1.42/src/lib.rs:839\n  11: cmake::Config::build\n             at /Users/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/cmake-0.1.42/src/lib.rs:745\n  12: &lt;bootstrap::native::Llvm as bootstrap::builder::Step&gt;::run\n             at src/bootstrap/native.rs:308\n  13: bootstrap::builder::Builder::ensure\n             at src/bootstrap/builder.rs:1362\n  14: bootstrap::compile::rustc_cargo_env\n             at src/bootstrap/compile.rs:582\n  15: bootstrap::compile::rustc_cargo\n             at src/bootstrap/compile.rs:534\n  16: &lt;bootstrap::compile::Rustc as bootstrap::builder::Step&gt;::run\n             at src/bootstrap/compile.rs:505\n  17: bootstrap::builder::Builder::ensure\n             at src/bootstrap/builder.rs:1362\n  18: &lt;bootstrap::compile::Assemble as bootstrap::builder::Step&gt;::run\n             at src/bootstrap/compile.rs:790\n  19: bootstrap::builder::Builder::ensure\n             at src/bootstrap/builder.rs:1362\n  20: bootstrap::builder::Builder::compiler\n             at src/bootstrap/builder.rs:578\n  21: &lt;bootstrap::install::Rustc as bootstrap::builder::Step&gt;::run\n             at src/bootstrap/install.rs:262\n  22: bootstrap::builder::Builder::ensure\n             at src/bootstrap/builder.rs:1362\n  23: &lt;bootstrap::install::Rustc as bootstrap::builder::Step&gt;::make_run\n             at src/bootstrap/install.rs:177\n  24: bootstrap::builder::StepDescription::maybe_run\n             at src/bootstrap/builder.rs:189\n  25: bootstrap::builder::StepDescription::run\n             at src/bootstrap/builder.rs:230\n  26: bootstrap::builder::Builder::run_step_descriptions\n             at src/bootstrap/builder.rs:570\n  27: bootstrap::builder::Builder::execute_cli\n             at src/bootstrap/builder.rs:561\n  28: bootstrap::Build::build\n             at src/bootstrap/lib.rs:489\n  29: bootstrap::main\n             at src/bootstrap/bin/main.rs:15\n  30: std::rt::lang_start::{{closure}}\n             at /Users/dom/Data/github/rust-silicon/src/libstd/rt.rs:67\n  31: std::panicking::try\n  32: std::rt::lang_start_internal\n  33: std::rt::lang_start\n             at /Users/dom/Data/github/rust-silicon/src/libstd/rt.rs:67\n  34: main\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\n    finished in 11.094\nTraceback (most recent call last):\n  File &quot;../../x.py&quot;, line 11, in &lt;module&gt;\n    bootstrap.main()\n  File &quot;/Users/dom/Data/github/rust-silicon/src/bootstrap/bootstrap.py&quot;, line 981, in main\n    bootstrap(help_triggered)\n  File &quot;/Users/dom/Data/github/rust-silicon/src/bootstrap/bootstrap.py&quot;, line 967, in bootstrap\n    run(args, env=env, verbose=build.verbose)\n  File &quot;/Users/dom/Data/github/rust-silicon/src/bootstrap/bootstrap.py&quot;, line 143, in run\n    raise RuntimeError(err)\nRuntimeError: failed to run: /Users/dom/Data/github/rust-silicon/silicon/cross/build/bootstrap/debug/bootstrap -vvvvv install -i --stage 1 --host aarch64-apple-darwin --target aarch64-apple-darwin,x86_64-apple-darwin --warnings warn src/librustc src/libstd cargo\n</code></pre></div>",
        "id": 203661583,
        "sender_full_name": "Dominik Wagner",
        "timestamp": 1594588726
    },
    {
        "content": "<p>Thats surprisingly unhelpful</p>",
        "id": 203661601,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594588770
    },
    {
        "content": "<p>anything you can recommend? I do have a working regular rustup installation on that machine as well, don't know if anything intereferes with antyhgin here</p>",
        "id": 203661845,
        "sender_full_name": "Dominik Wagner",
        "timestamp": 1594589145
    },
    {
        "content": "<p>is cmake installed and in PATH?</p>",
        "id": 203661951,
        "sender_full_name": "simulacrum",
        "timestamp": 1594589280
    },
    {
        "content": "<p>exit code 2 seems to be file not found perhaps (though not sure)</p>",
        "id": 203661991,
        "sender_full_name": "simulacrum",
        "timestamp": 1594589290
    },
    {
        "content": "<p>cmake on the DTK requires --HEAD, iirc</p>",
        "id": 203662015,
        "sender_full_name": "André Arko",
        "timestamp": 1594589354
    },
    {
        "content": "<p>(as in, <code>brew install cmake --HEAD</code>)</p>",
        "id": 203662021,
        "sender_full_name": "André Arko",
        "timestamp": 1594589373
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"317220\">@André Arko</span> cmake built fine on the DTK without --HEAD and seems to work. will reinstall with <code>--HEAD</code> if it fails</p>",
        "id": 203662094,
        "sender_full_name": "Dominik Wagner",
        "timestamp": 1594589441
    },
    {
        "content": "<p>the SDK version bifurcation appears to be 100% based on which Xcode you are using: reportedly Xcode 11 says it is 10.16, while Xcode 12 says it is 11.0: <a href=\"https://eclecticlight.co/2020/07/06/why-big-sur-wont-stumble-over-version-numbers/\">https://eclecticlight.co/2020/07/06/why-big-sur-wont-stumble-over-version-numbers/</a></p>",
        "id": 203662120,
        "sender_full_name": "André Arko",
        "timestamp": 1594589492
    },
    {
        "content": "<p>(I assume this is so that anything built in the past against Xcode &lt;=11 will still have working version checks)</p>",
        "id": 203662171,
        "sender_full_name": "André Arko",
        "timestamp": 1594589533
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> cmake is fine and in path on the intel machine doing the cross compile. Last successful reports before the make error </p>\n<div class=\"codehilite\"><pre><span></span><code>[  1%] Built target LLVMDemangle\n[  3%] Built target obj.llvm-tblgen\nmake: *** [all] Error 2\n</code></pre></div>",
        "id": 203662183,
        "sender_full_name": "Dominik Wagner",
        "timestamp": 1594589564
    },
    {
        "content": "<p>weird</p>",
        "id": 203662187,
        "sender_full_name": "simulacrum",
        "timestamp": 1594589580
    },
    {
        "content": "<p>and DESTDIR is not set by chance?</p>",
        "id": 203662191,
        "sender_full_name": "simulacrum",
        "timestamp": 1594589585
    },
    {
        "content": "<p>it is set and replicates the whole repo path under /tmp/crossed</p>",
        "id": 203662264,
        "sender_full_name": "Dominik Wagner",
        "timestamp": 1594589676
    },
    {
        "content": "<p>aha</p>",
        "id": 203662278,
        "sender_full_name": "simulacrum",
        "timestamp": 1594589708
    },
    {
        "content": "<p>Oh yeah,</p>",
        "id": 203662282,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594589714
    },
    {
        "content": "<p>That was fixed in the other branch</p>",
        "id": 203662290,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594589735
    },
    {
        "content": "<p>ah RUST_DESTDIR? not DESTDIR?</p>",
        "id": 203662333,
        "sender_full_name": "Dominik Wagner",
        "timestamp": 1594589773
    },
    {
        "content": "<p>you probably want the latest patch</p>",
        "id": 203662347,
        "sender_full_name": "simulacrum",
        "timestamp": 1594589811
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/74252/files\">https://github.com/rust-lang/rust/pull/74252/files</a></p>",
        "id": 203662351,
        "sender_full_name": "simulacrum",
        "timestamp": 1594589822
    },
    {
        "content": "<p>Rust_destdir only exists in the other branch</p>",
        "id": 203662358,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594589833
    },
    {
        "content": "<p>And will disappear when I rebase on the pr linked.</p>",
        "id": 203662364,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594589853
    },
    {
        "content": "<p>ah - okay - so xcompile try on intel stop here or restart with the silicon branch?</p>",
        "id": 203662440,
        "sender_full_name": "Dominik Wagner",
        "timestamp": 1594589996
    },
    {
        "content": "<p>Easier fix is to replace install with build and remove destdir.</p>",
        "id": 203662489,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594590019
    },
    {
        "content": "<p>Then, run the install command with destdir when you are done.</p>",
        "id": 203662493,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594590036
    },
    {
        "content": "<p>Turns out I’m the first to use destdir &amp; install but not build first.</p>",
        "id": 203662501,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594590067
    },
    {
        "content": "<p>oh sweet. the DTK completed the first build in 0:44 - faster than my iMac Pro ^^</p>",
        "id": 203663063,
        "sender_full_name": "Dominik Wagner",
        "timestamp": 1594591059
    },
    {
        "content": "<p>I actually noticed similar, and my 6core i9 MacBook Pro isn’t a slouch</p>",
        "id": 203663123,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594591127
    },
    {
        "content": "<p>so do i need to also set some triples for the cross compiler build?</p>",
        "id": 203663131,
        "sender_full_name": "Dominik Wagner",
        "timestamp": 1594591151
    },
    {
        "content": "<p>build needs to be set to intel again, while the others are set with command line arguments - ic</p>",
        "id": 203663189,
        "sender_full_name": "Dominik Wagner",
        "timestamp": 1594591210
    },
    {
        "content": "<p>So far building on the DTK seems to be a smooth ride. Didn't have cmake (which should probably just be put in the setup section), otherwise only setting the build triplet to intel was needed.</p>",
        "id": 203663393,
        "sender_full_name": "Dominik Wagner",
        "timestamp": 1594591569
    },
    {
        "content": "<p>Probably need to turn in now - thanks for all your help!</p>",
        "id": 203663400,
        "sender_full_name": "Dominik Wagner",
        "timestamp": 1594591602
    },
    {
        "content": "<blockquote>\n<p>Didn't have cmake (which should probably just be put in the setup section)</p>\n</blockquote>\n<p><a href=\"https://rustc-dev-guide.rust-lang.org/getting-started.html\">https://rustc-dev-guide.rust-lang.org/getting-started.html</a>. My readme wasn’t intended as a how to develop rustc, just the bare basics for cross compiling the initial versions.</p>",
        "id": 203663973,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594592554
    },
    {
        "content": "<p>okay, next error step at the DTK is </p>\n<div class=\"codehilite\"><pre><span></span><code>error: failed to run custom build <span class=\"nb\">command</span> <span class=\"k\">for</span> <span class=\"sb\">`</span>openssl-sys v0.9.54<span class=\"sb\">`</span>\n\nCaused by:\n  process didn<span class=\"s1\">&#39;t exit successfully: `/Users/dom/rust-silicon/silicon/cross/build/x86_64-apple-darwin/stage1-tools/release/build/openssl-sys-3252b3ef97fc03e4/build-script-main` (exit code: 101)</span>\n<span class=\"s1\">--- stdout</span>\n<span class=\"s1\">cargo:rustc-cfg=const_fn</span>\n\n<span class=\"s1\">--- stderr</span>\n<span class=\"s1\">thread &#39;</span>main<span class=\"s1\">&#39; panicked at &#39;</span>don<span class=\"s1\">&#39;t know how to configure OpenSSL for aarch64-apple-darwin&#39;</span>, /Users/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/openssl-src-111.9.0+1.1.1g/src/lib.rs:194:18\nnote: run with <span class=\"sb\">`</span><span class=\"nv\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"m\">1</span><span class=\"sb\">`</span> environment variable to display a backtrace\n\nwarning: build failed, waiting <span class=\"k\">for</span> other <span class=\"nb\">jobs</span> to finish...\nThe following warnings were emitted during compilation:\n\nwarning: src/zlib/gzlib.c:214:15: error: implicitly declaring library <span class=\"k\">function</span> <span class=\"s1\">&#39;snprintf&#39;</span> with <span class=\"nb\">type</span> <span class=\"s1\">&#39;int (char *, unsigned long, const char *, ...)&#39;</span> <span class=\"o\">[</span>-Werror,-Wimplicit-function-declaration<span class=\"o\">]</span>\nwarning:         <span class=\"o\">(</span>void<span class=\"o\">)</span>snprintf<span class=\"o\">(</span>state-&gt;path, len + <span class=\"m\">1</span>, <span class=\"s2\">&quot;%s&quot;</span>, <span class=\"o\">(</span>const char *<span class=\"o\">)</span>path<span class=\"o\">)</span><span class=\"p\">;</span>\nwarning:               ^\nwarning: src/zlib/gzlib.c:214:15: note: include the header &lt;stdio.h&gt; or explicitly provide a declaration <span class=\"k\">for</span> <span class=\"s1\">&#39;snprintf&#39;</span>\nwarning: <span class=\"m\">1</span> error generated.\n\nerror: build failed\n<span class=\"nb\">command</span> did not execute successfully: <span class=\"s2\">&quot;/Users/dom/rust-silicon/silicon/bootstrap/build/x86_64-apple-darwin/stage0/bin/cargo&quot;</span> <span class=\"s2\">&quot;build&quot;</span> <span class=\"s2\">&quot;--target&quot;</span> <span class=\"s2\">&quot;aarch64-apple-darwin&quot;</span> <span class=\"s2\">&quot;-Zdual-proc-macros&quot;</span> <span class=\"s2\">&quot;-Zbinary-dep-depinfo&quot;</span> <span class=\"s2\">&quot;-j&quot;</span> <span class=\"s2\">&quot;4&quot;</span> <span class=\"s2\">&quot;--release&quot;</span> <span class=\"s2\">&quot;--manifest-path&quot;</span> <span class=\"s2\">&quot;/Users/dom/rust-silicon/src/tools/cargo/Cargo.toml&quot;</span> <span class=\"s2\">&quot;--features&quot;</span> <span class=\"s2\">&quot;rustc-workspace-hack/all-static&quot;</span> <span class=\"s2\">&quot;--message-format&quot;</span> <span class=\"s2\">&quot;json-render-diagnostics&quot;</span>\nexpected success, got: <span class=\"nb\">exit</span> code: <span class=\"m\">101</span>\nfailed to run: /Users/dom/rust-silicon/silicon/cross/build/bootstrap/debug/bootstrap install -i --stage <span class=\"m\">1</span> --host aarch64-apple-darwin --target aarch64-apple-darwin,x86_64-apple-darwin src/librustc src/libstd cargo\n</code></pre></div>\n\n\n<p>openssl is installed with brew, any special configuration sauce I can do?</p>",
        "id": 203676177,
        "sender_full_name": "Dominik Wagner",
        "timestamp": 1594613324
    },
    {
        "content": "<p>Okay, after setting the OPENSSL_DIR to the one shown by brew info, zlib seems to fail:</p>\n<div class=\"codehilite\"><pre><span></span><code>The following warnings were emitted during compilation:\n\nwarning: src/zlib/gzlib.c:214:15: error: implicitly declaring library function &#39;snprintf&#39; with type &#39;int (char *, unsigned long, const char *, ...)&#39; [-Werror,-Wimplicit-function-declaration]\nwarning:         (void)snprintf(state-&gt;path, len + 1, &quot;%s&quot;, (const char *)path);\nwarning:               ^\nwarning: src/zlib/gzlib.c:214:15: note: include the header &lt;stdio.h&gt; or explicitly provide a declaration for &#39;snprintf&#39;\nwarning: 1 error generated.\n\nerror: failed to run custom build command for `libz-sys v1.0.25`\n</code></pre></div>",
        "id": 203680048,
        "sender_full_name": "Dominik Wagner",
        "timestamp": 1594619135
    },
    {
        "content": "<p>Is the “static” whatever setting enabled in the config toml?</p>",
        "id": 203703405,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594639626
    },
    {
        "content": "<p>Basically we don’t want that yet because we can’t build OpenSSL ourselves yet.</p>",
        "id": 203703438,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594639661
    },
    {
        "content": "<p>Ah okay. I misread the comment earlier. Disabling cargo-native-static again and rerunning.</p>",
        "id": 203739201,
        "sender_full_name": "Dominik Wagner",
        "timestamp": 1594658995
    },
    {
        "content": "<p>Yeah, I shouldn't have committed that. That's part of my <em>next step</em>, to be able to start out with a crossed cargo.</p>",
        "id": 203740432,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594659590
    },
    {
        "content": "<p>You might also want to drop <code>cargo</code> off of the build line (since the non-static cargo won't work anyway)</p>",
        "id": 203742161,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594660384
    },
    {
        "content": "<p>okay - I'll probably monitor the situation then and try again once your next step is up. ^^</p>",
        "id": 203756128,
        "sender_full_name": "Dominik Wagner",
        "timestamp": 1594666846
    },
    {
        "content": "<p>if your goal is to have a compiler and not to build the compiler, I can also link you a zipfile of a previous native complier.</p>",
        "id": 203761512,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594669462
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"324511\">@Rudy Richter</span></p>",
        "id": 204807705,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595515938
    },
    {
        "content": "<p>scrolling back through the discussion I'm not sure I see the particular failure I'm seeing, looks like 404 trying to update submodules? ah, nope, failure downloading the rust-std-beta-aarch64-apple-darwin.tar.gz.sha256 file</p>",
        "id": 204812855,
        "sender_full_name": "Rudy Richter",
        "timestamp": 1595518158
    },
    {
        "content": "<p>You are trying to do it on the DTK?</p>",
        "id": 204817398,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595520380
    },
    {
        "content": "<p>The first step, that is?</p>",
        "id": 204817412,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595520388
    },
    {
        "content": "<p>You might need to download the x86 rustc and cargo by hand and then configure them. See the second stage of the readme for the configuration options.</p>",
        "id": 204818104,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595520652
    },
    {
        "content": "<p>yeah, I was, I realized where I had gone wrong. then got pulled into other discussions.</p>",
        "id": 204833380,
        "sender_full_name": "Rudy Richter",
        "timestamp": 1595528100
    },
    {
        "content": "<p>I haven't actually done the very first step on the DTK — I didn't have access to one when I started, and haven't attempted to since.</p>",
        "id": 204842920,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595532318
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"324588\">@Misty De Méo</span></p>",
        "id": 204853655,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595538393
    },
    {
        "content": "<p><a href=\"https://github.com/shepmaster/rust/blob/silicon/silicon/README.md\">https://github.com/shepmaster/rust/blob/silicon/silicon/README.md</a></p>",
        "id": 204853676,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595538408
    },
    {
        "content": "<p>Thank you, I'll give this a try!</p>",
        "id": 204854030,
        "sender_full_name": "Misty De Méo",
        "timestamp": 1595538675
    },
    {
        "content": "<p>I will say that I know it doesn’t work to do the initial cross compile on the DTK yet. Haven’t figured that out.</p>",
        "id": 204854854,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595539224
    },
    {
        "content": "<p>And the readme doesn’t yet describe how to get cmake on the DTK; but you might know a tool to help install things on macOS 😁</p>",
        "id": 204854912,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595539286
    },
    {
        "content": "<p>Can confirm, I'm not seeing the first step working on a DTK - just because it's trying to fetch a prebuilt Rust for the current host. Pretty sure I can fix that by updating <code>config.toml</code>, going to try that first before I start building on an Intel Mac.</p>",
        "id": 204854919,
        "sender_full_name": "Misty De Méo",
        "timestamp": 1595539291
    },
    {
        "content": "<p><span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> Yeah, now that CMake 3.18.0 is out and in package managers, getting a working cmake is a lot easier</p>",
        "id": 204855013,
        "sender_full_name": "Misty De Méo",
        "timestamp": 1595539363
    },
    {
        "content": "<p>You can theoretically follow the steps in the next section to specify an x86 rustc and friends.</p>",
        "id": 204855043,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595539392
    },
    {
        "content": "<p>But see the “cross compiling on the DTK” thread (that I can’t figure out how to link on mobile)</p>",
        "id": 204855191,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595539485
    },
    {
        "content": "<p>As even if you do it right, there’s still an error.</p>",
        "id": 204855275,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595539544
    },
    {
        "content": "<p>So if you are interested in fixing/figuring that out, keep on that path. If you just want it to work, you’ll want to start on x86</p>",
        "id": 204855429,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595539629
    },
    {
        "content": "<p>I'm interested in fixing if I can, I'll see anyway. Otherwise, I'll move over to x86</p>",
        "id": 204855478,
        "sender_full_name": "Misty De Méo",
        "timestamp": 1595539666
    },
    {
        "content": "<p>Sure am building LLVM a lot these days <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 204855833,
        "sender_full_name": "Misty De Méo",
        "timestamp": 1595539901
    },
    {
        "content": "<p>This builds it 4 times at least.</p>",
        "id": 204855913,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595539934
    },
    {
        "content": "<p>OK, confirmed you can build it locally without cross-compiling. I can submit a PR to update/simplify the docs?</p>",
        "id": 204862775,
        "sender_full_name": "Misty De Méo",
        "timestamp": 1595545071
    },
    {
        "content": "<p>Sure!</p>\n<p>To double check, you built a version of <code>rustc</code> that is <code>Mach-O 64-bit executable arm64</code> and that can produce executables of the same?</p>",
        "id": 204863162,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595545316
    },
    {
        "content": "<p>Yup, correct.</p>\n<div class=\"codehilite\"><pre><span></span><code>$ lipo -info ~/native-build/usr/local/bin/rustc\nNon-fat file: /Users/mistydemeo/native-build/usr/local/bin/rustc is architecture: arm64\n\n$ rustc test.rs\n$ lipo -info test\nNon-fat file: test is architecture: arm64\n</code></pre></div>",
        "id": 204863230,
        "sender_full_name": "Misty De Méo",
        "timestamp": 1595545343
    },
    {
        "content": "<p>Cool!</p>",
        "id": 204863261,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595545377
    },
    {
        "content": "<p>I think <em>technically</em> it's still cross-compiling as the architecture changes, but at least we don't need two machines.</p>",
        "id": 204863301,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595545414
    },
    {
        "content": "<p>Yeah, and it's down to two LLVM builds instead of four, which counts as a win for sure</p>",
        "id": 204863329,
        "sender_full_name": "Misty De Méo",
        "timestamp": 1595545435
    },
    {
        "content": "<p>Oh, so just skipping the second step. Yeah, that was never <strong>needed</strong>. Mostly it was a test to thoroughly exercise the code generated from the first step.</p>",
        "id": 204863589,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595545602
    },
    {
        "content": "<p>Right, yeah. That makes sense.</p>",
        "id": 204863603,
        "sender_full_name": "Misty De Méo",
        "timestamp": 1595545621
    },
    {
        "content": "<p>It's \"easy\" to make something that says it's <code>arm64</code>, less easy for it to actually work in practice <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 204863637,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595545654
    },
    {
        "content": "<p>Very true!</p>",
        "id": 204863647,
        "sender_full_name": "Misty De Méo",
        "timestamp": 1595545662
    },
    {
        "content": "<p>I'll leave the second part in the instructions but change the docs to skip using a separate machine for building the first part.</p>",
        "id": 204863798,
        "sender_full_name": "Misty De Méo",
        "timestamp": 1595545773
    },
    {
        "content": "<p><a href=\"https://github.com/shepmaster/rust/pull/1\">https://github.com/shepmaster/rust/pull/1</a></p>",
        "id": 204864227,
        "sender_full_name": "Misty De Méo",
        "timestamp": 1595546212
    },
    {
        "content": "<p>thanks! I tweaked it a bit to automate the build setting — <a href=\"https://github.com/shepmaster/rust/blob/silicon/silicon/README.md#compiling-on-aarch64-apple-darwin-aka-the-dtk\">https://github.com/shepmaster/rust/blob/silicon/silicon/README.md#compiling-on-aarch64-apple-darwin-aka-the-dtk</a></p>",
        "id": 204865525,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595547523
    },
    {
        "content": "<p>Oh, nice - even better</p>",
        "id": 204865559,
        "sender_full_name": "Misty De Méo",
        "timestamp": 1595547578
    }
]