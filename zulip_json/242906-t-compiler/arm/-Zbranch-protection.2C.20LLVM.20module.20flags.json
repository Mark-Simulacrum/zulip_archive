[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>, <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> : Following on from <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202022-01-27.20.2354818/near/269589243\">the weekly</a> and <a href=\"https://github.com/rust-lang/rust/issues/93523\">#93523</a>... Omitting the flags entirely if disabled is problematic because if <code>branch-protection</code> is turned on in some other module then the result might be broken (or at best, won't have the security protections that the author might be expecting).<br>\nThat approach is \"option 2\" from my comment on the <a href=\"https://github.com/rust-lang/rust/issues/92885#issuecomment-1014356915\">original bug report</a>; my fix (<a href=\"https://github.com/rust-lang/rust/issues/93269\">#93269</a>) unconditionally emits the module flags, like Clang, but matches Clang's use of override behaviour flags.</p>",
        "id": 270233044,
        "sender_full_name": "Jacob Bramley",
        "timestamp": 1643730553
    },
    {
        "content": "<p>My broad belief is that unless the unstable feature is enabled in some way, the compiler should act as if the feature does not exist at all. Making sure that we always output some metadata may be something to consider during stabilization, I think.</p>",
        "id": 270233476,
        "sender_full_name": "nagisa",
        "timestamp": 1643730676
    },
    {
        "content": "<p>For <code>beta</code> reverting seems like the least risky possible change in a sense that it at least won't break any existing uses.</p>",
        "id": 270233981,
        "sender_full_name": "nagisa",
        "timestamp": 1643730822
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/93516\">https://github.com/rust-lang/rust/pull/93516</a> is relevant in that context as well.</p>",
        "id": 270234174,
        "sender_full_name": "nagisa",
        "timestamp": 1643730877
    },
    {
        "content": "<p>Yes, I agree with that, I'm just thinking about the long-term fix.</p>",
        "id": 270234959,
        "sender_full_name": "Jacob Bramley",
        "timestamp": 1643731174
    },
    {
        "content": "<p>My concern is that existing uses that depend on Rust not generating anything are probably broken in other ways. Our <code>-Zbranch-protection</code> is additive, and cannot tell the difference between unspecified and deliberately-disabled flags.</p>",
        "id": 270235436,
        "sender_full_name": "Jacob Bramley",
        "timestamp": 1643731298
    },
    {
        "content": "<p>Discussing this during stabilisation sounds reasonable, though.</p>",
        "id": 270235639,
        "sender_full_name": "Jacob Bramley",
        "timestamp": 1643731354
    },
    {
        "content": "<p>As a side note you may want to create a tracking issue for this unstable feature (see <a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+is%3Aissue+label%3AC-tracking-issue\">C-tracking-issue</a> for examples)</p>",
        "id": 270235664,
        "sender_full_name": "nagisa",
        "timestamp": 1643731363
    },
    {
        "content": "<p>I'm sure there's probably a chapter on the process in one of the books, but I don't know offhand which one.</p>",
        "id": 270235805,
        "sender_full_name": "nagisa",
        "timestamp": 1643731412
    },
    {
        "content": "<p>In the meantime, I haven't seen a change to omit disabled module flags, as you discussed in the weekly. Should we (Arm) do that, or are you working on it already?</p>",
        "id": 270237802,
        "sender_full_name": "Jacob Bramley",
        "timestamp": 1643732071
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/93516\">https://github.com/rust-lang/rust/pull/93516</a> does that, doesn't it?</p>",
        "id": 270241354,
        "sender_full_name": "nagisa",
        "timestamp": 1643733320
    },
    {
        "content": "<p>It does! I hadn't seen it, sorry.</p>",
        "id": 270359058,
        "sender_full_name": "Jacob Bramley",
        "timestamp": 1643795860
    }
]