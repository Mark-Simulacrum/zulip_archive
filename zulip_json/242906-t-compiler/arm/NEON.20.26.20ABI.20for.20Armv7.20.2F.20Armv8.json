[
    {
        "content": "<p>It's my understanding that NEON for Armv7 is \"ASIMDv1\" and NEON for Armv8 is \"ASIMDv2\". I know that these actually imply addressing the registers differently since in ASIMDv1, each 128-bit Q register is two 64-bit D registers, and in ASIMDv2 it is a set of 128-bit registers <code>v{N}</code> which can have their lower 64 bits used by various instructions. Is it safe to assume that, even if a function only included instructions assembled for the NEON ISA, that Armv7 and Armv8 NEON functions are not ABI compatible? Can instructions compiled for ASIMDv1 even run on an ASIMDv2 unit?</p>",
        "id": 227115237,
        "sender_full_name": "Jubilee",
        "timestamp": 1613852224
    },
    {
        "content": "<p>No, you're talking about the difference between ARM and AArch64. ARM has 16 Q registers overlapping with 32 D registers. AArch64 has 32 independent Q registers which each contain a single D register.</p>",
        "id": 227115595,
        "sender_full_name": "Amanieu",
        "timestamp": 1613852557
    },
    {
        "content": "<p>ARM and AArch64 are completely different instruction sets, you can't have both in the same program.</p>",
        "id": 227115634,
        "sender_full_name": "Amanieu",
        "timestamp": 1613852604
    },
    {
        "content": "<p>Mmm, yes I did indeed say that re: the layout of registers.</p>\n<p>Are you sure that it's a \"can't\" and not a \"shouldn't\" here? It is my understanding that an Armv8-A machine can nonetheless run a lot of Armv7 code in A32 mode, which is part of why I thought I'd ask to confirm. Is there a way the boundaries between the mode switches actually would stop that? And the NEON SIMD ISA and its versions seem to be somewhat orthogonal to the bitness of the rest of the unit, which is why I figured I should ask to confirm.</p>",
        "id": 227116275,
        "sender_full_name": "Jubilee",
        "timestamp": 1613853253
    },
    {
        "content": "<p>The terminology here is a bit confusing, so I'll start by defining some terms:</p>\n<ul>\n<li>ARMv8 contains 2 ISAs: AArch64 and AArch32. They are completely separate, use completely different instruction encodings and run in different CPU modes. A single process can only use one ISA, it can't mix them. </li>\n<li>AArch32 is an extension of the ARMv7 ISA with a few added instructions (e.g. CRC32, AES, etc). It is backwards compatible with older 32-bit ARM versions.</li>\n<li>AArch64 is a complete redesign of the ISA. In some ways it is closer to MIPS/RISC-V than the traditional ARM ISA.</li>\n<li>Most NEON instructions are available in both AArch32 and AArch64, however they work differently in each. Some NEON instructions only exist in AArch32 or AArch64. The instructions have different encodings and mnemonics in AArch64 and AArch32. The way they use registers is different (AArch32 has overlapping register banks, AArch64 doesn't).</li>\n</ul>",
        "id": 227116651,
        "sender_full_name": "Amanieu",
        "timestamp": 1613853716
    },
    {
        "content": "<p>Thank you.<br>\nRight, the fact that many NEON instructions exist in both aarch32 and aarch64 is kind of why I'm being nosy and trying to figure this out better, since precisely understanding the nuances here matters for what I've been writing up. :^)</p>",
        "id": 227117234,
        "sender_full_name": "Jubilee",
        "timestamp": 1613854407
    },
    {
        "content": "<p>So can a program compiled for ARMv7 be run without modification as an AArch32 program?</p>",
        "id": 227123564,
        "sender_full_name": "Lokathor",
        "timestamp": 1613860337
    },
    {
        "content": "<p>(similar to an x86 program on an x86_64 chip)</p>",
        "id": 227123574,
        "sender_full_name": "Lokathor",
        "timestamp": 1613860353
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> Yes, when control transfers to the kernel it can choose to resume in AArch32 mode when it passes back, and as far as I am aware all instructions that a program would be compiled for Armv7 with are supported in the AArch32 mode. I am not sure what happens with the register layout change and Neon though.</p>",
        "id": 227130371,
        "sender_full_name": "Jubilee",
        "timestamp": 1613868093
    },
    {
        "content": "<p>...Ah! It uses the same overlapping rules as in Armv7 apparently.</p>",
        "id": 227130668,
        "sender_full_name": "Jubilee",
        "timestamp": 1613868471
    }
]