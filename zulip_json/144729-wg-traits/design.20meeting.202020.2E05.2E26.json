[
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span></p>",
        "id": 198813454,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590522982
    },
    {
        "content": "<p>5ish minutes to meeting</p>",
        "id": 198813463,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590522987
    },
    {
        "content": "<p>First day of new sprint :)</p>",
        "id": 198813477,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590522997
    },
    {
        "content": "<p>I guess we should keep the <a href=\"https://hackmd.io/D_wskAmRT52zL9xmhmg0Kg\">sprint doc</a> updated?</p>",
        "id": 198813729,
        "sender_full_name": "detrumi",
        "timestamp": 1590523129
    },
    {
        "content": "<p>Yes</p>",
        "id": 198813784,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590523158
    },
    {
        "content": "<p>Man we have a lot of pending PRs</p>",
        "id": 198813807,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590523173
    },
    {
        "content": "<p>Gotta  merge some of those..</p>",
        "id": 198813821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590523180
    },
    {
        "content": "<p>/me merges <a href=\"https://github.com/rust-lang-nursery/chalk/issues/467\">chalk#467</a></p>",
        "id": 198813908,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590523211
    },
    {
        "content": "<p>Yeah, there's a few that have your name on it <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> :)</p>",
        "id": 198813945,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590523235
    },
    {
        "content": "<p>Yeah, sorry. I opted to \"unplug\" pretty deep last weekend + memorial day (Monday)</p>",
        "id": 198813977,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590523253
    },
    {
        "content": "<p>and today's been busy</p>",
        "id": 198813994,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590523260
    },
    {
        "content": "<p>but I'll take some time after the meeting to do more reviewing</p>",
        "id": 198814015,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590523266
    },
    {
        "content": "<p>and maybe filing some bugs and things</p>",
        "id": 198814023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590523270
    },
    {
        "content": "<p>Particularly <a href=\"https://github.com/rust-lang/chalk/pull/472\">https://github.com/rust-lang/chalk/pull/472</a> and <a href=\"https://github.com/rust-lang/chalk/pull/433\">https://github.com/rust-lang/chalk/pull/433</a></p>",
        "id": 198814060,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590523287
    },
    {
        "content": "<p>I was looking at <a href=\"https://github.com/rust-lang-nursery/chalk/issues/472\">chalk#472</a> right now</p>",
        "id": 198814111,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590523320
    },
    {
        "content": "<p>Anyways, meeting time :)</p>",
        "id": 198814160,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590523328
    },
    {
        "content": "<p>Let's start with updates, or do we have an agenda somewhere?</p>",
        "id": 198814245,
        "sender_full_name": "detrumi",
        "timestamp": 1590523367
    },
    {
        "content": "<p>We have a nice number of people around today</p>",
        "id": 198814250,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590523370
    },
    {
        "content": "<p>ugh yeah, I gotta find the agenda</p>",
        "id": 198814267,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590523379
    },
    {
        "content": "<p>I don't see anything listed for today: <a href=\"https://hackmd.io/nrhN5A8sR2eY9UdfJTKcJg\">https://hackmd.io/nrhN5A8sR2eY9UdfJTKcJg</a></p>",
        "id": 198814291,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1590523389
    },
    {
        "content": "<p>will be hard to find if there isn't one <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 198814333,
        "sender_full_name": "detrumi",
        "timestamp": 1590523407
    },
    {
        "content": "<p><a href=\"https://hackmd.io/nrhN5A8sR2eY9UdfJTKcJg?both\">https://hackmd.io/nrhN5A8sR2eY9UdfJTKcJg?both</a></p>",
        "id": 198814340,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590523411
    },
    {
        "content": "<p>same doc we've been using</p>",
        "id": 198814377,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590523428
    },
    {
        "content": "<p>seems like the main thing for today is probably a \"status update\"?</p>",
        "id": 198814475,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590523468
    },
    {
        "content": "<p>Yeah, I don't know if we have anything in particular to talk about</p>",
        "id": 198814546,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590523504
    },
    {
        "content": "<p>I guess, maybe it's worth some time to consider if there are any design questions we want to plan for during the next 6 weeks</p>",
        "id": 198814631,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590523546
    },
    {
        "content": "<p>(similar to how we had a meeting for consts and implied bounds)</p>",
        "id": 198814642,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590523558
    },
    {
        "content": "<p>I guess for implied bounds, did we ever even actually get to the problem?</p>",
        "id": 198814716,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590523581
    },
    {
        "content": "<p>Uhh we can discuss two things</p>",
        "id": 198814717,
        "sender_full_name": "Areredify",
        "timestamp": 1590523582
    },
    {
        "content": "<p>That is, what to do with consts in chalk writer</p>",
        "id": 198814772,
        "sender_full_name": "Areredify",
        "timestamp": 1590523614
    },
    {
        "content": "<p>Maybe we can discuss how to design the shared type library in one such meeting</p>",
        "id": 198814783,
        "sender_full_name": "detrumi",
        "timestamp": 1590523620
    },
    {
        "content": "<p>And wf checks for arrays and tuples and such</p>",
        "id": 198814847,
        "sender_full_name": "Areredify",
        "timestamp": 1590523663
    },
    {
        "content": "<p>For the shared type library, we already had one design meeting on the high-level concept</p>",
        "id": 198814853,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590523667
    },
    {
        "content": "<p>I guess it might be useful to have a spur towards making some more concrete proposal</p>",
        "id": 198814871,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590523677
    },
    {
        "content": "<p>Maybe wf checks in general, even</p>",
        "id": 198814922,
        "sender_full_name": "detrumi",
        "timestamp": 1590523685
    },
    {
        "content": "<p>Yeah I too would like to clarify the plan for WF checks</p>",
        "id": 198814936,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1590523694
    },
    {
        "content": "<p>I think when it comes to implied bounds that we definitely didn't \"finish\"</p>",
        "id": 198814940,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590523696
    },
    {
        "content": "<p>that is related to wf checks</p>",
        "id": 198814948,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590523701
    },
    {
        "content": "<p>well maybe only conceptually</p>",
        "id": 198814990,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590523723
    },
    {
        "content": "<p>We def didn't, we had a high-level overview and that's it</p>",
        "id": 198815006,
        "sender_full_name": "Areredify",
        "timestamp": 1590523730
    },
    {
        "content": "<p>right and in particular we didn't get to the \"problem\" I was concerned about or talk about ways we might solve it</p>",
        "id": 198815100,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590523775
    },
    {
        "content": "<p>can we collect these ideas into a list in the hackmd?</p>",
        "id": 198815122,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590523786
    },
    {
        "content": "<p>/me starts a list</p>",
        "id": 198815180,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590523805
    },
    {
        "content": "<p>another possible topic</p>",
        "id": 198815271,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590523867
    },
    {
        "content": "<p>would be to review coherence</p>",
        "id": 198815275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590523870
    },
    {
        "content": "<p>like, what code is there, and what would it look like to integrate that more into rustc</p>",
        "id": 198815296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590523884
    },
    {
        "content": "<p>should we go over updates on the <a href=\"https://hackmd.io/D_wskAmRT52zL9xmhmg0Kg?edit\">current sprint status</a>?</p>",
        "id": 198815356,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590523917
    },
    {
        "content": "<p>Do we <em>have</em> any updates?</p>",
        "id": 198815456,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590523954
    },
    {
        "content": "<p>maybe not :)</p>",
        "id": 198815494,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590523978
    },
    {
        "content": "<p>I don't think so</p>",
        "id": 198815501,
        "sender_full_name": "Areredify",
        "timestamp": 1590523982
    },
    {
        "content": "<p>I solved the <code>T = N, T = char</code> issue on the int/float PR: <a href=\"https://github.com/rust-lang-nursery/chalk/issues/470\">chalk#470</a></p>",
        "id": 198815533,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1590523998
    },
    {
        "content": "<p>I've been thinking about the recursive solver</p>",
        "id": 198815549,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590524009
    },
    {
        "content": "<p>and salsa integration</p>",
        "id": 198815556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590524014
    },
    {
        "content": "<p>I think I have a \"picture\" of what I think we shoud do, but I have to try and communicate it :P</p>",
        "id": 198815573,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590524026
    },
    {
        "content": "<p>which reminds that I owe..somebody..some feedback on their PR</p>",
        "id": 198815595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590524039
    },
    {
        "content": "<p>Opaque types: got some help with generics (thanks <span class=\"user-mention\" data-user-id=\"230601\">@Nathan Whitaker</span>!), have a in-progress branch on WF checks, and I should look into making the hidden type lazily requested</p>",
        "id": 198815596,
        "sender_full_name": "detrumi",
        "timestamp": 1590524039
    },
    {
        "content": "<p>I've got the opaque types support mostly working in RA, ran into <a href=\"https://github.com/rust-lang/chalk/pull/473\">https://github.com/rust-lang/chalk/pull/473</a> though</p>",
        "id": 198815637,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1590524043
    },
    {
        "content": "<blockquote>\n<p>I think I have a \"picture\" of what I think we shoud do, but I have to try and communicate it :P</p>\n</blockquote>\n<p>yeah, it's not very clear to me yet ;)</p>",
        "id": 198815675,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1590524069
    },
    {
        "content": "<p>I have been wanting to get involved in this particular work-stream (the rec solver). Almost done with  addressing the comments on <a href=\"https://github.com/rust-lang/chalk/pull/457\">https://github.com/rust-lang/chalk/pull/457</a></p>",
        "id": 198815681,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1590524075
    },
    {
        "content": "<p>OK, great! I will try to respond <span class=\"user-mention\" data-user-id=\"283967\">@Zahari Dichev</span> with some comments specificaly about that aspect</p>",
        "id": 198815710,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590524093
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> in <a href=\"https://github.com/rust-lang/rust/issues/473\">#473</a>, I see this comment:</p>\n<blockquote>\n<p>chalk-integration represents opaque types as placeholders immediately</p>\n</blockquote>\n<p>and indeed that doesn't seem right to me...</p>",
        "id": 198815750,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590524125
    },
    {
        "content": "<p>So, I have a PR (that I'm addressing review comments for now) to make chalk-engine depend on chalk-ir</p>",
        "id": 198815806,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590524154
    },
    {
        "content": "<p>instead of the other way around</p>",
        "id": 198815817,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590524158
    },
    {
        "content": "<p>Which should actually make things a lot cleaner</p>",
        "id": 198815866,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590524167
    },
    {
        "content": "<p>far fewer generics, for sure</p>",
        "id": 198815895,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590524186
    },
    {
        "content": "<p>I guess that raises the question of whether to move recursive solver into chalk-engine crate</p>",
        "id": 198815916,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590524199
    },
    {
        "content": "<p>Fewer generics, fewer \"helper\" functions</p>",
        "id": 198815921,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590524202
    },
    {
        "content": "<p>Hmm</p>",
        "id": 198815939,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590524213
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"251766\">@Areredify</span> what is the status of the semantic-vs-syntactic equality PR?</p>",
        "id": 198815945,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590524217
    },
    {
        "content": "<p>I am battling a bug in the solver</p>",
        "id": 198815966,
        "sender_full_name": "Areredify",
        "timestamp": 1590524230
    },
    {
        "content": "<p>I think Im fairly close</p>",
        "id": 198815979,
        "sender_full_name": "Areredify",
        "timestamp": 1590524239
    },
    {
        "content": "<p>I have a question wrt to the recursive solver. After the particular problems with it are addressed are there plans to try and come up with some more principled ways of comparing it with the SLG. I see there is the goal of putting together benchmarks. I guess that could be one such point of comparison</p>",
        "id": 198816033,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1590524271
    },
    {
        "content": "<p>Somewhere in the process of solving my inference var universe gets mapped to a wrong universe</p>",
        "id": 198816100,
        "sender_full_name": "Areredify",
        "timestamp": 1590524284
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"283967\">@Zahari Dichev</span> we haven't made many plans, but in my view it comes down less to <em>performance</em> than to more qualitiative differences, at least thus far</p>",
        "id": 198816150,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590524315
    },
    {
        "content": "<p>I also did some work this weekend on chalk-engine and how it handles ambiguous results</p>",
        "id": 198816154,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590524317
    },
    {
        "content": "<p>(see <a href=\"https://github.com/rust-lang/chalk/pull/433\">https://github.com/rust-lang/chalk/pull/433</a>)</p>",
        "id": 198816161,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590524319
    },
    {
        "content": "<p>ah interesting</p>",
        "id": 198816265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590524379
    },
    {
        "content": "<p>I have a subgoal <code>AliasEq(&lt;!1_0 as Trait&gt;::Item, ?0)</code>, <code>?0</code> in <code>U1</code>; but when going to solve this subgoal <code>?0</code> gets remapped to <code>U0</code>, and it cant unify with <code>(Trait::Item)&lt;!1_0&gt;</code></p>",
        "id": 198816288,
        "sender_full_name": "Areredify",
        "timestamp": 1590524393
    },
    {
        "content": "<p>Hmm</p>",
        "id": 198816358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590524409
    },
    {
        "content": "<p>I feel like I saw that bug once before</p>",
        "id": 198816366,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590524412
    },
    {
        "content": "<p>Maybe in rustc:P</p>",
        "id": 198816375,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590524422
    },
    {
        "content": "<p>inference variables unifying with placeholders?</p>",
        "id": 198816396,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590524435
    },
    {
        "content": "<p>No, the problem had to do with the universe remapping losing details</p>",
        "id": 198816414,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590524451
    },
    {
        "content": "<p>oh</p>",
        "id": 198816427,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590524454
    },
    {
        "content": "<p>actually <span class=\"user-mention\" data-user-id=\"251766\">@Areredify</span> I think it was on my previous branch that did sem-to-syn-eq :)</p>",
        "id": 198816435,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590524459
    },
    {
        "content": "<p>I should go look if I have a commit somewhere that fixes it</p>",
        "id": 198816456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590524472
    },
    {
        "content": "<p>I remember fixing it, in any case</p>",
        "id": 198816466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590524479
    },
    {
        "content": "<p>You fixed a bug and didn't commit it into master <span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span></p>",
        "id": 198816553,
        "sender_full_name": "Areredify",
        "timestamp": 1590524514
    },
    {
        "content": "<p>/me guilty</p>",
        "id": 198816618,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590524530
    },
    {
        "content": "<p>Well, as long as you also didn't commit a new bug to master, it all evens out</p>",
        "id": 198816658,
        "sender_full_name": "detrumi",
        "timestamp": 1590524556
    },
    {
        "content": "<p>well, seems like we could end the meeting early if we wanted?</p>",
        "id": 198816665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590524562
    },
    {
        "content": "<p>if we're still doing updates, super-tuple and I made good progress on the .chalk file writer, and found two new questions (const values and finding everything necessary for wellformedness)</p>\n<p>Besides that, we've still got some catching up to do with new features</p>",
        "id": 198816718,
        "sender_full_name": "David Ross",
        "timestamp": 1590524587
    },
    {
        "content": "<p>I guess -- if I were going to spend a few hours doing chalk things, what's the most useful? seems like</p>\n<ul>\n<li>reviewing</li>\n<li>writing notes about recursive solve?</li>\n<li>maybe creating some bugs or updating things?</li>\n</ul>",
        "id": 198816745,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590524600
    },
    {
        "content": "<p>Those all sound good</p>",
        "id": 198816856,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590524646
    },
    {
        "content": "<p>If you wanted to <em>write</em> something</p>",
        "id": 198816871,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590524656
    },
    {
        "content": "<p>you <em>could</em> just do the lifetime outlives stuff</p>",
        "id": 198816891,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590524668
    },
    {
        "content": "<p>(since you already have a branch and I keep putting it off)</p>",
        "id": 198816911,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590524679
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E05.2E26/near/198816665\">said</a>:</p>\n<blockquote>\n<p>well, seems like we could end the meeting early if we wanted?</p>\n</blockquote>\n<p>We can discuss the const in writer stuff, I don't think it deserves a whole another meeting</p>",
        "id": 198816965,
        "sender_full_name": "Areredify",
        "timestamp": 1590524706
    },
    {
        "content": "<p>ok, what's the question there?</p>",
        "id": 198817129,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590524764
    },
    {
        "content": "<p>I can go over this</p>",
        "id": 198817183,
        "sender_full_name": "David Ross",
        "timestamp": 1590524789
    },
    {
        "content": "<p>Ayy I fixed the bug</p>",
        "id": 198817214,
        "sender_full_name": "Areredify",
        "timestamp": 1590524804
    },
    {
        "content": "<p>I think the main question is how we should represent const values in .chalk files, especially when those values come from executing the writer within rustc</p>",
        "id": 198817242,
        "sender_full_name": "David Ross",
        "timestamp": 1590524825
    },
    {
        "content": "<p>the first part is representing evaluated constants, which we have a few options for, and the second part being representing unevaluated constants, which I can't think of any way to do besides just not doing it</p>",
        "id": 198817310,
        "sender_full_name": "David Ross",
        "timestamp": 1590524870
    },
    {
        "content": "<p>Can we store the unevaluated constants in a string-like format? Like, if it's <code>{ N * 2 }</code> store it like that?</p>",
        "id": 198817421,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1590524917
    },
    {
        "content": "<p>hmm</p>",
        "id": 198817468,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590524944
    },
    {
        "content": "<p>If a constant stays unevaluated, I don't think it was actually needed for trait solving, so it might not actually be that important to represent it fully</p>",
        "id": 198817475,
        "sender_full_name": "detrumi",
        "timestamp": 1590524948
    },
    {
        "content": "<p>for evaluated constants, I think the two main ideas were to<br>\nA) do a N^2 loop over everything we find, calling const_eq to figure out which are the same<br>\nB) ask the interner to output some kind of data structure we can compare nicely (like having things implement Serialize)</p>",
        "id": 198817478,
        "sender_full_name": "David Ross",
        "timestamp": 1590524951
    },
    {
        "content": "<p>I guess it'd be good to think about our goals exactly too</p>",
        "id": 198817481,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590524953
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"218805\">@Mark Drobnak</span>  We can't, really, because whats if its a function call or dependent on a local variable or something</p>",
        "id": 198817500,
        "sender_full_name": "Areredify",
        "timestamp": 1590524964
    },
    {
        "content": "<p>i.e., in an ideal world, when we use this chalk-solve infra,</p>",
        "id": 198817528,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590524973
    },
    {
        "content": "<p>Can a constant depend on a local variable, or just other constants though?</p>",
        "id": 198817548,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1590524987
    },
    {
        "content": "<p>we get back a test that we can run with chalk's infra without requiring rustc</p>",
        "id": 198817550,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590524987
    },
    {
        "content": "<p>but we probaly won't support the full range of constant expressions etc</p>",
        "id": 198817638,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590525012
    },
    {
        "content": "<p>or at least if we did so it'd basically pull in all of rustc</p>",
        "id": 198817700,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590525060
    },
    {
        "content": "<p>seems like the ideal wuld be to kind of support what constants we <em>can</em> somehow?</p>",
        "id": 198817755,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590525107
    },
    {
        "content": "<p>( not sure what'd be best for the other cases )</p>",
        "id": 198817766,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590525116
    },
    {
        "content": "<p>ok, I'm paging in a bit more. I mean we're instrumenting some of the calls to rustc</p>",
        "id": 198817903,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590525186
    },
    {
        "content": "<p>so this also comes back to \"what is the interface for const evaluation to the surrounding environment\",  right?</p>",
        "id": 198817927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590525199
    },
    {
        "content": "<p>Try to reparse the span of a MIR body we are given into a basic arithmetic expression involving only variables chalk sees?</p>",
        "id": 198817937,
        "sender_full_name": "Areredify",
        "timestamp": 1590525203
    },
    {
        "content": "<p>e.g., if we see \"evaluate this constant\" and we get back an evaluated constant result</p>",
        "id": 198817943,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590525207
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E05.2E26/near/198817927\">said</a>:</p>\n<blockquote>\n<p>so this also comes back to \"what is the interface for const evaluation to the surrounding environment\",  right?</p>\n</blockquote>\n<p>Exactly</p>",
        "id": 198817956,
        "sender_full_name": "Areredify",
        "timestamp": 1590525221
    },
    {
        "content": "<p>in principle we could \"encode\" that in a <code>.chalk</code> file via some kind of declaration that says</p>\n<p>\"a constant that, when evaluated with these parameters, yields this result\"</p>\n<p>except for the extra that fun that doing so might (e.g.) result in recursive trait solving, not sure how relevant that is</p>",
        "id": 198818031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590525250
    },
    {
        "content": "<p>I'm of the opinion that we should start out extremely simple</p>",
        "id": 198818101,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590525318
    },
    {
        "content": "<p>do you think adding that infrastructure to the chalk&lt;-&gt;rustc interface would be worth it for supporting this case?</p>",
        "id": 198818105,
        "sender_full_name": "David Ross",
        "timestamp": 1590525322
    },
    {
        "content": "<p>Is it possible to pre-evaluate all of the constants?</p>",
        "id": 198818112,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1590525329
    },
    {
        "content": "<p>I was just wondering \"what's the simplest thing that can possibly work\"</p>",
        "id": 198818117,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590525331
    },
    {
        "content": "<p>I guess \"not supporting constants\", probably :)</p>",
        "id": 198818121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590525334
    },
    {
        "content": "<p>that's what I was about to say</p>",
        "id": 198818138,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590525346
    },
    {
        "content": "<p>or translating them all to the number <code>22</code> or whatever</p>",
        "id": 198818146,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590525350
    },
    {
        "content": "<p>I really would like to get something landed :)</p>",
        "id": 198818213,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590525365
    },
    {
        "content": "<p>right</p>",
        "id": 198818223,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590525370
    },
    {
        "content": "<p>especially for parts where there isn't really a design problem</p>",
        "id": 198818238,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590525380
    },
    {
        "content": "<p>Does rust-analyzer handle consts?</p>",
        "id": 198818274,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590525397
    },
    {
        "content": "<p>At least not through Chalk yet, right?</p>",
        "id": 198818315,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590525418
    },
    {
        "content": "<p>(cc <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> )</p>",
        "id": 198818351,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590525443
    },
    {
        "content": "<p>I would guess no, I don't think we're using them much in libstd, and they're not standard Rust</p>",
        "id": 198818368,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590525456
    },
    {
        "content": "<p>well modulo array types I guess :)</p>",
        "id": 198818376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590525462
    },
    {
        "content": "<p>right</p>",
        "id": 198818396,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590525473
    },
    {
        "content": "<p>so I think even if we don't support consts <em>at all</em> intitially</p>",
        "id": 198818455,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590525488
    },
    {
        "content": "<p>anyway I definitely think concerns about this should not block a PR from landing</p>",
        "id": 198818460,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590525491
    },
    {
        "content": "<p>I'd be fine with just <code>panic!(\"TBD\")</code></p>",
        "id": 198818467,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590525498
    },
    {
        "content": "<p>yep</p>",
        "id": 198818472,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590525503
    },
    {
        "content": "<p>alright - just not supporting constants sounds reasonable to me</p>",
        "id": 198818478,
        "sender_full_name": "David Ross",
        "timestamp": 1590525505
    },
    {
        "content": "<p>speaking of design problems though, I have another potential one from the .chalk writer if we have time?</p>",
        "id": 198818484,
        "sender_full_name": "David Ross",
        "timestamp": 1590525511
    },
    {
        "content": "<p>we have time :)</p>",
        "id": 198818493,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590525519
    },
    {
        "content": "<p>(time check: 22 minutes left to fill)</p>",
        "id": 198818520,
        "sender_full_name": "detrumi",
        "timestamp": 1590525535
    },
    {
        "content": "<p>cool! the other thing we ran into was how the writer should find things necessary for well-formedness</p>",
        "id": 198818526,
        "sender_full_name": "David Ross",
        "timestamp": 1590525538
    },
    {
        "content": "<p>can you give an example of what you mean?</p>",
        "id": 198818553,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590525562
    },
    {
        "content": "<p>e.i., if some goal queries for a trait impl and we record that trait and struct, how do we then find all the other impls/traits/structs necessary to make the impl sound?</p>",
        "id": 198818561,
        "sender_full_name": "David Ross",
        "timestamp": 1590525568
    },
    {
        "content": "<p>i'll grab a piece of code</p>",
        "id": 198818567,
        "sender_full_name": "David Ross",
        "timestamp": 1590525572
    },
    {
        "content": "<p>we don't handle consts at all in RA currently, we even ignore array sizes</p>",
        "id": 198818605,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1590525586
    },
    {
        "content": "<p>oh, hmm, like if the surrounding program didn't try to prove the impl sound?</p>",
        "id": 198818606,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590525587
    },
    {
        "content": "<p>that brings up a related question</p>",
        "id": 198818624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590525602
    },
    {
        "content": "<p>Ah - I mean the surrounding program does prove the impl sound, but we aren't currently grabbing the whole surrounding program</p>",
        "id": 198818685,
        "sender_full_name": "David Ross",
        "timestamp": 1590525614
    },
    {
        "content": "<p>I've never been totally happy with how the chalk tests \"implicitly\" run coherence + WF checks on the test cases</p>",
        "id": 198818703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590525626
    },
    {
        "content": "<p>partly because it makes the debug output annoyingly verbose :P</p>",
        "id": 198818752,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590525658
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"218710\">@David Ross</span> maybe I am missing a bit of basic context, but I've been assuming that you will aggregate all the info that chalk ever requests, right? (and dump it out)</p>",
        "id": 198818791,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590525686
    },
    {
        "content": "<p>For example, if the query \"S: Child\" is run on this:</p>\n<div class=\"codehilite\"><pre><span></span><code>struct S {}\n\ntrait Parent {}\ntrait Child where Self: Parent {}\nimpl Parent for S {}\nimpl Child for S {}\n</code></pre></div>\n\n\n<p>our current strategy of just recording all the types going through the RustIrDatabase  completely misses that <code>Parent</code> exists, and also the <code>impl Child for Parent {}</code> impl</p>",
        "id": 198818793,
        "sender_full_name": "David Ross",
        "timestamp": 1590525687
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> hehe see <a href=\"https://github.com/rust-lang/chalk/issues/299\">https://github.com/rust-lang/chalk/issues/299</a></p>",
        "id": 198818805,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590525694
    },
    {
        "content": "<p>right - we could definitely do that. We're currently skipping the well formedness / coherence stuff from the tests since it seemed like that would just always grab the whole program</p>",
        "id": 198818898,
        "sender_full_name": "David Ross",
        "timestamp": 1590525738
    },
    {
        "content": "<p>and I thought part of the point was to grab a minimal subset of it?</p>",
        "id": 198818917,
        "sender_full_name": "David Ross",
        "timestamp": 1590525750
    },
    {
        "content": "<p>I guess the question is</p>",
        "id": 198818925,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590525753
    },
    {
        "content": "<p>well hmm</p>",
        "id": 198818934,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590525762
    },
    {
        "content": "<p>I was going to say why do you care that <code>Parent</code> etc exists</p>",
        "id": 198818979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590525787
    },
    {
        "content": "<p>but if you don't have it then it's not even that the \"wf checks\" and coherence checks will fail, but basic name resolution</p>",
        "id": 198819024,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590525809
    },
    {
        "content": "<p>still, in order to execute the test, if you <em>disable</em> the \"WF checks\", all you would need is to know the trait exists (and not to know about the <code>impl Parent for S</code>)</p>",
        "id": 198819124,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590525855
    },
    {
        "content": "<p>right?</p>",
        "id": 198819137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590525864
    },
    {
        "content": "<p>hmm yeah - that seems reasonable. We could just disable WF checks on the result, then?</p>",
        "id": 198819160,
        "sender_full_name": "David Ross",
        "timestamp": 1590525881
    },
    {
        "content": "<p>I'm just musing out loud; but it seems plausible that we could have some kind of \"closure\" check that goes to look for \"traits and types references from where clauses\" or something</p>",
        "id": 198819176,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590525890
    },
    {
        "content": "<p>(or we just generate dummy descriptions even, if they are missing..?)</p>",
        "id": 198819208,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590525915
    },
    {
        "content": "<p>for passing name resolution, one solution was to do a callback and ensure we \"find\" every name we print</p>",
        "id": 198819212,
        "sender_full_name": "David Ross",
        "timestamp": 1590525918
    },
    {
        "content": "<p>right, that's I think what I meant by \"closure\" check</p>",
        "id": 198819244,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590525941
    },
    {
        "content": "<p>not closure in the \"anonymous function\" sense, but the more mathematical sense</p>",
        "id": 198819261,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590525953
    },
    {
        "content": "<p>ah hm</p>",
        "id": 198819314,
        "sender_full_name": "David Ross",
        "timestamp": 1590525968
    },
    {
        "content": "<p>i.e., finding all the things that are transitively referenced</p>",
        "id": 198819321,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590525972
    },
    {
        "content": "<p>that seems like a reasonable solution, as long as we're OK with not producing well formed code</p>",
        "id": 198819337,
        "sender_full_name": "David Ross",
        "timestamp": 1590525989
    },
    {
        "content": "<p>( but I'm wondering about dummy descriptions now :)</p>",
        "id": 198819344,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590525994
    },
    {
        "content": "<p>seems like that might wind up causing more problems, idk</p>",
        "id": 198819372,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590526020
    },
    {
        "content": "<p>we could make dummy ones, or just ask the underlying db for the real ones? it might make a larger file, but it shouldn't contain anything totally irrelevant</p>",
        "id": 198819394,
        "sender_full_name": "David Ross",
        "timestamp": 1590526032
    },
    {
        "content": "<p>i.e., if we just said \"well they never requested this trait <code>Parent</code>, let's just emit <code>trait Parent { }</code>)</p>",
        "id": 198819399,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590526035
    },
    {
        "content": "<p>perhaps while dumping things out</p>",
        "id": 198819416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590526045
    },
    {
        "content": "<p>it would be different if you had e.g.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">B</span>: <span class=\"nc\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">C</span>: <span class=\"nc\">B</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>and a goal of <code>Foo: C</code></p>",
        "id": 198819459,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590526069
    },
    {
        "content": "<p>a true transitive algorithm would dump both <code>A</code> and <code>B</code>, but a dummy def'n might just be <code>trait B { }</code></p>",
        "id": 198819496,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590526082
    },
    {
        "content": "<p>anyway the real question is \"are we ok with non-WF results\"</p>",
        "id": 198819559,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590526100
    },
    {
        "content": "<p>and it seems like .. \"maybe?\"</p>",
        "id": 198819568,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590526107
    },
    {
        "content": "<p>I can see both being useful</p>",
        "id": 198819570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590526111
    },
    {
        "content": "<p>if we <em>did</em> want WF results, we'd have to actually run the WF checks I guess</p>",
        "id": 198819594,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590526123
    },
    {
        "content": "<p>It sounds like it's just a space-saving measure, going with the non-WF results?</p>",
        "id": 198819615,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1590526137
    },
    {
        "content": "<p>it could also make the results more clear if they don't contain extraneous details, maybe?</p>",
        "id": 198819800,
        "sender_full_name": "David Ross",
        "timestamp": 1590526227
    },
    {
        "content": "<p>yeah that's what I was thinking</p>",
        "id": 198819860,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590526263
    },
    {
        "content": "<p>otoh</p>",
        "id": 198819864,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590526266
    },
    {
        "content": "<p>Is that worth possibly incorrect results?</p>",
        "id": 198819867,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1590526268
    },
    {
        "content": "<p>for example, if the bug is in one submodule, and we run well-formedness on the entire crate, as I understand it that'd bring in all types in the crate (and maybe dependencies? not sure)</p>",
        "id": 198819870,
        "sender_full_name": "David Ross",
        "timestamp": 1590526271
    },
    {
        "content": "<p>well wait</p>",
        "id": 198819888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590526278
    },
    {
        "content": "<p>I wouldn't want to run on the whole crate, though that might be how things are setup -- and indeed maybe it'd be hard to avoid?</p>",
        "id": 198819909,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590526289
    },
    {
        "content": "<p>but I was hoping we could run the checks just on the things we've gathered up (again there'd be a transitive nature to it)</p>",
        "id": 198819924,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590526299
    },
    {
        "content": "<p>but keep in mind that</p>",
        "id": 198819936,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590526308
    },
    {
        "content": "<p>the original input may also not be WF</p>",
        "id": 198819944,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590526313
    },
    {
        "content": "<p>not sure how much that matters...</p>",
        "id": 198819952,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590526317
    },
    {
        "content": "<p>I would say ti's prob better to start with non-WF results</p>",
        "id": 198820007,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590526328
    },
    {
        "content": "<p>as it seems simpler</p>",
        "id": 198820032,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590526335
    },
    {
        "content": "<p>Agreed</p>",
        "id": 198820193,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590526436
    },
    {
        "content": "<p>if it's easy to run the WF check on a subset of types in a crate, then I'd say we could just do that, but not having WF output is definitely an <del>easier</del> faster solution</p>",
        "id": 198820195,
        "sender_full_name": "David Ross",
        "timestamp": 1590526437
    },
    {
        "content": "<p>it seems like non-WF output is a good starting point</p>",
        "id": 198820417,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590526541
    },
    {
        "content": "<p>we can add WF support later</p>",
        "id": 198820429,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590526549
    },
    {
        "content": "<p>it would basically mean some kind of \"pre-dump\" step</p>",
        "id": 198820440,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590526556
    },
    {
        "content": "<p>that goes ahead and does the required WF solving on as narrow a basis as we can manage :)</p>",
        "id": 198820495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590526566
    },
    {
        "content": "<p>(it should be possible to do per-type, per-trait, per-impl)</p>",
        "id": 198820512,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590526578
    },
    {
        "content": "<p>Which also brings in the discussion on what we want to do for WF checks</p>",
        "id": 198820581,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590526614
    },
    {
        "content": "<p>Okay, 3 minutes left</p>",
        "id": 198820635,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590526658
    },
    {
        "content": "<p>and other quick points?</p>",
        "id": 198820647,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590526664
    },
    {
        "content": "<p>well there are two sets of WF checks I think</p>",
        "id": 198820653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590526669
    },
    {
        "content": "<p>just to clarify, though indeed we are quite short of time</p>",
        "id": 198820667,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590526678
    },
    {
        "content": "<p>though I guess they're related</p>",
        "id": 198820719,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590526685
    },
    {
        "content": "<p>but I think we want to have a way that the \"chalk embedded\" can enable high-level goals like \"do whatever checks are required for this impl/struct/trait declaration to be legal\"</p>",
        "id": 198820754,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590526707
    },
    {
        "content": "<p>(which is probably what we would need here)</p>",
        "id": 198820764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590526714
    },
    {
        "content": "<p>but we also want to define what it means for a <em>type</em> (not a struct declaration) to be well-formed, since e.g. when you call a function you have to ensure that the arguments you supply are well-formed, and so forth, and that ties into the implie-bounds things</p>",
        "id": 198820822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590526752
    },
    {
        "content": "<p>the latter are always definitely \"goals\" like <code>WellFormed(T)</code> (which we already have), but the former .. well, theyy could be goals, but they might also be some other interface?</p>",
        "id": 198820861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590526776
    },
    {
        "content": "<p>makes sense</p>",
        "id": 198821012,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590526834
    },
    {
        "content": "<p>Anyways, that's the hour</p>",
        "id": 198821027,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590526844
    },
    {
        "content": "<p>thanks everyone for coming :)</p>",
        "id": 198821031,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590526849
    },
    {
        "content": "<p>great discussion!</p>",
        "id": 198821039,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590526854
    }
]